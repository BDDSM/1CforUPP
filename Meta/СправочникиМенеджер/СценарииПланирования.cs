
using System;
using System.Data.SqlClient;
using V82;
using V82.СправочникиСсылка;
using V82.Справочники;//Менеджер;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.Справочники//Менеджер
{
	///<summary>
	///(Упр)
	///</summary>
	public partial class СценарииПланирования:СправочникМенеджер
	{

		public static СправочникиСсылка.СценарииПланирования НайтиПоКоду(decimal Код)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_IsMetadata [Предопределенный]
					,_Code [Код]
					,_Description [Наименование]
					,_Fld3860RRef [Периодичность]
					,_Fld3861RRef [ДетализацияПланирования]
					,_Fld3862 [УчетПоСуммам]
					,_Fld3863 [УчетПоКоличеству]
					,_Fld3864RRef [Валюта]
					,_Fld3865RRef [СпособПланирования]
					,_Fld3866 [ПродолжительностьЦикла]
					,_Fld3867 [НачалоПлана]
					,_Fld3868 [КонецПлана]
					,_Fld3869 [НормаДоходности]
					,_Fld3870 [ИспользоватьКурсыСценария]
					From _Reference255(NOLOCK)
					Where _Code=@Код";
					Команда.Parameters.AddWithValue("Код", Код);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							var Ссылка = new СправочникиСсылка.СценарииПланирования();
		
							Ссылка.Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Ссылка.Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							Ссылка.ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1?true:false;
							Ссылка.Предопределенный = ((byte[])Читалка.GetValue(3))[0]==1?true:false;
							Ссылка.Код = Читалка.GetString(4);
							Ссылка.Наименование = Читалка.GetString(5);
							Ссылка.Периодичность = V82.Перечисления/*Ссылка*/.Периодичность.ПустаяСсылка.Получить((byte[])Читалка.GetValue(6));
							Ссылка.ДетализацияПланирования = V82.Перечисления/*Ссылка*/.ДетализацияПланирования.ПустаяСсылка.Получить((byte[])Читалка.GetValue(7));
							Ссылка.УчетПоСуммам = ((byte[])Читалка.GetValue(8))[0]==1?true:false;
							Ссылка.УчетПоКоличеству = ((byte[])Читалка.GetValue(9))[0]==1?true:false;
							//Ссылка.Валюта = new V82.СправочникиСсылка.Валюты((byte[])Читалка.GetValue(10));
							Ссылка.СпособПланирования = V82.Перечисления/*Ссылка*/.СпособыПланирования.ПустаяСсылка.Получить((byte[])Читалка.GetValue(11));
							Ссылка.ПродолжительностьЦикла = Читалка.GetDecimal(12);
							Ссылка.НачалоПлана = Читалка.GetDateTime(13);
							Ссылка.КонецПлана = Читалка.GetDateTime(14);
							Ссылка.НормаДоходности = Читалка.GetDecimal(15);
							Ссылка.ИспользоватьКурсыСценария = ((byte[])Читалка.GetValue(16))[0]==1?true:false;
							return Ссылка;
						}
						else
						{
							return null;
						}
					}
				}
			}
		}

		public static СправочникиВыборка.СценарииПланирования Выбрать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1000 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_IsMetadata [Предопределенный]
					,_Code [Код]
					,_Description [Наименование],_Fld3860RRef [Периодичность],_Fld3861RRef [ДетализацияПланирования],_Fld3862 [УчетПоСуммам],_Fld3863 [УчетПоКоличеству],_Fld3864RRef [Валюта],_Fld3865RRef [СпособПланирования],_Fld3866 [ПродолжительностьЦикла],_Fld3867 [НачалоПлана],_Fld3868 [КонецПлана],_Fld3869 [НормаДоходности],_Fld3870 [ИспользоватьКурсыСценария]
		 From _Reference255(NOLOCK)";
					var Выборка = new V82.СправочникиВыборка.СценарииПланирования();
					using (var Читалка = Команда.ExecuteReader())
					{
						while (Читалка.Read())
						{
							var Ссылка = new СправочникиСсылка.СценарииПланирования();
		
							Ссылка.Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Ссылка.Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							Ссылка.ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1?true:false;
							Ссылка.Предопределенный = ((byte[])Читалка.GetValue(3))[0]==1?true:false;
							Ссылка.Код = Читалка.GetString(4);
							Ссылка.Наименование = Читалка.GetString(5);
							Ссылка.Периодичность = V82.Перечисления/*Ссылка*/.Периодичность.ПустаяСсылка.Получить((byte[])Читалка.GetValue(6));
							Ссылка.ДетализацияПланирования = V82.Перечисления/*Ссылка*/.ДетализацияПланирования.ПустаяСсылка.Получить((byte[])Читалка.GetValue(7));
							Ссылка.УчетПоСуммам = ((byte[])Читалка.GetValue(8))[0]==1?true:false;
							Ссылка.УчетПоКоличеству = ((byte[])Читалка.GetValue(9))[0]==1?true:false;
							//Ссылка.Валюта = new V82.СправочникиСсылка.Валюты((byte[])Читалка.GetValue(10));
							Ссылка.СпособПланирования = V82.Перечисления/*Ссылка*/.СпособыПланирования.ПустаяСсылка.Получить((byte[])Читалка.GetValue(11));
							Ссылка.ПродолжительностьЦикла = Читалка.GetDecimal(12);
							Ссылка.НачалоПлана = Читалка.GetDateTime(13);
							Ссылка.КонецПлана = Читалка.GetDateTime(14);
							Ссылка.НормаДоходности = Читалка.GetDecimal(15);
							Ссылка.ИспользоватьКурсыСценария = ((byte[])Читалка.GetValue(16))[0]==1?true:false;
							Выборка.Add(Ссылка);
						}
							return Выборка;
					}
				}
			}
		}

		public static V82.СправочникиОбъект.СценарииПланирования СоздатьЭлемент()
		{
			var Объект = new V82.СправочникиОбъект.СценарииПланирования();
			Объект._ЭтоНовый = true;
			Объект.Ссылка = Guid.NewGuid();/*http://msdn.microsoft.com/ru-ru/library/aa379322(VS.85).aspx*/
			Объект.ЭтоГруппа = false;
			Объект.Периодичность = V82.Перечисления/*Ссылка*/.Периодичность.ПустаяСсылка;
			Объект.ДетализацияПланирования = V82.Перечисления/*Ссылка*/.ДетализацияПланирования.ПустаяСсылка;
			Объект.Валюта = new V82.СправочникиСсылка.Валюты();
			Объект.СпособПланирования = V82.Перечисления/*Ссылка*/.СпособыПланирования.ПустаяСсылка;
			return Объект;
		}
	}
}
