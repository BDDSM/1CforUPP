
using System;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
	public enum ВидыОперацийЗаявкаНаСертификациюНоменклатуры
	{
		ПустаяСсылка = - 1,
		Внутренняя = 0,
		Внешняя = 1,
	}
	public static partial class ВидыОперацийЗаявкаНаСертификациюНоменклатуры_Значения//:ПеречислениеСсылка
	{
		public static readonly Guid Внутренняя = new Guid("76c26b95-65e6-a2a6-4617-685a54694357");
		public static readonly Guid Внешняя = new Guid("ce72e5bf-b34f-8b47-495e-c18e52bfa3ab");
		public static ВидыОперацийЗаявкаНаСертификациюНоменклатуры Получить(this ВидыОперацийЗаявкаНаСертификациюНоменклатуры Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ВидыОперацийЗаявкаНаСертификациюНоменклатуры Получить(this ВидыОперацийЗаявкаНаСертификациюНоменклатуры Значение, Guid Ссылка)
		{
			if(Ссылка == Внутренняя)
			{
				return ВидыОперацийЗаявкаНаСертификациюНоменклатуры.Внутренняя;
			}
			else if(Ссылка == Внешняя)
			{
				return ВидыОперацийЗаявкаНаСертификациюНоменклатуры.Внешняя;
			}
			return ВидыОперацийЗаявкаНаСертификациюНоменклатуры.ПустаяСсылка;
		}
		public static byte[] Ключ(this ВидыОперацийЗаявкаНаСертификациюНоменклатуры Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ВидыОперацийЗаявкаНаСертификациюНоменклатуры Значение)
		{
			switch (Значение)
			{
				case ВидыОперацийЗаявкаНаСертификациюНоменклатуры.Внутренняя: return Внутренняя;
				case ВидыОперацийЗаявкаНаСертификациюНоменклатуры.Внешняя: return Внешняя;
			}
			return Guid.Empty;
		}
	}
}