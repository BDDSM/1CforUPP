
using System;
using V82;
using V82.ѕеречислени€;//—сылка;
namespace V82.ѕеречислени€//—сылка
{
		///<summary>
		///(ќбщ) ѕредназначено дл€ указани€ способа регистрации времени разовых начислений и невыходов (целосменный или часовой)
		///</summary>
	public enum —пособы–егистрации¬ремени
	{
		ѕуста€—сылка = - 1,
		–егистраци€ƒл€÷елой—мены = 0,//÷елосменна€ регистраци€ времени
		–егистраци€ƒл€„асти—мены = 1,//–егистраци€ времени в часах
	}
	public static partial class —пособы–егистрации¬ремени_«начени€//:ѕеречисление—сылка
	{
		public static readonly Guid –егистраци€ƒл€÷елой—мены = new Guid("59c9088f-8134-8197-4458-4466a6ff4ec4");//÷елосменна€ регистраци€ времени
		public static readonly Guid –егистраци€ƒл€„асти—мены = new Guid("9c21fe9c-547d-6486-4f48-c866f232c059");//–егистраци€ времени в часах
		public static —пособы–егистрации¬ремени ѕолучить(this —пособы–егистрации¬ремени «начение, byte[] —сылка)
		{
			return ѕолучить(«начение, new Guid(—сылка));
		}
		public static —пособы–егистрации¬ремени ѕолучить(this —пособы–егистрации¬ремени «начение, Guid —сылка)
		{
			if(—сылка == –егистраци€ƒл€÷елой—мены)
			{
				return —пособы–егистрации¬ремени.–егистраци€ƒл€÷елой—мены;
			}
			else if(—сылка == –егистраци€ƒл€„асти—мены)
			{
				return —пособы–егистрации¬ремени.–егистраци€ƒл€„асти—мены;
			}
			return —пособы–егистрации¬ремени.ѕуста€—сылка;
		}
		public static byte[]  люч(this —пособы–егистрации¬ремени «начение)
		{
			return —сылка(«начение).ToByteArray();
		}
		public static Guid —сылка(this —пособы–егистрации¬ремени «начение)
		{
			switch («начение)
			{
				case —пособы–егистрации¬ремени.–егистраци€ƒл€÷елой—мены: return –егистраци€ƒл€÷елой—мены;
				case —пособы–егистрации¬ремени.–егистраци€ƒл€„асти—мены: return –егистраци€ƒл€„асти—мены;
			}
			return Guid.Empty;
		}
	}
}
