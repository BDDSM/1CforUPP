
using System;
using System.Runtime.Serialization;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
	///<summary>
	///(Упр)
	///</summary>
	[DataContract]
	public enum ВидыСтрокФинансовогоРасчета
	{
		[NonSerialized]
		ПустаяСсылка = - 1,
		[EnumMember(Value = "{\"Ссылка\":\"02bd9e02-63a2-41d6-922e-5d97d3df7fef\", \"Представление\":\"ОборотыПоСтатьеОборотов\"}")]
		ОборотыПоСтатьеОборотов = 0,//Обороты по статье оборотов
		[EnumMember(Value = "{\"Ссылка\":\"c393b6c0-beb3-4965-9dd8-868969576ee5\", \"Представление\":\"ОстаткиОборотыПоПлануСчетов\"}")]
		ОстаткиОборотыПоПлануСчетов = 1,//Остатки или обороты по плану счетов
		[EnumMember(Value = "{\"Ссылка\":\"f6450abd-cc57-4524-acfa-04a393aef9e1\", \"Представление\":\"РасчетПоДругимСтрокамОтчета\"}")]
		РасчетПоДругимСтрокамОтчета = 2,//Расчет по другим строкам отчета
		[EnumMember(Value = "{\"Ссылка\":\"4a6a40a7-5c5a-412a-8762-083c5bcf8819\", \"Представление\":\"ИсточникиДанныхДляРасчетов\"}")]
		ИсточникиДанныхДляРасчетов = 3,//Источники данных для расчетов
	}
	public static partial class ВидыСтрокФинансовогоРасчета_Значения//:ПеречислениеСсылка
	{
		public static readonly Guid ОборотыПоСтатьеОборотов = new Guid("975d2e92-dfd3-ef7f-41d6-63a202bd9e02");//Обороты по статье оборотов
		public static readonly Guid ОстаткиОборотыПоПлануСчетов = new Guid("8986d89d-5769-e56e-4965-beb3c393b6c0");//Остатки или обороты по плану счетов
		public static readonly Guid РасчетПоДругимСтрокамОтчета = new Guid("a304faac-ae93-e1f9-4524-cc57f6450abd");//Расчет по другим строкам отчета
		public static readonly Guid ИсточникиДанныхДляРасчетов = new Guid("3c086287-cf5b-1988-412a-5c5a4a6a40a7");//Источники данных для расчетов
		public static ВидыСтрокФинансовогоРасчета Получить(this ВидыСтрокФинансовогоРасчета Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ВидыСтрокФинансовогоРасчета Получить(this ВидыСтрокФинансовогоРасчета Значение, Guid Ссылка)
		{
			if(Ссылка == ОборотыПоСтатьеОборотов)
			{
				return ВидыСтрокФинансовогоРасчета.ОборотыПоСтатьеОборотов;
			}
			else if(Ссылка == ОстаткиОборотыПоПлануСчетов)
			{
				return ВидыСтрокФинансовогоРасчета.ОстаткиОборотыПоПлануСчетов;
			}
			else if(Ссылка == РасчетПоДругимСтрокамОтчета)
			{
				return ВидыСтрокФинансовогоРасчета.РасчетПоДругимСтрокамОтчета;
			}
			else if(Ссылка == ИсточникиДанныхДляРасчетов)
			{
				return ВидыСтрокФинансовогоРасчета.ИсточникиДанныхДляРасчетов;
			}
			return ВидыСтрокФинансовогоРасчета.ПустаяСсылка;
		}
		public static byte[] Ключ(this ВидыСтрокФинансовогоРасчета Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ВидыСтрокФинансовогоРасчета Значение)
		{
			switch (Значение)
			{
				case ВидыСтрокФинансовогоРасчета.ОборотыПоСтатьеОборотов: return ОборотыПоСтатьеОборотов;
				case ВидыСтрокФинансовогоРасчета.ОстаткиОборотыПоПлануСчетов: return ОстаткиОборотыПоПлануСчетов;
				case ВидыСтрокФинансовогоРасчета.РасчетПоДругимСтрокамОтчета: return РасчетПоДругимСтрокамОтчета;
				case ВидыСтрокФинансовогоРасчета.ИсточникиДанныхДляРасчетов: return ИсточникиДанныхДляРасчетов;
			}
			return Guid.Empty;
		}
	}
}