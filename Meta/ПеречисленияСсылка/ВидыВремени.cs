
using System;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
	public enum ВидыВремени
	{
		ПустаяСсылка = - 1,
	///<summary>
	///Начисление за работу полную рабочую смену в пределах нормы времени
	///</summary>
		ОтработанноеВПределахНормы = 0,//Отработанное время в пределах нормы времени
	///<summary>
	///Начисление за работу сверх нормы времени
	///</summary>
		ОтработанноеСверхНормы = 1,//Отработанное время сверх нормы времени
	///<summary>
	///Неотработанные полные смены
	///</summary>
		ЦелодневноеНеотработанное = 2,//Целодневное неотработанное время и командировки
	///<summary>
	///Неотработанные неполные смены
	///</summary>
		ЧасовоеНеотработанное = 3,//Часовое неотработанное время и командировки
	///<summary>
	///Дополнительное начисление в пределах нормы времени
	///</summary>
		ДополнительноОплачиваемоеВПределахНормы = 4,//Дополнительно оплачиваемое время в пределах нормы времени
	///<summary>
	///Начисление за работу неполную смену в пределах нормы времени
	///</summary>
		ЧасовоеОтработанноеВПределахНормы = 5,//Часовое отработанное в пределах нормы
	}
	public static partial class ВидыВремени_Значения//:ПеречислениеСсылка
	{
		///<summary>
		///Начисление за работу полную рабочую смену в пределах нормы времени
		///</summary>
		public static readonly Guid ОтработанноеВПределахНормы = new Guid("0861898b-4690-2ef5-4ff7-aa087c0b9e9c");//Отработанное время в пределах нормы времени
		///<summary>
		///Начисление за работу сверх нормы времени
		///</summary>
		public static readonly Guid ОтработанноеСверхНормы = new Guid("6717289a-1ead-0953-4b0a-4d08743d3b2d");//Отработанное время сверх нормы времени
		///<summary>
		///Неотработанные полные смены
		///</summary>
		public static readonly Guid ЦелодневноеНеотработанное = new Guid("c0a581aa-2bfe-6da0-43e7-bd82d4eed15a");//Целодневное неотработанное время и командировки
		///<summary>
		///Неотработанные неполные смены
		///</summary>
		public static readonly Guid ЧасовоеНеотработанное = new Guid("6168fbbb-ccc3-6394-4a44-f29a4153ab8d");//Часовое неотработанное время и командировки
		///<summary>
		///Дополнительное начисление в пределах нормы времени
		///</summary>
		public static readonly Guid ДополнительноОплачиваемоеВПределахНормы = new Guid("15063eac-9869-e296-4aec-772d4bab9129");//Дополнительно оплачиваемое время в пределах нормы времени
		///<summary>
		///Начисление за работу неполную смену в пределах нормы времени
		///</summary>
		public static readonly Guid ЧасовоеОтработанноеВПределахНормы = new Guid("af1bfc9b-22ca-f2a0-4670-d6118d626226");//Часовое отработанное в пределах нормы
		public static ВидыВремени Получить(this ВидыВремени Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ВидыВремени Получить(this ВидыВремени Значение, Guid Ссылка)
		{
			if(Ссылка == ОтработанноеВПределахНормы)
			{
				return ВидыВремени.ОтработанноеВПределахНормы;
			}
			else if(Ссылка == ОтработанноеСверхНормы)
			{
				return ВидыВремени.ОтработанноеСверхНормы;
			}
			else if(Ссылка == ЦелодневноеНеотработанное)
			{
				return ВидыВремени.ЦелодневноеНеотработанное;
			}
			else if(Ссылка == ЧасовоеНеотработанное)
			{
				return ВидыВремени.ЧасовоеНеотработанное;
			}
			else if(Ссылка == ДополнительноОплачиваемоеВПределахНормы)
			{
				return ВидыВремени.ДополнительноОплачиваемоеВПределахНормы;
			}
			else if(Ссылка == ЧасовоеОтработанноеВПределахНормы)
			{
				return ВидыВремени.ЧасовоеОтработанноеВПределахНормы;
			}
			return ВидыВремени.ПустаяСсылка;
		}
		public static byte[] Ключ(this ВидыВремени Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ВидыВремени Значение)
		{
			switch (Значение)
			{
				case ВидыВремени.ОтработанноеВПределахНормы: return ОтработанноеВПределахНормы;
				case ВидыВремени.ОтработанноеСверхНормы: return ОтработанноеСверхНормы;
				case ВидыВремени.ЦелодневноеНеотработанное: return ЦелодневноеНеотработанное;
				case ВидыВремени.ЧасовоеНеотработанное: return ЧасовоеНеотработанное;
				case ВидыВремени.ДополнительноОплачиваемоеВПределахНормы: return ДополнительноОплачиваемоеВПределахНормы;
				case ВидыВремени.ЧасовоеОтработанноеВПределахНормы: return ЧасовоеОтработанноеВПределахНормы;
			}
			return Guid.Empty;
		}
	}
}