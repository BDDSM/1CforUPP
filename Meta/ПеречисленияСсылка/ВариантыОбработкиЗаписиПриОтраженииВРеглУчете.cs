
using System;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
	public enum ВариантыОбработкиЗаписиПриОтраженииВРеглУчете
	{
		ПустаяСсылка = - 1,
		НеОбрабатывать = 0,//Не обрабатывать
		БольничныйТравмаНаПроизводстве = 1,//Больничный травма на производстве
		ОтпускПоБеременностиИРодамПоУходуЗаРебенком = 2,//Отпуск по беременности и родам, по уходу за ребенком
		БольничныйПрочий = 3,//Больничный прочий
		БольничныйОбщееЗаболевание = 4,//Больничный общее заболевание
		БольничныйТравмаНаПроизводствеНовыйСтраховойСлучай = 5,//Больничный травма на производстве новый страховой случай
		ОтпускПоБеременностиИРодамПоУходуЗаРебенкомНовыйСтраховойСлучай = 6,//Отпуск по беременности и родам, по уходу за ребенком, новый страховой случай
		БольничныйПрочийНовыйСтраховойСлучай = 7,//Больничный прочий новый страховой случай
		БольничныйОбщееЗаболеваниеНовыйСтраховойСлучай = 8,//Больничный общее заболевание новый страховой случай
	///<summary>
	///Больничный за счет работодателя
	///</summary>
		БольничныйЗаСчетРаботодателя = 9,//Больничный за счет работодателя
	///<summary>
	///Больничный за счет работодателя новый страховой случай
	///</summary>
		БольничныйЗаСчетРаботодателяНовыйСтраховойСлучай = 10,//Больничный за счет работодателя новый страховой случай
	}
	public static partial class ВариантыОбработкиЗаписиПриОтраженииВРеглУчете_Значения//:ПеречислениеСсылка
	{
		public static readonly Guid НеОбрабатывать = new Guid("3b8a4ba1-5af7-8bae-4acd-d364ba692981");//Не обрабатывать
		public static readonly Guid БольничныйТравмаНаПроизводстве = new Guid("c56b98a0-b5bb-2e0e-4fa9-4a1904152e73");//Больничный травма на производстве
		public static readonly Guid ОтпускПоБеременностиИРодамПоУходуЗаРебенком = new Guid("f2dca5b1-1e8e-28db-4a39-315b130f92fa");//Отпуск по беременности и родам, по уходу за ребенком
		public static readonly Guid БольничныйПрочий = new Guid("66855d8b-b654-3837-431e-0446dddb4397");//Больничный прочий
		public static readonly Guid БольничныйОбщееЗаболевание = new Guid("a718f1b0-08f4-8d39-4bc8-26ed8f9e141c");//Больничный общее заболевание
		public static readonly Guid БольничныйТравмаНаПроизводствеНовыйСтраховойСлучай = new Guid("2558dd8d-f98f-5578-4b85-3c5b43353c44");//Больничный травма на производстве новый страховой случай
		public static readonly Guid ОтпускПоБеременностиИРодамПоУходуЗаРебенкомНовыйСтраховойСлучай = new Guid("68200393-4a79-641a-43e9-4c37606d583f");//Отпуск по беременности и родам, по уходу за ребенком, новый страховой случай
		public static readonly Guid БольничныйПрочийНовыйСтраховойСлучай = new Guid("c6e60aad-b4db-eba3-47ce-9c8efcaf27f1");//Больничный прочий новый страховой случай
		public static readonly Guid БольничныйОбщееЗаболеваниеНовыйСтраховойСлучай = new Guid("ec56f98a-0e3a-9b6d-405a-04276f50c072");//Больничный общее заболевание новый страховой случай
		///<summary>
		///Больничный за счет работодателя
		///</summary>
		public static readonly Guid БольничныйЗаСчетРаботодателя = new Guid("c6193783-6eda-738e-4bb4-b7f1e904f90d");//Больничный за счет работодателя
		///<summary>
		///Больничный за счет работодателя новый страховой случай
		///</summary>
		public static readonly Guid БольничныйЗаСчетРаботодателяНовыйСтраховойСлучай = new Guid("6dee0587-ef49-66bf-48ab-fe2451425392");//Больничный за счет работодателя новый страховой случай
		public static ВариантыОбработкиЗаписиПриОтраженииВРеглУчете Получить(this ВариантыОбработкиЗаписиПриОтраженииВРеглУчете Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ВариантыОбработкиЗаписиПриОтраженииВРеглУчете Получить(this ВариантыОбработкиЗаписиПриОтраженииВРеглУчете Значение, Guid Ссылка)
		{
			if(Ссылка == НеОбрабатывать)
			{
				return ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.НеОбрабатывать;
			}
			else if(Ссылка == БольничныйТравмаНаПроизводстве)
			{
				return ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводстве;
			}
			else if(Ссылка == ОтпускПоБеременностиИРодамПоУходуЗаРебенком)
			{
				return ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком;
			}
			else if(Ссылка == БольничныйПрочий)
			{
				return ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйПрочий;
			}
			else if(Ссылка == БольничныйОбщееЗаболевание)
			{
				return ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболевание;
			}
			else if(Ссылка == БольничныйТравмаНаПроизводствеНовыйСтраховойСлучай)
			{
				return ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводствеНовыйСтраховойСлучай;
			}
			else if(Ссылка == ОтпускПоБеременностиИРодамПоУходуЗаРебенкомНовыйСтраховойСлучай)
			{
				return ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенкомНовыйСтраховойСлучай;
			}
			else if(Ссылка == БольничныйПрочийНовыйСтраховойСлучай)
			{
				return ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйПрочийНовыйСтраховойСлучай;
			}
			else if(Ссылка == БольничныйОбщееЗаболеваниеНовыйСтраховойСлучай)
			{
				return ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболеваниеНовыйСтраховойСлучай;
			}
			else if(Ссылка == БольничныйЗаСчетРаботодателя)
			{
				return ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйЗаСчетРаботодателя;
			}
			else if(Ссылка == БольничныйЗаСчетРаботодателяНовыйСтраховойСлучай)
			{
				return ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйЗаСчетРаботодателяНовыйСтраховойСлучай;
			}
			return ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ПустаяСсылка;
		}
		public static byte[] Ключ(this ВариантыОбработкиЗаписиПриОтраженииВРеглУчете Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ВариантыОбработкиЗаписиПриОтраженииВРеглУчете Значение)
		{
			switch (Значение)
			{
				case ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.НеОбрабатывать: return НеОбрабатывать;
				case ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводстве: return БольничныйТравмаНаПроизводстве;
				case ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенком: return ОтпускПоБеременностиИРодамПоУходуЗаРебенком;
				case ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйПрочий: return БольничныйПрочий;
				case ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболевание: return БольничныйОбщееЗаболевание;
				case ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйТравмаНаПроизводствеНовыйСтраховойСлучай: return БольничныйТравмаНаПроизводствеНовыйСтраховойСлучай;
				case ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.ОтпускПоБеременностиИРодамПоУходуЗаРебенкомНовыйСтраховойСлучай: return ОтпускПоБеременностиИРодамПоУходуЗаРебенкомНовыйСтраховойСлучай;
				case ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйПрочийНовыйСтраховойСлучай: return БольничныйПрочийНовыйСтраховойСлучай;
				case ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйОбщееЗаболеваниеНовыйСтраховойСлучай: return БольничныйОбщееЗаболеваниеНовыйСтраховойСлучай;
				case ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйЗаСчетРаботодателя: return БольничныйЗаСчетРаботодателя;
				case ВариантыОбработкиЗаписиПриОтраженииВРеглУчете.БольничныйЗаСчетРаботодателяНовыйСтраховойСлучай: return БольничныйЗаСчетРаботодателяНовыйСтраховойСлучай;
			}
			return Guid.Empty;
		}
	}
}