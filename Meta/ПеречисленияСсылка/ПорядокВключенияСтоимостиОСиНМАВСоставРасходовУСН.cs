
using System;
using System.Runtime.Serialization;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
	[DataContract]
	public enum ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН
	{
		[NonSerialized]
		ПустаяСсылка = - 1,
		[EnumMember(Value = "{\"Ссылка\":\"30bb16e4-b270-4821-9a04-db2677b6e885\", \"Представление\":\"ВключитьВСоставАмортизируемогоИмущества\"}")]
		ВключитьВСоставАмортизируемогоИмущества = 0,//Включить в состав амортизируемого имущества
		[EnumMember(Value = "{\"Ссылка\":\"ceb7c134-43d5-4d28-95d3-ce68f3b783cb\", \"Представление\":\"ВключитьВСоставРасходов\"}")]
		ВключитьВСоставРасходов = 1,//Включить в состав расходов
		[EnumMember(Value = "{\"Ссылка\":\"c36261e1-321b-4d40-81e9-aa864d15650c\", \"Представление\":\"НеВключатьВСоставРасходов\"}")]
		НеВключатьВСоставРасходов = 2,//Не включать в состав расходов
	}
	public static partial class ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН_Значения//:ПеречислениеСсылка
	{
		public static readonly Guid ВключитьВСоставАмортизируемогоИмущества = new Guid("26db049a-b677-85e8-4821-b27030bb16e4");//Включить в состав амортизируемого имущества
		public static readonly Guid ВключитьВСоставРасходов = new Guid("68ced395-b7f3-cb83-4d28-43d5ceb7c134");//Включить в состав расходов
		public static readonly Guid НеВключатьВСоставРасходов = new Guid("86aae981-154d-0c65-4d40-321bc36261e1");//Не включать в состав расходов
		public static ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН Получить(this ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН Получить(this ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН Значение, Guid Ссылка)
		{
			if(Ссылка == ВключитьВСоставАмортизируемогоИмущества)
			{
				return ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставАмортизируемогоИмущества;
			}
			else if(Ссылка == ВключитьВСоставРасходов)
			{
				return ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставРасходов;
			}
			else if(Ссылка == НеВключатьВСоставРасходов)
			{
				return ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов;
			}
			return ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ПустаяСсылка;
		}
		public static byte[] Ключ(this ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН Значение)
		{
			switch (Значение)
			{
				case ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставАмортизируемогоИмущества: return ВключитьВСоставАмортизируемогоИмущества;
				case ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставРасходов: return ВключитьВСоставРасходов;
				case ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.НеВключатьВСоставРасходов: return НеВключатьВСоставРасходов;
			}
			return Guid.Empty;
		}
	}
}