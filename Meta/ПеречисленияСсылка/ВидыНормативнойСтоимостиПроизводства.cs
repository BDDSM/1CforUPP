
using System;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
		///<summary>
		///(Общ)
		///</summary>
	public enum ВидыНормативнойСтоимостиПроизводства
	{
		ПустаяСсылка = - 1,
	///<summary>
	///(Общ)
	///</summary>
		Рассчитывается = 0,
	///<summary>
	///(Общ)
	///</summary>
		Фиксированная = 1,
	}
	public static partial class ВидыНормативнойСтоимостиПроизводства_Значения//:ПеречислениеСсылка
	{
		///<summary>
		///(Общ)
		///</summary>
		public static readonly Guid Рассчитывается = new Guid("3db71e83-5207-3a72-4a48-6cb4be1efd1a");
		///<summary>
		///(Общ)
		///</summary>
		public static readonly Guid Фиксированная = new Guid("bea2d197-9bf2-87d0-490e-4ab3f115b515");
		public static ВидыНормативнойСтоимостиПроизводства Получить(this ВидыНормативнойСтоимостиПроизводства Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ВидыНормативнойСтоимостиПроизводства Получить(this ВидыНормативнойСтоимостиПроизводства Значение, Guid Ссылка)
		{
			if(Ссылка == Рассчитывается)
			{
				return ВидыНормативнойСтоимостиПроизводства.Рассчитывается;
			}
			else if(Ссылка == Фиксированная)
			{
				return ВидыНормативнойСтоимостиПроизводства.Фиксированная;
			}
			return ВидыНормативнойСтоимостиПроизводства.ПустаяСсылка;
		}
		public static byte[] Ключ(this ВидыНормативнойСтоимостиПроизводства Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ВидыНормативнойСтоимостиПроизводства Значение)
		{
			switch (Значение)
			{
				case ВидыНормативнойСтоимостиПроизводства.Рассчитывается: return Рассчитывается;
				case ВидыНормативнойСтоимостиПроизводства.Фиксированная: return Фиксированная;
			}
			return Guid.Empty;
		}
	}
}
