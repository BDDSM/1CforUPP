
using System;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
		///<summary>
		///(Упр)
		///</summary>
	public enum ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений
	{
		ПустаяСсылка = - 1,
		СуммаВыручки = 0,//Сумма выручки
		СуммаВаловойПрибыли = 1,//Сумма валовой прибыли
		КоличествоПродаж = 2,//Количество продаж
		КоличествоПроданныхТоваров = 3,//Количество проданных товаров
		ИнтервалыМеждуРасходнымиДокументами = 4,//Интервалы между расходными документами
	}
	public static partial class ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений_Значения//:ПеречислениеСсылка
	{
		public static readonly Guid СуммаВыручки = new Guid("c413fa87-8ad2-d0e6-4589-2e3e1dbf0d81");//Сумма выручки
		public static readonly Guid СуммаВаловойПрибыли = new Guid("84fb8081-6174-2b82-4409-703e60b3bd32");//Сумма валовой прибыли
		public static readonly Guid КоличествоПродаж = new Guid("6c03018f-80b9-fe1e-4494-f66236812859");//Количество продаж
		public static readonly Guid КоличествоПроданныхТоваров = new Guid("b0b98199-be3d-8b63-41ea-64cf5535a4dd");//Количество проданных товаров
		public static readonly Guid ИнтервалыМеждуРасходнымиДокументами = new Guid("b90bf9b8-05d9-c5eb-447f-2bf90ed028dc");//Интервалы между расходными документами
		public static ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений Получить(this ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений Получить(this ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений Значение, Guid Ссылка)
		{
			if(Ссылка == СуммаВыручки)
			{
				return ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.СуммаВыручки;
			}
			else if(Ссылка == СуммаВаловойПрибыли)
			{
				return ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.СуммаВаловойПрибыли;
			}
			else if(Ссылка == КоличествоПродаж)
			{
				return ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.КоличествоПродаж;
			}
			else if(Ссылка == КоличествоПроданныхТоваров)
			{
				return ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.КоличествоПроданныхТоваров;
			}
			else if(Ссылка == ИнтервалыМеждуРасходнымиДокументами)
			{
				return ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами;
			}
			return ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ПустаяСсылка;
		}
		public static byte[] Ключ(this ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений Значение)
		{
			switch (Значение)
			{
				case ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.СуммаВыручки: return СуммаВыручки;
				case ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.СуммаВаловойПрибыли: return СуммаВаловойПрибыли;
				case ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.КоличествоПродаж: return КоличествоПродаж;
				case ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.КоличествоПроданныхТоваров: return КоличествоПроданныхТоваров;
				case ПараметрыРаспределенияПокупателейПоСтадиямВзаимоотношений.ИнтервалыМеждуРасходнымиДокументами: return ИнтервалыМеждуРасходнымиДокументами;
			}
			return Guid.Empty;
		}
	}
}
