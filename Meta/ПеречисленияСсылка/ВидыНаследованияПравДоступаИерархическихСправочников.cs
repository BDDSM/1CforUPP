
using System;
using System.Runtime.Serialization;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
	[DataContract]
	public enum ВидыНаследованияПравДоступаИерархическихСправочников
	{
		[NonSerialized]
		ПустаяСсылка = - 1,
		[EnumMember(Value = "{\"Ссылка\":\"6aad266f-1ca5-474d-81bd-0c480b11a56d\", \"Представление\":\"НаследуетсяОтРодителя\"}")]
		НаследуетсяОтРодителя = 0,//Наследуется от родителя
		[EnumMember(Value = "{\"Ссылка\":\"00fd3053-52dd-4b0b-a81d-107d2cd52746\", \"Представление\":\"РаспространитьНаПодчиненных\"}")]
		РаспространитьНаПодчиненных = 1,//Распространить на подчиненных
		[EnumMember(Value = "{\"Ссылка\":\"7cfa0a17-891a-4efc-9a95-4bf17dbdb8cb\", \"Представление\":\"ТолькоДляТекущегоПрава\"}")]
		ТолькоДляТекущегоПрава = 2,//Только для текущего права
		[EnumMember(Value = "{\"Ссылка\":\"a10e3b42-5665-4a45-9936-6556b377d497\", \"Представление\":\"УнаследованоОтДочернего\"}")]
		УнаследованоОтДочернего = 3,//Унаследовано от дочернего
	}
	public static partial class ВидыНаследованияПравДоступаИерархическихСправочников_Значения//:ПеречислениеСсылка
	{
		public static readonly Guid НаследуетсяОтРодителя = new Guid("480cbd81-110b-6da5-474d-1ca56aad266f");//Наследуется от родителя
		public static readonly Guid РаспространитьНаПодчиненных = new Guid("7d101da8-d52c-4627-4b0b-52dd00fd3053");//Распространить на подчиненных
		public static readonly Guid ТолькоДляТекущегоПрава = new Guid("f14b959a-bd7d-cbb8-4efc-891a7cfa0a17");//Только для текущего права
		public static readonly Guid УнаследованоОтДочернего = new Guid("56653699-77b3-97d4-4a45-5665a10e3b42");//Унаследовано от дочернего
		public static ВидыНаследованияПравДоступаИерархическихСправочников Получить(this ВидыНаследованияПравДоступаИерархическихСправочников Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ВидыНаследованияПравДоступаИерархическихСправочников Получить(this ВидыНаследованияПравДоступаИерархическихСправочников Значение, Guid Ссылка)
		{
			if(Ссылка == НаследуетсяОтРодителя)
			{
				return ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя;
			}
			else if(Ссылка == РаспространитьНаПодчиненных)
			{
				return ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных;
			}
			else if(Ссылка == ТолькоДляТекущегоПрава)
			{
				return ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава;
			}
			else if(Ссылка == УнаследованоОтДочернего)
			{
				return ВидыНаследованияПравДоступаИерархическихСправочников.УнаследованоОтДочернего;
			}
			return ВидыНаследованияПравДоступаИерархическихСправочников.ПустаяСсылка;
		}
		public static byte[] Ключ(this ВидыНаследованияПравДоступаИерархическихСправочников Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ВидыНаследованияПравДоступаИерархическихСправочников Значение)
		{
			switch (Значение)
			{
				case ВидыНаследованияПравДоступаИерархическихСправочников.НаследуетсяОтРодителя: return НаследуетсяОтРодителя;
				case ВидыНаследованияПравДоступаИерархическихСправочников.РаспространитьНаПодчиненных: return РаспространитьНаПодчиненных;
				case ВидыНаследованияПравДоступаИерархическихСправочников.ТолькоДляТекущегоПрава: return ТолькоДляТекущегоПрава;
				case ВидыНаследованияПравДоступаИерархическихСправочников.УнаследованоОтДочернего: return УнаследованоОтДочернего;
			}
			return Guid.Empty;
		}
	}
}