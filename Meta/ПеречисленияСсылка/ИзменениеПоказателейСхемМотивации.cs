
using System;
using System.Runtime.Serialization;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
	[DataContract]
	public enum ИзменениеПоказателейСхемМотивации
	{
		[NonSerialized]
		ПустаяСсылка = - 1,
		[EnumMember(Value = "{\"Ссылка\":\"565df047-2c9f-42f4-b9ff-546fd5faeddd\", \"Представление\":\"НеИзменяется\"}")]
		НеИзменяется = 0,//Вводится только при кадровых изменениях
		[EnumMember(Value = "{\"Ссылка\":\"ae143bce-6683-499a-966a-628defd08bd9\", \"Представление\":\"ИзменяетсяПриРасчете\"}")]
		ИзменяетсяПриРасчете = 1,//Может изменяться при расчете
		[EnumMember(Value = "{\"Ссылка\":\"be56a565-ad23-4bfa-b8b6-356a9707f68e\", \"Представление\":\"ВводитсяПриРасчете\"}")]
		ВводитсяПриРасчете = 2,//Вводится только при расчете
		[EnumMember(Value = "{\"Ссылка\":\"716c9f72-7059-4d4f-94de-7a7922aeff4a\", \"Представление\":\"Ежемесячно\"}")]
		Ежемесячно = 3,//Ежемесячно перед расчётом зарплаты
	///<summary>
	///Показатель может действовать несколько месяцев
	///</summary>
		[EnumMember(Value = "{\"Ссылка\":\"1c5cf7c7-b251-416d-bc3c-4c6c01a29690\", \"Представление\":\"Периодически\"}")]
		Периодически = 4,
	}
	public static partial class ИзменениеПоказателейСхемМотивации_Значения//:ПеречислениеСсылка
	{
		public static readonly Guid НеИзменяется = new Guid("6f54ffb9-fad5-dded-42f4-2c9f565df047");//Вводится только при кадровых изменениях
		public static readonly Guid ИзменяетсяПриРасчете = new Guid("8d626a96-d0ef-d98b-499a-6683ae143bce");//Может изменяться при расчете
		public static readonly Guid ВводитсяПриРасчете = new Guid("6a35b6b8-0797-8ef6-4bfa-ad23be56a565");//Вводится только при расчете
		public static readonly Guid Ежемесячно = new Guid("797ade94-ae22-4aff-4d4f-7059716c9f72");//Ежемесячно перед расчётом зарплаты
		///<summary>
		///Показатель может действовать несколько месяцев
		///</summary>
		public static readonly Guid Периодически = new Guid("6c4c3cbc-a201-9096-416d-b2511c5cf7c7");
		public static ИзменениеПоказателейСхемМотивации Получить(this ИзменениеПоказателейСхемМотивации Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ИзменениеПоказателейСхемМотивации Получить(this ИзменениеПоказателейСхемМотивации Значение, Guid Ссылка)
		{
			if(Ссылка == НеИзменяется)
			{
				return ИзменениеПоказателейСхемМотивации.НеИзменяется;
			}
			else if(Ссылка == ИзменяетсяПриРасчете)
			{
				return ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете;
			}
			else if(Ссылка == ВводитсяПриРасчете)
			{
				return ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете;
			}
			else if(Ссылка == Ежемесячно)
			{
				return ИзменениеПоказателейСхемМотивации.Ежемесячно;
			}
			else if(Ссылка == Периодически)
			{
				return ИзменениеПоказателейСхемМотивации.Периодически;
			}
			return ИзменениеПоказателейСхемМотивации.ПустаяСсылка;
		}
		public static byte[] Ключ(this ИзменениеПоказателейСхемМотивации Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ИзменениеПоказателейСхемМотивации Значение)
		{
			switch (Значение)
			{
				case ИзменениеПоказателейСхемМотивации.НеИзменяется: return НеИзменяется;
				case ИзменениеПоказателейСхемМотивации.ИзменяетсяПриРасчете: return ИзменяетсяПриРасчете;
				case ИзменениеПоказателейСхемМотивации.ВводитсяПриРасчете: return ВводитсяПриРасчете;
				case ИзменениеПоказателейСхемМотивации.Ежемесячно: return Ежемесячно;
				case ИзменениеПоказателейСхемМотивации.Периодически: return Периодически;
			}
			return Guid.Empty;
		}
	}
}