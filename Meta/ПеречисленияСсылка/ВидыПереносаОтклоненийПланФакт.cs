
using System;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
		///<summary>
		///(Упр)
		///</summary>
	public enum ВидыПереносаОтклоненийПланФакт
	{
		ПустаяСсылка = - 1,
		РучноеУказаниеПериода = 0,//Ручное указание периода
		ПоПрофилю = 1,//По профилю
	}
	public static partial class ВидыПереносаОтклоненийПланФакт_Значения//:ПеречислениеСсылка
	{
		public static readonly Guid РучноеУказаниеПериода = new Guid("a1bcefac-4eaa-0dd7-4a4f-5309e4b98d94");//Ручное указание периода
		public static readonly Guid ПоПрофилю = new Guid("92e4a88a-527d-4a12-4332-bed08946153a");//По профилю
		public static ВидыПереносаОтклоненийПланФакт Получить(this ВидыПереносаОтклоненийПланФакт Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ВидыПереносаОтклоненийПланФакт Получить(this ВидыПереносаОтклоненийПланФакт Значение, Guid Ссылка)
		{
			if(Ссылка == РучноеУказаниеПериода)
			{
				return ВидыПереносаОтклоненийПланФакт.РучноеУказаниеПериода;
			}
			else if(Ссылка == ПоПрофилю)
			{
				return ВидыПереносаОтклоненийПланФакт.ПоПрофилю;
			}
			return ВидыПереносаОтклоненийПланФакт.ПустаяСсылка;
		}
		public static byte[] Ключ(this ВидыПереносаОтклоненийПланФакт Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ВидыПереносаОтклоненийПланФакт Значение)
		{
			switch (Значение)
			{
				case ВидыПереносаОтклоненийПланФакт.РучноеУказаниеПериода: return РучноеУказаниеПериода;
				case ВидыПереносаОтклоненийПланФакт.ПоПрофилю: return ПоПрофилю;
			}
			return Guid.Empty;
		}
	}
}
