
using System;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
		///<summary>
		///(Общ)
		///</summary>
	public enum ВидыОтчетности
	{
		ПустаяСсылка = - 1,
	///<summary>
	///(Регл)
	///</summary>
		РегламентированнаяОтчетность = 0,//Регламентированная отчетность
	///<summary>
	///(Упр)
	///</summary>
		ОтчетностьПоМСФО = 1,//Отчетность по МСФО
	}
	public static partial class ВидыОтчетности_Значения//:ПеречислениеСсылка
	{
		///<summary>
		///(Регл)
		///</summary>
		public static readonly Guid РегламентированнаяОтчетность = new Guid("e48ab0b6-2868-6abe-40fa-0a3dad89b07d");//Регламентированная отчетность
		///<summary>
		///(Упр)
		///</summary>
		public static readonly Guid ОтчетностьПоМСФО = new Guid("91643187-6d9e-a757-44cc-5909a1879de2");//Отчетность по МСФО
		public static ВидыОтчетности Получить(this ВидыОтчетности Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ВидыОтчетности Получить(this ВидыОтчетности Значение, Guid Ссылка)
		{
			if(Ссылка == РегламентированнаяОтчетность)
			{
				return ВидыОтчетности.РегламентированнаяОтчетность;
			}
			else if(Ссылка == ОтчетностьПоМСФО)
			{
				return ВидыОтчетности.ОтчетностьПоМСФО;
			}
			return ВидыОтчетности.ПустаяСсылка;
		}
		public static byte[] Ключ(this ВидыОтчетности Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ВидыОтчетности Значение)
		{
			switch (Значение)
			{
				case ВидыОтчетности.РегламентированнаяОтчетность: return РегламентированнаяОтчетность;
				case ВидыОтчетности.ОтчетностьПоМСФО: return ОтчетностьПоМСФО;
			}
			return Guid.Empty;
		}
	}
}
