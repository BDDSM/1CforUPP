
using System;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
	public enum ПорядокСписанияНИОКРНУ
	{
		ПустаяСсылка = - 1,
		Равномерно = 0,
		ПриПринятииКУчету = 1,//При принятии к учету
		НеСписывать = 2,//Не списывать
	}
	public static partial class ПорядокСписанияНИОКРНУ_Значения//:ПеречислениеСсылка
	{
		public static readonly Guid Равномерно = new Guid("10f39182-6d41-2d00-4152-e877cad35922");
		public static readonly Guid ПриПринятииКУчету = new Guid("b00369a7-a624-b06f-4a48-f3697c31a0c8");//При принятии к учету
		public static readonly Guid НеСписывать = new Guid("0f494b97-a547-464e-48c8-f14ec8d2beda");//Не списывать
		public static ПорядокСписанияНИОКРНУ Получить(this ПорядокСписанияНИОКРНУ Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ПорядокСписанияНИОКРНУ Получить(this ПорядокСписанияНИОКРНУ Значение, Guid Ссылка)
		{
			if(Ссылка == Равномерно)
			{
				return ПорядокСписанияНИОКРНУ.Равномерно;
			}
			else if(Ссылка == ПриПринятииКУчету)
			{
				return ПорядокСписанияНИОКРНУ.ПриПринятииКУчету;
			}
			else if(Ссылка == НеСписывать)
			{
				return ПорядокСписанияНИОКРНУ.НеСписывать;
			}
			return ПорядокСписанияНИОКРНУ.ПустаяСсылка;
		}
		public static byte[] Ключ(this ПорядокСписанияНИОКРНУ Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ПорядокСписанияНИОКРНУ Значение)
		{
			switch (Значение)
			{
				case ПорядокСписанияНИОКРНУ.Равномерно: return Равномерно;
				case ПорядокСписанияНИОКРНУ.ПриПринятииКУчету: return ПриПринятииКУчету;
				case ПорядокСписанияНИОКРНУ.НеСписывать: return НеСписывать;
			}
			return Guid.Empty;
		}
	}
}