
using System;
using System.Runtime.Serialization;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
	///<summary>
	///(Общ)
	///</summary>
	[DataContract]
	public enum ХарактерРаспределенияЗатрат
	{
		[NonSerialized]
		ПустаяСсылка = - 1,
	///<summary>
	///(Общ)
	///</summary>
		[EnumMember(Value = "{\"Ссылка\":\"9e1c242e-3af1-436a-99bd-6ae43a6a05fe\", \"Представление\":\"УчитыватьПодразделение\"}")]
		УчитыватьПодразделение = 0,//Учитывать подразделение (косвенные расходы)
	///<summary>
	///(Общ)
	///</summary>
		[EnumMember(Value = "{\"Ссылка\":\"17b41f8f-20d6-4be1-8fb2-34fd6b12b130\", \"Представление\":\"НеУчитыватьПодразделение\"}")]
		НеУчитыватьПодразделение = 1,//Не учитывать подразделение (косвенные расходы)
	///<summary>
	///(Общ)
	///</summary>
		[EnumMember(Value = "{\"Ссылка\":\"03150f30-48fd-45fd-bf64-d1f541cae46e\", \"Представление\":\"ПроизводственныеРасходы\"}")]
		ПроизводственныеРасходы = 2,//Производственные расходы
	}
	public static partial class ХарактерРаспределенияЗатрат_Значения//:ПеречислениеСсылка
	{
		///<summary>
		///(Общ)
		///</summary>
		public static readonly Guid УчитыватьПодразделение = new Guid("e46abd99-6a3a-fe05-436a-3af19e1c242e");//Учитывать подразделение (косвенные расходы)
		///<summary>
		///(Общ)
		///</summary>
		public static readonly Guid НеУчитыватьПодразделение = new Guid("fd34b28f-126b-30b1-4be1-20d617b41f8f");//Не учитывать подразделение (косвенные расходы)
		///<summary>
		///(Общ)
		///</summary>
		public static readonly Guid ПроизводственныеРасходы = new Guid("f5d164bf-ca41-6ee4-45fd-48fd03150f30");//Производственные расходы
		public static ХарактерРаспределенияЗатрат Получить(this ХарактерРаспределенияЗатрат Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ХарактерРаспределенияЗатрат Получить(this ХарактерРаспределенияЗатрат Значение, Guid Ссылка)
		{
			if(Ссылка == УчитыватьПодразделение)
			{
				return ХарактерРаспределенияЗатрат.УчитыватьПодразделение;
			}
			else if(Ссылка == НеУчитыватьПодразделение)
			{
				return ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение;
			}
			else if(Ссылка == ПроизводственныеРасходы)
			{
				return ХарактерРаспределенияЗатрат.ПроизводственныеРасходы;
			}
			return ХарактерРаспределенияЗатрат.ПустаяСсылка;
		}
		public static byte[] Ключ(this ХарактерРаспределенияЗатрат Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ХарактерРаспределенияЗатрат Значение)
		{
			switch (Значение)
			{
				case ХарактерРаспределенияЗатрат.УчитыватьПодразделение: return УчитыватьПодразделение;
				case ХарактерРаспределенияЗатрат.НеУчитыватьПодразделение: return НеУчитыватьПодразделение;
				case ХарактерРаспределенияЗатрат.ПроизводственныеРасходы: return ПроизводственныеРасходы;
			}
			return Guid.Empty;
		}
	}
}