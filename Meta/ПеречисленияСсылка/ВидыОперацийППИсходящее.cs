
using System;
using V82;
using V82.Перечисления;//Ссылка;
namespace V82.Перечисления//Ссылка
{
	public enum ВидыОперацийППИсходящее
	{
		ПустаяСсылка = - 1,
	///<summary>
	///(Общ)
	///</summary>
		ОплатаПоставщику = 0,//Оплата поставщику
	///<summary>
	///(Общ)
	///</summary>
		ВозвратДенежныхСредствПокупателю = 1,//Возврат денежных средств покупателю
	///<summary>
	///(Общ)
	///</summary>
		ПеречислениеНалога = 2,//Перечисление налога
		РасчетыПоКредитамИЗаймамСКонтрагентами = 3,//Расчеты по кредитам и займам с контрагентами
		ПрочиеРасчетыСКонтрагентами = 4,//Прочие расчеты с контрагентами
		ПереводНаДругойСчет = 5,//Перевод на другой счет
		РасчетыПоКредитамИЗаймамСРаботниками = 6,//Расчеты по кредитам и займам с работниками
	///<summary>
	///(Общ)
	///</summary>
		ПеречислениеЗП = 7,//Перечисление заработной платы
	///<summary>
	///(Общ)
	///</summary>
		ПеречислениеДенежныхСредствПодотчетнику = 8,//Перечисление денежных средств подотчетнику
		ПрочееСписаниеБезналичныхДенежныхСредств = 9,//Прочее списание безналичных денежных средств
	}
	public static partial class ВидыОперацийППИсходящее_Значения//:ПеречислениеСсылка
	{
		///<summary>
		///(Общ)
		///</summary>
		public static readonly Guid ОплатаПоставщику = new Guid("c1a5f6a6-e388-d9f6-46ec-d54ec10ca7af");//Оплата поставщику
		///<summary>
		///(Общ)
		///</summary>
		public static readonly Guid ВозвратДенежныхСредствПокупателю = new Guid("5472afa8-5d64-4b5e-4d1e-6192d9bb8db7");//Возврат денежных средств покупателю
		///<summary>
		///(Общ)
		///</summary>
		public static readonly Guid ПеречислениеНалога = new Guid("8c90f5b4-da1e-742d-4650-17e5c65e64bb");//Перечисление налога
		public static readonly Guid РасчетыПоКредитамИЗаймамСКонтрагентами = new Guid("23c034bb-9b52-ea20-4070-40d3c6719f23");//Расчеты по кредитам и займам с контрагентами
		public static readonly Guid ПрочиеРасчетыСКонтрагентами = new Guid("c8f40fac-ccab-4cf0-4bb7-d5a4914d183e");//Прочие расчеты с контрагентами
		public static readonly Guid ПереводНаДругойСчет = new Guid("b8972099-045a-3fac-4b20-779725c1c049");//Перевод на другой счет
		public static readonly Guid РасчетыПоКредитамИЗаймамСРаботниками = new Guid("fffc608c-7e23-3efb-47f8-75f0e721b075");//Расчеты по кредитам и займам с работниками
		///<summary>
		///(Общ)
		///</summary>
		public static readonly Guid ПеречислениеЗП = new Guid("24798989-c1e0-5dab-43c9-88a75c7c2e8b");//Перечисление заработной платы
		///<summary>
		///(Общ)
		///</summary>
		public static readonly Guid ПеречислениеДенежныхСредствПодотчетнику = new Guid("cb9150bc-f070-e965-43e5-69247d95fc69");//Перечисление денежных средств подотчетнику
		public static readonly Guid ПрочееСписаниеБезналичныхДенежныхСредств = new Guid("df8c2db4-7991-1745-4fc0-33592fd54ee2");//Прочее списание безналичных денежных средств
		public static ВидыОперацийППИсходящее Получить(this ВидыОперацийППИсходящее Значение, byte[] Ссылка)
		{
			return Получить(Значение, new Guid(Ссылка));
		}
		public static ВидыОперацийППИсходящее Получить(this ВидыОперацийППИсходящее Значение, Guid Ссылка)
		{
			if(Ссылка == ОплатаПоставщику)
			{
				return ВидыОперацийППИсходящее.ОплатаПоставщику;
			}
			else if(Ссылка == ВозвратДенежныхСредствПокупателю)
			{
				return ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
			}
			else if(Ссылка == ПеречислениеНалога)
			{
				return ВидыОперацийППИсходящее.ПеречислениеНалога;
			}
			else if(Ссылка == РасчетыПоКредитамИЗаймамСКонтрагентами)
			{
				return ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами;
			}
			else if(Ссылка == ПрочиеРасчетыСКонтрагентами)
			{
				return ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами;
			}
			else if(Ссылка == ПереводНаДругойСчет)
			{
				return ВидыОперацийППИсходящее.ПереводНаДругойСчет;
			}
			else if(Ссылка == РасчетыПоКредитамИЗаймамСРаботниками)
			{
				return ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками;
			}
			else if(Ссылка == ПеречислениеЗП)
			{
				return ВидыОперацийППИсходящее.ПеречислениеЗП;
			}
			else if(Ссылка == ПеречислениеДенежныхСредствПодотчетнику)
			{
				return ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику;
			}
			else if(Ссылка == ПрочееСписаниеБезналичныхДенежныхСредств)
			{
				return ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств;
			}
			return ВидыОперацийППИсходящее.ПустаяСсылка;
		}
		public static byte[] Ключ(this ВидыОперацийППИсходящее Значение)
		{
			return Ссылка(Значение).ToByteArray();
		}
		public static Guid Ссылка(this ВидыОперацийППИсходящее Значение)
		{
			switch (Значение)
			{
				case ВидыОперацийППИсходящее.ОплатаПоставщику: return ОплатаПоставщику;
				case ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю: return ВозвратДенежныхСредствПокупателю;
				case ВидыОперацийППИсходящее.ПеречислениеНалога: return ПеречислениеНалога;
				case ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами: return РасчетыПоКредитамИЗаймамСКонтрагентами;
				case ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами: return ПрочиеРасчетыСКонтрагентами;
				case ВидыОперацийППИсходящее.ПереводНаДругойСчет: return ПереводНаДругойСчет;
				case ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками: return РасчетыПоКредитамИЗаймамСРаботниками;
				case ВидыОперацийППИсходящее.ПеречислениеЗП: return ПеречислениеЗП;
				case ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику: return ПеречислениеДенежныхСредствПодотчетнику;
				case ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств: return ПрочееСписаниеБезналичныхДенежныхСредств;
			}
			return Guid.Empty;
		}
	}
}