
using System;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыОбъект
{
	///<summary>
	///(Регл)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class СчетФактураПолученный:ДокументОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		[DataMember]
		[ProtoMember(3)]
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		[DataMember]
		[ProtoMember(4)]
		public bool ПометкаУдаления {get;set;}
		[DataMember]
		[ProtoMember(5)]
		public DateTime Дата {get;set;}
		[DataMember]
		[ProtoMember(6)]
		public DateTime ПрефиксНомера {get;set;}
		[DataMember]
		[ProtoMember(7)]
		public string/*11*/ Номер {get;set;}
		[DataMember]
		[ProtoMember(8)]
		public bool Проведен {get;set;}
		[DataMember]
		[ProtoMember(9)]
		public DateTime ДатаИсправления {get;set;}//Дата исправления
		[DataMember]
		[ProtoMember(10)]
		public V82.СправочникиСсылка.Контрагенты Контрагент {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		[DataMember]
		[ProtoMember(11)]
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагента {get;set;}//Договор контрагента
		[DataMember]
		[ProtoMember(12)]
		public object ДокументОснование {get;set;}//Документ основание
		[DataMember]
		[ProtoMember(13)]
		public DateTime ДатаВходящегоДокумента {get;set;}//Дата документа сторонней организации
		[DataMember]
		[ProtoMember(14)]
		public string/*(30)*/ НомерВходящегоДокумента {get;set;}//Номер документа сторонней организации
		[DataMember]
		[ProtoMember(15)]
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		[DataMember]
		[ProtoMember(16)]
		public decimal/*(14.2)*/ СуммаДокумента {get;set;}//Сумма документа
		[DataMember]
		[ProtoMember(17)]
		public bool СформированПриВводеНачальныхОстатковНДС {get;set;}//Сформирован при вводе начальных остатков НДС
		///<summary>
		///(Общ)
		///</summary>
		[DataMember]
		[ProtoMember(18)]
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		[DataMember]
		[ProtoMember(19)]
		public string/*(20)*/ НомерВходящегоДокументаЭлектронногоОбмена {get;set;}//Номер входящего документа электронного обмена
		[DataMember]
		[ProtoMember(20)]
		public DateTime ДатаВходящегоДокументаЭлектронногоОбмена {get;set;}//Дата входящего документа электронного обмена
		///<summary>
		///Любая дополнительная информация
		///</summary>
		[DataMember]
		[ProtoMember(21)]
		public string/*(0)*/ Комментарий {get;set;}
		[DataMember]
		[ProtoMember(22)]
		public bool УдалитьНаАванс {get;set;}//(не используется) На аванс
		[DataMember]
		[ProtoMember(23)]
		public DateTime ДатаИсправленияИсходногоДокумента {get;set;}//Дата исправления исходного документа
		[DataMember]
		[ProtoMember(24)]
		public DateTime ДатаИсходногоДокумента {get;set;}//Дата корректируемого счета-фактуры
		[DataMember]
		[ProtoMember(25)]
		public bool Исправление {get;set;}
		[DataMember]
		[ProtoMember(26)]
		public string/*(10)*/ КодВидаОперации {get;set;}//Код вида операции
		[DataMember]
		[ProtoMember(27)]
		public decimal/*(1)*/ КодСпособаПолучения {get;set;}//Код способа получения
		[DataMember]
		[ProtoMember(28)]
		public decimal/*(10)*/ НомерИсправления {get;set;}//Номер исправления
		[DataMember]
		[ProtoMember(29)]
		public decimal/*(10)*/ НомерИсправленияИсходногоДокумента {get;set;}//Номер исправления исходного документа
		[DataMember]
		[ProtoMember(30)]
		public string/*(30)*/ НомерИсходногоДокумента {get;set;}//Номер корректируемого счета-фактуры
		[DataMember]
		[ProtoMember(31)]
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///Сумма по документу основанию в валюте документа увеличение
		///</summary>
		[DataMember]
		[ProtoMember(32)]
		public decimal/*(14.2)*/ СуммаУвеличение {get;set;}//Сумма по документу-основанию увеличение
		///<summary>
		///Сумма по документу основанию в валюте документа уменьшение
		///</summary>
		[DataMember]
		[ProtoMember(33)]
		public decimal/*(14.2)*/ СуммаУменьшение {get;set;}//Сумма по документу-основанию уменьшение
		[DataMember]
		[ProtoMember(34)]
		public bool УчитыватьИсправлениеИсходногоДокумента {get;set;}//Учитывать исправление исходного документа
		[DataMember]
		[ProtoMember(35)]
		public bool СчетФактураБезНДС {get;set;}//Счет-фактура без НДС
		///<summary>
		///Сумма НДС по документу основанию в валюте документа увеличение
		///</summary>
		[DataMember]
		[ProtoMember(36)]
		public decimal/*(14.2)*/ СуммаНДСУвеличение {get;set;}//Сумма НДС по документу-основанию увеличение
		///<summary>
		///Сумма НДС по документу основанию в валюте документа уменьшение
		///</summary>
		[DataMember]
		[ProtoMember(37)]
		public decimal/*(14.2)*/ СуммаНДСУменьшение {get;set;}//Сумма НДС по документу-основанию уменьшение
		///<summary>
		///Сумма НДС по документу основанию в валюте документа
		///</summary>
		[DataMember]
		[ProtoMember(38)]
		public decimal/*(14.2)*/ СуммаНДСДокумента {get;set;}//Сумма НДС по документу-основанию
		[DataMember]
		[ProtoMember(39)]
		public V82.ДокументыСсылка.СчетФактураПолученный ИсправляемыйСчетФактура {get;set;}//Исправляемый счет-фактура
		[DataMember]
		[ProtoMember(40)]
		public V82.Перечисления/*Ссылка*/.ВидСчетаФактурыПолученного ВидСчетаФактуры {get;set;}//Вид счета-фактуры
		[DataMember]
		[ProtoMember(41)]
		public bool БланкСтрогойОтчетности {get;set;}//Бланк строгой отчетности
		public void Записать()
		{
			//Установка блокировки элемента на горизантально масштабированный кластер.
			//Опционально введение тайм аута на запись одного и того же объекта, не чаще раза в 5-секунд. Защита от спама. упращение алгоритма блокировки.
			//Выделение сервиса для блокировки элемента и генерации кода
			//Выполнение операций контроля без обращений к sql-серверу.
			//Контроль конфликта блокировок.
			//Контроль загрузки булкинсертом гетерогенной коллекции.
			//Контроль уникальности кода для Документов.
			//Контроль уникальности номера для документов, в границах префикса.
			//Контроль владельца, он не может быть группой.
			//Контроль владельца он должен быть задан.
			//Контроль родителя он должен быть группой.
			//Контроль количества уровней, должен соотвествовать метаданным.
			//Контроль версии, объект не должен был быть записан перед чтением текущей записи, алгоритм версионника.
			//Контроль уникальности ссылки
			//Контроль зацикливания
			//Опционально контроль битых ссылок.
			//Соблюдейние транзакционности. ПередЗаписью. Открытие транзации. Валидации. ПриЗаписи. Фиксация транзакции. Информирование о записи элемента.
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Document465(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Number
						,_Fld27344
						,_Fld11952RRef
						,_Fld22269RRef
						,_Fld11949
						,_Fld11948
						,_Fld11953RRef
						,_Fld11954
						,_Fld11955
						,_Fld11951RRef
						,_Fld22267
						,_Fld22268
						,_Fld11947
						,_Fld23020
						,_Fld27345
						,_Fld27346
						,_Fld27347
						,_Fld27348
						,_Fld27349
						,_Fld27350
						,_Fld27351
						,_Fld27352
						,_Fld11956RRef
						,_Fld27353
						,_Fld27354
						,_Fld27355
						,_Fld27356
						,_Fld27357
						,_Fld27358
						,_Fld27359
						,_Fld27360RRef
						,_Fld27361RRef
						,_Fld27362)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Номер
						,@ДатаИсправления
						,@Контрагент
						,@ДоговорКонтрагента
						,@ДатаВходящегоДокумента
						,@НомерВходящегоДокумента
						,@ВалютаДокумента
						,@СуммаДокумента
						,@СформированПриВводеНачальныхОстатковНДС
						,@Ответственный
						,@НомерВходящегоДокументаЭлектронногоОбмена
						,@ДатаВходящегоДокументаЭлектронногоОбмена
						,@Комментарий
						,@УдалитьНаАванс
						,@ДатаИсправленияИсходногоДокумента
						,@ДатаИсходногоДокумента
						,@Исправление
						,@КодВидаОперации
						,@КодСпособаПолучения
						,@НомерИсправления
						,@НомерИсправленияИсходногоДокумента
						,@НомерИсходногоДокумента
						,@Организация
						,@СуммаУвеличение
						,@СуммаУменьшение
						,@УчитыватьИсправлениеИсходногоДокумента
						,@СчетФактураБезНДС
						,@СуммаНДСУвеличение
						,@СуммаНДСУменьшение
						,@СуммаНДСДокумента
						,@ИсправляемыйСчетФактура
						,@ВидСчетаФактуры
						,@БланкСтрогойОтчетности)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Document465
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_Number	= @Номер
						,_Fld27344	= @ДатаИсправления
						,_Fld11952RRef	= @Контрагент
						,_Fld22269RRef	= @ДоговорКонтрагента
						,_Fld11949	= @ДатаВходящегоДокумента
						,_Fld11948	= @НомерВходящегоДокумента
						,_Fld11953RRef	= @ВалютаДокумента
						,_Fld11954	= @СуммаДокумента
						,_Fld11955	= @СформированПриВводеНачальныхОстатковНДС
						,_Fld11951RRef	= @Ответственный
						,_Fld22267	= @НомерВходящегоДокументаЭлектронногоОбмена
						,_Fld22268	= @ДатаВходящегоДокументаЭлектронногоОбмена
						,_Fld11947	= @Комментарий
						,_Fld23020	= @УдалитьНаАванс
						,_Fld27345	= @ДатаИсправленияИсходногоДокумента
						,_Fld27346	= @ДатаИсходногоДокумента
						,_Fld27347	= @Исправление
						,_Fld27348	= @КодВидаОперации
						,_Fld27349	= @КодСпособаПолучения
						,_Fld27350	= @НомерИсправления
						,_Fld27351	= @НомерИсправленияИсходногоДокумента
						,_Fld27352	= @НомерИсходногоДокумента
						,_Fld11956RRef	= @Организация
						,_Fld27353	= @СуммаУвеличение
						,_Fld27354	= @СуммаУменьшение
						,_Fld27355	= @УчитыватьИсправлениеИсходногоДокумента
						,_Fld27356	= @СчетФактураБезНДС
						,_Fld27357	= @СуммаНДСУвеличение
						,_Fld27358	= @СуммаНДСУменьшение
						,_Fld27359	= @СуммаНДСДокумента
						,_Fld27360RRef	= @ИсправляемыйСчетФактура
						,_Fld27361RRef	= @ВидСчетаФактуры
						,_Fld27362	= @БланкСтрогойОтчетности
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Номер", Номер);
					Команда.Parameters.AddWithValue("ДатаИсправления", ДатаИсправления);
					Команда.Parameters.AddWithValue("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
					Команда.Parameters.AddWithValue("НомерВходящегоДокумента", НомерВходящегоДокумента);
					Команда.Parameters.AddWithValue("СуммаДокумента", СуммаДокумента);
					Команда.Parameters.AddWithValue("СформированПриВводеНачальныхОстатковНДС", СформированПриВводеНачальныхОстатковНДС);
					Команда.Parameters.AddWithValue("НомерВходящегоДокументаЭлектронногоОбмена", НомерВходящегоДокументаЭлектронногоОбмена);
					Команда.Parameters.AddWithValue("ДатаВходящегоДокументаЭлектронногоОбмена", ДатаВходящегоДокументаЭлектронногоОбмена);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.Parameters.AddWithValue("УдалитьНаАванс", УдалитьНаАванс);
					Команда.Parameters.AddWithValue("ДатаИсправленияИсходногоДокумента", ДатаИсправленияИсходногоДокумента);
					Команда.Parameters.AddWithValue("ДатаИсходногоДокумента", ДатаИсходногоДокумента);
					Команда.Parameters.AddWithValue("Исправление", Исправление);
					Команда.Parameters.AddWithValue("КодВидаОперации", КодВидаОперации);
					Команда.Parameters.AddWithValue("КодСпособаПолучения", КодСпособаПолучения);
					Команда.Parameters.AddWithValue("НомерИсправления", НомерИсправления);
					Команда.Parameters.AddWithValue("НомерИсправленияИсходногоДокумента", НомерИсправленияИсходногоДокумента);
					Команда.Parameters.AddWithValue("НомерИсходногоДокумента", НомерИсходногоДокумента);
					Команда.Parameters.AddWithValue("СуммаУвеличение", СуммаУвеличение);
					Команда.Parameters.AddWithValue("СуммаУменьшение", СуммаУменьшение);
					Команда.Parameters.AddWithValue("УчитыватьИсправлениеИсходногоДокумента", УчитыватьИсправлениеИсходногоДокумента);
					Команда.Parameters.AddWithValue("СчетФактураБезНДС", СчетФактураБезНДС);
					Команда.Parameters.AddWithValue("СуммаНДСУвеличение", СуммаНДСУвеличение);
					Команда.Parameters.AddWithValue("СуммаНДСУменьшение", СуммаНДСУменьшение);
					Команда.Parameters.AddWithValue("СуммаНДСДокумента", СуммаНДСДокумента);
					Команда.Parameters.AddWithValue("ИсправляемыйСчетФактура", ИсправляемыйСчетФактура.Ссылка);
					Команда.Parameters.AddWithValue("ВидСчетаФактуры", ВидСчетаФактуры.Ключ());
					Команда.Parameters.AddWithValue("БланкСтрогойОтчетности", БланкСтрогойОтчетности);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Document465
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
	}
}