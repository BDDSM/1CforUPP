
using System;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыОбъект
{
	///<summary>
	///(Упр)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class КонтролируемыеЗначенияПоБюджетам:ДокументОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		[DataMember]
		[ProtoMember(3)]
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		[DataMember]
		[ProtoMember(4)]
		public bool ПометкаУдаления {get;set;}
		[DataMember]
		[ProtoMember(5)]
		public DateTime Дата {get;set;}
		[DataMember]
		[ProtoMember(6)]
		public DateTime ПрефиксНомера {get;set;}
		[DataMember]
		[ProtoMember(7)]
		public string/*11*/ Номер {get;set;}
		[DataMember]
		[ProtoMember(8)]
		public bool Проведен {get;set;}
		[DataMember]
		[ProtoMember(9)]
		public V82.СправочникиСсылка.СценарииПланирования Сценарий {get;set;}
		[DataMember]
		[ProtoMember(10)]
		public V82.Перечисления/*Ссылка*/.ВидыКонтролируемогоЗначенияБюджета ВидКонтролируемыхЗначений {get;set;}//Вид контролируемых значений
		[DataMember]
		[ProtoMember(11)]
		public V82.Перечисления/*Ссылка*/.ИспользованиеКонтролируемыхЗначенийБюджетов ИспользованиеКонтролируемыхЗначений {get;set;}//Использование контролируемых значений
		[DataMember]
		[ProtoMember(12)]
		public V82.Перечисления/*Ссылка*/.ВидыОграниченийОборотовБюджета ВидОграниченияОборотов {get;set;}//Вид ограничения оборотов
		[DataMember]
		[ProtoMember(13)]
		public V82.СправочникиСсылка.СценарииПланирования КонтролирующийСценарий {get;set;}//Контролирующий сценарий
		[DataMember]
		[ProtoMember(14)]
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///Любая дополнительная информация
		///</summary>
		[DataMember]
		[ProtoMember(15)]
		public string/*(0)*/ Комментарий {get;set;}
		[DataMember]
		[ProtoMember(16)]
		public V82.Перечисления/*Ссылка*/.СостоянияОбъектов Состояние {get;set;}
		///<summary>
		///Начало интервала контроля оборотов по контролирующему сценарию
		///</summary>
		[DataMember]
		[ProtoMember(17)]
		public DateTime ДатаНачалаКонтролирующегоСценария {get;set;}//Дата начала контроля оборотов 
		///<summary>
		///Конец интервала контроля оборотов по контролирующему сценарию
		///</summary>
		[DataMember]
		[ProtoMember(18)]
		public DateTime ДатаКонцаКонтролирующегоСценария {get;set;}//Дата конца контроля оборотов 
		///<summary>
		///Контролировать обороты в разрезе ЦФО
		///</summary>
		[DataMember]
		[ProtoMember(19)]
		public bool КонтролироватьЦФО {get;set;}//Контролировать ЦФО
		///<summary>
		///Контролировать обороты в разрезе проектов
		///</summary>
		[DataMember]
		[ProtoMember(20)]
		public bool КонтролироватьПроекты {get;set;}//Контролировать проекты
		///<summary>
		///Контролировать обороты в разрезе контрагентов
		///</summary>
		[DataMember]
		[ProtoMember(21)]
		public bool КонтролироватьКонтрагентов {get;set;}//Контролировать контрагентов
		///<summary>
		///Контролировать обороты в разрезе номенклатуры
		///</summary>
		[DataMember]
		[ProtoMember(22)]
		public bool КонтролироватьНоменклатуру {get;set;}//Контролировать номенклатуру
		[DataMember]
		[ProtoMember(23)]
		public V82.Перечисления/*Ссылка*/.ВидыОтклоненийКонтролируемыхЗначенийБюджетов ВидОтклоненияКонтролируемыхЗначений {get;set;}//Вид отклонения контролируемых значений
		///<summary>
		///Отклонение от значения контролирующего сценария
		///</summary>
		[DataMember]
		[ProtoMember(24)]
		public decimal/*(15.2)*/ Отклонение {get;set;}
		public void Записать()
		{
			//Установка блокировки элемента на горизантально масштабированный кластер.
			//Опционально введение тайм аута на запись одного и того же объекта, не чаще раза в 5-секунд. Защита от спама. упращение алгоритма блокировки.
			//Выделение сервиса для блокировки элемента и генерации кода
			//Выполнение операций контроля без обращений к sql-серверу.
			//Контроль конфликта блокировок.
			//Контроль загрузки булкинсертом гетерогенной коллекции.
			//Контроль уникальности кода для Документов.
			//Контроль уникальности номера для документов, в границах префикса.
			//Контроль владельца, он не может быть группой.
			//Контроль владельца он должен быть задан.
			//Контроль родителя он должен быть группой.
			//Контроль количества уровней, должен соотвествовать метаданным.
			//Контроль версии, объект не должен был быть записан перед чтением текущей записи, алгоритм версионника.
			//Контроль уникальности ссылки
			//Контроль зацикливания
			//Опционально контроль битых ссылок.
			//Соблюдейние транзакционности. ПередЗаписью. Открытие транзации. Валидации. ПриЗаписи. Фиксация транзакции. Информирование о записи элемента.
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Document301(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Number
						,_Fld5546RRef
						,_Fld5547RRef
						,_Fld5548RRef
						,_Fld5549RRef
						,_Fld5550RRef
						,_Fld5551RRef
						,_Fld5552
						,_Fld5553RRef
						,_Fld5554
						,_Fld5555
						,_Fld5556
						,_Fld5557
						,_Fld5558
						,_Fld5559
						,_Fld5560RRef
						,_Fld5561)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Номер
						,@Сценарий
						,@ВидКонтролируемыхЗначений
						,@ИспользованиеКонтролируемыхЗначений
						,@ВидОграниченияОборотов
						,@КонтролирующийСценарий
						,@Ответственный
						,@Комментарий
						,@Состояние
						,@ДатаНачалаКонтролирующегоСценария
						,@ДатаКонцаКонтролирующегоСценария
						,@КонтролироватьЦФО
						,@КонтролироватьПроекты
						,@КонтролироватьКонтрагентов
						,@КонтролироватьНоменклатуру
						,@ВидОтклоненияКонтролируемыхЗначений
						,@Отклонение)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Document301
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_Number	= @Номер
						,_Fld5546RRef	= @Сценарий
						,_Fld5547RRef	= @ВидКонтролируемыхЗначений
						,_Fld5548RRef	= @ИспользованиеКонтролируемыхЗначений
						,_Fld5549RRef	= @ВидОграниченияОборотов
						,_Fld5550RRef	= @КонтролирующийСценарий
						,_Fld5551RRef	= @Ответственный
						,_Fld5552	= @Комментарий
						,_Fld5553RRef	= @Состояние
						,_Fld5554	= @ДатаНачалаКонтролирующегоСценария
						,_Fld5555	= @ДатаКонцаКонтролирующегоСценария
						,_Fld5556	= @КонтролироватьЦФО
						,_Fld5557	= @КонтролироватьПроекты
						,_Fld5558	= @КонтролироватьКонтрагентов
						,_Fld5559	= @КонтролироватьНоменклатуру
						,_Fld5560RRef	= @ВидОтклоненияКонтролируемыхЗначений
						,_Fld5561	= @Отклонение
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Номер", Номер);
					Команда.Parameters.AddWithValue("ВидКонтролируемыхЗначений", ВидКонтролируемыхЗначений.Ключ());
					Команда.Parameters.AddWithValue("ИспользованиеКонтролируемыхЗначений", ИспользованиеКонтролируемыхЗначений.Ключ());
					Команда.Parameters.AddWithValue("ВидОграниченияОборотов", ВидОграниченияОборотов.Ключ());
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.Parameters.AddWithValue("Состояние", Состояние.Ключ());
					Команда.Parameters.AddWithValue("ДатаНачалаКонтролирующегоСценария", ДатаНачалаКонтролирующегоСценария);
					Команда.Parameters.AddWithValue("ДатаКонцаКонтролирующегоСценария", ДатаКонцаКонтролирующегоСценария);
					Команда.Parameters.AddWithValue("КонтролироватьЦФО", КонтролироватьЦФО);
					Команда.Parameters.AddWithValue("КонтролироватьПроекты", КонтролироватьПроекты);
					Команда.Parameters.AddWithValue("КонтролироватьКонтрагентов", КонтролироватьКонтрагентов);
					Команда.Parameters.AddWithValue("КонтролироватьНоменклатуру", КонтролироватьНоменклатуру);
					Команда.Parameters.AddWithValue("ВидОтклоненияКонтролируемыхЗначений", ВидОтклоненияКонтролируемыхЗначений.Ключ());
					Команда.Parameters.AddWithValue("Отклонение", Отклонение);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Document301
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
	}
}