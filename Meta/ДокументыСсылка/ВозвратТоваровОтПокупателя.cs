
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Общ)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ВозвратТоваровОтПокупателя:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("a647e612-605d-4b2a-a28d-fb45c8d15318");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191048.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВУправленческомУчете {get;set;}//Отражать в управленческом учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		///<summary>
		///(Общ)
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВидыОперацийВозвратТоваровОтПокупателя ВидОперации {get;set;}//Вид операции
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагента {get;set;}//Договор контрагента
		///<summary>
		///(Общ)
		///</summary>
		public object СкладОрдер {get;set;}//Склад ордер
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты Контрагент {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10)*/ КратностьВзаиморасчетов {get;set;}//Кратность взаиморасчетов
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10.4)*/ КурсВзаиморасчетов {get;set;}//Курс взаиморасчетов
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		public bool ОтразитьВКнигеПокупок {get;set;}//Отразить в книге покупок
		public bool ПокупателемВыставляетсяСчетФактураНаВозврат {get;set;}//Покупателем выставляется счет-фактура на возврат
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public object Сделка {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool СуммаВключаетНДС {get;set;}//Сумма включает НДС
		///<summary>
		///(Общ) Сумма в валюте документа, налоги включены согласно флагам
		///</summary>
		public decimal/*(15.2)*/ СуммаДокумента {get;set;}//Сумма документа
		///<summary>
		///(Общ) Вид поступления: на склад или по ордеру
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВидыПоступленияТоваров ВидПоступления {get;set;}//Вид поступления
		public object СчетУчетаНДС {get;set;}//Счет учета НДС
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасчетовПоАвансам {get;set;}//Счет учета расчетов по авансам
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасчетовПоТаре {get;set;}//Счет учета расчетов по таре
		public object Проект {get;set;}
		public V82.СправочникиСсылка.УсловияПродаж УсловиеПродаж {get;set;}//Условие продаж
		public V82.СправочникиСсылка.ИнформационныеКарты ДисконтнаяКарта {get;set;}//Дисконтная карта
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасчетовСКонтрагентом {get;set;}//Счет учета расчетов с контрагентом
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ТипыЦенНоменклатуры ТипЦен {get;set;}//Тип цен
		///<summary>
		///(Общ)
		///</summary>
		public bool УчитыватьНДС {get;set;}//Учитывать НДС
		public string/*(20)*/ НомерВходящегоДокументаЭлектронногоОбмена {get;set;}//Номер входящего документа электронного обмена
		public DateTime ДатаВходящегоДокументаЭлектронногоОбмена {get;set;}//Дата входящего документа электронного обмена
		
		public ВозвратТоваровОтПокупателя()
		{
		}
		
		public ВозвратТоваровОтПокупателя(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld6136RRef [ВалютаДокумента]
					,_Fld6137 [ОтражатьВУправленческомУчете]
					,_Fld6138 [ОтражатьВБухгалтерскомУчете]
					,_Fld6139RRef [ВидОперации]
					,_Fld6140RRef [ДоговорКонтрагента]
					,_Fld6141_TYPE [СкладОрдер_Тип],_Fld6141_RRRef [СкладОрдер],_Fld6141_RTRef [СкладОрдер_Вид]
					,_Fld6142 [Комментарий]
					,_Fld6143RRef [Контрагент]
					,_Fld6144 [КратностьВзаиморасчетов]
					,_Fld6145 [КурсВзаиморасчетов]
					,_Fld6146RRef [Организация]
					,_Fld6147RRef [Ответственный]
					,_Fld6148 [ОтражатьВНалоговомУчете]
					,_Fld6149 [ОтразитьВКнигеПокупок]
					,_Fld6150 [ПокупателемВыставляетсяСчетФактураНаВозврат]
					,_Fld6151RRef [Подразделение]
					,_Fld6152_TYPE [Сделка_Тип],_Fld6152_RRRef [Сделка],_Fld6152_RTRef [Сделка_Вид]
					,_Fld6153 [СуммаВключаетНДС]
					,_Fld6154 [СуммаДокумента]
					,_Fld6155RRef [ВидПоступления]
					,_Fld6156RRef [СчетУчетаНДС]
					,_Fld6157RRef [СчетУчетаРасчетовПоАвансам]
					,_Fld6158RRef [СчетУчетаРасчетовПоТаре]
					,_Fld6159_TYPE [Проект_Тип],_Fld6159_RRRef [Проект],_Fld6159_RTRef [Проект_Вид]
					,_Fld6160RRef [УсловиеПродаж]
					,_Fld6161RRef [ДисконтнаяКарта]
					,_Fld6162RRef [СчетУчетаРасчетовСКонтрагентом]
					,_Fld6163RRef [ТипЦен]
					,_Fld6164 [УчитыватьНДС]
					,_Fld6165 [НомерВходящегоДокументаЭлектронногоОбмена]
					,_Fld6166 [ДатаВходящегоДокументаЭлектронногоОбмена]
					From _Document337(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ОтражатьВУправленческомУчете = ((byte[])Читалка.GetValue(5))[0]==1;
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(6))[0]==1;
							ВидОперации = V82.Перечисления/*Ссылка*/.ВидыОперацийВозвратТоваровОтПокупателя.ПустаяСсылка.Получить((byte[])Читалка.GetValue(7));
							Комментарий = Читалка.GetString(12);
							КратностьВзаиморасчетов = Читалка.GetDecimal(14);
							КурсВзаиморасчетов = Читалка.GetDecimal(15);
							ОтражатьВНалоговомУчете = ((byte[])Читалка.GetValue(18))[0]==1;
							ОтразитьВКнигеПокупок = ((byte[])Читалка.GetValue(19))[0]==1;
							ПокупателемВыставляетсяСчетФактураНаВозврат = ((byte[])Читалка.GetValue(20))[0]==1;
							СуммаВключаетНДС = ((byte[])Читалка.GetValue(25))[0]==1;
							СуммаДокумента = Читалка.GetDecimal(26);
							ВидПоступления = V82.Перечисления/*Ссылка*/.ВидыПоступленияТоваров.ПустаяСсылка.Получить((byte[])Читалка.GetValue(27));
							УчитыватьНДС = ((byte[])Читалка.GetValue(38))[0]==1;
							НомерВходящегоДокументаЭлектронногоОбмена = Читалка.GetString(39);
							ДатаВходящегоДокументаЭлектронногоОбмена = Читалка.GetDateTime(40);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.ВозвратТоваровОтПокупателя  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.ВозвратТоваровОтПокупателя();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.ВидОперации = ВидОперации;
			Объект.ДоговорКонтрагента = ДоговорКонтрагента;
			Объект.СкладОрдер = СкладОрдер;
			Объект.Комментарий = Комментарий;
			Объект.Контрагент = Контрагент;
			Объект.КратностьВзаиморасчетов = КратностьВзаиморасчетов;
			Объект.КурсВзаиморасчетов = КурсВзаиморасчетов;
			Объект.Организация = Организация;
			Объект.Ответственный = Ответственный;
			Объект.ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете;
			Объект.ОтразитьВКнигеПокупок = ОтразитьВКнигеПокупок;
			Объект.ПокупателемВыставляетсяСчетФактураНаВозврат = ПокупателемВыставляетсяСчетФактураНаВозврат;
			Объект.Подразделение = Подразделение;
			Объект.Сделка = Сделка;
			Объект.СуммаВключаетНДС = СуммаВключаетНДС;
			Объект.СуммаДокумента = СуммаДокумента;
			Объект.ВидПоступления = ВидПоступления;
			Объект.СчетУчетаНДС = СчетУчетаНДС;
			Объект.СчетУчетаРасчетовПоАвансам = СчетУчетаРасчетовПоАвансам;
			Объект.СчетУчетаРасчетовПоТаре = СчетУчетаРасчетовПоТаре;
			Объект.Проект = Проект;
			Объект.УсловиеПродаж = УсловиеПродаж;
			Объект.ДисконтнаяКарта = ДисконтнаяКарта;
			Объект.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
			Объект.ТипЦен = ТипЦен;
			Объект.УчитыватьНДС = УчитыватьНДС;
			Объект.НомерВходящегоДокументаЭлектронногоОбмена = НомерВходящегоДокументаЭлектронногоОбмена;
			Объект.ДатаВходящегоДокументаЭлектронногоОбмена = ДатаВходящегоДокументаЭлектронногоОбмена;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.ВозвратТоваровОтПокупателя ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.ВозвратТоваровОтПокупателя)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.ВозвратТоваровОтПокупателя(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}