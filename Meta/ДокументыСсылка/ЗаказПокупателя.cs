
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Общ)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ЗаказПокупателя:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("71e09584-7332-415e-bc84-ca2a013eaaf8");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191105.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public string/*(0)*/ АдресДоставки {get;set;}//Адрес доставки
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		///<summary>
		///(Общ)
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВидыОперацийЗаказПокупателя ВидОперации {get;set;}//Вид операции
		///<summary>
		///(Упр)
		///</summary>
		public DateTime ВремяНапоминания {get;set;}//Время напоминания
		///<summary>
		///(Упр)
		///</summary>
		public DateTime ДатаОплаты {get;set;}//Дата оплаты
		///<summary>
		///(Упр)
		///</summary>
		public DateTime ДатаОтгрузки {get;set;}//Дата отгрузки
		public V82.СправочникиСсылка.ИнформационныеКарты ДисконтнаяКарта {get;set;}//Дисконтная карта
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагента {get;set;}//Договор контрагента
		///<summary>
		///(Общ)
		///</summary>
		public bool ИспользоватьПлановуюСебестоимость {get;set;}//Использовать плановую себестоимость
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(15.2)*/ ИтогПлановаяСебестоимость {get;set;}//Итоговая плановая себестоимость в валюте управленческого учета
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты Контрагент {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10)*/ КратностьВзаиморасчетов {get;set;}//Кратность взаиморасчетов
		///<summary>
		///(Общ) Курс валюты взаиморасчетов по договору
		///</summary>
		public decimal/*(10.4)*/ КурсВзаиморасчетов {get;set;}//Курс взаиморасчетов
		///<summary>
		///(Упр)
		///</summary>
		public bool НапомнитьОСобытии {get;set;}//Напомнить о событии
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public object СтруктурнаяЕдиница {get;set;}//Банк/касса
		///<summary>
		///(Общ)
		///</summary>
		public object СкладГруппа {get;set;}//Склад-группа
		///<summary>
		///(Общ)
		///</summary>
		public bool СуммаВключаетНДС {get;set;}//Сумма включает НДС
		///<summary>
		///(Общ) Сумма в валюте документа, налоги включены согласно флагам
		///</summary>
		public decimal/*(15.2)*/ СуммаДокумента {get;set;}//Сумма документа
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ТипыЦенНоменклатуры ТипЦен {get;set;}//Тип цен
		///<summary>
		///(Общ)
		///</summary>
		public bool УчитыватьНДС {get;set;}//Учитывать НДС
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты Грузополучатель {get;set;}
		public V82.СправочникиСсылка.КонтактныеЛицаКонтрагентов КонтактноеЛицоКонтрагента {get;set;}//Контактное лицо контрагента
		public V82.СправочникиСсылка.УсловияПродаж УсловиеПродаж {get;set;}//Условие продаж
		public string/*(0)*/ ДополнениеКАдресуДоставки {get;set;}//Дополнение к адресу доставки
		public object ДокументОснование {get;set;}//Документ основание
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты Грузоотправитель {get;set;}
		public string/*(20)*/ НомерВходящегоДокументаЭлектронногоОбмена {get;set;}//Номер входящего документа электронного обмена
		public DateTime ДатаВходящегоДокументаЭлектронногоОбмена {get;set;}//Дата входящего документа электронного обмена
		public string/*(30)*/ НомерПоДаннымПокупателя {get;set;}//Номер по данным покупателя
		public DateTime ДатаПоДаннымПокупателя {get;set;}//Дата по данным покупателя
		
		public ЗаказПокупателя()
		{
		}
		
		public ЗаказПокупателя(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld6974 [АдресДоставки]
					,_Fld6975RRef [ВалютаДокумента]
					,_Fld6976RRef [ВидОперации]
					,_Fld6977 [ВремяНапоминания]
					,_Fld6978 [ДатаОплаты]
					,_Fld6979 [ДатаОтгрузки]
					,_Fld6980RRef [ДисконтнаяКарта]
					,_Fld6981RRef [ДоговорКонтрагента]
					,_Fld6982 [ИспользоватьПлановуюСебестоимость]
					,_Fld6983 [ИтогПлановаяСебестоимость]
					,_Fld6984 [Комментарий]
					,_Fld6985RRef [Контрагент]
					,_Fld6986 [КратностьВзаиморасчетов]
					,_Fld6987 [КурсВзаиморасчетов]
					,_Fld6988 [НапомнитьОСобытии]
					,_Fld6989RRef [Организация]
					,_Fld6990RRef [Ответственный]
					,_Fld6991 [ОтражатьВБухгалтерскомУчете]
					,_Fld6992 [ОтражатьВНалоговомУчете]
					,_Fld6993RRef [Подразделение]
					,_Fld6994_TYPE [СтруктурнаяЕдиница_Тип],_Fld6994_RRRef [СтруктурнаяЕдиница],_Fld6994_RTRef [СтруктурнаяЕдиница_Вид]
					,_Fld6995_TYPE [СкладГруппа_Тип],_Fld6995_RRRef [СкладГруппа],_Fld6995_RTRef [СкладГруппа_Вид]
					,_Fld6996 [СуммаВключаетНДС]
					,_Fld6997 [СуммаДокумента]
					,_Fld6998RRef [ТипЦен]
					,_Fld6999 [УчитыватьНДС]
					,_Fld7000RRef [Грузополучатель]
					,_Fld7001RRef [КонтактноеЛицоКонтрагента]
					,_Fld7002RRef [УсловиеПродаж]
					,_Fld7003 [ДополнениеКАдресуДоставки]
					,_Fld7004_TYPE [ДокументОснование_Тип],_Fld7004_RRRef [ДокументОснование],_Fld7004_RTRef [ДокументОснование_Вид]
					,_Fld7005RRef [Грузоотправитель]
					,_Fld7006 [НомерВходящегоДокументаЭлектронногоОбмена]
					,_Fld7007 [ДатаВходящегоДокументаЭлектронногоОбмена]
					,_Fld7008 [НомерПоДаннымПокупателя]
					,_Fld7009 [ДатаПоДаннымПокупателя]
					From _Document362(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							АдресДоставки = Читалка.GetString(4);
							ВидОперации = V82.Перечисления/*Ссылка*/.ВидыОперацийЗаказПокупателя.ПустаяСсылка.Получить((byte[])Читалка.GetValue(6));
							ВремяНапоминания = Читалка.GetDateTime(7);
							ДатаОплаты = Читалка.GetDateTime(8);
							ДатаОтгрузки = Читалка.GetDateTime(9);
							ИспользоватьПлановуюСебестоимость = ((byte[])Читалка.GetValue(12))[0]==1;
							ИтогПлановаяСебестоимость = Читалка.GetDecimal(13);
							Комментарий = Читалка.GetString(14);
							КратностьВзаиморасчетов = Читалка.GetDecimal(16);
							КурсВзаиморасчетов = Читалка.GetDecimal(17);
							НапомнитьОСобытии = ((byte[])Читалка.GetValue(18))[0]==1;
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(21))[0]==1;
							ОтражатьВНалоговомУчете = ((byte[])Читалка.GetValue(22))[0]==1;
							СуммаВключаетНДС = ((byte[])Читалка.GetValue(30))[0]==1;
							СуммаДокумента = Читалка.GetDecimal(31);
							УчитыватьНДС = ((byte[])Читалка.GetValue(33))[0]==1;
							ДополнениеКАдресуДоставки = Читалка.GetString(37);
							НомерВходящегоДокументаЭлектронногоОбмена = Читалка.GetString(42);
							ДатаВходящегоДокументаЭлектронногоОбмена = Читалка.GetDateTime(43);
							НомерПоДаннымПокупателя = Читалка.GetString(44);
							ДатаПоДаннымПокупателя = Читалка.GetDateTime(45);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.ЗаказПокупателя  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.ЗаказПокупателя();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.АдресДоставки = АдресДоставки;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.ВидОперации = ВидОперации;
			Объект.ВремяНапоминания = ВремяНапоминания;
			Объект.ДатаОплаты = ДатаОплаты;
			Объект.ДатаОтгрузки = ДатаОтгрузки;
			Объект.ДисконтнаяКарта = ДисконтнаяКарта;
			Объект.ДоговорКонтрагента = ДоговорКонтрагента;
			Объект.ИспользоватьПлановуюСебестоимость = ИспользоватьПлановуюСебестоимость;
			Объект.ИтогПлановаяСебестоимость = ИтогПлановаяСебестоимость;
			Объект.Комментарий = Комментарий;
			Объект.Контрагент = Контрагент;
			Объект.КратностьВзаиморасчетов = КратностьВзаиморасчетов;
			Объект.КурсВзаиморасчетов = КурсВзаиморасчетов;
			Объект.НапомнитьОСобытии = НапомнитьОСобытии;
			Объект.Организация = Организация;
			Объект.Ответственный = Ответственный;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете;
			Объект.Подразделение = Подразделение;
			Объект.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			Объект.СкладГруппа = СкладГруппа;
			Объект.СуммаВключаетНДС = СуммаВключаетНДС;
			Объект.СуммаДокумента = СуммаДокумента;
			Объект.ТипЦен = ТипЦен;
			Объект.УчитыватьНДС = УчитыватьНДС;
			Объект.Грузополучатель = Грузополучатель;
			Объект.КонтактноеЛицоКонтрагента = КонтактноеЛицоКонтрагента;
			Объект.УсловиеПродаж = УсловиеПродаж;
			Объект.ДополнениеКАдресуДоставки = ДополнениеКАдресуДоставки;
			Объект.ДокументОснование = ДокументОснование;
			Объект.Грузоотправитель = Грузоотправитель;
			Объект.НомерВходящегоДокументаЭлектронногоОбмена = НомерВходящегоДокументаЭлектронногоОбмена;
			Объект.ДатаВходящегоДокументаЭлектронногоОбмена = ДатаВходящегоДокументаЭлектронногоОбмена;
			Объект.НомерПоДаннымПокупателя = НомерПоДаннымПокупателя;
			Объект.ДатаПоДаннымПокупателя = ДатаПоДаннымПокупателя;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.ЗаказПокупателя ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.ЗаказПокупателя)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.ЗаказПокупателя(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}