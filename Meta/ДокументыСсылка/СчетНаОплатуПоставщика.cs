
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Упр)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class СчетНаОплатуПоставщика:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("103851e0-5dcc-499c-a214-504025d55477");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191058.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		public DateTime ВремяНапоминания {get;set;}//Время напоминания
		///<summary>
		///(Общ) 
		///</summary>
		public DateTime ДатаВходящегоДокумента {get;set;}//Дата документа сторонней организации
		public DateTime ДатаОплаты {get;set;}//Дата оплаты
		public DateTime ДатаПоступления {get;set;}//Дата поступления
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагента {get;set;}//Договор контрагента
		public bool ИспользоватьПлановуюСебестоимость {get;set;}//Использовать плановую себестоимость
		public decimal/*(15.2)*/ ИтогПлановаяСебестоимость {get;set;}//Итоговая плановая себестоимость в валюте управленческого учета
		///<summary>
		///Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		public V82.СправочникиСсылка.Контрагенты Контрагент {get;set;}
		public decimal/*(10)*/ КратностьВзаиморасчетов {get;set;}//Кратность взаиморасчетов
		///<summary>
		///Курс валюты взаиморасчетов по договору
		///</summary>
		public decimal/*(10.4)*/ КурсВзаиморасчетов {get;set;}//Курс взаиморасчетов
		public bool НапомнитьОСобытии {get;set;}//Напомнить о событии
		///<summary>
		///(Общ) 
		///</summary>
		public string/*(30)*/ НомерВходящегоДокумента {get;set;}//Номер документа сторонней организации
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		public V82.СправочникиСсылка.Склады Склад {get;set;}
		public object СтруктурнаяЕдиница {get;set;}//Б/счет, касса
		public bool СуммаВключаетНДС {get;set;}//Сумма включает НДС
		///<summary>
		///Сумма в валюте документа, налоги включены согласно флагам
		///</summary>
		public decimal/*(15.2)*/ СуммаДокумента {get;set;}//Сумма документа
		public V82.СправочникиСсылка.ТипыЦенНоменклатурыКонтрагентов ТипЦен {get;set;}//Тип цен
		public bool УчитыватьНДС {get;set;}//Учитывать НДС
		public object ДокументОснование {get;set;}//Документ основание
		public V82.СправочникиСсылка.КонтактныеЛицаКонтрагентов КонтактноеЛицоКонтрагента {get;set;}//Контактное лицо контрагента
		public V82.СправочникиСсылка.УсловияПродаж УсловиеПродаж {get;set;}//Условие продаж
		public string/*(20)*/ НомерВходящегоДокументаЭлектронногоОбмена {get;set;}//Номер входящего документа электронного обмена
		public DateTime ДатаВходящегоДокументаЭлектронногоОбмена {get;set;}//Дата входящего документа электронного обмена
		
		public СчетНаОплатуПоставщика()
		{
		}
		
		public СчетНаОплатуПоставщика(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld17734RRef [ВалютаДокумента]
					,_Fld17735 [ВремяНапоминания]
					,_Fld17736 [ДатаВходящегоДокумента]
					,_Fld17737 [ДатаОплаты]
					,_Fld17738 [ДатаПоступления]
					,_Fld17739RRef [ДоговорКонтрагента]
					,_Fld17740 [ИспользоватьПлановуюСебестоимость]
					,_Fld17741 [ИтогПлановаяСебестоимость]
					,_Fld17742 [Комментарий]
					,_Fld17743RRef [Контрагент]
					,_Fld17744 [КратностьВзаиморасчетов]
					,_Fld17745 [КурсВзаиморасчетов]
					,_Fld17746 [НапомнитьОСобытии]
					,_Fld17747 [НомерВходящегоДокумента]
					,_Fld17748RRef [Организация]
					,_Fld17749RRef [Ответственный]
					,_Fld17750RRef [Подразделение]
					,_Fld17751RRef [Склад]
					,_Fld17752_TYPE [СтруктурнаяЕдиница_Тип],_Fld17752_RRRef [СтруктурнаяЕдиница],_Fld17752_RTRef [СтруктурнаяЕдиница_Вид]
					,_Fld17753 [СуммаВключаетНДС]
					,_Fld17754 [СуммаДокумента]
					,_Fld17755RRef [ТипЦен]
					,_Fld17756 [УчитыватьНДС]
					,_Fld17757_TYPE [ДокументОснование_Тип],_Fld17757_RRRef [ДокументОснование],_Fld17757_RTRef [ДокументОснование_Вид]
					,_Fld17758RRef [КонтактноеЛицоКонтрагента]
					,_Fld17759RRef [УсловиеПродаж]
					,_Fld17760 [НомерВходящегоДокументаЭлектронногоОбмена]
					,_Fld17761 [ДатаВходящегоДокументаЭлектронногоОбмена]
					From _Document604(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ВремяНапоминания = Читалка.GetDateTime(5);
							ДатаВходящегоДокумента = Читалка.GetDateTime(6);
							ДатаОплаты = Читалка.GetDateTime(7);
							ДатаПоступления = Читалка.GetDateTime(8);
							ИспользоватьПлановуюСебестоимость = ((byte[])Читалка.GetValue(10))[0]==1;
							ИтогПлановаяСебестоимость = Читалка.GetDecimal(11);
							Комментарий = Читалка.GetString(12);
							КратностьВзаиморасчетов = Читалка.GetDecimal(14);
							КурсВзаиморасчетов = Читалка.GetDecimal(15);
							НапомнитьОСобытии = ((byte[])Читалка.GetValue(16))[0]==1;
							НомерВходящегоДокумента = Читалка.GetString(17);
							СуммаВключаетНДС = ((byte[])Читалка.GetValue(25))[0]==1;
							СуммаДокумента = Читалка.GetDecimal(26);
							УчитыватьНДС = ((byte[])Читалка.GetValue(28))[0]==1;
							НомерВходящегоДокументаЭлектронногоОбмена = Читалка.GetString(34);
							ДатаВходящегоДокументаЭлектронногоОбмена = Читалка.GetDateTime(35);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.СчетНаОплатуПоставщика  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.СчетНаОплатуПоставщика();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.ВремяНапоминания = ВремяНапоминания;
			Объект.ДатаВходящегоДокумента = ДатаВходящегоДокумента;
			Объект.ДатаОплаты = ДатаОплаты;
			Объект.ДатаПоступления = ДатаПоступления;
			Объект.ДоговорКонтрагента = ДоговорКонтрагента;
			Объект.ИспользоватьПлановуюСебестоимость = ИспользоватьПлановуюСебестоимость;
			Объект.ИтогПлановаяСебестоимость = ИтогПлановаяСебестоимость;
			Объект.Комментарий = Комментарий;
			Объект.Контрагент = Контрагент;
			Объект.КратностьВзаиморасчетов = КратностьВзаиморасчетов;
			Объект.КурсВзаиморасчетов = КурсВзаиморасчетов;
			Объект.НапомнитьОСобытии = НапомнитьОСобытии;
			Объект.НомерВходящегоДокумента = НомерВходящегоДокумента;
			Объект.Организация = Организация;
			Объект.Ответственный = Ответственный;
			Объект.Подразделение = Подразделение;
			Объект.Склад = Склад;
			Объект.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			Объект.СуммаВключаетНДС = СуммаВключаетНДС;
			Объект.СуммаДокумента = СуммаДокумента;
			Объект.ТипЦен = ТипЦен;
			Объект.УчитыватьНДС = УчитыватьНДС;
			Объект.ДокументОснование = ДокументОснование;
			Объект.КонтактноеЛицоКонтрагента = КонтактноеЛицоКонтрагента;
			Объект.УсловиеПродаж = УсловиеПродаж;
			Объект.НомерВходящегоДокументаЭлектронногоОбмена = НомерВходящегоДокументаЭлектронногоОбмена;
			Объект.ДатаВходящегоДокументаЭлектронногоОбмена = ДатаВходящегоДокументаЭлектронногоОбмена;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.СчетНаОплатуПоставщика ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.СчетНаОплатуПоставщика)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.СчетНаОплатуПоставщика(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}