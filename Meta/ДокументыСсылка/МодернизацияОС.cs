
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Общ)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class МодернизацияОС:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("66847667-a5b2-43b0-a960-5f044ca5e6f8");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20120928011947.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		///<summary>
		///(Регл)
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВидыСобытийОС ВидОперацийСОсновнымиСредствами {get;set;}//Вид операций с основными средствами
		///<summary>
		///(Общ)
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ОбъектыСтроительства ОбъектСтроительства {get;set;}//Объект строительства
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВУправленческомУчете {get;set;}//Отражать в управленческом учете
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.СобытияОС Событие {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.СобытияОС СобытиеРегл {get;set;}//Событие (регл)
		///<summary>
		///(Упр)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьУУ {get;set;}//Стоимость по управленческому учету
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьБУ {get;set;}//Стоимость БУ
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьБУХоз {get;set;}//Стоимость БУ (Хоз. способ)
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьНУ {get;set;}//Стоимость НУ
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьНУХоз {get;set;}//Стоимость НУ (хоз. способ)
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьПР {get;set;}//Стоимость (ПР)
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьПРХоз {get;set;}//Стоимость (ПР) (хоз. способ)
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьВР {get;set;}//Стоимость (ВР)
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьВРХоз {get;set;}//Стоимость (ВР) (хоз. способ)
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаБУВнеоборотногоАктива {get;set;}//Счет учета БУ внеоборотного актива
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаНУВнеоборотногоАктива {get;set;}//Счет учета НУ внеоборотного актива
		public object СчетУчетаЗатратПоАмортизационнойПремии {get;set;}//Счет учета затрат по амортизационной премии
		public object СубконтоПоАмортизационнойПремии1 {get;set;}//Субконто по амортизационной премии1
		public object СубконтоПоАмортизационнойПремии2 {get;set;}//Субконто по амортизационной премии2
		public object СубконтоПоАмортизационнойПремии3 {get;set;}//Субконто по амортизационной премии3
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьУСН {get;set;}//Стоимость УСН
		public bool ВключатьАПВСоставРасходовПриОтраженииМодернизации {get;set;}//Включать амортизационную премию в состав расходов при отражении модернизации
		
		public МодернизацияОС()
		{
		}
		
		public МодернизацияОС(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld6086RRef [ВидОперацийСОсновнымиСредствами]
					,_Fld6087 [Комментарий]
					,_Fld6088RRef [ОбъектСтроительства]
					,_Fld6089RRef [Организация]
					,_Fld6090RRef [Ответственный]
					,_Fld6091 [ОтражатьВБухгалтерскомУчете]
					,_Fld6092 [ОтражатьВНалоговомУчете]
					,_Fld6093 [ОтражатьВУправленческомУчете]
					,_Fld6094RRef [Событие]
					,_Fld6095RRef [СобытиеРегл]
					,_Fld6096 [СтоимостьУУ]
					,_Fld6097 [СтоимостьБУ]
					,_Fld6098 [СтоимостьБУХоз]
					,_Fld6099 [СтоимостьНУ]
					,_Fld6100 [СтоимостьНУХоз]
					,_Fld6103 [СтоимостьПР]
					,_Fld6104 [СтоимостьПРХоз]
					,_Fld6105 [СтоимостьВР]
					,_Fld6106 [СтоимостьВРХоз]
					,_Fld6101RRef [СчетУчетаБУВнеоборотногоАктива]
					,_Fld6102RRef [СчетУчетаНУВнеоборотногоАктива]
					,_Fld18755RRef [СчетУчетаЗатратПоАмортизационнойПремии]
					,_Fld18756RRef [СубконтоПоАмортизационнойПремии1]
					,_Fld18757RRef [СубконтоПоАмортизационнойПремии2]
					,_Fld18758RRef [СубконтоПоАмортизационнойПремии3]
					,_Fld19610 [СтоимостьУСН]
					,_Fld26818 [ВключатьАПВСоставРасходовПриОтраженииМодернизации]
					From _Document316(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ВидОперацийСОсновнымиСредствами = V82.Перечисления/*Ссылка*/.ВидыСобытийОС.ПустаяСсылка.Получить((byte[])Читалка.GetValue(4));
							Комментарий = Читалка.GetString(5);
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(9))[0]==1;
							ОтражатьВНалоговомУчете = ((byte[])Читалка.GetValue(10))[0]==1;
							ОтражатьВУправленческомУчете = ((byte[])Читалка.GetValue(11))[0]==1;
							СтоимостьУУ = Читалка.GetDecimal(14);
							СтоимостьБУ = Читалка.GetDecimal(15);
							СтоимостьБУХоз = Читалка.GetDecimal(16);
							СтоимостьНУ = Читалка.GetDecimal(17);
							СтоимостьНУХоз = Читалка.GetDecimal(18);
							СтоимостьПР = Читалка.GetDecimal(19);
							СтоимостьПРХоз = Читалка.GetDecimal(20);
							СтоимостьВР = Читалка.GetDecimal(21);
							СтоимостьВРХоз = Читалка.GetDecimal(22);
							СтоимостьУСН = Читалка.GetDecimal(29);
							ВключатьАПВСоставРасходовПриОтраженииМодернизации = ((byte[])Читалка.GetValue(30))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.МодернизацияОС  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.МодернизацияОС();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.ВидОперацийСОсновнымиСредствами = ВидОперацийСОсновнымиСредствами;
			Объект.Комментарий = Комментарий;
			Объект.ОбъектСтроительства = ОбъектСтроительства;
			Объект.Организация = Организация;
			Объект.Ответственный = Ответственный;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете;
			Объект.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
			Объект.Событие = Событие;
			Объект.СобытиеРегл = СобытиеРегл;
			Объект.СтоимостьУУ = СтоимостьУУ;
			Объект.СтоимостьБУ = СтоимостьБУ;
			Объект.СтоимостьБУХоз = СтоимостьБУХоз;
			Объект.СтоимостьНУ = СтоимостьНУ;
			Объект.СтоимостьНУХоз = СтоимостьНУХоз;
			Объект.СтоимостьПР = СтоимостьПР;
			Объект.СтоимостьПРХоз = СтоимостьПРХоз;
			Объект.СтоимостьВР = СтоимостьВР;
			Объект.СтоимостьВРХоз = СтоимостьВРХоз;
			Объект.СчетУчетаБУВнеоборотногоАктива = СчетУчетаБУВнеоборотногоАктива;
			Объект.СчетУчетаНУВнеоборотногоАктива = СчетУчетаНУВнеоборотногоАктива;
			Объект.СчетУчетаЗатратПоАмортизационнойПремии = СчетУчетаЗатратПоАмортизационнойПремии;
			Объект.СубконтоПоАмортизационнойПремии1 = СубконтоПоАмортизационнойПремии1;
			Объект.СубконтоПоАмортизационнойПремии2 = СубконтоПоАмортизационнойПремии2;
			Объект.СубконтоПоАмортизационнойПремии3 = СубконтоПоАмортизационнойПремии3;
			Объект.СтоимостьУСН = СтоимостьУСН;
			Объект.ВключатьАПВСоставРасходовПриОтраженииМодернизации = ВключатьАПВСоставРасходовПриОтраженииМодернизации;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.МодернизацияОС ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.МодернизацияОС)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.МодернизацияОС(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}