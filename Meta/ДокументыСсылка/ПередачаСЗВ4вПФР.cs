
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	[ProtoContract]
	[DataContract]
	public partial class ПередачаСЗВ4вПФР:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("bc7241bb-11c2-43e5-8abb-554ecf54cf74");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20120928012004.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		public DateTime ДатаДействия {get;set;}//Дата действия
		///<summary>
		///Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		public string/*(100)*/ КраткийСоставДокумента {get;set;}//Краткий состав документа
		public V82.СправочникиСсылка.ФизическиеЛица Руководитель {get;set;}
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.ДолжностиОрганизаций ДолжностьРуководителя {get;set;}//Должность руководителя
		public DateTime ОтчетныйПериод {get;set;}//Отчетный период
		public bool ПринятоВПФР {get;set;}//Принято ВПФР
		public string/*(5)*/ НомерПачки {get;set;}//Номер пачки
		public V82.Перечисления/*Ссылка*/.ФорматФайлаПФР ФорматФайла {get;set;}//Формат файла
		public string/*(5)*/ ТипСведений {get;set;}//Тип сведений
		public decimal/*(4)*/ Год {get;set;}
		///<summary>
		///Ведет себя по правилам 2009 года.
		///</summary>
		public bool СпециальныйДокумент2010года {get;set;}//Специальный документ 2010 года
		public bool НеСодержитСЗВ {get;set;}//Не содержит СЗВ
		public V82.ДокументыСсылка.РегламентированныйОтчет РасчетСтраховыхВзносов {get;set;}//Ссылка на расчет страховых взносов
		///<summary>
		///Такие документы создает обработка загрузки из принятых ПФРом файлов
		///</summary>
		public bool ЗаполненПринятымиСведениями {get;set;}//Заполнен принятыми сведениями
		public decimal/*(15.2)*/ УдалитьУплаченоЗаТекущийГодСтраховаяЧасть {get;set;}//Удалить уплачено за текущий год страховая часть
		public decimal/*(15.2)*/ УдалитьНачисленоЗаТекущийГодДополнительныйТариф {get;set;}//Удалить начислено за текущий год дополнительный тариф
		public decimal/*(15.2)*/ УдалитьУплаченоЗаТекущийГодДополнительныйТариф {get;set;}//Удалить уплачено за текущий год дополнительный тариф
		public decimal/*(15.2)*/ УдалитьУплаченоЗаТекущийГодНакопительнаяЧасть {get;set;}//Удалить уплачено за текущий год накопительная часть
		public decimal/*(15.2)*/ УдалитьНачисленоЗаТекущийГодСтраховаяЧасть {get;set;}//Удалить начислено за текущий год страховая часть
		public decimal/*(15.2)*/ УдалитьНачисленоЗаТекущийГодНакопительнаяЧасть {get;set;}//Удалить начислено за текущий год накопительная часть
		
		public ПередачаСЗВ4вПФР()
		{
		}
		
		public ПередачаСЗВ4вПФР(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld7933RRef [Организация]
					,_Fld7935 [ДатаДействия]
					,_Fld7937 [Комментарий]
					,_Fld7938RRef [Ответственный]
					,_Fld7943 [КраткийСоставДокумента]
					,_Fld27199RRef [Руководитель]
					,_Fld27200RRef [ДолжностьРуководителя]
					,_Fld27201 [ОтчетныйПериод]
					,_Fld27202 [ПринятоВПФР]
					,_Fld27203 [НомерПачки]
					,_Fld21810RRef [ФорматФайла]
					,_Fld7936 [ТипСведений]
					,_Fld7934 [Год]
					,_Fld27204 [СпециальныйДокумент2010года]
					,_Fld27205 [НеСодержитСЗВ]
					,_Fld27206RRef [РасчетСтраховыхВзносов]
					,_Fld27207 [ЗаполненПринятымиСведениями]
					,_Fld7941 [УдалитьУплаченоЗаТекущийГодСтраховаяЧасть]
					,_Fld27208 [УдалитьНачисленоЗаТекущийГодДополнительныйТариф]
					,_Fld27209 [УдалитьУплаченоЗаТекущийГодДополнительныйТариф]
					,_Fld7942 [УдалитьУплаченоЗаТекущийГодНакопительнаяЧасть]
					,_Fld7939 [УдалитьНачисленоЗаТекущийГодСтраховаяЧасть]
					,_Fld7940 [УдалитьНачисленоЗаТекущийГодНакопительнаяЧасть]
					From _Document365(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ДатаДействия = Читалка.GetDateTime(5);
							Комментарий = Читалка.GetString(6);
							КраткийСоставДокумента = Читалка.GetString(8);
							ОтчетныйПериод = Читалка.GetDateTime(11);
							ПринятоВПФР = ((byte[])Читалка.GetValue(12))[0]==1;
							НомерПачки = Читалка.GetString(13);
							ФорматФайла = V82.Перечисления/*Ссылка*/.ФорматФайлаПФР.ПустаяСсылка.Получить((byte[])Читалка.GetValue(14));
							ТипСведений = Читалка.GetString(15);
							Год = Читалка.GetDecimal(16);
							СпециальныйДокумент2010года = ((byte[])Читалка.GetValue(17))[0]==1;
							НеСодержитСЗВ = ((byte[])Читалка.GetValue(18))[0]==1;
							РасчетСтраховыхВзносов = new V82.ДокументыСсылка.РегламентированныйОтчет((byte[])Читалка.GetValue(19));
							ЗаполненПринятымиСведениями = ((byte[])Читалка.GetValue(20))[0]==1;
							УдалитьУплаченоЗаТекущийГодСтраховаяЧасть = Читалка.GetDecimal(21);
							УдалитьНачисленоЗаТекущийГодДополнительныйТариф = Читалка.GetDecimal(22);
							УдалитьУплаченоЗаТекущийГодДополнительныйТариф = Читалка.GetDecimal(23);
							УдалитьУплаченоЗаТекущийГодНакопительнаяЧасть = Читалка.GetDecimal(24);
							УдалитьНачисленоЗаТекущийГодСтраховаяЧасть = Читалка.GetDecimal(25);
							УдалитьНачисленоЗаТекущийГодНакопительнаяЧасть = Читалка.GetDecimal(26);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.ПередачаСЗВ4вПФР  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.ПередачаСЗВ4вПФР();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.Организация = Организация;
			Объект.ДатаДействия = ДатаДействия;
			Объект.Комментарий = Комментарий;
			Объект.Ответственный = Ответственный;
			Объект.КраткийСоставДокумента = КраткийСоставДокумента;
			Объект.Руководитель = Руководитель;
			Объект.ДолжностьРуководителя = ДолжностьРуководителя;
			Объект.ОтчетныйПериод = ОтчетныйПериод;
			Объект.ПринятоВПФР = ПринятоВПФР;
			Объект.НомерПачки = НомерПачки;
			Объект.ФорматФайла = ФорматФайла;
			Объект.ТипСведений = ТипСведений;
			Объект.Год = Год;
			Объект.СпециальныйДокумент2010года = СпециальныйДокумент2010года;
			Объект.НеСодержитСЗВ = НеСодержитСЗВ;
			Объект.РасчетСтраховыхВзносов = РасчетСтраховыхВзносов;
			Объект.ЗаполненПринятымиСведениями = ЗаполненПринятымиСведениями;
			Объект.УдалитьУплаченоЗаТекущийГодСтраховаяЧасть = УдалитьУплаченоЗаТекущийГодСтраховаяЧасть;
			Объект.УдалитьНачисленоЗаТекущийГодДополнительныйТариф = УдалитьНачисленоЗаТекущийГодДополнительныйТариф;
			Объект.УдалитьУплаченоЗаТекущийГодДополнительныйТариф = УдалитьУплаченоЗаТекущийГодДополнительныйТариф;
			Объект.УдалитьУплаченоЗаТекущийГодНакопительнаяЧасть = УдалитьУплаченоЗаТекущийГодНакопительнаяЧасть;
			Объект.УдалитьНачисленоЗаТекущийГодСтраховаяЧасть = УдалитьНачисленоЗаТекущийГодСтраховаяЧасть;
			Объект.УдалитьНачисленоЗаТекущийГодНакопительнаяЧасть = УдалитьНачисленоЗаТекущийГодНакопительнаяЧасть;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.ПередачаСЗВ4вПФР ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.ПередачаСЗВ4вПФР)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.ПередачаСЗВ4вПФР(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}