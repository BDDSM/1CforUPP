
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Общ)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ОтчетКомиссионераОПродажах:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("b1cb3a3e-301e-4ef2-b60d-a490793679f1");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191605.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		///<summary>
		///(Общ)
		///</summary>
		public DateTime ДатаВходящегоДокумента {get;set;}//Дата документа сторонней организации
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагента {get;set;}//Договор контрагента
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты Контрагент {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10)*/ КратностьВзаиморасчетов {get;set;}//Кратность взаиморасчетов
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10.4)*/ КурсВзаиморасчетов {get;set;}//Курс взаиморасчетов
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.НоменклатурныеГруппы НоменклатурнаяГруппа {get;set;}//Номенклатурная группа
		///<summary>
		///(Общ)
		///</summary>
		public string/*(30)*/ НомерВходящегоДокумента {get;set;}//Номер документа сторонней организации
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВУправленческомУчете {get;set;}//Отражать в управленческом учете
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.ПодразделенияОрганизаций ПодразделениеОрганизации {get;set;}//Подразделение организации
		///<summary>
		///(Общ) Процент от прибыли или с продаж, по которому рассчитывается сумма комиссионного вознаграждения
		///</summary>
		public decimal/*(5.2)*/ ПроцентКомиссионногоВознаграждения {get;set;}//Процент комиссионного вознаграждения
		///<summary>
		///(Общ)
		///</summary>
		public object Сделка {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.Перечисления/*Ссылка*/.СпособыРасчетаКомиссионногоВознаграждения СпособРасчетаКомиссионногоВознаграждения {get;set;}//Способ расчета комиссионного вознаграждения
		///<summary>
		///(Общ)
		///</summary>
		public V82.Перечисления/*Ссылка*/.СтавкиНДС СтавкаНДСВознаграждения {get;set;}//Ставка НДС с комиссионного вознаграждения
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.СтатьиЗатрат СтатьяЗатрат {get;set;}//Статья затрат
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоНУ1 {get;set;}//Субконто 1 (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоНУ2 {get;set;}//Субконто 2 (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоНУ3 {get;set;}//Субконто 3 (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object Субконто1 {get;set;}
		///<summary>
		///(Регл)
		///</summary>
		public object Субконто2 {get;set;}//Субконто1
		///<summary>
		///(Регл)
		///</summary>
		public object Субконто3 {get;set;}//Субконто1
		///<summary>
		///(Общ)
		///</summary>
		public bool СуммаВключаетНДС {get;set;}//Сумма включает НДС
		///<summary>
		///(Общ) Сумма комиссионного вознаграждения в валюте взаиморасчетов (долга перед комиссионером за услугу по реализации товаров)
		///</summary>
		public decimal/*(15.2)*/ СуммаВознаграждения {get;set;}//Сумма вознаграждения 
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(15.2)*/ СуммаНДСВознаграждения {get;set;}//Сумма НДС вознаграждения
		///<summary>
		///(Общ) Сумма в валюте документа, налоги включены согласно флагам
		///</summary>
		public decimal/*(15.2)*/ СуммаДокумента {get;set;}//Сумма документа
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаЗатрат {get;set;}//Счет учета затрат
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаЗатратНУ {get;set;}//Счет учета затрат (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаНДС {get;set;}//Счет учета НДС
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасчетовЗаПосредническиеУслуги {get;set;}//Счет учета расчетов за посреднические услуги
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасчетовПоАвансамВыданным {get;set;}//Счет учета расчетов по авансам выданным
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасчетовПоАвансамПолученным {get;set;}//Счет учета расчетов по авансам полученным
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасчетовСКонтрагентом {get;set;}//Счет учета расчетов с контрагентом
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ТипыЦенНоменклатуры ТипЦен {get;set;}//Тип цен
		///<summary>
		///(Общ)
		///</summary>
		public bool УчитыватьНДС {get;set;}//Учитывать НДС
		public object Проект {get;set;}
		public bool УдержатьКомиссионноеВознаграждение {get;set;}//Удержать комиссионное вознаграждение
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты Грузоотправитель {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты Грузополучатель {get;set;}
		///<summary>
		///(Регл)
		///</summary>
		public bool НДСВключенВСтоимость {get;set;}//НДС включен в стоимость
		public string/*(20)*/ НомерВходящегоДокументаЭлектронногоОбмена {get;set;}//Номер входящего документа электронного обмена
		public DateTime ДатаВходящегоДокументаЭлектронногоОбмена {get;set;}//Дата входящего документа электронного обмена
		
		public ОтчетКомиссионераОПродажах()
		{
		}
		
		public ОтчетКомиссионераОПродажах(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld11395RRef [ВалютаДокумента]
					,_Fld11396 [ДатаВходящегоДокумента]
					,_Fld11397RRef [ДоговорКонтрагента]
					,_Fld11398 [Комментарий]
					,_Fld11399RRef [Контрагент]
					,_Fld11400 [КратностьВзаиморасчетов]
					,_Fld11401 [КурсВзаиморасчетов]
					,_Fld11402RRef [НоменклатурнаяГруппа]
					,_Fld11403 [НомерВходящегоДокумента]
					,_Fld11404RRef [Организация]
					,_Fld11405RRef [Ответственный]
					,_Fld11406 [ОтражатьВБухгалтерскомУчете]
					,_Fld11407 [ОтражатьВНалоговомУчете]
					,_Fld11408 [ОтражатьВУправленческомУчете]
					,_Fld11409RRef [Подразделение]
					,_Fld11410RRef [ПодразделениеОрганизации]
					,_Fld11411 [ПроцентКомиссионногоВознаграждения]
					,_Fld11412_TYPE [Сделка_Тип],_Fld11412_RRRef [Сделка],_Fld11412_RTRef [Сделка_Вид]
					,_Fld11413RRef [СпособРасчетаКомиссионногоВознаграждения]
					,_Fld11414RRef [СтавкаНДСВознаграждения]
					,_Fld11415RRef [СтатьяЗатрат]
					,_Fld11416RRef [СубконтоНУ1]
					,_Fld11417RRef [СубконтоНУ2]
					,_Fld11418RRef [СубконтоНУ3]
					,_Fld11419RRef [Субконто1]
					,_Fld11420RRef [Субконто2]
					,_Fld11421RRef [Субконто3]
					,_Fld11422 [СуммаВключаетНДС]
					,_Fld11423 [СуммаВознаграждения]
					,_Fld11424 [СуммаНДСВознаграждения]
					,_Fld11425 [СуммаДокумента]
					,_Fld11426RRef [СчетУчетаЗатрат]
					,_Fld11427RRef [СчетУчетаЗатратНУ]
					,_Fld11428RRef [СчетУчетаНДС]
					,_Fld11429RRef [СчетУчетаРасчетовЗаПосредническиеУслуги]
					,_Fld11430RRef [СчетУчетаРасчетовПоАвансамВыданным]
					,_Fld11431RRef [СчетУчетаРасчетовПоАвансамПолученным]
					,_Fld11432RRef [СчетУчетаРасчетовСКонтрагентом]
					,_Fld11433RRef [ТипЦен]
					,_Fld11434 [УчитыватьНДС]
					,_Fld11435_TYPE [Проект_Тип],_Fld11435_RRRef [Проект],_Fld11435_RTRef [Проект_Вид]
					,_Fld11436 [УдержатьКомиссионноеВознаграждение]
					,_Fld11437RRef [Грузоотправитель]
					,_Fld11438RRef [Грузополучатель]
					,_Fld11439 [НДСВключенВСтоимость]
					,_Fld11440 [НомерВходящегоДокументаЭлектронногоОбмена]
					,_Fld11441 [ДатаВходящегоДокументаЭлектронногоОбмена]
					From _Document474(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ДатаВходящегоДокумента = Читалка.GetDateTime(5);
							Комментарий = Читалка.GetString(7);
							КратностьВзаиморасчетов = Читалка.GetDecimal(9);
							КурсВзаиморасчетов = Читалка.GetDecimal(10);
							НомерВходящегоДокумента = Читалка.GetString(12);
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(15))[0]==1;
							ОтражатьВНалоговомУчете = ((byte[])Читалка.GetValue(16))[0]==1;
							ОтражатьВУправленческомУчете = ((byte[])Читалка.GetValue(17))[0]==1;
							ПроцентКомиссионногоВознаграждения = Читалка.GetDecimal(20);
							СпособРасчетаКомиссионногоВознаграждения = V82.Перечисления/*Ссылка*/.СпособыРасчетаКомиссионногоВознаграждения.ПустаяСсылка.Получить((byte[])Читалка.GetValue(24));
							СтавкаНДСВознаграждения = V82.Перечисления/*Ссылка*/.СтавкиНДС.ПустаяСсылка.Получить((byte[])Читалка.GetValue(25));
							СуммаВключаетНДС = ((byte[])Читалка.GetValue(33))[0]==1;
							СуммаВознаграждения = Читалка.GetDecimal(34);
							СуммаНДСВознаграждения = Читалка.GetDecimal(35);
							СуммаДокумента = Читалка.GetDecimal(36);
							УчитыватьНДС = ((byte[])Читалка.GetValue(45))[0]==1;
							УдержатьКомиссионноеВознаграждение = ((byte[])Читалка.GetValue(49))[0]==1;
							НДСВключенВСтоимость = ((byte[])Читалка.GetValue(52))[0]==1;
							НомерВходящегоДокументаЭлектронногоОбмена = Читалка.GetString(53);
							ДатаВходящегоДокументаЭлектронногоОбмена = Читалка.GetDateTime(54);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.ОтчетКомиссионераОПродажах  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.ОтчетКомиссионераОПродажах();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.ДатаВходящегоДокумента = ДатаВходящегоДокумента;
			Объект.ДоговорКонтрагента = ДоговорКонтрагента;
			Объект.Комментарий = Комментарий;
			Объект.Контрагент = Контрагент;
			Объект.КратностьВзаиморасчетов = КратностьВзаиморасчетов;
			Объект.КурсВзаиморасчетов = КурсВзаиморасчетов;
			Объект.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
			Объект.НомерВходящегоДокумента = НомерВходящегоДокумента;
			Объект.Организация = Организация;
			Объект.Ответственный = Ответственный;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете;
			Объект.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
			Объект.Подразделение = Подразделение;
			Объект.ПодразделениеОрганизации = ПодразделениеОрганизации;
			Объект.ПроцентКомиссионногоВознаграждения = ПроцентКомиссионногоВознаграждения;
			Объект.Сделка = Сделка;
			Объект.СпособРасчетаКомиссионногоВознаграждения = СпособРасчетаКомиссионногоВознаграждения;
			Объект.СтавкаНДСВознаграждения = СтавкаНДСВознаграждения;
			Объект.СтатьяЗатрат = СтатьяЗатрат;
			Объект.СубконтоНУ1 = СубконтоНУ1;
			Объект.СубконтоНУ2 = СубконтоНУ2;
			Объект.СубконтоНУ3 = СубконтоНУ3;
			Объект.Субконто1 = Субконто1;
			Объект.Субконто2 = Субконто2;
			Объект.Субконто3 = Субконто3;
			Объект.СуммаВключаетНДС = СуммаВключаетНДС;
			Объект.СуммаВознаграждения = СуммаВознаграждения;
			Объект.СуммаНДСВознаграждения = СуммаНДСВознаграждения;
			Объект.СуммаДокумента = СуммаДокумента;
			Объект.СчетУчетаЗатрат = СчетУчетаЗатрат;
			Объект.СчетУчетаЗатратНУ = СчетУчетаЗатратНУ;
			Объект.СчетУчетаНДС = СчетУчетаНДС;
			Объект.СчетУчетаРасчетовЗаПосредническиеУслуги = СчетУчетаРасчетовЗаПосредническиеУслуги;
			Объект.СчетУчетаРасчетовПоАвансамВыданным = СчетУчетаРасчетовПоАвансамВыданным;
			Объект.СчетУчетаРасчетовПоАвансамПолученным = СчетУчетаРасчетовПоАвансамПолученным;
			Объект.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
			Объект.ТипЦен = ТипЦен;
			Объект.УчитыватьНДС = УчитыватьНДС;
			Объект.Проект = Проект;
			Объект.УдержатьКомиссионноеВознаграждение = УдержатьКомиссионноеВознаграждение;
			Объект.Грузоотправитель = Грузоотправитель;
			Объект.Грузополучатель = Грузополучатель;
			Объект.НДСВключенВСтоимость = НДСВключенВСтоимость;
			Объект.НомерВходящегоДокументаЭлектронногоОбмена = НомерВходящегоДокументаЭлектронногоОбмена;
			Объект.ДатаВходящегоДокументаЭлектронногоОбмена = ДатаВходящегоДокументаЭлектронногоОбмена;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.ОтчетКомиссионераОПродажах ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.ОтчетКомиссионераОПродажах)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.ОтчетКомиссионераОПродажах(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}