
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Упр)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class УстановкаСкидокНоменклатуры:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("74b5b823-bb9e-4eb4-b66c-7ab06b75a693");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20120928012012.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public string/*(0)*/ Комментарий {get;set;}
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		public V82.СправочникиСсылка.Валюты Валюта {get;set;}
		public V82.Перечисления/*Ссылка*/.ВидыСкидок ВидСкидки {get;set;}//Вид скидки
		public DateTime ДатаНачала {get;set;}//Дата начала действия скидки
		public DateTime ДатаОкончания {get;set;}//Дата окончания действия скидки
		public bool ДляВсейНоменклатуры {get;set;}//Для всей номенклатуры
		public bool ДляВсехПолучателей {get;set;}//Для всех получателей
		public object ЗначениеУсловия {get;set;}//Значение условия
		public DateTime ОбщееВремяНачала {get;set;}//Общее время начала
		public DateTime ОбщееВремяОкончания {get;set;}//Общее время окончания
		public decimal/*(15.2)*/ ОграничениеСкидкиНаценки {get;set;}//Ограничение скидки, наценки
		public decimal/*(5.2)*/ ПроцентСкидкиНаценки {get;set;}//Процент скидки, наценки
		public V82.СправочникиСсылка.ТипыСкидокНаценок ТипСкидкиНаценки {get;set;}//Тип скидки наценки
		public V82.Перечисления/*Ссылка*/.УсловияСкидкиНаценки Условие {get;set;}
		public bool ПоДнямНедели {get;set;}//По дням недели
		public V82.Перечисления/*Ссылка*/.ВидыОперацийУстановкаСкидокНоменклатуры ВидОперации {get;set;}//Вид операции
		public V82.СправочникиСсылка.Качество Качество {get;set;}
		
		public УстановкаСкидокНоменклатуры()
		{
		}
		
		public УстановкаСкидокНоменклатуры(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld12226 [Комментарий]
					,_Fld12227RRef [Ответственный]
					,_Fld12228RRef [Валюта]
					,_Fld12229RRef [ВидСкидки]
					,_Fld12230 [ДатаНачала]
					,_Fld12231 [ДатаОкончания]
					,_Fld12232 [ДляВсейНоменклатуры]
					,_Fld12233 [ДляВсехПолучателей]
					,_Fld12234_TYPE [ЗначениеУсловия_Тип],_Fld12234_RRRef [ЗначениеУсловия],_Fld12234_RTRef [ЗначениеУсловия_Вид]
					,_Fld12235 [ОбщееВремяНачала]
					,_Fld12236 [ОбщееВремяОкончания]
					,_Fld12237 [ОграничениеСкидкиНаценки]
					,_Fld12238 [ПроцентСкидкиНаценки]
					,_Fld12239RRef [ТипСкидкиНаценки]
					,_Fld12240RRef [Условие]
					,_Fld12241 [ПоДнямНедели]
					,_Fld12242RRef [ВидОперации]
					,_Fld12243RRef [Качество]
					From _Document480(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							Комментарий = Читалка.GetString(4);
							ВидСкидки = V82.Перечисления/*Ссылка*/.ВидыСкидок.ПустаяСсылка.Получить((byte[])Читалка.GetValue(7));
							ДатаНачала = Читалка.GetDateTime(8);
							ДатаОкончания = Читалка.GetDateTime(9);
							ДляВсейНоменклатуры = ((byte[])Читалка.GetValue(10))[0]==1;
							ДляВсехПолучателей = ((byte[])Читалка.GetValue(11))[0]==1;
							ОбщееВремяНачала = Читалка.GetDateTime(15);
							ОбщееВремяОкончания = Читалка.GetDateTime(16);
							ОграничениеСкидкиНаценки = Читалка.GetDecimal(17);
							ПроцентСкидкиНаценки = Читалка.GetDecimal(18);
							Условие = V82.Перечисления/*Ссылка*/.УсловияСкидкиНаценки.ПустаяСсылка.Получить((byte[])Читалка.GetValue(20));
							ПоДнямНедели = ((byte[])Читалка.GetValue(21))[0]==1;
							ВидОперации = V82.Перечисления/*Ссылка*/.ВидыОперацийУстановкаСкидокНоменклатуры.ПустаяСсылка.Получить((byte[])Читалка.GetValue(22));
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.УстановкаСкидокНоменклатуры  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.УстановкаСкидокНоменклатуры();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.Комментарий = Комментарий;
			Объект.Ответственный = Ответственный;
			Объект.Валюта = Валюта;
			Объект.ВидСкидки = ВидСкидки;
			Объект.ДатаНачала = ДатаНачала;
			Объект.ДатаОкончания = ДатаОкончания;
			Объект.ДляВсейНоменклатуры = ДляВсейНоменклатуры;
			Объект.ДляВсехПолучателей = ДляВсехПолучателей;
			Объект.ЗначениеУсловия = ЗначениеУсловия;
			Объект.ОбщееВремяНачала = ОбщееВремяНачала;
			Объект.ОбщееВремяОкончания = ОбщееВремяОкончания;
			Объект.ОграничениеСкидкиНаценки = ОграничениеСкидкиНаценки;
			Объект.ПроцентСкидкиНаценки = ПроцентСкидкиНаценки;
			Объект.ТипСкидкиНаценки = ТипСкидкиНаценки;
			Объект.Условие = Условие;
			Объект.ПоДнямНедели = ПоДнямНедели;
			Объект.ВидОперации = ВидОперации;
			Объект.Качество = Качество;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.УстановкаСкидокНоменклатуры ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.УстановкаСкидокНоменклатуры)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.УстановкаСкидокНоменклатуры(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}