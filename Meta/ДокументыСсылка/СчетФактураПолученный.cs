
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Регл)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class СчетФактураПолученный:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("3ecf9eae-7e55-4a75-a3a1-517c7e8424d8");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191937.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public DateTime ДатаИсправления {get;set;}//Дата исправления
		public V82.СправочникиСсылка.Контрагенты Контрагент {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагента {get;set;}//Договор контрагента
		public object ДокументОснование {get;set;}//Документ основание
		public DateTime ДатаВходящегоДокумента {get;set;}//Дата документа сторонней организации
		public string/*(30)*/ НомерВходящегоДокумента {get;set;}//Номер документа сторонней организации
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		public decimal/*(14.2)*/ СуммаДокумента {get;set;}//Сумма документа
		public bool СформированПриВводеНачальныхОстатковНДС {get;set;}//Сформирован при вводе начальных остатков НДС
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		public string/*(20)*/ НомерВходящегоДокументаЭлектронногоОбмена {get;set;}//Номер входящего документа электронного обмена
		public DateTime ДатаВходящегоДокументаЭлектронногоОбмена {get;set;}//Дата входящего документа электронного обмена
		///<summary>
		///Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		public bool УдалитьНаАванс {get;set;}//(не используется) На аванс
		public DateTime ДатаИсправленияИсходногоДокумента {get;set;}//Дата исправления исходного документа
		public DateTime ДатаИсходногоДокумента {get;set;}//Дата корректируемого счета-фактуры
		public bool Исправление {get;set;}
		public string/*(10)*/ КодВидаОперации {get;set;}//Код вида операции
		public decimal/*(1)*/ КодСпособаПолучения {get;set;}//Код способа получения
		public decimal/*(10)*/ НомерИсправления {get;set;}//Номер исправления
		public decimal/*(10)*/ НомерИсправленияИсходногоДокумента {get;set;}//Номер исправления исходного документа
		public string/*(30)*/ НомерИсходногоДокумента {get;set;}//Номер корректируемого счета-фактуры
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///Сумма по документу основанию в валюте документа увеличение
		///</summary>
		public decimal/*(14.2)*/ СуммаУвеличение {get;set;}//Сумма по документу-основанию увеличение
		///<summary>
		///Сумма по документу основанию в валюте документа уменьшение
		///</summary>
		public decimal/*(14.2)*/ СуммаУменьшение {get;set;}//Сумма по документу-основанию уменьшение
		public bool УчитыватьИсправлениеИсходногоДокумента {get;set;}//Учитывать исправление исходного документа
		public bool СчетФактураБезНДС {get;set;}//Счет-фактура без НДС
		///<summary>
		///Сумма НДС по документу основанию в валюте документа увеличение
		///</summary>
		public decimal/*(14.2)*/ СуммаНДСУвеличение {get;set;}//Сумма НДС по документу-основанию увеличение
		///<summary>
		///Сумма НДС по документу основанию в валюте документа уменьшение
		///</summary>
		public decimal/*(14.2)*/ СуммаНДСУменьшение {get;set;}//Сумма НДС по документу-основанию уменьшение
		///<summary>
		///Сумма НДС по документу основанию в валюте документа
		///</summary>
		public decimal/*(14.2)*/ СуммаНДСДокумента {get;set;}//Сумма НДС по документу-основанию
		public V82.ДокументыСсылка.СчетФактураПолученный ИсправляемыйСчетФактура {get;set;}//Исправляемый счет-фактура
		public V82.Перечисления/*Ссылка*/.ВидСчетаФактурыПолученного ВидСчетаФактуры {get;set;}//Вид счета-фактуры
		public bool БланкСтрогойОтчетности {get;set;}//Бланк строгой отчетности
		
		public СчетФактураПолученный()
		{
		}
		
		public СчетФактураПолученный(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld17874 [ДатаИсправления]
					,_Fld17875RRef [Контрагент]
					,_Fld17876RRef [ДоговорКонтрагента]
					,_Fld17877_TYPE [ДокументОснование_Тип],_Fld17877_RRRef [ДокументОснование],_Fld17877_RTRef [ДокументОснование_Вид]
					,_Fld17878 [ДатаВходящегоДокумента]
					,_Fld17879 [НомерВходящегоДокумента]
					,_Fld17880RRef [ВалютаДокумента]
					,_Fld17881 [СуммаДокумента]
					,_Fld17882 [СформированПриВводеНачальныхОстатковНДС]
					,_Fld17883RRef [Ответственный]
					,_Fld17884 [НомерВходящегоДокументаЭлектронногоОбмена]
					,_Fld17885 [ДатаВходящегоДокументаЭлектронногоОбмена]
					,_Fld17886 [Комментарий]
					,_Fld17887 [УдалитьНаАванс]
					,_Fld17888 [ДатаИсправленияИсходногоДокумента]
					,_Fld17889 [ДатаИсходногоДокумента]
					,_Fld17890 [Исправление]
					,_Fld17891 [КодВидаОперации]
					,_Fld17892 [КодСпособаПолучения]
					,_Fld17893 [НомерИсправления]
					,_Fld17894 [НомерИсправленияИсходногоДокумента]
					,_Fld17895 [НомерИсходногоДокумента]
					,_Fld17896RRef [Организация]
					,_Fld17897 [СуммаУвеличение]
					,_Fld17898 [СуммаУменьшение]
					,_Fld17899 [УчитыватьИсправлениеИсходногоДокумента]
					,_Fld17900 [СчетФактураБезНДС]
					,_Fld17901 [СуммаНДСУвеличение]
					,_Fld17902 [СуммаНДСУменьшение]
					,_Fld17903 [СуммаНДСДокумента]
					,_Fld17904RRef [ИсправляемыйСчетФактура]
					,_Fld17905RRef [ВидСчетаФактуры]
					,_Fld17906 [БланкСтрогойОтчетности]
					From _Document606(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ДатаИсправления = Читалка.GetDateTime(4);
							ДатаВходящегоДокумента = Читалка.GetDateTime(10);
							НомерВходящегоДокумента = Читалка.GetString(11);
							СуммаДокумента = Читалка.GetDecimal(13);
							СформированПриВводеНачальныхОстатковНДС = ((byte[])Читалка.GetValue(14))[0]==1;
							НомерВходящегоДокументаЭлектронногоОбмена = Читалка.GetString(16);
							ДатаВходящегоДокументаЭлектронногоОбмена = Читалка.GetDateTime(17);
							Комментарий = Читалка.GetString(18);
							УдалитьНаАванс = ((byte[])Читалка.GetValue(19))[0]==1;
							ДатаИсправленияИсходногоДокумента = Читалка.GetDateTime(20);
							ДатаИсходногоДокумента = Читалка.GetDateTime(21);
							Исправление = ((byte[])Читалка.GetValue(22))[0]==1;
							КодВидаОперации = Читалка.GetString(23);
							КодСпособаПолучения = Читалка.GetDecimal(24);
							НомерИсправления = Читалка.GetDecimal(25);
							НомерИсправленияИсходногоДокумента = Читалка.GetDecimal(26);
							НомерИсходногоДокумента = Читалка.GetString(27);
							СуммаУвеличение = Читалка.GetDecimal(29);
							СуммаУменьшение = Читалка.GetDecimal(30);
							УчитыватьИсправлениеИсходногоДокумента = ((byte[])Читалка.GetValue(31))[0]==1;
							СчетФактураБезНДС = ((byte[])Читалка.GetValue(32))[0]==1;
							СуммаНДСУвеличение = Читалка.GetDecimal(33);
							СуммаНДСУменьшение = Читалка.GetDecimal(34);
							СуммаНДСДокумента = Читалка.GetDecimal(35);
							ИсправляемыйСчетФактура = new V82.ДокументыСсылка.СчетФактураПолученный((byte[])Читалка.GetValue(36));
							ВидСчетаФактуры = V82.Перечисления/*Ссылка*/.ВидСчетаФактурыПолученного.ПустаяСсылка.Получить((byte[])Читалка.GetValue(37));
							БланкСтрогойОтчетности = ((byte[])Читалка.GetValue(38))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.СчетФактураПолученный  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.СчетФактураПолученный();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.ДатаИсправления = ДатаИсправления;
			Объект.Контрагент = Контрагент;
			Объект.ДоговорКонтрагента = ДоговорКонтрагента;
			Объект.ДокументОснование = ДокументОснование;
			Объект.ДатаВходящегоДокумента = ДатаВходящегоДокумента;
			Объект.НомерВходящегоДокумента = НомерВходящегоДокумента;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.СуммаДокумента = СуммаДокумента;
			Объект.СформированПриВводеНачальныхОстатковНДС = СформированПриВводеНачальныхОстатковНДС;
			Объект.Ответственный = Ответственный;
			Объект.НомерВходящегоДокументаЭлектронногоОбмена = НомерВходящегоДокументаЭлектронногоОбмена;
			Объект.ДатаВходящегоДокументаЭлектронногоОбмена = ДатаВходящегоДокументаЭлектронногоОбмена;
			Объект.Комментарий = Комментарий;
			Объект.УдалитьНаАванс = УдалитьНаАванс;
			Объект.ДатаИсправленияИсходногоДокумента = ДатаИсправленияИсходногоДокумента;
			Объект.ДатаИсходногоДокумента = ДатаИсходногоДокумента;
			Объект.Исправление = Исправление;
			Объект.КодВидаОперации = КодВидаОперации;
			Объект.КодСпособаПолучения = КодСпособаПолучения;
			Объект.НомерИсправления = НомерИсправления;
			Объект.НомерИсправленияИсходногоДокумента = НомерИсправленияИсходногоДокумента;
			Объект.НомерИсходногоДокумента = НомерИсходногоДокумента;
			Объект.Организация = Организация;
			Объект.СуммаУвеличение = СуммаУвеличение;
			Объект.СуммаУменьшение = СуммаУменьшение;
			Объект.УчитыватьИсправлениеИсходногоДокумента = УчитыватьИсправлениеИсходногоДокумента;
			Объект.СчетФактураБезНДС = СчетФактураБезНДС;
			Объект.СуммаНДСУвеличение = СуммаНДСУвеличение;
			Объект.СуммаНДСУменьшение = СуммаНДСУменьшение;
			Объект.СуммаНДСДокумента = СуммаНДСДокумента;
			Объект.ИсправляемыйСчетФактура = ИсправляемыйСчетФактура;
			Объект.ВидСчетаФактуры = ВидСчетаФактуры;
			Объект.БланкСтрогойОтчетности = БланкСтрогойОтчетности;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.СчетФактураПолученный ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.СчетФактураПолученный)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.СчетФактураПолученный(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}