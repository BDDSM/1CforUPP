
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Общ)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ПоступлениеТоваровИзПереработки:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("b9540460-4cdc-4e07-8faf-0b60732a33ac");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191314.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool АвтораспределениеМатериалов {get;set;}//Автоматически распределять материалы на продукцию
		///<summary>
		///(Общ)
		///</summary>
		public bool АвтораспределениеПрочихЗатрат {get;set;}//Автоматически распределять прочие затраты на продукцию
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		///<summary>
		///(Общ)
		///</summary>
		public bool ВводитьСтатьиЗатратПоСтрокам {get;set;}//Вводить статьи затрат по строкам
		///<summary>
		///(Общ) Вид поступления: на склад или по ордеру
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВидыПоступленияТоваров ВидПоступления {get;set;}//Вид поступления
		///<summary>
		///(Общ) 
		///</summary>
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагента {get;set;}//Договор контрагента
		///<summary>
		///(Общ)
		///</summary>
		public V82.ДокументыСсылка.ЗаказПоставщику Заказ {get;set;}
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///(Общ) 
		///</summary>
		public V82.СправочникиСсылка.Контрагенты Контрагент {get;set;}
		///<summary>
		///(Общ) 
		///</summary>
		public decimal/*(10)*/ КратностьВзаиморасчетов {get;set;}//Кратность взаиморасчетов
		///<summary>
		///(Общ) 
		///</summary>
		public decimal/*(10.4)*/ КурсВзаиморасчетов {get;set;}//Курс взаиморасчетов
		///<summary>
		///(Регл)
		///</summary>
		public bool НДСВключенВСтоимость {get;set;}//НДС включен в стоимость
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВУправленческомУчете {get;set;}//Отражать в управленческом учете
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.ПодразделенияОрганизаций ПодразделениеОрганизации {get;set;}//Подразделение организации
		///<summary>
		///(Общ)
		///</summary>
		public object СкладОрдер {get;set;}//Склад ордер
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.СтатьиЗатрат СтатьяЗатрат {get;set;}//Статья затрат по умолчанию
		///<summary>
		///(Общ)
		///</summary>
		public bool СуммаВключаетНДС {get;set;}//Сумма включает НДС
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасчетовПоТаре {get;set;}//Счет учета расчетов по таре
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ТипыЦенНоменклатурыКонтрагентов ТипЦен {get;set;}//Тип цен
		///<summary>
		///(Общ)
		///</summary>
		public bool УчитыватьНДС {get;set;}//Учитывать НДС
		public bool ИспользоватьЗаказы {get;set;}//Использовать заказы
		public bool ИспользоватьМатериалы {get;set;}//Использовать материалы
		public bool ИспользоватьПрочиеЗатраты {get;set;}//Использовать прочие затраты
		///<summary>
		///(Общ)
		///</summary>
		public bool АвтораспределениеВозвратныхОтходов {get;set;}//Автоматически распределять возвратные отходы на продукцию
		public bool ИспользоватьВозвратныеОтходы {get;set;}//Использовать возвратные отходы
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Склады СкладОтходов {get;set;}//Склад отходов
		
		public ПоступлениеТоваровИзПереработки()
		{
		}
		
		public ПоступлениеТоваровИзПереработки(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld13978 [АвтораспределениеМатериалов]
					,_Fld13979 [АвтораспределениеПрочихЗатрат]
					,_Fld13980RRef [ВалютаДокумента]
					,_Fld13981 [ВводитьСтатьиЗатратПоСтрокам]
					,_Fld13982RRef [ВидПоступления]
					,_Fld13983RRef [ДоговорКонтрагента]
					,_Fld13984RRef [Заказ]
					,_Fld13985 [Комментарий]
					,_Fld13986RRef [Контрагент]
					,_Fld13987 [КратностьВзаиморасчетов]
					,_Fld13988 [КурсВзаиморасчетов]
					,_Fld13989 [НДСВключенВСтоимость]
					,_Fld13990RRef [Организация]
					,_Fld13991RRef [Ответственный]
					,_Fld13992 [ОтражатьВБухгалтерскомУчете]
					,_Fld13993 [ОтражатьВНалоговомУчете]
					,_Fld13994 [ОтражатьВУправленческомУчете]
					,_Fld13995RRef [Подразделение]
					,_Fld13996RRef [ПодразделениеОрганизации]
					,_Fld13997_TYPE [СкладОрдер_Тип],_Fld13997_RRRef [СкладОрдер],_Fld13997_RTRef [СкладОрдер_Вид]
					,_Fld13998RRef [СтатьяЗатрат]
					,_Fld13999 [СуммаВключаетНДС]
					,_Fld14000RRef [СчетУчетаРасчетовПоТаре]
					,_Fld14001RRef [ТипЦен]
					,_Fld14002 [УчитыватьНДС]
					,_Fld14003 [ИспользоватьЗаказы]
					,_Fld14004 [ИспользоватьМатериалы]
					,_Fld14005 [ИспользоватьПрочиеЗатраты]
					,_Fld14006 [АвтораспределениеВозвратныхОтходов]
					,_Fld14007 [ИспользоватьВозвратныеОтходы]
					,_Fld14008RRef [СкладОтходов]
					From _Document531(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							АвтораспределениеМатериалов = ((byte[])Читалка.GetValue(4))[0]==1;
							АвтораспределениеПрочихЗатрат = ((byte[])Читалка.GetValue(5))[0]==1;
							ВводитьСтатьиЗатратПоСтрокам = ((byte[])Читалка.GetValue(7))[0]==1;
							ВидПоступления = V82.Перечисления/*Ссылка*/.ВидыПоступленияТоваров.ПустаяСсылка.Получить((byte[])Читалка.GetValue(8));
							Заказ = new V82.ДокументыСсылка.ЗаказПоставщику((byte[])Читалка.GetValue(10));
							Комментарий = Читалка.GetString(11);
							КратностьВзаиморасчетов = Читалка.GetDecimal(13);
							КурсВзаиморасчетов = Читалка.GetDecimal(14);
							НДСВключенВСтоимость = ((byte[])Читалка.GetValue(15))[0]==1;
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(18))[0]==1;
							ОтражатьВНалоговомУчете = ((byte[])Читалка.GetValue(19))[0]==1;
							ОтражатьВУправленческомУчете = ((byte[])Читалка.GetValue(20))[0]==1;
							СуммаВключаетНДС = ((byte[])Читалка.GetValue(27))[0]==1;
							УчитыватьНДС = ((byte[])Читалка.GetValue(30))[0]==1;
							ИспользоватьЗаказы = ((byte[])Читалка.GetValue(31))[0]==1;
							ИспользоватьМатериалы = ((byte[])Читалка.GetValue(32))[0]==1;
							ИспользоватьПрочиеЗатраты = ((byte[])Читалка.GetValue(33))[0]==1;
							АвтораспределениеВозвратныхОтходов = ((byte[])Читалка.GetValue(34))[0]==1;
							ИспользоватьВозвратныеОтходы = ((byte[])Читалка.GetValue(35))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.ПоступлениеТоваровИзПереработки  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.ПоступлениеТоваровИзПереработки();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.АвтораспределениеМатериалов = АвтораспределениеМатериалов;
			Объект.АвтораспределениеПрочихЗатрат = АвтораспределениеПрочихЗатрат;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.ВводитьСтатьиЗатратПоСтрокам = ВводитьСтатьиЗатратПоСтрокам;
			Объект.ВидПоступления = ВидПоступления;
			Объект.ДоговорКонтрагента = ДоговорКонтрагента;
			Объект.Заказ = Заказ;
			Объект.Комментарий = Комментарий;
			Объект.Контрагент = Контрагент;
			Объект.КратностьВзаиморасчетов = КратностьВзаиморасчетов;
			Объект.КурсВзаиморасчетов = КурсВзаиморасчетов;
			Объект.НДСВключенВСтоимость = НДСВключенВСтоимость;
			Объект.Организация = Организация;
			Объект.Ответственный = Ответственный;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете;
			Объект.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
			Объект.Подразделение = Подразделение;
			Объект.ПодразделениеОрганизации = ПодразделениеОрганизации;
			Объект.СкладОрдер = СкладОрдер;
			Объект.СтатьяЗатрат = СтатьяЗатрат;
			Объект.СуммаВключаетНДС = СуммаВключаетНДС;
			Объект.СчетУчетаРасчетовПоТаре = СчетУчетаРасчетовПоТаре;
			Объект.ТипЦен = ТипЦен;
			Объект.УчитыватьНДС = УчитыватьНДС;
			Объект.ИспользоватьЗаказы = ИспользоватьЗаказы;
			Объект.ИспользоватьМатериалы = ИспользоватьМатериалы;
			Объект.ИспользоватьПрочиеЗатраты = ИспользоватьПрочиеЗатраты;
			Объект.АвтораспределениеВозвратныхОтходов = АвтораспределениеВозвратныхОтходов;
			Объект.ИспользоватьВозвратныеОтходы = ИспользоватьВозвратныеОтходы;
			Объект.СкладОтходов = СкладОтходов;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.ПоступлениеТоваровИзПереработки ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.ПоступлениеТоваровИзПереработки)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.ПоступлениеТоваровИзПереработки(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}