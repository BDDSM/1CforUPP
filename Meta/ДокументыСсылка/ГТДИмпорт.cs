
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Общ) Таможенная декларация по импорту
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ГТДИмпорт:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("d6b460a5-806b-4bc7-9826-b72c50b123f7");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191434.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		public V82.СправочникиСсылка.НомераГТД НомерГТД {get;set;}//Номер ГТД
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10.4)*/ КурсДокумента {get;set;}//Курс документа
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10)*/ КратностьДокумента {get;set;}//Кратность документа
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты Контрагент {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагента {get;set;}//Валютный депозит
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10.4)*/ КурсВзаиморасчетов {get;set;}//Курс взаиморасчетов
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10)*/ КратностьВзаиморасчетов {get;set;}//Кратность взаиморасчетов
		///<summary>
		///(Общ) договор контрагента с таможней, по которому взаиморасчеты осуществляются в валюте регл. учета
		///</summary>
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагентаРегл {get;set;}//Депозит на таможне (руб.)
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВУправленческомУчете {get;set;}//Отражать в управленческом учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///(Общ) Таможенный сбор в валюте взаиморасчетов с таможней
		///</summary>
		public decimal/*(15.2)*/ ТаможенныйСборВал {get;set;}//Таможенный сбор валютный
		///<summary>
		///(Общ) Таможенный сбор в валюте регламентированного учета
		///</summary>
		public decimal/*(15.2)*/ ТаможенныйСбор {get;set;}//Таможенный сбор
		///<summary>
		///(Общ) Штраф от таможни в валюте взаиморасчетов с таможней
		///</summary>
		public decimal/*(15.2)*/ ТаможенныйШтрафВал {get;set;}//Таможенный штраф в валюте
		///<summary>
		///(Общ) Штраф от таможни в валюте регламентированного учета
		///</summary>
		public decimal/*(15.2)*/ ТаможенныйШтраф {get;set;}//Таможенный штраф
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасчетовСКонтрагентом {get;set;}//Счет учета расчетов с таможней
		public V82.СправочникиСсылка.ПрочиеДоходыИРасходы СтатьяПрочихДоходовРасходов {get;set;}//Статья прочих доходов расходов
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасходовБУ {get;set;}//Счет учета расходов по штрафам (БУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасходовНУ {get;set;}//Счет учета расходов по штрафам (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасчетовСКонтрагентомВал {get;set;}//Счет учета расчетов с таможней (вал.)
		public V82.СправочникиСсылка.ПрочиеДоходыИРасходы СтатьяПрочихДоходовРасходовВал {get;set;}//Статья прочих доходов расходов (вал.)
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасходовБУВал {get;set;}//Счет учета расходов по штрафам (БУ) (вал.)
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасходовНУВал {get;set;}//Счет учета расходов по штрафам (НУ) (вал.)
		public object Проект {get;set;}
		
		public ГТДИмпорт()
		{
		}
		
		public ГТДИмпорт(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld6695RRef [Организация]
					,_Fld6696RRef [НомерГТД]
					,_Fld6697RRef [ВалютаДокумента]
					,_Fld6698 [КурсДокумента]
					,_Fld6699 [КратностьДокумента]
					,_Fld6700RRef [Контрагент]
					,_Fld6701RRef [ДоговорКонтрагента]
					,_Fld6702 [КурсВзаиморасчетов]
					,_Fld6703 [КратностьВзаиморасчетов]
					,_Fld6704RRef [ДоговорКонтрагентаРегл]
					,_Fld6705 [ОтражатьВУправленческомУчете]
					,_Fld6706 [ОтражатьВБухгалтерскомУчете]
					,_Fld6707 [ОтражатьВНалоговомУчете]
					,_Fld6708RRef [Подразделение]
					,_Fld6709RRef [Ответственный]
					,_Fld6710 [Комментарий]
					,_Fld6711 [ТаможенныйСборВал]
					,_Fld6712 [ТаможенныйСбор]
					,_Fld6713 [ТаможенныйШтрафВал]
					,_Fld6714 [ТаможенныйШтраф]
					,_Fld6715RRef [СчетУчетаРасчетовСКонтрагентом]
					,_Fld6716RRef [СтатьяПрочихДоходовРасходов]
					,_Fld6717RRef [СчетУчетаРасходовБУ]
					,_Fld6718RRef [СчетУчетаРасходовНУ]
					,_Fld6719RRef [СчетУчетаРасчетовСКонтрагентомВал]
					,_Fld6720RRef [СтатьяПрочихДоходовРасходовВал]
					,_Fld6721RRef [СчетУчетаРасходовБУВал]
					,_Fld6722RRef [СчетУчетаРасходовНУВал]
					,_Fld6723_TYPE [Проект_Тип],_Fld6723_RRRef [Проект],_Fld6723_RTRef [Проект_Вид]
					From _Document352(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							КурсДокумента = Читалка.GetDecimal(7);
							КратностьДокумента = Читалка.GetDecimal(8);
							КурсВзаиморасчетов = Читалка.GetDecimal(11);
							КратностьВзаиморасчетов = Читалка.GetDecimal(12);
							ОтражатьВУправленческомУчете = ((byte[])Читалка.GetValue(14))[0]==1;
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(15))[0]==1;
							ОтражатьВНалоговомУчете = ((byte[])Читалка.GetValue(16))[0]==1;
							Комментарий = Читалка.GetString(19);
							ТаможенныйСборВал = Читалка.GetDecimal(20);
							ТаможенныйСбор = Читалка.GetDecimal(21);
							ТаможенныйШтрафВал = Читалка.GetDecimal(22);
							ТаможенныйШтраф = Читалка.GetDecimal(23);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.ГТДИмпорт  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.ГТДИмпорт();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.Организация = Организация;
			Объект.НомерГТД = НомерГТД;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.КурсДокумента = КурсДокумента;
			Объект.КратностьДокумента = КратностьДокумента;
			Объект.Контрагент = Контрагент;
			Объект.ДоговорКонтрагента = ДоговорКонтрагента;
			Объект.КурсВзаиморасчетов = КурсВзаиморасчетов;
			Объект.КратностьВзаиморасчетов = КратностьВзаиморасчетов;
			Объект.ДоговорКонтрагентаРегл = ДоговорКонтрагентаРегл;
			Объект.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете;
			Объект.Подразделение = Подразделение;
			Объект.Ответственный = Ответственный;
			Объект.Комментарий = Комментарий;
			Объект.ТаможенныйСборВал = ТаможенныйСборВал;
			Объект.ТаможенныйСбор = ТаможенныйСбор;
			Объект.ТаможенныйШтрафВал = ТаможенныйШтрафВал;
			Объект.ТаможенныйШтраф = ТаможенныйШтраф;
			Объект.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
			Объект.СтатьяПрочихДоходовРасходов = СтатьяПрочихДоходовРасходов;
			Объект.СчетУчетаРасходовБУ = СчетУчетаРасходовБУ;
			Объект.СчетУчетаРасходовНУ = СчетУчетаРасходовНУ;
			Объект.СчетУчетаРасчетовСКонтрагентомВал = СчетУчетаРасчетовСКонтрагентомВал;
			Объект.СтатьяПрочихДоходовРасходовВал = СтатьяПрочихДоходовРасходовВал;
			Объект.СчетУчетаРасходовБУВал = СчетУчетаРасходовБУВал;
			Объект.СчетУчетаРасходовНУВал = СчетУчетаРасходовНУВал;
			Объект.Проект = Проект;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.ГТДИмпорт ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.ГТДИмпорт)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.ГТДИмпорт(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}