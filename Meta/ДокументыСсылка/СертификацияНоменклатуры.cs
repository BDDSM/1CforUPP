
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	[ProtoContract]
	[DataContract]
	public partial class СертификацияНоменклатуры:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("ad41dd8a-d474-4c58-99dc-551ff1839aa5");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191837.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public V82.Перечисления/*Ссылка*/.ВидыОперацийСертификацияНоменклатуры ВидОперации {get;set;}//Вид операции
		///<summary>
		///Дата начала испытаний образцов (при внутренней сертификации)
		///</summary>
		public DateTime ДатаНачалаИспытаний {get;set;}//Дата начала испытаний
		///<summary>
		///Дата окончания испытаний образцов (при внутренней сертификации)
		///</summary>
		public DateTime ДатаОкончанияИспытаний {get;set;}//Дата окончания испытаний
		public DateTime ДатаСертификата {get;set;}//Дата сертификата
		public object ДокументОснование {get;set;}//Документ основание
		///<summary>
		///Заключение контролирующего подразделения или органа сертификации
		///</summary>
		public string/*(0)*/ Заключение {get;set;}
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		public V82.СправочникиСсылка.Номенклатура Номенклатура {get;set;}
		public string/*(30)*/ НомерСертификата {get;set;}//Номер сертификата
		///<summary>
		///Нормативный документ, согласно которому осуществляется сертификация (для внутренней сертификации)
		///</summary>
		public V82.СправочникиСсылка.НормативныеДокументыСертификацииНоменклатуры НормативныйДокумент {get;set;}//Нормативный документ
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///Организация, проводящая отбор проб (для внешней сертификации)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты ОрганПоСертификации {get;set;}//Орган по сертификации
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		///<summary>
		///"Отказ", если была предпринята попытка сертификации, но она не увенчалась успехом. "Сертификация" - увенчалась успехом
		///</summary>
		public V82.Перечисления/*Ссылка*/.РезультатыСертификацииНоменклатуры РезультатСертификации {get;set;}//Результат сертификации
		public V82.СправочникиСсылка.СерииНоменклатуры СерияНоменклатуры {get;set;}//Серия номенклатуры
		///<summary>
		///Срок окончания действия сертификата
		///</summary>
		public DateTime СрокГодностиСертификата {get;set;}//Срок годности сертификата
		
		public СертификацияНоменклатуры()
		{
		}
		
		public СертификацияНоменклатуры(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld17154RRef [ВидОперации]
					,_Fld17155 [ДатаНачалаИспытаний]
					,_Fld17156 [ДатаОкончанияИспытаний]
					,_Fld17157 [ДатаСертификата]
					,_Fld17158_TYPE [ДокументОснование_Тип],_Fld17158_RRRef [ДокументОснование],_Fld17158_RTRef [ДокументОснование_Вид]
					,_Fld17159 [Заключение]
					,_Fld17160 [Комментарий]
					,_Fld17161RRef [Номенклатура]
					,_Fld17162 [НомерСертификата]
					,_Fld17163RRef [НормативныйДокумент]
					,_Fld17164RRef [Организация]
					,_Fld17165RRef [ОрганПоСертификации]
					,_Fld17166RRef [Ответственный]
					,_Fld17167RRef [Подразделение]
					,_Fld17168RRef [РезультатСертификации]
					,_Fld17169RRef [СерияНоменклатуры]
					,_Fld17170 [СрокГодностиСертификата]
					From _Document587(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ВидОперации = V82.Перечисления/*Ссылка*/.ВидыОперацийСертификацияНоменклатуры.ПустаяСсылка.Получить((byte[])Читалка.GetValue(4));
							ДатаНачалаИспытаний = Читалка.GetDateTime(5);
							ДатаОкончанияИспытаний = Читалка.GetDateTime(6);
							ДатаСертификата = Читалка.GetDateTime(7);
							Заключение = Читалка.GetString(11);
							Комментарий = Читалка.GetString(12);
							НомерСертификата = Читалка.GetString(14);
							РезультатСертификации = V82.Перечисления/*Ссылка*/.РезультатыСертификацииНоменклатуры.ПустаяСсылка.Получить((byte[])Читалка.GetValue(20));
							СрокГодностиСертификата = Читалка.GetDateTime(22);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.СертификацияНоменклатуры  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.СертификацияНоменклатуры();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.ВидОперации = ВидОперации;
			Объект.ДатаНачалаИспытаний = ДатаНачалаИспытаний;
			Объект.ДатаОкончанияИспытаний = ДатаОкончанияИспытаний;
			Объект.ДатаСертификата = ДатаСертификата;
			Объект.ДокументОснование = ДокументОснование;
			Объект.Заключение = Заключение;
			Объект.Комментарий = Комментарий;
			Объект.Номенклатура = Номенклатура;
			Объект.НомерСертификата = НомерСертификата;
			Объект.НормативныйДокумент = НормативныйДокумент;
			Объект.Организация = Организация;
			Объект.ОрганПоСертификации = ОрганПоСертификации;
			Объект.Ответственный = Ответственный;
			Объект.Подразделение = Подразделение;
			Объект.РезультатСертификации = РезультатСертификации;
			Объект.СерияНоменклатуры = СерияНоменклатуры;
			Объект.СрокГодностиСертификата = СрокГодностиСертификата;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.СертификацияНоменклатуры ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.СертификацияНоменклатуры)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.СертификацияНоменклатуры(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}