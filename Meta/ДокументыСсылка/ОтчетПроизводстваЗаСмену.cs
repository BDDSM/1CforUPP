
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Общ)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ОтчетПроизводстваЗаСмену:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("3b9da321-66e0-42b6-bc71-65d2b0f69504");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20120928012003.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool АвтораспределениеВозвратныхОтходов {get;set;}//Автоматически распределять возвратные отходы на продукцию
		///<summary>
		///(Общ)
		///</summary>
		public bool АвтораспределениеМатериалов {get;set;}//Автоматически распределять материалы на продукцию
		///<summary>
		///(Общ)
		///</summary>
		public bool АвтораспределениеПрочихЗатрат {get;set;}//Автоматически распределять прочие затраты на продукцию
		///<summary>
		///(Общ)
		///</summary>
		public bool АвтораспределениеТехнологическихОпераций {get;set;}//Автоматически распределять тех. операции на продукцию
		///<summary>
		///(Общ)
		///</summary>
		public bool ВводитьСтатьиЗатратПоСтрокам {get;set;}//Вводить статьи затрат по строкам
		public V82.ДокументыСсылка.ЗаданиеНаПроизводство ЗаданиеНаПроизводство {get;set;}//Задание на производство
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Склады Склад {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.ПодразделенияОрганизаций ПодразделениеОрганизации {get;set;}//Подразделение организации
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВУправленческомУчете {get;set;}//Отражать в управленческом учете
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.СтатьиЗатрат СтатьяЗатрат {get;set;}//Статья затрат по умолчанию
		public bool ИспользоватьВозвратныеОтходы {get;set;}//Использовать возвратные отходы
		public bool ИспользоватьЗаданияНаПроизводство {get;set;}//Использовать задания на производство
		public bool ИспользоватьЗаказы {get;set;}//Использовать заказы
		public bool ИспользоватьЗаказыНаОбслуживаниеОС {get;set;}//Использовать заказы на обслуживание ОС
		public bool ИспользоватьМатериалы {get;set;}//Использовать материалы
		public bool ИспользоватьНаправленияВыпуска {get;set;}//Использовать направления выпуска
		public bool ИспользоватьНаработку {get;set;}//Использовать наработку
		public bool ИспользоватьПодразделенияНЗП {get;set;}//Использовать подразделения НЗП
		public bool ИспользоватьПрочиеЗатраты {get;set;}//Использовать прочие затраты
		public bool ИспользоватьТехнологическиеОперации {get;set;}//Использовать технологические операции
		public bool РазрешитьПревышениеЛимита {get;set;}//Разрешить превышение лимита
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Склады СкладОтходов {get;set;}//Склад отходов
		public bool ИспользоватьАналитикуНЗП {get;set;}//Использовать аналитику НЗП
		public bool УчитыватьТариф {get;set;}//Учитывать тариф
		public bool УчитыватьКТУ {get;set;}//Учитывать КТУ
		
		public ОтчетПроизводстваЗаСмену()
		{
		}
		
		public ОтчетПроизводстваЗаСмену(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld7463 [АвтораспределениеВозвратныхОтходов]
					,_Fld7464 [АвтораспределениеМатериалов]
					,_Fld7465 [АвтораспределениеПрочихЗатрат]
					,_Fld7466 [АвтораспределениеТехнологическихОпераций]
					,_Fld7467 [ВводитьСтатьиЗатратПоСтрокам]
					,_Fld7468RRef [ЗаданиеНаПроизводство]
					,_Fld7469 [Комментарий]
					,_Fld7470RRef [Организация]
					,_Fld7477RRef [Склад]
					,_Fld7472 [ОтражатьВБухгалтерскомУчете]
					,_Fld7476RRef [ПодразделениеОрганизации]
					,_Fld7474 [ОтражатьВУправленческомУчете]
					,_Fld7475RRef [Подразделение]
					,_Fld7473 [ОтражатьВНалоговомУчете]
					,_Fld7471RRef [Ответственный]
					,_Fld7478RRef [СтатьяЗатрат]
					,_Fld7479 [ИспользоватьВозвратныеОтходы]
					,_Fld7480 [ИспользоватьЗаданияНаПроизводство]
					,_Fld7481 [ИспользоватьЗаказы]
					,_Fld7482 [ИспользоватьЗаказыНаОбслуживаниеОС]
					,_Fld7483 [ИспользоватьМатериалы]
					,_Fld7484 [ИспользоватьНаправленияВыпуска]
					,_Fld7485 [ИспользоватьНаработку]
					,_Fld18997 [ИспользоватьПодразделенияНЗП]
					,_Fld7486 [ИспользоватьПрочиеЗатраты]
					,_Fld7487 [ИспользоватьТехнологическиеОперации]
					,_Fld7488 [РазрешитьПревышениеЛимита]
					,_Fld7489RRef [СкладОтходов]
					,_Fld18998 [ИспользоватьАналитикуНЗП]
					,_Fld21806 [УчитыватьТариф]
					,_Fld21807 [УчитыватьКТУ]
					From _Document357(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							АвтораспределениеВозвратныхОтходов = ((byte[])Читалка.GetValue(4))[0]==1;
							АвтораспределениеМатериалов = ((byte[])Читалка.GetValue(5))[0]==1;
							АвтораспределениеПрочихЗатрат = ((byte[])Читалка.GetValue(6))[0]==1;
							АвтораспределениеТехнологическихОпераций = ((byte[])Читалка.GetValue(7))[0]==1;
							ВводитьСтатьиЗатратПоСтрокам = ((byte[])Читалка.GetValue(8))[0]==1;
							ЗаданиеНаПроизводство = new V82.ДокументыСсылка.ЗаданиеНаПроизводство((byte[])Читалка.GetValue(9));
							Комментарий = Читалка.GetString(10);
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(13))[0]==1;
							ОтражатьВУправленческомУчете = ((byte[])Читалка.GetValue(15))[0]==1;
							ОтражатьВНалоговомУчете = ((byte[])Читалка.GetValue(17))[0]==1;
							ИспользоватьВозвратныеОтходы = ((byte[])Читалка.GetValue(20))[0]==1;
							ИспользоватьЗаданияНаПроизводство = ((byte[])Читалка.GetValue(21))[0]==1;
							ИспользоватьЗаказы = ((byte[])Читалка.GetValue(22))[0]==1;
							ИспользоватьЗаказыНаОбслуживаниеОС = ((byte[])Читалка.GetValue(23))[0]==1;
							ИспользоватьМатериалы = ((byte[])Читалка.GetValue(24))[0]==1;
							ИспользоватьНаправленияВыпуска = ((byte[])Читалка.GetValue(25))[0]==1;
							ИспользоватьНаработку = ((byte[])Читалка.GetValue(26))[0]==1;
							ИспользоватьПодразделенияНЗП = ((byte[])Читалка.GetValue(27))[0]==1;
							ИспользоватьПрочиеЗатраты = ((byte[])Читалка.GetValue(28))[0]==1;
							ИспользоватьТехнологическиеОперации = ((byte[])Читалка.GetValue(29))[0]==1;
							РазрешитьПревышениеЛимита = ((byte[])Читалка.GetValue(30))[0]==1;
							ИспользоватьАналитикуНЗП = ((byte[])Читалка.GetValue(32))[0]==1;
							УчитыватьТариф = ((byte[])Читалка.GetValue(33))[0]==1;
							УчитыватьКТУ = ((byte[])Читалка.GetValue(34))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.ОтчетПроизводстваЗаСмену  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.ОтчетПроизводстваЗаСмену();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.АвтораспределениеВозвратныхОтходов = АвтораспределениеВозвратныхОтходов;
			Объект.АвтораспределениеМатериалов = АвтораспределениеМатериалов;
			Объект.АвтораспределениеПрочихЗатрат = АвтораспределениеПрочихЗатрат;
			Объект.АвтораспределениеТехнологическихОпераций = АвтораспределениеТехнологическихОпераций;
			Объект.ВводитьСтатьиЗатратПоСтрокам = ВводитьСтатьиЗатратПоСтрокам;
			Объект.ЗаданиеНаПроизводство = ЗаданиеНаПроизводство;
			Объект.Комментарий = Комментарий;
			Объект.Организация = Организация;
			Объект.Склад = Склад;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.ПодразделениеОрганизации = ПодразделениеОрганизации;
			Объект.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
			Объект.Подразделение = Подразделение;
			Объект.ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете;
			Объект.Ответственный = Ответственный;
			Объект.СтатьяЗатрат = СтатьяЗатрат;
			Объект.ИспользоватьВозвратныеОтходы = ИспользоватьВозвратныеОтходы;
			Объект.ИспользоватьЗаданияНаПроизводство = ИспользоватьЗаданияНаПроизводство;
			Объект.ИспользоватьЗаказы = ИспользоватьЗаказы;
			Объект.ИспользоватьЗаказыНаОбслуживаниеОС = ИспользоватьЗаказыНаОбслуживаниеОС;
			Объект.ИспользоватьМатериалы = ИспользоватьМатериалы;
			Объект.ИспользоватьНаправленияВыпуска = ИспользоватьНаправленияВыпуска;
			Объект.ИспользоватьНаработку = ИспользоватьНаработку;
			Объект.ИспользоватьПодразделенияНЗП = ИспользоватьПодразделенияНЗП;
			Объект.ИспользоватьПрочиеЗатраты = ИспользоватьПрочиеЗатраты;
			Объект.ИспользоватьТехнологическиеОперации = ИспользоватьТехнологическиеОперации;
			Объект.РазрешитьПревышениеЛимита = РазрешитьПревышениеЛимита;
			Объект.СкладОтходов = СкладОтходов;
			Объект.ИспользоватьАналитикуНЗП = ИспользоватьАналитикуНЗП;
			Объект.УчитыватьТариф = УчитыватьТариф;
			Объект.УчитыватьКТУ = УчитыватьКТУ;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.ОтчетПроизводстваЗаСмену ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.ОтчетПроизводстваЗаСмену)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.ОтчетПроизводстваЗаСмену(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}