
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	[ProtoContract]
	[DataContract]
	public partial class АктОтбораПробНоменклатуры:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("3672d97b-7098-4d5c-83f0-da0409079f55");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191351.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public V82.Перечисления/*Ссылка*/.ВидыОперацийАктОтбораПробНоменклатуры ВидОперации {get;set;}//Вид операции
		public string/*(5)*/ Влажность {get;set;}
		public string/*(200)*/ ЗамечанияКУпаковкеМаркировке {get;set;}//Замечания к упаковке и маркировке
		///<summary>
		///Заявка на сертификацию, на основании которой берутся пробы
		///</summary>
		public V82.ДокументыСсылка.ЗаявкаНаСертификациюНоменклатуры ЗаявкаНаСертификациюНоменклатуры {get;set;}//Заявка на сертификацию номенклатуры
		///<summary>
		///Количество отобранных образцов на испытания
		///</summary>
		public decimal/*(15.3)*/ Испытания {get;set;}
		///<summary>
		///Количество групповых упаковок, вскрытых для отбора проб
		///</summary>
		public decimal/*(10.3)*/ КоличествоВскрытыхУпаковок {get;set;}//Количество вскрытых упаковок
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///Количество образцов контрольной пробы
		///</summary>
		public decimal/*(15.3)*/ КонтрольнаяПроба {get;set;}//Контрольная проба
		public V82.СправочникиСсылка.Номенклатура Номенклатура {get;set;}
		///<summary>
		///Нормативный документ, согласно которому осуществляется сертификация (для внутренней сертификации)
		///</summary>
		public V82.СправочникиСсылка.НормативныеДокументыСертификацииНоменклатуры НормативныйДокумент {get;set;}//Нормативный документ
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///Организация, проводящая отбор проб (для внешней сертификации)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты ОрганПоСертификации {get;set;}//Орган по сертификации
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		public string/*(200)*/ РезультатНаружногоОсмотра {get;set;}//Результат наружного осмотра
		public V82.СправочникиСсылка.СерииНоменклатуры СерияНоменклатуры {get;set;}//Серия номенклатуры
		///<summary>
		///Склад, с которого производится отбор проб
		///</summary>
		public V82.СправочникиСсылка.Склады Склад {get;set;}
		public string/*(5)*/ Температура {get;set;}
		
		public АктОтбораПробНоменклатуры()
		{
		}
		
		public АктОтбораПробНоменклатуры(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld4802RRef [ВидОперации]
					,_Fld4803 [Влажность]
					,_Fld4804 [ЗамечанияКУпаковкеМаркировке]
					,_Fld4805RRef [ЗаявкаНаСертификациюНоменклатуры]
					,_Fld4806 [Испытания]
					,_Fld4807 [КоличествоВскрытыхУпаковок]
					,_Fld4808 [Комментарий]
					,_Fld4809 [КонтрольнаяПроба]
					,_Fld4810RRef [Номенклатура]
					,_Fld4811RRef [НормативныйДокумент]
					,_Fld4812RRef [Организация]
					,_Fld4813RRef [ОрганПоСертификации]
					,_Fld4814RRef [Ответственный]
					,_Fld4815RRef [Подразделение]
					,_Fld4816 [РезультатНаружногоОсмотра]
					,_Fld4817RRef [СерияНоменклатуры]
					,_Fld4818RRef [Склад]
					,_Fld4819 [Температура]
					From _Document302(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ВидОперации = V82.Перечисления/*Ссылка*/.ВидыОперацийАктОтбораПробНоменклатуры.ПустаяСсылка.Получить((byte[])Читалка.GetValue(4));
							Влажность = Читалка.GetString(5);
							ЗамечанияКУпаковкеМаркировке = Читалка.GetString(6);
							ЗаявкаНаСертификациюНоменклатуры = new V82.ДокументыСсылка.ЗаявкаНаСертификациюНоменклатуры((byte[])Читалка.GetValue(7));
							Испытания = Читалка.GetDecimal(8);
							КоличествоВскрытыхУпаковок = Читалка.GetDecimal(9);
							Комментарий = Читалка.GetString(10);
							КонтрольнаяПроба = Читалка.GetDecimal(11);
							РезультатНаружногоОсмотра = Читалка.GetString(18);
							Температура = Читалка.GetString(21);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.АктОтбораПробНоменклатуры  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.АктОтбораПробНоменклатуры();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.ВидОперации = ВидОперации;
			Объект.Влажность = Влажность;
			Объект.ЗамечанияКУпаковкеМаркировке = ЗамечанияКУпаковкеМаркировке;
			Объект.ЗаявкаНаСертификациюНоменклатуры = ЗаявкаНаСертификациюНоменклатуры;
			Объект.Испытания = Испытания;
			Объект.КоличествоВскрытыхУпаковок = КоличествоВскрытыхУпаковок;
			Объект.Комментарий = Комментарий;
			Объект.КонтрольнаяПроба = КонтрольнаяПроба;
			Объект.Номенклатура = Номенклатура;
			Объект.НормативныйДокумент = НормативныйДокумент;
			Объект.Организация = Организация;
			Объект.ОрганПоСертификации = ОрганПоСертификации;
			Объект.Ответственный = Ответственный;
			Объект.Подразделение = Подразделение;
			Объект.РезультатНаружногоОсмотра = РезультатНаружногоОсмотра;
			Объект.СерияНоменклатуры = СерияНоменклатуры;
			Объект.Склад = Склад;
			Объект.Температура = Температура;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.АктОтбораПробНоменклатуры ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.АктОтбораПробНоменклатуры)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.АктОтбораПробНоменклатуры(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}