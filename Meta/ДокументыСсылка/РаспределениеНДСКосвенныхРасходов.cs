
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///Регламентная операция распеделения НДС косвенных расходов по видам реализации текущего периода
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class РаспределениеНДСКосвенныхРасходов:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("26ef89fe-7430-49aa-9181-cb767d2e04c8");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191605.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///Сумма выручки, полученной в рамках деятельности облагаемой ЕНВД
		///</summary>
		public decimal/*(15.2)*/ ВыручкаЕНВД {get;set;}//Выручка ЕНВД
		///<summary>
		///Сумма выручки, полученной в рамках деятельности не облагаемой НДС
		///</summary>
		public decimal/*(15.2)*/ ВыручкаБезНДС {get;set;}//Выручка без НДС
		///<summary>
		///Сумма выручки, полученной в рамках деятельности облагаемой НДС по ставке 0%
		///</summary>
		public decimal/*(15.2)*/ ВыручкаНДС0 {get;set;}//Выручка НДС 0
		///<summary>
		///Сумма выручки, полученной в рамках деятельности облагаемой НДС по ставкам 18% и 10%
		///</summary>
		public decimal/*(15.2)*/ ВыручкаНДС {get;set;}//Выручка НДС
		///<summary>
		///Начало налогового периода по НДС
		///</summary>
		public DateTime НачалоПериода {get;set;}//Начало периода
		///<summary>
		///(Регл)
		///</summary>
		public object СчетСписанияНДС {get;set;}//Счет списания НДС
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоСписанияНДС1 {get;set;}//Субконто 1
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоСписанияНДС2 {get;set;}//Субконто 2
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоСписанияНДС3 {get;set;}//Субконто 3
		///<summary>
		///(Регл)
		///</summary>
		public object СчетСписанияНДСНУ {get;set;}//Счет списания НДС (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоСписанияНДСНУ1 {get;set;}//Субконто 1 (налоговый учет)
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоСписанияНДСНУ2 {get;set;}//Субконто 2 (налоговый учет)
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоСписанияНДСНУ3 {get;set;}//Субконто 3 (налоговый учет)
		public bool ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат {get;set;}//Для списания НДС использовать счет и аналитику учета затрат
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.НоменклатурныеГруппы НоменклатурнаяГруппа {get;set;}//Номенклатурная группа
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.СтатьиЗатрат СтатьяЗатратСписанияНДС {get;set;}//Статья затрат списания НДС
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.ПодразделенияОрганизаций ПодразделениеОрганизации {get;set;}//Подразделение организации
		
		public РаспределениеНДСКосвенныхРасходов()
		{
		}
		
		public РаспределениеНДСКосвенныхРасходов(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld15095RRef [Организация]
					,_Fld15096RRef [Ответственный]
					,_Fld15097 [Комментарий]
					,_Fld15098 [ВыручкаЕНВД]
					,_Fld15099 [ВыручкаБезНДС]
					,_Fld15100 [ВыручкаНДС0]
					,_Fld15101 [ВыручкаНДС]
					,_Fld15102 [НачалоПериода]
					,_Fld15103RRef [СчетСписанияНДС]
					,_Fld15104RRef [СубконтоСписанияНДС1]
					,_Fld15105RRef [СубконтоСписанияНДС2]
					,_Fld15106RRef [СубконтоСписанияНДС3]
					,_Fld15107RRef [СчетСписанияНДСНУ]
					,_Fld15108RRef [СубконтоСписанияНДСНУ1]
					,_Fld15109RRef [СубконтоСписанияНДСНУ2]
					,_Fld15110RRef [СубконтоСписанияНДСНУ3]
					,_Fld15111 [ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат]
					,_Fld15112RRef [НоменклатурнаяГруппа]
					,_Fld15113RRef [СтатьяЗатратСписанияНДС]
					,_Fld15114RRef [ПодразделениеОрганизации]
					From _Document547(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							Комментарий = Читалка.GetString(6);
							ВыручкаЕНВД = Читалка.GetDecimal(7);
							ВыручкаБезНДС = Читалка.GetDecimal(8);
							ВыручкаНДС0 = Читалка.GetDecimal(9);
							ВыручкаНДС = Читалка.GetDecimal(10);
							НачалоПериода = Читалка.GetDateTime(11);
							ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = ((byte[])Читалка.GetValue(20))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.РаспределениеНДСКосвенныхРасходов  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.РаспределениеНДСКосвенныхРасходов();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.Организация = Организация;
			Объект.Ответственный = Ответственный;
			Объект.Комментарий = Комментарий;
			Объект.ВыручкаЕНВД = ВыручкаЕНВД;
			Объект.ВыручкаБезНДС = ВыручкаБезНДС;
			Объект.ВыручкаНДС0 = ВыручкаНДС0;
			Объект.ВыручкаНДС = ВыручкаНДС;
			Объект.НачалоПериода = НачалоПериода;
			Объект.СчетСписанияНДС = СчетСписанияНДС;
			Объект.СубконтоСписанияНДС1 = СубконтоСписанияНДС1;
			Объект.СубконтоСписанияНДС2 = СубконтоСписанияНДС2;
			Объект.СубконтоСписанияНДС3 = СубконтоСписанияНДС3;
			Объект.СчетСписанияНДСНУ = СчетСписанияНДСНУ;
			Объект.СубконтоСписанияНДСНУ1 = СубконтоСписанияНДСНУ1;
			Объект.СубконтоСписанияНДСНУ2 = СубконтоСписанияНДСНУ2;
			Объект.СубконтоСписанияНДСНУ3 = СубконтоСписанияНДСНУ3;
			Объект.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат = ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат;
			Объект.НоменклатурнаяГруппа = НоменклатурнаяГруппа;
			Объект.СтатьяЗатратСписанияНДС = СтатьяЗатратСписанияНДС;
			Объект.ПодразделениеОрганизации = ПодразделениеОрганизации;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.РаспределениеНДСКосвенныхРасходов ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.РаспределениеНДСКосвенныхРасходов)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.РаспределениеНДСКосвенныхРасходов(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}