
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	[ProtoContract]
	[DataContract]
	public partial class УдалитьКорректировочныйСчетФактураВыданный:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("c09d5828-4851-4187-9889-a45624378fb9");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20120928012032.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		public V82.СправочникиСсылка.Контрагенты Контрагент {get;set;}
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагента {get;set;}//Договор
		public V82.ДокументыСсылка.СчетФактураВыданный СчетФактура {get;set;}//Счет-фактура
		public string/*(250)*/ НаименованиеПродавца {get;set;}//Наименование продавца
		public string/*(250)*/ АдресПродавца {get;set;}//Адрес продавца
		public string/*(12)*/ ИННПродавца {get;set;}//ИНН продавца
		public string/*(9)*/ КПППродавца {get;set;}//КПП продавца
		public string/*(250)*/ НаименованиеПокупателя {get;set;}//Наименование покупателя
		public string/*(250)*/ АдресПокупателя {get;set;}//Адрес покупателя
		public string/*(12)*/ ИННПокупателя {get;set;}//ИНН покупателя
		public string/*(9)*/ КПППокупателя {get;set;}//КПП покупателя
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта
		public string/*(100)*/ ФИОРуководителя {get;set;}//Руководитель
		public string/*(100)*/ ФИОГлавногоБухгалтера {get;set;}//Главный бухгалтер
		public string/*(100)*/ СвидетельствоИП {get;set;}//Свидетельство ИП
		public bool НДСПредъявленКВычету {get;set;}//Отразить вычет НДС
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		public decimal/*(15.2)*/ РазницаСНДСКУменьшению {get;set;}//Разница с НДС к уменьшению
		public decimal/*(15.2)*/ РазницаСНДСКДоплате {get;set;}//Разница с НДС к доплате
		public decimal/*(15.2)*/ РазницаНДСКУменьшению {get;set;}//Разница НДС к уменьшению
		public decimal/*(15.2)*/ РазницаНДСКДоплате {get;set;}//Разница НДС к доплате
		public bool РучнаяКорректировка {get;set;}//Ручная корректировка
		
		public УдалитьКорректировочныйСчетФактураВыданный()
		{
		}
		
		public УдалитьКорректировочныйСчетФактураВыданный(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld25624RRef [Организация]
					,_Fld25625RRef [Контрагент]
					,_Fld25626RRef [ДоговорКонтрагента]
					,_Fld25627RRef [СчетФактура]
					,_Fld25628 [НаименованиеПродавца]
					,_Fld25629 [АдресПродавца]
					,_Fld25630 [ИННПродавца]
					,_Fld25631 [КПППродавца]
					,_Fld25632 [НаименованиеПокупателя]
					,_Fld25633 [АдресПокупателя]
					,_Fld25634 [ИННПокупателя]
					,_Fld25635 [КПППокупателя]
					,_Fld25636RRef [ВалютаДокумента]
					,_Fld25637 [ФИОРуководителя]
					,_Fld25638 [ФИОГлавногоБухгалтера]
					,_Fld25639 [СвидетельствоИП]
					,_Fld25640 [НДСПредъявленКВычету]
					,_Fld25641RRef [Ответственный]
					,_Fld25642 [Комментарий]
					,_Fld25643 [РазницаСНДСКУменьшению]
					,_Fld25644 [РазницаСНДСКДоплате]
					,_Fld25645 [РазницаНДСКУменьшению]
					,_Fld25646 [РазницаНДСКДоплате]
					,_Fld25647 [РучнаяКорректировка]
					From _Document23177(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							СчетФактура = new V82.ДокументыСсылка.СчетФактураВыданный((byte[])Читалка.GetValue(7));
							НаименованиеПродавца = Читалка.GetString(8);
							АдресПродавца = Читалка.GetString(9);
							ИННПродавца = Читалка.GetString(10);
							КПППродавца = Читалка.GetString(11);
							НаименованиеПокупателя = Читалка.GetString(12);
							АдресПокупателя = Читалка.GetString(13);
							ИННПокупателя = Читалка.GetString(14);
							КПППокупателя = Читалка.GetString(15);
							ФИОРуководителя = Читалка.GetString(17);
							ФИОГлавногоБухгалтера = Читалка.GetString(18);
							СвидетельствоИП = Читалка.GetString(19);
							НДСПредъявленКВычету = ((byte[])Читалка.GetValue(20))[0]==1;
							Комментарий = Читалка.GetString(22);
							РазницаСНДСКУменьшению = Читалка.GetDecimal(23);
							РазницаСНДСКДоплате = Читалка.GetDecimal(24);
							РазницаНДСКУменьшению = Читалка.GetDecimal(25);
							РазницаНДСКДоплате = Читалка.GetDecimal(26);
							РучнаяКорректировка = ((byte[])Читалка.GetValue(27))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.УдалитьКорректировочныйСчетФактураВыданный  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.УдалитьКорректировочныйСчетФактураВыданный();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.Организация = Организация;
			Объект.Контрагент = Контрагент;
			Объект.ДоговорКонтрагента = ДоговорКонтрагента;
			Объект.СчетФактура = СчетФактура;
			Объект.НаименованиеПродавца = НаименованиеПродавца;
			Объект.АдресПродавца = АдресПродавца;
			Объект.ИННПродавца = ИННПродавца;
			Объект.КПППродавца = КПППродавца;
			Объект.НаименованиеПокупателя = НаименованиеПокупателя;
			Объект.АдресПокупателя = АдресПокупателя;
			Объект.ИННПокупателя = ИННПокупателя;
			Объект.КПППокупателя = КПППокупателя;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.ФИОРуководителя = ФИОРуководителя;
			Объект.ФИОГлавногоБухгалтера = ФИОГлавногоБухгалтера;
			Объект.СвидетельствоИП = СвидетельствоИП;
			Объект.НДСПредъявленКВычету = НДСПредъявленКВычету;
			Объект.Ответственный = Ответственный;
			Объект.Комментарий = Комментарий;
			Объект.РазницаСНДСКУменьшению = РазницаСНДСКУменьшению;
			Объект.РазницаСНДСКДоплате = РазницаСНДСКДоплате;
			Объект.РазницаНДСКУменьшению = РазницаНДСКУменьшению;
			Объект.РазницаНДСКДоплате = РазницаНДСКДоплате;
			Объект.РучнаяКорректировка = РучнаяКорректировка;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.УдалитьКорректировочныйСчетФактураВыданный ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.УдалитьКорректировочныйСчетФактураВыданный)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.УдалитьКорректировочныйСчетФактураВыданный(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}