
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Регл)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ПринятиеКУчетуНМА:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("0af3b298-6c2d-44da-888d-c559255aa2ce");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20120928012012.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public V82.Перечисления/*Ссылка*/.ВидыОбъектовУчетаНМА ВидОбъектаУчета {get;set;}//Вид объекта учета
		public DateTime ДатаПриобретения {get;set;}//Дата приобретения
		///<summary>
		///(Регл) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		public decimal/*(3.2)*/ КоэффициентБУ {get;set;}//Коэффициент (БУ)
		///<summary>
		///(Регл)
		///</summary>
		public bool НачислятьАмортизациюБУ {get;set;}//Начислять амортизацию (БУ)
		///<summary>
		///(Регл)
		///</summary>
		public bool НачислятьАмортизациюНУ {get;set;}//Начислять амортизацию (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.НематериальныеАктивы НематериальныйАктив {get;set;}//Нематериальный актив
		public decimal/*(10)*/ ОбъемПродукцииРаботДляВычисленияАмортизации {get;set;}//Объем продукции (работ) для исчисления амортизации в натуральных ед.
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///(Регл)
		///</summary>
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		///<summary>
		///(Регл)
		///</summary>
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		public V82.Перечисления/*Ссылка*/.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН ПорядокВключенияСтоимостиВСоставРасходовУСН {get;set;}//Порядок включения стоимости в состав расходов (УСН)
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(6.2)*/ СпециальныйКоэффициентНУ {get;set;}//Понижающий коэффициент
		///<summary>
		///(Регл)
		///</summary>
		public V82.Перечисления/*Ссылка*/.СпособыНачисленияАмортизацииНМА СпособНачисленияАмортизацииБУ {get;set;}//Способ начисления амортизации (БУ)
		///<summary>
		///(Регл)
		///</summary>
		public V82.Перечисления/*Ссылка*/.МетодыНачисленияАмортизации СпособНачисленияАмортизацииНУ {get;set;}//Метод начисления амортизации
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.СпособыОтраженияРасходовПоАмортизации СпособОтраженияРасходов {get;set;}//Способ отражения расходов
		///<summary>
		///(Регл)
		///</summary>
		public V82.Перечисления/*Ссылка*/.СпособыПоступленияАктивов СпособПоступления {get;set;}//Способ поступления
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(4)*/ СрокПолезногоИспользованияБУ {get;set;}//Срок полезного использования, мес.
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(4)*/ СрокПолезногоИспользованияНУ {get;set;}//Срок полезного использования (НУ), мес.
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(4)*/ СрокПолезногоИспользованияУСН {get;set;}//Срок полезного использования (УСН), мес.
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьБУ {get;set;}//Первоначальная стоимость (БУ)
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьВР {get;set;}//Первоначальная стоимость (ВР)
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьНУ {get;set;}//Первоначальная стоимость (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьПР {get;set;}//Первоначальная стоимость (ПР)
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СтоимостьУСН {get;set;}//Стоимость (сумма расходов УСН)
		///<summary>
		///(Регл)
		///</summary>
		public decimal/*(15.2)*/ СуммаНачисленнойАмортизацииУСН {get;set;}//Сумма начисленной амортизации (УСН)
		///<summary>
		///(Регл)
		///</summary>
		public object СчетНачисленияАмортизацииБУ {get;set;}//Счет начисления амортизации БУ
		///<summary>
		///(Регл)
		///</summary>
		public object СчетНачисленияАмортизацииНУ {get;set;}//Счет начисления амортизации (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаБУ {get;set;}//Счет учета (БУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаБУВнеоборотногоАктива {get;set;}//Счет учета БУВнеоборотного актива
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаНУ {get;set;}//Счет учета (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаНУВнеоборотногоАктива {get;set;}//Счет учета НУВнеоборотного актива
		public V82.Перечисления/*Ссылка*/.ПорядокСписанияНИОКРНУ ПорядокСписанияНИОКРНаРасходыНУ {get;set;}//Порядок списания НИОКР на расходы (НУ)
		
		public ПринятиеКУчетуНМА()
		{
		}
		
		public ПринятиеКУчетуНМА(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld9981RRef [ВидОбъектаУчета]
					,_Fld10006 [ДатаПриобретения]
					,_Fld9982 [Комментарий]
					,_Fld23008 [КоэффициентБУ]
					,_Fld9984 [НачислятьАмортизациюБУ]
					,_Fld9985 [НачислятьАмортизациюНУ]
					,_Fld9986RRef [НематериальныйАктив]
					,_Fld9987 [ОбъемПродукцииРаботДляВычисленияАмортизации]
					,_Fld9988RRef [Организация]
					,_Fld9989RRef [Ответственный]
					,_Fld9990 [ОтражатьВБухгалтерскомУчете]
					,_Fld9991 [ОтражатьВНалоговомУчете]
					,_Fld10010RRef [ПорядокВключенияСтоимостиВСоставРасходовУСН]
					,_Fld9992 [СпециальныйКоэффициентНУ]
					,_Fld9993RRef [СпособНачисленияАмортизацииБУ]
					,_Fld9994RRef [СпособНачисленияАмортизацииНУ]
					,_Fld9983RRef [СпособОтраженияРасходов]
					,_Fld9995RRef [СпособПоступления]
					,_Fld9996 [СрокПолезногоИспользованияБУ]
					,_Fld9997 [СрокПолезногоИспользованияНУ]
					,_Fld10008 [СрокПолезногоИспользованияУСН]
					,_Fld9998 [СтоимостьБУ]
					,_Fld10012 [СтоимостьВР]
					,_Fld9999 [СтоимостьНУ]
					,_Fld10011 [СтоимостьПР]
					,_Fld10007 [СтоимостьУСН]
					,_Fld10009 [СуммаНачисленнойАмортизацииУСН]
					,_Fld10000RRef [СчетНачисленияАмортизацииБУ]
					,_Fld10001RRef [СчетНачисленияАмортизацииНУ]
					,_Fld10002RRef [СчетУчетаБУ]
					,_Fld10003RRef [СчетУчетаБУВнеоборотногоАктива]
					,_Fld10004RRef [СчетУчетаНУ]
					,_Fld10005RRef [СчетУчетаНУВнеоборотногоАктива]
					,_Fld27257RRef [ПорядокСписанияНИОКРНаРасходыНУ]
					From _Document410(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ВидОбъектаУчета = V82.Перечисления/*Ссылка*/.ВидыОбъектовУчетаНМА.ПустаяСсылка.Получить((byte[])Читалка.GetValue(4));
							ДатаПриобретения = Читалка.GetDateTime(5);
							Комментарий = Читалка.GetString(6);
							КоэффициентБУ = Читалка.GetDecimal(7);
							НачислятьАмортизациюБУ = ((byte[])Читалка.GetValue(8))[0]==1;
							НачислятьАмортизациюНУ = ((byte[])Читалка.GetValue(9))[0]==1;
							ОбъемПродукцииРаботДляВычисленияАмортизации = Читалка.GetDecimal(11);
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(14))[0]==1;
							ОтражатьВНалоговомУчете = ((byte[])Читалка.GetValue(15))[0]==1;
							ПорядокВключенияСтоимостиВСоставРасходовУСН = V82.Перечисления/*Ссылка*/.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ПустаяСсылка.Получить((byte[])Читалка.GetValue(16));
							СпециальныйКоэффициентНУ = Читалка.GetDecimal(17);
							СпособНачисленияАмортизацииБУ = V82.Перечисления/*Ссылка*/.СпособыНачисленияАмортизацииНМА.ПустаяСсылка.Получить((byte[])Читалка.GetValue(18));
							СпособНачисленияАмортизацииНУ = V82.Перечисления/*Ссылка*/.МетодыНачисленияАмортизации.ПустаяСсылка.Получить((byte[])Читалка.GetValue(19));
							СпособПоступления = V82.Перечисления/*Ссылка*/.СпособыПоступленияАктивов.ПустаяСсылка.Получить((byte[])Читалка.GetValue(21));
							СрокПолезногоИспользованияБУ = Читалка.GetDecimal(22);
							СрокПолезногоИспользованияНУ = Читалка.GetDecimal(23);
							СрокПолезногоИспользованияУСН = Читалка.GetDecimal(24);
							СтоимостьБУ = Читалка.GetDecimal(25);
							СтоимостьВР = Читалка.GetDecimal(26);
							СтоимостьНУ = Читалка.GetDecimal(27);
							СтоимостьПР = Читалка.GetDecimal(28);
							СтоимостьУСН = Читалка.GetDecimal(29);
							СуммаНачисленнойАмортизацииУСН = Читалка.GetDecimal(30);
							ПорядокСписанияНИОКРНаРасходыНУ = V82.Перечисления/*Ссылка*/.ПорядокСписанияНИОКРНУ.ПустаяСсылка.Получить((byte[])Читалка.GetValue(37));
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.ПринятиеКУчетуНМА  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.ПринятиеКУчетуНМА();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.ВидОбъектаУчета = ВидОбъектаУчета;
			Объект.ДатаПриобретения = ДатаПриобретения;
			Объект.Комментарий = Комментарий;
			Объект.КоэффициентБУ = КоэффициентБУ;
			Объект.НачислятьАмортизациюБУ = НачислятьАмортизациюБУ;
			Объект.НачислятьАмортизациюНУ = НачислятьАмортизациюНУ;
			Объект.НематериальныйАктив = НематериальныйАктив;
			Объект.ОбъемПродукцииРаботДляВычисленияАмортизации = ОбъемПродукцииРаботДляВычисленияАмортизации;
			Объект.Организация = Организация;
			Объект.Ответственный = Ответственный;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете;
			Объект.ПорядокВключенияСтоимостиВСоставРасходовУСН = ПорядокВключенияСтоимостиВСоставРасходовУСН;
			Объект.СпециальныйКоэффициентНУ = СпециальныйКоэффициентНУ;
			Объект.СпособНачисленияАмортизацииБУ = СпособНачисленияАмортизацииБУ;
			Объект.СпособНачисленияАмортизацииНУ = СпособНачисленияАмортизацииНУ;
			Объект.СпособОтраженияРасходов = СпособОтраженияРасходов;
			Объект.СпособПоступления = СпособПоступления;
			Объект.СрокПолезногоИспользованияБУ = СрокПолезногоИспользованияБУ;
			Объект.СрокПолезногоИспользованияНУ = СрокПолезногоИспользованияНУ;
			Объект.СрокПолезногоИспользованияУСН = СрокПолезногоИспользованияУСН;
			Объект.СтоимостьБУ = СтоимостьБУ;
			Объект.СтоимостьВР = СтоимостьВР;
			Объект.СтоимостьНУ = СтоимостьНУ;
			Объект.СтоимостьПР = СтоимостьПР;
			Объект.СтоимостьУСН = СтоимостьУСН;
			Объект.СуммаНачисленнойАмортизацииУСН = СуммаНачисленнойАмортизацииУСН;
			Объект.СчетНачисленияАмортизацииБУ = СчетНачисленияАмортизацииБУ;
			Объект.СчетНачисленияАмортизацииНУ = СчетНачисленияАмортизацииНУ;
			Объект.СчетУчетаБУ = СчетУчетаБУ;
			Объект.СчетУчетаБУВнеоборотногоАктива = СчетУчетаБУВнеоборотногоАктива;
			Объект.СчетУчетаНУ = СчетУчетаНУ;
			Объект.СчетУчетаНУВнеоборотногоАктива = СчетУчетаНУВнеоборотногоАктива;
			Объект.ПорядокСписанияНИОКРНаРасходыНУ = ПорядокСписанияНИОКРНаРасходыНУ;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.ПринятиеКУчетуНМА ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.ПринятиеКУчетуНМА)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.ПринятиеКУчетуНМА(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}