
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Упр)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class Событие:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("af035b66-dcdc-400e-84e0-4e0bd98626ac");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20120928012019.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public string/*(300)*/ АдресЭлектроннойПочты {get;set;}//Адрес электронной почты
		public V82.Перечисления/*Ссылка*/.Важность Важность {get;set;}
		public V82.Перечисления/*Ссылка*/.ВидыОбъектовСобытия ВидОбъекта {get;set;}//Вид объекта
		public V82.Перечисления/*Ссылка*/.ВидыСобытий ВидСобытия {get;set;}//Вид события
		public DateTime ВремяНапоминания {get;set;}//Время напоминания
		public V82.СправочникиСсылка.ИсточникиИнформацииПриОбращенииПокупателей ИсточникИнформацииПриОбращении {get;set;}//Источник информации при обращении
		public string/*(0)*/ Комментарий {get;set;}
		public object КонтактноеЛицо {get;set;}//Контактное лицо
		public object Контрагент {get;set;}
		public bool НапомнитьОСобытии {get;set;}//Напомнить о событии
		public DateTime НачалоСобытия {get;set;}//Начало события
		public DateTime ОкончаниеСобытия {get;set;}//Окончание события
		public string/*(200)*/ ОписаниеСобытия {get;set;}//Описание события
		public object Основание {get;set;}
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		public V82.СправочникиСсылка.Помещения Помещение {get;set;}
		public V82.СправочникиСсылка.Проекты Проект {get;set;}
		public string/*(0)*/ СодержаниеСобытия {get;set;}//Содержание события
		public V82.Перечисления/*Ссылка*/.СостоянияСобытий СостояниеСобытия {get;set;}//Состояние события
		public V82.СправочникиСсылка.Территории Территория {get;set;}
		public V82.Перечисления/*Ссылка*/.ВходящееИсходящееСобытие ТипСобытия {get;set;}//Тип события
		public V82.СправочникиСсылка.ГруппыСобытий ГруппаСобытия {get;set;}//Группа события
		public bool ЕстьВложения {get;set;}//Есть вложения
		public V82.СправочникиСсылка.КонтактныеЛица КонтактноеЛицоБезКонтрагента {get;set;}//Контактное лицо
		public decimal/*(10)*/ ИнтервалНапоминания {get;set;}//Интервал напоминания
		public string/*(50)*/ ПредметКонтакта {get;set;}//Предмет
		public V82.СправочникиСсылка.ЗаявкиКандидатов ЗаявкаКандидата {get;set;}//Заявка кандидата
		
		public Событие()
		{
		}
		
		public Событие(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld11506 [АдресЭлектроннойПочты]
					,_Fld11507RRef [Важность]
					,_Fld11508RRef [ВидОбъекта]
					,_Fld11509RRef [ВидСобытия]
					,_Fld11510 [ВремяНапоминания]
					,_Fld11511RRef [ИсточникИнформацииПриОбращении]
					,_Fld11512 [Комментарий]
					,_Fld11513_TYPE [КонтактноеЛицо_Тип],_Fld11513_RRRef [КонтактноеЛицо],_Fld11513_RTRef [КонтактноеЛицо_Вид]
					,_Fld11514_TYPE [Контрагент_Тип],_Fld11514_RRRef [Контрагент],_Fld11514_RTRef [Контрагент_Вид]
					,_Fld11515 [НапомнитьОСобытии]
					,_Fld11516 [НачалоСобытия]
					,_Fld11517 [ОкончаниеСобытия]
					,_Fld11518 [ОписаниеСобытия]
					,_Fld11519_TYPE [Основание_Тип],_Fld11519_RRRef [Основание],_Fld11519_RTRef [Основание_Вид]
					,_Fld11520RRef [Ответственный]
					,_Fld11521RRef [Помещение]
					,_Fld11522RRef [Проект]
					,_Fld11523 [СодержаниеСобытия]
					,_Fld11524RRef [СостояниеСобытия]
					,_Fld11525RRef [Территория]
					,_Fld11526RRef [ТипСобытия]
					,_Fld11527RRef [ГруппаСобытия]
					,_Fld11528 [ЕстьВложения]
					,_Fld11529RRef [КонтактноеЛицоБезКонтрагента]
					,_Fld11530 [ИнтервалНапоминания]
					,_Fld11531 [ПредметКонтакта]
					,_Fld22251RRef [ЗаявкаКандидата]
					From _Document452(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							АдресЭлектроннойПочты = Читалка.GetString(4);
							Важность = V82.Перечисления/*Ссылка*/.Важность.ПустаяСсылка.Получить((byte[])Читалка.GetValue(5));
							ВидОбъекта = V82.Перечисления/*Ссылка*/.ВидыОбъектовСобытия.ПустаяСсылка.Получить((byte[])Читалка.GetValue(6));
							ВидСобытия = V82.Перечисления/*Ссылка*/.ВидыСобытий.ПустаяСсылка.Получить((byte[])Читалка.GetValue(7));
							ВремяНапоминания = Читалка.GetDateTime(8);
							Комментарий = Читалка.GetString(10);
							НапомнитьОСобытии = ((byte[])Читалка.GetValue(17))[0]==1;
							НачалоСобытия = Читалка.GetDateTime(18);
							ОкончаниеСобытия = Читалка.GetDateTime(19);
							ОписаниеСобытия = Читалка.GetString(20);
							СодержаниеСобытия = Читалка.GetString(27);
							СостояниеСобытия = V82.Перечисления/*Ссылка*/.СостоянияСобытий.ПустаяСсылка.Получить((byte[])Читалка.GetValue(28));
							ТипСобытия = V82.Перечисления/*Ссылка*/.ВходящееИсходящееСобытие.ПустаяСсылка.Получить((byte[])Читалка.GetValue(30));
							ЕстьВложения = ((byte[])Читалка.GetValue(32))[0]==1;
							ИнтервалНапоминания = Читалка.GetDecimal(34);
							ПредметКонтакта = Читалка.GetString(35);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.Событие  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.Событие();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.АдресЭлектроннойПочты = АдресЭлектроннойПочты;
			Объект.Важность = Важность;
			Объект.ВидОбъекта = ВидОбъекта;
			Объект.ВидСобытия = ВидСобытия;
			Объект.ВремяНапоминания = ВремяНапоминания;
			Объект.ИсточникИнформацииПриОбращении = ИсточникИнформацииПриОбращении;
			Объект.Комментарий = Комментарий;
			Объект.КонтактноеЛицо = КонтактноеЛицо;
			Объект.Контрагент = Контрагент;
			Объект.НапомнитьОСобытии = НапомнитьОСобытии;
			Объект.НачалоСобытия = НачалоСобытия;
			Объект.ОкончаниеСобытия = ОкончаниеСобытия;
			Объект.ОписаниеСобытия = ОписаниеСобытия;
			Объект.Основание = Основание;
			Объект.Ответственный = Ответственный;
			Объект.Помещение = Помещение;
			Объект.Проект = Проект;
			Объект.СодержаниеСобытия = СодержаниеСобытия;
			Объект.СостояниеСобытия = СостояниеСобытия;
			Объект.Территория = Территория;
			Объект.ТипСобытия = ТипСобытия;
			Объект.ГруппаСобытия = ГруппаСобытия;
			Объект.ЕстьВложения = ЕстьВложения;
			Объект.КонтактноеЛицоБезКонтрагента = КонтактноеЛицоБезКонтрагента;
			Объект.ИнтервалНапоминания = ИнтервалНапоминания;
			Объект.ПредметКонтакта = ПредметКонтакта;
			Объект.ЗаявкаКандидата = ЗаявкаКандидата;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.Событие ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.Событие)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.Событие(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}