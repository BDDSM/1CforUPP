
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Регл)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ИзменениеУсловийИсполнительногоЛиста:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("e1d9eb9c-3731-41c3-a32c-d6c9cd32f828");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20120928012032.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public V82.СправочникиСсылка.ФизическиеЛица Физлицо {get;set;}
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		public V82.ДокументыСсылка.ИсполнительныйЛист ИсполнительныйЛист {get;set;}//Исполнительный лист
		public V82.Перечисления/*Ссылка*/.ВидыДействияСНачислением Действие {get;set;}
		public DateTime ДатаИзменения {get;set;}//Дата изменения
		public DateTime ДатаОкончания {get;set;}//Дата окончания
		public V82.Перечисления/*Ссылка*/.СпособыРасчетаУдержанийПоИЛ СпособРасчетаУдержания {get;set;}//Способ расчета удержания
		public decimal/*(10.2)*/ Размер {get;set;}
		public decimal/*(10.2)*/ Предел {get;set;}
		public V82.СправочникиСсылка.ПрожиточныеМинимумы ПрожиточныйМинимум {get;set;}//Прожиточный минимум
		public decimal/*(5.2)*/ ПроцентПочтовогоСбора {get;set;}//Процент почтового сбора
		public V82.СправочникиСсылка.ТарифыПочтовогоСбора Тариф {get;set;}
		public V82.Перечисления/*Ссылка*/.СпособыПеречисленийПоИсполнительномуЛисту СпособПеречисленияПоИсполнительномуЛисту {get;set;}//Способ перечисления по исполнительному листу
		public V82.СправочникиСсылка.ТарифыБанковНаДенежныеПереводы ТарифБанкаНаДенежныеПереводы {get;set;}//Тариф банка на денежные переводы
		public bool ПочтовыйСборРассчитыватьПроцентом {get;set;}//Почтовый сбор рассчитывать процентом
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		
		public ИзменениеУсловийИсполнительногоЛиста()
		{
		}
		
		public ИзменениеУсловийИсполнительногоЛиста(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld24367RRef [Физлицо]
					,_Fld24368RRef [Организация]
					,_Fld24369RRef [ИсполнительныйЛист]
					,_Fld24370RRef [Действие]
					,_Fld24371 [ДатаИзменения]
					,_Fld24372 [ДатаОкончания]
					,_Fld24373RRef [СпособРасчетаУдержания]
					,_Fld24374 [Размер]
					,_Fld24375 [Предел]
					,_Fld24376RRef [ПрожиточныйМинимум]
					,_Fld24377 [ПроцентПочтовогоСбора]
					,_Fld24378RRef [Тариф]
					,_Fld24379RRef [СпособПеречисленияПоИсполнительномуЛисту]
					,_Fld24380RRef [ТарифБанкаНаДенежныеПереводы]
					,_Fld24381 [ПочтовыйСборРассчитыватьПроцентом]
					,_Fld24382RRef [Ответственный]
					,_Fld24383 [Комментарий]
					From _Document23151(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ИсполнительныйЛист = new V82.ДокументыСсылка.ИсполнительныйЛист((byte[])Читалка.GetValue(6));
							Действие = V82.Перечисления/*Ссылка*/.ВидыДействияСНачислением.ПустаяСсылка.Получить((byte[])Читалка.GetValue(7));
							ДатаИзменения = Читалка.GetDateTime(8);
							ДатаОкончания = Читалка.GetDateTime(9);
							СпособРасчетаУдержания = V82.Перечисления/*Ссылка*/.СпособыРасчетаУдержанийПоИЛ.ПустаяСсылка.Получить((byte[])Читалка.GetValue(10));
							Размер = Читалка.GetDecimal(11);
							Предел = Читалка.GetDecimal(12);
							ПроцентПочтовогоСбора = Читалка.GetDecimal(14);
							СпособПеречисленияПоИсполнительномуЛисту = V82.Перечисления/*Ссылка*/.СпособыПеречисленийПоИсполнительномуЛисту.ПустаяСсылка.Получить((byte[])Читалка.GetValue(16));
							ПочтовыйСборРассчитыватьПроцентом = ((byte[])Читалка.GetValue(18))[0]==1;
							Комментарий = Читалка.GetString(20);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.ИзменениеУсловийИсполнительногоЛиста  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.ИзменениеУсловийИсполнительногоЛиста();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.Физлицо = Физлицо;
			Объект.Организация = Организация;
			Объект.ИсполнительныйЛист = ИсполнительныйЛист;
			Объект.Действие = Действие;
			Объект.ДатаИзменения = ДатаИзменения;
			Объект.ДатаОкончания = ДатаОкончания;
			Объект.СпособРасчетаУдержания = СпособРасчетаУдержания;
			Объект.Размер = Размер;
			Объект.Предел = Предел;
			Объект.ПрожиточныйМинимум = ПрожиточныйМинимум;
			Объект.ПроцентПочтовогоСбора = ПроцентПочтовогоСбора;
			Объект.Тариф = Тариф;
			Объект.СпособПеречисленияПоИсполнительномуЛисту = СпособПеречисленияПоИсполнительномуЛисту;
			Объект.ТарифБанкаНаДенежныеПереводы = ТарифБанкаНаДенежныеПереводы;
			Объект.ПочтовыйСборРассчитыватьПроцентом = ПочтовыйСборРассчитыватьПроцентом;
			Объект.Ответственный = Ответственный;
			Объект.Комментарий = Комментарий;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.ИзменениеУсловийИсполнительногоЛиста ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.ИзменениеУсловийИсполнительногоЛиста)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.ИзменениеУсловийИсполнительногоЛиста(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}