
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Регл)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class СведенияОТрудовомСтажеИЗаработкеСЗВ4:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("7621530a-175a-4671-876a-38a91b2ab929");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191926.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		public string/*(100)*/ КраткийСоставДокумента {get;set;}//Краткий состав документа
		public string/*(7)*/ ТипФормДокументов {get;set;}//Тип форм документов
		public V82.Перечисления/*Ссылка*/.КатегорииЗастрахованныхЛицПФР КатегорияЗастрахованныхЛиц {get;set;}//Категория застрахованных лиц
		public DateTime ОтчетныйПериод {get;set;}//Отчетный период
		public V82.Перечисления/*Ссылка*/.ТипыСведенийСЗВ ТипСведенийСЗВ {get;set;}//Тип сведений СЗВ
		public DateTime КорректируемыйПериод {get;set;}//Корректируемый период
		public string/*(5)*/ НомерПачки {get;set;}//Номер пачки
		public bool ПринятоВПФР {get;set;}//Принято в ПФР
		public V82.СправочникиСсылка.ФизическиеЛица Руководитель {get;set;}
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.ДолжностиОрганизаций ДолжностьРуководителя {get;set;}//Должность руководителя
		public V82.Перечисления/*Ссылка*/.ФорматФайлаПФР ФорматФайла {get;set;}//Формат файла
		public V82.СправочникиСсылка.ТерриториальныеУсловия ТерриториальныеУсловия {get;set;}//Территориальные условия
		public string/*(4)*/ ВидКорректировки {get;set;}//Вид корректировки
		public decimal/*(4)*/ Год {get;set;}
		public string/*(4)*/ УдалитьТипСведений {get;set;}//Удалить тип сведений
		///<summary>
		///Ведет себя по правилам 2009 года.
		///</summary>
		public bool СпециальныйДокумент2010года {get;set;}//Специальный документ 2010 года
		public bool НеПередаватьДоуплаченныеСуммы {get;set;}//Не передавать доуплаченные суммы
		///<summary>
		///Такие документы создает обработка загрузки из принятых ПФРом файлов
		///</summary>
		public bool ЗаполненПринятымиСведениями {get;set;}//Заполнен принятыми сведениями
		
		public СведенияОТрудовомСтажеИЗаработкеСЗВ4()
		{
		}
		
		public СведенияОТрудовомСтажеИЗаработкеСЗВ4(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld16855RRef [Организация]
					,_Fld16856 [Комментарий]
					,_Fld16857RRef [Ответственный]
					,_Fld16858 [КраткийСоставДокумента]
					,_Fld16859 [ТипФормДокументов]
					,_Fld16860RRef [КатегорияЗастрахованныхЛиц]
					,_Fld16861 [ОтчетныйПериод]
					,_Fld16862RRef [ТипСведенийСЗВ]
					,_Fld16863 [КорректируемыйПериод]
					,_Fld16864 [НомерПачки]
					,_Fld16865 [ПринятоВПФР]
					,_Fld16866RRef [Руководитель]
					,_Fld16867RRef [ДолжностьРуководителя]
					,_Fld16868RRef [ФорматФайла]
					,_Fld16869RRef [ТерриториальныеУсловия]
					,_Fld16870 [ВидКорректировки]
					,_Fld16871 [Год]
					,_Fld16872 [УдалитьТипСведений]
					,_Fld16873 [СпециальныйДокумент2010года]
					,_Fld16874 [НеПередаватьДоуплаченныеСуммы]
					,_Fld16875 [ЗаполненПринятымиСведениями]
					From _Document585(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							Комментарий = Читалка.GetString(5);
							КраткийСоставДокумента = Читалка.GetString(7);
							ТипФормДокументов = Читалка.GetString(8);
							КатегорияЗастрахованныхЛиц = V82.Перечисления/*Ссылка*/.КатегорииЗастрахованныхЛицПФР.ПустаяСсылка.Получить((byte[])Читалка.GetValue(9));
							ОтчетныйПериод = Читалка.GetDateTime(10);
							ТипСведенийСЗВ = V82.Перечисления/*Ссылка*/.ТипыСведенийСЗВ.ПустаяСсылка.Получить((byte[])Читалка.GetValue(11));
							КорректируемыйПериод = Читалка.GetDateTime(12);
							НомерПачки = Читалка.GetString(13);
							ПринятоВПФР = ((byte[])Читалка.GetValue(14))[0]==1;
							ФорматФайла = V82.Перечисления/*Ссылка*/.ФорматФайлаПФР.ПустаяСсылка.Получить((byte[])Читалка.GetValue(17));
							ВидКорректировки = Читалка.GetString(19);
							Год = Читалка.GetDecimal(20);
							УдалитьТипСведений = Читалка.GetString(21);
							СпециальныйДокумент2010года = ((byte[])Читалка.GetValue(22))[0]==1;
							НеПередаватьДоуплаченныеСуммы = ((byte[])Читалка.GetValue(23))[0]==1;
							ЗаполненПринятымиСведениями = ((byte[])Читалка.GetValue(24))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.СведенияОТрудовомСтажеИЗаработкеСЗВ4  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.СведенияОТрудовомСтажеИЗаработкеСЗВ4();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.Организация = Организация;
			Объект.Комментарий = Комментарий;
			Объект.Ответственный = Ответственный;
			Объект.КраткийСоставДокумента = КраткийСоставДокумента;
			Объект.ТипФормДокументов = ТипФормДокументов;
			Объект.КатегорияЗастрахованныхЛиц = КатегорияЗастрахованныхЛиц;
			Объект.ОтчетныйПериод = ОтчетныйПериод;
			Объект.ТипСведенийСЗВ = ТипСведенийСЗВ;
			Объект.КорректируемыйПериод = КорректируемыйПериод;
			Объект.НомерПачки = НомерПачки;
			Объект.ПринятоВПФР = ПринятоВПФР;
			Объект.Руководитель = Руководитель;
			Объект.ДолжностьРуководителя = ДолжностьРуководителя;
			Объект.ФорматФайла = ФорматФайла;
			Объект.ТерриториальныеУсловия = ТерриториальныеУсловия;
			Объект.ВидКорректировки = ВидКорректировки;
			Объект.Год = Год;
			Объект.УдалитьТипСведений = УдалитьТипСведений;
			Объект.СпециальныйДокумент2010года = СпециальныйДокумент2010года;
			Объект.НеПередаватьДоуплаченныеСуммы = НеПередаватьДоуплаченныеСуммы;
			Объект.ЗаполненПринятымиСведениями = ЗаполненПринятымиСведениями;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4 ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}