
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Общ)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ДоговорЗаймаСРаботником:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("945d4ca3-72bd-422b-81c6-8ba4b26d8ca1");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20120928012008.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ФизическиеЛица ФизЛицо {get;set;}//Физическое лицо
		///<summary>
		///(Общ) Сумма в валюте документа
		///</summary>
		public decimal/*(15.2)*/ СуммаЗайма {get;set;}//Сумма займа
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10.4)*/ КурсДокумента {get;set;}//Курс документа
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10)*/ КратностьДокумента {get;set;}//Кратность документа
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(7.2)*/ ПроцентЗаПользованиеЗаймом {get;set;}//Процент за пользование займом
		///<summary>
		///(Общ)
		///</summary>
		public V82.Перечисления/*Ссылка*/.ПорядокПогашенияЗаймаПроцентов ПорядокПогашенияЗайма {get;set;}//Порядок погашения займа
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(3)*/ СрокПогашения {get;set;}//Срок погашения
		///<summary>
		///(Общ)
		///</summary>
		public DateTime НачалоПогашения {get;set;}//Начало погашения
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВУправленческомУчете {get;set;}//Отражать в управленческом учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///(Регл)
		///</summary>
		public bool НачислятьМатериальнуюВыгоду {get;set;}//Начислять материальную выгоду
		public V82.Перечисления/*Ссылка*/.НДФЛСтавкиНалогообложенияРезидента СтавкаНалогообложенияРезидента {get;set;}//Ставка налогообложения резидента
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаПроцентовПоЗайму {get;set;}//Счет учета процентов по займу
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///(Регл)
		///</summary>
		public object Субконто1 {get;set;}//Субконто 1
		///<summary>
		///(Регл)
		///</summary>
		public object Субконто2 {get;set;}//Субконто 2
		///<summary>
		///(Регл)
		///</summary>
		public object Субконто3 {get;set;}//Субконто 3
		public bool ДанныеПрошлойВерсии {get;set;}//Перенесен из 7.7
		
		public ДоговорЗаймаСРаботником()
		{
		}
		
		public ДоговорЗаймаСРаботником(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld4174RRef [ФизЛицо]
					,_Fld4175 [СуммаЗайма]
					,_Fld4176RRef [ВалютаДокумента]
					,_Fld4177 [КурсДокумента]
					,_Fld4178 [КратностьДокумента]
					,_Fld4179 [ПроцентЗаПользованиеЗаймом]
					,_Fld4180RRef [ПорядокПогашенияЗайма]
					,_Fld4181 [СрокПогашения]
					,_Fld4182 [НачалоПогашения]
					,_Fld4183 [ОтражатьВУправленческомУчете]
					,_Fld4184 [ОтражатьВБухгалтерскомУчете]
					,_Fld4185RRef [Организация]
					,_Fld4186 [НачислятьМатериальнуюВыгоду]
					,_Fld4193RRef [СтавкаНалогообложенияРезидента]
					,_Fld4187RRef [СчетУчетаПроцентовПоЗайму]
					,_Fld4188 [Комментарий]
					,_Fld4189RRef [Ответственный]
					,_Fld4190RRef [Субконто1]
					,_Fld4191RRef [Субконто2]
					,_Fld4192RRef [Субконто3]
					,_Fld26723 [ДанныеПрошлойВерсии]
					From _Document251(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							СуммаЗайма = Читалка.GetDecimal(5);
							КурсДокумента = Читалка.GetDecimal(7);
							КратностьДокумента = Читалка.GetDecimal(8);
							ПроцентЗаПользованиеЗаймом = Читалка.GetDecimal(9);
							ПорядокПогашенияЗайма = V82.Перечисления/*Ссылка*/.ПорядокПогашенияЗаймаПроцентов.ПустаяСсылка.Получить((byte[])Читалка.GetValue(10));
							СрокПогашения = Читалка.GetDecimal(11);
							НачалоПогашения = Читалка.GetDateTime(12);
							ОтражатьВУправленческомУчете = ((byte[])Читалка.GetValue(13))[0]==1;
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(14))[0]==1;
							НачислятьМатериальнуюВыгоду = ((byte[])Читалка.GetValue(16))[0]==1;
							СтавкаНалогообложенияРезидента = V82.Перечисления/*Ссылка*/.НДФЛСтавкиНалогообложенияРезидента.ПустаяСсылка.Получить((byte[])Читалка.GetValue(17));
							Комментарий = Читалка.GetString(19);
							ДанныеПрошлойВерсии = ((byte[])Читалка.GetValue(24))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.ДоговорЗаймаСРаботником  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.ДоговорЗаймаСРаботником();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.ФизЛицо = ФизЛицо;
			Объект.СуммаЗайма = СуммаЗайма;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.КурсДокумента = КурсДокумента;
			Объект.КратностьДокумента = КратностьДокумента;
			Объект.ПроцентЗаПользованиеЗаймом = ПроцентЗаПользованиеЗаймом;
			Объект.ПорядокПогашенияЗайма = ПорядокПогашенияЗайма;
			Объект.СрокПогашения = СрокПогашения;
			Объект.НачалоПогашения = НачалоПогашения;
			Объект.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.Организация = Организация;
			Объект.НачислятьМатериальнуюВыгоду = НачислятьМатериальнуюВыгоду;
			Объект.СтавкаНалогообложенияРезидента = СтавкаНалогообложенияРезидента;
			Объект.СчетУчетаПроцентовПоЗайму = СчетУчетаПроцентовПоЗайму;
			Объект.Комментарий = Комментарий;
			Объект.Ответственный = Ответственный;
			Объект.Субконто1 = Субконто1;
			Объект.Субконто2 = Субконто2;
			Объект.Субконто3 = Субконто3;
			Объект.ДанныеПрошлойВерсии = ДанныеПрошлойВерсии;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.ДоговорЗаймаСРаботником ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.ДоговорЗаймаСРаботником)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.ДоговорЗаймаСРаботником(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}