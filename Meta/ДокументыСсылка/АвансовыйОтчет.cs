
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Общ)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class АвансовыйОтчет:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("f4cab3fd-5c51-482f-b082-c181d247ea89");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191701.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10.4)*/ КурсДокумента {get;set;}//Курс документа
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10)*/ КратностьДокумента {get;set;}//Кратность документа
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВУправленческомУчете {get;set;}//Отражать в управленческом учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public object СкладОрдер {get;set;}//Склад ордер
		///<summary>
		///(Общ)
		///</summary>
		public bool СуммаВключаетНДС {get;set;}//Сумма включает НДС
		///<summary>
		///(Общ) Сумма в валюте документа, налоги включены
		///</summary>
		public decimal/*(15.2)*/ СуммаДокумента {get;set;}//Сумма документа
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ТипыЦенНоменклатуры ТипЦен {get;set;}//Тип цен
		///<summary>
		///(Общ)
		///</summary>
		public bool УчитыватьНДС {get;set;}//Учитывать НДС
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ФизическиеЛица ФизЛицо {get;set;}//Подотчетное лицо
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///(Общ) Вид поступления: на склад или по ордеру
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВидыПоступленияТоваров ВидПоступления {get;set;}//Вид поступления
		///<summary>
		///(Регл)
		///</summary>
		public bool НДСВключенВСтоимость {get;set;}//НДС включен в стоимость
		///<summary>
		///Назначение аванса
		///</summary>
		public string/*(100)*/ НазначениеАванса {get;set;}//Назначение аванса
		public object Проект {get;set;}
		public string/*(5)*/ КоличествоДокументов {get;set;}//Количество документов
		public string/*(5)*/ КоличествоЛистов {get;set;}//Количество листов
		
		public АвансовыйОтчет()
		{
		}
		
		public АвансовыйОтчет(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld4373RRef [ВалютаДокумента]
					,_Fld4374 [Комментарий]
					,_Fld4375 [КурсДокумента]
					,_Fld4376 [КратностьДокумента]
					,_Fld4377RRef [Организация]
					,_Fld4378 [ОтражатьВУправленческомУчете]
					,_Fld4379 [ОтражатьВБухгалтерскомУчете]
					,_Fld4380 [ОтражатьВНалоговомУчете]
					,_Fld4381RRef [Подразделение]
					,_Fld4382_TYPE [СкладОрдер_Тип],_Fld4382_RRRef [СкладОрдер],_Fld4382_RTRef [СкладОрдер_Вид]
					,_Fld4383 [СуммаВключаетНДС]
					,_Fld4384 [СуммаДокумента]
					,_Fld4385RRef [ТипЦен]
					,_Fld4386 [УчитыватьНДС]
					,_Fld4387RRef [ФизЛицо]
					,_Fld4388RRef [Ответственный]
					,_Fld4389RRef [ВидПоступления]
					,_Fld4390 [НДСВключенВСтоимость]
					,_Fld4391 [НазначениеАванса]
					,_Fld4392_TYPE [Проект_Тип],_Fld4392_RRRef [Проект],_Fld4392_RTRef [Проект_Вид]
					,_Fld4393 [КоличествоДокументов]
					,_Fld4394 [КоличествоЛистов]
					From _Document298(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							Комментарий = Читалка.GetString(5);
							КурсДокумента = Читалка.GetDecimal(6);
							КратностьДокумента = Читалка.GetDecimal(7);
							ОтражатьВУправленческомУчете = ((byte[])Читалка.GetValue(9))[0]==1;
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(10))[0]==1;
							ОтражатьВНалоговомУчете = ((byte[])Читалка.GetValue(11))[0]==1;
							СуммаВключаетНДС = ((byte[])Читалка.GetValue(16))[0]==1;
							СуммаДокумента = Читалка.GetDecimal(17);
							УчитыватьНДС = ((byte[])Читалка.GetValue(19))[0]==1;
							ВидПоступления = V82.Перечисления/*Ссылка*/.ВидыПоступленияТоваров.ПустаяСсылка.Получить((byte[])Читалка.GetValue(22));
							НДСВключенВСтоимость = ((byte[])Читалка.GetValue(23))[0]==1;
							НазначениеАванса = Читалка.GetString(24);
							КоличествоДокументов = Читалка.GetString(28);
							КоличествоЛистов = Читалка.GetString(29);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.АвансовыйОтчет  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.АвансовыйОтчет();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.Комментарий = Комментарий;
			Объект.КурсДокумента = КурсДокумента;
			Объект.КратностьДокумента = КратностьДокумента;
			Объект.Организация = Организация;
			Объект.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете;
			Объект.Подразделение = Подразделение;
			Объект.СкладОрдер = СкладОрдер;
			Объект.СуммаВключаетНДС = СуммаВключаетНДС;
			Объект.СуммаДокумента = СуммаДокумента;
			Объект.ТипЦен = ТипЦен;
			Объект.УчитыватьНДС = УчитыватьНДС;
			Объект.ФизЛицо = ФизЛицо;
			Объект.Ответственный = Ответственный;
			Объект.ВидПоступления = ВидПоступления;
			Объект.НДСВключенВСтоимость = НДСВключенВСтоимость;
			Объект.НазначениеАванса = НазначениеАванса;
			Объект.Проект = Проект;
			Объект.КоличествоДокументов = КоличествоДокументов;
			Объект.КоличествоЛистов = КоличествоЛистов;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.АвансовыйОтчет ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.АвансовыйОтчет)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.АвансовыйОтчет(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}