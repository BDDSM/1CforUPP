
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Общ)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class АккредитивПереданный:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("66837f93-ea01-42ec-976a-a63ce74b4d3c");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191754.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		///<summary>
		///Отзывный (непокрытый), Отзывный (покрытый), Безотзывный (непокрытый), Безотзывный (покрытый)
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВидыАккредитивов ВидАккредитива {get;set;}//Вид аккредитива
		///<summary>
		///(Общ)
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВидыОперацийСписаниеБезналичныхДенежныхСредств ВидОперации {get;set;}//Вид операции
		///<summary>
		///(Общ) электронно, почтой, телеграфом
		///</summary>
		public string/*(15)*/ ВидПлатежа {get;set;}//Вид платежа
		///<summary>
		///(Упр)
		///</summary>
		public DateTime ДатаОплаты {get;set;}//Дата оплаты
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагента {get;set;}//Договор контрагента
		///<summary>
		///(Общ)
		///</summary>
		public object ДокументОснование {get;set;}//Документ основание
		///<summary>
		///Перечень документов, по которым производится платеж
		///</summary>
		public string/*(0)*/ ДокументыКПредъявлению {get;set;}//Документы к предъявлению
		///<summary>
		///Дополнительные условия по договору
		///</summary>
		public string/*(0)*/ ДополнительныеУсловия {get;set;}//Дополнительные условия
		///<summary>
		///(Регл)
		///</summary>
		public string/*(12)*/ ИННПлательщика {get;set;}//ИНН плательщика
		///<summary>
		///(Регл)
		///</summary>
		public string/*(12)*/ ИННПолучателя {get;set;}//ИНН получателя
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты Контрагент {get;set;}//Получатель
		///<summary>
		///(Регл)
		///</summary>
		public string/*(9)*/ КПППлательщика {get;set;}//КПП плательщика
		///<summary>
		///(Регл)
		///</summary>
		public string/*(9)*/ КПППолучателя {get;set;}//КПП получателя
		///<summary>
		///(Общ)
		///</summary>
		public string/*(0)*/ НазначениеПлатежа {get;set;}//Назначение платежа
		///<summary>
		///(Общ)
		///</summary>
		public bool Оплачено {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтраженоВОперУчете {get;set;}//Отражено в опер. учете
		///<summary>
		///Срок действия аккредитива
		///</summary>
		public DateTime СрокДействия {get;set;}//Срок действия
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.СтатьиДвиженияДенежныхСредств СтатьяДвиженияДенежныхСредств {get;set;}//Статья движения денежных средств
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоДт1 {get;set;}//Субконто Дт1
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоДт2 {get;set;}//Субконто Дт1
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоДт3 {get;set;}//Субконто Дт1
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(15.2)*/ СуммаДокумента {get;set;}//Сумма документа
		///<summary>
		///Счет депонирования в случае покрытого аккредитива
		///</summary>
		public string/*(20)*/ СчетДепонента {get;set;}//Счет депонента
		///<summary>
		///(Общ) Банковский счет контрагента
		///</summary>
		public V82.СправочникиСсылка.БанковскиеСчета СчетКонтрагента {get;set;}//Счет контрагента
		///<summary>
		///(Общ) Банковский счет организации
		///</summary>
		public V82.СправочникиСсылка.БанковскиеСчета СчетОрганизации {get;set;}//Счет организации
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасчетовСКонтрагентом {get;set;}//Счет учета расчетов с контрагентом
		///<summary>
		///(Общ)
		///</summary>
		public string/*(0)*/ ТекстПлательщика {get;set;}//Текст плательщика
		///<summary>
		///(Общ)
		///</summary>
		public string/*(0)*/ ТекстПолучателя {get;set;}//Текст получателя
		///<summary>
		///(Упр)
		///</summary>
		public V82.Перечисления/*Ссылка*/.УсловияОплатыРасчетныхДокументов УсловиеОплаты {get;set;}//Условие оплаты
		///<summary>
		///(общ)
		///</summary>
		public bool ЧастичнаяОплата {get;set;}//По документу происходит оплата частями
		public string/*(200)*/ Содержание_УСН {get;set;}//Содержание УСН
		public decimal/*(15.2)*/ Графа4_УСН {get;set;}//Графа4 УСН
		public decimal/*(15.2)*/ Графа5_УСН {get;set;}//Графа5 УСН
		public decimal/*(15.2)*/ Графа6_УСН {get;set;}//Графа5
		public decimal/*(15.2)*/ Графа7_УСН {get;set;}//Графа5
		public bool ДоходыЕНВД_УСН {get;set;}//ДоходыЕНВД
		public bool РасходыЕНВД_УСН {get;set;}//Расходы ЕНВД УСН
		public decimal/*(15.2)*/ НДС_УСН {get;set;}//НДС УСН
		public bool РучнаяНастройка_УСН {get;set;}//Ручная настройка УСН
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		
		public АккредитивПереданный()
		{
		}
		
		public АккредитивПереданный(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld4528RRef [ВалютаДокумента]
					,_Fld4529RRef [ВидАккредитива]
					,_Fld4530RRef [ВидОперации]
					,_Fld4531 [ВидПлатежа]
					,_Fld4532 [ДатаОплаты]
					,_Fld4533RRef [ДоговорКонтрагента]
					,_Fld4534_TYPE [ДокументОснование_Тип],_Fld4534_RRRef [ДокументОснование],_Fld4534_RTRef [ДокументОснование_Вид]
					,_Fld4535 [ДокументыКПредъявлению]
					,_Fld4536 [ДополнительныеУсловия]
					,_Fld4537 [ИННПлательщика]
					,_Fld4538 [ИННПолучателя]
					,_Fld4539 [Комментарий]
					,_Fld4540RRef [Контрагент]
					,_Fld4541 [КПППлательщика]
					,_Fld4542 [КПППолучателя]
					,_Fld4543 [НазначениеПлатежа]
					,_Fld4544 [Оплачено]
					,_Fld4545RRef [Организация]
					,_Fld4546RRef [Ответственный]
					,_Fld4547 [ОтражатьВБухгалтерскомУчете]
					,_Fld4548 [ОтражатьВНалоговомУчете]
					,_Fld4549 [ОтраженоВОперУчете]
					,_Fld4550 [СрокДействия]
					,_Fld4551RRef [СтатьяДвиженияДенежныхСредств]
					,_Fld4552RRef [СубконтоДт1]
					,_Fld4553RRef [СубконтоДт2]
					,_Fld4554RRef [СубконтоДт3]
					,_Fld4555 [СуммаДокумента]
					,_Fld4556 [СчетДепонента]
					,_Fld4557RRef [СчетКонтрагента]
					,_Fld4558RRef [СчетОрганизации]
					,_Fld4559RRef [СчетУчетаРасчетовСКонтрагентом]
					,_Fld4560 [ТекстПлательщика]
					,_Fld4561 [ТекстПолучателя]
					,_Fld4562RRef [УсловиеОплаты]
					,_Fld4563 [ЧастичнаяОплата]
					,_Fld4564 [Содержание_УСН]
					,_Fld4565 [Графа4_УСН]
					,_Fld4566 [Графа5_УСН]
					,_Fld4567 [Графа6_УСН]
					,_Fld4568 [Графа7_УСН]
					,_Fld4569 [ДоходыЕНВД_УСН]
					,_Fld4570 [РасходыЕНВД_УСН]
					,_Fld4571 [НДС_УСН]
					,_Fld4572 [РучнаяНастройка_УСН]
					,_Fld4573RRef [Подразделение]
					From _Document299(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ВидАккредитива = V82.Перечисления/*Ссылка*/.ВидыАккредитивов.ПустаяСсылка.Получить((byte[])Читалка.GetValue(5));
							ВидОперации = V82.Перечисления/*Ссылка*/.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПустаяСсылка.Получить((byte[])Читалка.GetValue(6));
							ВидПлатежа = Читалка.GetString(7);
							ДатаОплаты = Читалка.GetDateTime(8);
							ДокументыКПредъявлению = Читалка.GetString(13);
							ДополнительныеУсловия = Читалка.GetString(14);
							ИННПлательщика = Читалка.GetString(15);
							ИННПолучателя = Читалка.GetString(16);
							Комментарий = Читалка.GetString(17);
							КПППлательщика = Читалка.GetString(19);
							КПППолучателя = Читалка.GetString(20);
							НазначениеПлатежа = Читалка.GetString(21);
							Оплачено = ((byte[])Читалка.GetValue(22))[0]==1;
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(25))[0]==1;
							ОтражатьВНалоговомУчете = ((byte[])Читалка.GetValue(26))[0]==1;
							ОтраженоВОперУчете = ((byte[])Читалка.GetValue(27))[0]==1;
							СрокДействия = Читалка.GetDateTime(28);
							СуммаДокумента = Читалка.GetDecimal(33);
							СчетДепонента = Читалка.GetString(34);
							ТекстПлательщика = Читалка.GetString(38);
							ТекстПолучателя = Читалка.GetString(39);
							УсловиеОплаты = V82.Перечисления/*Ссылка*/.УсловияОплатыРасчетныхДокументов.ПустаяСсылка.Получить((byte[])Читалка.GetValue(40));
							ЧастичнаяОплата = ((byte[])Читалка.GetValue(41))[0]==1;
							Содержание_УСН = Читалка.GetString(42);
							Графа4_УСН = Читалка.GetDecimal(43);
							Графа5_УСН = Читалка.GetDecimal(44);
							Графа6_УСН = Читалка.GetDecimal(45);
							Графа7_УСН = Читалка.GetDecimal(46);
							ДоходыЕНВД_УСН = ((byte[])Читалка.GetValue(47))[0]==1;
							РасходыЕНВД_УСН = ((byte[])Читалка.GetValue(48))[0]==1;
							НДС_УСН = Читалка.GetDecimal(49);
							РучнаяНастройка_УСН = ((byte[])Читалка.GetValue(50))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.АккредитивПереданный  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.АккредитивПереданный();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.ВидАккредитива = ВидАккредитива;
			Объект.ВидОперации = ВидОперации;
			Объект.ВидПлатежа = ВидПлатежа;
			Объект.ДатаОплаты = ДатаОплаты;
			Объект.ДоговорКонтрагента = ДоговорКонтрагента;
			Объект.ДокументОснование = ДокументОснование;
			Объект.ДокументыКПредъявлению = ДокументыКПредъявлению;
			Объект.ДополнительныеУсловия = ДополнительныеУсловия;
			Объект.ИННПлательщика = ИННПлательщика;
			Объект.ИННПолучателя = ИННПолучателя;
			Объект.Комментарий = Комментарий;
			Объект.Контрагент = Контрагент;
			Объект.КПППлательщика = КПППлательщика;
			Объект.КПППолучателя = КПППолучателя;
			Объект.НазначениеПлатежа = НазначениеПлатежа;
			Объект.Оплачено = Оплачено;
			Объект.Организация = Организация;
			Объект.Ответственный = Ответственный;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете;
			Объект.ОтраженоВОперУчете = ОтраженоВОперУчете;
			Объект.СрокДействия = СрокДействия;
			Объект.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			Объект.СубконтоДт1 = СубконтоДт1;
			Объект.СубконтоДт2 = СубконтоДт2;
			Объект.СубконтоДт3 = СубконтоДт3;
			Объект.СуммаДокумента = СуммаДокумента;
			Объект.СчетДепонента = СчетДепонента;
			Объект.СчетКонтрагента = СчетКонтрагента;
			Объект.СчетОрганизации = СчетОрганизации;
			Объект.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
			Объект.ТекстПлательщика = ТекстПлательщика;
			Объект.ТекстПолучателя = ТекстПолучателя;
			Объект.УсловиеОплаты = УсловиеОплаты;
			Объект.ЧастичнаяОплата = ЧастичнаяОплата;
			Объект.Содержание_УСН = Содержание_УСН;
			Объект.Графа4_УСН = Графа4_УСН;
			Объект.Графа5_УСН = Графа5_УСН;
			Объект.Графа6_УСН = Графа6_УСН;
			Объект.Графа7_УСН = Графа7_УСН;
			Объект.ДоходыЕНВД_УСН = ДоходыЕНВД_УСН;
			Объект.РасходыЕНВД_УСН = РасходыЕНВД_УСН;
			Объект.НДС_УСН = НДС_УСН;
			Объект.РучнаяНастройка_УСН = РучнаяНастройка_УСН;
			Объект.Подразделение = Подразделение;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.АккредитивПереданный ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.АккредитивПереданный)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.АккредитивПереданный(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}