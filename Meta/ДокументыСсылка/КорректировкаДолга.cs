
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Общ)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class КорректировкаДолга:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("61c1c697-ca88-46ed-b2e7-339ede2b11d3");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191758.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		public V82.Перечисления/*Ссылка*/.ВидыОперацийКорректировкаДолга ВидОперации {get;set;}//Вид операции
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты КонтрагентДебитор {get;set;}//Дебитор
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты КонтрагентКредитор {get;set;}//Кредитор
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВУправленческомУчете {get;set;}//Отражать в управленческом учете
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10.4)*/ КурсДокумента {get;set;}//Курс документа
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(10)*/ КратностьДокумента {get;set;}//Кратность документа
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагента {get;set;}//Договор контрагента
		public bool ИспользоватьВспомогательныйСчет {get;set;}//Использовать вспомогательный счет
		///<summary>
		///(Регл)
		///</summary>
		public object СчетДт {get;set;}//Вспомогательный счет дебиторской задолженности
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоДт1 {get;set;}//Субконто 1
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоДт2 {get;set;}//Субконто 2
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоДт3 {get;set;}//Субконто 3
		///<summary>
		///(Регл)
		///</summary>
		public object СчетКт {get;set;}//Вспомогательный счет кредиторской задолженности
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоКт1 {get;set;}//Субконто 1
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоКт2 {get;set;}//Субконто 1
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоКт3 {get;set;}//Субконто 3
		///<summary>
		///(Регл)
		///</summary>
		public object СчетДтНУ {get;set;}//Счет списания дебиторской задолженности (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоДтНУ1 {get;set;}//Субконто 1 (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоДтНУ2 {get;set;}//Субконто 2 (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоДтНУ3 {get;set;}//Субконто 3 (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СчетКтНУ {get;set;}//Счет списания кредиторской задолженности (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоКтНУ1 {get;set;}//Субконто 1 (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоКтНУ2 {get;set;}//Субконто 2 (НУ)
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоКтНУ3 {get;set;}//Субконто 3 (НУ)
		
		public КорректировкаДолга()
		{
		}
		
		public КорректировкаДолга(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld8820RRef [Организация]
					,_Fld8821RRef [ВидОперации]
					,_Fld8822RRef [Подразделение]
					,_Fld8823RRef [КонтрагентДебитор]
					,_Fld8824RRef [КонтрагентКредитор]
					,_Fld8825 [ОтражатьВУправленческомУчете]
					,_Fld8826 [ОтражатьВБухгалтерскомУчете]
					,_Fld8827 [Комментарий]
					,_Fld8828RRef [Ответственный]
					,_Fld8829 [ОтражатьВНалоговомУчете]
					,_Fld8830RRef [ВалютаДокумента]
					,_Fld8831 [КурсДокумента]
					,_Fld8832 [КратностьДокумента]
					,_Fld8833RRef [ДоговорКонтрагента]
					,_Fld8834 [ИспользоватьВспомогательныйСчет]
					,_Fld8835RRef [СчетДт]
					,_Fld8836RRef [СубконтоДт1]
					,_Fld8837RRef [СубконтоДт2]
					,_Fld8838RRef [СубконтоДт3]
					,_Fld8839RRef [СчетКт]
					,_Fld8840RRef [СубконтоКт1]
					,_Fld8841RRef [СубконтоКт2]
					,_Fld8842RRef [СубконтоКт3]
					,_Fld8843RRef [СчетДтНУ]
					,_Fld8844RRef [СубконтоДтНУ1]
					,_Fld8845RRef [СубконтоДтНУ2]
					,_Fld8846RRef [СубконтоДтНУ3]
					,_Fld8847RRef [СчетКтНУ]
					,_Fld8848RRef [СубконтоКтНУ1]
					,_Fld8849RRef [СубконтоКтНУ2]
					,_Fld8850RRef [СубконтоКтНУ3]
					From _Document419(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ВидОперации = V82.Перечисления/*Ссылка*/.ВидыОперацийКорректировкаДолга.ПустаяСсылка.Получить((byte[])Читалка.GetValue(5));
							ОтражатьВУправленческомУчете = ((byte[])Читалка.GetValue(9))[0]==1;
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(10))[0]==1;
							Комментарий = Читалка.GetString(11);
							ОтражатьВНалоговомУчете = ((byte[])Читалка.GetValue(13))[0]==1;
							КурсДокумента = Читалка.GetDecimal(15);
							КратностьДокумента = Читалка.GetDecimal(16);
							ИспользоватьВспомогательныйСчет = ((byte[])Читалка.GetValue(18))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.КорректировкаДолга  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.КорректировкаДолга();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.Организация = Организация;
			Объект.ВидОперации = ВидОперации;
			Объект.Подразделение = Подразделение;
			Объект.КонтрагентДебитор = КонтрагентДебитор;
			Объект.КонтрагентКредитор = КонтрагентКредитор;
			Объект.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.Комментарий = Комментарий;
			Объект.Ответственный = Ответственный;
			Объект.ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.КурсДокумента = КурсДокумента;
			Объект.КратностьДокумента = КратностьДокумента;
			Объект.ДоговорКонтрагента = ДоговорКонтрагента;
			Объект.ИспользоватьВспомогательныйСчет = ИспользоватьВспомогательныйСчет;
			Объект.СчетДт = СчетДт;
			Объект.СубконтоДт1 = СубконтоДт1;
			Объект.СубконтоДт2 = СубконтоДт2;
			Объект.СубконтоДт3 = СубконтоДт3;
			Объект.СчетКт = СчетКт;
			Объект.СубконтоКт1 = СубконтоКт1;
			Объект.СубконтоКт2 = СубконтоКт2;
			Объект.СубконтоКт3 = СубконтоКт3;
			Объект.СчетДтНУ = СчетДтНУ;
			Объект.СубконтоДтНУ1 = СубконтоДтНУ1;
			Объект.СубконтоДтНУ2 = СубконтоДтНУ2;
			Объект.СубконтоДтНУ3 = СубконтоДтНУ3;
			Объект.СчетКтНУ = СчетКтНУ;
			Объект.СубконтоКтНУ1 = СубконтоКтНУ1;
			Объект.СубконтоКтНУ2 = СубконтоКтНУ2;
			Объект.СубконтоКтНУ3 = СубконтоКтНУ3;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.КорректировкаДолга ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.КорректировкаДолга)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.КорректировкаДолга(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}