
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Упр)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ЗаказПоставщику:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("5b784b62-c008-48b8-9563-0c9961c308d1");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20120928012007.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		public V82.Перечисления/*Ссылка*/.ВидыОперацийЗаказПоставщику ВидОперации {get;set;}//Вид операции
		public DateTime ВремяНапоминания {get;set;}//Время напоминания
		public DateTime ДатаОплаты {get;set;}//Дата оплаты
		public DateTime ДатаПоступления {get;set;}//Дата поступления
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагента {get;set;}//Договор контрагента
		public bool ИспользоватьПлановуюСебестоимость {get;set;}//Использовать плановую себестоимость
		public decimal/*(15.2)*/ ИтогПлановаяСебестоимость {get;set;}//Итоговая плановая себестоимость в валюте управленческого учета
		///<summary>
		///Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		public V82.СправочникиСсылка.Контрагенты Контрагент {get;set;}
		public decimal/*(10)*/ КратностьВзаиморасчетов {get;set;}//Кратность взаиморасчетов
		///<summary>
		///Курс валюты взаиморасчетов по договору
		///</summary>
		public decimal/*(10.4)*/ КурсВзаиморасчетов {get;set;}//Курс взаиморасчетов
		public bool НапомнитьОСобытии {get;set;}//Напомнить о событии
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		public V82.СправочникиСсылка.Склады Склад {get;set;}
		public object СтруктурнаяЕдиница {get;set;}//Банк/касса
		public bool СуммаВключаетНДС {get;set;}//Сумма включает НДС
		///<summary>
		///Сумма в валюте документа, налоги включены согласно флагам
		///</summary>
		public decimal/*(15.2)*/ СуммаДокумента {get;set;}//Сумма документа
		public V82.СправочникиСсылка.ТипыЦенНоменклатурыКонтрагентов ТипЦен {get;set;}//Тип цен
		public bool УчитыватьНДС {get;set;}//Учитывать НДС
		public V82.СправочникиСсылка.КонтактныеЛицаКонтрагентов КонтактноеЛицоКонтрагента {get;set;}//Контактное лицо контрагента
		public V82.СправочникиСсылка.УсловияПродаж УсловиеПродаж {get;set;}//Условие продаж
		public object ДокументОснование {get;set;}//Документ основание
		public string/*(30)*/ НомерПоДаннымПоставщика {get;set;}//Номер по данным поставщика
		public DateTime ДатаПоДаннымПоставщика {get;set;}//Дата по данным поставщика
		
		public ЗаказПоставщику()
		{
		}
		
		public ЗаказПоставщику(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld4449RRef [ВалютаДокумента]
					,_Fld4450RRef [ВидОперации]
					,_Fld4451 [ВремяНапоминания]
					,_Fld4452 [ДатаОплаты]
					,_Fld4453 [ДатаПоступления]
					,_Fld4454RRef [ДоговорКонтрагента]
					,_Fld4455 [ИспользоватьПлановуюСебестоимость]
					,_Fld4456 [ИтогПлановаяСебестоимость]
					,_Fld4457 [Комментарий]
					,_Fld4458RRef [Контрагент]
					,_Fld4459 [КратностьВзаиморасчетов]
					,_Fld4460 [КурсВзаиморасчетов]
					,_Fld4461 [НапомнитьОСобытии]
					,_Fld4462RRef [Организация]
					,_Fld4463RRef [Ответственный]
					,_Fld4464RRef [Подразделение]
					,_Fld4465RRef [Склад]
					,_Fld4466_TYPE [СтруктурнаяЕдиница_Тип],_Fld4466_RRRef [СтруктурнаяЕдиница],_Fld4466_RTRef [СтруктурнаяЕдиница_Вид]
					,_Fld4467 [СуммаВключаетНДС]
					,_Fld4468 [СуммаДокумента]
					,_Fld4469RRef [ТипЦен]
					,_Fld4471 [УчитыватьНДС]
					,_Fld4472RRef [КонтактноеЛицоКонтрагента]
					,_Fld4473RRef [УсловиеПродаж]
					,_Fld18960_TYPE [ДокументОснование_Тип],_Fld18960_RRRef [ДокументОснование],_Fld18960_RTRef [ДокументОснование_Вид]
					,_Fld26728 [НомерПоДаннымПоставщика]
					,_Fld26729 [ДатаПоДаннымПоставщика]
					From _Document258(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ВидОперации = V82.Перечисления/*Ссылка*/.ВидыОперацийЗаказПоставщику.ПустаяСсылка.Получить((byte[])Читалка.GetValue(5));
							ВремяНапоминания = Читалка.GetDateTime(6);
							ДатаОплаты = Читалка.GetDateTime(7);
							ДатаПоступления = Читалка.GetDateTime(8);
							ИспользоватьПлановуюСебестоимость = ((byte[])Читалка.GetValue(10))[0]==1;
							ИтогПлановаяСебестоимость = Читалка.GetDecimal(11);
							Комментарий = Читалка.GetString(12);
							КратностьВзаиморасчетов = Читалка.GetDecimal(14);
							КурсВзаиморасчетов = Читалка.GetDecimal(15);
							НапомнитьОСобытии = ((byte[])Читалка.GetValue(16))[0]==1;
							СуммаВключаетНДС = ((byte[])Читалка.GetValue(24))[0]==1;
							СуммаДокумента = Читалка.GetDecimal(25);
							УчитыватьНДС = ((byte[])Читалка.GetValue(27))[0]==1;
							НомерПоДаннымПоставщика = Читалка.GetString(33);
							ДатаПоДаннымПоставщика = Читалка.GetDateTime(34);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.ЗаказПоставщику  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.ЗаказПоставщику();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.ВидОперации = ВидОперации;
			Объект.ВремяНапоминания = ВремяНапоминания;
			Объект.ДатаОплаты = ДатаОплаты;
			Объект.ДатаПоступления = ДатаПоступления;
			Объект.ДоговорКонтрагента = ДоговорКонтрагента;
			Объект.ИспользоватьПлановуюСебестоимость = ИспользоватьПлановуюСебестоимость;
			Объект.ИтогПлановаяСебестоимость = ИтогПлановаяСебестоимость;
			Объект.Комментарий = Комментарий;
			Объект.Контрагент = Контрагент;
			Объект.КратностьВзаиморасчетов = КратностьВзаиморасчетов;
			Объект.КурсВзаиморасчетов = КурсВзаиморасчетов;
			Объект.НапомнитьОСобытии = НапомнитьОСобытии;
			Объект.Организация = Организация;
			Объект.Ответственный = Ответственный;
			Объект.Подразделение = Подразделение;
			Объект.Склад = Склад;
			Объект.СтруктурнаяЕдиница = СтруктурнаяЕдиница;
			Объект.СуммаВключаетНДС = СуммаВключаетНДС;
			Объект.СуммаДокумента = СуммаДокумента;
			Объект.ТипЦен = ТипЦен;
			Объект.УчитыватьНДС = УчитыватьНДС;
			Объект.КонтактноеЛицоКонтрагента = КонтактноеЛицоКонтрагента;
			Объект.УсловиеПродаж = УсловиеПродаж;
			Объект.ДокументОснование = ДокументОснование;
			Объект.НомерПоДаннымПоставщика = НомерПоДаннымПоставщика;
			Объект.ДатаПоДаннымПоставщика = ДатаПоДаннымПоставщика;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.ЗаказПоставщику ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.ЗаказПоставщику)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.ЗаказПоставщику(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}