
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Регл)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ЗарплатаКВыплатеОрганизаций:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("505c1f38-e3cf-4500-83b2-16ccd418f35d");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191447.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		public DateTime ПериодРегистрации {get;set;}//Период регистрации
		public V82.Перечисления/*Ссылка*/.СпособыВыплатыЗарплаты СпособВыплаты {get;set;}//Способ выплаты
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///Количество дней, на которые задержана выплата зарплаты
		///</summary>
		public decimal/*(5)*/ ДнейНеВыплаты {get;set;}//Дней не выплаты
		public string/*(100)*/ КраткийСоставДокумента {get;set;}//Краткий состав документа
		public V82.Перечисления/*Ссылка*/.ХарактерВыплатыЗарплаты ХарактерВыплаты {get;set;}//Характер выплаты
		public V82.СправочникиСсылка.ПодразделенияОрганизаций ПодразделениеОрганизации {get;set;}//Подразделение организации
		public object ДокументОснование {get;set;}//Документ основание
		public DateTime ДатаНачала {get;set;}//Дата начала
		public DateTime ДатаОкончания {get;set;}//Дата окончания
		public V82.СправочникиСсылка.Контрагенты Банк {get;set;}
		public decimal/*(3)*/ ПроцентВыплаты {get;set;}//Процент выплаты
		public bool ПредварительныйУчетУдержаний {get;set;}//Предварительный учет удержаний
		public V82.Перечисления/*Ссылка*/.СпособыОкругленияЗарплатыКВыплате Округление {get;set;}
		public decimal/*(15.2)*/ СуммаДокумента {get;set;}//Сумма документа
		public bool ДанныеПрошлойВерсии {get;set;}//Перенесен из 7.7
		
		public ЗарплатаКВыплатеОрганизаций()
		{
		}
		
		public ЗарплатаКВыплатеОрганизаций(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld7442RRef [Организация]
					,_Fld7443 [ПериодРегистрации]
					,_Fld7444RRef [СпособВыплаты]
					,_Fld7445RRef [Ответственный]
					,_Fld7446 [Комментарий]
					,_Fld7447 [ДнейНеВыплаты]
					,_Fld7448 [КраткийСоставДокумента]
					,_Fld7449RRef [ХарактерВыплаты]
					,_Fld7450RRef [ПодразделениеОрганизации]
					,_Fld7451_TYPE [ДокументОснование_Тип],_Fld7451_RRRef [ДокументОснование],_Fld7451_RTRef [ДокументОснование_Вид]
					,_Fld7452 [ДатаНачала]
					,_Fld7453 [ДатаОкончания]
					,_Fld7454RRef [Банк]
					,_Fld7455 [ПроцентВыплаты]
					,_Fld7456 [ПредварительныйУчетУдержаний]
					,_Fld7457RRef [Округление]
					,_Fld7458 [СуммаДокумента]
					,_Fld7459 [ДанныеПрошлойВерсии]
					From _Document377(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ПериодРегистрации = Читалка.GetDateTime(5);
							СпособВыплаты = V82.Перечисления/*Ссылка*/.СпособыВыплатыЗарплаты.ПустаяСсылка.Получить((byte[])Читалка.GetValue(6));
							Комментарий = Читалка.GetString(8);
							ДнейНеВыплаты = Читалка.GetDecimal(9);
							КраткийСоставДокумента = Читалка.GetString(10);
							ХарактерВыплаты = V82.Перечисления/*Ссылка*/.ХарактерВыплатыЗарплаты.ПустаяСсылка.Получить((byte[])Читалка.GetValue(11));
							ДатаНачала = Читалка.GetDateTime(16);
							ДатаОкончания = Читалка.GetDateTime(17);
							ПроцентВыплаты = Читалка.GetDecimal(19);
							ПредварительныйУчетУдержаний = ((byte[])Читалка.GetValue(20))[0]==1;
							Округление = V82.Перечисления/*Ссылка*/.СпособыОкругленияЗарплатыКВыплате.ПустаяСсылка.Получить((byte[])Читалка.GetValue(21));
							СуммаДокумента = Читалка.GetDecimal(22);
							ДанныеПрошлойВерсии = ((byte[])Читалка.GetValue(23))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.ЗарплатаКВыплатеОрганизаций  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.ЗарплатаКВыплатеОрганизаций();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.Организация = Организация;
			Объект.ПериодРегистрации = ПериодРегистрации;
			Объект.СпособВыплаты = СпособВыплаты;
			Объект.Ответственный = Ответственный;
			Объект.Комментарий = Комментарий;
			Объект.ДнейНеВыплаты = ДнейНеВыплаты;
			Объект.КраткийСоставДокумента = КраткийСоставДокумента;
			Объект.ХарактерВыплаты = ХарактерВыплаты;
			Объект.ПодразделениеОрганизации = ПодразделениеОрганизации;
			Объект.ДокументОснование = ДокументОснование;
			Объект.ДатаНачала = ДатаНачала;
			Объект.ДатаОкончания = ДатаОкончания;
			Объект.Банк = Банк;
			Объект.ПроцентВыплаты = ПроцентВыплаты;
			Объект.ПредварительныйУчетУдержаний = ПредварительныйУчетУдержаний;
			Объект.Округление = Округление;
			Объект.СуммаДокумента = СуммаДокумента;
			Объект.ДанныеПрошлойВерсии = ДанныеПрошлойВерсии;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.ЗарплатаКВыплатеОрганизаций ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.ЗарплатаКВыплатеОрганизаций)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.ЗарплатаКВыплатеОрганизаций(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}