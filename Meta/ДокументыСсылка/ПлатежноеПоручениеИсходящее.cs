
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.ДокументыСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.ДокументыСсылка
{
	///<summary>
	///(Общ)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ПлатежноеПоручениеИсходящее:ДокументСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("d4f322a1-5457-421f-9c38-98fe477d6763");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191335.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public DateTime Дата {get;set;}
		public DateTime ПрефиксНомера {get;set;}
		public string/*11*/ Номер {get;set;}
		public bool Проведен {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public object ДокументОснование {get;set;}//Документ основание
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///(Общ) Банковский счет организации
		///</summary>
		public V82.СправочникиСсылка.БанковскиеСчета СчетОрганизации {get;set;}//Счет организации
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Контрагенты Контрагент {get;set;}//Получатель
		///<summary>
		///(Упр)
		///</summary>
		public DateTime ДатаОплаты {get;set;}//Дата оплаты
		///<summary>
		///(Общ) Банковский счет контрагента
		///</summary>
		public V82.СправочникиСсылка.БанковскиеСчета СчетКонтрагента {get;set;}//Счет контрагента
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорКонтрагента {get;set;}//Договор контрагента
		///<summary>
		///(Общ) электронно, почтой, телеграфом
		///</summary>
		public string/*(15)*/ ВидПлатежа {get;set;}//Вид платежа
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(1)*/ ОчередностьПлатежа {get;set;}//Очередность платежа
		///<summary>
		///(Общ)
		///</summary>
		public string/*(0)*/ НазначениеПлатежа {get;set;}//Назначение платежа
		///<summary>
		///(Общ)
		///</summary>
		public string/*(0)*/ ТекстПлательщика {get;set;}//Текст плательщика
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Валюты ВалютаДокумента {get;set;}//Валюта документа
		///<summary>
		///(Общ)
		///</summary>
		public string/*(0)*/ ТекстПолучателя {get;set;}//Текст получателя
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool Оплачено {get;set;}
		///<summary>
		///(Регл)
		///</summary>
		public string/*(12)*/ ИННПлательщика {get;set;}//ИНН плательщика
		///<summary>
		///(Регл)
		///</summary>
		public string/*(9)*/ КПППлательщика {get;set;}//КПП плательщика
		///<summary>
		///(Регл)
		///</summary>
		public string/*(12)*/ ИННПолучателя {get;set;}//ИНН получателя
		///<summary>
		///(Регл)
		///</summary>
		public string/*(9)*/ КПППолучателя {get;set;}//КПП получателя
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		///<summary>
		///(Регл) Код бюджетной классификации доходов РФ
		///</summary>
		public string/*(20)*/ КодБК {get;set;}//Код БК
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтраженоВОперУчете {get;set;}//Отражено в опер. учете
		///<summary>
		///(Регл) Код ОКАТО сборщика платежей
		///</summary>
		public string/*(11)*/ КодОКАТО {get;set;}//Код ОКАТО
		///<summary>
		///(Регл) Дата документа - основания перечисления  налога, сбора или иного платежа
		///</summary>
		public DateTime ПоказательДаты {get;set;}//Показатель даты
		///<summary>
		///(Регл) Номер документа - основания перечисления  налога, сбора или иного платежа
		///</summary>
		public string/*(18)*/ ПоказательНомера {get;set;}//Показатель номера
		///<summary>
		///(Регл) Условное обозначение основания налогового платежа
		///</summary>
		public string/*(2)*/ ПоказательОснования {get;set;}//Показатель основания
		///<summary>
		///(Регл) Условное обозначение периода, за который перечисляется налог
		///</summary>
		public string/*(10)*/ ПоказательПериода {get;set;}//Показатель периода
		///<summary>
		///(Регл) Условное обозначение типа налогового платежа
		///</summary>
		public string/*(2)*/ ПоказательТипа {get;set;}//Показатель типа платежа
		///<summary>
		///(Регл) Статус составителя платежного документа на перечисление налогов, сборов и иных обязательных платежей
		///</summary>
		public string/*(2)*/ СтатусСоставителя {get;set;}//Статус составителя платежного документа
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(15.2)*/ СуммаДокумента {get;set;}//Сумма документа
		///<summary>
		///(Общ)
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВидыОперацийППИсходящее ВидОперации {get;set;}//Вид операции
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.СтатьиДвиженияДенежныхСредств СтатьяДвиженияДенежныхСредств {get;set;}//Статья движения денежных средств
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасчетовСКонтрагентом {get;set;}//Счет учета расчетов с контрагентом
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоДт1 {get;set;}//Субконто Дт1
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоДт2 {get;set;}//Субконто Дт1
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоДт3 {get;set;}//Субконто Дт1
		///<summary>
		///(Общ)
		///</summary>
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ФизическиеЛица ФизЛицо {get;set;}//Физическое лицо
		///<summary>
		///(общ)
		///</summary>
		public V82.ДокументыСсылка.ДоговорЗаймаСРаботником ДоговорЗайма {get;set;}//Договор займа
		///<summary>
		///(Общ) Валюта, в которой работник отчитывается за полученный займ
		///</summary>
		public V82.СправочникиСсылка.Валюты ВалютаВзаиморасчетовРаботника {get;set;}//Валюта взаиморасчетов работника
		///<summary>
		///(общ)
		///</summary>
		public bool ЧастичнаяОплата {get;set;}//По документу происходит оплата частями
		public string/*(200)*/ Содержание_УСН {get;set;}//Содержание УСН
		public decimal/*(15.2)*/ Графа4_УСН {get;set;}//Графа4 УСН
		public decimal/*(15.2)*/ Графа5_УСН {get;set;}//Графа5 УСН
		public decimal/*(15.2)*/ Графа6_УСН {get;set;}//Графа5
		public decimal/*(15.2)*/ Графа7_УСН {get;set;}//Графа5
		public bool ДоходыЕНВД_УСН {get;set;}//ДоходыЕНВД
		public bool РасходыЕНВД_УСН {get;set;}//Расходы ЕНВД УСН
		public decimal/*(15.2)*/ НДС_УСН {get;set;}//НДС УСН
		public bool РучнаяНастройка_УСН {get;set;}//Ручная настройка УСН
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		///<summary>
		///(Регл)
		///</summary>
		public object СчетУчетаРасчетовСКонтрагентомНУ {get;set;}//Счет учета расчетов с контрагентом НУ
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоНУДт1 {get;set;}//Субконто НУ Дт1
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоНУДт2 {get;set;}//Субконто НУ Дт2
		///<summary>
		///(Регл)
		///</summary>
		public object СубконтоНУДт3 {get;set;}//Субконто НУ Дт3
		///<summary>
		///(Упр) срок погашения аванса подотчетником
		///</summary>
		public DateTime ДатаПогашенияАванса {get;set;}//Дата погашения аванса
		///<summary>
		///(Упр)
		///</summary>
		public V82.ДокументыСсылка.АвансовыйОтчет РасчетныйДокументРаботника {get;set;}//Расчетный документ работника
		public bool УдалитьПеречислениеВБюджет {get;set;}//Удалить перечисление в бюджет
		public V82.Перечисления/*Ссылка*/.УдалитьВидыПеречисленийВБюджет УдалитьВидПеречисленияВБюджет {get;set;}//Удалить вид перечисления в бюджет
		public bool ПеречислениеВБюджет {get;set;}//Перечисление в бюджет
		public V82.Перечисления/*Ссылка*/.ВидыПеречисленийВБюджет ВидПеречисленияВБюджет {get;set;}//Вид перечисления в бюджет
		
		public ПлатежноеПоручениеИсходящее()
		{
		}
		
		public ПлатежноеПоручениеИсходящее(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_Number [Номер]
					,_Fld13114_TYPE [ДокументОснование_Тип],_Fld13114_RRRef [ДокументОснование],_Fld13114_RTRef [ДокументОснование_Вид]
					,_Fld13115RRef [Организация]
					,_Fld13116RRef [СчетОрганизации]
					,_Fld13117RRef [Контрагент]
					,_Fld13118 [ДатаОплаты]
					,_Fld13119RRef [СчетКонтрагента]
					,_Fld13120RRef [ДоговорКонтрагента]
					,_Fld13121 [ВидПлатежа]
					,_Fld13122 [ОчередностьПлатежа]
					,_Fld13123 [НазначениеПлатежа]
					,_Fld13124 [ТекстПлательщика]
					,_Fld13125RRef [ВалютаДокумента]
					,_Fld13126 [ТекстПолучателя]
					,_Fld13127 [Комментарий]
					,_Fld13128 [Оплачено]
					,_Fld13129 [ИННПлательщика]
					,_Fld13130 [КПППлательщика]
					,_Fld13131 [ИННПолучателя]
					,_Fld13132 [КПППолучателя]
					,_Fld13133RRef [Ответственный]
					,_Fld13134 [ОтражатьВБухгалтерскомУчете]
					,_Fld13135 [КодБК]
					,_Fld13136 [ОтраженоВОперУчете]
					,_Fld13137 [КодОКАТО]
					,_Fld13138 [ПоказательДаты]
					,_Fld13139 [ПоказательНомера]
					,_Fld13140 [ПоказательОснования]
					,_Fld13141 [ПоказательПериода]
					,_Fld13142 [ПоказательТипа]
					,_Fld13143 [СтатусСоставителя]
					,_Fld13144 [СуммаДокумента]
					,_Fld13145RRef [ВидОперации]
					,_Fld13146RRef [СтатьяДвиженияДенежныхСредств]
					,_Fld13147RRef [СчетУчетаРасчетовСКонтрагентом]
					,_Fld13148RRef [СубконтоДт1]
					,_Fld13149RRef [СубконтоДт2]
					,_Fld13150RRef [СубконтоДт3]
					,_Fld13151 [ОтражатьВНалоговомУчете]
					,_Fld13152RRef [ФизЛицо]
					,_Fld13153RRef [ДоговорЗайма]
					,_Fld13154RRef [ВалютаВзаиморасчетовРаботника]
					,_Fld13155 [ЧастичнаяОплата]
					,_Fld13156 [Содержание_УСН]
					,_Fld13157 [Графа4_УСН]
					,_Fld13158 [Графа5_УСН]
					,_Fld13159 [Графа6_УСН]
					,_Fld13160 [Графа7_УСН]
					,_Fld13161 [ДоходыЕНВД_УСН]
					,_Fld13162 [РасходыЕНВД_УСН]
					,_Fld13163 [НДС_УСН]
					,_Fld13164 [РучнаяНастройка_УСН]
					,_Fld13165RRef [Подразделение]
					,_Fld13166RRef [СчетУчетаРасчетовСКонтрагентомНУ]
					,_Fld13167RRef [СубконтоНУДт1]
					,_Fld13168RRef [СубконтоНУДт2]
					,_Fld13169RRef [СубконтоНУДт3]
					,_Fld13170 [ДатаПогашенияАванса]
					,_Fld13171RRef [РасчетныйДокументРаботника]
					,_Fld13172 [УдалитьПеречислениеВБюджет]
					,_Fld13173RRef [УдалитьВидПеречисленияВБюджет]
					,_Fld13174 [ПеречислениеВБюджет]
					,_Fld13175RRef [ВидПеречисленияВБюджет]
					From _Document515(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Номер = Читалка.GetString(3);
							ДатаОплаты = Читалка.GetDateTime(10);
							ВидПлатежа = Читалка.GetString(13);
							ОчередностьПлатежа = Читалка.GetDecimal(14);
							НазначениеПлатежа = Читалка.GetString(15);
							ТекстПлательщика = Читалка.GetString(16);
							ТекстПолучателя = Читалка.GetString(18);
							Комментарий = Читалка.GetString(19);
							Оплачено = ((byte[])Читалка.GetValue(20))[0]==1;
							ИННПлательщика = Читалка.GetString(21);
							КПППлательщика = Читалка.GetString(22);
							ИННПолучателя = Читалка.GetString(23);
							КПППолучателя = Читалка.GetString(24);
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(26))[0]==1;
							КодБК = Читалка.GetString(27);
							ОтраженоВОперУчете = ((byte[])Читалка.GetValue(28))[0]==1;
							КодОКАТО = Читалка.GetString(29);
							ПоказательДаты = Читалка.GetDateTime(30);
							ПоказательНомера = Читалка.GetString(31);
							ПоказательОснования = Читалка.GetString(32);
							ПоказательПериода = Читалка.GetString(33);
							ПоказательТипа = Читалка.GetString(34);
							СтатусСоставителя = Читалка.GetString(35);
							СуммаДокумента = Читалка.GetDecimal(36);
							ВидОперации = V82.Перечисления/*Ссылка*/.ВидыОперацийППИсходящее.ПустаяСсылка.Получить((byte[])Читалка.GetValue(37));
							ОтражатьВНалоговомУчете = ((byte[])Читалка.GetValue(43))[0]==1;
							ДоговорЗайма = new V82.ДокументыСсылка.ДоговорЗаймаСРаботником((byte[])Читалка.GetValue(45));
							ЧастичнаяОплата = ((byte[])Читалка.GetValue(47))[0]==1;
							Содержание_УСН = Читалка.GetString(48);
							Графа4_УСН = Читалка.GetDecimal(49);
							Графа5_УСН = Читалка.GetDecimal(50);
							Графа6_УСН = Читалка.GetDecimal(51);
							Графа7_УСН = Читалка.GetDecimal(52);
							ДоходыЕНВД_УСН = ((byte[])Читалка.GetValue(53))[0]==1;
							РасходыЕНВД_УСН = ((byte[])Читалка.GetValue(54))[0]==1;
							НДС_УСН = Читалка.GetDecimal(55);
							РучнаяНастройка_УСН = ((byte[])Читалка.GetValue(56))[0]==1;
							ДатаПогашенияАванса = Читалка.GetDateTime(62);
							РасчетныйДокументРаботника = new V82.ДокументыСсылка.АвансовыйОтчет((byte[])Читалка.GetValue(63));
							УдалитьПеречислениеВБюджет = ((byte[])Читалка.GetValue(64))[0]==1;
							УдалитьВидПеречисленияВБюджет = V82.Перечисления/*Ссылка*/.УдалитьВидыПеречисленийВБюджет.ПустаяСсылка.Получить((byte[])Читалка.GetValue(65));
							ПеречислениеВБюджет = ((byte[])Читалка.GetValue(66))[0]==1;
							ВидПеречисленияВБюджет = V82.Перечисления/*Ссылка*/.ВидыПеречисленийВБюджет.ПустаяСсылка.Получить((byte[])Читалка.GetValue(67));
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.ДокументыОбъект.ПлатежноеПоручениеИсходящее  ПолучитьОбъект()
		{
			var Объект = new V82.ДокументыОбъект.ПлатежноеПоручениеИсходящее();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Номер = Номер;
			Объект.ДокументОснование = ДокументОснование;
			Объект.Организация = Организация;
			Объект.СчетОрганизации = СчетОрганизации;
			Объект.Контрагент = Контрагент;
			Объект.ДатаОплаты = ДатаОплаты;
			Объект.СчетКонтрагента = СчетКонтрагента;
			Объект.ДоговорКонтрагента = ДоговорКонтрагента;
			Объект.ВидПлатежа = ВидПлатежа;
			Объект.ОчередностьПлатежа = ОчередностьПлатежа;
			Объект.НазначениеПлатежа = НазначениеПлатежа;
			Объект.ТекстПлательщика = ТекстПлательщика;
			Объект.ВалютаДокумента = ВалютаДокумента;
			Объект.ТекстПолучателя = ТекстПолучателя;
			Объект.Комментарий = Комментарий;
			Объект.Оплачено = Оплачено;
			Объект.ИННПлательщика = ИННПлательщика;
			Объект.КПППлательщика = КПППлательщика;
			Объект.ИННПолучателя = ИННПолучателя;
			Объект.КПППолучателя = КПППолучателя;
			Объект.Ответственный = Ответственный;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.КодБК = КодБК;
			Объект.ОтраженоВОперУчете = ОтраженоВОперУчете;
			Объект.КодОКАТО = КодОКАТО;
			Объект.ПоказательДаты = ПоказательДаты;
			Объект.ПоказательНомера = ПоказательНомера;
			Объект.ПоказательОснования = ПоказательОснования;
			Объект.ПоказательПериода = ПоказательПериода;
			Объект.ПоказательТипа = ПоказательТипа;
			Объект.СтатусСоставителя = СтатусСоставителя;
			Объект.СуммаДокумента = СуммаДокумента;
			Объект.ВидОперации = ВидОперации;
			Объект.СтатьяДвиженияДенежныхСредств = СтатьяДвиженияДенежныхСредств;
			Объект.СчетУчетаРасчетовСКонтрагентом = СчетУчетаРасчетовСКонтрагентом;
			Объект.СубконтоДт1 = СубконтоДт1;
			Объект.СубконтоДт2 = СубконтоДт2;
			Объект.СубконтоДт3 = СубконтоДт3;
			Объект.ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете;
			Объект.ФизЛицо = ФизЛицо;
			Объект.ДоговорЗайма = ДоговорЗайма;
			Объект.ВалютаВзаиморасчетовРаботника = ВалютаВзаиморасчетовРаботника;
			Объект.ЧастичнаяОплата = ЧастичнаяОплата;
			Объект.Содержание_УСН = Содержание_УСН;
			Объект.Графа4_УСН = Графа4_УСН;
			Объект.Графа5_УСН = Графа5_УСН;
			Объект.Графа6_УСН = Графа6_УСН;
			Объект.Графа7_УСН = Графа7_УСН;
			Объект.ДоходыЕНВД_УСН = ДоходыЕНВД_УСН;
			Объект.РасходыЕНВД_УСН = РасходыЕНВД_УСН;
			Объект.НДС_УСН = НДС_УСН;
			Объект.РучнаяНастройка_УСН = РучнаяНастройка_УСН;
			Объект.Подразделение = Подразделение;
			Объект.СчетУчетаРасчетовСКонтрагентомНУ = СчетУчетаРасчетовСКонтрагентомНУ;
			Объект.СубконтоНУДт1 = СубконтоНУДт1;
			Объект.СубконтоНУДт2 = СубконтоНУДт2;
			Объект.СубконтоНУДт3 = СубконтоНУДт3;
			Объект.ДатаПогашенияАванса = ДатаПогашенияАванса;
			Объект.РасчетныйДокументРаботника = РасчетныйДокументРаботника;
			Объект.УдалитьПеречислениеВБюджет = УдалитьПеречислениеВБюджет;
			Объект.УдалитьВидПеречисленияВБюджет = УдалитьВидПеречисленияВБюджет;
			Объект.ПеречислениеВБюджет = ПеречислениеВБюджет;
			Объект.ВидПеречисленияВБюджет = ВидПеречисленияВБюджет;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.ДокументыСсылка.ПлатежноеПоручениеИсходящее ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.ДокументыСсылка.ПлатежноеПоручениеИсходящее)Кэш[УИ];
			}
			var Ссылка = new V82.ДокументыСсылка.ПлатежноеПоручениеИсходящее(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}