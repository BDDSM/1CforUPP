using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class ГлобальныйМодуль
	{
		////////////////////////////////////////////////////////////////////////////////
		// ПРОВЕРКА ДИНАМИЧЕСКОГО ОБНОВЛЕНИЯ
		//
		// Проверяет в конфигурации ИБ наличие изменений появившихся после старта сеанса
		//

		public void ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ(/**/)
		{
			/*// Если в конфигурации после старта текущего сеанса что-то изменилось
*/
			if(true/*КонфигурацияБазыДанныхИзмененаДинамически()*/)
			{
				/*// Завершим проверку обновления
*/
				/*ЗавершитьПроверкуДинамическогоОбновленияИБ();*/
				/*// Спросим пользователя о его желании перезапустить сеанс
*/
				/*ТекстВопроса = "В конфигурацию ИБ внесены изменения." + Символы.ПС +
						"Для работы с ними рекомендуется перезапустить программу." + Символы.ПС +
						"Перезапустить?";*/
				/*РезультатВопроса = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);*/
				/*// Если пользователь не хочет перезапускать сеанс
*/
				if(true/*РезультатВопроса = КодВозвратаДиалога.Нет*/)
				{
					/*// Запустим проверку обновления опять
*/
					/*НачатьПроверкуДинамическогоОбновленияИБ();*/
				}
				/*// Попробуем перезапустить
*/
				/*РаботаСДиалогами.ПерезапуститьСеансРаботыСПрограммой();*/
			}
		}
		// Начинает проверку динамического обновления конфигурации ИБ
		//

		public void НачатьПроверкуДинамическогоОбновленияИБ(/**/)
		{
			/*// проверка дин. обновления конфигурации каждые 20 мин.
*/
			/*ПодключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ", 20 * 60);*/
		}
		// Завершает проверку динамического обновления конфигурации ИБ
		//

		public void ЗавершитьПроверкуДинамическогоОбновленияИБ(/**/)
		{
			/*// Отключим соответствующий обработчик ожидания
*/
			/*ОтключитьОбработчикОжидания("ОбработчикОжиданияПроверкиДинамическогоИзмененияИБ");*/
		}

		public object ОпределитьЭтаИнформационнаяБазаФайловая(/*СтрокаСоединенияСБД = ""*/)
		{
			/*СтрокаСоединенияСБД = ?(ПустаяСтрока(СтрокаСоединенияСБД), СтрокаСоединенияИнформационнойБазы(), СтрокаСоединенияСБД);*/
			/*// в зависимости от того файловый это вариант БД или нет немного по-разному путь в БД формируется
*/
			/*ПозицияПоиска = Найти(Врег(СтрокаСоединенияСБД), "FILE=");*/
			return null;
		}
		// Функция предназначена для получения значения по имени переменной
		// значения берутся либо из КЭШа конфигурации (параметр сеанса "ОбщиеЗначения"),
		// либо при помощи механизма платформы "повторное использование возвращаемых значений"
		//
		// Параметры:
		//	ИмяПеременной - Строка, имя переменной
		//
		// Возвращаемое значение:
		//  Произвольное значение
		//

		public object глЗначениеПеременной(/*ИмяПеременной*/)
		{
			return null;
		}
		// Процедура установки значения экспортных переменных модуля приложения
		//
		// Параметры
		//  ИмяПеременной      - строка, содержит имя переменной целиком
		// 	ЗначениеПеременной - значение переменной
		//

		public void глЗначениеПеременнойУстановить(/*ИмяПеременной, ЗначениеПеременной, ОбновитьКэшНаСервере = Ложь*/)
		{
			/*РаботаСОбщимиПеременными.УстановитьЗначениеПеременной(ИмяПеременной, ЗначениеПеременной, ОбновитьКэшНаСервере);*/
		}
	}
}

