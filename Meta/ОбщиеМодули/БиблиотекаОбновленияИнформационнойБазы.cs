using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class БиблиотекаОбновленияИнформационнойБазы
	{
		// Идентификатор библиотеки - "УПП"
		///////////////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ БСП
		// Возвращает номер версии Библиотеки УПП
		//

		public object ВерсияБиблиотеки(/**/)
		{
			return null;
		}
		// Возвращает список процедур-обработчиков обновления библиотеки
		//
		// Возвращаемое значение:
		//   Структура - описание полей структуры см. в функции
		//               ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления()

		public object ОбработчикиОбновления(/**/)
		{
			/*Обработчики = ОбновлениеИнформационнойБазы.НоваяТаблицаОбработчиковОбновления();*/
			/*// Первый запуск
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.1.1";*/
			/*Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ПервыйЗапуск";*/
			/*// При любом обновлении
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "*";*/
			/*Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОтключитьВнешнийМодульДокументооборотаСФНС";*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "*";*/
			/*Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ОбновитьРегламентированнуюОтчетность";*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "*";*/
			/*Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ЗаполнитьСтавкуРефинансированияЦБ";*/
			/*// 1.3.15
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.15.1";*/
			/*Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.ИзменитьФорматХраненияСреднегоОтклоненияСЛУ";*/
			/*Обработчик.Опциональный = Истина;*/
			/*// 1.3.16
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.16.2";*/
			/*Обработчик.Процедура    = "РегламентированнаяОтчетность.ЗаполнитьКППвДокументахРегламентированныйОтчет";*/
			/*Обработчик.Опциональный = Истина;*/
			/*// 1.3.17
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.17.1";*/
			/*Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРазмерНабораПриЗаписиРегистровУчетаЗатрат";*/
			/*Обработчик.Опциональный = Истина;*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.17.1";*/
			/*Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляНовогоСубчета99_02_4";*/
			/*Обработчик.Опциональный = Истина;*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.17.1";*/
			/*Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ОбработатьИзмененияСчета96БУиНУ";*/
			/*Обработчик.Опциональный = Истина;*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.17.1";*/
			/*Обработчик.Процедура    = "ПроцедурыОбновленияИнформационнойБазы.ОтработатьИзмененияВСтруктуреСправочникаНалоговыеОрганы";*/
			/*Обработчик.Опциональный = Истина;*/
			/*// 1.3.20
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.20.1";*/
			/*Обработчик.Процедура    = "Справочники.РасходыБудущихПериодов.УстановитьВидАктиваДляРБП";*/
			/*Обработчик.Опциональный = Истина;*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.20.1";*/
			/*Обработчик.Процедура    = "РегистрыСведений.СтавкиНалогаНаИмуществоПоОтдельнымОсновнымСредствам.ЗаполнитьВидИмущества";*/
			/*Обработчик.Опциональный = Истина;*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.20.1";*/
			/*Обработчик.Процедура    = "РегистрыСведений.РегистрацияТранспортныхСредств.ЗаполнитьКодыЭкологическихКлассов";*/
			/*Обработчик.Опциональный = Истина;*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.20.1";*/
			/*Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляКорректировочныхСубсчетов";*/
			/*Обработчик.Опциональный = Истина;*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.20.1";*/
			/*Обработчик.Процедура    = "УчетНДС.ОбработатьКорректировочныеСчетаФактуры";*/
			/*Обработчик.Опциональный = Истина;*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.20.1";*/
			/*Обработчик.Процедура    = "УчетНДС.УстановитьВидСчетаФактурыПолученного";*/
			/*Обработчик.Опциональный = Истина;*/
			/*// 1.3.21
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.21.1";*/
			/*Обработчик.Процедура    = "Документы.ПринятиеКУчетуНМА.ЗаполнитьСпособПризнанияНИОКР";*/
			/*Обработчик.Опциональный = Истина;*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.21.1";*/
			/*Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляНовогоСубчета76_01_9";*/
			/*Обработчик.Опциональный = Истина;*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.21.1";*/
			/*Обработчик.Процедура    = "ПолучениеФайловИзИнтернета.ОбновлениеХранимыхНастроекПрокси";*/
			/*Обработчик.Опциональный = Истина;*/
			/*// 1.3.22
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.22.1";*/
			/*Обработчик.Процедура    = "РегламентированнаяОтчетность.ЗаполнениеРеквизитовУчетныхЗаписейПриОбновлении";*/
			/*Обработчик.Опциональный = Истина;*/
			/*// 1.3.23
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.23.1";*/
			/*Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляНовогоСубчета08_11И08_12";*/
			/*Обработчик.Опциональный = Истина;*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.23.1";*/
			/*Обработчик.Процедура    = "УчетНДС.УстановитьДатуПримененияПостановления1137";*/
			/*// 1.3.24
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.24.1";*/
			/*Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляНовогоСубчета69_06";*/
			/*Обработчик.Опциональный = Истина;*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.24.1";*/
			/*Обработчик.Процедура    = "УчетНДС.ЗаполнитьТЧПокупателиОтчетКомиссионераОПродажах";*/
			/*Обработчик.Опциональный = Истина;*/
			/*// 1.3.26
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.26.1";*/
			/*Обработчик.Процедура    = "РегламентированнаяОтчетность.ЗаполнениеРеквизитовУчетныхЗаписейПриОбновлении";*/
			/*Обработчик.Опциональный = Истина;*/
			/*// 1.3.27
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.27.1";*/
			/*Обработчик.Процедура    = "БиблиотекаОбновленияИнформационнойБазы.УстановитьРеквизитыДляНовогоСубчета63";*/
			/*Обработчик.Опциональный = Ложь;*/
			/*// 1.3.27
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.27.4";*/
			/*Обработчик.Процедура    = "РегламентированнаяОтчетность.ЗаполнитьПредопределенныеВидыОтправляемыхДокументов";*/
			/*Обработчик.Опциональный = Ложь;*/
			/*// 1.3.27
*/
			/*Обработчик = Обработчики.Добавить();*/
			/*Обработчик.Версия       = "1.3.27.4";*/
			/*Обработчик.Процедура    = "РегламентированнаяОтчетность.ЗаменитьСсылкиНаРегламентированныеОтчеты";*/
			/*Обработчик.Опциональный = Истина;*/
			return null;
		}
		// Неинтерактивное обновление данных ИБ при смене версии библиотеки
		// Обязательная "точка входа" обновления ИБ в библиотеке.

		public void ВыполнитьОбновлениеИнформационнойБазы(/**/)
		{
			/*ОбновлениеИнформационнойБазы.ВыполнитьИтерациюОбновления(
		"УПП",
		ВерсияБиблиотеки(),
		ОбработчикиОбновления());*/
			/*// Обновление версии библиотеки ЗУП выполняем после обновления версии библиотеки УПП
*/
			/*ПроцедурыОбновленияИнформационнойБазыПереопределяемый.ВыполнитьОбновлениеИнформационнойБазы();*/
		}
		///////////////////////////////////////////////////////////////////////////////////////////
		// ПЕРВЫЙ ЗАПУСК

		public void ПервыйЗапуск(/**/)
		{
			if(true/*ЗначениеЗаполнено(ПланыОбмена.ГлавныйУзел())*/)
			{
				/*// Первоначальное заполнение делаем только в главном узле.
*/
				/*// Информация о версиях подсистем не мигрирует в составе РИБ
*/
			}
			/*ДатаНачалаВводаДанных = '19800101';*/
			/*// ОСНОВНЫЕ КЛАССИФИКАТОРЫ
*/
			/*// Валюты
*/
			/*ВалютаРегламентированногоУчета = 
	НайтиСоздатьВалюту("643", "руб.", "Российский рубль", "рубль, рубля, рублей, м, копейка, копейки, копеек, ж, 2");*/
			/*НайтиСоздатьВалюту("840", "USD", "Доллар США", "доллар, доллара, долларов, м, цент, цента, центов, м, 2");*/
			/*НайтиСоздатьВалюту("978", "EUR", "Евро"      , "евро, евро, евро, м, цент, цента, центов, м, 2");*/
			/*Константы.ВалютаРегламентированногоУчета.Установить(ВалютаРегламентированногоУчета);*/
			/*Константы.ВалютаУправленческогоУчета.Установить(ВалютаРегламентированногоУчета);*/
			if(true/*Метаданные.Константы.Найти("ВалютаМеждународногоУчета") <> Неопределено*/)
			{
				/*Константы.ВалютаМеждународногоУчета.Установить(ВалютаРегламентированногоУчета);*/
			}
			/*// Единицы измерения
*/
			/*НайтиСоздатьЕдиницу("796", "шт", "Штука");*/
			/*ЕдиницаИзмеренияВеса = НайтиСоздатьЕдиницу("166", "кг", "Килограмм");*/
			/*Константы.ЕдиницаИзмеренияВеса.Установить(ЕдиницаИзмеренияВеса);*/
			/*// Контактная информация
*/
			/*ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию();*/
			/*ЗаполнитьСправочникВидыКонтактнойИнформации();*/
			/*НачальноеЗаполениеСправочникаСобытияОС();*/
			/*// НАСТРОЙКА УЧЕТА
*/
			/*// Бухгалтерский и налоговый учет
*/
			/*УстановитьПараметрыСчетовБУиНУ();*/
			/*УстановитьСуммовойУчетНаСкладах();*/
			/*ЗаполнитьСоответствиеСчетовБУиНУ(ДатаНачалаВводаДанных);*/
			/*ЗаполнитьРегистрКонтрагентыОрганизаций();*/
			/*ЗаполнитьРегистрСчетовЕНВД();*/
			/*ЗаполнитьСправочникПрочиеДоходыИРасходы();*/
			/*УстановитьСубконтоНа44Счете();*/
			/*ЗаполнитьКодыБыстрогоВыбораПлановСчетов();*/
			/*Константы.НачалоОценкиДоходовИРасходовВНУПоКурсуАвансов.Установить('20100101');*/
			/*Константы.ДатаНачалаУказанияСокращенногоНаименованияПродавцаВСчетеФактуре.Установить('20090609');*/
			/*// Установка начисления амортизации НМА способом уменьшаемого остатка в 2008 г.
*/
			/*// исходя из остаточной стоимости на начало отчетного года.
*/
			/*Константы.ПрименятьВ2008ГодуПравилаПБУ142000.Установить(Истина);*/
			/*НастроитьСчетаУчетаНоменклатуры();*/
			/*// Установка новой ставки налога на прибыль
*/
			/*УстановитьНовыеСтавкиНалогаНаПрибыль();*/
			/*// Учетная политика упр. учета
*/
			/*НаборУчетнаяПолитика = РегистрыСведений.УчетнаяПолитика.СоздатьНаборЗаписей();*/
			/*НаборУчетнаяПолитика.ЗаполнитьПоУмолчанию(ДатаНачалаВводаДанных);*/
			/*НаборУчетнаяПолитика.Записать();*/
			if(true/*Метаданные.Константы.Найти("ИспользоватьТолькоСборочныеСпецификации") <> Неопределено*/)
			{
				/*Константы.ИспользоватьТолькоСборочныеСпецификации.Установить(Ложь);*/
			}
			/*// Учет затрат
*/
			/*// Установим в качестве основного режима - расширенную аналитику
*/
			/*Константы.ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат.Установить(Истина);*/
			/*Константы.ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат.Установить(ДатаНачалаВводаДанных);*/
			/*Константы.РежимИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат.Установить(Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчетСДополнительнойАналитикой);*/
			/*РасширеннаяАналитикаУчета.ЗаполнитьНастройкиАналитикиПоШаблону(Перечисления.РежимыИспользованияРасширеннойАналитики.РегламентированныйУчетСДополнительнойАналитикой);*/
			/*// Установка настроек расчета себестоимости по умолчанию
*/
			/*Константы.ГраницаПогрешностиСЛУ.Установить(1);*/
			/*Константы.МаксимальноеКоличествоИтерацийСЛУ.Установить(50);*/
			/*Константы.СреднееОтклонениеСЛУ.Установить(6);*/
			/*// 10^-6
*/
			/*ОбновитьСправочникСтатьиЗатрат();*/
			/*Константы.СтратегияСписанияПартийТоваровПоСтатусам.Установить(Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные);*/
			/*Константы.ОпределениеВремениПроведенияПлатежногоДокумента.Установить(Перечисления.СпособыОпределенияВремениПроведенияПлатежногоДокумента.ПоВремениРегистрацииДокумента);*/
			/*// Бизнес-процесс Закрытие месяца
*/
			/*ЗаполнитьРегистрДокументыРегламентныхОпераций();*/
			/*ЗаполнитьРегистрОтчетыРегламентныхОпераций();*/
			/*// НАСТРОЙКА ПРОГРАММЫ
*/
			/*ПроверкаРазницыВремени.ИнициализироватьПроверкуРазницыВремениССервером();*/
			/*ПроцедурыКонтроляОстатков.УстановитьИспользованиеРегистраСвободныеОстатки(Истина, '1980-01-01', Ложь);*/
			/*Константы.ИспользованиеВстроенногоПочтовогоКлиента.Установить(Истина);*/
			/*Константы.ИспользоватьВнутренниеЗаказы.Установить(Истина);*/
			/*Константы.РазрешитьВыводитьСообщенияВПанельКомментариев.Установить(Истина);*/
			/*Константы.ИнтервалПроверкиНапоминанийВСекундах.Установить(60);*/
			/*УстановитьРазмерНабораПриЗаписиРегистровУчетаЗатрат();*/
			/*// Торговое оборудование
*/
			/*ЗаполнитьТипыОплатДляВидовОплатЧекаККМ();*/
			/*ЗаполнитьСправочникВидыОплатЧекаККМ();*/
			/*Константы.ПрефиксВесовогоТовара.Установить("1");*/
			/*Константы.ПрефиксШтучногоТовара.Установить("0");*/
			/*Константы.ДлинаКодаВесовогоТовара.Установить(5);*/
			/*Константы.ПорядокПрисвоенияPLU.Установить(Перечисления.ПорядокПрисвоенияPLU.ПоПорядку);*/
			/*// БАНКИ
*/
			/*ЗагрузитьКлассификаторБанков();*/
			/*// РЕГЛАМЕНТИРОВАННАЯ ОТЧЕТНОСТЬ
*/
			/*ЗаполнитьСписокРегламентированныхОтчетов();*/
			/*// заполнение реквизитов предопределенных элементов справочника ВидыОтправляемыхДокументов
*/
			/*РегламентированнаяОтчетность.ЗаполнитьПредопределенныеВидыОтправляемыхДокументов();*/
			/*ВключитьМеханизмОнлайнСервисовРО();*/
		}
		// ОСНОВНЫЕ КЛАССИФИКАТОРЫ
		// Функция создает элемент справочника Валюты, если такого нет.
		//
		// Параметры:
		//  Код -                     - значение соответствующего реквизита справочника,
		//  Наименование              - значение соответствующего реквизита справочника,
		//  НаименованиеПолное        - значение соответствующего реквизита справочника,
		//  ПараметрыПрописиНаРусском - значение соответствующего реквизита справочника.
		//
		// Возвращаемое значение:
		//  Ссылка на добавленный или существующий элемент.
		//

		public object НайтиСоздатьВалюту(/*Код, Наименование, НаименованиеПолное, ПараметрыПрописиНаРусском*/)
		{
			/*Ссылка = Справочники.Валюты.НайтиПоКоду(Код);*/
			if(true/*Ссылка.Пустая()*/)
			{
				/*СправочникОбъект = Справочники.Валюты.СоздатьЭлемент();*/
				/*СправочникОбъект.Код                       = Код;*/
				/*СправочникОбъект.Наименование              = Наименование;*/
				/*СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;*/
				/*СправочникОбъект.ПараметрыПрописиНаРусском = ПараметрыПрописиНаРусском;*/
				/*СправочникОбъект.Записать();*/
				/*Ссылка = СправочникОбъект.Ссылка;*/
				/*// установим курс и кратность = 1 на 1 января 1980
*/
				/*МодульВалютногоУчета.ПроверитьКорректностьКурсаНа01_01_1980(Ссылка);*/
			}
			return null;
		}
		// НайтиСоздатьВалюту()
		// Функция создает элемент справочника КлассификаторЕдиницИзмерения, если такого нет.
		//
		// Параметры:
		//  Код -                     - значение соответствующего реквизита справочника,
		//  Наименование              - значение соответствующего реквизита справочника,
		//  НаименованиеПолное        - значение соответствующего реквизита справочника.
		//
		// Возвращаемое значение:
		//  Ссылка на добавленный или существующий элемент.
		//

		public object НайтиСоздатьЕдиницу(/*Код, Наименование, НаименованиеПолное*/)
		{
			/*Ссылка = Справочники.КлассификаторЕдиницИзмерения.НайтиПоКоду(Код);*/
			if(true/*Ссылка.Пустая()*/)
			{
				/*СправочникОбъект = Справочники.КлассификаторЕдиницИзмерения.СоздатьЭлемент();*/
				/*СправочникОбъект.Код                       = Код;*/
				/*СправочникОбъект.Наименование              = Наименование;*/
				/*СправочникОбъект.НаименованиеПолное        = НаименованиеПолное;*/
				/*СправочникОбъект.Записать();*/
				/*Ссылка = СправочникОбъект.Ссылка;*/
			}
			return null;
		}
		// Процедура заполняет константу шаблонов телефонов.
		//

		public void ЗаполнитьШаблоныТелефонныхНомеровПоУмолчанию(/**/)
		{
			/*ТаблицаСоответствий = Новый Соответствие;*/
			/*ТаблицаСоответствий.Вставить(7,"999-99-99");*/
			/*ТаблицаСоответствий.Вставить(6,"99-99-99");*/
			/*ТаблицаСоответствий.Вставить(5,"9-99-99");*/
			/*ТаблицаСоответствий.Вставить(4,"99-99");*/
			/*ХранилищеШаблоновТелефонов = Новый ХранилищеЗначения(ТаблицаСоответствий);*/
			/*Константы.ШаблоныТелефонныхНомеров.Установить(ХранилищеШаблоновТелефонов);*/
		}
		// укЗаполнитьДанныеПоУмолчаниюДляКонтактнойИнформации()
		// процедура производит обновление элемента справочника виды контактной информации

		public void УстановитьПараметрыВидаКонтактнойИнформации(/*СсылкаВидыКонтактнойИнформации, Знач Тип, Знач ВидОбъектаКонтактнойИнформации*/)
		{
			if(true/*НЕ ЗначениеЗаполнено(СсылкаВидыКонтактнойИнформации)*/)
			{
			}
			/*Попытка
		
		ОбъектВидКонтактнойИнформации = СсылкаВидыКонтактнойИнформации.ПолучитьОбъект();*/
			/*ОбъектВидКонтактнойИнформации.Тип = Тип;*/
			/*ОбъектВидКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = ВидОбъектаКонтактнойИнформации;*/
			/*ОбъектВидКонтактнойИнформации.Записать();*/
			/*Исключение
		ОбщегоНазначения.Сообщение("Ошибка при записи реквизитов элемента " + ОбъектВидКонтактнойИнформации.Наименование + " справочника ""Виды контактной информации""");*/
			/*КонецПопытки;*/
		}
		// Заполнение реквизитов справочника "Виды контактной информации"
		//

		public void ЗаполнитьСправочникВидыКонтактнойИнформации(/**/)
		{
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = "
	|ВЫБРАТЬ
	|	ВидыКонтактнойИнформации.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ВидыКонтактнойИнформации КАК ВидыКонтактнойИнформации
	|ГДЕ
	|	ВидыКонтактнойИнформации.Предопределенный = Истина
	|	И (ВидыКонтактнойИнформации.Тип = &ПустойТип 
	|		ИЛИ ВидыКонтактнойИнформации.ВидОбъектаКонтактнойИнформации = &ПустойВидОбъектаКонтактнойИнформации)
	|";*/
			/*Запрос.УстановитьПараметр("ПустойТип"                           , Перечисления.ТипыКонтактнойИнформации.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("ПустойВидОбъектаКонтактнойИнформации", Перечисления.ВидыОбъектовКонтактнойИнформации.ПустаяСсылка());*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			while(true/*Выборка.Следующий()*/)
			{
				if(true/*Выборка.Ссылка = Справочники.ВидыКонтактнойИнформации.АдресДоставкиКонтрагента*/)
				{
					/*УстановитьПараметрыВидаКонтактнойИнформации(Выборка.Ссылка, Перечисления.ТипыКонтактнойИнформации.Адрес, Перечисления.ВидыОбъектовКонтактнойИнформации.Контрагенты);*/
				}
			}
			/*;;*/
		}
		// КЛАССИФИКАТОР БАНКОВ

		public void ЗагрузитьКлассификаторБанков(/**/)
		{
			/*СоответствиеТипГорода = новый соответствие;*/
			/*СоответствиеТипГорода.Вставить("1","Г.");*/
			/*// ГОРОД
*/
			/*СоответствиеТипГорода.Вставить("2","П.");*/
			/*// ПОСЕЛОК
*/
			/*СоответствиеТипГорода.Вставить("3","С.");*/
			/*// СЕЛО
*/
			/*СоответствиеТипГорода.Вставить("4","ПГТ.");*/
			/*// ПОСЕЛОК ГОРОДСКОГО ТИПА
*/
			/*СоответствиеТипГорода.Вставить("5","СТ-ЦА.");*/
			/*// СТАНИЦА
*/
			/*СоответствиеТипГорода.Вставить("6","АУЛ.");*/
			/*// АУЛ
*/
			/*СоответствиеТипГорода.Вставить("7","РП.");*/
			/*//  РАБОЧИЙ ПОСЕЛОК
*/
			/*СоответствиеТипГорода.Вставить("0","");*/
			/*// 
*/
			/*СоответствиеТипГорода.Вставить("","");*/
			/*// 
*/
			/*Разделитель = Символы.Таб;*/
			/*СпрБанки = Справочники.Банки;*/
			/*СпРегионов = Новый СписокЗначений;*/
			/*мТекстГруппы = Справочники.Банки.ПолучитьМакет("Группы");*/
			/*КолСтрок = мТекстГруппы.КоличествоСтрок();*/
			/*//Составим список регионов
*/
			/*мТекстКлассификатора = Справочники.Банки.ПолучитьМакет("Классификатор");*/
			/*КолСтрок = мТекстКлассификатора.КоличествоСтрок();*/
			/*Коэф = 100/КолСтрок;*/
			/*Процент=0;*/
			/*//Читаем реквизиты банка и сохраняем в справочник
*/
			/*ОбщегоНазначения.Сообщение("Загружен классификатор банков", Перечисления.ВидыСообщений.Информация);*/
		}
		// ЗагрузитьКлассификаторБанков()
		//Процедура добавляет новую запись в справочник Банки

		public void ЗагрузитьКлассификаторБанков_Запись(/*СпрБанки,Наименование,БИК,КоррСчет,Город,ТекОКАТО,ТекРегион*/)
		{
			/*РодительЭл = СпрБанки.НайтиПоКоду(ТекОКАТО);*/
			if(true/*РодительЭл = СпрБанки.ПустаяСсылка()*/)
			{
				/*НоваяГр              = СпрБанки.СоздатьГруппу();*/
				/*НоваяГр.Код          = ТекОКАТО;*/
				/*НоваяГр.Наименование = ТекРегион;*/
				/*НоваяГр.Записать();*/
				/*РодительЭл = НоваяГр.Ссылка;*/
			}
			/*НовыйЭл = СпрБанки.СоздатьЭлемент();*/
			/*НовыйЭл.Родитель     = РодительЭл;*/
			/*НовыйЭл.Код          = БИК;*/
			/*НовыйЭл.Наименование = Наименование;*/
			/*НовыйЭл.КоррСчет     = КоррСчет;*/
			/*НовыйЭл.Город        = Город;*/
			/*НовыйЭл.Адрес        = ", ";*/
			/*НовыйЭл.Телефоны     = "";*/
			/*НовыйЭл.ОбменДанными.Загрузка = истина;*/
			/*НовыйЭл.Записать();*/
		}
		// ЗагрузитьКлассификаторБанков_Запись()
		// НАСТРОЙКА ПЛАНА СЧЕТОВ
		// Заполнение кодов быстрого выбора в планах счетов
		//Запускается при обновлении на 1.2.15 и при заполнении пустой ИБ

		public void ЗаполнитьКодыБыстрогоВыбораПлановСчетов(/*Перезаполнить = Ложь*/)
		{
		}
		//Процедура добавляет субконто Подразделения на переданный счет
		//Запускается при заполнении пустой ИБ

		public void УстановитьСубконтоПодразделения(/*ИмяПланаСчетов, СчетОбъект*/)
		{
			if(true/*СчетОбъект.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения, "ВидСубконто") = Неопределено*/)
			{
				/*НовыйВид = СчетОбъект.ВидыСубконто.Добавить();*/
				/*НовыйВид.ВидСубконто = ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения;*/
				/*НовыйВид.Суммовой    = Истина;*/
				/*НовыйВид.ТолькоОбороты = Истина;*/
				/*Попытка
			СчетОбъект.Записать();*/
				/*Исключение
		КонецПопытки;*/
			}
		}
		// УстановитьСубконтоПодразделения()
		// Выполняет установку субконто "Подразделение" на субсчета 44 счета.
		//Запускается при заполнении пустой ИБ
		//

		public void УстановитьСубконтоНа44Счете(/**/)
		{
			/*УстановитьСубконтоПодразделения("Хозрасчетый", ПланыСчетов.Хозрасчетный.РасходыНаПродажу.ПолучитьОбъект());*/
			/*ПланСчетовВыборка = ПланыСчетов.Хозрасчетный.ВыбратьИерархически(ПланыСчетов.Хозрасчетный.РасходыНаПродажу);*/
			while(true/*ПланСчетовВыборка.Следующий()*/)
			{
				/*СчетОбъект = ПланСчетовВыборка.ПолучитьОбъект();*/
				/*УстановитьСубконтоПодразделения("Хозрасчетый", СчетОбъект);*/
			}
			/*;
	
	УстановитьСубконтоПодразделения("Налоговый", ПланыСчетов.Налоговый.РасходыНаПродажу.ПолучитьОбъект());*/
			/*ПланСчетовВыборка = ПланыСчетов.Налоговый.ВыбратьИерархически(ПланыСчетов.Налоговый.РасходыНаПродажу);*/
			while(true/*ПланСчетовВыборка.Следующий()*/)
			{
				/*СчетОбъект = ПланСчетовВыборка.ПолучитьОбъект();*/
				/*УстановитьСубконтоПодразделения("Налоговый", СчетОбъект);*/
			}
			/*;;*/
		}
		// УстановитьСубконтоНа44Счете()
		// Устанавливает флаг "Запретить использовать в проводках"
		// хозрасчетным счетам
		//

		public void УстановитьПараметрыСчетовБУиНУ(/**/)
		{
			/*НачатьТранзакцию();*/
			/*ВыборкаСчетов = ПланыСчетов.Хозрасчетный.ВыбратьИерархически();*/
			while(true/*ВыборкаСчетов.Следующий()*/)
			{
				if(true/*НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель)*/)
				{
					/*Продолжить;*/
				}
				/*Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();*/
				if(true/*Объект.ЗапретитьИспользоватьВПроводках*/)
				{
					/*Продолжить;*/
				}
				/*Объект.ЗапретитьИспользоватьВПроводках = Истина;*/
				/*Объект.Записать();*/
			}
			/*;

	ВыборкаСчетов = ПланыСчетов.Налоговый.ВыбратьИерархически();*/
			while(true/*ВыборкаСчетов.Следующий()*/)
			{
				if(true/*НЕ ЗначениеЗаполнено(ВыборкаСчетов.Ссылка.Родитель)*/)
				{
					/*Продолжить;*/
				}
				/*Объект = ВыборкаСчетов.Ссылка.Родитель.ПолучитьОбъект();*/
				if(true/*Объект.ЗапретитьИспользоватьВПроводках*/)
				{
					/*Продолжить;*/
				}
				/*Объект.ЗапретитьИспользоватьВПроводках = Истина;*/
				/*Объект.Записать();*/
			}
			/*;

	ЗафиксироватьТранзакцию();*/
		}
		// Устанавливает субконто "Склады" у указанного счета.
		//

		public void УстановитьСубконтоНаСчете(/*ИмяПланаСчетов, ВидСубконто, ИмяСчета, ЕстьКоличество = Истина, ЕстьСуммовойУчет = Ложь*/)
		{
			/*Попытка

		Счет   = ПланыСчетов[ИмяПланаСчетов][ИмяСчета];*/
			/*Объект = Счет.ПолучитьОбъект();*/
			if(true/*Объект.ВидыСубконто.Найти(ПланыВидовХарактеристик[ВидСубконто].Склады, "ВидСубконто") = Неопределено*/)
			{
				/*НовыйВид = Объект.ВидыСубконто.Добавить();*/
				/*НовыйВид.ВидСубконто = ПланыВидовХарактеристик[ВидСубконто].Склады;*/
				/*НовыйВид.Суммовой    = ЕстьСуммовойУчет;*/
				if(true/*ЕстьКоличество*/)
				{
					/*НовыйВид.Количественный = Истина;*/
				}
				/*Объект.Записать();*/
			}
			/*Исключение

	КонецПопытки;*/
		}
		// УстановитьСубконтоНаСчете()
		// Выполняет заполнение регистра сведений "УчетнаяПолитикаОбщаяДляРегламентированногоУчета"
		// и устанавливает субконто "Склады" в счетах.

		public void УстановитьСуммовойУчетНаСкладах(/**/)
		{
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ОборудованиеКУстановке");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ПриобретениеОбъектовОсновныхСредств");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Материалы");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "СырьеИМатериалы");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ПокупныеПолуфабрикатыИКомплектующие");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Топливо");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Тара");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ЗапасныеЧасти");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ПрочиеМатериалы");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "СтроительныеМатериалы");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ИнвентарьИХозяйственныеПринадлежности");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "СпецоснасткаИСпецодеждаНаСкладе");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Полуфабрикаты");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "Товары");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ТоварыНаСкладах");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ТоварыВРозничнойТорговле");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ТараПодТоваромИПорожняя");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ПокупныеИзделия");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ГотоваяПродукция");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "ТМЦпринятыеНаОтветственноеХранение");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "МатериалыПринятыеВПереработку_");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "МатериалыПринятыеВПереработку");*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный",  "ВидыСубконтоХозрасчетные",  "КорректировкаТоваровПрошлогоПериода");*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ОборудованиеКУстановке", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ПриобретениеОбъектовОсновныхСредств", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Материалы", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "СырьеИМатериалы", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ПокупныеПолуфабрикатыИКомплектующие", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Топливо", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Тара", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ЗапасныеЧасти", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ПрочиеМатериалы", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "СтроительныеМатериалы", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ИнвентарьИХозяйственныеПринадлежности", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "СпецоснасткаИСпецодеждаНаСкладе", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Полуфабрикаты", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "Товары", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ТоварыНаСкладах", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ТоварыВРозничнойТорговле", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ТараПодТоваромИПорожняя", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ПокупныеИзделия", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "ГотоваяПродукция", Ложь);*/
			/*УстановитьСубконтоНаСчете("Налоговый",     "ВидыСубконтоХозрасчетные",  "КорректировкаТоваровПрошлогоПериода", Ложь);*/
			/*УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "СырьеИМатериалы");*/
			/*УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "СырьеИОсновныеМатериалы");*/
			/*УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "Топливо");*/
			/*УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "Тара");*/
			/*УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ЗапасныеЧасти");*/
			/*УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ПрочиеМатериалы");*/
			/*УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "СтроительныеМатериалы");*/
			/*УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ТоварыНаСкладе");*/
			/*УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ТоварыВРознице");*/
			/*УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "ГотоваяПродукция");*/
			/*УстановитьСубконтоНаСчете("Международный", "ВидыСубконтоМеждународные", "КомплектующиеИПолуфабрикаты");*/
		}
		// УправлениеСуммовымУчетомНаСкладах()
		// Обрабатываем новый счет 99.02.4 ("Пересчет отложенных налоговых активов и обязательств")
		// Устанавливает код быстрого выбора, для этого счета
		//
		// Параметры:
		//
		//

		public void УстановитьРеквизитыДляНовогоСубчета99_02_4(/**/)
		{
			/*СчетОбъект = ПланыСчетов.Хозрасчетный.ПрибылиИУбыткиОтПересчетаОНА_ОНО.ПолучитьОбъект();*/
			/*СчетОбъект.КодБыстрогоВыбора = "";*/
			/*Попытка
		СчетОбъект.Записать();*/
			/*Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета бухгалтерского учета 99.02.4, рекомендуется установить самостоятельно");*/
			/*КонецПопытки;*/
			/*ЗаполнитьКодыБыстрогоВыбораПлановСчетов(Истина);*/
		}
		// Обрабатываем новые счета. Хозрасчетные - 19.09, 41.К, 76.К. Налоговый - 41.К
		// Устанавливает код быстрого выбора, для этих счетов
		//
		// Параметры:
		//
		//

		public void УстановитьРеквизитыДляКорректировочныхСубсчетов(/**/)
		{
			/*СчетОбъект = ПланыСчетов.Хозрасчетный.НДСПоУменьшениюСтоимостиРеализации.ПолучитьОбъект();*/
			/*СчетОбъект.КодБыстрогоВыбора = "";*/
			/*Попытка
		СчетОбъект.Записать();*/
			/*Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета бухгалтерского учета 19.09, рекомендуется установить самостоятельно");*/
			/*КонецПопытки;*/
			/*СчетОбъект = ПланыСчетов.Хозрасчетный.КорректировкаТоваровПрошлогоПериода.ПолучитьОбъект();*/
			/*СчетОбъект.КодБыстрогоВыбора = "";*/
			/*Попытка
		СчетОбъект.Записать();*/
			/*Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета бухгалтерского учета 41.К, рекомендуется установить самостоятельно");*/
			/*КонецПопытки;*/
			/*ВестиПартионныйУчетПоСкладамРегл = Константы.ВестиПартионныйУчетПоСкладамРегл.Получить();*/
			/*УстановитьСубконтоНаСчете("Хозрасчетный", "ВидыСубконтоХозрасчетные", "КорректировкаТоваровПрошлогоПериода",, ВестиПартионныйУчетПоСкладамРегл);*/
			/*СчетОбъект = ПланыСчетов.Хозрасчетный.КорректировкаРасчетовПрошлогоПериода.ПолучитьОбъект();*/
			/*СчетОбъект.КодБыстрогоВыбора = "";*/
			/*Попытка
		СчетОбъект.Записать();*/
			/*Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета бухгалтерского учета 76.К, рекомендуется установить самостоятельно");*/
			/*КонецПопытки;*/
			/*СчетОбъект = ПланыСчетов.Налоговый.КорректировкаТоваровПрошлогоПериода.ПолучитьОбъект();*/
			/*СчетОбъект.КодБыстрогоВыбора = "";*/
			/*Попытка
		СчетОбъект.Записать();*/
			/*Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета налогового учета 41.К, рекомендуется установить самостоятельно");*/
			/*КонецПопытки;*/
			/*УстановитьСубконтоНаСчете("Налоговый", "ВидыСубконтоХозрасчетные", "КорректировкаТоваровПрошлогоПериода", Ложь, ВестиПартионныйУчетПоСкладамРегл);*/
			/*ЗаполнитьКодыБыстрогоВыбораПлановСчетов(Истина);*/
		}
		// Устанавливается код быстрого выбора для нового счета 76.01.9
		//

		public void УстановитьРеквизитыДляНовогоСубчета76_01_9(/**/)
		{
			/*СчетОбъект = ПланыСчетов.Хозрасчетный. ПлатежиПоПрочимВидамСтрахования.ПолучитьОбъект();*/
			/*СчетОбъект.КодБыстрогоВыбора = "76019";*/
			/*Попытка
        СчетОбъект.Записать();*/
			/*Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого доступа для счета 76.01.9, рекомендуется установить самостоятельно");*/
			/*КонецПопытки;*/
			/*Документы.УстановкаСоответствияСчетовБУиНУ.СоздатьНовыеСоответствияСчетовБУиНУ("ДляСчета76_01_9");*/
		}
		// Устанавливается код быстрого выбора для нового счета 08.11 и 08.12
		//

		public void УстановитьРеквизитыДляНовогоСубчета08_11И08_12(/**/)
		{
			/*СчетОбъект = ПланыСчетов.Хозрасчетный.НематериальныеПоисковыеАктивы.ПолучитьОбъект();*/
			/*СчетОбъект.КодБыстрогоВыбора = "0811";*/
			/*Попытка
        СчетОбъект.Записать();*/
			/*Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого доступа для счета 08.11, рекомендуется установить самостоятельно");*/
			/*КонецПопытки;*/
			/*СчетОбъект = ПланыСчетов.Налоговый.НематериальныеПоисковыеАктивы.ПолучитьОбъект();*/
			/*СчетОбъект.КодБыстрогоВыбора = "0811";*/
			/*Попытка
        СчетОбъект.Записать();*/
			/*Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого доступа для счета 08.11 налогового учета, рекомендуется установить самостоятельно");*/
			/*КонецПопытки;*/
			/*СчетОбъект = ПланыСчетов.Хозрасчетный.МатериальныеПоисковыеАктивы.ПолучитьОбъект();*/
			/*СчетОбъект.КодБыстрогоВыбора = "0812";*/
			/*Попытка
        СчетОбъект.Записать();*/
			/*Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого доступа для счета 08.12, рекомендуется установить самостоятельно");*/
			/*КонецПопытки;*/
			/*СчетОбъект = ПланыСчетов.Налоговый.МатериальныеПоисковыеАктивы.ПолучитьОбъект();*/
			/*СчетОбъект.КодБыстрогоВыбора = "0812";*/
			/*Попытка
        СчетОбъект.Записать();*/
			/*Исключение
        ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого доступа для счета 08.12 налогового учета, рекомендуется установить самостоятельно");*/
			/*КонецПопытки;*/
			/*Документы.УстановкаСоответствияСчетовБУиНУ.СоздатьНовыеСоответствияСчетовБУиНУ("ДляСчетовПоисковыхАктивов");*/
		}
		// Устанавливается код быстрого выбора для нового счета 69.06 и его субсчетов
		//

		public void УстановитьРеквизитыДляНовогоСубчета69_06(/**/)
		{
			/*ЗаполнитьКодыБыстрогоВыбораПлановСчетов();*/
		}
		// Обрабатываем новый счет 63 ("Резервы по сомнительным долгам")
		// Устанавливает код быстрого выбора, для этого счета
		//
		// Параметры:
		//
		//

		public void УстановитьРеквизитыДляНовогоСубчета63(/**/)
		{
			/*СчетОбъект = ПланыСчетов.Налоговый.РезервыПоСомнительнымДолгам.ПолучитьОбъект();*/
			/*СчетОбъект.КодБыстрогоВыбора = "63";*/
			/*Попытка
		СчетОбъект.Записать();*/
			/*Исключение
		ОбщегоНазначения.СообщитьОбОшибке("Не удалось установить код быстрого выбора для счета налогового учета 63, рекомендуется установить самостоятельно");*/
			/*КонецПопытки;*/
		}
		// НАСТРОЙКИ УЧЕТА
		// Заполняет регистр сведений СоответствиеСчетовБУиНУ
		//

		public void ЗаполнитьСоответствиеСчетовБУиНУ(/*ТекущаяДата*/)
		{
			/*ДокументУстановкаСоответствияСчетовБУиНУ = Документы.УстановкаСоответствияСчетовБУиНУ.СоздатьДокумент();*/
			/*ДокументУстановкаСоответствияСчетовБУиНУ.Дата = ТекущаяДата;*/
			/*ДокументУстановкаСоответствияСчетовБУиНУ.Ответственный = глЗначениеПеременной("глТекущийПользователь");*/
			/*ДокументУстановкаСоответствияСчетовБУиНУ.ЗаполнитьСоответствиеСчетовБУиНУпоУмолчанию();*/
			/*Попытка
		ДокументУстановкаСоответствияСчетовБУиНУ.Записать(РежимЗаписиДокумента.Запись);*/
			/*Исключение
		Возврат;*/
			/*КонецПопытки;*/
			/*Попытка
		ДокументУстановкаСоответствияСчетовБУиНУ.Записать(РежимЗаписиДокумента.Проведение);*/
			/*Исключение
	КонецПопытки;*/
		}
		// ЗаполнитьСоответствиеСчетовБУиНУ()
		// Заполняет регистр сведений "КонтрагентыОрганизаций" связанный со счетами учета расчетов
		//

		public void ЗаполнитьРегистрКонтрагентыОрганизаций(/**/)
		{
			/*ОбщегоНазначения.Сообщение("Выполняется начальное заполнение регистра сведений ""Контрагенты организаций""");*/
			/*НачатьТранзакцию();*/
			/*Набор  = РегистрыСведений.КонтрагентыОрганизаций.СоздатьНаборЗаписей();*/
			/*//Запись с пустым измерением ВидРасчетовПоДоговору после ввода обязательного признака
*/
			/*// договора ВидыРасчетовПоДоговорам удалить.
*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Организация                         = Справочники.Организации.ПустаяСсылка();*/
			/*Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();*/
			/*Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();*/
			/*Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.ПустаяСсылка();*/
			/*Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;*/
			/*Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;*/
			/*Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;*/
			/*Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;*/
			/*Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;*/
			/*Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;*/
			/*Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Организация                         = Справочники.Организации.ПустаяСсылка();*/
			/*Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();*/
			/*Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();*/
			/*Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВВалютеРегламентированногоУчета;*/
			/*Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданным;*/
			/*Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученным;*/
			/*Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчиками;*/
			/*Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчиками;*/
			/*Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторами;*/
			/*Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателями;*/
			/*Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщиками;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Организация                         = Справочники.Организации.ПустаяСсылка();*/
			/*Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();*/
			/*Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();*/
			/*Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВИностраннойВалюте;*/
			/*Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымВал;*/
			/*Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымВал;*/
			/*Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиВал;*/
			/*Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиВал;*/
			/*Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиВал;*/
			/*Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиВал;*/
			/*Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиВал;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Организация                         = Справочники.Организации.ПустаяСсылка();*/
			/*Запись.Контрагент                          = Справочники.Контрагенты.ПустаяСсылка();*/
			/*Запись.Договор                             = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();*/
			/*Запись.ВидРасчетовПоДоговору               = Перечисления.ВидыРасчетовПоДоговорам.РасчетыВУсловныхЕдиницах;*/
			/*Запись.СчетУчетаАвансовВыданных            = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамВыданнымУЕ;*/
			/*Запись.СчетУчетаАвансовПолученных          = ПланыСчетов.Хозрасчетный.РасчетыПоАвансамПолученнымУЕ;*/
			/*Запись.СчетУчетаРасчетовПоТареСПокупателем = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПокупателямиИЗаказчикамиУЕ;*/
			/*Запись.СчетУчетаРасчетовПоТареСПоставщиком = ПланыСчетов.Хозрасчетный.РасчетыСПрочимиПоставщикамиИПодрядчикамиУЕ;*/
			/*Запись.СчетУчетаРасчетовСКомитентом        = ПланыСчетов.Хозрасчетный.ПрочиеРасчетыСРазнымиДебиторамиИКредиторамиУЕ;*/
			/*Запись.СчетУчетаРасчетовСПокупателем       = ПланыСчетов.Хозрасчетный.РасчетыСПокупателямиУЕ;*/
			/*Запись.СчетУчетаРасчетовСПоставщиком       = ПланыСчетов.Хозрасчетный.РасчетыСПоставщикамиУЕ;*/
			/*Набор.Записать();*/
			/*ЗафиксироватьТранзакцию();*/
		}
		//ЗаполнитьРегистрКонтрагентыОрганизаций()
		// Заполняет регистры сведения бухгалтерии связанных со счетами учета по деятельности ЕНВД
		//

		public void ЗаполнитьРегистрСчетовЕНВД(/**/)
		{
			/*Набор = РегистрыСведений.СчетаУчетаПоДеятельностиЕНВД.СоздатьНаборЗаписей();*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.ОсновноеПроизводствоОблагаемоеЕНВД;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводстваОблагаемоеЕНВД;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыОблагаемыеЕНВД;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходыРаспределяемые;*/
			/*Запись.ПодлежитРаспределению = Истина;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыОблагаемыеЕНВД;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходыРаспределяемые;*/
			/*Запись.ПодлежитРаспределению = Истина;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.БракВПроизводствеОблагаемоеЕНВД;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводстваОблагаемоеЕНВД;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияОблагаемыеЕНВД;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.ИздержкиОбращенияРаспределяемые;*/
			/*Запись.ПодлежитРаспределению = Истина;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыОблагаемыеЕНВД;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.КоммерческиеРасходыРаспределяемые;*/
			/*Запись.ПодлежитРаспределению = Истина;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.ВыручкаОблагаемаяЕНВД;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.СебестоимостьПродажОблагаемаяЕНВД;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.Продажи_РасходыНаПродажуОблагаемыеЕНВД;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.Продажи_УправленческиеРасходыОблагаемыеЕНВД;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.ПрочиеРасходыОблагаемыеЕНВД;*/
			/*Запись = Набор.Добавить();*/
			/*Запись.Счет = ПланыСчетов.Хозрасчетный.ПрочиеРасходыРаспределяемые;*/
			/*Запись.ПодлежитРаспределению = Истина;*/
			/*Набор.Записать();*/
		}
		// Заполнение реквизитов справочника "Прочие доходы и расходы"
		//

		public void ЗаполнитьСправочникПрочиеДоходыИРасходы(/**/)
		{
			/*ПрочиеДоходыИРасходы = Справочники.ПрочиеДоходыИРасходы;*/
			/*СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.ДоходыРасходыПриПродажеПокупкеВалюты.ПолучитьОбъект();*/
			/*СтатьяДоходовРаходов.ПринятиеКНалоговомуУчету = Ложь;*/
			/*СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеОперационныеДоходыРасходы;*/
			/*СтатьяДоходовРаходов.Записать();*/
			/*СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.КурсовыеРазницы.ПолучитьОбъект();*/
			/*СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницы;*/
			/*СтатьяДоходовРаходов.ПринятиеКналоговомуУчету    = Истина;*/
			/*СтатьяДоходовРаходов.Записать();*/
			/*СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.КурсовыеРазницыПоРасчетамВУЕ.ПолучитьОбъект();*/
			/*СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.КурсовыеРазницыПоРасчетамВУЕ;*/
			/*СтатьяДоходовРаходов.ПринятиеКналоговомуУчету    = Истина;*/
			/*СтатьяДоходовРаходов.Записать();*/
			/*СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.ОтклонениеКурсаПродажиПокупкиВалюты.ПолучитьОбъект();*/
			/*СтатьяДоходовРаходов.ПринятиеКНалоговомуУчету = Истина;*/
			/*СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;*/
			/*СтатьяДоходовРаходов.Записать();*/
			/*СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.СписаниеНДСНаРасходы.ПолучитьОбъект();*/
			/*СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;*/
			/*СтатьяДоходовРаходов.ПринятиеКналоговомуУчету = Истина;*/
			/*СтатьяДоходовРаходов.Записать();*/
			/*СтатьяДоходовРаходов = ПрочиеДоходыИРасходы.СуммовыеРазницы.ПолучитьОбъект();*/
			/*СтатьяДоходовРаходов.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;*/
			/*СтатьяДоходовРаходов.ПринятиеКналоговомуУчету    = Истина;*/
			/*СтатьяДоходовРаходов.Записать();*/
		}
		// Установка реквизитов у предопределенных элементов
		// справочника "Статьи затрат" при создании пустой базы

		public void ОбновитьСправочникСтатьиЗатрат(/**/)
		{
			/*Справочник_Менеджер = Справочники.СтатьиЗатрат;*/
			/*ЭлементСправочника = Справочник_Менеджер.СписаниеНДСНаРасходы.ПолучитьОбъект();*/
			if(true/*НЕ ЗначениеЗаполнено(ЭлементСправочника.ХарактерЗатрат)*/)
			{
				/*ЭлементСправочника.ХарактерЗатрат 	= Перечисления.ХарактерЗатрат.ИздержкиОбращения;*/
				/*ЭлементСправочника.ВидЗатрат 		= Перечисления.ВидыЗатрат.Прочие;*/
				/*ЭлементСправочника.ВидРасходовНУ 	= Перечисления.ВидыРасходовНУ.ПрочиеРасходы;*/
				/*ЭлементСправочника.Записать();*/
			}
			/*ЭлементСправочника = Справочник_Менеджер.СписаниеНДСНаРасходыПрочие.ПолучитьОбъект();*/
			if(true/*НЕ ЗначениеЗаполнено(ЭлементСправочника.ХарактерЗатрат)*/)
			{
				/*ЭлементСправочника.ХарактерЗатрат 	= Перечисления.ХарактерЗатрат.Прочие;*/
				/*ЭлементСправочника.ВидЗатрат 		= Перечисления.ВидыЗатрат.Прочие;*/
				/*ЭлементСправочника.ВидРасходовНУ 	= Перечисления.ВидыРасходовНУ.ПрочиеРасходы;*/
				/*ЭлементСправочника.Записать();*/
			}
			/*Справочник_Менеджер = Справочники.ПрочиеДоходыИРасходы;*/
			/*ЭлементСправочника = Справочник_Менеджер.СписаниеНДСНаРасходы.ПолучитьОбъект();*/
			if(true/*НЕ ЗначениеЗаполнено(ЭлементСправочника.ВидПрочихДоходовИРасходов)*/)
			{
				/*ЭлементСправочника.ВидПрочихДоходовИРасходов = Перечисления.ВидыПрочихДоходовИРасходов.ПрочиеВнереализационныеДоходыРасходы;*/
				/*ЭлементСправочника.ПринятиеКналоговомуУчету = Истина;*/
				/*ЭлементСправочника.Записать();*/
			}
		}
		// ОбновитьСправочникСтатьиЗатрат()
		// Создает документ "УстановкаПараметровУчетаНоменклатуры", содержащий настройки связанные со счетами учета
		//

		public void НастроитьСчетаУчетаНоменклатуры(/**/)
		{
			/*ВидНоменклатурыТовар = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Товар", Истина);*/
			if(true/*НЕ ЗначениеЗаполнено(ВидНоменклатурыТовар)*/)
			{
				/*НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();*/
				/*НовыйЭлемент.Наименование = "Товар";*/
				/*НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;*/
				/*НовыйЭлемент.Записать();*/
				/*ВидНоменклатурыТовар = НовыйЭлемент.Ссылка;*/
			}
			/*ВидНоменклатурыМатериал = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Материал", Истина);*/
			if(true/*НЕ ЗначениеЗаполнено(ВидНоменклатурыМатериал)*/)
			{
				/*НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();*/
				/*НовыйЭлемент.Наименование = "Материал";*/
				/*НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;*/
				/*НовыйЭлемент.Записать();*/
				/*ВидНоменклатурыМатериал = НовыйЭлемент.Ссылка;*/
			}
			/*ВидНоменклатурыПродукция = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Продукция", Истина);*/
			if(true/*НЕ ЗначениеЗаполнено(ВидНоменклатурыПродукция)*/)
			{
				/*НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();*/
				/*НовыйЭлемент.Наименование = "Продукция";*/
				/*НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;*/
				/*НовыйЭлемент.Записать();*/
				/*ВидНоменклатурыПродукция = НовыйЭлемент.Ссылка;*/
			}
			/*ВидНоменклатурыПолуфабрикат = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Полуфабрикат", Истина);*/
			if(true/*НЕ ЗначениеЗаполнено(ВидНоменклатурыПолуфабрикат)*/)
			{
				/*НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();*/
				/*НовыйЭлемент.Наименование = "Полуфабрикат";*/
				/*НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Товар;*/
				/*НовыйЭлемент.Записать();*/
				/*ВидНоменклатурыПолуфабрикат = НовыйЭлемент.Ссылка;*/
			}
			/*ВидНоменклатурыУслуга = Справочники.ВидыНоменклатуры.НайтиПоНаименованию("Услуга", Истина);*/
			if(true/*НЕ ЗначениеЗаполнено(ВидНоменклатурыУслуга)*/)
			{
				/*НовыйЭлемент = Справочники.ВидыНоменклатуры.СоздатьЭлемент();*/
				/*НовыйЭлемент.Наименование = "Услуга";*/
				/*НовыйЭлемент.ТипНоменклатуры = Перечисления.ТипыНоменклатуры.Услуга;*/
				/*НовыйЭлемент.Записать();*/
			}
			/*// Установим параметры учета номенклатуры по умолчанию
*/
			/*Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	УстановкаПараметровУчетаНоменклатуры.Ссылка
	|ИЗ
	|	Документ.УстановкаПараметровУчетаНоменклатуры КАК УстановкаПараметровУчетаНоменклатуры
	|ГДЕ
	|	УстановкаПараметровУчетаНоменклатуры.Проведен");*/
			if(true/*Запрос.Выполнить().Пустой()*/)
			{
				/*ДокументОбъект = Документы.УстановкаПараметровУчетаНоменклатуры.СоздатьДокумент();*/
				/*ДокументОбъект.Дата = НачалоМесяца('19800101');*/
				/*ТабличнаяЧастьСчетаУчета = ДокументОбъект.СчетаУчетаНоменклатуры;*/
				/*ТабличнаяЧастьПараметрыУчетаУслуг = ДокументОбъект.ПараметрыУчетаУслуг;*/
				/*// Любая номенклатура, организация
*/
				/*Запись = ТабличнаяЧастьСчетаУчета.Добавить();*/
				/*Запись.Организация  = Справочники.Организации.ПустаяСсылка();*/
				/*Запись.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();*/
				/*Запись.СчетУчетаБУ						= ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;*/
				/*Запись.СчетДоходовБУ					= ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;*/
				/*Запись.СчетРасходовБУ					= ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;*/
				/*Запись.СчетУчетаНУ						= ПланыСчетов.Налоговый.ТоварыНаСкладах;*/
				/*Запись.СчетДоходовНУ					= ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;*/
				/*Запись.СчетРасходовНУ					= ПланыСчетов.Налоговый.СебестоимостьПродаж;*/
				/*// Любая организация, вид номенклатуры = ТОВАР
*/
				/*Запись = ТабличнаяЧастьСчетаУчета.Добавить();*/
				/*Запись.Организация     = Справочники.Организации.ПустаяСсылка();*/
				/*Запись.Номенклатура    = ВидНоменклатурыТовар;*/
				/*Запись.СчетУчетаБУ						= ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;*/
				/*Запись.СчетДоходовБУ					= ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;*/
				/*Запись.СчетРасходовБУ					= ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;*/
				/*Запись.СчетУчетаНУ						= ПланыСчетов.Налоговый.ТоварыНаСкладах;*/
				/*Запись.СчетДоходовНУ					= ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;*/
				/*Запись.СчетРасходовНУ					= ПланыСчетов.Налоговый.СебестоимостьПродаж;*/
				/*// Любая организация, вид номенклатуры = МАТЕРИАЛ
*/
				/*Запись = ТабличнаяЧастьСчетаУчета.Добавить();*/
				/*Запись.Организация     = Справочники.Организации.ПустаяСсылка();*/
				/*Запись.Номенклатура    = ВидНоменклатурыМатериал;*/
				/*Запись.СчетУчетаБУ						= ПланыСчетов.Хозрасчетный.СырьеИМатериалы;*/
				/*Запись.СчетДоходовБУ					= ПланыСчетов.Хозрасчетный.ПрочиеДоходы;*/
				/*Запись.СчетРасходовБУ					= ПланыСчетов.Хозрасчетный.ПрочиеРасходыНеОблагаемыеЕНВД;*/
				/*Запись.СчетУчетаНУ						= ПланыСчетов.Налоговый.СырьеИМатериалы;*/
				/*Запись.СчетДоходовНУ					= ПланыСчетов.Налоговый.ВыручкаОтРеализацииПрочегоИмуществаРаботУслуг;*/
				/*Запись.СчетРасходовНУ					= ПланыСчетов.Налоговый.РасходыСвязанныеСРеализациейПрочегоИмущества;*/
				/*// Любая организация, вид номенклатуры = ПРОДУКЦИЯ
*/
				/*Запись = ТабличнаяЧастьСчетаУчета.Добавить();*/
				/*Запись.Организация     = Справочники.Организации.ПустаяСсылка();*/
				/*Запись.Номенклатура    = ВидНоменклатурыПродукция;*/
				/*Запись.СчетУчетаБУ						= ПланыСчетов.Хозрасчетный.ГотоваяПродукция;*/
				/*Запись.СчетДоходовБУ					= ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;*/
				/*Запись.СчетРасходовБУ					= ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;*/
				/*Запись.СчетУчетаНУ						= ПланыСчетов.Налоговый.ГотоваяПродукция;*/
				/*Запись.СчетДоходовНУ					= ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;*/
				/*Запись.СчетРасходовНУ					= ПланыСчетов.Налоговый.СебестоимостьПродаж;*/
				/*// Любая организация, вид номенклатуры = ПОЛУФАБРИКАТ
*/
				/*Запись = ТабличнаяЧастьСчетаУчета.Добавить();*/
				/*Запись.Организация     = Справочники.Организации.ПустаяСсылка();*/
				/*Запись.Номенклатура    = ВидНоменклатурыПолуфабрикат;*/
				/*Запись.СчетУчетаБУ						= ПланыСчетов.Хозрасчетный.Полуфабрикаты;*/
				/*Запись.СчетДоходовБУ					= ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;*/
				/*Запись.СчетРасходовБУ					= ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;*/
				/*Запись.СчетУчетаНУ						= ПланыСчетов.Налоговый.Полуфабрикаты;*/
				/*Запись.СчетДоходовНУ					= ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;*/
				/*Запись.СчетРасходовНУ					= ПланыСчетов.Налоговый.СебестоимостьПродаж;*/
				/*// Любая организация, все виды номенклатуры для УСЛУГ
*/
				/*Запись = ТабличнаяЧастьПараметрыУчетаУслуг.Добавить();*/
				/*Запись.Организация     = Справочники.Организации.ПустаяСсылка();*/
				/*Запись.Номенклатура    = Неопределено;*/
				/*Запись.СчетДоходовБУ					= ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;*/
				/*Запись.СчетРасходовБУ					= ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;*/
				/*Запись.СчетДоходовНУ					= ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;*/
				/*Запись.СчетРасходовНУ					= ПланыСчетов.Налоговый.СебестоимостьПродаж;*/
				/*Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);*/
				/*Исключение
			ОбщегоНазначения.Сообщение("Ошибка при записи документа ""Установка параметров учета номенклатуры""");*/
				/*КонецПопытки;*/
			}
		}
		// НастроитьСчетаУчетаНоменклатуры
		// БИЗНЕС-ПРОЦЕСС ЗАКРЫТИЕ МЕСЯЦА
		// Заполнение регистра сведений ДокументыРегламентныхОпераций первоначальными значениями

		public void ЗаполнитьРегистрДокументыРегламентныхОпераций(/**/)
		{
			/*НаборЗаписей = РегистрыСведений.ДокументыРегламентныхОпераций.СоздатьНаборЗаписей();*/
			/*НаборЗаписей.Прочитать();*/
			/*НаборЗаписей.Очистить();*/
			/*НаборЗаписей.ЗаполнитьРегистрПоУмолчанию();*/
			/*НаборЗаписей.Записать();*/
		}
		// Заполнение регистра сведений ОтчетыРегламентныхОпераций первоначальными значениями

		public void ЗаполнитьРегистрОтчетыРегламентныхОпераций(/**/)
		{
			/*НаборЗаписей = РегистрыСведений.ОтчетыРегламентныхОпераций.СоздатьНаборЗаписей();*/
			/*НаборЗаписей.Прочитать();*/
			/*НаборЗаписей.Очистить();*/
			/*НаборЗаписей.ЗаполнитьРегистрПоУмолчанию();*/
			/*НаборЗаписей.Записать();*/
		}
		// ЗАПОЛНЕНИЕ ДРУГИХ СПРАВОЧНИКОВ
		//Заполнение справочника "СобытияОС" первоначальными значениями

		public void НачальноеЗаполениеСправочникаСобытияОС(/**/)
		{
			/*Попытка 
		СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();*/
			/*СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ПринятиеКУчету;*/
			/*СпрСобытияОС.Наименование = "Принятие к учету";*/
			/*СпрСобытияОС.Записать();*/
			/*СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();*/
			/*СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.ВводВЭксплуатацию;*/
			/*СпрСобытияОС.Наименование = "Ввод в эксплуатацию";*/
			/*СпрСобытияОС.Записать();*/
			/*СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();*/
			/*СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Списание;*/
			/*СпрСобытияОС.Наименование = "Списание";*/
			/*СпрСобытияОС.Записать();*/
			/*СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();*/
			/*СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Модернизация;*/
			/*СпрСобытияОС.Наименование = "Модернизация";*/
			/*СпрСобытияОС.Записать();*/
			/*СпрСобытияОС = Справочники.СобытияОС.СоздатьЭлемент();*/
			/*СпрСобытияОС.ВидСобытияОС = Перечисления.ВидыСобытийОС.Передача;*/
			/*СпрСобытияОС.Наименование = "Передача";*/
			/*СпрСобытияОС.Записать();*/
			/*Исключение
	КонецПопытки;*/
		}
		//заполнение реквизита ТипОплаты значением Наличные в справочнике ВидыОплатЧекаККМ

		public void ЗаполнитьТипыОплатДляВидовОплатЧекаККМ(/**/)
		{
			/*Запрос = новый Запрос;*/
			/*Запрос.Текст = "ВЫБРАТЬ Ссылка ИЗ Справочник.ВидыОплатЧекаККМ
	|ГДЕ ЭтоГруппа = ложь и ТипОплаты = &ПустаяСсылка";*/
			/*Запрос.УстановитьПараметр("ПустаяСсылка", Перечисления.ТипыОплатЧекаККМ.ПустаяСсылка());*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			while(true/*Выборка.Следующий()*/)
			{
				/*текОбъект = Выборка.ссылка.ПолучитьОбъект();*/
				/*текОбъект.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные;*/
				/*текОбъект.Записать();*/
			}
			/*;;*/
		}
		// Заполнение реквизитов справочника "Виды оплат чека ККМ"
		//

		public void ЗаполнитьСправочникВидыОплатЧекаККМ(/**/)
		{
			/*ОбъектВидОплатыЧекаККМ                    = Справочники.ВидыОплатЧекаККМ.Наличные.ПолучитьОбъект();*/
			/*ОбъектВидОплатыЧекаККМ.ТипОплаты = Перечисления.ТипыОплатЧекаККМ.Наличные;*/
			/*ОбъектВидОплатыЧекаККМ.Записать();*/
		}
		// ЗаполнитьСправочникВидыОплатЧекаККМ()
		// РЕГЛАМЕНТИРОВАННАЯ ОТЧЕТНОСТЬ

		public void ВключитьМеханизмОнлайнСервисовРО(/**/)
		{
			/*Константы.ИспользоватьМеханизмОнлайнСервисовРО.Установить(Истина);*/
		}
		// АКТУАЛИЗАЦИЯ ПЕРИОДИЧЕСКИХ ЗНАЧЕНИЙ

		public void ЗаполнитьСтавкуРефинансированияЦБ(/**/)
		{
			/*// Загрузим в регистр сведений ставки, установленные ЦБ
*/
			/*НаборЗаписей = РегистрыСведений.СтавкаРефинансированияЦБ.СоздатьНаборЗаписей();*/
			/*НаборЗаписей.ЗагрузитьСтавкиРефинансированияУстановленныеЦБ();*/
		}

		public object УстановитьНовыеСтавкиНалогаНаПрибыль(/**/)
		{
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = "ВЫБРАТЬ
	               |	УчетнаяПолитикаОрганизацийСрезПоследних.Организация,
	               |	СтавкиНалогаНаПрибыльСрезПоследних.СтавкаФБ
	               |ИЗ
	               |	РегистрСведений.УчетнаяПолитикаОрганизаций.СрезПоследних(&Дата, СистемаНалогообложения = ЗНАЧЕНИЕ(Перечисление.СистемыНалогообложения.Общая)) КАК УчетнаяПолитикаОрганизацийСрезПоследних
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтавкиНалогаНаПрибыль.СрезПоследних(&Дата, ) КАК СтавкиНалогаНаПрибыльСрезПоследних
	               |		ПО УчетнаяПолитикаОрганизацийСрезПоследних.Организация = СтавкиНалогаНаПрибыльСрезПоследних.Организация";*/
			/*Запрос.УстановитьПараметр("Дата", '20090101');*/
			/*Результат = Запрос.Выполнить().Выгрузить();*/
			/*НаборЗаписей = РегистрыСведений.СтавкиНалогаНаПрибыль.СоздатьНаборЗаписей();*/
			/*НаборЗаписей.Прочитать();*/
			/*Попытка
			 НаборЗаписей.Записать();*/
			/*Исключение
			 ОбщегоНазначения.СообщитьОбОшибке("Не возможно установить ставки налога на прибыль на 1 января 2009 года");*/
			/*КонецПопытки;*/
			return null;
		}
		// РЕГЛАМЕНТИРОВАННАЯ ОТЧЕТНОСТЬ
		// Выполняет первоначальное заполнение справочника РегламентированныеОтчеты
		// списком регламентированных отчетов.
		//
		//  Процедура должна вызываться при первоначальном заполнении пустой
		// информационной базы. Предполагается, что перед запуском процедуры справочник
		// РегламентированныеОтчеты - пустой.
		//

		public void ЗаполнитьСписокРегламентированныхОтчетов(/*ПервоеЗаполнение = Истина, ИзменятьПризнакИспользованияВнешнегоОтчета = Истина*/)
		{
			if(true/*ИзменятьПризнакИспользованияВнешнегоОтчета И НЕ ПервоеЗаполнение*/)
			{
				/*Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	РегламентированныеОтчеты.Ссылка КАК Ссылка,
							  |	РегламентированныеОтчеты.ИсточникОтчета КАК ИсточникОтчета
		                      |ИЗ
		                      |	Справочник.РегламентированныеОтчеты КАК РегламентированныеОтчеты
		                      |ГДЕ
		                      |	РегламентированныеОтчеты.ВнешнийОтчетИспользовать = &ПризнакИспользованияВнешнегоОтчета");*/
				/*Запрос.УстановитьПараметр("ПризнакИспользованияВнешнегоОтчета", Истина);*/
				/*Выборка = Запрос.Выполнить().Выбрать();*/
				while(true/*Выборка.Следующий()*/)
				{
					if(true/*Метаданные.Документы.Найти(Выборка.ИсточникОтчета) <> Неопределено ИЛИ	Метаданные.Отчеты.Найти(Выборка.ИсточникОтчета) <> Неопределено*/)
					{
						/*ОбъектРеглОтчет = Выборка.Ссылка.ПолучитьОбъект();*/
						/*ОбъектРеглОтчет.ВнешнийОтчетИспользовать = Ложь;*/
						/*ОбъектРеглОтчет.Записать();*/
					}
				}
				/*;;*/
			}
			/*// Заполнением списка отчетов выполняется путем вызова экспортных процедур
*/
			/*// обработки ОбновлениеРегламентированнойОтчетности.
*/
			/*ОбработкаОбновлениеОтчетов = Обработки.ОбновлениеРегламентированнойОтчетности.Создать();*/
			/*// Получаем список регламентированных отчетов в виде дерева.
*/
			/*ДеревоОтчетов = ОбработкаОбновлениеОтчетов.ПолучитьСписокОтчетов();*/
			if(true/*ДеревоОтчетов.Строки.Количество() = 0*/)
			{
				/*// нет обновлений
*/
			}
			/*// Заполняем списко отчетов.
*/
			/*ОбработкаОбновлениеОтчетов.ЗаполнитьСписокОтчетов(ДеревоОтчетов, ПервоеЗаполнение);*/
		}
		// ЗаполнитьСписокРегламентированныхОтчетов()

		public void ОбновитьРегламентированнуюОтчетность(/**/)
		{
			/*ЗаполнитьСписокРегламентированныхОтчетов(Ложь);*/
			/*// заполнение реквизитов предопределенных элементов справочника ВидыОтправляемыхДокументов
*/
			/*РегламентированнаяОтчетность.ЗаполнитьПредопределенныеВидыОтправляемыхДокументов();*/
		}

		public void ОтключитьВнешнийМодульДокументооборотаСФНС(/**/)
		{
			/*Константы.ДокументооборотСКонтролирующимиОрганами_ИспользоватьВнешнийМодуль.Установить(Ложь);*/
		}
		// НАСТРОЙКИ ПРОГРАММЫ
		// Процедура задает по умолчанию максимальное количество записей в наборах регистров расширенной аналитики

		public void УстановитьРазмерНабораПриЗаписиРегистровУчетаЗатрат(/**/)
		{
			/*Константы.РазмерНабораПриЗаписиРегистровУчетаЗатрат.Установить(1000);*/
		}
		///////////////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ ПОДГОТОВКИ К УДАЛЕНИЮ ОБЪЕКТОВ МЕТАДАННЫХ

		public void УстранитьПлохиеСсылки(/*ТипМетаданных, ИмяОбъекта*/)
		{
			/*// ПОИСК УДАЛЯЕМЫХ ЗАПИСЕЙ
*/
			/*УдаляемыеЗаписи = НайтиУдаляемыеЗаписи(ТипМетаданных, ИмяОбъекта);*/
			/*// ПОИСК ССЫЛОК НА УДАЛЯЕМЫЕ ОБЪЕКТЫ
*/
			/*ТаблицаСсылок = НайтиПоСсылкам(УдаляемыеЗаписи);*/
			if(true/*ТаблицаСсылок.Количество() = 0*/)
			{
				/*// Нет ссылок на удаляемые объекты
*/
			}
			/*// ПОИСК "ПЛОХИХ" ССЫЛОК
*/
			/*ЗаписиКУдалению = ОтобратьЗаписиРегистровСведений(ТаблицаСсылок);*/
			if(true/*ЗаписиКУдалению.Количество() = 0*/)
			{
				/*// Нет "плохих" ссылок
*/
			}
			/*// УДАЛЕНИЕ ПЛОХИХ ССЫЛОК
*/
			/*ОписаниеРезультатаУдаления = Новый Соответствие;*/
			/*ВсеЗаписиУдалены = УдалитьЗаписиНезависимыхРегистровСведений(ЗаписиКУдалению, ОписаниеРезультатаУдаления);*/
			/*// Получим представление объекта для выдачи сообщения
*/
			/*ПредставлениеОбъекта  = "";*/
			if(true/*ТипМетаданных = "Справочник"*/)
			{
				/*ПредставлениеОбъекта = НСтр("ru = 'справочник '")   + Метаданные.Справочники[ИмяОбъекта].Представление();*/
			}
			if(true/*НЕ ПустаяСтрока(ПредставлениеОбъекта)*/)
			{
				if(true/*ВсеЗаписиУдалены*/)
				{
					/*// Сообщим об успешном выполнении
*/
					/*ТекстСообщения = НСтр("ru = 'Из независимых регистров сведений удалены все записи, которые ссылались на %ПредставлениеОбъекта'");*/
					/*ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ПредставлениеОбъекта", ПредставлениеОбъекта);*/
					/*ОбщегоНазначения.Сообщение(ТекстСообщения);*/
				}
			}
			/*// СООБЩИМ ПОДРОБНЫЙ РЕЗУЛЬТАТ УДАЛЕНИЯ
*/
		}
		// Получает массив всех ссылок на указанный объект метаданных (подежащий удалению)
		//
		// Параметры:
		//  ТипМетаданных - Справочник, Документ, Перечисление
		//  ИмяОбъекта    - имя объекта метаданных
		//
		// Возвращаемое значение: Массив ссылок, включая пустую ссылку

		public object НайтиУдаляемыеЗаписи(/*ТипМетаданных, ИмяОбъекта*/)
		{
			/*// Получим массив ссылок (записей в таблицах базы данных), которые будут удалены
*/
			/*// при удалении объектов метаданных (таблиц базы данных)
*/
			/*Запрос = Новый Запрос;*/
			/*ИмяТаблицы = ТипМетаданных + "." + ИмяОбъекта;*/
			/*Запрос.Текст = 
		"ВЫБРАТЬ Ссылка ИЗ " + ИмяТаблицы + " 
		|ОБЪЕДИНИТЬ ВСЕ
		|ВЫБРАТЬ Значение(" + ИмяТаблицы + ".ПустаяСсылка)";*/
			/*РезультатЗапроса = Запрос.Выполнить();*/
			return null;
		}

		public object ОтобратьЗаписиРегистровСведений(/*ТаблицаСсылок*/)
		{
			/*ЗаписиРегистровСведений    = Новый ТаблицаЗначений();*/
			/*ЗаписиРегистровСведений.Колонки.Добавить("ИмяРегистра");*/
			/*ЗаписиРегистровСведений.Колонки.Добавить("КлючЗаписи");*/
			/*МетаданныеРегистрыСведений = Метаданные.РегистрыСведений;*/
			/*НезависимыйРежимЗаписи     = Метаданные.СвойстваОбъектов.РежимЗаписиРегистра.Независимый;*/
			return null;
		}

		public object УдалитьЗаписиНезависимыхРегистровСведений(/*ЗаписиКУдалению, ОписаниеРезультата*/)
		{
			/*ВсеЗаписиУдалены = Истина;*/
			/*ВсегоЗаписей = ЗаписиКУдалению.Количество();*/
			/*ТипЧисло     = Тип("Число");*/
			return null;
		}
		///////////////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ ОБРАБОТКИ НАКОПЛЕННЫХ ДАННЫХ (ОПЦИОНАЛЬНЫЕ)

		public void ИзменитьФорматХраненияСреднегоОтклоненияСЛУ(/**/)
		{
			/*СреднееОтклонениеСЛУ = глЗначениеПеременной("СреднееОтклонениеСЛУ");*/
			if(true/*СреднееОтклонениеСЛУ > 0 И СреднееОтклонениеСЛУ < 1*/)
			{
				/*Константы.СреднееОтклонениеСЛУ.Установить(-Log10(СреднееОтклонениеСЛУ));*/
			}
		}
	}
}

