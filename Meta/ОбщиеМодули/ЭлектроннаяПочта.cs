using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class ЭлектроннаяПочта
	{
		////////////////////////////////////////////////////////////////////////////////
		// МОДУЛЬ СОДЕРЖИТ РЕАЛИЗАЦИЮ МЕХАНИКИ РАБОТЫ С ЭЛЕКТРОННЫМИ СООБЩЕНИЯМИ
		// (программные интерфейсы для внешнего использования)
		//
		// Функция для отправки сообщений. Проверяет корректность заполнения учетной
		// записи и вызывает функцию реализующую механику отправки
		//
		// см. параметры функции ОтправитьСообщение
		//

		public object ОтправитьПочтовоеСообщение(/*знач УчетнаяЗапись,
								   знач ПараметрыПисьма*/)
		{
			if(true/*ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")
	   ИЛИ НЕ ЗначениеЗаполнено(УчетнаяЗапись)*/)
			{
				/*ВызватьИсключение НСтр("ru = 'Учетная запись не заполнена или заполнена не правильно'");*/
			}
			if(true/*ПараметрыПисьма = Неопределено*/)
			{
				/*ВызватьИсключение НСтр("ru = 'Не заданы параметры отправки.'");*/
			}
			/*Кому = "";*/
			if(true/*ПараметрыПисьма.Свойство("Кому", Кому)*/)
			{
				if(true/*ТипЗнч(Кому) = Тип("Строка")*/)
				{
					/*ПараметрыПисьма.Кому = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Кому);*/
				}
			}
			/*Копии = "";*/
			if(true/*ПараметрыПисьма.Свойство("Копии", Копии)*/)
			{
				if(true/*ТипЗнч(Копии) = Тип("Строка")*/)
				{
					/*ПараметрыПисьма.Копии = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Копии);*/
				}
			}
			/*СлепыеКопии = "";*/
			if(true/*ПараметрыПисьма.Свойство("СлепыеКопии", СлепыеКопии)*/)
			{
				if(true/*ТипЗнч(СлепыеКопии) = Тип("Строка")*/)
				{
					/*ПараметрыПисьма.СлепыеКопии = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(СлепыеКопии);*/
				}
			}
			/*АдресОтвета = Неопределено;*/
			/*// проверяем правильную заполненность АдресаОтвета
*/
			if(true/*ПараметрыПисьма.Свойство("АдресОтвета", АдресОтвета)*/)
			{
				/*ПараметрыПисьма.АдресОтвета = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(АдресОтвета);*/
			}
			/*Вложения = Неопределено;*/
			if(true/*ПараметрыПисьма.Свойство("Вложения", Вложения)*/)
			{
				/*ПараметрыПисьма.Вложения = Вложения;*/
			}
			return null;
		}
		// Функция для загрузки сообщений. Проверяет корректность заполнения учетной
		// записи и вызывает функцию реализующую механику загрузки сообщений.
		//
		// параметры к функции см. в функции ЗагрузитьСообщения
		//

		public object ЗагрузитьПочтовыеСообщения(/*знач УчетнаяЗапись,
								   знач ПараметрыЗагрузки = Неопределено*/)
		{
			if(true/*НЕ УчетнаяЗапись.ИспользоватьДляПолучения*/)
			{
				/*ВызватьИсключение НСтр("ru = 'Учетная запись не предназначена для получения сообщений.'");*/
			}
			if(true/*ПараметрыЗагрузки = Неопределено*/)
			{
				/*ПараметрыЗагрузки = Новый Структура;*/
			}
			/*Результат = ЗагрузитьСообщения(УчетнаяЗапись, ПараметрыЗагрузки);*/
			return null;
		}
		// Получает ссылку на учетную запись по виду назначения учетной записи
		// Параметры:
		// ВидНазначенияУчетнойЗаписи - Перечисления.ВидыНазначенияУчетныхЗаписей -
		//                 вид назначения учетной записи
		// Возвращаемое значение:
		// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - ссылка
		//                 на описание учетной записи
		//

		public object ПолучитьСистемнуюУчетнуюЗапись(/**/)
		{
			return null;
		}
		// Получить доступные учетные записи электронной почты
		// Параметры:
		// ДляОтправки - Булево - Если установлено Истина, то будут выбирать только записи, с которых можно отправлять почту
		// ДляПолучения   - Булево - Если установлено Истина, то будут выбирать только записи, по которым можно получать почту
		// ВключатьСистемнуюУчетнуюЗапись - Булево - включать системную учетную запись, если доступна
		//
		// Возвращаемое значение:
		// ДоступныеУчетныеЗаписи - ТаблицаЗначений - С колонками:
		//    Ссылка       - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - Ссылка на учетную запись
		//    Наименование - Строка - Наименование учетной записи
		//    Адрес        - Строка - Адрес электронной почты
		//

		public object ПолучитьДоступныеУчетныеЗаписи(/*знач ДляОтправки = Неопределено,
										знач ДляПолучения  = Неопределено,
										знач ВключатьСистемнуюУчетнуюЗапись = Истина*/)
		{
			if(true/*Не ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты)*/)
			{
			}
			/*ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка				КАК Ссылка,
		|	УчетныеЗаписиЭлектроннойПочты.Наименование			КАК Наименование,
		|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты КАК Адрес
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
		|ГДЕ";*/
			if(true/*ДляОтправки <> Неопределено*/)
			{
				/*ТекстЗапроса = ТекстЗапроса + "
		|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляОтправки = &ДляОтправки";*/
			}
			if(true/*ДляПолучения <> Неопределено*/)
			{
				if(true/*ДляОтправки <> Неопределено*/)
				{
					/*ТекстЗапроса = ТекстЗапроса + "
			| И";*/
				}
				/*ТекстЗапроса = ТекстЗапроса + "
		|	УчетныеЗаписиЭлектроннойПочты.ИспользоватьДляПолучения = &ДляПолучения";*/
			}
			if(true/*НЕ ВключатьСистемнуюУчетнуюЗапись*/)
			{
				/*ТекстЗапроса =ТекстЗапроса + "
		|	И УчетныеЗаписиЭлектроннойПочты.Ссылка <> Значение(Справочник.УчетныеЗаписиЭлектроннойПочты.СистемнаяУчетнаяЗаписьЭлектроннойПочты)";*/
			}
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = ТекстЗапроса;*/
			/*Запрос.Параметры.Вставить("ДляОтправки", ДляОтправки);*/
			/*Запрос.Параметры.Вставить("ДляПолучения", ДляПолучения);*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Функция отправления - непосредственная реализация механики отправления
		// электронного сообщения
		//
		// Функция, реализующая механику отправки сообщения электронной почты
		//
		// Параметры:
		// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - ссылка на
		//                 учетную запись электронной почты
		// ПараметрыПисьма - структура - содержит всю необходимую информацию о письме:
		//                   содержит следующие ключи:
		//    Кому*      - Массив структур, строка - интернет адрес получателя письма
		//                 Адрес         - строка - почтовый адрес
		//                 Представление - строка - имя адресата
		//    Копии      - массив структур, строка - интернет адреса получателей письма
		//                 используется при формировании письма для поля копий
		//                 в случае массива структур, формат каждой структуры:
		//                 Адрес         - строка - почтовый адрес (должно быть обязательно заполнено)
		//                 Представление - строка - имя адресата
		//    СлепыеКопии - массив структур, строка - интернет адреса получателей письма
		//                 используется при формировании письма для поля скрытых копий
		//                 в случае массива структур, формат каждой структуры:
		//                 Адрес         - строка - почтовый адрес (должно быть обязательно заполнено)
		//                 Представление - строка - имя адресата
		//
		//    Тема*      - строка - тема почтового сообщения
		//    Тело*      - тело почтового сообщения (простой текст в кодировке win-1251)
		//    Вложения   - соответствие
		//                 ключ     - наименованиеВложения - строка - наименование вложения
		//                 значение - ДвоичныеДанные - данные вложения
		//
		// дополнительные ключи структуры, которые могут использоваться:
		//    АдресОтвета - соответствие - см. такие же поля как и кому
		//    Пароль      - строка - пароль для доступа учетной записи
		//    ТипТекста   - Строка / Перечисление.ТипыТекстовЭлектронныхПисем/ТипТекстаПочтовогоСообщения  определяет тип переданного теста
		//                  допустимые значения:
		//                  HTML/ТипыТекстовЭлектронныхПисем.HTML - текст почтового сообщения в формате HTML
		//                  ПростойТекст/ТипыТекстовЭлектронныхПисем.ПростойТекст - простой текст почтового сообщения. Отображается "как есть" (значение по умолчанию)
		//                  РазмеченныйТекст/ТипыТекстовЭлектронныхПисем.РазмеченныйТекст - текст почтового сообщения в формате Rich Text
		//
		//    прим.: параметры письма помеченные символом '*' являются обязательными
		//           т.е. к началу работы функции считается что они уже заполнены
		//
		// Возвращаемое значение:
		// Строка - идентификатор отправленного почтового сообщения на smtp сервере
		//
		// ПРИМЕЧАНИЕ: функция может вызвать исключение, которое требуется обработать
		//

		public object ОтправитьСообщение(/*знач УчетнаяЗапись,
						   знач ПараметрыПисьма*/)
		{
			/*// Объявление переменных перед первым использованием в качестве
*/
			/*// параметра метода Свойство структуры ПараметрыПисьма.
*/
			/*// Переменные содержат значения переданных в функцию параметров.
*/
			if(true/*Не ПараметрыПисьма.Свойство("Тема", Тема)*/)
			{
				/*Тема = "";*/
			}
			if(true/*Не ПараметрыПисьма.Свойство("Тело", Тело)*/)
			{
				/*Тело = "";*/
			}
			/*Кому = ПараметрыПисьма.Кому;*/
			if(true/*ТипЗнч(Кому) = Тип("Строка")*/)
			{
				/*Кому = ОбщегоНазначенияКлиентСервер.РазобратьСтрокуСПочтовымиАдресами(Кому);*/
			}
			/*ПараметрыПисьма.Свойство("Вложения", Вложения);*/
			/*Письмо = Новый ИнтернетПочтовоеСообщение;*/
			/*Письмо.Тема = Тема;*/
			/*// формируем адрес получателя	
*/
			if(true/*ПараметрыПисьма.Свойство("Копии", Копии)*/)
			{
				/*// формируем адрес получателя поля Копии
*/
			}
			if(true/*ПараметрыПисьма.Свойство("СлепыеКопии", СлепыеКопии)*/)
			{
				/*// формируем адрес получателя поля Копии
*/
			}
			/*// формируем адрес ответа, если необходимо
*/
			if(true/*ПараметрыПисьма.Свойство("АдресОтвета", АдресОтвета)*/)
			{
			}
			/*// добавляем к письму имя отправителя
*/
			/*Письмо.ИмяОтправителя              = УчетнаяЗапись.Наименование;*/
			/*Письмо.Отправитель.ОтображаемоеИмя = УчетнаяЗапись.Наименование;*/
			/*Письмо.Отправитель.Адрес           = УчетнаяЗапись.АдресЭлектроннойПочты;*/
			/*// добавляем вложения к письму
*/
			if(true/*Вложения <> Неопределено*/)
			{
			}
			/*// Установим строку с идентификаторами оснований
*/
			if(true/*ПараметрыПисьма.Свойство("ИдентификаторыОснований")*/)
			{
				/*Письмо.УстановитьПолеЗаголовка("References", ПараметрыПисьма.ИдентификаторыОснований);*/
			}
			/*// добавляем текст
*/
			/*Текст = Письмо.Тексты.Добавить(Тело);*/
			if(true/*ПараметрыПисьма.Свойство("ТипТекста", ТипТекста)*/)
			{
				if(true/*ТипЗнч(ТипТекста) = Тип("Строка")*/)
				{
					if(true/*ТипТекста = "HTML"*/)
					{
						/*Текст.ТипТекста = ТипТекстаПочтовогоСообщения.HTML;*/
					}
				}
			}
			/*// Зададим важность
*/
			/*Важность = Неопределено;*/
			if(true/*ПараметрыПисьма.Свойство("Важность", Важность)*/)
			{
				/*Письмо.Важность = Важность;*/
			}
			/*// Зададим кодировку
*/
			/*Кодировка = Неопределено;*/
			if(true/*ПараметрыПисьма.Свойство("Кодировка", Кодировка)*/)
			{
				/*Письмо.Кодировка = Кодировка;*/
			}
			if(true/*ПараметрыПисьма.Свойство("Пароль")*/)
			{
				/*Профиль = СформироватьИнтернетПрофиль(УчетнаяЗапись, ПараметрыПисьма.Пароль);*/
			}
			/*Соединение = Новый ИнтернетПочта;*/
			/*Соединение.Подключиться(Профиль);*/
			/*Соединение.Послать(Письмо);*/
			/*Соединение.Отключиться();*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Функция просмотра почты - непосредственная реализация механики отправления
		// электронного сообщения
		//
		// Функция, реализующая механику загрузки сообщений с сервера электронной почты
		// для указанной учетной записи электронной почты
		//
		// Параметры:
		// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - ссылка на
		//                 учетную запись электронной почты
		//
		// ПараметрыЗагрузки - структура
		// ключ "Колонки" - массив - массив строк названий колонок
		//                  названия колонок должны соответствовать полям объекта
		//                  ИнтернетПочтовоеСообщение
		// ключ "РежимТестирования" - булево - если Истина то вызов сделан в режиме тестирования
		//                            учетной записи - при этом выборка писем происходит,
		//                            но в возвращаемом значении они не попадают; по умолчанию
		//                            режим тестирования отключен
		// ключ "ПолучениеЗаголовков" - булево - если Истина то в возвращаемом наборе есть только
		//                                       заголовки писем
		// ЗаголовкиИдентификаторы - массив - заголовки или идентификаторы сообщений, полные
		//                                    сообщения по которым требуется получить
		// ПриводитьСообщенияКТипу - Булево - возвращать набор полученных почтовых сообщений
		//                                    в виде таблицы значений, с простыми типами
		//                                    по умолчанию Истина
		//
		// ключ "Пароль" - строка - пароль для доступа к POP3
		//
		// Возвращаемое значение:
		// НаборСообщений*- таблица значений, содержит адаптированный вариант списка сообщений на сервере
		//                 Колонки таблицы значений (по умолчанию):
		//                 Важность, Вложения**, ДатаОтправления, ДатаПолучения, Заголовок, ИмяОтправителя,
		//                 Идентификатор, Копии, Обратный адрес, Отправитель, Получатели, Размер, Тексты,
		//                 Кодировка, СпособКодированияНеASCIIСимволов, Частичное
		//                 заполняется если статус Истина
		//
		// Прим. * - в режиме тестирования не участвует в формировании возвращаемого значения
		// Прим. ** - в случае, если вложениями являются другие почтовые сообщения,
		//            они сами не возвращаются но возвращаются их вложения - двоичные
		//            данные и их тексты в виде двоичных данных, рекурсивно
		//

		public object ЗагрузитьСообщения(/*знач УчетнаяЗапись,
						   знач ПараметрыЗагрузки = Неопределено*/)
		{
			/*// Используется для проверки возможности входа на почтовый ящик
*/
			/*// Получать только заголовки писем
*/
			/*// Приводить почтовые сообщения к простому типу;
*/
			/*// Заголовки или идентификаторы писем, полные сообщения по которым требуется получить
*/
			if(true/*ПараметрыЗагрузки.Свойство("РежимТестирования")*/)
			{
				/*РежимТестирования = ПараметрыЗагрузки.РежимТестирования;*/
			}
			if(true/*ПараметрыЗагрузки.Свойство("ПолучениеЗаголовков")*/)
			{
				/*ПолучениеЗаголовков = ПараметрыЗагрузки.ПолучениеЗаголовков;*/
			}
			if(true/*ПараметрыЗагрузки.Свойство("Пароль")*/)
			{
				/*Профиль = СформироватьИнтернетПрофиль(УчетнаяЗапись, ПараметрыЗагрузки.Пароль);*/
			}
			if(true/*ПараметрыЗагрузки.Свойство("ЗаголовкиИдентификаторы")*/)
			{
				/*ЗаголовкиИдентификаторы = ПараметрыЗагрузки.ЗаголовкиИдентификаторы;*/
			}
			/*НаборСообщенийДляУдаления = Новый Массив;*/
			/*Соединение = Новый ИнтернетПочта;*/
			/*Соединение.Подключиться(Профиль);*/
			if(true/*РежимТестирования ИЛИ ПолучениеЗаголовков*/)
			{
				/*НаборПисем = Соединение.ПолучитьЗаголовки();*/
			}
			/*Соединение.Отключиться();*/
			if(true/*РежимТестирования*/)
			{
			}
			if(true/*ПараметрыЗагрузки.Свойство("ПриводитьСообщенияКТипу")*/)
			{
				/*ПриводитьСообщенияКТипу = ПараметрыЗагрузки.ПриводитьСообщенияКТипу;*/
			}
			if(true/*ПриводитьСообщенияКТипу*/)
			{
				if(true/*ПараметрыЗагрузки.Свойство("Колонки")*/)
				{
					/*НаборСообщений = ПолучитьАдаптированныйНаборПисем(НаборПисем, ПараметрыЗагрузки.Колонки);*/
				}
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Блок системных и вспомогательных функций подсистемы
		//
		// По переданной ссылке на учетную запись формирует профиль почтового соединения
		//
		// Параметры
		// УчетнаяЗапись - СправочникСсылка.УчетнаяЗаписьЭлектроннойПочты -
		//                 параметры профиля в виде соответствия
		//
		// Возвращаемое значение
		// Почтовый профиль (тип ИнтернетПочтовыйПрофиль)
		//

		public object СформироватьИнтернетПрофиль(/*знач УчетнаяЗапись,
									знач Пароль = Неопределено,
									знач ФормироватьSMTPПрофиль = Истина,
									знач ФормироватьPOP3Профиль = Истина*/)
		{
			/*Профиль = Новый ИнтернетПочтовыйПрофиль;*/
			/*Профиль.Пользователь = УчетнаяЗапись.Логин;*/
			/*Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжиданияСервера;*/
			if(true/*ЗначениеЗаполнено(Пароль)*/)
			{
				/*Профиль.Пароль = Пароль;*/
			}
			if(true/*ФормироватьSMTPПрофиль*/)
			{
				/*Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;*/
				/*Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;*/
				if(true/*УчетнаяЗапись.ТребуетсяSMTPАутентификация*/)
				{
					/*Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;*/
					/*Профиль.ПользовательSMTP = УчетнаяЗапись.ЛогинSMTP;*/
					/*Профиль.ПарольSMTP       = УчетнаяЗапись.ПарольSMTP;*/
				}
			}
			if(true/*ФормироватьPOP3Профиль*/)
			{
				/*Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;*/
				/*Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;*/
				/*Профиль.АутентификацияPOP3 = СпособPOP3Аутентификации.Обычная;*/
			}
			return null;
		}
		// Функция записывает адаптированный набор писем по переданным колонкам.
		// Значения колонок, типы которых не поддерживаются для оперирования на клиенте
		// преобразуются к строковому виду.
		//

		public object ПолучитьАдаптированныйНаборПисем(/*знач НаборПисем, знач Колонки = Неопределено*/)
		{
			/*Результат = СоздатьАдаптированноеОписаниеПисьма(Колонки);*/
			return null;
		}

		public void ЗаполнитьВложенныеВложения(/*Вложения, ИмяВложения, ИнтернетПочтовоеСообщение*/)
		{
			/*Индекс = 0;*/
		}
		// Функция подготавливает таблицу, в которой впоследствии будут
		// храниться сообщения с почтового сервера.
		//
		// Параметры
		// Колонки - строка - список полей письма, через запятую, которые должны
		//                    быть записаны в таблицу. Параметр меняет тип на массив.
		// Возвращаемое значение
		// ТаблицаЗначений - пустая таблица значений с колонками
		//

		public object СоздатьАдаптированноеОписаниеПисьма(/*Колонки = Неопределено*/)
		{
			if(true/*Колонки <> Неопределено
	   И ТипЗнч(Колонки) = Тип("Строка")*/)
			{
				/*Колонки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(Колонки, ",");*/
			}
			/*МассивКолонокПоУмолчанию = Новый Массив;*/
			/*МассивКолонокПоУмолчанию.Добавить("Важность");*/
			/*МассивКолонокПоУмолчанию.Добавить("Вложения");*/
			/*МассивКолонокПоУмолчанию.Добавить("ДатаОтправления");*/
			/*МассивКолонокПоУмолчанию.Добавить("ДатаПолучения");*/
			/*МассивКолонокПоУмолчанию.Добавить("Заголовок");*/
			/*МассивКолонокПоУмолчанию.Добавить("ИмяОтправителя");*/
			/*МассивКолонокПоУмолчанию.Добавить("Идентификатор");*/
			/*МассивКолонокПоУмолчанию.Добавить("Копии");*/
			/*МассивКолонокПоУмолчанию.Добавить("ОбратныйАдрес");*/
			/*МассивКолонокПоУмолчанию.Добавить("Отправитель");*/
			/*МассивКолонокПоУмолчанию.Добавить("Получатели");*/
			/*МассивКолонокПоУмолчанию.Добавить("Размер");*/
			/*МассивКолонокПоУмолчанию.Добавить("Тема");*/
			/*МассивКолонокПоУмолчанию.Добавить("Тексты");*/
			/*МассивКолонокПоУмолчанию.Добавить("Кодировка");*/
			/*МассивКолонокПоУмолчанию.Добавить("СпособКодированияНеASCIIСимволов");*/
			/*МассивКолонокПоУмолчанию.Добавить("Частичное");*/
			if(true/*Колонки = Неопределено*/)
			{
				/*Колонки = МассивКолонокПоУмолчанию;*/
			}
			/*Результат = Новый ТаблицаЗначений;*/
			return null;
		}
		// Возвращает указан ли в учетной записи пароль или нет
		//

		public object ПарольЗадан(/*УчетнаяЗапись*/)
		{
			return null;
		}
		// Служебная функция используется для проверки учетной записи электронной почты.
		//

		public void ПроверитьВозможностьОтправкиИПолученияЭлектроннойПочты(/*УчетнаяЗапись, ПарольПараметр, СообщениеОбОшибке, ДополнительноеСообщение*/)
		{
			/*СообщениеОбОшибке = "";*/
			/*ДополнительноеСообщение = "";*/
			if(true/*УчетнаяЗапись.ИспользоватьДляОтправки*/)
			{
				/*Попытка
			ПроверитьВозможностьОтправкиТестовогоСообщения(УчетнаяЗапись, ПарольПараметр);*/
				/*Исключение
			СообщениеОбОшибке = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									НСтр("ru = 'Ошибка при отправке сообщения: %1'"),
									КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) );*/
				/*КонецПопытки;*/
			}
			if(true/*УчетнаяЗапись.ИспользоватьДляПолучения*/)
			{
				/*Попытка
			ПроверитьВходНаСерверВходящейЭлектроннойПочты(УчетнаяЗапись, ПарольПараметр);*/
				if(true/*ЗначениеЗаполнено(СообщениеОбОшибке)*/)
				{
					/*СообщениеОбОшибке = СообщениеОбОшибке + Символы.ПС;*/
				}
				/*СообщениеОбОшибке = СообщениеОбОшибке
								+ СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
										НСтр("ru = 'Ошибка доступа к серверу входящих сообщений: %1'"),
										КраткоеПредставлениеОшибки(ИнформацияОбОшибке()) );*/
				/*КонецПопытки;*/
			}
		}
		// Процедура проверяющая возможность отправления почтового сообщения через
		// учетную запись
		//
		// Параметры
		// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись,
		//                 которую необходимо проверить
		//
		// Возвращаемое значение
		// структура
		// ключ "статус" - булево, если Истина - успешно вошли на сервер pop3
		//                 если Ложь - ошибка при входе на сервер pop3
		// ключ "СообщениеОбОшибке" - строка - если статус Ложь - содержит сообщение об ошибке
		//

		public void ПроверитьВозможностьОтправкиТестовогоСообщения(/*знач УчетнаяЗапись,
														знач Пароль = Неопределено*/)
		{
			/*ПараметрыПисьма = Новый Структура;*/
			/*ПараметрыПисьма.Вставить("Тема", НСтр("ru = 'Тестовое сообщение 1С:Предприятие'"));*/
			/*ПараметрыПисьма.Вставить("Тело", НСтр("ru = 'Это сообщение отправлено подсистемой электронной почты 1С:Предприятие'"));*/
			/*ПараметрыПисьма.Вставить("Кому", УчетнаяЗапись.АдресЭлектроннойПочты);*/
			if(true/*Пароль <> Неопределено*/)
			{
				/*ПараметрыПисьма.Вставить("Пароль", Пароль);*/
			}
			/*ОтправитьПочтовоеСообщение(УчетнаяЗапись, ПараметрыПисьма);*/
		}
		// Процедура проверяющая возможность получения почтового сообщения через
		// учетную запись
		//
		// Параметры
		// УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты - учетная запись,
		//                 которую необходимо проверить
		//
		// Возвращаемое значение
		// структура
		// ключ "статус" - булево, если Истина - успешно вошли на сервер pop3
		//                 если Ложь - ошибка при входе на сервер pop3
		// ключ "СообщениеОбОшибке" - строка - если статус Ложь - содержит сообщение об ошибке
		//

		public void ПроверитьВходНаСерверВходящейЭлектроннойПочты(/*знач УчетнаяЗапись,
														знач Пароль = Неопределено*/)
		{
			/*ПараметрыЗагрузки = Новый Структура("РежимТестирования", Истина);*/
			if(true/*Пароль <> Неопределено*/)
			{
				/*ПараметрыЗагрузки.Вставить("Пароль", Пароль);*/
			}
			/*ЗагрузитьПочтовыеСообщения(УчетнаяЗапись, ПараметрыЗагрузки);*/
		}
	}
}

