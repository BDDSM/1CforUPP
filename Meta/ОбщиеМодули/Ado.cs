using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class Ado
	{

		public object ЗаполнитьСервер(/*ССИБ, Server, Base*/)
		{
			//Server	= "10.0.102.75,6586";
			//Base	= "TestCLR2008";
			return null;
		}
		//**************************    **************************    **************************//
		//Рекомендуется:
		//            - Создать модуль ADO //Название модуля имеет значение только для регламента.
		//            - Глобальный: Нет
		//________________________________________________________________________________________
		//            - Клиент (Управляемое приложение): Нет
		//            - Сервер: Да
		//            - Внешнее соединение: Да
		//            - Клиент (Обычное приложение): Да
		//________________________________________________________________________________________
		//            - Вызов сервера: Нет
		//            - Привелигированный: Нет
		//            - Повторное использование возвращаемых значений: Не использовать.
		//
		//**************************    **************************    **************************//
		//**************************    **************************    **************************//

		public object ВыполнитьSQL(/*SQL,ЗапросSQL,тз = Неопределено,ОписаниеОшибки = Неопределено*/)
		{
			return null;
		}
		//**************************    **************************    **************************//

		public object ОчисткаОшибки(/*стр*/)
		{
			//стр = СтрЗаменить(стр,"Произошла исключительная ситуация (Microsoft OLE DB Provider for ODBC Drivers):","");
			//стр = СтрЗаменить(стр,"[Microsoft][ODBC SQL Server Driver][SQL Server]","");
			return null;
		}
		//**************************    **************************    **************************//

		public object ВывестиОшибку(/*SQL,ТекстОшибки,ОписаниеОшибки*/)
		{
			if(true/*ТипЗнч(ТекстОшибки) = Тип("ИнформацияОбОшибке")*/)
			{
				//ТекстОшибки = ?(ТекстОшибки.Причина=Неопределено,ТекстОшибки.Описание,ТекстОшибки.Причина.Описание);
			}
			//ТекстОшибки = ОчисткаОшибки(ТекстОшибки);
			if(true/*ОписаниеОшибки = Неопределено*/)
			{
				//Сообщить("База:'"+SQL.idDb+"' Ошибка объекта: Database "+Символы.ПС+ТекстОшибки);
			}
			return null;
		}
		//**************************    **************************    **************************//

		public object СоздатьКонтекстSQL(/*idDb=""*/)
		{
			return null;
		}
		//**************************    **************************    **************************//

		public object ВыполнитьNET(/*SQL,ЗапросSQL,Объект = Неопределено,Схема = "",Параметры = "",ОписаниеОшибки = Неопределено*/)
		{
			if(true/*SQL = Неопределено*/)
			{
				//SQL = СоздатьКонтекстSQL();
			}
			if(true/*SQL.Command = Неопределено*/)
			{
				/*//ССИБ - СтрокаСоединенияИнформационнойБазы в нижнем регистре, без порта кластера.
*/
				//ССИБ	= Нрег(СтрокаСоединенияИнформационнойБазы());
				//ССИБ	= ?(Найти(ССИБ,":"),Лев(ССИБ,Найти(ССИБ,":")-1)+Сред(ССИБ,Найти(ССИБ,":")+5),ССИБ);
				//Server	= "";
				/*//Адресс сервера
*/
				//Base	= "";
				/*//Имя базы данных в которой находится сборка. Основная база или транспортный узел.
*/
				//ЗаполнитьСервер(ССИБ, Server, Base);
				//Database						= Новый  COMОбъект("ADODB.Connection");
				//Database.ConnectionTimeout		= 10;
				//Database.CommandTimeout			= 0;
				//Database.CursorLocation			= 3;
				//Database.ConnectionString		= "driver={SQL Server};server="+Server+";Database="+Base+";APP=App;Trusted_Connection=True;";
				/*//uid=User;pwd=PassWord;";
*/
				//Command						= Новый COMОбъект("ADODB.Command");
				//Command.CommandTimeout      = 180;
				//Command.ActiveConnection	= Database;
				//SQL.Command					= Command;
			}
			if(true/*Параметры=Неопределено*/)
			{
				//стрПараметры = "";
			}
			//SQL.Command.CommandText     = "Select dbo.V82Pack ('"+СтрЗаменить(ЗапросSQL,"'","''")+"','"+Схема+"','"+СтрЗаменить(стрПараметры,"'","''")+"','"+SQL.idDb+"')";
			return null;
		}
		//**************************    **************************    **************************//

		public object ВыполнитьСкляр(/*SQL,ЗапросSQL,Объект = Неопределено,ОписаниеОшибки = Неопределено*/)
		{
			if(true/*SQL = Неопределено*/)
			{
				//SQL = СоздатьКонтекстSQL();
			}
			if(true/*SQL.Command = Неопределено*/)
			{
				/*//ССИБ - СтрокаСоединенияИнформационнойБазы в нижнем регистре, без порта кластера.
*/
				//ССИБ	= Нрег(СтрокаСоединенияИнформационнойБазы());
				//ССИБ	= ?(Найти(ССИБ,":"),Лев(ССИБ,Найти(ССИБ,":")-1)+Сред(ССИБ,Найти(ССИБ,":")+5),ССИБ);
				//Server	= "";
				/*//Адресс сервера
*/
				//Base	= "";
				/*//Имя базы данных в которой находится сборка. Основная база или транспортный узел.
*/
				//ЗаполнитьСервер(ССИБ, Server, Base);
				//Database						= Новый  COMОбъект("ADODB.Connection");
				//Database.ConnectionTimeout		= 10;
				//Database.CommandTimeout			= 0;
				//Database.CursorLocation			= 3;
				//Database.ConnectionString		= "driver={SQL Server};server="+Server+";Database="+Base+";APP=App;Trusted_Connection=True;";
				/*//uid=User;pwd=PassWord;";
*/
				//Command						= Новый COMОбъект("ADODB.Command");
				//Command.CommandTimeout      = 180;
				//Command.ActiveConnection	= Database;
				//SQL.Command					= Command;
			}
			//SQL.Command.CommandText     = ЗапросSQL;
			return null;
		}
		//**************************    **************************    **************************//

		public object ФильтрБулево(/*Значение*/)
		{
			return null;
		}
		//**************************    **************************    **************************//

		public object ФильтрЧисло(/*Значение*/)
		{
			//Возврат Формат(Значение,"ЧН=0; ЧГ=0");
			return null;
		}
		//**************************    **************************    **************************//

		public object ФильтрДата(/*Значение*/)
		{
			//Возврат "'"+Формат(Значение,"ДФ='yyyyMMdd HH:mm:ss'")+"'";
			return null;
		}
		//**************************    **************************    **************************//

		public object ФильтрСтрока(/*Значение*/)
		{
			return null;
		}
		//**************************    **************************    **************************//

		public object ФильтрСсылка(/*Значение*/)
		{
			//стр = ЗначениеВСтрокуВнутр(Значение);
			return null;
		}
		//**************************    **************************    **************************//

		public object ФильтрОбъект(/*Значение*/)
		{
			return null;
		}
		//**************************    **************************    **************************//

		public object ФильтрЗначения(/*Значение*/)
		{
			if(true/*ТипЗнч(Значение) = тип("Булево")*/)
			{
			}
			return null;
		}
		//**************************    **************************    **************************//

		public object ФильтрМассива(/*Массив*/)
		{
			if(true/*Массив.Количество() = 0*/)
			{
			}
			//стр = "";
			return null;
		}
		//**************************    **************************    **************************//

		public object ФильтрСтруктуры(/*Структура*/)
		{
			if(true/*Структура.Количество() = 0*/)
			{
			}
			//стр = "";
			return null;
		}
		//**************************    **************************    **************************//
	}
}
