using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class ПроцедурыОбменаДаннымиКлиент
	{

		public void ИзменитьНастройкиВыгрузкиДляВыделенныхСтрок(/*ЭлементыФормы*/)
		{
			//ВыделенныеСтроки = ЭлементыФормы.НастройкаВыгрузкиДанных.ВыделенныеСтроки;
			if(true/*ВыделенныеСтроки.Количество() = 0*/)
			{
			}
			//СписокЗначений = Новый СписокЗначений();
			//СписокЗначений.Добавить("Выгружать");
			//СписокЗначений.Добавить("Только по ссылке");
			//СписокЗначений.Добавить("Не выгружать");
			//ВыбранныйЭлемент = СписокЗначений.ВыбратьЭлемент("Укажите вариант выгрузки", СписокЗначений.НайтиПоЗначению(ОпределитьПоданнымСтрокиНастройкиИмяВыгрузки(ВыделенныеСтроки[0])));
			if(true/*ВыбранныйЭлемент = Неопределено*/)
			{
			}
		}

		public void НастройкаВыгрузкиДанныхПриПолученииДанных(/*Элемент, ОформленияСтрок*/)
		{
		}

		public object ОпределитьПоданнымСтрокиНастройкиИмяВыгрузки(/*ДанныеСтроки*/)
		{
			if(true/*НЕ ДанныеСтроки.ВыгружатьДанные*/)
			{
			}
			return null;
		}

		public void ОпределитьИмяВыгрузкиЭлементаПоСтрокеНастройки(/*Элемент*/)
		{
			if(true/*Элемент.ТекущиеДанные = Неопределено*/)
			{
			}
			if(true/*Элемент.ТекущаяКолонка.Имя <> "НастройкаВыгрузки"*/)
			{
			}
			//Элемент.ТекущаяКолонка.ЭлементУправления.Значение = ОпределитьПоданнымСтрокиНастройкиИмяВыгрузки(Элемент.ТекущиеДанные);
		}

		public void УстановитьПараметрыСтрокиВыгрузокПоВыбранномуЗначению(/*ЭлементыФормы, Значение, СтрокаВыбора = Неопределено*/)
		{
			if(true/*СтрокаВыбора = Неопределено*/)
			{
				//СтрокаВыбора = ЭлементыФормы.НастройкаВыгрузкиДанных.ТекущиеДанные;
			}
			if(true/*Значение = "Не выгружать"*/)
			{
				//СтрокаВыбора.ВыгружатьДанные = Ложь;
				//СтрокаВыбора.ВыгружатьПоСсылке = Ложь;
			}
		}

		public void ОбработатьИзменениеПрефиксаДляОбъектов(/*Элемент*/)
		{
			if(true/*Не ЗначениеЗаполнено(Элемент.Значение)*/)
			{
			}
		}

		public object ПолучитьСообщениеСИнформациейОМетаданном(/*МетаданныеОбъекта*/)
		{
			//ИмяТаблицыДляПоискаЗарегистрированных = "";
			if(true/*МетаданныеОбъекта = "Константы"*/)
			{
				//ИмяТаблицыДляПоискаЗарегистрированных = "Константы";
			}
			return null;
		}

		public object СформироватьИмяКонфигурацииДляОтображенияПользователю(/*СтруктураКонвертации, ИмяОпределения*/)
		{
			//ИмяКонфигурации = "";
			//СтруктураКонвертации.Свойство("СинонимКонфигурации" + ИмяОпределения + "а", ИмяКонфигурации);
			if(true/*Не ЗначениеЗаполнено(ИмяКонфигурации)*/)
			{
				//СтруктураКонвертации.Свойство(ИмяОпределения, ИмяКонфигурации);
			}
			if(true/*Не ЗначениеЗаполнено(ИмяКонфигурации)*/)
			{
			}
			//ТочнаяВерсия = "";
			//СтруктураКонвертации.Свойство("ВерсияКонфигурации" + ИмяОпределения + "а", ТочнаяВерсия);
			if(true/*ЗначениеЗаполнено(ТочнаяВерсия)*/)
			{
				//ИмяКонфигурации = ИмяКонфигурации + " (" + ТочнаяВерсия + ")";
			}
			return null;
		}

		public void ПоказатьПоНастройкеОбменаИнформациюОПравилах(/*НастройкиОбмена, ЭтоВыгрузкаИзТекущейИБ = Истина*/)
		{
			//ИнформацияОПравилах = ПолучитьПоНастройкеОбменаИнформациюОПравилах(НастройкиОбмена, ЭтоВыгрузкаИзТекущейИБ);
			//Предупреждение(ИнформацияОПравилах);
		}

		public object ПолучитьПоНастройкеОбменаИнформациюОПравилах(/*НастройкиОбмена, ЭтоВыгрузкаИзТекущейИБ = Истина*/)
		{
			return null;
		}

		public void ПоказатьСоответствиеУзлаПланаОбменаИПравилОбмена(/*УзелПланаОбмена, ОбработкаОбменаДаннымиXML, ТаблицаТиповПравилВыгрузки*/)
		{
			//ТаблицаМетаданныхПланаОбмена = Новый ТаблицаЗначений;
			//ТаблицаМетаданныхПланаОбмена.Колонки.Добавить("МетаданныеОбъекта");
			/*// анализируем информацию по плану обмена
*/
			//МетаданныеУзлаОбмена = УзелПланаОбмена.Метаданные();
			//НужноДобавитьКонстанты = Ложь;
			if(true/*НужноДобавитьКонстанты*/)
			{
				//СтрокаТаблицы = ТаблицаМетаданныхПланаОбмена.Добавить();
				//СтрокаТаблицы.МетаданныеОбъекта = "Константы";
			}
			//ЕстьВПравилеНоНетвПлане = Ложь;
			//СписокРезультата = Новый СписокЗначений;
			/*// остается сравнить две таблицы и показать различия...
*/
			//СписокРезультата.СортироватьПоЗначению();
			//Сообщить(Символы.ПС);
			//ЕстьВПланеНоНетВПравиле = Ложь;
			//СписокРезультата = Новый СписокЗначений;
			/*// остается сравнить две таблицы и показать различия...
*/
			//СписокРезультата.СортироватьПоЗначению();
			if(true/*Не ЕстьВПравилеНоНетвПлане
		И Не ЕстьВПланеНоНетВПравиле*/)
			{
				//Сообщить("Регистрация изменений в плане обмена соответствует правилам выгрузки данных");
			}
		}
		// процедура производит проверку соотвествия регистрации изменений для плана обмена и
		//правил выгрузки данных

		public void ВыполинтьПоискСоотвестствияПравилВыгрузкиИДанныхПланаОбмена(/*НастройкиОбмена*/)
		{
			if(true/*Не ЗначениеЗаполнено(НастройкиОбмена.УзелИнформационнойБазы)*/)
			{
				//ОбщегоНазначения.СообщитьОбОшибке("Не указан узел для обмена данными.");
			}
		}

		public void ЗарегистрироватьВсеОбъектыДляОбмена(/*УзелОбмена*/)
		{
			if(true/*НЕ ЗначениеЗаполнено(УзелОбмена)*/)
			{
			}
			//ЭтотУзелОбмена = ПроцедурыОбменаДанными.ПолучитьТекущийУзелИБ(УзелОбмена);
			if(true/*ЭтотУзелОбмена = УзелОбмена*/)
			{
				//Предупреждение("Нельзя зарегистрировать изменения для узла обмена, соответствующему текущей информационной базе.");
			}
			/*ОтветПользователя = Вопрос("ВНИМАНИЕ!!!
	|Регистрация объектов для обмена - операция необратимая. После регистрации изменений первый обмен данными может занять продолжительное время.
	|Вы уверены что нужно выполнить регистрацию всех объектов для обмена?",
		РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.НЕТ, "Регистрация объектов для обмена");*/
			if(true/*ОтветПользователя <> КодВозвратаДиалога.Да*/)
			{
			}
			//Состояние("Выполняется регистрация всех объектов для обмена с информационной базой """  + УзелОбмена + """");
			/*// для всех объектов кроме документов регистрируем все, для документов с учетом ограничений по дате
*/
			if(true/*НЕ ЗначениеЗаполнено(ДатаОграниченийДляДокументов)*/)
			{
				//ПланыОбмена.ЗарегистрироватьИзменения(УзелОбмена);
			}
			//Состояние("");
		}

		public void ДобавитьНеобходимыКолонкиДляВыводаСпискаНастроекОбмена(/*ТаблицаСпискаНастроек*/)
		{
			//ТаблицаСпискаНастроек.Колонки.Добавить("ПроизводитьПриемСообщений");
			//ТаблицаСпискаНастроек.Колонки.Добавить("ПроизводитьОтправкуСообщений");
			//ТаблицаСпискаНастроек.Колонки.Добавить("OnLineОбмен");
			//ТаблицаСпискаНастроек.Колонки.Добавить("УзелИнформационнойБазы");
		}

		public object ПолучитьДанныеПоследнийОперацийОбменов(/*УзелИнформационнойБазы*/)
		{
			//Запрос = Новый Запрос();
			/*Запрос.Текст = "ВЫБРАТЬ
				|		МАКСИМУМ(ВложенныйЗапрос.ДатаПоследнейЗагрузки) КАК ДатаПоследнейЗагрузки,
				|		МАКСИМУМ(ВложенныйЗапрос.РезультатПоследнейЗагрузки) КАК РезультатПоследнейЗагрузки,
				|		МАКСИМУМ(ВложенныйЗапрос.ДатаПоследнейВыгрузки) КАК ДатаПоследнейВыгрузки,
				|		МАКСИМУМ(ВложенныйЗапрос.РезультатПоследнейВыгрузки) КАК РезультатПоследнейВыгрузки,
				|		МАКСИМУМ(ВложенныйЗапрос.РезультатОтложенныхДвиженийДокументов) КАК РезультатОтложенныхДвиженийДокументов,
				|		МАКСИМУМ(ВложенныйЗапрос.НаличиеДанныхФоновойЗагрузки) КАК НаличиеДанныхФоновойЗагрузки
				|	ИЗ
				|		(ВЫБРАТЬ
				|			МАКСИМУМ(ИсторияОбменов.ДатаПоследнейЗагрузки) КАК ДатаПоследнейЗагрузки,
				|			МАКСИМУМ(ИсторияОбменов.РезультатПоследнейЗагрузки) КАК РезультатПоследнейЗагрузки,
				|			NULL КАК ДатаПоследнейВыгрузки,
				|			NULL КАК РезультатПоследнейВыгрузки,
				|			NULL КАК РезультатОтложенныхДвиженийДокументов,
				|			NULL КАК НаличиеДанныхФоновойЗагрузки
				|		ИЗ
				|			РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменов
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|					МАКСИМУМ(ИсторияОбменов1.ДатаПоследнейЗагрузки) КАК ДатаПоследнейЗагрузки
				|				ИЗ
				|					РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменов1
				|				ГДЕ
				|					ИсторияОбменов1.УзелИнформационнойБазы = &Ссылка) КАК ИсторияОбменов1
				|				ПО (ИсторияОбменов.УзелИнформационнойБазы = &Ссылка)
				|					И ИсторияОбменов.ДатаПоследнейЗагрузки = ИсторияОбменов1.ДатаПоследнейЗагрузки
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			NULL,
				|			NULL,
				|			МАКСИМУМ(ИсторияОбменов.ДатаПоследнейВыгрузки),
				|			МАКСИМУМ(ИсторияОбменов.РезультатПоследнейВыгрузки),
				|			NULL,
				|			NULL
				|		ИЗ
				|			РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменов
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|					МАКСИМУМ(ИсторияОбменов1.ДатаПоследнейВыгрузки) КАК ДатаПоследнейВыгрузки
				|				ИЗ
				|					РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменов1
				|				ГДЕ
				|					ИсторияОбменов1.УзелИнформационнойБазы = &Ссылка) КАК ИсторияОбменов1
				|				ПО (ИсторияОбменов.УзелИнформационнойБазы = &Ссылка)
				|					И ИсторияОбменов.ДатаПоследнейВыгрузки = ИсторияОбменов1.ДатаПоследнейВыгрузки
				|		
				|		ОБЪЕДИНИТЬ ВСЕ
				|		
				|		ВЫБРАТЬ
				|			NULL,
				|			NULL,
				|			NULL,
				|			NULL,
				|			МАКСИМУМ(ИсторияОбменов.РезультатОтложенныхДвиженийДокументов),
				|			МАКСИМУМ(ИсторияОбменов.НаличиеДанныхФоновойЗагрузки)
				|		ИЗ
				|			РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменов
				|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
				|					МАКСИМУМ(ИсторияОбменов1.Период) КАК Период
				|				ИЗ
				|					РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменов1
				|				ГДЕ
				|					ИсторияОбменов1.УзелИнформационнойБазы = &Ссылка
				|					И (НЕ ИсторияОбменов1.РезультатОтложенныхДвиженийДокументов ЕСТЬ NULL )) КАК ИсторияОбменов1
				|				ПО (ИсторияОбменов.УзелИнформационнойБазы = &Ссылка)
				|					И ИсторияОбменов.Период = ИсторияОбменов1.Период) КАК ВложенныйЗапрос
				|";*/
			//Запрос.УстановитьПараметр("Ссылка", УзелИнформационнойБазы);
			//РезультатЗапроса = Запрос.Выполнить();
			return null;
		}

		public void ДействияСправочникСписокПриПолученииДанных(/*Элемент, ОформленияСтрок*/)
		{
			/*// отображаем дату загрузки и выгрузки данных
*/
		}

		public void ДействияСправочникСписокПриПолученииДанныхОбменСWEB(/*Элемент, ОформленияСтрок*/)
		{
			/*// отображаем дату загрузки и выгрузки данных
*/
		}
		// при выводе строки настройки обмена данными

		public void ДействияСправочникСписокПриВыводеСтроки(/*Элемент, ОформлениеСтроки, ДанныеСтроки*/)
		{
			/*//Если НЕ ДанныеСтроки.ПометкаУдаления 
*/
			/*//	И ДанныеСтроки.ИспользоватьРегламентныеЗадания Тогда	
*/
			/*//	
*/
			/*//	ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаПодсказки;
*/
			/*//	
*/
			/*//КонецЕсли;
*/
		}

		public void ОткрытьМониторОбменовДляНастройки(/*СсылкаНаНастройку, ФормаВладелец = Неопределено*/)
		{
			//ФормаМонитора = ПолучитьОбщуюФорму("МониторНастроекОбменаДанными", ФормаВладелец);
			//ФормаМонитора.НастройкаОбмена = СсылкаНаНастройку;
			//ФормаМонитора.Открыть();
		}

		public void ОткрытьМониторОбменовДляУзлаОбмена(/*УзелОбмена, ФормаВладелец = Неопределено*/)
		{
			//ФормаМонитора = ПолучитьОбщуюФорму("МониторНастроекОбменаДанными", ФормаВладелец);
			//ФормаМонитора.Настройка = УзелОбмена;
			//ФормаМонитора.Открыть();
		}

		public object ПолучитьПоНастройкеСсылкуДляОграниченияПоИстории(/*НастройкаДляОбмена*/)
		{
			if(true/*Не ЗначениеЗаполнено(НастройкаДляОбмена)*/)
			{
			}
			if(true/*ТипЗнч(НастройкаДляОбмена) = Тип("СправочникСсылка.НастройкиОбменаДанными")*/)
			{
			}
			return null;
		}

		public void РасшифовкаНеудачПосле(/*СсылкаДляОграничения, ТипОтображения, ДатаНачала, ЭтаФорма*/)
		{
			//ФормаРегистраИстории = РегистрыСведений.ИсторияОбменаДанными.ПолучитьФормуСписка(, ЭтаФорма, Строка(Новый УникальныйИдентификатор));
			//ФормаРегистраИстории.отбор.Сбросить();
			if(true/*ТипОтображения = "Загрузка"*/)
			{
				//ФормаРегистраИстории.отбор.РезультатПоследнейЗагрузки.Установить(Ложь);
			}
			//ФормаРегистраИстории.отбор.Период.Значение = ДатаНачала;
			//ФормаРегистраИстории.отбор.Период.ВидСравнения = ВидСравнения.БольшеИлиРавно;
			//ФормаРегистраИстории.отбор.Период.Использование = Истина;
			//ФормаРегистраИстории.отбор.УзелИнформационнойБазы.Установить(СсылкаДляОграничения);
			//ФормаРегистраИстории.Открыть();
		}

		public object ПолучитьДанныеПоследнейУдачнойОперации(/*СсылкаДляОграничения, ИмяКолонкиДляВозврата, ОграничениеДляЗапроса, 
	ОграничениеНегативноеДляЗапроса, КоличествоНеудачныхПопытокПосле*/)
		{
			//Запрос = Новый запрос();
			/*Запрос.Текст = "ВЫБРАТЬ
	               |	Максимум(ИсторияОбменаДаннымиСрезПоследних." + ИмяКолонкиДляВозврата + ") КАК ДатаПоследнейУдачнойОперации,
	               |	Максимум(ИсторияОбменаДаннымиСрезПоследних.Период) КАК Период
	               |ИЗ
	               |	РегистрСведений.ИсторияОбменаДанными.СрезПоследних(, УзелИнформационнойБазы = &СсылкаДляОграничения И " + ОграничениеДляЗапроса + ") КАК ИсторияОбменаДаннымиСрезПоследних";*/
			//Запрос.УстановитьПараметр("СсылкаДляОграничения", СсылкаДляОграничения);
			//ТаблицаДанных = Запрос.Выполнить().Выгрузить();
			if(true/*ТаблицаДанных.Количество() = 0*/)
			{
				//ДатаПоследнейУдачнойОперации = Дата('00010101');
				//ПериодПоследнейУдачнойОперации = Дата('00010101');
			}
			/*// количество неудач после
*/
			//Запрос = Новый запрос();
			/*Запрос.Текст = "ВЫБРАТЬ Количество(*) КАК Количество	
	               |ИЗ
	               |	РегистрСведений.ИсторияОбменаДанными КАК ИсторияОбменаДанными
				   |ГДЕ
				   |	УзелИнформационнойБазы = &СсылкаДляОграничения 
				   |	И Период >= &НачалоПериода
				   |	И " + ОграничениеНегативноеДляЗапроса;*/
			//Запрос.УстановитьПараметр("СсылкаДляОграничения", СсылкаДляОграничения);
			//Запрос.УстановитьПараметр("НачалоПериода", ПериодПоследнейУдачнойОперации);
			//ТаблицаДанных = Запрос.Выполнить().Выгрузить();
			if(true/*ТаблицаДанных.Количество() = 0*/)
			{
				//КоличествоНеудачныхПопытокПосле = 0;
			}
			return null;
		}
		// при нажатии на "Открытие" у каталога

		public void ОбработчикОткрытиеДляФайла(/*Элемент, СтандартнаяОбработка*/)
		{
			//СтандартнаяОбработка = Ложь;
			if(true/*ПустаяСтрока(Элемент.Значение)*/)
			{
			}
			/*// открываем каталог который в настройках
*/
			//ЗапуститьПриложение(Элемент.Значение);
		}

		public object ПолучитьИмяФайлаПравилДляВыбораПравилОбмена(/**/)
		{
			//Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(Ложь);
			//Диалог.ПредварительныйПросмотр = Ложь;
			//Диалог.Заголовок = "Выбор файла правил обмена";
			//Диалог.Фильтр = "Файл правил обмена (*.xml)|*.xml";
			if(true/*Не Диалог.Выбрать()*/)
			{
			}
			return null;
		}

		public object ПолучитьИмяФайлаПравилДляСохраненияПравилОбмена(/**/)
		{
			//Режим = РежимДиалогаВыбораФайла.Сохранение;
			//Диалог = Новый ДиалогВыбораФайла(Режим);
			//Диалог.Заголовок = "Выбор файла для сохранения";
			//Диалог.Фильтр = "Файл правил обмена (*.xml)|*.xml";
			if(true/*Не Диалог.Выбрать()*/)
			{
			}
			return null;
		}

		public object ПолучитьИмяФайлаПротоколаОбмена(/**/)
		{
			//Диалог = РаботаСФайлами.ПолучитьДиалогВыбораФайлов(Ложь);
			//Диалог.Заголовок = "Выбор файла протокола обмена";
			//Диалог.Фильтр = "Файл протокола обмена (*.txt)|*.txt";
			//Диалог.ПроверятьСуществованиеФайла = Ложь;
			//Диалог.ПредварительныйПросмотр = Ложь;
			//Диалог.ПолноеИмяФайла = "ПротоколОбмена.txt";
			if(true/*Не Диалог.Выбрать()*/)
			{
			}
			return null;
		}

		public void ПолучитьТекстЗаголовкаИРасписанияРегламентнойНастройки(/*Задание, ТекстЗаголовка, ТекстРасписания, РасписаниеАктивно*/)
		{
			//РасписаниеАктивно = Ложь;
			//ТекстЗаголовка = "Дополнительные настройки расписания ...";
			if(true/*Задание = Неопределено*/)
			{
				/*//ТекстЗаголовка = "Создать регламентную настройку ...";	
*/
				//ТекстРасписания = "<Расписание не задано>";
			}
		}
		// Процедура показывает форму списка справочника "Настройки обменов" для узла обмена

		public void ПоказатьЗарегистрированныеИзмененияДляУзла(/*УзелОбмена, Владелец = Неопределено, УникальныйКлючФормы = Неопределено*/)
		{
			//Обработка = Обработки.РегистрацияИзмененийДляОбмена.Создать();
			//ФормаОбработки = Обработка.ПолучитьФорму("Форма", Владелец, УникальныйКлючФормы);
			//ФормаОбработки.УзелОбмена = УзелОбмена;
			//ФормаОбработки.ВосстанавливатьЗначенияПриОткрытии = Ложь;
			//ФормаОбработки.Открыть();
		}

		public object ПолучитьПоРазностиВремениПредставлениеДляПользователя(/*РазностьВремени*/)
		{
			if(true/*РазностьВремени = 0*/)
			{
			}
			//ОстатокВремени = РазностьВремени;
			//КоличествоДней = Цел(ОстатокВремени /(60 * 60 * 24));
			//ОстатокВремени = РазностьВремени - КоличествоДней * 60 * 60 * 24;
			//КоличествоЧасов = Цел(ОстатокВремени /(60 * 60));
			//ОстатокВремени = РазностьВремени - КоличествоЧасов * 60 * 60;
			//КоличествоМинут = Цел(ОстатокВремени /(60));
			//ОстатокВремени = РазностьВремени - КоличествоМинут * 60;
			//КоличествоСекунд = ОстатокВремени;
			//ВремяСтрокой = Прав("00" + Строка(КоличествоЧасов), 2) + ":" + Прав("00" + Строка(КоличествоМинут), 2) + ":" + Прав("00" + Строка(КоличествоСекунд), 2);
			if(true/*КоличествоДней <> 0*/)
			{
				//ВремяСтрокой = Строка(КоличествоДней) + " дней " + ВремяСтрокой;
			}
			return null;
		}

		public void ОткрытьФормуРедактированияТекста(/*ЭтаФорма, ЗначениеТекста, СтандартнаяОбработка = Ложь*/)
		{
			//ФормаРедактированияТекста = ПолучитьОбщуюФорму("ФормаРедактированияТекста", ЭтаФорма, Строка(Новый УникальныйИдентификатор));
			//ФормаРедактированияТекста.УстановитьРедактируемыйТекст(ЗначениеТекста);
			//ФормаРедактированияТекста.Открыть();
			//СтандартнаяОбработка = Ложь;
		}

		public object ЗаполнитьНеобходимыеПараметрыНастроекПользователя(/*ЭтаФорма, ПравилаОбмена, ПравилаОбменаДляПриемника*/)
		{
			return null;
		}

		public void ОбновитьТаблицуНастроекПолейПоиска(/*ЭтаФорма*/)
		{
		}

		public void ВыполнитьЗагрузкуИнформацииОВозможныхПоляхПоиска(/*ЭтаФорма, ПравилаОбмена, 
	ПравилаОбменаДляПриемника = Неопределено, ОбязательноОбновитьТаблицуНастроекИзПравил = Ложь*/)
		{
			if(true/*НЕ ОбязательноОбновитьТаблицуНастроекИзПравил
		И ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска <> Неопределено*/)
			{
			}
			//РезультатПолученияПравил = ЗаполнитьНеобходимыеПараметрыНастроекПользователя(ЭтаФорма, ПравилаОбмена, ПравилаОбменаДляПриемника);
			if(true/*Не РезультатПолученияПравил*/)
			{
			}
			//ОбновитьВсеНастройкиВыгрузкиДляНастройки(ЭтаФорма);
		}

		public void ОбновитьВсеНастройкиВыгрузкиДляНастройки(/*ЭтаФорма*/)
		{
			//ОбновитьТаблицуНастроекПолейПоиска(ЭтаФорма);
			//ОбновитьТаблицуНастроекВыгрузкиДанных(ЭтаФорма);
		}

		public void ОбновитьТаблицуНастроекВыгрузкиДанных(/*ЭтаФорма*/)
		{
		}

		public void ВыполнитьЗагрузкуИнформацииОВозможныхНастройкахВыгрузки(/*ЭтаФорма, ПравилаОбмена, 
	ПравилаОбменаДляПриемника = Неопределено, ОбязательноОбновитьТаблицуНастроекИзПравил = Ложь*/)
		{
			if(true/*ОбязательноОбновитьТаблицуНастроекИзПравил
		ИЛИ ЭтаФорма.мОбщаяТаблицаНастроекВыгрузки = Неопределено*/)
			{
				//РезультатПолученияПравил = ЗаполнитьНеобходимыеПараметрыНастроекПользователя(ЭтаФорма, ПравилаОбмена, ПравилаОбменаДляПриемника);
				if(true/*Не РезультатПолученияПравил*/)
				{
				}
			}
			//ОбновитьВсеНастройкиВыгрузкиДляНастройки(ЭтаФорма);
		}

		public void НастройкаВариантовПоискаОбъектовИмяНастройкиДляПользователяНачалоВыбора(/*Этаформа, Элемент, СтандартнаяОбработка*/)
		{
			//ДанныеСтроки = Этаформа.ЭлементыФормы.НастройкаВариантовПоискаОбъектов.ТекущиеДанные;
			if(true/*ДанныеСтроки = Неопределено*/)
			{
			}
			/*// начало выбора настройки из списка
*/
			//ЭтаФорма.ВыполнитьЗагрузкуИнформацииОВозможныхПоляхПоиска(Ложь);
			//СтандартнаяОбработка = Ложь;
			if(true/*ДанныеСтроки.НастройкаНеПоддерживается*/)
			{
				if(true/*ДанныеСтроки.ЭтоНастройкаДляВыгрузки*/)
				{
					//Предупреждение("Настройка выгрузки данных для правила: " + ДанныеСтроки.НаименованиеПравилаОбмена + "  не поддерживается правилами обмена.");
				}
			}
			/*// получаем массив строк таблицы для показа
*/
			//СтруктураПоиска = Новый Структура("ЭтоНастройкаДляВыгрузки, КодПравилаОбмена", ДанныеСтроки.ЭтоНастройкаДляВыгрузки, ДанныеСтроки.КодПравилаОбмена);
			//МассивСтрок = ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска.НайтиСтроки(СтруктураПоиска);
			//ФормаВыбора = ПолучитьОбщуюФорму("ФормаВыбораВариантаСопоставления", ЭтаФорма);
			//СтрокаВыбора = ФормаВыбора.НастройкаВариантовПоискаОбъектов.Найти(ДанныеСтроки.ИмяНастройкиДляАлгоритма, "ИмяНастройкиДляАлгоритма");
			if(true/*СтрокаВыбора <> Неопределено*/)
			{
				//ФормаВыбора.ЭлементыФормы.НастройкаВариантовПоискаОбъектов.ТекущаяСтрока = СтрокаВыбора;
			}
			//ВыборВариантаСопоставления = ФормаВыбора.ОткрытьМодально();
			if(true/*Не ЗначениеЗаполнено(ВыборВариантаСопоставления)*/)
			{
			}
			//ДанныеСтроки.ИмяНастройкиДляАлгоритма = ВыборВариантаСопоставления;
			//СтруктураПоиска = Новый Структура("ЭтоНастройкаДляВыгрузки,КодПравилаОбмена,ИмяНастройкиДляАлгоритма", ДанныеСтроки.ЭтоНастройкаДляВыгрузки, ДанныеСтроки.КодПравилаОбмена, ДанныеСтроки.ИмяНастройкиДляАлгоритма);
			//МассивСтрок = ЭтаФорма.мОбщаяТаблицаНастроекПолейПоиска.НайтиСтроки(СтруктураПоиска);
			if(true/*МассивСтрок <> Неопределено
		И МассивСтрок.Количество() > 0*/)
			{
				//ДанныеСтроки.ОписаниеНастройкиДляПользователя = МассивСтрок[0].ОписаниеНастройкиДляПользователя;
				//ДанныеСтроки.НаименованиеПравилаОбмена = МассивСтрок[0].НаименованиеПравилаОбмена;
				//Элемент.Значение = МассивСтрок[0].ИмяНастройкиДляПользователя;
				//ДанныеСтроки.НастройкаНеПоддерживается = Ложь;
				//ДанныеСтроки.ВариантПоискаНеПоддерживается = Ложь;
			}
		}
		// Процедура открывает обработку для выгрузки объектов
		//
		// Параметры:
		//	МакетПравилОбмена	- <ТекстовыйДокумент>, содержит правила обмена
		//	ИмяТипаОбъектов		- <Строка>, например "СправочникСсылка.ПроизвольныеОтчеты"
		//

		public void ОткрытьВыгрузкуСпискаОбъектов(/*МакетПравилОбмена, ИмяТипаОбъектов*/)
		{
			//ВыгрузкаСпискаОбъектов = Обработки.ВыгрузкаСпискаОбъектов.Создать();
			//ВыгрузкаСпискаОбъектов.ИнициализироватьОбработку(МакетПравилОбмена, ИмяТипаОбъектов);
			//ВыгрузкаСпискаОбъектов.ПолучитьФорму("Форма",, ИмяТипаОбъектов).Открыть();
		}
		//
	}
}
