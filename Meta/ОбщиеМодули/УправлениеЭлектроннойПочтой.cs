using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class УправлениеЭлектроннойПочтой
	{
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ СО СПИСКАМИ КОДИРОВОК
		// Функция возвращает таблицу имен кодировок
		//
		// Параметры
		//  НЕТ
		//
		// Возвращаемое значение:
		//   Таблица значений
		//

		public object ПолучитьТаблицуКодировок(/**/)
		{
			/*ТаблицаКодировок = Новый ТаблицаЗначений;*/
			/*ТаблицаКодировок.Колонки.Добавить("Имя");*/
			/*ТаблицаКодировок.Колонки.Добавить("Представление");*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "ibm852";*/
			/*НоваяСтрока.Представление = "ibm852 (Центральноевропейская DOS)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "ibm866";*/
			/*НоваяСтрока.Представление = "ibm866 (Кириллица DOS)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "iso-8859-1";*/
			/*НоваяСтрока.Представление = "iso-8859-1 (Западноевропейская ISO)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "iso-8859-2";*/
			/*НоваяСтрока.Представление = "iso-8859-2 (Центральноевропейская ISO)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "iso-8859-3";*/
			/*НоваяСтрока.Представление = "iso-8859-3 (Латиница 3 ISO)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "iso-8859-4";*/
			/*НоваяСтрока.Представление = "iso-8859-4 (Балтийская ISO)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "iso-8859-5";*/
			/*НоваяСтрока.Представление = "iso-8859-5 (Кириллица ISO)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "iso-8859-7";*/
			/*НоваяСтрока.Представление = "iso-8859-7 (Греческая ISO)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "iso-8859-9";*/
			/*НоваяСтрока.Представление = "iso-8859-9 (Турецкая ISO)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "iso-8859-15";*/
			/*НоваяСтрока.Представление = "iso-8859-15 (Латиница 9 ISO)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "koi8-r";*/
			/*НоваяСтрока.Представление = "koi8-r (Кириллица KOI8-R)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "koi8-u";*/
			/*НоваяСтрока.Представление = "koi8-u (Кириллица KOI8-U)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "us-ascii";*/
			/*НоваяСтрока.Представление = "us-ascii США";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "utf-8";*/
			/*НоваяСтрока.Представление = "utf-8 (Юникод UTF-8)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "windows-1250";*/
			/*НоваяСтрока.Представление = "windows-1250 (Центральноевропейская Windows)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "windows-1251";*/
			/*НоваяСтрока.Представление = "windows-1251 (Кириллица Windows)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "windows-1252";*/
			/*НоваяСтрока.Представление = "windows-1252 (Западноевропейская Windows)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "windows-1253";*/
			/*НоваяСтрока.Представление = "windows-1253 (Греческая Windows)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "windows-1254";*/
			/*НоваяСтрока.Представление = "windows-1254 (Турецкая Windows)";*/
			/*НоваяСтрока = ТаблицаКодировок.Добавить();*/
			/*НоваяСтрока.Имя           = "windows-1257";*/
			/*НоваяСтрока.Представление = "windows-1257 (Балтийская Windows)";*/
			return null;
		}
		// Функция возвращает список кодировок
		//
		// Параметры
		//  НЕТ
		//
		// Возвращаемое значение:
		//   СписокЗначений
		//

		public object ПолучитьСписокКодировок(/**/)
		{
			/*СписокЗначений = Новый СписокЗначений;*/
			/*ТаблицаКодировок = ПолучитьТаблицуКодировок();*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С КОНТАКТНОЙ ИНФОРМАЦИЕЙ ДЛЯ НУЖД ЭЛЕКТРОННОЙ ПОЧТЫ
		// Функция определяет адрес электронной почты объекта
		//
		// Параметры
		//  Объект - СправочникСсылка, для которого необходимо определить адрес электронной почты
		//

		public object ОпределитьАдресПолучателя(/*Объект*/)
		{
			/*Запрос = Новый Запрос;*/
			/*Запрос.УстановитьПараметр("Объект", Объект);*/
			/*Запрос.УстановитьПараметр("Тип"   , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);*/
			/*Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Представление,
	|	КонтактнаяИнформация.ЗначениеПоУмолчанию
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Объект = &Объект
	|	И
	|	КонтактнаяИнформация.Тип = &Тип
	|";*/
			/*Адрес = "";*/
			/*ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();*/
			/*ТаблицаЗапроса.Индексы.Добавить("ЗначениеПоУмолчанию");*/
			if(true/*ТаблицаЗапроса.Количество() > 0*/)
			{
				/*СтрокаПоУмолчанию = ТаблицаЗапроса.Найти(Истина, "ЗначениеПоУмолчанию");*/
				if(true/*СтрокаПоУмолчанию <> Неопределено*/)
				{
					/*Адрес = СтрокаПоУмолчанию.Представление;*/
				}
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ЭЛЕКТРОННЫМИ ПИСЬМАМИ
		// <Описание функции>
		//
		// Параметры
		//  <Параметр1>  – <Тип.Вид> – <описание параметра>
		//                 <продолжение описания параметра>
		//  <Параметр2>  – <Тип.Вид> – <описание параметра>
		//                 <продолжение описания параметра>
		//
		// Возвращаемое значение:
		//   <Тип.Вид>   – <описание возвращаемого значения>
		//

		public void УстановитьТекстПисьма(/*ИнтернетПисьмо, ПисьмоОбъект, УстанавливатьВидТекстаПисьма = Истина*/)
		{
			/*ХТМЛ_Текст    = "";*/
			/*Простой_Текст = "";*/
			/*Прочий_Текст  = "";*/
			/*ПростойТекст  = "";*/
			if(true/*ЗначениеЗаполнено(ХТМЛ_Текст)*/)
			{
				if(true/*УстанавливатьВидТекстаПисьма*/)
				{
					/*ПисьмоОбъект.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML;*/
				}
				/*НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");*/
				/*НовыйHTMLДокумент.open("text/html");*/
				/*НовыйHTMLДокумент.write(ХТМЛ_Текст);*/
				/*НовыйHTMLДокумент.close();*/
				/*ТегиКартинок = НовыйHTMLДокумент.all.tags("img");*/
				/*ПисьмоОбъект.ТекстПисьма = НовыйHTMLДокумент.all.tags("html").item(0).outerHTML;*/
			}
		}
		// ПолучитьТекстПисьма()
		// Формирует почтовый профиль по учетной записи
		//
		// Параметры
		//  УчетнаяЗапись
		//
		// Возвращаемое значение:
		//   ИнтернетПочтовыйПрофиль
		//

		public object ПолучитьИнтернетПочтовыйПрофиль(/*УчетнаяЗапись*/)
		{
			/*Профиль = Новый ИнтернетПочтовыйПрофиль;*/
			/*Профиль.АдресСервераPOP3 = УчетнаяЗапись.POP3Сервер;*/
			/*Профиль.АдресСервераSMTP = УчетнаяЗапись.SMTPСервер;*/
			if(true/*УчетнаяЗапись.ВремяОжиданияСервера > 0*/)
			{
				/*Профиль.ВремяОжидания = УчетнаяЗапись.ВремяОжиданияСервера;*/
			}
			/*Профиль.Пароль           = УчетнаяЗапись.Пароль;*/
			/*Профиль.Пользователь     = УчетнаяЗапись.Логин;*/
			/*Профиль.ПортPOP3         = УчетнаяЗапись.ПортPOP3;*/
			/*Профиль.ПортSMTP         = УчетнаяЗапись.ПортSMTP;*/
			if(true/*УчетнаяЗапись.ТребуетсяSMTPАутентификация*/)
			{
				/*Профиль.АутентификацияSMTP = СпособSMTPАутентификации.ПоУмолчанию;*/
				/*Профиль.ПарольSMTP         = УчетнаяЗапись.ПарольSMTP;*/
				/*Профиль.ПользовательSMTP   = УчетнаяЗапись.ЛогинSMTP;*/
			}
			return null;
		}
		// Функция проверяет наличие доступных учетных записей для отправки писем
		// для текущего пользователя, и при отсутствии таковых позволяет ввести новую.
		//
		// Параметры
		//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
		//  Отказ - Булево, параметр отказа от выполнения операции
		//
		// Возвращаемое значение:
		//   СписокДоступныхЗаписей - СписокЗначений, список доступных учетных записей для отправки электронных писем
		//

		public object ПроверитьУчетныеЗаписиДляОтправкиПисем(/*ТекущийПользователь, Отказ = Ложь, ПредлагатьСозданиеНовойУчетнойЗаписи = Истина*/)
		{
			/*СписокДоступныхЗаписей = ПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь).Запись;*/
			if(true/*СписокДоступныхЗаписей.Количество() = 0*/)
			{
				if(true/*ПредлагатьСозданиеНовойУчетнойЗаписи*/)
				{
					/*ОтветНаВопрос = Вопрос("У вас нет ни одной доступной учетной записи для отправки писем из встроенного почтового клиента.
			|Создать новую?", РежимДиалогаВопрос.ДаНет);*/
					if(true/*ОтветНаВопрос <> КодВозвратаДиалога.Да*/)
					{
						/*Отказ = Истина;*/
					}
					/*Справочники.УчетныеЗаписиЭлектроннойПочты.СоздатьЭлемент().ПолучитьФорму().ОткрытьМодально();*/
					/*СписокДоступныхЗаписей = ПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь).Запись;*/
					if(true/*СписокДоступныхЗаписей.Количество() = 0*/)
					{
						/*Предупреждение("У вас нет ни одной доступной учетной записи для отправки писем из встроенного почтового клиента.");*/
						/*Отказ = Истина;*/
					}
				}
			}
			/*#КонецЕсли

	Возврат СписокДоступныхЗаписей;*/
			return null;
		}
		// Функция открывает форму списка электронных писем с отбором по
		// определенному объекту
		//
		// Параметры
		//  Ссылка - ссылка на объект, по которому необходимо просмотреть письма
		//

		public object ОткрытьЭлектронныеПисьмаПоОбъекту(/*Ссылка, ВызвавшаяФорма = Неопределено*/)
		{
			if(true/*НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить()*/)
			{
				/*Предупреждение("Данная операция доступна только при использовании встроенного почтового клиента.");*/
			}
			/*СписокПисем = Обработки.ПоискЭлектронныхПисемПоОбъектам.Создать();*/
			if(true/*ТипЗнч(Ссылка) = Тип("СписокЗначений")*/)
			{
				if(true/*Ссылка.Количество() = 1*/)
				{
					/*СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.ВидСравнения = ВидСравнения.Равно;*/
					/*СписокПисем.ПостроительОтчета.Отбор.ОбъектПоиска.Значение = Ссылка[0].Значение;*/
				}
			}
			if(true/*ВызвавшаяФорма = Неопределено*/)
			{
				/*ФормаСписка = СписокПисем.ПолучитьФорму();*/
			}
			/*СписокПисем.ОбновитьТаблицуПисем(ФормаСписка.ЭлектронныеПисьмаСписок);*/
			/*ФормаСписка.Открыть();*/
			return null;
		}
		// Процедура открывает форму нового письма встроенного почтового клиента
		// и проставляет в качестве получателя переданный в качестве параметра объект
		//
		// СправочникСсылка - получатель письма
		//

		public void НаписатьПисьмоОбъекту(/*Объект*/)
		{
			/*СписокОбъектов = Новый СписокЗначений;*/
			if(true/*ТипЗнч(Объект) = Тип("СписокЗначений")*/)
			{
				/*СписокОбъектов = Объект.Скопировать();*/
			}
			if(true/*НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить()*/)
			{
			}
		}
		// Процедура выполняет команду системы mailto с переданными параметрами
		//
		// Параметры
		//  СтруктураПараметров - структура параметров для команды mailto
		//
		//

		public void ОткрытьПисьмоПочтовогоКлиентаОперационнойСистемы(/*СтруктураПараметров*/)
		{
			if(true/*НЕ СтруктураПараметров.Свойство("Адрес", Адрес)*/)
			{
				/*Адрес = "";*/
			}
			if(true/*НЕ СтруктураПараметров.Свойство("Представление", Представление)*/)
			{
				/*Представление = "";*/
			}
			if(true/*НЕ СтруктураПараметров.Свойство("Тема", Тема)*/)
			{
				/*Тема = "";*/
			}
			if(true/*НЕ СтруктураПараметров.Свойство("Текст", Текст)*/)
			{
				/*Текст = "";*/
			}
			/*ТекстСообщения = СтрЗаменить(Текст, Символы.ПС, Символы.ВТаб);*/
			/*СтрокаВыполнения = "mailto:";*/
			/*СтрокаВыполнения = СтрокаВыполнения + Представление + "<" + Адрес + ">";*/
			/*СтрокаВыполнения = СтрокаВыполнения + "?subject=" + ?(ПустаяСтрока(СокрЛП(Тема))," ",СокрЛП(Тема));*/
			/*СтрокаВыполнения = СтрокаВыполнения + "&body=" + СокрЛП(ТекстСообщения);*/
			/*WshShell = Новый COMObject("WScript.Shell");*/
			/*// Максимально допустимое число символов строки при использовании данного COM-объекта равно 2021
*/
			/*Попытка
		WshShell.Run("""" + СтрокаВыполнения + """");*/
			/*Исключение
		ОбщаяДлинаСистемнойСтрокиВыполнения = СтрДлина(СтрокаВыполнения);*/
			/*ОбщаяДлинаСлужебныхСимволов = СтрДлина(СтрокаВыполнения) - СтрДлина(СокрЛП(ТекстСообщения));*/
			/*ПревышениеСтроки = ОбщаяДлинаСистемнойСтрокиВыполнения - 2021;*/
			/*ДопустимаяДлинаТекста = 2021 - ОбщаяДлинаСлужебныхСимволов;*/
			/*ОбщегоНазначения.СообщитьОбОшибке("Вы можете ввести в текст текущего письма только " + ДопустимаяДлинаТекста + " символов, а у вас - " + СтрДлина(СокрЛП(ТекстСообщения)));*/
			/*СтрокаВопроса = "Количество символов в тексте письма превышает допустимое." + Символы.ПС + "Отбросить последние " + ПревышениеСтроки + " символов и оправить?";*/
			/*ОтветНаВопрос = Вопрос(СтрокаВопроса, РежимДиалогаВопрос.ДаНет);*/
			if(true/*ОтветНаВопрос = КодВозвратаДиалога.Да*/)
			{
				/*СтрокаВыполнения = Лев(СтрокаВыполнения, (ОбщаяДлинаСистемнойСтрокиВыполнения - ПревышениеСтроки));*/
				/*Попытка
				WshShell.Run("""" + СтрокаВыполнения + """");*/
				/*Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());*/
				/*КонецПопытки;*/
			}
			/*КонецПопытки;*/
		}
		// Процедура роизводит отправку пачки электронных писем
		//
		// Параметры
		//  МассивПисем - массив, электронные письма к отправке
		//  СоответствиеТекстовЭлектронныхПисем, соответствие, требуется для передачи в качестве параметра в процедуру отправки
		//  ТекущийПользователь - СправочникСсылка.Пользователи
		//

		public void ОтправитьПисьма(/*Письма, СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, Знач ПоказыватьОкноВыполнения = Истина, ТекстОшибок = ""*/)
		{
			if(true/*ТипЗнч(Письма) <> Тип("Соответствие")*/)
			{
			}
			/*ИзмененныйСоставПисем = Новый Соответствие;*/
			/*ДоступныеУчетныеЗаписи = ПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь);*/
			if(true/*ИзмененныйСоставПисем.Количество() > 0*/)
			{
				/*ПолучениеОтправкаПисем(СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, , ИзмененныйСоставПисем, 
			Истина, , ПоказыватьОкноВыполнения, ТекстОшибок);*/
			}
		}
		// Функция создает новый объект Документ.ЭлектронноеПисьмо и заполняет
		// его данными из объекта ИнтернетПочтовоеСособщение, только без аттачей
		//
		// Параметры
		//  ИнтернетПисьмо - ИнтернетПочтовоеСообщение
		//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписи, учетная запись письма
		//  ТекущийПользователь - СправочникСсылка.Пользователи
		//  мРазделительАдресов - Строка, разделитель адресов
		//  ИсключениеТранзакции - булево, флаг ошибки
		//
		// Возвращаемое значение:
		//   ДокументОбъект.ЭлектронноеПисьмо
		//

		public object ПолучитьДокументОбъектИзИнтернетПочтовогоСообщения(/*ИнтернетПисьмо, УчетнаяЗапись = Неопределено, мРазделительАдресов = ",", ИсключениеТранзакции = Ложь*/)
		{
			/*Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();*/
			if(true/*ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")*/)
			{
				/*УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.СоздатьЭлемент();*/
			}
			/*Письмо.КодировкаПисьма = ИнтернетПисьмо.Кодировка;*/
			/*Письмо.ЗаголовокПисьма = ИнтернетПисьмо.Заголовок;*/
			/*Письмо.КомуПредставление = ПолучитьПредставлениеПолучателей(Письмо.КомуТЧ);*/
			/*Письмо.КопииПредставление = ПолучитьПредставлениеПолучателей(Письмо.КопииТЧ);*/
			/*Письмо.ГруппаУчетнойЗаписи = УчетнаяЗапись.ГруппаВходящие;*/
			if(true/*ТипЗнч(ИнтернетПисьмо.Отправитель) = Тип("Строка")*/)
			{
				/*Письмо.ОтправительАдресЭлектроннойПочты = ИнтернетПисьмо.Отправитель;*/
			}
			/*Письмо.ОтправительИмя = ИнтернетПисьмо.ИмяОтправителя;*/
			if(true/*ПустаяСтрока(Письмо.ОтправительИмя)*/)
			{
				/*Письмо.ОтправительПредставление = Письмо.ОтправительАдресЭлектроннойПочты;*/
			}
			/*Письмо.Тема = ИнтернетПисьмо.Тема;*/
			if(true/*Письмо.ПредметКонтакта = Неопределено*/)
			{
				/*Письмо.ПредметКонтакта = "";*/
			}
			/*Письмо.СтатусПисьма = Перечисления.СтатусыПисем.Полученное;*/
			/*Письмо.Дата            = ТекущаяДата();*/
			/*Письмо.ДатаОтправления = ИнтернетПисьмо.ДатаОтправления;*/
			/*Письмо.ДатаТранспорта  = ТекущаяДата();*/
			/*УстановитьТекстПисьма(ИнтернетПисьмо, Письмо);*/
			if(true/*ИнтернетПисьмо.Вложения.Количество() = 0*/)
			{
				/*ОчиститьПисьмо(ИнтернетПисьмо);*/
				/*Письмо.ПочтовоеСообщение = Новый ХранилищеЗначения(ИнтернетПисьмо, Новый СжатиеДанных());*/
			}
			/*Письмо.НеРассмотрено = Ложь;*/
			if(true/*ИнтернетПисьмо.Вложения.Количество() > 0 И НЕ ИсключениеТранзакции*/)
			{
			}
			/*Письмо.ИдентификаторПисьма = ИнтернетПисьмо.ИдентификаторСообщения;*/
			/*НайденоПисьмоОснование = Ложь;*/
			/*ИдентификаторПисьмаОснования = ИнтернетПисьмо.ПолучитьПолеЗаголовка("In-Reply-To", "Строка");*/
			if(true/*Не ПустаяСтрока(ИдентификаторПисьмаОснования)*/)
			{
				/*ИдентификаторПисьмаОснования = Сред(ИдентификаторПисьмаОснования, 2, СтрДлина(ИдентификаторПисьмаОснования)-2);*/
				/*Запрос = Новый Запрос;*/
				/*Запрос.УстановитьПараметр("ИдентификаторПисьма",	ИдентификаторПисьмаОснования);*/
				/*Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭлектронноеПисьмо.Ссылка КАК Основание,
		|	ЭлектронноеПисьмо.ЗаявкаКандидата
		|ИЗ
		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|ГДЕ
		|	ЭлектронноеПисьмо.ИдентификаторПисьма = &ИдентификаторПисьма";*/
				/*Выборка = Запрос.Выполнить().Выбрать();*/
				if(true/*Выборка.Следующий()*/)
				{
					/*ЗаполнитьЗначенияСвойств(Письмо, Выборка);*/
					/*НайденоПисьмоОснование = Истина;*/
				}
			}
			if(true/*Не НайденоПисьмоОснование*/)
			{
				/*Запрос = Новый Запрос;*/
				/*Запрос.УстановитьПараметр("Адрес",	Письмо.ОтправительАдресЭлектроннойПочты);*/
				/*// Сначала поищем заявку кандидата
*/
				/*// Если заявка всего одна, припишем к ней письмо
*/
				/*Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмо.ЗаявкаКандидата
		|ИЗ
		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|ГДЕ
		|	ЭлектронноеПисьмо.ОтправительАдресЭлектроннойПочты = &Адрес
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ
		|	ЭлектронноеПисьмоКомуТЧ.Ссылка.ЗаявкаКандидата
		|ИЗ
		|	Документ.ЭлектронноеПисьмо.КомуТЧ КАК ЭлектронноеПисьмоКомуТЧ
		|ГДЕ
		|	ЭлектронноеПисьмоКомуТЧ.АдресЭлектроннойПочты = &Адрес";*/
				/*Выборка = Запрос.Выполнить().Выбрать();*/
				if(true/*Выборка.Количество() = 1*/)
				{
					/*Выборка.Следующий();*/
					/*Письмо.ЗаявкаКандидата	= Выборка.ЗаявкаКандидата;*/
				}
				/*// Если была найдена одна заявка, попытаемся найти документ основание
*/
				/*// Найдем последнее письмо, отправленное на адрес, с которого отправлено текущее письмо
*/
				if(true/*Выборка.Количество() = 1*/)
				{
					/*Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	ЭлектронноеПисьмоКомуТЧ.Ссылка КАК ОснованиеПисьма
			|ИЗ
			|	Документ.ЭлектронноеПисьмо.КомуТЧ КАК ЭлектронноеПисьмоКомуТЧ
			|ГДЕ
			|	ЭлектронноеПисьмоКомуТЧ.АдресЭлектроннойПочты = &Адрес
			|
			|УПОРЯДОЧИТЬ ПО
			|	ЭлектронноеПисьмоКомуТЧ.Ссылка.ДатаОтправления УБЫВ";*/
					/*Выборка = Запрос.Выполнить().Выбрать();*/
					if(true/*Выборка.Следующий()*/)
					{
						/*Письмо.ОснованиеПисьма	= Выборка.ОснованиеПисьма;*/
					}
				}
			}
			return null;
		}
		// Функция определяет, надо ли принимать письмо для случаев, когда в настройках
		//  учетной записи установлено, что письма не удалять с сервера
		//
		// Параметры
		//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
		//  ИнтернетПисьмо - ИнтернетПисьмо, которое анализируем
		//  МассивПисемДляУдаления - Массив, который заполняем, если письмо необходимо удалить с сервера
		//
		// Возвращаемое значение:
		//   Булево
		//

		public object НадоПриниматьПисьмо(/*УчетнаяЗапись, ИнтернетПисьмо, МассивПисемДляУдаления*/)
		{
			/*Запрос = Новый Запрос;*/
			/*Запрос.УстановитьПараметр("ИдентификаторСообщения", ИнтернетПисьмо.ИдентификаторСообщения);*/
			/*Запрос.УстановитьПараметр("ДатаОтправления"       , ИнтернетПисьмо.ДатаОтправления);*/
			/*Запрос.УстановитьПараметр("УчетнаяЗапись"         , УчетнаяЗапись);*/
			/*Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭлектронноеПисьмо.Дата КАК ДатаРегистрацииПисьма
	|ИЗ
	|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|ГДЕ
	|	ЭлектронноеПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Полученное)
	|	И ЭлектронноеПисьмо.УчетнаяЗапись = &УчетнаяЗапись";*/
			if(true/*ЗначениеЗаполнено(ИнтернетПисьмо.ДатаОтправления)*/)
			{
				/*Запрос.Текст = Запрос.Текст + "
		|	И
		|	ЭлектронноеПисьмо.ДатаОтправления = &ДатаОтправления
		|";*/
			}
			/*Запрос.Текст = Запрос.Текст + "
	|	И
	|	ЭлектронноеПисьмо.ИдентификаторПисьма = &ИдентификаторСообщения
	|";*/
			/*РезультатЗапроса = Запрос.Выполнить();*/
			if(true/*РезультатЗапроса.Пустой()*/)
			{
			}
			return null;
		}
		// Процедура осуществляет транспорт писем
		//
		// Параметры
		//  СоответствиеТекстовЭлектронныхПисем - Соответствие, текстов писем и ДокументСсылка.ЭлектронноеПисьмо
		//  ТекущийПользователь - СправочникСсылка.Пользователи, Текущий пользователь системы
		//  МассивУчетныхЗаписей - Массив, учетные записи по которым необходимо осуществить транспорт
		//  МассивПисем - Массив, документы ЭлектронноеПисьмо, которые необходимо отправить
		//  Отправить - Булево, действие "отправить письма"
		//  Получить - Булево, действие "получить письма"
		//  ПоказыватьОкноВыполнения - Булево, показывать окно выполнения получения/отправки писем
		//
		// Возвращаемое значение:
		//   НЕТ
		//

		public void ПолучениеОтправкаПисем(/*СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, МассивУчетныхЗаписей = Неопределено,
	Письма = Неопределено, Отправить = Ложь, Получить = Ложь, ПоказыватьОкноВыполнения = Истина, ТекстОшибок = ""*/)
		{
			if(true/*НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить()*/)
			{
				/*Сообщить("В настройках учета не установлено использование встроенного почтового клиента. Действие отправка/получение писем не выполнено.");*/
				/*Отказ = Истина;*/
			}
			/*мРазделительАдресов = ",";*/
			/*СписокДоступныхУчетныхЗаписей = ПолучитьДоступныеУчетныеЗаписи(ТекущийПользователь).Запись;*/
			/*ТекстОшибок = "";*/
			if(true/*ТипЗнч(Письма) = Тип("Соответствие")*/)
			{
				/*МассивПисем = Новый Массив;*/
			}
			/*// Получим сответствие всех учетных записей, по которым надо производить действия отправки и получения
*/
			/*СоответствиеУчетныхЗаписейВсего = Новый Соответствие;*/
			if(true/*Отправить*/)
			{
				/*Запрос = Новый Запрос;*/
				/*// Дерево на отправку
*/
				if(true/*Письма = Неопределено И МассивУчетныхЗаписей = Неопределено*/)
				{
					/*Запрос.УстановитьПараметр("Исходящее", Перечисления.СтатусыПисем.Исходящее);*/
					/*Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);*/
					/*Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись,
			|	ЭлектронноеПисьмо.Ссылка        КАК Письмо
			|ИЗ
			|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
			|ГДЕ
			|	ЭлектронноеПисьмо.СтатусПисьма = &Исходящее
			|	И ЭлектронноеПисьмо.УчетнаяЗапись В(&СписокВладельцев)
			|	И Не ЭлектронноеПисьмо.ПометкаУдаления
			|ИТОГИ ПО
			|	УчетнаяЗапись";*/
					/*ДеревоУчетныхЗаписейИПисем = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);*/
				}
				/*МассивУчетныхЗаписейОтправка = ДеревоУчетныхЗаписейИПисем.Строки.ВыгрузитьКолонку("УчетнаяЗапись");*/
			}
			if(true/*Получить*/)
			{
				/*// Заполним массив учетных записей на получение писем
*/
				if(true/*ТипЗнч(МассивУчетныхЗаписей) = Тип("Массив")*/)
				{
					/*Запрос = Новый Запрос;*/
					/*Запрос.УстановитьПараметр("СписокВладельцев", СписокДоступныхУчетныхЗаписей);*/
					/*Запрос.УстановитьПараметр("СписокВладельцевМассив", МассивУчетныхЗаписей);*/
					/*Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	УчетныеЗаписиЭлектроннойПочты.Ссылка КАК УчетнаяЗапись
			|ИЗ
			|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
			|ГДЕ
			|	УчетныеЗаписиЭлектроннойПочты.Ссылка В(&СписокВладельцевМассив)
			|	И УчетныеЗаписиЭлектроннойПочты.Ссылка В(&СписокВладельцев)";*/
					/*МассивУчетныхЗаписейПолучение = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("УчетнаяЗапись");*/
				}
			}
			/*// Определим те учетные записи, которые были заявлены во входящих параметрах
*/
			/*// и проверим их на возможность отправки, что бы пользователю было понятно
*/
			/*// почему некоторые письма не отправились
*/
			/*СоответствиеЗаявленныхУчетныхЗаписей = Новый Соответствие;*/
			if(true/*ТипЗнч(МассивПисем) = Тип("Массив")*/)
			{
				/*Запрос = Новый Запрос;*/
				/*Запрос.УстановитьПараметр("Исходящее"             , Перечисления.СтатусыПисем.Исходящее);*/
				/*Запрос.УстановитьПараметр("СписокПисем"           , МассивПисем);*/
				/*Запрос.УстановитьПараметр("СписокВладельцев"      , СписокДоступныхУчетныхЗаписей);*/
				/*Запрос.УстановитьПараметр("СписокВладельцевМассив", МассивУчетныхЗаписей);*/
				/*Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЭлектронноеПисьмо.УчетнаяЗапись КАК УчетнаяЗапись
		|ИЗ
		|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|ГДЕ
		|	ЭлектронноеПисьмо.Ссылка В(&СписокПисем)";*/
				/*Выборка = Запрос.Выполнить().Выбрать();*/
				while(true/*Выборка.Следующий()*/)
				{
					/*СоответствиеЗаявленныхУчетныхЗаписей.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗапись);*/
				}
				/*;;*/
			}
			if(true/*ТипЗнч(МассивУчетныхЗаписей) = Тип("Массив")*/)
			{
			}
			/*// Пора показывать форму состояния отпарвки/получения
*/
			/*ФормаПрогрессора = ПолучитьОбщуюФорму("ФормаИндикацииПроцессаПолученияОтправкиПисемЭлектроннойПочты",,"УникальнаяФорма");*/
			/*ФормаПрогрессора.Задачи.Индексы.Добавить("Объект");*/
			/*ФормаПрогрессора.Задачи.Очистить();*/
			if(true/*ПоказыватьОкноВыполнения*/)
			{
				/*// Выведем те учетные записи, которые не прошли по заявленным
*/
				/*// Покажем в таблице значений учетные записи, по которым нет писем, но они должны обрабатываться, как обработанные
*/
				if(true/*МассивУчетныхЗаписей = Неопределено*/)
				{
				}
			}
			/*ФормаПрогрессора.Ошибки = "";*/
			/*ФормаПрогрессора.КомментарийОбработкиДанных = "Получение и отправка писем электронной почты";*/
			if(true/*СоответствиеУчетныхЗаписейВсего.Количество() > 0*/)
			{
				if(true/*ПоказыватьОкноВыполнения*/)
				{
					/*ФормаПрогрессора.Открыть();*/
				}
			}
			if(true/*ПоказыватьОкноВыполнения*/)
			{
				/*ФормаПрогрессора.Ошибки = СокрЛП(ТекстОшибок);*/
				if(true/*НЕ ФормаПрогрессора.Открыта()*/)
				{
					/*ФормаПрогрессора.Открыть();*/
				}
				if(true/*ПустаяСтрока(ФормаПрогрессора.Ошибки)*/)
				{
					/*ФормаПрогрессора.Закрыть();*/
				}
			}
			/*#КонецЕсли;*/
		}
		// Функция очищает от данных объект ИнтернетПисьмо, перед его сохранением в документе ЭлектронноеПисьмо
		//
		// Параметры
		//  Письмо - ИнтернетПисьмо
		//
		// Возвращаемое значение:
		//   НЕТ
		//

		public void ОчиститьПисьмо(/*Письмо*/)
		{
			/*Письмо.Вложения.Очистить();*/
			/*Письмо.Копии.Очистить();*/
			/*Письмо.Получатели.Очистить();*/
			/*Письмо.СлепыеКопии.Очистить();*/
		}
		// Функция обрабатывает пользовательское событие - создание нового электронного письма.
		//
		// Параметры:
		//  ТекущийПользователь          - СправочникСсылка.Пользователи, текущий пользователь
		//  СтруктураНовогоПисьма        - Структура с данными нового письма
		//    Ключи структуры:
		//     Тело                 - строка, текст письма (прочтой текст, или текст в формате ХТМЛ)
		//     Тема                 - Строка
		//     ВидТекста            - ПеречислениеСсылка.ВидыТекстовЭлектронныхПисем, вид текста нового письма
		//     СписокФайловВложений - СписокЗначений, где значения - структура параметров и знаяений для создания
		//                            нового элемента справочника ВложенияЭлектронныхПисем, ключи структуры
		//                            соответствуют именам реквизитов справочника ВложенияЭлектронныхПисем
		//     УчетнаяЗапись        - СправочникСсылка.УчетнаяЗапись, учетная запись нового письма
		//     Кому                 - Список значений, значение - адрес эл.почты, представление - представление получателя
		//     Копии                - Список значений, значение - адрес эл.почты, представление - представление получателя
		//     СкрытыеКопии         - Список значений, значение - адрес эл.почты, представление - представление получателя
		//     Основание            - ДокументСсылка.ЭлектронноеПисьмо, ДокументСсылка.Событие
		//     ГруппаУчетнойЗаписи  - элемент справочника ГруппыПисемЭлектроннойПочты, группа писем для нового письма
		//     Ответственный        - элемент справочника Пользователи, ответственный для запоолнения в письме
		//     КодировкаПисьма      - строка, задает кодировку письма, кроме ответов, переадресаций и скопированных писем,
		//                            т.е. писем с определенным объектом-основанием
		//
		//  ПеренестиВложенияИзОснования - Булево, переносить ли аттачи письма из основания (действует для копирования и пересылки)
		//  Копирование                  - булево, признак копирования электронного письма
		//  ТекущийЭлементХТМЛ           - Булево, устанавливать в качестве активного элемента в открытой форме письма поле ХТМЛ(Текстового) документа
		//  Дополнительно                - Строка, "Ответ", "Переадресация", вид действия при создании нового письма
		//  ФормаВладелец                - Форма, владелец для открываемой формы нового письма
		//  ПодписьПодТекстом            - Булево, устанавливать подпись в письме "после" или "перед" текстом.
		//  ОткрыватьПисьмо              - Булево, открывать форму письма или записывать письмо и не открывать форму
		//
		//  ВозвращаемреЗначение
		//   СтруктураПараметров - Структура
		//     Ключи структуры:
		//     Письмо       - ДокументОбъект.ЭлектронноеПисьмо, новое электронное письмо
		//     Форма        - Форма, форма нового электронного письма
		//     ПисьмоСсылка - ДокументСсылка.ЭлектронноеПисьмо, новое электронное письмо
		//

		public object НаписатьПисьмо(/*ТекущийПользователь, СтруктураНовогоПисьма = Неопределено, ПеренестиВложенияИзОснования = Ложь, Копирование = Ложь,
					   ТекущийЭлементХТМЛ = Ложь, Дополнительно = Неопределено, ФормаВладелец = Неопределено, ПодписьПодТекстом = Ложь,
					   ОткрыватьПисьмо = Истина*/)
		{
			if(true/*СтруктураНовогоПисьма = Неопределено*/)
			{
				/*СтруктураНовогоПисьма = Новый Структура;*/
			}
			/*// Определим учетную запись для создания письма
*/
			/*СписокДоступныхЗаписей = ПроверитьУчетныеЗаписиДляОтправкиПисем(ТекущийПользователь);*/
			if(true/*СписокДоступныхЗаписей.Количество() = 0*/)
			{
			}
			/*СтруктураНовогоПисьма.Свойство("УчетнаяЗапись", УчетнаяЗапись);*/
			if(true/*ЗначениеЗаполнено(УчетнаяЗапись) И СписокДоступныхЗаписей.НайтиПоЗначению(УчетнаяЗапись) = Неопределено*/)
			{
				/*УчетнаяЗапись = Справочники.УчетныеЗаписиЭлектроннойПочты.ПустаяСсылка();*/
			}
			if(true/*НЕ ЗначениеЗаполнено(УчетнаяЗапись)*/)
			{
				/*УчетнаяЗапись = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь, "ОсновнаяУчетнаяЗапись");*/
				if(true/*СписокДоступныхЗаписей.НайтиПоЗначению(УчетнаяЗапись) = Неопределено*/)
				{
					/*УчетнаяЗапись = Неопределено;*/
				}
			}
			if(true/*НЕ ЗначениеЗаполнено(УчетнаяЗапись)*/)
			{
				/*УчетнаяЗапись = СписокДоступныхЗаписей[0].Значение;*/
			}
			/*Письмо = Документы.ЭлектронноеПисьмо.СоздатьДокумент();*/
			/*Письмо.Дата                             = ТекущаяДата();*/
			/*Письмо.УчетнаяЗапись                    = УчетнаяЗапись;*/
			/*Письмо.ОтправительИмя                   = УчетнаяЗапись.Наименование;*/
			/*Письмо.ОтправительАдресЭлектроннойПочты = УчетнаяЗапись.АдресЭлектроннойПочты;*/
			/*Письмо.ОтправительПредставление         = УчетнаяЗапись.Наименование + " <" + УчетнаяЗапись.АдресЭлектроннойПочты + ">";*/
			/*СтруктураНовогоПисьма.Свойство("СписокФайловВложений", СписокФайловВложений);*/
			/*ОписаниеТиповПредмета = Новый ОписаниеТипов("Строка");*/
			/*СтруктураНовогоПисьма.Свойство("Основание", Основание);*/
			/*ЕстьДокументОснование = Ложь;*/
			if(true/*Основание <> Неопределено*/)
			{
				if(true/*Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание))*/)
				{
					/*ЕстьДокументОснование = Не Основание.Пустая();*/
				}
			}
			if(true/*ЕстьДокументОснование*/)
			{
				/*Письмо.ОснованиеПисьма = ?(Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Основание)), Основание, Основание.Ссылка);*/
				if(true/*ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо")*/)
				{
					/*Письмо.мОбъектОснование = Основание;*/
				}
				if(true/*Письмо.УчетнаяЗапись.ИспользоватьКлассификациюПисемПоПредметам*/)
				{
					/*СтруктураНовогоПисьма.Свойство("ПредметКонтакта", ПредметКонтакта);*/
					if(true/*ЗначениеЗаполнено(ПредметКонтакта) И ОписаниеТиповПредмета.СодержитТип(ТипЗнч(ПредметКонтакта))*/)
					{
						/*Письмо.ПредметКонтакта = ПредметКонтакта;*/
					}
				}
			}
			if(true/*ЕстьДокументОснование
	   И УчетнаяЗапись.ФорматПисьмаДляОтветовИПереадресацийБратьИзИсходного
	   И (ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо") ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо"))*/)
			{
				/*ВидТекста = Основание.ВидТекстаПисьма;*/
			}
			if(true/*ЕстьДокументОснование
	   И УчетнаяЗапись.КодировкуПисьмаДляОтветовБратьИзИсходного
	   И (ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо") ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо"))*/)
			{
				/*КодировкаПисьма = Основание.КодировкаПисьма;*/
			}
			/*СтруктураНовогоПисьма.Свойство("ЗаявкаКандидата", ЗаявкаКандидата);*/
			if(true/*ЗначениеЗаполнено(ЗаявкаКандидата)*/)
			{
				/*Письмо.ЗаявкаКандидата = ЗаявкаКандидата;*/
			}
			if(true/*НЕ ЗначениеЗаполнено(ВидТекста)*/)
			{
				/*Письмо.ВидТекстаПисьма = УчетнаяЗапись.ФорматТекстаПисьмаПоУмолчанию;*/
				if(true/*НЕ ЗначениеЗаполнено(Письмо.ВидТекстаПисьма)*/)
				{
					/*Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML;*/
				}
			}
			if(true/*ЗначениеЗаполнено(КодировкаПисьма)*/)
			{
				/*Письмо.КодировкаПисьма = КодировкаПисьма;*/
			}
			if(true/*НЕ ЗначениеЗаполнено(Письмо.КодировкаПисьма)*/)
			{
				/*Письмо.КодировкаПисьма = "utf-8";*/
			}
			if(true/*Дополнительно = "Ответ"*/)
			{
				/*Письмо.Ответ         = Истина;*/
			}
			/*СтруктураНовогоПисьма.Свойство("Тело", Тело);*/
			if(true/*ЗначениеЗаполнено(Тело)*/)
			{
				if(true/*Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками*/)
				{
					/*Письмо.ТекстПисьма = "<HTML><HEAD>
								 |<META http-equiv=Content-Type content=" + """" + "text/html; charset=" + ?(ЗначениеЗаполнено(Письмо.КодировкаПисьма), Письмо.КодировкаПисьма, "utf-8") + """" + ">
								 |<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
								 |<BODY><DIV>" + Тело + "</DIV></BODY></HTML>";*/
				}
			}
			/*СтруктураНовогоПисьма.Свойство("Тема", Тема);*/
			if(true/*ЗначениеЗаполнено(Тема)*/)
			{
				/*Письмо.Тема = Тема;*/
			}
			if(true/*ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументСсылка.Событие")*/)
			{
				if(true/*ТипЗнч(Основание) = Тип("ДокументСсылка.Событие")*/)
				{
					if(true/*Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками*/)
					{
						/*Тело = "<HTML><HEAD>
							  |<META http-equiv=Content-Type content=" + """" + "text/html; charset=" + Письмо.КодировкаПисьма + """" + ">
							  |<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
							  |<BODY>" + Основание.СодержаниеСобытия + "</BODY></HTML>";*/
					}
				}
				/*Письмо.ТекстПисьма = Тело;*/
			}
			/*СтруктураНовогоПисьма.Свойство("ГруппаУчетнойЗаписи", ГруппаУчетнойЗаписи);*/
			if(true/*ЗначениеЗаполнено(ГруппаУчетнойЗаписи) И ГруппаУчетнойЗаписи.Владелец = УчетнаяЗапись*/)
			{
				/*Письмо.ГруппаУчетнойЗаписи = ГруппаУчетнойЗаписи;*/
			}
			/*СтруктураНовогоПисьма.Свойство("Ответственный", Ответственный);*/
			if(true/*ЗначениеЗаполнено(Ответственный)*/)
			{
				/*Письмо.Ответственный = Ответственный;*/
			}
			/*СтруктураНовогоПисьма.Свойство("Кому", Кому);*/
			if(true/*ТипЗнч(Кому) = Тип("СписокЗначений")*/)
			{
			}
			/*Письмо.КомуПредставление = ПолучитьПредставлениеПолучателей(Письмо.КомуТЧ);*/
			/*СтруктураНовогоПисьма.Свойство("Копии", Копии);*/
			if(true/*ТипЗнч(Копии) = Тип("СписокЗначений")*/)
			{
			}
			/*Письмо.КопииПредставление = ПолучитьПредставлениеПолучателей(Письмо.КопииТЧ);*/
			/*СтруктураНовогоПисьма.Свойство("СкрытыеКопии", СкрытыеКопии);*/
			if(true/*ТипЗнч(СкрытыеКопии) = Тип("СписокЗначений")*/)
			{
			}
			if(true/*ФормаВладелец <> Неопределено*/)
			{
				/*ФормаПисьма = Письмо.ПолучитьФорму(, ФормаВладелец);*/
			}
			if(true/*ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо")
	 ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо")*/)
			{
				/*Запрос = Новый Запрос;*/
				/*Запрос.УстановитьПараметр("ТекСсылка"   , ?(ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо"), Основание, Основание.Ссылка));*/
				/*Запрос.УстановитьПараметр("ПустаяСтрока", "");*/
				/*Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенияЭлектронныхПисем.ИмяФайла КАК ИмяФайла,
		|	ВложенияЭлектронныхПисем.Хранилище КАК Хранилище,
		|	ВложенияЭлектронныхПисем.Наименование КАК Наименование,
		|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма КАК ИДФайлаПочтовогоПисьма
		|ИЗ
		|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
		|ГДЕ
		|	ВложенияЭлектронныхПисем.Объект = &ТекСсылка
		|	И (НЕ ВложенияЭлектронныхПисем.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";*/
				/*РезультатЗапроса = Запрос.Выполнить();*/
				if(true/*НЕ РезультатЗапроса.Пустой()*/)
				{
					/*Выборка = РезультатЗапроса.Выбрать();*/
					while(true/*Выборка.Следующий()*/)
					{
						if(true/*ПустаяСтрока(Выборка.ИДФайлаПочтовогоПисьма)*/)
						{
							if(true/*ПеренестиВложенияИзОснования*/)
							{
								/*СтрокаТЗ = ФормаПисьма.ВложенияПисьмаТЗ.Добавить();*/
								/*СтрокаТЗ.ИмяФайла     = Выборка.ИмяФайла;*/
								/*СтрокаТЗ.Наименование = Выборка.Наименование;*/
								/*СтрокаТЗ.Данные       = Выборка.Хранилище;*/
							}
						}
					}
					/*;;*/
				}
			}
			/*// Сформируем текст письма для ответа или переадресации
*/
			if(true/*(ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо") ИЛИ ТипЗнч(Основание) = Тип("ДокументОбъект.ЭлектронноеПисьмо"))
	   И НЕ Копирование*/)
			{
				/*ТекстПисьма = Письмо.ТекстПисьма;*/
				if(true/*Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками*/)
				{
					/*НачалоТела = Найти(ТекстПисьма, "<BODY");*/
					/*ДатаИсходногоПисьма = Основание.Дата;*/
					if(true/*(Основание.СтатусПисьма = Перечисления.СтатусыПисем.Полученное ИЛИ Основание.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное) И ЗначениеЗаполнено(Основание.Дата)*/)
					{
						/*ДатаИсходногоПисьма = Основание.Дата;*/
					}
					/*СтрокаОтправителя = "Отправитель: ";*/
					if(true/*НЕ ПустаяСтрока(Основание.ОтправительИмя)*/)
					{
						/*СтрокаОтправителя = СтрокаОтправителя + СокрЛП(Основание.ОтправительИмя) + " &lt<A href=" + """" + "mailto:" + СокрЛП(СтрЗаменить(Основание.ОтправительИмя, """", "")) + "<" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + ">" + """" + ">" + СокрЛП(Основание.ОтправительАдресЭлектроннойПочты) + "</A>&gt";*/
					}
					/*СтрокаКому = "";*/
					if(true/*НЕ ПустаяСтрока(СтрокаКому)*/)
					{
						/*СтрокаКому = "Получатели: " + СтрокаКому;*/
					}
					/*СтрокаКопии = "";*/
					if(true/*НЕ ПустаяСтрока(СтрокаКопии)*/)
					{
						/*СтрокаКопии = "Копии: " + СтрокаКопии;*/
					}
					if(true/*НачалоТела > 0*/)
					{
						/*// Ищем конец начала тела
*/
						/*а = НачалоТела;*/
						/*КонецНачалаТела = 0;*/
						while(true/*Истина*/)
						{
							if(true/*Сред(ТекстПисьма, а, 1) = ">"*/)
							{
								/*КонецНачалаТела = а;*/
								/*Прервать;*/
							}
						}
						/*; 
				
				НовыйТекстПисьма = Лев(ТекстПисьма, КонецНачалаТела) + "<DIV><BR></DIV>" + 
								  "<BLOCKQUOTE dir=ltr style=" + """" + "PADDING-LEFT: 15px; MARGIN-LEFT: 5px; BORDER-LEFT: #000000 2px solid; MARGIN-RIGHT: 0px" + """" + ">" + 
								  "<P><A href="+ """" + Строка(?(ТипЗнч(Основание) = Тип("ДокументСсылка.ЭлектронноеПисьмо"), Основание.УникальныйИдентификатор(), Основание.Ссылка.УникальныйИдентификатор())) + """" + ">--- Исходное сообщение --- </A>" + 
								  "<BR>Дата: " + Формат(ДатаИсходногоПисьма, "ДЛФ=DT") +
								  "<BR>" + СтрокаОтправителя;*/
						if(true/*НЕ ПустаяСтрока(СтрокаКому)*/)
						{
							/*НовыйТекстПисьма = НовыйТекстПисьма + "<BR>" + СтрокаКому;*/
						}
						if(true/*НЕ ПустаяСтрока(СтрокаКопии)*/)
						{
							/*НовыйТекстПисьма = НовыйТекстПисьма + "<BR>" + СтрокаКопии;*/
						}
						if(true/*НЕ ПустаяСтрока(Основание.Тема)*/)
						{
							/*НовыйТекстПисьма = НовыйТекстПисьма + "<BR>" + "Тема: " + Основание.Тема;*/
						}
						/*НовыйТекстПисьма = НовыйТекстПисьма + "</P><P><BR></P>";*/
						/*КонецТела = Найти(ТекстПисьма, "</BODY");*/
						if(true/*КонецТела > 0*/)
						{
							/*НовыйТекстПисьма = НовыйТекстПисьма + Сред(ТекстПисьма, (КонецНачалаТела + 1), (КонецТела - КонецНачалаТела - 1)) + "</BLOCKQUOTE>" + Сред(ТекстПисьма, КонецТела);*/
							/*Письмо.ТекстПисьма = НовыйТекстПисьма;*/
						}
					}
				}
			}
			/*// Проставим при необходимости подпись
*/
			if(true/*НЕ Копирование И ((УчетнаяЗапись.ДобавлятьПодписьКИсходящимПисьмам И Дополнительно = Неопределено)
	 ИЛИ ((Дополнительно = "Ответ" ИЛИ Дополнительно = "Переадресация") И УчетнаяЗапись.ДобавлятьПодписьКОтветамИПересылкам = Истина))*/)
			{
				/*Отказ = Ложь;*/
				/*НовыйКом = Новый COMОбъект("HtmlFile");*/
				/*НовыйКом.open("text/html");*/
				/*НовыйКом.write(УчетнаяЗапись.ТекстПодписи);*/
				/*НовыйКом.close();*/
				if(true/*Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками*/)
				{
					/*ТекстПисьма = Письмо.ТекстПисьма;*/
					if(true/*ПустаяСтрока(ТекстПисьма)*/)
					{
						/*ТекстПисьма = "<HTML><HEAD>
							  |<META http-equiv=Content-Type content=" + """" + "text/html; charset=" + Письмо.КодировкаПисьма + """" + ">
							  |<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
							  |<BODY><DIV></DIV></BODY></HTML>";*/
					}
					/*НачалоТела = Найти(ТекстПисьма, "<BODY");*/
					/*КонецНачалаТела = 0;*/
					/*а = НачалоТела;*/
					while(true/*Истина*/)
					{
						if(true/*Сред(ТекстПисьма, а, 1) = ">"*/)
						{
							/*КонецНачалаТела = а;*/
							/*Прервать;*/
						}
					}
					if(true/*НачалоТела = 0 ИЛИ КонецНачалаТела = 0*/)
					{
						/*Отказ = Истина;*/
					}
					/*ТегBODY = НовыйКом.all.Tags("BODY");*/
					if(true/*ТегBODY.length > 0*/)
					{
						/*ХТМЛПодписи = ТегBODY.item(0).innerHTML;*/
						if(true/*ПустаяСтрока(ХТМЛПодписи)*/)
						{
							/*Отказ = Истина;*/
						}
					}
					if(true/*НЕ Отказ*/)
					{
						if(true/*ПодписьПодТекстом*/)
						{
							/*НачалоКонцаТела = Найти(ТекстПисьма, "</BODY");*/
							if(true/*НачалоКонцаТела > 0*/)
							{
								/*НовыйТекстПисьма = Лев(ТекстПисьма, НачалоКонцаТела - 1);*/
								/*НовыйТекстПисьма  = НовыйТекстПисьма + "<BR>" + ХТМЛПодписи + Сред(ТекстПисьма, НачалоКонцаТела);*/
								/*Письмо.ТекстПисьма = НовыйТекстПисьма;*/
							}
						}
					}
				}
			}
			if(true/*ОткрыватьПисьмо*/)
			{
				if(true/*ТипЗнч(СписокФайловВложений) = Тип("СписокЗначений") И СписокФайловВложений.Количество() > 0*/)
				{
					/*ЗначениеСтруктурыВозврата = Неопределено;*/
				}
				/*ФормаПисьма.Открыть();*/
				/*// Установим удобный элемент управления в форме письма - текущим
*/
				if(true/*ТекущийЭлементХТМЛ*/)
				{
					if(true/*Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTML ИЛИ Письмо.ВидТекстаПисьма = Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками*/)
					{
						/*ФормаПисьма.ТекущийЭлемент = ФормаПисьма.ЭлементыФормы.ПолеHTMLДокумента;*/
					}
				}
				/*СтруктураВозврата = Новый Структура("Письмо, Форма, ПисьмоСсылка", Письмо, ФормаПисьма, Письмо.Ссылка);*/
			}
			if(true/*Не ОткрыватьПисьмо*/)
			{
				/*Попытка
			Письмо.Записать();*/
				/*Исключение
			Возврат ОписаниеОшибки();*/
				/*КонецПопытки;*/
				if(true/*ТипЗнч(СписокФайловВложений) = Тип("СписокЗначений") И СписокФайловВложений.Количество() > 0*/)
				{
					/*ЗначениеСтруктурыВозврата = Неопределено;*/
				}
				/*#Если Клиент Тогда
		СтруктураВозврата = Новый Структура("Письмо, Форма, ПисьмоСсылка", Письмо, ФормаПисьма, Письмо.Ссылка);*/
				/*#Иначе
		СтруктураВозврата = Новый Структура("Письмо, Форма, ПисьмоСсылка", Неопределено, Неопределено, Письмо.Ссылка);*/
				/*#КонецЕсли;*/
			}
			return null;
		}
		// Процедура обрабатывает событие пользователя "Ответить на письмо".
		//
		// Параметры:
		//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
		//  Письмо              - ДокументСсылка.ЭлектронноеПисьмо, письма для которого надо создать ответ
		//  ФормаВладелец       - Форма, владелец для открываемой формы нового письма
		//

		public void ОтветитьНаПисьмо(/*ТекущийПользователь, Письмо, ФормаВладелец = Неопределено*/)
		{
			/*СтруктураПисьма = Новый Структура;*/
			/*СтруктураПисьма.Вставить("Тема"           , ("Re: " + Письмо.Тема));*/
			/*СтруктураПисьма.Вставить("УчетнаяЗапись"  , Письмо.УчетнаяЗапись);*/
			/*СтруктураПисьма.Вставить("Основание"      , Письмо);*/
			/*СтруктураПисьма.Вставить("ПредметКонтакта", Письмо.ПредметКонтакта);*/
			/*СтруктураПисьма.Вставить("ЗаявкаКандидата", Письмо.ЗаявкаКандидата);*/
			if(true/*Письмо.УчетнаяЗапись.ПомещатьОтветыИПереадресацииВТужеГруппу*/)
			{
				/*СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.ГруппаУчетнойЗаписи);*/
			}
			/*СписокКому = Новый СписокЗначений;*/
			/*СписокКому.Добавить(Письмо.ОтправительАдресЭлектроннойПочты, Письмо.ОтправительИмя);*/
			/*СтруктураПисьма.Вставить("Кому", СписокКому);*/
			/*НаписатьПисьмо(ТекущийПользователь, СтруктураПисьма,,, Истина, "Ответ", ФормаВладелец);*/
		}
		// Процедура обрабатывает событие пользователя "Ответить на письмо всем".
		//
		// Параметры:
		//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
		//  Письмо              - ДокументСсылка.ЭлектронноеПисьмо, письма для которого надо создать ответ
		//  ФормаВладелец       - Форма, владелец для открываемой формы нового письма
		//

		public void ОтветитьВсемНаПисьмо(/*ТекущийПользователь, Письмо, ФормаВладелец = Неопределено*/)
		{
			/*СтруктураПисьма = Новый Структура;*/
			/*СтруктураПисьма.Вставить("Тема"           , ("Re: " + Письмо.Тема));*/
			/*СтруктураПисьма.Вставить("УчетнаяЗапись"  , Письмо.УчетнаяЗапись);*/
			/*СтруктураПисьма.Вставить("Основание"      , Письмо);*/
			/*СтруктураПисьма.Вставить("ПредметКонтакта", Письмо.ПредметКонтакта);*/
			if(true/*Письмо.УчетнаяЗапись.ПомещатьОтветыИПереадресацииВТужеГруппу*/)
			{
				/*СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.ГруппаУчетнойЗаписи);*/
			}
			/*СписокКому = Новый СписокЗначений;*/
			/*СписокКому.Добавить(Письмо.ОтправительАдресЭлектроннойПочты, Письмо.ОтправительИмя);*/
			/*СтруктураПисьма.Вставить("Кому", СписокКому);*/
			/*СписокКопии = Новый СписокЗначений;*/
			/*СтруктураПисьма.Вставить("Копии", СписокКопии);*/
			/*НаписатьПисьмо(ТекущийПользователь, СтруктураПисьма,,, Истина, "Ответ", ФормаВладелец);*/
		}
		// Процедура обрабатывает событие пользователя "Переслать письмо" а так же событие копирования писем.
		//
		// Параметры:
		//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
		//  Письмо              - ДокументСсылка.ЭлектронноеПисьмо, письмо для которого надо создать переадресацию или основание для копирования
		//  Копирование         - Булево, копирование электронного письма
		//  ФормаВладелец       - Форма, владелец для открываемой формы нового письма
		//

		public void ПереадресоватьПисьмо(/*ТекущийПользователь, Письмо, Копирование = Ложь, ФормаВладелец = Неопределено*/)
		{
			/*СтруктураПисьма = Новый Структура;*/
			if(true/*Копирование*/)
			{
				/*СтруктураПисьма.Вставить("Тема", Письмо.Тема);*/
				/*СписокКому = Новый СписокЗначений;*/
				/*СтруктураПисьма.Вставить("Кому", СписокКому);*/
				/*СписокКопии = Новый СписокЗначений;*/
				/*СтруктураПисьма.Вставить("Копии", СписокКопии);*/
				/*СписокСкрытыеКопии = Новый СписокЗначений;*/
				/*СтруктураПисьма.Вставить("СкрытыеКопии", СписокСкрытыеКопии);*/
			}
			if(true/*Копирование*/)
			{
				/*СтруктураПисьма.Вставить("ГруппаУчетнойЗаписи", Письмо.ГруппаУчетнойЗаписи);*/
			}
			/*СтруктураПисьма.Вставить("УчетнаяЗапись"  , Письмо.УчетнаяЗапись);*/
			/*СтруктураПисьма.Вставить("Основание"      , Письмо);*/
			/*СтруктураПисьма.Вставить("ПредметКонтакта", Письмо.ПредметКонтакта);*/
			/*НаписатьПисьмо(ТекущийПользователь, СтруктураПисьма, Истина, Копирование, , ?(НЕ Копирование, "Переадресация", Неопределено), ФормаВладелец);*/
		}
		// Процедура определяет для входящих электронных писем, в основном для ответов и переадресаций
		// предмет и документ основание по теме письма
		//
		// Параметры
		//  Письмо - ДокументОбъект.ЭлектронноеПисьмо, для которого определяем основание
		//

		public void НайтиИПроставитьОснованиеПисьма(/*Письмо*/)
		{
			/*ПреобразованнаяТема = ИсключитьПрефиксыТемыПисьма(Письмо.Тема);*/
			if(true/*Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет
		ИЛИ Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма
		ИЛИ Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма*/)
			{
				/*ТаблицаИсходныхДанных = Новый ТаблицаЗначений;*/
				/*ТаблицаИсходныхДанных.Колонки.Добавить("АдресЭлектроннойПочты", Новый ОписаниеТипов("Строка"));*/
				/*ТаблицаИсходныхДанных.Колонки.Добавить("ПредставлениеОбъекта" , Новый ОписаниеТипов("Строка"));*/
				/*СтрокаТаблицы = ТаблицаИсходныхДанных.Добавить();*/
				/*СтрокаТаблицы.АдресЭлектроннойПочты = Письмо.ОтправительАдресЭлектроннойПочты;*/
				/*Запрос = Новый Запрос;*/
				/*Запрос.УстановитьПараметр("ПреобразованнаяТема", ("%" + ПреобразованнаяТема));*/
				/*Запрос.УстановитьПараметр("Параметр"           , Письмо.ОтправительАдресЭлектроннойПочты);*/
				/*Запрос.УстановитьПараметр("УчетнаяЗапись"      , Письмо.УчетнаяЗапись);*/
				/*Запрос.УстановитьПараметр("Отправленное"       , Перечисления.СтатусыПисем.Отправленное);*/
				/*Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка                     КАК Ссылка,
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ПредметКонтакта     КАК ПредметКонтакта,
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ГруппаУчетнойЗаписи КАК ГруппаУчетнойЗаписи,
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ДатаТранспорта      КАК ДатаТранспортаТаблицы
		|ИЗ
		|	КритерийОтбора.ЭлектронныеПисьмаПоАдресуЭлектроннойПочты(&Параметр) КАК ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица
		|
		|ГДЕ
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.Тема ПОДОБНО &ПреобразованнаяТема
		|	И
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.УчетнаяЗапись = &УчетнаяЗапись
		|	И
		|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.СтатусПисьма = &Отправленное
		|	И
		|	НЕ ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ПометкаУдаления
		|";*/
				/*РезультатыПоиска = ПоискВКонтактнойИнформации(ТаблицаИсходныхДанных);*/
				if(true/*РезультатыПоиска.Количество() > 0*/)
				{
					/*СписокОбъектов = Новый СписокЗначений;*/
					if(true/*СписокОбъектов.Количество() > 0*/)
					{
						/*ЗапросДопИнформации = Новый Запрос;*/
						/*ЗапросДопИнформации.УстановитьПараметр("Тип"           , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);*/
						/*ЗапросДопИнформации.УстановитьПараметр("СписокОбъектов", СписокОбъектов);*/
						/*ЗапросДопИнформации.Текст = "
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	КонтактнаяИнформация.Представление
				|ИЗ
				|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
				|ГДЕ
				|	КонтактнаяИнформация.Тип = &Тип
				|	И
				|	КонтактнаяИнформация.Объект В(&СписокОбъектов)
				|";*/
						/*ВыборкаДопЗапроса = ЗапросДопИнформации.Выполнить().Выбрать();*/
						/*Счетчик = 0;*/
						while(true/*ВыборкаДопЗапроса.Следующий()*/)
						{
							if(true/*НЕ ЗначениеЗаполнено(ВыборкаДопЗапроса.Представление) ИЛИ Врег(ВыборкаДопЗапроса.Представление) = Врег(Письмо.ОтправительАдресЭлектроннойПочты)*/)
							{
								/*Продолжить;*/
							}
							/*Счетчик = Счетчик + 1;*/
							/*Запрос.УстановитьПараметр(("Параметр" + СокрЛП(Строка(Счетчик))), ВыборкаДопЗапроса.Представление);*/
							/*Запрос.Текст = Запрос.Текст + "
					|
					|ОБЪЕДИНИТЬ ВСЕ
					|
					|ВЫБРАТЬ ПЕРВЫЕ 1
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка                     КАК Ссылка,
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ПредметКонтакта     КАК ПредметКонтакта,
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ГруппаУчетнойЗаписи КАК ГруппаУчетнойЗаписи,
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ДатаТранспорта      КАК ДатаТранспортаТаблицы
					|ИЗ
					|	КритерийОтбора.ЭлектронныеПисьмаПоАдресуЭлектроннойПочты(&Параметр" + СокрЛП(Строка(Счетчик)) + ") КАК ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица
					|
					|ГДЕ
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.Тема ПОДОБНО &ПреобразованнаяТема
					|	И
					|	ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.УчетнаяЗапись = &УчетнаяЗапись
					|	И
					|	НЕ ЭлектронныеПисьмаПоАдресуЭлектроннойПочтыТаблица.Ссылка.ПометкаУдаления
					|
					|";*/
						}
						/*;;*/
					}
				}
				/*Запрос.Текст = Запрос.Текст + "
		|УПОРЯДОЧИТЬ ПО
		|	ДатаТранспортаТаблицы УБЫВ
		|";*/
				/*РезультатЗапроса = Запрос.Выполнить();*/
				if(true/*НЕ РезультатЗапроса.Пустой()*/)
				{
					/*Выборка = РезультатЗапроса.Выбрать();*/
					/*Выборка.Следующий();*/
					if(true/*Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьПредмет*/)
					{
						/*Письмо.ПредметКонтакта   = Выборка.ПредметКонтакта;*/
					}
					if(true/*Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьГруппуПисемНовогоПисьма И Выборка.ГруппаУчетнойЗаписи<>Письмо.УчетнаяЗапись.ГруппаИсходящие*/)
					{
						/*Письмо.ГруппаУчетнойЗаписи = Выборка.ГруппаУчетнойЗаписи;*/
					}
					if(true/*Письмо.УчетнаяЗапись.ДляВходящихОтветовИПереадресацийИскатьПисьмаОснованияИЗаполнятьОснованиеНовогоПисьма*/)
					{
						/*Письмо.ОснованиеПисьма = Выборка.Ссылка;*/
					}
				}
			}
		}
		// Процедура обрабатывает событие ПриВыводеСтроки в списках электронных писем.
		//

		public void ПриВыводеСтрокиЭлектронногоПисьма(/*Элемент, ОформлениеСтроки, ДанныеСтроки*/)
		{
			if(true/*ОформлениеСтроки.Ячейки.Найти("ЕстьВложения") <> Неопределено*/)
			{
				/*ОформлениеСтроки.Ячейки.ЕстьВложения.ОтображатьТекст  = Ложь;*/
				/*ОформлениеСтроки.Ячейки.ЕстьВложения.ОтображатьФлажок = Ложь;*/
				if(true/*ДанныеСтроки = Неопределено*/)
				{
					/*ОформлениеСтроки.Ячейки.ЕстьВложения.ОтображатьКартинку = Ложь;*/
				}
			}
			if(true/*Элемент.Значение.Колонки.Найти("СтатусПисьма") <> Неопределено*/)
			{
				if(true/*ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Сохраненное*/)
				{
					/*ОформлениеСтроки.ЦветФона = ЦветаСтиля.ЦветФонаФормы;*/
				}
			}
			/*// Рассмотренность писем
*/
			if(true/*ОформлениеСтроки.Ячейки.Найти("НеРассмотрено") <> Неопределено*/)
			{
				/*ОформлениеСтроки.Ячейки.НеРассмотрено.ОтображатьКартинку = Истина;*/
				/*ОформлениеСтроки.Ячейки.НеРассмотрено.ОтображатьТекст    = Ложь;*/
				/*ОформлениеСтроки.Ячейки.НеРассмотрено.ОтображатьФлажок   = Ложь;*/
				if(true/*ДанныеСтроки.НеРассмотрено*/)
				{
					/*ОформлениеСтроки.Ячейки.НеРассмотрено.ИндексКартинки = 0;*/
				}
			}
			/*// Статусы писем
*/
			if(true/*ОформлениеСтроки.Ячейки.Найти("СтатусПисьма") <> Неопределено*/)
			{
				/*ОформлениеСтроки.Ячейки.СтатусПисьма.ОтображатьКартинку = Истина;*/
				/*ОформлениеСтроки.Ячейки.СтатусПисьма.ОтображатьТекст    = Ложь;*/
				/*ОформлениеСтроки.Ячейки.СтатусПисьма.ОтображатьФлажок   = Ложь;*/
				if(true/*ДанныеСтроки.СтатусПисьма = Перечисления.СтатусыПисем.Исходящее*/)
				{
					if(true/*ДанныеСтроки.ПометкаУдаления*/)
					{
						/*ОформлениеСтроки.Ячейки.СтатусПисьма.ИндексКартинки = 7;*/
					}
				}
			}
			/*// Наличие потомков писем
*/
			if(true/*ОформлениеСтроки.Ячейки.Найти("СостояниеПотомкаПисьма") <> Неопределено*/)
			{
				/*ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ОтображатьКартинку = Истина;*/
				/*ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ОтображатьТекст    = Ложь;*/
				/*ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ОтображатьФлажок   = Ложь;*/
				if(true/*НЕ ЗначениеЗаполнено(ДанныеСтроки.СостояниеПотомкаПисьма)*/)
				{
					/*ОформлениеСтроки.Ячейки.СостояниеПотомкаПисьма.ИндексКартинки = 0;*/
				}
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ТЕКСТАМИ ЭЛЕКТРОННЫХ ПИСЕМ И ХТМЛ ТЕКСТАМИ

		public object ОткрытьФайлДляРедактированияВнешнимХТМЛРедактором(/*ИмяФайла*/)
		{
			/*Файл = Новый Файл(ИмяФайла);*/
			if(true/*НЕ Файл.Существует() ИЛИ Файл.ЭтоКаталог()*/)
			{
				/*ОбщегоНазначения.СообщитьОбОшибке("Ошибка открытия файла. Файл не найден на диске.");*/
			}
			/*ИмяПриложения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ПараметрыСеанса.ТекущийПользователь,"КоманднаяСтрокаДляЗапускаВнешнегоХТМЛРедактора");*/
			if(true/*Не ЗначениеЗаполнено(ИмяПриложения) ИЛИ ТипЗнч(ИмяПриложения) <> Тип("Строка")*/)
			{
				/*ОбщегоНазначения.СообщитьОбОшибке("У пользователя не указана командная строка для запуска внешнего HTML редактора текстов.",, "Редактирование невозможно.");*/
			}
			/*ИмяПриложения = Врег(ИмяПриложения);*/
			if(true/*Найти(ИмяПриложения, "[FILENAME]") = 0 ИЛИ СтрЧислоВхождений(ИмяПриложения, "[FILENAME]") > 1*/)
			{
				/*ОбщегоНазначения.СообщитьОбОшибке("В настройках пользователя некорректно задана командная строка для запуска внешнего HTML редактора текстов.
										  |Необходимо один раз указать место для подстановки имени файла в виде шаблона [FileName].",, "Редактирование невозможно.");*/
			}
			/*ИмяПриложения = СтрЗаменить(ИмяПриложения, "[FILENAME]",""" " + """" + ИмяФайла + """");*/
			/*ПолноеИмяBatФайла = КаталогВременныхФайлов() + "EditHTML.bat";*/
			/*ТекстBatФайла = Новый ТекстовыйДокумент;*/
			/*ТекстBatФайла.Вывод = ИспользованиеВывода.Разрешить;*/
			/*ТекстBatФайла.УстановитьТекст("START" + " """  + ИмяПриложения);*/
			/*ТекстBatФайла.Записать(ПолноеИмяBatФайла, КодировкаТекста.OEM);*/
			/*Попытка
		ЗапуститьПриложение(ПолноеИмяBatФайла);*/
			/*Исключение
		ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, "Невозможно запустить внешнее приложение.");*/
			/*КонецПопытки;*/
			return null;
		}

		public void НайтиИДобавитьПрефиксВТеги(/*Структура, ИмяТега*/)
		{
			/*а = 0;*/
			/*НайденоОтступов = 0;*/
			while(true/*а < Структура.length*/)
			{
				if(true/*Структура.item(а).nodeName = ИмяТега*/)
				{
					/*НайденоОтступов = НайденоОтступов + 1;*/
					/*НайтиИДобавитьПрефиксВТеги(Структура.item(а).all, ИмяТега);*/
					/*ТекстДляЗамены = Структура.item(а).innerText;*/
					/*Структура.item(а).innerText = "> " + СтрЗаменить(ТекстДляЗамены, Символы.ПС, (Символы.ПС + "> "));*/
				}
				/*а = а + 1;*/
			}
			/*;;*/
		}
		// <Описание функции>
		//
		// Параметры
		//  <Параметр1>  – <Тип.Вид> – <описание параметра>
		//                 <продолжение описания параметра>
		//  <Параметр2>  – <Тип.Вид> – <описание параметра>
		//                 <продолжение описания параметра>
		//
		// Возвращаемое значение:
		//   <Тип.Вид>   – <описание возвращаемого значения>
		//

		public object ПреобразоватьТекстИзХТМЛФорматаВПростой(/*ТекстВФорматеХТМЛ*/)
		{
			/*НовыйHTMLДокумент = Новый COMОбъект("HtmlFile");*/
			/*НовыйHTMLДокумент.open("text/html");*/
			/*НовыйHTMLДокумент.write(ТекстВФорматеХТМЛ);*/
			/*НовыйHTMLДокумент.close();*/
			return null;
		}
		// Процедура обрабатывает событие OnClick элемента управления ПолеHTMLДокумента
		// и в некоторых случаях подменяет стандартные действия
		//
		// Параметры
		//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь системы
		//  Элемент - ЭлементУправления ПолеHTMLДокумента
		//  pEvtObj - COMОбъект
		//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты, с которой при необходимости будет отправлено письмо
		//  ГруппаУчетнойЗаписи - группа учетной записи, в которую помещать письмо
		//  ФормаВладелец - форма, владелец для формы нового письма
		//
		// Возвращаемое значение
		//  НЕТ
		//

		public void ОбработкаСобытияOnClickПоляHTML(/*ТекущийПользователь, Элемент, pEvtObj, УчетнаяЗапись = Неопределено, ГруппаУчетнойЗаписи = Неопределено, ФормаВладелец = Неопределено, ЭлектронноеПисьмо = Неопределено*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*Узел = pEvtObj.srcElement;*/
			/*href = "";*/
			while(true/*Истина*/)
			{
				/*Попытка
			ИмяЦели = Узел.tagName
		Исключение
			Прервать;*/
				/*КонецПопытки;*/
				if(true/*ИмяЦели = "A"*/)
				{
					/*Попытка
				href = Узел.href;*/
					/*Исключение
			КонецПопытки;*/
					/*Прервать;*/
				}
				/*Узел = Узел.parentElement;*/
			}
			if(true/*НЕ ПустаяСтрока(href)*/)
			{
				if(true/*(СтрЧислоВхождений(href, "ИмяФайлаРедактированияХТМЛТекста") > 0) И
			(((ТипЗнч(ЭлектронноеПисьмо) = Тип("ДокументСсылка.ЭлектронноеПисьмо")) И Не ЭлектронноеПисьмо.Пустая())
				ИЛИ 
			((ТипЗнч(ЭлектронноеПисьмо) = Тип("ДокументОбъект.ЭлектронноеПисьмо")) И Не ЭлектронноеПисьмо.ЭтоНовый()))*/)
				{
					if(true/*ИмяКомпьютера() <> ЭлектронноеПисьмо.ИмяКомпьютераРедактированияХТМЛТекста*/)
					{
						/*Сообщить("Файл редактируется на копмьютере""" + ЭлектронноеПисьмо.ИмяКомпьютераРедактированияХТМЛТекста + """" + ". Редактирование на текущем комьютере невозможно.");*/
					}
				}
				if(true/*НЕ СтандартнаяОбработка*/)
				{
					/*pEvtObj.returnValue  = Ложь;*/
				}
			}
		}
		// Процедура обрабатывает событие пользователя перехода по ссылке
		// из поля текстового документа
		//
		// Параметры
		//  ВыделенныйТекст - текст ссылки для перехода
		//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
		//  ФормаВладелец - Форма, владелец для возможно новой открытой формы письма
		//

		public void ПерейтиПоСсылкеИзХТМЛПоля(/*Знач ВыделенныйТекст, ТекущийПользователь, ФормаВладелец, УчетнаяЗапись*/)
		{
			if(true/*ПустаяСтрока(ВыделенныйТекст)*/)
			{
			}
			if(true/*СтрЧислоВхождений(ВыделенныйТекст, "@") = 1 И СтрЧислоВхождений(ВыделенныйТекст, "http://") = 0*/)
			{
				/*СтруктураНовогоПисьма = Новый Структура;*/
				if(true/*Найти(ВыделенныйТекст, "mailto:") > 0*/)
				{
					/*ВыделенныйТекст = СтрЗаменить(ВыделенныйТекст, "mailto:", "");*/
				}
				/*СписокПолучателей = Новый СписокЗначений;*/
				/*СписокПолучателей.Добавить(СокрЛП(ВыделенныйТекст), СокрЛП(ВыделенныйТекст));*/
				/*СтруктураНовогоПисьма.Вставить("Кому", СписокПолучателей);*/
				if(true/*УчетнаяЗапись <> Неопределено*/)
				{
					/*СтруктураНовогоПисьма.Вставить("УчетнаяЗапись", УчетнаяЗапись);*/
				}
				/*НаписатьПисьмо(ТекущийПользователь, СтруктураНовогоПисьма,,, Истина,, ФормаВладелец);*/
			}
		}
		// Функция заменяет в ХТМЛ тексте ссылку на файл с картинкой на диске на некий УникальныйИдентификатор
		// по которому потом в Хранилище доп.информации ищутся необходимые картинки, сохраняются на диске
		// и ссылки на них подставляют в ХТМЛ текст вместо уникальных идентификаторов.
		//
		// Параметры
		//  ДокументCOMОбъект - COM Объект, ХТМЛ
		//  Письмо - ДокументСсылка.ЭлектронноеПисьмо
		//  СоответствиеПисемИТекстов - Соответствие, соответствие уже преобразованных в текущей сессии текстов писем
		//
		// Возвращаемое значение:
		//   Структура, Преобразованный ХТМЛ текст, таблица вложений
		//

		public object ПропарситьHTMLТекстКартинкаВ_ИД(/*ДокументCOMОбъект, Письмо = Неопределено, СоответствиеПисемИТекстов*/)
		{
			if(true/*ЗначениеЗаполнено(Письмо)*/)
			{
				/*НайденноеСоответствие = СоответствиеПисемИТекстов.Получить(Письмо);*/
				/*// Найдем старые картинки от ХТМЛ
*/
				/*Запрос = Новый Запрос;*/
				/*Запрос.УстановитьПараметр("ПустаяСтрока","");*/
				/*Запрос.УстановитьПараметр("Письмо", Письмо);*/
				/*Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенияЭлектронныхПисем.Ссылка                 КАК Ссылка,
		|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма КАК ИДФайлаПочтовогоПисьма,
		|	ВложенияЭлектронныхПисем.ИмяФайла               КАК ИмяФайла
		|	
		|ИЗ
		|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
		|
		|ГДЕ
		|	ВложенияЭлектронныхПисем.ПометкаУдаления = ЛОЖЬ
		|	И
		|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма <> &ПустаяСтрока
		|	И
		|	ВложенияЭлектронныхПисем.Объект = &Письмо
		|";*/
				/*ТаблицаСуществующихФайлов = Запрос.Выполнить().Выгрузить();*/
				/*ТаблицаСуществующихФайлов.Индексы.Добавить("ИДФайлаПочтовогоПисьма");*/
			}
			/*ТаблицаСоответствий = Новый ТаблицаЗначений;*/
			/*ТаблицаСоответствий.Колонки.Добавить("ИД"          , Новый ОписаниеТипов("Строка"));*/
			/*ТаблицаСоответствий.Колонки.Добавить("Файл"        , Новый ОписаниеТипов("Файл"));*/
			/*ТаблицаСоответствий.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));*/
			/*ПолученнаяСтрокаТекста = "";*/
			/*ТегиКартинок = ДокументCOMОбъект.all.tags("img");*/
			/*// Удалим ненужные картинки
*/
			if(true/*ТипЗнч(ТаблицаСуществующихФайлов) = Тип("ТаблицаЗначений") И ТаблицаСуществующихФайлов.Количество() > 0*/)
			{
				if(true/*НайденноеСоответствие <> Неопределено*/)
				{
					/*СоответствиеПисемИТекстов.Удалить(Письмо);*/
				}
			}
			/*СтруктураВозврата = Новый Структура("ТекстПисьма, ТаблицаСоответствий", ДокументCOMОбъект.all.tags("html").item(0).outerHTML, ТаблицаСоответствий);*/
			return null;
		}
		// Функция заменяет в ХТМЛ тексте уникальные идентификаторы на ссылки на картинки на диске,
		// и при необходимости сохраняет файлы из аттачей письма на диск
		//
		// Параметры
		//  СоответствиеТекстовЭлектронныхПисем - Соответствие, письма и ХТМЛ тексты, которые уже были преобразованы в текущем сеансе
		//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
		//  Письмо - ДокументСсылка.ЭлектронноеПисьмо или таблица значений с аттачами письма
		//  ТекстПисьма - Строка, текст для преобразования
		//
		// Возвращаемое значение:
		//   Строка, преобразованный текст
		//

		public object ПропарситьHTMLИДВ_ТекстКартинки(/*СоответствиеТекстовЭлектронныхПисем, ТекущийПользователь, Письмо, ТекстПисьма*/)
		{
			if(true/*ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмо")*/)
			{
				/*ВременноеЗначение = СоответствиеТекстовЭлектронныхПисем.Получить(Письмо);*/
				if(true/*ВременноеЗначение <> Неопределено*/)
				{
					/*ТекстПисьма = ВременноеЗначение;*/
				}
				if(true/*Письмо.ВидТекстаПисьма <> Перечисления.ВидыТекстовЭлектронныхПисем.HTMLСКартинками*/)
				{
					/*ТекстПисьма = Письмо.ТекстПисьма;*/
					/*СоответствиеТекстовЭлектронныхПисем.Вставить(Письмо, ТекстПисьма);*/
				}
				/*Запрос = Новый Запрос;*/
				/*Запрос.УстановитьПараметр("ПустаяСтрока", "");*/
				/*Запрос.УстановитьПараметр("Письмо", Письмо);*/
				/*Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенияЭлектронныхПисем.Хранилище              КАК Данные,
		|	ВложенияЭлектронныхПисем.ИмяФайла               КАК ИмяФайла,
		|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма КАК ИДФайлаПочтовогоПисьма
		|ИЗ
		|	Справочник.ВложенияЭлектронныхПисем КАК ВложенияЭлектронныхПисем
		|
		|ГДЕ
		|	ВложенияЭлектронныхПисем.ПометкаУдаления = ЛОЖЬ
		|	И
		|	ВложенияЭлектронныхПисем.ИДФайлаПочтовогоПисьма <> &ПустаяСтрока
		|	И
		|	ВложенияЭлектронныхПисем.Объект = &Письмо
		|";*/
				/*РезультатЗапроса = Запрос.Выполнить();*/
				if(true/*РезультатЗапроса.Пустой()*/)
				{
				}
				/*ТаблицаДанных = РезультатЗапроса.Выгрузить();*/
			}
			if(true/*ТипЗнч(Письмо) = Тип("ДокументСсылка.ЭлектронноеПисьмо")*/)
			{
				/*СоответствиеТекстовЭлектронныхПисем.Вставить(Письмо, ТекстПисьма);*/
			}
			return null;
		}
		// ПропарситьHTMLИДВ_ТекстКартинки()
		// Функция ищет вхождение в переданную строку значений из списка значений
		//
		// Параметры
		//  Строка - исходная строка для поиска
		//  ПодстрокиПоиска - список значений с коллекцией подстрок для поиска
		//  СтрокаПоиска - элемент, в который возвращается найденное значение строки подпоиска
		//
		// Возвращаемое значение:
		//  Наименьшая позиция найденного значения
		//

		public object ПоискПервойПодстроки(/*Строка,ПодстрокиПоиска,СтрокаПоиска*/)
		{
			/*Результат = 0;*/
			return null;
		}

		public object СократитьТекстПисьма(/*ТекстПисьма,СократитьДоКоличестваСтрок=3*/)
		{
			/*Текст = ТекстПисьма;*/
			/*// сократим пробелы
*/
			while(true/*Найти(Текст,"  ")>0*/)
			{
				/*Текст = СтрЗаменить(Текст,"  "," ");*/
			}
			/*// уберем пустые строчки и ограничем количество строк
*/
			/*ИсходныйТекст = Текст;*/
			/*Текст = "";*/
			/*ОбработаноСтрок = 0;*/
			return null;
		}
		// Функция возвращает по переданному тексту строку
		// в формате HTML с выделенными ссылками на ресурсы www
		//
		// Параметры
		//  ТекстПисьма - текстовая строка
		//
		// Возвращаемое значение:
		//  Текст в формате HTML
		//

		public object ВернутьТекстПисьмаВФорматеHTML(/*ТекстПисьма*/)
		{
			/*Текст = ТекстПисьма;*/
			/*ТекстПоиска = Текст;*/
			/*СмещениеВТексте = 0;*/
			/*ПодстрокиПоиска = Новый СписокЗначений;*/
			/*ПодстрокиПоиска.Добавить("http://");*/
			/*ПодстрокиПоиска.Добавить("www.");*/
			/*ПодстрокиПоиска.Добавить("mailto:");*/
			/*ПозицияПризнакаСсылки = ПоискПервойПодстроки(ТекстПоиска,ПодстрокиПоиска,СтрокаПоиска);*/
			/*// пробежимся по всем найденным ссылкам
*/
			while(true/*ПозицияПризнакаСсылки>0*/)
			{
				/*НачалоСсылки = ПозицияПризнакаСсылки;*/
				/*// найдем последний символ ссылки
*/
				/*КонецСсылки = НачалоСсылки+СтрДлина(СтрокаПоиска)-1;*/
				if(true/*КонецСсылки > НачалоСсылки+СтрДлина(СтрокаПоиска)-1*/)
				{
					/*ТекстСсылки   = Сред(ТекстПоиска,НачалоСсылки,КонецСсылки-НачалоСсылки+1);*/
					/*ТекстСсылкиHTML = "<a href="""+?(СтрокаПоиска="www.","http://","")+ТекстСсылки+""">"+ТекстСсылки+"</a>";*/
					/*ТекстДоСсылки = Лев(Текст,НачалоСсылки+СмещениеВТексте-1);*/
					/*ТекстПослеСсылки = Прав(Текст,СтрДлина(Текст)-(КонецСсылки+СмещениеВТексте));*/
					/*Текст = ТекстДоСсылки + ТекстСсылкиHTML + ТекстПослеСсылки;*/
					/*СмещениеВТексте = СмещениеВТексте + КонецСсылки + (СтрДлина(ТекстСсылкиHTML)-СтрДлина(ТекстСсылки));*/
				}
				/*ТекстПоиска = Прав(ТекстПоиска,СтрДлина(ТекстПоиска)-КонецСсылки);*/
				/*ПозицияПризнакаСсылки = ПоискПервойПодстроки(ТекстПоиска,ПодстрокиПоиска,СтрокаПоиска);*/
			}
			/*;
	
	Текст = СтрЗаменить(Текст, Символы.ПС, "<BR>");*/
			/*ТекстВформатеHTML = "<HTML><HEAD>
	|<META http-equiv=Content-Type content=" + """" + "text/html; charset=utf-8" + """" + ">
	|<META content=" + """" + "MSHTML 6.00.2800.1400" + """" + " name=GENERATOR></HEAD>
	|<BODY scroll=""auto""><FONT face=""MS Sans Serif"" size=1>" + Текст + "</FONT></BODY></HTML>";*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С МЕХАНИЗМОМ ФИЛЬТРАЦИИ ЭЛЕКТРОННЫХ ПИСЕМ
		// Процедура вызывается при получении письма, и при необходимости
		// отрабатывает фильтры, настроенные в учетной записи письма
		//
		// Параметры:
		//  Письмо - ДокументОбъект.ЭлектронноеПисьмо
		//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
		//

		public void ПрименитьФильтрыКПисьму(/*Письмо, ТекущийПользователь, ЗаписыватьОбъект = Ложь*/)
		{
			if(true/*ТипЗнч(Письмо) <> Тип("ДокументОбъект.ЭлектронноеПисьмо")*/)
			{
			}
			/*УчетнаяЗапись = Письмо.УчетнаяЗапись;*/
			if(true/*ТипЗнч(УчетнаяЗапись) <> Тип("СправочникСсылка.УчетныеЗаписиЭлектроннойПочты")*/)
			{
			}
			/*ВыборкаФильтров = Справочники.ФильтрыДляЭлектронныхПисем.Выбрать(, УчетнаяЗапись, Новый Структура("Использование", Истина), "Порядок ВОЗР");*/
			/*ПодходящийФильтр = Неопределено;*/
			while(true/*ВыборкаФильтров.Следующий()*/)
			{
				if(true/*ПодходящийФильтр <> Неопределено
		   И ПодходящийФильтр.ДействияФильтра.Найти(Перечисления.ВидыДействийФильтровЭлектронныхПисем.ПродолжитьДальнейшуюОбработкуПравил, "ДействиеФильтра") = Неопределено*/)
				{
					/*Прервать;*/
				}
				if(true/*ВыборкаФильтров.ПометкаУдаления*/)
				{
					/*Продолжить;*/
				}
				/*СписокРезультатовОперацийСтрокТЧ = Новый СписокЗначений;*/
				if(true/*ВыборкаФильтров.ОперацияУсловия*/)
				{
					/*// Соединение условий по "И"
*/
					if(true/*СписокРезультатовОперацийСтрокТЧ.НайтиПоЗначению(Ложь) = Неопределено*/)
					{
						/*ПодходящийФильтр = ВыборкаФильтров.Ссылка;*/
					}
				}
			}
			if(true/*ПодходящийФильтр <> Неопределено*/)
			{
				/*ПрименитьДействиеФильтра(Письмо, ПодходящийФильтр, ТекущийПользователь);*/
				if(true/*ЗаписыватьОбъект*/)
				{
					/*Попытка
				Письмо.Записать();*/
					/*Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());*/
					/*КонецПопытки;*/
				}
			}
		}
		// Функция определяет значение для фильтра, по которому происходит фильтрация
		//
		// Параметры
		//  Письмо - ДокументОбъект.ЭлектронноеПисьмо
		//  УсловиеФильтра - ПеречислениеСсылка.УсловияФильтровЭлектронныхПисем, условие фильтрации
		//
		// Возвращаемое значение:
		//   Строка
		//

		public object ПолучитьЗначениеАгрументаУсловияФильтра(/*Письмо, УсловиеФильтра*/)
		{
			/*ЗначениеВозврата = Неопределено;*/
			if(true/*УсловиеФильтра = Перечисления.УсловияФильтровЭлектронныхПисем.ПолеКомуСодержит*/)
			{
				/*ЗначениеВозврата = Письмо.Кому;*/
			}
			return null;
		}
		// Функция проверяет, удовлетворяет ли данное письмо текущему фильтру.
		//
		// Параметры
		//  ЗначениеДляПроверки - Строка, значение одного из реквизитов письма
		//  ОтрицаниеУсловия - Булево, отрицание условия - это истина
		//  ЗначениеФильтра - Неопределено, значение указанное в параметрах фильтра для проверки
		//
		// Возвращаемое значение:
		//   Булево, удовлетворяет или нет текущему фильтру
		//

		public object ПроверитьУсловиеФильтра(/*ЗначениеДляПроверки, ОтрицаниеУсловия, ЗначениеФильтра*/)
		{
			/*РезультатПроверки = Неопределено;*/
			if(true/*СтрЧислоВхождений(ЗначениеДляПроверки, ЗначениеФильтра) > 0*/)
			{
				/*РезультатПроверки = Истина;*/
			}
			if(true/*ОтрицаниеУсловия*/)
			{
				/*РезультатПроверки = НЕ РезультатПроверки;*/
			}
			return null;
		}
		// Процедура изменяет параметры письма в соответствии с походящим фильтром.
		//
		// Параметры:
		//  Письмо - ДокументОбъект.ЭлектронноеПисьмо, значения реквизитов которого необходимо изменить
		//  ПодходящийФильтр - СправочникСсылка.ФильтрыДляЭлектронныхПисем, фильтр найденный для текущего письма
		//  ТекущийПользователь - СправочникСсылка.Пользователи, текущий пользователь
		//

		public void ПрименитьДействиеФильтра(/*Письмо, ПодходящийФильтр, ТекущийПользователь*/)
		{
		}
		// Функция открывает форму письма из объекта ИнтернетПочтовогоСообщения
		// для целей, когда письмо является аттачем другого письма
		//
		// Параметры
		//  ОбъектФайла - СправочникСсылка.ВложенияЭлектронныхПисем
		//
		// Возвращаемое значение
		//  Булево - успешное завершение операции
		//

		public object ОткрытьФайлMSG(/*ОбъектФайла*/)
		{
			if(true/*ТипЗнч(ОбъектФайла) <> Тип("СправочникСсылка.ВложенияЭлектронныхПисем")*/)
			{
			}
			/*Данные = ОбъектФайла.Хранилище.Получить();*/
			if(true/*ТипЗнч(Данные) <> Тип("ИнтернетПочтовоеСообщение")*/)
			{
			}
			/*Запрос = Новый Запрос;*/
			if(true/*ТипЗнч(Данные.Отправитель) = Тип("Строка")*/)
			{
				/*Запрос.УстановитьПараметр("АдресЭлектроннойПочты", Данные.Отправитель);*/
			}
			/*Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты = &АдресЭлектроннойПочты
	|";*/
			/*РезультатЗапроса = Запрос.Выполнить();*/
			if(true/*НЕ РезультатЗапроса.Пустой()*/)
			{
				/*Выборка = РезультатЗапроса.Выбрать();*/
				/*Выборка.Следующий();*/
				/*УчетнаяЗапись = Выборка.Ссылка;*/
			}
			/*ДокументПисьмо = ПолучитьДокументОбъектИзИнтернетПочтовогоСообщения(Данные, УчетнаяЗапись,,);*/
			/*ДокументПисьмо.СтатусПисьма = Перечисления.СтатусыПисем.Отправленное;*/
			/*ДокументПисьмо.мРежимБезЗаписи = Истина;*/
			/*ФормаПисьма = ДокументПисьмо.ПолучитьФорму();*/
			/*СписокВыбора = Новый СписокЗначений;*/
			/*СписокВыбора.Добавить(УчетнаяЗапись, УчетнаяЗапись);*/
			/*ФормаПисьма.ЭлементыФормы.УчетнаяЗапись.СписокВыбора = СписокВыбора;*/
			/*ФормаПисьма.Открыть();*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С УЧЕТНЫМИ ЗАПИСЯМИ ЭЛЕКТРОННОЙ ПОЧТЫ
		// Функция определяет для текущего пользователя учетные записи, доступ к которым разрешен
		//
		// Параметры
		//  Пользователь - СправочникСсылка.Пользователи, текущий пользователь
		//
		// Возвращаемое значение:
		//   СтруктураВозврата - структура
		//   Ключи:
		//    - Чтение, список значений, учетные записи доступные для чтения
		//    - Запись, список значений, учетные записи доступные для отправки
		//    - ГруппыВходящие, список значений, группы писем электронной почты, как входящие в учетной записи
		//    - ГруппыИсходящие, список значений, группы писем электронной почты, как исходящие в учетной записи
		//    - ГруппыУдаленные, список значений, группы писем электронной почты, как удаленные в учетной записи
		//

		public object ПолучитьДоступныеУчетныеЗаписи(/*Пользователь*/)
		{
			/*СписокЧтение = Новый СписокЗначений;*/
			/*СписокЗапись = Новый СписокЗначений;*/
			/*ГруппыВходящие  = Новый Соответствие;*/
			/*ГруппыИсходящие = Новый Соответствие;*/
			/*ГруппыУдаленные = Новый Соответствие;*/
			/*ГруппыЧерновики = Новый Соответствие;*/
			/*ГруппыНежелательные = Новый Соответствие;*/
			if(true/*ПравоДоступа("Чтение", Метаданные.Справочники.УчетныеЗаписиЭлектроннойПочты)*/)
			{
				if(true/*НЕ ЗначениеЗаполнено(Пользователь) ИЛИ Пользователь = ПараметрыСеанса.ТекущийПользователь*/)
				{
					/*РольПолныеПрава = РольДоступна("ПолныеПрава");*/
				}
				/*Запрос = Новый Запрос;*/
				/*Запрос.УстановитьПараметр("ТекПользователь", Пользователь);*/
				/*Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	УчетныеЗаписиЭлектроннойПочты.Ссылка                                     КАК УчетнаяЗапись,
		|	УчетныеЗаписиЭлектроннойПочты.Наименование                               КАК УчетнаяЗаписьНаименование,
		|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты                      КАК УчетнаяЗаписьАдресЭлектроннойПочты,
		|	УчетныеЗаписиЭлектроннойПочты.ГруппаВходящие                             КАК УчетнаяЗаписьГруппаВходящие,
		|	УчетныеЗаписиЭлектроннойПочты.ГруппаИсходящие                            КАК УчетнаяЗаписьГруппаИсходящие,
		|	УчетныеЗаписиЭлектроннойПочты.ГруппаУдаленные                            КАК УчетнаяЗаписьГруппаУдаленные,
		|	УчетныеЗаписиЭлектроннойПочты.ГруппаЧерновики                            КАК УчетнаяЗаписьГруппаЧерновики,
		|	УчетныеЗаписиЭлектроннойПочты.ГруппаНежелательные                        КАК УчетнаяЗаписьГруппаНежелательные,";*/
				if(true/*ЗначениеЗаполнено(Пользователь) И НЕ РольПолныеПрава*/)
				{
					/*Запрос.Текст = Запрос.Текст + "
			|	ВЫБОР КОГДА УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Запись ЕСТЬ NULL ТОГДА ЛОЖЬ 
			|		ИНАЧЕ УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Запись КОНЕЦ КАК Запись";*/
				}
				/*Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты";*/
				if(true/*ЗначениеЗаполнено(Пользователь) И НЕ РольПолныеПрава*/)
				{
					/*Запрос.Текст = Запрос.Текст + "
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.УчетныеЗаписиЭлектроннойПочты.ДоступКУчетнойЗаписи КАК УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи
			|		ПО УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка = УчетныеЗаписиЭлектроннойПочты.Ссылка И
			|		УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Пользователь = &ТекПользователь
			|ГДЕ
			|	(НЕ УчетныеЗаписиЭлектроннойПочтыДоступКУчетнойЗаписи.Ссылка.ПометкаУдаления)
			|
			|УПОРЯДОЧИТЬ ПО УчетныеЗаписиЭлектроннойПочты.Наименование
			|";*/
				}
				/*Выборка = Запрос.Выполнить().Выбрать();*/
				while(true/*Выборка.Следующий()*/)
				{
					/*СписокЧтение.Добавить(Выборка.УчетнаяЗапись, (Выборка.УчетнаяЗаписьНаименование + " <" + Выборка.УчетнаяЗаписьАдресЭлектроннойПочты + ">"));*/
					if(true/*Выборка.Запись = Истина*/)
					{
						/*СписокЗапись.Добавить(Выборка.УчетнаяЗапись, (Выборка.УчетнаяЗаписьНаименование + " <" + Выборка.УчетнаяЗаписьАдресЭлектроннойПочты + ">"));*/
					}
					if(true/*ЗначениеЗаполнено(Выборка.УчетнаяЗаписьГруппаВходящие)*/)
					{
						/*ГруппыВходящие.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаВходящие);*/
					}
					if(true/*ЗначениеЗаполнено(Выборка.УчетнаяЗаписьГруппаИсходящие)*/)
					{
						/*ГруппыИсходящие.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаИсходящие);*/
					}
					if(true/*ЗначениеЗаполнено(Выборка.УчетнаяЗаписьГруппаУдаленные)*/)
					{
						/*ГруппыУдаленные.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаУдаленные);*/
					}
					if(true/*ЗначениеЗаполнено(Выборка.УчетнаяЗаписьГруппаЧерновики)*/)
					{
						/*ГруппыЧерновики.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаЧерновики);*/
					}
					if(true/*ЗначениеЗаполнено(Выборка.УчетнаяЗаписьГруппаНежелательные)*/)
					{
						/*ГруппыНежелательные.Вставить(Выборка.УчетнаяЗапись, Выборка.УчетнаяЗаписьГруппаНежелательные);*/
					}
				}
				/*;;*/
			}
			return null;
		}
		// Функция осуществляет поиск данных в контактной информации по адресам электронной почты
		//
		// Параметры
		//  ТаблицаПредставленийКонтактнойИнформации - таблица с исходными данными для поиска по контактной информации
		//  ПоИмениОбъекта - Булево, осуществлять поиск по имени или по адресу электронной почты объекта
		//
		// Возвращаемое значение:
		//   ТаблицаЗапроса - ТаблицаЗначений, результат поиска
		//

		public object ПоискВКонтактнойИнформации(/*ТаблицаПредставленийКонтактнойИнформации, ПоИмениОбъекта = Ложь*/)
		{
			/*Запрос = Новый Запрос;*/
			/*СтрокаУсловий = "";*/
			/*СтрокаУсловийГде = "";*/
			/*ИндексУсловия = 0;*/
			if(true/*НЕ ПустаяСтрока(СтрокаУсловий)*/)
			{
				/*СтрокаУсловий = " И (" + СтрокаУсловий + ")";*/
			}
			/*Запрос.УстановитьПараметр("Тип"                , Перечисления.ТипыКонтактнойИнформации.АдресЭлектроннойПочты);*/
			/*Запрос.УстановитьПараметр("ДатаСреза"          , ТекущаяДата());*/
			/*Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КонтактнаяИнформация.Объект.Наименование КАК ПредставлениеОбъекта,
	|	КонтактнаяИнформация.Объект              КАК Объект,
	|	КонтактнаяИнформация.Вид                 КАК Вид,
	|	КонтактнаяИнформация.Представление       КАК Представление
	|ИЗ
	|	РегистрСведений.КонтактнаяИнформация КАК КонтактнаяИнформация
	|ГДЕ
	|	КонтактнаяИнформация.Тип = &Тип" + СтрокаУсловий + "
	|";*/
			if(true/*Не ПустаяСтрока(СтрокаУсловийГде)*/)
			{
				/*Запрос.Текст = Запрос.Текст + "
		|И
		|	(" + СтрокаУсловийГде + ")
		|";*/
			}
			/*Запрос.Текст = Запрос.Текст + "
	|
	|УПОРЯДОЧИТЬ ПО КонтактнаяИнформация.Объект.Наименование
	|";*/
			/*ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();*/
			return null;
		}
		// ОбъектыКонтактнойИнформации()
		// Функция возвращает ссылку (или значение Неопределено) на объект по переданному электронному адресу
		// и представлению объекта

		public object ПолучитьОбъектПоЭлектронномуАдресу(/*Адрес,Представление=""*/)
		{
			/*ДанныеОтправителя = Новый ТаблицаЗначений;*/
			/*ДанныеОтправителя.Колонки.Добавить("ПредставлениеОбъекта");*/
			/*ДанныеОтправителя.Колонки.Добавить("АдресЭлектроннойПочты");*/
			/*Строка = ДанныеОтправителя.Добавить();*/
			/*Строка.АдресЭлектроннойПочты = Адрес;*/
			/*Строка.ПредставлениеОбъекта  = Представление;*/
			/*НайденныеОбъекты = ПоискВКонтактнойИнформации(ДанныеОтправителя);*/
			if(true/*НайденныеОбъекты.Количество()>0*/)
			{
			}
			return null;
		}
		// Процедура вызывается по событию НачалоВыбораИзСписка
		// у полей ввода, в которых редактируются даты со временем.
		//
		//  Параметры
		//   ЭлементУправления - ПолеВвода, в котором редактируется значение даты
		//

		public void ВыбратьОтложенноеВремяИзСписка(/*ЭлементУправления*/)
		{
			/*СписокВремен  = ЭлементУправления.СписокВыбора;*/
			if(true/*СписокВремен.Количество() > 0*/)
			{
			}
			/*СписокВремен.Добавить("Через30минут"          , "Через 30 минут");*/
			/*СписокВремен.Добавить("ЧерезЧас"              , "Через 1 час");*/
			/*СписокВремен.Добавить("Через2Часа"            , "Через 2 часа");*/
			/*СписокВремен.Добавить("Завтра"                , "Завтра");*/
			/*СписокВремен.Добавить("Послезавтра"           , "Послезавтра");*/
			/*СписокВремен.Добавить("НачалоСледующейНедели" , "Начало следующей недели");*/
			/*СписокВремен.Добавить("ЧерезНеделю"           , "Через неделю");*/
			/*СписокВремен.Добавить("Через2Недели"          , "Через 2 недели");*/
			/*СписокВремен.Добавить("НачалоСледующегоМесяца", "Начало следующего месяца");*/
			/*СписокВремен.Добавить("ЧерезМесяц"            , "Через месяц");*/
		}

		public void ОбработкаВыбораВремениИзСписка(/*ЭлементУправления, ВыбранноеЗначение, СтандартнаяОбработка*/)
		{
			if(true/*ТипЗнч(ВыбранноеЗначение) = Тип("Строка")*/)
			{
				/*СтандартнаяОбработка = Ложь;*/
				if(true/*ВыбранноеЗначение = "Через30минут"*/)
				{
					/*ЭлементУправления.Значение = ТекущаяДата() + 60*30;*/
				}
			}
		}
		// <Описание функции>
		//
		// Параметры
		//  <Параметр1>  – <Тип.Вид> – <описание параметра>
		//                 <продолжение описания параметра>
		//  <Параметр2>  – <Тип.Вид> – <описание параметра>
		//                 <продолжение описания параметра>
		//
		// Возвращаемое значение:
		//   <Тип.Вид>   – <описание возвращаемого значения>
		//

		public object ИсключитьПрефиксыТемыПисьма(/*Знач Тема*/)
		{
			/*// Предполагаем что в теме письма могут быть префиксы типа FW, FWD или RE
*/
			/*ТемаВрег = Врег(Тема);*/
			/*СписокВозможныхПрефиксов = Новый СписокЗначений;*/
			/*СписокВозможныхПрефиксов.Добавить("FW");*/
			/*СписокВозможныхПрефиксов.Добавить("FWD");*/
			/*СписокВозможныхПрефиксов.Добавить("RE");*/
			/*ПерваяПозицияТемы = 0;*/
			if(true/*ПерваяПозицияТемы > 0 И ПерваяПозицияТемы < СтрДлина(Тема)*/)
			{
				/*ПреобразованнаяТема = СокрЛП(Сред(Тема, (ПерваяПозицияТемы + 1)));*/
			}
			return null;
		}
		// ИсключитьПрефиксыТемыПисьма()
		// Процедура открывает форму для отправки сообщения по электронной почте на линию
		// технической поддержки пользователей
		//
		// Параметры:
		//  НЕТ
		//

		public void ОтправитьСообщениеВОтделТехническойПоддержки(/**/)
		{
			/*Адрес = "";*/
			/*ЗначениеКонстанты = Константы.ПараметрыСообщенияПриОбращенииВОтделТехническойПоддержки.Получить().Получить();*/
			if(true/*ТипЗнч(ЗначениеКонстанты) = Тип("ТаблицаЗначений")*/)
			{
				/*ЗначениеКонстанты.Индексы.Добавить("ИмяРаздела");*/
				/*ПараметрыОтправки = ЗначениеКонстанты.Найти("ПараметрыОтправкиЭлектронногоСообщения", "ИмяРаздела");*/
				if(true/*ПараметрыОтправки <> Неопределено*/)
				{
					/*Адрес = ПараметрыОтправки.ДанныеРаздела.ПараметрыОтправкиЭлектронногоСообщения_АдресЭлектроннойПочтыОтделаТехническойПоддержки[1];*/
				}
			}
			if(true/*НЕ Константы.ИспользованиеВстроенногоПочтовогоКлиента.Получить()*/)
			{
				/*ОбработкаОтправки = Обработки.ОтправкаЭлектронногоСообщенияВОтделТехническойПоддержки.Создать();*/
				/*ОбработкаОтправки.ТекстСообщения = ОбщегоНазначения.ПолучитьТекстСообщенияВОтделТехническойПоддержки();*/
				/*ОбработкаОтправки.ТемаСообщения  = "Сообщение в отдел технической поддержки";*/
				/*ОбработкаОтправки.ПолучитьФорму().Открыть();*/
			}
		}
		// Процедура открывает форму для написания нового письма

		public void ОткрытьФормуНовогоПисьма(/**/)
		{
			/*НаписатьПисьмоОбъекту("");*/
		}

		public object ПолучитьЗначениеРеквизитаУчетнойЗаписи(/*УчетнаяЗапись, ИмяРеквизита*/)
		{
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = "
	|ВЫБРАТЬ " + ИмяРеквизита + " КАК ЗначениеРеквизита ИЗ Справочник.УчетныеЗаписиЭлектроннойПочты
	|ГДЕ Ссылка = &УчетнаяЗапись";*/
			/*Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			if(true/*Выборка.Следующий()*/)
			{
			}
			return null;
		}
		// Функция определяет, надо ли принимать письмо для случаев, когда в настройках
		//  учетной записи установлено, что письма не удалять с сервера
		//
		// Параметры
		//  УчетнаяЗапись - СправочникСсылка.УчетныеЗаписиЭлектроннойПочты
		//  ИнтернетПисьмо - ИнтернетПисьмо, которое анализируем
		//  МассивПисемДляУдаления - Массив, который заполняем, если письмо необходимо удалить с сервера
		//
		// Возвращаемое значение:
		//   Булево
		//

		public object ПолучитьСписокПисемКПолучению(/*УчетнаяЗапись, ЗНАЧ МассивЗаголовковПисем, МассивПисемДляУдаления*/)
		{
			/*МассивИдентификаторов		= Новый Массив;*/
			/*СоответствиеИдентификаторов	= Новый Соответствие;*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.УстановитьПараметр("МассивИдентификаторов",	МассивИдентификаторов);*/
			/*Запрос.УстановитьПараметр("УчетнаяЗапись",			УчетнаяЗапись);*/
			/*Запрос.УстановитьПараметр("ТекущаяДата",			НачалоДня(ТекущаяДата()));*/
			/*Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронноеПисьмо.ИдентификаторПисьма,
	|	ВЫБОР
	|		КОГДА (НЕ ЭлектронноеПисьмо.УчетнаяЗапись.ОставлятьКопииСообщенийНаСервере)
	|			ТОГДА ИСТИНА
	|		КОГДА ЭлектронноеПисьмо.УчетнаяЗапись.УдалятьПисьмаССервераЧерез
	|			ТОГДА ВЫБОР
	|					КОГДА ЭлектронноеПисьмо.УчетнаяЗапись.КоличествоДнейУдаленияПисемССервера = 0
	|						ТОГДА ИСТИНА
	|					КОГДА ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ЭлектронноеПисьмо.Дата, ДЕНЬ), ДЕНЬ, ЭлектронноеПисьмо.УчетнаяЗапись.КоличествоДнейУдаленияПисемССервера) < &ТекущаяДата
	|						ТОГДА ИСТИНА
	|					ИНАЧЕ ЛОЖЬ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК УдалятьПисьмо
	|ИЗ
	|	Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
	|ГДЕ
	|	ЭлектронноеПисьмо.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыПисем.Полученное)
	|	И ЭлектронноеПисьмо.УчетнаяЗапись = &УчетнаяЗапись
	|	И ЭлектронноеПисьмо.ИдентификаторПисьма В(&МассивИдентификаторов)";*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			/*МассивПисем = Новый Массив;*/
			while(true/*Выборка.Следующий()*/)
			{
				/*ИнтернетПисьмо = СоответствиеИдентификаторов.Получить(Выборка.ИдентификаторПисьма);*/
				if(true/*ИнтернетПисьмо <> Неопределено*/)
				{
					/*ТекущийИндекс = МассивЗаголовковПисем.Найти(ИнтернетПисьмо);*/
					if(true/*ТекущийИндекс <> Неопределено*/)
					{
						/*МассивЗаголовковПисем.Удалить(ТекущийИндекс);*/
					}
				}
				if(true/*Выборка.УдалятьПисьмо*/)
				{
					/*МассивПисемДляУдаления.Добавить(Выборка.ИдентификаторПисьма);*/
				}
			}
			return null;
		}
		// Получить строку с представлением списка получателей
		//
		// Параметры
		//  КомуТЧ  – Таблица значений – список получателей
		//
		// Возвращаемое значение:
		//   Строка   – Строка с представлением списка получателей
		//

		public object ПолучитьПредставлениеПолучателей(/*КомуТЧ*/)
		{
			/*Представление = "";*/
			if(true/*НЕ ПустаяСтрока(Представление)*/)
			{
				/*Представление = Сред(Представление, 3);*/
			}
			return null;
		}
		// ПолучитьПредставлениеПолучателей()
		// Устанавливает свойства объекта основания в привелинированном режиме
		//

		public void УстановитьСвойстваОбъектаОснования(/*ОснованиеОбъектСсылка, Ответ, Переадресация, СтатусПисьма, УчетнаяЗапись, мЭтоНовый*/)
		{
			if(true/*ТипЗнч(ОснованиеОбъектСсылка) = Тип("ДокументСсылка.ЭлектронноеПисьмо")*/)
			{
				/*мОбъектОснование = ОснованиеОбъектСсылка.ПолучитьОбъект();*/
			}
			if(true/*Ответ ИЛИ Переадресация*/)
			{
				/*СостояниеПотомка = Перечисления.СостоянияПотомковЭлектронныхПисем.ПустаяСсылка();*/
				if(true/*СтатусПисьма = Перечисления.СтатусыПисем.Отправленное*/)
				{
					if(true/*Ответ*/)
					{
						/*СостояниеПотомка = Перечисления.СостоянияПотомковЭлектронныхПисем.ОтветОтправлен;*/
					}
				}
				/*мОбъектОснование.СостояниеПотомкаПисьма = СостояниеПотомка;*/
				if(true/*мОбъектОснование.НеРассмотрено
		   И УчетнаяЗапись.АвтоматическаяУстановкаПометкиРассмотреноПриОтвете
		   И СтатусПисьма = Перечисления.СтатусыПисем.Отправленное
		   И Ответ*/)
				{
					if(true/*НЕ ЗначениеЗаполнено(мОбъектОснование.Ответственный)*/)
					{
						/*мОбъектОснование.Ответственный = глЗначениеПеременной("глТекущийПользователь");*/
					}
					/*мОбъектОснование.НеРассмотрено = Ложь;*/
				}
				/*мОбъектОснование.Записать();*/
			}
		}
	}
}

