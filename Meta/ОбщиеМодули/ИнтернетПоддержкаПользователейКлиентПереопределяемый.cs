using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class ИнтернетПоддержкаПользователейКлиентПереопределяемый
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБРАБОТКИ ОБНОВЛЕНИЕ КОНФИГУРАЦИИ
		// Переопределяет имя обработки для выполнения обновления конфигурации.
		//
		// Параметры:
		//	Имя - Строка - имя обработки обновление конфигурации (по умолчанию установлено: "ОбновлениеКонфигурации").
		//

		public void ОпределитьИмяОбработкиОбновленияКонфигурации(/*Имя*/)
		{
			//Имя = "ОбновлениеКонфигурации";
		}
		// Процедура определяет логи и пароль в системе интернет-поддержки пользователей.
		//
		// Параметры;
		// 	Логин - Строка - логин.
		// 	Пароль - Строка - пароль.
		//

		public void ЗагрузкаЛогинаИПароля(/*Логин, Пароль*/)
		{
			//ИнтернетПоддержкаПользователейВызовСервера.ЗагрузкаЛогинаИПароляИзПараметровИнтернетПоддержкиПользователей(Логин, Пароль);
		}
		// Процедура очищает настройки для обработки "Обновление конфигурации".
		//

		public void ОчиститьЛогинИПарольВНастройкахОбновления(/**/)
		{
			//НастройкиОбновления = ВосстановитьЗначение("ОбновлениеКонфигурации_НастройкиОбновления");
			if(true/*НастройкиОбновления <> Неопределено*/)
			{
				//НастройкиОбновления.КодПользователяСервераОбновлений  = "";
				//НастройкиОбновления.ПарольСервераОбновлений           = "";
			}
			//СохранитьЗначение("ОбновлениеКонфигурации_НастройкиОбновления", НастройкиОбновления);
		}
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ РЕГЛАМЕНТИРОВАННОЙ ОТЧЕТНОСТИ
		// Вызывает процедуру обновления реготчетнсоти.
		//

		public void ВызватьПроцедуруОбновленияРегОтчетности(/**/)
		{
			//РегламентированнаяОтчетность.ПередОткрытиемОсновнойФормыРаботыСОтчетностью(Неопределено);
			//РегламентированнаяОтчетность.ОткрытьФормуДоступныхОбновленийРО();
		}
		// Открытвает форму регламентированной отчетности.
		//

		public void ОткрытьФормуРегламентированныхОтчетов(/**/)
		{
			//ОткрытьФорму("Обработка.ОбщиеОбъектыРегламентированнойОтчетности.Форма.УправлениеОтчетностью");
		}
		///////////////////////////////////////////////////////////////////////////////////////////////////
		///////// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ДРУГИХ ОБРАБОТОК
		// Запускает интерент-старницу в обозревателе конфигурации.
		//

		public void ЗапуститьИнтернетСтраницуВОбозревателе(/*АдресСтраницы, ЗаголовокОкна*/)
		{
			/*Попытка
		Обозреватель = Обработки.Обозреватель.Создать();*/
			//Форма = Обозреватель.ПолучитьФорму();
			//Форма.СтартоваяСтраница = АдресСтраницы;
			if(true/*ЗаголовокОкна <> Неопределено*/)
			{
				//Форма.Заголовок = ЗаголовокОкна;
			}
			//Форма.Открыть();
			/*Исключение
		АдресСтраницы = Неопределено;*/
			/*ЗаписьЖурналаРегистрации(НСтр("ru = 'Интернет-поддержка пользователей: Ошибка'"), 
			УровеньЖурналаРегистрации.Ошибка, 
			, 
			ИнформацияОбОшибке());*/
			//КонецПопытки;
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ ЭЛЕКТРОННОГО ДОКУМЕНТООБОРОТА
		// Процедура для ввода пароля к сертификату ЭЦП
		// В случае его отсутствия
		// Параметры
		// ХранилищеСертификатаЭЦП - Временное хранилище значений для хранения сертификата ЭЦП
		// ПарольСертификатаЭЦП    - Переопределяемое значение пароля к сертификату
		//

		public void ПолучитьПарольЭЦП(/*ХранилищеСертификатаЭЦП, ПарольСертификатаЭЦП*/)
		{
			//СертификатЭЦП = ПолучитьИзВременногоХранилища(ХранилищеСертификатаЭЦП);
			/*ПараметрыФормы = Новый Структура("Заголовок, ПредставлениеСертификата", 
									 НСтр("ru = 'Введите пароль для закрытого ключа сертификата'"), СертификатЭЦП);*/
			//КодВозврата = ОткрытьФормуМодально("ОбщаяФорма.ЗапросПароляНаЭЦПШифрование", ПараметрыФормы);
			if(true/*КодВозврата <> Неопределено*/)
			{
				//ПарольСертификатаЭЦП = КодВозврата;
			}
		}
	}
}

