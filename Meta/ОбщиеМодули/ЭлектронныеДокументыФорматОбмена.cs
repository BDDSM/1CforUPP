using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class ЭлектронныеДокументыФорматОбмена
	{
		////////////////////////////////////////////////////////////////////////////////
		// ЭлектронныеДокументыФорматОбмена: механизм обмена электронными документами.
		//
		////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////
		// СЛУЖЕБНЫЙ ПРОГРАММНЫЙ ИНТЕРФЕЙС
		////////////////////////////////////////////////////////////////////////////////
		// Формирование ЭД из документов БД
		// Формирует электронный документ расходной накладной по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект    - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  НастройкиОбменаЭД - структура, содержащая настройки обмена
		//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьНакладнуюПоДокументу(/*СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоНакладной(СсылкаНаОбъект, СтруктураЭД);*/
			/*ТекстОшибки = "";*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога
		+ ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));*/
			if(true/*ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
			{
				if(true/*СформироватьНакладнуюCML(СтруктураПараметров) И ПризнакЭД*/)
				{
					/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
					/*ВозвращаемоеЗначение = СтруктураПараметров;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		// Формирует электронный документ расходной накладной по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект    - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  НастройкиОбменаЭД - структура, содержащая настройки обмена
		//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьТорг12ФНСПоДокументу(/*СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12Продавец);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_OTORG12");*/
			/*СтруктураЭД.Вставить("КНД", "1175004");*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*СтруктураПараметров = Торг12СтруктураПараметров();*/
			/*ТекстОшибки = "";*/
			if(true/*ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоТорг12(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров)
		И ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
			{
				/*СтруктураСлужебныхПолейФНС(СтруктураПараметров);*/
				/*ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);*/
				/*СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");*/
				/*СтруктураПараметров.Вставить("УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);*/
				if(true/*СформироватьТорг12CML(СтруктураПараметров) И ПризнакЭД*/)
				{
					/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
					/*ВозвращаемоеЗначение = СтруктураПараметров;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}

		public object СформироватьЭДТорг12Покупатель(/*СсылкаНаЭД*/)
		{
			/*ДобавленныйФайл = Неопределено;*/
			/*АдресВоВременномХранилище = "";*/
			/*СтруктураЭД = СформироватьФайлТорг12Покупатель(СсылкаНаЭД);*/
			if(true/*ТипЗнч(СтруктураЭД) = Тип("Структура") И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище)*/)
			{
				/*ДатаСозданияФайла = ТекущаяДатаСеанса();*/
				/*ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(СсылкаНаЭД.ВладелецФайла, СтруктураЭД.ИдФайла, "xml", ДатаСозданияФайла,
			УниверсальноеВремя(ТекущаяДата()), АдресВоВременномХранилище, Неопределено, , "ЭДПрисоединенныеФайлы");*/
				/*СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Утвержден);*/
				/*СтруктураЭД.Вставить("УникальныйИД", СсылкаНаЭД.УникальныйИД);*/
				/*СтруктураЭД.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);*/
				/*СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);*/
				/*СтруктураЭД.Вставить("ДатаФормированияЭДОтправителем", ДатаСозданияФайла);*/
				/*ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);*/
			}
			return null;
		}
		// Формирует электронный документ расходной накладной (титул покупателя) по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаЭД    - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
		//  НастройкиОбменаЭД - структура, содержащая настройки обмена
		//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьФайлТорг12Покупатель(/*СсылкаНаЭД*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*НастройкиОбменаЭД = СсылкаНаЭД.СоглашениеЭД;*/
			/*СтруктураЭД = Новый Структура;*/
			/*// для создания ЭДПрисоединенныеФайлы
*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ТОРГ12Покупатель);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("НомерЭД", Новый УникальныйИдентификатор());*/
			/*СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);*/
			if(true/*ЭлектронныеДокументыСлужебный.ЭтоПрямойОбменЭД(НастройкиОбменаЭД.СпособОбменаЭД)*/)
			{
				/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			}
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", СсылкаНаЭД.Наименование);*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаЭД.ВладелецФайла);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя", СсылкаНаЭД.НомерДокументаОтправителя);*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаЭД.ДатаДокументаОтправителя);*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаЭД.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаЭД.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", СсылкаНаЭД.СоглашениеЭД);*/
			/*СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_PTORG12");*/
			/*СтруктураЭД.Вставить("КНД", "1175005");*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());*/
			/*ТекстОшибки = "";*/
			/*СтруктураПараметров = Торг12ПокупательСтруктураПараметров();*/
			if(true/*ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоТорг12Покупатель(СсылкаНаЭД, СтруктураЭД, СтруктураПараметров)
		И ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаЭД.ВладелецФайла, СтруктураПараметров, ТекстОшибки)*/)
			{
				/*СтруктураСлужебныхПолейФНС(СтруктураПараметров);*/
				/*ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);*/
				/*СтруктураПараметров.Вставить("ВремДокТН", Прав(СтрЗаменить("0"
			+ Формат(СсылкаНаЭД.ДатаФормированияЭДОтправителем, "ДЛФ=T"), ":", "."), 8));*/
				/*СтруктураПараметров.Вставить("ДатаДокТН", Формат(СсылкаНаЭД.ДатаФормированияЭДОтправителем, "ДФ=dd.MM.yyyy"));*/
				/*СтруктураПараметров.Вставить("НомерТоварнойНакладной", СсылкаНаЭД.НомерДокументаОтправителя);*/
				/*СтруктураПараметров.Вставить("ДатаТоварнойНакладной", СсылкаНаЭД.ДатаДокументаОтправителя);*/
				/*СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");*/
				/*ТЗ_ЭЦП = Новый ТаблицаЗначений;*/
				/*ТЗ_ЭЦП.Колонки.Добавить("ЭЦП");*/
				/*СтруктураПараметров.Вставить("ПолученныеЭЦП", ТЗ_ЭЦП);*/
				/*// ЭЦП полученного файла
*/
				/*ЗаполнитьЭЦППолученногоФайла(СсылкаНаЭД, СтруктураПараметров.ПолученныеЭЦП);*/
				/*ИдФайлТН = СсылкаНаЭД.Наименование;*/
				/*СтруктураПараметров.Вставить("ИдФайлТН", ИдФайлТН);*/
				/*СтруктураПараметров.Вставить("УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);*/
				if(true/*СформироватьТорг12ПокупательCML(СтруктураПараметров)*/)
				{
					/*АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));*/
					/*СтруктураЭД.Вставить("ИдФайла", СтруктураПараметров.ИдФайл);*/
					/*СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);*/
					/*ВозвращаемоеЗначение = СтруктураЭД;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		// Формирует электронный документ счета на оплату покупателю по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьСчетНаОплатуПоДокументу(/*СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетНаОплату);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоСчету(СсылкаНаОбъект, СтруктураЭД);*/
			/*ТекстОшибки = "";*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));*/
			if(true/*ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
			{
				if(true/*СформироватьСчетНаОплатуCML(СтруктураПараметров) И ПризнакЭД*/)
				{
					/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
					/*ВозвращаемоеЗначение = СтруктураПараметров;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		// Формирует электронный документ заказа поставщику по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьЗаказПоставщикуПоДокументу(/*СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ЗаказТовара);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоЗаказуТоваров(СсылкаНаОбъект, СтруктураЭД);*/
			/*ТекстОшибки = "";*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));*/
			if(true/*ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
			{
				if(true/*СформироватьЗаказCML(СтруктураПараметров) И ПризнакЭД*/)
				{
					/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
					/*ВозвращаемоеЗначение = СтруктураПараметров;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		// Формирует электронный документ заказа клиента по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьЗаказКлиентаПоДокументу(/*СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтветНаЗаказ);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоОтветуНаЗаказ(СсылкаНаОбъект, СтруктураЭД);*/
			/*ТекстОшибки = "";*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));*/
			if(true/*ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
			{
				if(true/*СформироватьЗаказCML(СтруктураПараметров) И ПризнакЭД*/)
				{
					/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
					/*ВозвращаемоеЗначение = СтруктураПараметров;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		// Формирует электронный документ каталога товаров по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  ТоварыКаталога - таблица значений, содержащая перечень номенклатуры,
		//  ПризнакЭД      - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьКаталогНоменклатуры(/*СсылкаНаОбъект, ТоварыКаталога, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.КаталогТоваров);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("Отправитель", СсылкаНаОбъект.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", СсылкаНаОбъект.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоКаталогуТоваров(СсылкаНаОбъект,
		ТоварыКаталога, СтруктураЭД);*/
			/*ТекстОшибки = "";*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));*/
			if(true/*ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
			{
				if(true/*СформироватьКаталогCML(СтруктураПараметров) И ПризнакЭД*/)
				{
					/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
					/*ВозвращаемоеЗначение = СтруктураПараметров;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		// Формирует электронный документ прайс-листа по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьПрайсПоДокументу(/*СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ПрайсЛист);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", НастройкиОбменаЭД.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоПрайсЛисту(СсылкаНаОбъект, СтруктураЭД);*/
			/*ТекстОшибки = "";*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));*/
			if(true/*ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
			{
				if(true/*СформироватьПрайсЛистCML(СтруктураПараметров) И ПризнакЭД*/)
				{
					/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
					/*ВозвращаемоеЗначение = СтруктураПараметров;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		// Формирует электронный документ выполнения работ по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьАктВыполненныхРаботПоДокументу(/*СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктВыполненныхРабот);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоАктуВыполненныхРабот(СсылкаНаОбъект,
		СтруктураЭД);*/
			/*ТекстОшибки = "";*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));*/
			if(true/*ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
			{
				if(true/*СформироватьАктCML(СтруктураПараметров) И ПризнакЭД*/)
				{
					/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
					/*ВозвращаемоеЗначение = СтруктураПараметров;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		// Формирует электронный документ Акт выполненных работ формата 5.01 по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект    - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  НастройкиОбменаЭД - структура, содержащая настройки обмена
		//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьАкт501ФНСПоДокументу(/*СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктИсполнитель);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(
		СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_IAKTPRM");*/
			/*СтруктураЭД.Вставить("КНД", "1175006");*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*ТекстОшибки = "";*/
			/*СтруктураПараметров = Акт501СтруктураПараметров();*/
			if(true/*ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоАкт501(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров)
		И ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
			{
				/*СтруктураСлужебныхПолейФНС(СтруктураПараметров);*/
				/*ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);*/
				/*СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");*/
				/*СтруктураПараметров.Вставить("УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);*/
				if(true/*СформироватьАкт501CML(СтруктураПараметров) И ПризнакЭД*/)
				{
					/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
					/*ВозвращаемоеЗначение = СтруктураПараметров;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}

		public object СформироватьЭДАкт501Заказчик(/*СсылкаНаЭД*/)
		{
			/*ДобавленныйФайл = Неопределено;*/
			/*АдресВоВременномХранилище = "";*/
			/*СтруктураЭД = СформироватьФайлАкт501Заказчик(СсылкаНаЭД);*/
			if(true/*ТипЗнч(СтруктураЭД) = Тип("Структура")
		И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище)*/)
			{
				/*ДатаСозданияФайла = ТекущаяДатаСеанса();*/
				/*ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(СсылкаНаЭД.ВладелецФайла,
			СтруктураЭД.ИдФайла, "xml", ДатаСозданияФайла, УниверсальноеВремя(ТекущаяДата()), АдресВоВременномХранилище,
			Неопределено, , "ЭДПрисоединенныеФайлы");*/
				/*СтруктураЭД.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Утвержден);*/
				/*СтруктураЭД.Вставить("УникальныйИД", СсылкаНаЭД.УникальныйИД);*/
				/*СтруктураЭД.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);*/
				/*СтруктураЭД.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД);*/
				/*ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураЭД);*/
			}
			return null;
		}
		// Формирует электронный документ расходной накладной (титул покупателя) по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаЭД    - Ссылка на ЭД, по которому необходимо сформировать электронный документ,
		//  НастройкиОбменаЭД - структура, содержащая настройки обмена
		//  ПризнакЭД -       булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьФайлАкт501Заказчик(/*СсылкаНаЭД*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*НастройкиОбменаЭД = СсылкаНаЭД.СоглашениеЭД;*/
			/*СтруктураЭД = Новый Структура;*/
			/*// для создания ЭДПрисоединенныеФайлы
*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.АктЗаказчик);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("НомерЭД", Новый УникальныйИдентификатор());*/
			/*СтруктураЭД.Вставить("УникальныйИдентификатор", Новый УникальныйИдентификатор);*/
			if(true/*ЭлектронныеДокументыСлужебный.ЭтоПрямойОбменЭД(НастройкиОбменаЭД.СпособОбменаЭД)*/)
			{
				/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			}
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", СсылкаНаЭД.Наименование);*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаЭД.ВладелецФайла);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя", СсылкаНаЭД.НомерДокументаОтправителя);*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаЭД.ДатаДокументаОтправителя);*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаЭД.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаЭД.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", СсылкаНаЭД.СоглашениеЭД);*/
			/*СтруктураЭД.Вставить("ПрефиксИдФайла", "DP_ZAKTPRM");*/
			/*СтруктураЭД.Вставить("КНД", "1175007");*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаЭД.УникальныйИдентификатор());*/
			/*ТекстОшибки = "";*/
			/*СтруктураПараметров = Акт501ЗаказчикСтруктураПараметров();*/
			if(true/*ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоАкт501Заказчик(СсылкаНаЭД, СтруктураЭД, СтруктураПараметров)
		И ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаЭД.ВладелецФайла, СтруктураПараметров, ТекстОшибки)*/)
			{
				/*СтруктураСлужебныхПолейФНС(СтруктураПараметров);*/
				/*ЗаполнитьСтруктуруСлужебныхПолейФНС(СтруктураЭД, СтруктураПараметров);*/
				/*СтруктураПараметров.Вставить("ВремДокАкт", Прав(СтрЗаменить("0"
			+ Формат(СсылкаНаЭД.ДатаФормированияЭДОтправителем, "ДЛФ=T"), ":", "."), 8));*/
				/*СтруктураПараметров.Вставить("ДатаДокАкт", Формат(СсылкаНаЭД.ДатаФормированияЭДОтправителем, "ДФ=dd.MM.yyyy"));*/
				/*СтруктураПараметров.Вставить("НомерАкта", СсылкаНаЭД.НомерДокументаОтправителя);*/
				/*СтруктураПараметров.Вставить("ДатаАкта", СсылкаНаЭД.ДатаДокументаОтправителя);*/
				/*СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СтруктураПараметров.ИдФайл + ".xml");*/
				/*ТЗ_ЭЦП = Новый ТаблицаЗначений;*/
				/*ТЗ_ЭЦП.Колонки.Добавить("ЭЦП");*/
				/*СтруктураПараметров.Вставить("ПолученныеЭЦП", ТЗ_ЭЦП);*/
				/*// ЭЦП полученного файла
*/
				/*ЗаполнитьЭЦППолученногоФайла(СсылкаНаЭД, СтруктураПараметров.ПолученныеЭЦП);*/
				/*ИдФайлАкт = СсылкаНаЭД.Наименование;*/
				/*СтруктураПараметров.Вставить("ИдФайлАкт", ИдФайлАкт);*/
				/*СтруктураПараметров.Вставить("УникальныйИдентификатор", СтруктураЭД.УникальныйИдентификатор);*/
				if(true/*СформироватьАкт501ЗаказчикCML(СтруктураПараметров)*/)
				{
					/*АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));*/
					/*СтруктураЭД.Вставить("ИдФайла", СтруктураПараметров.ИдФайл);*/
					/*СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);*/
					/*ВозвращаемоеЗначение = СтруктураЭД;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		// Формирует электронный документ отчета комитента по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьОтчетОПродажахКомиссионногоТовараПоДокументу(/*СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоОтчетуОПродажахКомиссионногоТовара(
		СсылкаНаОбъект, СтруктураЭД);*/
			/*ТекстОшибки = "";*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));*/
			if(true/*ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
			{
				if(true/*СформироватьОтчетОПродажахКомиссионногоТовараCML(СтруктураПараметров) И ПризнакЭД*/)
				{
					/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
					/*ВозвращаемоеЗначение = СтруктураПараметров;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		// Формирует электронный документ отчета комитента о списании по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьОтчетОСписанииКомиссионногоТовараПоДокументу(/*СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоОтчетуОСписанииКомиссионногоТовара(
		СсылкаНаОбъект, СтруктураЭД);*/
			/*ТекстОшибки = "";*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));*/
			if(true/*ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
			{
				if(true/*СформироватьОтчетОСписанииКомиссионногоТовараCML(СтруктураПараметров) И ПризнакЭД*/)
				{
					/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
					/*ВозвращаемоеЗначение = СтруктураПараметров;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		// Формирует электронный документ передача товаров между организациями по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьПередачуТоваровМеждуОрганизациями(/*СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ПередачаТоваровМеждуОрганизациями);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Интеркампани);*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.ОрганизацияПолучатель);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоПередачеТоваровМеждуОрганизациями(
		СсылкаНаОбъект, СтруктураЭД);*/
			/*ТекстОшибки = "";*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));*/
			if(true/*ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
			{
				if(true/*СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров) И ПризнакЭД*/)
				{
					/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
					/*ВозвращаемоеЗначение = СтруктураПараметров;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		// Формирует электронный документ возврат товаров между организациями по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьВозвратТоваровМеждуОрганизациями(/*СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.ВозвратТоваровМеждуОрганизациями);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Интеркампани);*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя",
		ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);*/
			/*СтруктураЭД.Вставить("Организация", СсылкаНаОбъект.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", СсылкаНаОбъект.ОрганизацияПолучатель);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*СтруктураПараметров = ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоВозвратуТоваровМеждуОрганизациями(
		СсылкаНаОбъект, СтруктураЭД);*/
			/*ТекстОшибки = "";*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла",
		АдресКаталога + ЭлектронныеДокументыСлужебный.ОпределитьИмяФайлаЭД(СтруктураЭД.ВидЭД, СсылкаНаОбъект));*/
			if(true/*ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
			{
				if(true/*СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(СтруктураПараметров) И ПризнакЭД*/)
				{
					/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
					/*ВозвращаемоеЗначение = СтруктураПараметров;*/
				}
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		// Формирует электронный документ счет фактура по ссылке на документ ИБ.
		//
		// Параметры:
		//  СсылкаНаОбъект - Ссылка на объект ИБ, по которому необходимо сформировать электронный документ,
		//  ПризнакЭД - булево, признак того, что необходимо вернуть структуру реквизитов электронного документа.
		//

		public object СформироватьСчетФактуру(/*СсылкаНаОбъект, НастройкиОбменаЭД, ПризнакЭД = Истина*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*// Сформируем и заполним струкутру электронного документа.
*/
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД", Перечисления.ВидыЭД.СчетФактура);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("Отправитель", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Получатель", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			/*СтруктураЭД.Вставить("НомерВерсииЭД", ЭлектронныеДокументыСлужебный.НомерВерсииЭДПоВладельцу(СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("НомерЭД", ВернутьИдЭД(СсылкаНаОбъект, СтруктураЭД.Отправитель, СтруктураЭД.НомерВерсииЭД));*/
			/*СтруктураЭД.Вставить("ДатаЭД", ТекущаяДатаСеанса());*/
			/*СтруктураЭД.Вставить("ВладелецЭД", СсылкаНаОбъект);*/
			/*СтруктураЭД.Вставить("НомерДокументаОтправителя", ЭлектронныеДокументыПереопределяемый.ПолучитьПечатныйНомерДокумента(
		СсылкаНаОбъект));*/
			/*СтруктураЭД.Вставить("ДатаДокументаОтправителя", СсылкаНаОбъект.Дата);*/
			/*СтруктураЭД.Вставить("Организация", НастройкиОбменаЭД.Организация);*/
			/*СтруктураЭД.Вставить("Контрагент", НастройкиОбменаЭД.Контрагент);*/
			/*СтруктураЭД.Вставить("СоглашениеЭД", НастройкиОбменаЭД.СоглашениеЭД);*/
			/*// Сформируем структуру параметров для счет-фактуры и заполним ее.
*/
			/*СтруктураПараметров = СтруктураЭСФ(СсылкаНаОбъект);*/
			/*ЭлектронныеДокументыПереопределяемый.ПодготовитьДанныеПоСчетФактуре(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров);*/
			/*ЗаполнитьРеквизитыОператораЭДО(СтруктураПараметров);*/
			/*СтруктураПараметров.УникальныйИдентификатор = Новый УникальныйИдентификатор;*/
			/*ГГГГММДД = СтрЗаменить(Формат(ТекущаяДатаСеанса(), "ДФ=yyyy-MM-dd"), "-", "");*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог(, СсылкаНаОбъект.УникальныйИдентификатор());*/
			/*ТекстОшибки = "";*/
			/*РезультатФормирования = Ложь;*/
			if(true/*ЭлектронныеДокументыПереопределяемый.ЭтоКорректировочныйСчетФактура(СсылкаНаОбъект)*/)
			{
				/*СтруктураПараметров.КНД = "1115108";*/
				/*ИдФайл = ЭлектронныеДокументыОператорыЭДО.ФНСИмяФайла(
			Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор",
			"ON_KORSFAKT", СтруктураПараметров.ИдПок, СтруктураПараметров.ИдОтпр, ГГГГММДД,
			СтруктураПараметров.УникальныйИдентификатор));*/
				/*СтруктураПараметров.Вставить("ИдФайл", ИдФайл);*/
				/*СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + ИдФайл + ".xml");*/
				if(true/*ПроверитьЗаполнениеОбязательныхПолей(СсылкаНаОбъект, СтруктураПараметров, ТекстОшибки)*/)
				{
					/*РезультатФормирования = СформироватьКорректировочныйСчетФактуруCML(СтруктураПараметров);*/
				}
			}
			if(true/*РезультатФормирования И ПризнакЭД*/)
			{
				/*СтруктураПараметров.Вставить("СтруктураЭД", СтруктураЭД);*/
				/*ВозвращаемоеЗначение = СтруктураПараметров;*/
			}
			if(true/*ЗначениеЗаполнено(ТекстОшибки)*/)
			{
				/*ШаблонСообщения = НСтр("ru = 'При формировании %1 возникли следующие ошибки:
		|%2'");*/
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			СтруктураЭД.ВидЭД, ТекстОшибки);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Заполнение файлов
		// Заполняет свойство объекта XDTO.
		//
		// Параметры
		//  ОбъектXDTO   – объект заполнения,
		//  ИмяСвойства  - свойство объекта,
		//  Значение     - устанавливаемое значение,
		//  Обязательное - булево - признак обязательности заполнения свойства,
		//  ТекстОшибки  - строка - текст ошибки в случае неудачного заполнения
		//

		public void ЗаполнитьСвойствоXDTO(/*ОбъектXDTO, ИмяСвойства, Значение, Обязательное = Ложь, ТекстОшибки = ""*/)
		{
			if(true/*ТипЗнч(Значение) = Тип("ЗначениеXDTO") ИЛИ ТипЗнч(Значение) = Тип("ОбъектXDTO")*/)
			{
				/*УстановитьЗначениеXDTO(ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки);*/
			}
		}
		// Только для внутреннего использования

		public void ВыгрузитьЭДвФайл(/*ЭД, ИмяФайла, УказаниеТипа = Истина, ТипКодировки = "UTF-8"*/)
		{
			/*НоваяЗаписьXML = Новый ЗаписьXML;*/
			/*НоваяЗаписьXML.ОткрытьФайл(ИмяФайла, ТипКодировки);*/
			/*НоваяЗаписьXML.ЗаписатьОбъявлениеXML();*/
			/*ФабрикаXDTO.ЗаписатьXML(НоваяЗаписьXML, ЭД, , , , ?(УказаниеТипа, НазначениеТипаXML.Явное, НазначениеТипаXML.Неявное));*/
			/*НоваяЗаписьXML.Закрыть();*/
		}
		// Возвращает идентификационный номер электронного документа.
		//
		// Параметры:
		//  СсылкаНаОбъект - ссылка на электронный документ, идентификационный номер которого необходимо получить,
		//  ИДОтправителя - строка, идентификационный номер отправителя электронного документа,
		//  НомерВерсии - число, номер версии электронного документа.
		//
		// Возвращаемое значение:
		//  строка формата "ИдОтправителя#ИДСсылкиОбъектаИБ##НомерВерсии"
		//

		public object ВернутьИдЭД(/*СсылкаНаОбъект, ИдОтправителя, НомерВерсии*/)
		{
			/*ИдЭД = ИдОтправителя + "#" + СсылкаНаОбъект.УникальныйИдентификатор() + "##" + НомерВерсии;*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// CML
		// Только для внутреннего использования

		public void ОшибкаФормированияЭлектронногоДокумента(/*ОписаниеОшибки, СтруктураПараметров, ТекстОшибки*/)
		{
			/*ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ОписаниеОшибки, ОписаниеОшибки);*/
			/*Сообщить(НСтр("ru='Ошибка формирования электронного документа!'"), СтатусСообщения.ОченьВажное);*/
			/*ТекстОшибки = СтрЗаменить(ТекстОшибки, """", """""");*/
			/*Сообщить(НСтр("ru=""" + ТекстОшибки + """"), СтатусСообщения.Важное);*/
			/*СтруктураПараметров.Вставить("ТекстОшибки", ТекстОшибки);*/
		}
		// Функция получает тип значения CML
		//
		// Параметры
		//  Тип - Тип   - исходный тип
		//  ВерсияСхемы - версия схемы CML
		//
		// Возвращаемое значение:
		//  ТипЗначения - Тип значения
		//

		public object ПолучитьТипЗначенияCML(/*Тип, ВерсияСхемы = "4.02"*/)
		{
			if(true/*ВерсияСхемы <> "4.02"*/)
			{
				/*ТипЗначения = ФабрикаXDTO.Тип(ВерсияСхемы, Тип);*/
			}
			/*Исключение
		
		ТипЗначения = Неопределено;*/
			/*КонецПопытки;*/
			return null;
		}
		// Только для внутреннего использования

		public object ПолучитьОбъектТипаCML(/*Тип, ВерсияСхемы = "4.01"*/)
		{
			if(true/*ТипЗнч(Тип) = Тип("Строка")*/)
			{
				/*ТипОбъекта = ПолучитьТипОбъектаCML(Тип, ВерсияСхемы);*/
			}
			if(true/*ТипОбъекта = Неопределено*/)
			{
			}
			/*НовыйОбъект = ФабрикаXDTO.Создать(ТипОбъекта);*/
			return null;
		}
		// Только для внутреннего использования

		public object ПолучитьСвойствоПоляXDTOсхемы(/*ПространствоИменСхемы, ИмяОбъекта, ИмяСвойства, ВидФасета*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*ОбъектCML = ПолучитьОбъектТипаCML(ИмяОбъекта, ПространствоИменСхемы);*/
			if(true/*ОбъектCML <> Неопределено И ТипЗнч(ВидФасета) = Тип("ВидФасетаXDTO")*/)
			{
				/*СвойстваОбъекта = ОбъектCML.Свойства();*/
				/*ИскомоеСвойство = СвойстваОбъекта.Получить(ИмяСвойства);*/
				if(true/*ИскомоеСвойство <> Неопределено*/)
				{
					/*Фасет = ИскомоеСвойство.Тип.Фасеты.Получить(ВидФасета);*/
					/*ВозвращаемоеЗначение = Фасет.Значение;*/
				}
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Разбор файлов
		// Осуществляет разбор файла с реквизитами контрагента
		//
		// Параметры:
		//  СсылкаНаФайл - адрес хранилища файла с реквизитами контрагента
		//

		public void РазобратьФайлРеквизитовКонтрагента(/*СсылкаНаФайл, СтруктураВозврата, ОшибкаРазбора*/)
		{
			/*ОшибкаРазбора = Ложь;*/
			/*СтруктураВозврата.Вставить("ТелефонПартнера");*/
			/*СтруктураВозврата.Вставить("ТелефонКЛ");*/
			/*СтруктураВозврата.Вставить("АдресЭППартнера");*/
			/*СтруктураВозврата.Вставить("УказыватьЮридическиеРеквизиты");*/
			/*СтруктураВозврата.Вставить("НомерСчета");*/
			/*СтруктураВозврата.Вставить("БИКБанка");*/
			/*СтруктураВозврата.Вставить("КоррСчетБанка");*/
			/*СтруктураВозврата.Вставить("ПредставлениеБанка");*/
			/*СтруктураВозврата.Вставить("УказатьБанковскийСчетКонтрагента");*/
			/*СтруктураВозврата.Вставить("ИспользуетсяБанкДляРасчетов");*/
			/*СтруктураВозврата.Вставить("БИКБанкаДляРасчетов");*/
			/*СтруктураВозврата.Вставить("КоррСчетБанкаДляРасчетов");*/
			/*СтруктураВозврата.Вставить("ПредставлениеБанкаДляРасчетов");*/
			/*СтруктураВозврата.Вставить("ВидКомпании");*/
			/*СтруктураВозврата.Вставить("ИНН");*/
			/*СтруктураВозврата.Вставить("КПП");*/
			/*СтруктураВозврата.Вставить("КодПоОКПО");*/
			/*СтруктураВозврата.Вставить("НаименованиеКонтрагента");*/
			/*СтруктураВозврата.Вставить("ЮридическийАдрес");*/
			/*СтруктураВозврата.Вставить("ЮридическийАдресЗначенияПолей");*/
			/*СтруктураВозврата.Вставить("УказатьДанныеКонтактногоЛица");*/
			/*СтруктураВозврата.Вставить("ФамилияКЛ");*/
			/*СтруктураВозврата.Вставить("ИмяКЛ");*/
			/*СтруктураВозврата.Вставить("ОтчествоКЛ");*/
			/*СтруктураВозврата.Вставить("ФамилияКонтрагента");*/
			/*СтруктураВозврата.Вставить("ИмяКонтрагента");*/
			/*СтруктураВозврата.Вставить("ОтчествоКонтрагента");*/
			/*СтруктураВозврата.Вставить("Название");*/
			/*СтруктураВозврата.Вставить("ФактическийАдрес");*/
			/*СтруктураВозврата.Вставить("ФактическийАдресЗначенияПолей");*/
			/*РезультатРазбора = ЭлектронныеДокументыПереопределяемый.РазобратьФайлРеквизитовКонтрагента(СсылкаНаФайл, СтруктураВозврата, ОшибкаРазбора);*/
			if(true/*ТипЗнч(РезультатРазбора) <> Тип("Булево") ИЛИ РезультатРазбора = Ложь*/)
			{
				/*ОбъектXML = Новый ЧтениеXML;*/
				/*ДвоичныеДанные = ПолучитьИзВременногоХранилища(СсылкаНаФайл);*/
				/*ВремФайл = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");*/
				/*ДвоичныеДанные.Записать(ВремФайл);*/
				/*Попытка
			ОбъектXML.ОткрытьФайл(ВремФайл);*/
				/*ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);*/
				/*Исключение
			ОбъектXML.Закрыть();*/
				/*ОшибкаРазбора = Истина;*/
				/*КонецПопытки;*/
				if(true/*НЕ ЭД.Тип() = ПолучитьТипЗначенияCML("Контрагент", "4.02")*/)
				{
					/*ОшибкаРазбора = Истина;*/
				}
				/*Попытка
			СвойствоЭД = ЭД.Свойства().Получить("Контакты");*/
				if(true/*НЕ СвойствоЭД = Неопределено И НЕ ЭД.Контакты = Неопределено*/)
				{
				}
				/*СвойствоЭД = ЭД.Свойства().Получить("РасчетныеСчета");*/
				if(true/*СвойствоЭД <> Неопределено*/)
				{
					/*ЗнДанных = ЭД.Получить(СвойствоЭД);*/
					if(true/*ЗнДанных <> Неопределено*/)
					{
					}
				}
				/*СтруктураВозврата.УказыватьЮридическиеРеквизиты = Истина;*/
				/*ДопустимыеТипы = "Страна, Регион, Район, Город, Улица, Дом, Корпус, Квартира";*/
				/*СвойствоЭД = ЭД.Свойства().Получить("ЮрЛицо");*/
				if(true/*СвойствоЭД <> Неопределено*/)
				{
					/*ЗнДанных = ЭД.Получить(СвойствоЭД);*/
					if(true/*ЗнДанных <> Неопределено*/)
					{
						/*СтруктураВозврата.ВидКомпании = 0;*/
						/*СвойствоИНН = ЗнДанных.Свойства().Получить("ИНН");*/
						if(true/*СвойствоИНН <> Неопределено*/)
						{
							/*СтруктураВозврата.ИНН = ЗнДанных.Получить(СвойствоИНН);*/
						}
						/*СвойствоКПП = ЗнДанных.Свойства().Получить("КПП");*/
						if(true/*СвойствоКПП <> Неопределено*/)
						{
							/*СтруктураВозврата.КПП = ЗнДанных.Получить(СвойствоКПП);*/
						}
						/*СвойствоОКПО = ЗнДанных.Свойства().Получить("ОКПО");*/
						if(true/*СвойствоОКПО <> Неопределено*/)
						{
							/*СтруктураВозврата.КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);*/
						}
						/*СвойствоОФНаим = ЗнДанных.Свойства().Получить("ОфициальноеНаименование");*/
						if(true/*СвойствоОФНаим <> Неопределено*/)
						{
							/*СтруктураВозврата.НаименованиеКонтрагента = ЗнДанных.Получить(СвойствоОфНаим);*/
						}
						/*СвойствоЮрАдрес = ЗнДанных.Свойства().Получить("ЮридическийАдрес");*/
						if(true/*СвойствоЮрАдрес <> Неопределено*/)
						{
							/*ЗнЮрАдрес = ЗнДанных.Получить(СвойствоЮрАдрес);*/
							if(true/*ЗнЮрАдрес <> Неопределено*/)
							{
								/*СтруктураВозврата.ЮридическийАдрес = ЗнЮрАдрес.Представление;*/
								/*ЮридическийАдресЗначенияПолей = Новый СписокЗначений;*/
								/*СтруктураВозврата.ЮридическийАдресЗначенияПолей = ЮридическийАдресЗначенияПолей;*/
							}
						}
						/*СвойствоРуководитель = ЗнДанных.Свойства().Получить("Руководитель");*/
						if(true/*СвойствоРуководитель <> Неопределено*/)
						{
							/*ЗнРуководитель = ЗнДанных.Получить(СвойствоРуководитель);*/
							if(true/*ЗнРуководитель <> Неопределено*/)
							{
								/*СвойствоФизЛицо = ЗнРуководитель.Свойства().Получить("ФизЛицо");*/
								if(true/*СвойствоФизЛицо<> Неопределено*/)
								{
									/*ФизЛицо = ЗнРуководитель.Получить(СвойствоФизЛицо);*/
									if(true/*ФизЛицо <> Неопределено*/)
									{
										/*СтруктураВозврата.УказатьДанныеКонтактногоЛица = Истина;*/
										/*ФамилияКЛ = "";*/
										/*ИмяКЛ = "";*/
										/*ОтчествоКЛ = "";*/
										/*ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(ФизЛицо.ПолноеНаименование, ФамилияКЛ, ИмяКЛ,ОтчествоКЛ);*/
										/*СтруктураВозврата.ФамилияКЛ =  ФамилияКЛ;*/
										/*СтруктураВозврата.ИмяКЛ =      ИмяКЛ;*/
										/*СтруктураВозврата.ОтчествоКЛ = ОтчествоКЛ;*/
									}
								}
							}
						}
					}
				}
				/*СвойствоЭД = ЭД.Свойства().Получить("ФизЛицо");*/
				if(true/*СвойствоЭД <> Неопределено*/)
				{
					/*ЗнДанных = ЭД.Получить(СвойствоЭД);*/
					if(true/*ЗнДанных <> Неопределено*/)
					{
						/*СтруктураВозврата.ВидКомпании = 2;*/
						/*СвойствоИНН = ЗнДанных.Свойства().Получить("ИНН");*/
						if(true/*СвойствоИНН <> Неопределено*/)
						{
							/*СтруктураВозврата.ИНН = ЗнДанных.Получить(СвойствоИНН);*/
						}
						/*СвойствоОКПО = ЗнДанных.Свойства().Получить("ОКПО");*/
						if(true/*СвойствоОКПО <> Неопределено*/)
						{
							/*КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);*/
							/*СтруктураВозврата.КодПоОКПО = ЗнДанных.Получить(СвойствоОКПО);*/
						}
						/*СвойствоОФНаим = ЗнДанных.Свойства().Получить("ПолноеНаименование");*/
						if(true/*СвойствоОФНаим <> Неопределено*/)
						{
							/*СтруктураВозврата.НаименованиеКонтрагента = ЗнДанных.Получить(СвойствоОфНаим);*/
							/*ФамилияКонтрагента = "";*/
							/*ИмяКонтрагента = "";*/
							/*ОтчествоКонтрагента = "";*/
							/*ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(СтруктураВозврата.НаименованиеКонтрагента, ФамилияКонтрагента,
							ИмяКонтрагента, ОтчествоКонтрагента);*/
							/*СтруктураВозврата.ФамилияКонтрагента =  ФамилияКонтрагента;*/
							/*СтруктураВозврата.ИмяКонтрагента =      ИмяКонтрагента;*/
							/*СтруктураВозврата.ОтчествоКонтрагента = ОтчествоКонтрагента;*/
						}
						/*СвойствоЮрАдрес = ЗнДанных.Свойства().Получить("ЮридическийАдрес");*/
						if(true/*СвойствоЮрАдрес <> Неопределено*/)
						{
							/*ЗнЮрАдрес = ЗнДанных.Получить(СвойствоЮрАдрес);*/
							if(true/*ЗнЮрАдрес <> Неопределено*/)
							{
								/*СтруктураВозврата.ЮридическийАдрес = ЗнЮрАдрес.Представление;*/
								/*ЮридическийАдресЗначенияПолей = Новый СписокЗначений;*/
								/*СтруктураВозврата.ЮридическийАдресЗначенияПолей = ЮридическийАдресЗначенияПолей;*/
							}
						}
					}
				}
				/*СвойствоЭД = ЭД.Свойства().Получить("Наименование");*/
				if(true/*СвойствоЭД <> Неопределено*/)
				{
					/*СтруктураВозврата.Название = ЭД.Получить(СвойствоЭД);*/
				}
				/*СвойствоЭД = ЭД.Свойства().Получить("Адрес");*/
				if(true/*СвойствоЭД <> Неопределено*/)
				{
					/*ЗнДанных = ЭД.Получить(СвойствоЭД);*/
					if(true/*ЗнДанных <> Неопределено*/)
					{
						/*СтруктураВозврата.ФактическийАдрес = ЗнДанных.Представление;*/
						/*ФактическийАдресЗначенияПолей = Новый СписокЗначений;*/
						/*СтруктураВозврата.ФактическийАдресЗначенияПолей = ФактическийАдресЗначенияПолей;*/
					}
				}
				/*Исключение
			
			ОшибкаРазбора = Истина;*/
				/*КонецПопытки;*/
			}
		}
		// Разбирает файл данных электронного документа, создает/изменяет объекты ИБ по данным ЭД.
		//
		// Параметры:
		//  СтруктураПараметров - структура параметров для разбора электронного документа,
		//  ДеревоРазбора - дерево значений, структура данных ранее разобранных ЭД.
		//
		// Возвращаемое значение:
		//  Структура параметров с реквизитами созданных/измененных объектов ИБ
		//

		public object РазобратьФайлДанных(/*СтруктураПараметров, ДеревоРазбора = Неопределено*/)
		{
			if(true/*ДеревоРазбора = Неопределено*/)
			{
				/*ДеревоРазбора = ИнициализироватьДеревоРазбора();*/
			}
			return null;
		}
		// Получает ключевые данные файла из заголовка электронного документа с помощью XDTO-пакета.
		//
		// Параметры:
		//  ИмяФайла - строка, путь к файлу, данные которого надо получить.
		//
		// Возвращаемое значение:
		//  Структура параметров с реквизитами электронного документа
		//

		public object ПрочитатьШапкуФайлаCMLпоXDTO(/*ИмяФайла*/)
		{
			/*ОбъектXML = Новый ЧтениеXML;*/
			/*СтруктураПараметров = Новый Структура;*/
			/*СтруктураУчастников = Новый Структура;*/
			/*ВидЭД = Неопределено;*/
			/*Отправитель = Неопределено;*/
			/*НомерДокументаОтправителя = Неопределено;*/
			/*ДатаДокументаОтправителя = Неопределено;*/
			/*ДатаФормированияЭДОтправителем = Неопределено;*/
			/*ИдЭДВладельца = Неопределено;*/
			/*НеизвестныйЭД = Ложь;*/
			/*Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);*/
			/*ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);*/
			if(true/*НЕ ЭД.Свойства().Получить("ИД") = Неопределено*/)
			{
				/*ИдЭД = ЭД.Ид;*/
			}
			/*ЕстьСвойствоИдФайл = ЭД.Свойства().Получить("ИдФайл") <> Неопределено;*/
			if(true/*ЭД.Тип() = ПолучитьТипЗначенияCML("АктОПриемке", "4.02")*/)
			{
				/*ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;*/
				/*Отправитель = "Продавец";*/
				/*ПризнакПродавца = Истина;*/
				/*НомерДокументаОтправителя = ЭД.Номер;*/
				/*ДатаДокументаОтправителя  = ЭД.Дата;*/
				/*ДеревоРазбора = ИнициализироватьДеревоРазбора();*/
				/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");*/
				/*НовыйЭД = НайденныйТипВДереве.Строки.Добавить();*/
				/*Ошибка = ложь;*/
				/*ПрочитатьДанныеКонтрагента(ЭД.Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");*/
				/*ПрочитатьДанныеКонтрагента(ЭД.Заказчик,    ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");*/
				/*СтруктураУчастников = Новый Структура;*/
				/*СтруктураУчастников.Вставить("Организация", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора));*/
				/*СтруктураУчастников.Вставить("Контрагент",  ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент",  ДеревоРазбора));*/
			}
			if(true/*НеизвестныйЭД*/)
			{
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Неизвестный тип ЭД при чтении данных из файла %1!'"), ИмяФайла);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			/*СтруктураПараметров.Вставить("НомерЭД", ИдЭД);*/
			/*СтруктураПараметров.Вставить("ВидЭд",   ВидЭД);*/
			/*НомерВерсииЭД = ВернутьНомерВерсииИзИдЭД(ИдЭД);*/
			/*Попытка
			НомерВерсииЭД = Число(НомерВерсииЭД);*/
			/*Исключение
		КонецПопытки;*/
			/*СтруктураПараметров.Вставить("НомерВерсииЭД",   НомерВерсииЭД);*/
			/*СтруктураПараметров.Вставить("ПризнакПродавца", ПризнакПродавца);*/
			/*СтруктураПараметров.Вставить("НомерДокументаОтправителя", НомерДокументаОтправителя);*/
			/*СтруктураПараметров.Вставить("ДатаДокументаОтправителя",  ДатаДокументаОтправителя);*/
			/*СтруктураПараметров.Вставить("ДатаФормированияЭДОтправителем", ДатаФормированияЭДОтправителем);*/
			/*СтруктураПараметров.Вставить("ИдЭДВладельца", ИдЭДВладельца);*/
			if(true/*СтруктураУчастников.Свойство("Организация")*/)
			{
				/*СтруктураПараметров.Вставить("Организация", СтруктураУчастников.Организация);*/
			}
			if(true/*СтруктураУчастников.Свойство("Контрагент")*/)
			{
				/*СтруктураПараметров.Вставить("Контрагент", СтруктураУчастников.Контрагент);*/
			}
			/*Исключение
		ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'"), ИмяФайла, ОписаниеОшибки());*/
			/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			/*КонецПопытки;*/
			/*ОбъектXML.Закрыть();*/
			return null;
		}
		// Только для внутреннего использования

		public void ДобавитьПространствоИмен1СВоВнешнийФайлЭД(/*ОбъектXML, ЭлектронныйДокумент, ИмяФайла*/)
		{
			/*ОбъектXML.Закрыть();*/
			/*ОбъектXML.ОткрытьФайл(ИмяФайла);*/
			/*// Считаем содержимое XML файла
*/
			/*ПостроительDOM = Новый ПостроительDOM();*/
			/*ДокументDOM = ПостроительDOM.Прочитать(ОбъектXML);*/
			/*// Освободим временный файл для записи
*/
			/*ОбъектXML.Закрыть();*/
			/*// Определим наше пространство имен
*/
			/*URIПространстваИмен = "";*/
			if(true/*Найти(ЭлектронныйДокумент.ИдФайл, "ON_SFAKT") > 0*/)
			{
				/*URIПространстваИмен = "SFAKT";*/
			}
			/*// Установим пространство имен 1С
*/
			if(true/*НЕ ЗначениеЗаполнено(ДокументDOM.ЭлементДокумента.URIПространстваИмен)*/)
			{
				/*ДокументDOM.ЭлементДокумента.УстановитьСоответствиеПространстваИмен("", URIПространстваИмен);*/
			}
			/*ЗаписьXML = Новый ЗаписьXML;*/
			/*ЗаписьXML.ОткрытьФайл(ИмяФайла);*/
			/*ЗаписьDOM = Новый ЗаписьDOM;*/
			/*ЗаписьDOM.Записать(ДокументDOM, ЗаписьXML);*/
			/*ЗаписьXML.Закрыть();*/
			/*ОбъектXML.ОткрытьФайл(ИмяФайла);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// Заполнение дерева объектов разбора и дерева соответствий объектам
		// Получает информацию о товаре в массиве ЭД
		//
		// Параметры:
		//  МассивЭД - массив ссылок на элементы справочника ЭДПрисоединенныеФайлы
		//
		// Возвращаемое значение:
		//  Таблица значений, содержащая информацию о товаре.
		//

		public object ПолучитьИнформациюОТоваре(/*МассивЭД*/)
		{
			/*ОбъектXML = Новый ЧтениеXML;*/
			/*НеизвестныйЭД = Ложь;*/
			/*ТаблицаВозврата = Неопределено;*/
			/*ИменаДопКолонок = "";*/
			/*ОбъектXML.Закрыть();*/
			/*ТаблицаВозврата.Свернуть("ИД, Артикул, Наименование, БазоваяЕдиницаКод, БазоваяЕдиницаНаименование,
	|БазоваяЕдиницаНаименованиеПолное, БазоваяЕдиницаМеждународноеСокращение, Описание, ЭД" + ИменаДопКолонок);*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Просмотр электронных документов
		// Формирует печатную форму электронного документа по файлу данных.
		//
		// Параметры:
		//  ПолноеИмяФайла - строка, путь к файлу, по которому необходимо сформировать печатную форму.
		//  НаправлениеЭД - перечисление НаправлениеЭД
		//  ИД - уникальный идентификатор объекта ЭД
		//
		// Возвращаемое значение:
		//  Табличный документ с данными электронного документа.
		//

		public object СформироватьПечатнуюФормуЭД(/*ПолноеИмяФайла, НаправлениеЭД, ИД = Неопределено,
		ИмяФайлаПодчиненногоЭД = Неопределено, НаименованиеЭД = Неопределено, ИмяФайлаДопДанных = Неопределено*/)
		{
			/*Результат = СформироватьДеревоРазбора(ПолноеИмяФайла, НаправлениеЭД, ИмяФайлаДопДанных);*/
			if(true/*Результат = Неопределено*/)
			{
			}
			/*ДеревоРазбора = Результат.ДеревоРазбора;*/
			/*СтрокаОбъекта = Результат.СтрокаОбъекта;*/
			/*ОбщийТабДок = Новый ТабличныйДокумент;*/
			/*ОбщийТабДок.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;*/
			if(true/*ЗначениеЗаполнено(НаименованиеЭД)*/)
			{
				/*МакетИдентификатораДокумента = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ИдентификаторДокумента");*/
				/*ОбластьИдентификаторДокумента = МакетИдентификатораДокумента.ПолучитьОбласть("ИдентификаторДокумента");*/
				/*ОбластьИдентификаторДокумента.Параметры.ИдентификаторДокумента = НаименованиеЭД;*/
				/*ОбластьЯчеек = ОбластьИдентификаторДокумента.Область();*/
				/*ОбластьЯчеек.СоздатьФорматСтрок();*/
				/*ОбщийТабДок.Вывести(ОбластьИдентификаторДокумента);*/
			}
			/*ТабличныйДокумент = Новый ТабличныйДокумент;*/
			if(true/*СтрокаОбъекта.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату*/)
			{
				/*ДанныеЭДДляПечати = ПолучитьДанныеСчетаЗаказаДляПечати(СтрокаОбъекта, ДеревоРазбора);*/
				/*ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(ТабличныйДокумент, ДанныеЭДДляПечати);*/
			}
			/*ОбластьЯчеек = ТабличныйДокумент.Область(1, 1, 1);*/
			/*ОбластьЯчеек.СоздатьФорматСтрок();*/
			/*ОбщийТабДок.Вывести(ТабличныйДокумент);*/
			/*ОбщийТабДок.ОриентацияСтраницы = ТабличныйДокумент.ОриентацияСтраницы;*/
			/*ОбщийТабДок.АвтоМасштаб = Истина;*/
			/*ОбщийТабДок.ОтображатьЗаголовки = Ложь;*/
			/*ОбщийТабДок.ОтображатьСетку = Ложь;*/
			/*ОбщийТабДок.ТолькоПросмотр = Истина;*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка формирования табличного документа:
		|%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'формирования табличного документа'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Сравнение электронных документов
		// Готовит файлы табличных документов MXL по данным электронных документов.
		//
		// Параметры:
		//  МассивЭД - массив ссылок на электронные документы, которые необходимо обработать.
		//
		// Возвращаемое значение:
		//  Массив структур - структура содержит имя файла данных и имя файла табличного документа MXL
		//

		public object ПодготовитьВременныеФайлыПросмотраЭД(/*МассивЭД*/)
		{
			/*УстановитьПривилегированныйРежим(Истина);*/
			/*ПереченьВременныхФайлов = Новый Массив;*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Формирование извещений
		// Только для внутреннего использования

		public object СформироватьЭДИзвещениеОПолучении(/*СсылкаНаЭД*/)
		{
			/*УстановитьПривилегированныйРежим(Истина);*/
			/*ТипЭлементаВерсииЭД = СсылкаНаЭД.ТипЭлементаВерсииЭД;*/
			if(true/*НЕ (ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ЭСФ
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОИПЭСФ
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.УУЭСФ
		ИЛИ ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПервичныйЭД)*/)
			{
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Для типа ЭД %1 не предусмотрено формирование Извещения о получении.'"), ТипЭлементаВерсииЭД);*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			/*АдресВоВременномХранилище = "";*/
			/*СтруктураЭД = СформироватьФайлИзвещенияПоЭД(СсылкаНаЭД);*/
			if(true/*НЕ ЗначениеЗаполнено(СтруктураЭД) ИЛИ НЕ СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище)*/)
			{
			}
			/*ДатаСозданияФайла = ТекущаяДатаСеанса();*/
			/*ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(СсылкаНаЭД.ВладелецФайла, 
	                                                   СтруктураЭД.ИдФайла,
													   "xml",
													   ДатаСозданияФайла,
													   УниверсальноеВремя(ТекущаяДата()),
													   АдресВоВременномХранилище,
													   Неопределено,
													   ,
													   "ЭДПрисоединенныеФайлы");*/
			/*СтруктураПараметров = Новый Структура;*/
			/*СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);*/
			/*СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Утвержден);*/
			/*СтруктураПараметров.Вставить("Получатель", СтруктураЭД.ИдПолучателя);*/
			/*СтруктураПараметров.Вставить("Отправитель", СтруктураЭД.ИдОтправителя);*/
			/*СтруктураПараметров.Вставить("НомерЭД", СтруктураЭД.НомерЭД);*/
			/*СтруктураПараметров.Вставить("СоглашениеЭД", СсылкаНаЭД.СоглашениеЭД);*/
			/*СтруктураПараметров.Вставить("Организация", СтруктураЭД.Отправитель);*/
			/*СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Получатель);*/
			/*СтруктураПараметров.Вставить("ВладелецЭД", СсылкаНаЭД.ВладелецФайла);*/
			/*СтруктураПараметров.Вставить("УникальныйИД", СсылкаНаЭД.УникальныйИД);*/
			/*СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД", ОпределитьТипЭДПоТипуЭДВладельца(СсылкаНаЭД));*/
			/*СтруктураПараметров.Вставить("ДатаДокументаОтправителя", ДатаСозданияФайла);*/
			/*СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);*/
			/*ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);*/
			if(true/*СтруктураПараметров.ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ИПЭСФ*/)
			{
				/*СтруктураПараметров = Новый Структура;*/
				/*СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Входящий);*/
				/*СтруктураПараметров.Вставить("ВидЭД", СсылкаНаЭД.ВидЭД);*/
				/*СтруктураПараметров.Вставить("СоглашениеЭД", СсылкаНаЭД.СоглашениеЭД);*/
				/*СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Получатель);*/
				/*СтруктураПараметров.Вставить("ВладелецЭД", СсылкаНаЭД.ВладелецФайла);*/
				/*СтруктураПараметров.Вставить("СтатусЭД", СсылкаНаЭД.СтатусЭД);*/
				/*ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(СсылкаНаЭД, СтруктураПараметров);*/
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Просмотр уведомлений об уточнении
		// Только для внутреннего использования

		public object СформироватьЭДУведомлениеОбУточнении(/*СсылкаНаЭД, ТекстУточнения*/)
		{
			/*ДобавленныйФайл = Неопределено;*/
			/*АдресВоВременномХранилище = "";*/
			/*СтруктураЭД = СформироватьФайлУведомлениеОбУточненииПоЭД(СсылкаНаЭД, ТекстУточнения);*/
			if(true/*ЗначениеЗаполнено(СтруктураЭД) И СтруктураЭД.Свойство("АдресВоВременномХранилище", АдресВоВременномХранилище)*/)
			{
				/*ДобавленныйФайл = ПрисоединенныеФайлы.ДобавитьФайл(СсылкаНаЭД.ВладелецФайла, СтруктураЭД.ИдФайла, "xml",
			ТекущаяДатаСеанса(), ТекущаяДатаСеанса(), АдресВоВременномХранилище, Неопределено, , "ЭДПрисоединенныеФайлы",
			СтруктураЭД.НомерЭД);*/
				/*СтруктураПараметров = Новый Структура;*/
				/*СтруктураПараметров.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
				/*СтруктураПараметров.Вставить("ВидЭД", СтруктураЭД.ВидЭД);*/
				/*СтруктураПараметров.Вставить("СтатусЭД", Перечисления.СтатусыЭД.Утвержден);*/
				/*СтруктураПараметров.Вставить("Получатель", СтруктураЭД.ИдПолучателя);*/
				/*СтруктураПараметров.Вставить("Отправитель", СтруктураЭД.ИдОтправителя);*/
				/*СтруктураПараметров.Вставить("НомерЭД", СтруктураЭД.НомерЭД);*/
				/*СтруктураПараметров.Вставить("СоглашениеЭД", СсылкаНаЭД.СоглашениеЭД);*/
				/*СтруктураПараметров.Вставить("Организация", СтруктураЭД.Отправитель);*/
				/*СтруктураПараметров.Вставить("Контрагент", СтруктураЭД.Получатель);*/
				/*СтруктураПараметров.Вставить("ВладелецЭД", СсылкаНаЭД.ВладелецФайла);*/
				/*СтруктураПараметров.Вставить("УникальныйИД", СсылкаНаЭД.УникальныйИД);*/
				/*СтруктураПараметров.Вставить("ТипЭлементаВерсииЭД",
			Перечисления.ТипыЭлементовВерсииЭД[?(СсылкаНаЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура, "УУЭСФ", "УОУ")]);*/
				/*СтруктураПараметров.Вставить("ЭлектронныйДокументВладелец", СсылкаНаЭД);*/
				/*ЭлектронныеДокументы.ИзменитьПоСсылкеПрисоединенныйФайл(ДобавленныйФайл, СтруктураПараметров);*/
			}
			return null;
		}
		// Получает значение реквизита шапки электронного документа по его имени из строки разобранных данных.
		//
		// Параметры:
		//  СтрокаДерева - строка дерева значений, параметры разбора электронного документа,
		//  ИмяРеквизита - строка, имя реквизита, значение которого надо получить,
		//  ДеревоРазбора - дерево значений - полная структура с данными разбора электронного документа.
		//
		// Возвращаемое значение:
		//  Значение реквизита шапки электронного документа.
		//

		public object ПолучитьРеквизитШапкиЭД(/*СтрокаДерева, ИмяРеквизита, ДеревоРазбора = Неопределено*/)
		{
			/*Результат = Неопределено;*/
			if(true/*СтрокаДерева.Строки.Количество() > 0*/)
			{
				/*НайденнаяСтрока = СтрокаДерева.Строки.Найти(ИмяРеквизита, "Реквизит");*/
			}
			if(true/*НайденнаяСтрока <> Неопределено*/)
			{
				if(true/*ЗначениеЗаполнено(НайденнаяСтрока.СсылкаНаОбъект)*/)
				{
					/*// вернем ссылку
*/
					/*Результат = НайденнаяСтрока.СсылкаНаОбъект;*/
				}
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
		////////////////////////////////////////////////////////////////////////////////
		// Формирование ЭД из документов БД
		// Возвращает результат успеха формирования файла ЭД Счет-фактура.
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьКорректировочныйСчетФактуруCML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ТаблицаТоваров = Новый ТаблицаЗначений;*/
			/*ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;*/
			/*ПространствоИменСхемы = "KORSFAKT";*/
			/*Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);*/
			/*ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);*/
			/*// Коммерческая информация.
*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);*/
			/*СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);*/
			/*КС  = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);*/
			/*Массив = Новый Массив;*/
			/*Массив.Добавить(Тип("Строка"));*/
			/*ОписаниеТиповСтрока46 = Новый ОписаниеТипов(Массив, , КС);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр",ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураПараметров.ИдОтпр), Истина,
			ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок", ОписаниеТиповСтрока46.ПривестиЗначение(СтруктураПараметров.ИдПок), Истина,
			ТекстОшибки);*/
			/*СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг,Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр", СвОЭДОтпр, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);*/
			/*Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);*/
			/*СвКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(СвКСчФ, "НомерКСчФ", СтруктураПараметров.НомерКСчФ, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвКСчФ, "ДатаКСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаКСчФ), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвКСчФ, "НомерСчФ", СтруктураПараметров.НомерСчФ, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвКСчФ, "ДатаСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаСчФ), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвКСчФ, "КодОКВ", СтруктураПараметров.КодОКВ, Истина, ТекстОшибки);*/
			/*НомИспрКСчФ = Неопределено;*/
			/*ДатаИспрКСчФ = Неопределено;*/
			if(true/*СтруктураПараметров.Свойство("НомИспрКСчФ", НомИспрКСчФ)
			И СтруктураПараметров.Свойство("ДатаИспрКСчФ", ДатаИспрКСчФ)
			И ЗначениеЗаполнено(НомИспрКСчФ)
			И ЗначениеЗаполнено(ДатаИспрКСчФ)*/)
			{
				/*ИспрКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИспрКСчФ", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ИспрКСчФ, "НомИспрКСчФ", НомИспрКСчФ, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ИспрКСчФ, "ДатаИспрКСчФ", ДатаДД_ММ_ГГГГ(ДатаИспрКСчФ), Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвКСчФ, "ИспрКСчФ", ИспрКСчФ, , ТекстОшибки);*/
			}
			/*НомИспрСчФ = Неопределено;*/
			/*ДатаИспрСчФ = Неопределено;*/
			if(true/*СтруктураПараметров.Свойство("НомИспрСчФ", НомИспрСчФ)
			И СтруктураПараметров.Свойство("ДатаИспрСчФ", ДатаИспрСчФ)
			И ЗначениеЗаполнено(НомИспрСчФ)
			И ЗначениеЗаполнено(ДатаИспрСчФ)*/)
			{
				/*ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИспрСчФ", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", НомИспрСчФ, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ИспрСчФ,"ДатаИспрСчФ", ДатаДД_ММ_ГГГГ(ДатаИспрСчФ), Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвКСчФ, "ИспрСчФ", ИспрСчФ, , ТекстОшибки);*/
			}
			/*СвПрод = ПолучитьОбъектТипаCML("СвПродПокТип",  ПространствоИменСхемы);*/
			/*СформироватьДанныеПоКонтрагентуЭСФ(СвПрод, СтруктураПараметров, "Организация", ТекстОшибки, ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(СвКСчФ, "СвПрод", СвПрод, Истина, ТекстОшибки);*/
			/*СвПокуп = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);*/
			/*СформироватьДанныеПоКонтрагентуЭСФ(СвПокуп, СтруктураПараметров, "Контрагент", ТекстОшибки, ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(СвКСчФ, "СвПокуп", СвПокуп, Истина, ТекстОшибки);*/
			/*ИдФайлИнфПол = Неопределено;*/
			/*ТекстИнф = Неопределено;*/
			if(true/*СтруктураПараметров.Свойство("ТекстИнф", ТекстИнф)
			ИЛИ СтруктураПараметров.Свойство("ИдФайлИнфПол", ИдФайлИнфПол)*/)
			{
				/*ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвКСчФ.ИнфПол", ПространствоИменСхемы);*/
				if(true/*ЗначениеЗаполнено(ТекстИнф)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", ТекстИнф, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(ИдФайлИнфПол)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", ИдФайлИнфПол, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(СвКСчФ, "ИнфПол", ИнфПол, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Документ, "СвКСчФ", СвКСчФ, Истина, ТекстОшибки);*/
			/*ТаблКСчФ = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ", ПространствоИменСхемы);*/
			if(true/*СтруктураПараметров.ВсегоСтТовУчНалУвел > 0 И СтруктураПараметров.ВсегоСтТовБезНДСУвел > 0*/)
			{
				/*ВсегоУвел = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУвел", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовБезНДСВсего", СтруктураПараметров.ВсегоСтТовБезНДСУвел, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ВсегоУвел, "СтТовУчНалВсего", СтруктураПараметров.ВсегоСтТовУчНалУвел, Истина, ТекстОшибки);*/
				/*СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);*/
				if(true/*СтруктураПараметров.ВсегоСумНалУвел = 0*/)
				{
					/*ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(ВсегоУвел, "СумНал", СумНДСТип, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ТаблКСчФ, "ВсегоУвел", ВсегоУвел, , ТекстОшибки);*/
			}
			if(true/*СтруктураПараметров.ВсегоСтТовУчНалУм > 0 И СтруктураПараметров.ВсегоСтТовБезНДСУм > 0*/)
			{
				/*ВсегоУм = ПолучитьОбъектТипаCML("Файл.Документ.ТаблКСчФ.ВсегоУм", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовБезНДСВсего", СтруктураПараметров.ВсегоСтТовБезНДСУм, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ВсегоУм, "СтТовУчНалВсего", СтруктураПараметров.ВсегоСтТовУчНалУм, Истина, ТекстОшибки);*/
				/*СумНДСТип = ПолучитьОбъектТипаCML("СумНДСТип", ПространствоИменСхемы);*/
				if(true/*СтруктураПараметров.ВсегоСумНалУм = 0*/)
				{
					/*ЗаполнитьСвойствоXDTO(СумНДСТип, "СумНДС", "-", Истина, ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(ВсегоУм, "СумНал", СумНДСТип, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ТаблКСчФ, "ВсегоУм", ВсегоУм, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Документ, "ТаблКСчФ", ТаблКСчФ, Истина, ТекстОшибки);*/
			/*ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(СтруктураПараметров.Организация);*/
			/*ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(СтруктураПараметров.Организация);*/
			/*Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);*/
			if(true/*ЭтоФизЛицо*/)
			{
				/*ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);*/
				/*ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);*/
				/*ЗаполнитьФИОЭСФ(ФИОТип, ДанныеЮрФизЛица.ПолноеНаименование, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИОТип, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);*/
				/*СвГосРегИП = ЭлектронныеДокументыПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(СтруктураПараметров.Организация);*/
				/*ЗаполнитьСвойствоXDTO(ИП,"СвГосРегИП",СвГосРегИП,Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Подписант,"ИП",ИП,Истина, ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);*/
			/*Файл.Проверить();*/
			/*ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД Счет-фактура.
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьСчетФактуруCML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ТаблицаТоваров = Новый ТаблицаЗначений;*/
			/*ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;*/
			/*ПространствоИменСхемы = "SFAKT";*/
			/*Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);*/
			/*ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);*/
			/*// Коммерческая информация
*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ИдФайл",   СтруктураПараметров.ИдФайл,  Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);*/
			/*СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);*/
			/*КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);*/
			/*Массив = Новый Массив;*/
			/*Массив.Добавить(Тип("Строка"));*/
			/*ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок),  Истина, ТекстОшибки);*/
			/*СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);*/
			/*Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);*/
			/*СвСчФакт = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(СвСчФакт, "НомерСчФ", СтруктураПараметров.НомерСчФ, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвСчФакт, "ДатаСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаСчФ),Истина,ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвСчФакт, "КодОКВ", СтруктураПараметров.КодОКВ, Истина, ТекстОшибки);*/
			if(true/*ЗначениеЗаполнено(СтруктураПараметров.НомИспрСчФ) И ЗначениеЗаполнено(СтруктураПараметров.ДатаИспрСчФ)*/)
			{
				/*ИспрСчФ = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИспрСчФ", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ИспрСчФ, "НомИспрСчФ", СтруктураПараметров.НомИспрСчФ, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ИспрСчФ, "ДатаИспрСчФ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаИспрСчФ), Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвСчФакт,"ИспрСчФ", ИспрСчФ,,ТекстОшибки);*/
			}
			/*СвПрод = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);*/
			/*СформироватьДанныеПоКонтрагентуЭСФ(СвПрод, СтруктураПараметров, "Организация", ТекстОшибки, ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(СвСчФакт, "СвПрод", СвПрод, Истина, ТекстОшибки);*/
			/*Грузоотправитель = Неопределено;*/
			if(true/*НЕ СтруктураПараметров.ТолькоУслуги*/)
			{
				/*ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ГрузОт", ПространствоИменСхемы);*/
				if(true/*СтруктураПараметров.Свойство("Грузоотправитель", Грузоотправитель)*/)
				{
					if(true/*Грузоотправитель = СтруктураПараметров.Организация*/)
					{
						/*ЗаполнитьСвойствоXDTO(ГрузОт, "ОнЖе", "он же", Истина, ТекстОшибки);*/
						/*ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузОт", ГрузОт, Истина, ТекстОшибки);*/
					}
				}
			}
			/*Грузополучатель = Неопределено;*/
			if(true/*НЕ СтруктураПараметров.ТолькоУслуги И СтруктураПараметров.Свойство("Грузополучатель", Грузополучатель) 
				И ЗначениеЗаполнено(Грузополучатель)*/)
			{
				/*СвГрузПолуч = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип", ПространствоИменСхемы);*/
				/*СформироватьДанныеПоГрузоотправителюЭСФ(СвГрузПолуч, СтруктураПараметров, "Грузополучатель", ТекстОшибки, ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(СвСчФакт, "ГрузПолуч", СвГрузПолуч, Истина, ТекстОшибки);*/
			}
			/*ПлатежныеДокументы = Неопределено;*/
			if(true/*СтруктураПараметров.Свойство("СвПРД", ПлатежныеДокументы) И ПлатежныеДокументы.Количество() > 0*/)
			{
			}
			/*СвПокуп = ПолучитьОбъектТипаCML("СвПродПокТип", ПространствоИменСхемы);*/
			/*СформироватьДанныеПоКонтрагентуЭСФ(СвПокуп, СтруктураПараметров, "Контрагент", ТекстОшибки,  ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(СвСчФакт, "СвПокуп", СвПокуп, Истина, ТекстОшибки);*/
			/*ИдФайлДопСв = неопределено;*/
			/*ТекстДопСв  = Неопределено;*/
			if(true/*СтруктураПараметров.Свойство("ТекстДопСв", ТекстДопСв) И ЗначениеЗаполнено(ТекстДопСв)
			ИЛИ СтруктураПараметров.Свойство("ИдФайлДопСв", ИдФайлДопСв) И ЗначениеЗаполнено(ИдФайлДопСв)*/)
			{
				/*ДопСв = ПолучитьОбъектТипаCML("Файл.Документ.СвСчФакт.ИнфПол", ПространствоИменСхемы);*/
				if(true/*ЗначениеЗаполнено(ТекстДопСв)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ДопСв, "ТекстИнф", ТекстДопСв, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(ИдФайлДопСв)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ДопСв, "ИдФайлИнфПол", ИдФайлДопСв, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(СвСчФакт, "ИнфПол", ДопСв, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Документ, "СвСчФакт", СвСчФакт, Истина, ТекстОшибки);*/
			/*ТаблСчФакт = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт", ПространствоИменСхемы);*/
			/*ВсегоОпл = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.ВсегоОпл", ПространствоИменСхемы);*/
			/*СтТовБезНДС = Неопределено;*/
			if(true/*СтруктураПараметров.Свойство("СтТовБезНДСВсего", СтТовБезНДС)*/)
			{
				/*ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовБезНДСВсего", СтТовБезНДС, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(ВсегоОпл, "СтТовУчНалВсего", СтруктураПараметров.СтТовУчНалВсего, Истина, ТекстОшибки);*/
			/*СумНалВсего = ПолучитьОбъектТипаCML("Файл.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего", ПространствоИменСхемы);*/
			if(true/*СтруктураПараметров.СумНДС = 0*/)
			{
				/*ЗаполнитьСвойствоXDTO(СумНалВсего,"СумНДС", "без НДС", Истина, ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(ВсегоОпл, "СумНалВсего", СумНалВсего, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ТаблСчФакт, "ВсегоОпл", ВсегоОпл, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "ТаблСчФакт", ТаблСчФакт, Истина, ТекстОшибки);*/
			/*ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(СтруктураПараметров.Организация);*/
			/*ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(СтруктураПараметров.Организация);*/
			/*Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);*/
			if(true/*ЭтоФизЛицо*/)
			{
				/*ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);*/
				/*ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);*/
				/*ЗаполнитьФИОЭСФ(ФИО, ДанныеЮрФизЛица.ПолноеНаименование, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", ДанныеЮрФизЛица.ИНН, Истина, ТекстОшибки);*/
				/*СвГосРегИП = ЭлектронныеДокументыПереопределяемый.ДанныеСвидетельстваОРегистрацииИП(СтруктураПараметров.Организация);*/
				/*ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", СвГосРегИП, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);*/
			/*Файл.Проверить();*/
			/*ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1. (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД Счет-фактура.
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьТорг12CML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;*/
			/*ПространствоИменСхемы = "OTORG12";*/
			/*Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);*/
			/*ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);*/
			/*// Коммерческая информация
*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);*/
			/*СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);*/
			/*КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);*/
			/*Массив = Новый Массив;*/
			/*Массив.Добавить(Тип("Строка"));*/
			/*ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок), Истина, ТекстОшибки);*/
			if(true/*ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО)*/)
			{
				/*СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);*/
			/*Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);*/
			/*СвТНО = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(СвТНО, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвТНО, "ОКУДПервДок", СтруктураПараметров.ОКУДПервДок, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвТНО, "НомФорм", СтруктураПараметров.НомФорм, Истина, ТекстОшибки);*/
			/*Поставщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);*/
			if(true/*ЗаполнитьДанныеУчастникаФНСCML(Поставщик, СтруктураПараметров.Поставщик, ТекстОшибки, ПространствоИменСхемы)*/)
			{
				/*ЗаполнитьСвойствоXDTO(СвТНО, "Поставщик", Поставщик, , ТекстОшибки);*/
			}
			/*Плательщик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);*/
			if(true/*ЗаполнитьДанныеУчастникаФНСCML(Плательщик, СтруктураПараметров.Плательщик, ТекстОшибки, ПространствоИменСхемы)*/)
			{
				/*ЗаполнитьСвойствоXDTO(СвТНО, "Плательщик", Плательщик, , ТекстОшибки);*/
			}
			/*Грузоотправитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);*/
			if(true/*ЗаполнитьДанныеУчастникаФНСCML(Грузоотправитель, СтруктураПараметров.СведенияОГрузоотправителе.Грузоотправитель, 
				ТекстОшибки, ПространствоИменСхемы)*/)
			{
				/*ГрузОт = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ГрузОт", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ГрузОт, "ГрузОтпр", Грузоотправитель, , ТекстОшибки);*/
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.СведенияОГрузоотправителе.КодОКДП)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ГрузОт, "ОКДП", СтруктураПараметров.СведенияОГрузоотправителе.КодОКДП, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.СведенияОГрузоотправителе.СтруктурноеПодразделение)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ГрузОт, "СтруктПодр", СтруктураПараметров.СведенияОГрузоотправителе.СтруктурноеПодразделение,,
					ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(СвТНО, "ГрузОт", ГрузОт, , ТекстОшибки);*/
			}
			/*Грузополучатель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);*/
			if(true/*ЗаполнитьДанныеУчастникаФНСCML(Грузополучатель, СтруктураПараметров.Грузополучатель, ТекстОшибки, ПространствоИменСхемы)*/)
			{
				/*ЗаполнитьСвойствоXDTO(СвТНО, "ГрузПолуч", Грузополучатель, , ТекстОшибки);*/
			}
			if(true/*ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНаименование) ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНомер)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДата) ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДопСведения)*/)
			{
				/*Основание = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.Основание", ПространствоИменСхемы);*/
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНаименование)*/)
				{
					/*ЗаполнитьСвойствоXDTO(Основание, "НаимОсн", СтруктураПараметров.ДокОснованиеНаименование, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеНомер)*/)
				{
					/*ЗаполнитьСвойствоXDTO(Основание, "НомОсн", СтруктураПараметров.ДокОснованиеНомер, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДата)*/)
				{
					/*ЗаполнитьСвойствоXDTO(Основание, "ДатаОсн", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДокОснованиеДата), , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ДокОснованиеДопСведения)*/)
				{
					/*ЗаполнитьСвойствоXDTO(Основание, "ДопСвОсн", СтруктураПараметров.ДокОснованиеДопСведения, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(СвТНО, "Основание", Основание, , ТекстОшибки);*/
			}
			if(true/*ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяНомер)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяДата)*/)
			{
				/*ТранНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.Основание", ПространствоИменСхемы);*/
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяНомер)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ТранНакл, "НомТранНакл", СтруктураПараметров.ТранспортнаяНакладнаяНомер, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ТранспортнаяНакладнаяДата)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ТранНакл, "ДатаТранНакл", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ТранспортнаяНакладнаяДата), , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(СвТНО, "ТранНакл", ТранНакл, , ТекстОшибки);*/
			}
			if(true/*ЗначениеЗаполнено(СтруктураПараметров.КодВидаОперации)*/)
			{
				/*ЗаполнитьСвойствоXDTO(СвТНО, "ВидОперации", СтруктураПараметров.КодВидаОперации, , ТекстОшибки);*/
			}
			/*ТН = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ТН, "НомТН", СтруктураПараметров.НомерТоварнойНакладной, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ТН, "ДатаТН", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаТоварнойНакладной), Истина, ТекстОшибки);*/
			/*Таблица = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица", ПространствоИменСхемы);*/
			/*ТЗТовары = СтруктураПараметров.ТаблицаТоваров;*/
			if(true/*ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.КоличествоМест)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаБрутто)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаНетто)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаНДС)
			ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаБезНДС)*/)
			{
				/*ВсегоНакл = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.Таблица.ВсегоНакл", ПространствоИменСхемы);*/
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.КоличествоМест)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ВсегоНакл, "КолМестВс", СтруктураПараметров.ВсегоПоНакладной.КоличествоМест, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаБрутто)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ВсегоНакл, "БруттоВс", СтруктураПараметров.ВсегоПоНакладной.МассаБрутто, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.МассаНетто)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ВсегоНакл, "НеттоВс", СтруктураПараметров.ВсегоПоНакладной.МассаНетто, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаБезНДС)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумБезНДСВс", СтруктураПараметров.ВсегоПоНакладной.СуммаБезНДС, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаНДС)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумНДСВс", СтруктураПараметров.ВсегоПоНакладной.СуммаНДС, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ВсегоНакл, "СумУчНДСВс", СтруктураПараметров.ВсегоПоНакладной.СуммаСНДС, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(Таблица, "ВсегоНакл", ВсегоНакл, , ТекстОшибки);*/
			}
			/*СтОбщСвед = СтруктураПараметров.ОбщиеСведенияОТоварнойНакладной;*/
			if(true/*ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписей)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.ВсегоМест)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписейПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.ВсегоМестПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.МассаГрузаНеттоПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБруттоПрописью)
			ИЛИ ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБрутто)*/)
			{
				/*ТНОбщ = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ТН.ТНОбщ", ПространствоИменСхемы);*/
				if(true/*ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписей)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗап", СтОбщСвед.КоличествоПорядковыхНомеровЗаписей, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтОбщСвед.КоличествоПорядковыхНомеровЗаписейПрописью)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ТНОбщ, "КолНомЗапПр", СтОбщСвед.КоличествоПорядковыхНомеровЗаписейПрописью, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтОбщСвед.ВсегоМест)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМест", СтОбщСвед.ВсегоМест, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтОбщСвед.ВсегоМестПрописью)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ТНОбщ, "ВсМестПр", СтОбщСвед.ВсегоМестПрописью, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтОбщСвед.МассаГрузаНетто)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ТНОбщ, "Нетто", СтОбщСвед.МассаГрузаНетто, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтОбщСвед.МассаГрузаНеттоПрописью)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ТНОбщ, "НеттоПр", СтОбщСвед.МассаГрузаНеттоПрописью, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБрутто)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ТНОбщ, "Брутто", СтОбщСвед.МассаГрузаБрутто, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтОбщСвед.МассаГрузаБруттоПрописью)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ТНОбщ, "БруттоПр", СтОбщСвед.МассаГрузаБруттоПрописью, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(ТН, "ТНОбщ", ТНОбщ, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(ТН, "Таблица", Таблица, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвТНО, "ТН", ТН, Истина, ТекстОшибки);*/
			/*СтСведОтпуск = СтруктураПараметров.СведенияПоОтпускуГруза;*/
			if(true/*ЗначениеЗаполнено(СтСведОтпуск.ОтпущеноНаСумму)*/)
			{
				/*ОтпускГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ОтпускГруз", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ОтпускГруз, "СумОтпуск", СтСведОтпуск.ОтпущеноНаСумму, Истина, ТекстОшибки);*/
				if(true/*ЗначениеЗаполнено(СтСведОтпуск.ОтпущеноНаСуммуПрописью)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ОтпускГруз, "СумОтпускПр", СтСведОтпуск.ОтпущеноНаСуммуПрописью, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтСведОтпуск.ПриложениеКоличествоЛистов)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрил", СтСведОтпуск.ПриложениеКоличествоЛистов, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтСведОтпуск.ПриложениеКоличествоЛистовПрописью)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ОтпускГруз, "КолПрилПр", СтСведОтпуск.ПриложениеКоличествоЛистовПрописью, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтСведОтпуск.ДатаОтпуска)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ОтпускГруз, "ДатаОтпуск", ДатаДД_ММ_ГГГГ(СтСведОтпуск.ДатаОтпуска), , ТекстОшибки);*/
				}
				/*ОтпускРазреш = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);*/
				if(true/*ЗаполнитьДолжностноеЛицоФНСCML(ОтпускРазреш, СтСведОтпуск.ОтпускРазрешил,
					ТекстОшибки, ПространствоИменСхемы)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ОтпускГруз, "ОтпускРазреш", ОтпускРазреш, , ТекстОшибки);*/
				}
				/*ОтпускРазреш = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);*/
				if(true/*ЗаполнитьДолжностноеЛицоФНСCML(ОтпускРазреш, СтСведОтпуск.Бухгалтер,
					ТекстОшибки, ПространствоИменСхемы)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ОтпускГруз, "Бухгалтер", ОтпускРазреш, , ТекстОшибки);*/
				}
				/*ОтпускРазреш = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);*/
				if(true/*ЗаполнитьДолжностноеЛицоФНСCML(ОтпускРазреш, СтСведОтпуск.ОтпускПроизвел,
					ТекстОшибки, ПространствоИменСхемы)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ОтпускГруз, "ОтпускПроизв", ОтпускРазреш, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(СвТНО, "ОтпускГруз", ОтпускГруз, , ТекстОшибки);*/
			}
			/*СтрокаИнфПол = "";*/
			/*ДопФайлСформирован = Ложь;*/
			if(true/*ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0*/)
			{
				/*// Сформируем xml-строку (ИнфПол):
*/
				if(true/*СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка")*/)
				{
					/*СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");*/
				}
				/*// Сформируем доп. файл:
*/
				/*ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);*/
			}
			if(true/*ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован*/)
			{
				/*ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвТНО.ИнфПол", ПространствоИменСхемы);*/
				if(true/*ЗначениеЗаполнено(СтрокаИнфПол)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);*/
				}
				if(true/*ДопФайлСформирован*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(СвТНО, "ИнфПол", ИнфПол, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Документ, "СвТНО", СвТНО, Истина, ТекстОшибки);*/
			/*СтПодписант = СтруктураПараметров.Подписант;*/
			/*Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);*/
			if(true/*ТипЗнч(СтПодписант.ЭтоФизЛицо) = Тип("Булево") И СтПодписант.ЭтоФизЛицо*/)
			{
				/*ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);*/
				/*ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтПодписант.Фамилия, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтПодписант.Имя, Истина, ТекстОшибки);*/
				if(true/*ЗначениеЗаполнено(СтПодписант.Отчество)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтПодписант.Отчество, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", СтПодписант.ИНН, Истина, ТекстОшибки);*/
				if(true/*ЗначениеЗаполнено(СтПодписант.СвидетельствоОРегистрацииИП)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", СтПодписант.СвидетельствоОРегистрацииИП, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);*/
			/*Файл.Проверить();*/
			/*ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД.'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД Счет-фактура.
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьТорг12ПокупательCML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ПространствоИменСхемы = "PTORG12";*/
			/*Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);*/
			/*ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);*/
			/*// Коммерческая информация
*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);*/
			/*СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);*/
			/*КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);*/
			/*Массив = Новый Массив;*/
			/*Массив.Добавить(Тип("Строка"));*/
			/*ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр),
			Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок),
			Истина, ТекстОшибки);*/
			if(true/*ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО)*/)
			{
				/*СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);*/
			/*Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);*/
			/*ИдТНО = ПолучитьОбъектТипаCML("Файл.Документ.ИдТНО", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ИдТНО, "ИдФайлТН", СтруктураПараметров.ИдФайлТН, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИдТНО, "ДатаДокТН", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДокТН), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИдТНО, "ВремДокТН", СтруктураПараметров.ВремДокТН, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "ИдТНО", ИдТНО, Истина, ТекстОшибки);*/
			/*СвТНП = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(СвТНП, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвТНП, "ОКУДПервДок", СтруктураПараметров.ОКУДПервДок, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвТНП, "НомФорм", СтруктураПараметров.НомФорм, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвТНП, "НомТН", СтруктураПараметров.НомерТоварнойНакладной, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвТНП, "ДатаТН", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаТоварнойНакладной), Истина,
			ТекстОшибки);*/
			if(true/*ЗначениеЗаполнено(СтруктураПараметров.ДатаПолученияГруза)*/)
			{
				/*ПолучилГруз = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ПолучилГруз, "ДатаПолуч", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаПолученияГруза), Истина,
				ТекстОшибки);*/
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.НомерДоверенности)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДатаДоверенности)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице)*/)
				{
					/*Доверенность = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.Доверенность", ПространствоИменСхемы);*/
					if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.НомерДоверенности)*/)
					{
						/*ЗаполнитьСвойствоXDTO(Доверенность, "НомДоверен",
						СтруктураПараметров.Доверенность.НомерДоверенности, , ТекстОшибки);*/
					}
					if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДатаДоверенности)*/)
					{
						/*ЗаполнитьСвойствоXDTO(Доверенность, "ДатаДоверен",
						ДатаДД_ММ_ГГГГ(СтруктураПараметров.Доверенность.ДатаДоверенности), , ТекстОшибки);*/
					}
					if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Должность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Фамилия)*/)
					{
						/*ВыданаКем = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем", ПространствоИменСхемы);*/
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность)*/)
						{
							/*ЗаполнитьСвойствоXDTO(ВыданаКем, "НаимОргКем",
							СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность, , ТекстОшибки);*/
						}
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности)*/)
						{
							/*ЗаполнитьСвойствоXDTO(ВыданаКем, "ДопСведКем",
							СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности, , ТекстОшибки);*/
						}
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Должность)*/)
						{
							/*ЗаполнитьСвойствоXDTO(ВыданаКем, "ДолжнКем",
							СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Должность, , ТекстОшибки);*/
						}
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Фамилия)*/)
						{
							/*ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);*/
							/*ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия",
							СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Фамилия, Истина, ТекстОшибки);*/
							/*ЗаполнитьСвойствоXDTO(ФИОТип, "Имя",
							СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Имя, Истина, ТекстОшибки);*/
							if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Отчество)*/)
							{
								/*ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество",
								СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Отчество, , ТекстОшибки);*/
							}
							/*ЗаполнитьСвойствоXDTO(ВыданаКем, "ФИО", ФИОТип, , ТекстОшибки);*/
						}
						/*ЗаполнитьСвойствоXDTO(Доверенность, "ВыданаКем", ВыданаКем, , ТекстОшибки);*/
					}
					if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Должность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Фамилия)*/)
					{
						/*ВыданаКому = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому", ПространствоИменСхемы);*/
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице)*/)
						{
							/*ЗаполнитьСвойствоXDTO(ВыданаКому, "ДопСведКому",
							СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице, , ТекстОшибки);*/
						}
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Должность)*/)
						{
							/*ЗаполнитьСвойствоXDTO(ВыданаКому, "Должн", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Должность, , ТекстОшибки);*/
						}
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Фамилия)*/)
						{
							/*ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);*/
							/*ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Фамилия, Истина, ТекстОшибки);*/
							/*ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Имя, Истина, ТекстОшибки);*/
							if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Отчество)*/)
							{
								/*ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Отчество, , ТекстОшибки);*/
							}
							/*ЗаполнитьСвойствоXDTO(ВыданаКому, "ФИО", ФИОТип, , ТекстОшибки);*/
						}
						/*ЗаполнитьСвойствоXDTO(Доверенность, "ВыданаКому", ВыданаКому, , ТекстОшибки);*/
					}
					/*ЗаполнитьСвойствоXDTO(ПолучилГруз, "Доверенность", Доверенность, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ГрузПринял.Должность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ГрузПринял.Фамилия)*/)
				{
					/*ГрузПринял = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);*/
					if(true/*ЗаполнитьДолжностноеЛицоФНСCML(ГрузПринял, СтруктураПараметров.ГрузПринял, ТекстОшибки, ПространствоИменСхемы)*/)
					{
						/*ЗаполнитьСвойствоXDTO(ПолучилГруз, "ГрузПринял", ГрузПринял, , ТекстОшибки);*/
					}
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ГрузПолучил.Должность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ГрузПолучил.Фамилия)*/)
				{
					/*ГрузПолучил = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);*/
					if(true/*ЗаполнитьДолжностноеЛицоФНСCML(ГрузПолучил, СтруктураПараметров.ГрузПолучил, ТекстОшибки, ПространствоИменСхемы)*/)
					{
						/*ЗаполнитьСвойствоXDTO(ПолучилГруз, "ГрузПолучил", ГрузПолучил, , ТекстОшибки);*/
					}
				}
				/*ЗаполнитьСвойствоXDTO(СвТНП, "ПолучилГруз", ПолучилГруз, , ТекстОшибки);*/
			}
			/*СтрокаИнфПол = "";*/
			/*ДопФайлСформирован = Ложь;*/
			if(true/*ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0*/)
			{
				/*// Сформируем xml-строку (ИнфПол):
*/
				if(true/*СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка")*/)
				{
					/*СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");*/
				}
				/*// Сформируем доп. файл:
*/
				/*ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);*/
			}
			if(true/*ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован*/)
			{
				/*ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвТНП.ИнфПол", ПространствоИменСхемы);*/
				if(true/*ЗначениеЗаполнено(СтрокаИнфПол)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);*/
				}
				if(true/*ДопФайлСформирован*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(СвТНП, "ИнфПол", ИнфПол, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Документ, "СвТНП", СвТНП, Истина, ТекстОшибки);*/
			/*СтПодписант = СтруктураПараметров.Подписант;*/
			/*Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);*/
			if(true/*ТипЗнч(СтПодписант.ЭтоФизЛицо) = Тип("Булево") И СтПодписант.ЭтоФизЛицо*/)
			{
				/*ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);*/
				/*ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтПодписант.Фамилия, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтПодписант.Имя, Истина, ТекстОшибки);*/
				if(true/*ЗначениеЗаполнено(СтПодписант.Отчество)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтПодписант.Отчество, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", СтПодписант.ИНН, Истина, ТекстОшибки);*/
				if(true/*ЗначениеЗаполнено(СтПодписант.СвидетельствоОРегистрацииИП)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", СтПодписант.СвидетельствоОРегистрацииИП, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);*/
			/*Файл.Проверить();*/
			/*ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"), ТекстОшибки, ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД Торг-12.
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьНакладнуюCML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ТаблицаТоваров = Новый ТаблицаЗначений;*/
			/*ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;*/
			/*Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ТОРГ12",СтруктураПараметров.ВерсияСхемы);*/
			/*// Коммерческая информация
*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер",СтруктураПараметров.Номер, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ОКУД", "0330212", Истина, ТекстОшибки);*/
			if(true/*СтруктураПараметров.Свойство("Валюта")*/)
			{
				/*Валюта = ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);*/
				/*КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ",СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);*/
			}
			/*Грузоотправитель = ПолучитьОбъектТипаCML("ТОРГ12.Грузоотправитель", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Грузоотправитель, СтруктураПараметров, СтруктураПараметров.ТипГрузоотправителя,
			ТекстОшибки, СтруктураПараметров.ВерсияСхемы, "Грузоотправитель");*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузоотправитель", Грузоотправитель, , ТекстОшибки);*/
			/*Грузополучатель = ПолучитьОбъектТипаCML("ТОРГ12.Грузополучатель", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Грузополучатель, СтруктураПараметров, "Контрагент", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы,"Грузополучатель");*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузополучатель", Грузополучатель, , ТекстОшибки);*/
			/*Организация = ПолучитьОбъектТипаCML("ТОРГ12.Поставщик", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Организация, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Организация, , ТекстОшибки);*/
			/*Контрагент = ПолучитьОбъектТипаCML("ТОРГ12.Плательщик", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Плательщик", Контрагент, , ТекстОшибки);*/
			if(true/*СтруктураПараметров.Свойство("НомерПоДаннымКлиента") И СтруктураПараметров.Свойство("ДатаПоДаннымКлиента")*/)
			{
				/*Основание = ПолучитьОбъектТипаCML("ТОРГ12.Основание", СтруктураПараметров.ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(Основание,"НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымКлиента, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Основание,"ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымКлиента, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Основание,"НаименованиеДокументаОснования", "Заказ поставщику", Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Основание", Основание, , ТекстОшибки);*/
			}
			/*ИтогоПоДокументу = ПолучитьОбъектТипаCML("ТОРГ12.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоЗаписей", ТаблицаТоваров.Количество(), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоМест", ТаблицаТоваров.Количество(), , ТекстОшибки);*/
			if(true/*СтруктураПараметров.ЦенаВключаетНДС*/)
			{
				/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНДС", ТаблицаТоваров.Итог("Сумма") - ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"СуммаНДС", ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу,"СуммаСУчетомНДС", ТаблицаТоваров.Итог("СуммаСНДС"), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, , ТекстОшибки);*/
			/*ИтогиПрописью = ПолучитьОбъектТипаCML("ТОРГ12.ИтогиПрописью", СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоЗаписейПрописью", ЧислоПрописью(ТаблицаТоваров.Количество(), , ",,,,,,,,0"), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоМестПрописью", ЧислоПрописью(ТаблицаТоваров.Количество(), , ",,,,,,,,0"), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогиПрописью, "СуммаВсегоПрописью",
			ЭлектронныеДокументыПереопределяемый.СуммаПрописью(ТаблицаТоваров.Итог("СуммаСНДС"), КодВалюты), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", ИтогиПрописью,, ТекстОшибки);*/
			if(true/*ТаблицаТоваров.Количество() > 0*/)
			{
				/*ПП = 0;*/
				/*Товары= ПолучитьОбъектТипаCML("ТОРГ12.Товары", СтруктураПараметров.ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары",Товары, , ТекстОшибки);*/
			}
			/*ДокументЭО.Проверить();*/
			/*ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД Счет на оплату.
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьСчетНаОплатуCML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("СчетНаОплату",СтруктураПараметров.ВерсияСхемы);*/
			/*// Коммерческая информация
*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);*/
			/*РеквизитыПолучателя = ПолучитьОбъектТипаCML("СчетНаОплату.РеквизитыПолучателя", СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "НомерСчета", СтруктураПараметров.РасчетныйСчет.НомерСчета, Истина, ТекстОшибки);*/
			/*// Банк
*/
			/*Банк =  ПолучитьОбъектТипаCML("Банк", СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(Банк, "СчетКорреспондентский", СтруктураПараметров.РасчетныйСчет.КоррСчет, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Банк, "Наименование", СтруктураПараметров.РасчетныйСчет.Банк, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Банк, "БИК", СтруктураПараметров.РасчетныйСчет.БИК, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "Банк", Банк, Истина, ТекстОшибки);*/
			/*// БанкКорреспондент
*/
			if(true/*СтруктураПараметров.Свойство("БанкКорреспондент")*/)
			{
				/*БанкКорреспондент =  ПолучитьОбъектТипаCML("Банк", СтруктураПараметров.ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(БанкКорреспондент, "СчетКорреспондентский", СтруктураПараметров.БанкКорреспондент.КоррСчет, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(БанкКорреспондент, "Наименование", СтруктураПараметров.БанкКорреспондент.Банк, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(БанкКорреспондент, "БИК", СтруктураПараметров.БанкКорреспондент.БИК, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(РеквизитыПолучателя, "БанкКорреспондент", БанкКорреспондент, Истина, ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "РеквизитыПолучателя", РеквизитыПолучателя, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "НазначениеПлатежа", СтруктураПараметров.НазначениеПлатежа, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаОкончанияДействияСчета", СтруктураПараметров.СрокПлатежа, Истина, ТекстОшибки);*/
			/*Поставщик = ПолучитьОбъектТипаCML("СчетНаОплату.Поставщик", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Поставщик, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Поставщик, , ТекстОшибки);*/
			/*Покупатель = ПолучитьОбъектТипаCML("СчетНаОплату.Покупатель", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Покупатель, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Покупатель", Покупатель, , ТекстОшибки);*/
			/*ИтогоПоДокументу = ПолучитьОбъектТипаCML("СчетНаОплату.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаИтог", СтруктураПараметров.Сумма, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНалогаИтог", СтруктураПараметров.СуммаНДС, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "ЦенаВключаетНалог", СтруктураПараметров.ЦенаВключаетНДС, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, , ТекстОшибки);*/
			/*Руководитель = ПолучитьОбъектТипаCML("РеквизитыФизЛица", СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(Руководитель, "ПолноеНаименование", 
			ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(СтруктураПараметров.Руководитель), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Руководитель", Руководитель, Истина, ТекстОшибки);*/
			/*Бухгалтер = ПолучитьОбъектТипаCML("РеквизитыФизЛица", СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(Бухгалтер, "ПолноеНаименование",
			ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(СтруктураПараметров.Бухгалтер), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Бухгалтер", Бухгалтер, Истина, ТекстОшибки);*/
			if(true/*СтруктураПараметров.Свойство("НомерПоДаннымКлиента")
			И СтруктураПараметров.Свойство("ДатаПоДаннымКлиента")
			И ЗначениеЗаполнено(СтруктураПараметров.НомерПоДаннымКлиента)
			И ЗначениеЗаполнено(СтруктураПараметров.ДатаПоДаннымКлиента)*/)
			{
				/*ДокументОснования = ПолучитьОбъектТипаCML("ДокументОснования", СтруктураПараметров.ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ДокументОснования, "НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымКлиента, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ДокументОснования, "ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымКлиента, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ДокументОснования, "НаименованиеДокументаОснования", СтруктураПараметров.ДокументОснование, Истина, ТекстОшибки);*/
				/*ДокументЭО.ДокументОснования.Добавить(ДокументОснования);*/
			}
			if(true/*СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта)*/)
			{
				/*Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);*/
				/*КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);*/
			}
			if(true/*СтруктураПараметров.Свойство("ЧастичнаяОплата")*/)
			{
				/*ЧастичнаяОплата = СтруктураПараметров.ЧастичнаяОплата;*/
			}
			/*ТаблицаТоваров = Новый ТаблицаЗначений;*/
			if(true/*СтруктураПараметров.Свойство("ТаблицаТоваров")*/)
			{
				/*ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;*/
			}
			if(true/*НЕ ЧастичнаяОплата*/)
			{
				if(true/*ТаблицаТоваров.Количество() > 0*/)
				{
					/*Товары = ПолучитьОбъектТипаCML("СчетНаОплату.Товары", СтруктураПараметров.ВерсияСхемы);*/
					/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);*/
				}
			}
			if(true/*СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты")*/)
			{
				/*ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты;*/
				if(true/*ТаблицаЭтаповГрафикаОплаты.Количество() > 0*/)
				{
					/*МассивКолонок = Новый Массив();*/
				}
			}
			/*ДокументЭО.Проверить();*/
			/*ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД Отчет о списании комиссионного товара.
		//
		// Параметры:
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьОтчетОСписанииКомиссионногоТовараCML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ТаблицаТоваров = Новый ТаблицаЗначений;*/
			/*ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;*/
			/*Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара", СтруктураПараметров.ВерсияСхемы);*/
			/*// Коммерческая информация
*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);*/
			/*Комитент = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Комитент", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Комитент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Комитент", Комитент, , ТекстОшибки);*/
			/*Комиссионер = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Комиссионер", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Комиссионер, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Комиссионер", Комиссионер, , ТекстОшибки);*/
			if(true/*ТаблицаТоваров.Количество() > 0*/)
			{
				/*Товары = ПолучитьОбъектТипаCML("ОтчетОСписанииКомиссионногоТовара.Товары", СтруктураПараметров.ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", СтруктураПараметров.Сумма, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтоговаяСтрока, Истина, ТекстОшибки);*/
			if(true/*СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта)*/)
			{
				/*Валюта = ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);*/
				/*КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, ,  ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);*/
			}
			/*ДокументЭО.Проверить();*/
			/*ВыгрузитьЭДВФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД Заказ поставщику.
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьЗаказCML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ТаблицаТоваров = Новый ТаблицаЗначений;*/
			/*ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;*/
			/*Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ЗаказКлиента",СтруктураПараметров.ВерсияСхемы);*/
			/*// Коммерческая информация
*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Роль", СтруктураПараметров.Роль, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);*/
			/*Исполнитель = ПолучитьОбъектТипаCML("ЗаказКлиента.Исполнитель", СтруктураПараметров.ВерсияСхемы);*/
			if(true/*СтруктураПараметров.Роль = "Покупатель"*/)
			{
				/*СформироватьДанныеПоКонтрагентуCML(Исполнитель, СтруктураПараметров, "Контрагент", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);*/
			}
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Исполнитель", Исполнитель, , ТекстОшибки);*/
			/*Заказчик = ПолучитьОбъектТипаCML("ЗаказКлиента.Заказчик", СтруктураПараметров.ВерсияСхемы);*/
			if(true/*СтруктураПараметров.Роль = "Покупатель"*/)
			{
				/*СформироватьДанныеПоКонтрагентуCML(Заказчик, СтруктураПараметров, "Организация", ТекстОшибки,
				СтруктураПараметров.ВерсияСхемы);*/
			}
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Заказчик", Заказчик, , ТекстОшибки);*/
			if(true/*ТаблицаТоваров.Количество() > 0*/)
			{
				/*Товары = ПолучитьОбъектТипаCML("ЗаказКлиента.Товары", СтруктураПараметров.ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);*/
			}
			/*ИтогоПоДокументу = ПолучитьОбъектТипаCML("ЗаказКлиента.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаИтог", СтруктураПараметров.Сумма, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНалогаИтог", СтруктураПараметров.СуммаНДС, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезСкидкиИтог", ТаблицаТоваров.Итог("Сумма")
			- ТаблицаТоваров.Итог("СуммаСкидки"), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаСкидкиИтог", ТаблицаТоваров.Итог("СуммаСкидки"), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "ЦенаВключаетНалог", СтруктураПараметров.ЦенаВключаетНДС, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, , ТекстОшибки);*/
			if(true/*СтруктураПараметров.Свойство("НомерПоДаннымКлиента")
			И ЗначениеЗаполнено (СтруктураПараметров.НомерПоДаннымКлиента)*/)
			{
				/*ДокументОснование = ПолучитьОбъектТипаCML("ДокументОснования", СтруктураПараметров.ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ДокументОснование, "НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымКлиента);*/
				/*ЗаполнитьСвойствоXDTO(ДокументОснование, "ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымКлиента);*/
				/*ЗаполнитьСвойствоXDTO(ДокументОснование, "НаименованиеДокументаОснования", "По данным клиента");*/
				/*ДокументЭО.ДокументОснования.Добавить(ДокументОснование);*/
			}
			if(true/*СтруктураПараметров.Свойство("НомерПоДаннымПоставщика")
			И ЗначениеЗаполнено (СтруктураПараметров.НомерПоДаннымПоставщика)*/)
			{
				/*ДокументОснование = ПолучитьОбъектТипаCML("ДокументОснования",СтруктураПараметров.ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ДокументОснование, "НомерДокументаОснования", СтруктураПараметров.НомерПоДаннымПоставщика);*/
				/*ЗаполнитьСвойствоXDTO(ДокументОснование, "ДатаДокументаОснования", СтруктураПараметров.ДатаПоДаннымПоставщика);*/
				/*ЗаполнитьСвойствоXDTO(ДокументОснование, "НаименованиеДокументаОснования", "По данным поставщика");*/
				/*ДокументЭО.ДокументОснования.Добавить(ДокументОснование);*/
			}
			if(true/*СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта)*/)
			{
				/*Валюта =  ПолучитьОбъектТипаCML("Валюта", СтруктураПараметров.ВерсияСхемы);*/
				/*КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);*/
			}
			/*// Этапы графика оплаты.
*/
			if(true/*СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты")*/)
			{
				/*ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты;*/
				if(true/*ТаблицаЭтаповГрафикаОплаты.Количество()>0*/)
				{
					/*МассивКолонок = Новый Массив();*/
				}
			}
			if(true/*СтруктураПараметров.Свойство("Комментарий") И ЗначениеЗаполнено(СтруктураПараметров.Комментарий)*/)
			{
				/*ЗаполнитьСвойствоXDTO(ДокументЭО,"Комментарий", СтруктураПараметров.Комментарий, , ТекстОшибки);*/
			}
			/*ДокументЭО.Проверить();*/
			/*ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД Отчет о продажах комиссионного товара.
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьОтчетОПродажахКомиссионногоТовараCML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ТаблицаТоваров = Новый ТаблицаЗначений;*/
			/*ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;*/
			/*Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара",СтруктураПараметров.ВерсияСхемы);*/
			/*// Коммерческая информация
*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);*/
			/*Комитент = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Комитент", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Комитент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Комитент", Комитент, , ТекстОшибки);*/
			/*Комиссионер = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Комиссионер", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Комиссионер, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Комиссионер", Комиссионер, , ТекстОшибки);*/
			if(true/*ТаблицаТоваров.Количество()>0*/)
			{
				/*Товары = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Товары", СтруктураПараметров.ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);*/
			}
			/*ИтогоПоДокументу = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.ИтогоПоДокументу",
			СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаКомитентаИтог", ТаблицаТоваров.Итог("СуммаСНДС"), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаПродажиИтог", ТаблицаТоваров.Итог("СуммаПродажи"), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаВознагражденияИтог", ТаблицаТоваров.Итог("СуммаВознаграждения"), , ТекстОшибки);*/
			if(true/*СтруктураПараметров.Свойство("Процент") И ЗначениеЗаполнено (СтруктураПараметров.Процент)*/)
			{
				/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "Процент", СтруктураПараметров.Процент, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтоговаяСтрока, Истина, ТекстОшибки);*/
			if(true/*СтруктураПараметров.Свойство("Услуга") И ЗначениеЗаполнено (СтруктураПараметров.Услуга)*/)
			{
				/*Услуга = ПолучитьОбъектТипаCML("ОтчетОПродажахКомиссионногоТовара.Услуга", СтруктураПараметров.ВерсияСхемы);*/
				/*СформироватьДанныеПоТоваруCML(Услуга, СтруктураПараметров.Услуга, ТекстОшибки, СтруктураПараметров.ВерсияСхемы);*/
				if(true/*СтруктураПараметров.Свойство("СуммаНДСВознаграждения")
				И СтруктураПараметров.Свойство("СтавкаНДСВознаграждения")*/)
				{
					/*НалогПоСтроке = ПолучитьОбъектТипаCML("Налог",СтруктураПараметров.ВерсияСхемы);*/
					/*ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ТипНалога","НДС", Истина, ТекстОшибки);*/
					/*ЗаполнитьСвойствоXDTO(НалогПоСтроке, "Сумма", СтруктураПараметров.СуммаНДСВознаграждения, , ТекстОшибки);*/
					/*СтавкаНДСЧислом = ЭлектронныеДокументыПереопределяемый.ПолучитьСтавкуНДСЧислом(СтруктураПараметров.СтавкаНДСВознаграждения);*/
					/*ЗаполнитьСвойствоXDTO(НалогПоСтроке, "ВеличинаСтавкиНалога", СтавкаНДСЧислом, , ТекстОшибки);*/
					/*ЗаполнитьСвойствоXDTO(Услуга, "Налог", НалогПоСтроке, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Услуга", Услуга, , ТекстОшибки);*/
			}
			if(true/*СтруктураПараметров.Свойство("НачалоПериода")*/)
			{
				/*ЗаполнитьСвойствоXDTO(ДокументЭО,"ДатаНачала", СтруктураПараметров.НачалоПериода, , ТекстОшибки);*/
			}
			if(true/*СтруктураПараметров.Свойство("КонецПериода")*/)
			{
				/*ЗаполнитьСвойствоXDTO(ДокументЭО,"ДатаКонца", СтруктураПараметров.КонецПериода, , ТекстОшибки);*/
			}
			if(true/*СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта)*/)
			{
				/*Валюта = ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);*/
				/*КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);*/
			}
			if(true/*СтруктураПараметров.Свойство("ФормаОплаты") И ЗначениеЗаполнено (СтруктураПараметров.ФормаОплаты)*/)
			{
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ФормаОплаты", СтруктураПараметров.ФормаОплаты,,ТекстОшибки);*/
			}
			/*// Этапы графика оплаты.
*/
			if(true/*СтруктураПараметров.Свойство("ТаблицаЭтаповГрафикаОплаты")*/)
			{
				/*ТаблицаЭтаповГрафикаОплаты = СтруктураПараметров.ТаблицаЭтаповГрафикаОплаты;*/
				if(true/*ТаблицаЭтаповГрафикаОплаты.Количество() > 0*/)
				{
					/*МассивКолонок = Новый Массив();*/
				}
			}
			if(true/*СтруктураПараметров.Свойство("СпособРасчета") И ЗначениеЗаполнено (СтруктураПараметров.СпособРасчета)*/)
			{
				if(true/*СтруктураПараметров.СпособРасчета = "Процент от разности суммы продажи и суммы комитента"*/)
				{
					/*ЗаполнитьСвойствоXDTO(ДокументЭО, "СпособРасчета", "От разницы",,ТекстОшибки);*/
				}
			}
			if(true/*СтруктураПараметров.Свойство("ДатаОплаты") И ЗначениеЗаполнено (СтруктураПараметров.ДатаОплаты)*/)
			{
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаОплаты", СтруктураПараметров.ДатаОплаты, , ТекстОшибки);*/
			}
			/*ДокументЭО.Проверить();*/
			/*ВыгрузитьЭДВФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД Акта выполненных работ.
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьАктCML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ТаблицаТоваров = Новый ТаблицаЗначений;*/
			/*ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;*/
			/*Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("АктОПриемке",СтруктураПараметров.ВерсияСхемы);*/
			/*// Коммерческая информация
*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);*/
			if(true/*СтруктураПараметров.Свойство("Валюта")*/)
			{
				/*КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);*/
			}
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);*/
			/*Валюта =  ПолучитьОбъектТипаCML("Валюта", СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);*/
			/*// Организация
*/
			/*Контрагент =  ПолучитьОбъектТипаCML("АктОПриемке.Исполнитель", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Организация", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Исполнитель", Контрагент, , ТекстОшибки);*/
			/*// Контрагент
*/
			/*Контрагент =  ПолучитьОбъектТипаCML("АктОПриемке.Заказчик", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки, СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Заказчик", Контрагент, , ТекстОшибки);*/
			/*ИтогоПоДокументу = ПолучитьОбъектТипаCML("АктОПриемке.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаОбщая", СтруктураПараметров.Сумма, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНалога", СтруктураПараметров.СуммаНДС, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНалога", СтруктураПараметров.Сумма - СтруктураПараметров.СуммаНДС, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "ЦенаВключаетНалог", СтруктураПараметров.ЦенаВключаетНДС, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, , ТекстОшибки);*/
			if(true/*ТаблицаТоваров.Количество() > 0*/)
			{
				/*Товары = ПолучитьОбъектТипаCML("АктОПриемке.Товары", СтруктураПараметров.ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);*/
			}
			/*ТекстДокумента = ПолучитьОбъектТипаCML("АктОПриемке.ТекстДокумента", СтруктураПараметров.ВерсияСхемы);*/
			/*Заголовок = СтруктураПараметров.ДополнительнаяИнформацияШапки + Символы.ПС +
		"Мы, нижеподписавшиеся,  представитель ИСПОЛНИТЕЛЯ, с одной стороны и  представитель ЗАКАЗЧИКА с другой стороны,
		|составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги):";*/
			/*ЗаполнитьСвойствоXDTO(ТекстДокумента, "Заголовок", XMLСтрока(Заголовок), , ТекстОшибки);*/
			/*Описание =  СтруктураПараметров.ДополнительнаяИнформация;*/
			/*ЗаполнитьСвойствоXDTO(ТекстДокумента, "ОписаниеВыполненныхРабот", Описание, , ТекстОшибки);*/
			/*Претензии = "Вышеперечисленные работы(услуги) выполнены полностью и в срок. Заказчик претензий по объему,
		|качеству и срокам работ (услуг) не имеет.";*/
			/*ЗаполнитьСвойствоXDTO(ТекстДокумента, "Претензии", Претензии, ,ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ТекстДокумента", ТекстДокумента, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", СтруктураПараметров.ИтогиПрописью, , ТекстОшибки);*/
			/*ДокументЭО.Проверить();*/
			/*ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД Счет-фактура.
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьАкт501CML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ПространствоИменСхемы = "IAKTPRM";*/
			/*Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);*/
			/*ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);*/
			/*// Коммерческая информация
*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);*/
			if(true/*ЗначениеЗаполнено(СтруктураПараметров.ВерсПрог)*/)
			{
				/*ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);*/
			/*СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);*/
			/*КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);*/
			/*Массив = Новый Массив;*/
			/*Массив.Добавить(Тип("Строка"));*/
			/*ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок), Истина, ТекстОшибки);*/
			if(true/*ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО)*/)
			{
				/*СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);*/
			/*Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);*/
			/*СвАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(СвАктИ, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);*/
			if(true/*ЗначениеЗаполнено(СтруктураПараметров.НомерАкта)*/)
			{
				/*ЗаполнитьСвойствоXDTO(СвАктИ, "НомАкт", СтруктураПараметров.НомерАкта, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(СвАктИ, "ДатаАкт", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаАкта), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвАктИ, "Заголовок", СтруктураПараметров.Заголовок, Истина, ТекстОшибки);*/
			/*Исполнитель = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);*/
			if(true/*ЗаполнитьДанныеУчастникаФНСCML(Исполнитель, СтруктураПараметров.Исполнитель, ТекстОшибки, ПространствоИменСхемы)*/)
			{
				/*ЗаполнитьСвойствоXDTO(СвАктИ, "Исполнитель", Исполнитель, Истина, ТекстОшибки);*/
			}
			/*Заказчик = ПолучитьОбъектТипаCML("УчастникТип", ПространствоИменСхемы);*/
			if(true/*ЗаполнитьДанныеУчастникаФНСCML(Заказчик, СтруктураПараметров.Заказчик, ТекстОшибки, ПространствоИменСхемы)*/)
			{
				/*ЗаполнитьСвойствоXDTO(СвАктИ, "Заказчик", Заказчик, Истина, ТекстОшибки);*/
			}
			/*ТЗОписанийУслуг = СтруктураПараметров.ТаблицаОписанийУслуг;*/
			/*СдалЗаполнено = Ложь;*/
			/*ДоверенностьЗаполнена = Ложь;*/
			/*СведПоУслугам = СтруктураПараметров.СведенияПоВыполнениюУслуг;*/
			/*Сдал = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал", ПространствоИменСхемы);*/
			if(true/*ЗначениеЗаполнено(СведПоУслугам.ДатаИсполнения)*/)
			{
				/*ЗаполнитьСвойствоXDTO(Сдал, "ДатаИсполн", ДатаДД_ММ_ГГГГ(СтруктураПараметров.СведенияПоВыполнениюУслуг.ДатаИсполнения), , ТекстОшибки);*/
				/*СдалЗаполнено = Истина;*/
			}
			/*ПодписьИсполн = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);*/
			if(true/*ЗаполнитьДолжностноеЛицоФНСCML(ПодписьИсполн, СтруктураПараметров.СведенияПоВыполнениюУслуг.ПодписьИсполнителя,
			ТекстОшибки, ПространствоИменСхемы)*/)
			{
				/*ЗаполнитьСвойствоXDTO(Сдал, "ПодписьИсполн", ПодписьИсполн, , ТекстОшибки);*/
				/*СдалЗаполнено = Истина;*/
			}
			/*НомДоверен = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.НомерДоверенности;*/
			/*ДатаДоверен = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.ДатаДоверенности;*/
			/*НаимОргКем = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КемДоверенностьВыдана.НаименованиеОрганизации;*/
			/*ДопСведКем = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КемДоверенностьВыдана.ДопСведенияОВыдачеДоверенности;*/
			/*ДолжнКем = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КемДоверенностьВыдана.Должность;*/
			/*ФамилияКем = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КемДоверенностьВыдана.Фамилия;*/
			/*ИмяКем = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КемДоверенностьВыдана.Имя;*/
			/*ОтчествоКем = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КемДоверенностьВыдана.Отчество;*/
			/*ДоверенИсполн = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ДоверенИсполн", ПространствоИменСхемы);*/
			if(true/*ЗначениеЗаполнено(НаимОргКем) ИЛИ ЗначениеЗаполнено(ДопСведКем) ИЛИ ЗначениеЗаполнено(ФамилияКем)
			ИЛИ ЗначениеЗаполнено(НомДоверен) ИЛИ ЗначениеЗаполнено(ДатаДоверен)*/)
			{
				if(true/*ЗначениеЗаполнено(НомДоверен)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ДоверенИсполн, "НомДоверен", НомДоверен, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(ДатаДоверен)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ДоверенИсполн, "ДатаДоверен", ДатаДД_ММ_ГГГГ(ДатаДоверен), , ТекстОшибки);*/
				}
				/*ВыданаКем = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКем", ПространствоИменСхемы);*/
				if(true/*ЗначениеЗаполнено(НаимОргКем)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ВыданаКем, "НаимОргКем", НаимОргКем, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(ДопСведКем)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ВыданаКем, "ДопСведКем", ДопСведКем, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(ДолжнКем)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ВыданаКем, "ДолжнКем", ДолжнКем, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(ФамилияКем)*/)
				{
					/*ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);*/
					/*ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", ФамилияКем, Истина, ТекстОшибки);*/
					/*ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", ИмяКем, Истина, ТекстОшибки);*/
					if(true/*ЗначениеЗаполнено(ОтчествоКем)*/)
					{
						/*ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", ОтчествоКем, , ТекстОшибки);*/
					}
					/*ЗаполнитьСвойствоXDTO(ВыданаКем, "ФИО", ФИОТип, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(ДоверенИсполн, "ВыданаКем", ВыданаКем, , ТекстОшибки);*/
				/*ДоверенностьЗаполнена = Истина;*/
			}
			/*ДопСведКому = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КомуДоверенностьВыдана.ДопСведенияОДоверенномЛице;*/
			/*ДолжнКому = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КомуДоверенностьВыдана.Должность;*/
			/*ФамилияКому = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КомуДоверенностьВыдана.Фамилия;*/
			/*ИмяКому = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КомуДоверенностьВыдана.Имя;*/
			/*ОтчествоКому = СтруктураПараметров.СведенияПоВыполнениюУслуг.ДоверенностьИсполнителя.КомуДоверенностьВыдана.Отчество;*/
			if(true/*ЗначениеЗаполнено(ДопСведКому) ИЛИ ЗначениеЗаполнено(ДолжнКому) ИЛИ ЗначениеЗаполнено(ФамилияКому)*/)
			{
				/*ВыданаКому = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Сдал.ДоверенИсполн.ВыданаКому", ПространствоИменСхемы);*/
				if(true/*ЗначениеЗаполнено(ДопСведКому)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ВыданаКому, "ДопСведКому", ДопСведКому, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(ДолжнКому)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ВыданаКому, "Должн", ДолжнКому, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(ФамилияКому)*/)
				{
					/*ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);*/
					/*ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", ФамилияКому, Истина, ТекстОшибки);*/
					/*ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", ИмяКому, Истина, ТекстОшибки);*/
					if(true/*ЗначениеЗаполнено(ОтчествоКому)*/)
					{
						/*ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", ОтчествоКому, , ТекстОшибки);*/
					}
					/*ЗаполнитьСвойствоXDTO(ВыданаКому, "ФИО", ФИОТип, Истина, ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(ДоверенИсполн, "ВыданаКому", ВыданаКому, , ТекстОшибки);*/
				/*ДоверенностьЗаполнена = Истина;*/
			}
			if(true/*ДоверенностьЗаполнена*/)
			{
				/*ЗаполнитьСвойствоXDTO(Сдал, "ДоверенИсполн", ДоверенИсполн, , ТекстОшибки);*/
				/*СдалЗаполнено = Истина;*/
			}
			if(true/*СдалЗаполнено*/)
			{
				/*ЗаполнитьСвойствоXDTO(СвАктИ, "Сдал", Сдал, , ТекстОшибки);*/
			}
			/*СтрокаИнфПол = "";*/
			/*ДопФайлСформирован = Ложь;*/
			if(true/*ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0*/)
			{
				/*// Сформируем xml-строку (ИнфПол):
*/
				if(true/*СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка")*/)
				{
					/*СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");*/
				}
				/*// Сформируем доп. файл:
*/
				/*ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);*/
			}
			if(true/*ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован*/)
			{
				/*ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИнфПол", ПространствоИменСхемы);*/
				if(true/*ЗначениеЗаполнено(СтрокаИнфПол)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);*/
				}
				if(true/*ДопФайлСформирован*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(СвАктИ, "ИнфПол", ИнфПол, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Документ, "СвАктИ", СвАктИ, Истина, ТекстОшибки);*/
			/*// Заполним часть схемы Подписант.
*/
			/*СтПодписант = СтруктураПараметров.Подписант;*/
			/*Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);*/
			if(true/*ТипЗнч(СтПодписант.ЭтоФизЛицо) = Тип("Булево") И СтПодписант.ЭтоФизЛицо*/)
			{
				/*ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);*/
				/*ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтПодписант.Фамилия, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтПодписант.Имя, Истина, ТекстОшибки);*/
				if(true/*ЗначениеЗаполнено(СтПодписант.Отчество)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтПодписант.Отчество, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", СтПодписант.ИНН, Истина, ТекстОшибки);*/
				if(true/*ЗначениеЗаполнено(СтПодписант.СвидетельствоОРегистрацииИП)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", СтПодписант.СвидетельствоОРегистрацииИП, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);*/
			/*Файл.Проверить();*/
			/*ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД.'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД Счет-фактура.
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьАкт501ЗаказчикCML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ПространствоИменСхемы = "ZAKTPRM";*/
			/*Попытка
		Файл = ПолучитьОбъектТипаCML("Файл", ПространствоИменСхемы);*/
			/*ФайлНаДиске = Новый Файл(СтруктураПараметров.ПолноеИмяФайла);*/
			/*// Коммерческая информация
*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ИдФайл", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ВерсПрог", СтруктураПараметров.ВерсПрог, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "ВерсФорм", СтруктураПараметров.ВерсФорм, Истина, ТекстОшибки);*/
			/*СвУчДокОбор = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор", ПространствоИменСхемы);*/
			/*КС = Новый КвалификаторыСтроки(46, ДопустимаяДлина.Фиксированная);*/
			/*Массив = Новый Массив;*/
			/*Массив.Добавить(Тип("Строка"));*/
			/*ОписаниеТиповСтрока43 = Новый ОписаниеТипов(Массив, , КС);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдОтпр", ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдОтпр),
			Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "ИдПок",  ОписаниеТиповСтрока43.ПривестиЗначение(СтруктураПараметров.ИдПок),
			Истина, ТекстОшибки);*/
			if(true/*ЗначениеЗаполнено(СтруктураПараметров.ИдЭДО)*/)
			{
				/*СвОЭДОтпр = ПолучитьОбъектТипаCML("Файл.СвУчДокОбор.СвОЭДОтпр", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "НаимОрг", СтруктураПараметров.НаимОрг, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИННЮЛ", СтруктураПараметров.ИННЮЛ, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвОЭДОтпр, "ИдЭДО", СтруктураПараметров.ИдЭДО, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвУчДокОбор, "СвОЭДОтпр",СвОЭДОтпр, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Файл, "СвУчДокОбор", СвУчДокОбор, Истина, ТекстОшибки);*/
			/*Документ = ПолучитьОбъектТипаCML("Файл.Документ", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "КНД", СтруктураПараметров.КНД, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "ДатаДок", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДок), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Документ, "ВремДок", СтруктураПараметров.ВремДок, Истина, ТекстОшибки);*/
			/*СведенияАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(СведенияАктИ, "НаимПервДок", СтруктураПараметров.НаимПервДок, Истина, ТекстОшибки);*/
			/*ИдАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИдАктИ", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ИдАктИ, "ИдФайлАктИ", СтруктураПараметров.ИдФайлАкт, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИдАктИ, "ДатаДокАктИ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаДокАкт), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИдАктИ, "ВремДокАктИ", СтруктураПараметров.ВремДокАкт, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СведенияАктИ, "ИдАктИ", ИдАктИ, Истина, ТекстОшибки);*/
			/*СвАктИ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.СвАктИ", ПространствоИменСхемы);*/
			/*ЗаполнитьСвойствоXDTO(СвАктИ, "НомАкт", СтруктураПараметров.НомерАкта, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СвАктИ, "ДатаАкт", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаАкта), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(СведенияАктИ, "СвАктИ", СвАктИ, Истина, ТекстОшибки);*/
			/*// Заполним свойства принимающей стороны Принял
*/
			if(true/*ЗначениеЗаполнено(СтруктураПараметров.ДатаЗаказа)*/)
			{
				/*Принял = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял", ПространствоИменСхемы);*/
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.ДатаЗаказа)*/)
				{
					/*ЗаполнитьСвойствоXDTO(Принял, "ДатаЗаказ", ДатаДД_ММ_ГГГГ(СтруктураПараметров.ДатаЗаказа), , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.Претензия)*/)
				{
					/*ЗаполнитьСвойствоXDTO(Принял, "Претенз", СтруктураПараметров.Претензия, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.НомерДоверенности)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДатаДоверенности)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности)
				ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице)*/)
				{
					/*ДоверенЗаказ = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ДоверенЗаказ", ПространствоИменСхемы);*/
					if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.НомерДоверенности)*/)
					{
						/*ЗаполнитьСвойствоXDTO(ДоверенЗаказ, "НомДоверен",
						СтруктураПараметров.Доверенность.НомерДоверенности, , ТекстОшибки);*/
					}
					if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДатаДоверенности)*/)
					{
						/*ЗаполнитьСвойствоXDTO(ДоверенЗаказ, "ДатаДоверен",
						ДатаДД_ММ_ГГГГ(СтруктураПараметров.Доверенность.ДатаДоверенности), , ТекстОшибки);*/
					}
					if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Должность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Фамилия)*/)
					{
						/*ВыданаКем = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем", ПространствоИменСхемы);*/
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность)*/)
						{
							/*ЗаполнитьСвойствоXDTO(ВыданаКем, "НаимОргКем",
							СтруктураПараметров.Доверенность.ОрганизацияВыдавшаяДоверенность, , ТекстОшибки);*/
						}
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности)*/)
						{
							/*ЗаполнитьСвойствоXDTO(ВыданаКем, "ДопСведКем",
							СтруктураПараметров.Доверенность.ДопСведенияОВыдачеДоверенности, , ТекстОшибки);*/
						}
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Должность)*/)
						{
							/*ЗаполнитьСвойствоXDTO(ВыданаКем, "ДолжнКем",
							СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Должность, , ТекстОшибки);*/
						}
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Фамилия)*/)
						{
							/*ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);*/
							/*ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия",
							СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Фамилия, Истина, ТекстОшибки);*/
							/*ЗаполнитьСвойствоXDTO(ФИОТип, "Имя",
							СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Имя, Истина, ТекстОшибки);*/
							if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Отчество)*/)
							{
								/*ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество",
								СтруктураПараметров.Доверенность.ЛицоВыдавшееДоверенность.Отчество, , ТекстОшибки);*/
							}
							/*ЗаполнитьСвойствоXDTO(ВыданаКем, "ФИО", ФИОТип, , ТекстОшибки);*/
						}
						/*ЗаполнитьСвойствоXDTO(ДоверенЗаказ, "ВыданаКем", ВыданаКем, , ТекстОшибки);*/
					}
					if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Должность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Фамилия)*/)
					{
						/*ВыданаКому = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому", ПространствоИменСхемы);*/
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице)*/)
						{
							/*ЗаполнитьСвойствоXDTO(ВыданаКому, "ДопСведКому",
							СтруктураПараметров.Доверенность.ДопСведенияОДоверенномЛице, , ТекстОшибки);*/
						}
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Должность)*/)
						{
							/*ЗаполнитьСвойствоXDTO(ВыданаКому, "Должн", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Должность, , ТекстОшибки);*/
						}
						if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Фамилия)*/)
						{
							/*ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);*/
							/*ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Фамилия, Истина, ТекстОшибки);*/
							/*ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Имя, Истина, ТекстОшибки);*/
							if(true/*ЗначениеЗаполнено(СтруктураПараметров.Доверенность.ДоверенноеЛицо.Отчество)*/)
							{
								/*ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", СтруктураПараметров.Доверенность.ДоверенноеЛицо.Отчество, , ТекстОшибки);*/
							}
							/*ЗаполнитьСвойствоXDTO(ВыданаКому, "ФИО", ФИОТип, , ТекстОшибки);*/
						}
						/*ЗаполнитьСвойствоXDTO(ДоверенЗаказ, "ВыданаКому", ВыданаКому, , ТекстОшибки);*/
					}
					/*ЗаполнитьСвойствоXDTO(Принял, "ДоверенЗаказ", ДоверенЗаказ, , ТекстОшибки);*/
					if(true/*ЗначениеЗаполнено(СтруктураПараметров.ПодписьЗаказ.Должность)
					ИЛИ ЗначениеЗаполнено(СтруктураПараметров.ПодписьЗаказ.Фамилия)*/)
					{
						/*ПодписьЗаказ = ПолучитьОбъектТипаCML("ДолжЛицоТип", ПространствоИменСхемы);*/
						if(true/*ЗаполнитьДолжностноеЛицоФНСCML(ПодписьЗаказ, СтруктураПараметров.ПодписьЗаказ, ТекстОшибки, ПространствоИменСхемы)*/)
						{
							/*ЗаполнитьСвойствоXDTO(Принял, "ПодписьЗаказ", ПодписьЗаказ, , ТекстОшибки);*/
						}
					}
				}
				/*ЗаполнитьСвойствоXDTO(СведенияАктИ, "Принял", Принял, , ТекстОшибки);*/
			}
			/*// Заполним текстовые дополнительные свойства ИнфПол
*/
			/*СтрокаИнфПол = "";*/
			/*ДопФайлСформирован = Ложь;*/
			if(true/*ТипЗнч(СтруктураПараметров.ДеревоДопДанных) = Тип("ДеревоЗначений")
			И СтруктураПараметров.ДеревоДопДанных.Строки.Количество() > 0*/)
			{
				/*// Сформируем xml-строку (ИнфПол):
*/
				if(true/*СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Истина, "Шапка")*/)
				{
					/*СтрокаИнфПол = СтрЗаменить(СтруктураПараметров.ИнфПол, "	", "");*/
				}
				/*// Сформируем доп. файл:
*/
				/*ДопФайлСформирован = СформироватьУниверсальныйДопФайлCML(СтруктураПараметров, ТекстОшибки, Ложь);*/
			}
			if(true/*ЗначениеЗаполнено(СтрокаИнфПол) ИЛИ ДопФайлСформирован*/)
			{
				/*ИнфПол = ПолучитьОбъектТипаCML("Файл.Документ.СвАктИ.ИнфПол", ПространствоИменСхемы);*/
				if(true/*ЗначениеЗаполнено(СтрокаИнфПол)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИнфПол, "ТекстИнф", СтрокаИнфПол, , ТекстОшибки);*/
				}
				if(true/*ДопФайлСформирован*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИнфПол, "ИдФайлИнфПол", Строка(СтруктураПараметров.ИдентификаторДопФайла), , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(СвАктИ, "ИнфПол", ИнфПол, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Документ, "СвАктИ", СведенияАктИ, Истина, ТекстОшибки);*/
			/*СтПодписант = СтруктураПараметров.Подписант;*/
			/*Подписант = ПолучитьОбъектТипаCML("Файл.Документ.Подписант", ПространствоИменСхемы);*/
			if(true/*ТипЗнч(СтПодписант.ЭтоФизЛицо) = Тип("Булево") И СтПодписант.ЭтоФизЛицо*/)
			{
				/*ИП = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП", ПространствоИменСхемы);*/
				/*ФИО = ПолучитьОбъектТипаCML("Файл.Документ.Подписант.ИП.ФИО", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтПодписант.Фамилия, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтПодписант.Имя, Истина, ТекстОшибки);*/
				if(true/*ЗначениеЗаполнено(СтПодписант.Отчество)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтПодписант.Отчество, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(ИП, "ФИО", ФИО, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ИП, "ИННФЛ", СтПодписант.ИНН, Истина, ТекстОшибки);*/
				if(true/*ЗначениеЗаполнено(СтПодписант.СвидетельствоОРегистрацииИП)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ИП, "СвГосРегИП", СтПодписант.СвидетельствоОРегистрацииИП, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(Подписант, "ИП", ИП, Истина, ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Документ, "Подписант", Подписант, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Файл, "Документ", Документ, Истина, ТекстОшибки);*/
			/*Файл.Проверить();*/
			/*ВыгрузитьЭДвФайл(Файл, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД с каталогом товаров
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьКаталогCML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*Попытка
		КаталогЭО = ПолучитьОбъектТипаCML("Каталог", СтруктураПараметров.ВерсияСхемы);*/
			/*// Коммерческая информация.
*/
			/*ЗаполнитьСвойствоXDTO(КаталогЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(КаталогЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(КаталогЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(КаталогЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);*/
			/*// Владелец.
*/
			/*Владелец = ПолучитьОбъектТипаCML("Контрагент", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Владелец, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(КаталогЭО, "Владелец", Владелец, Истина, ТекстОшибки);*/
			/*// Товары.
*/
			/*ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;*/
			if(true/*ТаблицаТоваров.Количество()>0*/)
			{
				/*Товары = ПолучитьОбъектТипаCML("Каталог.Товары", СтруктураПараметров.ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(КаталогЭО, "Товары", Товары, Истина, ТекстОшибки);*/
			}
			/*// Запись файла электронного документа.
*/
			/*КаталогЭО.Проверить();*/
			/*ВыгрузитьЭДвФайл(КаталогЭО, СтруктураПараметров.ПолноеИмяФайла);*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД с прайс-листом
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьПрайсЛистCML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ТаблицаТоваров = Новый ТаблицаЗначений;*/
			/*ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;*/
			/*Попытка
		
		ПрайсЭО = ПолучитьОбъектТипаCML("ПрайсЛист", СтруктураПараметров.ВерсияСхемы);*/
			/*// Коммерческая информация.
*/
			/*ЗаполнитьСвойствоXDTO(ПрайсЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ПрайсЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина,
			ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ПрайсЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ПрайсЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);*/
			/*// Владелец.
*/
			/*Контрагент = ПолучитьОбъектТипаCML("Контрагент", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ПрайсЭО, "Владелец", Контрагент, Истина, ТекстОшибки);*/
			/*ИдТипаЦен = Строка(Новый УникальныйИдентификатор);*/
			/*// Предложения.
*/
			if(true/*ТаблицаТоваров.Количество()>0*/)
			{
				/*Предложения = ПолучитьОбъектТипаCML("ПрайсЛист.Предложения", СтруктураПараметров.ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ПрайсЭО, 	"Предложения",	Предложения, Истина, ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(ПрайсЭО, "ДействительноС",XMLДата(СтруктураПараметров.Дата), , ТекстОшибки);*/
			/*// ТипыЦен
*/
			/*ТипыЦен = ПолучитьОбъектТипаCML("ПрайсЛист.ТипыЦен", СтруктураПараметров.ВерсияСхемы);*/
			/*ТипЦены = ПолучитьОбъектТипаCML("ТипЦены", СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ТипЦены, "Ид", ИдТипаЦен, Истина, ТекстОшибки);*/
			if(true/*СтруктураПараметров.Свойство("Описание")*/)
			{
				/*ЗаполнитьСвойствоXDTO(ТипЦены, "Описание", СтруктураПараметров.Описание, , ТекстОшибки);*/
			}
			if(true/*СтруктураПараметров.Свойство("Валюта") И ЗначениеЗаполнено (СтруктураПараметров.Валюта)*/)
			{
				/*Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);*/
				/*КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ТипЦены, "Валюта", Валюта, , ТекстОшибки);*/
			}
			/*ТипыЦен.ТипЦены.Добавить(ТипЦены);*/
			/*ЗаполнитьСвойствоXDTO(ПрайсЭО, "ТипыЦен", ТипыЦен, , ТекстОшибки);*/
			/*ПрайсЭО.Проверить();*/
			/*ВыгрузитьЭДвФайл(ПрайсЭО, СтруктураПараметров.ПолноеИмяФайла);*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		// Возвращает результат успеха формирования файла ЭД Отчет о продажах комиссионного товара.
		//
		// Параметры
		//  СтруктураПараметров – структура параметров для формирования,
		//
		// Возвращаемое значение:
		//  Булево - признак успеха формирования
		//

		public object СформироватьПередачуВозвратТоваровМеждуОрганизациямиCML(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ТаблицаТоваров = Новый ТаблицаЗначений;*/
			/*ТаблицаТоваров = СтруктураПараметров.ТаблицаТоваров;*/
			/*Попытка
		ДокументЭО = ПолучитьОбъектТипаCML("ТОРГ12", СтруктураПараметров.ВерсияСхемы);*/
			/*// Коммерческая информация
*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИдИсполнителя", СтруктураПараметров.Исполнитель, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ДатаФормирования", XMLДатаВремя(СтруктураПараметров.ДатаФормирования), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ВерсияСхемы", СтруктураПараметров.ВерсияСхемы, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Ид", СтруктураПараметров.Ид, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Номер", СтруктураПараметров.Номер, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Дата", XMLДата(СтруктураПараметров.Дата), Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ОКУД", "0330212", Истина, ТекстОшибки);*/
			if(true/*СтруктураПараметров.Свойство("Валюта")*/)
			{
				/*Валюта =  ПолучитьОбъектТипаCML("Валюта",СтруктураПараметров.ВерсияСхемы);*/
				/*КодВалюты = XMLЧисло(СтруктураПараметров.Валюта.Код);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "КодОКВ", КодВалюты, Истина , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "Курс", СтруктураПараметров.Курс, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеСокращенноеОКВ", СтруктураПараметров.Валюта.Наименование, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Валюта, "НаименованиеПолноеОКВ", СтруктураПараметров.Валюта.НаименованиеПолное, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Валюта", Валюта, , ТекстОшибки);*/
			}
			/*Грузоотправитель = ПолучитьОбъектТипаCML("ТОРГ12.Грузоотправитель", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Грузоотправитель, СтруктураПараметров, СтруктураПараметров.ТипГрузоотправителя,
			ТекстОшибки, СтруктураПараметров.ВерсияСхемы, "Грузоотправитель");*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузоотправитель", Грузоотправитель, , ТекстОшибки);*/
			/*Грузополучатель = ПолучитьОбъектТипаCML("ТОРГ12.Грузополучатель", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Грузополучатель, СтруктураПараметров, "Контрагент", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы,"Грузополучатель");*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Грузополучатель", Грузополучатель, , ТекстОшибки);*/
			/*Организация = ПолучитьОбъектТипаCML("ТОРГ12.Поставщик", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Организация, СтруктураПараметров, "Организация", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Поставщик", Организация, , ТекстОшибки);*/
			/*Контрагент = ПолучитьОбъектТипаCML("ТОРГ12.Плательщик", СтруктураПараметров.ВерсияСхемы);*/
			/*СформироватьДанныеПоКонтрагентуCML(Контрагент, СтруктураПараметров, "Контрагент", ТекстОшибки,
			СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Плательщик", Контрагент, , ТекстОшибки);*/
			/*ИтогоПоДокументу = ПолучитьОбъектТипаCML("ТОРГ12.ИтогоПоДокументу", СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоЗаписей", ТаблицаТоваров.Количество(), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "КоличествоМест", ТаблицаТоваров.Количество(), , ТекстОшибки);*/
			if(true/*СтруктураПараметров.ЦенаВключаетНДС*/)
			{
				/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаБезНДС", ТаблицаТоваров.Итог("Сумма")
				- ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаНДС", ТаблицаТоваров.Итог("СуммаНДС"), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогоПоДокументу, "СуммаСУчетомНДС", ТаблицаТоваров.Итог("СуммаСНДС"), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогоПоДокументу", ИтогоПоДокументу, , ТекстОшибки);*/
			/*ИтогиПрописью = ПолучитьОбъектТипаCML("ТОРГ12.ИтогиПрописью", СтруктураПараметров.ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоЗаписейПрописью",
			ЧислоПрописью(ТаблицаТоваров.Количество(), ,",,,,,,,,0"), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогиПрописью, "КоличествоМестПрописью",
			ЧислоПрописью(ТаблицаТоваров.Количество(), ,",,,,,,,,0"), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИтогиПрописью, "СуммаВсегоПрописью",
			ЭлектронныеДокументыПереопределяемый.СуммаПрописью(ТаблицаТоваров.Итог("СуммаСНДС"), КодВалюты), , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ИтогиПрописью", ИтогиПрописью,, ТекстОшибки);*/
			if(true/*ТаблицаТоваров.Количество()>0*/)
			{
				/*ПП = 0;*/
				/*Товары	= ПолучитьОбъектТипаCML("ТОРГ12.Товары", СтруктураПараметров.ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Товары", Товары, , ТекстОшибки);*/
			}
			/*ДокументЭО.Проверить();*/
			/*ВыгрузитьЭДвФайл(ДокументЭО, СтруктураПараметров.ПолноеИмяФайла);*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '%1 (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}

		public void ЗаполнитьСтруктуруСлужебныхПолейФНС(/*СтруктураЭД, СтруктураПараметров*/)
		{
			/*СтруктураПараметров.ВерсПрог = "1С:Предприятие 8";*/
			/*СтруктураПараметров.ВерсФорм = "5.01";*/
			/*СтруктураПараметров.ИдОтпр = СтруктураЭД.Отправитель;*/
			/*СтруктураПараметров.ИдПок = СтруктураЭД.Получатель;*/
			if(true/*СтруктураЭД.СоглашениеЭД.СпособОбменаЭД = Перечисления.СпособыОбменаЭД.ЧерезОператораЭДОТакском*/)
			{
				/*ЗаполнитьРеквизитыОператораЭДО(СтруктураПараметров);*/
			}
			/*ТекДатаВремя = ТекущаяДатаСеанса();*/
			/*СтруктураПараметров.ДатаДок = Формат(ТекДатаВремя, "ДФ=dd.MM.yyyy");*/
			/*СтруктураПараметров.ВремДок = Прав(СтрЗаменить("0" + Формат(ТекДатаВремя, "ДЛФ=T"), ":", "."), 8);*/
			/*СтруктураПараметров.КНД = СтруктураЭД.КНД;*/
			/*СтруктураПараметров.ВидЭД = СтруктураЭД.ВидЭД;*/
			if(true/*СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель
		ИЛИ СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец*/)
			{
				/*СтруктураПараметров.НаимПервДок = "Товарная накладная";*/
				/*СтруктураПараметров.ОКУДПервДок = "0330212";*/
				/*СтруктураПараметров.НомФорм = "ТОРГ-12";*/
			}
			/*ГГГГММДД = СтрЗаменить(Формат(ТекДатаВремя, "ДФ=yyyy-MM-dd"), "-", "");*/
			/*СтруктураПараметров.ИдФайл = ЭлектронныеДокументы1СТакскомСлужебный.ФНСИмяФайла(
		Новый Структура("Префикс, ИДПолучателя, ИДОтправителя, ГГГГММДД, УникальныйИдентификатор",
		СтруктураЭД.ПрефиксИдФайла, СтруктураЭД.Получатель, СтруктураЭД.Отправитель, ГГГГММДД, СтруктураЭД.УникальныйИдентификатор));*/
		}

		public void СтруктураСлужебныхПолейФНС(/*СтруктураСлужебныеПоля = Неопределено*/)
		{
			if(true/*ТипЗнч(СтруктураСлужебныеПоля) <> Тип("Структура")*/)
			{
				/*СтруктураСлужебныеПоля = Новый Структура;*/
			}
			/*СтруктураСлужебныеПоля.Вставить("ВерсПрог");*/
			/*СтруктураСлужебныеПоля.Вставить("ВерсФорм");*/
			/*СтруктураСлужебныеПоля.Вставить("ИдФайл");*/
			/*СтруктураСлужебныеПоля.Вставить("ИдОтпр");*/
			/*СтруктураСлужебныеПоля.Вставить("ИдПок");*/
			/*СтруктураСлужебныеПоля.Вставить("НаимОрг");*/
			/*СтруктураСлужебныеПоля.Вставить("ИННЮЛ");*/
			/*СтруктураСлужебныеПоля.Вставить("ИдЭДО");*/
			/*СтруктураСлужебныеПоля.Вставить("КНД");*/
			/*СтруктураСлужебныеПоля.Вставить("ДатаДок");*/
			/*СтруктураСлужебныеПоля.Вставить("ВремДок");*/
			/*СтруктураСлужебныеПоля.Вставить("НаимПервДок");*/
			/*СтруктураСлужебныеПоля.Вставить("ОКУДПервДок");*/
			/*// Используется только для ТОРГ-12
*/
			/*СтруктураСлужебныеПоля.Вставить("НомФорм");*/
			/*// Используется только для ТОРГ-12
*/
			/*СтруктураСлужебныеПоля.Вставить("ВидЭД");*/
		}

		public object СтруктураРеквизитовДоверенностиФНС(/**/)
		{
			/*СтруктураСведений = Новый Структура;*/
			/*СтруктураСведений.Вставить("НомерДоверенности");*/
			/*СтруктураСведений.Вставить("ДатаДоверенности");*/
			/*СтруктураСведений.Вставить("ОрганизацияВыдавшаяДоверенность");*/
			/*СтруктураСведений.Вставить("ДопСведенияОВыдачеДоверенности");*/
			/*СтруктураСведений.Вставить("ДопСведенияОДоверенномЛице");*/
			/*СтруктураСведений.Вставить("ЛицоВыдавшееДоверенность", Новый Структура("Должность, Фамилия, Имя, Отчество"));*/
			/*СтруктураСведений.Вставить("ДоверенноеЛицо", Новый Структура("Должность, Фамилия, Имя, Отчество"));*/
			return null;
		}

		public object СтруктураРеквизитовУчастникаОбменаФНС(/**/)
		{
			/*СтруктураУчастника = Новый Структура;*/
			/*СтруктураУчастника.Вставить("ЭтоФизЛицо");*/
			/*СтруктураУчастника.Вставить("КодОКПО");*/
			/*СтруктураУчастника.Вставить("НаименованиеОрганизации");*/
			/*СтруктураУчастника.Вставить("ИНН");*/
			/*СтруктураУчастника.Вставить("КПП");*/
			/*СтруктураУчастника.Вставить("КодОКОПФ");*/
			/*СтруктураУчастника.Вставить("Фамилия");*/
			/*СтруктураУчастника.Вставить("Имя");*/
			/*СтруктураУчастника.Вставить("Отчество");*/
			/*СтруктураУчастника.Вставить("Адрес", СтруктураАдресаФНС());*/
			/*СтруктураУчастника.Вставить("Телефон");*/
			/*СтруктураУчастника.Вставить("Факс");*/
			/*СтруктураУчастника.Вставить("БанковскийСчет", Новый Структура("НомерСчета, НаимБанк, БИК"));*/
			return null;
		}

		public object СтруктураРеквизитовПодписантаФНС(/**/)
		{
			/*СтруктураУчастника = Новый Структура;*/
			/*СтруктураУчастника.Вставить("ЭтоФизЛицо");*/
			/*СтруктураУчастника.Вставить("ИНН");*/
			/*СтруктураУчастника.Вставить("Фамилия");*/
			/*СтруктураУчастника.Вставить("Имя");*/
			/*СтруктураУчастника.Вставить("Отчество");*/
			/*СтруктураУчастника.Вставить("Должность");*/
			/*СтруктураУчастника.Вставить("СвидетельствоОРегистрацииИП");*/
			/*СтруктураУчастника.Вставить("ОбязательныеПоля", "ИНН, Фамилия, Имя, ЭтоФизЛицо, Должность");*/
			return null;
		}

		public object Торг12СтруктураСведенийПоОтпускуГруза(/**/)
		{
			/*СтруктураОтпуска = Новый Структура;*/
			/*СтруктураОтпуска.Вставить("ПриложениеКоличествоЛистов");*/
			/*СтруктураОтпуска.Вставить("ПриложениеКоличествоЛистовПрописью");*/
			/*СтруктураОтпуска.Вставить("ОтпущеноНаСумму");*/
			/*СтруктураОтпуска.Вставить("ОтпущеноНаСуммуПрописью");*/
			/*СтруктураОтпуска.Вставить("ДатаОтпуска");*/
			/*СтруктураОтпуска.Вставить("ОтпускРазрешил", Новый Структура("Должность, Фамилия, Имя, Отчество"));*/
			/*СтруктураОтпуска.Вставить("Бухгалтер", Новый Структура("Должность, Фамилия, Имя, Отчество"));*/
			/*СтруктураОтпуска.Вставить("ОтпускПроизвел", Новый Структура("Должность, Фамилия, Имя, Отчество"));*/
			return null;
		}

		public object Торг12СтруктураОбщихСведений(/**/)
		{
			/*СтруктураСведений = Новый Структура;*/
			/*СтруктураСведений.Вставить("КоличествоПорядковыхНомеровЗаписей");*/
			/*СтруктураСведений.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью");*/
			/*СтруктураСведений.Вставить("ВсегоМест");*/
			/*СтруктураСведений.Вставить("ВсегоМестПрописью");*/
			/*СтруктураСведений.Вставить("МассаГрузаНетто");*/
			/*СтруктураСведений.Вставить("МассаГрузаНеттоПрописью");*/
			/*СтруктураСведений.Вставить("МассаГрузаБрутто");*/
			/*СтруктураСведений.Вставить("МассаГрузаБруттоПрописью");*/
			return null;
		}

		public object Торг12СтруктураВсегоПоНакладной(/**/)
		{
			/*СтруктураВсего = Новый Структура;*/
			/*СтруктураВсего.Вставить("КоличествоМест");*/
			/*СтруктураВсего.Вставить("МассаБрутто");*/
			/*СтруктураВсего.Вставить("МассаНетто");*/
			/*СтруктураВсего.Вставить("СуммаБезНДС");*/
			/*СтруктураВсего.Вставить("СуммаНДС");*/
			/*СтруктураВсего.Вставить("СуммаСНДС");*/
			return null;
		}

		public object Торг12ТаблицаСведенийОТоваре(/**/)
		{
			/*ТаблицаТоваров = Новый ТаблицаЗначений;*/
			/*ТаблицаТоваров.Колонки.Добавить("НомерСтроки");*/
			/*ТаблицаТоваров.Колонки.Добавить("НаименованиеНоменклатуры");*/
			/*ТаблицаТоваров.Колонки.Добавить("НаименованиеХарактеристики");*/
			/*ТаблицаТоваров.Колонки.Добавить("Сорт");*/
			/*ТаблицаТоваров.Колонки.Добавить("Артикул");*/
			/*ТаблицаТоваров.Колонки.Добавить("КодТовара");*/
			/*ТаблицаТоваров.Колонки.Добавить("ЕдиницаИзмерения");*/
			/*ТаблицаТоваров.Колонки.Добавить("БазоваяЕдиницаКод");*/
			/*ТаблицаТоваров.Колонки.Добавить("ВидУпаковки");*/
			/*ТаблицаТоваров.Колонки.Добавить("КоличествоВОдномМесте");*/
			/*ТаблицаТоваров.Колонки.Добавить("КоличествоМест");*/
			/*ТаблицаТоваров.Колонки.Добавить("МассаБрутто");*/
			/*ТаблицаТоваров.Колонки.Добавить("МассаНетто");*/
			/*ТаблицаТоваров.Колонки.Добавить("Цена");*/
			/*ТаблицаТоваров.Колонки.Добавить("СуммаБезНДС");*/
			/*ТаблицаТоваров.Колонки.Добавить("СтавкаНДС");*/
			/*ТаблицаТоваров.Колонки.Добавить("СуммаНДС");*/
			/*ТаблицаТоваров.Колонки.Добавить("Сумма");*/
			return null;
		}
		// Для того, чтобы передать дополнительные данные в печатную форму, надо:
		// 1. в функции подготовки данных (в переопределяемом модуле) создать структуру, где ключ - имя передаваемого
		//  дополнительного параметра, а значение - соответственно, значение доп.параметра и передать в интерфейсную функцию
		//  "ЭлектронныеДокументы.ДобавитьДанныеВДеревоДопДанных" (описание параметров в комментарии к ней).
		// 2. в функции подготовки данных к печати "ПолучитьДанные...ДляПечати", прописать чтение передаваемых
		//  доп.данных по имени (с которым доп параметр помещался в структуру на шаге 1) и присвоение требуемому реквизиту макета.
		//

		public object ДеревоДопДанных(/**/)
		{
			/*ДеревоДанных = Новый ДеревоЗначений;*/
			/*МассивТипов = Новый Массив;*/
			/*МассивТипов.Добавить(Тип("Структура"));*/
			/*МассивТипов.Добавить(Тип("Массив"));*/
			/*МассивТипов.Добавить(Тип("Строка"));*/
			/*ТипСтруктураМассивСтрока = Новый ОписаниеТипов(МассивТипов);*/
			/*ДеревоДанных.Колонки.Добавить("ИмяРеквизита", Новый ОписаниеТипов("Строка"));*/
			/*ДеревоДанных.Колонки.Добавить("ЗначениеРеквизита", ТипСтруктураМассивСтрока);*/
			/*ДеревоДанных.Колонки.Добавить("ЮридическиЗначимый", Новый ОписаниеТипов("Булево"));*/
			/*ДеревоДанных.Колонки.Добавить("ТЧ", Новый ОписаниеТипов("Булево"));*/
			return null;
		}

		public object Торг12СтруктураПараметров(/**/)
		{
			/*СтруктураПараметров = Новый Структура;*/
			/*СтруктураПараметров.Вставить("НомерТоварнойНакладной");*/
			/*СтруктураПараметров.Вставить("ДатаТоварнойНакладной");*/
			/*СтруктураПараметров.Вставить("ТаблицаТоваров", Торг12ТаблицаСведенийОТоваре());*/
			/*СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС());*/
			/*СтруктураПараметров.Вставить("ОбщиеСведенияОТоварнойНакладной", Торг12СтруктураОбщихСведений());*/
			/*СтруктураПараметров.Вставить("ВсегоПоНакладной", Торг12СтруктураВсегоПоНакладной());*/
			/*СведенияОГрузоотправителе = Новый Структура;*/
			/*СведенияОГрузоотправителе.Вставить("Грузоотправитель", СтруктураРеквизитовУчастникаОбменаФНС());*/
			/*СведенияОГрузоотправителе.Вставить("СтруктурноеПодразделение");*/
			/*СведенияОГрузоотправителе.Вставить("КодОКДП");*/
			/*СтруктураПараметров.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);*/
			/*СтруктураПараметров.Вставить("Грузополучатель", СтруктураРеквизитовУчастникаОбменаФНС());*/
			/*СтруктураПараметров.Вставить("Поставщик", СтруктураРеквизитовУчастникаОбменаФНС());*/
			/*СтруктураПараметров.Вставить("Плательщик", СтруктураРеквизитовУчастникаОбменаФНС());*/
			/*СтруктураПараметров.Вставить("ДокОснованиеНаименование");*/
			/*СтруктураПараметров.Вставить("ДокОснованиеНомер");*/
			/*СтруктураПараметров.Вставить("ДокОснованиеДата");*/
			/*СтруктураПараметров.Вставить("ДокОснованиеДопСведения");*/
			/*СтруктураПараметров.Вставить("ТранспортнаяНакладнаяНомер");*/
			/*СтруктураПараметров.Вставить("ТранспортнаяНакладнаяДата");*/
			/*СтруктураПараметров.Вставить("КодВидаОперации");*/
			/*СтруктураПараметров.Вставить("СведенияПоОтпускуГруза", Торг12СтруктураСведенийПоОтпускуГруза());*/
			/*МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);*/
			/*СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20);*/
			/*// 20 - служебные символы.
*/
			/*МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ТН.Таблица.СвТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);*/
			/*СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлина - 20);*/
			/*// 20 - служебные символы.
*/
			/*СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());*/
			/*СтруктураПараметров.Вставить("ОбязательныеПоля", "НомерТоварнойНакладной, ДатаТоварнойНакладной, ТаблицаТоваров, Подписант");*/
			/*СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "НомерСтроки, ЕдиницаИзмерения, Сумма");*/
			return null;
		}

		public object Торг12ПокупательСтруктураПараметров(/**/)
		{
			/*СтруктураПараметров = Новый Структура;*/
			/*СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС());*/
			/*СтруктураПараметров.Вставить("ДатаПолученияГруза");*/
			/*СтруктураПараметров.Вставить("Доверенность", СтруктураРеквизитовДоверенностиФНС());*/
			/*СтруктураПараметров.Вставить("ГрузПринял", Новый Структура("Должность, Фамилия, Имя, Отчество"));*/
			/*СтруктураПараметров.Вставить("ГрузПолучил", Новый Структура("Должность, Фамилия, Имя, Отчество"));*/
			/*МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);*/
			/*СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20);*/
			/*// 20 - служебные символы.
*/
			/*МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ТН.Таблица.СвТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);*/
			/*СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлина - 20);*/
			/*// 20 - служебные символы.
*/
			/*СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());*/
			/*СтруктураПараметров.Вставить("ОбязательныеПоля", "Подписант");*/
			return null;
		}

		public object СтруктураЭСФ(/*СсылкаНаОбъект*/)
		{
			/*ЭтоКорректировочныйСФ = ЭлектронныеДокументыПереопределяемый.ЭтоКорректировочныйСчетФактура(СсылкаНаОбъект);*/
			/*СтруктураПараметров = Новый Структура;*/
			/*СтруктураПараметров.Вставить("ВерсПрог");*/
			/*// (optional) Версия передающей программы
*/
			/*СтруктураПараметров.Вставить("ВерсФорм");*/
			/*// Версия формата
*/
			/*СтруктураПараметров.Вставить("ИдФайл");*/
			/*// Идентификатор файла
*/
			/*СтруктураПараметров.Вставить("ИдОтпр");*/
			/*// Идентификатор участника документооборота, выставившего счет-фактуру (отправитель)
*/
			/*СтруктураПараметров.Вставить("ИдПок");*/
			/*// Идентификатор участника документооборота счетов-фактур - покупателя
*/
			/*СтруктураПараметров.Вставить("НаимОрг");*/
			/*// Наименование
*/
			/*СтруктураПараметров.Вставить("ИННЮЛ");*/
			/*// ИНН
*/
			/*СтруктураПараметров.Вставить("ИдЭДО");*/
			/*// Уникальный идентификатор оператора ЭДО
*/
			/*СтруктураПараметров.Вставить("КНД");*/
			/*// Код формы по КНД
*/
			if(true/*ЭтоКорректировочныйСФ*/)
			{
				/*СтруктураПараметров.Вставить("НомерКСчФ");*/
				/*// Порядковый номер корректировочного счета-фактуры (Строка 1)
*/
				/*СтруктураПараметров.Вставить("ДатаКСчФ");*/
				/*// Дата составления корректировочного счета-фактуры (Строка 1)
*/
				/*СтруктураПараметров.Вставить("НомИспрКСчФ");*/
				/*//(optional) Исправление: № (Строка 1а)
*/
				/*СтруктураПараметров.Вставить("ДатаИспрКСчФ");*/
				/*//(optional) Исправление: Дата (Строка 1а)
*/
				/*СтруктураПараметров.Вставить("ТекстИнф");*/
				/*//(optional) Текстовая информация
*/
				/*СтруктураПараметров.Вставить("ИдФайлИнфПол");*/
				/*//(optional) Идентификатор файла информационного поля
*/
				/*ТаблицаТоваров = Новый ТаблицаЗначений;*/
				/*ТаблицаТоваров.Колонки.Добавить("НомСтр");*/
				/*// Номер строки таблицы
*/
				/*ТаблицаТоваров.Колонки.Добавить("НаимТов");*/
				/*// Наименование товара (описание выполненных работ, оказанных услуг), имущественного права (Графа 1)
*/
				/*ТаблицаТоваров.Колонки.Добавить("ОКЕИ_ТовДо");*/
				/*// (optional) Код единицы измерения, до изменения (Графа 2, строка А)
*/
				/*ТаблицаТоваров.Колонки.Добавить("ОКЕИ_ТовПосле");*/
				/*// (optional) Код единицы измерения, после изменения (Графа 2, строка Б)
*/
				/*ТаблицаТоваров.Колонки.Добавить("КолТовДо");*/
				/*//(optional) Количество (объем), до изменения (Графа 3, строка А)
*/
				/*ТаблицаТоваров.Колонки.Добавить("КолТовПосле");*/
				/*// (optional) Количество (объем), после изменения (Графа 3, строка Б)
*/
				/*ТаблицаТоваров.Колонки.Добавить("ЦенаТовДо");*/
				/*// (optional) Цена (тариф) за единицу измерения, до изменения (Графа 4, строка А)
*/
				/*ТаблицаТоваров.Колонки.Добавить("ЦенаТовПосле");*/
				/*// (optional) Цена (тариф) за единицу измерения, после изменения (Графа 4, строка Б)
*/
				/*ТаблицаТоваров.Колонки.Добавить("ИнфПолСтр");*/
				/*// (optional) Информационное поле строки
*/
				/*//(optional) Стоимость товаров (работ, услуг), имущественных прав без налога - всего (Графа 5)
*/
				/*ТаблицаТоваров.Колонки.Добавить("СтТовБезНДСДоИзм");*/
				/*//  Стоимость до изменения (Строка А)
*/
				/*ТаблицаТоваров.Колонки.Добавить("СтТовБезНДСПослеИзм");*/
				/*// Стоимость после изменения (Строка Б)
*/
				/*ТаблицаТоваров.Колонки.Добавить("СтТовБезНДСУм");*/
				/*//(optional) Стоимость -  увеличение (Строка В)
*/
				/*ТаблицаТоваров.Колонки.Добавить("СтТовБезНДСУвел");*/
				/*//(optional) Стоимость - уменьшение (Строка Г)
*/
				/*// В том числе сумма акциза, до изменения (Графа 6, строка А)
*/
				/*ТаблицаТоваров.Колонки.Добавить("АкцизДо");*/
				/*ТаблицаТоваров.Колонки.Добавить("АкцизПосле");*/
				/*// Налоговая ставка, до изменения (Графа 7, строка А)
*/
				/*ТаблицаТоваров.Колонки.Добавить("НалСтВелДо");*/
				/*// Налоговая ставка - величина (строка: 0, 10, 18, 20, 10/110, 18/118, без НДС)
*/
				/*ТаблицаТоваров.Колонки.Добавить("НалСтТипДо");*/
				/*// Тип налоговой ставки (процент, дробь, текст)
*/
				/*// Налоговая ставка, после  изменения (Графа 7, строка Б)
*/
				/*ТаблицаТоваров.Колонки.Добавить("НалСтВелПосле");*/
				/*// Налоговая ставка - величина (строка: 0, 10, 18, 20, 10/110, 18/118, без НДС)
*/
				/*ТаблицаТоваров.Колонки.Добавить("НалСтТипПосле");*/
				/*// Тип налоговой ставки (процент, дробь, текст)
*/
				/*ТаблицаТоваров.Колонки.Добавить("СумНалДо");*/
				/*// Сумма НДС, предъявляемая покупателю, до изменения (Графа 8)
*/
				/*ТаблицаТоваров.Колонки.Добавить("СумНалПосле");*/
				/*// Сумма НДС, предъявляемая покупателю, до изменения (Графа 8)
*/
				/*// Сумма налога, увеличение (уменьшение) (Графа 8, строки В, Г)
*/
				/*ТаблицаТоваров.Колонки.Добавить("СумНалУм");*/
				/*ТаблицаТоваров.Колонки.Добавить("СумНалУвел");*/
				/*//Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (Графа 9)
*/
				/*ТаблицаТоваров.Колонки.Добавить("СтТовУчНалДоИзм");*/
				/*ТаблицаТоваров.Колонки.Добавить("СтТовУчНалПослеИзм");*/
				/*ТаблицаТоваров.Колонки.Добавить("СтТовУчНалУм");*/
				/*ТаблицаТоваров.Колонки.Добавить("СтТовУчНалУвел");*/
				/*// Сведения таблицы корректировочного счета-фактуры
*/
				/*СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);*/
				/*// Реквизиты строки Всего увеличение (сумма строк (В) по графам 5, 8 и 9)
*/
				/*СтруктураПараметров.Вставить("ВсегоСтТовБезНДСУвел");*/
				/*// Всего увеличение, Стоимость товаров (работ, услуг), имущественных прав без налога - всего (строка Всего увеличение/Графа 5)
*/
				/*СтруктураПараметров.Вставить("ВсегоСтТовУчНалУвел");*/
				/*// Всего увеличение, Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (строка Всего увеличение/Графа 9)
*/
				/*СтруктураПараметров.Вставить("ВсегоСумНалУвел");*/
				/*// Всего увеличение, Сумма налога (строка Всего увеличение/Графа 8)
*/
				/*// Реквизиты строки Всего уменьшение (сумма строк (Г) по графам 5, 8 и 9)
*/
				/*СтруктураПараметров.Вставить("ВсегоСтТовБезНДСУм");*/
				/*// всего уменьшение, Стоимость товаров (работ, услуг), имущественных прав без налога - всего (строка Всего уменьшение/Графа 5)
*/
				/*СтруктураПараметров.Вставить("ВсегоСтТовУчНалУм");*/
				/*// всего уменьшение, Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (строка Всего уменьшение/Графа 9)
*/
				/*СтруктураПараметров.Вставить("ВсегоСумНалУм");*/
				/*// всего уменьшение, Сумма налога (строка Всего уменьшение/Графа 8)
*/
			}
			/*СтруктураПараметров.Вставить("НомерСчФ");*/
			/*// Порядковый номер счета-фактуры к которому составлен корректировочный счета-фактура (Строка 1б)
*/
			/*СтруктураПараметров.Вставить("ДатаСчФ");*/
			/*// Дата составления счета-фактуры счета-фактуры к которому составлен корректировочный счета-фактура (Строка 1б)
*/
			/*СтруктураПараметров.Вставить("КодОКВ");*/
			/*// Валюта: Код (Строка 4) 
*/
			/*СтруктураПараметров.Вставить("НомИспрСчФ");*/
			/*// (optional) Исправление: № (Строка 1а)
*/
			/*СтруктураПараметров.Вставить("ДатаИспрСчФ");*/
			/*// (optional) Исправление: Дата  (Строка 1а)
*/
			/*СтруктураПараметров.Вставить("Организация");*/
			/*СтруктураПараметров.Вставить("Контрагент");*/
			/*СтруктураПараметров.Вставить("Грузоотправитель");*/
			/*СтруктураПараметров.Вставить("Грузополучатель");*/
			if(true/*НЕ ЭтоКорректировочныйСФ*/)
			{
				/*// Сведения о платежно-расчетном документе (строка 5)
*/
				/*ПлатежныеДокументы = Новый ТаблицаЗначений();*/
				/*ПлатежныеДокументы.Колонки.Добавить("НомерПРД");*/
				/*// Номер платежно-расчетного документа
*/
				/*ПлатежныеДокументы.Колонки.Добавить("ДатаПРД");*/
				/*// Дата составления платежно-расчетного документа
*/
				/*СтруктураПараметров.Вставить("СвПРД", ПлатежныеДокументы);*/
				/*СтруктураПараметров.Вставить("ТекстИнф");*/
				/*СтруктураПараметров.Вставить("ИдФайлИнфПол");*/
				/*// Сведения о товаре (работе, услуге)
*/
				/*ТаблицаТоваров = Новый ТаблицаЗначений;*/
				/*ТаблицаТоваров.Колонки.Добавить("НомСтр");*/
				/*// Номер строки таблицы
*/
				/*ТаблицаТоваров.Колонки.Добавить("НаимТов");*/
				/*// Наименование товара (описание выполненных работ, оказанных услуг), имущественного права (Графа 1)
*/
				/*ТаблицаТоваров.Колонки.Добавить("ОКЕИ_Тов");*/
				/*// (optional) Код единицы измерения (Графа 2)
*/
				/*ТаблицаТоваров.Колонки.Добавить("КолТов");*/
				/*// (optional) Количество (объем) (Графа 3)
*/
				/*ТаблицаТоваров.Колонки.Добавить("ЦенаТов");*/
				/*// (optional) Цена (тариф) за единицу измерения (Графа 4)
*/
				/*ТаблицаТоваров.Колонки.Добавить("СтТовБезНДС");*/
				/*// (optional) Стоимость товаров (работ, услуг), имущественных прав без налога - всего (Графа 5)
*/
				/*ТаблицаТоваров.Колонки.Добавить("СтТовУчНал");*/
				/*// Стоимость товаров (работ, услуг), имущественных прав с налогом - всего (Графа 9)
*/
				/*ТаблицаТоваров.Колонки.Добавить("ИнфПолСтр");*/
				/*// Информационное поле строки
*/
				/*ТаблицаТоваров.Колонки.Добавить("СумАкциз");*/
				/*// В том числе сумма акциза (Графа 6)
*/
				/*ТаблицаТоваров.Колонки.Добавить("НалСтВел");*/
				/*// Налоговая ставка - величина
*/
				/*ТаблицаТоваров.Колонки.Добавить("НалСтТип");*/
				/*// Тип налоговой ставки
*/
				/*ТаблицаТоваров.Колонки.Добавить("СумНДС");*/
				/*// Сумма НДС, предъявляемая покупателю (Графа 8)
*/
				/*ТаблицаТоваров.Колонки.Добавить("КодПроисх");*/
				/*// (optional) Цифровой код страны происхождения товара (Графа 10)
*/
				/*ТаблицаТоваров.Колонки.Добавить("НомерТД");*/
				/*// (optional) Номер таможенной декларации (Графа11)
*/
				/*СтруктураПараметров.Вставить("ТаблицаТоваров", ТаблицаТоваров);*/
				/*СтруктураПараметров.Вставить("СтТовБезНДСВсего");*/
				/*// Стоимость товаров (работ, услуг), имущественных прав без налога - всего
*/
				/*СтруктураПараметров.Вставить("СтТовУчНалВсего");*/
				/*// Стоимость товаров (работ, услуг), имущественных прав с налогом - всего
*/
				/*СтруктураПараметров.Вставить("СумНДС");*/
				/*// Сумма НДС, предъявляемая покупателю
*/
			}
			/*СтруктураПараметров.Вставить("ВидЭД");*/
			/*СтруктураПараметров.Вставить("НаправлениеЭД");*/
			/*СтруктураПараметров.Вставить("ФИОРуководителя");*/
			/*СтруктураПараметров.Вставить("СчетФактураОснование");*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла");*/
			/*СтруктураПараметров.Вставить("СтруктураЭД");*/
			/*СтруктураПараметров.Вставить("УникальныйИдентификатор");*/
			/*СтруктураПараметров.Вставить("ТолькоУслуги", Ложь);*/
			/*СтруктураПараметров.Вставить("ОбязательныеПоля", "ВерсФорм, ИдОтпр, ИдПок, НаимОрг, ИдЭДО, КНД, НомерСчФ, ДатаСчФ,
	|КодОКВ, Организация, Контрагент, ТаблицаТоваров, ПолноеИмяФайла" + ?(ЭтоКорректировочныйСФ, "", ", СтТовУчНалВсего"));*/
			/*СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "НаимТов");*/
			return null;
		}

		public object Акт501СтруктураСведенийПоВыполнениюУслуг(/**/)
		{
			/*СтруктураВыполнения = Новый Структура;*/
			/*СтруктураВыполнения.Вставить("ДатаИсполнения");*/
			/*СтруктураВыполнения.Вставить("ПодписьИсполнителя", Новый Структура("Должность, Фамилия, Имя, Отчество"));*/
			/*ДоверенностьИсполнителя = Новый Структура;*/
			/*ДоверенностьИсполнителя.Вставить("НомерДоверенности");*/
			/*ДоверенностьИсполнителя.Вставить("ДатаДоверенности");*/
			/*ДоверенностьИсполнителя.Вставить("КемДоверенностьВыдана",
		Новый Структура("НаименованиеОрганизации, Должность, Фамилия, Имя, Отчество, ДопСведенияОВыдачеДоверенности"));*/
			/*ДоверенностьИсполнителя.Вставить("КомуДоверенностьВыдана",
		Новый Структура("Должность, Фамилия, Имя, Отчество, ДопСведенияОДоверенномЛице"));*/
			/*СтруктураВыполнения.Вставить("ДоверенностьИсполнителя", ДоверенностьИсполнителя);*/
			return null;
		}

		public object Акт501ТаблицаСведенийОбУслугах(/**/)
		{
			/*ТаблицаУслуг = Новый ТаблицаЗначений;*/
			/*ТаблицаУслуг.Колонки.Добавить("НомерСтроки");*/
			/*ТаблицаУслуг.Колонки.Добавить("Наименование");*/
			/*ТаблицаУслуг.Колонки.Добавить("ЕдиницаИзмерения");*/
			/*ТаблицаУслуг.Колонки.Добавить("БазоваяЕдиницаКод");*/
			/*ТаблицаУслуг.Колонки.Добавить("Количество");*/
			/*ТаблицаУслуг.Колонки.Добавить("Цена");*/
			/*ТаблицаУслуг.Колонки.Добавить("СуммаБезНДС");*/
			/*ТаблицаУслуг.Колонки.Добавить("СуммаНДС");*/
			/*ТаблицаУслуг.Колонки.Добавить("Сумма");*/
			/*ТаблицаУслуг.Колонки.Добавить("Описание");*/
			/*ТаблицаУслуг.Колонки.Добавить("Номенклатура");*/
			/*ТаблицаУслуг.Колонки.Добавить("ИД");*/
			return null;
		}

		public object Акт501ТаблицаСведенийОбОписанииУслуг(/**/)
		{
			/*ТаблицаОписанийУслуг = Новый ТаблицаЗначений;*/
			/*ТаблицаОписанийУслуг.Колонки.Добавить("НомерСтроки");*/
			/*ТаблицаОписанийУслуг.Колонки.Добавить("НачалоРабот");*/
			/*ТаблицаОписанийУслуг.Колонки.Добавить("КонецРабот");*/
			/*ТаблицаОписанийУслуг.Колонки.Добавить("СуммаБезНДСИтого");*/
			/*ТаблицаОписанийУслуг.Колонки.Добавить("СуммаНДСИтого");*/
			/*ТаблицаОписанийУслуг.Колонки.Добавить("СуммаСНДСИтого");*/
			/*ТаблицаОписанийУслуг.Колонки.Добавить("Услуги");*/
			return null;
		}

		public object Акт501СтруктураПараметров(/**/)
		{
			/*СтруктураПараметров = Новый Структура;*/
			/*СтруктураПараметров.Вставить("НомерАкта");*/
			/*СтруктураПараметров.Вставить("ДатаАкта");*/
			/*СтруктураПараметров.Вставить("Заголовок", "Мы, нижеподписавшиеся, представитель ИСПОЛНИТЕЛЯ, с одной стороны и представитель
	|ЗАКАЗЧИКА с другой стороны, составили настоящий акт в том, что ИСПОЛНИТЕЛЬ выполнил, а ЗАКАЗЧИК принял следующие работы (услуги).");*/
			/*СтруктураПараметров.Вставить("Исполнитель",  СтруктураРеквизитовУчастникаОбменаФНС());*/
			/*СтруктураПараметров.Вставить("Заказчик",     СтруктураРеквизитовУчастникаОбменаФНС());*/
			/*СтруктураПараметров.Вставить("ТаблицаОписанийУслуг", Акт501ТаблицаСведенийОбОписанииУслуг());*/
			/*СтруктураПараметров.Вставить("ТаблицаУслуг", Акт501ТаблицаСведенийОбУслугах());*/
			/*СтруктураПараметров.Вставить("СведенияПоВыполнениюУслуг", Акт501СтруктураСведенийПоВыполнениюУслуг());*/
			/*СтруктураПараметров.Вставить("Подписант",    СтруктураРеквизитовПодписантаФНС());*/
			/*МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);*/
			/*СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20);*/
			/*// 20 - служебные символы.
*/
			/*МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ТН.Таблица.СвТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);*/
			/*СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлина - 20);*/
			/*// 20 - служебные символы.
*/
			/*СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());*/
			/*СтруктураПараметров.Вставить("ОбязательныеПоля", "ДатаАкта, ТаблицаУслуг, Подписант");*/
			/*СтруктураПараметров.Вставить("ОбязательныеПоляТаблицыЗначений", "НомерСтроки, ЕдиницаИзмерения");*/
			return null;
		}

		public object Акт501ЗаказчикСтруктураПараметров(/**/)
		{
			/*СтруктураПараметров = Новый Структура;*/
			/*СтруктураПараметров.Вставить("Подписант", СтруктураРеквизитовПодписантаФНС());*/
			/*СтруктураПараметров.Вставить("НомерАкта");*/
			/*СтруктураПараметров.Вставить("ДатаАкта");*/
			/*СтруктураПараметров.Вставить("Доверенность", СтруктураРеквизитовДоверенностиФНС());*/
			/*СтруктураПараметров.Вставить("ПодписьЗаказ", Новый Структура("Должность, Фамилия, Имя, Отчество"));*/
			/*СтруктураПараметров.Вставить("ДатаЗаказа");*/
			/*СтруктураПараметров.Вставить("Претензия");*/
			/*МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ИнфПол", "ТекстИнф", ВидФасетаXDTO.МаксДлина);*/
			/*СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхШапки", МаксДлина - 20);*/
			/*// 20 - служебные символы.
*/
			/*МаксДлина = ПолучитьСвойствоПоляXDTOсхемы("OTORG12", "Файл.Документ.СвТНО.ТН.Таблица.СвТов", "ИнфПолСтр", ВидФасетаXDTO.МаксДлина);*/
			/*СтруктураПараметров.Вставить("ДопустимаяДлинаДопДанныхСтроки", МаксДлина - 20);*/
			/*// 20 - служебные символы.
*/
			/*СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных());*/
			/*СтруктураПараметров.Вставить("ОбязательныеПоля", "Подписант");*/
			return null;
		}
		// Структура адреса содержит все возможные варианты заполнения адреса:
		// Структурированный адрес (по КЛАДР), произвольный российский/иностранный.
		// Тип адреса выбирается из списка значений ТипыАдресов и заполняется
		// соответствующая структура, описанная в значении элемента списка.
		// Пометка в списке типов должна быть одна, иначе быдет браться первый тип адреса
		// с пометкой и по этому типу будут заполняться данные адреса в ЭД.
		//

		public object СтруктураАдресаФНС(/**/)
		{
			/*СтруктураАдреса = Новый Структура;*/
			/*СтруктураАдреса.Вставить("Индекс");*/
			/*СтруктураАдреса.Вставить("КодРегион");*/
			/*СтруктураАдреса.Вставить("Район");*/
			/*СтруктураАдреса.Вставить("Город");*/
			/*СтруктураАдреса.Вставить("НаселПункт");*/
			/*СтруктураАдреса.Вставить("Улица");*/
			/*СтруктураАдреса.Вставить("Дом");*/
			/*СтруктураАдреса.Вставить("Корпус");*/
			/*СтруктураАдреса.Вставить("Кварт");*/
			/*ТипыАдресов = Новый СписокЗначений;*/
			/*ТипыАдресов.Добавить(СтруктураАдреса, "Структурированный", Истина);*/
			/*ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Произвольный", Ложь);*/
			/*ТипыАдресов.Добавить(Новый Структура("КодСтраны, АдресСтрокой"), "Иностранный", Ложь);*/
			return null;
		}

		public object ПроверитьЗаполнениеОбязательныхПолейТЗ(/*Источник, ТЗ, Знач ПоляТЗ, ИмяТЗ, ТекстОшибки*/)
		{
			if(true/*ТЗ.Количество() > 0*/)
			{
				/*СтруктураОбязательныхКолонок = Новый Структура(ПоляТЗ);*/
			}
			/*ПараметрыЗаполнены = НЕ ЗначениеЗаполнено(ТекстОшибки);*/
			return null;
		}
		// Проверяет заполнение обязательных полей в СтруктуреПараметров, если значением
		// обязательного поля является вложеная структура, то она рекурсивно проверяется
		// в этой же функции, если значением обязательного поля является вложеная таблица
		// значений, то она передаётся на проверку в функцию ПроверитьЗаполнениеОбязательныхПолейТЗ.
		// Список обязательных полей проверяемой структуры, берется из значения элемента
		// структуры с ключем "ОбязательныеПоля"
		// Список обязательных колонок таблицы значений, берется из значения элемента структуры
		// с ключом "ОбязательныеПоляТаблицыЗначений".
		//
		// Параметры:
		//  Источник             - ссылка - сыылка на объект информационной базы.
		//  СтруктураПараметров  - структура - проверяемая структура с данными.
		//  ТекстОшибки - Строка - строка содержащая описание незаполненных полей
		//    проверяемой структуры, может быть показана пользователю в вызывающей процедуре.
		//
		// Возвращаемое значение:
		//  ПараметрыЗаполнены - Булево - Истина - если обязательные поля заполнены, иначе - Ложь.
		//

		public object ПроверитьЗаполнениеОбязательныхПолей(/*Источник, СтруктураПараметров, ТекстОшибки = ""*/)
		{
			/*ОбязательныеПоля = "";*/
			/*ЗначениеПараметра = "";*/
			/*СтруктураОбязательныхПолей = СтруктураПараметров;*/
			if(true/*СтруктураПараметров.Свойство("ОбязательныеПоля", ОбязательныеПоля)*/)
			{
				/*СтруктураОбязательныхПолей = Новый Структура(ОбязательныеПоля);*/
			}
			/*ПараметрыЗаполнены = НЕ ЗначениеЗаполнено(ТекстОшибки);*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Заполнение файлов

		public void ЗаполнитьДанныеПокупателя(/*ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя, ДанныеПокупателя*/)
		{
			/*Результат = СформироватьДеревоРазбора(ИмяФайлаПодчиненногоЭД, НаправлениеЭДПокупателя);*/
			if(true/*Результат <> Неопределено*/)
			{
				/*ДеревоРазбора = Результат.ДеревоРазбора;*/
				/*СтрокаОбъекта = Результат.СтрокаОбъекта;*/
				/*ДанныеПокупателя.Вставить("ДоверенностьНомер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДоверенностьНомер"));*/
				/*ДанныеПокупателя.Вставить("ДоверенностьДата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДоверенностьДата"));*/
				/*ДанныеПокупателя.Вставить("ДоверенностьВыдана", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДоверенностьВыдана"));*/
				/*ДанныеПокупателя.Вставить("ГрузПринялДолжность", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПринялДолжность"));*/
				/*ДанныеПокупателя.Вставить("ГрузПринялФИО", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПринялФИО"));*/
				/*ДанныеПокупателя.Вставить("ГрузПолучилДолжность", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилДолжность"));*/
				/*ДанныеПокупателя.Вставить("ГрузПолучилФИО", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузПолучилФИО"));*/
				/*ДанныеПокупателя.Вставить("ДатаПолучения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПолучения"));*/
			}
		}

		public object ЗаполнитьДолжностноеЛицоФНСCML(/*ОтпускРазрешилXDTO, ДолжностноеЛицо, ТекстОшибки, ПространствоИменСхемы*/)
		{
			/*ОбъектЗаполнен = Ложь;*/
			if(true/*ТипЗнч(ДолжностноеЛицо) = Тип("Структура") И ЗначениеЗаполнено(ДолжностноеЛицо.Фамилия)*/)
			{
				/*ФИОТип = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ФИОТип, "Фамилия", ДолжностноеЛицо.Фамилия, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ФИОТип, "Имя", ДолжностноеЛицо.Имя, Истина, ТекстОшибки);*/
				if(true/*ЗначениеЗаполнено(ДолжностноеЛицо.Отчество)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ФИОТип, "Отчество", ДолжностноеЛицо.Отчество, , ТекстОшибки);*/
				}
				if(true/*ЗначениеЗаполнено(ДолжностноеЛицо.Должность)*/)
				{
					/*ЗаполнитьСвойствоXDTO(ОтпускРазрешилXDTO, "Должность", ДолжностноеЛицо.Должность, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(ОтпускРазрешилXDTO, "ФИО", ФИОТип, Истина, ТекстОшибки);*/
				/*ОбъектЗаполнен = Истина;*/
			}
			return null;
		}

		public object ЗаполнитьДанныеУчастникаФНСCML(/*УчастникXDTO, СтруктураПараметровУчастника, ТекстОшибки, ПространствоИменСхемы*/)
		{
			/*ДанныеЗаполнены = Ложь;*/
			if(true/*ТипЗнч(СтруктураПараметровУчастника.ЭтоФизЛицо) = Тип("Булево")*/)
			{
				/*ИдСв = ПолучитьОбъектТипаCML("УчастникТип.ИдСв", ПространствоИменСхемы);*/
				if(true/*СтруктураПараметровУчастника.ЭтоФизЛицо*/)
				{
					/*СвФЛ = ПолучитьОбъектТипаCML("УчастникТип.ИдСв.СвФЛ", ПространствоИменСхемы);*/
					/*ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", СтруктураПараметровУчастника.ИНН, ,ТекстОшибки);*/
					/*ФИО = ПолучитьОбъектТипаCML("ФИОТип", ПространствоИменСхемы);*/
					/*ЗаполнитьСвойствоXDTO(ФИО, "Фамилия", СтруктураПараметровУчастника.Фамилия,Истина ,ТекстОшибки);*/
					/*ЗаполнитьСвойствоXDTO(ФИО, "Имя", СтруктураПараметровУчастника.Имя, Истина ,ТекстОшибки);*/
					/*ЗаполнитьСвойствоXDTO(ФИО, "Отчество", СтруктураПараметровУчастника.Отчество, , ТекстОшибки);*/
					/*ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИО, , ТекстОшибки);*/
					/*ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, , ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(УчастникXDTO, "ИдСв", ИдСв, , ТекстОшибки);*/
				/*ДанныеЗаполнены = Истина;*/
			}
			if(true/*ЗначениеЗаполнено(СтруктураПараметровУчастника.КодОКПО)*/)
			{
				/*ЗаполнитьСвойствоXDTO(УчастникXDTO, "ОКПО", СтруктураПараметровУчастника.КодОКПО, , ТекстОшибки);*/
				/*ДанныеЗаполнены = Истина;*/
			}
			/*Адрес = "";*/
			if(true/*СтруктураПараметровУчастника.Свойство("Адрес", Адрес)*/)
			{
				/*ЗаполнитьАдресФНС(УчастникXDTO, Адрес, ТекстОшибки, ПространствоИменСхемы);*/
			}
			/*ЕстьДанныеКЗаполнению = Ложь;*/
			/*Контакт = ПолучитьОбъектТипаCML("УчастникТип.Контакт", ПространствоИменСхемы);*/
			if(true/*ЗначениеЗаполнено(СтруктураПараметровУчастника.Телефон)*/)
			{
				/*ЗаполнитьСвойствоXDTO(Контакт, "Тлф", СтруктураПараметровУчастника.Телефон, , ТекстОшибки);*/
				/*ЕстьДанныеКЗаполнению = Истина;*/
			}
			if(true/*ЗначениеЗаполнено(СтруктураПараметровУчастника.Факс)*/)
			{
				/*ЗаполнитьСвойствоXDTO(Контакт, "Факс", СтруктураПараметровУчастника.Факс, , ТекстОшибки);*/
				/*ЕстьДанныеКЗаполнению = Истина;*/
			}
			if(true/*ЕстьДанныеКЗаполнению*/)
			{
				/*ЗаполнитьСвойствоXDTO(УчастникXDTO, "Контакт", Контакт, , ТекстОшибки);*/
				/*ДанныеЗаполнены = Истина;*/
			}
			/*ЕстьДанныеКЗаполнению = Ложь;*/
			/*РеквизитыБанка = "НомерСчета, НаимБанк, БИК";*/
			/*БанковскиеРеквизиты = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв", ПространствоИменСхемы);*/
			/*СвБанк = ПолучитьОбъектТипаCML("УчастникТип.БанкРекв.СвБанк", ПространствоИменСхемы);*/
			if(true/*ЕстьДанныеКЗаполнению*/)
			{
				/*ЗаполнитьСвойствоXDTO(БанковскиеРеквизиты, "СвБанк", СвБанк, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(УчастникXDTO, "БанкРекв", БанковскиеРеквизиты, , ТекстОшибки);*/
				/*ДанныеЗаполнены = Истина;*/
			}
			return null;
		}

		public void СформироватьДанныеПоКонтрагентуCML(/*Контрагент, СтруктураПараметров, ВидКонтрагента, ТекстОшибки, ВерсияСхемы = "4.01", ИмяСвойства = Неопределено*/)
		{
			if(true/*Не ЗначениеЗаполнено(ИмяСвойства)*/)
			{
				/*ИмяСвойства = ВидКонтрагента;*/
			}
			/*ДанныеКонтрагента = Неопределено;*/
			if(true/*НЕ СтруктураПараметров.Свойство(ИмяСвойства, ДанныеКонтрагента)*/)
			{
			}
			/*ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(ДанныеКонтрагента);*/
			/*ИдКонтрагента = ЭлектронныеДокументыПереопределяемый.ПолучитьИДКонтрагента(ДанныеКонтрагента, ВидКонтрагента);*/
			/*ЗаполнитьСвойствоXDTO(Контрагент, "Ид", ИдКонтрагента, Истина, ТекстОшибки);*/
			/*// Заполнение реквизитов юридического или физического лица.
*/
			/*ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента);*/
			/*ПолноеНаименованиеИмя = ?(ЭтоФизЛицо, "ПолноеНаименование", "ОфициальноеНаименование");*/
			/*ПолноеНаименование = "";*/
			/*ДанныеЮрФизЛица.Свойство("ОфициальноеНаименование", ПолноеНаименование);*/
			if(true/*НЕ ЗначениеЗаполнено(ПолноеНаименование)*/)
			{
				/*ПолноеНаименование = ?(ЗначениеЗаполнено(ДанныеЮрФизЛица.ПолноеНаименование), ДанныеЮрФизЛица.ПолноеНаименование,
			ДанныеЮрФизЛица.Представление);*/
			}
			/*РеквизитыКонтрагентаИмя  = ?(ЭтоФизЛицо, "ФизЛицо", "ЮрЛицо");*/
			/*РеквизитыКонтрагентаXDTO = ПолучитьОбъектТипаCML("Контрагент."+РеквизитыКонтрагентаИмя, ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ПолноеНаименованиеИмя, ПолноеНаименование, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ИНН", ДанныеЮрФизЛица.ИНН, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "КПП", ДанныеЮрФизЛица.КПП, , ТекстОшибки);*/
			if(true/*НЕ ЭтоФизЛицо*/)
			{
				/*ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, "ОКПО", ДанныеЮрФизЛица.КодПоОКПО, , ТекстОшибки);*/
			}
			/*// Юр.адрес или адрес регистрации.
*/
			if(true/*ЗначениеЗаполнено(ДанныеЮрФизЛица.ЮридическийАдрес)*/)
			{
				/*ЮридическийАдресИмя  = ?(ЭтоФизЛицо, "АдресРегистрации", "ЮридическийАдрес");*/
				/*ЮридическийАдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(ЮридическийАдресXDTO, "Представление", ДанныеЮрФизЛица.ЮридическийАдрес, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(РеквизитыКонтрагентаXDTO, ЮридическийАдресИмя, ЮридическийАдресXDTO, , ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Контрагент, РеквизитыКонтрагентаИмя, РеквизитыКонтрагентаXDTO, , ТекстОшибки);*/
			/*// РасчетныеСчета.
*/
			/*РасчСчет = Неопределено;*/
			if(true/*((ВидКонтрагента = "Организация" И СтруктураПараметров.Свойство("РасчетныйСчетОрганизации", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетКонтрагента", РасчСчет))
		ИЛИ (ВидКонтрагента = "Организация" И СтруктураПараметров.Свойство("РасчетныйСчетГрузоотправителя", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетГрузоотправителя", РасчСчет))
		ИЛИ (ВидКонтрагента = "Контрагент" И СтруктураПараметров.Свойство("РасчетныйСчетГрузополучателя", РасчСчет)))
		И ЗначениеЗаполнено(РасчСчет)*/)
			{
				/*РасчетныеСчета = ПолучитьОбъектТипаCML("Контрагент.РасчетныеСчета", ВерсияСхемы);*/
				/*РасчетныйСчет = ПолучитьОбъектТипаCML("РасчетныйСчет", ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(РасчетныйСчет, "НомерСчета", РасчСчет.НомерСчета, Истина, ТекстОшибки);*/
				/*// Банк
*/
				/*Банк = ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(Банк, "СчетКорреспондентский", РасчСчет.Банк.КоррСчет, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Банк, "Наименование", РасчСчет.Банк.Наименование, , ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Банк, "БИК", РасчСчет.Банк.Код, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(РасчетныйСчет, "Банк", Банк, Истина, ТекстОшибки);*/
				/*// Банк корреспондент
*/
				if(true/*ЗначениеЗаполнено(РасчСчет.БанкДляРасчетов)*/)
				{
					/*БанкКорр = ПолучитьОбъектТипаCML("Банк", ВерсияСхемы);*/
					/*ЗаполнитьСвойствоXDTO(БанкКорр, "СчетКорреспондентский", РасчСчет.БанкДляРасчетов.КоррСчет, , ТекстОшибки);*/
					/*ЗаполнитьСвойствоXDTO(БанкКорр, "Наименование", РасчСчет.БанкДляРасчетов.Наименование, , ТекстОшибки);*/
					/*ЗаполнитьСвойствоXDTO(БанкКорр, "БИК", РасчСчет.БанкДляРасчетов.Код, Истина, ТекстОшибки);*/
					/*ЗаполнитьСвойствоXDTO(РасчетныйСчет, "БанкКорреспондент", БанкКорр, , ТекстОшибки);*/
				}
				/*РасчетныеСчета.РасчетныйСчет.Добавить(РасчетныйСчет);*/
				/*ЗаполнитьСвойствоXDTO(Контрагент, "РасчетныеСчета", РасчетныеСчета, , ТекстОшибки);*/
			}
			/*// Адрес
*/
			if(true/*ТипЗнч(ДанныеЮрФизЛица) = Тип("Структура") И ДанныеЮрФизЛица.Свойство("ФактическийАдрес")
		И ЗначениеЗаполнено(ДанныеЮрФизЛица.ФактическийАдрес)*/)
			{
				/*АдресXDTO = ПолучитьОбъектТипаCML("Адрес", ВерсияСхемы);*/
				/*ЗаполнитьСвойствоXDTO(АдресXDTO, "Представление", ДанныеЮрФизЛица.ФактическийАдрес, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресXDTO, , ТекстОшибки);*/
			}
			/*// Контакты организации
*/
			if(true/*(ВидКонтрагента = "Организация")*/)
			{
				/*ТаблицаКонтактов = ЭлектронныеДокументыПереопределяемый.ПолучитьКонтактнуюИнформацию(ДанныеКонтрагента);*/
				if(true/*ТаблицаКонтактов.Количество()>0*/)
				{
					/*Контакты = ПолучитьОбъектТипаCML("Контрагент.Контакты", ВерсияСхемы);*/
					/*ЕстьКонтакты = Ложь;*/
					if(true/*ЕстьКонтакты*/)
					{
						/*ЗаполнитьСвойствоXDTO(Контрагент, "Контакты",	Контакты, , ТекстОшибки);*/
					}
				}
			}
		}

		public void СформироватьДанныеПоКонтрагентуЭСФ(/*Контрагент, СтруктураПараметров, ВидКонтрагента, ТекстОшибки, ПространствоИменСхемы*/)
		{
			/*ДанныеКонтрагента = Неопределено;*/
			if(true/*НЕ СтруктураПараметров.Свойство(ВидКонтрагента, ДанныеКонтрагента)*/)
			{
			}
			/*ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(ДанныеКонтрагента);*/
			/*ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента);*/
			/*ИдСв = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв", ПространствоИменСхемы);*/
			if(true/*ЭтоФизЛицо*/)
			{
				/*СвФЛ = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвФЛ", ПространствоИменСхемы);*/
				/*ЗаполнитьСвойствоXDTO(СвФЛ, "ИННФЛ", ДанныеЮрФизЛица.ИНН, ,ТекстОшибки);*/
				/*ФИОИП = ПолучитьОбъектТипаCML("СвПродПокТип.ИдСв.СвФЛ.ФИОИП", ПространствоИменСхемы);*/
				/*ЗаполнитьФИОЭСФ(ФИОИП, ДанныеЮрФизЛица.ОфициальноеНаименование, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(СвФЛ, "ФИОИП", ФИОИП, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ИдСв, "СвФЛ",  СвФЛ, Истина, ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Контрагент, "ИдСв", ИдСв, Истина, ТекстОшибки);*/
			/*ЮрАдрес = ЭлектронныеДокументыСлужебный.ПолучитьАдресСтруктурой(СтруктураПараметров, ВидКонтрагента, "Юр", ТекстОшибки);*/
			if(true/*ЗначениеЗаполнено(ЮрАдрес)*/)
			{
				/*ЗаполнитьАдресФНСУстаревший(Контрагент, ЮрАдрес, ТекстОшибки, ПространствоИменСхемы);*/
			}
		}

		public void СформироватьДанныеПоГрузоотправителюЭСФ(/*Контрагент, СтруктураПараметров, ВидКонтрагента, ТекстОшибки, ПространствоИменСхемы*/)
		{
			/*ДанныеКонтрагента = Неопределено;*/
			if(true/*НЕ СтруктураПараметров.Свойство(ВидКонтрагента, ДанныеКонтрагента)*/)
			{
			}
			/*ЭтоФизЛицо = ЭлектронныеДокументыПереопределяемый.ЭтоФизЛицо(ДанныеКонтрагента);*/
			/*ДанныеЮрФизЛица = ЭлектронныеДокументыПереопределяемый.ПолучитьДанныеЮрФизЛица(ДанныеКонтрагента);*/
			/*НаимГОП = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип.НаимГОП", ПространствоИменСхемы);*/
			if(true/*ЭтоФизЛицо*/)
			{
				/*ФИОИП = ПолучитьОбъектТипаCML("СвГрузОтпрПолТип.НаимГОП.ФИОИП",  ПространствоИменСхемы);*/
				/*ЗаполнитьФИОЭСФ(ФИОИП, ДанныеЮрФизЛица.ПолноеНаименование, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(НаимГОП, "ФИОИП", ФИОИП, Истина, ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Контрагент, "НаимГОП", НаимГОП, Истина, ТекстОшибки);*/
			/*АдресМестонахождения = ЭлектронныеДокументыСлужебный.ПолучитьАдресСтруктурой(СтруктураПараметров, ВидКонтрагента,
		"Факт", ТекстОшибки);*/
			if(true/*ЗначениеЗаполнено(АдресМестонахождения)*/)
			{
				/*ЗаполнитьАдресФНСУстаревший(Контрагент, АдресМестонахождения, ТекстОшибки, ПространствоИменСхемы);*/
			}
		}

		public void ЗаполнитьФИОЭСФ(/*Получатель, Источник, ТекстОшибки*/)
		{
			/*Фамилия = "";*/
			/*Имя = "";*/
			/*Отчество = "";*/
			/*ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(Источник, Фамилия, Имя, Отчество);*/
			/*ЗаполнитьСвойствоXDTO(Получатель, "Фамилия", Фамилия,Истина ,ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Получатель, "Имя", Имя, Истина ,ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Получатель, "Отчество", Отчество, , ТекстОшибки);*/
		}

		public void ЗаполнитьАдресФНС(/*Контрагент, АдресМестонахождения, ТекстОшибки, ПространствоИменСхемы*/)
		{
			if(true/*ТипЗнч(АдресМестонахождения) = Тип("СписокЗначений")*/)
			{
				/*ЗаполненныйТип = Неопределено;*/
				if(true/*ЗаполненныйТип <> Неопределено И ТипЗнч(ЗаполненныйТип.Значение) = Тип("Структура")*/)
				{
					/*АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);*/
					/*СхемаСчетаФактуры = (Найти(ПространствоИменСхемы, "SFAKT") <> 0);*/
					/*Адрес = ЗаполненныйТип.Значение;*/
					if(true/*ЗаполненныйТип.Представление = "Структурированный"*/)
					{
						/*АдрРФ = ПолучитьОбъектТипаCML("АдресТип.АдрРФ", ПространствоИменСхемы);*/
						/*ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", Адрес.КодРегион, СхемаСчетаФактуры, ТекстОшибки);*/
						/*РеквизитыАдреса = "Индекс, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";*/
						/*ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, СхемаСчетаФактуры, ТекстОшибки);*/
					}
					/*ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, СхемаСчетаФактуры, ТекстОшибки);*/
				}
			}
		}

		public void ЗаполнитьАдресФНСУстаревший(/*Контрагент, АдресМестонахождения, ТекстОшибки, ПространствоИменСхемы*/)
		{
			if(true/*ТипЗнч(АдресМестонахождения) = Тип("Структура")*/)
			{
				/*АдресТип = ПолучитьОбъектТипаCML("АдресТип", ПространствоИменСхемы);*/
				/*СхемаСчетаФактуры = (Найти(ПространствоИменСхемы, "SFAKT") <> 0);*/
				/*ЭтоАдресПоКлассификатору = Ложь;*/
				if(true/*АдресМестонахождения.Свойство("АдресРФ", ЭтоАдресПоКлассификатору) И ЭтоАдресПоКлассификатору = Истина*/)
				{
					/*АдрРФ = ПолучитьОбъектТипаCML("АдресТип.АдрРФ", ПространствоИменСхемы);*/
					/*ЗаполнитьСвойствоXDTO(АдрРФ, "КодРегион", АдресМестонахождения.КодРегион, СхемаСчетаФактуры, ТекстОшибки);*/
					/*РеквизитыАдреса = "Индекс, Район, Город, НаселПункт, Улица, Дом, Корпус, Кварт";*/
					/*ЗаполнитьСвойствоXDTO(АдресТип, "АдрРФ", АдрРФ, СхемаСчетаФактуры, ТекстОшибки);*/
				}
				/*ЗаполнитьСвойствоXDTO(Контрагент, "Адрес", АдресТип, СхемаСчетаФактуры, ТекстОшибки);*/
			}
		}

		public void СформироватьДанныеПоТоваруCML(/*Товар, СтруктураПараметров, ТекстОшибки, ВерсияСхемы = "4.01"*/)
		{
			/*ЗаполнитьСвойствоXDTO(Товар, "Ид", СтруктураПараметров.Ид,Истина,ТекстОшибки);*/
			if(true/*СтруктураПараметров.Владелец().Колонки.Найти("ШтрихКод") <> Неопределено*/)
			{
				/*ЗаполнитьСвойствоXDTO(Товар, "ШтрихКод", СтруктураПараметров.ШтрихКод,,ТекстОшибки);*/
			}
			if(true/*СтруктураПараметров.Владелец().Колонки.Найти("Артикул") <> Неопределено*/)
			{
				/*ЗаполнитьСвойствоXDTO(Товар, "Артикул", СтруктураПараметров.Артикул,,ТекстОшибки);*/
			}
			if(true/*СтруктураПараметров.Владелец().Колонки.Найти("ИДТовара") <> Неопределено*/)
			{
				/*ЗаполнитьСвойствоXDTO(Товар, "ИДТовара", СтруктураПараметров.ИДТовара,,ТекстОшибки);*/
			}
			/*ЗаполнитьСвойствоXDTO(Товар, "Наименование", СтруктураПараметров.Наименование, Истина,ТекстОшибки);*/
			/*БазоваяЕдиница = ПолучитьОбъектТипаCML("Товар.БазоваяЕдиница", ВерсияСхемы);*/
			/*ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Код", СтруктураПараметров.БазоваяЕдиницаКод, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "Наименование", СтруктураПараметров.БазоваяЕдиницаНаименование, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "НаименованиеПолное", СтруктураПараметров.БазоваяЕдиницаНаименованиеПолное, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(БазоваяЕдиница, "МеждународноеСокращение", СтруктураПараметров.БазоваяЕдиницаМеждународноеСокращение, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Товар, "БазоваяЕдиница", БазоваяЕдиница, Истина, ТекстОшибки);*/
			if(true/*СтруктураПараметров.Владелец().Колонки.Найти("Описание") <> Неопределено*/)
			{
				/*ЗаполнитьСвойствоXDTO(Товар, "Описание", СтруктураПараметров.Описание, , ТекстОшибки);*/
			}
			if(true/*СтруктураПараметров.Владелец().Колонки.Найти("ДополнительныеРеквизиты") <> Неопределено*/)
			{
				/*ЗначениеРеквизита = ПолучитьОбъектТипаCML("ЗначениеРеквизита", ВерсияСхемы);*/
			}
		}

		public void СформироватьДанныеПоЭтапамГрафикаОплатыCML(/*ЭтапГрафикаОплаты, СтруктураПараметров, ТекстОшибки, МассивКолонок*/)
		{
		}

		public void СформироватьДанныеПоЕдиницеИзмеренияCML(/*ЕдиницаИзмерения, СтруктураПараметров, ТекстОшибки*/)
		{
			/*ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Код", СтруктураПараметров.ЕдиницаИзмеренияКод, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Наименование", СтруктураПараметров.ЕдиницаИзмеренияНаименование, ,ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ЕдиницаИзмерения, "Коэффициент", СтруктураПараметров.Коэффициент, , ТекстОшибки);*/
		}

		public void УстановитьЗначениеXDTO(/*ОбъектXDTO, ИмяСвойства, Значение, ТекстОшибки*/)
		{
			/*Попытка
		ОбъектXDTO.Установить(ИмяСвойства, Значение);*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = 'Ошибка установки значения свойства ""%1""!'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ИмяСвойства);*/
			/*ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.ПС + ТекстСообщения, ТекстСообщения);*/
			/*ЭлектронныеДокументыСлужебный.ЗаписатьОшибкуПоЭД("Заполнение XDTO", ТекстСообщения + Символы.ПС
			+ ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));*/
			/*КонецПопытки;*/
		}

		public object XMLЧисло(/*Значение*/)
		{
			return null;
		}

		public object XMLДатаВремя(/*Значение*/)
		{
			if(true/*ЗначениеЗаполнено(Значение)*/)
			{
			}
			return null;
		}

		public object XMLДата(/*Значение*/)
		{
			if(true/*ЗначениеЗаполнено(Значение)*/)
			{
			}
			return null;
		}

		public object ДатаДД_ММ_ГГГГ(/*ДатаВремя*/)
		{
			if(true/*ТипЗнч(ДатаВремя) = Тип("Дата")*/)
			{
				/*ВозврЗначение = Формат(ДатаВремя, "ДФ=dd.MM.yyyy");*/
			}
			return null;
		}

		public object ВернутьНомерВерсииИзИдЭД(/*ИдОтправителя*/)
		{
			/*НомерВерсии = 0;*/
			/*НачПозиция = Найти(ИдОтправителя, "##");*/
			if(true/*НачПозиция > 0*/)
			{
				/*НомерВерсии = Сред(ИдОтправителя, НачПозиция + 2, СтрДлина(ИдОтправителя) - (НачПозиция + 1));*/
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// CML

		public object ПолучитьТипОбъектаCML(/*Тип, ВерсияСхемы*/)
		{
			/*МассивПути = СтрРазделить(Тип, ".");*/
			/*ПервыйЭлемент = МассивПути[0];*/
			if(true/*Лев(ПервыйЭлемент,1) = "{" И Прав(ПервыйЭлемент,1) = "}"*/)
			{
				/*ИмяПакета = Сред(ПервыйЭлемент, 2, СтрДлина(ПервыйЭлемент) - 2);*/
				/*Коллекция = ФабрикаXDTO.Пакеты.Получить(ИмяПакета).КорневыеСвойства;*/
			}
			/*МассивПути.Удалить(0);*/
			while(true/*МассивПути.Количество() > 0*/)
			{
				if(true/*Коллекция = Неопределено*/)
				{
				}
				/*Свойство = Коллекция.Получить(МассивПути[0]);*/
				if(true/*Свойство = Неопределено*/)
				{
				}
				/*ТипОбъекта = Свойство.Тип;*/
				/*МассивПути.Удалить(0);*/
				/*Попытка
			Коллекция = ТипОбъекта.Свойства;*/
				/*Исключение
			Коллекция = Неопределено;*/
				/*КонецПопытки;*/
			}
			return null;
		}

		public object ПолучитьЗначениеТипаCML(/*Тип, Значение*/)
		{
			if(true/*ТипЗнч(Тип) = Тип("Строка")*/)
			{
				/*ТипЗначения = ПолучитьТипЗначенияCML(Тип);*/
			}
			if(true/*ТипЗначения = Неопределено*/)
			{
			}
			/*НовоеЗначение = ФабрикаXDTO.Создать(ТипЗначения, Значение);*/
			return null;
		}

		public object СтрРазделить(/*Знач Строка, Разделитель*/)
		{
			/*Результат = Новый Массив;*/
			if(true/*ПустаяСтрока(Строка)*/)
			{
			}
			/*НачПозицияПервогоЭлемента = Найти(Строка, "{");*/
			/*КонПозицияПервогоЭлемента = Найти(Строка, "}");*/
			if(true/*НачПозицияПервогоЭлемента > 0 И КонПозицияПервогоЭлемента > 0*/)
			{
				/*ПервыйЭлемент = Сред(Строка, НачПозицияПервогоЭлемента, КонПозицияПервогоЭлемента);*/
				/*Результат.Добавить(СокрЛП(ПервыйЭлемент));*/
				/*Строка = СокрЛП(Сред(Строка,КонПозицияПервогоЭлемента + 2));*/
			}
			while(true/*Истина*/)
			{
				/*Позиция = Найти(Строка,Разделитель);*/
				if(true/*Позиция = 0*/)
				{
					/*Прервать;*/
				}
				/*Результат.Добавить(СокрЛП(Лев(Строка,Позиция - 1)));*/
				/*Строка = СокрЛП(Сред(Строка,Позиция + 1));*/
			}
			/*;
	
	Результат.Добавить(СокрЛП(Строка));*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Разбор файлов

		public void ПрочитатьАктОПриемкеXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*НовыйЭД.ИД = ЭД.Ид;*/
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктВыполненныхРабот;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("Валюта");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ВалютаXDTO = ЭД.Получить(СвойствоЭД);*/
				/*СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");*/
				if(true/*СвойствоКодОКВ<>Неопределено*/)
				{
					/*КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);*/
					/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");*/
					/*ДопРеквизиты = Новый Структура;*/
					/*ДопРеквизиты.Вставить("Код", КодВалюты);*/
					/*Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));*/
					/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);*/
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);*/
				}
				/*СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");*/
				if(true/*СвойствоКурс<>Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));*/
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);*/
				/*СвойствоСуммаОбщая = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаОбщая");*/
				if(true/*СвойствоСуммаОбщая <> Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ИтогоПоДокументуXDTO.Получить(СвойствоСуммаОбщая));*/
				}
				/*СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");*/
				if(true/*СвойствоЦенаВключаетНДС <> Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС));*/
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Исполнитель");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*Исполнитель = ЭД.Получить(СвойствоЭД);*/
				if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
				{
					/*ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");*/
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Заказчик");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*Заказчик = ЭД.Получить(СвойствоЭД);*/
				if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
				{
					/*ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");*/
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ТекстДокумента");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ТекстДокумента = ЭД.Получить(СвойствоЭД);*/
				/*СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("Заголовок");*/
				if(true/*СвойствоЗаголовок <> Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Заголовок", ТекстДокумента.Получить(СвойствоЗаголовок));*/
				}
				/*СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("ОписаниеВыполненныхРабот");*/
				if(true/*СвойствоЗаголовок <> Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОписаниеВыполненныхРабот", ТекстДокумента.Получить(СвойствоЗаголовок));*/
				}
				/*СвойствоЗаголовок = ТекстДокумента.Свойства().Получить("Претензии");*/
				if(true/*СвойствоЗаголовок <> Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Претензии", ТекстДокумента.Получить(СвойствоЗаголовок));*/
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ИтогиПрописью");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.Получить(СвойствоЭД));*/
			}
			/*НаборДанных = ЭД["Товары"].Товар;*/
			/*ПрочитатьДанныеПоТЧАктаОПриемке(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);*/
		}

		public void ПрочитатьАкт501XDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктИсполнитель;*/
			/*ДеревоДопДанных = Неопределено;*/
			/*СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");*/
			if(true/*СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений")*/)
			{
				/*ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;*/
			}
			/*ИнфПол = ЭД.Документ.СвАктИ.ИнфПол;*/
			if(true/*ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено*/)
			{
				/*ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");*/
			}
			if(true/*ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений")*/)
			{
				/*ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);*/
				/*СтрокаВалюты = НовыйЭД.Строки.Найти("ВалютаКод", "Реквизит", Истина);*/
				if(true/*СтрокаВалюты <> Неопределено*/)
				{
					/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");*/
					/*КодВалюты = СтрокаВалюты.ЗначениеРеквизита;*/
					/*ДопРеквизиты = Новый Структура;*/
					/*ДопРеквизиты.Вставить("Код", КодВалюты);*/
					/*Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));*/
					/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: "+КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);*/
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);*/
				}
			}
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвАктИ.НомАкт);*/
			/*ДатаДок = ЭД.Документ.СвАктИ.ДатаАкт;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Заголовок", ЭД.Документ.СвАктИ.Заголовок);*/
			/*Исполнитель = ЭД.Документ.СвАктИ.Исполнитель;*/
			if(true/*Исполнитель <> Неопределено*/)
			{
				if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани*/)
				{
					/*ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Исполнитель");*/
				}
			}
			/*Заказчик = ЭД.Документ.СвАктИ.Заказчик;*/
			if(true/*Заказчик <> Неопределено*/)
			{
				if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани*/)
				{
					/*ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Заказчик");*/
				}
			}
			/*НаборДанныхОписанияРабот = ЭД.Документ.СвАктИ.ОписРабот;*/
			if(true/*ТипЗнч(НаборДанныхОписанияРабот) = Тип("СписокXDTO")*/)
			{
				/*Сч = 1;*/
			}
			/*СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");*/
			if(true/*СтрокаДерева = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);*/
			}
		}

		public void ПрочитатьАкт501ЗаказчикXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.АктЗаказчик;*/
			/*ДеревоДопДанных = Неопределено;*/
			/*СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");*/
			if(true/*СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений")*/)
			{
				/*ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;*/
			}
			/*ИнфПол = ЭД.Документ.СвАктИ.ИнфПол;*/
			if(true/*ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено*/)
			{
				/*ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");*/
			}
			if(true/*ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений")*/)
			{
				/*ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);*/
			}
			if(true/*ЭД.Документ.СвАктИ.Принял <> Неопределено*/)
			{
				/*ДатаДок = ЭД.Документ.СвАктИ.Принял.ДатаЗаказ;*/
				/*ДатаПолучения = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2));*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);*/
				if(true/*ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ <> Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьНомер", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.НомДоверен);*/
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьДата", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ДатаДоверен);*/
					/*ДоверенностьВыдана = "";*/
					if(true/*ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем <> Неопределено*/)
					{
						/*ВспомСтруктура = Новый Структура;*/
						/*ВспомСтруктура.Вставить("Организация", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.НаимОргКем);*/
						/*ВспомСтруктура.Вставить("Должность", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ДолжнКем);*/
						/*ВспомСтруктура.Вставить("ДопСведения", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ДопСведКем);*/
						if(true/*ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО <> Неопределено*/)
						{
							/*ВспомСтруктура.Вставить("ФИО", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО.Фамилия + " "
						+ ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО.Имя + " "
						+ ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКем.ФИО.Отчество);*/
						}
					}
					if(true/*ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому <> Неопределено*/)
					{
						/*ВспомСтруктура = Новый Структура;*/
						/*ВспомСтруктура.Вставить("Должность", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.Должн);*/
						/*ВспомСтруктура.Вставить("ДопСведения", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ДопСведКому);*/
						if(true/*ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО <> Неопределено*/)
						{
							/*ВспомСтруктура.Вставить("ФИО", ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО.Фамилия + " "
						+ ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО.Имя + " "
						+ ЭД.Документ.СвАктИ.Принял.ДоверенЗаказ.ВыданаКому.ФИО.Отчество);*/
						}
					}
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьВыдана", ДоверенностьВыдана);*/
					if(true/*ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ <> Неопределено*/)
					{
						/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялДолжность", ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.Должность);*/
						if(true/*ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО <> Неопределено*/)
						{
							/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПринялФИО", ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО.Фамилия + " "
						+ ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО.Имя + " " + ЭД.Документ.СвАктИ.Принял.ПодписьЗаказ.ФИО.Отчество);*/
						}
					}
				}
			}
			/*СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");*/
			if(true/*СтрокаДерева = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);*/
			}
		}

		public void ПрочитатьТОРГ12XDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Продавец;*/
			/*ДеревоДопДанных = Неопределено;*/
			/*СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");*/
			if(true/*СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений")*/)
			{
				/*ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;*/
			}
			/*ИнфПол = ЭД.Документ.СвТНО.ИнфПол;*/
			if(true/*ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено*/)
			{
				/*ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");*/
			}
			if(true/*ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений")*/)
			{
				/*ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);*/
				/*СтрокаВалюты = НовыйЭД.Строки.Найти("ВалютаКод", "Реквизит", Истина);*/
				if(true/*СтрокаВалюты <> Неопределено*/)
				{
					/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");*/
					/*КодВалюты = СтрокаВалюты.ЗначениеРеквизита;*/
					/*ДопРеквизиты = Новый Структура;*/
					/*ДопРеквизиты.Вставить("Код", КодВалюты);*/
					/*Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));*/
					/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, КодВалюты, "Код валюты: "+КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);*/
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);*/
				}
			}
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвТНО.ТН.НомТН);*/
			/*ДатаДок = ЭД.Документ.СвТНО.ТН.ДатаТН;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)));*/
			/*СуммаДокумента = ?(ЗначениеЗаполнено(ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс), ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс,
		ЭД.Документ.СвТНО.ОтпускГруз.СумОтпуск);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаДокумента);*/
			/*Грузоотправитель = Неопределено;*/
			/*ДопПараметрыГрузоотправителя = Новый Структура;*/
			/*Поставщик = ЭД.Документ.СвТНО.Поставщик;*/
			if(true/*ЭД.Документ.СвТНО.ГрузОт <> Неопределено И ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр <> Неопределено*/)
			{
				/*ДопПараметрыГрузоотправителя.Вставить("СтруктурноеПодразделение", ЭД.Документ.СвТНО.ГрузОт.СтруктПодр);*/
				/*ДопПараметрыГрузоотправителя.Вставить("ОКДП", ЭД.Документ.СвТНО.ГрузОт.ОКДП);*/
				/*Грузоотправитель = ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр;*/
				if(true/*Не ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт = Неопределено*/)
				{
					if(true/*НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф = Неопределено*/)
					{
						/*ДопПараметрыГрузоотправителя.Вставить("Телефоны", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Тлф);*/
					}
					if(true/*НЕ ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс = Неопределено*/)
					{
						/*ДопПараметрыГрузоотправителя.Вставить("Факс", ЭД.Документ.СвТНО.ГрузОт.ГрузОтпр.Контакт.Факс);*/
					}
				}
			}
			if(true/*ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено*/)
			{
				if(true/*ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш <> Неопределено*/)
				{
					/*ДопПараметрыГрузоотправителя.Вставить("ДолжностьРуководителя", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.Должность);*/
					/*ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускРазреш.ФИО;*/
					/*ДопПараметрыГрузоотправителя.Вставить("ФИОРуководителя",
				ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество));*/
				}
				if(true/*ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер <> Неопределено*/)
				{
					/*ДопПараметрыГрузоотправителя.Вставить("ДолжностьГлавБухгалтера", ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.Должность);*/
					/*ФИО = ЭД.Документ.СвТНО.ОтпускГруз.Бухгалтер.ФИО;*/
					/*ДопПараметрыГрузоотправителя.Вставить("ФИОГлавБухгалтера",
				ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество));*/
				}
				if(true/*ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв <> Неопределено*/)
				{
					/*ДопПараметрыГрузоотправителя.Вставить("ДолжностьКладовщика", ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.Должность);*/
					/*ФИО = ЭД.Документ.СвТНО.ОтпускГруз.ОтпускПроизв.ФИО;*/
					/*ДопПараметрыГрузоотправителя.Вставить("ФИОКладовщика",
				ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(ФИО.Фамилия + " " + ФИО.Имя + " " + ФИО.Отчество));*/
				}
			}
			if(true/*Грузоотправитель <> Неопределено*/)
			{
				/*ПрочитатьДанныеКонтрагента(Грузоотправитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузоотправитель");*/
				if(true/*ДопПараметрыГрузоотправителя.Количество() > 0*/)
				{
					/*ИндексУзла = ДеревоРазбора.Строки.Найти("Грузоотправитель", "Реквизит", Истина);*/
					if(true/*ИндексУзла <> Неопределено И ЗначениеЗаполнено(ИндексУзла.ЗначениеРеквизита)*/)
					{
						/*СтрокаГрузоотправителя = ДеревоРазбора.Строки.Найти(ИндексУзла.ЗначениеРеквизита, "ИндексСтроки", Истина);*/
						if(true/*СтрокаГрузоотправителя <> Неопределено*/)
						{
						}
					}
				}
			}
			if(true/*ЭД.Документ.СвТНО.ГрузПолуч <> Неопределено*/)
			{
				/*ПрочитатьДанныеКонтрагента(ЭД.Документ.СвТНО.ГрузПолуч, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузополучатель");*/
			}
			/*// Грузоотправитель и Поставщик - необязательные элементы xsd-схемы,
*/
			/*// но один из этих элементов обязательно должен быть заполнен
*/
			/*// (Согласно подп. "в" п.2 ст. 9 Федерального закона от 21.11.1996 №129-ФЗ).
*/
			if(true/*Поставщик = Неопределено*/)
			{
				/*Поставщик = Грузоотправитель;*/
			}
			if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани*/)
			{
				/*ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");*/
			}
			/*Плательщик = ЭД.Документ.СвТНО.Плательщик;*/
			if(true/*Плательщик <> Неопределено*/)
			{
				if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани*/)
				{
					/*ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");*/
				}
			}
			if(true/*ЭД.Документ.СвТНО.Основание <> Неопределено*/)
			{
				/*ДатаПоДаннымКлиента = ЭД.Документ.СвТНО.Основание.ДатаОсн;*/
				if(true/*ЗначениеЗаполнено(ДатаПоДаннымКлиента)*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", Дата(Сред(ДатаПоДаннымКлиента, 7, 4)
				+ Сред(ДатаПоДаннымКлиента, 4, 2) + Сред(ДатаПоДаннымКлиента, 1, 2)));*/
				}
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", ЭД.Документ.СвТНО.Основание.НомОсн);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НаименованиеОснования", ЭД.Документ.СвТНО.Основание.НаимОсн);*/
			}
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКУД", ЭД.Документ.СвТНО.ОКУДПервДок);*/
			if(true/*ЭД.Документ.СвТНО.ТН.ТНОбщ <> Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписей", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗап);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписейПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.КолНомЗапПр);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМест", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМест);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМестПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.ВсМестПр);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "МассаГрузаПрописью", ЭД.Документ.СвТНО.ТН.ТНОбщ.БруттоПр);*/
			}
			if(true/*ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл <> Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаБезНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумБезНДСВс);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумНДСВс);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСУчетомНДС", ЭД.Документ.СвТНО.ТН.Таблица.ВсегоНакл.СумУчНДСВс);*/
			}
			if(true/*ЭД.Документ.СвТНО.ОтпускГруз <> Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВсегоПрописью", ЭД.Документ.СвТНО.ОтпускГруз.СумОтпускПр);*/
				/*ДатаДок = ЭД.Документ.СвТНО.ОтпускГруз.ДатаОтпуск;*/
				if(true/*ЗначениеЗаполнено(ДатаДок)*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтпуска", Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2)));*/
				}
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЛистовВПрилПрописью", ЭД.Документ.СвТНО.ОтпускГруз.КолПрилПр);*/
			}
			/*НаборДанных = ЭД.Документ.СвТНО.ТН.Таблица.СвТов;*/
			/*// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры
*/
			/*АвторЭДПокупатель = Ложь;*/
			/*ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);*/
			if(true/*ТипЗнч(НаборДанных) = Тип("СписокXDTO")*/)
			{
			}
			/*СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");*/
			if(true/*СтрокаДерева = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);*/
			}
		}

		public void ПрочитатьТОРГ12ПокупательXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12Покупатель;*/
			/*ДеревоДопДанных = Неопределено;*/
			/*СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");*/
			if(true/*СтрокаДерева <> Неопределено И ТипЗнч(СтрокаДерева.ЗначениеРеквизита) = Тип("ДеревоЗначений")*/)
			{
				/*ДеревоДопДанных = СтрокаДерева.ЗначениеРеквизита;*/
			}
			/*ИнфПол = ЭД.Документ.СвТНП.ИнфПол;*/
			if(true/*ИнфПол <> Неопределено И ИнфПол.ТекстИнф <> Неопределено*/)
			{
				/*ПрочитатьИнфПол(ИнфПол.ТекстИнф, ДеревоДопДанных, "Шапка");*/
			}
			if(true/*ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений")*/)
			{
				/*ЗаполнитьШапкуПоДопДанным(ДеревоДопДанных, НовыйЭД, Ошибка);*/
			}
			if(true/*ЭД.Документ.СвТНП.ПолучилГруз <> Неопределено*/)
			{
				/*ДатаДок = ЭД.Документ.СвТНП.ПолучилГруз.ДатаПолуч;*/
				/*ДатаПолучения = Дата(Сред(ДатаДок, 7, 4) + Сред(ДатаДок, 4, 2) + Сред(ДатаДок, 1, 2));*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения", ДатаПолучения);*/
				if(true/*ЭД.Документ.СвТНП.ПолучилГруз.Доверенность <> Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьНомер", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.НомДоверен);*/
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьДата", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ДатаДоверен);*/
					/*ДоверенностьВыдана = "";*/
					if(true/*ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем <> Неопределено*/)
					{
						/*ВспомСтруктура = Новый Структура;*/
						/*ВспомСтруктура.Вставить("Организация", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.НаимОргКем);*/
						/*ВспомСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДолжнКем);*/
						/*ВспомСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ДопСведКем);*/
						if(true/*ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО <> Неопределено*/)
						{
							/*ВспомСтруктура.Вставить("ФИО", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО.Фамилия + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО.Имя + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКем.ФИО.Отчество);*/
						}
					}
					if(true/*ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому <> Неопределено*/)
					{
						/*ВспомСтруктура = Новый Структура;*/
						/*ВспомСтруктура.Вставить("Должность", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.Должн);*/
						/*ВспомСтруктура.Вставить("ДопСведения", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ДопСведКому);*/
						if(true/*ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО <> Неопределено*/)
						{
							/*ВспомСтруктура.Вставить("ФИО", ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО.Фамилия + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО.Имя + " "
						+ ЭД.Документ.СвТНП.ПолучилГруз.Доверенность.ВыданаКому.ФИО.Отчество);*/
						}
					}
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДоверенностьВыдана", ДоверенностьВыдана);*/
				}
				if(true/*ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял <> Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.Должность);*/
					if(true/*ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО <> Неопределено*/)
					{
						/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПринялФИО", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО.Фамилия + " "
					+ ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО.Имя + " " + ЭД.Документ.СвТНП.ПолучилГруз.ГрузПринял.ФИО.Отчество);*/
					}
				}
				if(true/*ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил <> Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилДолжность", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.Должность);*/
					if(true/*ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО <> Неопределено*/)
					{
						/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузПолучилФИО", ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО.Фамилия + " "
					+ ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО.Имя + " " + ЭД.Документ.СвТНП.ПолучилГруз.ГрузПолучил.ФИО.Отчество);*/
					}
				}
			}
			/*СтрокаДерева = НовыйЭД.Строки.Найти("ДеревоДопДанных", "Реквизит");*/
			if(true/*СтрокаДерева = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);*/
			}
		}

		public void ПрочитатьНакладнуюXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*// Уникальный номер ЭД в разрезе участников обмена
*/
			/*НовыйЭД.ИД = ЭД.Ид;*/
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ТОРГ12;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);*/
			/*// Валюта, курс
*/
			/*СвойствоЭД = ЭД.Свойства().Получить("Валюта");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ВалютаXDTO = ЭД.Получить(СвойствоЭД);*/
				if(true/*Не ВалютаXDTO = Неопределено*/)
				{
					/*СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");*/
					if(true/*СвойствоКодОКВ <> Неопределено*/)
					{
						/*КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);*/
						/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");*/
						/*ДопРеквизиты = Новый Структура;*/
						/*ДопРеквизиты.Вставить("Код", КодВалюты);*/
						/*Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));*/
						/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, КодВалюты, "Код валюты: "+КодВалюты,
					Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);*/
						/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);*/
					}
					/*СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");*/
					if(true/*СвойствоКурс <> Неопределено*/)
					{
						/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));*/
					}
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("СуммаВсего");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", ЭД.Получить(СвойствоЭД));*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Грузоотправитель");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*Грузоотправитель = ЭД.Получить(СвойствоЭД);*/
				/*ПрочитатьДанныеКонтрагента(Грузоотправитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузоотправитель");*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Грузополучатель");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*Грузополучатель = ЭД.Получить(СвойствоЭД);*/
				/*ПрочитатьДанныеКонтрагента(Грузополучатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Грузополучатель");*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Поставщик");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*Поставщик = ЭД.Получить(СвойствоЭД);*/
				if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани*/)
				{
					/*ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");*/
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Плательщик");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*Плательщик = ЭД.Получить(СвойствоЭД);*/
				if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
			ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани*/)
				{
					/*ПрочитатьДанныеКонтрагента(Плательщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");*/
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Основание");*/
			if(true/*СвойствоЭД<>Неопределено*/)
			{
				/*Основание = ЭД.Получить(СвойствоЭД);*/
				if(true/*НЕ Основание=Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПоДаннымКлиента", Основание.ДатаДокументаОснования);*/
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерПоДаннымКлиента", Основание.НомерДокументаОснования);*/
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ОКУД");*/
			if(true/*СвойствоЭД<>Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОКУД", ЭД.Получить(СвойствоЭД));*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);*/
				/*КоличествоЗаписей = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоЗаписей");*/
				if(true/*КоличествоЗаписей<>Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписей", ИтогоПоДокументуXDTO.Получить(КоличествоЗаписей));*/
				}
				/*КоличествоМест = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоМест");*/
				if(true/*КоличествоМест<>Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМест", ИтогоПоДокументуXDTO.Получить(КоличествоМест));*/
				}
				/*СуммаБезНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаБезНДС");*/
				if(true/*СуммаБезНДС<>Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаБезНДС", ИтогоПоДокументуXDTO.Получить(СуммаБезНДС));*/
				}
				/*СуммаНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНДС");*/
				if(true/*СуммаНДС<>Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДС", ИтогоПоДокументуXDTO.Получить(СуммаНДС));*/
				}
				/*СуммаСУчетомНДС = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаСУчетомНДС");*/
				if(true/*СуммаНДС<>Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСУчетомНДС", ИтогоПоДокументуXDTO.Получить(СуммаСУчетомНДС));*/
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ИтогиПрописью");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ИтогиПрописьюXDTO = ЭД.Получить(СвойствоЭД);*/
				/*КоличествоЗаписейПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоЗаписейПрописью");*/
				if(true/*КоличествоЗаписейПрописью<>Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоЗаписейПрописью", ИтогоПоДокументуXDTO.Получить(
				КоличествоЗаписейПрописью));*/
				}
				/*КоличествоМестПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("КоличествоМестПрописью");*/
				if(true/*КоличествоМестПрописью<>Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КоличествоМестПрописью", ИтогоПоДокументуXDTO.Получить(КоличествоМестПрописью));*/
				}
				/*СуммаВсегоПрописью = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаВсегоПрописью");*/
				if(true/*СуммаВсегоПрописью<>Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВсегоПрописью", ИтогоПоДокументуXDTO.Получить(СуммаВсегоПрописью));*/
				}
			}
			/*НаборДанных = ЭД["Товары"].Товар;*/
			/*ПрочитатьДанныеПоТЧНакладной(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);*/
		}

		public void ПрочитатьКаталогXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*НовыйЭД.ИД = ЭД.Ид;*/
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.КаталогТоваров;*/
			/*// Заполняем данные о владельце каталога.
*/
			/*// Контрагент
*/
			/*Элемент = ЭД.Владелец;*/
			/*РеквизитыКонтрагента = Новый Структура;*/
			/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Контрагенты");*/
			/*Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Контрагенты", ИдКонтрагента,
		РеквизитыКонтрагента, ЭД.Ид);*/
			/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДатаФормирования);*/
			/*ЗнДопАналитики = ВернутьДопАналитикуКонтрагента(Контрагент, "Партнер");*/
			if(true/*ЗначениеЗаполнено(ЗнДопАналитики)*/)
			{
				/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");*/
				/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: " +
			ЗнДопАналитики.Код, ЗнДопАналитики, Новый Структура(), ДеревоРазбора, Ошибка);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);*/
			}
			/*// Заполняем данные о товарах каталога.
*/
			/*НаборДанных = ЭД["Товары"].Товар;*/
			/*ПрочитатьДанныеПоТоваруКаталога(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);*/
		}

		public void ПрочитатьПрайсXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*// Уникальный номер ЭД в разрезе участников обмена.
*/
			/*НовыйЭД.ИД = ЭД.Ид;*/
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ПрайсЛист;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.ДействительноС);*/
			/*// Контрагент
*/
			/*Элемент = ЭД.Владелец;*/
			/*РеквизитыКонтрагента = Новый Структура;*/
			/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Контрагенты");*/
			/*Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Контрагенты", ИдКонтрагента, РеквизитыКонтрагента, ЭД.Ид);*/
			/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: " + ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Контрагент", НайденнаяСтрока.ИндексСтроки);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаФормирования", ЭД.ДействительноС);*/
			/*ЗнДопАналитики = ВернутьДопАналитикуКонтрагента(Контрагент, "Партнер");*/
			if(true/*ЗначениеЗаполнено(ЗнДопАналитики)*/)
			{
				/*НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Партнеры");*/
				/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: "
			+ ЗнДопАналитики.Код, ЗнДопАналитики, Новый Структура(), ДеревоРазбора, Ошибка);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Партнер", НайденнаяСтрока.ИндексСтроки);*/
			}
			/*// Товары
*/
			/*Предложения = ЭД.Предложения.ПолучитьСписок("Предложение");*/
		}

		public void ПрочитатьСчетНаОплатуXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*// Уникальный номер ЭД в разрезе участников обмена
*/
			/*НовыйЭД.ИД = ЭД.Ид;*/
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетНаОплату;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("РеквизитыПолучателя");*/
			/*РеквизитыПолучателя = ЭД.Получить(СвойствоЭД);*/
			/*ПрочитатьДанныеПоРасчетномуСчету(НовыйЭД, РеквизитыПолучателя, ДеревоРазбора, "БанковскиеСчетаКонтрагентов",
		"Продавец", , Ошибка);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("НазначениеПлатежа");*/
			/*НазначениеПлатежа = ЭД.Получить(СвойствоЭД);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НазначениеПлатежа", НазначениеПлатежа);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("ДатаОкончанияДействияСчета");*/
			/*ДатаОкончанияДействияСчета = ЭД.Получить(СвойствоЭД);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОкончанияДействияСчета", ДатаОкончанияДействияСчета);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("Валюта");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ВалютаXDTO = ЭД.Получить(СвойствоЭД);*/
				/*СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");*/
				if(true/*СвойствоКодОКВ <> Неопределено*/)
				{
					/*КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);*/
					/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");*/
					/*ДопРеквизиты = Новый Структура;*/
					/*ДопРеквизиты.Вставить("Код", КодВалюты);*/
					/*Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));*/
					/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);*/
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);*/
				}
				/*СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");*/
				if(true/*СвойствоКурс <> Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));*/
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Поставщик");*/
			/*Поставщик = ЭД.Получить(СвойствоЭД);*/
			if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ПрочитатьДанныеКонтрагента(Поставщик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Покупатель");*/
			/*Покупатель = ЭД.Получить(СвойствоЭД);*/
			if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ПрочитатьДанныеКонтрагента(Покупатель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");*/
			/*ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);*/
			/*СуммаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаИтог");*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаИтог", ИтогоПоДокументуXDTO.Получить(СуммаИтог));*/
			/*СвойствоСуммаНалогаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНалогаИтог");*/
			if(true/*СвойствоСуммаНалогаИтог <> Неопределено*/)
			{
				/*СуммаНалогаИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаНалогаИтог);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНалогаИтог", СуммаНалогаИтог);*/
			}
			/*СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");*/
			if(true/*СвойствоЦенаВключаетНДС <> Неопределено*/)
			{
				/*ЦенаВключаетНДС =  ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ЦенаВключаетНДС);*/
			}
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("Товары");*/
			if(true/*СвойствоЭД <> Неопределено И ЭД.Получить(СвойствоЭД) <> Неопределено*/)
			{
				/*НаборДанных = ЭД["Товары"].Товар;*/
				/*ПрочитатьДанныеПоТЧСчетаНаОплату(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Руководитель");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*Руководитель = ЭД.Получить(СвойствоЭД);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Руководитель", Руководитель.ПолноеНаименование);*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Бухгалтер");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*Бухгалтер = ЭД.Получить(СвойствоЭД);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Бухгалтер", Бухгалтер.ПолноеНаименование);*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ДокументОснования");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
			}
		}

		public void ПрочитатьЗаказXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*// Уникальный номер ЭД в разрезе участников обмена
*/
			/*НовыйЭД.ИД = ЭД.Ид;*/
			if(true/*ЭД.Роль = "Покупатель"*/)
			{
				/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ЗаказТовара;*/
			}
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("Исполнитель");*/
			/*Исполнитель = ЭД.Получить(СвойствоЭД);*/
			if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ПрочитатьДанныеКонтрагента(Исполнитель, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, ЭД.Роль);*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Заказчик");*/
			/*Заказчик = ЭД.Получить(СвойствоЭД);*/
			if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				if(true/*ЭД.Роль = "Покупатель"*/)
				{
					/*ПрочитатьДанныеКонтрагента(Заказчик, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");*/
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Товары");*/
			/*НаборДанных = ЭД["Товары"].Товар;*/
			/*ПрочитатьДанныеПоТЧЗаказаКлиента(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");*/
			/*ИтогоПоДокументуXDTO = ЭД.Получить(СвойствоЭД);*/
			/*СуммаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаИтог");*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаИтог", ИтогоПоДокументуXDTO.Получить(СуммаИтог));*/
			/*СвойствоСуммаНалогаИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаНалогаИтог");*/
			if(true/*СвойствоСуммаНалогаИтог <> Неопределено*/)
			{
				/*СуммаНалогаИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаНалогаИтог);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНалогаИтог", СуммаНалогаИтог);*/
			}
			/*СвойствоСуммаБезСкидкиИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаБезСкидкиИтог");*/
			if(true/*СвойствоСуммаБезСкидкиИтог <> Неопределено*/)
			{
				/*СуммаБезСкидкиИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаБезСкидкиИтог);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаБезСкидкиИтог", СуммаБезСкидкиИтог);*/
			}
			/*СвойствоСуммаСкидкиИтог = ИтогоПоДокументуXDTO.Свойства().Получить("СуммаСкидкиИтог");*/
			if(true/*СвойствоСуммаСкидкиИтог <> Неопределено*/)
			{
				/*СуммаСкидкиИтог = ИтогоПоДокументуXDTO.Получить(СвойствоСуммаСкидкиИтог);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаСкидкиИтог", СуммаСкидкиИтог);*/
			}
			/*СвойствоЦенаВключаетНДС = ИтогоПоДокументуXDTO.Свойства().Получить("ЦенаВключаетНалог");*/
			if(true/*СвойствоЦенаВключаетНДС <> Неопределено*/)
			{
				/*ЦенаВключаетНДС = ИтогоПоДокументуXDTO.Получить(СвойствоЦенаВключаетНДС);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ЦенаВключаетНДС", ЦенаВключаетНДС);*/
			}
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("ДокументОснования");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Валюта");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ВалютаXDTO = ЭД.Получить(СвойствоЭД);*/
				/*СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");*/
				if(true/*СвойствоКодОКВ <> Неопределено*/)
				{
					/*КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);*/
					/*НайденныйТипВДереве  = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");*/
					/*ДопРеквизиты = Новый Структура;*/
					/*ДопРеквизиты.Вставить("Код", КодВалюты);*/
					/*Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));*/
					/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(	НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);*/
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);*/
				}
				/*СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");*/
				if(true/*СвойствоКурс <> Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));*/
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Комментарий");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДополнительнаяИнформация", ЭД.Комментарий);*/
			}
		}

		public void ПрочитатьОтчетОСписанииКомиссионногоТовараXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*// Уникальный номер ЭД в разрезе участников обмена
*/
			/*НовыйЭД.ИД = ЭД.Ид;*/
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОСписанииКомиссионногоТовара;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("Комитент");*/
			/*Комитент = ЭД.Получить(СвойствоЭД);*/
			if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Комиссионер");*/
			/*Комиссионер = ЭД.Получить(СвойствоЭД);*/
			if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");*/
			}
			/*НаборДанных = ЭД["Товары"].Товар;*/
			/*ПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");*/
			/*ИтогоПоДокументу = ЭД.Получить(СвойствоЭД);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогоПоДокументу", ИтогоПоДокументу);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("Валюта");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ВалютаXDTO = ЭД.Получить(СвойствоЭД);*/
				/*СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");*/
				if(true/*СвойствоКодОКВ <> Неопределено*/)
				{
					/*КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);*/
					/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");*/
					/*ДопРеквизиты = Новый Структура;*/
					/*ДопРеквизиты.Вставить("Код", КодВалюты);*/
					/*Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));*/
					/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);*/
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);*/
				}
				/*СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");*/
				if(true/*СвойствоКурс <> Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));*/
				}
			}
		}

		public void ПрочитатьОтчетОПродажахКомиссионногоТовараXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*// уникальный номер ЭД в разрезе участников обмена
*/
			/*НовыйЭД.ИД = ЭД.Ид;*/
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ОтчетОПродажахКомиссионногоТовара;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Номер);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ЭД.Дата);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("Комитент");*/
			/*Комитент = ЭД.Получить(СвойствоЭД);*/
			if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ПрочитатьДанныеКонтрагента(Комитент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Покупатель");*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Комиссионер");*/
			/*Комиссионер = ЭД.Получить(СвойствоЭД);*/
			if(true/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ПрочитатьДанныеКонтрагента(Комиссионер, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, "Продавец");*/
			}
			/*НаборДанных = ЭД["Товары"].Товар;*/
			/*ПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("ИтогоПоДокументу");*/
			/*ИтогоПоДокументу = ЭД.Получить(СвойствоЭД);*/
			/*СвойствоСуммаКомитентаИтог = ИтогоПоДокументу.Свойства().Получить("СуммаКомитентаИтог");*/
			/*СуммаКомитентаИтог = ИтогоПоДокументу.Получить(СвойствоСуммаКомитентаИтог);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаКомитента", СуммаКомитентаИтог);*/
			/*СвойствоСуммаПродажиИтог = ИтогоПоДокументу.Свойства().Получить("СуммаПродажиИтог");*/
			/*СуммаПродажиИтог = ИтогоПоДокументу.Получить(СвойствоСуммаПродажиИтог);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаДокумента", СуммаПродажиИтог);*/
			/*СвойствоСуммаВознагражденияИтог = ИтогоПоДокументу.Свойства().Получить("СуммаВознагражденияИтог");*/
			if(true/*СвойствоСуммаВознагражденияИтог <> Неопределено*/)
			{
				/*СуммаВознагражденияИтог = ИтогоПоДокументу.Получить(СвойствоСуммаВознагражденияИтог);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаВознаграждения", СуммаВознагражденияИтог);*/
			}
			/*СвойствоПроцент = ИтогоПоДокументу.Свойства().Получить("Процент");*/
			if(true/*СвойствоПроцент <> Неопределено*/)
			{
				/*Процент = ИтогоПоДокументу.Получить(СвойствоПроцент);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПроцентВознаграждения", Процент);*/
			}
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИтогиПрописью", ЭД.ИтогиПрописью);*/
			/*СвойствоЭД = ЭД.Свойства().Получить("Валюта");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ВалютаXDTO = ЭД.Получить(СвойствоЭД);*/
				/*СвойствоКодОКВ = ВалютаXDTO.Свойства().Получить("КодОКВ");*/
				if(true/*СвойствоКодОКВ<>Неопределено*/)
				{
					/*КодВалюты = ВалютаXDTO.Получить(СвойствоКодОКВ);*/
					/*НайденныйТипВДереве 	= НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Валюты");*/
					/*ДопРеквизиты = Новый Структура;*/
					/*ДопРеквизиты.Вставить("Код", КодВалюты);*/
					/*Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", Строка(КодВалюты));*/
					/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, КодВалюты, "Код валюты: " + КодВалюты,
				Валюта, ДопРеквизиты, ДеревоРазбора, Ошибка);*/
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Валюта", НайденнаяСтрока.ИндексСтроки);*/
				}
				/*СвойствоКурс = ВалютаXDTO.Свойства().Получить("Курс");*/
				if(true/*СвойствоКурс<>Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Курс", ВалютаXDTO.Получить(СвойствоКурс));*/
				}
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ЭтапОплаты");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ПрочитатьДанныеПоГрафикуОплаты(ЭД.ЭтапОплаты, ЭД, ДеревоРазбора, НовыйЭД, Ошибка);*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ДатаНачала");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ДатаНачала = ЭД.Получить(СвойствоЭД);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НачалоПериода", ДатаНачала);*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ДатаКонца");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ДатаКонца = ЭД.Получить(СвойствоЭД);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КонецПериода", ДатаКонца);*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ФормаОплаты");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ФормаОплаты = ЭД.Получить(СвойствоЭД);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ФормаОплаты",
			ЭлектронныеДокументыПовтИсп.НайтиПеречисление("ФормыОплаты", ФормаОплаты));*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("СпособРасчета");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*СпособРасчета = ЭД.Получить(СвойствоЭД);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СпособРасчетаВознаграждения",
			ЭлектронныеДокументыПовтИсп.НайтиПеречисление("СпособРасчета", СпособРасчета));*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("ДатаОплаты");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*ДатаОплаты = ЭД.Получить(СвойствоЭД);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПлатежа", ДатаОплаты);*/
			}
			/*СвойствоЭД = ЭД.Свойства().Получить("Услуга");*/
			if(true/*СвойствоЭД <> Неопределено*/)
			{
				/*Услуга = ЭД.Получить(СвойствоЭД);*/
				/*СвойствоНалог = Услуга.Свойства().Получить("Налог");*/
				if(true/*СвойствоНалог <> Неопределено*/)
				{
					/*Налог = Услуга.Получить(СвойствоНалог);*/
					if(true/*ВРег(Налог.ТипНалога) = "НДС"*/)
					{
						/*СвойствоВеличинаСтавкиНалога = Налог.Свойства().Получить("ВеличинаСтавкиНалога");*/
						if(true/*СвойствоВеличинаСтавкиНалога <> Неопределено*/)
						{
							/*СтавкаНалога = ЭлектронныеДокументыПереопределяемый.ЗначениеПеречисленияСтавкаНДС(Налог.ВеличинаСтавкиНалога);*/
							/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтавкаНДСВознаграждения", СтавкаНалога);*/
						}
						/*СвойствоСумма = Налог.Свойства().Получить("Сумма");*/
						if(true/*СвойствоСумма <> Неопределено*/)
						{
							/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СуммаНДСВознаграждения", Налог.Сумма);*/
						}
					}
				}
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПлатежа", ДатаОплаты);*/
			}
		}

		public void ПрочитатьСчетФактуруXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвСчФакт.НомерСчФ);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаИзСтроки(ЭД.Документ.СвСчФакт.ДатаСчФ));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалКод", ЭД.Документ.СвСчФакт.КодОКВ);*/
			if(true/*НЕ ЭД.Документ.СвСчФакт.ИспрСчФ = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИспрНом", ЭД.Документ.СвСчФакт.ИспрСчФ.НомИспрСчФ);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИспрДата", ДатаИзСтроки(ЭД.Документ.СвСчФакт.ИспрСчФ.ДатаИспрСчФ));*/
			}
			if(true/*Не ЭД.Документ.СвСчФакт.СвПрод.ИдСв.СвФЛ = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Продавец", ЭД.Документ.СвСчФакт.СвПрод.ИдСв.СвФЛ.ФИОИП.Фамилия + " "
			+ ЭД.Документ.СвСчФакт.СвПрод.ИдСв.СвФЛ.ФИОИП.Имя + " " + ЭД.Документ.СвСчФакт.СвПрод.ИдСв.СвФЛ.ФИОИП.Отчество);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецФизЛицо", Истина);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецИНН", ЭД.Документ.СвСчФакт.СвПрод.ИдСв.СвФЛ.ИННФЛ);*/
			}
			if(true/*НЕ ЭД.Документ.СвСчФакт.СвПрод.Адрес.АдрИно = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецАдрес", ЭД.Документ.СвСчФакт.СвПрод.Адрес.АдрИно.АдрТекст);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецКодСтраны", ЭД.Документ.СвСчФакт.СвПрод.Адрес.АдрИно.КодСтр);*/
			}
			if(true/*НЕ ЭД.Документ.СвСчФакт.ГрузОт = Неопределено*/)
			{
				if(true/*НЕ ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр = Неопределено*/)
				{
					if(true/*НЕ ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.НаимОрг = Неопределено*/)
					{
						/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузоотправитель", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.НаимГоп.НаимОрг);*/
					}
					if(true/*Не ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно = Неопределено*/)
					{
						/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительАдрес", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно.АдрТекст);*/
						/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузоотправительКодСтраны", ЭД.Документ.СвСчФакт.ГрузОт.ГрузОтпр.Адрес.АдрИно.КодСтр);*/
					}
				}
			}
			if(true/*НЕ ЭД.Документ.СвСчФакт.ГрузПолуч = Неопределено*/)
			{
				if(true/*НЕ ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.НаимОрг = Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Грузополучатель", ЭД.Документ.СвСчФакт.ГрузПолуч.НаимГоп.НаимОрг);*/
				}
				if(true/*НЕ ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно = Неопределено*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательАдрес", ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно.АдрТекст);*/
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ГрузополучательКодСтраны", ЭД.Документ.СвСчФакт.ГрузПолуч.Адрес.АдрИно.КодСтр);*/
				}
			}
			if(true/*НЕ ЭД.Документ.СвСчФакт.СвПРД = Неопределено И ЭД.Документ.СвСчФакт.СвПРД.Количество() > 0*/)
			{
				/*ПлатежныеДокументы = "";*/
				/*ПервыйЭлемент = Истина;*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПлатежныйДокумент", ПлатежныеДокументы);*/
			}
			if(true/*НЕ ЭД.Документ.СвСчФакт.СвПокуп.ИдСв.СвФЛ = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Покупатель", ЭД.Документ.СвСчФакт.СвПокуп.ИдСв.СвФЛ.ФИОИП.Фамилия + " "
			+ ЭД.Документ.СвСчФакт.СвПокуп.ИдСв.СвФЛ.ФИОИП.Имя + " " + ЭД.Документ.СвСчФакт.СвПокуп.ИдСв.СвФЛ.ФИОИП.Отчество);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательФизЛицо", Истина);*/
			}
			if(true/*НЕ ЭД.Документ.СвСчФакт.СвПокуп.Адрес.АдрИно = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательАдрес", ЭД.Документ.СвСчФакт.СвПокуп.Адрес.АдрИно.АдрТекст);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательКодСтраны", ЭД.Документ.СвСчФакт.СвПокуп.Адрес.АдрИно.КодСтр);*/
			}
			if(true/*НЕ ЭД.Документ.СвСчФакт.ИнфПол = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстИнф", ЭД.Документ.СвСчФакт.ИнфПол.ТекстИнф);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдФайлИнфПол", ЭД.Документ.СвСчФакт.ИнфПол.ИдФайлИнфПол);*/
			}
			if(true/*Не ЭД.Документ.Подписант.ИП = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИП", ЭД.Документ.Подписант.ИП.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ИП.ФИО.Имя + " " + ЭД.Документ.Подписант.ИП.ФИО.Отчество);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННФЛ", ЭД.Документ.Подписант.ИП.ИННФЛ);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантСвГосРегИП", ЭД.Документ.Подписант.ИП.СвГосРегИП);*/
			}
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДС",ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовБезНДСВсего);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНал", ЭД.Документ.ТаблСчФакт.ВсегоОпл.СтТовУчНалВсего);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДС",     СуммаНДССФПривестиКТребуемомуФормату(
		ЭД.Документ.ТаблСчФакт.ВсегоОпл.СумНалВсего.СумНДС));*/
		}

		public void ПрочитатьКорректировочныйСчетФактуруXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.СчетФактура;*/
			/*НовыйЭД.ОписаниеОбъекта = "Корректировочный";*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Номер", ЭД.Документ.СвКСчФ.НомерКСчФ);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Дата", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ДатаКСчФ));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерСчетаФактуры", ЭД.Документ.СвКСчФ.НомерСчФ);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаСчетаФактуры", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ДатаСчФ));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВалКод", ЭД.Документ.СвКСчФ.КодОКВ);*/
			if(true/*НЕ ЭД.Документ.СвКСчФ.Свойства().Получить("ИспрКСчФ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.ИспрКСчФ = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправления", ЭД.Документ.СвКСчФ.ИспрКСчФ.НомИспрКСчФ);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправления", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ИспрКСчФ.ДатаИспрКСчФ));*/
			}
			if(true/*НЕ ЭД.Документ.СвКСчФ.Свойства().Получить("ИспрСчФ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.ИспрСчФ = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "НомерИсправленияСчетаФактуры", ЭД.Документ.СвКСчФ.ИспрСчФ.НомИспрСчФ);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаИсправленияСчетаФактуры", ДатаИзСтроки(ЭД.Документ.СвКСчФ.ИспрСчФ.ДатаИспрСчФ));*/
			}
			if(true/*Не ЭД.Документ.СвКСчФ.СвПрод.ИдСв.Свойства().Получить("СвФЛ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.СвПрод.ИдСв.СвФЛ = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Продавец", ЭД.Документ.СвКСчФ.СвПрод.ИдСв.СвФЛ.ФИОИП.Фамилия + " "
			+ ЭД.Документ.СвКСчФ.СвПрод.ИдСв.СвФЛ.ФИОИП.Имя + " " + ЭД.Документ.СвКСчФ.СвПрод.ИдСв.СвФЛ.ФИОИП.Отчество);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецФизЛицо", Истина);*/
			}
			if(true/*Не ЭД.Документ.СвКСчФ.СвПрод.Адрес.Свойства().Получить("АдрИно") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.СвПрод.Адрес.АдрИно = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецАдрес", ЭД.Документ.СвКСчФ.СвПрод.Адрес.АдрИно.АдрТекст);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПродавецКодСтраны", ЭД.Документ.СвКСчФ.СвПрод.Адрес.АдрИно.КодСтр);*/
			}
			if(true/*Не ЭД.Документ.СвКСчФ.СвПокуп.ИдСв.Свойства().Получить("СвФЛ") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.СвПокуп.ИдСв.СвФЛ = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Покупатель", ЭД.Документ.СвКСчФ.СвПокуп.ИдСв.СвФЛ.ФИОИП.Фамилия + " "
			+ ЭД.Документ.СвКСчФ.СвПокуп.ИдСв.СвФЛ.ФИОИП.Имя + " " + ЭД.Документ.СвКСчФ.СвПокуп.ИдСв.СвФЛ.ФИОИП.Отчество);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательФизЛицо", Истина);*/
			}
			if(true/*Не ЭД.Документ.СвКСчФ.СвПокуп.Адрес.Свойства().Получить("АдрИно") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.СвПокуп.Адрес.АдрИно = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательАдрес", ЭД.Документ.СвКСчФ.СвПокуп.Адрес.АдрИно.АдрТекст);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПокупательКодСтраны", ЭД.Документ.СвКСчФ.СвПокуп.Адрес.АдрИно.КодСтр);*/
			}
			if(true/*Не ЭД.Документ.СвКСчФ.Свойства().Получить("ИнфПол") = Неопределено
		И НЕ ЭД.Документ.СвКСчФ.ИнфПол = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстИнф", ЭД.Документ.СвКСчФ.ИнфПол.ТекстИнф);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдФайлИнфПол", ЭД.Документ.СвКСчФ.ИнфПол.ИдФайлИнфПол);*/
			}
			if(true/*Не ЭД.Документ.Подписант.Свойства().Получить("ИП") = Неопределено 
		И НЕ ЭД.Документ.Подписант.ИП = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИП", ЭД.Документ.Подписант.ИП.ФИО.Фамилия + " "
			+ ЭД.Документ.Подписант.ИП.ФИО.Имя + " " + ЭД.Документ.Подписант.ИП.ФИО.Отчество);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантИННФЛ", ЭД.Документ.Подписант.ИП.ИННФЛ);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПодписантСвГосРегИП", ЭД.Документ.Подписант.ИП.СвГосРегИП);*/
			}
			if(true/*НЕ ЭД.Документ.ТаблКСчФ.Свойства().Получить("ВсегоУвел") = Неопределено
		И НЕ ЭД.Документ.ТаблКСчФ.ВсегоУвел = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДСВсегоУвел", ЭД.Документ.ТаблКСчФ.ВсегоУвел.СтТовБезНДСВсего);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНалВсегоУвел", ЭД.Документ.ТаблКСчФ.ВсегоУвел.СтТовУчНалВсего);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДСУвел", СуммаНДССФПривестиКТребуемомуФормату(
			ЭД.Документ.ТаблКСчФ.ВсегоУвел.СумНал.СумНДС));*/
			}
			if(true/*НЕ ЭД.Документ.ТаблКСчФ.Свойства().Получить("ВсегоУм") = Неопределено
		И НЕ ЭД.Документ.ТаблКСчФ.ВсегоУм = Неопределено*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовБезНДСВсегоУм", ЭД.Документ.ТаблКСчФ.ВсегоУм.СтТовБезНДСВсего);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СтТовУчНалВсегоУм", ЭД.Документ.ТаблКСчФ.ВсегоУм.СтТовУчНалВсего);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "СумНДСУм", СуммаНДССФПривестиКТребуемомуФормату(
			ЭД.Документ.ТаблКСчФ.ВсегоУм.СумНал.СумНДС));*/
			}
		}
		// Получает данные электронного документа из файла, заполняет дерево значений для загрузки в ИБ,
		// создает/изменяет необходимые объекты ИБ.
		//
		// Параметры:
		//  СтруктураПараметров - структура параметров для разбора электронного документа,
		//  ДеревоРазбора - дерево значений, структура данных для загрузки в ИБ,
		//  НаправлениеЭД - направление электронного документа, требующего разбора.
		//
		// Возвращаемое значение:
		//  Структура параметров с реквизитами созданных/измененных объектов ИБ
		//

		public object ПолучитьДанныеИзФайла(/*СтруктураПараметров, ДеревоРазбора, НаправлениеЭД = Неопределено*/)
		{
			if(true/*НЕ СтруктураПараметров.Свойство("ПолноеИмяФайла")*/)
			{
			}
			if(true/*СтруктураПараметров.Свойство("ВладелецЭД")*/)
			{
				/*СсылкаНаВладельца = СтруктураПараметров.ВладелецЭД;*/
			}
			/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");*/
			/*НовыйЭД = НайденныйТипВДереве.Строки.Добавить();*/
			if(true/*НаправлениеЭД = Неопределено*/)
			{
				/*НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;*/
			}
			/*НовыйЭД.НаправлениеЭД = НаправлениеЭД;*/
			/*ФайлДопДанных = "";*/
			/*ДеревоДопДанных = Неопределено;*/
			if(true/*СтруктураПараметров.Свойство("ФайлДопДанных", ФайлДопДанных)*/)
			{
				/*ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ФайлДопДанных);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);*/
				/*СтруктураПараметров.Вставить("ДеревоДопДанных", ДеревоДопДанных);*/
			}
			/*Результат = ПрочитатьФайлCMLпоXDTO(СтруктураПараметров.ПолноеИмяФайла, ДеревоРазбора, НовыйЭД, Истина);*/
			if(true/*Результат*/)
			{
				/*// Заполним ссылки на объекты из дерева соответствий, если ссылок нет,
*/
				/*// тогда будем создавать объекты
*/
				/*ОшибкаЗаписи = Ложь;*/
				/*ЗаполнитьСсылкиНаОбъектыВДереве(ДеревоРазбора, ОшибкаЗаписи);*/
				/*Попытка
			СсылкаНаВладельца = ЭлектронныеДокументыПереопределяемый.СохранитьДанныеОбъектаВБД(НовыйЭД, ДеревоРазбора,
				СсылкаНаВладельца);*/
				/*Исключение
			ОшибкаЗаписи = Истина;*/
				/*КонецПопытки;*/
				/*// Дозаполняем структуру параметров из файла данных.
*/
				/*СтруктураПараметров.Вставить("ВладелецЭД", СсылкаНаВладельца);*/
				/*СтруктураПараметров.Вставить("ВидЭД",      НовыйЭД.ВидЭД);*/
				/*НомерЭД = НовыйЭД.ИД;*/
				if(true/*Не ЗначениеЗаполнено(НомерЭД)*/)
				{
					/*УИД = Новый УникальныйИдентификатор;*/
					/*НомерЭД = Строка(УИД) + "##1";*/
				}
				/*СтруктураПараметров.Вставить("НомерЭД", НомерЭД);*/
				/*НомерВерсииЭД = ВернутьНомерВерсииИзИдЭД(НовыйЭД.ИД);*/
				/*Попытка
			НомерВерсииЭД = Число(НомерВерсииЭД);*/
				/*Исключение
		КонецПопытки;*/
				/*СтруктураПараметров.Вставить("НомерВерсииЭД", НомерВерсииЭД);*/
				/*СтруктураПараметров.Вставить("НаправлениеЭД", НовыйЭД.НаправлениеЭД);*/
				/*СтруктураПараметров.Вставить("НомерДокументаОтправителя", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Номер"));*/
				/*СтруктураПараметров.Вставить("ДатаДокументаОтправителя", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Дата"));*/
				/*ОрганизацияПолучатель = ПолучитьРеквизитШапкиЭД(НовыйЭД, "Организация", ДеревоРазбора);*/
				if(true/*ЗначениеЗаполнено(ОрганизацияПолучатель)*/)
				{
					/*СтруктураПараметров.Вставить("Организация", ОрганизацияПолучатель);*/
				}
				/*СтруктураПараметров.Вставить("Контрагент", ПолучитьРеквизитШапкиЭД(НовыйЭД, "Контрагент", ДеревоРазбора));*/
				/*СтруктураПараметров.Вставить("Загружен",   НЕ ОшибкаЗаписи);*/
			}
			return null;
		}
		// Разбираем строковую конструкцию вида "ИНН_КПП"
		//
		// Возвращаемое значение:
		//  Структура параметров с ИНН и КПП
		//

		public object РазобратьИДКонтрагента(/*Знач СтрокаИД*/)
		{
			/*ПозицияРазделителя1 = Найти(СтрокаИД, "#");*/
			/*СтруктураПоиска = Новый Структура;*/
			/*ПозицияРазделителя1 = Найти(СтрокаИД, "_");*/
			if(true/*ПозицияРазделителя1 > 0*/)
			{
				/*ИНН = Лев(СтрокаИД, ПозицияРазделителя1 - 1);*/
				/*КПП = Сред(СтрокаИД, ПозицияРазделителя1 + 1, СтрДлина(СтрокаИД) - ПозицияРазделителя1);*/
			}
			/*СтруктураПоиска.Вставить("ИНН", ИНН);*/
			/*СтруктураПоиска.Вставить("КПП", КПП);*/
			return null;
		}
		// Функция преобразует строку в дату и время
		//
		// Параметры:
		//  Зн - строка - дата в формате "ГГГГ-ММ-ДД ЧЧ:ММ:СС"
		//
		// Возвращаемое значение:
		//  Значение типа "ДатаВремя"
		//

		public object ПолучитьДатуВремяИзСтроки(/*Зн*/)
		{
			/*Результат = Неопределено;*/
			/*Зн = СтрЗаменить(Зн, "-", "");*/
			/*Зн = СтрЗаменить(Зн, ":", "");*/
			if(true/*СтрДлина(Зн) - Найти(Зн, " ") = 5*/)
			{
				/*// время в формате Ч:ММ:СС
*/
				/*Зн = СтрЗаменить(Зн, " ", "0");*/
			}
			/*Попытка
		Результат = Дата(Зн);*/
			/*// дата и время в виде "ГГГГММДДЧЧММСС"
*/
			/*Исключение
		Попытка
			Результат = Дата(Лев(Зн, 8));*/
			/*// только дата "ГГГГММДД"
*/
			/*Исключение
		КонецПопытки;*/
			/*КонецПопытки;*/
			return null;
		}

		public object ПрочитатьФайлCMLпоXDTO(/*ИмяФайла, ДеревоРазбора, НовыйЭД, ПоказыватьОшибки = Ложь*/)
		{
			/*ОбъектXML = Новый ЧтениеXML;*/
			/*Ошибка = Ложь;*/
			/*НеизвестныйЭД = Ложь;*/
			/*Попытка
		ОбъектXML.ОткрытьФайл(ИмяФайла);*/
			/*ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML);*/
			/*ЕстьСвойствоИдФайл = ЭД.Свойства().Получить("ИдФайл") <> Неопределено;*/
			if(true/*ЕстьСвойствоИдФайл*/)
			{
				/*//чтение файлов без namespace
*/
				/*// Обрабатываем случай когда к нам пришел сторонний XML файл.
*/
				if(true/*НЕ ЗначениеЗаполнено(ОбъектXML.URIПространстваИмен)*/)
				{
					/*// Вставляем во временный файл ЭД пространство имен 1С.
*/
					/*ДобавитьПространствоИмен1СВоВнешнийФайлЭД(ОбъектXML, ЭД, ИмяФайла);*/
				}
				if(true/*Найти(ЭД.ИдФайл, "ON_SFAKT") > 0*/)
				{
					/*ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("Файл", "SFAKT"));*/
					/*ПрочитатьСчетФактуруXDTO(ЭД, ДеревоРазбора, НовыйЭД, Ошибка);*/
				}
			}
			if(true/*НеизвестныйЭД*/)
			{
				if(true/*ПользователиСервер.ЭтоПолноправныйПользовательИБ()*/)
				{
					/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'Неизвестный тип ЭД при чтении данных из файла %1!'"), ИмяФайла);*/
					/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
				}
				/*Ошибка = Истина;*/
			}
			/*Исключение
		Ошибка = Истина;*/
			if(true/*ПользователиСервер.ЭтоПолноправныйПользовательИБ() ИЛИ ПоказыватьОшибки*/)
			{
				/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'"), ИмяФайла, ОписаниеОшибки());*/
				/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			}
			/*КонецПопытки;*/
			/*ОбъектXML.Закрыть();*/
			return null;
		}

		public object ВернутьДопАналитикуКонтрагента(/*Контрагент, ДопАналитика*/)
		{
			if(true/*НЕ ЗначениеЗаполнено(Контрагент) ИЛИ Контрагент.Метаданные().Реквизиты.Найти(ДопАналитика) = Неопределено*/)
			{
			}
			/*// Вернем значение Партнера для УТ
*/
			return null;
		}

		public object СоставнойАдрес(/*Параметры*/)
		{
			/*ВозврЗнч = "";*/
			return null;
		}

		public object ИнициализироватьДеревоРазбора(/**/)
		{
			/*ДеревоРазбора = Новый ДеревоЗначений;*/
			/*ДеревоРазбора.Колонки.Добавить("ТипОбъекта");*/
			/*ДеревоРазбора.Колонки.Добавить("СсылкаНаОбъект");*/
			/*ДеревоРазбора.Колонки.Добавить("ОписаниеТипа");*/
			/*ДеревоРазбора.Колонки.Добавить("ИндексСтроки");*/
			/*ДеревоРазбора.Колонки.Добавить("Реквизит");*/
			/*ДеревоРазбора.Колонки.Добавить("ЗначениеРеквизита");*/
			/*ДеревоРазбора.Колонки.Добавить("ОписаниеОбъекта");*/
			/*ДеревоРазбора.Колонки.Добавить("ВидЭД");*/
			/*ДеревоРазбора.Колонки.Добавить("ИД");*/
			/*ДеревоРазбора.Колонки.Добавить("НаправлениеЭД");*/
			/*ДеревоРазбора.Колонки.Добавить("ДопДанные");*/
			return null;
		}

		public object ДатаИзСтроки(/*Строка*/)
		{
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Заполнение дерева объектов разбора и дерева соответствий объектам

		public void СформироватьТЗПоНаборуДанныхXDTO(/*ТЗ, НаборДанных, ЭД, ОбъектXML, ДеревоДопДанных = Неопределено,
	ЕстьСвойствоИдФайл = Ложь, ИмяТЧ = Неопределено, НомерСтроки = Неопределено*/)
		{
			/*КС80 = Новый КвалификаторыСтроки(80);*/
			/*КС255 = Новый КвалификаторыСтроки(255);*/
			/*КС3000 = Новый КвалификаторыСтроки(3000);*/
			/*МассивСтрока = Новый Массив;*/
			/*МассивСтрока.Добавить(Тип("Строка"));*/
			/*ОписаниеТиповС80 = Новый ОписаниеТипов(МассивСтрока, , КС80);*/
			/*ОписаниеТиповС255 = Новый ОписаниеТипов(МассивСтрока, , КС255);*/
			/*ОписаниеТиповС3000 = Новый ОписаниеТипов(МассивСтрока, , КС3000);*/
			/*МассивТипЭД = Новый Массив;*/
			/*МассивТипЭД.Добавить(Тип("СправочникСсылка.ЭДПрисоединенныеФайлы"));*/
			/*ОписаниеТиповЭД = Новый ОписаниеТипов(МассивТипЭД);*/
			/*ТЗ = Новый ТаблицаЗначений();*/
			/*ТЗ.Колонки.Добавить("ИД", ОписаниеТиповС80);*/
			/*ТЗ.Колонки.Добавить("Артикул", ОписаниеТиповС255);*/
			/*ТЗ.Колонки.Добавить("Наименование", ОписаниеТиповС255);*/
			/*ТЗ.Колонки.Добавить("БазоваяЕдиницаКод",ОписаниеТиповС255);*/
			/*ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование",ОписаниеТиповС255);*/
			/*ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименованиеПолное",ОписаниеТиповС255);*/
			/*ТЗ.Колонки.Добавить("БазоваяЕдиницаМеждународноеСокращение",ОписаниеТиповС255);*/
			/*ТЗ.Колонки.Добавить("Описание",ОписаниеТиповС3000);*/
			/*ТЗ.Колонки.Добавить("ЭД",ОписаниеТиповЭД);*/
		}

		public void ПрочитатьДанныеКонтрагента(/*Элемент, ЭД, ДеревоРазбора, НовыйЭД, Ошибка, Роль = ""*/)
		{
			/*ВидКонтрагента  = "";*/
			/*ВидДопАналитики = "";*/
			if(true/*(ЗначениеЗаполнено(НовыйЭД.НаправлениеЭД) И НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани)*/)
			{
				/*ВидКонтрагента = "Организации";*/
				if(true/*Роль = "Продавец" ИЛИ Роль = "Исполнитель"*/)
				{
					/*ИмяРеквизита = "Организация";*/
					/*ВидБанковскогоСчета = "БанковскиеСчетаОрганизаций";*/
				}
			}
			/*// Контрагент
*/
			/*РеквизитыКонтрагента = Новый Структура;*/
			if(true/*Элемент.Тип().URIПространстваИмен = "OTORG12"
		ИЛИ Элемент.Тип().URIПространстваИмен = "IAKTPRM"*/)
			{
				/*ИдКонтрагента = "";*/
				if(true/*Элемент.ИдСв <> Неопределено*/)
				{
					if(true/*Элемент.ИдСв.СвЮЛ <> Неопределено*/)
					{
						/*РеквизитыКонтрагента.Вставить("ПолноеНаименование", Элемент.ИдСв.СвЮЛ.НаимОрг);*/
						/*РеквизитыКонтрагента.Вставить("ИНН", Элемент.ИдСв.СвЮЛ.ИННЮЛ);*/
						/*РеквизитыКонтрагента.Вставить("КПП", Элемент.ИдСв.СвЮЛ.КПП);*/
						/*РеквизитыКонтрагента.Вставить("ОКОПФ", Элемент.ИдСв.СвЮЛ.ОКОПФ);*/
						if(true/*ЗначениеЗаполнено(Элемент.ИдСв.СвЮЛ.ИННЮЛ)*/)
						{
							/*ИдКонтрагента = Элемент.ИдСв.СвЮЛ.ИННЮЛ + Элемент.ИдСв.СвЮЛ.КПП;*/
						}
					}
				}
				/*РеквизитыКонтрагента.Вставить("ОКПО", Элемент.ОКПО);*/
				/*ЭлементАдрес = Элемент.Адрес;*/
				if(true/*ЭлементАдрес <> Неопределено*/)
				{
					/*ПрефиксАдреса = ?(Роль = "Грузоотправитель" ИЛИ Роль = "Грузополучатель", "Фактический", "Юридический");*/
					if(true/*ЭлементАдрес.АдрРФ <> Неопределено*/)
					{
						/*РеквизитыКонтрагента.Вставить(ПрефиксАдреса + "Адрес_Представление", СоставнойАдрес(ЭлементАдрес.АдрРФ));*/
					}
				}
				/*ЭлементКонтакты = Элемент.Контакт;*/
				if(true/*ЭлементКонтакты <> Неопределено*/)
				{
					if(true/*ЭлементКонтакты.Тлф <> Неопределено*/)
					{
						/*РеквизитыКонтрагента.Вставить("Телефоны", ЭлементКонтакты.Тлф);*/
					}
					if(true/*ЭлементКонтакты.Факс <> Неопределено*/)
					{
						/*РеквизитыКонтрагента.Вставить("Факс", ЭлементКонтакты.Факс);*/
					}
				}
			}
			/*// заполняем значения в зависимости от вида
*/
			/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидКонтрагента);*/
			/*Контрагент = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ВидКонтрагента, ИдКонтрагента, РеквизитыКонтрагента);*/
			/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдКонтрагента, "ИНН+КПП: "+ИдКонтрагента,
		Контрагент, РеквизитыКонтрагента, ДеревоРазбора, Ошибка);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ИмяРеквизита, НайденнаяСтрока.ИндексСтроки);*/
			/*// Определяем расчетный счет контрагента
*/
			if(true/*Элемент.Свойства().Получить("РасчетныеСчета") <> Неопределено*/)
			{
				/*РасчетныеСчета = Элемент.РасчетныеСчета;*/
				if(true/*РасчетныеСчета <> Неопределено*/)
				{
					/*РасчетныеСчетаXDTO = РасчетныеСчета.ПолучитьСписок("РасчетныйСчет");*/
				}
			}
			/*// доп.аналитику добавим, если заполнена
*/
			if(true/*ЗначениеЗаполнено(ВидДопАналитики)*/)
			{
				/*ЗнДопАналитики = ВернутьДопАналитикуКонтрагента(Контрагент, ДопАналитика);*/
				if(true/*ЗначениеЗаполнено(ЗнДопАналитики)*/)
				{
					/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидДопАналитики);*/
					/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ЗнДопАналитики.Код, "Код: " + ЗнДопАналитики.Код,
			ЗнДопАналитики, Новый Структура(), ДеревоРазбора, Ошибка);*/
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, ДопАналитика, НайденнаяСтрока.ИндексСтроки);*/
				}
			}
			/*// доп.аналитики
*/
		}

		public void ПрочитатьДанныеПоТЧАктаОПриемке(/*НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры.
*/
			/*АвторЭДПокупатель = Ложь;*/
			/*ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);*/
			if(true/*ТипЗнч(НаборДанных) = Тип("СписокXDTO")*/)
			{
			}
		}

		public void СформироватьСтруктуруПоДопДанным(/*Дерево, СтруктураДопДанных*/)
		{
		}

		public object ЗаполнитьШапкуПоДопДанным(/*ДеревоДопДанных, НовыйЭД, Ошибка*/)
		{
			/*ВозвращаемоеЗначение = Ложь;*/
			if(true/*ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений")*/)
			{
				/*СтруктураОтбора = Новый Структура("ИмяРеквизита", "Набор");*/
				/*СтрокиДопДанные = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);*/
			}
			return null;
		}

		public object ЗаполнитьСтрокуТЧПоДопДанным(/*ДеревоДопДанных, СписокТЧ, НомерСтроки, ИмяТЧ, Ошибка*/)
		{
			/*ВозвращаемоеЗначение = Ложь;*/
			if(true/*ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений")*/)
			{
				/*СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Список", ИмяТЧ);*/
				/*СтрокиШапкиДопДанные = ДеревоДопДанных.Строки.НайтиСтроки(СтруктураОтбора);*/
				if(true/*СтрокиШапкиДопДанные.Количество() > 0*/)
				{
					/*СтруктураОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", Строка(НомерСтроки));*/
					/*СтрокиТЧДопДанные = СтрокиШапкиДопДанные[0].Строки.НайтиСтроки(СтруктураОтбора);*/
					if(true/*СтрокиТЧДопДанные.Количество() > 0*/)
					{
						/*ВозвращаемоеЗначение = Истина;*/
					}
				}
			}
			return null;
		}

		public void РазобратьСтрокуТЧНакладной(/*Элемент, СписокТЧ, ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*ИдЭД = ?(ЭД.Свойства().Получить("ИД") = Неопределено, "", ЭД.Ид);*/
			/*ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани);*/
			/*НаимТовара = "";*/
			/*ИдТовара = "";*/
			/*ЕстьДопРеквизиты = Ложь;*/
			/*// Номенклатура.
*/
			/*РеквизитыНоменклатуры = Новый Структура;*/
			/*// Идентификация по номенклатуре компании, когда сторона разбора ЭД - сама компания
*/
			if(true/*ИдентификацияПоНоменклатуреКомпании*/)
			{
				/*СтруктураИд = РазобратьИДТовара(ИдТовара);*/
				/*Номенклатура = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("Номенклатура", СтруктураИд.ИдТовара);*/
				if(true/*ЗначениеЗаполнено(СтруктураИд.ИДХарактеристики)*/)
				{
					/*ХарактеристикаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("ХарактеристикиНоменклатуры",
				СтруктураИд.ИДХарактеристики);*/
					/*СписокТЧ.Добавить(ХарактеристикаНоменклатуры, "Характеристика");*/
				}
				if(true/*ЗначениеЗаполнено(СтруктураИд.ИДУпаковки)*/)
				{
					/*УпаковкаНоменклатуры = ЭлектронныеДокументыСлужебный.ЭлементСправочникаПоИД("УпаковкиНоменклатуры",
				СтруктураИд.ИДУпаковки);*/
					/*СписокТЧ.Добавить(УпаковкаНоменклатуры, "Упаковка");*/
				}
			}
			/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Номенклатура");*/
			/*НайденнаяСтрока = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, ИдТовара, НаимТовара, Номенклатура,
		РеквизитыНоменклатуры, ДеревоРазбора, Ошибка);*/
			/*СписокТЧ.Добавить(НайденнаяСтрока.ИндексСтроки,"Номенклатура");*/
			/*ДобавитьРеквизитыТЧОбъекта(НовыйЭД, "СтрокаТЧ", СписокТЧ);*/
		}

		public void ПрочитатьДанныеПоТЧНакладной(/*НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			if(true/*ТипЗнч(НаборДанных) = Тип("СписокXDTO")*/)
			{
			}
		}

		public void ПрочитатьДанныеПоГрафикуОплаты(/*НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			if(true/*ТипЗнч(НаборДанных) = Тип("СписокXDTO")*/)
			{
			}
		}

		public void ПрочитатьДанныеПоТоваруКаталога(/*НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			if(true/*ТипЗнч(НаборДанных) = Тип("СписокXDTO")*/)
			{
			}
		}

		public void ПрочитатьДанныеПоРасчетномуСчетуТорг12(/*НовыйЭД, РасчетныйСчетXDTO, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент = Неопределено, Ошибка*/)
		{
			/*// Обработка банка счета
*/
			/*БанкXDTO = РасчетныйСчетXDTO.СвБанк;*/
			/*РеквизитыБанка = Новый Структура;*/
			/*РеквизитыБанка.Вставить("Код",			БанкXDTO.БИК);*/
			/*РеквизитыБанка.Вставить("Наименование", БанкXDTO.НаимБанк);*/
			/*БанкСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Банки", РеквизитыБанка.Код, РеквизитыБанка);*/
			/*// Создаем объект банка в дереве разбора
*/
			/*ТипБанкиВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");*/
			/*СтрокаБанка = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
	БанкСсылка, РеквизитыБанка, ДеревоРазбора, Ошибка);*/
			/*// Обработка самого счета
*/
			/*РеквизитыБанковскогоСчета = Новый Структура;*/
			/*РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);*/
			if(true/*ЗначениеЗаполнено(Контрагент)*/)
			{
				/*РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);*/
			}
			/*БанковскийСчетСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ВидБанковскогоСчета, РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);*/
			/*// Создаем объект расчетного счета в дереве разбора
*/
			/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);*/
			/*СтрокаСчета = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета, "Номер счета: " + РеквизитыБанковскогоСчета.НомерСчета,
	БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДеревоРазбора, Ошибка);*/
			/*// Заполняем реквизиты банковского счета
*/
			/*ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);*/
			if(true/*ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов"*/)
			{
				if(true/*Роль = "Грузоотправитель"*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);*/
				}
			}
		}

		public void ПрочитатьДанныеПоРасчетномуСчету(/*НовыйЭД, РасчетныйСчетXDTO, ДеревоРазбора, ВидБанковскогоСчета, Роль, Контрагент = Неопределено, Ошибка*/)
		{
			/*БанкXDTO = РасчетныйСчетXDTO.Банк;*/
			/*РеквизитыБанка = Новый Структура;*/
			/*РеквизитыБанка.Вставить("Код",          БанкXDTO.БИК);*/
			/*РеквизитыБанка.Вставить("Наименование", БанкXDTO.Наименование);*/
			/*РеквизитыБанка.Вставить("КоррСчет",     БанкXDTO.СчетКорреспондентский);*/
			/*БанкСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Банки", РеквизитыБанка.Код, РеквизитыБанка);*/
			/*// Создаем объект банка в дереве разбора.
*/
			/*ТипБанкиВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");*/
			/*СтрокаБанка = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиВДереве, РеквизитыБанка.Код, "БИК: " + РеквизитыБанка.Код,
	БанкСсылка, РеквизитыБанка, ДеревоРазбора, Ошибка);*/
			/*//Обработка банка корреспондента
*/
			/*ЕстьБанкКорреспондент = Ложь;*/
			/*СвойствоЭД = РасчетныйСчетXDTO.Свойства().Получить("БанкКорреспондент");*/
			if(true/*СвойствоЭД <> Неопределено И РасчетныйСчетXDTO.БанкКорреспондент <> Неопределено*/)
			{
				/*ЕстьБанкКорреспондент = Истина;*/
				/*БанкКорреспондентXDTO = РасчетныйСчетXDTO.БанкКорреспондент;*/
				/*РеквизитыБанкаКорреспондента = Новый Структура;*/
				/*РеквизитыБанкаКорреспондента.Вставить("Код",          БанкКорреспондентXDTO.БИК);*/
				/*РеквизитыБанкаКорреспондента.Вставить("Наименование", БанкКорреспондентXDTO.Наименование);*/
				/*РеквизитыБанкаКорреспондента.Вставить("КоррСчет",     БанкКорреспондентXDTO.СчетКорреспондентский);*/
				/*БанкКорреспондентСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Банки",
			РеквизитыБанкаКорреспондента.Код, РеквизитыБанкаКорреспондента);*/
				/*// Создаем объект банка в дереве разбора
*/
				/*ТипБанкиКоррВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "Банки");*/
				/*СтрокаБанкаКорреспондента = НайтиСоздатьСтрокуВДеревеРазбора(ТипБанкиКоррВДереве, РеквизитыБанкаКорреспондента.Код,
			"БИК: " + РеквизитыБанкаКорреспондента.Код, БанкКорреспондентСсылка, РеквизитыБанкаКорреспондента, ДеревоРазбора,
			Ошибка);*/
			}
			/*// Обработка самого счета	
*/
			/*РеквизитыБанковскогоСчета = Новый Структура;*/
			/*РеквизитыБанковскогоСчета.Вставить("НомерСчета", РасчетныйСчетXDTO.НомерСчета);*/
			if(true/*ЗначениеЗаполнено(Контрагент)*/)
			{
				/*РеквизитыБанковскогоСчета.Вставить("Владелец", Контрагент);*/
			}
			/*БанковскийСчетСсылка = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект(ВидБанковскогоСчета,
		РеквизитыБанковскогоСчета.НомерСчета, РеквизитыБанковскогоСчета);*/
			/*// Создаем объект расчетного счета в дереве разбора.
*/
			/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, ВидБанковскогоСчета);*/
			/*СтрокаСчета = НайтиСоздатьСтрокуВДеревеРазбора(НайденныйТипВДереве, РеквизитыБанковскогоСчета.НомерСчета, "Номер счета: "
		+ РеквизитыБанковскогоСчета.НомерСчета,
	БанковскийСчетСсылка, РеквизитыБанковскогоСчета, ДеревоРазбора, Ошибка);*/
			/*// Заполняем реквизиты банковского счета
*/
			/*ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "Банк", СтрокаБанка.ИндексСтроки);*/
			if(true/*ЕстьБанкКорреспондент*/)
			{
				/*ДобавитьРеквизитШапкиОбъекта(СтрокаСчета, "БанкКорреспондент", СтрокаБанкаКорреспондента.ИндексСтроки);*/
			}
			if(true/*ВидБанковскогоСчета = "БанковскиеСчетаКонтрагентов"*/)
			{
				if(true/*Роль = "Грузоотправитель"*/)
				{
					/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "БанковскийСчетГрузоотправителя", СтрокаСчета.ИндексСтроки);*/
				}
			}
		}

		public void ПрочитатьДанныеПоТЧСчетаНаОплату(/*НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*// Определяем вариант ЭД для выбора алгоритма заполнения номенклатуры.
*/
			/*ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий);*/
			if(true/*ТипЗнч(НаборДанных) = Тип("СписокXDTO")*/)
			{
			}
		}

		public void ПрочитатьДанныеПоТЧЗаказаКлиента(/*НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*ИдентификацияПоНоменклатуреКомпании = (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ОтветНаЗаказ) ИЛИ (НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий
		И НовыйЭД.ВидЭД=Перечисления.ВидыЭД.ЗаказТовара);*/
			if(true/*ТипЗнч(НаборДанных) = Тип("СписокXDTO")*/)
			{
			}
		}

		public void ПрочитатьДанныеПоТЧОтчетаОСписанииКомиссионногоТовара(/*НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			if(true/*ТипЗнч(НаборДанных) = Тип("СписокXDTO")*/)
			{
			}
		}

		public void ПрочитатьДанныеПоТЧОтчетаОПродажахКомиссионногоТовара(/*НаборДанных, ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			if(true/*ТипЗнч(НаборДанных) = Тип("СписокXDTO")*/)
			{
			}
		}

		public void ЗаполнитьСсылкиНаОбъектыВДереве(/*ДеревоРазбора, Ошибка*/)
		{
			/*ОтборБезСсылокНаОбъекты = Новый Структура;*/
			/*ОтборБезСсылокНаОбъекты.Вставить("СсылкаНаОбъект", Неопределено);*/
			/*ПорядокСозданияТиповОбъектов = ЭлектронныеДокументыПереопределяемый.ЗаполнитьТаблицуПорядкаСозданияТиповОбъектов();*/
		}

		public void ДобавитьРеквизитШапкиОбъекта(/*СтрокаЭлементов, ИмяРеквизита, ЗначениеРеквизита, СсылкаНаОбъект = Неопределено*/)
		{
			/*// Добавить в реквизиты шапки ЭлектронныеДокументы
*/
			/*НовСтрока                   = СтрокаЭлементов.Строки.Добавить();*/
			/*НовСтрока.Реквизит          = ИмяРеквизита;*/
			/*НовСтрока.ЗначениеРеквизита = ЗначениеРеквизита;*/
			if(true/*СсылкаНаОбъект <> Неопределено*/)
			{
				/*НовСтрока.СсылкаНаОбъект = СсылкаНаОбъект;*/
			}
		}

		public void ДобавитьРеквизитыТЧОбъекта(/*СтрокаЭлементов, ИмяТЧ, СписокРеквизитов*/)
		{
			/*// Добавить в реквизиты ТЧ ЭлектронныеДокументы
*/
			/*НовСтрока          = СтрокаЭлементов.Строки.Добавить();*/
			/*НовСтрока.Реквизит = ИмяТЧ;*/
		}

		public object НайтиСоздатьТипОбъектаВДеревеРазбора(/*ДеревоРазбора, ЗначениеТипаОбъекта*/)
		{
			/*НайденнаяСтрока = ДеревоРазбора.Строки.Найти(ЗначениеТипаОбъекта, "ТипОбъекта");*/
			if(true/*НайденнаяСтрока = Неопределено*/)
			{
				/*НайденнаяСтрока = ДеревоРазбора.Строки.Добавить();*/
				/*НайденнаяСтрока.ТипОбъекта = ЗначениеТипаОбъекта;*/
				/*НайденнаяСтрока.ИндексСтроки = Строка(ДеревоРазбора.Строки.Индекс(НайденнаяСтрока));*/
			}
			return null;
		}

		public object НайтиСоздатьСтрокуВДеревеРазбора(/*СтрокаТипаВДереве, ИдОбъекта, ОписаниеОбъекта, СсылкаНаОбъект, ДопРеквизиты, ДеревоРазбора, Ошибка*/)
		{
			if(true/*ЗначениеЗаполнено(СсылкаНаОбъект)*/)
			{
				/*НайденнаяСтрока = СтрокаТипаВДереве.Строки.Найти(СсылкаНаОбъект, "СсылкаНаОбъект");*/
				if(true/*НайденнаяСтрока = Неопределено*/)
				{
					/*НайденнаяСтрока = СтрокаТипаВДереве.Строки.Добавить();*/
					/*НайденнаяСтрока.СсылкаНаОбъект = СсылкаНаОбъект;*/
					/*НайденнаяСтрока.ИД = ИдОбъекта;*/
					/*НайденнаяСтрока.ОписаниеОбъекта = ОписаниеОбъекта;*/
					/*НайденнаяСтрока.ОписаниеТипа = ЭлектронныеДокументыСлужебный.ОпределитьТипОбъекта(
				СтрокаТипаВДереве.ТипОбъекта);*/
					/*НайденнаяСтрока.ИндексСтроки = СтрокаТипаВДереве.ИндексСтроки + "_"
				+ Строка(СтрокаТипаВДереве.Строки.Индекс(НайденнаяСтрока));*/
					/*ДобавитьДопРеквизиты(НайденнаяСтрока, ДопРеквизиты, ДеревоРазбора);*/
				}
			}
			return null;
		}

		public void ДобавитьДопРеквизиты(/*СтрокаДереваРазбора, ДопРеквизиты, ДеревоРазбора, Отказ = Ложь*/)
		{
		}

		public object РазобратьИДТовара(/*знач ИД*/)
		{
			/*СтруктураВозврата = Новый Структура("ИДТовара, ИДХарактеристики, ИДУпаковки");*/
			if(true/*Не ЗначениеЗаполнено(ИД)*/)
			{
			}
			/*Поз = Найти(ИД, "#");*/
			if(true/*Поз > 0*/)
			{
				/*СтруктураВозврата.ИДТовара = Сред(ИД, 1 , Поз - 1);*/
				if(true/*СтрДлина(ИД) > Поз*/)
				{
					/*Ид = Сред(ИД, Поз + 1);*/
					/*Поз = Найти(ИД, "#");*/
					if(true/*Поз > 0*/)
					{
						/*СтруктураВозврата.ИДХарактеристики = Сред(ИД, 1 ,Поз - 1);*/
					}
					if(true/*СтрДлина(ИД) > Поз*/)
					{
						/*СтруктураВозврата.ИДУпаковки = Сред(ИД, Поз + 1);*/
					}
				}
			}
			return null;
		}

		public object СформироватьСтруктуруТовара(/**/)
		{
			/*СтруктураВозврата = Новый Структура("Номенклатура, Характеристика, Упаковка");*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Работа с деревом разбора

		public object ЭтоСсылочноеЗначениеДереваРазбора(/*ДеревоРазбора, Значение, СтрокаПоСсылке = Неопределено*/)
		{
			/*ЗначениеСтрокой = Строка(Значение);*/
			if(true/*Найти(ЗначениеСтрокой, "_") > 0*/)
			{
				/*СтрокаПоСсылке =  ДеревоРазбора.Строки.Найти(ЗначениеСтрокой, "ИндексСтроки", Истина);*/
			}
			return null;
		}

		public object ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(/*ДеревоРазбора, СтрокаДерева, ПутьКРеквизиту*/)
		{
			/*ПозТочки = Найти(ПутьКРеквизиту, ".");*/
			if(true/*ПозТочки > 0*/)
			{
				/*ИмяГлавногоРеквизита     = Лев(ПутьКРеквизиту, ПозТочки - 1);*/
				/*ИмяПодчиненногоРеквизита = Прав(ПутьКРеквизиту, СтрДлина(ПутьКРеквизиту) - ПозТочки);*/
			}
			/*ГлавныйРеквизит = СтрокаДерева.Строки.Найти(ИмяГлавногоРеквизита, "Реквизит");*/
			if(true/*ГлавныйРеквизит <> Неопределено*/)
			{
				/*ЗначениеГлавногоРеквизита = ГлавныйРеквизит.ЗначениеРеквизита;*/
				if(true/*ИмяПодчиненногоРеквизита <> ""*/)
				{
					/*СтрокаПоСсылке = Неопределено;*/
					if(true/*ЭтоСсылочноеЗначениеДереваРазбора(ДеревоРазбора, ЗначениеГлавногоРеквизита, СтрокаПоСсылке)*/)
					{
					}
					/*// Нет возможности получить значение подчиненного реквизита.
*/
				}
			}
			return null;
		}

		public object СформироватьДеревоРазбора(/*ПолноеИмяФайла, НаправлениеЭД, ФайлДопДанных = Неопределено*/)
		{
			/*ДеревоРазбора = Новый ДеревоЗначений;*/
			/*ДеревоРазбора.Колонки.Добавить("ТипОбъекта");*/
			/*ДеревоРазбора.Колонки.Добавить("СсылкаНаОбъект");*/
			/*ДеревоРазбора.Колонки.Добавить("ОписаниеТипа");*/
			/*ДеревоРазбора.Колонки.Добавить("ИндексСтроки");*/
			/*ДеревоРазбора.Колонки.Добавить("Реквизит");*/
			/*ДеревоРазбора.Колонки.Добавить("ЗначениеРеквизита");*/
			/*ДеревоРазбора.Колонки.Добавить("ОписаниеОбъекта");*/
			/*ДеревоРазбора.Колонки.Добавить("ВидЭД");*/
			/*ДеревоРазбора.Колонки.Добавить("ИД");*/
			/*ДеревоРазбора.Колонки.Добавить("НаправлениеЭД");*/
			/*НайденныйТипВДереве = НайтиСоздатьТипОбъектаВДеревеРазбора(ДеревоРазбора, "ЭлектронныеДокументы");*/
			/*НовыйЭД = НайденныйТипВДереве.Строки.Добавить();*/
			if(true/*НаправлениеЭД = Неопределено*/)
			{
				/*НовыйЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий;*/
			}
			if(true/*ФайлДопДанных <> Неопределено*/)
			{
				/*ДеревоДопДанных = РазобратьУниверсальныйДопФайл(ФайлДопДанных);*/
				/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДеревоДопДанных", ДеревоДопДанных);*/
			}
			/*Результат = ПрочитатьФайлCMLпоXDTO(ПолноеИмяФайла, ДеревоРазбора, НовыйЭД);*/
			if(true/*НЕ Результат*/)
			{
				/*// ошибка разбора ЭД
*/
			}
			/*НайденнаяСтрока = ДеревоРазбора.Строки.Найти("ЭлектронныеДокументы","ТипОбъекта");*/
			/*// раздел ЭлектронныеДокументы
*/
			/*СтрокаОбъекта = НайденнаяСтрока.Строки[0];*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Работа с ТОРГ-12

		public object ПолучитьДанныеНакладнойДляПечати(/*СтрокаОбъекта, ДеревоРазбора*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*СведенияОКонтрагенте = Новый Структура;*/
			/*СведенияОКонтрагенте.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ПолноеНаименование"));*/
			/*СведенияОКонтрагенте.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ИНН"));*/
			/*СведенияОКонтрагенте.Вставить("КодПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));*/
			/*СведенияОКонтрагенте.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));*/
			/*СведенияОКонтрагенте.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));*/
			/*СведенияОКонтрагенте.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));*/
			/*СведенияОКонтрагенте.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));*/
			/*СведенияОКонтрагенте.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));*/
			/*СведенияОКонтрагенте.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));*/
			/*СведенияОКонтрагенте.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Телефоны"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий 
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);*/
			}
			/*СведенияООрганизации = Новый Структура;*/
			/*СведенияООрганизации.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ПолноеНаименование"));*/
			/*СведенияООрганизации.Вставить("ИНН", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ИНН"));*/
			/*СведенияООрганизации.Вставить("КодПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ОКПО"));*/
			/*СведенияООрганизации.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));*/
			/*СведенияООрганизации.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));*/
			/*СведенияООрганизации.Вставить("НомерСчета",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.НомерСчета"));*/
			/*СведенияООрганизации.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Наименование"));*/
			/*СведенияООрганизации.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.Код"));*/
			/*СведенияООрганизации.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетОрганизации.Банк.КоррСчет"));*/
			/*СведенияООрганизации.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Организация.Телефоны"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий
		ИЛИ СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Интеркампани*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);*/
			}
			/*СведенияОГрузоотправителе = Новый Структура;*/
			/*СведенияОГрузоотправителе.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ПолноеНаименование"));*/
			/*СведенияОГрузоотправителе.Вставить("ИНН", 				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ИНН"));*/
			/*СведенияОГрузоотправителе.Вставить("КодПоОКПО", 		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ОКПО"));*/
			/*СведенияОГрузоотправителе.Вставить("ЮридическийАдрес",	 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ЮридическийАдрес_Представление"));*/
			/*СведенияОГрузоотправителе.Вставить("ФактическийАдрес",	 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.ФактическийАдрес_Представление"));*/
			/*СведенияОГрузоотправителе.Вставить("НомерСчета",		 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.НомерСчета"));*/
			/*СведенияОГрузоотправителе.Вставить("Банк",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Наименование"));*/
			/*СведенияОГрузоотправителе.Вставить("БИК",				 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.Код"));*/
			/*СведенияОГрузоотправителе.Вставить("КоррСчет",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузоотправителя.Банк.КоррСчет"));*/
			/*СведенияОГрузоотправителе.Вставить("Телефоны",			 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.Телефоны"));*/
			/*Контакты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.Контакты");*/
			if(true/*ТипЗнч(Контакты) = Тип("ТаблицаЗначений") И Контакты.Количество()>0*/)
			{
				/*Строка = Контакты.Найти(ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("ВидыКонтактнойИнформации","ТелефонКонтрагента"),"Вид");*/
			}
			/*ДанныеЗаполненияШапки.Вставить("СведенияОГрузоотправителе", СведенияОГрузоотправителе);*/
			/*СведенияОГрузополучателе = Новый Структура;*/
			/*СведенияОГрузополучателе.Вставить("ПолноеНаименование",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ПолноеНаименование"));*/
			/*СведенияОГрузополучателе.Вставить("ИНН", 			   	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ИНН"));*/
			/*СведенияОГрузополучателе.Вставить("КодПоОКПО", 		 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ОКПО"));*/
			/*СведенияОГрузополучателе.Вставить("ЮридическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ЮридическийАдрес_Представление"));*/
			/*СведенияОГрузополучателе.Вставить("ФактическийАдрес",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.ФактическийАдрес_Представление"));*/
			/*СведенияОГрузополучателе.Вставить("НомерСчета",		 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.НомерСчета"));*/
			/*СведенияОГрузополучателе.Вставить("Банк",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Наименование"));*/
			/*СведенияОГрузополучателе.Вставить("БИК",				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.Код"));*/
			/*СведенияОГрузополучателе.Вставить("КоррСчет",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "БанковскийСчетГрузополучателя.Банк.КоррСчет"));*/
			/*СведенияОГрузополучателе.Вставить("Телефоны",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель.Телефоны"));*/
			/*ДанныеЗаполненияШапки.Вставить("СведенияОГрузополучателе", СведенияОГрузополучателе);*/
			/*ДанныеЗаполненияШапки.Вставить("ПредставлениеПодразделения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель.СтруктурноеПодразделение"));*/
			/*ДанныеЗаполненияШапки.Вставить("ОрганизацияПоОКПО", 			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));*/
			/*ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.Наименование"));*/
			/*ДанныеЗаполненияШапки.Вставить("ПоставщикПоОКПО",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Контрагент.ОКПО"));*/
			/*ДанныеЗаполненияШапки.Вставить("ПредставлениеПлательщика",	"");*/
			/*ДанныеЗаполненияШапки.Вставить("ПлательщикПоОКПО",			"");*/
			/*ДанныеЗаполненияШапки.Вставить("ОснованиеНомер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерПоДаннымКлиента"));*/
			/*ДанныеЗаполненияШапки.Вставить("ОснованиеДата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаПоДаннымКлиента"));*/
			/*ДанныеЗаполненияШапки.Вставить("НаименованиеОснования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НаименованиеОснования"));*/
			/*ДанныеЗаполненияШапки.Вставить("Номер",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер"));*/
			/*ДанныеЗаполненияШапки.Вставить("Дата",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата"));*/
			/*ДанныеЗаполненияШапки.Вставить("Курс", 				ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Курс"));*/
			/*ДанныеЗаполненияШапки.Вставить("КодВалюты",			ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Валюта.Код"));*/
			/*ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ЦенаВключаетНДС"));*/
			/*ДанныеЗаполненияШапки.Вставить("АдресДоставки", 	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "АдресДоставки"));*/
			/*ДанныеЗаполненияПодвала = Новый Структура;*/
			/*ДанныеЗаполненияПодвала.Вставить("КоличествоЛистовВПриложении", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоЛистовВПрилПрописью"));*/
			/*ДанныеЗаполненияПодвала.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоЗаписейПрописью"));*/
			/*ДанныеЗаполненияПодвала.Вставить("ВсегоМестПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "КоличествоМестПрописью"));*/
			/*ДанныеЗаполненияПодвала.Вставить("МассаГрузаПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "МассаГрузаПрописью"));*/
			/*ДанныеЗаполненияПодвала.Вставить("СуммаПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаВсегоПрописью"));*/
			/*ДанныеЗаполненияПодвала.Вставить("ДатаОтпуска", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаОтпуска"));*/
			/*ДанныеЗаполненияПодвала.Вставить("ДолжностьРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьРуководителя"));*/
			/*ДанныеЗаполненияПодвала.Вставить("ДолжностьГлавБухгалтера", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьГлавБухгалтера"));*/
			/*ДанныеЗаполненияПодвала.Вставить("ДолжностьКладовщика", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ДолжностьКладовщика"));*/
			/*ДанныеЗаполненияПодвала.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОРуководителя"));*/
			/*ДанныеЗаполненияПодвала.Вставить("ФИОГлавБухгалтера", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОГлавБухгалтера"));*/
			/*ДанныеЗаполненияПодвала.Вставить("ФИОКладовщика", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Грузоотправитель.ФИОКладовщика"));*/
			/*ТЗ = Новый ТаблицаЗначений;*/
			/*ТЗ.Колонки.Добавить("ТоварКод");*/
			/*ТЗ.Колонки.Добавить("СтавкаНДС");*/
			/*ТЗ.Колонки.Добавить("ВидУпаковки");*/
			/*ТЗ.Колонки.Добавить("ТоварНаименование");*/
			/*ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");*/
			/*ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");*/
			/*ТЗ.Колонки.Добавить("Цена", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
			/*ТЗ.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
			/*ТЗ.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
			/*ТЗ.Колонки.Добавить("СуммаСНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
			/*ТЗ.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
			/*ТЗ.Колонки.Добавить("МассаНетто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
			/*ТЗ.Колонки.Добавить("МассаБрутто", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
			/*ТЗ.Колонки.Добавить("КоличествоМест", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
			/*ТЗ.Колонки.Добавить("КоличествоВОдномМесте", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
			/*ИмяНоменклатуры = "Номенклатура";*/
			/*СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));*/
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);*/
			/*ДанныеДляОбъекта.Вставить("Подвал", ДанныеЗаполненияПодвала);*/
			/*ДанныеДляОбъекта.Вставить("Товары", ТЗ);*/
			return null;
		}
		// Процедура заполняет табличный документ ТОРГ-12.
		//

		public void ЗаполнитьТабличныйДокументТОРГ12_ЭД(/*ТабличныйДокумент, ДанныеПечати, ДанныеПокупателя*/)
		{
			/*ТабличныйДокумент.ПолеСлева = 5;*/
			/*ТабличныйДокумент.ПолеСправа = 5;*/
			/*ТабличныйДокумент.РазмерКолонтитулаСверху = 0;*/
			/*ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;*/
			/*ТабличныйДокумент.АвтоМасштаб = Истина;*/
			/*ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;*/
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет(?(ДанныеПокупателя.Количество() > 0, "ЭД_ТОРГ12Покупателя", "ЭД_ТОРГ12"));*/
			/*НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;*/
			/*ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_ТОРГ12";*/
			/*ЗаполнитьРеквизитыШапкиТОРГ12(ДанныеПечати.Шапка, Макет, ТабличныйДокумент);*/
			/*НомерСтраницы = 1;*/
			/*ИтоговыеСуммы = СтруктураИтоговыеСуммы();*/
			/*КоэффициентПересчета = 1;*/
			/*ДанныеСтроки = СтруктураДанныеСтроки(КоэффициентПересчета);*/
			/*// Создаем массив для проверки вывода
*/
			/*МассивВыводимыхОбластей = Новый Массив;*/
			/*// Выводим многострочную часть документа
*/
			/*ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаб");*/
			/*ОбластьМакета           = Макет.ПолучитьОбласть("Строка");*/
			/*ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");*/
			/*ОбластьВсего            = Макет.ПолучитьОбласть("Всего");*/
			/*ОбластьПодвала          = Макет.ПолучитьОбласть("Подвал");*/
			/*// Выводим табличную часть документа
*/
			/*ТЧТовары = ДанныеПечати.Товары;*/
			/*КоличествоСтрок = ТЧТовары.Количество();*/
			/*// Выводим итоги по последней странице
*/
			/*ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогоПоСтранице");*/
			/*ОбластьИтоговПоСтранице.Параметры.Заполнить(ИтоговыеСуммы);*/
			/*ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);*/
			/*// Выводим итоги по документу в целом
*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Всего");*/
			/*ОбластьМакета.Параметры.Заполнить(ИтоговыеСуммы);*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*// Выводим подвал документа
*/
			/*ЗаполнитьРеквизитыПодвалаТОРГ12(ДанныеПечати.Подвал, Макет, ТабличныйДокумент, ДанныеПокупателя);*/
		}
		// Процедура заполнения реквизитов шапки ТОРГ-12.
		//
		// Параметры:
		//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
		//  Макет - Макет ТОРГ-12
		//  ТабличныйДокумент - Табличный документ
		//

		public void ЗаполнитьРеквизитыШапкиТОРГ12(/*ДанныеПечати, Макет, ТабличныйДокумент*/)
		{
			/*// Выводим общие реквизиты шапки
*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Шапка");*/
			/*ОбластьМакета.Параметры.Заполнить(ДанныеПечати);*/
			/*ОбластьМакета.Параметры.НомерДокумента = ДанныеПечати.Номер;*/
			/*ОбластьМакета.Параметры.ДатаДокумента  = ДанныеПечати.Дата;*/
			/*ОбластьМакета.Параметры.Основание = 
		?(ЗначениеЗаполнено(ДанныеПечати.НаименованиеОснования), ДанныеПечати.НаименованиеОснования, "")
		+ ?(ЗначениеЗаполнено(ДанныеПечати.ОснованиеНомер), " № " + ДанныеПечати.ОснованиеНомер, "")
		+ ?(ЗначениеЗаполнено(ДанныеПечати.ОснованиеДата), " от " + ДанныеПечати.ОснованиеДата, "");*/
			/*ОбластьМакета.Параметры.ПредставлениеОрганизации = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОГрузоотправителе, "ПолноеНаименование,ИНН,ЮридическийАдрес,ФактическийАдрес,НомерСчета,Банк,БИК,КоррСчет");*/
			/*ОбластьМакета.Параметры.ПредставлениеГрузополучателя = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОГрузополучателе, "ПолноеНаименование,ИНН,ЮридическийАдрес,ФактическийАдрес,НомерСчета,Банк,БИК,КоррСчет");*/
			/*ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОПоставщике);*/
			/*ОбластьМакета.Параметры.ПредставлениеПлательщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.СведенияОПокупателе);*/
			/*// Выводим всевозможные коды.
*/
			/*ОбластьМакета.Параметры.ОрганизацияПоОКПО = ДанныеПечати.СведенияОПоставщике.КодПоОКПО;*/
			/*ОбластьМакета.Параметры.ПлательщикПоОКПО  = ДанныеПечати.СведенияОПокупателе.КодПоОКПО;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
		}
		// Процедура заполнения реквизитов подвала ТОРГ-12.
		//
		// Параметры:
		//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
		//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
		//  Макет - Макет ТОРГ-12
		//  ТабличныйДокумент - Табличный документ
		//

		public void ЗаполнитьРеквизитыПодвалаТОРГ12(/*ДанныеПечати, Макет, ТабличныйДокумент, ДанныеПокупателя*/)
		{
			/*ОбластьМакета = Макет.ПолучитьОбласть("Подвал");*/
			/*ОбластьМакета.Параметры.Заполнить(ДанныеПечати);*/
			/*ОбластьМакета.Параметры.Заполнить(ДанныеПокупателя);*/
			/*ПолнаяДатаДокумента = Формат(ДанныеПечати.ДатаОтпуска, "ДФ=""дд ММММ гггг """"года""""""");*/
			/*ДлинаСтроки = СтрДлина(ПолнаяДатаДокумента);*/
			/*ПервыйРазделитель = Найти(ПолнаяДатаДокумента, " ");*/
			/*ВторойРазделитель = Найти(Прав(ПолнаяДатаДокумента, ДлинаСтроки - ПервыйРазделитель), " ") + ПервыйРазделитель;*/
			/*ОбластьМакета.Параметры.ДатаДокументаДень = """" + Лев(ПолнаяДатаДокумента, ПервыйРазделитель -1 ) + """";*/
			/*ОбластьМакета.Параметры.ДатаДокументаМесяц = Сред(ПолнаяДатаДокумента, ПервыйРазделитель + 1, ВторойРазделитель - ПервыйРазделитель - 1);*/
			/*ОбластьМакета.Параметры.ДатаДокументаГод = Прав(ПолнаяДатаДокумента, ДлинаСтроки - ВторойРазделитель);*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// Работа со СЧЕТ (ЗАКАЗ КЛИЕНТА)

		public object ПолучитьДанныеСчетаЗаказаДляПечати(/*СтрокаОбъекта, ДеревоРазбора, Тип = "Счет"*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*СведенияОКонтрагенте = Новый Структура;*/
			/*СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));*/
			/*СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));*/
			/*СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));*/
			/*СведенияОКонтрагенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));*/
			/*СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));*/
			/*СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПолучателе", СведенияОКонтрагенте);*/
			}
			/*СведенияООрганизации = Новый Структура;*/
			/*СведенияООрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));*/
			/*СведенияООрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));*/
			/*СведенияООрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.КПП"));*/
			/*СведенияООрганизации.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ОКПО"));*/
			/*СведенияООрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));*/
			/*СведенияООрганизации.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);*/
			}
			/*ДанныеЗаполненияШапки.Вставить("БИКБанкаПолучателя",               ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));*/
			/*ДанныеЗаполненияШапки.Вставить("БанкПолучателяПредставление",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));*/
			/*ДанныеЗаполненияШапки.Вставить("СчетБанкаПолучателяПредставление", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));*/
			/*ДанныеЗаполненияШапки.Вставить("СчетПолучателяПредставление",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));*/
			/*ДанныеЗаполненияШапки.Вставить("БИКБанкаКорреспондента",           ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Код"));*/
			/*ДанныеЗаполненияШапки.Вставить("БанкКорреспондент",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.Наименование"));*/
			/*ДанныеЗаполненияШапки.Вставить("СчетБанкаКорреспондента",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.БанкКорреспондент.КоррСчет"));*/
			/*ДанныеЗаполненияШапки.Вставить("Номер",             ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));*/
			/*ДанныеЗаполненияШапки.Вставить("Дата",              ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));*/
			/*ДанныеЗаполненияШапки.Вставить("КодВалюты",         ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Код"));*/
			/*ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СрокПлатежа"));*/
			/*ДанныеЗаполненияШапки.Вставить("ДатаПлатежа",       ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ДатаОкончанияДействияСчета"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогиПрописью"));*/
			/*ДанныеЗаполненияШапки.Вставить("Руководитель",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Руководитель"));*/
			/*ДанныеЗаполненияШапки.Вставить("Бухгалтер",         ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Бухгалтер"));*/
			/*ДанныеЗаполненияШапки.Вставить("НазначениеПлатежа", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"НазначениеПлатежа"));*/
			/*ДанныеЗаполненияШапки.Вставить("Сумма",             ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СуммаИтог"));*/
			/*ДанныеЗаполненияШапки.Вставить("СуммаНДС",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"СуммаНалогаИтог"));*/
			/*ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));*/
			/*ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДополнительнаяИнформация"));*/
			/*ТЗ = Новый ТаблицаЗначений;*/
			/*ТЗ.Колонки.Добавить("Товар");*/
			/*ТЗ.Колонки.Добавить("Код");*/
			/*ТЗ.Колонки.Добавить("Артикул");*/
			/*ТЗ.Колонки.Добавить("ЕдиницаИзмерения");*/
			/*ТЗ.Колонки.Добавить("Количество");*/
			/*ТЗ.Колонки.Добавить("Цена");*/
			/*ТЗ.Колонки.Добавить("Сумма");*/
			/*ТЗ.Колонки.Добавить("СуммаНДС");*/
			/*ТЗ.Колонки.Добавить("СтавкаНДС");*/
			/*ТЗ.Колонки.Добавить("СуммаСкидки");*/
			/*СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));*/
			/*// ЭтапыОплаты
*/
			/*ТЗЭтапыОплаты = Новый ТаблицаЗначений;*/
			if(true/*Тип = "Заказ"*/)
			{
				/*ТЗЭтапыОплаты.Колонки.Добавить("ВариантОплаты");*/
			}
			/*ТЗЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");*/
			/*ТЗЭтапыОплаты.Колонки.Добавить("ПроцентПлатежа");*/
			/*ТЗЭтапыОплаты.Колонки.Добавить("СуммаПлатежа");*/
			/*ТЗЭтапыОплаты.Колонки.Добавить("НомерСтроки");*/
			/*НомерСтроки = 1;*/
			/*СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "ЭтапыГрафикаОплаты"));*/
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка",       ДанныеЗаполненияШапки);*/
			/*ДанныеДляОбъекта.Вставить("Товары",      ТЗ);*/
			/*ДанныеДляОбъекта.Вставить("ЭтапыОплаты", ТЗЭтапыОплаты);*/
			return null;
		}
		// Процедура заполняет табличный документ Счет-заказ.
		//

		public void ЗаполнитьТабличныйДокументСчетЗаказ_ЭД(/*ТабличныйДокумент, ДанныеПечати, Тип = "Счет"*/)
		{
			/*ИспользоватьРучныеСкидки         = ЭлектронныеДокументыСлужебный.ПолучитьЗначениеФункциональнойОпции("ИспользоватьРучныеСкидкиВПродажах");*/
			/*ИспользоватьАвтоматическиеСкидки = ЭлектронныеДокументыСлужебный.ПолучитьЗначениеФункциональнойОпции("ИспользоватьАвтоматическиеСкидкиВПродажах");*/
			/*КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();*/
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_СчетЗаказ");*/
			/*НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;*/
			/*ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_СчетЗаказ";*/
			/*ТаблицаТовары = ДанныеПечати.Товары;*/
			if(true/*ТаблицаТовары.Количество() > 0*/)
			{
				/*ЧастичнаяОплата = Ложь;*/
			}
			/*ЕстьСкидки = ЭлектронныеДокументыПереопределяемый.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки
		ИЛИ ИспользоватьАвтоматическиеСкидки);*/
			/*ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);*/
			/*ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС") <> Неопределено
		И ТаблицаТовары.Итог("СуммаНДС") > 0);*/
			if(true/*ДанныеПечати.УчитыватьНДС И ЕстьСкидки*/)
			{
				/*ОбластьКолонкаТовар = Макет.Область("ТоварСНДССоСкидкой");*/
			}
			if(true/*НЕ ВыводитьКоды*/)
			{
				if(true/*ДанныеПечати.УчитыватьНДС*/)
				{
					/*ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.2;*/
				}
			}
			if(true/*ЕстьСкидки*/)
			{
				/*ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|НомерСтроки");*/
				/*ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|КолонкаКодов");*/
				/*ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ТоварСНДССоСкидкой");*/
				/*ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСНДССоСкидкой|ДанныеСНДССоСкидкой");*/
			}
			/*ТаблицаЭтапыОплаты = Новый ТаблицаЗначений;*/
			/*ТаблицаЭтапыОплаты.Колонки.Добавить("ДатаПлатежа");*/
			if(true/*ДанныеПечати.Свойство("ДатаПлатежа")*/)
			{
				/*НовСтрока = ТаблицаЭтапыОплаты.Добавить();*/
				/*НовСтрока.ДатаПлатежа = ДанныеПечати.ДатаПлатежа;*/
			}
			/*ЗаполнитьРеквизитыШапкиСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип);*/
			/*СоответствиеСтавокНДС = Новый Соответствие();*/
			/*ЭлектронныеДокументыПереопределяемый.ПолучитьСоответствиеСтавокНДС(СоответствиеСтавокНДС);*/
			if(true/*ЧастичнаяОплата*/)
			{
				/*ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЧастичнаяОплата"));*/
				/*ОбластьСтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыЧастичнаяОплата");*/
				/*ОбластьСтрокаТаблицы.Параметры.Товар = ДанныеПечати.Шапка.НазначениеПлатежа;*/
				/*ОбластьСтрокаТаблицы.Параметры.Сумма = ДанныеПечати.Шапка.Сумма;*/
				/*ТабличныйДокумент.Вывести(ОбластьСтрокаТаблицы);*/
				/*ОбластьИтого = Макет.ПолучитьОбласть("ИтогоЧастичнаяОплата");*/
				/*ОбластьИтого.Параметры.Всего = ДанныеПечати.Шапка.Сумма;*/
				/*ТабличныйДокумент.Присоединить(ОбластьИтого);*/
				if(true/*ЗначениеЗаполнено(ДанныеПечати.Шапка.СуммаНДС)*/)
				{
					/*ОбластьНДС = Макет.ПолучитьОбласть("ИтогоНДСЧастичнаяОплата");*/
					/*ОбластьНДС.Параметры.НДС = "В т.ч. НДС:";*/
					/*ОбластьНДС.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;*/
					/*ТабличныйДокумент.Вывести(ОбластьНДС);*/
				}
			}
			/*// Вывести Сумму прописью
*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");*/
			/*ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ТаблицаЭтапыОплаты = ДанныеПечати.ЭтапыОплаты;*/
			if(true/*ТаблицаЭтапыОплаты.Количество() > 1*/)
			{
				/*ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаТаблицыЭтапыОплаты"));*/
				/*Область = Макет.ПолучитьОбласть("СтрокаТаблицыЭтапыОплаты");*/
				/*ТабличныйДокумент.Вывести(Макет.ПолучитьОбласть("ИтогоЭтапыОплаты"));*/
			}
			/*ЗаполнитьРеквизитыПодвалаСчетЗаказ(ДанныеПечати, Макет, ТабличныйДокумент, Тип);*/
		}
		// Процедура заполнения реквизитов шапки счета, заказа.
		//
		// Параметры:
		//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
		//  Макет - Макет СчетЗаказ
		//  ТабличныйДокумент - Табличный документ
		//

		public void ЗаполнитьРеквизитыШапкиСчетЗаказ(/*ДанныеПечати, Макет, ТабличныйДокумент, ТаблицаЭтапыОплаты, Тип*/)
		{
			/*СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;*/
			/*СведенияОПолучателе = ДанныеПечати.Шапка.СведенияОПолучателе;*/
			if(true/*Тип = "Счет"*/)
			{
				/*ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокСчета");*/
				if(true/*ЗначениеЗаполнено(ДанныеПечати.Шапка.ДатаПлатежа)*/)
				{
					/*НадписьСрокДействия = НСтр("ru='Счет действителен до %СрокДействия%.'");*/
					/*НадписьСрокДействия = СтрЗаменить(НадписьСрокДействия, "%СрокДействия%",
				Формат(ДанныеПечати.Шапка.ДатаПлатежа, "ДЛФ=D"));*/
					/*ОбластьМакета.Параметры.СрокДействия = НадписьСрокДействия;*/
				}
				/*ОбластьМакета.Параметры.ИНН = СведенияОПоставщике.ИНН;*/
				/*ОбластьМакета.Параметры.КПП = СведенияОПоставщике.КПП;*/
				if(true/*ЗначениеЗаполнено(ДанныеПечати.Шапка.БанкКорреспондент)*/)
				{
					/*ОбластьМакета.Параметры.БИКБанкаПолучателя               = ДанныеПечати.Шапка.БИКБанкаКорреспондента;*/
					/*ОбластьМакета.Параметры.БанкПолучателяПредставление      = ДанныеПечати.Шапка.БанкКорреспондент;*/
					/*ОбластьМакета.Параметры.СчетБанкаПолучателяПредставление = ДанныеПечати.Шапка.СчетБанкаКорреспондента;*/
					/*ОбластьМакета.Параметры.СчетПолучателяПредставление      = ДанныеПечати.Шапка.СчетБанкаПолучателяПредставление;*/
				}
				/*ОбластьМакета.Параметры.ПредставлениеПоставщикаДляПлатПоручения = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
			СведенияОПоставщике, "ПолноеНаименование,");*/
				/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			}
			/*ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");*/
			if(true/*Тип = "Счет"*/)
			{
				/*ТекстЗаголовка = НСтр("ru='Счет на оплату № %НомерДокумента% от %ДатаДокумента% г.'");*/
			}
			/*ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);*/
			/*ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));*/
			/*ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");*/
			/*ОбластьМакета.Параметры.ТекстПоставщик = ?(Тип = "Счет", НСтр("ru='Поставщик:'"), НСтр("ru='Исполнитель:'"));*/
			/*ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПоставщике,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");*/
			/*ОбластьМакета.Параметры.ТекстПокупатель         = ?(Тип = "Счет", НСтр("ru='Покупатель:'"), НСтр("ru='Заказчик:'"));*/
			/*ОбластьМакета.Параметры.ПредставлениеПолучателя = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(СведенияОПолучателе,
		"ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			if(true/*Тип = "Счет"*/)
			{
				/*ОбластьМакета = Макет.ПолучитьОбласть("НазначениеПлатежа");*/
				/*ОбластьМакета.Параметры.НазначениеПлатежа = ДанныеПечати.Шапка.НазначениеПлатежа;*/
				/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			}
		}
		// Процедура заполнения реквизитов подвала счета, заказа.
		//
		// Параметры:
		//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
		//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
		//  Макет - Макет СчетЗаказ
		//  ТабличныйДокумент - Табличный документ
		//

		public void ЗаполнитьРеквизитыПодвалаСчетЗаказ(/*ДанныеПечати, Макет, ТабличныйДокумент, Тип*/)
		{
			if(true/*ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация)*/)
			{
				/*Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");*/
				/*Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;*/
				/*ТабличныйДокумент.Вывести(Область);*/
			}
			if(true/*Тип = "Счет"*/)
			{
				/*ОбластьМакета = Макет.ПолучитьОбласть("ПодвалСчета");*/
				/*ОбластьМакета.Параметры.ФИОРуководителя = ДанныеПечати.Шапка.Руководитель;*/
				/*ОбластьМакета.Параметры.ФИОБухгалтера   = ДанныеПечати.Шапка.Бухгалтер;*/
			}
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// Работа с ЗАКАЗОМ ПОСТАВЩИКУ

		public object ПолучитьДанныеЗаказаПоставщикуДляПечати(/*СтрокаОбъекта, ДеревоРазбора*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*СведенияООрганизации = Новый Структура;*/
			/*СведенияООрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));*/
			/*СведенияООрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));*/
			/*СведенияООрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.КПП"));*/
			/*СведенияООрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияООрганизации);*/
			}
			/*СведенияОКонтрагенте = Новый Структура;*/
			/*СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));*/
			/*СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));*/
			/*СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));*/
			/*СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКонтрагенте);*/
			}
			/*ДанныеЗаполненияШапки.Вставить("Номер",                    ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Номер"));*/
			/*ДанныеЗаполненияШапки.Вставить("Дата",                     ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Дата"));*/
			/*ДанныеЗаполненияШапки.Вставить("КодВалюты",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Валюта.Код"));*/
			/*ДанныеЗаполненияШапки.Вставить("СуммаНДС",                 ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаНалогаИтог"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогиПрописью",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));*/
			/*ДанныеЗаполненияШапки.Вставить("ДополнительнаяИнформация", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДополнительнаяИнформация"));*/
			/*ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));*/
			/*ТЗ = Новый ТаблицаЗначений;*/
			/*ТЗ.Колонки.Добавить("Товар");*/
			/*ТЗ.Колонки.Добавить("НаименованиеНоменклатурыПоставщика");*/
			/*ТЗ.Колонки.Добавить("Код");*/
			/*ТЗ.Колонки.Добавить("Артикул");*/
			/*ТЗ.Колонки.Добавить("ЕдиницаИзмерения");*/
			/*ТЗ.Колонки.Добавить("Количество");*/
			/*ТЗ.Колонки.Добавить("Цена");*/
			/*ТЗ.Колонки.Добавить("Сумма");*/
			/*ТЗ.Колонки.Добавить("СуммаНДС");*/
			/*ТЗ.Колонки.Добавить("СуммаСНДС");*/
			/*ТЗ.Колонки.Добавить("СтавкаНДС");*/
			/*ТЗ.Колонки.Добавить("СуммаСкидки");*/
			/*СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));*/
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);*/
			/*ДанныеДляОбъекта.Вставить("Товары", ТЗ);*/
			return null;
		}
		// Процедура заполняет табличный документ "Заказ поставщику".
		//

		public void ЗаполнитьТабличныйДокументЗаказПоставщику_ЭД(/*ТабличныйДокумент, ДанныеПечати*/)
		{
			/*ИспользоватьРучныеСкидки = ЭлектронныеДокументыСлужебный.ПолучитьЗначениеФункциональнойОпции(
		"ИспользоватьРучныеСкидкиВЗакупках");*/
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ЗаказПоставщику");*/
			/*НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;*/
			/*ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЭД_ЗаказПоставщику";*/
			/*ТаблицаТовары = ДанныеПечати.Товары;*/
			/*КолонкаКодов  = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();*/
			/*ВыводитьКоды  = ЗначениеЗаполнено(КолонкаКодов);*/
			/*ДанныеПечати.Вставить("УчитыватьНДС", ТаблицаТовары.Колонки.Найти("СуммаНДС") <> Неопределено
		И ТаблицаТовары.Итог("СуммаНДС") > 0);*/
			/*ЕстьСкидки = ЭлектронныеДокументыПереопределяемый.НужноВыводитьСкидки(ТаблицаТовары, ИспользоватьРучныеСкидки);*/
			if(true/*ЕстьСкидки*/)
			{
				/*ОбластьКолонкаТовар = Макет.Область("ТоварСУсловиемИлиСоСкидкой");*/
			}
			if(true/*Не ВыводитьКоды*/)
			{
				/*ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки * 1.14;*/
			}
			if(true/*ЕстьСкидки*/)
			{
				/*ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|НомерСтроки");*/
				/*ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|КолонкаКодов");*/
				/*ОбластьТовар  = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");*/
				/*ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");*/
			}
			/*// Заполнить реквизиты шапки
*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");*/
			/*ТекстЗаголовка = НСтр("ru='Заказ поставщику № %НомерДокумента% от %ДатаДокумента% г.'");*/
			/*ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);*/
			/*ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));*/
			/*ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");*/
			/*ОбластьМакета.Параметры.ПредставлениеПоставщика = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.Шапка.СведенияОПоставщике, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");*/
			/*ОбластьМакета.Параметры.ПредставлениеПолучателя = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		ДанныеПечати.Шапка.СведенияОПокупателе, "ПолноеНаименование,ИНН,КПП,ЮридическийАдрес,Телефоны,");*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ТабличныйДокумент.Вывести(ОбластьНомера);*/
			if(true/*ВыводитьКоды*/)
			{
				/*ОбластьКодов.Параметры.ИмяКолонкиКодов = КолонкаКодов;*/
				/*ТабличныйДокумент.Присоединить(ОбластьКодов);*/
			}
			/*ОбластьТовар.Параметры.Товар = НСтр("ru='Товары (работы, услуги)'");*/
			/*ТабличныйДокумент.Присоединить(ОбластьТовар);*/
			/*ТабличныйДокумент.Присоединить(ОбластьДанных);*/
			if(true/*ЕстьСкидки*/)
			{
				/*ОбластьНомера = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|НомерСтроки");*/
				/*ОбластьКодов  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|КолонкаКодов");*/
				/*ОбластьТовар  = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");*/
				/*ОбластьДанных = Макет.ПолучитьОбласть("СтрокаТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");*/
			}
			/*Сумма          = 0;*/
			/*СуммаНДС       = 0;*/
			/*ВсегоСкидок    = 0;*/
			/*ВсегоБезСкидок = 0;*/
			/*НомерСтроки    = 0;*/
			if(true/*ЕстьСкидки*/)
			{
				/*ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|НомерСтроки");*/
				/*ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|КолонкаКодов");*/
				/*ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ТоварСУсловиемИлиСоСкидкой");*/
				/*ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыСоСкидкой|ДанныеСУсловиемИлиСоСкидкой");*/
			}
			/*ТабличныйДокумент.Вывести(ОбластьНомера);*/
			if(true/*ВыводитьКоды*/)
			{
				/*ТабличныйДокумент.Присоединить(ОбластьКодов);*/
			}
			/*ТабличныйДокумент.Присоединить(ОбластьТовар);*/
			if(true/*ЕстьСкидки*/)
			{
				/*ОбластьДанных.Параметры.ВсегоСкидок    = ВсегоСкидок;*/
				/*ОбластьДанных.Параметры.ВсегоБезСкидок = ВсегоБезСкидок;*/
			}
			/*ОбластьДанных.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма);*/
			/*ТабличныйДокумент.Присоединить(ОбластьДанных);*/
			/*// Вывести ИтогоНДС
*/
			if(true/*ДанныеПечати.УчитыватьНДС*/)
			{
				/*ОбластьНомера = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|НомерСтроки");*/
				/*ОбластьКодов  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|КолонкаКодов");*/
				/*ОбластьТовар  = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Товар");*/
				/*ОбластьДанных = Макет.ПолучитьОбласть("ПодвалТаблицыНДС|Данные");*/
				/*ТабличныйДокумент.Вывести(ОбластьНомера);*/
				if(true/*ВыводитьКоды*/)
				{
					/*ТабличныйДокумент.Присоединить(ОбластьКодов);*/
				}
				/*ТабличныйДокумент.Присоединить(ОбластьТовар);*/
				if(true/*ДанныеПечати.Шапка.ЦенаВключаетНДС*/)
				{
					/*ОбластьДанных.Параметры.НДС = НСтр("ru='В том числе НДС:'");*/
				}
				/*ОбластьДанных.Параметры.ВсегоНДС = ДанныеПечати.Шапка.СуммаНДС;*/
				/*ТабличныйДокумент.Присоединить(ОбластьДанных);*/
			}
			/*// Вывести Сумму прописью
*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");*/
			/*ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;*/
			/*ОбластьМакета.Параметры.ИтоговаяСтрока = ИтоговаяСтрока;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			if(true/*ЗначениеЗаполнено(ДанныеПечати.Шапка.ДополнительнаяИнформация)*/)
			{
				/*Область = Макет.ПолучитьОбласть("ДополнительнаяИнформация");*/
				/*Область.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ДополнительнаяИнформация;*/
				/*ТабличныйДокумент.Вывести(Область);*/
			}
			/*// Вывести подписи
*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("ПодвалЗаказа");*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// Работа со СЧЕТ-ФАКТУРА

		public object ПолучитьДанныеСчетаФактурыДляПечати(/*СтрокаОбъекта, ДеревоРазбора*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*ДатаДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");*/
			/*НомерДокумента = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");*/
			/*ДанныеЗаполненияШапки.Вставить("Номер", "Счет-фактура №" + НомерДокумента +" от "+ Формат(ДатаДокумента,"ДЛФ=DD"));*/
			/*ДатаИспрСтрокой = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИспрДата");*/
			/*НомерИсправления = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ИспрНом");*/
			/*ДанныеЗаполненияШапки.Вставить("НомерИсправления", "Исправление №"
		+ ?(ЗначениеЗаполнено(НомерИсправления), НомерИсправления, "--") + " от "
		+ ?(ЗначениеЗаполнено(ДатаИспрСтрокой), Формат(ДатаИспрСтрокой, "ДЛФ=DD"), "--"));*/
			/*ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика", "Продавец: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "Продавец"));*/
			/*ДанныеЗаполненияШапки.Вставить("АдресПоставщика", "Адрес: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ПродавецАдрес"));*/
			/*ИННПоставщика = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПродавецИНН");*/
			/*КПППоставщика = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПродавецКПП");*/
			/*ДанныеЗаполненияШапки.Вставить("ИННПоставщика", "ИНН/КПП продавца: " + ИННПоставщика + ?(ЗначениеЗаполнено(
		КПППоставщика), "/" + КПППоставщика, ""));*/
			/*Грузоотправитель = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузоотправитель");*/
			/*ГрузоотправительАдрес = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ГрузоотправительАдрес");*/
			if(true/*ЗначениеЗаполнено(Грузоотправитель)*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузоотправителя", "Грузоотправитель и его адрес: " + Грузоотправитель+ 
			?(ЗначениеЗаполнено(ГрузоотправительАдрес),", "+ГрузоотправительАдрес,""));*/
			}
			/*Грузополучатель = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Грузополучатель");*/
			/*ГрузополучательАдрес = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ГрузополучательАдрес");*/
			if(true/*ЗначениеЗаполнено(Грузополучатель)*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("ПредставлениеГрузополучателя", "Грузополучатель и его адрес: " + Грузополучатель+ 
			?(ЗначениеЗаполнено(ГрузополучательАдрес),", "+ГрузополучательАдрес,""));*/
			}
			/*ДанныеЗаполненияШапки.Вставить("ПоДокументу", "К платежно-расчетному документу № "
		+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПлатежныйДокумент"));*/
			/*ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя","Покупатель: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "Покупатель"));*/
			/*ДанныеЗаполненияШапки.Вставить("АдресПокупателя", "Адрес: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ПокупательАдрес"));*/
			/*ИННПокупателя = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПокупательИНН");*/
			/*КПППокупателя = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПокупательКПП");*/
			/*ДанныеЗаполненияШапки.Вставить("ИННПокупателя", "ИНН/КПП покупателя: " + ИННПокупателя
		+ ?(ЗначениеЗаполнено(КПППокупателя), "/" + КПППокупателя, ""));*/
			/*КодВалюты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВалКод");*/
			/*ТекстВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Валюта: код %1", КодВалюты);*/
			/*ДанныеЗаполненияШапки.Вставить("Валюта", ТекстВалюта);*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогоСуммаБезНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовБезНДС"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогоСуммаНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СумНДС"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогоВсего", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовУчНал"));*/
			/*ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантЮЛ"));*/
			/*ДанныеЗаполненияШапки.Вставить("ФИОПБОЮЛ", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантФЛ"));*/
			/*ДанныеЗаполненияШапки.Вставить("Свидетельство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СвГосРегИП"));*/
			/*ТЗ = Новый ТаблицаЗначений;*/
			/*ТЗ.Колонки.Добавить("ТоварНаименование");*/
			/*ТЗ.Колонки.Добавить("ЕдиницаИзмерения");*/
			/*ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");*/
			/*ТЗ.Колонки.Добавить("Количество");*/
			/*ТЗ.Колонки.Добавить("Цена");*/
			/*ТЗ.Колонки.Добавить("СуммаБезНДС");*/
			/*ТЗ.Колонки.Добавить("Акциз");*/
			/*ТЗ.Колонки.Добавить("СтавкаНДС");*/
			/*ТЗ.Колонки.Добавить("СуммаНДС");*/
			/*ТЗ.Колонки.Добавить("СуммаСНДС");*/
			/*ТЗ.Колонки.Добавить("СтранаПроисхожденияКод");*/
			/*ТЗ.Колонки.Добавить("ПредставлениеСтраны");*/
			/*ТЗ.Колонки.Добавить("ПредставлениеГТД");*/
			/*СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));*/
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);*/
			/*ДанныеДляОбъекта.Вставить("Товары", ТЗ);*/
			return null;
		}
		// Процедура заполняет табличный документ "Счет-фактура".
		//

		public void ЗаполнитьТабличныйДокументСчетФактура_ЭД(/*ТабличныйДокумент, ДанныеПечати*/)
		{
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_СчетФактура1137");*/
			/*ШапкаТаблицы = Макет.ПолучитьОбласть("Шапка");*/
			/*ШапкаТаблицы.Параметры.Заполнить(ДанныеПечати.Шапка);*/
			/*ТабличныйДокумент.Вывести(ШапкаТаблицы);*/
			/*// Выводим заголовок таблицы.
*/
			/*ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");*/
			/*ТабличныйДокумент.Вывести(ЗаголовокТаблицы);*/
			/*ДанныеСтроки = СтруктураДанныеСтроки(1);*/
			/*// Создаем массив для проверки вывода.
*/
			/*МассивВыводимыхОбластей = Новый Массив;*/
			/*// Выводим многострочную часть документа.
*/
			/*ОбластьМакета  = Макет.ПолучитьОбласть("Строка");*/
			/*ОбластьИтого   = Макет.ПолучитьОбласть("Итого");*/
			/*ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");*/
			/*Товары = ДанныеПечати.Товары;*/
			/*КоличествоСтрок = Товары.Количество();*/
			/*ОбластьИтого.Параметры.Заполнить(ДанныеПечати.Шапка);*/
			/*ТабличныйДокумент.Вывести(ОбластьИтого);*/
			/*ОбластьПодвала.Параметры.Заполнить(ДанныеПечати.Шапка);*/
			/*ТабличныйДокумент.Вывести(ОбластьПодвала);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// Работа с КОРРЕКТИРОВОЧНЫЙ СЧЕТ-ФАКТУРА

		public object ПолучитьДанныеКорректировочногоСчетаФактурыДляПечати(/*СтрокаОбъекта, ДеревоРазбора*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*НомерСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Номер");*/
			/*ДанныеЗаполненияШапки.Вставить("Номер", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));*/
			/*ДатаСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "Дата");*/
			/*ДанныеЗаполненияШапки.Вставить("Дата", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));*/
			/*НомерСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправления");*/
			/*ДанныеЗаполненияШапки.Вставить("НомерИсправления", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));*/
			/*ДатаСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправления");*/
			/*ДанныеЗаполненияШапки.Вставить("ДатаИсправления", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));*/
			/*НомерСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерСчетаФактуры");*/
			/*ДанныеЗаполненияШапки.Вставить("НомерСчетаФактуры", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));*/
			/*ДатаСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаСчетаФактуры");*/
			/*ДанныеЗаполненияШапки.Вставить("ДатаСчетаФактуры", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));*/
			/*НомерСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "НомерИсправленияСчетаФактуры");*/
			/*ДанныеЗаполненияШапки.Вставить("НомерИсправленияСчетаФактуры", ?(ЗначениеЗаполнено(НомерСтр), НомерСтр, "--"));*/
			/*ДатаСтр = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ДатаИсправленияСчетаФактуры");*/
			/*ДанныеЗаполненияШапки.Вставить("ДатаИсправленияСчетаФактуры", ?(ЗначениеЗаполнено(ДатаСтр), Формат(ДатаСтр,"ДЛФ = DD"), "--"));*/
			/*ДанныеЗаполненияШапки.Вставить("ПредставлениеПоставщика","Продавец: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "Продавец"));*/
			/*ДанныеЗаполненияШапки.Вставить("АдресПоставщика", "Адрес: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "ПродавецАдрес"));*/
			/*ИННПоставщика = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПродавецИНН");*/
			/*КПППоставщика = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПродавецКПП");*/
			/*ДанныеЗаполненияШапки.Вставить("ИННПоставщика", "ИНН/КПП продавца: " + ИННПоставщика
		+ ?(ЗначениеЗаполнено(КПППоставщика), "/" + КПППоставщика, ""));*/
			/*ДанныеЗаполненияШапки.Вставить("ПредставлениеПокупателя","Покупатель: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "Покупатель"));*/
			/*ДанныеЗаполненияШапки.Вставить("АдресПокупателя", "Адрес: " + ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПокупательАдрес"));*/
			/*ИННПокупателя = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПокупательИНН");*/
			/*КПППокупателя = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ПокупательКПП");*/
			/*ДанныеЗаполненияШапки.Вставить("ИННПокупателя", "ИНН/КПП покупателя: " + ИННПокупателя
		+ ?(ЗначениеЗаполнено(КПППокупателя), "/" + КПППокупателя, ""));*/
			/*КодВалюты = ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ВалКод");*/
			/*ТекстВалюта = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("Валюта: код %1", КодВалюты);*/
			/*ДанныеЗаполненияШапки.Вставить("Валюта", ТекстВалюта);*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогоРазницаБезНДСУвеличение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "СтТовБезНДСВсегоУвел"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогоРазницаНДСУвеличение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СумНДСУвел"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогоРазницаСНДСУвеличение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовУчНалВсегоУвел"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогоРазницаБезНДСУменьшение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
		ДеревоРазбора, СтрокаОбъекта, "СтТовБезНДСВсегоУм"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогоРазницаНДСУменьшение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СумНДСУм"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогоРазницаСНДСУменьшение", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СтТовУчНалВсегоУм"));*/
			/*ДанныеЗаполненияШапки.Вставить("ФИОРуководителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПодписантЮЛ"));*/
			/*ДанныеЗаполненияШапки.Вставить("ФИОПБОЮЛ", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ПодписантФЛ"));*/
			/*ДанныеЗаполненияШапки.Вставить("Свидетельство", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СвГосРегИП"));*/
			/*ТЗ = Новый ТаблицаЗначений;*/
			/*ТЗ.Колонки.Добавить("ТоварНаименование");*/
			/*ТЗ.Колонки.Добавить("ЕдиницаИзмерения");*/
			/*ТЗ.Колонки.Добавить("ЕдиницаИзмеренияДо");*/
			/*ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКод");*/
			/*ТЗ.Колонки.Добавить("ЕдиницаИзмеренияКодДо");*/
			/*ТЗ.Колонки.Добавить("Количество");*/
			/*ТЗ.Колонки.Добавить("КоличествоДо");*/
			/*ТЗ.Колонки.Добавить("Цена");*/
			/*ТЗ.Колонки.Добавить("ЦенаДо");*/
			/*ТЗ.Колонки.Добавить("СуммаБезНДС");*/
			/*ТЗ.Колонки.Добавить("СуммаБезНДСДо");*/
			/*ТЗ.Колонки.Добавить("Акциз");*/
			/*ТЗ.Колонки.Добавить("АкцизДо");*/
			/*ТЗ.Колонки.Добавить("СтавкаНДС");*/
			/*ТЗ.Колонки.Добавить("СтавкаНДСДо");*/
			/*ТЗ.Колонки.Добавить("СуммаНДС");*/
			/*ТЗ.Колонки.Добавить("СуммаНДСДо");*/
			/*ТЗ.Колонки.Добавить("СуммаСНДС");*/
			/*ТЗ.Колонки.Добавить("СуммаСНДСДо");*/
			/*ТЗ.Колонки.Добавить("РазницаБезНДСУвеличение");*/
			/*ТЗ.Колонки.Добавить("РазницаБезНДСУменьшение");*/
			/*ТЗ.Колонки.Добавить("РазницаНДСУвеличение");*/
			/*ТЗ.Колонки.Добавить("РазницаНДСУменьшение");*/
			/*ТЗ.Колонки.Добавить("РазницаСНДСУвеличение");*/
			/*ТЗ.Колонки.Добавить("РазницаСНДСУменьшение");*/
			/*СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));*/
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);*/
			/*ДанныеДляОбъекта.Вставить("Товары", ТЗ);*/
			return null;
		}
		// Процедура заполняет табличный документ "Корректировочный Счет-фактура".
		//

		public void ЗаполнитьТабличныйДокументКорректировочныйСчетФактура_ЭД(/*ТабличныйДокумент, ДанныеПечати*/)
		{
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_СчетФактураКорректировочный1137");*/
			/*ШапкаТаблицы = Макет.ПолучитьОбласть("Шапка");*/
			/*ШапкаТаблицы.Параметры.Заполнить(ДанныеПечати.Шапка);*/
			/*ТабличныйДокумент.Вывести(ШапкаТаблицы);*/
			/*// Выводим заголовок таблицы
*/
			/*ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");*/
			/*ТабличныйДокумент.Вывести(ЗаголовокТаблицы);*/
			/*ДанныеСтроки = СтруктураДанныеСтроки(1);*/
			/*// Создаем массив для проверки вывода
*/
			/*МассивВыводимыхОбластей = Новый Массив;*/
			/*// Выводим многострочную часть документа
*/
			/*ОбластьМакета  = Макет.ПолучитьОбласть("Строка");*/
			/*ОбластьИтого   = Макет.ПолучитьОбласть("Итого");*/
			/*ОбластьПодвала = Макет.ПолучитьОбласть("Подвал");*/
			/*Товары = ДанныеПечати.Товары;*/
			/*КоличествоСтрок = Товары.Количество();*/
			/*ОбластьИтого.Параметры.Заполнить(ДанныеПечати.Шапка);*/
			/*ТабличныйДокумент.Вывести(ОбластьИтого);*/
			/*ОбластьПодвала.Параметры.Заполнить(ДанныеПечати.Шапка);*/
			/*ТабличныйДокумент.Вывести(ОбластьПодвала);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// Работа с ПРАЙС-ЛИСТ

		public object ПолучитьДанныеПрайсЛистаДляПечати(/*СтрокаОбъекта, ДеревоРазбора*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*СведенияОПоставщике = Новый Структура;*/
			/*СведенияОПоставщике.Вставить("Представление",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.Наименование"));*/
			/*СведенияОПоставщике.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));*/
			/*ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОПоставщике);*/
			/*ДанныеЗаполненияШапки.Вставить("ДатаФормирования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаФормирования"));*/
			/*ТЗ = Новый ТаблицаЗначений;*/
			/*ТЗ.Колонки.Добавить("Артикул");*/
			/*ТЗ.Колонки.Добавить("Код");*/
			/*ТЗ.Колонки.Добавить("Товар");*/
			/*ТЗ.Колонки.Добавить("Количество");*/
			/*ТЗ.Колонки.Добавить("ЕдиницаИзмерения");*/
			/*ТЗ.Колонки.Добавить("Цена");*/
			/*СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));*/
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);*/
			/*ДанныеДляОбъекта.Вставить("Товары", ТЗ);*/
			return null;
		}

		public void ЗаполнитьТабличныйДокументПрайсЛист_ЭД(/*ТабличныйДокумент, ДанныеПечати*/)
		{
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ПрайсЛист");*/
			/*ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");*/
			/*ОбластьШапка     = Макет.ПолучитьОбласть("ШапкаТаблицы");*/
			/*ОбластьСтрока    = Макет.ПолучитьОбласть("СтрокаТаблицы");*/
			/*ОбластьПодвал    = Макет.ПолучитьОбласть("ПодвалТаблицы");*/
			/*ОбластьЗаголовок.Параметры.ДатаФормирования = Формат(ДанныеПечати.Шапка.ДатаФормирования, "ДЛФ = Д");*/
			/*ТабличныйДокумент.Вывести(ОбластьЗаголовок);*/
			/*ОбластьШапка.Параметры.Заполнить(ДанныеПечати.Шапка);*/
			/*СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;*/
			/*ОбластьШапка.Параметры.ПредставлениеПоставщика = ?(ЗначениеЗаполнено(СведенияОПоставщике.ПолноеНаименование),
		СведенияОПоставщике.ПолноеНаименование,
		СведенияОПоставщике.Представление);*/
			/*ТабличныйДокумент.Вывести(ОбластьШапка);*/
			/*ТаблицаТовары = ДанныеПечати.Товары;*/
			/*НомерСтроки = 1;*/
			/*ТабличныйДокумент.Вывести(ОбластьПодвал);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// Работа с каталогом файлов

		public object ПолучитьДанныеКаталогаТоваровДляПечати(/*СтрокаОбъекта, ДеревоРазбора*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*СведенияОПоставщике = Новый Структура;*/
			/*СведенияОПоставщике.Вставить("Представление",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.Наименование"));*/
			/*СведенияОПоставщике.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));*/
			/*ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОПоставщике);*/
			/*ДанныеЗаполненияШапки.Вставить("ДатаФормирования", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаФормирования"));*/
			/*ТЗ = Новый ТаблицаЗначений;*/
			/*ТЗ.Колонки.Добавить("Артикул");*/
			/*ТЗ.Колонки.Добавить("Код");*/
			/*ТЗ.Колонки.Добавить("Товар");*/
			/*ТЗ.Колонки.Добавить("Количество");*/
			/*ТЗ.Колонки.Добавить("ЕдиницаИзмерения");*/
			/*СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));*/
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);*/
			/*ДанныеДляОбъекта.Вставить("Товары", ТЗ);*/
			return null;
		}

		public void ЗаполнитьТабличныйДокументКаталогаТоваров_ЭД(/*ТабличныйДокумент, ДанныеПечати*/)
		{
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_КаталогТоваров");*/
			/*ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");*/
			/*ОбластьШапка     = Макет.ПолучитьОбласть("ШапкаТаблицы");*/
			/*ОбластьСтрока    = Макет.ПолучитьОбласть("СтрокаТаблицы");*/
			/*ОбластьПодвал    = Макет.ПолучитьОбласть("ПодвалТаблицы");*/
			/*ОбластьЗаголовок.Параметры.ДатаФормирования = Формат(ДанныеПечати.Шапка.ДатаФормирования, "ДЛФ = Д");*/
			/*ТабличныйДокумент.Вывести(ОбластьЗаголовок);*/
			/*ОбластьШапка.Параметры.Заполнить(ДанныеПечати.Шапка);*/
			/*СведенияОПоставщике = ДанныеПечати.Шапка.СведенияОПоставщике;*/
			/*ОбластьШапка.Параметры.ПредставлениеПоставщика = ?(ЗначениеЗаполнено(СведенияОПоставщике.ПолноеНаименование),
		СведенияОПоставщике.ПолноеНаименование, СведенияОПоставщике.Представление);*/
			/*ТабличныйДокумент.Вывести(ОбластьШапка);*/
			/*ТаблицаТовары = ДанныеПечати.Товары;*/
			/*НомерСтроки = 1;*/
			/*ТабличныйДокумент.Вывести(ОбластьПодвал);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// Работа с АКТОМ ВЫПОЛНЕННЫХ РАБОТ

		public object ПолучитьДанныеАктовВыполненныхРаботДляПечати(/*СтрокаОбъекта, ДеревоРазбора*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*СведенияОКонтрагенте = Новый Структура;*/
			/*СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));*/
			/*СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));*/
			/*СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));*/
			/*СведенияОКонтрагенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));*/
			/*СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));*/
			/*СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));*/
			/*СведенияОКонтрагенте.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));*/
			/*СведенияОКонтрагенте.Вставить("КорСчет",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));*/
			/*СведенияОКонтрагенте.Вставить("Банк",               ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));*/
			/*СведенияОКонтрагенте.Вставить("БИК",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);*/
			}
			/*СведенияООрганизации = Новый Структура;*/
			/*СведенияООрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ПолноеНаименование"));*/
			/*СведенияООрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ИНН"));*/
			/*СведенияООрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.КПП"));*/
			/*СведенияООрганизации.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ОКПО"));*/
			/*СведенияООрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ЮридическийАдрес_Представление"));*/
			/*СведенияООрганизации.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ФактическийАдрес_Представление"));*/
			/*СведенияООрганизации.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.НомерСчета"));*/
			/*СведенияООрганизации.Вставить("КорСчет",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.КоррСчет"));*/
			/*СведенияООрганизации.Вставить("Банк",               ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Наименование"));*/
			/*СведенияООрганизации.Вставить("БИК",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Код"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);*/
			}
			/*ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));*/
			/*ДанныеЗаполненияШапки.Вставить("Дата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));*/
			/*ДанныеЗаполненияШапки.Вставить("Курс", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Курс"));*/
			/*ДанныеЗаполненияШапки.Вставить("КодВалюты", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Код"));*/
			/*ДанныеЗаполненияШапки.Вставить("ТекстШапки", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Заголовок"));*/
			/*ДанныеЗаполненияШапки.Вставить("ОписаниеВыполненныхРабот", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ОписаниеВыполненныхРабот"));*/
			/*ДанныеЗаполненияШапки.Вставить("Претензии", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Претензии"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));*/
			/*ДанныеЗаполненияШапки.Вставить("ЦенаВключаетНДС", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ЦенаВключаетНДС"));*/
			/*ТЗ = Новый ТаблицаЗначений;*/
			/*ТЗ.Колонки.Добавить("ТоварКод");*/
			/*ТЗ.Колонки.Добавить("ТоварНаименование");*/
			/*ТЗ.Колонки.Добавить("БазоваяЕдиницаНаименование");*/
			/*ТЗ.Колонки.Добавить("БазоваяЕдиницаКодПоОКЕИ");*/
			/*ТЗ.Колонки.Добавить("Количество");*/
			/*ТЗ.Колонки.Добавить("Цена");*/
			/*ТЗ.Колонки.Добавить("Сумма");*/
			/*ТЗ.Колонки.Добавить("СуммаНДС");*/
			/*ТЗ.Колонки.Добавить("СтавкаНДС");*/
			/*ТЗ.Колонки.Добавить("СуммаСкидки");*/
			/*ТЗ.Колонки.Добавить("Содержание");*/
			/*ТЗ.Колонки.Добавить("СуммаСНДС");*/
			/*СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));*/
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);*/
			/*ДанныеДляОбъекта.Вставить("Товары", ТЗ);*/
			return null;
		}
		// Процедура заполняет табличный документ Акт выполненных работ.
		//

		public void ЗаполнитьТабличныйДокументАктВыполненныхРабот_ЭД(/*ТабличныйДокумент, ДанныеПечати*/)
		{
			/*КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();*/
			/*ВыводитьКоды = ЗначениеЗаполнено(КолонкаКодов);*/
			/*ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРабот_Акт";*/
			/*ТаблицаУслуг = ДанныеПечати.Товары;*/
			/*ЕстьСкидки = ЭлектронныеДокументыПереопределяемый.НужноВыводитьСкидки(ТаблицаУслуг, Истина);*/
			if(true/*ТаблицаУслуг.Итог("СуммаНДС") > 0*/)
			{
				/*ЕстьНДС = истина;*/
			}
			/*НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;*/
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Акт");*/
			/*// Выводим шапку акта
*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");*/
			/*ТекстЗаголовка = НСтр("ru='Акт № %НомерДокумента% от %ДатаДокумента% г.'");*/
			/*ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);*/
			/*ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));*/
			/*ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьМакета  = Макет.ПолучитьОбласть("ТекстШапки");*/
			/*ОбластьМакета.Параметры.ТекстШапки = ДанныеПечати.Шапка.ТекстШапки;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*// Выводим заголовок таблицы Услуги
*/
			/*СуффиксОбласти = ?(ЕстьСкидки, "СоСкидкой", "") + ?(ЕстьНДС, "СНДС", "");*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы" + СуффиксОбласти);*/
			/*ОбластьСтроки = Макет.ПолучитьОбласть("Строка" + СуффиксОбласти);*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*Сумма       = 0;*/
			/*СуммаНДС    = 0;*/
			/*НомерСтроки = 0;*/
			/*// Выводим строки таблицы Услуги
*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Итого");*/
			/*ОбластьМакета.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(Сумма);*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");*/
			/*ОбластьМакета.Параметры.ВсегоНДС = СуммаНДС;*/
			if(true/*ЕстьНДС*/)
			{
				if(true/*ДанныеПечати.Шапка.ЦенаВключаетНДС*/)
				{
					/*ОбластьМакета.Параметры.НДС = НСтр("ru = 'В том числе НДС:'");*/
				}
			}
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");*/
			/*ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.Шапка.ИтогиПрописью;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("ДополнительнаяИнформация");*/
			/*ОбластьМакета.Параметры.ДополнительнаяИнформация = ДанныеПечати.Шапка.ОписаниеВыполненныхРабот;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Подписи");*/
			/*ОбластьМакета.Параметры.Претензии                = ДанныеПечати.Шапка.Претензии;*/
			/*ОбластьМакета.Параметры.ПредставлениеИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.ПолноеНаименование;*/
			/*ОбластьМакета.Параметры.ЮрАдресИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.ЮридическийАдрес;*/
			/*ОбластьМакета.Параметры.ИННИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.ИНН;*/
			/*ОбластьМакета.Параметры.КППИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.КПП;*/
			/*ОбластьМакета.Параметры.РасчетныйСчетИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.РасчетныйСчет;*/
			/*ОбластьМакета.Параметры.КорСчетИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.КорСчет;*/
			/*ОбластьМакета.Параметры.БанкИсполнителя          = ДанныеПечати.Шапка.СведенияОПоставщике.Банк;*/
			/*ОбластьМакета.Параметры.БИКИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.БИК;*/
			/*ОбластьМакета.Параметры.ПредставлениеЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.ПолноеНаименование;*/
			/*ОбластьМакета.Параметры.ЮрАдресЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.ЮридическийАдрес;*/
			/*ОбластьМакета.Параметры.ИННЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.ИНН;*/
			/*ОбластьМакета.Параметры.КППЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.КПП;*/
			/*ОбластьМакета.Параметры.РасчетныйСчетЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.РасчетныйСчет;*/
			/*ОбластьМакета.Параметры.КорСчетЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.КорСчет;*/
			/*ОбластьМакета.Параметры.БанкЗаказчика            = ДанныеПечати.Шапка.СведенияОПокупателе.Банк;*/
			/*ОбластьМакета.Параметры.БИКЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.БИК;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ТабличныйДокумент.АвтоМасштаб = Истина;*/
		}

		public object ПолучитьДанныеАкта501ДляПечати(/*СтрокаОбъекта, ДеревоРазбора*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*СведенияОКонтрагенте = Новый Структура;*/
			/*СведенияОКонтрагенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));*/
			/*СведенияОКонтрагенте.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.КПП"));*/
			/*СведенияОКонтрагенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));*/
			/*СведенияОКонтрагенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));*/
			/*СведенияОКонтрагенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));*/
			/*СведенияОКонтрагенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));*/
			/*СведенияОКонтрагенте.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.НомерСчета"));*/
			/*СведенияОКонтрагенте.Вставить("КорСчет",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.КоррСчет"));*/
			/*СведенияОКонтрагенте.Вставить("Банк",               ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Наименование"));*/
			/*СведенияОКонтрагенте.Вставить("БИК",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "БанковскийСчетКонтрагента.Банк.Код"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКонтрагенте);*/
			}
			/*СведенияООрганизации = Новый Структура;*/
			/*СведенияООрганизации.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ПолноеНаименование"));*/
			/*СведенияООрганизации.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ИНН"));*/
			/*СведенияООрганизации.Вставить("КПП",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.КПП"));*/
			/*СведенияООрганизации.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ОКПО"));*/
			/*СведенияООрганизации.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ЮридическийАдрес_Представление"));*/
			/*СведенияООрганизации.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ФактическийАдрес_Представление"));*/
			/*СведенияООрганизации.Вставить("РасчетныйСчет",      ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.НомерСчета"));*/
			/*СведенияООрганизации.Вставить("КорСчет",            ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.КоррСчет"));*/
			/*СведенияООрганизации.Вставить("Банк",               ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Наименование"));*/
			/*СведенияООрганизации.Вставить("БИК",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"БанковскийСчетОрганизации.Банк.Код"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияООрганизации);*/
			}
			/*ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));*/
			/*ДанныеЗаполненияШапки.Вставить("Дата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));*/
			/*ДанныеЗаполненияШапки.Вставить("ТекстШапки", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Заголовок"));*/
			/*ДанныеЗаполненияШапки.Вставить("Претензии", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Претензии"));*/
			/*ТЗОписанийРабот = Новый ТаблицаЗначений;*/
			/*ТЗОписанийРабот.Колонки.Добавить("НачалоРабот");*/
			/*ТЗОписанийРабот.Колонки.Добавить("КонецРабот");*/
			/*ТЗОписанийРабот.Колонки.Добавить("Сумма");*/
			/*ТЗОписанийРабот.Колонки.Добавить("СуммаНДС");*/
			/*ТЗОписанийРабот.Колонки.Добавить("СуммаСНДС");*/
			/*ТЗОписанийРабот.Колонки.Добавить("Работы");*/
			/*СтрокиТЧОписанийРабот = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СписокОписаний"));*/
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);*/
			/*ДанныеДляОбъекта.Вставить("ОписанияРабот", ТЗОписанийРабот);*/
			return null;
		}
		// Процедура заполняет табличный документ Акт выполненных работ.
		//

		public void ЗаполнитьТабличныйДокументАкт501(/*ТабличныйДокумент, ДанныеПечати*/)
		{
			/*ТабличныйДокумент.ПолеСлева = 5;*/
			/*ТабличныйДокумент.ПолеСправа = 5;*/
			/*ТабличныйДокумент.РазмерКолонтитулаСверху = 0;*/
			/*ТабличныйДокумент.РазмерКолонтитулаСнизу = 0;*/
			/*ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;*/
			/*ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктВыполненныхРабот_Акт";*/
			/*ТаблицаОписанийРабот = ДанныеПечати.ОписанияРабот;*/
			if(true/*ТаблицаОписанийРабот.Итог("СуммаНДС") > 0*/)
			{
				/*ЕстьНДС = Истина;*/
			}
			/*НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;*/
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Акт501");*/
			/*// Выводим шапку акта
*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");*/
			/*ТекстЗаголовка = НСтр("ru='Акт № %НомерДокумента% от %ДатаДокумента% г.'");*/
			/*ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%НомерДокумента%", ДанныеПечати.Шапка.Номер);*/
			/*ТекстЗаголовка = СтрЗаменить(ТекстЗаголовка, "%ДатаДокумента%",  Формат(ДанныеПечати.Шапка.Дата, "ДФ='дд ММММ гггг'"));*/
			/*ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьМакета  = Макет.ПолучитьОбласть("ТекстШапки");*/
			/*ОбластьМакета.Параметры.ТекстШапки = ДанныеПечати.Шапка.ТекстШапки;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*// Выводим заголовок таблицы Услуги
*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыОписаниеРабот");*/
			/*СуммаСНДС = 0;*/
			/*СуммаНДС = 0;*/
			/*НомерОписания = 0;*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Итого");*/
			/*ОбластьМакета.Параметры.Всего = ЭлектронныеДокументыПереопределяемый.ФорматСумм(СуммаСНДС);*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");*/
			/*ОбластьМакета.Параметры.ВсегоНДС = СуммаНДС;*/
			if(true/*ЕстьНДС*/)
			{
				/*ОбластьМакета.Параметры.НДС = НСтр("ru = 'Сумма НДС'");*/
			}
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			if(true/*ЗначениеЗаполнено(ДанныеПечати.Шапка.СведенияОПоставщике)*/)
			{
				/*ОбластьМакета = Макет.ПолучитьОбласть("Подписи");*/
				/*ОбластьМакета.Параметры.Претензии                = ДанныеПечати.Шапка.Претензии;*/
				/*ОбластьМакета.Параметры.ПредставлениеИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.ПолноеНаименование;*/
				/*ОбластьМакета.Параметры.ЮрАдресИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.ЮридическийАдрес;*/
				/*ОбластьМакета.Параметры.ИННИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.ИНН;*/
				/*ОбластьМакета.Параметры.КППИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.КПП;*/
				/*ОбластьМакета.Параметры.РасчетныйСчетИсполнителя = ДанныеПечати.Шапка.СведенияОПоставщике.РасчетныйСчет;*/
				/*ОбластьМакета.Параметры.КорСчетИсполнителя       = ДанныеПечати.Шапка.СведенияОПоставщике.КорСчет;*/
				/*ОбластьМакета.Параметры.БанкИсполнителя          = ДанныеПечати.Шапка.СведенияОПоставщике.Банк;*/
				/*ОбластьМакета.Параметры.БИКИсполнителя           = ДанныеПечати.Шапка.СведенияОПоставщике.БИК;*/
			}
			if(true/*ЗначениеЗаполнено(ДанныеПечати.Шапка.СведенияОПокупателе)*/)
			{
				/*ОбластьМакета.Параметры.ПредставлениеЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.ПолноеНаименование;*/
				/*ОбластьМакета.Параметры.ЮрАдресЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.ЮридическийАдрес;*/
				/*ОбластьМакета.Параметры.ИННЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.ИНН;*/
				/*ОбластьМакета.Параметры.КППЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.КПП;*/
				/*ОбластьМакета.Параметры.РасчетныйСчетЗаказчика   = ДанныеПечати.Шапка.СведенияОПокупателе.РасчетныйСчет;*/
				/*ОбластьМакета.Параметры.КорСчетЗаказчика         = ДанныеПечати.Шапка.СведенияОПокупателе.КорСчет;*/
				/*ОбластьМакета.Параметры.БанкЗаказчика            = ДанныеПечати.Шапка.СведенияОПокупателе.Банк;*/
				/*ОбластьМакета.Параметры.БИКЗаказчика             = ДанныеПечати.Шапка.СведенияОПокупателе.БИК;*/
			}
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ТабличныйДокумент.АвтоМасштаб = Истина;*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// Работа с ОТЧЕТОМ О ПРОДАЖАХ КОМИССИОННОГО ТОВАРА

		public object ПолучитьДанныеОтчетаОПродажахКомиссионногоТовараДляПечати(/*СтрокаОбъекта, ДеревоРазбора*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*СведенияОКомитенте = Новый Структура;*/
			/*СведенияОКомитенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ПолноеНаименование"));*/
			/*СведенияОКомитенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ИНН"));*/
			/*СведенияОКомитенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ОКПО"));*/
			/*СведенияОКомитенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ЮридическийАдрес_Представление"));*/
			/*СведенияОКомитенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Организация.ФактическийАдрес_Представление"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомитенте);*/
			}
			/*СведенияОКомиссионере = Новый Структура;*/
			/*СведенияОКомиссионере.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));*/
			/*СведенияОКомиссионере.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));*/
			/*СведенияОКомиссионере.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));*/
			/*СведенияОКомиссионере.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));*/
			/*СведенияОКомиссионере.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомиссионере);*/
			}
			/*ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));*/
			/*ДанныеЗаполненияШапки.Вставить("Дата", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));*/
			/*ДанныеЗаполненияШапки.Вставить("Курс", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Курс"));*/
			/*ДанныеЗаполненияШапки.Вставить("КодВалюты", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.КодОКВ"));*/
			/*ДанныеЗаполненияШапки.Вставить("СуммаДокумента", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаДокумента"));*/
			/*ДанныеЗаполненияШапки.Вставить("СуммаКомитента", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаКомитента"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИтогиПрописью"));*/
			/*ДанныеЗаполненияШапки.Вставить("СуммаВознаграждения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "СуммаВознаграждения"));*/
			/*ТЗ = Новый ТаблицаЗначений;*/
			/*ТЗ.Колонки.Добавить("Код");*/
			/*ТЗ.Колонки.Добавить("Артикул");*/
			/*ТЗ.Колонки.Добавить("Наименование");*/
			/*ТЗ.Колонки.Добавить("ЕдиницаИзмеренияНаименование");*/
			/*ТЗ.Колонки.Добавить("Количество");*/
			/*ТЗ.Колонки.Добавить("Цена");*/
			/*ТЗ.Колонки.Добавить("Сумма");*/
			/*ТЗ.Колонки.Добавить("СуммаНДС");*/
			/*ТЗ.Колонки.Добавить("СуммаСНДС");*/
			/*ТЗ.Колонки.Добавить("СуммаВознаграждения");*/
			/*ТЗ.Колонки.Добавить("СуммаПродажи");*/
			/*ТЗ.Колонки.Добавить("ЦенаПродажи");*/
			/*ТЗ.Колонки.Добавить("СтавкаНДС");*/
			/*СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));*/
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);*/
			/*ДанныеДляОбъекта.Вставить("Товары", ТЗ);*/
			return null;
		}
		// Процедура заполняет табличный документ отчет о продажах комиссионного товара
		//

		public void ЗаполнитьТабличныйДокументОтчетаОПродажахКомиссионногоТовара_ЭД(/*ТабличныйДокумент, ДанныеПечати*/)
		{
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ОтчетПоКомиссии");*/
			/*КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();*/
			/*НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;*/
			/*// Выводим общие реквизиты шапки.
*/
			/*ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(ДанныеПечати.Шапка, "Отчет о продажах комиссионного товара", Макет,
		ТабличныйДокумент);*/
			/*// Выводим заголовок таблицы.
*/
			if(true/*ЗначениеЗаполнено(КолонкаКодов)*/)
			{
				/*ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыСКодами");*/
				/*ЗаголовокТаблицы.Параметры.ИмяКолонкиКодов = КолонкаКодов;*/
			}
			/*Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ДанныеПечати.Шапка.КодВалюты);*/
			/*ЗаголовокТаблицы.Параметры.Валюта = Валюта;*/
			/*ТабличныйДокумент.Вывести(ЗаголовокТаблицы);*/
			/*// Выводим многострочную часть документа.
*/
			if(true/*ЗначениеЗаполнено(КолонкаКодов)*/)
			{
				/*ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСКодами");*/
			}
			/*НомерСтроки = 0;*/
			/*Товары = ДанныеПечати.Товары;*/
			/*ЗаполнитьРеквизитыПодвалаОтчетаОПродажахКомиссионногоТовара(ДанныеПечати.Шапка, Товары, Макет, ТабличныйДокумент);*/
		}
		// Процедура заполнения реквизитов подвала отчета о продажах комиссионного товара.
		//
		// Параметры:
		//  ДанныеПечати -  Данные шапки документа
		//  Товары - Данные табличной части документа
		//  Макет - Макет ОтчетПоКомиссии
		//  ТабличныйДокумент - Табличный документ
		//

		public void ЗаполнитьРеквизитыПодвалаОтчетаОПродажахКомиссионногоТовара(/*ДанныеПечати, Товары, Макет, ТабличныйДокумент*/)
		{
			/*СуммаПродажи = ДанныеПечати.СуммаДокумента;*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Подвал");*/
			/*ОбластьМакета.Параметры.СуммаКомитентаВсего      = ДанныеПечати.СуммаКомитента;*/
			/*ОбластьМакета.Параметры.СуммаПродажиВсего        = СуммаПродажи;*/
			/*ОбластьМакета.Параметры.СуммаВознагражденияВсего = ДанныеПечати.СуммаВознаграждения;*/
			/*ОбластьМакета.Параметры.ИтоговаяСтрока           = ДанныеПечати.ИтогиПрописью;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// Работа с ОТЧЕТОМ О СПИСАНИИ КОМИССИОННОГО ТОВАРА

		public object ПолучитьДанныеОтчетаОСписанииКомиссионногоТовараДляПечати(/*СтрокаОбъекта, ДеревоРазбора*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*СведенияОКомитенте = Новый Структура;*/
			/*СведенияОКомитенте.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ПолноеНаименование"));*/
			/*СведенияОКомитенте.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ИНН"));*/
			/*СведенияОКомитенте.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ОКПО"));*/
			/*СведенияОКомитенте.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ЮридическийАдрес_Представление"));*/
			/*СведенияОКомитенте.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Организация.ФактическийАдрес_Представление"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПокупателе", СведенияОКомитенте);*/
			}
			/*СведенияОКомиссионере = Новый Структура;*/
			/*СведенияОКомиссионере.Вставить("ПолноеНаименование", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ПолноеНаименование"));*/
			/*СведенияОКомиссионере.Вставить("ИНН",                ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ИНН"));*/
			/*СведенияОКомиссионере.Вставить("КодПоОКПО",          ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ОКПО"));*/
			/*СведенияОКомиссионере.Вставить("ЮридическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ЮридическийАдрес_Представление"));*/
			/*СведенияОКомиссионере.Вставить("ФактическийАдрес",   ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Контрагент.ФактическийАдрес_Представление"));*/
			if(true/*СтрокаОбъекта.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий*/)
			{
				/*ДанныеЗаполненияШапки.Вставить("СведенияОПоставщике", СведенияОКомиссионере);*/
			}
			/*ДанныеЗаполненияШапки.Вставить("Номер", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Номер"));*/
			/*ДанныеЗаполненияШапки.Вставить("Дата",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Дата"));*/
			/*ДанныеЗаполненияШапки.Вставить("Курс",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.Курс"));*/
			/*ДанныеЗаполненияШапки.Вставить("КодВалюты", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Валюта.КодОКВ"));*/
			/*ДанныеЗаполненияШапки.Вставить("СуммаДокумента", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогоПоДокументу"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИтогиПрописью", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИтогиПрописью"));*/
			/*ТЗ = Новый ТаблицаЗначений;*/
			/*ТЗ.Колонки.Добавить("Код");*/
			/*ТЗ.Колонки.Добавить("Артикул");*/
			/*ТЗ.Колонки.Добавить("Наименование");*/
			/*ТЗ.Колонки.Добавить("ЕдиницаИзмеренияНаименование");*/
			/*ТЗ.Колонки.Добавить("Количество");*/
			/*ТЗ.Колонки.Добавить("Цена");*/
			/*ТЗ.Колонки.Добавить("Сумма");*/
			/*СтрокиТЧ = СтрокаОбъекта.Строки.НайтиСтроки(Новый Структура("Реквизит", "СтрокаТЧ"));*/
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка",  ДанныеЗаполненияШапки);*/
			/*ДанныеДляОбъекта.Вставить("Товары", ТЗ);*/
			return null;
		}
		// Процедура заполняет табличный документ отчет о списании комиссионного товара
		//

		public void ЗаполнитьТабличныйДокументОтчетОСписанииКомиссионногоТовара_ЭД(/*ТабличныйДокумент, ДанныеПечати*/)
		{
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_ОтчетПоКомиссииОСписании");*/
			/*Заголовок = "Отчет о списании комиссионного товара";*/
			/*КолонкаКодов = ЭлектронныеДокументыПереопределяемый.ИмяДополнительнойКолонки();*/
			/*НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;*/
			/*// Выводим общие реквизиты шапки
*/
			/*ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(ДанныеПечати.Шапка, Заголовок, Макет, ТабличныйДокумент);*/
			/*// Выводим заголовок таблицы
*/
			if(true/*ЗначениеЗаполнено(КолонкаКодов)*/)
			{
				/*ЗаголовокТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыСКодами");*/
				/*ЗаголовокТаблицы.Параметры.ИмяКолонкиКодов = КолонкаКодов;*/
			}
			/*Валюта = ЭлектронныеДокументыПереопределяемый.НайтиСсылкуНаОбъект("Валюты", ДанныеПечати.Шапка.КодВалюты);*/
			/*ЗаголовокТаблицы.Параметры.Валюта = Валюта;*/
			/*ТабличныйДокумент.Вывести(ЗаголовокТаблицы);*/
			/*// Выводим многострочную часть документа
*/
			if(true/*ЗначениеЗаполнено(КолонкаКодов)*/)
			{
				/*ОбластьМакета = Макет.ПолучитьОбласть("СтрокаСКодами");*/
			}
			/*НомерСтроки = 0;*/
			/*ЗаполнитьРеквизитыПодвалаОтчетПоКомиссииОСписании(ДанныеПечати.Шапка, ДанныеПечати.Товары, Макет, ТабличныйДокумент);*/
		}
		// Процедура заполнения реквизитов шапки отчета по комиссии
		//
		// Параметры:
		//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
		//  Макет - Макет отчета
		//  ТабличныйДокумент - Табличный документ
		//

		public void ЗаполнитьРеквизитыШапкиОтчетПоКомиссии(/*ДанныеПечати, Заголовок, Макет, ТабличныйДокумент*/)
		{
			/*// Выводим общие реквизиты шапки
*/
			/*СведенияОКомитенте = ДанныеПечати.СведенияОПоставщике;*/
			/*СведенияОКомиссионере = ДанныеПечати.СведенияОПокупателе;*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Шапка");*/
			/*ТекстЗаголовка = НСтр("ru='" + Заголовок + " № %1 от %2 г.'");*/
			/*ТекстЗаголовка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстЗаголовка, ДанныеПечати.Номер,
		Формат(ДанныеПечати.Дата, "ДФ='дд ММММ гггг'"));*/
			/*ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;*/
			/*ОбластьМакета.Параметры.ПредставлениеКомитента = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		СведенияОКомитенте, "ПолноеНаименование,");*/
			/*ОбластьМакета.Параметры.ПредставлениеКомиссионера = ЭлектронныеДокументыПереопределяемый.ОписаниеОрганизации(
		СведенияОКомиссионере, "ПолноеНаименование,");*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
		}
		// Процедура заполнения реквизитов подвала отчета по комиссии о списании.
		//
		// Параметры:
		//  ДанныеПечати - ВыборкаИзРезультатаЗапроса - Данные шапки документа
		//  ВыборкаПоДокументам - ВыборкаИзРезультатаЗапроса - Данные табличной части документа
		//  Макет - Макет ОтчетКомитенту
		//  ТабличныйДокумент - Табличный документ
		//

		public void ЗаполнитьРеквизитыПодвалаОтчетПоКомиссииОСписании(/*ДанныеПечати, Товары, Макет, ТабличныйДокумент*/)
		{
			/*ОбластьМакета = Макет.ПолучитьОбласть("Подвал");*/
			/*СуммаВсего = ДанныеПечати.СуммаДокумента;*/
			/*ОбластьМакета.Параметры.СуммаВсего = СуммаВсего;*/
			/*ОбластьМакета.Параметры.ИтоговаяСтрока = ДанныеПечати.ИтогиПрописью;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// Работа с печатными формами
		// Функция формирования структуры хранения итоговых суммы.
		//
		// Возвращаемое значение:
		//  Структура - Структура хранения итоговых сумм
		//

		public object СтруктураИтоговыеСуммы(/**/)
		{
			/*Структура = Новый Структура;*/
			/*// Инициализация итогов по странице.
*/
			/*Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);*/
			/*Структура.Вставить("ИтогоМестНаСтранице", 0);*/
			/*Структура.Вставить("ИтогоКоличествоНаСтранице", 0);*/
			/*Структура.Вставить("ИтогоСуммаНаСтранице", 0);*/
			/*Структура.Вставить("ИтогоНДСНаСтранице", 0);*/
			/*Структура.Вставить("ИтогоСуммаСНДСНаСтранице", 0);*/
			/*Структура.Вставить("ИтогоМассаБруттоНаСтранице", 0);*/
			/*Структура.Вставить("ИтогоМассаНеттоНаСтранице", 0);*/
			/*// Инициализация итогов по документу.
*/
			/*Структура.Вставить("ИтогоМассаБрутто", 0);*/
			/*Структура.Вставить("ИтогоМест", 0);*/
			/*Структура.Вставить("ИтогоКоличество", 0);*/
			/*Структура.Вставить("ИтогоСуммаСНДС", 0);*/
			/*Структура.Вставить("ИтогоСумма", 0);*/
			/*Структура.Вставить("ИтогоНДС", 0);*/
			/*Структура.Вставить("ИтогоМассаБрутто", 0);*/
			/*Структура.Вставить("ИтогоМассаНетто", 0);*/
			/*Структура.Вставить("КоличествоПорядковыхНомеровЗаписейПрописью", 0);*/
			/*Структура.Вставить("СуммаПрописью", "");*/
			return null;
		}
		// Функция формирования структуры хранения данных строки.
		//
		// Параметры:
		//  КоэффициентПересчета - Число - Коэффициент пересчета в валюту регл. учета
		//
		// Возвращаемое значение:
		//  Структура - Структура данных строки товаров
		//

		public object СтруктураДанныеСтроки(/*КоэффициентПересчета*/)
		{
			/*Структура = Новый Структура;*/
			/*Структура.Вставить("Номер", 0);*/
			/*Структура.Вставить("Мест", 0);*/
			/*Структура.Вставить("Количество", 0);*/
			/*Структура.Вставить("Цена", 0);*/
			/*Структура.Вставить("СуммаБезНДС", 0);*/
			/*Структура.Вставить("СуммаНДС", 0);*/
			/*Структура.Вставить("СуммаСНДС", 0);*/
			/*Структура.Вставить("КоэффициентПересчета", КоэффициентПересчета);*/
			/*Структура.Вставить("МассаБрутто", 0);*/
			/*Структура.Вставить("МассаНетто", 0);*/
			return null;
		}
		// Процедура обнуления итоговых сумм по странице.
		//

		public void ОбнулитьИтогиПоСтранице(/*ИтоговыеСуммы*/)
		{
			/*ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = 0;*/
			/*ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = 0;*/
			/*ИтоговыеСуммы.ИтогоМестНаСтранице        = 0;*/
			/*ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = 0;*/
			/*ИтоговыеСуммы.ИтогоСуммаНаСтранице       = 0;*/
			/*ИтоговыеСуммы.ИтогоНДСНаСтранице         = 0;*/
			/*ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = 0;*/
		}
		// Процедура рассчитывает итоговые суммы с учетом строки товаров.
		//
		// Параметры:
		//  ИтоговыеСуммы - Структура - Структура итоговых сумм документа
		//  ДанныеСтроки - Структура - Структура данных строки товаров
		//

		public void РассчитатьИтоговыеСуммы(/*ИтоговыеСуммы, ДанныеСтроки*/)
		{
			/*// Увеличим итоги по странице.
*/
			/*ИтоговыеСуммы.ИтогоМестНаСтранице        = ИтоговыеСуммы.ИтогоМестНаСтранице + ДанныеСтроки.Мест;*/
			/*ИтоговыеСуммы.ИтогоКоличествоНаСтранице  = ИтоговыеСуммы.ИтогоКоличествоНаСтранице + ДанныеСтроки.Количество;*/
			/*ИтоговыеСуммы.ИтогоСуммаНаСтранице       = ИтоговыеСуммы.ИтогоСуммаНаСтранице + ДанныеСтроки.СуммаБезНДС;*/
			/*ИтоговыеСуммы.ИтогоНДСНаСтранице         = ИтоговыеСуммы.ИтогоНДСНаСтранице + ДанныеСтроки.СуммаНДС;*/
			/*ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице   = ИтоговыеСуммы.ИтогоСуммаСНДСНаСтранице + ДанныеСтроки.СуммаСНДС;*/
			/*ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице = ИтоговыеСуммы.ИтогоМассаБруттоНаСтранице + ДанныеСтроки.МассаБрутто;*/
			/*ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице  = ИтоговыеСуммы.ИтогоМассаНеттоНаСтранице + ДанныеСтроки.МассаНетто;*/
			/*// Увеличим итоги по документу.
*/
			/*ИтоговыеСуммы.ИтогоМест        = ИтоговыеСуммы.ИтогоМест + ДанныеСтроки.Мест;*/
			/*ИтоговыеСуммы.ИтогоКоличество  = ИтоговыеСуммы.ИтогоКоличество + ДанныеСтроки.Количество;*/
			/*ИтоговыеСуммы.ИтогоСумма       = ИтоговыеСуммы.ИтогоСумма + ДанныеСтроки.СуммаБезНДС;*/
			/*ИтоговыеСуммы.ИтогоНДС         = ИтоговыеСуммы.ИтогоНДС + ДанныеСтроки.СуммаНДС;*/
			/*ИтоговыеСуммы.ИтогоСуммаСНДС   = ИтоговыеСуммы.ИтогоСуммаСНДС + ДанныеСтроки.СуммаСНДС;*/
			/*ИтоговыеСуммы.ИтогоМассаБрутто = ИтоговыеСуммы.ИтогоМассаБрутто + ДанныеСтроки.МассаБрутто;*/
			/*ИтоговыеСуммы.ИтогоМассаНетто  = ИтоговыеСуммы.ИтогоМассаНетто + ДанныеСтроки.МассаНетто;*/
		}
		// Функция форматирования сумм
		//
		// Параметры:
		//  Сумма  - число, которое мы хотим форматировать,
		//  Валюта - ссылка на элемент справочника валют, если задан, то к в результирующую строку
		//           будет добавлено представление валюты
		//  ЧН     - строка, представляющая нулевое значение числа,
		//  ЧРГ    - символ-разделитель групп целой части числа.
		//
		// Возвращаемое значение:
		//  Отформатированная должным образом строковое представление суммы.
		//

		public object ФорматСумм(/*Знач Сумма, Валюта = Неопределено, ЧН = "", ЧРГ = ""*/)
		{
			/*Сумма = ?(Сумма < 0, -Сумма, Сумма);*/
			/*ФорматнаяСтрока = "ЧЦ=15;ЧДЦ=2" + ?(НЕ ЗначениеЗаполнено(ЧН), "", ";" + "ЧН=" + ЧН)
		+ ?(НЕ ЗначениеЗаполнено(ЧРГ),"", ";" + "ЧРГ=" + ЧРГ);*/
			/*РезультирующаяСтрока = СокрЛ(Формат(Сумма, ФорматнаяСтрока));*/
			if(true/*ЗначениеЗаполнено(Валюта)*/)
			{
				/*РезультирующаяСтрока = РезультирующаяСтрока + " " + СокрП(Валюта);*/
			}
			return null;
		}
		// Функция приводит к требуемому формату сумму НДС, если она имеет числовое представление.
		//
		// Параметры:
		// СуммаНДС - строка, сумма НДС (без НДС, -, число).
		//
		// Возвращаемое значение:
		// ВозвращаемаяСумма - если входящий параметр - представление числа, то возвращаемое значение - число.
		//

		public object СуммаНДССФПривестиКТребуемомуФормату(/*СуммаНДС*/)
		{
			if(true/*Найти(СуммаНДС, ".") > 0 ИЛИ Найти(СуммаНДС, ",") > 0 ИЛИ Найти(СуммаНДС, "-") > 0*/)
			{
				/*ВозвращаемаяСумма = Число(СуммаНДС);*/
			}
			return null;
		}
		// Проставляет прочерки в незаполненных полях печатной формы счета-фактуры
		//

		public void ПроставитьПрочеркиВПустыеПоляСтрокиСчетФактура(/*ОбластьМакета*/)
		{
		}
		////////////////////////////////////////////////////////////////////////////////
		// Подготовка к просмотру служебного ЭД

		public object ПолучитьДанныеУчастникаОбменаЭД(/*УчастникОбмена*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			if(true/*УчастникОбмена.Свойства().Получить("ОтпрЮЛ") <> Неопределено*/)
			{
				/*ВозвращаемоеЗначение = УчастникОбмена.ОтпрЮЛ.НаимОрг + ", " + УчастникОбмена.ОтпрЮЛ.ИННЮЛ + "/"
			+ УчастникОбмена.ОтпрЮЛ.КПП;*/
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Работа с подтверждением
		// ПДПЭСФ, ПДОИПЭСФ

		public void ПрочитатьПодтверждениеДатыПолученияXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",                 ЭД.Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",              ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ОтпрДок));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя", ЭД.Документ.ОтпрДок.ИдУчастЭДО);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",               ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ПолДок));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя",  ЭД.Документ.ПолДок.ИдУчастЭДО);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",             ЭД.Документ.СведПодтв.ДатаОтпр);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки",            ЭД.Документ.СведПодтв.ВремяОтпр);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",                 ЭД.Документ.КНД);*/
			if(true/*ЭД.Документ.КНД = "1115112"*/)
			{
				/*ПараметрЗаголовка = "получения";*/
				/*ОтправленПолучен = "получен";*/
			}
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",  ПараметрЗаголовка);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",  ОтправленПолучен);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО", """" + ЭД.Документ.ОперЭДО.НаимОрг + """ (ИНН "
		+ ЭД.Документ.ОперЭДО.ИННЮЛ + ", код " + ЭД.Документ.ОперЭДО.ИдОперЭДО + ")");*/
		}
		// ПДОЭСФ

		public void ПрочитатьПодтверждениеДатыОтправкиXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",                 ЭД.Документ.СведПодтв.СведОтпрФайл.ИмяПостФайла);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",              ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.СвОтпрДок));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя", ЭД.Документ.СвОтпрДок.ИдУчастЭДО);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",               ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.СвПолДок));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя",  ЭД.Документ.СвПолДок.ИдУчастЭДО);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",             ЭД.Документ.СведПодтв.ДатаОтпр);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки",            ЭД.Документ.СведПодтв.ВремяОтпр);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",                 ЭД.Документ.КНД);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",        "отправки");*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",        "отправлен");*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО", """" + ЭД.Документ.ОперЭДО.НаимОрг + """ (ИНН "
		+ ЭД.Документ.ОперЭДО.ИННЮЛ + ", код " + ЭД.Документ.ОперЭДО.ИдОперЭДО + ")");*/
		}
		// ПДО

		public void ПрочитатьПодтверждениеXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.Подтверждение;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",      ЭД.Документ.СведПодтв.ИмяПостФайла);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",   ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.СвОтпр));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",    ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ПолДок));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаОтправки",  ЭД.Документ.СведПодтв.ДатаДок);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяОтправки", ЭД.Документ.СведПодтв.ВремяДок);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "КНДФормы",      ЭД.Документ.КНД);*/
			if(true/*ЭД.Документ.КНД = "1167002"*/)
			{
				/*ПараметрЗаголовка = "получения";*/
				/*ОтправленПолучен = "получен";*/
			}
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",  ПараметрЗаголовка);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправлен_Получен",  ОтправленПолучен);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ОператорЭДО", """" + ЭД.Документ.ОперЭДО.НаимОрг + """ (ИНН "
		+ ЭД.Документ.ОперЭДО.ИННЮЛ + ", код " + ЭД.Документ.ОперЭДО.ИдОперЭДО + ")");*/
		}
		// Процедура заполняет табличный документ Подтверждение (ПДО, ПДП, ПДОИП).
		//

		public void ЗаполнитьТабличныйДокументПодтверждение(/*ТабличныйДокумент, ДанныеПечати*/)
		{
			/*ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Подтверждение";*/
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Подтверждение");*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Шапка");*/
			/*ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати.Шапка);*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ТабличныйДокумент.АвтоМасштаб = Истина;*/
		}

		public object ПолучитьДанныеПодтвержденияДляПечати(/*СтрокаОбъекта, ДеревоРазбора*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*ДанныеЗаполненияШапки.Вставить("ОператорЭДО", "Оператор электронного документооборота "
		+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта, "ОператорЭДО"));*/
			/*ДанныеЗаполненияШапки.Вставить("Отправитель", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));*/
			/*ДанныеЗаполненияШапки.Вставить("Получатель",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));*/
			/*ДанныеЗаполненияШапки.Вставить("ДатаОтправки", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ДатаОтправки"));*/
			/*ДанныеЗаполненияШапки.Вставить("ВремяОтправки",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ВремяОтправки"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИмяФайла", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));*/
			/*ДанныеЗаполненияШапки.Вставить("ПараметрЗаголовка", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ПараметрЗаголовка"));*/
			/*ДанныеЗаполненияШапки.Вставить("КНДФормы", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"КНДФормы"));*/
			/*ДанныеЗаполненияШапки.Вставить("Отправлен_Получен", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "Отправлен_Получен"));*/
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Просмотр извещений
		// Процедура заполняет табличный документ Извещение.
		//

		public void ЗаполнитьТабличныйДокументИзвещение(/*ТабличныйДокумент, ДанныеПечати*/)
		{
			/*ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Извещение";*/
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Извещение");*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");*/
			/*ТекстЗаголовка = НСтр("ru='Извещение о получении электронного документа'");*/
			/*ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Шапка");*/
			/*ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати.Шапка);*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ТабличныйДокумент.АвтоМасштаб = Истина;*/
		}

		public void ПрочитатьИзвещениеXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",                ЭД.Документ.СвИзвПолуч.СведПолФайл.ИмяПостФайла);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",             ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ОтпрДок));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторОтправителя",
		?(ЭД.Документ.ОтпрДок.ОперЭДО <> Неопределено, ЭД.Документ.ОтпрДок.ОперЭДО.ИдОперЭДО,
		ЭД.Документ.ОтпрДок.ИдУчастЭДО));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",              ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.УчастЭДО));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИдентификаторПолучателя", ЭД.Документ.УчастЭДО.ИдУчастЭДО);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения",           ЭД.Документ.СвИзвПолуч.ДатаПол);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяПолучения",          ЭД.Документ.СвИзвПолуч.ВремяПол);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка",       "");*/
		}

		public object ПолучитьДанныеИзвещенияДляПечати(/*СтрокаОбъекта, ДеревоРазбора*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*ДанныеЗаполненияШапки.Вставить("Отправитель", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));*/
			/*ДанныеЗаполненияШапки.Вставить("Получатель",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));*/
			/*ДанныеЗаполненияШапки.Вставить("ДатаПолучения",	ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаПолучения"));*/
			/*ДанныеЗаполненияШапки.Вставить("ВремяПолучения",ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ВремяПолучения"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИмяФайла", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));*/
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка", 	ДанныеЗаполненияШапки);*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Формирование извещений

		public void ДозаполнитьСтруктуруТипДокументДляИзвещенияОПолучении(/*СтруктураДокумента*/)
		{
			/*// Структура участника ЭДО
*/
			/*СтруктураДанных = Новый Структура;*/
			/*СтруктураДанных.Вставить("ИдУчастникаЭДО");*/
			/*СтруктураДанных.Вставить("УчастникЭДО");*/
			/*СтруктураДокумента.Вставить("ОтправительЭД", СтруктураДанных);*/
			/*// Структура извещения
*/
			/*СтруктураДанных = Новый Структура;*/
			/*СтруктураДанных.Вставить("ДатаПолучения");*/
			/*СтруктураДанных.Вставить("ВремяПолучения");*/
			/*СтруктураДанных.Вставить("ИмяПолученногоФайла");*/
			/*ТЗ_ЭЦП = Новый ТаблицаЗначений;*/
			/*ТЗ_ЭЦП.Колонки.Добавить("ЭЦП");*/
			/*СтруктураДанных.Вставить("ПолученныеЭЦП", ТЗ_ЭЦП);*/
			/*ДанныеПолученногоЭД = Новый Структура;*/
			/*ДанныеПолученногоЭД.Вставить("НаимДокумента");*/
			/*ДанныеПолученногоЭД.Вставить("НомерДокумента");*/
			/*ДанныеПолученногоЭД.Вставить("ДатаДокумента");*/
			/*СтруктураДанных.Вставить("ДанныеПолученногоДокумента", ДанныеПолученногоЭД);*/
			/*СтруктураДокумента.Вставить("ДанныеИзвещения", СтруктураДанных);*/
			/*// Структура получателя
*/
			/*СтруктураДанных = Новый Структура;*/
			/*СтруктураДанных.Вставить("ИдУчастникаЭДО");*/
			/*СтруктураДанных.Вставить("УчастникЭДО");*/
			/*СтруктураДокумента.Вставить("ПолучательЭД", СтруктураДанных);*/
			/*// Структура подписанта
*/
			/*СтруктураДанных = Новый Структура;*/
			/*СтруктураДанных.Вставить("Должность");*/
			/*СтруктураДанных.Вставить("ФИО", СоздатьСтруктуруТипФИО());*/
			/*СтруктураДокумента.Вставить("Подписант", СтруктураДанных);*/
		}

		public void СформироватьДанныеПоУчастникуЭДО(/*УчастникЭДО, СтруктураПараметров, ВидУчастникаЭДО, ТекстОшибки, ПространствоИмен, ВерсияФормата*/)
		{
			/*ДанныеУчастникаЭДО = Неопределено;*/
			if(true/*НЕ СтруктураПараметров.Свойство(ВидУчастникаЭДО, ДанныеУчастникаЭДО)*/)
			{
			}
			/*ЗаполнитьСвойствоXDTO(УчастникЭДО, "ИдУчастЭДО", СтруктураПараметров.ИдУчастникаЭДО, Истина, ТекстОшибки);*/
			/*// Заполнение реквизитов
*/
			if(true/*ВидУчастникаЭДО = "ОператорЭДО"*/)
			{
				/*РеквизитыОператора = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ОперЭДО"), ВерсияФормата);*/
				/*ЗаполнитьСвойствоXDTO(РеквизитыОператора, "НаимОрг", ДанныеУчастникаЭДО.Наименование, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(РеквизитыОператора, "ИННЮЛ", ДанныеУчастникаЭДО.ИНН, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(РеквизитыОператора, "ИдОперЭДО", ДанныеУчастникаЭДО.ИдентификаторОператора, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(УчастникЭДО, "ОперЭДО", РеквизитыОператора, Истина, ТекстОшибки);*/
			}
		}

		public void ЗаполнитьЭЦППолученногоФайла(/*СсылкаНаОбъект, ТаблицаЗначений*/)
		{
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Подпись
	|ИЗ
	|	Справочник.ЭДПрисоединенныеФайлы.ЭлектронныеЦифровыеПодписи КАК ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи
	|ГДЕ
	|	ЭДПрисоединенныеФайлыЭлектронныеЦифровыеПодписи.Ссылка = &СсылкаНаОбъект";*/
			/*Запрос.УстановитьПараметр("СсылкаНаОбъект", СсылкаНаОбъект);*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			while(true/*Выборка.Следующий()*/)
			{
				/*НовСтрока = ТаблицаЗначений.Добавить();*/
				/*НовСтрока.ЭЦП = Base64Строка(Выборка.Подпись.Получить());*/
			}
			/*;;*/
		}

		public void ЗаполнитьДанныеПодписанта(/*СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров*/)
		{
			/*Отказ = ЭлектронныеДокументыПереопределяемый.ЗаполнитьСтруктуруДанныхПодписанта(СсылкаНаОбъект, СтруктураЭД,
		СтруктураПараметров);*/
			if(true/*Отказ*/)
			{
			}
			/*// Возьмем первый действующий сертификат для соответствующего вида ЭД
*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	СертификатыЭЦПВидыДокументов.Ссылка,
	|	СертификатыЭЦПВидыДокументов.Ссылка.ДолжностьПоСертификату КАК Должность,
	|	СертификатыЭЦПВидыДокументов.Ссылка.ФайлСертификата КАК Сертификат
	|ИЗ
	|	Справочник.СертификатыЭЦП.ВидыДокументов КАК СертификатыЭЦПВидыДокументов
	|ГДЕ
	|	СертификатыЭЦПВидыДокументов.ИспользоватьДляПодписи
	|	И СертификатыЭЦПВидыДокументов.ВидДокумента = &ВидЭД
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.Отозван
	|	И НЕ СертификатыЭЦПВидыДокументов.Ссылка.ПометкаУдаления";*/
			/*Запрос.УстановитьПараметр("ВидЭД", СтруктураЭД.ВидЭД);*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			while(true/*Выборка.Следующий()*/)
			{
				/*Должность = ?(ЗначениеЗаполнено(Выборка.Должность), Выборка.Должность, НСтр("ru = 'Не назначена'"));*/
				/*// необходимо заполнить обязательно
*/
				/*СтруктураПараметров.Вставить("Должность", Должность);*/
				/*Сертификат = Новый СертификатКриптографии(Выборка.Сертификат.Получить());*/
				/*КомуВыдан = "";*/
				if(true/*Сертификат.Субъект.Свойство("CN", КомуВыдан)*/)
				{
					/*// ФИО возьмем из сертификата
*/
					/*Фамилия = "";*/
					/*Имя = "";*/
					/*Отчество = "";*/
					/*СокрФИО = ЭлектронныеДокументыСлужебный.ФамилияИнициалыФизЛица(КомуВыдан, Фамилия, Имя, Отчество);*/
					/*// разложим на Ф, И, О
*/
					/*СтруктураПараметров.ФИО.Вставить("Фамилия",  Фамилия);*/
					/*СтруктураПараметров.ФИО.Вставить("Имя",      Имя);*/
					/*СтруктураПараметров.ФИО.Вставить("Отчество", Отчество);*/
				}
			}
			/*;;*/
		}

		public object СформироватьФайлИзвещенияПоЭД(/*СсылкаНаЭД*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*НастройкиОбменаЭД = СсылкаНаЭД.СоглашениеЭД;*/
			/*СтруктураЭД = Новый Структура;*/
			/*// для создания ЭДПрисоединенныеФайлы
*/
			/*СтруктураЭД.Вставить("ВидЭД",         Перечисления.ВидыЭД.ИзвещениеОПолучении);*/
			/*СтруктураЭД.Вставить("НаправлениеЭД", Перечисления.НаправленияЭД.Исходящий);*/
			/*СтруктураЭД.Вставить("НомерЭД",       Новый УникальныйИдентификатор());*/
			if(true/*ЭлектронныеДокументыСлужебный.ЭтоПрямойОбменЭД(НастройкиОбменаЭД.СпособОбменаЭД)*/)
			{
				/*СтруктураЭД.Вставить("Получатель",   НастройкиОбменаЭД.Контрагент);*/
				/*СтруктураЭД.Вставить("ИдПолучателя", НастройкиОбменаЭД.ИдентификаторКонтрагента);*/
			}
			/*СтруктураЭД.Вставить("ИдОтправителя", НастройкиОбменаЭД.ИдентификаторОрганизации);*/
			/*СтруктураЭД.Вставить("Отправитель",   НастройкиОбменаЭД.Организация);*/
			/*СтруктураЭД.Вставить("ИдФайла",       ОпределитьИдФайлаЭД(СтруктураЭД));*/
			/*СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения", СсылкаНаЭД.Наименование);*/
			/*// Дата и время получения файла.
*/
			/*СтруктураЭД.Вставить("ДатаВремяПолучения", СсылкаНаЭД.ДатаСоздания);*/
			/*СтруктураПараметров = ПодготовитьДанныеПоИзвещению(СсылкаНаЭД, СтруктураЭД);*/
			if(true/*ЗаполнитьФайлИзвещенияОПолучении(СтруктураПараметров)*/)
			{
				/*АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));*/
				/*СтруктураЭД.Вставить("АдресВоВременномХранилище", АдресВоВременномХранилище);*/
				/*ВозвращаемоеЗначение = СтруктураЭД;*/
			}
			return null;
		}

		public object ЗаполнитьФайлИзвещенияОПолучении(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ПространствоИмен = "DP_IZVPOL";*/
			/*ПутьКОписанию = "{" + ПространствоИмен + "}.Файл";*/
			/*Попытка
		ЭД = ПолучитьОбъектТипаCML(ПутьКОписанию);*/
			/*// Общая информация
*/
			/*ЗаполнитьСвойствоXDTO(ЭД, "ИдФайл", СтруктураПараметров.ИдФайла, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ЭД, "ВерсПрог", СтруктураПараметров.ВерсияПрограммы, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ЭД, "ВерсФорм", СтруктураПараметров.ВерсияФормата, Истина, ТекстОшибки);*/
			/*ДокументЭО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ");*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "КНД", СтруктураПараметров.Документ.КодКНД, Истина, ТекстОшибки);*/
			/*// Отправитель извещения
*/
			/*Отправитель = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.УчастЭДО");*/
			/*СформироватьДанныеПоУчастникуЭДО(Отправитель, СтруктураПараметров.Документ.ОтправительЭД, "УчастникЭДО", ТекстОшибки,
			ПространствоИмен, СтруктураПараметров.ВерсияФормата);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "УчастЭДО", Отправитель, Истина, ТекстОшибки);*/
			/*// Получатель извещения
*/
			/*Получатель = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.ОтпрДок");*/
			if(true/*СтруктураПараметров.Документ.ПолучательЭД.Свойство("ОператорЭДО")*/)
			{
				/*ТипПолучателя = "ОператорЭДО";*/
			}
			/*СформироватьДанныеПоУчастникуЭДО(Получатель, СтруктураПараметров.Документ.ПолучательЭД, ТипПолучателя, ТекстОшибки,
			ПространствоИмен, СтруктураПараметров.ВерсияФормата);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ОтпрДок", Получатель, Истина, ТекстОшибки);*/
			/*// Сведения извещения
*/
			/*ИзвещениеЭД = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.СвИзвПолуч");*/
			/*ЗаполнитьСвойствоXDTO(ИзвещениеЭД, "ДатаПол",  СтруктураПараметров.Документ.ДанныеИзвещения.ДатаПолучения, Истина,
			ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ИзвещениеЭД, "ВремяПол", СтруктураПараметров.Документ.ДанныеИзвещения.ВремяПолучения, Истина,
			ТекстОшибки);*/
			/*// Данные о полученном файле
*/
			/*ПолученныйЭД = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "СведПолФайл"));*/
			/*ЗаполнитьСвойствоXDTO(ПолученныйЭД, "ИмяПостФайла", СтруктураПараметров.Документ.ДанныеИзвещения.ИмяПолученногоФайла,
			Истина, ТекстОшибки);*/
			/*// ЭЦП полученного файла в кодировке Base64
*/
			/*ТЗ_ЭЦП = СтруктураПараметров.Документ.ДанныеИзвещения.ПолученныеЭЦП;*/
			if(true/*ТЗ_ЭЦП.Количество() > 0*/)
			{
			}
			/*ЗаполнитьСвойствоXDTO(ИзвещениеЭД, "СведПолФайл", ПолученныйЭД, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "СвИзвПолуч", ИзвещениеЭД, Истина, ТекстОшибки);*/
			/*// Подписант
*/
			/*Подписант = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "Подписант"));*/
			/*ЗаполнитьСвойствоXDTO(Подписант, "Должность", СтруктураПараметров.Документ.Подписант.Должность, Истина, ТекстОшибки);*/
			/*// Его ФИО
*/
			/*ФИОПодписанта = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"));*/
			/*ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Фамилия", СтруктураПараметров.Документ.Подписант.ФИО.Фамилия, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Имя", СтруктураПараметров.Документ.Подписант.ФИО.Имя, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Отчество", СтруктураПараметров.Документ.Подписант.ФИО.Отчество, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИОПодписанта, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Подписант", Подписант, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ЭД, "Документ", ДокументЭО, Истина, ТекстОшибки);*/
			/*ЭД.Проверить();*/
			/*ФайлИзвещения = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла("xml");*/
			/*ВыгрузитьЭДвФайл(ЭД, ФайлИзвещения, Ложь, "windows-1251");*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла", ФайлИзвещения);*/
			/*Исключение
		ТекстСообщения = НСтр("ru = '" + ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки,
			КраткоеПредставлениеОшибки(ИнформацияОбОшибке())) + " (подробности см. в Журнале регистрации).'");*/
			/*ТекстОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"), ТекстОшибки, ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}

		public object ПодготовитьДанныеПоИзвещению(/*СсылкаНаОбъект, СтруктураЭД*/)
		{
			/*СтруктураПараметров = СоздатьСтруктуруТипФайл(СтруктураЭД.ВидЭД);*/
			/*СтруктураПараметров.Вставить("ИдФайла", СтруктураЭД.ИдФайла);*/
			/*СтруктураПараметров.Вставить("ВерсияПрограммы", НСтр("ru = '1С:Предприятие 8'"));*/
			/*СтруктураПараметров.Вставить("ВерсияФормата", "1.02");*/
			/*// Документ
*/
			/*СтруктураПараметров.Документ.Вставить("КодКНД", "1115110");*/
			/*СтруктураПараметров.Документ.ОтправительЭД.Вставить("ИдУчастникаЭДО", СтруктураЭД.ИДОтправителя);*/
			/*СтруктураПараметров.Документ.ОтправительЭД.Вставить("УчастникЭДО", СтруктураЭД.Отправитель);*/
			/*СтруктураПараметров.Документ.ПолучательЭД.Вставить("ИдУчастникаЭДО", СтруктураЭД.ИДПолучателя);*/
			if(true/*СтруктураЭД.Свойство("ОператорЭДО")*/)
			{
				/*СтруктураПараметров.Документ.ПолучательЭД.Вставить("ОператорЭДО", СтруктураЭД.ОператорЭДО);*/
			}
			/*// Данные извещения по полученному файлу
*/
			/*СтруктураПараметров.Документ.ДанныеИзвещения.Вставить("ДатаПолучения", ВернутьДатуЭСФ(СтруктураЭД.ДатаВремяПолучения));*/
			/*СтруктураПараметров.Документ.ДанныеИзвещения.Вставить("ВремяПолучения", ВернутьВремяЭСФ(СтруктураЭД.ДатаВремяПолучения));*/
			/*СтруктураПараметров.Документ.ДанныеИзвещения.Вставить("ИмяПолученногоФайла",
		СтруктураЭД.ИмяПолученногоФайлаБезРасширения);*/
			/*// ЭЦП полученного файла
*/
			/*ЗаполнитьЭЦППолученногоФайла(СсылкаНаОбъект, СтруктураПараметров.Документ.ДанныеИзвещения.ПолученныеЭЦП);*/
			/*// ЭЦП полученного файла
*/
			/*ЗаполнитьДанныеПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров.Документ.Подписант);*/
			return null;
		}

		public object СформироватьИмяФайлаЭД(/*СтруктураЭД*/)
		{
			if(true/*СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении*/)
			{
				/*СтрокаИмени = СтруктураЭД.ИдФайла+".xml";*/
			}
			/*СтрокаИмени = ЭлектронныеДокументыСлужебный.КорректноеИмяФайла(СтрокаИмени, Истина);*/
			return null;
		}

		public object ОпределитьИдФайлаЭД(/*СтруктураЭД*/)
		{
			/*ТекстИд = "";*/
			if(true/*СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении*/)
			{
				/*// Формат имени по ЭСФ: DP_IZVPOL_ИдПолучателя_ИдОтправителя_ГГГГММДД_GUID.
*/
				/*ТекстИд = НСтр("ru = 'DP_IZVPOL_%1_%2_%3_%4'");*/
				if(true/*СтруктураЭД.Свойство("ОператорЭДО") И СтруктураЭД.ОператорЭДО.Свойство("ИдентификаторОператора")*/)
				{
					/*ИдПолучателя = СтруктураЭД.ОператорЭДО.ИдентификаторОператора;*/
				}
				/*ТекстИд = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстИд, ИдПолучателя, СтруктураЭД.ИдОтправителя,
			ВернутьДатуСтрокойДляИД(ТекущаяДатаСеанса()), СтруктураЭД.НомерЭД);*/
			}
			/*ИдФайлаЭД = ЭлектронныеДокументыСлужебный.КорректноеИмяФайла(ТекстИд);*/
			return null;
		}

		public object ВернутьДатуСтрокойДляИД(/*ДатаВремя*/)
		{
			return null;
		}

		public object ВернутьДатуЭСФ(/*ДатаВремя*/)
		{
			/*ДатаЭСФ = Формат(ДатаВремя, "ДФ=dd.MM.yyyy");*/
			return null;
		}

		public object ВернутьВремяЭСФ(/*ДатаВремя*/)
		{
			/*ВремяЭСФ = Формат(Час(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=") + ".";*/
			/*ВремяЭСФ = ВремяЭСФ+Формат(Минута(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=") + ".";*/
			/*ВремяЭСФ = ВремяЭСФ+Формат(Минута(ДатаВремя), "ЧЦ=2; ЧН=; ЧВН=");*/
			return null;
		}

		public object СоздатьСтруктуруТипФИО(/**/)
		{
			/*СтруктураДанных = Новый Структура;*/
			/*СтруктураДанных.Вставить("Фамилия");*/
			/*СтруктураДанных.Вставить("Имя");*/
			/*СтруктураДанных.Вставить("Отчество");*/
			return null;
		}

		public object СоздатьСтруктуруТипФайл(/*ВидЭД*/)
		{
			/*СтруктураДанных = Новый Структура;*/
			/*СтруктураДанных.Вставить("ИдФайла");*/
			/*СтруктураДанных.Вставить("ВерсияПрограммы");*/
			/*СтруктураДанных.Вставить("ВерсияФормата");*/
			/*СтруктураДанных.Вставить("ВидЭД",    ВидЭД);*/
			/*СтруктураДанных.Вставить("Документ", СоздатьСтруктуруТипДокумент(ВидЭД));*/
			/*СтруктураДанных.Вставить("ОбязательныеПараметры", "ИдФайла, ВерсияПрограммы, ВерсияФормата, Документ");*/
			return null;
		}

		public object СоздатьСтруктуруТипДокумент(/*ВидЭД*/)
		{
			/*СтруктураДанных = Новый Структура;*/
			/*СтруктураДанных.Вставить("КодКНД");*/
			/*// код классификатора налоговой документации
*/
			if(true/*ВидЭД = Перечисления.ВидыЭД.ИзвещениеОПолучении*/)
			{
				/*ДозаполнитьСтруктуруТипДокументДляИзвещенияОПолучении(СтруктураДанных);*/
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Просмотр уведомлений об уточнении
		// Процедура заполняет табличный документ Уведомление об уточнении.
		//

		public void ЗаполнитьТабличныйДокументУточнение(/*ТабличныйДокумент, ДанныеПечати*/)
		{
			/*ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Уточнение";*/
			/*Макет = Справочники.ЭДПрисоединенныеФайлы.ПолучитьМакет("ЭД_Уточнение");*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");*/
			/*ТекстЗаголовка = НСтр("ru='Уведомление об уточнении'");*/
			/*ОбластьМакета.Параметры.ТекстЗаголовка = ТекстЗаголовка;*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Шапка");*/
			/*ЗаполнитьЗначенияСвойств(ОбластьМакета.Параметры, ДанныеПечати.Шапка);*/
			/*ТабличныйДокумент.Вывести(ОбластьМакета);*/
			/*ТабличныйДокумент.АвтоМасштаб = Истина;*/
		}

		public void ПрочитатьУточнениеXDTO(/*ЭД, ДеревоРазбора, НовыйЭД, Ошибка*/)
		{
			/*НовыйЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении;*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ИмяФайла",          ЭД.Документ.СвУведУточ.СведПолФайл.ИмяПостФайла);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Отправитель",       ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.ОтпрДок));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "Получатель",        ПолучитьДанныеУчастникаОбменаЭД(ЭД.Документ.УчастЭДО));*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ДатаПолучения",     ЭД.Документ.СвУведУточ.ДатаПол);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ВремяПолучения",    ЭД.Документ.СвУведУточ.ВремяПол);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ТекстУточнения",    ЭД.Документ.СвУведУточ.ТекстУведУточ);*/
			/*ДобавитьРеквизитШапкиОбъекта(НовыйЭД, "ПараметрЗаголовка", "");*/
		}

		public void ДозаполнитьСтруктуруТипДокументДляУведомленияОбУточнении(/*СтруктураДокумента*/)
		{
			/*// Структура участника ЭДО
*/
			/*СтруктураДанных = Новый Структура;*/
			/*СтруктураДанных.Вставить("ИдУчастникаЭДО");*/
			/*СтруктураДанных.Вставить("УчастникЭДО");*/
			/*СтруктураДокумента.Вставить("ОтправительЭД", СтруктураДанных);*/
			/*// Структура извещения
*/
			/*СтруктураДанных = Новый Структура;*/
			/*СтруктураДанных.Вставить("ДатаПолучения");*/
			/*СтруктураДанных.Вставить("ВремяПолучения");*/
			/*СтруктураДанных.Вставить("ИмяПолученногоФайла");*/
			/*СтруктураДанных.Вставить("ТекстУточнения");*/
			/*ТЗ_ЭЦП = Новый ТаблицаЗначений;*/
			/*ТЗ_ЭЦП.Колонки.Добавить("ЭЦП");*/
			/*СтруктураДанных.Вставить("ПолученныеЭЦП", ТЗ_ЭЦП);*/
			/*ДанныеПолученногоЭД = Новый Структура;*/
			/*ДанныеПолученногоЭД.Вставить("НаимДокумента");*/
			/*ДанныеПолученногоЭД.Вставить("НомерДокумента");*/
			/*ДанныеПолученногоЭД.Вставить("ДатаДокумента");*/
			/*СтруктураДанных.Вставить("ДанныеПолученногоДокумента", ДанныеПолученногоЭД);*/
			/*СтруктураДокумента.Вставить("ДанныеУточнения", СтруктураДанных);*/
			/*// Структура получателя
*/
			/*СтруктураДанных = Новый Структура;*/
			/*СтруктураДанных.Вставить("ИдУчастникаЭДО");*/
			/*СтруктураДанных.Вставить("УчастникЭДО");*/
			/*СтруктураДокумента.Вставить("ПолучательЭД", СтруктураДанных);*/
			/*// Структура подписанта
*/
			/*СтруктураДанных = Новый Структура;*/
			/*СтруктураДанных.Вставить("Должность");*/
			/*СтруктураДанных.Вставить("ФИО", СоздатьСтруктуруТипФИО());*/
			/*СтруктураДокумента.Вставить("Подписант", СтруктураДанных);*/
		}

		public object СформироватьФайлУведомлениеОбУточненииПоЭД(/*СсылкаНаЭД, ТекстУточнения*/)
		{
			/*ВозвращаемоеЗначение = Неопределено;*/
			/*СтруктураЭД = СтруктураУведомленияОбУточнении();*/
			/*// для создания ЭДПрисоединенныеФайлы
*/
			/*СтруктураЭД.ВидЭД = Перечисления.ВидыЭД.УведомлениеОбУточнении;*/
			/*СтруктураЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;*/
			/*СтруктураЭД.НомерЭД = Новый УникальныйИдентификатор();*/
			/*СтруктураЭД.ИдОтправителя = СсылкаНаЭД.ПолучательЭД;*/
			/*СтруктураЭД.Отправитель = СсылкаНаЭД.Организация;*/
			/*СтруктураЭД.ИдПолучателя = СсылкаНаЭД.ОтправительЭД;*/
			/*СтруктураЭД.Получатель = СсылкаНаЭД.Контрагент;*/
			/*СтруктураЭД.ИдФайла = ОпределитьИдФайлаЭД(СтруктураЭД);*/
			/*СтруктураЭД.ИмяПолученногоФайлаБезРасширения =  СсылкаНаЭД.Наименование;*/
			/*// Дата и время получения файла
*/
			/*СтруктураЭД.ДатаВремяПолучения = СсылкаНаЭД.ДатаСоздания;*/
			/*СтруктураЭД.ТекстУточнения = ТекстУточнения;*/
			/*СтруктураЭД.ИдПолучателя = СсылкаНаЭД.ОтправительЭД;*/
			/*СтруктураЭД.Получатель = СсылкаНаЭД.Контрагент;*/
			/*СтруктураПараметров = ПодготовитьДанныеПоУведомлению(СсылкаНаЭД, СтруктураЭД);*/
			/*АдресКаталога = ЭлектронныеДокументыСлужебный.РабочийКаталог("Уточнения");*/
			/*СтруктураПараметров.Вставить("ПолноеИмяФайла", АдресКаталога + СформироватьИмяФайлаЭД(СтруктураЭД));*/
			if(true/*ЗаполнитьФайлУведомленияОбУточнении(СтруктураПараметров)*/)
			{
				/*АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(СтруктураПараметров.ПолноеИмяФайла));*/
				/*СтруктураЭД.АдресВоВременномХранилище = АдресВоВременномХранилище;*/
				/*ВозвращаемоеЗначение = СтруктураЭД;*/
			}
			/*УдалитьФайлы(АдресКаталога);*/
			return null;
		}

		public object ПолучитьДанныеУточненияДляПечати(/*СтрокаОбъекта, ДеревоРазбора, ИД*/)
		{
			/*ДанныеЗаполненияШапки = Новый Структура;*/
			/*ДанныеЗаполненияШапки.Вставить("Отправитель", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Отправитель"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИдентификаторОтправителя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторОтправителя"));*/
			/*ДанныеЗаполненияШапки.Вставить("Получатель",  ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"Получатель"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИдентификаторПолучателя", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ИдентификаторПолучателя"));*/
			/*ДанныеЗаполненияШапки.Вставить("ДатаПолучения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ДатаПолучения"));*/
			/*ДанныеЗаполненияШапки.Вставить("ВремяПолучения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ВремяПолучения"));*/
			/*ДанныеЗаполненияШапки.Вставить("ТекстУточнения", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора,
		СтрокаОбъекта, "ТекстУточнения"));*/
			/*ДанныеЗаполненияШапки.Вставить("ИмяФайла", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(ДеревоРазбора, СтрокаОбъекта,
		"ИмяФайла"));*/
			/*ЭДУточнение = Справочники.ЭДПрисоединенныеФайлы.ПолучитьСсылку(ИД);*/
			/*Параметры = Новый Структура;*/
			/*Параметры.Вставить("УникальныйИД", ЭДУточнение.УникальныйИД);*/
			/*Параметры.Вставить("ВидЭД", Перечисления.ВидыЭД.Подтверждение);*/
			/*Параметры.Вставить("Направление", Перечисления.НаправленияЭД.Входящий);*/
			if(true/*ЭДУточнение.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий*/)
			{
				/*Параметры.Вставить("ТипЭлементаВерсииЭД", Перечисления.ТипыЭлементовВерсииЭД.ПДПЭСФ);*/
			}
			/*ЭДПодтверждениеДаты = ЭлектронныеДокументыОператорыЭДО.ОпределитьДокументПоПараметрам(Параметры);*/
			if(true/*ЭДПодтверждениеДаты <> Неопределено*/)
			{
				/*ДопИнформацияПоЭД = ПрисоединенныеФайлы.ПолучитьДанныеФайла(ЭДПодтверждениеДаты, , Истина);*/
				if(true/*ДопИнформацияПоЭД.Свойство("СсылкаНаДвоичныеДанныеФайла")
			И ЗначениеЗаполнено(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла)*/)
				{
					/*ДанныеЭД = ПолучитьИзВременногоХранилища(ДопИнформацияПоЭД.СсылкаНаДвоичныеДанныеФайла);*/
					if(true/*ЗначениеЗаполнено(ДопИнформацияПоЭД.Расширение)*/)
					{
						/*ИмяФайла = ЭлектронныеДокументыСлужебный.ТекущееИмяВременногоФайла(ДопИнформацияПоЭД.Расширение);*/
					}
					if(true/*ИмяФайла <> Неопределено*/)
					{
						/*ДанныеЭД.Записать(ИмяФайла);*/
						/*СтруктураПодтверждения = СформироватьДеревоРазбора(ИмяФайла, ЭДПодтверждениеДаты.НаправлениеЭД);*/
						if(true/*СтруктураПодтверждения <> Неопределено И СтруктураПодтверждения.Количество() > 0*/)
						{
							/*ДанныеЗаполненияШапки.Вставить("ДатаОтправления", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
						СтруктураПодтверждения.ДеревоРазбора, СтруктураПодтверждения.СтрокаОбъекта, "ДатаОтправки"));*/
							/*ДанныеЗаполненияШапки.Вставить("ВремяОтправления", ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(
						СтруктураПодтверждения.ДеревоРазбора, СтруктураПодтверждения.СтрокаОбъекта, "ВремяОтправки"));*/
							/*ДанныеЗаполненияШапки.Вставить("ОператорЭДО", "оператора электронного документооборота "
						+ ПолучитьЗначениеРеквизитаСтрокиДереваРазбора(СтруктураПодтверждения.ДеревоРазбора,
						СтруктураПодтверждения.СтрокаОбъекта, "ОператорЭДО"));*/
						}
					}
				}
			}
			/*ДанныеДляОбъекта = Новый Структура;*/
			/*ДанныеДляОбъекта.Вставить("Шапка", ДанныеЗаполненияШапки);*/
			return null;
		}

		public object ПодготовитьДанныеПоУведомлению(/*СсылкаНаОбъект, СтруктураЭД*/)
		{
			/*СтруктураПараметров = СоздатьСтруктуруТипФайл(СтруктураЭД.ВидЭД);*/
			/*СтруктураПараметров.Вставить("ИдФайла", СтруктураЭД.ИдФайла);*/
			/*СтруктураПараметров.Вставить("ВерсияПрограммы", НСтр("ru = '1С:Предприятие 8'"));*/
			/*СтруктураПараметров.Вставить("ВерсияФормата", "1.02");*/
			/*// Данные по документу.
*/
			/*СтруктураПараметров.Документ.Вставить("КодКНД", "1115113");*/
			/*СтруктураПараметров.Документ.ОтправительЭД.Вставить("ИдУчастникаЭДО", СтруктураЭД.ИДОтправителя);*/
			/*СтруктураПараметров.Документ.ОтправительЭД.Вставить("УчастникЭДО", СтруктураЭД.Отправитель);*/
			/*СтруктураПараметров.Документ.ПолучательЭД.Вставить("ИдУчастникаЭДО", СтруктураЭД.ИДПолучателя);*/
			/*СтруктураПараметров.Документ.ПолучательЭД.Вставить("УчастникЭДО", СтруктураЭД.Получатель);*/
			/*// Данные уведомления об уточнении по полученному файлу.
*/
			/*СтруктураПараметров.Документ.ДанныеУточнения.Вставить("ДатаПолучения", ВернутьДатуЭСФ(СтруктураЭД.ДатаВремяПолучения));*/
			/*СтруктураПараметров.Документ.ДанныеУточнения.Вставить("ВремяПолучения", ВернутьВремяЭСФ(СтруктураЭД.ДатаВремяПолучения));*/
			/*СтруктураПараметров.Документ.ДанныеУточнения.Вставить("ИмяПолученногоФайла", СтруктураЭД.ИмяПолученногоФайлаБезРасширения);*/
			/*СтруктураПараметров.Документ.ДанныеУточнения.Вставить("ТекстУточнения", СтруктураЭД.ТекстУточнения);*/
			/*СтруктураПараметров.Документ.ДанныеУточнения.Вставить("НомерОтклоненногоЭД", СсылкаНаОбъект.НомерЭД);*/
			/*// ЭЦП полученного файла.
*/
			/*ЗаполнитьЭЦППолученногоФайла(СсылкаНаОбъект, СтруктураПараметров.Документ.ДанныеУточнения.ПолученныеЭЦП);*/
			/*// ЭЦП полученного файла.
*/
			/*ЗаполнитьДанныеПодписанта(СсылкаНаОбъект, СтруктураЭД, СтруктураПараметров.Документ.Подписант);*/
			return null;
		}

		public object ЗаполнитьФайлУведомленияОбУточнении(/*СтруктураПараметров*/)
		{
			/*ТекстОшибки = "";*/
			/*ПространствоИмен = "DP_UVUTOCH";*/
			/*ПутьКОписанию = "{" + ПространствоИмен + "}.Файл";*/
			/*Попытка
		ЭД = ПолучитьОбъектТипаCML(ПутьКОписанию);*/
			/*// Общая информация
*/
			/*ЗаполнитьСвойствоXDTO(ЭД, "ИдФайл",   СтруктураПараметров.ИдФайла, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ЭД, "ВерсПрог", СтруктураПараметров.ВерсияПрограммы, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ЭД, "ВерсФорм", СтруктураПараметров.ВерсияФормата, Истина, ТекстОшибки);*/
			/*ДокументЭО = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ");*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "КНД", СтруктураПараметров.Документ.КодКНД, Истина, ТекстОшибки);*/
			/*// Отправитель извещения
*/
			/*Отправитель = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.УчастЭДО");*/
			/*СформироватьДанныеПоУчастникуЭДО(Отправитель, СтруктураПараметров.Документ.ОтправительЭД, "УчастникЭДО", ТекстОшибки,
			ПространствоИмен, СтруктураПараметров.ВерсияФормата);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "УчастЭДО", Отправитель, Истина, ТекстОшибки);*/
			/*// Получатель извещения
*/
			/*Получатель = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.ОтпрДок");*/
			/*СформироватьДанныеПоУчастникуЭДО(Получатель, СтруктураПараметров.Документ.ПолучательЭД, "УчастникЭДО", ТекстОшибки,
			ПространствоИмен, СтруктураПараметров.ВерсияФормата);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "ОтпрДок", Получатель, Истина, ТекстОшибки);*/
			/*// Сведения уточнения
*/
			/*УточнениеЭД = ПолучитьОбъектТипаCML(ПутьКОписанию+".Документ.СвУведУточ");*/
			/*ЗаполнитьСвойствоXDTO(УточнениеЭД, "ДатаПол",  СтруктураПараметров.Документ.ДанныеУточнения.ДатаПолучения, Истина,
			ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(УточнениеЭД, "ВремяПол", СтруктураПараметров.Документ.ДанныеУточнения.ВремяПолучения, Истина,
			ТекстОшибки);*/
			/*// Данные о полученном файле
*/
			/*ПолученныйЭД = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "СведПолФайл"));*/
			/*ЗаполнитьСвойствоXDTO(ПолученныйЭД, "ИмяПостФайла", СтруктураПараметров.Документ.ДанныеУточнения.ИмяПолученногоФайла,
			Истина, ТекстОшибки);*/
			/*// ЭЦП полученного файла в кодировке Base64.
*/
			/*ТЗ_ЭЦП = СтруктураПараметров.Документ.ДанныеУточнения.ПолученныеЭЦП;*/
			if(true/*ТЗ_ЭЦП.Количество() > 0*/)
			{
			}
			/*ДанПолучДок = ПолучитьОбъектТипаCML(ПутьКОписанию + ".Документ.СвУведУточ.ДанПолучДок");*/
			/*ЗаполнитьСвойствоXDTO(ДанПолучДок, "НаимДок", "ДокОснование", , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДанПолучДок, "НомСФ", СтруктураПараметров.Документ.ДанныеУточнения.НомерОтклоненногоЭД, ,
			ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДанПолучДок, "ДатаСФ", СтруктураПараметров.Документ.ДанныеУточнения.ДатаПолучения, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(УточнениеЭД, "ДанПолучДок", ДанПолучДок, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(УточнениеЭД, "СведПолФайл", ПолученныйЭД, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(УточнениеЭД, "ТекстУведУточ", СтруктураПараметров.Документ.ДанныеУточнения.ТекстУточнения, Истина,
			ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "СвУведУточ", УточнениеЭД, Истина, ТекстОшибки);*/
			/*// Подписант
*/
			/*Подписант = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "Подписант"));*/
			/*ЗаполнитьСвойствоXDTO(Подписант, "Должность", СтруктураПараметров.Документ.Подписант.Должность, Истина, ТекстОшибки);*/
			/*ФИОПодписанта = ПолучитьОбъектТипаCML(ФабрикаXDTO.Тип(ПространствоИмен, "ФИОТип"));*/
			/*ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Фамилия", СтруктураПараметров.Документ.Подписант.ФИО.Фамилия, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Имя", СтруктураПараметров.Документ.Подписант.ФИО.Имя, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ФИОПодписанта, "Отчество", СтруктураПараметров.Документ.Подписант.ФИО.Отчество, , ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(Подписант, "ФИО", ФИОПодписанта, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ДокументЭО, "Подписант", Подписант, Истина, ТекстОшибки);*/
			/*ЗаполнитьСвойствоXDTO(ЭД, "Документ", ДокументЭО, Истина, ТекстОшибки);*/
			/*ЭД.Проверить();*/
			/*ВыгрузитьЭДвФайл(ЭД, СтруктураПараметров.ПолноеИмяФайла, Ложь, "windows-1251");*/
			/*Исключение
		ШаблонСообщения = НСтр("ru = '1% (подробности см. в Журнале регистрации).'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения,
			?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки, КраткоеПредставлениеОшибки(ИнформацияОбОшибке())));*/
			/*ЭлектронныеДокументы.ОбработатьИсключениеПоЭДНаСервере(НСтр("ru = 'Формирование ЭД'"),
			ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()), ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Формирование уведомлений об уточнении

		public object ОпределитьТипЭДПоТипуЭДВладельца(/*СсылкаНаЭД*/)
		{
			/*ТипЭлементаВерсииЭД = СсылкаНаЭД.ТипЭлементаВерсииЭД;*/
			if(true/*ЗначениеЗаполнено(ТипЭлементаВерсииЭД)*/)
			{
				if(true/*ТипЭлементаВерсииЭД = Перечисления.ТипыЭлементовВерсииЭД.ПДОЭСФ*/)
				{
					/*ВозвращаемыйТип = Перечисления.ТипыЭлементовВерсииЭД.ИППДОЭСФ;*/
				}
			}
			return null;
		}

		public object СтруктураУведомленияОбУточнении(/**/)
		{
			/*СтруктураЭД = Новый Структура;*/
			/*СтруктураЭД.Вставить("ВидЭД");*/
			/*СтруктураЭД.Вставить("НаправлениеЭД");*/
			/*СтруктураЭД.Вставить("НомерЭД");*/
			/*СтруктураЭД.Вставить("ИдОтправителя");*/
			/*СтруктураЭД.Вставить("ИдПолучателя");*/
			/*СтруктураЭД.Вставить("Отправитель");*/
			/*СтруктураЭД.Вставить("Получатель");*/
			/*СтруктураЭД.Вставить("ИдФайла");*/
			/*СтруктураЭД.Вставить("ИмяПолученногоФайлаБезРасширения");*/
			/*СтруктураЭД.Вставить("ДатаВремяПолучения");*/
			/*СтруктураЭД.Вставить("ТекстУточнения");*/
			/*СтруктураЭД.Вставить("АдресВоВременномХранилище");*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Оператор ЭДО

		public void ЗаполнитьРеквизитыОператораЭДО(/*СтруктураПараметров*/)
		{
			/*СтруктураРеквизитов = ЭлектронныеДокументыОператорыЭДО.СтруктураНастроекОператораЭДО();*/
			/*Наименование = "";*/
			/*ИНН = "";*/
			/*ИдентификаторОператора = "";*/
			/*СтруктураРеквизитов.Свойство("Наименование", Наименование);*/
			/*СтруктураРеквизитов.Свойство("ИНН", ИНН);*/
			/*СтруктураРеквизитов.Свойство("ИдентификаторОператора", ИдентификаторОператора);*/
			if(true/*СтруктураПараметров.Свойство("НаимОрг")*/)
			{
				/*СтруктураПараметров.НаимОрг = Наименование;*/
			}
			if(true/*СтруктураПараметров.Свойство("ИННЮЛ")*/)
			{
				/*СтруктураПараметров.ИННЮЛ = ИНН;*/
			}
			if(true/*СтруктураПараметров.Свойство("ИдЭДО")*/)
			{
				/*СтруктураПараметров.ИдЭДО = ИдентификаторОператора;*/
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		// Прочие

		public object РекурсивноОбработатьСтрокиДерева(/*МассивСтрок, Рекв, ПространствоИменСхемы, ЮридическиЗначимый, ЕстьДанныеДляДопФайла, ТекстОшибки*/)
		{
			return null;
		}

		public object СформироватьУниверсальныйДопФайлCML(/*СтруктураПараметров,
											ТекстОшибки,
											Знач ЮридическиЗначимый = Ложь,
											ИмяТЧ = Неопределено,
											НомерСтроки = Неопределено*/)
		{
			/*// ИмяТЧ и НомерСтроки заполняются только для юридически значимой информации (информация - которая будет помещена в
*/
			/*// основном файле (ИнфПол, ИнфПолСтр) и подписана ЭЦП).
*/
			if(true/*ЗначениеЗаполнено(ИмяТЧ) ИЛИ НомерСтроки <> Неопределено*/)
			{
				/*ЮридическиЗначимый = Истина;*/
			}
			/*ДопФайлСформирован = Ложь;*/
			/*ПространствоИменСхемы = "ДопФайлУниверсальный";*/
			/*Попытка
		ДеревоДопДанных = СтруктураПараметров.ДеревоДопДанных;*/
			if(true/*ТипЗнч(ДеревоДопДанных) = Тип("ДеревоЗначений") И ДеревоДопДанных.Строки.Количество() > 0*/)
			{
				/*ЕстьДанныеДляДопФайла = Ложь;*/
				/*ДопФайл = ПолучитьОбъектТипаCML("ДопФайл", ПространствоИменСхемы);*/
				/*Данные = ПолучитьОбъектТипаCML("ДопФайл.Данные", ПространствоИменСхемы);*/
				if(true/*НомерСтроки <> Неопределено*/)
				{
					/*// Если НомерСтроки - заполнено, то формируется строка ИнфПолСтр по юридически значимой информации и конкретной строке ТЧ.
*/
					/*СтОтбора = Новый Структура;*/
					/*СтОтбора.Вставить("ТЧ", Истина);*/
					/*СтОтбора.Вставить("ИмяРеквизита", "Список");*/
					/*СтОтбора.Вставить("ЗначениеРеквизита", ИмяТЧ);*/
					/*МассивСтрокДЗ = ДеревоДопДанных.Строки.НайтиСтроки(СтОтбора, Истина);*/
					if(true/*МассивСтрокДЗ.Количество() > 0*/)
					{
						/*// В нужной таб.части найдем требующуюся строку (НомерСтроки):
*/
						/*СтОтбора = Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", НомерСтроки);*/
						/*МассивСтрокДЗ = МассивСтрокДЗ[0].Строки.НайтиСтроки(СтОтбора);*/
						if(true/*МассивСтрокДЗ.Количество() > 0*/)
						{
							/*// В подчиненных строках выберем юридически значимые реквизиты:
*/
							/*МассивСтрокДЗ = МассивСтрокДЗ[0].Строки;*/
							/*//.НайтиСтроки(Новый Структура("ЮридическиЗначимый", Истина));
*/
						}
					}
				}
				if(true/*МассивСтрокДЗ.Количество() > 0*/)
				{
					/*РекурсивноОбработатьСтрокиДерева(МассивСтрокДЗ, Данные, ПространствоИменСхемы, ЮридическиЗначимый,
					ЕстьДанныеДляДопФайла, ТекстОшибки);*/
					/*ЗаполнитьСвойствоXDTO(ДопФайл, "Данные", Данные, Истина, ТекстОшибки);*/
				}
				/*ИдДопФайла = Новый УникальныйИдентификатор;*/
				/*ЗаполнитьСвойствоXDTO(ДопФайл, "ИдФайла", СтруктураПараметров.ИдФайл, Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ДопФайл, "ИдДопФайла", Строка(ИдДопФайла), Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ДопФайл, "ВерсияФормата", "1", Истина, ТекстОшибки);*/
				/*ЗаполнитьСвойствоXDTO(ДопФайл, "ДатаФормирования", ТекущаяДатаСеанса(), Истина, ТекстОшибки);*/
				/*ДопФайл.Проверить();*/
				if(true/*ЕстьДанныеДляДопФайла И НЕ ЗначениеЗаполнено(ТекстОшибки)*/)
				{
					if(true/*ЮридическиЗначимый*/)
					{
						/*ЗаписьXML = Новый ЗаписьXML;*/
						/*ЗаписьXML.УстановитьСтроку();*/
						/*ФабрикаXDTO.ЗаписатьXML(ЗаписьXML, ДопФайл);*/
						/*СтрXML = ЗаписьXML.Закрыть();*/
						/*НачПоз = Найти(СтрXML, "<Данные>");*/
						/*КолСимв = Найти(СтрXML, "</Данные>") - НачПоз + 9;*/
						/*СтрXML = Сред(СтрXML, НачПоз, КолСимв);*/
						/*СтруктураПараметров.Вставить("ИнфПол", СтрXML);*/
					}
					/*ДопФайлСформирован = Истина;*/
				}
			}
			/*Исключение
		ТекстОшибки = ОписаниеОшибки();*/
			/*КонецПопытки;*/
			return null;
		}

		public object РекурсивноРазобратьДопФайл(/*ОбъектРазбора, ДеревоДопДанных, ЮридическиЗначимый = Ложь*/)
		{
			return null;
		}
		// Универсальный доп. файл, представляет из себя дерево с неограниченым уровнем вложений. Каждый элемент дерева имеет
		// реквизиты (Имя, Значение) и подчиненные элементы (ветки), с таким же составом, как и у текущего элемента.
		//
		// Параметры:
		//  ДопФайл - строка - путь к файлу.
		//
		// Возвращаемое значение - Неопределено, либо ДеревоЗначений.
		//

		public object РазобратьУниверсальныйДопФайл(/*ДопФайл*/)
		{
			/*ДеревоДопДанных = ДеревоДопДанных();*/
			/*ОбъектXML = Новый ЧтениеXML;*/
			/*Попытка
		ОбъектXML.ОткрытьФайл(ДопФайл);*/
			/*ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("ДопФайл", "ДопФайлУниверсальный"));*/
			/*ОбъектXML.Закрыть();*/
			if(true/*ЭД.Данные <> Неопределено*/)
			{
				/*РекурсивноРазобратьДопФайл(ЭД.Данные, ДеревоДопДанных);*/
			}
			/*Исключение
		ДеревоДопДанных = Неопределено;*/
			/*ОбъектXML.Закрыть();*/
			/*ШаблонСообщения = НСтр("ru = 'Возникла ошибка при чтении данных из файла %1: %2'");*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ДопФайл, ОписаниеОшибки());*/
			/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			/*КонецПопытки;*/
			return null;
		}

		public void ПрочитатьИнфПол(/*Знач СтрокаXML, ДеревоДопДанных, ИмяНабораДанных, НомерСтроки = Неопределено*/)
		{
			/*СтрокаXML = "<ДопФайл ИдФайла=""1"" ИдДопФайла=""1"" ВерсияФормата=""1"" ДатаФормирования=""2000-01-01T00:00:00"" xmlns=""ДопФайлУниверсальный"">"
		+ СтрокаXML + "</ДопФайл>";*/
			if(true/*ТипЗнч(ДеревоДопДанных) <> Тип("ДеревоЗначений")*/)
			{
				/*ДеревоДопДанных = ДеревоДопДанных();*/
			}
			/*ОбъектXML = Новый ЧтениеXML;*/
			/*Попытка
		ОбъектXML.УстановитьСтроку(СтрокаXML);*/
			/*ЭД = ФабрикаXDTO.ПрочитатьXML(ОбъектXML, ПолучитьТипЗначенияCML("ДопФайл", "ДопФайлУниверсальный"));*/
			/*ОбъектXML.Закрыть();*/
			if(true/*ЭД.Данные <> Неопределено*/)
			{
				/*СтрокаДЗ = ДеревоДопДанных.Строки.Найти(ИмяНабораДанных, "ЗначениеРеквизита");*/
				if(true/*СтрокаДЗ = Неопределено*/)
				{
					/*СтрокаДЗ = ДеревоДопДанных.Строки.Добавить();*/
					/*СтрокаДЗ.ЗначениеРеквизита = ИмяНабораДанных;*/
					if(true/*НомерСтроки = Неопределено*/)
					{
						/*СтрокаДЗ.ИмяРеквизита = "Набор";*/
					}
				}
				if(true/*НомерСтроки <> Неопределено*/)
				{
					/*СтрокиДЗ = СтрокаДЗ.Строки.НайтиСтроки(Новый Структура("ИмяРеквизита, ЗначениеРеквизита", "Нпп", НомерСтроки));*/
					if(true/*СтрокиДЗ.Количество() > 0*/)
					{
						/*СтрокаДЗ = СтрокиДЗ[0];*/
					}
				}
				/*РекурсивноРазобратьДопФайл(ЭД.Данные, СтрокаДЗ, Истина);*/
			}
			/*Исключение
		ДеревоДопДанных = Неопределено;*/
			/*ОбъектXML.Закрыть();*/
			/*ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("ru = 'Возникла ошибка при чтении данных из строки доп.данных. (%1)'"), ОписаниеОшибки());*/
			/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
			/*КонецПопытки;*/
		}
	}
}

