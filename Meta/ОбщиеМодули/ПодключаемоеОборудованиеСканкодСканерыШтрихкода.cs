using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class ПодключаемоеОборудованиеСканкодСканерыШтрихкода
	{
		///////////////////////////////////////////////////////////////////////////////
		// ПРОГРАММНЫЙ ИНТЕРФЕЙС
		// Функция осуществляет подключение устройства.
		//
		// Параметры:
		//  ОбъектДрайвера   - <*>
		//           - ОбъектДрайвера драйвера торгового оборудования.
		//
		// Возвращаемое значение:
		//  <Булево> - Результат работы функции.
		//

		public object ПодключитьУстройство(/*ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры*/)
		{
			/*Результат  = Истина;*/
			/*ВыходныеПараметры = Новый Массив();*/
			/*// Проверка настроенных параметров
*/
			/*БитДанных = Неопределено;*/
			/*Порт      = Неопределено;*/
			/*Скорость  = Неопределено;*/
			/*СтопБит   = Неопределено;*/
			/*Префикс   = Неопределено;*/
			/*Суффикс   = Неопределено;*/
			/*Параметры.Свойство("БитДанных", БитДанных);*/
			/*Параметры.Свойство("Порт",      Порт);*/
			/*Параметры.Свойство("Скорость",  Скорость);*/
			/*Параметры.Свойство("СтопБит",   СтопБит);*/
			/*Параметры.Свойство("Префикс",   Префикс);*/
			/*Параметры.Свойство("Суффикс",   Суффикс);*/
			if(true/*БитДанных = Неопределено
	 ИЛИ Порт      = Неопределено
	 ИЛИ Скорость  = Неопределено
	 ИЛИ СтопБит   = Неопределено
	 ИЛИ Префикс   = Неопределено
	 ИЛИ Суффикс   = Неопределено*/)
			{
				/*ВыходныеПараметры.Добавить(999);*/
				/*ВыходныеПараметры.Добавить(НСтр("ru='Не настроены параметры устройства.
		|Для корректной работы устройства необходимо задать параметры его работы.
		|Сделать это можно при помощи формы ""Настройка параметров"" модели
		|подключаемого оборудования в форме ""Подключение и настройка оборудования"".'"));*/
				/*Результат = Ложь;*/
			}
			/*// Конец: Проверка настроенных параметров
*/
			if(true/*Результат*/)
			{
				/*ВыходныеПараметры.Добавить("СканерШтрихкода");*/
				/*ВыходныеПараметры.Добавить(Новый Массив());*/
				/*ВыходныеПараметры[1].Добавить("ПолученШтрихкод");*/
				/*Результат = (ОбъектДрайвера.Подсоединить(ВыходныеПараметры[0]) = 0);*/
				if(true/*НЕ Результат*/)
				{
					/*ВыходныеПараметры.Очистить();*/
					/*ВыходныеПараметры.Добавить(999);*/
					/*ВыходныеПараметры.Добавить(НСтр("ru='Ошибка при подключении устройства.
			|Проверьте настройки порта.'"));*/
				}
				if(true/*Результат = Истина*/)
				{
					/*ОбъектДрайвера.БитДанных  = Параметры.БитДанных;*/
					/*ОбъектДрайвера.Порт       = Параметры.Порт;*/
					/*ОбъектДрайвера.Скорость   = Параметры.Скорость;*/
					/*ОбъектДрайвера.СтопБит    = Параметры.СтопБит;*/
					/*ОбъектДрайвера.СтопСимвол = Параметры.Суффикс;*/
					/*ОбъектДрайвера.ИмяСобытия = ВыходныеПараметры[1][0];*/
					/*Результат = (ОбъектДрайвера.Занять(1) = 0);*/
					if(true/*Результат*/)
					{
						/*ОбъектДрайвера.УстройствоВключено = 1;*/
						/*ОбъектДрайвера.ПосылкаДанных      = 1;*/
						/*ОбъектДрайвера.ОчиститьВход();*/
						/*ОбъектДрайвера.ОчиститьВыход();*/
						/*Результат = (ОбъектДрайвера.УстройствоВключено = 1);*/
						if(true/*НЕ Результат*/)
						{
							/*ОтключитьУстройство(ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры);*/
							/*ВыходныеПараметры.Очистить();*/
							/*ВыходныеПараметры.Добавить(999);*/
							/*ВыходныеПараметры.Добавить(НСтр("ru='Ошибка при подключении устройства.
					|Проверьте настройки порта.'"));*/
						}
					}
				}
			}
			return null;
		}
		// Функция осуществляет отключение устройства.
		//
		// Параметры:
		//  ОбъектДрайвера - <*>
		//         - ОбъектДрайвера драйвера торгового оборудования.
		//
		// Возвращаемое значение:
		//  <Булево> - Результат работы функции.
		//

		public object ОтключитьУстройство(/*ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры*/)
		{
			/*Результат = Истина;*/
			/*ВыходныеПараметры = Новый Массив();*/
			/*ОбъектДрайвера.УстройствоВключено = 0;*/
			/*ОбъектДрайвера.Освободить();*/
			/*ОбъектДрайвера.Отсоединить();*/
			return null;
		}
		// Функция получает, обрабатывает и перенаправляет на исполнение команду к драйверу
		//

		public object ВыполнитьКоманду(/*Команда, ВходныеПараметры = Неопределено, ВыходныеПараметры = Неопределено,
                         ОбъектДрайвера, Параметры, ПараметрыПодключения*/)
		{
			/*Результат = Истина;*/
			/*ВыходныеПараметры = Новый Массив();*/
			/*// Обработка события от устройства
*/
			if(true/*Команда = "ОбработатьСобытие"*/)
			{
				/*Событие = ВходныеПараметры[0];*/
				/*Данные  = ВходныеПараметры[1];*/
				/*Результат = ОбработатьСобытие(ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры);*/
				/*// Завершение обработки события от устройства
*/
			}
			return null;
		}
		///////////////////////////////////////////////////////////////////////////////
		// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
		// Функция осуществляет обработку внешних событий торгового оборудования.
		//

		public object ОбработатьСобытие(/*ОбъектДрайвера, Параметры, ПараметрыПодключения, Событие, Данные, ВыходныеПараметры*/)
		{
			/*Результат = Истина;*/
			/*ШК        = СокрЛП(Данные);*/
			/*ОбъектДрайвера.ПосылкаДанных = 0;*/
			if(true/*Параметры.Префикс <> 0*/)
			{
				if(true/*Параметры.Префикс = КодСимвола(Лев(ШК, 1))*/)
				{
					/*ШК = Сред(ШК, 2);*/
				}
			}
			/*ВыходныеПараметры.Добавить("ScanData");*/
			/*ВыходныеПараметры.Добавить(Новый Массив());*/
			/*ВыходныеПараметры[1].Добавить(ШК);*/
			/*ВыходныеПараметры[1].Добавить(Новый Массив());*/
			/*ВыходныеПараметры[1][1].Добавить(Данные);*/
			/*ВыходныеПараметры[1][1].Добавить(ШК);*/
			/*ВыходныеПараметры[1][1].Добавить(0);*/
			return null;
		}
		// Процедура вызывается, когда система готова принять следующее событие от устройства.

		public object ЗавершитьОбработкуСобытия(/*ОбъектДрайвера, Параметры, ПараметрыПодключения,
                                  РезультатОбработкиСобытия, ВыходныеПараметры*/)
		{
			/*Результат = Истина;*/
			/*ОбъектДрайвера.ПосылкаДанных = 1;*/
			return null;
		}
		// Осуществляется открытие формы проверки параметров драйвера

		public object ТестУстройства(/*ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры*/)
		{
			/*Результат = Истина;*/
			/*ОбъектДрайвера.Скорость  = Параметры.Скорость;*/
			/*ОбъектДрайвера.БитДанных = Параметры.БитДанных;*/
			/*ОбъектДрайвера.СтопБит   = Параметры.СтопБит;*/
			/*ОбъектДрайвера.ТестУстройства();*/
			return null;
		}
		// Осуществляется открытие формы настройки параметров журналирования драйвера

		public object ПараметрыЖурналирования(/*ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры*/)
		{
			/*Результат = Истина;*/
			/*ОбъектДрайвера.Скорость  = Параметры.Скорость;*/
			/*ОбъектДрайвера.БитДанных = Параметры.БитДанных;*/
			/*ОбъектДрайвера.СтопБит   = Параметры.СтопБит;*/
			/*ОбъектДрайвера.ПараметрыЖурналирования();*/
			return null;
		}
		// Функция возвращает версию установленного драйвера
		//

		public object ПолучитьВерсиюДрайвера(/*ОбъектДрайвера, Параметры, ПараметрыПодключения, ВыходныеПараметры*/)
		{
			/*Результат = Истина;*/
			/*ВыходныеПараметры.Добавить(НСтр("ru='Установлен'"));*/
			/*ВыходныеПараметры.Добавить(НСтр("ru='Не определена'"));*/
			/*Попытка
		ВыходныеПараметры[1] = ОбъектДрайвера.ПолучитьНомерВерсии();*/
			/*Исключение
	КонецПопытки;*/
			return null;
		}
	}
}

