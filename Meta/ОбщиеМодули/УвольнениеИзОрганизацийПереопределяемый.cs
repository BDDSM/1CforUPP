using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class УвольнениеИзОрганизацийПереопределяемый
	{
		////////////////////////////////////////////////////////////////////////////////
		// Вспомогательные процедуры, функции
		////////////////////////////////////////////////////////////////////////////////
		// Процедуры, функции объекта

		public void ДополнитьСтруктуруПечатныхФорм(/*СтруктураПечатныхФорм, ДокументОбъект*/)
		{
			//УвольнениеИзОрганизацийДополнительный.ДополнитьСтруктуруПечатныхФорм(СтруктураПечатныхФорм, ДокументОбъект);
		}

		public object ПечатьДополнительныхФорм(/*ИмяМакета, Объект*/)
		{
			return null;
		}

		public void ОбработкаЗаполненияДополнительно(/*ТипОснования, ЭтотОбъект, Основание*/)
		{
			if(true/*ТипОснования = Тип("ДокументСсылка.Увольнение")*/)
			{
				/*// Заполним реквизиты из стандартного набора.
*/
				//ЗаполнениеДокументов.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, Основание);
				if(true/*Основание.Проведен*/)
				{
					//ТекущийПользователь = глЗначениеПеременной("глТекущийПользователь");
					//ЭтотОбъект.РаботникиОрганизации.Загрузить(УвольнениеИзОрганизацийДополнительный.СформироватьЗапросОбработкаЗаполненияПоДокументамУвольнение(ЭтотОбъект, Основание).Выгрузить());
				}
			}
		}

		public void ПроверитьЗаполнениеСтрокиРаботникаОрганизацииДополнительно(/*ВыборкаПоСтрокамДокумента, СтрокаНачалаСообщенияОбОшибке, Отказ, Заголовок*/)
		{
			/*// В этой конфигурации дополнительных действий не предусмотрено
*/
		}
		// Возвращает текст поля запроса
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   строка
		//

		public object ДополнительноеПолеОписанияСотрудника(/**/)
		{
			return null;
		}
		// ПолучитьПоле()

		public void ДобавитьДополнительныеДвижения(/*ДокументОбъект, Отказ, Заголовок*/)
		{
			//УвольнениеИзОрганизацийДополнительный.ДобавитьДополнительныеДвижения(ДокументОбъект, Отказ, Заголовок);
		}
		////////////////////////////////////////////////////////////////////////////////
		// Процедуры, функции для работы формы документа

		public void ДополнительноУточнитьДниКомпенсации(/*СтрокаДанных, СведенияОСотруднике*/)
		{
			/*// В этой конфигурации дополнительных действий не предусмотрено
*/
		}

		public void ДополнитьКнопкиКоманднойПанели(/*КоманднаяПанель, Действие*/)
		{
			//ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
			if(true/*ИспользоватьУправленческийУчетЗарплаты*/)
			{
				//КнопкаЗаполнитьУволенными = КоманднаяПанель.Кнопки.Добавить("ЗаполнитьУволенными", ТипКнопкиКоманднойПанели.Действие, "Уволенными по предприятию", Действие);
				//КнопкаЗаполнитьУволенными.Подсказка = "Заполнить уволенными";
			}
		}

		public void ВыполнитьДополнительныеДействия(/*ДокументОбъект, ФормаДокумента*/)
		{
			//УвольнениеИзОрганизацийДополнительный.ЗаполнитьТабличнуюЧастьРаботникиОрганизацииУволенные(ДокументОбъект, ФормаДокумента);
		}

		public void УточнитьОформлениеСтрокиСотрудника(/*ОформлениеСтроки, СведенияОСотруднике*/)
		{
			/*// В этой конфигурации дополнительных действий не предусмотрено
*/
		}

		public void ФормаДокументаПередОткрытиемДополнительно(/*Форма*/)
		{
			//УвольнениеИзОрганизацийДополнительный.ФормаДокументаПередОткрытиемДополнительно(Форма);
		}
	}
}

