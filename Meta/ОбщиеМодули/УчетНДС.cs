using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class УчетНДС
	{
		// Для переданного в качестве параметра счета-факутры выданного, получает для него
		// ключевые сведения: Контрагент, Договор, Сумма и др., которые содержатся в
		// документе основнии.
		//
		// Параметры:
		//  СчетФактура  - счет-фактура для которого нужно определить параметры
		//  Результат - структура в которой возвращаются значения параметров
		//

		public void ПолучитьПараметрыСчетаФактуры(/*СчетФактура, мВалютаРегламентированногоУчета, Результат*/)
		{
			/*Результат = Новый Структура("Организация, Контрагент, Договор, СуммаДокумента, ВалютаДокумента, 
		|СуммаУвеличение, СуммаУменьшение, СуммаНДСУвеличение, СуммаНДСУменьшение, СуммаНДСДокумента, СчетФактураБезНДС,
		|БланкСтрогойОтчетности");*/
			/*Результат.СуммаДокумента = 0;*/
			/*Результат.СуммаНДСДокумента = 0;*/
			/*Результат.СуммаУвеличение = 0;*/
			/*Результат.СуммаНДСУвеличение = 0;*/
			/*Результат.СуммаУменьшение = 0;*/
			/*Результат.СуммаНДСУменьшение = 0;*/
			/*Результат.СчетФактураБезНДС = 0;*/
			if(true/*ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураПолученный")
		ИЛИ ТипЗнч(СчетФактура)= Тип("ДокументСсылка.СчетФактураВыданный")*/)
			{
				/*Ссылка = СчетФактура;*/
			}
			/*ЭтоПолученныйСФ = Ложь;*/
			if(true/*ТипЗнч(Ссылка) = Тип("ДокументСсылка.СчетФактураПолученный")*/)
			{
				/*ЭтоПолученныйСФ = Истина;*/
				if(true/*СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс 
			И СчетФактура.ДокументыОснования.Количество() > 0
			И ТипЗнч(СчетФактура.ДокументыОснования[0].ДокументОснование) = Тип("ДокументСсылка.КорректировкаДолга")*/)
				{
					/*// Реквизиты заново не определяются, получаются из счета-фактуры
*/
					/*Результат.Вставить("Организация"	, СчетФактура.Организация);*/
					/*Результат.Вставить("Контрагент"		, СчетФактура.Контрагент);*/
					/*Результат.Вставить("Договор"		, СчетФактура.ДоговорКонтрагента);*/
					/*Результат.Вставить("ВалютаДокумента", СчетФактура.ВалютаДокумента);*/
					/*Результат.Вставить("СуммаДокумента"	, СчетФактура.СуммаДокумента);*/
				}
			}
			/*ДокументыОснования = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СчетФактура.ДокументыОснования.ВыгрузитьКолонку("ДокументОснование"), Истина);*/
			/*ТипыОснований = Новый Соответствие();*/
			if(true/*ТипыОснований.Количество() = 0*/)
			{
				/*// ТЧ оснований не заполнена, параметры определить нельзя
*/
			}
			/*Запрос = Новый Запрос;*/
			/*Запрос.УстановитьПараметр("ТекущийДокумент", Ссылка);*/
			/*Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", мВалютаРегламентированногоУчета);*/
			if(true/*ПустаяСтрока(Запрос.Текст)*/)
			{
			}
		}
		// ПолучитьПараметрыСчетаФактуры()

		public object ПолучитьТекстЗапросаОпределенияПараметровСФ(/*ДокументыОснования, ЭтоПолученныйСФ, ПараметрыЗапроса, ИмяВременнойТаблицы = ""*/)
		{
			/*ИгнорироватьТЧ = Новый Массив;*/
			/*ИгнорироватьТЧ.Добавить("ВозвратнаяТара");*/
			/*ИгнорироватьТЧ.Добавить("ВыданныеАвансы");*/
			/*ИгнорироватьТЧ.Добавить("ДенежныеСредства");*/
			/*ИгнорироватьТЧ.Добавить("ПрочиеЗатраты");*/
			/*ИгнорироватьТЧ.Добавить("РаспределениеПрочихЗатрат");*/
			/*ИгнорироватьТЧ.Добавить("ИспользованныеМатериалы");*/
			/*МетаданныеДокумента = ДокументыОснования[0].Метаданные();*/
			/*ТипДокументаОснования = ТипЗнч(ДокументыОснования[0]);*/
			/*ИмяОбъекта = МетаданныеДокумента.Имя;*/
			/*ПараметрыЗапроса.Вставить("ДокументОснование_" + ИмяОбъекта, ДокументыОснования);*/
			/*ПостфиксСумм = "";*/
			/*Множитель = 1;*/
			/*ИмяРеквизитаСтавкаНДС = "СтавкаНДС";*/
			if(true/*ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомитентуОПродажах")
		ИЛИ ТипДокументаОснования = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") И ЭтоПолученныйСФ*/)
			{
				/*ПостфиксСумм = "Вознаграждения";*/
				/*ИмяРеквизитаСтавкаНДС = "Ссылка.СтавкаНДСВознаграждения";*/
			}
			/*ПараметрыЗапроса.Вставить("Множитель_" + ИмяОбъекта, Множитель);*/
			/*ТекстЗапроса = "";*/
			/*ТекстСекцииПоместить = "";*/
			if(true/*НЕ ЗначениеЗаполнено(ТекстЗапроса)*/)
			{
				/*// в документе не оказалось табличных частей
*/
				if(true/*МетаданныеДокумента.Реквизиты.Найти("СуммаНДС") <> Неопределено*/)
				{
					/*ТекстЗапроса = 
			"ВЫБРАТЬ
			|	ДокОснование.Организация КАК Организация,
			|	ДокОснование.Контрагент КАК Контрагент,
			|	ДокОснование.ДоговорКонтрагента КАК Договор,
			|	СУММА(ДокОснование.Сумма + ВЫБОР
			|			КОГДА ДокОснование.Ссылка.СуммаВключаетНДС
			|				ТОГДА 0
			|			ИНАЧЕ ДокОснование.СуммаНДС
			|		КОНЕЦ) КАК СуммаДокумента,
			|	&ВалютаРегламентированногоУчета КАК ВалютаДокумента,
			|	ДокОснование.СуммаНДС КАК СуммаНДСДокумента,
			|	ВЫБОР
			|		КОГДА ДокОснование.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ КАК ЕстьНДС,
			|	ЛОЖЬ КАК БланкСтрогойОтчетности
			|ИЗ
			|	Документ." + МетаданныеДокумента.Имя + " КАК ДокОснование
			|ГДЕ
			|	ДокОснование.Ссылка В (&ДокументОснование_" + МетаданныеДокумента.Имя + ")
			|
			|СГРУППИРОВАТЬ ПО
			|	ДокОснование.Ссылка,
			|	ДокОснование.ДоговорКонтрагента,
			|	ДокОснование.СуммаНДС,
			|	ДокОснование.Организация,
			|	ДокОснование.Контрагент,
			|	ВЫБОР
			|		КОГДА ДокОснование.СтавкаНДС = ЗНАЧЕНИЕ(Перечисление.СтавкиНДС.БезНДС)
			|			ТОГДА 0
			|		ИНАЧЕ 1
			|	КОНЕЦ";*/
				}
			}
			return null;
		}
		//Функция определения вида ценности по группе критериев
		//

		public object ОпределитьВидЦенности(/*Объект, СчетУчета, ЭтоДопРасходы = Ложь, ЭтоТаможенныйНДС = Ложь, ЭтоАгентскийНДС = Ложь, ВидАгентскогоДоговора = "", ЭтоУслуга = Неопределено, СтруктураШапкиДокумента = Неопределено, СпособСтроительства = Неопределено, ВидыЦенностейПоСчетамУчета = Неопределено*/)
		{
			/*ВидЦенности = Перечисления.ВидыЦенностей.ПустаяСсылка();*/
			/*ДатаДокумента = ?(СтруктураШапкиДокумента = Неопределено, '00010101', СтруктураШапкиДокумента.Дата);*/
			if(true/*ЭтоТаможенныйНДС*/)
			{
				if(true/*ВидыЦенностейПоСчетамУчета = Неопределено*/)
				{
					/*ВидыЦенностейПоСчетамУчета = Новый Соответствие;*/
				}
				/*СчетаУчетаЦенностей = ВидыЦенностейПоСчетамУчета["ОС"];*/
				if(true/*СчетаУчетаЦенностей = Неопределено*/)
				{
					/*СчетаУчетаЦенностей = ОпределитьСчетаУчетаЦенностей("ОС", ДатаДокумента);*/
					/*ВидыЦенностейПоСчетамУчета.Вставить("ОС", СчетаУчетаЦенностей);*/
				}
				if(true/*СтруктураШапкиДокумента.Дата >= '20060101' 
			И Не СчетаУчетаЦенностей.НайтиПоЗначению(СчетУчета) = Неопределено*/)
				{
					/*ВидЦенности = Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС;*/
				}
			}
			return null;
		}
		// ОпределитьВидЦенности()
		// Функция определяет объект учета (ценность) в строке табличной части.
		// Сама табличная часть задается в параметре ТаблицаЗначений. В результате
		// анализа этой табличной части определяется из какой именно колонки нужно
		// взять объект учета.

		public object ОпределитьЦенностьИзСтрокиТабличнойЧасти(/*СтрокаТаблицы, ТаблицаЗначений*/)
		{
			/*Ценность = "";*/
			if(true/*ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено*/)
			{
				/*Ценность = СтрокаТаблицы.Номенклатура;*/
			}
			return null;
		}
		// ОпределитьЦенностьИзСтрокиТабличнойЧасти()
		// Процедура арифметически распределяет заданную сумму
		// по столбцу таблицы значений пропрционально колонке базы распределения
		// при этом размерность таблицы и базы распределения должны совпадать.
		// Как правило база распределения - просто одна из колонок таблицы

		public void РаспределитьСуммуПоСтолбцу(/*МассивБазыРаспределения, РаспределяемаяСумма, ТаблицаРезультата, ИдКолонкиРезультата*/)
		{
			/*// Определяем сумму базы
*/
			/*СуммаБазы = 0;*/
			if(true/*СуммаБазы > 0*/)
			{
				/*// Выполняем распределение
*/
				/*УчтеноБазыРаспределения = 0;*/
				/*УжеРаспределено = 0;*/
			}
		}
		// РаспределитьСуммуПоСтолбцу()
		// Процедура подготовки таблицы значений для целей формирования движений
		// по подсистеме НДС. Доопределяет дополнительные колонки "ВидЦенности" и "Ценность"
		// в таблице значений, переданной в качестве параметра

		public void ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС(/*СтруктураШапкиДокумента, ТаблицаЗначений*/)
		{
			/*ВидыЦенностейПоСчетамУчета = Неопределено;*/
			/*ЕстьКолонкаУслуга 				= ТаблицаЗначений.Колонки.Найти("Услуга") <> Неопределено;*/
			/*ЕстьКолонкаСчетУчетаБУ 			= ТаблицаЗначений.Колонки.Найти("СчетУчетаБУ") <> Неопределено;*/
			/*ЕстьКолонкаСчетУчета 			= ТаблицаЗначений.Колонки.Найти("СчетУчета") <> Неопределено;*/
			/*ЕстьКолонкаСчетЗатрат 			= ТаблицаЗначений.Колонки.Найти("СчетЗатрат") <> Неопределено;*/
			/*ЕстьКолонкаСубконто1 			= ТаблицаЗначений.Колонки.Найти("Субконто1") <> Неопределено;*/
			/*ЕстьКолонкаНоменклатура 		= ТаблицаЗначений.Колонки.Найти("Номенклатура") <> Неопределено;*/
			/*ЕстьКолонкаОсновноеСредство 	= ТаблицаЗначений.Колонки.Найти("ОсновноеСредство") <> Неопределено;*/
			/*ЕстьКолонкаНематериальныйАктив 	= ТаблицаЗначений.Колонки.Найти("НематериальныйАктив") <> Неопределено;*/
			/*ЕстьСпособСтроительства 		= ТаблицаЗначений.Колонки.Найти("СпособСтроительства") <> Неопределено;*/
			/*ЕстьСчетУчетаНДС 				= ТаблицаЗначений.Колонки.Найти("СчетУчетаНДС") <> Неопределено;*/
		}
		// ОпределениеДополнительныхПараметровТаблицыПартийДляПодсистемыУчетаНДС()
		// Процедура вызывается по кнопке "Рассчитать" из формы диалога документа.
		// Выполняется расчет объемов реализации в текущем периоде по данным
		// регистра НДСНачисленный в разрезе различных ставок НДС.
		//

		public void РассчитатьВыручкуДляНДС(/*Организация, НачалоПериода, КонецПериода, ВыручкаЕНВД, ВыручкаБезНДС, ВыручкаНДС0, ВыручкаНДС*/)
		{
			/*ВыручкаЕНВД   = 0;*/
			/*ВыручкаБезНДС = 0;*/
			/*ВыручкаНДС0   = 0;*/
			/*ВыручкаНДС    = 0;*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.УстановитьПараметр("Организация", Организация);*/
			/*Запрос.УстановитьПараметр("НачалоПериода", НачалоМесяца(НачалоПериода));*/
			/*Запрос.УстановитьПараметр("КонецПериода", КонецМесяца(КонецПериода));*/
			/*ВидыНачисленияРеализация = Новый СписокЗначений;*/
			/*ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияСНДС);*/
			/*ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияБезНДС);*/
			/*ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.Реализация0);*/
			/*ВидыНачисленияРеализация.Добавить(Перечисления.НДСВидНачисления.РеализацияЕНВД);*/
			/*Запрос.УстановитьПараметр("ВидыНачисленияРеализация", ВидыНачисленияРеализация);*/
			/*Запрос.Текст = "ВЫБРАТЬ
	               |	НДСНачисленныйОбороты.ВидНачисления,
	               |	СУММА(НДСНачисленныйОбороты.СуммаБезНДСПриход) КАК СуммаБезНДС
	               |ИЗ
	               |	РегистрНакопления.НДСНачисленный.Обороты(
	               |		НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ),
	               |		КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ),
	               |		,
	               |		Организация = &Организация
	               |		    И (СчетФактура.Дата МЕЖДУ НАЧАЛОПЕРИОДА(&НачалоПериода, ДЕНЬ) И КОНЕЦПЕРИОДА(&КонецПериода, ДЕНЬ))
	               |		    И ВидНачисления В (&ВидыНачисленияРеализация)) КАК НДСНачисленныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	НДСНачисленныйОбороты.ВидНачисления";*/
			/*ТаблицаРезультата = Запрос.Выполнить().Выгрузить();*/
		}
		// РассчитатьВыручкуДляНДС()
		// Функция определяет наличие счетов-фактур, полученных по документам,
		// которые могут являться основаниями для ввода счетов-фактур полученных.
		//
		// Применяется для контроля за наличием в ИБ информации о наличии счетов-
		// фактур.
		//
		// Параметры:
		//  НачПериода       - Дата - Начальная дата выборки (включительно, с 00:00:00)
		//  КонПериода       - Дата - Конечная дата выборки (включительно, по 23:59:59)
		//  Организация      - Справочник.Ссылка - Организация, по которой
		//                     осуществляется отбор. Необязательный параметр. Если не
		//                     задан, отбор осуществляется по всем организациям.
		//  Фильтр           - Документ.Ссылка, Массив - Документ или список документов,
		//                     по которым осуществляется отбор. Необязательный параметр.
		//                     Если не задан, отбор осуществляется по всем документам,
		//                     которые могут являться основаниями для ввода счетов-фактур
		//                     полученных.
		//  ВсеКромеФильтра  - Булево - Признак отбора документов, не входящих в Фильтр.
		//                     Необязательный параметр. Значение по умолчаню - Ложь.
		//                     Если не задан, отбираются документы, заданные в Фильтре.
		//  НаличиеСчетаФактуры - Булево - Признак отбора документов:
		//                        Истина - Отбирать документы, по которым существуют
		//                        счета-фактуры.
		//                        Ложь - Отбирать документы, по которым счета-фактуры
		//                        отсутствуют.
		//                        Необязательный параметр. Если не задан, осуществляется
		//                        отбор всех документов.
		// СчетФактураПроведен - Булево - Признак отбора счетов-фактур:
		//                        Истина - Отбирать проведенные счета-фактуры
		//                        Ложь - Отбирать непроведенные счета-фактуры
		//                        Необязательный параметр. Если не задан, осуществляется
		//                        отбор всех счетов-фактур.
		// ФильтроватьКорректировкуРеализации - Булево - Признак отбора счетов-фактур
		//                        Истина - Отбирать все счета-фактуры, кроме тех, у которых основание "Корректировка реализации"
		//                        Ложь   - Отбирать все счета-фактуры, в т.ч. и те, у которых основание "Корректировка реализации"
		//                        Необязательный параметр. Если не задан, осуществляется
		//                        отбор всех счетов-фактур.
		//
		// Возвращаемое значение:
		//  ТаблицаЗначений - Таблица значений - Состав колонок:
		//                    Документ - Документ.Ссылка - Документ, по которому
		//                               производился поиск счета-фактуры полученного
		//                    СчетФактура - Документ.Ссылка - Ссылка на счет-
		//                                  фактуру полученный, либо Неопределено
		//

		public object ОпределитьНаличиеСчетовФактурПолученных(/*
		НачПериода = Неопределено,
		КонПериода = Неопределено,
		Организация,
		Фильтр = Неопределено,
		ВсеКромеФильтра = Ложь,
		НаличиеСчетаФактуры = Неопределено,
		СчетФактураПроведен = Неопределено,
		ДатаСФНеБолее = Неопределено,
		ФильтроватьКорректировкуРеализации = Ложь*/)
		{
			/*Запрос = Новый Запрос();*/
			/*Запрос.УстановитьПараметр("НачПериода",  НачПериода);*/
			/*Запрос.УстановитьПараметр("КонПериода",  ?(НЕ ЗначениеЗаполнено(КонПериода),'00010101',КонецДня(КонПериода)));*/
			/*Запрос.УстановитьПараметр("ДатаСФНеБолее",  ?(НЕ ЗначениеЗаполнено(ДатаСФНеБолее),Неопределено,КонецДня(ДатаСФНеБолее)));*/
			/*Запрос.УстановитьПараметр("Организация", Организация);*/
			/*Запрос.УстановитьПараметр("Фильтр",      Фильтр);*/
			/*// Дополняем условие запроса отбором по периоду
*/
			if(true/*(ЗначениеЗаполнено(НачПериода)) И (ЗначениеЗаполнено(КонПериода))*/)
			{
				/*Условие_Основание = "СчетФактура.Дата МЕЖДУ &НачПериода И &КонПериода
		                 |";*/
			}
			/*// Дополняем условие запроса отбором по организации
*/
			/*Условие_Основание = Условие_Основание 
	               + ?(НЕ ЗначениеЗаполнено(Организация), "", ?(НЕ ЗначениеЗаполнено(Условие_Основание), "", " И ") + "Организация = &Организация ");*/
			/*// Дополняем условие запроса отбором по документу-основанию или списку документов-оснований
*/
			/*Условие_Основание = Условие_Основание
	               + ?(НЕ ЗначениеЗаполнено(Фильтр), "", ?(НЕ ЗначениеЗаполнено(Условие_Основание), "", " И ") + "СчетФактура " + ?(ВсеКромеФильтра, " НЕ ", "") + " В (&Фильтр) ");*/
			/*// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
*/
			/*УсловиеЗапроса = ?(НаличиеСчетаФактуры = Неопределено, "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + ?(НаличиеСчетаФактуры, "НЕ (", "(") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ТОГДА НДСПредъявленныйОбороты.СчетФактура
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Ссылка
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
					|	КОНЕЦ ЕСТЬ NULL) ");*/
			/*// Дополняем условие запроса отбором по признаку проведения счета-фактуры
*/
			/*УсловиеЗапроса = УсловиеЗапроса
	               + ?(СчетФактураПроведен = Неопределено, "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ТОГДА СчетФактураВыданный.Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Проведен
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Проведен
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Проведен, СчетФактураВыданный.Проведен)
					|	КОНЕЦ = " + ?(СчетФактураПроведен, "ИСТИНА", "ЛОЖЬ") + " ");*/
			/*// Дополняем условие запроса отбором по дате СФ	
*/
			/*УсловиеЗапроса = УсловиеЗапроса
	               + ?(НЕ ЗначениеЗаполнено(ДатаСФНеБолее), "", ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
					|			ТОГДА СчетФактураВыданный.Дата
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Дата
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
					|			ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Дата
					|		КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
					|			ТОГДА СчетФактураПолученный.Дата
					|		ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Дата, СчетФактураВыданный.Дата)
					|	КОНЕЦ <= &ДатаСФНеБолее ");*/
			/*// Дополняем условие запроса отбором по признаку наличия/отсутствия счета-фактуры
*/
			/*УсловиеЗапроса = УсловиеЗапроса + ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", " И ") + "
					|	ВЫБОР
					|		КОГДА " + ?(ФильтроватьКорректировкуРеализации, "НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.КорректировкаРеализации
					|			ИЛИ ", "") + "НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ПоступлениеТоваровУслуг
					|			И НДСПредъявленныйОбороты.ДоговорКонтрагента.УчетАгентскогоНДС
					|			И НДСПредъявленныйОбороты.ДоговорКонтрагента.НалоговыйАгентПоОплате
					|			ТОГДА ЛОЖЬ
					|		ИНАЧЕ ИСТИНА
					|	КОНЕЦ";*/
			/*// Дополняем условие запроса ключевым словом "ГДЕ"
*/
			/*УсловиеЗапроса = ?(НЕ ЗначениеЗаполнено(УсловиеЗапроса), "", "ГДЕ " + УсловиеЗапроса);*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Дата,
	|	СчетФактураПолученный.Проведен,
	|	СчетФактураПолученный.Ссылка КАК ДокументОснование
	|
	|ПОМЕСТИТЬ ВТ_СчетФактурыПолученные
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|	
	|" + ?(ЗначениеЗаполнено(Организация), "ГДЕ Организация = &Организация", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка,
	|	СчетФактураПолученный.Ссылка.Дата КАК Дата,
	|	СчетФактураПолученный.Ссылка.Проведен КАК Проведен,
	|	СчетФактураПолученный.ДокументОснование КАК ДокументОснование
	|ИЗ
	|	Документ.СчетФактураПолученный.ДокументыОснования КАК СчетФактураПолученный
	|
	|" + ?(ЗначениеЗаполнено(Организация), "ГДЕ Ссылка.Организация = &Организация", "") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Дата,
	|	СчетФактураВыданный.Проведен,
	|	СчетФактураВыданный.Ссылка КАК ДокументОснование
	|
	|ПОМЕСТИТЬ ВТ_СчетФактураВыданный
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|	" + ?(ЗначениеЗаполнено(Организация), "И Организация = &Организация", "") + "
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СчетФактураВыданный.Ссылка,
	|	СчетФактураВыданный.Ссылка.Дата КАК Дата,
	|	СчетФактураВыданный.Ссылка.Проведен КАК Проведен,
	|	СчетФактураВыданный.ДокументОснование
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СчетФактураВыданный
	|ГДЕ
	|	СчетФактураВыданный.Ссылка.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию)
	|	" + ?(ЗначениеЗаполнено(Организация), "И Ссылка.Организация = &Организация", "") + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ДокументОснование
	|;
	|
	|ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.СчетФактура,
	|	НДСПредъявленныйОбороты.ДоговорКонтрагента
	|
	|ПОМЕСТИТЬ ВТ_НДСПредъявленныйОбороты
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(, , Период, 
	|				Организация = &Организация //ДляЗамены
	|		) КАК НДСПредъявленныйОбороты
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	СчетФактура
	|;
	|
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура, НЕОПРЕДЕЛЕНО) КАК Документ,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураПолученный
	|				ТОГДА СчетФактураПолученный.ДокументОснование
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА СчетФактураВыданный.ДокументОснование
	|			ИНАЧЕ НДСПредъявленныйОбороты.СчетФактура
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК ДокументОснование,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|					ИЛИ НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА НДСПредъявленныйОбороты.СчетФактура
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Ссылка, СчетФактураВыданный.Ссылка)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактура,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА СчетФактураВыданный.Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Проведен
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Ссылка.Проведен
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Проведен, СчетФактураВыданный.Проведен)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураПроведен,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.СчетФактураВыданный
	|				ТОГДА СчетФактураВыданный.Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ГТДИмпорт
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ГТДИмпорт).Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетОРозничныхПродажах
	|				ТОГДА ВЫРАЗИТЬ(НДСПредъявленныйОбороты.СчетФактура КАК Документ.ОтчетОРозничныхПродажах).Дата
	|			КОГДА НДСПредъявленныйОбороты.СчетФактура ССЫЛКА Документ.ОтчетКомиссионераОПродажах
	|				ТОГДА СчетФактураПолученный.Дата
	|			ИНАЧЕ ЕСТЬNULL(СчетФактураПолученный.Дата, СчетФактураВыданный.Дата)
	|		КОНЕЦ, НЕОПРЕДЕЛЕНО) КАК СчетФактураДата
	|ИЗ
	|	ВТ_НДСПредъявленныйОбороты КАК НДСПредъявленныйОбороты
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетФактурыПолученные КАК СчетФактураПолученный
	|		ПО НДСПредъявленныйОбороты.СчетФактура = СчетФактураПолученный.ДокументОснование
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СчетФактураВыданный КАК СчетФактураВыданный
	|		ПО НДСПредъявленныйОбороты.СчетФактура = СчетФактураВыданный.ДокументОснование
	|";*/
			/*Запрос.Текст =  Запрос.Текст + УсловиеЗапроса;*/
			/*Запрос.Текст = СтрЗаменить(Запрос.Текст,"Организация = &Организация //ДляЗамены",Условие_Основание);*/
			if(true/*ЗначениеЗаполнено(КонПериода)*/)
			{
				/*Запрос.Текст = СтрЗаменить(Запрос.Текст,", Период","&КонПериода, Период");*/
			}
			/*Запрос.Текст = Запрос.Текст + "
									|УПОРЯДОЧИТЬ ПО
									|	СчетФактураДата";*/
			/*ТаблицаДокументов = Запрос.Выполнить().Выгрузить();*/
			return null;
		}
		// ОпределитьНаличиеСчетовФактурПолученных()

		public object РасчетНДСвРубляхПоСтавкеДокумента(/*ДатаДокумента*/)
		{
			/*ДатаРасчетаПоСтавкеНДС = Константы.ДатаНачалаПересчетаСуммыНДСвРубляхПоДокументамВИностраннойВалютеПоСтавкеНДС.Получить();*/
			return null;
		}
		// Определяет дату начала налогового периода для НДС по учетной политике

		public object ПолучитьНачалоПериодаПоУчетнойПолитике(/*Организация, Дата, Отказ = Ложь, УчетнаяПолитикаНУ = Неопределено*/)
		{
			if(true/*УчетнаяПолитикаНУ = неопределено*/)
			{
				/*УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);*/
				if(true/*НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ)*/)
				{
					/*Отказ = Истина;*/
				}
			}
			if(true/*Отказ*/)
			{
			}
			if(true/*УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал*/)
			{
				/*Результат = НачалоКвартала(Дата);*/
			}
			return null;
		}
		// Определяет дату окончания налогового периода для НДС по учетной политике

		public object ПолучитьКонецПериодаПоУчетнойПолитике(/*Организация, Дата, Отказ = Ложь, УчетнаяПолитикаНУ = Неопределено*/)
		{
			if(true/*УчетнаяПолитикаНУ = неопределено*/)
			{
				/*УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);*/
				if(true/*НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ)*/)
				{
					/*Отказ = Истина;*/
				}
			}
			if(true/*Отказ*/)
			{
			}
			if(true/*УчетнаяПолитикаНУ.НДСНалоговыйПериод = Перечисления.Периодичность.Квартал*/)
			{
				/*Результат = КонецКвартала(Дата);*/
			}
			return null;
		}
		// Функция производит поиск счета-фактуры (полученного или выданного), у которого в качестве документа-основания указана
		// переданная ссылка.
		//
		// Параметры:
		//  ДокументСсылка  - ссылка на документ, для которого надо найти подчиненный документ,
		//  ВидСчетаФактуры - строка, вид документа, по умолчанию "СчетФактураВыданный"
		//  Отбор 			- структура с именами и значениями реквизитов СФ для дополнительного отбора
		//
		// Возвращаемое значение:
		//  Если нашли, то возвращаем ссылку, не нашли - Неопределено
		//

		public object НайтиПодчиненныйСчетФактуру(/*Знач ДокументСсылка, ВидДокумента = "СчетФактураВыданный", Отбор = Неопределено, ИсключитьИзВыборкиСФ = Неопределено, МетаданныеОснования = Неопределено*/)
		{
			if(true/*не ЗначениеЗаполнено(ДокументСсылка)*/)
			{
			}
			/*НайденныйДокумент = Неопределено;*/
			/*Запрос = Новый Запрос;*/
			/*// Установим параметры запроса
*/
			/*Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СФ.Ссылка
	|ПОМЕСТИТЬ ВрмТбл
	|ИЗ
	|	Документ.СчетФактураВыданный.ДокументыОснования КАК СФ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный.Авансы КАК Авансы
	|		ПО СФ.Ссылка = Авансы.Ссылка
	|ГДЕ
	|	СФ.ДокументОснование = &ДокументСсылка";*/
			if(true/*не ВидДокумента = "СчетФактураВыданный"*/)
			{
				/*Запрос.Текст = СтрЗаменитЬ(Запрос.Текст,"СчетФактураВыданный",ВидДокумента);*/
			}
			if(true/*ЗначениеЗаполнено(ИсключитьИзВыборкиСФ)*/)
			{
				/*Запрос.УстановитьПараметр("ИсключитьИзВыборкиСФ", ИсключитьИзВыборкиСФ);*/
				if(true/*ТипЗнч(ИсключитьИзВыборкиСФ) = Тип("Массив")*/)
				{
					/*Запрос.Текст = Запрос.Текст + "
				|	И НЕ СФ.Ссылка В (&ИсключитьИзВыборкиСФ)
				|";*/
				}
			}
			if(true/*не Отбор = Неопределено*/)
			{
			}
			/*Запрос.Текст = Запрос.Текст + ";";*/
			/*Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ Ссылка
	| ИЗ ВрмТбл
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка.ПометкаУдаления,
	|	Ссылка.Проведен УБЫВ,
	|	Ссылка.Дата";*/
			/*ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();*/
			if(true/*ВыборкаИзЗапроса.Следующий()*/)
			{
				/*НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;*/
			}
			return null;
		}
		// НайтиПодчиненныйСчетФактуру()
		//Определяет налоговый период по НДС
		//

		public object ПолучитьУПНДСНалоговыйПериод(/*Организация, Знач Дата, УчетнаяПолитика = Неопределено*/)
		{
			if(true/*Не ЗначениеЗаполнено(Дата)*/)
			{
				/*Дата = ТекущаяДата();*/
			}
			if(true/*Не ЗначениеЗаполнено(Организация)*/)
			{
			}
			if(true/*УчетнаяПолитика <> Неопределено
		и УчетнаяПолитика.Количество() > 0
		И УчетнаяПолитика.Организация = Организация
		И УчетнаяПолитика.Период = НачалоМесяца(Дата)
		И УчетнаяПолитика.Свойство("НДСНалоговыйПериод")*/)
			{
			}
			/*УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);*/
			return null;
		}

		public object ПолучитьУППорядокРегистрацииСчетовФактурНаАванс(/*Организация, Знач Дата, УчетнаяПолитика = Неопределено*/)
		{
			if(true/*Не ЗначениеЗаполнено(Организация)*/)
			{
			}
			if(true/*Не ЗначениеЗаполнено(Дата)*/)
			{
				/*Дата = ТекущаяДата();*/
			}
			if(true/*УчетнаяПолитика <> Неопределено
		и УчетнаяПолитика.Количество() > 0
		И УчетнаяПолитика.Организация = Организация
		И УчетнаяПолитика.Период = НачалоМесяца(Дата)
		И УчетнаяПолитика.Свойство("ПорядокРегистрацииСчетовФактурНаАванс")*/)
			{
			}
			/*ОшибкаВПолучении = Ложь;*/
			/*УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаВПолучении, Организация, "Нал" ,Ложь);*/
			return null;
		}
		// Определяет наличие соглашения с контрагентом, на электронный обмен документами
		//

		public object НаличиеСоглашенияОбменаЭД(/*СсылкаНаВладельца*/)
		{
			if(true/*НЕ ЭлектронныеДокументыСлужебный.ИспользуетсяОбменЭД() 
		ИЛИ НЕ ЗначениеЗаполнено(СсылкаНаВладельца)*/)
			{
			}
			/*ПараметрыЭД = Новый Структура("ВидЭд,НаправлениеЭД,Организация,Контрагент");*/
			/*ЗаполнитьЗначенияСвойств(ПараметрыЭД, СсылкаНаВладельца);*/
			/*ПараметрыЭД.ВидЭД         = Перечисления.ВидыЭД.СчетФактура;*/
			/*ПараметрыЭД.НаправлениеЭД = Перечисления.НаправленияЭД.Исходящий;*/
			/*Результат = ЭлектронныеДокументыСлужебный.ОпределитьНастройкиОбменаЭД(ПараметрыЭД);*/
			return null;
		}
		//////////////////////////////////////////////////////////////////////////
		//Преобразование промежуточных таблиц для НДС
		// Преобразует таблицу значений в дерево значений, группируя значения по колонкам, формирование итога по строкам

		public object ТаблицуЗначенийВДеревоСГруппировкой(/*ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = ""*/)
		{
			/*ДеревоРезультатов  = Новый ДеревоЗначений();*/
			if(true/*ПустаяСтрока(ГруппировочныеКолонки)*/)
			{
			}
			/*ТаблицаГруппировок = ТаблицаРезультатов.Скопировать();*/
			/*ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);*/
			/*ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);*/
			return null;
		}

		public object ОпределитьПартииСписанияПоРегиструНДСПартии(/*СтруктураШапкиДокумента, ТаблицаВыручки,Отказ, Заголовок, ЭтоВозврат = Ложь, ЭтоВозвратОтПокупателя = Ложь, СтруктураПараметров*/)
		{
			/*ВидДокумента = "";*/
			/*СтруктураШапкиДокумента.Свойство("ВидДокумента", ВидДокумента);*/
			/*ВестиСуммовойУчетПоСкладамБУ = УправлениеЗапасамиПартионныйУчет.ВедетсяСуммовойУчетПоСкладам(ПланыСчетов.Хозрасчетный.Товары);*/
			/*ДополнитьСтруктуруШапкиДокументаДляНДС(СтруктураШапкиДокумента, Истина);*/
			/*ПартионныйУчетБУ = ((СтруктураШапкиДокумента.БухгалтерскийУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ФИФО 
					Или СтруктураШапкиДокумента.БухгалтерскийУчетСпособОценкиМПЗ = Перечисления.СпособыОценки.ЛИФО)
					И (Не УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата)));*/
			/*ТаблицаСписанияНДСПоСтрокам = РегистрыНакопления.НДСПартииТоваров.СоздатьНаборЗаписей().Выгрузить();*/
			/*ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ВключитьВСтоимость", Новый ОписаниеТипов("Булево"));*/
			/*ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ИсключитьИзСтоимости", Новый ОписаниеТипов("Булево"));*/
			/*ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ДействияНДСПокупки_ПредположениеСтавки0", Новый ОписаниеТипов("Булево"));*/
			if(true/*СтруктураШапкиДокумента.СложныйУчетНДС 
		И Не СтруктураШапкиДокумента.ПартионныйУчетНДСвРазрезеСерийИХарактеристик*/)
			{
				/*ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("СерияНоменклатуры_Базовая");*/
				/*ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ХарактеристикаНоменклатуры_Базовая");*/
				/*ТаблицаВыручки.Колонки.Добавить("СерияНоменклатуры_Базовая");*/
				/*ТаблицаВыручки.ЗагрузитьКолонку(ТаблицаВыручки.ВыгрузитьКолонку("СерияНоменклатуры"), "СерияНоменклатуры_Базовая");*/
				/*ТаблицаВыручки.Колонки.Добавить("ХарактеристикаНоменклатуры_Базовая");*/
				/*ТаблицаВыручки.ЗагрузитьКолонку(ТаблицаВыручки.ВыгрузитьКолонку("ХарактеристикаНоменклатуры"), "ХарактеристикаНоменклатуры_Базовая");*/
			}
			if(true/*ЭтоВозврат 
		И Не ЭтоВозвратОтПокупателя*/)
			{
				/*ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", Новый ОписаниеТипов("Булево"));*/
			}
			/*ТаблицаВыручки.Колонки.Добавить("НДСВСтоимостиТоваров", Новый ОписаниеТипов("ПеречислениеСсылка.ДействиеНДСВСтоимостиТоваров"));*/
			if(true/*СтруктураШапкиДокумента.Свойство("НДСВСтоимостиТоваров")*/)
			{
				/*ТаблицаВыручки.ЗаполнитьЗначения(СтруктураШапкиДокумента.НДСВСтоимостиТоваров, "НДСВСтоимостиТоваров");*/
			}
			/*ЕстьСтавкаНДС = ТаблицаВыручки.Колонки.Найти("СтавкаНДС") <> Неопределено И Не СтруктураШапкиДокумента.Свойство("НДСВСтоимостиТоваров");*/
			/*ЕстьСкладВТЧ = ТаблицаВыручки.Колонки.Найти("Склад") <> Неопределено;*/
			/*//////////////////////////////////////////////////////////////////////////////////
*/
			/*// Определяем партии к списанию по регистру по ключевым наборам реквизитов.
*/
			/*ТаблицаВыручки.Колонки.Добавить("СписыватьПоПартиямНДС", Новый ОписаниеТипов("Булево"));*/
			/*ВыданоСообщениеБезНДС = Ложь;*/
			/*ВыданоСообщение0 = Ложь;*/
			/*КолвоЭлементовКоллекции = ТаблицаВыручки.Количество();*/
			if(true/*ТаблицаВыручки.Количество() = 0*/)
			{
				/*//Возвращаем пустую таблицу списаний. Все прошло удачно, но движения по партиям не требуются.
*/
			}
			if(true/*ТаблицаВыручки.Колонки.Найти("Склад") = Неопределено*/)
			{
				/*ТаблицаВыручки.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));*/
			}
			if(true/*ТаблицаВыручки.Колонки.Найти("КоличествоПоступление") = Неопределено*/)
			{
				/*ТаблицаВыручки.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
				/*ТаблицаВыручки.ЗаполнитьЗначения(0, "КоличествоПоступление");*/
			}
			/*Запрос = Новый Запрос;*/
			if(true/*Не ЭтоВозвратОтПокупателя*/)
			{
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПартииТоваровОстатки.Склад КАК Склад,
		|	НДСПартииТоваровОстатки.СчетУчета КАК СчетУчета,
		|	НДСПартииТоваровОстатки.Номенклатура КАК Номенклатура,
		|	НДСПартииТоваровОстатки.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		|	НДСПартииТоваровОстатки.СерияНоменклатуры КАК СерияНоменклатуры,
		|	НДСПартииТоваровОстатки.Партия.Дата КАК ДатаПартии,
		|	НДСПартииТоваровОстатки.Партия КАК Партия,
		|	НДСПартииТоваровОстатки.Заказ КАК Заказ,
		|	НДСПартииТоваровОстатки.СчетФактура.Дата КАК ДатаСФ,
		|	НДСПартииТоваровОстатки.СчетФактура КАК СчетФактура,
		|	НДСПартииТоваровОстатки.НДСВключенВСтоимость,
		|	НДСПартииТоваровОстатки.КоличествоОстаток,
		|	НДСПартииТоваровОстатки.СтоимостьОстаток,
		|	НДСПартииТоваровОстатки.НДСОстаток,
		|	ВЫБОР
		|		КОГДА НДСПартииТоваровОстатки.КоличествоОстаток > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьКоличество,
		|	НДСПартииТоваровОстатки.ВидЦенности,
		|	НДСПартииТоваровОстатки.СчетУчетаНДС,
		|	НДСПартииТоваровОстатки.СтавкаНДС
		|ИЗ
		|	РегистрНакопления.НДСПартииТоваров.Остатки(
		|			&МоментСписания,
		|			Организация = &Организация
		|				И СчетУчета В (&СписокСчетовУчета)
		|				И Номенклатура В (&СписокНоменклатуры)
		|				И Склад В (&СписокСкладов)) КАК НДСПартииТоваровОстатки
		|ГДЕ
		|	(НЕ НДСПартииТоваровОстатки.СтоимостьОстаток < 0)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаПартии,
		|	ДатаСФ";*/
				/*СписокСкладов = Новый Массив;*/
				if(true/*СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя" 
			И СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером*/)
				{
					/*// Не производится отбор по складу. При передаче на комиссию в партионном учете склад не указывается.
*/
				}
				/*СписокСкладов.Добавить(Справочники.Склады.ПустаяСсылка());*/
				/*Запрос.УстановитьПараметр("СписокСкладов", СписокСкладов);*/
				if(true/*ПартионныйУчетБУ*/)
				{
					/*Запрос.УстановитьПараметр("ОтборПоПартиямБУ", ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.ВыгрузитьКолонку("Партия")));*/
					/*Запрос.Текст = СтрЗаменить(Запрос.Текст,"Номенклатура В (&СписокНоменклатуры)","Номенклатура В (&СписокНоменклатуры) " +символы.ПС+
													"И Партия В (&ОтборПоПартиямБУ)");*/
				}
			}
			/*Запрос.УстановитьПараметр("МоментСписания", 		Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая));*/
			/*Запрос.УстановитьПараметр("Организация", 			СтруктураШапкидокумента.Организация);*/
			/*Запрос.УстановитьПараметр("СписокСчетовУчета", 		ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.выгрузитьКолонку("СчетУчетаБУ")));*/
			/*Запрос.УстановитьПараметр("СписокНоменклатуры", 	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаВыручки.выгрузитьКолонку("Номенклатура")));*/
			/*ТаблицаПартий = Запрос.Выполнить().Выгрузить();*/
			/*СортироватьПоУказанномуДокументуПриВозврате = ЭтоВозврат и не ЭтоВозвратОтПокупателя;*/
			if(true/*СортироватьПоУказанномуДокументуПриВозврате*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("ПартияСовпадаетСУказаннымДокументомДляВозврата", новый описаниеТипов("Булево"));*/
			}
			/*ОбособленныйУчетТоваровПоЗаказамПокупателейВСтроке = ТаблицаВыручки.Колонки.Найти("ОбособленныйУчетТоваровПоЗаказамПокупателей") <> Неопределено;*/
			/*ЕстьКолонка_ЗаказПартии =  ТаблицаВыручки.Колонки.Найти("ЗаказПартии") <> Неопределено;*/
			/*ТаблицаВыручки.Колонки.Добавить("НДСЭтоЕНВД", Новый ОписаниеТипов("Булево"));*/
			/*ЕстьКолонкаСчетДоходовБУ = ТаблицаВыручки.Колонки.Найти("СчетДоходовБУ") <> Неопределено;*/
			/*ЕстьСчетДоходовБУ 		 = СтруктураШапкиДокумента.Свойство("СчетДоходовБУ");*/
			/*ТаблицаСписанияНДСПоСтрокам.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация,"Организация");*/
			if(true/*ТаблицаСписанияНДСПоСтрокам.Колонки.Найти("QuieryId") = Неопределено*/)
			{
				/*ТаблицаСписанияНДСПоСтрокам.Колонки.Добавить("QuieryId");*/
			}
			if(true/*ЭтоВозвратОтПокупателя*/)
			{
				/*ТаблицаСписанияНДСПоСтрокам.ЗаполнитьЗначения(Неопределено,"Заказ");*/
			}
			/*СтруктураПараметров.Вставить("СоответствиеКодовОперацийСтрокамНДСПартий", Новый Соответствие);*/
			/*QuieryId = 0;*/
			return null;
		}
		/////////////////////
		// СЛУЖЕБНЫЕ ФУНКЦИИ
		//Преименование колонок таблицы значений по данным соответствия

		public void ПереименованиеКолонок(/*ТаблицаЗначений, СоответствиеНазваний, Обратное = Ложь, СообщатьОбОшибке = Истина*/)
		{
			/*Колонки = ТаблицаЗначений.Колонки;*/
		}
		// ВОЗВРАТ ТОВАРОВ ОТ ПОКУПАТЕЛЯ
		//////////////////////////////////////////////////////////////////////////

		public void СнятиеРезерваНДСПартииПоЗаказамПокупателя(/*ТаблицаПартий,СтруктураПараметров*/)
		{
		}
		/////////////////////////////////////////////////////////////////////////////////////
		// ОТРАЖЕНИЕ ДВИЖЕНИЙ ПО РЕГИСТРУ НДС ПО ПАРТИЯМ ЗАПАСОВ, ПАРТИОННЫЙ УЧЕТ ДЛЯ НДС
		// Доподняет структуру шапки документа параметрами ПартионныйУчетНДСвРазрезеСкладов и
		// ПартионныйУчетНДСвРазрезеСерийИХарактеристик
		//

		public void ДополнитьПараметрамиПартионногоУчетаНДС(/*СтруктураШапкиДокумента, УчетнаяПолитика = Неопределено*/)
		{
			if(true/*УчетнаяПолитика = Неопределено*/)
			{
				/*УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);*/
			}
			if(true/*Не СтруктураШапкиДокумента.Свойство("ПартионныйУчетНДСвРазрезеСкладов")*/)
			{
				if(true/*УчетнаяПолитика <> Ложь 
			И ЗначениеЗаполнено(УчетнаяПолитика) 
			И УчетнаяПолитика.Свойство("ПартионныйУчетНДСвРазрезеСкладов")*/)
				{
					/*СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСкладов", УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСкладов);*/
				}
			}
			if(true/*Не СтруктураШапкиДокумента.Свойство("ПартионныйУчетНДСвРазрезеСерийИХарактеристик")*/)
			{
				if(true/*УчетнаяПолитика <> Ложь 
			И ЗначениеЗаполнено(УчетнаяПолитика) 
			И УчетнаяПолитика.Свойство("ПартионныйУчетНДСвРазрезеСерийИХарактеристик")*/)
				{
					/*СтруктураШапкиДокумента.Вставить("ПартионныйУчетНДСвРазрезеСерийИХарактеристик", УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик);*/
				}
			}
			if(true/*Не СтруктураШапкиДокумента.Свойство("БухгалтерскийУчетСпособОценкиМПЗ")*/)
			{
				if(true/*УчетнаяПолитика <> Ложь 
			И ЗначениеЗаполнено(УчетнаяПолитика) 
			И УчетнаяПолитика.Свойство("БухгалтерскийУчетСпособОценкиМПЗ")*/)
				{
					/*СтруктураШапкиДокумента.Вставить("БухгалтерскийУчетСпособОценкиМПЗ", УчетнаяПолитика.ПартионныйУчетНДСвРазрезеСерийИХарактеристик);*/
				}
			}
		}
		// ОБОЛОЧКИ ДЛЯ ВЫЗОВА СООТВЕТСТВУЮЩИХ ПРОЦЕДУР И ФУНКЦИЙ ИЗ МОДУЛЯ УЧЕТ НДС
		////////////////////////////////////////////////////////////////////////////////
		// Рассчитываем сумму документа со всеми налогами
		//
		// Параметры:
		//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
		//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
		//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
		//  НеУчитыватьТару   - булево, если Истина и ИмяТабличнойЧасти неопределено, то в расчете сумм тару не учитываем
		//
		// Возвращаемое значение:
		//  Сумма документа со всеми налогами.
		//

		public object ПолучитьСуммуДокументаСНДС(/*ДокументОбъект, ИмяТабличнойЧасти = Неопределено, НеУчитыватьТару = Истина*/)
		{
			/*МетаданныеДокумента = ДокументОбъект.Метаданные();*/
			/*СуммаДокумента = 0;*/
			if(true/*ИмяТабличнойЧасти <> Неопределено*/)
			{
				/*СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("Сумма");*/
				if(true/*МетаданныеДокумента.Реквизиты.Найти("УчитыватьНДС") <> Неопределено 
			И МетаданныеДокумента.Реквизиты.Найти("СуммаВключаетНДС") <> Неопределено
			И МетаданныеДокумента.ТабличныеЧасти[ИмяТабличнойЧасти].Реквизиты.Найти("СуммаНДС") <> Неопределено
		  	И ДокументОбъект.УчитыватьНДС
		   	И Не ДокументОбъект.СуммаВключаетНДС*/)
				{
					/*СуммаДокумента = СуммаДокумента + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");*/
				}
			}
			return null;
		}
		// ПолучитьСуммуДокументаСНДС()
		// Рассчитываем сумму НДС документа
		//
		// Параметры:
		//  ДокументОбъект    - объект документа, сумму которого надо рассчитать
		//  ИмяТабличнойЧасти - строка, имя табличной части, сумму которой надо рассчитать.
		//                      Если она не заполнена, считаем по всем табличным частям, в которых есть "Сумма"
		//
		// Возвращаемое значение:
		//  НДС документа
		//

		public object ПолучитьНДСДокумента(/*ДокументОбъект, ИмяТабличнойЧасти = Неопределено*/)
		{
			/*МетаданныеДокумента = ДокументОбъект.Метаданные();*/
			/*СуммаНДС = 0;*/
			if(true/*ИмяТабличнойЧасти <> Неопределено*/)
			{
				/*СуммаНДС = СуммаНДС + ДокументОбъект[ИмяТабличнойЧасти].Итог("СуммаНДС");*/
			}
			return null;
		}
		// ПолучитьСуммуДокументаСНДС()
		// Рассчитывает сумму НДС исходя из суммы и флагов налогообложения
		//
		// Параметры:
		//  Сумма            - число, сумма от которой надо рассчитывать налоги,
		//  УчитыватьНДС     - булево, признак учета НДС в сумме,
		//  СуммаВключаетНДС - булево, признак включения НДС в сумму ("внутри" или "сверху"),
		//  СтавкаНДС        - число , процентная ставка НДС,
		//
		// Возвращаемое значение:
		//  Число, полученная сумма НДС
		//

		public object РассчитатьСуммуНДС(/*Сумма, УчитыватьНДС, СуммаВключаетНДС, СтавкаНДС*/)
		{
			if(true/*(УчитыватьНДС) И (СуммаВключаетНДС)*/)
			{
				/*СуммаБезНДС = 100 * Сумма / (100 + СтавкаНДС);*/
				/*СуммаНДС = Сумма - СуммаБезНДС;*/
			}
			if(true/*УчитыватьНДС*/)
			{
				if(true/*НЕ СуммаВключаетНДС*/)
				{
					/*СуммаНДС = СуммаБезНДС * СтавкаНДС / 100;*/
				}
			}
			return null;
		}
		// РассчитатьСуммуНДС()
		// Функция возвращает курс ставку НДС
		//
		// Параметры:
		//  Валюта - СправочникСсылка.Валюты, валюта, по которой необходимо получить курс
		//  ДатаКурса - Дата, календарная дата, на которую необходимо получить курс валюты
		//
		// Возвращаемое значение:
		//	Курс переданной валюты на переданную дату, 1 в случае отсутствия значения.
		//

		public object ПолучитьСтавкуНДС(/*СтавкаНДС*/)
		{
			if(true/*СтавкаНДС = Перечисления.СтавкиНДС.НДС20 ИЛИ СтавкаНДС = Перечисления.СтавкиНДС.НДС20_120*/)
			{
			}
			return null;
		}
		// ПолучитьСтавкуНДС()

		public void СформироватьДвиженияПоНДС(/*СтруктураПараметров, ТаблицаСписания, МассивНоменклатуры, Организация = Неопределено*/)
		{
			/*Отказ = Ложь;*/
			/*СтруктураШапкиДокумента = ПолучитьСтруктуруШапкиДокументаПоСсылке(СтруктураПараметров.Регистратор);*/
			if(true/*Не СтруктураШапкиДокумента.УчитыватьНДС*/)
			{
			}
			if(true/*Организация <> Неопределено*/)
			{
				/*СтруктураШапкиДокумента.Вставить("Организация",Организация);*/
			}
			if(true/*ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.РасходныйОрдерНаТовары")*/)
			{
				/*ТаблицаСписания = УправлениеЗапасамиПартионныйУчет.ПолучитьТаблицуСтрокДокументов(СтруктураШапкиДокумента.Ссылка);*/
				/*УправлениеЗапасамиПартионныйУчет.ПодготовитьТаблицуСписания(СтруктураПараметров, ТаблицаСписания, Ложь, Истина, Истина);*/
			}
			/*СтруктураПолейУчетнойПолитикиНУ = Новый Структура("СложныйУчетНДС,НачислятьНДСПоОтгрузке");*/
			/*ОбщегоНазначения.ДополнитьПоложениямиУчетнойПолитики(СтруктураШапкиДокумента, СтруктураШапкиДокумента.Дата, Отказ, СтруктураШапкиДокумента.Организация, "Нал", СтруктураПолейУчетнойПолитикиНУ);*/
			/*// Если не указаны параметры учетной политики - движения по НДС не выполняем
*/
			if(true/*Отказ*/)
			{
			}
			/*//Если сложный учет НДС не ведется - затрем параметры сложного учета ндс
*/
			if(true/*НЕ СтруктураШапкиДокумента.СложныйУчетНДС*/)
			{
				/*СтруктураШапкиДокумента.Вставить("НДСвСтоимостиТоваров",Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять);*/
			}
			/*ЭтоВозврат = СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщику" 
				   или СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровПоставщикуИзНТТ";*/
			/*ЭтоВозвратОтПокупателя = СтруктураШапкиДокумента.ВидДокумента = "ВозвратТоваровОтПокупателя";*/
			if(true/*глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
	  И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураПараметров.Период)*/)
			{
				/*ТаблицаПартий = ПолучитьТаблицуПартийПоДокументу(СтруктураПараметров, ТаблицаСписания);*/
			}
			if(true/*ТаблицаПартий.Количество()= 0*/)
			{
			}
			/*Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(СтруктураШапкиДокумента.Ссылка);*/
			/*// Если вызов из партионного учета и проводиться не Закрытие заказов покупателя
*/
			if(true/*СтруктураПараметров.Свойство("ТаблицаСписанныхПартий") И Организация = Неопределено*/)
			{
				if(true/*ЭтоВозврат*/)
				{
					/*ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПартий, ТаблицаСписания, Отказ, Заголовок);*/
				}
				if(true/*ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.РасходныйОрдерНаТовары")*/)
				{
					/*//При списании по ордеру таблица списанных партий не наследует суммовые реквизиты реализаци, необходимые для начисления НДС
*/
					/*//В начале текущей процедуры недостающие данные были загружены в ТаблицаСписания
*/
					/*РаспределеннаяТаблицаСписания = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров);*/
				}
				if(true/*ЭтоВозвратОтПокупателя*/)
				{
					/*УчетНДСФормированиеДвижений.ДвиженияВозвратаТоваровОтПокупателяПоРегистрамПодсистемыНДС(СтруктураШапкиДокумента, СтруктураПараметров, РаспределеннаяТаблицаСписания, Отказ, Заголовок);*/
				}
			}
			/*ВыполнитьДвиженияНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров);*/
			/*ВыполнитьДвиженияПоРегиструНДСНачисленныйОтражениеРеализации(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров, Отказ);*/
			/*СчетаУчетаОС = ОпределитьСчетаУчетаОСиНМА("ОС");*/
			/*УчетНДСПоОСиНМА = Ложь;*/
			if(true/*СтруктураШапкиДокумента.СложныйУчетНДС
		Или УчетНДСПоОСиНМА*/)
			{
				/*// Получим таблицу НДС партий
*/
				/*ТаблицаНДСПартииСписания = ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания,Отказ, Заголовок, ЭтоВозврат, ЭтоВозвратОтПокупателя, СтруктураПараметров);*/
				if(true/*ТаблицаНДСПартииСписания.Количество() = 0*/)
				{
					/*//Партии не найдены или отражение в партионном учете НДС не производится.
*/
					/*//Дальнейшая обработка не требуется
*/
				}
				/*ВыполнитьДвиженияСписанияНДС(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок);*/
				/*МассивОрганизаций = ТаблицаНДСПартииСписания.ВыгрузитьКолонку("Организация");*/
				/*МассивОрганизаций = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций,Истина,Истина);*/
				/*МассивПартий = ТаблицаНДСПартииСписания.ВыгрузитьКолонку("Партия");*/
				/*МассивПартий = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивПартий);*/
				/*СтруктураПараметров.Вставить("НоменклатурныеГруппыДляРеализацииБезНДСиНДС0", ПолучитьНоменклатурныеГруппыДляРеализацииБезНДСиНДС0(СтруктураПараметров.Период, МассивОрганизаций, СтруктураПараметров));*/
				/*ВыполнитьДвиженияНДСНезавершенноеПроизводство(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ);*/
				/*ВыполнитьДвиженияПоОтражениюПредположенияСтавки0(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок);*/
				/*ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ);*/
				/*ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваровКомплектацияВыпуск(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ);*/
				/*ВыполнитьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, СтруктураПараметров, Отказ);*/
				/*ВыполнитьДвиженияПоРегиструНДСпоОСиНМА_СписаниеМатериаловНаОСиНМА(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ);*/
				/*ВыполнитьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Отказ);*/
				/*ВыполнитьДвиженияПоРегистрамНДССписаниеРасходовпоВНА(СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Отказ);*/
			}
		}
		//СформироватьДвиженияПоНДС
		// Процедура - вход для движений по НДС
		// Параметры
		// СтруктураПараметров - структура, хранящая основные параметры модуля УправлениеЗапасамиПартионныйУчет
		// ТаблицаСписания - 	 таблица значений содержащая информацию о том что и в каком количестве нужно списывать,
		// 						 обычно получается из регистра "СписанныеТовары"

		public void ВыполнитьДвиженияПоНДС(/*СтруктураПараметров, ТаблицаСписания*/)
		{
			/*МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");*/
			/*МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);*/
			if(true/*ТипЗнч(СтруктураПараметров.Регистратор)= Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей")*/)
			{
				/*МассивОрганизаций = ТаблицаСписания.ВыгрузитьКолонку(ТаблицаСписания.Колонки.Организация);*/
				/*МассивОрганизаций = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивОрганизаций,Истина,Истина);*/
			}
		}
		//ВыполнитьДвиженияПоНДС

		public void ЗагрузитьВТаблицуЗначенийСписанныеПартии(/*СтруктураПараметров, ИмяНабораДвижений, ИмяТаблицыПриемника*/)
		{
			if(true/*НЕ СтруктураПараметров.Свойство(ИмяНабораДвижений, НаборДвижений)*/)
			{
			}
			/*НаборДвижений.Прочитать();*/
			/*ТаблицаДвижений = НаборДвижений.Выгрузить();*/
			/*// Заполним значения в совпадающих колонках.
*/
		}
		// ЗагрузитьВТаблицуЗначенийСписанныеПартии()
		// Добавляет в таблицу списанных товаров, данные по комиссии
		//
		// Параметры:
		//  ОтчетКомиссионера       - документ-ссылка Отчет комиссионера о продажах.
		//  ТаблицаСписанныхТоваров - выходная таблица значений, куда добавляются строки.
		//

		public void ДополнитьСписанныеТоварыДаннымиПоКомиссии(/*ОтчетКомиссионера, ТаблицаСписанныхТоваров*/)
		{
			if(true/*ТипЗнч(ОтчетКомиссионера) <> Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")
		ИЛИ ТипЗнч(ТаблицаСписанныхТоваров) <> Тип("ТаблицаЗначений")
		ИЛИ ТаблицаСписанныхТоваров.Колонки.Найти("ВыставленСФ") <> Неопределено
		ИЛИ ТаблицаСписанныхТоваров.Колонки.Найти("НомерСтроки") = Неопределено*/)
			{
			}
			/*ТекстСписанныеТовары = "";*/
			/*ТаблицаСписанныхТоваров.Колонки.Добавить("СчетФактура", Новый ОписаниеТипов("ДокументСсылка.СчетФактураВыданный"));*/
			/*ТаблицаСписанныхТоваров.Колонки.Добавить("Покупатель",  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));*/
			/*ТаблицаСписанныхТоваров.Колонки.Добавить("ДатаСФ",      Новый ОписаниеТипов("Дата"));*/
			/*ТаблицаСписанныхТоваров.Колонки.Добавить("ВыставленСФ", Новый ОписаниеТипов("Булево"));*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст =
	"ВЫБРАТЬ" + Сред(ТекстСписанныеТовары, 2) + "
	|ПОМЕСТИТЬ ВТ_СписанныеТовары
	|ИЗ
	|	&ТаблицаСписанныхТоваров КАК СписанныеТовары
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахТовары.КлючСтроки КАК КлючСтроки" + ТекстСписанныеТовары + "
	|ПОМЕСТИТЬ ВТ_КлючСтроки
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Товары КАК ОтчетКомиссионераОПродажахТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СписанныеТовары КАК СписанныеТовары
	|		ПО ОтчетКомиссионераОПродажахТовары.НомерСтроки = СписанныеТовары.НомерСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахТовары.Ссылка = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	КлючСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажахПокупатели.Покупатель КАК Покупатель,
	|	ОтчетКомиссионераОПродажахПокупатели.ДатаСФ КАК ДатаСФ,
	|	ОтчетКомиссионераОПродажахПокупатели.ВыставленСФ КАК ВыставленСФ,
	|	ОтчетКомиссионераОПродажахПокупатели.СчетФактура КАК СчетФактура" + СтрЗаменить(ТекстСписанныеТовары, "СписанныеТовары.", "ВТ_КлючСтроки.") + "
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах.Покупатели КАК ОтчетКомиссионераОПродажахПокупатели
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_КлючСтроки КАК ВТ_КлючСтроки
	|		ПО ОтчетКомиссионераОПродажахПокупатели.КлючСтроки = ВТ_КлючСтроки.КлючСтроки
	|ГДЕ
	|	ОтчетКомиссионераОПродажахПокупатели.Ссылка = &Ссылка";*/
			/*Запрос.УстановитьПараметр("Ссылка",                  ОтчетКомиссионера);*/
			/*Запрос.УстановитьПараметр("ТаблицаСписанныхТоваров", ТаблицаСписанныхТоваров);*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			/*ТаблицаСписанныхТоваров.Очистить();*/
			while(true/*Выборка.Следующий()*/)
			{
				/*СтрокаТаблицы = ТаблицаСписанныхТоваров.Добавить();*/
				/*ЗаполнитьЗначенияСвойств(СтрокаТаблицы, Выборка);*/
			}
			/*;;*/
		}

		public void ВыполнитьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(/*СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Отказ*/)
		{
			/*/////////////////////////////////////////////////////////////////////////////////
*/
			/*// НДС по переданным ТМЦ на объект строительства или НМА - движения по регистру НДСпоОСиНМА для
*/
			/*// последующего учета НДС.
*/
			/*// НДС по переданным ТМЦ на объект строительства
*/
			/*ДанныеДляОбработки = ТаблицаНДСПартииСписания.СкопироватьКолонки();*/
			/*ИспользоватьРА = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);*/
			/*СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ);*/
		}
		// НДС по партиям - отразить поступление на склад-получатель
		//

		public void ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров(/*СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ*/)
		{
			if(true/*ТаблицаНДСПартииСписания.Количество() = 0*/)
			{
			}
			/*Строка = "ВозвратОтКомиссионера, ВозвратОтПереработчика, ВозвратОтПокупателя, ВыпускПоОперацииСтоимость, ВыпускПродукцииФиксНаСклад,
			 |Комплектация, КорректировкаСерийИХарактеристик, ПередачаВПереработку, ПередачаНаКомиссию, ПеремещениеМеждуСкладами,
			 |РезервированиеПодЗаказ, СнятиеРезерваПодЗаказ, ВключениеАктиваВСоставМПЗ";*/
			/*ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(Строка, ТаблицаНДСПартииСписания, СтруктураПараметров);*/
			/*ВыполнятьПоступление = Ложь;*/
			if(true/*СтруктураШапкиДокумента.ВидДокумента = "РеализацияТоваровУслуг"*/)
			{
				if(true/*СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером 
			И СтруктураШапкиДокумента.СложныйУчетНДС*/)
				{
					/*ВыполнятьПоступление = Истина;*/
				}
			}
			if(true/*ВыполнятьПоступление*/)
			{
				/*ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.СкопироватьКолонки();*/
				/*КолНДСПартииТоваров = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество();*/
				if(true/*ДанныеДляОбработки.Колонки.Найти("ЗаказСписания") <> Неопределено*/)
				{
					/*ДанныеДляОбработки.Колонки.ЗаказСписания.Имя = "ЗаказПокупателя";*/
				}
				/*ЕстьХарактеристикаНоменклатурыНовая = ДанныеДляОбработки.Колонки.Найти("ХарактеристикаНоменклатурыНовая") <> Неопределено;*/
				/*ЕстьСерияНоменклатурыНовая = ДанныеДляОбработки.Колонки.Найти("СерияНоменклатурыНовая") <> Неопределено;*/
				/*ЕстьНоменклатураНовая = ДанныеДляОбработки.Колонки.Найти("НоменклатураНовая") <> Неопределено;*/
				/*ЕстьДокументОприходованияНовый = ДанныеДляОбработки.Колонки.Найти("ДокументОприходованияНовый") <> Неопределено;*/
				/*ЕстьЗаказПокупателя = ДанныеДляОбработки.Колонки.Найти("ЗаказПокупателя") <> Неопределено;*/
				/*// Добавим колонки для обработки заказа покупателя.
*/
				if(true/*ТаблицаДвиженийПартии.Колонки.Найти("ОбособленныйУчетТоваровПоЗаказамПокупателей")= Неопределено*/)
				{
					/*ТаблицаДвиженийПартии.Колонки.Добавить("ОбособленныйУчетТоваровПоЗаказамПокупателей");*/
					/*ТаблицаДвиженийПартии.ЗаполнитьЗначения(Ложь,"ОбособленныйУчетТоваровПоЗаказамПокупателей");*/
				}
				if(true/*ТаблицаДвиженийПартии.Колонки.Найти("ЗаказПокупателя")= Неопределено*/)
				{
					/*ТаблицаДвиженийПартии.Колонки.Добавить("ЗаказПокупателя");*/
					/*ТаблицаДвиженийПартии.ЗаполнитьЗначения(Неопределено,"ЗаказПокупателя");*/
				}
				/*ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДанныеДляОбработки, ТаблицаДвиженийПартии);*/
				/*ТаблицаДвиженийПартии.Колонки.Добавить("Услуга", Новый ОписаниеТипов("Булево"));*/
				/*ТаблицаДвиженийПартии.Колонки.СчетУчета.Имя = "СчетУчетаЦенности";*/
				if(true/*СтруктураШапкиДокумента.ВидДокумента = "ПринятиеКУчетуОС"*/)
				{
					/*КолСтрок = ТаблицаДвиженийПартии.Количество();*/
					/*ТаблицаДвиженийПартии.ЗаполнитьЗначения(СтруктураПараметров.Регистратор,"Партия");*/
					/*ТаблицаДвиженийПартии.ЗаполнитьЗначения(0,"Стоимость");*/
					/*ТаблицаДвиженийПартии.ЗаполнитьЗначения(0,"НДС");*/
				}
				/*УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров, Отказ);*/
				/*// Устанавливаем флаги модификации
*/
				/*СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров 
									ИЛИ (КолНДСПартииТоваров <> СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество());*/
			}
		}
		//ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров

		public void ВыполнитьДвиженияПоРегиструНДСНачисленныйОтражениеРеализации(/*СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров, Отказ*/)
		{
			/*СтрокаКодовОпераций = "Реализация, РеализацияКомиссия, РеализацияРозница";*/
			/*ДанныеДляОбработки = ОтобратьСтрокиПостроителемЗапроса(СтрокаКодовОпераций, РаспределеннаяТаблицаСписания);*/
			if(true/*ДанныеДляОбработки = Неопределено*/)
			{
			}
			if(true/*СтруктураШапкиДокумента.УчитыватьНДС*/)
			{
				/*УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСНачисленный_ОтражениеРеализации(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ, СчетОтнесенияНДС(СтруктураШапкиДокумента));*/
			}
		}

		public void ВыполнитьДвиженияПоОтражениюПредположенияСтавки0(/*СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок*/)
		{
			/*СтрокаКодовОпераций = "Реализация, РеализацияКомиссия, РеализацияРозница";*/
			if(true/*СтруктураШапкиДокумента.ВидДокумента = "РеализацияТоваровУслуг" 
		И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности*/)
			{
				/*СтрокаКодовОпераций = СтрокаКодовОпераций + ", ПередачаНаКомиссию";*/
			}
			/*ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);*/
			if(true/*Не ДанныеДляОбработки = Неопределено*/)
			{
				/*КолНДСПредъявленныйРеализация0 = СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество();*/
				/*КолНДСХозрасчетный  = СтруктураПараметров.ДвиженияХозрасчетный.Количество();*/
				/*ОтразитьПредположениеСтавки0(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Заголовок);*/
				/*СтруктураПараметров.ИзмененыДвиженияНДСПредъявленныйРеализация0  = СтруктураПараметров.ИзмененыДвиженияНДСПредъявленныйРеализация0 
						ИЛИ (КолНДСПредъявленныйРеализация0 <> СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0.Количество());*/
				/*СтруктураПараметров.ИзмененыДвиженияХозрасчетный = СтруктураПараметров.ИзмененыДвиженияХозрасчетный
								ИЛИ (КолНДСХозрасчетный <> СтруктураПараметров.ДвиженияХозрасчетный.Количество());*/
			}
		}
		// Выполняет списание НДС и включение в стоимость - исключение НДС из стоимости
		//

		public void ВыполнитьДвиженияСписанияНДС(/*СтруктураШапкиДокумента, ТаблицаНДСПартииСписания, СтруктураПараметров, Заголовок*/)
		{
			/*КодыОпераций = Перечисления.КодыОперацийПартииТоваров;*/
			/*// НДС в стоимости товаров - отработка включения и исключения НДС из стоимости.
*/
			/*// Включение НДС в стоимость может происходить только для строк с перечисленными ниже кодами операций
*/
			/*СтрокаКодовОпераций = "Комплектация, ПередачаНаКомиссию, ПеремещениеМеждуСкладами, Реализация, ВключениеАктиваВСоставМПЗ,
						  |РеализацияРозница, РеализацияКомиссия, СписаниеНаБрак, СписаниеНаВложенияВоВнеоборотныеАктивы,
						  |СписаниеНаЗатраты, СписаниеНаСтроительствоОбъектовОС, СписаниеПартийВПроизводствоОперативно,
						  |СписаниеПартийПереданныхВПроизводство, СписаниеПоИнвентаризации";*/
			/*ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(СтрокаКодовОпераций, ТаблицаНДСПартииСписания, СтруктураПараметров);*/
			/*КолНДСПартииТоваров = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество();*/
			/*КолНДСВключенныйВСтоимость = СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.Количество();*/
			/*КолНДСПредъявленный = СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.Количество();*/
			/*КолНДСХозрасчетный  = СтруктураПараметров.ДвиженияХозрасчетный.Количество();*/
			if(true/*СтруктураШапкиДокумента.ОтражатьВНалоговомУчете*/)
			{
				/*КолНДСНалоговый  = СтруктураПараметров.ДвиженияНалоговый.Количество();*/
			}
			if(true/*ДанныеДляОбработки.Количество() > 0*/)
			{
				/*ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров;*/
				/*// очистим предыдущие движения 
*/
				if(true/*НЕ СтруктураПараметров.Свойство("ТолькоДвиженияНДС")*/)
				{
					if(true/*СтруктураШапкиДокумента.ОтражатьВНалоговомУчете*/)
					{
						/*ДвиженияРегистра = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();*/
						/*ДвиженияРегистра.Очистить();*/
						/*ДвиженияРегистра.Отбор.Регистратор.Установить(СтруктураПараметров.Регистратор);*/
						/*ДвиженияРегистра.Прочитать();*/
						/*Инд=0;*/
						while(true/*Инд < ДвиженияРегистра.Количество()*/)
						{
							if(true/*ДвиженияРегистра[Инд].СписаниеПартийНДС*/)
							{
								/*ДвиженияРегистра.Удалить(Инд);*/
							}
						}
						/*;
				ДвиженияРегистра.Записать(Истина);*/
					}
				}
				/*// Включение НДС в стоимость
*/
				/*УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ДанныеДляОбработки, ТаблицаДвиженийПартии, Истина, СтруктураПараметров, Заголовок);*/
				/*// Исключение НДС из стоимости
*/
				/*УчетНДСФормированиеДвижений.ОтразитьВключениеИсключениеНДСВСтоимость(СтруктураШапкиДокумента, ДанныеДляОбработки, ТаблицаДвиженийПартии, Ложь, СтруктураПараметров, Заголовок);*/
				if(true/*ТаблицаДвиженийПартии.Количество() > 0*/)
				{
					/*ТаблицаДвиженийПартии.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");*/
				}
			}
			/*ТаблицаНДСПартииСписания = ДанныеДляОбработки;*/
			/*СтруктураПараметров.Вставить("СоответствиеКодовОперацийСтрокамНДСПартий", Новый Соответствие);*/
			/*// НДС по партиям - отразить непосредственое списание.
*/
			/*КолСтрокНДС = ТаблицаНДСПартииСписания.Количество();*/
			/*СтрокаПоступленияКомплектации = Неопределено;*/
			/*ЕстьХарактеристикаНоменклатурыНовая = ТаблицаНДСПартииСписания.Колонки.Найти("ХарактеристикаНоменклатурыНовая") <> Неопределено;*/
			/*ЕстьСерияНоменклатурыНовая 			= ТаблицаНДСПартииСписания.Колонки.Найти("СерияНоменклатурыНовая") <> Неопределено;*/
			/*ЕстьНоменклатураНовая 				= ТаблицаНДСПартииСписания.Колонки.Найти("НоменклатураНовая") <> Неопределено;*/
			/*ЕстьДокументОприходованияНовый 		= ДанныеДляОбработки.Колонки.Найти("ДокументОприходованияНовый") <> Неопределено;*/
			/*//	Для каждого СтрокаТаблицыНДСПартииСписания из ТаблицаНДСПартииСписания цикл
*/
			/*СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров 
								ИЛИ (КолНДСПартииТоваров <> СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество());*/
			/*СтруктураПараметров.ИзмененыДвиженияНДСВключенныйВСтоимость = СтруктураПараметров.ИзмененыДвиженияНДСВключенныйВСтоимость
								ИЛИ (КолНДСВключенныйВСтоимость <> СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость.Количество());*/
			/*СтруктураПараметров.ИзмененыДвиженияНДСПредъявленный = СтруктураПараметров.ИзмененыДвиженияНДСПредъявленный
								ИЛИ (КолНДСПредъявленный <> СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный.Количество());*/
			/*СтруктураПараметров.ИзмененыДвиженияХозрасчетный = СтруктураПараметров.ИзмененыДвиженияХозрасчетный
								ИЛИ (КолНДСХозрасчетный <> СтруктураПараметров.ДвиженияХозрасчетный.Количество());*/
			if(true/*СтруктураШапкиДокумента.ОтражатьВНалоговомУчете*/)
			{
				/*СтруктураПараметров.ИзмененыДвиженияНалоговый = СтруктураПараметров.ИзмененыДвиженияНалоговый
								ИЛИ (КолНДСНалоговый <> СтруктураПараметров.ДвиженияНалоговый.Количество());*/
			}
		}
		//ВыполнитьДвиженияСписанияНДС
		//////////////////////////////////////////////////////////////////////////
		// ПОЛУЧЕНИЕ ДАННЫХ ПО ДОКУМЕНТАМ
		// Параметр ДляКнигиПродаж устанавливается в случае, когда для документа могут быть получены данные как
		// для книги покупок, так и для книги продаж

		public object ПолучитьТаблицуДокументаНДС(/*ДокументСсылка, Ошибка = Ложь, ДляКнигиПродаж = Ложь*/)
		{
			/*ТипОснования = ТипЗнч(ДокументСсылка);*/
			/*// По ссылке нужно получить объект
*/
			if(true/*Документы.ТипВсеСсылки().СодержитТип(ТипОснования)*/)
			{
				/*ДокументОбъект = ДокументСсылка.ПолучитьОбъект();*/
			}
			if(true/*ТипОснования = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")*/)
			{
			}
			/*Исключение
		Возврат Неопределено;*/
			/*КонецПопытки;*/
			return null;
		}

		public object ПолучитьТаблицуПоступлениеТоваровУслуг(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства, Неопределено);*/
			/*ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОборудованию, ТаблицаПоТоварам);*/
			/*ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаПоТоварам);*/
			/*ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОбъектамСтроительства, ТаблицаПоТоварам);*/
			return null;
		}

		public object ПолучитьТаблицуГТДИмпорт(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, СтруктураШапкиДокументаВалюта, СтруктураШапкиДокументаРубли, ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли);*/
			/*ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоТоварамВалюта, ТаблицаПоТоварамРубли);*/
			/*ТаблицаПоТоварамРубли.Колонки.Удалить("НДСВал");*/
			return null;
		}

		public object ПолучитьТаблицуОтражениеПоступленияТоваровИУслугНДС(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено);*/
			return null;
		}

		public object ПолучитьТаблицуПоступлениеДопРасходов(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоОборудованию);*/
			/*ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоОборудованию, ТаблицаПоТоварам);*/
			return null;
		}

		public object ПолучитьТаблицуСчетФактураПолученный(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументамОснованиям, Истина);*/
			/*ТаблицаПоВсемДокументам = Неопределено;*/
			return null;
		}

		public object ПолучитьТаблицуОтчетКомиссионераОПродажах(/*ДокументОбъект, Ошибка, ДляКнигиПродаж = Ложь*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);*/
			if(true/*ДляКнигиПродаж*/)
			{
				/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоДокументу, Неопределено, Неопределено);*/
			}
			return null;
		}

		public object ПолучитьТаблицуРеализацияТоваровУслуг(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам, Неопределено);*/
			/*ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаПоУслугам, ТаблицаПоТоварам);*/
			return null;
		}

		public object ПолучитьТаблицуОтчетОРозничныхПродажах(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);*/
			return null;
		}

		public object ПолучитьТаблицуОтражениеРеализацииТоваровИУслугНДС(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, Неопределено);*/
			return null;
		}

		public object ПолучитьТаблицуСчетФактураВыданный(/*ДокументОбъект, Ошибка*/)
		{
			if(true/*ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаРеализацию*/)
			{
			}
			/*ТаблицаДокумента = Новый ТаблицаЗначений;*/
			/*ТаблицаДокумента.Колонки.Добавить("ВидЦенности");*/
			/*ТаблицаДокумента.Колонки.Добавить("СчетФактура");*/
			/*ТаблицаДокумента.Колонки.Добавить("Сумма");*/
			/*ТаблицаДокумента.Колонки.Добавить("СтавкаНДС");*/
			/*ТаблицаДокумента.Колонки.Добавить("НДС");*/
			/*ТаблицаДокумента.Колонки.Добавить("СчетУчетаНДС");*/
			/*ТаблицаДокумента.Колонки.Добавить("Событие");*/
			/*НоваяСтрока = ТаблицаДокумента.Добавить();*/
			/*НоваяСтрока.ВидЦенности = ?(ДокументОбъект.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыВыставленного.НаАванс, Перечисления.ВидыЦенностей.АвансыПолученные,
																										Перечисления.ВидыЦенностей.СуммыСвязанныеСРасчетамиПоОплате);*/
			/*НоваяСтрока.СчетФактура = ДокументОбъект.ДокументОснование;*/
			/*НоваяСтрока.Сумма = ДокументОбъект.Сумма;*/
			/*НоваяСтрока.СтавкаНДС = ДокументОбъект.СтавкаНДС;*/
			/*НоваяСтрока.НДС = ДокументОбъект.СуммаНДС;*/
			/*НоваяСтрока.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатам;*/
			/*НоваяСтрока.Событие = Перечисления.СобытияПоНДСПокупки.ПредъявленНДСКВычету;*/
			return null;
		}

		public object ПолучитьТаблицуВозвратТоваровОтПокупателя(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);*/
			return null;
		}

		public object РаспределитьПартииПоТаблицеСписания(/*ТаблицаПартий, ТаблицаСписания, СтруктураШапкиДокумента, СтруктураПараметров*/)
		{
			/*ВидыЦенностейПоСчетамУчета = Неопределено;*/
			/*СоответствиеЗаказов = Новый Соответствие;*/
			/*КопияТаблицыСписания = ТаблицаСписания.Скопировать();*/
			/*КопияТаблицыСписания.Колонки.Удалить(КопияТаблицыСписания.Колонки.Подразделение);*/
			/*РаспределеннаяТаблица = КопияТаблицыСписания.СкопироватьКолонки();*/
			/*// Дополнительные колонки, используемые подсистемой НДС
*/
			/*СтрокаНазванийКолонок = "Ценность, СчетУчетаЦенности, ВидЦенности, ДоговорПоставщика, Комиссионный, Партия,
							|КорСчетСписанияБУ, КорСчетСписанияНУ,
							|КорСубконтоСписанияНУ1, КорСубконтоСписанияНУ2, КорСубконтоСписанияНУ3,
							|КорСубконтоСписанияБУ1, КорСубконтоСписанияБУ2, КорСубконтоСписанияБУ3,
							|НДС, СуммаБезНДС,
							|ДокументОприходования,
							|НомерКорСтроки, ПостояннаяРазница, ВременнаяРазница,
							|ДоговорКомиссии, СчетРасчетовСКомитентом, ОбособленныйУчетТоваровПоЗаказамПокупателей,
							|Подразделение";*/
			/*// Ключ - название колонки
*/
			/*// Значение - описание типа для добавляемой колонки
*/
			/*СтруктураКолонокРаспределеннойТаблицы = Новый Структура(СтрокаНазванийКолонок);*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("УчетАгентскогоНДС", Новый описаниеТипов("Булево"));*/
			/*КодыОпераций = Перечисления.КодыОперацийПартииТоваров;*/
			return null;
		}
		//РаспределитьПартииПоТаблицеСписания
		// Функция возвращает значение реквизита произвольного объекта ссылочного типа
		// Предназначена для получения реквизитов недоступных пользователю объектов

		public object ПолучитьРеквизитОбъекта(/*Ссылка, ИмяРеквизита*/)
		{
			/*ОбъектМетаданные = Ссылка.Метаданные();*/
			/*ИмяТаблицы = ОбъектМетаданные.ПолноеИмя();*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ " + ИмяРеквизита + " КАК " + ИмяРеквизита + " ИЗ " + ИмяТаблицы + "
	|ГДЕ Ссылка = &Ссылка";*/
			/*Запрос.УстановитьПараметр("Ссылка", Ссылка);*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			if(true/*Выборка.Следующий()*/)
			{
			}
			return null;
		}
		//ПолучитьРеквизитОбъекта()
		////////////////////////////////////////////////////////////////////////////////
		// СЛУЖЕБНЫЕ ФУНКЦИИ ДЛЯ СОВМЕСТИМОСТИ С БП

		public object ПолучитьСтруктуруШапкиДокументаПоСсылке(/*Знач Ссылка*/)
		{
			/*МетаданныеДокумента = Ссылка.Метаданные();*/
			if(true/*МетаданныеДокумента.Имя = "РасходныйОрдерНаТовары"*/)
			{
				/*СтруктураКорректировкиОрдера = Новый Структура("ДокументПередачи, Дата");*/
				/*УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураКорректировкиОрдера);*/
				/*МетаданныеДокумента = СтруктураКорректировкиОрдера.ДокументПередачи.Метаданные();*/
				/*Ссылка = СтруктураКорректировкиОрдера.ДокументПередачи;*/
			}
			/*СтруктураШапкиДокумента = Новый Структура;*/
			/*СтруктураШапкиДокумента.Вставить("Ссылка");*/
			/*СтруктураШапкиДокумента.Вставить("Дата");*/
			/*СтруктураШапкиДокумента.Вставить("Номер");*/
			/*УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка, СтруктураШапкиДокумента);*/
			if(true/*МетаданныеДокумента.Имя = "ОтчетКомиссионераОПродажах"*/)
			{
				/*СтруктураРеквизитовПокупатели = Новый Структура("Покупатели");*/
				/*РезультатЗапросаПокупатели = ПолучитьРеквизитОбъекта(Ссылка, "Покупатели");*/
				if(true/*НЕ РезультатЗапросаПокупатели.Пустой()*/)
				{
					/*ТЧПокупатели = РезультатЗапросаПокупатели.Выгрузить();*/
					/*СтруктураШапкиДокумента.Вставить("КомиссияПоПокупателям", НЕ(ТЧПокупатели.Количество() = 1 И ТЧПокупатели[0].Покупатель = СтруктураШапкиДокумента.Контрагент));*/
				}
			}
			if(true/*СтруктураКорректировкиЗаказа <> Неопределено*/)
			{
				/*СтруктураШапкиДокумента.Вставить("Ссылка" , СтруктураКорректировкиЗаказа.Ссылка);*/
				/*СтруктураШапкиДокумента.Вставить("Дата"   , СтруктураКорректировкиЗаказа.Дата);*/
				/*СтруктураШапкиДокумента.Вставить("Номер"  , СтруктураКорректировкиЗаказа.Номер);*/
			}
			if(true/*СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента")*/)
			{
				/*СтруктураДоговора = Новый Структура ("ВидДоговора,
											 |УчетАгентскогоНДС, ВалютаВзаиморасчетов, РасчетыВУсловныхЕдиницах");*/
				/*УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураШапкиДокумента.ДоговорКонтрагента, СтруктураДоговора);*/
				/*СтруктураШапкиДокумента.Вставить("ВидДоговора", СтруктураДоговора.ВидДоговора);*/
				/*СтруктураШапкиДокумента.Вставить("УчетАгентскогоНДС", СтруктураДоговора.УчетАгентскогоНДС);*/
				/*СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов", СтруктураДоговора.ВалютаВзаиморасчетов);*/
				/*СтруктураШапкиДокумента.Вставить("РасчетыВУсловныхЕдиницах", СтруктураДоговора.РасчетыВУсловныхЕдиницах);*/
			}
			if(true/*НЕ СтруктураШапкиДокумента.Свойство("УчитыватьНДС")*/)
			{
				/*СтруктураШапкиДокумента.Вставить("УчитыватьНДС", Истина);*/
			}
			if(true/*НЕ СтруктураШапкиДокумента.Свойство("НДСВключенВСтоимость")*/)
			{
				/*СтруктураШапкиДокумента.Вставить("НДСВключенВСтоимость", Истина);*/
			}
			if(true/*НЕ СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН")*/)
			{
				/*СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);*/
			}
			/*ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");*/
			/*СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета", ВалютаРегламентированногоУчета);*/
			/*СтруктураШапкиДокумента.Вставить("ВидДокумента",  МетаданныеДокумента.Имя);*/
			/*СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН", ?(СтруктураШапкиДокумента.Свойство("Организация"), НалоговыйУчетУСН.ПрименениеУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата),Ложь));*/
			if(true/*СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчете") И СтруктураШапкиДокумента.Свойство("Организация")*/)
			{
				if(true/*СтруктураШапкиДокумента.ОтражатьВНалоговомУчете*/)
				{
					if(true/*СтруктураШапкиДокумента.ОрганизацияПрименяетУСН*/)
					{
						if(true/*НалоговыйУчетУСН.ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата)*/)
						{
							/*СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСНДоходы", Истина);*/
							/*СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчетеУСН", Ложь);*/
						}
						/*СтруктураШапкиДокумента.Вставить("ОтражатьВНалоговомУчете",    Ложь);*/
					}
				}
			}
			/*ВидПоступления = Неопределено;*/
			if(true/*СтруктураШапкиДокумента.Свойство("ВидПоступления",ВидПоступления)*/)
			{
				if(true/*ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру*/)
				{
					/*СтруктураСклада = Новый Структура("СкладОрдер");*/
					/*УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(Ссылка,СтруктураСклада);*/
					/*СтруктураСкладаОрдера = Новый Структура("Склад");*/
					/*УправлениеЗапасамиПартионныйУчет.ПолучитьРеквизитыОбъекта(СтруктураСклада.СкладОрдер,СтруктураСкладаОрдера);*/
					/*СтруктураШапкиДокумента.Вставить("СкладПриходногоОрдера",СтруктураСкладаОрдера.Склад);*/
				}
			}
			/*СтруктураШапкиДокумента.Вставить("ОтгрузкаБезПереходаПраваСобственности", Ложь);*/
			/*ВидОперации = неопределено;*/
			if(true/*СтруктураШапкиДокумента.Свойство("ВидОперации",ВидОперации)*/)
			{
				if(true/*ВидОперации = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности*/)
				{
					/*СтруктураШапкиДокумента.Вставить("ОтгрузкаБезПереходаПраваСобственности", истина);*/
				}
			}
			return null;
		}

		public object ОтобратьСтрокиПартийПоКодамОпераций(/*СтрокаКодовОпераций, ТаблицаПартийНДС, СтруктураПараметров*/)
		{
			/*Результат = Новый ТаблицаЗначений;*/
			if(true/*СтруктураПараметров.Свойство("СоответствиеКодовОперацийСтрокамНДСПартий",СоответствиеКодовОперацийСтрокамНДСПартий)*/)
			{
				/*СтруктураКодовОпераций = Новый Структура(СтрокаКодовОпераций);*/
			}
			return null;
		}
		//ОтобратьСтрокиПоКодамОпераций

		public object ОтобратьСтрокиПостроителемЗапроса(/*СтрокаКодовОпераций, ТаблицаЗначений*/)
		{
			/*СтруктураКодовОпераций = Новый Структура(СтрокаКодовОпераций);*/
			/*ВидСравненияКодаОперации = ВидСравнения.ВСписке;*/
			/*СписокОтбора = Новый СписокЗначений;*/
			/*ПостроительТаблицаПартийНДС = Новый ПостроительЗапроса();*/
			/*ПостроительТаблицаПартийНДС.ИсточникДанных = Новый ОписаниеИсточникаДанных(ТаблицаЗначений);*/
			/*Отбор = ПостроительТаблицаПартийНДС.Отбор;*/
			/*ЭлементОтбора = Отбор.Добавить("КодОперацииПартииТоваров");*/
			/*ЭлементОтбора.ВидСравнения = ВидСравненияКодаОперации;*/
			/*ЭлементОтбора.Значение = СписокОтбора;*/
			/*ЭлементОтбора.Использование = Истина;*/
			/*ПостроительТаблицаПартийНДС.Выполнить();*/
			if(true/*ПостроительТаблицаПартийНДС.Результат.Пустой()*/)
			{
			}
			return null;
		}
		//ОтобратьСтрокиПостроителемЗапроса

		public object ПолучитьТаблицуПартийДляСписанияНДС(/*СтруктураПараметров*/)
		{
			/*// Партии могут списываться из регистров ПартииТоваровНаСкладахБухгалтерскийУчет и ПартииТоваровПереданныеБухгалтерскийУчет
*/
			/*// Отберем из соответствующих таблиц партии с видом движения "расход"
*/
			/*КодыОпераций = Перечисления.КодыОперацийПартииТоваров;*/
			/*ТаблицаПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.СкопироватьКолонки();*/
			/*ТаблицаПартий.Колонки.Добавить("РегистрУчета");*/
			return null;
		}
		// Функция находит и возвращает документ, являющийся отправной точкой исправлений (либо ПТУ либо корректировку ПТУ)
		// либо первоначальный документ ПТУ при передаче истины в параметр Исходный

		public object ПолучитьИсправляемыйДокументПоступления(/*ДокПоступления, Исходный = Ложь*/)
		{
			if(true/*ЗначениеЗаполнено(ДокПоступления) 
		И ТипЗнч(ДокПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")
		И (ДокПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки ИЛИ Исходный)*/)
			{
			}
			return null;
		}
		// Функция находит и возвращает документ, являющийся отправной точкой исправлений (либо РТУ либо корректировку РТУ)
		// либо первоначальный документ РТУ при передаче истины в параметр Исходный

		public object ПолучитьИсправляемыйДокументРеализации(/*ДокРеализации, Исходный = Ложь*/)
		{
			if(true/*ЗначениеЗаполнено(ДокРеализации) 
		И ТипЗнч(ДокРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И (ДокРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки ИЛИ Исходный)*/)
			{
			}
			return null;
		}
		// Получает версию постановления в зависимости от переданной даты
		//

		public object ПолучитьВерсиюПостановления(/*Дата*/)
		{
			/*НачалоПримененияИсправленныхСчетовФактур = Константы.НачалоПримененияИсправленныхСчетовФактур.Получить();*/
			if(true/*ЗначениеЗаполнено(НачалоПримененияИсправленныхСчетовФактур)
		И Дата >= НачалоПримененияИсправленныхСчетовФактур*/)
			{
				/*// Дата начала применения исправленных счетов-фактур задана и меньше или равна переданной даты
*/
			}
			return null;
		}
		// Процедура формирует список выбора кодов видов операций
		//
		// Параметры
		//  ЧастьЖурнала  - Перечисления.ЧастиЖурналаУчетаСчетовФактур - в зависимости от значения параметра
		//                 формируется список выбора
		//  СписокВыбора  - СписокЗначений - формируемый список кодов видов операций
		//

		public void ЗаполнитьСписокКодовВидовОпераций(/*ЧастьЖурнала, СписокВыбора*/)
		{
			/*СписокВыбора.Очистить();*/
			if(true/*ЧастьЖурнала = Перечисления.ЧастиЖурналаУчетаСчетовФактур.ПолученныеСчетаФактуры*/)
			{
				/*СписокВыбора.Добавить("01", "01 - полученные товары, работы, услуги");*/
				/*СписокВыбора.Добавить("02", "02 - авансы выданные");*/
				/*СписокВыбора.Добавить("03", "03 - возврат от покупателя");*/
				/*СписокВыбора.Добавить("04", "04 - полученные товары, работы, услуги от комитента");*/
				/*СписокВыбора.Добавить("05", "05 - авансы выданные комитенту");*/
				/*СписокВыбора.Добавить("10", "10 - полученные безвозмездно товары, работы, услуги");*/
				/*СписокВыбора.Добавить("11", "11 - полученные товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");*/
				/*СписокВыбора.Добавить("12", "12 - авансы выданные за товары, права, п.3,4,5.1 статьи 154, пп.1-4 статьи 155 НК");*/
				/*СписокВыбора.Добавить("13", "13 - капитальное строительство, модернизация (реконструкция) объектов недвижимости");*/
			}
		}
		// Функция определяет счет учета НДС по виду ценности

		public object ОпределитьСчетУчетаНДС(/*ВидЦенности*/)
		{
			if(true/*Не ЗначениеЗаполнено(ВидЦенности)*/)
			{
			}
			if(true/*ВидЦенности = Перечисления.ВидыЦенностей.Материалы
		Или ВидЦенности = Перечисления.ВидыЦенностей.Товары*/)
			{
			}
			return null;
		}
		// Формирует список счетов учета ценностей
		// ОС - основных средств
		// НМА - нематериальных активов
		// ВНА - внеоборотных активов
		// ОбъектыСтроительства - объектов строительства
		// Материалы - материалов
		//

		public object ОпределитьСчетаУчетаЦенностей(/*ОбъектыУчета = "", ДатаОбъекта = '00010101'*/)
		{
			/*ПланСчетовБУ = ПланыСчетов.Хозрасчетный;*/
			/*СчетаУчетаЗатрат = Новый СписокЗначений();*/
			if(true/*ОбъектыУчета = "Оборудование" Или ОбъектыУчета = "ВНА"*/)
			{
				if(true/*ДатаОбъекта >= '20060101'*/)
				{
					/*СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);*/
				}
			}
			if(true/*ОбъектыУчета = "ОС" Или ОбъектыУчета = "ВНА"*/)
			{
				if(true/*ДатаОбъекта < '20060101'*/)
				{
					/*СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);*/
				}
				/*СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);*/
			}
			if(true/*ОбъектыУчета = "НМА" Или ОбъектыУчета = "ВНА"*/)
			{
				/*СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);*/
			}
			if(true/*ОбъектыУчета = "ОбъектыСтроительства" Или ОбъектыУчета = "ВНА"*/)
			{
				/*СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);*/
			}
			if(true/*ОбъектыУчета = "Материалы"*/)
			{
				/*СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.Материалы);*/
			}
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";*/
			/*Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);*/
			/*СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));*/
			return null;
		}
		// Функция определяет вид ценнности по переданным в нее субконто счета учета.
		//

		public object ПолучитьЦенностьПоСубконто(/*Субконто1, Субконто2, Субконто3*/)
		{
			/*ВидЦенности = Неопределено;*/
			/*МассивСубконто = Новый Массив;*/
			/*МассивСубконто.Добавить(Субконто1);*/
			/*МассивСубконто.Добавить(Субконто2);*/
			/*МассивСубконто.Добавить(Субконто3);*/
			return null;
		}
		// ПолучитьЦенностьПоСубконто()
		// Выполняет общие для всех документов действия связанные с пометкой на удаление
		// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
		//
		// Параметры:
		//  ДокументОбъект  - объект документа,
		//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
		//

		public object СинхронизацияПометкиНаУдалениеУСчетаФактуры(/*ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", Отказ = Ложь*/)
		{
			if(true/*ДокументОбъект.ЭтоНовый()*/)
			{
			}
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = "ВЫБРАТЬ Док.ПометкаУдаления
	                |	ИЗ 
	                |   	Документ." + ДокументОбъект.Метаданные().Имя + " КАК Док
	                |   ГДЕ Док.Ссылка = &ДокументСсылка";*/
			/*Запрос.УстановитьПараметр("ДокументСсылка" , ДокументОбъект.Ссылка);*/
			/*РезультатЗапроса = Запрос.Выполнить();*/
			if(true/*РезультатЗапроса.Пустой()*/)
			{
			}
			/*Результат = РезультатЗапроса.Выгрузить();*/
			if(true/*ДокументОбъект.ПометкаУдаления <> ?(Результат.Количество() > 0, Результат[0].ПометкаУдаления,ложь)*/)
			{
				/*// Произошло изменение пометки на удаление
*/
				/*// Попытаемся найти счет-фактуру
*/
				/*СтруктураОтбора = Новый Структура("ПометкаУдаления", Не ДокументОбъект.ПометкаУдаления);*/
				/*СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры, СтруктураОтбора, ДокументОбъект.Ссылка);*/
				/*//Если потерпели неудачу, то необходимо ввести новый документ 
*/
				if(true/*ЗначениеЗаполнено(СчетФактура) И Не СчетФактура = ДокументОбъект.Ссылка*/)
				{
					/*// Есть счет-фактура, нужно установить для него пометку удаления
*/
					/*СчетФактураОбъект = СчетФактура.ПолучитьОбъект();*/
					if(true/*ДокументОбъект.ПометкаУдаления*/)
					{
						/*// Если в счете-фаткуре несколько оснований, счет-фактура не помечается на удаление,
*/
						/*// а очищается ссылка на текущее основание.
*/
						/*МетаданныеДокумента = СчетФактураОбъект.Метаданные();*/
						if(true/*МетаданныеДокумента.ТабличныеЧасти.Найти("ДокументыОснования") <> Неопределено
						И СчетФактураОбъект.ДокументыОснования.Количество() > СчетФактураОбъект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование",ДокументОбъект.Ссылка)).Количество()*/)
						{
							/*СтрокиКУдалению = СчетФактураОбъект.ДокументыОснования.НайтиСтроки(Новый Структура("ДокументОснование",ДокументОбъект.Ссылка));*/
							/*СчетФактураОбъект.ДокументОснование = СчетФактураОбъект.ДокументыОснования[0].ДокументОснование;*/
							/*СчетФактураОбъект.Записать();*/
							/*ОбщегоНазначения.Сообщение("Из документа «" + СчетФактура + "» удалена ссылка на «"+ДокументОбъект+"».");*/
						}
					}
					/*СчетФактураОбъект.УстановитьПометкуУдаления(ДокументОбъект.ПометкаУдаления);*/
					if(true/*ДокументОбъект.ПометкаУдаления*/)
					{
						/*ОбщегоНазначения.Сообщение("Документ «" + СчетФактура + "» помечен на удаление.");*/
					}
					/*Исключение
				Отказ = Истина;*/
					/*КонецПопытки;*/
				}
			}
			return null;
		}
		// СинхронизацияПометкиНаУдалениеУСчетаФактуры()
		// Выполняет общие для всех документов действия связанные с пометкой на удаление
		// счета-фактуры при удалении документа, являющегося основание данного счета-фактуры.
		//
		// Параметры:
		//  ДокументОбъект  - объект документа,
		//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
		//

		public void УстановкаПометкиНаУдалениеУСчетаФактуры(/*ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", ПометкаНаУдаление = Истина*/)
		{
			/*// Произошло изменение пометки на удаление
*/
			/*//Попытаемся найти счет-фактуру
*/
			/*СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры);*/
			/*//Если потерпели неудачу, то необходимо ввести новый документ 
*/
			if(true/*ЗначениеЗаполнено(СчетФактура) И СчетФактура.ПометкаУдаления <> ПометкаНаУдаление*/)
			{
				/*// Есть счет-фактура, нужно установить для него пометку удаления
*/
				/*СчетФактураОбъект = СчетФактура.ПолучитьОбъект();*/
				/*СчетФактураОбъект.УстановитьПометкуУдаления(ПометкаНаУдаление);*/
				if(true/*ПометкаНаУдаление*/)
				{
					/*ОбщегоНазначения.Сообщение("Документ <" + СчетФактураОбъект + "> помечен на удаление.");*/
				}
			}
		}
		// СинхронизацияПометкиНаУдалениеУСчетаФактуры()
		// Выполняет общие для всех документов действия связанные с проведением
		// счета-фактуры при проведении или отмене проведения документа, являющегося основание данного счета-фактуры.
		//
		// Параметры:
		//  ДокументОбъект  - объект документа,
		//  ВидСчетаФактуры - строка, вид счета-фактуры, по умолчанию "СчетФактураВыданный"
		//

		public void СинхронизацияПроведенияУСчетаФактуры(/*ДокументОбъект, ВидСчетаФактуры = "СчетФактураВыданный", Отказ = Неопределено*/)
		{
			/*СчетФактура = НайтиПодчиненныйСчетФактуру(ДокументОбъект.Ссылка, ВидСчетаФактуры);*/
			/*//Если потерпели неудачу, то необходимо ввести новый документ 
*/
			if(true/*ЗначениеЗаполнено(СчетФактура)
		И СчетФактура <> ДокументОбъект.Ссылка 
		И (ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") ИЛИ ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный"))*/)
			{
				if(true/*ДокументОбъект.Проведен И НЕ СчетФактура.Проведен*/)
				{
					/*// Есть счет-фактура не проведен, нужно провести (счет-фактура не проведен
*/
					if(true/*НЕ СчетФактура.ПометкаУдаления*/)
					{
						/*Попытка
					СчетФактураОбъект = СчетФактура.ПолучитьОбъект();*/
						/*СчетФактураОбъект.Записать(РежимЗаписиДокумента.Проведение);*/
						/*Исключение
					ОбщегоНазначения.СообщитьОбОшибке("Не удалось провести документ <" + СчетФактураОбъект + ">", Отказ, , СтатусСообщения.Важное);*/
						/*КонецПопытки;*/
					}
				}
			}
		}
		// СинхронизацияПроведенияУСчетаФактуры()

		public object ПроводитьПоРазделуУчетаНДС(/*ДатаДокумента*/)
		{
			/*//ДатаНачалаУчетаНДС = Константы.ДатаНачалаАвтоматическогоОтраженияВУчетеНДС.Получить();
*/
			/*//Возврат ДатаНачалаУчетаНДС < ДатаДокумента;
*/
			return null;
		}
		// Процедура проверяет соответствие реквизитов счета-фактуры и документа-основания.
		// В случае несоответствия реквизиты счета-фактуры перезаполняются и выдается сообщение пользователю.
		//
		// Параметры:
		//		- ДокОбъект - документ-основание
		//		- Сообщать  - флаг, если истина, то выводить сообщение пользователю, по умолчанию = Истина
		//
		// Возврат:
		//		- Истина, если различий не найдено, Ложь в противном случае
		//

		public object ПроверитьСоответствиеРеквизитовСчетаФактуры(/*ДокОбъект, ВидДокумента = "СчетФактураВыданный", Сообщать = Истина, НайденныйСФ = Неопределено*/)
		{
			if(true/*ТипЗнч(ДокОбъект.Ссылка) = Тип("ДокументСсылка.АвансовыйОтчет")*/)
			{
				/*Запрос = Новый Запрос;*/
				/*Запрос.Текст =
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.СчетФактура КАК СчетФактура
		|ИЗ
		|	Документ.АвансовыйОтчет.Товары КАК Таб
		|ГДЕ
		|	Таб.Ссылка = &Ссылка
		|	И Таб.ПредъявленСФ
		|	И Таб.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.СчетФактура
		|ИЗ
		|	Документ.АвансовыйОтчет.Прочее КАК Таб
		|ГДЕ
		|	Таб.Ссылка = &Ссылка
		|	И Таб.ПредъявленСФ
		|	И Таб.СчетФактура <> ЗНАЧЕНИЕ(Документ.СчетФактураПолученный.ПустаяСсылка)";*/
				/*Запрос.УстановитьПараметр("Ссылка", ДокОбъект.Ссылка);*/
				/*СчетаФактуры = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("СчетФактура");*/
				if(true/*СчетаФактуры.Количество() = 0*/)
				{
				}
			}
			return null;
		}

		public object ДляСчетаФактурыНеТребуетсяКонтрагент(/*СчетФактура*/)
		{
			return null;
		}

		public object ДляСчетаФактурыНеТребуетсяОплата(/*СчетФактура*/)
		{
			return null;
		}

		public object ПроводитьДокументДляЦелейНДС(/*СтруктураШапкиДокумента*/)
		{
			if(true/*СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН")
		И СтруктураШапкиДокумента.ОрганизацияПрименяетУСН*/)
			{
			}
			return null;
		}

		public void ДополнитьСтруктуруШапкиДокументаДляНДС(/*СтруктураШапкиДокумента, ДополнитьПараметрамиПартионногоУчета = Ложь*/)
		{
			/*УчетнаяПолитика = Неопределено;*/
			if(true/*Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		Или Не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС")*/)
			{
				/*УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);*/
				if(true/*Не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН")*/)
				{
					/*СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН", ?(Не ЗначениеЗаполнено(УчетнаяПолитика), 
																		Ложь, УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная));*/
				}
				if(true/*Не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС")*/)
				{
					/*СтруктураШапкиДокумента.Вставить("СложныйУчетНДС", ?(Не ЗначениеЗаполнено(УчетнаяПолитика), 
																Ложь, УчетнаяПолитика.СложныйУчетНДС));*/
				}
			}
			if(true/*Не СтруктураШапкиДокумента.Свойство("ИспользуетсяРасширеннаяАналитикаУчета")*/)
			{
				/*СтруктураШапкиДокумента.Вставить("ИспользуетсяРасширеннаяАналитикаУчета", УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата));*/
			}
			if(true/*ДополнитьПараметрамиПартионногоУчета*/)
			{
				/*ДополнитьПараметрамиПартионногоУчетаНДС(СтруктураШапкиДокумента, УчетнаяПолитика);*/
			}
		}

		public object ЕстьСложныйУчетНДСПоНоменклатурнойГруппе(/*Организация, Дата, НоменклатурнаяГруппа*/)
		{
			/*Отбор = Новый Структура("Организация, НоменклатурнаяГруппа", Организация, НоменклатурнаяГруппа);*/
			/*ДанныеПоНоменклатурнойГруппе = РегистрыСведений.НоменклатурныеГруппыДляРеализацииБезНДСиНДС0.ПолучитьПоследнее(Дата, Отбор);*/
			return null;
		}

		public object ВидыЦенностейНалоговыйАгент(/**/)
		{
			/*ВидыЦенностей_НА = Новый СписокЗначений;*/
			/*ВидыЦенностей_НА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);*/
			/*ВидыЦенностей_НА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);*/
			/*ВидыЦенностей_НА.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);*/
			return null;
		}

		public object СчетОтнесенияНДС(/*СтруктураШапкиДокумента*/)
		{
			if(true/*СтруктураШапкиДокумента.ВидДокумента = "ОтчетОРозничныхПродажах"*/)
			{
			}
			return null;
		}

		public object ВидыЦенностиНалоговыйАгентПоступление(/**/)
		{
			/*ВидыЦенностей = Новый Массив;*/
			/*ВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);*/
			/*ВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);*/
			/*ВидыЦенностей.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);*/
			return null;
		}

		public object НалоговыйАгентЗаСчетСобственныхСредств(/*ВидЦенностиВидДоговора*/)
		{
			if(true/*ТипЗнч(ВидЦенностиВидДоговора) = Тип("ПеречислениеСсылка.ВидыЦенностей")*/)
			{
				if(true/*ВидЦенностиВидДоговора = Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы*/)
				{
				}
			}
			return null;
		}
		//////////////////////////////////////////////////////////////////////////
		//  ОПЕРАТИВНЫЕ ДВИЖЕНИЯ РЕГИСТРОВ ПОДСИСТЕМЫ НДС
		// Формирует список счетов учета косвенных расходов

		public object ОпределитьСчетаУчетаКосвенныхРасходов(/**/)
		{
			/*ПланСчетовБУ = ПланыСчетов.Хозрасчетный;*/
			/*СчетаУчетаЗатрат = Новый СписокЗначений();*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОсновноеПроизводство);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОсновноеПроизводствоНеОблагаемоеЕНВД);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ВспомогательныеПроизводства);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ВспомогательныеПроизводстваНеОблагаемоеЕНВД);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщепроизводственныеРасходы);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщепроизводственныеРасходыНеОблагаемыеЕНВД);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщепроизводственныеРасходыРаспределяемые);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщехозяйственныеРасходы);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщехозяйственныеРасходыНеОблагаемыеЕНВД);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОбщехозяйственныеРасходыРаспределяемые);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ИздержкиОбращения);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ИздержкиОбращенияНеОблагаемыеЕНВД);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ИздержкиОбращенияРаспределяемые);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.КоммерческиеРасходы);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.КоммерческиеРасходыНеОблагаемыеЕНВД);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.КоммерческиеРасходыРаспределяемые);*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка
	|ИЗ
	|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ
	|		РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
	|	ПО
	|		Хозрасчетный.Ссылка = СчетаУчетаПоДеятельностиЕНВД.Счет
	|	
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
	|	И Не Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	И (СчетаУчетаПоДеятельностиЕНВД.Счет ЕСТЬ NULL 
	|	   ИЛИ СчетаУчетаПоДеятельностиЕНВД.ПодлежитРаспределению)
	|";*/
			/*Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);*/
			/*СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));*/
			return null;
		}
		// Формирует список счетов учета производственных расходов.
		//

		public object ОпределитьСчетаУчетаПроизводственныхРасходов(/**/)
		{
			/*ПланСчетовБУ = ПланыСчетов.Хозрасчетный;*/
			/*СчетаУчетаЗатрат = Новый СписокЗначений();*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ОсновноеПроизводство);*/
			/*СчетаУчетаЗатрат.Добавить(ПланСчетовБУ.ВспомогательныеПроизводства);*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = "ВЫБРАТЬ
	               |	Хозрасчетный.Ссылка
	               |ИЗ
	               |	ПланСчетов.Хозрасчетный КАК Хозрасчетный
	               |ГДЕ
	               |	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)";*/
			/*Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);*/
			/*СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));*/
			return null;
		}
		// ОпределитьСчетаУчетаПроизводственныхРасходов()
		// Формирует список счетов ОС, НМА и объектов строительства

		public object ОпределитьСчетаУчетаОСиНМА(/*ОбъектыУчета = "", ДатаОбъекта = '00010101'*/)
		{
			/*ПланСчетовБУ = ПланыСчетов.Хозрасчетный;*/
			/*СчетаУчетаЗатрат = Новый СписокЗначений();*/
			if(true/*ОбъектыУчета = "Оборудование" 
		Или Не ЗначениеЗаполнено(ОбъектыУчета)*/)
			{
				if(true/*ДатаОбъекта >= '20060101'*/)
				{
					/*СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);*/
				}
			}
			if(true/*ОбъектыУчета = "ОС" 
		Или Не ЗначениеЗаполнено(ОбъектыУчета)*/)
			{
				if(true/*ДатаОбъекта < '20060101'*/)
				{
					/*СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);*/
				}
				/*СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);*/
			}
			if(true/*ОбъектыУчета ="НМА" 
		Или Не ЗначениеЗаполнено(ОбъектыУчета)*/)
			{
				/*СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов);*/
			}
			if(true/*Не ЗначениеЗаполнено(ОбъектыУчета)*/)
			{
				/*СчетаУчетаЗатрат.Добавить(ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);*/
			}
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	Хозрасчетный.Ссылка
		|ИЗ
		|	ПланСчетов.Хозрасчетный КАК Хозрасчетный
		|ГДЕ
		|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&СписокСчетов)
		|	И Хозрасчетный.ЗапретитьИспользоватьВПроводках = ЛОЖЬ";*/
			/*Запрос.УстановитьПараметр("СписокСчетов",СчетаУчетаЗатрат);*/
			/*СчетаУчетаЗатрат.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));*/
			return null;
		}
		// Процедура вызывается из модулей документов списания

		public void СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(/*СтруктураШапкиДокумента, ТаблицаДвиженийПартий, Движения, Отказ*/)
		{
			/*УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);*/
			if(true/*НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ)*/)
			{
				/*Отказ = Истина;*/
			}
			if(true/*Отказ*/)
			{
			}
			if(true/*(УчетнаяПолитикаНУ.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная)*/)
			{
				/*// Движения по этому документу делать не нужно
*/
			}
			if(true/*УчетнаяПолитикаНУ.СложныйУчетНДС*/)
			{
				/*СчетаУчетаКосвенныхРасходов = ОпределитьСчетаУчетаКосвенныхРасходов();*/
				/*ТаблицаДвижений_НДСКосвенныеРасходы	= Движения.ТаблицаДвиженийНДСКосвенныеРасходы;*/
				if(true/*ТаблицаДвижений_НДСКосвенныеРасходы.Количество() > 0*/)
				{
					/*ТаблицаДвижений_НДСКосвенныеРасходы.ЗаполнитьЗначения(Движения.Период,"Период");*/
					/*Движения.Вставить("ИзмененыДвиженияНДСКосвенныеРасходы", Истина);*/
				}
			}
		}
		// СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы()

		public void РаспределитьРасходыПоВНАнаСпособыОтраженияРасходовПоАмортизации(/*СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ*/)
		{
			if(true/*не СтруктураШапкиДокумента.Свойство("ОрганизацияПрименяетУСН") 
		или не СтруктураШапкиДокумента.Свойство("СложныйУчетНДС")*/)
			{
				/*УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);*/
				/*СтруктураШапкиДокумента.Вставить("ОрганизацияПрименяетУСН",(ЗначениеЗаполнено(УчетнаяПолитика) И (УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная)));*/
				/*СтруктураШапкиДокумента.Вставить("СложныйУчетНДС",(ЗначениеЗаполнено(УчетнаяПолитика) И УчетнаяПолитика.СложныйУчетНДС));*/
			}
			if(true/*СтруктураШапкиДокумента.ОрганизацияПрименяетУСН*/)
			{
				/*// Движения по этому документу делать не нужно
*/
			}
			if(true/*не СтруктураШапкиДокумента.СложныйУчетНДС*/)
			{
				/*// Движения по этому документу делать не нужно
*/
			}
			/*ЕстьКолонкаСпособОтраженияРасходов = не ДанныеДляОбработки.Колонки.Найти("СпособОтраженияРасходов") = Неопределено;*/
			/*ЕстьКолонкаНазначениеИспользования = не ДанныеДляОбработки.Колонки.Найти("НазначениеИспользования") = Неопределено;*/
			if(true/*не (ЕстьКолонкаСпособОтраженияРасходов ИЛИ ЕстьКолонкаНазначениеИспользования)*/)
			{
				/*// Отсутствует базис распределения
*/
			}
			/*// Отражение списанных партий в составе косвенных расходов
*/
			/*ТаблицаНДСПартииСписания = ДанныеДляОбработки.СкопироватьКолонки();*/
			/*БазисРаспределенияПоСпособуОтражения = Новый Соответствие;*/
			/*СчетаУчетаКосвенныхРасходов = ОпределитьСчетаУчетаКосвенныхРасходов();*/
			/*СчетаУчетаПроизводственныхРасходов = ОпределитьСчетаУчетаПроизводственныхРасходов();*/
			/*СтрокиКУдалению = Новый Массив();*/
			/*ТаблицаНДСПартииСписания.Колонки.Добавить("ТаблицаРаспределенияРасходов");*/
			if(true/*ТаблицаНДСПартииСписания.Количество()=0*/)
			{
				/*// Дальнейшая отработка не требуется
*/
			}
			/*/////////////////////////////////////////////////////////////////////////////////
*/
			/*// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
*/
			/*СписокРаспределяемыхКолонок = Новый Структура("Стоимость, НДС","Коэффициент","Коэффициент");*/
			/*СписокИсключаемыхКолонок = новый Структура("QuieryId,Активность"+
										",ДействияНДСПокупки_ВключитьВСтоимость,ДействияНДСПокупки_ИсключитьИзСтоимости,ДействияНДСПокупки_ПредположениеСтавки0"+
										",ДоговорКонтрагента,ДоговорПоставщика,ДокументОприходования,Количество,Комиссионный"+
										",МоментВремени,Период,Регистратор,СодержаниеПроводки,СписанныеПартииВР,СписанныеПартииПР,СписыватьПоУказаннойСтоимости,СпособОтраженияРасходов,СпособПогашенияСтоимости,Ссылка"+
										",НомерСтроки,Партия, ВидДвижения, СуммаБезНДС");*/
			/*ТаблицаРасходовКРаспределению = ОбщегоНазначения.РазвернутьПоВложеннойТаблице(ТаблицаНДСПартииСписания, "ТаблицаРаспределенияРасходов",СписокРаспределяемыхКолонок, СписокИсключаемыхКолонок);*/
			/*ТаблицаРасходовКРаспределению.Колонки.Удалить(ТаблицаРасходовКРаспределению.Колонки.Подразделение);*/
			/*ТаблицаРасходовКРаспределению.Колонки.ПодразделениеОрганизации.Имя = "Подразделение";*/
			if(true/*ТаблицаРасходовКРаспределению.Колонки.Найти("СуммаБезНДС") = Неопределено*/)
			{
				/*ТаблицаРасходовКРаспределению.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));*/
			}
			/*СтрокиКосвенныхРасходов = ТаблицаРасходовКРаспределению.НайтиСтроки(Новый Структура("ОтражатьВСоставеКР", Истина));*/
			/*ТаблицаКосвенныхРасходов = РегистрыНакопления.НДСКосвенныеРасходы.СоздатьНаборЗаписей().ВыгрузитьКолонки();*/
			if(true/*ТаблицаКосвенныхРасходов.Количество()>0*/)
			{
				/*СформироватьДвиженияНДСКосвенныеРасходы(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаКосвенныхРасходов, Отказ,СчетаУчетаКосвенныхРасходов,СчетаУчетаПроизводственныхРасходов);*/
			}
			/*СтрокиПроизводственныхРасходов = ТаблицаРасходовКРаспределению.НайтиСтроки(Новый Структура("ОтражатьВСоставеПР", Истина));*/
			/*ТаблицаПроизводственныхРасходов = ТаблицаРасходовКРаспределению.СкопироватьКолонки();*/
			if(true/*ТаблицаПроизводственныхРасходов.Количество()>0*/)
			{
				/*СформироватьДвиженияНДСНезавершенноеПроизводство(СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПроизводственныхРасходов, Отказ);*/
			}
		}

		public void СформироватьДвиженияНДСКосвенныеРасходы(/*СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ,СчетаУчетаКосвенныхРасходов = Неопределено,СчетаУчетаПроизводственныхРасходов = Неопределено*/)
		{
			if(true/*ДанныеДляОбработки.Колонки.Найти("СтатьяЗатрат") = Неопределено*/)
			{
			}
			if(true/*не ЗначениеЗаполнено(СчетаУчетаКосвенныхРасходов)*/)
			{
				/*СчетаУчетаКосвенныхРасходов				= ОпределитьСчетаУчетаКосвенныхРасходов();*/
			}
			if(true/*не ЗначениеЗаполнено(СчетаУчетаПроизводственныхРасходов)*/)
			{
				/*СчетаУчетаПроизводственныхРасходов		= ОпределитьСчетаУчетаПроизводственныхРасходов();*/
			}
			/*ЕстьКолонкаНоменклатурнаяГруппа = не ДанныеДляОбработки.Колонки.Найти("НоменклатурнаяГруппа") = Неопределено;*/
		}
		//СформироватьДвиженияНДСКосвенныеРасходы()
		//////////////////////////////////////////////////////////////////////////
		// НДС РЕАЛИЗАЦИИ
		// Начисляет НДС при реализации по бухгалтерскому учету
		//
		// Параметры:
		//	Нет.
		//

		public void НачислитьНДСРеализации(/*НДС, СтрокаДокумента, СтруктураПараметров*/)
		{
			/*// При нулевом НДС проводки не формируем.
*/
			if(true/*НДС=0*/)
			{
			}
			if(true/*ТипЗнч(СтруктураПараметров) = Тип("Структура")*/)
			{
				/*ТаблицаДвижений_Хозрасчетный		= СтруктураПараметров.ДвиженияХозрасчетный;*/
			}
			/*ВтораяПроводка = ТаблицаДвижений_Хозрасчетный.Добавить();*/
			/*ВтораяПроводка.Период        = СтруктураПараметров.Период;*/
			/*ВтораяПроводка.Регистратор   = СтруктураПараметров.Регистратор;*/
			/*ВтораяПроводка.Активность    = Истина;*/
			/*ВтораяПроводка.Содержание = "Реализация";*/
			/*ВтораяПроводка.Организация   = СтрокаДокумента.Организация;*/
			/*// Счет расходов по НДС - могут быть бва варианта субсчет 91 и субсчет 90
*/
			if(true/*БухгалтерскийУчет.ЭтоСубсчет(СтрокаДокумента.КорСчетБУ, ПланыСчетов.Хозрасчетный.ПрочиеДоходыИРасходы)*/)
			{
				/*ВтораяПроводка.СчетДт = СтрокаДокумента.КорСчетБУ;*/
				if(true/*ТипЗнч(СтрокаДокумента.КорСубконтоБУ2) = Тип("СправочникСсылка.ПрочиеДоходыИРасходы")*/)
				{
					/*БухгалтерскийУчет.УстановитьСубконто(ВтораяПроводка.СчетДт, ВтораяПроводка.СубконтоДт, 1, СтрокаДокумента.КорСубконтоБУ2);*/
				}
			}
			if(true/*ТипЗнч(СтрокаДокумента.КорСубконтоБУ2) = Тип("СправочникСсылка.НоменклатурныеГруппы")*/)
			{
				/*БухгалтерскийУчет.УстановитьСубконто(ВтораяПроводка.СчетДт, ВтораяПроводка.СубконтоДт, 1, СтрокаДокумента.КорСубконтоБУ2);*/
			}
			/*БухгалтерскийУчет.УстановитьСубконто(ВтораяПроводка.СчетДт, ВтораяПроводка.СубконтоДт, 2, СтрокаДокумента.СтавкаНДС);*/
			/*МоментыОпределенияНалоговойБазыНДС = УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("МоментОпределенияНалоговойБазыНДС", "Бух", СтруктураПараметров);*/
			/*// Отчет о розничных продажах должен формировать проводку по отнесению НДС на счет 68 непосредственно,
*/
			/*// вне зависимости от момента определения налоговой базы для НДС, указанного в учетной политике, так 
*/
			/*// как при реализации в розницу выручка, отраженная в отчете о розничных продажах сразу считается оплаченной
*/
			if(true/*СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.РеализацияРозница
	   ИЛИ МоментыОпределенияНалоговойБазыНДС = Перечисления.МоментыОпределенияНалоговойБазыНДС.ПоОтгрузке*/)
			{
				/*ВтораяПроводка.СчетКт = ПланыСчетов.Хозрасчетный.НДС;*/
				/*ВтораяПроводка.СубконтоКт.ВидыПлатежейВГосБюджет = Перечисления.ВидыПлатежейВГосБюджет.Налог;*/
			}
			/*ВтораяПроводка.Сумма = НДС;*/
		}
		// НачислитьНДСРеализации()
		////////////////////////////////////////////////////////////////////////////////////////////////////
		//  ОТРАЖЕНИЕ Предположения ставки 0% при реализации

		public void ОтразитьПредположениеСтавки0(/*СтруктураШапкиДокумента, ТаблицаСписания, СтруктураПараметров, Заголовок*/)
		{
			if(true/*ТипЗнч(СтруктураШапкиДокумента.Ссылка) = Тип("ДокументСсылка.РеализацияОтгруженныхТоваров")
		И СтруктураШапкиДокумента.НачислятьНДСПоОтгрузке*/)
			{
			}
			/*Построитель_ТаблицаСписания = Новый ПостроительЗапроса();*/
			/*ОписаниеИсточника_ТаблицаСписания = Новый ОписаниеИсточникаДанных(ТаблицаСписания);*/
			/*Построитель_ТаблицаСписания.ИсточникДанных = ОписаниеИсточника_ТаблицаСписания;*/
			/*Отбор = Построитель_ТаблицаСписания.Отбор;*/
			/*Отбор.Добавить("ДействияНДСПокупки_ПредположениеСтавки0");*/
			/*Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Значение = Истина;*/
			/*Отбор["ДействияНДСПокупки_ПредположениеСтавки0"].Использование = Истина;*/
			/*Построитель_ТаблицаСписания.Выполнить();*/
			/*ДанныеДляОбработки = Построитель_ТаблицаСписания.Результат.Выгрузить();*/
			if(true/*ДанныеДляОбработки.Колонки.Найти("СуммаБезНДС") = Неопределено*/)
			{
				/*ДанныеДляОбработки.Колонки.Добавить("СуммаБезНДС",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));*/
			}
			if(true/*ДанныеДляОбработки.Количество()>0*/)
			{
				/*СтрокиКУдалению = новый Массив();*/
			}
			if(true/*ДанныеДляОбработки.Количество() = 0*/)
			{
				/*//Отражение предположения 0% по данному набору не требуется
*/
			}
			/*Запрос = Новый Запрос;*/
			/*Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);*/
			/*Запрос.УстановитьПараметр("СчетаФактуры",       ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ДанныеДляОбработки.ВыгрузитьКолонку("СчетФактура")));*/
			/*Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДСПредъявленныйОбороты.Поставщик,
	|	НДСПредъявленныйОбороты.СчетФактура
	|ИЗ
	|	РегистрНакопления.НДСПредъявленный.Обороты(
	|		,
	|		,
	|		,
	|		Организация = &Организация
	|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
	|ГДЕ
	|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";*/
			/*КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();*/
			/*ДанныеДляОбработки.Колонки.Добавить("Поставщик");*/
			/*ДанныеДляОбработки.Колонки.Добавить("Событие");*/
			/*ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.СобытияПоНДСПокупки.ПредполагаетсяСтавка0,"Событие");*/
			if(true/*ДанныеДляОбработки.Колонки.Найти("ДокументОтгрузки") = неопределено*/)
			{
				/*ДанныеДляОбработки.Колонки.Добавить("ДокументОтгрузки");*/
			}
			/*ДанныеДляОбработки.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"ДокументОтгрузки");*/
			if(true/*ДанныеДляОбработки.Колонки.Найти("ВидДвижения") = неопределено*/)
			{
				/*ДанныеДляОбработки.Колонки.Добавить("ВидДвижения");*/
			}
			/*ДанныеДляОбработки.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");*/
			/*// Отразить в регистре НДСПредъявленныйРеализация0
*/
			if(true/*ДанныеДляОбработки.Колонки.Найти("Состояние") = неопределено*/)
			{
				/*ДанныеДляОбработки.Колонки.Добавить("Состояние");*/
			}
			/*ДанныеДляОбработки.ЗаполнитьЗначения(Перечисления.НДССостоянияРеализация0.ОжидаетсяПодтверждение,"Состояние");*/
			/*//Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
*/
			/*////////////////////////////////////////////////////////
*/
			/*// Движения по НДС партии и по регистру бухгалтерии
*/
			/*//Для каждого СтрокаСписания Из ДанныеДляОбработки Цикл
*/
			/*// Движения по НДС партии и по регистру бухгалтерии
*/
			/*////////////////////////////////////////////////////////
*/
		}
		// ОтразитьПредположениеСтавки0()

		public void СформироватьПроводкиПоПредположениюСтавки0(/*СтруктураШапкиДокумента,СтрокаДвижения, НаборДвиженийХозрасчетный,Заголовок*/)
		{
			if(true/*НЕ ЗначениеЗаполнено(СтрокаДвижения.НДС)*/)
			{
				/*//Формирование проводки не требуется
*/
			}
			/*// отразим факт включения НДС в стоимость соотвествующей проводкой 
*/
			/*СтрокаДвиженияПроводка = НаборДвиженийХозрасчетный.Добавить();*/
			/*// проводка, отражающая включение НДС в стоимость
*/
			/*СтрокаДвиженияПроводка.СчетДт = ПланыСчетов.Хозрасчетный.НДСПоТоварамРеализованнымПоСтавке0;*/
			/*БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "Контрагенты", СтрокаДвижения.Поставщик);*/
			/*БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "СФПолученные", СтрокаДвижения.СчетФактура);*/
			/*БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетДт, СтрокаДвиженияПроводка.СубконтоДт, "ДокументыРеализации", СтрокаДвижения.ДокументОтгрузки);*/
			/*СтрокаДвиженияПроводка.СчетКт = СтрокаДвижения.СчетУчетаНДС;*/
			/*// 19.хх
*/
			/*БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "Контрагенты", СтрокаДвижения.Поставщик);*/
			/*БухгалтерскийУчет.УстановитьСубконто(СтрокаДвиженияПроводка.СчетКт, СтрокаДвиженияПроводка.СубконтоКт, "СФПолученные", СтрокаДвижения.СчетФактура);*/
			/*СтрокаДвиженияПроводка.Содержание = "В связи с применением НДС 0% по реализации";*/
			/*СтрокаДвиженияПроводка.Сумма        = СтрокаДвижения.НДС;*/
			/*СтрокаДвиженияПроводка.Период       = СтруктураШапкиДокумента.Дата;*/
			/*СтрокаДвиженияПроводка.Организация  = СтрокаДвижения.Организация;*/
			/*СтрокаДвиженияПроводка.НомерЖурнала = "НДС";*/
			/*СтрокаДвиженияПроводка.НДСПродукции = Истина;*/
		}
		//////////////////////////////////////////////////////////////////////////
		//  ДВИЖЕНИЯ ПО НДС ПРИ ИСПОЛЕНИИ КОМИССИОНЕРОМ ОБЯЗАННОСТЕЙ НАЛОГОВОГО АГЕНТА

		public void ОтразитьНДСНалоговогоАгентаКомиссионер(/*СтруктураШапкиДокумента, ТаблицаВыручки, Движения*/)
		{
			if(true/*СтруктураШапкиДокумента.УчитыватьНДС*/)
			{
			}
		}
		////////////////////////////////////////////////////////////////////////////////////////////////////
		//  ОТРАЖЕНИЯ ДВИЖЕНИЙ СВЯЗАННЫХ С ОБЪЕКТАМИ СТРОИТЕЛЬСТВА, ОС И НМА

		public void СформироватьДвиженияПоРегиструНДСпоОСиНМА_СписаниеМатериаловНаОСиНМА(/*СтруктураШапкиДокумента, ТаблицаДвиженийПартий, Движения, Отказ*/)
		{
			/*УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);*/
			if(true/*НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ)*/)
			{
				/*Отказ = Истина;*/
			}
			if(true/*(УчетнаяПолитикаНУ.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная)*/)
			{
				/*// Движения по этому документу делать не нужно
*/
			}
			/*ТаблицаДвижений_НДСпоОСиНМА	= Движения.ТаблицаДвиженийНДСпоОСиНМА;*/
			/*ТаблицаДвижений_НДСпоОСиНМА.Колонки.СуммаБезНДС.Имя = "Стоимость";*/
			/*ОсобыеУсловияБлокировкиВычета2006 = (СтруктураШапкиДокумента.Дата >= '20060101');*/
			if(true/*ОсобыеУсловияБлокировкиВычета2006*/)
			{
				/*ВидыЦенностей_ВычетБлокируется = новый СписокЗначений();*/
				/*ВидыЦенностей_ВычетБлокируется.Добавить(Перечисления.ВидыЦенностей.ОС);*/
				/*ВидыЦенностей_ВычетБлокируется.Добавить(Перечисления.ВидыЦенностей.Оборудование);*/
				/*ВидыЦенностей_ВычетБлокируется.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежиОС);*/
			}
			/*ТаблицаДвижений_НДСпоОСиНМА.Колонки.Стоимость.Имя = "СуммаБезНДС";*/
			if(true/*ТаблицаДвижений_НДСпоОСиНМА.Количество() > 0*/)
			{
				/*ТаблицаДвижений_НДСпоОСиНМА.ЗаполнитьЗначения(Движения.Период,"Период");*/
				/*Движения.Вставить("ИзмененыДвиженияНДСпоОСиНМА", Истина);*/
			}
		}
		//////////////////////////////////////////////////////////////////////////
		// НДС ПРОИЗВОДСТВА

		public void СформироватьДвиженияНДСНезавершенноеПроизводство(/*СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ*/)
		{
			if(true/*Не УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата)*/)
			{
				/*ТаблицаНДСКосвенныеРасходы = ДанныеДляОбработки.СкопироватьКолонки();*/
			}
			if(true/*ТаблицаНДСКосвенныеРасходы.Количество() > 0*/)
			{
				/*// Списываем на косвенные расходы
*/
				/*СформироватьДвиженияПоРегиструНДСКосвенныеРасходы_СписаниеМатериаловНаКосвенныеРасходы(СтруктураШапкиДокумента, ТаблицаНДСКосвенныеРасходы, СтруктураПараметров, Отказ);*/
			}
		}
		//СформироватьДвиженияНДСНезавершенноеПроизводство()
		// Возвращает признак принадлежности номенклатурной группы к реализации по ставке 0% и без НДС
		//
		// Параметры:
		//	Нет.
		//
		// Возвращаемое значение:
		//
		//

		public object ЭтоНоменклатурнаяГруппаДляРеализацииБезНДСиНДС0(/*Организация, НоменклатурнаяГруппа, СтруктураПараметров*/)
		{
			return null;
		}
		// ЭтоНоменклатурнаяГруппаДляРеализацииБезНДСиНДС0(СтрокаДокумента.НоменклатурнаяГруппа, СтруктураПараметров)
		// Возвращает номенклатурные группы для реализации по ставке 0% и без НДС
		//
		// Параметры:
		//	Нет.
		//
		// Возвращаемое значение:
		//	ТаблицаЗначений
		//

		public object ПолучитьНоменклатурныеГруппыДляРеализацииБезНДСиНДС0(/*ДатаКон, МассивОрганизаций, СтруктураПараметров*/)
		{
			/*Инд=0;*/
			if(true/*ТипЗнч(МассивОрганизаций) = Тип("Массив")*/)
			{
				while(true/*Инд<МассивОрганизаций.Количество()*/)
				{
					if(true/*УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СложныйУчетНДС", "Нал", СтруктураПараметров)=Ложь*/)
					{
						/*МассивОрганизаций.Удалить(Инд);*/
					}
				}
				/*;;*/
			}
			/*Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних.Организация,
	|	НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних.НоменклатурнаяГруппа
	|ИЗ
	|	РегистрСведений.НоменклатурныеГруппыДляРеализацииБезНДСиНДС0.СрезПоследних(&ДатаКон, Организация В (&МассивОрганизаций)) КАК НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних
	|
	|ГДЕ
	|	(НоменклатурныеГруппыДляРеализацииБезНДСиНДС0СрезПоследних.СложныйУчетНДС = ИСТИНА)");*/
			/*Запрос.УстановитьПараметр("ДатаКон", ДатаКон);*/
			/*Запрос.УстановитьПараметр("МассивОрганизаций", МассивОрганизаций);*/
			return null;
		}
		// ПолучитьНоменклатурныеГруппыДляРеализацииБезНДСиНДС0()
		//////////////////////////////////////////////////////////////////////////
		// ВОЗВРАТ ТОВАРОВ ПОСТАВЩИКУ

		public void ДвиженияВозвратаТоваровПоставщикуПоРегистрамПодсистемыНДС(/*СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаПартий, ТаблицаВозвратов, Отказ, Заголовок*/)
		{
			if(true/*не СтруктураШапкиДокумента.УчитыватьНДС*/)
			{
			}
			/*СчетНДС = ПланыСчетов.Хозрасчетный.НДС;*/
			/*ТаблицаПоПартиямБУ = РаспределитьПартииПоТаблицеСписания(ТаблицаПартий, ТаблицаВозвратов, СтруктураШапкиДокумента, СтруктураПараметров);*/
			/*ТаблицаПоПартиямБУ.Колонки.Добавить("НомерСтрокиТаблицыПоПартиямБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));*/
			/*НомерСтроки = 0;*/
			/*//////////////////////////////////////////////////////////////////////////
*/
			/*// Попытка списания товаров по партионному учету НДС
*/
			/*/////////////////////////////////////////////////////////////////////////////////
*/
			/*//При учете "По средней" или если партионный учет по БУ не ведется - партия может быть незаполнена.
*/
			if(true/*ТаблицаПоПартиямБУ.Колонки.Найти("Партия") = Неопределено*/)
			{
				/*ТаблицаПоПартиямБУ.Колонки.Добавить("Партия");*/
			}
			/*ТаблицаНДСПартииСписания = ОпределитьПартииСписанияПоРегиструНДСПартии(СтруктураШапкиДокумента, ТаблицаПоПартиямБУ.Скопировать(), Отказ, Заголовок, Истина, Ложь, СтруктураПараметров);*/
			/*// Подготовка таблицы списания по партиям товаров по данным партионного учета НДС
*/
			/*/////////////////////////////////////////////////////////////////////////////////
*/
			/*/////////////////////////////////////////////////////////////////////////////////
*/
			/*// НДС по партиям - отразить непосредственое списание.
*/
			if(true/*не ТаблицаНДСПартииСписания.Количество() = 0*/)
			{
				/*//Партии найдены (хотя бы частично). Отразим в партионном учете НДС.
*/
				/*ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров;*/
				/*СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПартииТоваров", Истина);*/
				/*ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаНДСПартииСписания, ТаблицаДвиженийПартии);*/
				/*ТаблицаДвиженийПартии.ЗаполнитьЗначения(СтруктураПараметров.Период,"Период");*/
				/*// Делаем не расход, а сторно прихода по регистру.
*/
				/*/////////////////////////////////////////////////////////////////////////////////
*/
				/*// НДС по ОС - ТМЦ могли принадлежать к будущим ОС,
*/
				/*// в этом случае при возврате необходимо снять блокировку с вычета.
*/
				/*УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, СтруктураПараметров, Отказ);*/
				/*// НДС по ОС
*/
				/*/////////////////////////////////////////////////////////////////////////////////
*/
			}
			/*// НДС по партиям - отразить непосредственое списание.
*/
			/*///////////////////////////
*/
			/*СуммаНДСПоСтрокам = ОбщегоНазначения.СформироватьТаблицуЗначений(ТаблицаПоПартиямБУ,Новый структура("НомерСтрокиТаблицыПоПартиямБУ, НДС,СуммаБезНДС"));*/
			/*ТаблицаПроводокПоНДС = Новый ТаблицаЗначений();*/
			/*ТаблицаПроводокПоНДС.Колонки.Добавить("НомерСтрокиДокумента", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));*/
			/*ТаблицаПроводокПоНДС.Колонки.Добавить("НомерСтрокиТаблицыПоПартиямБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10,0)));*/
			/*ТаблицаПроводокПоНДС.Колонки.Добавить("СчетФактура");*/
			/*ТаблицаПроводокПоНДС.Колонки.Добавить("Поставщик", Новый ОписаниеТИпов("СправочникСсылка.Контрагенты"));*/
			/*ТаблицаПроводокПоНДС.Колонки.Добавить("СчетУчетаНДС");*/
			/*ТаблицаПроводокПоНДС.Колонки.Добавить("НДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));*/
			/*ТаблицаПроводокПоНДС.Колонки.Добавить("НДСВал", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));*/
			/*// Попытка списания товаров по партионному учету НДС
*/
			/*//////////////////////////////////////////////////////////////////////////
*/
			/*СокращеннаяТаблицаСФВозвратов = ТаблицаНДСПартииСписания.Скопировать();*/
			/*СокращеннаяТаблицаСФВозвратов.Свернуть("НомерСтрокиДокумента, НомерСтрокиТаблицыПоПартиямБУ, СчетФактура,Номенклатура,ВидЦенности, СтавкаНДС, НДСВключенВСтоимость,СчетУчетаНДС, ДокументПартии, ПартияСовпадаетСУказаннымДокументомДляВозврата","Количество,Стоимость, НДС,КорВалютнаяСуммаНДСЗадолженностиБУ");*/
			/*СокращеннаяТаблицаСФВозвратов.Колонки.Добавить("СуммаБезНДС", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));*/
			/*// Определение поставщика по счету-фактуре
*/
			if(true/*СокращеннаяТаблицаСФВозвратов.Количество()>0*/)
			{
				/*Запрос = Новый Запрос;*/
				/*Запрос.УстановитьПараметр("Организация",  СтруктураШапкиДокумента.Организация);*/
				/*Запрос.УстановитьПараметр("СчетаФактуры",       ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СокращеннаяТаблицаСФВозвратов.ВыгрузитьКолонку("СчетФактура"),Истина));*/
				/*Запрос.УстановитьПараметр("ПустойКонтрагент",   Справочники.Контрагенты.ПустаяСсылка());*/
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДСПредъявленныйОбороты.Поставщик,
		|	НДСПредъявленныйОбороты.СчетФактура
		|ИЗ
		|	РегистрНакопления.НДСПредъявленный.Обороты(
		|		,
		|		,
		|		,
		|		Организация = &Организация
		|		    И СчетФактура В (&СчетаФактуры)) КАК НДСПредъявленныйОбороты
		|ГДЕ
		|	НДСПредъявленныйОбороты.Поставщик <> &ПустойКонтрагент";*/
				/*КонтрагентПоСчетуФактуре = Запрос.Выполнить().Выгрузить();*/
				/*СокращеннаяТаблицаСФВозвратов.Колонки.Добавить("Поставщик", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));*/
			}
			/*ОтразитьВКнигеПродаж =  (СтруктураШапкиДокумента.Дата>='20060530');*/
			if(true/*ОтразитьВКнигеПродаж*/)
			{
				if(true/*Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат*/)
				{
					/*ВидНачисления = Перечисления.НДСВидНачисления.НДСВосстановлен;*/
				}
			}
			if(true/*ОтразитьВКнигеПродаж и СтруктураПараметров.ТаблицаДвиженийНДСНачисленный.Количество()>1*/)
			{
				/*ТаблицаДвижений_НДСНачисленный = СтруктураПараметров.ТаблицаДвиженийНДСНачисленный;*/
				/*// Сворачивание записей регистра "НДС Начисленный"
*/
				/*СуммовыеКолонки = "СуммаБезНДС, НДС";*/
				/*ГруппировочныеКолонки = "";*/
				/*ГруппировочныеКолонки = Лев(ГруппировочныеКолонки, СтрДлина(ГруппировочныеКолонки)-1);*/
				/*ТаблицаДвижений_НДСНачисленный.Свернуть(ГруппировочныеКолонки,СуммовыеКолонки);*/
				/*// Удаление записей с пустыми суммами
*/
				/*СтрокиКУдалению =  ТаблицаДвижений_НДСНачисленный.НайтиСтроки(Новый Структура("СуммаБезНДС, НДС",0,0));*/
			}
			/*//Формирование проводок по отнесению НДС на счет расчетов по претензиям
*/
			/*НомерСтрокиТаблицыПоПартиямБУ = 0;*/
			/*Коэффициент = 0;*/
			if(true/*Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат*/)
			{
				/*ТаблицаПроводокПоНДС.Свернуть("НомерСтрокиДокумента, НомерСтрокиТаблицыПоПартиямБУ, Поставщик, СчетФактура, СчетУчетаНДС","НДС, НДСВал");*/
			}
			/*СтруктураПараметров.Вставить("ВозвратНДС",   ВозвратНДС);*/
			/*СтруктураПараметров.Вставить("ВозвратНДСВал",ВозвратНДСВал);*/
			if(true/*СтруктураШапкиДокумента.УчетАгентскогоНДС И Не СтруктураШапкиДокумента.ПоставщикуВыставляетсяСчетФактураНаВозврат*/)
			{
				/*ПроводкаНДСПоСтроке = ТаблицаПроводокПоНДС.Добавить();*/
				/*//ПроводкаНДСПоСтроке.НомерСтрокиТаблицыПоПартиямБУ = СтрокаВозврата.НомерСтрокиТаблицыПоПартиямБУ;
*/
				/*//ПроводкаНДСПоСтроке.СчетФактура	= СтрокаВозврата.ДокументПартии;
*/
				/*//ПроводкаНДСПоСтроке.Поставщик 	= СтруктураШапкиДокумента.Контрагент;
*/
				/*ПроводкаНДСПоСтроке.НДС 		= (-1) * ТаблицаПоПартиямБУ.Итог("НДС");*/
				if(true/*СтруктураШапкиДокумента.СчетУчетаРасчетовПоПретензиям.Валютный*/)
				{
					/*ПроводкаНДСПоСтроке.НДСВал 		= (-1) * ТаблицаПоПартиямБУ.Итог("КорВалютнаяСуммаНДСЗадолженностиБУ");*/
				}
			}
		}
		// ДвиженияПоРегистрамПодсистемыНДС()
		////////////////////////////////////////////////////////////////////////////////
		// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ СТРУКТУРУ ДАННЫХ ДЛЯ ПЕРЕДАЧИ В УЧЕТ НДС

		public void ОпределитьСоставКолонокТаблицаСписанныхПартийНДС(/*СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок, СписаниеОС = Ложь*/)
		{
			/*КодыОпераций = СтруктураПараметров.КодыОпераций;*/
			/*//**************************************************
*/
			/*// Возможно получение информации из шапки документа
*/
			/*СтруктураКолонок.Вставить("Организация");*/
			/*СтруктураКолонок.Вставить("ДоговорКонтрагента");*/
			/*СтруктураКолонок.Вставить("ОтражатьВБухгалтерскомУчете");*/
			/*СтруктураКолонок.Вставить("ОтражатьВНалоговомУчете");*/
			/*// Возможно получение информации из шапки документа
*/
			/*//**************************************************
*/
			/*СтруктураКолонок.Вставить("Движение");*/
			/*// Часть информации о проведении получается из параметров движения списанной партии
*/
			/*СтруктураКолонок.Вставить("НомерСтрокиДокумента");*/
			/*//СтруктураКолонок.Вставить("СчетУчета");
*/
			/*СтруктураКолонок.Вставить("Номенклатура");*/
			/*СтруктураКолонок.Вставить("ВидЦенности");*/
			/*// ? Вид ценности, определенный в документе для начисления
*/
			/*СтруктураКолонок.Вставить("Склад");*/
			/*СтруктураКолонок.Вставить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
			/*СтруктураКолонок.Вставить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
			/*СтруктураКолонок.Вставить("КорСчетБУ");*/
			/*СтруктураКолонок.Вставить("СчетДоходовБУ");*/
			/*СтруктураКолонок.Вставить("СуммаЗадолженностиБУ");*/
			/*СтруктураКолонок.Вставить("КорВалютнаяСуммаНДСЗадолженностиБУ");*/
			/*// Возврат поставщику, НА Комитент
*/
			/*СтруктураКолонок.Вставить("СуммаНДС");*/
			/*СтруктураКолонок.Вставить("СтавкаНДС");*/
			/*СтруктураКолонок.Вставить("СтатьяЗатрат");*/
			/*// Для парт.учета и ОС (если не ведется сложный учет НДС)
*/
			/*СтруктураКолонок.Вставить("СтатьяЗатратНДС");*/
			/*СтруктураКолонок.Вставить("НазначениеИспользования");*/
			/*// Для передачи материалов в экспл.
*/
			/*СтруктураКолонок.Вставить("СчетРасходовБУ");*/
			/*// Возврат от покупателя
*/
			/*СтруктураКолонок.Вставить("НоменклатурнаяГруппа");*/
			/*СтруктураКолонок.Вставить("ПодразделениеОрганизации");*/
			/*СтруктураКолонок.Вставить("НомерКорСтроки");*/
			/*СтруктураКолонок.Вставить("ВидТабличнойЧасти");*/
			/*// Для анализа отражения в НДС
*/
			/*СтруктураКолонок.Вставить("КодОперацииПартииТоваров");*/
			/*// Для анализа отражения в НДС
*/
			/*СтруктураКолонок.Вставить("ДокументОприходования");*/
			/*// Колонки по набору условий
*/
			/*//***************************************************
*/
			/*// Возврат поставщику
*/
			if(true/*НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратПоставщику) = НЕОПРЕДЕЛЕНО*/)
			{
				/*//СтруктураКолонок.Вставить("НомерСтроки"); // Возврат поставщику = НомерСтрокиТаблицыПоПартиямБУ
*/
				/*СтруктураКолонок.Вставить("КорВалютнаяСуммаЗадолженностиБУ");*/
				/*СтруктураКолонок.Вставить("СчетУчетаНДС");*/
				/*//СтруктураКолонок.Вставить("ДокументПартии");
*/
				/*СтруктураКолонок.Вставить("КорСчетЗадолженностиБУ");*/
				/*СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ1");*/
				/*СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ2");*/
				/*СтруктураКолонок.Вставить("КорСубконтоЗадолженностиБУ3");*/
			}
			/*// Возврат поставщику
*/
			/*//***************************************************
*/
			/*//***************************************************
*/
			/*// Возврат от пукумателя
*/
			if(true/*НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПокупателя) = НЕОПРЕДЕЛЕНО*/)
			{
				/*СтруктураКолонок.Вставить("СубконтоБУ");*/
				/*СтруктураКолонок.Вставить("КорСубконтоБУ2");*/
			}
			/*// Возврат от пукумателя
*/
			/*//***************************************************
*/
			/*//***************************************************
*/
			/*// Сложный учет НДС
*/
			/*СтруктураКолонок.Вставить("Партия");*/
			/*СтруктураКолонок.Вставить("ДокументПартии");*/
			/*СтруктураКолонок.Вставить("ДокументПередачи");*/
			/*СтруктураКолонок.Вставить("ВестиПартионныйУчетПоСериям");*/
			/*// Для парт.учета и ОС (если не ведется сложный учет НДС)
*/
			/*СтруктураКолонок.Вставить("СерияНоменклатуры");*/
			/*// Для парт.учета и ОС (если не ведется сложный учет НДС)
*/
			/*СтруктураКолонок.Вставить("ХарактеристикаНоменклатуры");*/
			/*// Для парт.учета и ОС (если не ведется сложный учет НДС)
*/
			/*СтруктураКолонок.Вставить("ЗаказПартии");*/
			/*// Для парт.учета и ОС (если не ведется сложный учет НДС)
*/
			/*СтруктураКолонок.Вставить("ОбъектСтроительства");*/
			/*// Для передачи оборудования в монтаж
*/
			if(true/*СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")*/)
			{
				/*СтруктураКолонок.Вставить("СчетФактура");*/
				/*СтруктураКолонок.Вставить("Покупатель");*/
				/*СтруктураКолонок.Вставить("ДатаСФ");*/
				/*СтруктураКолонок.Вставить("ВыставленСФ");*/
			}
			if(true/*УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СложныйУчетНДС", "Нал", СтруктураПараметров) = истина 
	  Или (Не СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПринятиеКУчетуОС) = Неопределено) 
	  Или СписаниеОС*/)
			{
				/*//СтруктураКолонок.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей"); // Для парт.учета 
*/
				/*//***************************************************
*/
				/*// Включение НДС в стоимость/Исключение из стоимости, косвенные расходы и производство
*/
				/*СтруктураКолонок.Вставить("ЗаказСписания");*/
				/*// Для парт.учета
*/
				/*//СтруктураКолонок.Вставить("КорСчетБУ");
*/
				/*СтруктураКолонок.Вставить("КорСубконтоБУ1");*/
				/*СтруктураКолонок.Вставить("КорСубконтоБУ2");*/
				/*СтруктураКолонок.Вставить("КорСубконтоБУ3");*/
				/*СтруктураКолонок.Вставить("СчетУчетаНУ");*/
				/*СтруктураКолонок.Вставить("КорСчетНУ");*/
				/*СтруктураКолонок.Вставить("КорСубконтоНУ1");*/
				/*СтруктураКолонок.Вставить("КорСубконтоНУ2");*/
				/*СтруктураКолонок.Вставить("КорСубконтоНУ3");*/
				/*СтруктураКолонок.Вставить("ПостояннаяРазница");*/
				/*СтруктураКолонок.Вставить("ВременнаяРазница");*/
				/*// Включение НДС в стоимость/Исключение из стоимости, косвенные расходы и производство
*/
				/*//***************************************************
*/
				/*//*****************************
*/
				/*// Для последующего поступления
*/
				if(true/*НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтКомиссионера) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПереработчика) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПокупателя) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВыпускПоОперацииСтоимость) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВыпускПродукцииФиксНаСклад) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.Комплектация) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.КорректировкаСерийИХарактеристик) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаВПереработку) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаНаКомиссию) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПеремещениеМеждуСкладами) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.РезервированиеПодЗаказ) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.СнятиеРезерваПодЗаказ) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВключениеАктиваВСоставМПЗ) = неопределено
			ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.СписаниеПоОрдеру) = неопределено*/)
				{
					/*////СтруктураКолонок.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателейПоступление"); // Для парт.учета . Поступление
*/
					/*СтруктураКолонок.Вставить("ИзменитьСклад");*/
					/*// Для парт.учета . Поступление
*/
					/*СтруктураКолонок.Вставить("СкладПолучатель");*/
					/*// Для парт.учета . Поступление
*/
					/*СтруктураКолонок.Вставить("КоличествоПоступление");*/
					/*// Для парт.учета . Поступление
*/
					/*СтруктураКолонок.Вставить("СтоимостьПоступление");*/
					/*// Для парт.учета . Поступление
*/
					/*СтруктураКолонок.Вставить("НоменклатураНовая");*/
					/*// Для парт.учета . Поступление
*/
					/*СтруктураКолонок.Вставить("ИзменитьСерию");*/
					/*// Для парт.учета . Поступление
*/
					/*СтруктураКолонок.Вставить("ИзменитьХарактеристику");*/
					/*// Для парт.учета . Поступление
*/
					/*СтруктураКолонок.Вставить("СерияНоменклатурыНовая");*/
					/*// Для парт.учета . Поступление
*/
					/*СтруктураКолонок.Вставить("ХарактеристикаНоменклатурыНовая");*/
					/*// Для парт.учета . Поступление
*/
					/*СтруктураКолонок.Вставить("ДокументОприходованияНовый");*/
					/*СтруктураКолонок.Вставить("Качество");*/
					/*// Включение НДС в стоимость/Исключение из стоимости . Поступление
*/
					/*СтруктураКолонок.Вставить("КачествоНовое");*/
					/*// Включение НДС в стоимость/Исключение из стоимости . Поступление
*/
				}
				/*// Для последующего поступления
*/
				/*//*****************************
*/
			}
			/*// Сложный учет НДС
*/
			/*//***************************************************
*/
		}

		public object ПолучитьТаблицуПартийПоДокументу(/*СтруктураПараметров, ТаблицаСписания*/)
		{
			/*// Партии могут списываться из регистров ПартииТоваровНаСкладахБухгалтерскийУчет и ПартииТоваровПереданныеБухгалтерскийУчет
*/
			/*// Отберем из соответствующих таблиц партии с видом движения "расход"
*/
			/*КодыОпераций = Перечисления.КодыОперацийПартииТоваров;*/
			/*ТаблицаПартий = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.СкопироватьКолонки();*/
			/*ТаблицаПартий.Колонки.Добавить("РегистрУчета");*/
			return null;
		}

		public object ПреобразоватьТаблицуСписанныхПартийДляНДС(/*СтруктураПараметров*/)
		{
			/*СоответствиеЗаказов = Новый Соответствие;*/
			/*КодыОпераций = Перечисления.КодыОперацийПартииТоваров;*/
			/*СписокИспользуемыхОпераций = Новый СписокЗначений;*/
			/*СписокИспользуемыхОпераций.ЗагрузитьЗначения(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(СтруктураПараметров.ТаблицаСписанныхПартий.ВыгрузитьКолонку("КодОперацииПартииТоваров"),Истина, Истина));*/
			/*ЕстьСложныйУчетНДС = (УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СложныйУчетНДС", "Нал", СтруктураПараметров) = Истина);*/
			/*СписаниеОС = Ложь;*/
			if(true/*Не ЕстьСложныйУчетНДС*/)
			{
			}
			/*// Определение состава колонок 
*/
			/*БазоваяСтруктураКолонок = Новый Структура;*/
			/*ОпределитьСоставКолонокТаблицаСписанныхПартийНДС(СтруктураПараметров, СписокИспользуемыхОпераций, БазоваяСтруктураКолонок, СписаниеОС);*/
			/*ЕстьВозвратПоставщику	= (НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратПоставщику) = Неопределено);*/
			/*ЕстьПоступлениеПоРезультатамСписания = (ЕстьСложныйУчетНДС Или СписаниеОС) И
	(НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтКомиссионера) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПереработчика) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВозвратОтПокупателя) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВыпускПоОперацииСтоимость) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВыпускПродукцииФиксНаСклад) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.Комплектация) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.КорректировкаСерийИХарактеристик) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаВПереработку) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПередачаНаКомиссию) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ПеремещениеМеждуСкладами) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.РезервированиеПодЗаказ) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.СнятиеРезерваПодЗаказ) = неопределено
	ИЛИ НЕ СписокИспользуемыхОпераций.НайтиПоЗначению(КодыОпераций.ВключениеАктиваВСоставМПЗ) = неопределено);*/
			/*РаспределеннаяТаблица = СтруктураПараметров.ТаблицаСписанныхПартий.Скопировать(,ОбщегоНазначения.ВыгрузитьСтруктуруВСтроку(БазоваяСтруктураКолонок));*/
			if(true/*ЕстьСложныйУчетНДС*/)
			{
				/*РаспределеннаяТаблица.Колонки.КорСубконтоБУ1.Имя = "КорСубконтоСписанияБУ1";*/
				/*РаспределеннаяТаблица.Колонки.КорСубконтоБУ2.Имя = "КорСубконтоСписанияБУ2";*/
				/*РаспределеннаяТаблица.Колонки.КорСубконтоБУ3.Имя = "КорСубконтоСписанияБУ3";*/
				/*РаспределеннаяТаблица.Колонки.КорСубконтоНУ1.Имя = "КорСубконтоСписанияНУ1";*/
				/*РаспределеннаяТаблица.Колонки.КорСубконтоНУ2.Имя = "КорСубконтоСписанияНУ2";*/
				/*РаспределеннаяТаблица.Колонки.КорСубконтоНУ3.Имя = "КорСубконтоСписанияНУ3";*/
			}
			/*РаспределеннаяТаблица.Колонки.СуммаНДС.Имя = "НДС";*/
			/*РаспределеннаяТаблица.Колонки.СуммаЗадолженностиБУ.Имя = "СуммаБезНДС";*/
			/*// Ключ - название колонки
*/
			/*// Значение - описание типа для добавляемой колонки
*/
			/*СтруктураКолонокРаспределеннойТаблицы = Новый Структура();*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("СчетУчетаБУ", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("СчетУчетаНУ", Новый описаниеТипов("ПланСчетовСсылка.Налоговый"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("КорСчетСписанияБУ", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("КорСчетСписанияНУ", Новый описаниеТипов("ПланСчетовСсылка.Налоговый"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("СчетУчетаЦенности", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("ПринятыеСчетУчетаБУ", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("ПринятыеСчетУчетаНУ", Новый описаниеТипов("ПланСчетовСсылка.Налоговый"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("Ценность");*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("Комиссионный", Новый описаниеТипов("Булево"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("УчетАгентскогоНДС", Новый описаниеТипов("Булево"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("ДоговорКомиссии", Новый описаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("СчетРасчетовСКомитентом", Новый описаниеТипов("ПланСчетовСсылка.Хозрасчетный"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("ВидЦенности", Новый описаниеТипов("ПеречислениеСсылка.ВидыЦенностей"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("Партия", РаспределеннаяТаблица.Колонки.ДокументОприходования.ТипЗначения);*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("ОбособленныйУчетТоваровПоЗаказамПокупателей", Новый описаниеТипов("Булево"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("Подразделение",Новый описаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));*/
			/*СтруктураКолонокРаспределеннойТаблицы.Вставить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
			/*РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("ДокументОприходования"),"Партия");*/
			/*РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("КорСчетБУ"),"КорСчетСписанияБУ");*/
			/*РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("Номенклатура"),"Ценность");*/
			if(true/*ЕстьСложныйУчетНДС*/)
			{
				/*РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("ПодразделениеОрганизации"),"Подразделение");*/
				/*РаспределеннаяТаблица.ЗагрузитьКолонку(РаспределеннаяТаблица.ВыгрузитьКолонку("КорСчетНУ"),"КорСчетСписанияНУ");*/
			}
			/*СтруктураПоискаНУ = Новый Структура("НомерСтрокиДокумента, ДокументОприходования, ОтражатьВНалоговомУчете", , , Истина);*/
			/*СтрокаПартии = Новый Структура("ВидДвижения, Количество, КоличествоПоступление, СчетУчета, СерияНоменклатуры, Заказ, ДокументОприходования, КодОперации, Организация", , 0, 0);*/
			/*МассивСтрокКУдалению = Новый Массив();*/
			return null;
		}
		// ()
		// СЛУЖЕБНЫЕ ФУНКЦИИ
		/////////////////////
		// Процедура используется для проведения документов по регистрам подсистемы НДС
		// Вызывается из обработки "Проведение документов по регистрам НДС" и из
		// документа "Расчет НДС по продукции"

		public void ДвижениеНДСпоТаблицеДокументов(/*ТаблицаДокументов,ФормироватьПроводки = Истина*/)
		{
		}
		////////////////////////////////////////////////////////////////////////////////
		// ОБОЛОЧКИ ДЛЯ ВЫЗОВА СООТВЕТСТВУЮЩИХ ПРОЦЕДУР И ФУНКЦИЙ ИЗ МОДУЛЯ УЧЕТ НДС
		//
		//

		public void ВыполнитьДвиженияНДСНалоговогоАгентаКомиссионер(/*СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров*/)
		{
			/*Строка = "Комплектация,Реализация,РеализацияКомиссия,РеализацияРозница";*/
			/*ДанныеДляОбработки = ОтобратьСтрокиПостроителемЗапроса(Строка, РаспределеннаяТаблицаСписания);*/
			if(true/*ДанныеДляОбработки = Неопределено*/)
			{
			}
			/*ОтразитьНДСНалоговогоАгентаКомиссионер(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров);*/
		}

		public void ВыполнитьДвиженияПоРегиструНДСпоОСиНМА_СписаниеМатериаловНаОСиНМА(/*СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ*/)
		{
			/*// НДС по ОС - при списании ТМЦ они могут перестать принадлежать к будущим ОС,
*/
			/*// в этом случае необходимо снять блокировку с вычета.
*/
			/*// Если в результате перемещения ТМЦ будет отнесено на счет учета ОС, необходимо включить блокировку.
*/
			/*Строка = "СписаниеНаВложенияВоВнеоборотныеАктивы, СписаниеНаСтроительствоОбъектовОС";*/
			/*ДанныеДляОбработки = ОтобратьСтрокиПартийПоКодамОпераций(Строка, ТаблицаНДСПартииСписания, СтруктураПараметров);*/
			/*СформироватьДвиженияПоРегиструНДСпоОСиНМА_СписаниеМатериаловНаОСиНМА(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ);*/
		}

		public void ВыполнитьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(/*СтруктураШапкиДокумента, СтруктураПараметров, Отказ*/)
		{
			/*// НДС по ОС - при списании ТМЦ они могут перестать принадлежать к будущим ОС,
*/
			/*// в этом случае необходимо снять блокировку с вычета.
*/
			/*// Если в результате перемещения ТМЦ будет отнесено на счет учета ОС, необходимо включить блокировку.
*/
			/*Строка = "ВозвратОтКомиссионера, ВозвратОтПереработчика, ВозвратПоставщику, ВыпускПоОперацииСтоимость, ВыпускПродукцииФиксНаСклад, ВключениеНДСВСтоимость,
			| Комплектация, ПередачаВПереработку, ПередачаМатериаловВЭксплуатацию, ПередачаНаКомиссию, ПередачаОборудованияВМонтаж, 
			| ПеремещениеМеждуСкладами, ПринятиеКУчетуОС, ПринятиеКУчетуОССоСписаниемНаЗатраты, Реализация, РеализацияКомиссия,
			| РеализацияРозница, СписаниеНаБрак, СписаниеНаВложенияВоВнеоборотныеАктивы, СписаниеНаЗатраты, СписаниеНаСтроительствоОбъектовОС,
			| СписаниеПартийВПроизводствоОперативно, СписаниеПартийПереданныхВПроизводство, СписаниеПоИнвентаризации, ВключениеАктиваВСоставМПЗ";*/
			/*СтруктураКодовОпераций = Новый Структура(Строка);*/
			/*СписокОтбора = Новый СписокЗначений;*/
			/*ДанныеДляОбработки = Новый ТаблицаЗначений;*/
			/*УчетНДСФормированиеДвижений.СформироватьДвиженияПоРегиструНДСпоОСиНМА_ПеремещениеОборудования(СтруктураШапкиДокумента, ДанныеДляОбработки, СтруктураПараметров, Отказ);*/
		}

		public void ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваровКомплектацияВыпуск(/*СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ*/)
		{
			if(true/*Не СтруктураШапкиДокумента.ВидДокумента = "КомплектацияНоменклатуры" 
		Или Не (СтруктураШапкиДокумента.Свойство("ВидОперации") 
				И СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции)*/)
			{
			}
			if(true/*ТаблицаНДСПартииСписания.Количество() = 0*/)
			{
			}
			/*ТаблицаДвиженийПартии = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.СкопироватьКолонки();*/
			/*КолНДСПартииТоваров = СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество();*/
			/*ЕстьСерияНоменклатурыНовая = ТаблицаНДСПартииСписания.Колонки.Найти("СерияНоменклатурыНовая") <> Неопределено;*/
			/*// Добавим колонки для обработки заказа покупателя.
*/
			/*ТаблицаДвиженийПартии.Колонки.Добавить("ОбособленныйУчетТоваровПоЗаказамПокупателей");*/
			/*ТаблицаДвиженийПартии.ЗаполнитьЗначения(Ложь,"ОбособленныйУчетТоваровПоЗаказамПокупателей");*/
			/*ТаблицаДвиженийПартии.Колонки.Добавить("ЗаказПокупателя");*/
			/*ТаблицаДвиженийПартии.ЗаполнитьЗначения(Неопределено,"ЗаказПокупателя");*/
			/*ТаблицаДвиженийПартии.Колонки.СчетУчета.Имя = "СчетУчетаЦенности";*/
			/*УчетНДСФормированиеДвижений.СформироватьДвиженияПоступленияПоРегиструНДСПартииТоваров(СтруктураШапкиДокумента, ТаблицаДвиженийПартии, СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров, Отказ);*/
			/*// Устанавливаем флаги модификации
*/
			/*СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров = СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров 
								ИЛИ (КолНДСПартииТоваров <> СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Количество());*/
		}
		//ВыполнитьДвиженияПоступленияПоРегиструНДСПартииТоваров

		public void ВыполнитьДвиженияНДСНезавершенноеПроизводство(/*СтруктураШапкиДокумента, СтруктураПараметров, ТаблицаНДСПартииСписания, Отказ*/)
		{
			if(true/*?(СтруктураШапкиДокумента.Свойство("СложныйУчетНДС"),НЕ СтруктураШапкиДокумента.СложныйУчетНДС,
		НЕ (УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СложныйУчетНДС", "Нал", СтруктураПараметров) = Истина))*/)
			{
			}
			if(true/*УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата)*/)
			{
				/*//При использовании расширенной аналитики движения по регистру НДСНезавершенноеПроизводство не формируются
*/
			}
			/*ДанныеДляОбработки = Новый ТаблицаЗначений;*/
			/*ИспользоватьРА = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);*/
			/*// Получили движения, для которых может произойти списание на незавершенное производство
*/
			/*СформироватьДвиженияНДСНезавершенноеПроизводство(СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ);*/
		}
		//ВыполнитьДвиженияНДСНезавершенноеПроизводство

		public void ВыполнитьДвиженияПоРегистрамНДССписаниеРасходовпоВНА(/*СтруктураШапкиДокумента, РаспределеннаяТаблицаСписания, СтруктураПараметров, Отказ*/)
		{
			/*СтрокаКодовОпераций = "ПередачаМатериаловВЭксплуатацию";*/
			/*//, ПринятиеКУчетуОС, ПринятиеКУчетуОССоСписаниемНаЗатраты";
*/
			/*ДанныеДляОбработки = ОтобратьСтрокиПостроителемЗапроса(СтрокаКодовОпераций, РаспределеннаяТаблицаСписания);*/
			if(true/*ДанныеДляОбработки = Неопределено*/)
			{
			}
			if(true/*не СтруктураШапкиДокумента.УчитыватьНДС*/)
			{
			}
			/*РаспределитьРасходыПоВНАнаСпособыОтраженияРасходовПоАмортизации(СтруктураШапкиДокумента, СтруктураПараметров, ДанныеДляОбработки, Отказ);*/
		}

		public object ПолучитьТаблицуПоступлениеНМА(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоНМА);*/
			return null;
		}

		public object ПолучитьТаблицуНачислениеНДСпоСМРхозспособом(/*ДокументОбъект, Ошибка, ДляКнигиПродаж = Ложь*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Неопределено);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоСМРхозспособом);*/
			return null;
		}

		public object ПолучитьТаблицуРеализацияОтгруженныхТоваров(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);*/
			return null;
		}

		public object ПолучитьТаблицуАктОбОказанииПроизводственныхУслуг(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоУслугам);*/
			return null;
		}

		public object ПолучитьТаблицуПередачаОС(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента, Ошибка);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);*/
			/*ТаблицаПоТоварам.Колонки.ОсновноеСредство.Имя = "Номенклатура";*/
			return null;
		}

		public object ПолучитьТаблицуПередачаНМА(/*ДокументОбъект, Ошибка*/)
		{
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента("", СтруктураШапкиДокумента);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам);*/
			/*ТаблицаПоТоварам.Колонки.НематериальныйАктив.Имя = "Номенклатура";*/
			return null;
		}
		//Определяет применяется ли упрощенный учет НДС
		//

		public object ПолучитьУПУпрощенныйУчетНДС(/*Организация, Знач Дата, УчетнаяПолитика = Неопределено*/)
		{
			/*//Если Не ЗначениеЗаполнено(Организация) Тогда
*/
			/*//	Возврат Ложь;
*/
			/*//КонецЕсли;
*/
			/*//
*/
			/*//Если Не ЗначениеЗаполнено(Дата) Тогда
*/
			/*//	Дата = ТекущаяДата();
*/
			/*//КонецЕсли;
*/
			/*//Если УчетнаяПолитика <> Неопределено
*/
			/*//	и УчетнаяПолитика.Количество() > 0
*/
			/*//	И УчетнаяПолитика.Организация = Организация
*/
			/*//	И УчетнаяПолитика.Период = НачалоМесяца(Дата)
*/
			/*//	И УчетнаяПолитика.Свойство("УпрощенныйУчетНДС") Тогда
*/
			/*//	Возврат УчетнаяПолитика.УпрощенныйУчетНДС;
*/
			/*//КонецЕсли;
*/
			/*//
*/
			/*//ОшибкаВПолучении = Ложь;
*/
			/*//УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитики(Дата, ОшибкаВПолучении, Организация,,Ложь);
*/
			/*//	
*/
			/*//Возврат ?(ОшибкаВПолучении, Ложь, УчетнаяПолитика.УпрощенныйУчетНДС);
*/
			return null;
		}
		// Определяет дату документов из колонки таблицы значений с именем, переданным в параметре КолонкаДокумента
		// и записывает ее в колонку с именем, переданным в параметре КолонкаСДатой.
		// Колонки с такими именами должны существовать.
		//

		public void ЗаполнитьДатуДокументовВТаблице(/*Таблица, КолонкаДокумента, КолонкаСДатой*/)
		{
			/*КэшПоТипам = Новый Соответствие;*/
			if(true/*КэшПоТипам.Количество() = 0*/)
			{
			}
			/*Запрос = Новый Запрос;*/
			/*Таблица.Индексы.Добавить(КолонкаДокумента);*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			while(true/*Выборка.Следующий()*/)
			{
				/*ПараметрыОтбора = Новый Структура;*/
				/*ПараметрыОтбора.Вставить(КолонкаДокумента, Выборка.Ссылка);*/
				/*НайденныеСтроки = Таблица.НайтиСтроки(ПараметрыОтбора);*/
			}
			/*;;*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// Процедуры и функции обновления ИБ
		// Документы виды КорректировочныйСчетФактура... более не используется
		// производится замена их на документы КорректировкаПоступления/КорректировкаРеализации
		// с регистрацией счетов-фактур
		//

		public void ОбработатьКорректировочныеСчетаФактуры(/**/)
		{
			/*ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();*/
			/*СчетДоходов              = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;*/
			/*СчетРасходов             = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;*/
			/*// Обработка корректировочных счетов-фактур выданных
*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьКорректировочныйСчетФактураВыданный.Ссылка,
	|	УдалитьКорректировочныйСчетФактураВыданный.СчетФактура КАК ДокументРеализации,
	|	УдалитьКорректировочныйСчетФактураВыданный.Номер КАК НомерСчетаФактуры,
	|	УдалитьКорректировочныйСчетФактураВыданный.Дата КАК Дата,
	|	УдалитьКорректировочныйСчетФактураВыданный.Организация КАК Организация,
	|	УдалитьКорректировочныйСчетФактураВыданный.Контрагент КАК Контрагент,
	|	УдалитьКорректировочныйСчетФактураВыданный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	УдалитьКорректировочныйСчетФактураВыданный.ВалютаДокумента КАК ВалютаДокумента,
	|	УдалитьКорректировочныйСчетФактураВыданный.СчетФактура.Номер КАК НомерИсходногоДокумента,
	|	УдалитьКорректировочныйСчетФактураВыданный.СчетФактура.Дата КАК ДатаИсходногоДокумента,
	|	УдалитьКорректировочныйСчетФактураВыданный.ТоварыИУслуги.(
	|		Номенклатура КАК Номенклатура,
	|		КоличествоДоИзменения КАК КоличествоДоИзменения,
	|		КоличествоПослеИзменения КАК Количество,
	|		ЦенаДоИзменения КАК ЦенаДоИзменения,
	|		ЦенаПослеИзменения КАК Цена,
	|		СтоимостьБезНДСДоИзменения КАК СуммаДоИзменения,
	|		СтоимостьБезНДСПослеИзменения КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДСДоИзменения КАК СуммаНДСДоИзменения,
	|		СуммаНДСПослеИзменения КАК СуммаНДС,
	|		ЕСТЬNULL(УдалитьКорректировочныйСчетФактураВыданный.ТоварыИУслуги.Номенклатура.Услуга, ЛОЖЬ) КАК Услуга,
	|		НаименованиеНоменклатуры КАК Содержание,
	|		ВидЦенности КАК ВидЦенности
	|	)
	|ИЗ
	|	Документ.УдалитьКорректировочныйСчетФактураВыданный КАК УдалитьКорректировочныйСчетФактураВыданный
	|ГДЕ
	|	УдалитьКорректировочныйСчетФактураВыданный.Проведен";*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			while(true/*Выборка.Следующий()*/)
			{
				/*НовыйДокументКорректировки = Документы.КорректировкаРеализации.СоздатьДокумент();*/
				/*НовыйДокументКорректировки.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;*/
				/*ЗаполнитьЗначенияСвойств(НовыйДокументКорректировки, Выборка);*/
				/*ВыборкаТоварыИУслуги = Выборка.ТоварыИУслуги.Выбрать();*/
				while(true/*ВыборкаТоварыИУслуги.Следующий()*/)
				{
					if(true/*ВыборкаТоварыИУслуги.Услуга*/)
					{
						/*НоваяСтрока = НовыйДокументКорректировки.Услуги.Добавить();*/
					}
					/*ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаТоварыИУслуги);*/
					if(true/*НЕ ВыборкаТоварыИУслуги.Услуга*/)
					{
						/*СчетУчетаНДС = "";*/
						/*ПолучитьСчетУчетаПоВидуЦенности(НоваяСтрока.СчетУчетаБУ, СчетУчетаНДС, ВыборкаТоварыИУслуги.ВидЦенности, Выборка.ДоговорКонтрагента, ВалютаРегламентированногоУчета);*/
					}
					/*НоваяСтрока.СчетРасходовБУ             = СчетРасходов;*/
					/*НоваяСтрока.СчетДоходовБУ              = СчетДоходов;*/
				}
				/*;
		
		НовыйДокументКорректировки.КорректироватьБУиНУ = Ложь;*/
				/*НовыйДокументКорректировки.Комментарий         = "## Создан на основании: " + Выборка.Ссылка + " ##";*/
				/*Попытка
    	    НовыйДокументКорректировки.Записать(РежимЗаписиДокумента.Проведение);*/
				/*Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);*/
				/*// Создаем счет-фактуру		
*/
				/*СчетФактура = Документы.СчетФактураВыданный.СоздатьДокумент();*/
				/*СчетФактура.Заполнить(НовыйДокументКорректировки.Ссылка);*/
				/*СчетФактура.ОпределениеПараметровСчетаФактуры();*/
				/*СчетФактура.Контрагент                  = Выборка.Контрагент;*/
				/*СчетФактура.ДоговорКонтрагента          = Выборка.ДоговорКонтрагента;*/
				/*СчетФактура.Номер                       = Выборка.НомерСчетаФактуры;*/
				/*СчетФактура.Дата                        = Выборка.Дата;*/
				/*СчетФактура.ВидСчетаФактуры				= Перечисления.ВидСчетаФактурыВыставленного.Корректировочный;*/
				/*СчетФактура.НомерИсходногоДокумента     = Выборка.НомерИсходногоДокумента;*/
				/*СчетФактура.ДатаИсходногоДокумента      = Выборка.ДатаИсходногоДокумента;*/
				/*СчетФактура.Комментарий                 = "## Создан на основании: " + Выборка.Ссылка + " ##";*/
				/*СчетФактура.ДатаНомерДокументовОплаты.Добавить();*/
				/*Попытка
				СчетФактура.Записать(РежимЗаписиДокумента.Проведение);*/
				/*Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());*/
				/*КонецПопытки;*/
				/*Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());*/
				/*КонецПопытки;*/
			}
			/*// Обработка корректировочных счетов-фактур полученных
*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	УдалитьКорректировочныйСчетФактураПолученный.Ссылка,
	|	УдалитьКорректировочныйСчетФактураПолученный.Дата КАК Дата,
	|	УдалитьКорректировочныйСчетФактураПолученный.Организация КАК Организация,
	|	УдалитьКорректировочныйСчетФактураПолученный.Контрагент КАК Контрагент,
	|	УдалитьКорректировочныйСчетФактураПолученный.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	УдалитьКорректировочныйСчетФактураПолученный.СчетФактура КАК ДокументПоступления,
	|	УдалитьКорректировочныйСчетФактураПолученный.НомерВходящегоДокумента КАК НомерВходящегоДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.ВалютаДокумента КАК ВалютаДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.СчетФактура.ДатаВходящегоДокумента КАК ДатаИсходногоДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.СчетФактура.НомерВходящегоДокумента КАК НомерИсходногоДокумента,
	|	УдалитьКорректировочныйСчетФактураПолученный.ВосстановлениеНДС.(
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		УдалитьКорректировочныйСчетФактураПолученный.ВосстановлениеНДС.Сумма - УдалитьКорректировочныйСчетФактураПолученный.ВосстановлениеНДС.СуммаНДС КАК Сумма,
	|		ВидЦенности КАК ВидЦенности
	|	),
	|	УдалитьКорректировочныйСчетФактураПолученный.ВычетНДС.(
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС,
	|		УдалитьКорректировочныйСчетФактураПолученный.ВычетНДС.Сумма - УдалитьКорректировочныйСчетФактураПолученный.ВычетНДС.СуммаНДС КАК Сумма,
	|		ВидЦенности КАК ВидЦенности
	|	)
	|ИЗ
	|	Документ.УдалитьКорректировочныйСчетФактураПолученный КАК УдалитьКорректировочныйСчетФактураПолученный
	|ГДЕ
	|	УдалитьКорректировочныйСчетФактураПолученный.Проведен";*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			while(true/*Выборка.Следующий()*/)
			{
				/*НовыйДокументКорректировки = Документы.КорректировкаПоступления.СоздатьДокумент();*/
				/*НовыйДокументКорректировки.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;*/
				/*НовыйДокументКорректировки.ВосстановитьНДС = Истина;*/
				/*НовыйДокументКорректировки.УчитыватьНДС    = Истина;*/
				/*ЗаполнитьЗначенияСвойств(НовыйДокументКорректировки, Выборка);*/
				/*ВыборкаВосстановлениеНДС = Выборка.ВосстановлениеНДС.Выбрать();*/
				while(true/*ВыборкаВосстановлениеНДС.Следующий()*/)
				{
					if(true/*ВыборкаВосстановлениеНДС.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги*/)
					{
						/*НоваяСтрока = НовыйДокументКорректировки.Услуги.Добавить();*/
						/*НоваяСтрока.СтавкаНДС           = ВыборкаВосстановлениеНДС.СтавкаНДС;*/
						/*НоваяСтрока.СуммаДоИзменения    = ВыборкаВосстановлениеНДС.Сумма;*/
						/*НоваяСтрока.СуммаНДСДоИзменения = ВыборкаВосстановлениеНДС.СуммаНДС;*/
						/*НоваяСтрока.ЕстьВДокументеПоступления = Истина;*/
						/*ПолучитьСчетУчетаПоВидуЦенности(НоваяСтрока.СчетЗатрат, НоваяСтрока.СчетУчетаНДС, ВыборкаВосстановлениеНДС.ВидЦенности, Выборка.ДоговорКонтрагента, ВалютаРегламентированногоУчета);*/
					}
				}
				/*;
		
		ВыборкаВычетНДС = Выборка.ВычетНДС.Выбрать();*/
				while(true/*ВыборкаВычетНДС.Следующий()*/)
				{
					if(true/*ВыборкаВычетНДС.ВидЦенности = Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги*/)
					{
						/*НоваяСтрока = НовыйДокументКорректировки.Услуги.Добавить();*/
						/*НоваяСтрока.СтавкаНДС = ВыборкаВычетНДС.СтавкаНДС;*/
						/*НоваяСтрока.Сумма     = ВыборкаВычетНДС.Сумма;*/
						/*НоваяСтрока.СуммаНДС  = ВыборкаВычетНДС.СуммаНДС;*/
						/*НоваяСтрока.ЕстьВДокументеПоступления = Истина;*/
						/*ПолучитьСчетУчетаПоВидуЦенности(НоваяСтрока.СчетЗатрат, НоваяСтрока.СчетУчетаНДС, ВыборкаВычетНДС.ВидЦенности, Выборка.ДоговорКонтрагента, ВалютаРегламентированногоУчета);*/
					}
				}
				/*;
		
		НовыйДокументКорректировки.корректироватьБУиНУ = Ложь;*/
				/*НовыйДокументКорректировки.Комментарий         = "## Создан на основании: " + Выборка.Ссылка + " ##";*/
				/*Попытка
    	    НовыйДокументКорректировки.Записать(РежимЗаписиДокумента.Проведение);*/
				/*Выборка.Ссылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);*/
				/*// Создаем счет-фактуру		
*/
				/*СчетФактура = Документы.СчетФактураПолученный.СоздатьДокумент();*/
				/*СчетФактура.Заполнить(НовыйДокументКорректировки.Ссылка);*/
				/*СчетФактура.ОпределениеПараметровСчетаФактуры();*/
				/*СчетФактура.Контрагент                  = Выборка.Контрагент;*/
				/*СчетФактура.ДоговорКонтрагента          = Выборка.ДоговорКонтрагента;*/
				/*СчетФактура.НомерВходящегоДокумента     = Выборка.НомерВходящегоДокумента;*/
				/*СчетФактура.ДатаВходящегоДокумента      = Выборка.ДатаВходящегоДокумента;*/
				/*СчетФактура.Дата                        = Выборка.Дата;*/
				/*СчетФактура.ВидСчетаФактуры             = Перечисления.ВидСчетаФактурыПолученного.Корректировочный;*/
				/*СчетФактура.НомерИсходногоДокумента     = Выборка.НомерИсходногоДокумента;*/
				/*СчетФактура.ДатаИсходногоДокумента      = Выборка.ДатаИсходногоДокумента;*/
				/*СчетФактура.Комментарий                 = "## Создан на основании: " + Выборка.Ссылка + " ##";*/
				/*Попытка
				СчетФактура.Записать(РежимЗаписиДокумента.Проведение);*/
				/*Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());*/
				/*КонецПопытки;*/
				/*Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());*/
				/*КонецПопытки;*/
			}
			/*;;*/
		}

		public void ПолучитьСчетУчетаПоВидуЦенности(/*СчетУчета, СчетУчетаНДС, ВидЦенности, ДоговорКонтрагента, ВалютаРегламентированногоУчета*/)
		{
			if(true/*ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные*/)
			{
				/*ИмяСчета = "РасчетыПоАвансамВыданным";*/
				if(true/*ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаРегламентированногоУчета 
			И ДоговорКонтрагента.РасчетыВУсловныхЕдиницах*/)
				{
					/*ИмяСчета = ИмяСчета + "УЕ";*/
				}
				/*СчетУчета    =  ПланыСчетов.Хозрасчетный[ИмяСчета];*/
				/*СчетУчетаНДС = 	ПланыСчетов.Хозрасчетный.НДСпоАвансамИПредоплатамВыданным;*/
			}
		}
		// У счетов-фактур полученных добавлен реквизит ВидСчетаФактуры
		//

		public void УстановитьВидСчетаФактурыПолученного(/**/)
		{
			/*//Обновление документов "Счет-фактура полученный" установка вида счета-фактуры
*/
			/*Состояние("Выполняется обновление документов ""Счет-фактура полученный""");*/
			/*#КонецЕсли
	
	Запрос = Новый Запрос;*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	СчетФактураПолученный.Ссылка
	|ИЗ
	|	Документ.СчетФактураПолученный КАК СчетФактураПолученный
	|ГДЕ
	|	СчетФактураПолученный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыПолученного.ПустаяСсылка)";*/
			/*Результат = Запрос.Выполнить();*/
			if(true/*Не Результат.Пустой()*/)
			{
				/*Выборка = Результат.Выбрать();*/
				while(true/*Выборка.Следующий()*/)
				{
					/*СчетФактура = Выборка.Ссылка.ПолучитьОбъект();*/
					if(true/*СчетФактура.УдалитьНаАванс*/)
					{
						/*СчетФактура.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс;*/
					}
					/*Попытка
				СчетФактура.ОбменДанными.Загрузка = Истина;*/
					/*СчетФактура.Записать(РежимЗаписиДокумента.Запись);*/
					/*Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());*/
					/*КонецПопытки;*/
				}
				/*;;*/
			}
			/*#Если Клиент Тогда
		Состояние("");*/
			/*#КонецЕсли;*/
		}
		// Процедура производит установку даты применения Постановления 1137 в значение 01.04.2012
		//

		public void УстановитьДатуПримененияПостановления1137(/**/)
		{
			/*НачалоПримененияИсправленныхСчетовФактур = Константы.НачалоПримененияИсправленныхСчетовФактур.Получить();*/
			if(true/*НЕ ЗначениеЗаполнено(НачалоПримененияИсправленныхСчетовФактур)
		ИЛИ НачалоПримененияИсправленныхСчетовФактур > '20120401'*/)
			{
				/*Константы.НачалоПримененияИсправленныхСчетовФактур.Установить('20120401');*/
			}
		}
		// В документ добавлена новая т.ч. Покупатели, в неё необходимо добавить одну строку.
		// В колонку Покупатель пишем контрагента-комиссионера из шапки
		//

		public void ЗаполнитьТЧПокупателиОтчетКомиссионераОПродажах(/**/)
		{
			/*//Обновление документов "Отчет комиссионера о продажах", добавление строки в табличную часть Покупатели
*/
			/*Состояние("Выполняется обновление документов ""Отчет комиссионера о продажах""");*/
			/*#КонецЕсли
	
	Запрос = Новый Запрос;*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОтчетКомиссионераОПродажах.Ссылка КАК Ссылка,
	|	ОтчетКомиссионераОПродажах.Контрагент
	|ПОМЕСТИТЬ ВТ_ОтчетыКомиссионера
	|ИЗ
	|	Документ.ОтчетКомиссионераОПродажах КАК ОтчетКомиссионераОПродажах
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтчетКомиссионераОПродажах.Ссылка,
	|	ОтчетКомиссионераОПродажах.Контрагент
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(ОтчетКомиссионераОПродажах.Покупатели.НомерСтроки) = 0
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтчетыКомиссионера.Ссылка КАК ОтчетКомиссионера,
	|	СчетФактураВыданный.Ссылка КАК Ссылка,
	|	СчетФактураВыданный.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА СчетФактураВыданный.Проведен
	|			ТОГДА 2
	|		КОГДА СчетФактураВыданный.ПометкаУдаления
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК Приоритет
	|ПОМЕСТИТЬ ВТ_СчетФактуры
	|ИЗ
	|	Документ.СчетФактураВыданный КАК СчетФактураВыданный
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_ОтчетыКомиссионера КАК ВТ_ОтчетыКомиссионера
	|		ПО СчетФактураВыданный.ДокументОснование = ВТ_ОтчетыКомиссионера.Ссылка
	|			И (СчетФактураВыданный.ВидСчетаФактуры = ЗНАЧЕНИЕ(Перечисление.ВидСчетаФактурыВыставленного.НаРеализацию))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетКомиссионера,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_СчетФактуры.ОтчетКомиссионера КАК ОтчетКомиссионера,
	|	МАКСИМУМ(ВТ_СчетФактуры.Приоритет) КАК Приоритет
	|ПОМЕСТИТЬ ВТ_Приоритет
	|ИЗ
	|	ВТ_СчетФактуры КАК ВТ_СчетФактуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_СчетФактуры.ОтчетКомиссионера
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетКомиссионера,
	|	Приоритет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_ОтчетыКомиссионера.Ссылка КАК Ссылка,
	|	ВТ_ОтчетыКомиссионера.Контрагент КАК Покупатель,
	|	ВЫБОР
	|		КОГДА ВТ_СчетФактуры.Ссылка ЕСТЬ NULL 
	|			ТОГДА ЛОЖЬ
	|		ИНАЧЕ ИСТИНА
	|	КОНЕЦ КАК ВыставленСФ,
	|	ВТ_СчетФактуры.Дата КАК ДатаСФ,
	|	ВТ_СчетФактуры.Ссылка КАК СчетФактура
	|ИЗ
	|	ВТ_ОтчетыКомиссионера КАК ВТ_ОтчетыКомиссионера
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Приоритет КАК ВТ_Приоритет
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_СчетФактуры КАК ВТ_СчетФактуры
	|			ПО ВТ_Приоритет.ОтчетКомиссионера = ВТ_СчетФактуры.ОтчетКомиссионера
	|				И ВТ_Приоритет.Приоритет = ВТ_СчетФактуры.Приоритет
	|		ПО ВТ_ОтчетыКомиссионера.Ссылка = ВТ_Приоритет.ОтчетКомиссионера";*/
			/*Результат = Запрос.Выполнить();*/
			if(true/*НЕ Результат.Пустой()*/)
			{
				/*Выборка = Результат.Выбрать();*/
				while(true/*Выборка.Следующий()*/)
				{
					/*ОтчетКомиссионера = Выборка.Ссылка.ПолучитьОбъект();*/
					/*СтрокаТЧ = ОтчетКомиссионера.Покупатели.Добавить();*/
					/*ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);*/
					/*Попытка
				ОтчетКомиссионера.ОбменДанными.Загрузка = Истина;*/
					/*ОтчетКомиссионера.Записать(РежимЗаписиДокумента.Запись);*/
					/*Исключение
				ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки());*/
					/*КонецПопытки;*/
				}
				/*;;*/
			}
			/*#Если Клиент Тогда
		Состояние("");*/
			/*#КонецЕсли;*/
		}
	}
}

