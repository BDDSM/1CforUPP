using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class ТиповыеОтчеты
	{

		public object РабочаяВерсияНастройкиОтчетов(/**/)
		{
			return null;
		}
		// Формирует типовой отчет в строку XML, табличный документ или поле табличного документа

		public object СформироватьТиповойОтчет(/*ОтчетОбъект, Результат = Неопределено, ДанныеРасшифровки = Неопределено, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьШапкуОтчетаНаВсехСтраницах = истина*/)
		{
			if(true/*ТипЗнч(Результат) = Тип("Строка")*/)
			{
				/*ПараметрыИсполненияОтчета = Неопределено;*/
				/*ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
				/*ДанныеРасшифровки = Неопределено;*/
				/*// Вывод отчета в XML
*/
				/*СохранениеНастроек.ЗаполнитьНастройкиПриОткрытииОтчета(ОтчетОбъект);*/
				/*ОтчетОбъект.ДоработатьКомпоновщикПередВыводом();*/
				/*// Сгенерируем макет компоновки данных при помощи компоновщика макета
*/
				/*КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;*/
				/*МакетКомпоновки = КомпоновщикМакета.Выполнить(ОтчетОбъект.СхемаКомпоновкиДанных, ОтчетОбъект.КомпоновщикНастроек.Настройки, ДанныеРасшифровки);*/
				/*// Создадим и инициализируем процессор компоновки
*/
				/*ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;*/
				if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ИспользоватьСобытияПриФормированииОтчета") И ПараметрыИсполненияОтчета.ИспользоватьСобытияПриФормированииОтчета*/)
				{
					/*ОтчетОбъект.ПередВыводомОтчета(МакетКомпоновки, ПроцессорКомпоновки);*/
				}
				if(true/*ВнешниеНаборыДанных = Неопределено*/)
				{
					/*ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,, ДанныеРасшифровки);*/
				}
				/*ЗаписьXML = Новый ЗаписьXML();*/
				/*ЗаписьXML.УстановитьСтроку();*/
				/*ЗаписьXML.ЗаписатьНачалоЭлемента("result");*/
				while(true/*Истина*/)
				{
					/*ЭлементРезультата = ПроцессорКомпоновки.Следующий();*/
					if(true/*ЭлементРезультата = Неопределено*/)
					{
						/*Прервать;*/
					}
					if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ИспользоватьСобытияПриФормированииОтчета") И ПараметрыИсполненияОтчета.ИспользоватьСобытияПриФормированииОтчета*/)
					{
						/*ОтчетОбъект.ПередВыводомЭлементРезультата(МакетКомпоновки, ПроцессорКомпоновки, ЭлементРезультата);*/
					}
					/*СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ЭлементРезультата, "item", "http://v8.1c.ru/8.1/data-composition-system/result");*/
				}
				/*;
		ЗаписьXML.ЗаписатьКонецЭлемента();*/
				/*Результат = ЗаписьXML.Закрыть();*/
				/*ЗаписьXML = Новый ЗаписьXML();*/
				/*ЗаписьXML.УстановитьСтроку();*/
				/*ЗаписьXML.ЗаписатьНачалоЭлемента("details");*/
				/*СериализаторXDTO.ЗаписатьXML(ЗаписьXML, ДанныеРасшифровки, "item", "http://v8.1c.ru/8.1/data-composition-system/details");*/
				/*ЗаписьXML.ЗаписатьКонецЭлемента();*/
				/*ДанныеРасшифровки = ЗаписьXML.Закрыть();*/
			}
			return null;
		}
		// По структуре параметров восстанавливает состояние отчета

		public void ПрименитьСтруктуруПараметровОтчета(/*ОтчетОбъект, СтруктураПараметров*/)
		{
			if(true/*СтруктураПараметров = Неопределено*/)
			{
			}
			/*ЗаполнитьЗначенияСвойств(ОтчетОбъект, СтруктураПараметров);*/
			/*ОтчетОбъект.ИнициализацияОтчета();*/
			/*ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(СтруктураПараметров.НастройкиКомпоновщика);*/
		}

		public void ИнициализацияТиповогоОтчета(/*ОтчетОбъект*/)
		{
		}
		// Возвращает структуру параметров отчета для сохранения

		public object ПолучитьСтруктуруПараметровТиповогоОтчета(/*ОтчетОбъект*/)
		{
			/*СтруктураПараметров = Новый Структура;*/
			/*СтруктураПараметров.Вставить("НастройкиКомпоновщика", ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());*/
			if(true/*СтруктураПараметров.Свойство("Версия")*/)
			{
				/*СтруктураПараметров.Версия = РабочаяВерсияНастройкиОтчетов();*/
			}
			return null;
		}
		// Добавляет отбор в набор отборов компоновщика или группы отборов

		public object ДобавитьОтбор(/*ЭлементСтруктуры, Знач Поле, Значение, ВидСравнения = Неопределено, Использование = Истина*/)
		{
			if(true/*ТипЗнч(Поле) = Тип("Строка")*/)
			{
				/*Поле = Новый ПолеКомпоновкиДанных(Поле);*/
			}
			if(true/*ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных")*/)
			{
				/*Отбор = ЭлементСтруктуры.Настройки.Отбор;*/
			}
			if(true/*ВидСравнения = Неопределено*/)
			{
				/*ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;*/
			}
			/*НовыйЭлемент = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));*/
			/*НовыйЭлемент.Использование  = Использование;*/
			/*НовыйЭлемент.ЛевоеЗначение  = Поле;*/
			/*НовыйЭлемент.ВидСравнения   = ВидСравнения;*/
			/*НовыйЭлемент.ПравоеЗначение = Значение;*/
			return null;
		}
		// Добавляет группировку в компоновщик настроек в самый нижний уровень структуры, если поле не укзано - детальные поля

		public object ДобавитьГруппировку(/*КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина*/)
		{
			/*ЭлементСтруктуры = Неопределено;*/
			if(true/*ТипЗнч(КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных")*/)
			{
				/*ЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Строки);*/
				if(true/*ЭлементСтруктуры = Неопределено 
			ИЛИ ПолучитьЭлементСтруктурыДетальныеЗаписи(КомпоновщикНастроек) <> Неопределено 
			И Поле = Неопределено*/)
				{
				}
			}
			if(true/*ТипЗнч(Поле) = Тип("Строка")*/)
			{
				/*Поле = Новый ПолеКомпоновкиДанных(Поле);*/
			}
			if(true/*ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных")*/)
			{
				/*НоваяГруппировка = ЭлементСтруктуры.Структура.Добавить();*/
			}
			/*НоваяГруппировка.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));*/
			/*НоваяГруппировка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));*/
			if(true/*Поле <> Неопределено*/)
			{
				/*ПолеГруппировки = НоваяГруппировка.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));*/
				/*ПолеГруппировки.Поле = Поле;*/
			}
			return null;
		}
		// Возвращает последний элемент структуры - группировку

		public object ПолучитьПоследнийЭлементСтруктуры(/*КомпоновщикНастроек, Строки = Истина*/)
		{
			/*Структура = КомпоновщикНастроек.Настройки.Структура;*/
			if(true/*Структура.Количество() = 0*/)
			{
			}
			if(true/*Строки*/)
			{
				/*ИмяСтруктурыТаблицы = "Строки";*/
				/*ИмяСтруктурыДиаграммы = "Серии";*/
			}
			while(true/*Истина*/)
			{
				/*ЭлементСтруктуры = Структура[0];*/
				if(true/*ТипЗнч(ЭлементСтруктуры) = Тип("ТаблицаКомпоновкиДанных") И ЭлементСтруктуры[ИмяСтруктурыТаблицы].Количество() > 0*/)
				{
					if(true/*ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура.Количество() = 0*/)
					{
						/*Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы];*/
						/*Прервать;*/
					}
					/*Структура = ЭлементСтруктуры[ИмяСтруктурыТаблицы][0].Структура;*/
				}
			}
			return null;
		}
		// Возвращает группировку - детальные записи компоновщика настроек

		public object ПолучитьЭлементСтруктурыДетальныеЗаписи(/*КомпоновщикНастроек*/)
		{
			/*ПоследнийЭлементСтруктуры = ПолучитьПоследнийЭлементСтруктуры(КомпоновщикНастроек, Истина);*/
			if(true/*ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(ПоследнийЭлементСтруктуры) = Тип("ГруппировкаДиаграммыКомпоновкиДанных")*/)
			{
				if(true/*ПоследнийЭлементСтруктуры.ПоляГруппировки.Элементы.Количество() = 0*/)
				{
				}
			}
			return null;
		}
		// Дорабатывает отчет перед выводом

		public void ПолучитьПримененуюНастройку(/*ОтчетОбъект, КомпоновщикНастроек = Неопределено*/)
		{
			if(true/*КомпоновщикНастроек = Неопределено*/)
			{
				/*КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;*/
			}
			if(true/*ЭтоСтараяВерсияОтчета(ОтчетОбъект)*/)
			{
			}
			/*ПараметрыПанели  = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);*/
			/*ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);*/
			if(true/*ПараметрыПанели = Неопределено
		ИЛИ ЗначенияНастроек = Неопределено*/)
			{
			}
			/*// Установка Настроек компоновки на панели настроек
*/
			if(true/*ЗначенияНастроек.Свойство("Показатели")*/)
			{
				/*ПоляВыбора = ПолучитьВыбранныеПоля(ОтчетОбъект.КомпоновщикНастроек);*/
			}
			/*// Установим у всех параметров использование
*/
			/*// Установка параметра ПериодОтчета
*/
			/*ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));*/
			/*ЕстьПериод = ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки.НайтиСтроки(Новый Структура("Имя", "Период"))[0].Использование;*/
			if(true/*ЕстьПериод И ЗначениеПараметра <> Неопределено*/)
			{
				/*Периоды = ПолучитьСписокПериодов(ЗначенияНастроек.НастройкаПериода.Период, ПараметрыПанели);*/
				/*ЗначениеПараметра.Использование = Периоды.Количество() <> 0;*/
				if(true/*ТипЗнч(ЗначениеПараметра.Значение) = Тип("СписокЗначений")*/)
				{
					/*ЗначениеПараметра.Значение = Периоды;*/
				}
			}
			if(true/*ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование*/)
			{
				/*// Установка Стандартного периода
*/
				/*ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));*/
				/*ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));*/
				if(true/*ЗначениеПараметраНачалоПериода <> Неопределено И ЗначениеПараметраКонецПериода <> Неопределено*/)
				{
					/*СтандартныйПериод = Неопределено;*/
					/*ЗначенияНастроек.Свойство("СтандартныйПериод", СтандартныйПериод);*/
					if(true/*СтандартныйПериод <> Неопределено*/)
					{
						if(true/*СтандартныйПериод.ДатаНачала <> '00010101'*/)
						{
							/*ЗначениеПараметраНачалоПериода.Использование = Истина;*/
							/*ЗначениеПараметраНачалоПериода.Значение = СтандартныйПериод.ДатаНачала;*/
						}
						if(true/*СтандартныйПериод.ДатаОкончания <> '00010101'*/)
						{
							/*ЗначениеПараметраКонецПериода.Использование = Истина;*/
							/*ЗначениеПараметраКонецПериода.Значение = СтандартныйПериод.ДатаОкончания;*/
						}
					}
				}
				/*// Установка Стандартной даты начала
*/
				/*ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));*/
				if(true/*ЗначениеПараметраПериод <> Неопределено*/)
				{
					/*СтандартнаяДатаНачала = Неопределено;*/
					/*ЗначенияНастроек.Свойство("СтандартнаяДатаНачала", СтандартнаяДатаНачала);*/
					if(true/*СтандартнаяДатаНачала <> Неопределено*/)
					{
						if(true/*СтандартнаяДатаНачала.Дата <> '00010101'*/)
						{
							/*ЗначениеПараметраПериод.Использование = Истина;*/
							/*ЗначениеПараметраПериод.Значение = СтандартнаяДатаНачала.Дата;*/
						}
					}
				}
			}
			/*// Установка Динамических отборов
*/
			if(true/*ЗначенияНастроек.Свойство("ДинамическиеПараметры") И ПараметрыПанели.Свойство("Параметры")*/)
			{
			}
			/*// Установка Динамических отборов
*/
			/*УдалитьДублиОтбора(КомпоновщикНастроек);*/
			if(true/*ЗначенияНастроек.Свойство("ДинамическиеГруппировки") И ПараметрыПанели.Свойство("Группировки")*/)
			{
			}
		}

		public object ЭтоСтараяВерсияОтчета(/*ОтчетОбъект*/)
		{
			return null;
		}

		public object ПолучитьПараметрыПанелиПользователяОбъекта(/*ОтчетОбъект*/)
		{
			if(true/*ОтчетОбъект.ПараметрыПанелиПользователя = Неопределено*/)
			{
			}
			return null;
		}

		public object ПолучитьЗначенияНастроекПанелиПользователяОбъекта(/*ОтчетОбъект, ФормаОтчета = Неопределено*/)
		{
			if(true/*ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Неопределено*/)
			{
				if(true/*ФормаОтчета <> Неопределено*/)
				{
				}
				/*#КонецЕсли
		Возврат Неопределено;*/
			}
			return null;
		}
		// Заполняет одну коллекцию элементов на основании другой

		public void ЗаполнитьЭлементы(/*ПриемникЗначения, ИсточникЗначения, ПервыйУровень = Неопределено*/)
		{
			if(true/*ТипЗнч(ПриемникЗначения) = Тип("КоллекцияЗначенийПараметровКомпоновкиДанных")*/)
			{
				/*КоллекцияЗначений = ИсточникЗначения;*/
			}
		}
		// Компирует элементы из одной коллекции в другую

		public void СкопироватьЭлементы(/*ПриемникЗначения, ИсточникЗначения, ПроверятьДоступность = Ложь, ОчищатьПриемник = Истина*/)
		{
			if(true/*ТипЗнч(ИсточникЗначения) = Тип("УсловноеОформлениеКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ВариантыПользовательскогоПоляВыборКомпоновкиДанных")
		ИЛИ ТипЗнч(ИсточникЗначения) = Тип("ОформляемыеПоляКомпоновкиДанных")*/)
			{
				/*СоздаватьПоТипу = Ложь;*/
			}
			/*ПриемникЭлементов = ПриемникЗначения.Элементы;*/
			/*ИсточникЭлементов = ИсточникЗначения.Элементы;*/
			if(true/*ОчищатьПриемник*/)
			{
				/*ПриемникЭлементов.Очистить();*/
			}
		}

		public object ПолучитьСписокПериодов(/*ПериодСохраненный, Параметры*/)
		{
			/*СписокПериодов = Новый СписокЗначений;*/
			/*Периодичность = ПериодСохраненный.Периодичность;*/
			/*Строка = Параметры.ДоступныеПериодичности.НайтиСтроки(Новый Структура("Периодичность", Периодичность))[0];*/
			/*РассчитыватьЧерез = Строка.РассчитыватьЧерез;*/
			if(true/*Периодичность = РассчитыватьЧерез*/)
			{
				/*СписокПериодов.Добавить(ПериодСохраненный);*/
			}
			return null;
		}

		public void УдалитьДублиОтбора(/*КомпоновщикНастроек*/)
		{
			/*Отбор = КомпоновщикНастроек.Настройки.Отбор.Элементы;*/
			/*Количество = Отбор.Количество();*/
		}

		public object ПравыеЗначенияОтборовСовпадают(/*Значение1, Значение2*/)
		{
			if(true/*ТипЗнч(Значение1) <> ТипЗнч(Значение2)*/)
			{
			}
			if(true/*ТипЗнч(Значение1) <> Тип("СписокЗначений")*/)
			{
			}
			return null;
		}

		public void ЗагрузитьПредопределенныеНастройкиОтчетов(/**/)
		{
			/*#Если ТолстыйКлиентОбычноеПриложение тогда
	ТаблицаНастроек = ТиповыеОтчеты.ПолучитьТаблицуПредопределенныхНастроек();*/
			/*#КонецЕсли;*/
		}
		// Скрывает и показывает заголовок типового отчета

		public void УправлениеОтображениемЗаголовкаТиповогоОтчета(/*ОтчетОбъект, Результат*/)
		{
			/*ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			if(true/*Результат.ВысотаТаблицы = 0*/)
			{
			}
			/*ОбластьЗаголовок = Результат.Области.Найти("Заголовок");*/
			if(true/*ОбластьЗаголовок = Неопределено*/)
			{
			}
			if(true/*ЭтоСтараяВерсияОтчета(ОтчетОбъект)*/)
			{
				/*ПоказыватьЗаголовок = (ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить);*/
			}
			/*ОбластьЗаголовок.Видимость = ПоказыватьЗаголовок;*/
		}
		//Процедура назначает форме уникальный ключ идентификации для возможности открытия нескольких одинаковых форм

		public void НазначитьФормеУникальныйКлючИдентификации(/*Форма*/)
		{
			if(true/*Форма.КлючУникальности = Неопределено*/)
			{
				/*Форма.КлючУникальности = Новый УникальныйИдентификатор();*/
			}
		}
		// Открывает форму настройки типового очтета для редактирования

		public object РедактироватьНастройкиТиповогоОтчета(/*ОтчетОбъект, ФормаОтчета, ПараметрыФормы = Неопределено*/)
		{
			/*// Сохраним настройки на случай отмены редактирования
*/
			/*СохраненныеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();*/
			/*//ДописатьВКомпоновщик не достающие поля
*/
			/*// Откроем форму настройки
*/
			/*ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиСтруктурыОтчета", ФормаОтчета);*/
			/*ФормаНастройки.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;*/
			/*ФормаНастройки.ОтчетОбъект = ОтчетОбъект;*/
			/*ФормаНастройки.ОтрицательноеКрасным = ОтчетОбъект.ОтрицательноеКрасным;*/
			/*ФормаНастройки.НастройкаПериода = ОтчетОбъект.НастройкаПериода;*/
			/*ФормаНастройки.ПараметрыФормы = ПараметрыФормы;*/
			/*ФормаНастройки.РасширеннаяНастройка = ОтчетОбъект.РасширеннаяНастройка;*/
			/*ФормаНастройки.ОсновнаяНастройка = Истина;*/
			/*РезультатОткрытия = ФормаНастройки.ОткрытьМодально();*/
			/*// Проверим результат открытия
*/
			if(true/*РезультатОткрытия <> Неопределено*/)
			{
				/*// Обновим форму типового отчета
*/
				/*ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета);*/
				/*УправлениеОтображениемЗаголовкаТиповогоОтчета(ОтчетОбъект, ФормаОтчета.ЭлементыФормы.Результат);*/
				/*// Перерисуем форму отчета
*/
				/*ОтчетОбъект.РасширеннаяНастройка = ФормаНастройки.РасширеннаяНастройка;*/
			}
			return null;
		}

		public object РедактироватьСтруктуруОтчета(/*ОтчетОбъект, ФормаОтчета, ПараметрыФормы = Неопределено*/)
		{
			/*СохраненнаяМодифицированность = ФормаОтчета.Модифицированность;*/
			/*// Подготовим отчет к открытию формы настройки
*/
			/*ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);*/
			/*// Сохраним настройки на случай отмены редактирования
*/
			/*СохраненныеНастройки = ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки();*/
			/*//ЗаполнитьЭлементы(ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных, ФормаОтчета.КомпоновщикНастроекПользователя.Настройки.ПараметрыДанных);
*/
			/*//СкопироватьЭлементы(ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор,   ФормаОтчета.КомпоновщикНастроекПользователя.Настройки.Отбор);
*/
			/*//СкопироватьЭлементы(ОтчетОбъект.КомпоновщикНастроек.Настройки.Порядок, ФормаОтчета.КомпоновщикНастроекПользователя.Настройки.Порядок);
*/
			/*// Откроем форму настройки
*/
			/*ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиСтруктурыОтчета", ФормаОтчета);*/
			/*ФормаНастройки.КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;*/
			/*ФормаНастройки.ОтчетОбъект = ОтчетОбъект;*/
			/*ФормаНастройки.ОтрицательноеКрасным = ОтчетОбъект.ОтрицательноеКрасным;*/
			if(true/*ЭтоСтараяВерсияОтчета(ОтчетОбъект)*/)
			{
				/*ФормаНастройки.НастройкаПериода = ОтчетОбъект.НастройкаПериода;*/
			}
			/*ФормаНастройки.ПараметрыФормы = ПараметрыФормы;*/
			/*ФормаНастройки.РасширеннаяНастройка = ОтчетОбъект.РасширеннаяНастройка;*/
			/*ФормаНастройки.ОсновнаяНастройка = ОтчетОбъект.СохраненнаяНастройка.Пустая();*/
			/*РезультатОткрытия = ФормаНастройки.ОткрытьМодально();*/
			/*РасширеннаяНастройка = ФормаНастройки.РасширеннаяНастройка;*/
			/*ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);*/
			/*ПерерисоватьПанельНастроек(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек);*/
			/*ФормаОтчета.Модифицированность = Истина;*/
			/*// Проверим результат открытия
*/
			if(true/*РезультатОткрытия <> Неопределено*/)
			{
				/*// Обновим форму типового отчета
*/
				/*ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета);*/
				/*ЗаполнитьЭлементы(ФормаОтчета.КомпоновщикНастроекПользователя.Настройки.ПараметрыДанных, ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных);*/
				/*СкопироватьЭлементы(ФормаОтчета.КомпоновщикНастроекПользователя.Настройки.Отбор,   ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор);*/
				/*СкопироватьЭлементы(ФормаОтчета.КомпоновщикНастроекПользователя.Настройки.Порядок, ОтчетОбъект.КомпоновщикНастроек.Настройки.Порядок);*/
				/*ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета));*/
				/*УправлениеОтображениемЗаголовкаТиповогоОтчета(ОтчетОбъект, ФормаОтчета.ЭлементыФормы.Результат);*/
				/*// Перерисуем форму отчета
*/
				/*ПерерисоватьПанельНастроек(ОтчетОбъект, ФормаОтчета,,);*/
				/*ОтчетОбъект.РасширеннаяНастройка = ФормаНастройки.РасширеннаяНастройка;*/
				/*ФормаОтчета.Модифицированность = Истина;*/
			}
			return null;
		}
		// Скрывает или отображает быстрый отбор на форме

		public void УправлениеОтображениемЭлементовФормыТиповогоОтчета(/*ОтчетОбъект, ФормаОтчета*/)
		{
			if(true/*ЭтоСтараяВерсияОтчета(ОтчетОбъект)*/)
			{
				/*ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Отбор.Пометка = ОтчетОбъект.ПоказыватьБыстрыйОтбор;*/
				if(true/*ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Найти("Заголовок") <> Неопределено И ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Заголовок.Пометка*/)
				{
					/*Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить;*/
				}
				/*ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение = Значение;*/
				if(true/*ОтчетОбъект.ПоказыватьБыстрыйОтбор*/)
				{
					/*// Нужно показывать отбор
*/
					/*ФормаОтчета.ЭлементыФормы.Разделитель.Свертка = РежимСверткиЭлементаУправления.Нет;*/
					/*ФормаОтчета.ЭлементыФормы.ПанельОтбора.Свертка = РежимСверткиЭлементаУправления.Нет;*/
					/*ФормаОтчета.ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ФормаОтчета.Панель, ГраницаЭлементаУправления.Верх, ФормаОтчета.Панель, ГраницаЭлементаУправления.Низ);*/
					/*ФормаОтчета.ЭлементыФормы.ПанельОтбора.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ФормаОтчета.ЭлементыФормы.Разделитель, ГраницаЭлементаУправления.Верх);*/
				}
			}
		}
		// Открывает копию отчета в новом окне

		public void ОткрытьВНовомОкнеТиповойОтчет(/*ОтчетОбъект, ФормаОтчета*/)
		{
			if(true/*Строка(ОтчетОбъект) = "ВнешнийОтчетОбъект." + ОтчетОбъект.Метаданные().Имя*/)
			{
				/*Предупреждение("Данный отчет является внешним." + Символы.ПС + "Открытие нового отчета возможно только для объектов конфигурации.");*/
			}
			/*ЗаполнитьЗначенияСвойств(НовыйОтчет, ОтчетОбъект,, "СохраненнаяНастройка");*/
			/*НовыйОтчет.КомпоновщикНастроек.ЗагрузитьНастройки(ОтчетОбъект.КомпоновщикНастроек.ПолучитьНастройки());*/
			/*ФормаНовогоОтчета = НовыйОтчет.ПолучитьФорму();*/
			/*НазначитьФормеУникальныйКлючИдентификации(ФормаНовогоОтчета);*/
			/*ФормаНовогоОтчета.ЭтоОтработкаРасшифровки = Истина;*/
			/*ФормаНовогоОтчета.Открыть();*/
			/*СформироватьТиповойОтчет(НовыйОтчет, ФормаНовогоОтчета.ЭлементыФормы.Результат, ФормаНовогоОтчета.ДанныеРасшифровки);*/
			/*ФормаНовогоОтчета.ЭтоОтработкаРасшифровки = Ложь;*/
		}
		// Обновляет заголовок типового отчета

		public void ОбновитьЗаголовокТиповогоОтчета(/*ОтчетОбъект, ФормаОтчета*/)
		{
			/*ФормаОтчета.Заголовок = ПолучитьЗаголовокОтчета(ОтчетОбъект);*/
		}
		// Обновляет параметры периода в компоновщике настроек по данным формы

		public void ОбновитьПараметрыПериодаПоФорме(/*КомпоновщикНастроек, Форма*/)
		{
			/*ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));*/
			/*ЗначениеПараметраКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));*/
			/*ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));*/
			if(true/*ЗначениеПараметраНачалоПериода <> Неопределено*/)
			{
				/*ЗначениеПараметраНачалоПериода.Значение = Форма.НачалоПериода;*/
				/*ЗначениеПараметраНачалоПериода.Использование = Истина;*/
			}
			if(true/*ЗначениеПараметраКонецПериода <> Неопределено*/)
			{
				/*ЗначениеПараметраКонецПериода.Значение = ?(Форма.КонецПериода = '0001-01-01', Форма.КонецПериода, КонецДня(Форма.КонецПериода));*/
				/*ЗначениеПараметраКонецПериода.Использование = Истина;*/
			}
			if(true/*ЗначениеПараметраПериод <> Неопределено*/)
			{
				/*ЗначениеПараметраПериод.Значение = ?(Форма.Период = '0001-01-01', Форма.Период, КонецДня(Форма.Период));*/
				/*ЗначениеПараметраПериод.Использование = Истина;*/
			}
		}
		//Обновляет элементы формы типового отчета по компоновщику настроек

		public void ОбновитьФормуТиповогоОтчетаПоКомпоновщику(/*ОтчетОбъект, ФормаОтчета*/)
		{
			if(true/*ЭтоСтараяВерсияОтчета(ОтчетОбъект)*/)
			{
				/*// Параметры периода
*/
				/*ЗначениеПараметраНачалоПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));*/
				/*ЗначениеПараметраКонецПериода = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));*/
				/*ЗначениеПараметраПериод = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));*/
				if(true/*ЗначениеПараметраНачалоПериода <> Неопределено 
				И ЗначениеПараметраКонецПериода <> Неопределено*/)
				{
					/*ФормаОтчета.НачалоПериода = ЗначениеПараметраНачалоПериода.Значение;*/
					/*ФормаОтчета.КонецПериода = ЗначениеПараметраКонецПериода.Значение;*/
					/*ФормаОтчета.ЭлементыФормы.ПанельПериод.ТекущаяСтраница = ФормаОтчета.ЭлементыФормы.ПанельПериод.Страницы.Интервал;*/
				}
				/*// Вывод заголовка отменяется
*/
				/*Значение = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput")).Значение;*/
				/*Пометка = (Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить);*/
				if(true/*ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Найти("Заголовок") <> Неопределено*/)
				{
					/*ФормаОтчета.ЭлементыФормы.ДействияФормы.Кнопки.Заголовок.Пометка = Пометка;*/
				}
			}
		}
		// Процедура РезультатОбработкаРасшифровки
		// Действие, выполняемое при вызове расшифровки пользователем

		public void СтандартнаяОбработкаРасшифровкиТиповогоОтчета(/*ОтчетОбъект, ФормаОтчета, Расшифровка, СтандартнаяОбработка*/)
		{
			/*// Запретим стандартную обработку расшифровки
*/
			/*СтандартнаяОбработка = Ложь;*/
			/*// Создадим и инициализируем обработчик расшифровки
*/
			/*ОбработкаРасшифровки = Новый ОбработкаРасшифровкиКомпоновкиДанных(ФормаОтчета.ДанныеРасшифровки, 
		Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект)));*/
			/*// Осуществим выбор действия расшифровки пользователем
*/
			/*Настройки = ОбработкаРасшифровки.Выполнить(Расшифровка, ВыполненноеДействие);*/
			if(true/*Настройки <> Неопределено*/)
			{
				/*// Пользователь выбрал действие, для которого нужно менять настройки
*/
				if(true/*ВыполненноеДействие = ДействиеОбработкиРасшифровкиКомпоновкиДанных.Упорядочить*/)
				{
					/*// Если требется упорядочить - упорядочим в текущем отчете
*/
					/*ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);*/
					/*ФормаОтчета.ОбновитьОтчет();*/
				}
			}
		}
		// Отрабатывает расшифровки типового отчета

		public object ОбработкаРасшифровкиТиповогоОтчета(/*Расшифровка, СтандартнаяОбработка, ОтчетОбъект, ФормаОтчета, ДополнительныеРасшифровки = Неопределено*/)
		{
			/*//Если  ЭтоВнешнийОбъект(ОтчетОбъект) тогда
*/
			/*//	Возврат Неопределено;
*/
			/*//КонецЕсли;
*/
			if(true/*ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
			И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных")*/)
			{
			}
			/*СтандартнаяОбработка = Ложь;*/
			/*ЭтоДетальнаяЗапись = ЭтоДетальнаяЗапись(ФормаОтчета.ДанныеРасшифровки, Расшифровка);*/
			/*МассивПолейРасшифровки = ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки);*/
			/*МассивПолейРасшифровкиСРесурсами = ПолучитьМассивПолейРасшифровки(Расшифровка, ФормаОтчета.ДанныеРасшифровки, , Истина);*/
			/*ДотупноеПоле = Неопределено;*/
			if(true/*МассивПолейРасшифровкиСРесурсами.Количество() > 0*/)
			{
				/*ДотупноеПоле = ПолучитьДоступноеПоле(Новый ПолеКомпоновкиДанных(МассивПолейРасшифровкиСРесурсами[0].Поле), ОтчетОбъект.КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора);*/
			}
			/*Команда = Неопределено;*/
			if(true/*ЭтоДетальнаяЗапись*/)
			{
				/*Команда = "ОткрытьЗначение";*/
			}
			/*Значение = МассивПолейРасшифровкиСРесурсами[0].Значение;*/
			/*ПолеРасшифровки = ДотупноеПоле.Поле;*/
			/*ЭтоЧисловойРесурс = ДотупноеПоле <> Неопределено И ДотупноеПоле.Ресурс И (ДотупноеПоле.Тип.СодержитТип(Тип("Число")) или ТипЗнч(Значение) = Тип("Число") или Значение = NULL);*/
			if(true/*ЭтоЧисловойРесурс И НЕ ЭтоДетальнаяЗапись*/)
			{
				/*Команда = "РасшифроватьПоле";*/
			}
			/*//Если ЭтоЧисловойРесурс И ЭтоДетальнаяЗапись тогда
*/
			/*//	Предупреждение("Поле """ + ДотупноеПоле.Заголовок + """ расшифровать не удалось, так как ");
*/
			/*//	Возврат;
*/
			/*//КонецЕсли;
*/
			if(true/*Команда = "ОткрытьЗначение"*/)
			{
				if(true/*МассивПолейРасшифровкиСРесурсами[0].Значение <> NULL*/)
				{
					/*ОткрытьЗначение(МассивПолейРасшифровкиСРесурсами[0].Значение);*/
				}
			}
			return null;
		}
		// Выводит на печать без предварительного просмотра табличный документ

		public void ПечатьТиповогоОтчета(/*Результат*/)
		{
			/*Результат.Напечатать();*/
		}
		// Открывает форму редактирования пользовательского поля

		public void РедактироватьПользовательскиеПоля(/*КомпоновщикНастроек, ОтчетОбъект*/)
		{
			/*КонструкторПользовательскихПолей = Обработки.КонструкторПользовательскихПолей.Создать();*/
			/*Форма = КонструкторПользовательскихПолей.ПолучитьФорму("Форма", );*/
			/*Форма.ОтчетОбъект = ОтчетОбъект;*/
			/*Форма.КомпоновщикНастроек = КомпоновщикНастроек;*/
			/*Форма.ОткрытьМодально();*/
		}

		public object ПоказатьСхему(/*СхемаКомпоновкиДанных, КомпоновщикНастроек, Форма*/)
		{
			/*СкопироватьНастройкиКомпоновкиДанных(СхемаКомпоновкиДанных.НастройкиПоУмолчанию, КомпоновщикНастроек.ПолучитьНастройки());*/
			/*Конструктор = Новый КонструкторСхемыКомпоновкиДанных(СхемаКомпоновкиДанных);*/
			/*Конструктор.Редактировать(Форма);*/
			return null;
		}

		public void ОбработкаИзмененияТиповогоОтчетаНаФормеОтчета(/*ОтчетОбъект, ФормаОтчета*/)
		{
			if(true/*ОтчетОбъект.СохраненнаяНастройка <> Неопределено 
			И ОтчетОбъект.СохраненнаяНастройка.СохранятьАвтоматически*/)
			{
				/*ФормаОтчета.СохранитьНастройку();*/
			}
		}
		/////////////////////////////////////////////////////////////////////////////////////////
		// ДИНАМИЧЕСКИЕ ОТБОРЫ

		public void НарисоватьПериодПолемВыбора(/*ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, Лево, ЕстьПериодНаГорПанели*/)
		{
			if(true/*Не Параметры.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование*/)
			{
			}
			/*ПараметрыИсполненияОтчета = Неопределено;*/
			/*ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			if(true/*ПараметрыИсполненияОтчета = Неопределено или НЕ ПараметрыИсполненияОтчета.Свойство("МинимальныйПериодОтчета")*/)
			{
			}
			/*МинимальныйПериодОтчета = ПараметрыИсполненияОтчета.МинимальныйПериодОтчета;*/
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			/*КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;*/
			/*ЦветФонаКнопки = Новый Цвет(246, 244, 236);*/
			/*// Закладка Стандартный Период
*/
			/*ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));*/
			/*ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));*/
			/*Лево = 0;*/
			/*// Стандартный период
*/
			if(true/*ЗначениеПараметраНачалоПериода <> Неопределено
			И ЗначениеПараметраКонецПериода <> Неопределено*/)
			{
				/*//	   	Панель = Неопределено;
*/
				/*ЭлементыФормы.ПанельПользователяГоризонтальная.ТекущаяСтраница = ЭлементыФормы.ПанельПользователяГоризонтальная.Страницы.ГоризонтальныеОтборы;*/
				/*Панель = ЭлементыФормы.ПанельПользователяГоризонтальная;*/
				/*Верх = 6;*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартныйПериод",, Панель);*/
				/*НовыйЭлемент.Данные = "СтандартныйПериод";*/
				/*НовыйЭлемент.Видимость = Ложь;*/
				/*// Поле выбора Стандартный период
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартныйПериодПользователя",, Панель);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = Лево;*/
				/*НовыйЭлемент.Ширина = 200;*/
				/*НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");*/
				/*НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;*/
				/*//НовыйЭлемент.РедактированиеТекста = ложь;
*/
				/*СписокВыбора = ПолучитьСписокВыбораСтандартногоПериодаПользователя(Параметры);*/
				/*;
			НовыйЭлемент.СписокВыбора = СписокВыбора;*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартныйПериодПользователяПриИзменении;*/
				/*НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);*/
				/*//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
*/
				/*// Восстанавливаем значение
*/
				if(true/*ЗначенияНастроек.Свойство("СтандартныйПериод")*/)
				{
					/*СтандартныйПериод = ЗначенияНастроек.СтандартныйПериод;*/
					if(true/*СписокВыбора.НайтиПоЗначению(СтандартныйПериод.Вариант) <> Неопределено*/)
					{
						/*НовыйЭлемент.Значение = СтандартныйПериод.Вариант;*/
						/*ФормаОтчета.СтандартныйПериод = СтандартныйПериод;*/
					}
				}
				/*УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартныйПериод);*/
				/*//Верх = Верх + НовыйЭлемент.Высота + 6;
*/
				/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
				/*// Надпись с
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьС",, Панель);*/
				/*НовыйЭлемент.Верх = Верх+2;*/
				/*НовыйЭлемент.Лево = Лево;*/
				/*НовыйЭлемент.Ширина = 40;*/
				/*НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;*/
				/*НовыйЭлемент.Заголовок = "период:";*/
				/*//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
*/
				/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
				/*// Дата с
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборПериодВыбор",, Панель);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = Лево;*/
				/*НовыйЭлемент.КнопкаВыбора = ложь;*/
				/*НовыйЭлемент.Ширина = 130;*/
				/*НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");*/
				/*НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;*/
				/*НовыйЭлемент.Данные = "";*/
				/*НовыйЭлемент.КнопкаСпискаВыбора = истина;*/
				/*НовыйЭлемент.Значение = ПолучитьПредставлениеПериода(ФормаОтчета.СтандартныйПериод.ДатаНачала, ФормаОтчета.СтандартныйПериод.ДатаОкончания, МинимальныйПериодОтчета);*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборПриИзменении;*/
				/*НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборПриНачалеВыбораИзСписка;*/
				/*НовыйЭлемент.УстановитьДействие("НачалоВыбораИзСписка", Действие);*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборАвтоПодборТекста;*/
				/*НовыйЭлемент.УстановитьДействие("АвтоПодборТекста", Действие);*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборОчистка;*/
				/*НовыйЭлемент.УстановитьДействие("Очистка", Действие);*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДинамическийОтборПериодВыборОкончаниеВводаТекста;*/
				/*НовыйЭлемент.УстановитьДействие("ОкончаниеВводаТекста", Действие);*/
				/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
				/*ЕстьПериодНаГорПанели = Истина;*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Кнопка"), "ДинамическийОтборПериодаВыборПериода",, Панель);*/
				/*НовыйЭлемент.Заголовок = "...";*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = Лево;*/
				/*НовыйЭлемент.Ширина = 15;*/
				/*НовыйЭлемент.Высота = 19;*/
				/*НовыйЭлемент.Подсказка = "Выбор произвольного периода";*/
				/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоОтбора;*/
				/*НовыйЭлемент.УстановитьДействие("Нажатие", Действие);*/
			}
			if(true/*ЗначениеПараметраНачалоПериода <> Неопределено	И ЗначениеПараметраКонецПериода <> Неопределено*/)
			{
				/*Лево = Лево + 16;*/
			}
		}

		public void НарисоватьСтандартныйПериод(/*ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, Лево, ЕстьПериодНаГорПанели*/)
		{
			if(true/*Не Параметры.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование*/)
			{
			}
			/*ПараметрыИсполненияОтчета = Неопределено;*/
			/*ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			if(true/*ПараметрыИсполненияОтчета <> Неопределено и ПараметрыИсполненияОтчета.Свойство("МинимальныйПериодОтчета")*/)
			{
				/*НарисоватьПериодПолемВыбора(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, Лево, ЕстьПериодНаГорПанели);*/
			}
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			/*КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;*/
			/*ЦветФонаКнопки = Новый Цвет(246, 244, 236);*/
			/*// Закладка Стандартный Период
*/
			/*ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));*/
			/*ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));*/
			/*ЗначениеПараметраПериод        = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));*/
			/*Лево = 0;*/
			/*// Стандартный период
*/
			if(true/*ЗначениеПараметраНачалоПериода <> Неопределено
			И ЗначениеПараметраКонецПериода <> Неопределено*/)
			{
				/*//	   	Панель = Неопределено;
*/
				/*ЭлементыФормы.ПанельПользователяГоризонтальная.ТекущаяСтраница = ЭлементыФормы.ПанельПользователяГоризонтальная.Страницы.ГоризонтальныеОтборы;*/
				/*Панель = ЭлементыФормы.ПанельПользователяГоризонтальная;*/
				/*Верх = 6;*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартныйПериод",, Панель);*/
				/*НовыйЭлемент.Данные = "СтандартныйПериод";*/
				/*НовыйЭлемент.Видимость = Ложь;*/
				/*// Поле выбора Стандартный период
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартныйПериодПользователя",, Панель);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = Лево;*/
				/*НовыйЭлемент.Ширина = 200;*/
				/*НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");*/
				/*НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;*/
				/*//НовыйЭлемент.РедактированиеТекста = ложь;
*/
				/*СписокВыбора = ПолучитьСписокВыбораСтандартногоПериодаПользователя(Параметры);*/
				/*;
			НовыйЭлемент.СписокВыбора = СписокВыбора;*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартныйПериодПользователяПриИзменении;*/
				/*НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);*/
				/*//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
*/
				/*// Восстанавливаем значение
*/
				if(true/*ЗначенияНастроек.Свойство("СтандартныйПериод")*/)
				{
					/*СтандартныйПериод = ЗначенияНастроек.СтандартныйПериод;*/
					if(true/*СписокВыбора.НайтиПоЗначению(СтандартныйПериод.Вариант) <> Неопределено*/)
					{
						/*НовыйЭлемент.Значение = СтандартныйПериод.Вариант;*/
						/*ФормаОтчета.СтандартныйПериод = СтандартныйПериод;*/
					}
				}
				/*УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартныйПериод);*/
				/*//Верх = Верх + НовыйЭлемент.Высота + 6;
*/
				/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
				/*// Надпись с
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьС",, Панель);*/
				/*НовыйЭлемент.Верх = Верх+2;*/
				/*НовыйЭлемент.Лево = Лево;*/
				/*НовыйЭлемент.Ширина = 6;*/
				/*НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;*/
				/*НовыйЭлемент.Заголовок = "с:";*/
				/*//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
*/
				/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
				/*// Дата с
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДатаНачала",, Панель);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = Лево;*/
				/*НовыйЭлемент.Ширина = 80;*/
				/*НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));*/
				/*НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;*/
				/*НовыйЭлемент.Данные = "СтандартныйПериод.ДатаНачала";*/
				/*НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартногоПериода.ПроизвольныйПериод) <> Неопределено;*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартногоПериодаПриИзменении;*/
				/*НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);*/
				/*//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
*/
				/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
				/*// Надпись по
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьПо",, Панель);*/
				/*НовыйЭлемент.Верх = Верх+2;*/
				/*НовыйЭлемент.Лево = Лево;*/
				/*НовыйЭлемент.Ширина = 6;*/
				/*НовыйЭлемент.Заголовок = "по:";*/
				/*НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;*/
				/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
				/*//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
*/
				/*// Дата по
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДатаОкончания",, Панель);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = Лево;*/
				/*НовыйЭлемент.Ширина = 80;*/
				/*НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));*/
				/*НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;*/
				/*НовыйЭлемент.Данные = "СтандартныйПериод.ДатаОкончания";*/
				/*НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартногоПериода.ПроизвольныйПериод) <> Неопределено;*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартногоПериодаПриИзменении;*/
				/*НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);*/
				/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
				/*//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
*/
				/*ЕстьПериодНаГорПанели = Истина;*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Кнопка"), "ДинамическийОтборПериодаВыборПериода",, Панель);*/
				/*НовыйЭлемент.Заголовок = "...";*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = Лево;*/
				/*НовыйЭлемент.Ширина = 15;*/
				/*НовыйЭлемент.Высота = 19;*/
				/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоОтбора;*/
				/*НовыйЭлемент.УстановитьДействие("Нажатие", Действие);*/
			}
			/*// Стандартная дата начала
*/
			if(true/*ЗначениеПараметраПериод <> Неопределено*/)
			{
				/*//НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Вставить(0, "ДинамическийОтборСтандартнаяДатаНачала", "Период");
*/
				/*//НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтборСтандартнаяДатаНачала", "Период");
*/
				/*//Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();
*/
				/*//ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(НоваяСтраница, -(Количество-1));
*/
				/*//НоваяСтраница.Раскрыта = Истина;
*/
				/*ЭлементыФормы.ПанельПользователяГоризонтальная.ТекущаяСтраница = ЭлементыФормы.ПанельПользователяГоризонтальная.Страницы.ГоризонтальныеОтборы;*/
				/*Верх = 6;*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартнаяДатаНачала",, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
				/*НовыйЭлемент.Данные = "СтандартнаяДатаНачала";*/
				/*НовыйЭлемент.Видимость = Ложь;*/
				/*// Поле выбора Стандартная дата начала
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартнаяДатаНачалаПользователя",, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = Лево;*/
				/*НовыйЭлемент.Ширина = 200;*/
				/*НовыйЭлемент.Высота = 19;*/
				/*НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");*/
				/*//		НовыйЭлемент.РедактированиеТекста = ложь;
*/
				/*НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;*/
				/*СписокВыбора = ПолучитьСписокВыбораСтандартнойДатыНачалаПользователя(Параметры);*/
				/*НовыйЭлемент.СписокВыбора = СписокВыбора;*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении;*/
				/*НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);*/
				/*//		УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
*/
				/*// Восстанавливаем значение варианта стандартной даты начала
*/
				if(true/*ЗначенияНастроек.Свойство("СтандартнаяДатаНачала")*/)
				{
					/*СтандартнаяДатаНачала = ЗначенияНастроек.СтандартнаяДатаНачала;*/
					if(true/*СписокВыбора.НайтиПоЗначению(СтандартнаяДатаНачала.Вариант) <> Неопределено*/)
					{
						/*НовыйЭлемент.Значение = СтандартнаяДатаНачала.Вариант;*/
						/*ФормаОтчета.СтандартнаяДатаНачала = СтандартнаяДатаНачала;*/
					}
				}
				/*УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартнаяДатаНачала);*/
				/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
				/*//Верх = Верх + 19 + 6;
*/
				/*// Надпись дата
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьДата",, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
				/*НовыйЭлемент.Верх = Верх+2;*/
				/*НовыйЭлемент.Лево = Лево;*/
				/*НовыйЭлемент.Ширина = 26;*/
				/*НовыйЭлемент.Заголовок = "дата:";*/
				/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
				/*//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
*/
				/*// Поле ввода даты
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДата",, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = Лево;*/
				/*НовыйЭлемент.Ширина = 80;*/
				/*НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));*/
				/*НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;*/
				/*НовыйЭлемент.Данные = "СтандартнаяДатаНачала.Дата";*/
				/*НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартнойДатыНачала.ПроизвольнаяДата) <> Неопределено;*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении;*/
				/*НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);*/
				/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
				/*//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
*/
				/*// Восстанавливаем значение
*/
				/*//Если ЗначенияНастроек.Свойство("СтандартнаяДатаНачала") Тогда
*/
				/*//	СтандартнаяДатаНачала = ЗначенияНастроек.СтандартнаяДатаНачала;
*/
				/*//	НовыйЭлемент.Значение = СтандартнаяДатаНачала.Дата;
*/
				/*//КонецЕсли;
*/
				/*ЕстьПериодНаГорПанели = Истина;*/
			}
			if(true/*ЗначениеПараметраПериод <> Неопределено ИЛИ (ЗначениеПараметраНачалоПериода <> Неопределено 
			И ЗначениеПараметраКонецПериода <> Неопределено)*/)
			{
				/*Лево = Лево + 16;*/
			}
		}

		public void НарисоватьСтандартныйПериодНаПравойПанели(/*ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, ПараметрыИсполненияОтчета = Неопределено*/)
		{
			if(true/*Не Параметры.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование*/)
			{
			}
			/*СтруктураЭлементовУправления = Новый Структура("
		|СтраницаПанели, 
		|ДинамическийОтборСтандартныйПериод, 
		|ДинамическийОтборСтандартныйПериодПользователя,
		|ДинамическийОтборСтандартнаяДатаНачала,
		|ДинамическийОтборСтандартнаяДатаНачалаПользователя,
		|ДинамическийОтборНадписьС,
		|ДинамическийОтборДатаНачала,
		|ДинамическийОтборНадписьПо,
		|ДинамическийОтборДатаОкончания,
		|ДинамическийОтборНадписьДата,
		|ДинамическийОтборДата");*/
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			/*КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;*/
			/*ЦветФонаКнопки = Новый Цвет(246, 244, 236);*/
			/*// Закладка Стандартный Период
*/
			/*ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));*/
			/*ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));*/
			/*ЗначениеПараметраПериод        = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));*/
			/*// Стандартный период
*/
			if(true/*ЗначениеПараметраНачалоПериода <> Неопределено
			И ЗначениеПараметраКонецПериода <> Неопределено*/)
			{
				/*//НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Вставить(0, "ДинамическийОтборСтандартныйПериод", "Период");
*/
				/*НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтборСтандартныйПериод", "Период");*/
				/*Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();*/
				/*ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(НоваяСтраница, -(Количество-1));*/
				/*НоваяСтраница.Раскрыта = Истина;*/
				/*СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;*/
				/*ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;*/
				/*Верх = 6;*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартныйПериод",, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Данные = "СтандартныйПериод";*/
				/*НовыйЭлемент.Видимость = Ложь;*/
				/*СтруктураЭлементовУправления.ДинамическийОтборСтандартныйПериод = НовыйЭлемент;*/
				/*// Поле выбора Стандартный период
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартныйПериодПользователя",, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = 6;*/
				/*НовыйЭлемент.Ширина = 292;*/
				/*НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");*/
				/*НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;*/
				/*СписокВыбора = ПолучитьСписокВыбораСтандартногоПериодаПользователя(Параметры);*/
				/*;
			НовыйЭлемент.СписокВыбора = СписокВыбора;*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартныйПериодПользователяПриИзменении;*/
				/*НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);*/
				/*УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);*/
				/*СтруктураЭлементовУправления.ДинамическийОтборСтандартныйПериодПользователя = НовыйЭлемент;*/
				/*// Восстанавливаем значение
*/
				if(true/*ЗначенияНастроек.Свойство("СтандартныйПериод")*/)
				{
					/*СтандартныйПериод = ЗначенияНастроек.СтандартныйПериод;*/
					if(true/*СписокВыбора.НайтиПоЗначению(СтандартныйПериод.Вариант) <> Неопределено*/)
					{
						/*НовыйЭлемент.Значение = СтандартныйПериод.Вариант;*/
						/*ФормаОтчета.СтандартныйПериод = СтандартныйПериод;*/
					}
				}
				/*УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартныйПериод);*/
				/*Верх = Верх + НовыйЭлемент.Высота + 6;*/
				/*// Надпись с
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьС",, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = 6;*/
				/*НовыйЭлемент.Ширина = 6;*/
				/*НовыйЭлемент.Заголовок = "с:";*/
				/*СтруктураЭлементовУправления.ДинамическийОтборНадписьС = НовыйЭлемент;*/
				/*// Дата с
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДатаНачала",, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = 20;*/
				/*НовыйЭлемент.Ширина = 80;*/
				/*НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));*/
				/*НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;*/
				/*НовыйЭлемент.Данные = "СтандартныйПериод.ДатаНачала";*/
				/*НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартногоПериода.ПроизвольныйПериод) <> Неопределено;*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартногоПериодаПриИзменении;*/
				/*НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);*/
				/*СтруктураЭлементовУправления.ДинамическийОтборНадписьС = НовыйЭлемент;*/
				/*// Надпись по
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьПо",, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = 110;*/
				/*НовыйЭлемент.Ширина = 6;*/
				/*НовыйЭлемент.Заголовок = "по:";*/
				/*СтруктураЭлементовУправления.ДинамическийОтборНадписьПо = НовыйЭлемент;*/
				/*// Дата по
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДатаОкончания",, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = 128;*/
				/*НовыйЭлемент.Ширина = 80;*/
				/*НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));*/
				/*НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;*/
				/*НовыйЭлемент.Данные = "СтандартныйПериод.ДатаОкончания";*/
				/*НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартногоПериода.ПроизвольныйПериод) <> Неопределено;*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартногоПериодаПриИзменении;*/
				/*НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);*/
				/*СтруктураЭлементовУправления.ДинамическийОтборДатаОкончания = НовыйЭлемент;*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Кнопка"), "ДинамическийОтборПериодаВыборПериода",, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Заголовок = "...";*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = 214;*/
				/*НовыйЭлемент.Ширина = 20;*/
				/*Действие = Новый Действие("ДействияПанелиИзменениеЗначенияДинамическогоОтбора");*/
				/*НовыйЭлемент.УстановитьДействие("Нажатие", Действие);*/
			}
			/*// Стандартная дата начала
*/
			if(true/*ЗначениеПараметраПериод <> Неопределено*/)
			{
				/*//НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Вставить(0, "ДинамическийОтборСтандартнаяДатаНачала", "Период");
*/
				/*НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическийОтборСтандартнаяДатаНачала", "Период");*/
				/*Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();*/
				/*ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(НоваяСтраница, -(Количество-1));*/
				/*НоваяСтраница.Раскрыта = Истина;*/
				/*ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;*/
				/*СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;*/
				/*Верх = 6;*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборСтандартнаяДатаНачала",, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Данные = "СтандартнаяДатаНачала";*/
				/*НовыйЭлемент.Видимость = Ложь;*/
				/*СтруктураЭлементовУправления.ДинамическийОтборСтандартнаяДатаНачала = НовыйЭлемент;*/
				/*// Поле выбора Стандартная дата начала
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтборСтандартнаяДатаНачалаПользователя",, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = 6;*/
				/*НовыйЭлемент.Ширина = 292;*/
				/*НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Строка");*/
				/*НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;*/
				/*СписокВыбора = ПолучитьСписокВыбораСтандартнойДатыНачалаПользователя(Параметры);*/
				/*НовыйЭлемент.СписокВыбора = СписокВыбора;*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСтандартнаяДатаНачалаПользователяПриИзменении;*/
				/*НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);*/
				/*УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);*/
				/*СтруктураЭлементовУправления.ДинамическийОтборСтандартнаяДатаНачалаПользователя = НовыйЭлемент;*/
				/*// Восстанавливаем значение варианта стандартной даты начала
*/
				if(true/*ЗначенияНастроек.Свойство("СтандартнаяДатаНачала")*/)
				{
					/*СтандартнаяДатаНачала = ЗначенияНастроек.СтандартнаяДатаНачала;*/
					if(true/*СписокВыбора.НайтиПоЗначению(СтандартнаяДатаНачала.Вариант) <> Неопределено*/)
					{
						/*НовыйЭлемент.Значение = СтандартнаяДатаНачала.Вариант;*/
						/*ФормаОтчета.СтандартнаяДатаНачала = СтандартнаяДатаНачала;*/
					}
				}
				/*УстановитьДопустимоеЗначениеСпискаВыбора(НовыйЭлемент, ФормаОтчета.СтандартнаяДатаНачала);*/
				/*Верх = Верх + 19 + 6;*/
				/*// Надпись дата
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтборНадписьДата",, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Верх = Верх + 3;*/
				/*НовыйЭлемент.Лево = 6;*/
				/*НовыйЭлемент.Ширина = 26;*/
				/*НовыйЭлемент.Заголовок = "дата:";*/
				/*СтруктураЭлементовУправления.ДинамическийОтборНадписьДата = НовыйЭлемент;*/
				/*// Поле ввода даты
*/
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтборДата",, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = 40;*/
				/*НовыйЭлемент.Ширина = 80;*/
				/*НовыйЭлемент.ТипЗначения = Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.Дата));*/
				/*НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;*/
				/*НовыйЭлемент.Данные = "СтандартнаяДатаНачала.Дата";*/
				/*НовыйЭлемент.Доступность = СписокВыбора.НайтиПоЗначению(ВариантСтандартнойДатыНачала.ПроизвольнаяДата) <> Неопределено;*/
				/*Действие = ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиДатаСтандартнойДатыНачалаПриИзменении;*/
				/*НовыйЭлемент.УстановитьДействие("ПриИзменении", Действие);*/
				/*СтруктураЭлементовУправления.ДинамическийОтборДата = НовыйЭлемент;*/
				/*// Восстанавливаем значение
*/
				if(true/*ЗначенияНастроек.Свойство("СтандартнаяДатаНачала")*/)
				{
					/*СтандартнаяДатаНачала = ЗначенияНастроек.СтандартнаяДатаНачала;*/
					/*НовыйЭлемент.Значение = СтандартнаяДатаНачала.Дата;*/
				}
			}
			if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаПериода") И ПараметрыИсполненияОтчета.ПослеВыводаПериода*/)
			{
				/*ФормаОтчета.ПослеВыводаПериода(СтруктураЭлементовУправления);*/
			}
		}

		public void НарисоватьДинамическийОтборГоризонтальнойПанели(/*ФормаОтчета, Индекс, Лево, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ПоследнийЭлемент = ложь, Список = истина, ПараметрыИсполненияОтчета = Неопределено, ПредыдущийЭлемент, СреднийРазмерЭлементаУправления*/)
		{
			if(true/*ДоступноеПоле = Неопределено*/)
			{
			}
			/*СтруктураЭлементовУправления = Новый Структура("
		|СтрокаОтбора, 
		|СтраницаПанели, 
		|ДинамическийОтборНадпись, 
		|ДинамическийОтборПолеВвода");*/
			/*СтруктураЭлементовУправления.СтрокаОтбора = СтрокаОтбора;*/
			/*ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;*/
			/*ШиринаПанелиЗакладки = ЭлементыФормы.ПанельПользователяГоризонтальная.Ширина;*/
			/*СтруктураЭлементовУправления.СтраницаПанели = ЭлементыФормы.ПанельПользователяГоризонтальная.ТекущаяСтраница;*/
			/*НовыйЭлементНадпись = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтбор" + Индекс + "Надпись", Истина, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
			/*НовыйЭлементНадпись.Верх = 6;*/
			/*НовыйЭлементНадпись.Лево = Лево;*/
			/*СреднийРазмерЭлементаУправления = ?(СреднийРазмерЭлементаУправления = Неопределено, СтрДлина(СтрокаОтбора.Представление)*7, СреднийРазмерЭлементаУправления);*/
			/*НовыйЭлементНадпись.Ширина = ?(СреднийРазмерЭлементаУправления > СтрДлина(СтрокаОтбора.Представление)*7, СтрДлина(СтрокаОтбора.Представление)*7, СреднийРазмерЭлементаУправления);*/
			/*НовыйЭлементНадпись.Заголовок = СтрокаОтбора.Представление+":";*/
			/*НовыйЭлементНадпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;*/
			/*Лево = Лево + НовыйЭлементНадпись.Ширина + 6;*/
			/*//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);
*/
			/*СтруктураЭлементовУправления.ДинамическийОтборНадпись = НовыйЭлементНадпись;*/
			if(true/*ПредыдущийЭлемент = Неопределено*/)
			{
				/*УстановитьЛевуюПривязку(НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
			}
			/*УстановитьПривязкуКЛевойГранице(НовыйЭлементНадпись, НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
			/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтбор" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
			/*НовыйЭлемент.Верх = 6;*/
			/*НовыйЭлемент.Лево = Лево;*/
			if(true/*Найти(Строка(ДоступноеПоле.Тип),"ПланСчетов") <> 0*/)
			{
				/*НовыйЭлемент.Ширина = СреднийРазмерЭлементаУправления/2.5;*/
			}
			/*НовыйЭлемент.ТипЗначения	   = ДоступноеПоле.Тип;*/
			if(true/*Список*/)
			{
				/*НовыйЭлемент.Значение          = Новый СписокЗначений;*/
				/*НовыйЭлемент.ТипЗначения       = Новый ОписаниеТипов("СписокЗначений");*/
				/*НовыйЭлемент.ТипЗначенияСписка = ДоступноеПоле.Тип;*/
			}
			/*НовыйЭлемент.ЦветФонаКнопки    = ЦветФонаКнопки;*/
			/*НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоОтбора);*/
			if(true/*ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиНачалоВыбораЗначенияДинамическогоОтбора")*/)
			{
				/*НовыйЭлемент.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиНачалоВыбораЗначенияДинамическогоОтбора);*/
			}
			if(true/*ПоследнийЭлемент*/)
			{
				/*УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
				/*НовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, НовыйЭлементНадпись, ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельПользователяГоризонтальная, ГраницаЭлементаУправления.Право);*/
			}
			/*//Получить из значений
*/
			if(true/*ЭлементДинамическогоОтбора <> Неопределено*/)
			{
				/*// Восстановим значение
*/
				/*НовыйЭлемент.Значение = ЭлементДинамическогоОтбора.Значение;*/
			}
			/*Лево = ?(ПоследнийЭлемент, Лево, Лево + НовыйЭлемент.Ширина + 6);*/
			/*СтруктураЭлементовУправления.ДинамическийОтборПолеВвода = НовыйЭлемент;*/
			if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаОтбора") И ПараметрыИсполненияОтчета.ПослеВыводаОтбора*/)
			{
				/*ФормаОтчета.ПослеВыводаОтбора(СтруктураЭлементовУправления);*/
			}
		}

		public void НарисоватьДинамическийОтборФлажокЗначение(/*ФормаОтчета, Индекс, Верх, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ПараметрыИсполненияОтчета = Неопределено*/)
		{
			if(true/*ДоступноеПоле = Неопределено*/)
			{
			}
			/*СтруктураЭлементовУправления = Новый Структура("
		|СтрокаОтбора, 
		|СтраницаПанели, 
		|ДинамическийОтборФлажок, 
		|ДинамическийОтборНадпись,
		|ДинамическийОтборПолеВвода");*/
			/*СтруктураЭлементовУправления.СтрокаОтбора = СтрокаОтбора;*/
			/*ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;*/
			/*ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина-15;*/
			/*СтруктураЭлементовУправления.СтраницаПанели = ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница;*/
			if(true/*СтрокаОтбора.ВидОтбора = "Флажок" ИЛИ СтрокаОтбора.ВидОтбора = "ФлажокЗначение"*/)
			{
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Флажок"), "ДинамическийОтбор" + Индекс + "Флажок", Истина, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = 6;*/
				/*НовыйЭлемент.Ширина = 143 * ?(СтрокаОтбора.ВидОтбора = "ФлажокЗначение", 1, 2);*/
				/*НовыйЭлемент.Заголовок = СтрокаОтбора.Представление;*/
				/*НовыйЭлемент.Значение = СтрокаОтбора.Использование;*/
				/*//Получить из значений
*/
				if(true/*ЭлементДинамическогоОтбора <> Неопределено 
				И ТипЗнч(ЭлементДинамическогоОтбора.Использование) = Тип("Булево")*/)
				{
					/*// Восстановим значение
*/
					/*НовыйЭлемент.Значение = ЭлементДинамическогоОтбора.Использование;*/
				}
				if(true/*СтрокаОтбора.ВидОтбора = "Флажок"*/)
				{
					/*УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);*/
				}
				/*СтруктураЭлементовУправления.ДинамическийОтборФлажок = НовыйЭлемент;*/
			}
			if(true/*СтрокаОтбора.ВидОтбора = "Значение"*/)
			{
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтбор" + Индекс + "Надпись", Истина, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = 6;*/
				/*НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 19;*/
				/*НовыйЭлемент.Заголовок = СтрокаОтбора.Представление;*/
				/*СтруктураЭлементовУправления.ДинамическийОтборНадпись = НовыйЭлемент;*/
			}
			if(true/*СтрокаОтбора.ВидОтбора = "Значение" ИЛИ СтрокаОтбора.ВидОтбора = "ФлажокЗначение"*/)
			{
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВвода"), "ДинамическийОтбор" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельЗакладок);*/
				/*НовыйЭлемент.Верх = Верх;*/
				/*НовыйЭлемент.Лево = 153;*/
				/*НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 153 - 9;*/
				/*НовыйЭлемент.ТипЗначения = ДоступноеПоле.Тип;*/
				/*НовыйЭлемент.ЦветФонаКнопки = ЦветФонаКнопки;*/
				/*НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоОтбора);*/
				if(true/*ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиНачалоВыбораЗначенияДинамическогоОтбора")*/)
				{
					/*НовыйЭлемент.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиНачалоВыбораЗначенияДинамическогоОтбора);*/
				}
				/*УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);*/
				/*//Получить из значений
*/
				if(true/*ЭлементДинамическогоОтбора <> Неопределено*/)
				{
					/*// Восстановим значение
*/
					/*НовыйЭлемент.Значение = ЭлементДинамическогоОтбора.Значение;*/
				}
				/*СтруктураЭлементовУправления.ДинамическийОтборПолеВвода = НовыйЭлемент;*/
			}
			/*Верх = Верх + 19 + 6;*/
			if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаОтбора") И ПараметрыИсполненияОтчета.ПослеВыводаОтбора*/)
			{
				/*ФормаОтчета.ПослеВыводаОтбора(СтруктураЭлементовУправления);*/
			}
		}

		public void НарисоватьДинамическийОтборСписок(/*ФормаОтчета, Индекс, Верх, ЦветФонаКнопки, СтрокаОтбора, ЭлементДинамическогоОтбора, ДоступноеПоле, ПараметрыИсполненияОтчета = Неопределено*/)
		{
			if(true/*ДоступноеПоле = Неопределено*/)
			{
			}
			/*СтруктураЭлементовУправления = Новый Структура("
		|СтрокаОтбора, 
		|СтраницаПанели, 
		|ДинамическийОтборВидСравнения, 
		|ДинамическийОтборСохранитьСписок,
		|ДинамическийОтборЗагрузитьСписок,
		|ДинамическийОтборКнопкаПодбор,
		|ДинамическийОтборТабличноеПоле");*/
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			/*СтруктураЭлементовУправления.СтраницаПанели = ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница;*/
			/*ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина-15;*/
			/*СтруктураЭлементовУправления.СтрокаОтбора = СтрокаОтбора;*/
			/*// Добавление Поля выбора вида сравнения
*/
			/*ЭлементВидСравнения        = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийОтбор" + Индекс + "ВидСравнения", Истина, ЭлементыФормы.ПанельЗакладок);*/
			/*//ЭлементВидСравнения.ИзменяетДанные = Истина;
*/
			/*ЭлементВидСравнения.Лево   = 6;*/
			/*ЭлементВидСравнения.Верх   = Верх;*/
			/*ЭлементВидСравнения.Ширина = (ШиринаПанелиЗакладки - 139);*/
			/*//125;
*/
			/*ЭлементВидСравнения.Высота = 19;*/
			/*ЭлементВидСравнения.ЦветФонаКнопки = ЦветФонаКнопки;*/
			/*СписокВыбора = Новый СписокЗначений;*/
			/*СписокВыбора.Добавить("", "Не отбирать");*/
			/*СписокВыбора.Добавить("Выбранные", "Только выбранные");*/
			if(true/*СтрокаОтбора.ДоступенВариантИсключить*/)
			{
				/*СписокВыбора.Добавить("Исключая", "Кроме выбранных");*/
			}
			/*ЭлементВидСравнения.СписокВыбора = СписокВыбора;*/
			/*ЭлементВидСравнения.Значение = СписокВыбора[0].Значение;*/
			if(true/*ЭлементДинамическогоОтбора <> Неопределено
			И ТипЗнч(ЭлементДинамическогоОтбора.ВидСравнения) = Тип("Строка")
			И СписокВыбора.НайтиПоЗначению(ЭлементДинамическогоОтбора.ВидСравнения) <> Неопределено*/)
			{
				/*// Восстановим значение
*/
				/*ЭлементВидСравнения.Значение = ЭлементДинамическогоОтбора.ВидСравнения;*/
			}
			/*ЭлементВидСравнения.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);*/
			/*ЭлементВидСравнения.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Лево);*/
			/*СтруктураЭлементовУправления.ДинамическийОтборВидСравнения = ЭлементВидСравнения;*/
			if(true/*СтрокаОтбора.СохранятьСписок*/)
			{
				/*// Добавление надписи Сохранить список
*/
				/*ЭлементНадпись        = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтбор" + Индекс + "СохранитьСписок", Истина, ЭлементыФормы.ПанельЗакладок);*/
				/*ЭлементНадпись.Лево   = ШиринаПанелиЗакладки - 125;*/
				/*ЭлементНадпись.Верх   = Верх - 5;*/
				/*ЭлементНадпись.Ширина = 30;*/
				/*ЭлементНадпись.Высота = 30;*/
				/*ЭлементНадпись.Заголовок  = "";*/
				/*ЭлементНадпись.Картинка   = БиблиотекаКартинок.СохранитьСписок;*/
				/*ЭлементНадпись.ГиперСсылка = Истина;*/
				/*ЭлементНадпись.Подсказка = "Сохранить этот список";*/
				/*ЭлементНадпись.РазмерКартинки = РазмерКартинки.РеальныйРазмер;*/
				/*ЭлементНадпись.УстановитьДействие("Нажатие", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиСохранитьСписок);*/
				/*ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);*/
				/*ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);*/
				/*СтруктураЭлементовУправления.ДинамическийОтборСохранитьСписок = ЭлементНадпись;*/
				/*// Добавление надписи Загрузить список
*/
				/*ЭлементНадпись        = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийОтбор" + Индекс + "ЗагрузитьСписок", Истина, ЭлементыФормы.ПанельЗакладок);*/
				/*ЭлементНадпись.Лево   = ШиринаПанелиЗакладки - 105;*/
				/*ЭлементНадпись.Верх   = Верх - 5;*/
				/*ЭлементНадпись.Ширина = 30;*/
				/*ЭлементНадпись.Высота = 30;*/
				/*ЭлементНадпись.Заголовок  = "";*/
				/*ЭлементНадпись.Картинка   = БиблиотекаКартинок.ЗагрузитьСписок;*/
				/*ЭлементНадпись.Подсказка = "Загрузить сохраненный список";*/
				/*ЭлементНадпись.ГиперСсылка = Истина;*/
				/*ЭлементНадпись.РазмерКартинки = РазмерКартинки.РеальныйРазмер;*/
				/*ЭлементНадпись.УстановитьДействие("Нажатие", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиЗагрузитьСписок);*/
				/*ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);*/
				/*ЭлементНадпись.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);*/
				/*СтруктураЭлементовУправления.ДинамическийОтборЗагрузитьСписок = ЭлементНадпись;*/
			}
			/*// Сохранить загрузить список
*/
			/*// Добавление Кнопки Подбор
*/
			/*КнопкаПодбор = ЭлементыФормы.Добавить(Тип("Кнопка"), "ДинамическийОтбор" + Индекс + "КнопкаПодбор", Истина, ЭлементыФормы.ПанельЗакладок);*/
			/*КнопкаПодбор.Лево   = ШиринаПанелиЗакладки - 85;*/
			/*КнопкаПодбор.Верх   = Верх;*/
			/*КнопкаПодбор.Ширина = 75;*/
			/*КнопкаПодбор.Высота = 19;*/
			/*КнопкаПодбор.ЦветФонаКнопки = ЦветФонаКнопки;*/
			/*Верх = Верх + 19 + 6;*/
			if(true/*ДоступноеПоле <> Неопределено И ДоступноеПоле.Тип.Типы().Количество() > 1*/)
			{
				/*КнопкаПодбор.Заголовок = "Подбор...";*/
			}
			if(true/*ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиКнопкаПодборНажатие")*/)
			{
				/*КнопкаПодбор.УстановитьДействие("Нажатие", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиКнопкаПодборНажатие);*/
			}
			/*КнопкаПодбор.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);*/
			/*КнопкаПодбор.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЭлементыФормы.ПанельЗакладок, ГраницаЭлементаУправления.Право);*/
			/*//УстановитьПравуюПривязкуПолностью(КнопкаПодбор, ЭлементыФормы.ПанельЗакладок);
*/
			/*СтруктураЭлементовУправления.ДинамическийОтборКнопкаПодбор = КнопкаПодбор;*/
			/*// Добавление Табличного поля для списка
*/
			/*ЭлементТабличноеПоле = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическийОтбор" + Индекс + "ТабличноеПоле", Истина, ЭлементыФормы.ПанельЗакладок);*/
			/*ЭлементТабличноеПоле.Лево           = 6;*/
			/*ЭлементТабличноеПоле.Верх           = Верх;*/
			/*ЭлементТабличноеПоле.Ширина         = ШиринаПанелиЗакладки - 15;*/
			/*ЭлементТабличноеПоле.Высота         = 79 * ?(СтрокаОтбора.ВидОтбора = "Список", 1, 2);*/
			/*Верх = Верх + ЭлементТабличноеПоле.Высота + 6;*/
			/*ЭлементТабличноеПоле.ТолькоПросмотр = Ложь;*/
			/*ЭлементТабличноеПоле.Шапка          = Ложь;*/
			/*ЭлементТабличноеПоле.Значение       = Новый ТаблицаЗначений;*/
			/*УстановитьПравуюПривязку(ЭлементТабличноеПоле, ЭлементыФормы.ПанельЗакладок);*/
			/*СтруктураЭлементовУправления.ДинамическийОтборТабличноеПоле = ЭлементТабличноеПоле;*/
			/*ЭлементТабличноеПоле.Значение.Колонки.Добавить("Значение", ДоступноеПоле.Тип);*/
			/*НоваяКолонка                             = ЭлементТабличноеПоле.Колонки.Добавить("Значение", "");*/
			/*НоваяКолонка.Данные                      = "Значение";*/
			/*ЭлементТабличноеПоле.ГоризонтальныеЛинии = Ложь;*/
			/*//Получить из значений
*/
			if(true/*ЭлементДинамическогоОтбора <> Неопределено 
			И ТипЗнч(ЭлементДинамическогоОтбора.Значение) = Тип("СписокЗначений")*/)
			{
				/*// Восстановим значение списка отбора
*/
			}
			/*ЭлементТабличноеПоле.УстановитьДействие("ПриОкончанииРедактирования", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиОкончаниеРедактированиеТабличногоПоля);*/
			/*ЭлементТабличноеПоле.УстановитьДействие("ПослеУдаления", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиУдалениеСтрокиТабличногоПоля);*/
			if(true/*ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиНачалоВыбораЗначенияТабличногоПоля")*/)
			{
				/*ЭлементТабличноеПоле.Колонки.Значение.ЭлементУправления.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиНачалоВыбораЗначенияТабличногоПоля);*/
			}
			if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаОтбора") И ПараметрыИсполненияОтчета.ПослеВыводаОтбора*/)
			{
				/*ФормаОтчета.ПослеВыводаОтбора(СтруктураЭлементовУправления);*/
			}
		}

		public void НарисоватьПараметрОтчета(/*ФормаОтчета, Индекс, СтрокаПараметра,  Лево, ЦветФонаКнопки, Параметр, ДоступныйПараметр, ЭлементДинамическогоПараметра, ПараметрыИсполненияОтчета = Неопределено, ПоследнийЭлемент = ложь, ПредыдущийЭлемент = Неопределено, СреднийРазмерЭлементаУправления = Неопределено*/)
		{
			/*СтруктураЭлементовУправления = Новый Структура("
		|СтрокаПараметра,
		|СтраницаПанели, 
		|ДинамическийПараметрНадпись, 
		|ДинамическийПараметрПолеВвода,
		|ДинамическийПараметрТабличноеПоле,
		|ДинамическийПараметрПереключатель");*/
			/*СтруктураЭлементовУправления.СтрокаПараметра = СтрокаПараметра;*/
			if(true/*СтрокаПараметра.ВыводитьНа = "ГоризонтальнаяПанель" И ФормаОтчета.ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено*/)
			{
				if(true/*СтрокаПараметра.ОтображатьКак = "ПолеВвода" или СтрокаПараметра.ОтображатьКак = "СписокЗначение"*/)
				{
					/*ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;*/
					/*СтруктураЭлементовУправления.СтраницаПанели = ЭлементыФормы.ПанельПользователяГоризонтальная;*/
					/*НовыйЭлементНадпись = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическийПараметр" + Индекс + "Надпись", Истина, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
					/*НовыйЭлементНадпись.Верх = 6;*/
					/*НовыйЭлементНадпись.Лево = Лево;*/
					/*НовыйЭлементНадпись.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Право;*/
					/*СреднийРазмерЭлементаУправления = ?(СреднийРазмерЭлементаУправления = Неопределено, СтрДлина(ДоступныйПараметр.Заголовок)*7, СреднийРазмерЭлементаУправления);*/
					/*НовыйЭлементНадпись.Ширина = ?(СреднийРазмерЭлементаУправления > СтрДлина(ДоступныйПараметр.Заголовок)*7, СтрДлина(ДоступныйПараметр.Заголовок)*7, СреднийРазмерЭлементаУправления);*/
					/*НовыйЭлементНадпись.Высота = 19;*/
					/*НовыйЭлементНадпись.Заголовок = ДоступныйПараметр.Заголовок+":";*/
					/*Лево = Лево + НовыйЭлементНадпись.Ширина + 6;*/
					/*//УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);
*/
					/*СтруктураЭлементовУправления.ДинамическийПараметрНадпись = НовыйЭлементНадпись;*/
					if(true/*ПредыдущийЭлемент = Неопределено*/)
					{
						/*УстановитьЛевуюПривязку(НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
					}
					/*УстановитьПривязкуКЛевойГранице(НовыйЭлементНадпись, НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
					/*//УстановитьПривязкуКПравойГранице(НовыйЭлемент, НовыйЭлементНадпись, ЭлементыФормы.ПанельПользователяГоризонтальная);
*/
					if(true/*СтрокаПараметра.ОтображатьКак <> "СписокЗначение" И ДоступныйПараметр.ДоступныеЗначения <> Неопределено*/)
					{
						/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("ПолеВыбора"), "ДинамическийПараметр" + Индекс + "ПолеВвода", Истина, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
					}
					/*НовыйЭлемент.Верх = 6;*/
					/*НовыйЭлемент.Лево = Лево;*/
					if(true/*СтрокаПараметра.Владелец().Колонки.Найти("МаленкийЭлементУпавления") <> Неопределено  и СтрокаПараметра.МаленкийЭлементУпавления*/)
					{
						/*НовыйЭлемент.Ширина = СреднийРазмерЭлементаУправления/2.5;*/
					}
					/*НовыйЭлемент.АвтоОтметкаНезаполненного = СтрокаПараметра.Заполнено;*/
					/*//КонецЕсли;
*/
					/*НовыйЭлемент.ТипЗначения = ДоступныйПараметр.Тип;*/
					if(true/*ДоступныйПараметр.ДоступныеЗначения <> Неопределено*/)
					{
						/*НовыйЭлемент.СписокВыбора = ДоступныйПараметр.ДоступныеЗначения;*/
						/*//НовыйЭлемент.КнопкаВыбора = ложь;
*/
						/*//НовыйЭлемент.КнопкаСпискаВыбора = истина;
*/
					}
					if(true/*СтрокаПараметра.ОтображатьКак = "СписокЗначение"*/)
					{
						/*НовыйЭлемент.Значение          = Новый СписокЗначений;*/
						/*НовыйЭлемент.ТипЗначения       = Новый ОписаниеТипов("СписокЗначений");*/
						/*НовыйЭлемент.ТипЗначенияСписка = ДоступныйПараметр.Тип;*/
					}
					/*НовыйЭлемент.ЦветФонаКнопки    = ЦветФонаКнопки;*/
					if(true/*ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиИзменениеЗначенияДинамическогоПараметра")*/)
					{
						/*НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеЗначенияДинамическогоПараметра);*/
					}
					if(true/*ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиНачалоВыбораЗначенияДинамическогоПараметра")*/)
					{
						/*НовыйЭлемент.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиНачалоВыбораЗначенияДинамическогоПараметра);*/
					}
					/*//Получить из значений
*/
					if(true/*ЭлементДинамическогоПараметра <> Неопределено*/)
					{
						/*// Восстановим значение
*/
						/*НовыйЭлемент.Значение = ЭлементДинамическогоПараметра.Значение;*/
					}
					/*СтруктураЭлементовУправления.ДинамическийПараметрПолеВвода = НовыйЭлемент;*/
					if(true/*ПоследнийЭлемент*/)
					{
						/*УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
						/*НовыйЭлемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, НовыйЭлементНадпись, ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельПользователяГоризонтальная, ГраницаЭлементаУправления.Право);*/
					}
					/*Лево = Лево + НовыйЭлемент.Ширина + 6;*/
					/*ПредыдущийЭлемент = НовыйЭлемент;*/
				}
			}
			if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаПараметра") И ПараметрыИсполненияОтчета.ПослеВыводаПараметра*/)
			{
				/*ФормаОтчета.ПослеВыводаПараметра(СтруктураЭлементовУправления);*/
			}
		}

		public void НарисоватьГруппировкуОтчета(/*ФормаОтчета, ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета = Неопределено*/)
		{
			/*ВидыГруппировок = Новый Соответствие;*/
			/*//опредлим вид группировки
*/
			/*ПерваяГруппировка = Неопределено;*/
			if(true/*Группировки = Неопределено*/)
			{
			}
			if(true/*Группировки.Количество() > 0*/)
			{
				/*ПерваяГруппировка = Группировки[0].Значение;*/
			}
			if(true/*ПерваяГруппировка = Неопределено*/)
			{
			}
			if(true/*ТипЗнч(ПерваяГруппировка) = Тип("ГруппировкаКомпоновкиДанных") 
			ИЛИ ТипЗнч(ПерваяГруппировка) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			ИЛИ ТипЗнч(ПерваяГруппировка) = Тип("ГруппировкаДиаграммыКомпоновкиДанных")*/)
			{
				/*//рисуем элемент группировки
*/
				/*НарисоватьЭлементУправленияГруппировокой(ФормаОтчета,  ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета);*/
			}
		}

		public void НарисоватьЭлементУправленияТаблицейДиаграммой(/*ФормаОтчета, ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета*/)
		{
			/*СтруктураЭлементовУправления = Новый Структура("
		|СтрокаГруппировки,
		|СтраницаПанели, 
		|ДинамическаяГруппировкаНадписьСтрок, 
		|ДинамическаяГруппировкаНадписьКолонок, 
		
		|ДинамическийПараметрТабличноеПоле,
		|ДинамическийПараметрКаманднаяПанель,
		
		|ДинамическийПараметрТабличноеПолеСтрок,
		|ДинамическийПараметрКаманднаяПанельСтрок,
		
		|ДинамическийПараметрТабличноеПолеКолонок,
		|ДинамическийПараметрКаманднаяПанельКолонок");*/
			/*СтруктураЭлементовУправления.СтрокаГруппировки = СтрокаГруппировки;*/
			/*Верх = 6;*/
			/*ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;*/
			/*ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина;*/
			/*НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическаяГруппировка"+ Индекс + "Страница", СтрокаГруппировки.Представление);*/
			/*ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;*/
			/*СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;*/
			/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическаяГруппировка" + Индекс + "Надпись", Истина, ЭлементыФормы.ПанельЗакладок);*/
			/*НовыйЭлемент.Верх = Верх;*/
			/*НовыйЭлемент.Лево = 6;*/
			/*НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 15;*/
			/*НовыйЭлемент.Заголовок = СтрокаГруппировки.ПредставлениеСтрок + ":";*/
			/*Верх = Верх + НовыйЭлемент.Высота + 6;*/
			/*УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
			/*//СтруктураЭлементовУправления.ДинамическийПараметрНадпись = НовыйЭлемент;
*/
			/*// нарисовать таблицу группировки
*/
			/*НовыйЭлемент                      = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическаяГруппировка" + Индекс + "ТабличноеПолеСтрок", Истина, ЭлементыФормы.ПанельЗакладок);*/
			/*НовыйЭлемент.Лево                 = 6;*/
			/*НовыйЭлемент.Верх                 = Верх;*/
			/*НовыйЭлемент.Ширина               = ШиринаПанелиЗакладки - 15-24-9;*/
			/*НовыйЭлемент.Высота               = 79;*/
			/*Верх                              = Верх + НовыйЭлемент.Высота + 6;*/
			/*НовыйЭлемент.ТолькоПросмотр       = Ложь;*/
			/*НовыйЭлемент.Шапка                = Ложь;*/
			/*НовыйЭлемент.Значение             = Новый ТаблицаЗначений;*/
			/*НовыйЭлемент.ГоризонтальныеЛинии  = Ложь;*/
			/*НовыйЭлемент.ВертикальныеЛинии    = ложь;*/
			/*//НовыйЭлемент.ИзменятьСоставСтрок  = ложь;
*/
			/*НовыйЭлемент.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;*/
			/*НовыйЭлемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);*/
			/*НовыйЭлемент.УстановитьДействие("ПриПолученииДанных", ФормаОтчета.ДействияЭлементовФормы.ГруппировкиПриПолученииДанных);*/
			/*СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПолеСтрок = НовыйЭлемент;*/
			/*УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);*/
			/*НовыйЭлемент.Значение.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));*/
			/*НовыйЭлемент.Значение.Колонки.Добавить("Значение", Новый ОписаниеТипов("СписокЗначений"));*/
			/*НовыйЭлемент.Значение.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));*/
			/*НовыйЭлемент.Значение.Колонки.Добавить("ИспользованиеИерархии", Новый ОписаниеТипов("Булево"));*/
			/*НовыйЭлемент.Значение.Колонки.Добавить("ЗначениеИерархии", Новый ОписаниеТипов("СписокЗначений"));*/
			/*НовыйЭлемент.Значение.Колонки.Добавить("ПредставлениеИерархии", Новый ОписаниеТипов("Строка"));*/
			/*НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ИспользованиеИерархии", "");*/
			/*НоваяКолонка.ДанныеФлажка        = "ИспользованиеИерархии";*/
			/*НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;*/
			/*НоваяКолонка.Ширина              = 1;*/
			/*НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Использование", "");*/
			/*НоваяКолонка.ДанныеФлажка        = "Использование";*/
			/*НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;*/
			/*НоваяКолонка.Ширина              = 1;*/
			/*НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;*/
			/*НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ЗначениеИерархии", "");*/
			/*НоваяКолонка.Данные              = "ЗначениеИерархии";*/
			/*НоваяКолонка.Видимость           = ложь;*/
			/*НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Значение", "");*/
			/*НоваяКолонка.Данные              = "Значение";*/
			/*НоваяКолонка.Видимость           = ложь;*/
			/*НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;*/
			/*НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ПредставлениеИерархии", "");*/
			/*НоваяКолонка.Данные              = "ПредставлениеИерархии";*/
			/*НоваяКолонка.ТолькоПросмотр      = истина;*/
			/*НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Представление", "");*/
			/*НоваяКолонка.Данные              = "Представление";*/
			/*НоваяКолонка.ТолькоПросмотр      = истина;*/
			/*НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;*/
			/*ЭлементКоманднаяПанель          = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "ДинамическаяГруппировка" + Индекс + "КоманднаяПанельСтрок", Истина, ЭлементыФормы.ПанельЗакладок);*/
			/*ЭлементКоманднаяПанель.Верх     = НовыйЭлемент.Верх + 11;*/
			/*ЭлементКоманднаяПанель.Высота   = 47;*/
			/*ЭлементКоманднаяПанель.Лево     = ШиринаПанелиЗакладки - 15 - 24 + 12;*/
			/*ЭлементКоманднаяПанель.Ширина   = 24;*/
			/*ЭлементКоманднаяПанель.ЦветФона = ЦветаСтиля.ЦветФонаПоля;*/
			/*ЭлементКоманднаяПанель.ИсточникДействий = НовыйЭлемент;*/
			/*СтруктураЭлементовУправления.ДинамическийПараметрКаманднаяПанельСтрок = ЭлементКоманднаяПанель;*/
			/*УстановитьПравуюПривязкуПолностью(ЭлементКоманднаяПанель, ЭлементыФормы.ПанельЗакладок);*/
			/*КнопкаВверх                   = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВверхСтрок", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВверх);*/
			/*КнопкаВверх.Картинка          = БиблиотекаКартинок.ПереместитьВверх;*/
			/*КнопкаВверх.Отображение       = ОтображениеКнопкиКоманднойПанели.Картинка;*/
			/*КнопкаВниз                    = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВнизСтрок", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВниз);*/
			/*КнопкаВниз.Картинка           = БиблиотекаКартинок.ПереместитьВниз;*/
			/*КнопкаВниз.Отображение        = ОтображениеКнопкиКоманднойПанели.Картинка;*/
			/*//Добавить строки группировки
*/
			if(true/*ТипЗнч(Группировки[0].Значение) = Тип("ТаблицаКомпоновкиДанных")*/)
			{
				/*СтрокиГруппировки = ПолучитьЭлементыСтруктуры(Группировки[0].Значение.Строки);*/
			}
			if(true/*ЭлементДинамическойГруппировки <> Неопределено*/)
			{
				/*ПрименитьНастройкуПользователя(НовыйЭлемент.Значение, ЭлементДинамическойГруппировки.СписокГруппировкиСтрок);*/
			}
			/*// колонки
*/
			/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "ДинамическаяГруппировка" + Индекс + "НадписьКолонок", Истина, ЭлементыФормы.ПанельЗакладок);*/
			/*НовыйЭлемент.Верх = Верх;*/
			/*НовыйЭлемент.Лево = 6;*/
			/*НовыйЭлемент.Ширина = ШиринаПанелиЗакладки - 15;*/
			/*НовыйЭлемент.Заголовок = СтрокаГруппировки.ПредставлениеКолонок + ":";*/
			/*Верх = Верх + НовыйЭлемент.Высота + 6;*/
			/*УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельПользователяГоризонтальная);*/
			/*// нарисовать таблицу группировки
*/
			/*НовыйЭлемент                      = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическаяГруппировка" + Индекс + "ТабличноеПолеКолонок", Истина, ЭлементыФормы.ПанельЗакладок);*/
			/*НовыйЭлемент.Лево                 = 6;*/
			/*НовыйЭлемент.Верх                 = Верх;*/
			/*НовыйЭлемент.Ширина               = ШиринаПанелиЗакладки - 15-24-9;*/
			/*НовыйЭлемент.Высота               = 79;*/
			/*Верх                              = Верх + НовыйЭлемент.Высота + 6;*/
			/*НовыйЭлемент.ТолькоПросмотр       = Ложь;*/
			/*НовыйЭлемент.Шапка                = Ложь;*/
			/*НовыйЭлемент.Значение             = Новый ТаблицаЗначений;*/
			/*НовыйЭлемент.ГоризонтальныеЛинии  = Ложь;*/
			/*НовыйЭлемент.ВертикальныеЛинии    = ложь;*/
			/*НовыйЭлемент.ИзменятьСоставСтрок  = ложь;*/
			/*НовыйЭлемент.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;*/
			/*НовыйЭлемент.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);*/
			/*СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПолеКолонок = НовыйЭлемент;*/
			/*НовыйЭлемент.УстановитьДействие("ПриПолученииДанных", ФормаОтчета.ДействияЭлементовФормы.ГруппировкиПриПолученииДанных);*/
			/*УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);*/
			/*НовыйЭлемент.Значение.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));*/
			/*НовыйЭлемент.Значение.Колонки.Добавить("Значение", Новый ОписаниеТипов("СписокЗначений"));*/
			/*НовыйЭлемент.Значение.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));*/
			/*НовыйЭлемент.Значение.Колонки.Добавить("ИспользованиеИерархии", Новый ОписаниеТипов("Булево"));*/
			/*НовыйЭлемент.Значение.Колонки.Добавить("ЗначениеИерархии", Новый ОписаниеТипов("СписокЗначений"));*/
			/*НовыйЭлемент.Значение.Колонки.Добавить("ПредставлениеИерархии", Новый ОписаниеТипов("Строка"));*/
			/*НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ИспользованиеИерархии", "");*/
			/*НоваяКолонка.ДанныеФлажка        = "ИспользованиеИерархии";*/
			/*НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;*/
			/*НоваяКолонка.Ширина              = 1;*/
			/*НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Использование", "");*/
			/*НоваяКолонка.ДанныеФлажка        = "Использование";*/
			/*НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;*/
			/*НоваяКолонка.Ширина              = 1;*/
			/*НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;*/
			/*НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ЗначениеИерархии", "");*/
			/*НоваяКолонка.Данные              = "ЗначениеИерархии";*/
			/*НоваяКолонка.Видимость           = ложь;*/
			/*НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Значение", "");*/
			/*НоваяКолонка.Данные              = "Значение";*/
			/*НоваяКолонка.Видимость           = ложь;*/
			/*НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;*/
			/*НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("ПредставлениеИерархии", "");*/
			/*НоваяКолонка.Данные              = "ПредставлениеИерархии";*/
			/*НоваяКолонка.ТолькоПросмотр      = истина;*/
			/*НоваяКолонка                     = НовыйЭлемент.Колонки.Добавить("Представление", "");*/
			/*НоваяКолонка.Данные              = "Представление";*/
			/*НоваяКолонка.ТолькоПросмотр      = истина;*/
			/*НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;*/
			/*ЭлементКоманднаяПанель          = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "ДинамическаяГруппировка" + Индекс + "КоманднаяПанельКолонок", Истина, ЭлементыФормы.ПанельЗакладок);*/
			/*ЭлементКоманднаяПанель.Верх     = НовыйЭлемент.Верх + 11;*/
			/*ЭлементКоманднаяПанель.Высота   = 47;*/
			/*ЭлементКоманднаяПанель.Лево     = ШиринаПанелиЗакладки - 15 - 24 + 12;*/
			/*ЭлементКоманднаяПанель.Ширина   = 24;*/
			/*ЭлементКоманднаяПанель.ЦветФона = ЦветаСтиля.ЦветФонаПоля;*/
			/*ЭлементКоманднаяПанель.ИсточникДействий = НовыйЭлемент;*/
			/*УстановитьПравуюПривязкуПолностью(ЭлементКоманднаяПанель, ЭлементыФормы.ПанельЗакладок);*/
			/*СтруктураЭлементовУправления.ДинамическийПараметрКаманднаяПанельКолонок = ЭлементКоманднаяПанель;*/
			/*КнопкаВверх                   = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВверхКолонок", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВверх);*/
			/*КнопкаВверх.Картинка          = БиблиотекаКартинок.ПереместитьВверх;*/
			/*КнопкаВверх.Отображение       = ОтображениеКнопкиКоманднойПанели.Картинка;*/
			/*КнопкаВниз                    = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВнизКолонок", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВниз);*/
			/*КнопкаВниз.Картинка           = БиблиотекаКартинок.ПереместитьВниз;*/
			/*КнопкаВниз.Отображение        = ОтображениеКнопкиКоманднойПанели.Картинка;*/
			/*//Добавить строки группировки
*/
			if(true/*ТипЗнч(Группировки[0].Значение) = Тип("ТаблицаКомпоновкиДанных")*/)
			{
				/*СтрокиГруппировки = ПолучитьЭлементыСтруктуры(Группировки[0].Значение.Колонки);*/
			}
			if(true/*ЭлементДинамическойГруппировки <> Неопределено*/)
			{
				/*ПрименитьНастройкуПользователя(НовыйЭлемент.Значение, ЭлементДинамическойГруппировки.СписокГруппировкиКолонок);*/
			}
			if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаГруппировки") И ПараметрыИсполненияОтчета.ПослеВыводаГруппировки*/)
			{
				/*ФормаОтчета.ПослеВыводаГруппировки(СтруктураЭлементовУправления);*/
			}
		}

		public void НарисоватьЭлементУправленияГруппировокой(/*ФормаОтчета, ОтчетОбъект, Индекс, СтрокаГруппировки, ЦветФонаКнопки, Группировки, ЭлементДинамическойГруппировки, ПараметрыИсполненияОтчета*/)
		{
			/*СтруктураЭлементовУправления = Новый Структура("
		|СтрокаГруппировки,
		|СтраницаПанели, 
		|ДинамическаяГруппировкаНадписьСтрок, 
		|ДинамическаяГруппировкаНадписьКолонок, 
		
		|ДинамическийПараметрТабличноеПоле,
		|ДинамическийПараметрКаманднаяПанель,
		
		|ДинамическийПараметрТабличноеПолеСтрок,
		|ДинамическийПараметрКаманднаяПанельСтрок,
		
		|ДинамическийПараметрТабличноеПолеКолонок,
		|ДинамическийПараметрКаманднаяПанельКолонок");*/
			/*СтруктураЭлементовУправления.СтрокаГруппировки = СтрокаГруппировки;*/
			/*Верх = 6;*/
			/*ЭлементыФормы        = ФормаОтчета.ЭлементыФормы;*/
			/*ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина-15;*/
			/*НоваяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Добавить("ДинамическаяГруппировка"+ Индекс + "Страница", СтрокаГруппировки.Представление);*/
			/*ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = НоваяСтраница;*/
			/*СтруктураЭлементовУправления.СтраницаПанели = НоваяСтраница;*/
			/*// нарисовать таблицу группировки
*/
			/*ЭлементТабличноеПоле                = ЭлементыФормы.Добавить(Тип("ТабличноеПоле"), "ДинамическаяГруппировка" + Индекс + "ТабличноеПоле", Истина, ЭлементыФормы.ПанельЗакладок);*/
			/*ЭлементТабличноеПоле.Лево           = 6;*/
			/*ЭлементТабличноеПоле.Верх           = Верх;*/
			/*ЭлементТабличноеПоле.Ширина         = ШиринаПанелиЗакладки - 18 -24;*/
			/*ЭлементТабличноеПоле.Высота         = 79;*/
			/*Верх                                = Верх + ЭлементТабличноеПоле.Высота + 6;*/
			/*ЭлементТабличноеПоле.ТолькоПросмотр = Ложь;*/
			/*ЭлементТабличноеПоле.Шапка          = Ложь;*/
			/*ЭлементТабличноеПоле.Значение       = Новый ТаблицаЗначений;*/
			/*ЭлементТабличноеПоле.ГоризонтальныеЛинии = Ложь;*/
			/*ЭлементТабличноеПоле.ВертикальныеЛинии   = ложь;*/
			/*ЭлементТабличноеПоле.РежимВыделенияСтроки = РежимВыделенияСтрокиТабличногоПоля.Строка;*/
			/*ЭлементТабличноеПоле.ИзменятьСоставСтрок  = ложь;*/
			/*ЭлементТабличноеПоле.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.БезРамки, 0);*/
			/*СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПоле = ЭлементТабличноеПоле;*/
			/*ЭлементТабличноеПоле.УстановитьДействие("ПриПолученииДанных", ФормаОтчета.ДействияЭлементовФормы.ГруппировкиПриПолученииДанных);*/
			/*УстановитьПравуюПривязку(ЭлементТабличноеПоле, ЭлементыФормы.ПанельЗакладок);*/
			/*ЭлементТабличноеПоле.Значение.Колонки.Добавить("Использование", Новый ОписаниеТипов("Булево"));*/
			/*ЭлементТабличноеПоле.Значение.Колонки.Добавить("Значение", Новый ОписаниеТипов("СписокЗначений"));*/
			/*ЭлементТабличноеПоле.Значение.Колонки.Добавить("Представление", Новый ОписаниеТипов("Строка"));*/
			/*ЭлементТабличноеПоле.Значение.Колонки.Добавить("ИспользованиеИерархии", Новый ОписаниеТипов("Булево"));*/
			/*ЭлементТабличноеПоле.Значение.Колонки.Добавить("ЗначениеИерархии", Новый ОписаниеТипов("СписокЗначений"));*/
			/*ЭлементТабличноеПоле.Значение.Колонки.Добавить("ПредставлениеИерархии", Новый ОписаниеТипов("Строка"));*/
			/*НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("ИспользованиеИерархии", "");*/
			/*НоваяКолонка.ДанныеФлажка        = "ИспользованиеИерархии";*/
			/*НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;*/
			/*НоваяКолонка.Ширина              = 1;*/
			/*НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("Использование", "");*/
			/*НоваяКолонка.ДанныеФлажка        = "Использование";*/
			/*НоваяКолонка.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;*/
			/*НоваяКолонка.Ширина              = 1;*/
			/*НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;*/
			/*НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("ЗначениеИерархии", "");*/
			/*НоваяКолонка.Данные              = "ЗначениеИерархии";*/
			/*НоваяКолонка.Видимость           = ложь;*/
			/*НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("Значение", "");*/
			/*НоваяКолонка.Данные              = "Значение";*/
			/*НоваяКолонка.Видимость           = ложь;*/
			/*НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;*/
			/*НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("ПредставлениеИерархии", "");*/
			/*НоваяКолонка.Данные              = "ПредставлениеИерархии";*/
			/*НоваяКолонка.ТолькоПросмотр      = истина;*/
			/*НоваяКолонка                     = ЭлементТабличноеПоле.Колонки.Добавить("Представление", "");*/
			/*НоваяКолонка.Данные              = "Представление";*/
			/*НоваяКолонка.ТолькоПросмотр      = истина;*/
			/*НоваяКолонка.Положение           = ПоложениеКолонки.НаСледующейСтроке;*/
			/*//	НоваяКолонка.ЭлементУправления.УстановитьДействие("НачалоВыбора", ФормаОтчета.ДействияЭлементовФормы.ПриВыбореПоляГруппировки);
*/
			/*ЭлементКоманднаяПанель          = ЭлементыФормы.Добавить(Тип("КоманднаяПанель"), "ДинамическаяГруппировка" + Индекс + "КоманднаяПанель", Истина, ЭлементыФормы.ПанельЗакладок);*/
			/*ЭлементКоманднаяПанель.Верх     = 19;*/
			/*ЭлементКоманднаяПанель.Высота   = 47;*/
			/*ЭлементКоманднаяПанель.Лево     = ШиринаПанелиЗакладки - 30;*/
			/*ЭлементКоманднаяПанель.Ширина   = 24;*/
			/*ЭлементКоманднаяПанель.ЦветФона = ЦветаСтиля.ЦветФонаПоля;*/
			/*ЭлементКоманднаяПанель.ИсточникДействий = ЭлементТабличноеПоле;*/
			/*УстановитьПравуюПривязкуПолностью(ЭлементКоманднаяПанель, ЭлементыФормы.ПанельЗакладок);*/
			/*СтруктураЭлементовУправления.ДинамическийПараметрКаманднаяПанель = ЭлементКоманднаяПанель;*/
			/*КнопкаВверх                   = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВверх", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВверх);*/
			/*КнопкаВверх.Картинка          = БиблиотекаКартинок.ПереместитьВверх;*/
			/*КнопкаВверх.Отображение       = ОтображениеКнопкиКоманднойПанели.Картинка;*/
			/*КнопкаВниз                    = ЭлементКоманднаяПанель.Кнопки.Добавить("ДинамическаяГруппировка" + Индекс + "КнопкаВниз", ТипКнопкиКоманднойПанели.Действие, , ФормаОтчета.ДействияЭлементовФормы.ПриНажатииНаКнопкуВниз);*/
			/*КнопкаВниз.Картинка           = БиблиотекаКартинок.ПереместитьВниз;*/
			/*КнопкаВниз.Отображение        = ОтображениеКнопкиКоманднойПанели.Картинка;*/
			/*//СтруктураЭлементовУправления.ДинамическийПараметрТабличноеПоле = НовыйЭлемент;
*/
			/*//Добавить строки группировки
*/
			if(true/*ЭлементДинамическойГруппировки <> Неопределено*/)
			{
				/*ПрименитьНастройкуПользователя(ЭлементТабличноеПоле.Значение, ЭлементДинамическойГруппировки.СписокГруппировки);*/
			}
			if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаГруппировки") И ПараметрыИсполненияОтчета.ПослеВыводаГруппировки*/)
			{
				/*ФормаОтчета.ПослеВыводаГруппировки(СтруктураЭлементовУправления);*/
			}
		}

		public object УстановитьВариантПоУмолчанию(/*ОтчетОбъект, ФормаОтчета*/)
		{
			if(true/*ФормаОтчета = Неопределено 
			ИЛИ НЕ ФормаОтчета.ЭтоОтработкаРасшифровки*/)
			{
				/*Вариант = ПолучитьПоследнийИспользуемыйВариант(ПолучитьИдентификаторОбъекта(ОтчетОбъект));*/
				/*СтруктураПоиска = Новый Структура;*/
				/*СтруктураПоиска.Вставить("Ссылка", Вариант);*/
				/*НайденныеСтроки = ОтчетОбъект.ТаблицаВариантовОтчета.НайтиСтроки(СтруктураПоиска);*/
				if(true/*НайденныеСтроки.Количество() > 0*/)
				{
					/*ОтчетОбъект.СохраненнаяНастройка = НайденныеСтроки[0].Ссылка;*/
				}
				if(true/*ФормаОтчета <> Неопределено*/)
				{
					/*ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета);*/
				}
			}
			return null;
		}

		public void ОбновитьКнопкиВыбораНастроек(/*ФормаОтчета, ОтчетОбъект, ПредставлениеНастройки, РежимРедактированияНастройки*/)
		{
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			/*// Удалим старые кнопки
*/
			/*Количество = ЭлементыФормы.Количество();*/
			if(true/*ЭлементыФормы.Найти("НадписьПредупреждение") <> Неопределено*/)
			{
				if(true/*ОтчетОбъект.ТаблицаВариантовОтчета.Количество() = 0*/)
				{
					/*ЭлементыФормы.НадписьПредупреждение.Видимость = Истина;*/
				}
			}
			/*// Добавим кнопки выбора вариантов
*/
			/*ЭлементыФормы.РазделительПанелиВыбораВариантов.Верх = ЭлементыФормы.РазделительПанелиВыбораВариантов.Верх + 1;*/
			/*ЭлементыФормы.РазделительПанелиВыбораВариантов.Верх = ЭлементыФормы.РазделительПанелиВыбораВариантов.Верх - 1;*/
		}

		public void ДобавитьКнопкуВыбораВариантаОтчета(/*ФормаОтчета, Индекс, Заголовок, Пометка, ПравоИзменения, Описание*/)
		{
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			if(true/*ЭлементыФормы.Найти("НадписьВариантыОтчета") = Неопределено*/)
			{
				/*Элемент = ЭлементыФормы.ПолеКартинкиОсновнойВариант;*/
				/*Смещение = 0;*/
			}
			/*ПолеКартинки = ЭлементыФормы.Добавить(Тип("ПолеКартинки"), "ПолеКартинкиВыбораВарианта" + Индекс, Истина, ЭлементыФормы.ПанельВыбораВариантов);*/
			/*ПолеКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Элемент, ГраницаЭлементаУправления.Низ);*/
			/*ПолеКартинки.Лево = (Индекс) * 103 + 0 + Смещение;*/
			/*ПолеКартинки.Верх = 0;*/
			/*ПолеКартинки.Ширина = 102;*/
			/*ПолеКартинки.Высота = Элемент.Высота;*/
			/*ПолеКартинки.ГиперСсылка = Истина;*/
			/*ПолеКартинки.ЦветФона = ЦветаСтиля.ЦветФонаКнопки;*/
			/*ПолеКартинки.ЦветТекста = WebЦвета.ТемноСиний;*/
			/*ПолеКартинки.ТекстНевыбраннойКартинки = Заголовок;*/
			/*ПолеКартинки.АвтоКонтекстноеМеню = Ложь;*/
			/*ПолеКартинки.Подсказка = Описание;*/
			/*ПолеКартинки.Шрифт = Новый Шрифт(ПолеКартинки.Шрифт, "Verdana");*/
			if(true/*Пометка*/)
			{
				/*ПолеКартинки.КонтекстноеМеню = ЭлементыФормы.КонтекстноеМенюКартинкиВыбораСохраненнойНастройки;*/
			}
			if(true/*Пометка*/)
			{
				/*ПолеКартинки.ЦветФона = Новый Цвет(255, 248, 220);*/
				/*ПолеКартинки.ЦветТекста = ЦветаСтиля.ЦветТекстаКнопки;*/
				/*ПолеКартинки.ГиперСсылка = ложь;*/
			}
			/*Действие = ФормаОтчета.ДействияЭлементовФормы.ОбработкаНажатияКнопкиСохраненнойНастройки;*/
			/*ПолеКартинки.УстановитьДействие("Нажатие", Действие);*/
			/*Рамка = ЭлементыФормы.Добавить(Тип("РамкаГруппы"), "РамкаВыбораВарианта" + Индекс, Истина, ЭлементыФормы.ПанельВыбораВариантов);*/
			/*Рамка.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Элемент, ГраницаЭлементаУправления.Низ);*/
			/*Рамка.Лево = (Индекс + 1) * 103 - 2  + Смещение;*/
			/*Рамка.Верх = 0;*/
			/*Рамка.Ширина = 1;*/
			/*Рамка.Высота = Элемент.Высота;*/
			/*Рамка.ЦветРамки = ЦветаСтиля.ЦветРамки;*/
			/*Рамка.ЦветТекста = WebЦвета.ТемноСиний;*/
		}

		public void ГруппировкаПриПолученииДанных(/*Элемент, ОформленияСтрок*/)
		{
		}

		public void УстановитьПравуюПривязку(/*Элемент, Панель*/)
		{
			/*Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);*/
		}

		public void УстановитьЛевуюПривязку(/*Элемент, Панель*/)
		{
			/*Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Лево);*/
		}

		public void УстановитьПривязкуКЛевойГранице(/*Элемент, ПривязатьК, Панель = Неопределено*/)
		{
			if(true/*Панель <> Неопределено*/)
			{
				/*Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, ПривязатьК, ГраницаЭлементаУправления.Лево, Панель, ГраницаЭлементаУправления.Право);*/
			}
		}

		public void УстановитьПривязкуКПравойГранице(/*Элемент, ПривязатьК, Панель = Неопределено*/)
		{
			if(true/*Панель <> Неопределено*/)
			{
				/*Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ПривязатьК, ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);*/
			}
		}

		public void УстановитьПравуюПривязкуПолностью(/*Элемент, Панель, ЛевыйЭлемент = Неопределено*/)
		{
			/*ЛевыйЭлемент = ?(ЛевыйЭлемент = Неопределено, Панель, ЛевыйЭлемент);*/
			/*Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);*/
			/*Элемент.УстановитьПривязку(ГраницаЭлементаУправления.Лево, ЛевыйЭлемент, ГраницаЭлементаУправления.Лево);*/
		}

		public object ПолучитьСтруктуруПоказателей(/*ЭлементыФормы*/)
		{
			/*ИспользованиеПоказателей = Новый Соответствие;*/
			return null;
		}

		public void ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(/*ОтчетОбъект, ФормаОтчета*/)
		{
			/*ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета));*/
		}

		public void ПерерисоватьПанельНастроек(/*ОтчетОбъект, ФормаОтчета, ЗначенияНастроек = Неопределено, ПереноситьПараметры = истина*/)
		{
			/*ПараметрыИсполненияОтчета = Неопределено;*/
			/*ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			/*ЕстьЭлементыНаПанели = ложь;*/
			/*ЦветФонаКнопки = Новый Цвет(246, 244, 236);*/
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			/*ЭлементыФормы.ПанельЗакладок.Видимость = Ложь;*/
			/*ЭлементыФормы.ПанельЗакладок.Видимость = Ложь;*/
			if(true/*ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено*/)
			{
				/*ЭлементыФормы.ПанельПользователяГоризонтальная.Видимость = ложь;*/
			}
			/*ЭлементыФормы.ПанельЗакладок.РежимПрокручиваемыхСтраниц = Ложь;*/
			/*ШиринаФормы = ФормаОтчета.Ширина;*/
			/*ШиринаПанели = ЭлементыФормы.ПанельПользователя.Ширина;*/
			/*ЕстьРазделитель = ЭлементыФормы.Найти("Разделитель") <> Неопределено;*/
			if(true/*ЕстьРазделитель*/)
			{
				if(true/*ШиринаПанели < 306*/)
				{
					/*ЭлементыФормы.Разделитель.Лево = ШиринаФормы - 295;*/
				}
			}
			/*// Инициализация ЗначенияНастроек
*/
			if(true/*ЗначенияНастроек = Неопределено*/)
			{
				/*ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);*/
			}
			if(true/*ЗначенияНастроек = Неопределено*/)
			{
				/*ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(ОтчетОбъект);*/
			}
			/*// Инициализация Параметры
*/
			/*Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);*/
			if(true/*Параметры = Неопределено*/)
			{
				/*Параметры = ПолучитьПараметрыПанелиПользователяПоУмолчанию(ОтчетОбъект, ФормаОтчета);*/
				/*СохраненнаяМодифицированность = ФормаОтчета.Модифицированность;*/
				/*ОтчетОбъект.ПараметрыПанелиПользователя = Новый ХранилищеЗначения(Параметры);*/
				/*ФормаОтчета.Модифицированность = СохраненнаяМодифицированность;*/
			}
			/*// Управление видимостью стандартных страниц
*/
			/*ДеревоНастроекСтандартныхСтраниц = Параметры.ДеревоНастроекСтандартныхСтраниц;*/
			if(true/*ПереноситьПараметры*/)
			{
			}
			/*ФормаОтчета.ЭлементыФормы.Сортировка.Верх      = 6;*/
			/*ФормаОтчета.ЭлементыФормы.Отбор.Верх           = 6;*/
			/*ФормаОтчета.ЭлементыФормы.ПараметрыДанных.Верх = 6;*/
			/*// Установка высоты табличного поля параметры
*/
			if(true/*ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных.ДоступныеПараметры <> Неопределено*/)
			{
				/*КоличествоПараметров = 0;*/
				if(true/*КоличествоПараметров = 0*/)
				{
					/*// Спрячем закладку Параметры, если параметров нет
*/
					/*ЭлементыФормы.ПанельЗакладок.Страницы.Параметры.Видимость = Ложь;*/
					/*ЕстьЭлементыНаПанели = истина;*/
				}
			}
			/*// Удаление старых закладок с динамическими отборами
*/
			/*Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();*/
			/*Надпись = ЭлементыФормы.Найти("НадписьНеЗаполненаПанель");*/
			if(true/*Надпись <> Неопределено*/)
			{
				/*ЭлементыФормы.Удалить(Надпись);*/
			}
			/*// Удалим старые элементы с динамическими отборами
*/
			/*Количество = ЭлементыФормы.Количество();*/
			/*ЛевоГорПанели = 0;*/
			/*ЕстьПериодНаГорПанели = ложь;*/
			if(true/*ФормаОтчета.ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") = Неопределено*/)
			{
				/*НарисоватьСтандартныйПериодНаПравойПанели(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек, Параметры, ПараметрыИсполненияОтчета);*/
			}
			/*Отборы = Параметры.Отборы;*/
			/*ЕстьОтборыВГоризонтальнойПанели     = Отборы.Колонки.Найти("Расположение") <> Неопределено И Отборы.НайтиСтроки(Новый Структура("Расположение", "ГоризонтальнаяПанель")).Количество() > 0;*/
			/*ЕстьПараметрыНаГоризонтальнойПанели = Параметры.Свойство("Параметры") И Параметры.Параметры.Колонки.Найти("ВыводитьНа") <> Неопределено 
		И Параметры.Параметры.НайтиСтроки(Новый Структура("ВыводитьНа", "ГоризонтальнаяПанель")).Количество() > 0 или ЕстьПериодНаГорПанели;*/
			if(true/*ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено*/)
			{
				if(true/*ЕстьОтборыВГоризонтальнойПанели или ЕстьПараметрыНаГоризонтальнойПанели*/)
				{
					/*ЭлементыФормы.ПанельПользователяГоризонтальная.Свертка = РежимСверткиЭлементаУправления.Нет;*/
				}
			}
			/*ПредыдущийЭлемент = Неопределено;*/
			if(true/*ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено*/)
			{
				/*ШиринаПанели   = ЭлементыФормы.ПанельПользователяГоризонтальная.Ширина - ЛевоГорПанели - 6;*/
				/*КолВоЭлементов = 0;*/
				/*КолВоЭлементов = КолВоЭлементов + ?(Параметры.Свойство("Параметры")  И Параметры.Параметры.Колонки.Найти("ВыводитьНа") <> Неопределено, Параметры.Параметры.НайтиСтроки(Новый Структура("ВыводитьНа", "ГоризонтальнаяПанель")).Количество()*2, 0) 
			+ ?(Отборы <> Неопределено И Отборы.Колонки.Найти("Расположение") <> Неопределено, Отборы.НайтиСтроки(Новый Структура("Расположение", "ГоризонтальнаяПанель")).Количество() * 2, 0);*/
				/*СреднийРазмер  = ?(КолВоЭлементов <> 0, ШиринаПанели/КолВоЭлементов, 0);*/
			}
			if(true/*ФормаОтчета.ЭлементыФормы.Найти("Отбор") <> Неопределено*/)
			{
				/*ШиринаПанели = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Ширина;*/
				if(true/*ФормаОтчета.ЭлементыФормы.Отбор.Ширина <> ШиринаПанели-31*/)
				{
					/*ФормаОтчета.ЭлементыФормы.Отбор.Ширина = ШиринаПанели-31;*/
				}
			}
			if(true/*ФормаОтчета.ЭлементыФормы.Найти("Сортировка") <> Неопределено*/)
			{
				/*ШиринаПанели = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Ширина;*/
				if(true/*ФормаОтчета.ЭлементыФормы.Сортировка.Ширина <> ШиринаПанели-70*/)
				{
					/*ФормаОтчета.ЭлементыФормы.Сортировка.Ширина  = ШиринаПанели-70;*/
				}
			}
			/*//нарисуем на панели настройку параметров
*/
			if(true/*Параметры.Свойство("Параметры")*/)
			{
				/*ШиринаПанели = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Ширина;*/
				if(true/*ФормаОтчета.ЭлементыФормы.ПараметрыДанных.Ширина <> ШиринаПанели-31*/)
				{
					/*ФормаОтчета.ЭлементыФормы.ПараметрыДанных.Ширина = ШиринаПанели-31;*/
				}
				/*ПоследнийЭлемент = ложь;*/
			}
			if(true/*Параметры.Свойство("Группировки")*/)
			{
				/*МассивПомеченныхГруппировок = Новый Соответствие;*/
				/*ВсеГруппировки = ПолучитьЭлементыСтруктуры(ОтчетОбъект.КомпоновщикНастроек);*/
			}
			/*// Добавим закладки динамических отборов
*/
			/*ЕстьДополнительнаяСтраница = Ложь;*/
			/*ВерхДопСтраница = 6;*/
			/*ИндексПоследСтроки = -1;*/
			/*ЕстьДополнительнаяСтраница = ложь;*/
			/*ДополнительныеНастройкиОтчета = Новый Массив;*/
			/*ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			if(true/*ПараметрыИсполненияОтчета.Свойство("ДополнительныеНастройкиОтчета") И ПараметрыИсполненияОтчета.ДополнительныеНастройкиОтчета*/)
			{
				/*ДополнительныеНастройкиОтчета = ОтчетОбъект.ПолучитьДополнительныеНастройкиОтчета();*/
			}
			/*//Заполнить таблицу показателей
*/
			/*Страница = ЭлементыФормы.ПанельЗакладок.Страницы.Найти("Показатели");*/
			if(true/*Страница <> Неопределено и Страница.Видимость*/)
			{
				/*Показатели = ФормаОтчета.ЭлементыФормы.Показатели.Значение;*/
				/*Показатели.Очистить();*/
				/*ПоляВыбора = ПолучитьВыбранныеПоля(ОтчетОбъект.КомпоновщикНастроек);*/
				if(true/*ЗначенияНастроек.Свойство("Показатели")*/)
				{
					/*ШиринаПанели = ФормаОтчета.ЭлементыФормы.ПанельПользователя.Ширина;*/
					if(true/*ФормаОтчета.ЭлементыФормы.Показатели.Ширина <> ШиринаПанели-31*/)
					{
						/*ФормаОтчета.ЭлементыФормы.Показатели.Ширина = ШиринаПанели-31;*/
					}
				}
			}
			/*ТиповыеОтчетыПереопределяемый.ПослеВыводаПанелиПользователя(ОтчетОбъект, ФормаОтчета, ДеревоНастроекСтандартныхСтраниц, ЗначенияНастроек);*/
			/*// Сдвинем страницу Сортировка в самый конец
*/
			/*Количество = ЭлементыФормы.ПанельЗакладок.Страницы.Количество();*/
			if(true/*ЭлементыФормы.ПанельЗакладок.Страницы.Найти("Показатели") <> Неопределено*/)
			{
				/*Индекс = ЭлементыФормы.ПанельЗакладок.Страницы.Индекс(ЭлементыФормы.ПанельЗакладок.Страницы.Показатели);*/
				/*ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(ЭлементыФормы.ПанельЗакладок.Страницы.Показатели, Количество - 1 - Индекс);*/
			}
			/*Индекс = ЭлементыФормы.ПанельЗакладок.Страницы.Индекс(ЭлементыФормы.ПанельЗакладок.Страницы.Порядок);*/
			/*ЭлементыФормы.ПанельЗакладок.Страницы.Сдвинуть(ЭлементыФормы.ПанельЗакладок.Страницы.Порядок, Количество - 1 - Индекс);*/
			if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПослеВыводаПанелиПользователя") И ПараметрыИсполненияОтчета.ПослеВыводаПанелиПользователя*/)
			{
				/*ФормаОтчета.ПослеВыводаПанелиПользователя(ЗначенияНастроек);*/
			}
			/*ЭлементыФормы.ПанельЗакладок.РежимПрокручиваемыхСтраниц = Истина;*/
			/*ЭлементыФормы.ПанельЗакладок.Видимость = Истина;*/
			if(true/*ЭлементыФормы.Найти("ПанельПользователяГоризонтальная") <> Неопределено*/)
			{
				/*ЭлементыФормы.ПанельПользователяГоризонтальная.Видимость = истина;*/
			}
			if(true/*НЕ ЕстьЭлементыНаПанели*/)
			{
				/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Надпись"), "НадписьНеЗаполненаПанель", Истина, ЭлементыФормы.ПанельПользователя);*/
				/*НовыйЭлемент.Верх      = 1;*/
				/*НовыйЭлемент.Лево      = 1;*/
				/*НовыйЭлемент.Ширина    = ?(ЭлементыФормы.ПанельПользователя.Ширина < 215, 215, ЭлементыФормы.ПанельПользователя.Ширина-1);*/
				/*НовыйЭлемент.Высота    = ЭлементыФормы.ПанельПользователя.Высота-35;*/
				/*НовыйЭлемент.Заголовок = "         Панель пользователя не заполнена.";*/
				/*НовыйЭлемент.ЦветТекста = ЦветаСтиля.ЦветРамки;*/
				/*НовыйЭлемент.ГоризонтальноеПоложение = ГоризонтальноеПоложение.Лево;*/
				/*УстановитьПравуюПривязкуПолностью(НовыйЭлемент, ЭлементыФормы.ПанельПользователя);*/
			}
		}

		public void НарисоватьФлажокДопНастроек(/*ФормаОтчета, ВерхДопСтр, ИмяФлажка, НазваниеФлажка, ЗначениеПоУмолчанию, ПараметрыИсполненияОтчета = Неопределено*/)
		{
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			/*ШиринаПанелиЗакладки = ЭлементыФормы.ПанельЗакладок.Ширина-15;*/
			/*НовыйЭлемент = ЭлементыФормы.Добавить(Тип("Флажок"), ИмяФлажка, Истина, ЭлементыФормы.ПанельЗакладок);*/
			/*НовыйЭлемент.Верх      = ВерхДопСтр;*/
			/*НовыйЭлемент.Лево      = 6;*/
			/*НовыйЭлемент.Ширина    = ШиринаПанелиЗакладки - 15;*/
			/*НовыйЭлемент.Заголовок = НазваниеФлажка;*/
			/*НовыйЭлемент.Значение  = ЗначениеПоУмолчанию;*/
			/*УстановитьПравуюПривязку(НовыйЭлемент, ЭлементыФормы.ПанельЗакладок);*/
			if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ДействияПанелиИзменениеФлажкаДопНастроек") И ПараметрыИсполненияОтчета.ДействияПанелиИзменениеФлажкаДопНастроек*/)
			{
				if(true/*ФормаОтчета.ДействияЭлементовФормы.Свойство("ДействияПанелиИзменениеФлажкаДопНастроек")*/)
				{
					/*НовыйЭлемент.УстановитьДействие("ПриИзменении", ФормаОтчета.ДействияЭлементовФормы.ДействияПанелиИзменениеФлажкаДопНастроек);*/
				}
			}
			/*ВерхДопСтр = ВерхДопСтр + НовыйЭлемент.Высота + 6;*/
		}

		public void СохранитьРезультатВНастройке(/*ОтчетОбъект, ФормаОтчета*/)
		{
			if(true/*Не ФормаОтчета.ЭтоОтработкаРасшифровки И Не ФормаОтчета.РежимРедактированияНастройки*/)
			{
				/*СохранитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект, ФормаОтчета);*/
			}
			/*СсылкаНаОбъект = ПолучитьИдентификаторОбъекта(ОтчетОбъект);*/
			/*НастраиваемыйОбъект = ?(ОтчетОбъект.СохраненнаяНастройка.Пустая(), СсылкаНаОбъект, ОтчетОбъект.СохраненнаяНастройка);*/
			/*Настройка = ПолучитьНастройкуПользователяНастройкиОтчета(НастраиваемыйОбъект);*/
			if(true/*Настройка <> Неопределено*/)
			{
				/*Настройка = Настройка.ПолучитьОбъект();*/
				/*Значение = Настройка.ХранилищеНастроек.Получить();*/
			}
			/*ТД = Новый ТабличныйДокумент;*/
			/*ТД.Вывести(ФормаОтчета.ЭлементыФормы.Результат);*/
			/*Значение["Результат"] = ТД;*/
			/*Настройка.ХранилищеНастроек = Новый ХранилищеЗначения(Значение);*/
			/*Настройка.Записать();*/
		}

		public void СохранитьРезультатССохраненным(/*ОтчетОбъект, ФормаОтчета*/)
		{
			/*СсылкаНаОбъект = ПолучитьИдентификаторОбъекта(ОтчетОбъект);*/
			/*НастраиваемыйОбъект = ?(ОтчетОбъект.СохраненнаяНастройка.Пустая(), СсылкаНаОбъект, ОтчетОбъект.СохраненнаяНастройка);*/
			/*Настройка = ПолучитьНастройкуПользователяНастройкиОтчета(НастраиваемыйОбъект);*/
			if(true/*Настройка = Неопределено*/)
			{
			}
			/*Значение = Настройка.ХранилищеНастроек.Получить();*/
			/*ТД = Значение["Результат"];*/
			if(true/*ТД = Неопределено*/)
			{
				/*Вопрос("Отсутствует сохраненный результат", РежимДиалогаВопрос.ОК);*/
			}
			/*ТД2 = Новый ТабличныйДокумент;*/
			/*ТД2.Вывести(ФормаОтчета.ЭлементыФормы.Результат);*/
			/*Файл1 = ПолучитьИмяВременногоФайла("ФайлСравнения1.mxl");*/
			/*Файл2 = ПолучитьИмяВременногоФайла("ФайлСравнения2.mxl");*/
			/*ТД2.Записать(Файл1);*/
			/*ТД.Записать(Файл2);*/
			/*СравнениеФайлов = Новый СравнениеФайлов;*/
			/*СравнениеФайлов.ПервыйФайл = Файл1;*/
			/*СравнениеФайлов.ВторойФайл = Файл2;*/
			/*СравнениеФайлов.СпособСравнения = СпособСравненияФайлов.ТабличныйДокумент;*/
			if(true/*СравнениеФайлов.Сравнить()*/)
			{
				/*Вопрос("Результаты совпадают", РежимДиалогаВопрос.ОК);*/
			}
		}

		public void СохранитьТекущуюНастройку(/*ОтчетОбъект, ФормаОтчета*/)
		{
			if(true/*Не ОтчетОбъект.СохраненнаяНастройка.Пустая() И ОтчетОбъект.СохраненнаяНастройка.ПолучитьОбъект() = Неопределено*/)
			{
				/*// Вариант отчета удален. Сбрасываем вариант отчета на основной и предлагаем сохранить как
*/
				/*ОтчетОбъект.СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();*/
				/*СохранитьТекущуюНастройкуКак(ОтчетОбъект, ФормаОтчета);*/
				/*ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета);*/
			}
			if(true/*Не ЗаписьОтчетаДоступна(ОтчетОбъект)*/)
			{
				/*СохранитьТекущуюНастройкуКак(ОтчетОбъект, ФормаОтчета);*/
			}
			/*ЗагрузитьВРеквизитЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);*/
			if(true/*ОтчетОбъект.СохраненнаяНастройка.Пустая()*/)
			{
				/*ФормаОтчета.ЗаписатьВФорме();*/
			}
			/*ФормаОтчета.Модифицированность = Ложь;*/
			/*ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета);*/
			/*ФормаОтчета.Модифицированность = Ложь;*/
			/*УдалитьПользовательскиеНастройки(ОтчетОбъект.СохраненнаяНастройка);*/
		}

		public void СохранитьТекущуюНастройкуКак(/*ОтчетОбъект, ФормаОтчета*/)
		{
			/*СохраненнаяСохраненнаяНастройка = ОтчетОбъект.СохраненнаяНастройка;*/
			/*СохранениеНастроек.ВыбратьНастройкуФормы(ОтчетОбъект.СохраненнаяНастройка, ФормаОтчета, ПолучитьИдентификаторОбъекта(ОтчетОбъект), Истина);*/
			if(true/*Не ФормаОтчета.РежимРедактированияНастройки*/)
			{
				/*ОбновитьТаблицуДоступныхНастроекПользователю(ОтчетОбъект);*/
				/*ОбновитьКнопкиВыбораНастроек(ФормаОтчета, ОтчетОбъект, ФормаОтчета.ПредставлениеНастройки, ФормаОтчета.РежимРедактированияНастройки);*/
			}
		}

		public void РедактироватьПанельПользователя(/*ОтчетОбъект, ФормаОтчета*/)
		{
			/*ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиПараметровПанелиПользователя", ФормаОтчета);*/
			/*ФормаНастройки.ОтчетОбъект = ОтчетОбъект;*/
			/*ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);*/
			if(true/*ФормаНастройки.ОткрытьМодально() = Истина*/)
			{
				/*ПерерисоватьПанельНастроек(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек);*/
				/*ФормаОтчета.Модифицированность = Истина;*/
			}
		}

		public void ОткрытьФормуСохраненнойНастройки(/*ОтчетОбъект, ФормаОтчета*/)
		{
			if(true/*Не ОтчетОбъект.СохраненнаяНастройка.Пустая()*/)
			{
				if(true/*ОтчетОбъект.СохраненнаяНастройка.ПолучитьОбъект() = Неопределено*/)
				{
					/*ОтчетОбъект.СохраненнаяНастройка = Справочники.СохраненныеНастройки.ПустаяСсылка();*/
					/*Вопрос("Текущий вариант отчета удален.", РежимДиалогаВопрос.ОК);*/
					/*ОбновитьТаблицуДоступныхНастроекПользователю(ОтчетОбъект);*/
					/*ОбновитьКнопкиВыбораНастроек(ФормаОтчета, ОтчетОбъект, ФормаОтчета.ПредставлениеНастройки, ФормаОтчета.РежимРедактированияНастройки);*/
					/*ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета);*/
				}
				/*ФормаЭлемента = ОтчетОбъект.СохраненнаяНастройка.ПолучитьФорму(, ФормаОтчета);*/
				/*ФормаЭлемента.ОткрытьМодально();*/
				/*ОбновитьТаблицуДоступныхНастроекПользователю(ОтчетОбъект);*/
				/*ОбновитьКнопкиВыбораНастроек(ФормаОтчета, ОтчетОбъект, ФормаОтчета.ПредставлениеНастройки, ФормаОтчета.РежимРедактированияНастройки);*/
			}
		}

		public void ОбработкаЗакрытияНастройкиОтчета(/*ОтчетОбъект, ФормаОтчета, Отказ = Ложь, СтандартнаяОбработка = Истина*/)
		{
			if(true/*Не ОтчетОбъект.СохраненнаяНастройка.Пустая() И ОтчетОбъект.СохраненнаяНастройка.ПолучитьОбъект() = Неопределено*/)
			{
				/*// Вариант отчета удален
*/
			}
			if(true/*Не ФормаОтчета.ЭтоОтработкаРасшифровки И Не ФормаОтчета.РежимРедактированияНастройки*/)
			{
				/*СохранитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект, ФормаОтчета);*/
			}
			/*СтандартнаяОбработка = Ложь;*/
			if(true/*Не ЗаписьОтчетаДоступна(ОтчетОбъект) ИЛИ Не ФормаОтчета.Модифицированность*/)
			{
			}
			if(true/*ОтчетОбъект.СохраненнаяНастройка.Пустая()*/)
			{
				/*// Сохраним сам отчет
*/
				/*РезультатВопроса = Вопрос(НСТР("ru='Сохранить изменения в основном варианте отчета?'"), РежимДиалогаВопрос.ДаНетОтмена);*/
				if(true/*РезультатВопроса = КодВозвратаДиалога.Да*/)
				{
					/*СохранитьТекущуюНастройку(ОтчетОбъект, ФормаОтчета);*/
				}
			}
		}

		public void СохранитьНастройкуПользователяНастройкиОтчета(/*ОтчетОбъект, ФормаОтчета*/)
		{
			/*СсылкаНаОбъект = ПолучитьИдентификаторОбъекта(ОтчетОбъект);*/
			/*НастраиваемыйОбъект = ?(ОтчетОбъект.СохраненнаяНастройка.Пустая(), СсылкаНаОбъект, ОтчетОбъект.СохраненнаяНастройка);*/
			/*Настройка = ПолучитьНастройкуПользователяНастройкиОтчета(НастраиваемыйОбъект);*/
			if(true/*Настройка <> Неопределено*/)
			{
				/*Настройка = Настройка.ПолучитьОбъект();*/
				/*Значение = Настройка.ХранилищеНастроек.Получить();*/
			}
			/*Значение["ЗначенияНастроекПанелиПользователя"] = ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);*/
			/*Настройка.ХранилищеНастроек = Новый ХранилищеЗначения(Значение);*/
			/*Настройка.Записать();*/
		}

		public void ОбработкаВыбораВариантаОтчета(/*ОтчетОбъект, ФормаОтчета, ВыбраннаяСохраненнаяНастройка*/)
		{
			/*Отказ = ложь;*/
			/*ОбработкаЗакрытияНастройкиОтчета(ОтчетОбъект, ФормаОтчета, Отказ);*/
			if(true/*Не ВыбраннаяСохраненнаяНастройка.Пустая() И ВыбраннаяСохраненнаяНастройка.ПолучитьОбъект() = Неопределено*/)
			{
				/*Вопрос("Операция невозможна. Вариант отчета удален.", РежимДиалогаВопрос.ОК);*/
				/*ОбновитьТаблицуДоступныхНастроекПользователю(ОтчетОбъект);*/
				/*ОбновитьКнопкиВыбораНастроек(ФормаОтчета, ОтчетОбъект, ФормаОтчета.ПредставлениеНастройки, ФормаОтчета.РежимРедактированияНастройки);*/
			}
			/*ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(Неопределено);*/
			/*ОтчетОбъект.ПараметрыПанелиПользователя = Новый ХранилищеЗначения(ПолучитьПараметрыПанелиПользователяПоУмолчанию(ОтчетОбъект, ФормаОтчета));*/
			/*ФормаОтчета.КомпоновщикНастроекПользователя = Новый КомпоновщикНастроекКомпоновкиДанных;*/
			/*// Сохраним результат
*/
			if(true/*ФормаОтчета.СоответствиеНастройкаРезультат[ОтчетОбъект.СохраненнаяНастройка] <> Неопределено*/)
			{
				/*ФормаОтчета.ЭлементыФормы.Удалить(ФормаОтчета.СоответствиеНастройкаРезультат[ОтчетОбъект.СохраненнаяНастройка].Результат);*/
			}
			/*Результат = ФормаОтчета.ЭлементыФормы.Добавить(Тип("ПолеТабличногоДокумента"), , Ложь);*/
			/*Результат.Вывести(ФормаОтчета.ЭлементыФормы.Результат);*/
			/*Структура = Новый Структура;*/
			/*Структура.Вставить("Результат", Результат);*/
			/*Структура.Вставить("ФиксацияСверху",    ФормаОтчета.ЭлементыФормы.Результат.ФиксацияСверху);*/
			/*Структура.Вставить("ДанныеРасшифровки", ФормаОтчета.ДанныеРасшифровки);*/
			/*ФормаОтчета.СоответствиеНастройкаРезультат[ОтчетОбъект.СохраненнаяНастройка] = Структура;*/
			/*// Установим настройку
*/
			/*ОтчетОбъект.СохраненнаяНастройка = ВыбраннаяСохраненнаяНастройка;*/
			/*// Загрузим результат, если есть сохраненный
*/
			/*ФормаОтчета.ЭлементыФормы.Результат.Очистить();*/
			/*ФормаОтчета.ЭлементыФормы.Результат.ФиксацияСверху = 0;*/
			/*Структура = ФормаОтчета.СоответствиеНастройкаРезультат[ОтчетОбъект.СохраненнаяНастройка];*/
			if(true/*Структура <> Неопределено*/)
			{
				/*ФормаОтчета.ЭлементыФормы.Результат.Вывести(Структура.Результат);*/
				/*ФормаОтчета.ДанныеРасшифровки = Структура.ДанныеРасшифровки;*/
				/*ФормаОтчета.ЭлементыФормы.Результат.ФиксацияСверху = Структура.ФиксацияСверху;*/
				/*ФормаОтчета.Обновить();*/
			}
			/*// Загрузим саму настройку
*/
			if(true/*ОтчетОбъект.СохраненнаяНастройка.Пустая()*/)
			{
				/*ПрименитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект);*/
				/*ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект).НастройкиПоУмолчанию);*/
			}
			/*ОбработкаФормыПослеПримененияНастройки(ОтчетОбъект, ФормаОтчета);*/
		}

		public void СохранитьПараметрыТабличногоДокумента(/*Результат, ВариантОтчета*/)
		{
			/*Структура = Новый Структура("АвтоМасштаб, ПолеСверху, ПолеСлева, ПолеСнизу, ПолеСправа, МасштабПечати, ИмяПараметровПечати, ИмяПринтера, ОриентацияСтраницы ");*/
			/*Структура.АвтоМасштаб         = Результат.АвтоМасштаб;*/
			/*Структура.ПолеСверху          = Результат.ПолеСверху;*/
			/*Структура.ПолеСлева           = Результат.ПолеСлева;*/
			/*Структура.ПолеСнизу           = Результат.ПолеСнизу;*/
			/*Структура.ПолеСправа          = Результат.ПолеСправа;*/
			/*Структура.МасштабПечати       = Результат.МасштабПечати;*/
			/*Структура.ИмяПараметровПечати = Результат.ИмяПараметровПечати;*/
			/*Структура.ИмяПринтера         = Результат.ИмяПринтера;*/
			/*Структура.ОриентацияСтраницы  = Результат.ОриентацияСтраницы;*/
			/*СохранитьЗначение("УниверсальныйОтчет_НастройкиВариантаОтчета_" + ВариантОтчета.НастраиваемыйОбъект + "/" + ВариантОтчета, Структура);*/
		}

		public void ВосстановитьПараметрыТабличногоДокумента(/*Результат, ВариантОтчета*/)
		{
			/*ПараметрыТабличногоДокумента = ВосстановитьЗначение("УниверсальныйОтчет_НастройкиВариантаОтчета_" + ВариантОтчета.НастраиваемыйОбъект + "/" + ВариантОтчета);*/
			if(true/*ТипЗНЧ(ПараметрыТабличногоДокумента) = Тип("Структура")*/)
			{
				/*Результат.АвтоМасштаб         = ПараметрыТабличногоДокумента.АвтоМасштаб;*/
				/*Результат.ПолеСверху          = ПараметрыТабличногоДокумента.ПолеСверху;*/
				/*Результат.ПолеСлева           = ПараметрыТабличногоДокумента.ПолеСлева;*/
				/*Результат.ПолеСнизу           = ПараметрыТабличногоДокумента.ПолеСнизу;*/
				/*Результат.ПолеСправа          = ПараметрыТабличногоДокумента.ПолеСправа;*/
				/*Результат.МасштабПечати       = ПараметрыТабличногоДокумента.МасштабПечати;*/
				/*Результат.ИмяПараметровПечати = ПараметрыТабличногоДокумента.ИмяПараметровПечати;*/
				/*Результат.ИмяПринтера      	  = ПараметрыТабличногоДокумента.ИмяПринтера;*/
				/*Результат.ОриентацияСтраницы  = ПараметрыТабличногоДокумента.ОриентацияСтраницы;*/
			}
		}

		public void ВыборВариантаОтчетаНаПанелиВариантов(/*ОтчетОбъект, ФормаОтчета, Элемент = Неопределено, СохраненаяНастройка = Неопределено*/)
		{
			if(true/*СохраненаяНастройка = Неопределено*/)
			{
				/*Индекс = Число(Сред(Элемент.Имя, 27));*/
				if(true/*Не ФормаОтчета.ЭтоОтработкаРасшифровки И Не ФормаОтчета.РежимРедактированияНастройки*/)
				{
					/*СохранитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект, ФормаОтчета);*/
				}
			}
			/*ВыбраннаяСохраненнаяНастройка = ОтчетОбъект.ТаблицаВариантовОтчета[Индекс].Ссылка;*/
			if(true/*Не ВыбраннаяСохраненнаяНастройка.Пустая() И ВыбраннаяСохраненнаяНастройка.ПолучитьОбъект() = Неопределено*/)
			{
				/*Вопрос("Операция невозможна. Вариант отчета """ + Элемент.ТекстНевыбраннойКартинки + """ удален.", РежимДиалогаВопрос.ОК);*/
				/*ОбновитьТаблицуДоступныхНастроекПользователю(ОтчетОбъект);*/
				/*ОбновитьКнопкиВыбораНастроек(ФормаОтчета, ОтчетОбъект, ФормаОтчета.ПредставлениеНастройки, ФормаОтчета.РежимРедактированияНастройки);*/
			}
			/*//Отказ = Ложь;
*/
			/*// Затерем значения настроек панели чтобы они не перешли на другой вариант отчета
*/
			/*ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(Неопределено);*/
			/*ОтчетОбъект.ПараметрыПанелиПользователя = Новый ХранилищеЗначения(ПолучитьПараметрыПанелиПользователяПоУмолчанию(ОтчетОбъект, ФормаОтчета));*/
			/*ОчиститьКомпоновщикНастроек(ФормаОтчета.КомпоновщикНастроекПользователя);*/
			/*//ФормаОтчета.КомпоновщикНастроекПользователя = Новый КомпоновщикНастроекКомпоновкиДанных;
*/
			/*//Если Отказ Тогда
*/
			/*//	Возврат;
*/
			/*//КонецЕсли;
*/
			/*// Сохраним результат
*/
			if(true/*ФормаОтчета.СоответствиеНастройкаРезультат[ОтчетОбъект.СохраненнаяНастройка] <> Неопределено*/)
			{
				/*ФормаОтчета.ЭлементыФормы.Удалить(ФормаОтчета.СоответствиеНастройкаРезультат[ОтчетОбъект.СохраненнаяНастройка].Результат);*/
			}
			/*Результат = ФормаОтчета.ЭлементыФормы.Добавить(Тип("ПолеТабличногоДокумента"), , Ложь);*/
			/*Результат.Вывести(ФормаОтчета.ЭлементыФормы.Результат);*/
			/*Структура = Новый Структура;*/
			/*Структура.Вставить("Результат", Результат);*/
			/*Структура.Вставить("ФиксацияСверху",    ФормаОтчета.ЭлементыФормы.Результат.ФиксацияСверху);*/
			/*Структура.Вставить("ДанныеРасшифровки", ФормаОтчета.ДанныеРасшифровки);*/
			/*ФормаОтчета.СоответствиеНастройкаРезультат[ОтчетОбъект.СохраненнаяНастройка] = Структура;*/
			/*//запомним настройки табличного документа
*/
			/*СохранитьПараметрыТабличногоДокумента(ФормаОтчета.ЭлементыФормы.Результат, ОтчетОбъект.СохраненнаяНастройка);*/
			/*// Обновим кнопки выбора настройки
*/
			/*Элемент.ЦветФона    = Новый Цвет(255, 248, 220);*/
			/*Элемент.ЦветТекста  = ЦветаСтиля.ЦветТекстаКнопки;*/
			/*Элемент.ГиперСсылка = ложь;*/
			/*// Установим настройку
*/
			/*ОтчетОбъект.СохраненнаяНастройка = ОтчетОбъект.ТаблицаВариантовОтчета[Индекс].Ссылка;*/
			/*Элемент.КонтекстноеМеню = ФормаОтчета.ЭлементыФормы.КонтекстноеМенюКартинкиВыбораСохраненнойНастройки;*/
			/*// Загрузим результат, если есть сохраненный
*/
			/*ФормаОтчета.ЭлементыФормы.Результат.Очистить();*/
			/*ФормаОтчета.ЭлементыФормы.Результат.ФиксацияСверху = 0;*/
			/*Структура = ФормаОтчета.СоответствиеНастройкаРезультат[ОтчетОбъект.СохраненнаяНастройка];*/
			if(true/*Структура <> Неопределено*/)
			{
				/*ФормаОтчета.ЭлементыФормы.Результат.Вывести(Структура.Результат);*/
				/*ФормаОтчета.ДанныеРасшифровки = Структура.ДанныеРасшифровки;*/
				/*ФормаОтчета.ЭлементыФормы.Результат.ФиксацияСверху = Структура.ФиксацияСверху;*/
				/*ФормаОтчета.Обновить();*/
			}
			/*ВосстановитьПараметрыТабличногоДокумента(ФормаОтчета.ЭлементыФормы.Результат, ОтчетОбъект.СохраненнаяНастройка);*/
			/*// Загрузим саму настройку
*/
			if(true/*ОтчетОбъект.СохраненнаяНастройка.Пустая()*/)
			{
				/*ПрименитьНастройкуПользователяНастройкиОтчета(ОтчетОбъект);*/
				/*ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект).НастройкиПоУмолчанию);*/
			}
			/*ОбработкаФормыПослеПримененияНастройки(ОтчетОбъект, ФормаОтчета);*/
		}

		public void ОбработкаФормыПослеПримененияНастройки(/*ОтчетОбъект, ФормаОтчета, ИспользоватьЗначенияНастроекНаФорме = Ложь*/)
		{
			if(true/*ИспользоватьЗначенияНастроекНаФорме*/)
			{
				/*ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователя(ОтчетОбъект, ФормаОтчета);*/
			}
			/*ПерерисоватьПанельНастроек(ОтчетОбъект, ФормаОтчета, ЗначенияНастроек);*/
			/*ОбновитьФормуТиповогоОтчетаПоКомпоновщику(ОтчетОбъект, ФормаОтчета);*/
			/*ОбновитьЗаголовокТиповогоОтчета(ОтчетОбъект, ФормаОтчета);*/
			/*ФормаОтчета.Модифицированность = Ложь;*/
			/*ЕстьЭлементыУправленияНаПравойПанели = Истина;*/
			if(true/*ФормаОтчета.ОтчетОбъект.ПараметрыПанелиПользователя <> Неопределено*/)
			{
				/*ПараметрыПанели = ФормаОтчета.ОтчетОбъект.ПараметрыПанелиПользователя.Получить();*/
				/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
				/*Кнопка = Неопределено;*/
				if(true/*ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("ПанельПользователя") <> Неопределено*/)
				{
					/*Кнопка = ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.ПанельПользователя;*/
				}
				/*ЕстьЭлементыУправленияНаПравойПанели = ложь;*/
				if(true/*ПараметрыПанели.Свойство("Отборы") и ПараметрыПанели.Отборы <> Неопределено*/)
				{
				}
				if(true/*Не ЕстьЭлементыУправленияНаПравойПанели И ПараметрыПанели.Свойство("Параметры") и ПараметрыПанели.Параметры <> Неопределено*/)
				{
				}
				if(true/*НЕ ЕстьЭлементыУправленияНаПравойПанели И ПараметрыПанели.Свойство("ДеревоНастроекСтандартныхСтраниц") и ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц <> Неопределено*/)
				{
				}
			}
			if(true/*НЕ ЕстьЭлементыУправленияНаПравойПанели и Кнопка.Пометка*/)
			{
				/*Кнопка.Пометка = ложь;*/
			}
			/*УправлениеОтображениемПанелиПользователя(ФормаОтчета);*/
		}

		public void УстановитьВидимостьПанелиВариантовПоУмолчанию(/*ЭтотОбъект, ЭтаФорма*/)
		{
			/*ЭлементыФормы = ЭтаФорма.ЭлементыФормы;*/
			if(true/*ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("ПанельВариантов") <> Неопределено*/)
			{
				if(true/*ЭтотОбъект.ТаблицаВариантовОтчета.Количество() < 2*/)
				{
					/*ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.ПанельВариантов.Пометка = Ложь;*/
				}
				if(true/*ЭтаФорма.ЭтоОтработкаРасшифровки*/)
				{
					/*ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.ПанельВариантов.Пометка = Ложь;*/
				}
			}
		}

		public void УстановитьВидимостьПанелиПользователяПоУмолчанию(/*ЭтотОбъект, ЭтаФорма*/)
		{
			/*ЭлементыФормы = ЭтаФорма.ЭлементыФормы;*/
			if(true/*ЭтотОбъект.ТаблицаВариантовОтчета.Количество() = 0*/)
			{
				if(true/*ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("ПанельПользователя") <> Неопределено*/)
				{
					/*ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.ПанельПользователя.Пометка = Ложь;*/
				}
			}
		}

		public void УправлениеОтображениемПанелиПользователя(/*ФормаОтчета*/)
		{
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			/*Кнопка = Неопределено;*/
			if(true/*ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("ПанельПользователя") <> Неопределено*/)
			{
				/*Кнопка = ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.ПанельПользователя;*/
			}
			/*ЕстьРазделитель = ЭлементыФормы.Найти("Разделитель") <> Неопределено;*/
			if(true/*ЕстьРазделитель*/)
			{
				if(true/*Кнопка = Неопределено или Не Кнопка.Пометка*/)
				{
					/*ЭлементыФормы.ПанельПользователя.УстановитьПривязку(ГраницаЭлементаУправления.Лево);*/
					/*ЭлементыФормы.Разделитель.УстановитьПривязку(ГраницаЭлементаУправления.Право, ЭлементыФормы.ПанельПользователя, ГраницаЭлементаУправления.Лево);*/
					/*ЭлементыФормы.ПанельПользователя.Свертка = РежимСверткиЭлементаУправления.Право;*/
					/*ЭлементыФормы.Разделитель.Свертка        = РежимСверткиЭлементаУправления.Право;*/
				}
			}
		}

		public void УправлениеОтображениемПанелиВариантов(/*ФормаОтчета*/)
		{
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			/*Кнопка = Неопределено;*/
			if(true/*ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("ПанельВариантов") <> Неопределено*/)
			{
				/*Кнопка = ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.ПанельВариантов;*/
			}
			if(true/*Кнопка <> Неопределено И Кнопка.Пометка*/)
			{
				/*ЭлементыФормы.РазделительПанелиВыбораВариантов.Свертка = РежимСверткиЭлементаУправления.Нет;*/
				/*ЭлементыФормы.ПанельВыбораВариантов.Свертка = РежимСверткиЭлементаУправления.Нет;*/
				/*ЭлементыФормы.РазделительПанелиВыбораВариантов.УстановитьПривязку(ГраницаЭлементаУправления.Верх);*/
				/*ЭлементыФормы.ПанельВыбораВариантов.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.РазделительПанелиВыбораВариантов, ГраницаЭлементаУправления.Верх);*/
				/*ЭлементыФормы.Сформировать.Высота = ЭлементыФормы.Сформировать.Высота - 2;*/
			}
		}

		public void ОбновитьИзмененияТабличногоПоля(/*ЭлементыФормы, Элемент*/)
		{
			if(true/*ТипЗнч(Элемент) = Тип("Число")*/)
			{
				/*Индекс = Элемент;*/
			}
			/*ЭлементТабличноеПоле = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ТабличноеПоле"];*/
			/*ЭлементВидСравнения = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ВидСравнения"];*/
			/*// При очистке списка можно смело выставлять вид сравнения в "Не отбирать"
*/
			if(true/*ЭлементТабличноеПоле.Значение.Количество() = 0 И ЭлементВидСравнения.Значение <> ""*/)
			{
				/*ЭлементВидСравнения.Значение = "";*/
			}
			/*// Если список не пуст, а вид сравнения "Не отбирать", установим вид сравнения в "Только выбранные"
*/
			if(true/*ЭлементТабличноеПоле.Значение.Количество() > 0 И ЭлементВидСравнения.Значение = ""*/)
			{
				/*ЭлементВидСравнения.Значение = "Выбранные";*/
			}
		}

		public void ОбработкаНажатияКнопкиПодбор(/*ОтчетОбъект, ФормаОтчета, Элемент, Владелец = Неопределено, НазваниеРеквизита = "", СписокТипов = Неопределено*/)
		{
			/*Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);*/
			/*Индекс = Число(Сред(Элемент.Имя, 18, 1));*/
			/*СтрокаОтбора = Параметры.Отборы[Индекс];*/
			/*МассивТипов = Новый Массив;*/
			if(true/*СписокТипов = Неопределено*/)
			{
				/*ДоступноеПоле = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(СтрокаОтбора.Поле, ОтчетОбъект.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора);*/
				/*СписокТипов = ДоступноеПоле.Тип.Типы();*/
				/*МассивТипов = Новый Массив;*/
			}
			if(true/*МассивТипов.Количество() > 1*/)
			{
				/*СписокТипов = Новый СписокЗначений;*/
				/*СписокТипов.ЗагрузитьЗначения(МассивТипов);*/
				/*ВыбранныйТип = ФормаОтчета.ВыбратьИзМеню(СписокТипов);*/
				if(true/*ВыбранныйТип = Неопределено*/)
				{
				}
				/*ТипПоля = ВыбранныйТип.Значение;*/
			}
			/*ОбъектМетаданных = Метаданные.НайтиПоТипу(ТипПоля);*/
			if(true/*ОбъектМетаданных = Неопределено*/)
			{
			}
			/*ЭлементСписок = ФормаОтчета.ЭлементыФормы.Найти("ДинамическийОтбор"+Индекс+"ТабличноеПоле");*/
			if(true/*Метаданные.Справочники.Найти(ОбъектМетаданных.Имя) <> Неопределено*/)
			{
				/*ФормаВыбора = Справочники[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);*/
				/*ФормаВыбора.ЗакрыватьПриВыборе = Ложь;*/
				if(true/*Владелец <> Неопределено*/)
				{
					/*ФормаВыбора.ПараметрОтборПоВладельцу = Владелец;*/
					/*ФормаВыбора.ПараметрВыборПоВладельцу = Владелец;*/
					if(true/*НазваниеРеквизита <> ""*/)
					{
						/*ОтборПоРеквизиту =  ФормаВыбора.Отбор.Найти(НазваниеРеквизита);*/
						if(true/*ОтборПоРеквизиту <> Неопределено*/)
						{
							if(true/*ТипЗнч(Владелец) = Тип("ТаблицаЗначений")*/)
							{
								if(true/*Владелец.Количество() > 0*/)
								{
									/*ОтборПоРеквизиту.Значение = Владелец[0].Значение;*/
								}
							}
							/*ОтборПоРеквизиту.Использование = ?(ЗначениеЗаполнено(Владелец), Истина, Ложь);*/
						}
					}
				}
			}
			if(true/*Метаданные.Документы.Найти(ОбъектМетаданных.Имя) <> Неопределено*/)
			{
				/*ФормаВыбора = Документы[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);*/
				/*ФормаВыбора.ЗакрыватьПриВыборе = Ложь;*/
			}
			if(true/*Метаданные.Перечисления.Найти(ОбъектМетаданных.Имя) <> Неопределено*/)
			{
				/*ФормаВыбора = Перечисления[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);*/
				/*ФормаВыбора.ЗакрыватьПриВыборе = Ложь;*/
			}
			if(true/*Метаданные.ПланыВидовРасчета.Найти(ОбъектМетаданных.Имя) <> Неопределено*/)
			{
				/*ФормаВыбора = ПланыВидовРасчета[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);*/
				/*ФормаВыбора.ЗакрыватьПриВыборе = Ложь;*/
			}
			if(true/*Метаданные.ПланыВидовХарактеристик.Найти(ОбъектМетаданных.Имя) <> Неопределено*/)
			{
				/*ФормаВыбора = ПланыВидовХарактеристик[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);*/
				/*ФормаВыбора.ЗакрыватьПриВыборе = Ложь;*/
			}
			if(true/*Метаданные.ПланыСчетов.Найти(ОбъектМетаданных.Имя) <> Неопределено*/)
			{
				/*ФормаВыбора = ПланыСчетов[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);*/
				/*ФормаВыбора.ЗакрыватьПриВыборе = Ложь;*/
			}
			if(true/*Метаданные.Задачи.Найти(ОбъектМетаданных.Имя) <> Неопределено*/)
			{
				/*ФормаВыбора = Задачи[ОбъектМетаданных.Имя].ПолучитьФормуВыбора(, ФормаОтчета, "ОтборПо" + Индекс);*/
				/*ФормаВыбора.ЗакрыватьПриВыборе = Ложь;*/
			}
			/*ФормаВыбора.КлючУникальности = "ОтборПо" + Индекс;*/
			/*ФормаВыбора.Открыть();*/
		}

		public void ОбработкаИзмененияЗначенияДинамическогоОтбора(/*ЭлементыФормы, Элемент, ФормаОтчета = Неопределено*/)
		{
			if(true/*ТипЗнч(Элемент) = Тип("Кнопка")*/)
			{
				/*НастройкаПериода = Новый НастройкаПериода;*/
				if(true/*ЭлементыФормы.Найти("ДинамическийОтборПериодВыбор") <> Неопределено И ФормаОтчета <> Неопределено*/)
				{
					/*НачалоПериода = ФормаОтчета.СтандартныйПериод.ДатаНачала;*/
					/*КонецПериода  = КонецДня(ФормаОтчета.СтандартныйПериод.ДатаОкончания);*/
				}
				/*НастроитьПериод(НастройкаПериода, НачалоПериода, КонецПериода);*/
				/*ЭлементыФормы.ДинамическийОтборСтандартныйПериодПользователя.Значение = ВариантСтандартногоПериода.ПроизвольныйПериод;*/
				if(true/*ЭлементыФормы.Найти("ДинамическийОтборПериодВыбор") <> Неопределено И ФормаОтчета <> Неопределено*/)
				{
					/*ФормаОтчета.СтандартныйПериод.ДатаНачала            = НачалоПериода;*/
					/*ФормаОтчета.СтандартныйПериод.ДатаОкончания         = КонецПериода;*/
					/*ПараметрыИсполненияОтчета                           = ФормаОтчета.ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
					/*ЭлементыФормы.ДинамическийОтборПериодВыбор.Значение = ПолучитьПредставлениеПериода(НачалоПериода, КонецПериода, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);*/
				}
			}
		}

		public object ПолучитьОтборИзФормы(/*ОтчетОбъект, ФормаОтчета, Элемент*/)
		{
			/*Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);*/
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			if(true/*ТипЗнч(Элемент) <> Тип("Строка") и ТипЗнч(Элемент) <> Тип("ПолеКомпоновкиДанных")*/)
			{
				if(true/*Лев(Элемент.Имя, 17) <> "ДинамическийОтбор"*/)
				{
				}
				/*Индекс = Число(Сред(Элемент.Имя, 18, 1));*/
				/*СтрокаОтбора = Параметры.Отборы[Индекс];*/
			}
			if(true/*СтрокаОтбора = Неопределено*/)
			{
			}
			/*Значение = Неопределено;*/
			/*ВидСравненияОтбора = Неопределено;*/
			/*Использование = Неопределено;*/
			if(true/*СтрокаОтбора.Расположение = "ГоризонтальнаяПанель"*/)
			{
				/*ЭлементУпраления = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ПолеВвода"];*/
				/*Значение         = ЭлементУпраления.Значение;*/
				/*Использование    = ЗначениеЗаполнено(ЭлементУпраления.Значение);*/
				/*ВидСравненияОтбора = СтрокаОтбора.ВидСравнения;*/
			}
			return null;
		}

		public object ПолучитьПараметрИзФормы(/*ОтчетОбъект, ФормаОтчета, Элемент*/)
		{
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			/*Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);*/
			/*СтрокаПараметра = Неопределено;*/
			/*Индекс = Неопределено;*/
			if(true/*НЕ Параметры.Свойство("Параметры")*/)
			{
			}
			if(true/*ТипЗнч(Элемент) <> Тип("Строка") и ТипЗнч(Элемент) <> Тип("ПараметрКомпоновкиДанных")*/)
			{
				if(true/*Лев(Элемент.Имя, 20) <> "ДинамическийПараметр"*/)
				{
				}
				/*Индекс = Число(Сред(Элемент.Имя, 21, 1));*/
				/*СтрокаПараметра = Параметры.Параметры[Индекс];*/
			}
			if(true/*СтрокаПараметра = Неопределено или Индекс = Неопределено*/)
			{
			}
			/*Значение = Неопределено;*/
			/*Использование = Неопределено;*/
			if(true/*СтрокаПараметра.ОтображатьКак = "ПолеВвода"*/)
			{
				/*Значение = ЭлементыФормы["ДинамическийПараметр" + Индекс + "ПолеВвода"].Значение;*/
			}
			/*Использование = ЗначениеЗаполнено(Значение);*/
			return null;
		}

		public object ПолучитьОписаниеЭлементаУправленияПоПолюОтбора(/*ОтчетОбъект, Поле*/)
		{
			if(true/*ТипЗнч(Поле) = Тип("ПолеКомпоновкиДанных")*/)
			{
				/*Поле = Строка(Поле);*/
			}
			/*Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);*/
			/*СтрокаОтбора = Параметры.Отборы.Найти(Поле, "Поле");*/
			if(true/*СтрокаОтбора = Неопределено*/)
			{
			}
			/*Индекс = Параметры.Отборы.Индекс(СтрокаОтбора);*/
			/*Структура = Новый Структура("Индекс, ВидОтбора",Индекс, СтрокаОтбора.ВидОтбора);*/
			return null;
		}

		public object ПолучитьОписаниеЭлементаУправленияПоПараметру(/*ОтчетОбъект, Параметр*/)
		{
			if(true/*ТипЗнч(Параметр) = Тип("ПараметрКомпоновкиДанных")*/)
			{
				/*Поле = Строка(Поле);*/
			}
			/*Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);*/
			/*СтрокаПараметра = Параметры.Параметры.Найти(Параметр, "Параметр");*/
			if(true/*СтрокаПараметра = Неопределено*/)
			{
			}
			/*Индекс = Параметры.Параметры.Индекс(СтрокаПараметра);*/
			if(true/*СтрокаПараметра.ОтображатьКак = "СписокЗначение" И СтрокаПараметра.ВыводитьНа = "ПраваяПанель"*/)
			{
				/*ЭлементУправления = "ТабличноеПоле";*/
			}
			/*НазваниеЭлементаУправления = "ДинамическийПараметр" + Индекс + ЭлементУправления;*/
			/*Структура = Новый Структура("Индекс, НазваниеЭлементаУпраления, ОтображатьКак", Индекс, НазваниеЭлементаУправления);*/
			return null;
		}

		public object ПолучитьОписаниеЭлементаУправленияПоГруппировке(/*ОтчетОбъект, ИмяГруппировки*/)
		{
			/*СписокЗначенийПолей = Новый СписокЗначений;*/
			if(true/*ИмяГруппировки = Неопределено*/)
			{
			}
			/*Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);*/
			/*СтрокаГруппировки = Параметры.Группировки.Найти(ИмяГруппировки, "Группировка");*/
			/*ЭлементыСтруктурыОтчета = ПолучитьЭлементыСтруктуры(ОтчетОбъект.КомпоновщикНастроек);*/
			/*ПервыйЭлемент = Неопределено;*/
			if(true/*ПервыйЭлемент = Неопределено*/)
			{
			}
			/*Индекс = Параметры.Группировки.Индекс(СтрокаГруппировки);*/
			/*СтруктураЭлемента = Новый Структура("Индекс, 
		|СтрокаГруппировки, 
		|НазванияЭлементаУправления, 
		|НазваниеЭлементаУправленияСтрок, 
		|НазваниеЭлементаУправленияКолонок,
		|Диаграмма", Индекс, СтрокаГруппировки, Неопределено, Неопределено, Неопределено, ложь);*/
			if(true/*ТипЗнч(ПервыйЭлемент) = Тип("ГруппировкаКомпоновкиДанных") 
			или ТипЗнч(ПервыйЭлемент) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
			или ТипЗнч(ПервыйЭлемент) = Тип("ГруппировкаДиаграммыКомпоновкиДанных")*/)
			{
				/*СтруктураЭлемента.НазванияЭлементаУправления = "ДинамическаяГруппировка" + Индекс + "ТабличноеПоле";*/
			}
			return null;
		}

		public void ЗагрузитьСписокВТабличноеПоле(/*ОтчетОбъект, ЭлементыФормы, Элемент*/)
		{
			/*Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);*/
			/*Индекс = Число(Сред(Элемент.Имя, 18, 1));*/
			/*СтрокаОтбора = Параметры.Отборы[Индекс];*/
			/*ЭлементТабличноеПоле = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ТабличноеПоле"];*/
			/*Отказ = Ложь;*/
			/*Значение = ВосстановитьЗначение("ДинамическиеОтборы_СохраненныеСписки");*/
			if(true/*Значение = Неопределено*/)
			{
				/*Отказ = Истина;*/
			}
			if(true/*Не Отказ*/)
			{
				/*Список = Значение[СтрокаОтбора.Поле];*/
				if(true/*Список = Неопределено ИЛИ Список.Количество() = 0*/)
				{
					/*Отказ = Истина;*/
				}
			}
			if(true/*Отказ*/)
			{
				/*Вопрос("Сохраненные списки отсутствуют", РежимДиалогаВопрос.ОК, , , "Загрузка списка");*/
			}
			/*ФормаРаботыСоСпискомЗначений = ПолучитьОбщуюФорму("ФормаРаботыСоСпискомЗначений");*/
			/*ФормаРаботыСоСпискомЗначений.СписокЗначений = Список;*/
			/*ЭлементСписка = ФормаРаботыСоСпискомЗначений.ОткрытьМодально();*/
			if(true/*ЭлементСписка <> Неопределено*/)
			{
				/*ЭлементТабличноеПоле.Значение.Очистить();*/
			}
			/*Список = ФормаРаботыСоСпискомЗначений.СписокЗначений;*/
			/*Значение[СтрокаОтбора.Поле] = Список;*/
			/*СохранитьЗначение("ДинамическиеОтборы_СохраненныеСписки", Значение);*/
			/*ОбновитьИзмененияТабличногоПоля(ЭлементыФормы, Элемент);*/
		}

		public void СохранитьСписокВТабличномПоле(/*ОтчетОбъект, ЭлементыФормы, Элемент*/)
		{
			/*Параметры = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);*/
			/*Индекс = Число(Сред(Элемент.Имя, 18, 1));*/
			/*СтрокаОтбора = Параметры.Отборы[Индекс];*/
			/*ЭлементТабличноеПоле = ЭлементыФормы["ДинамическийОтбор" + Индекс + "ТабличноеПоле"];*/
			if(true/*ЭлементТабличноеПоле.Значение.Количество() = 0*/)
			{
				/*Вопрос("Список пуст", РежимДиалогаВопрос.ОК);*/
			}
			/*ЗначениеСписка = Новый СписокЗначений;*/
			/*ЗначениеСписка.ЗагрузитьЗначения(ЭлементТабличноеПоле.Значение.ВыгрузитьКолонку("Значение"));*/
			/*НазваниеСписка = Строка(ЗначениеСписка);*/
			/*Результат = ВвестиЗначение(НазваниеСписка, "Введите название сохраняемого списка");*/
			if(true/*Результат = Ложь*/)
			{
			}
			/*Значение = ВосстановитьЗначение("ДинамическиеОтборы_СохраненныеСписки");*/
			if(true/*Значение = Неопределено*/)
			{
				/*Значение = Новый Соответствие;*/
			}
			/*НовыйСписок = Значение[СтрокаОтбора.Поле];*/
			if(true/*НовыйСписок = Неопределено*/)
			{
				/*НовыйСписок = Новый СписокЗначений;*/
			}
			/*НовыйСписок.Добавить(ЗначениеСписка, НазваниеСписка);*/
			/*Значение[СтрокаОтбора.Поле] = НовыйСписок;*/
			/*СохранитьЗначение("ДинамическиеОтборы_СохраненныеСписки", Значение);*/
		}

		public void ОбработкаВыбораФормыОтчета(/*ОтчетОбъект, ФормаОтчета, ЗначениеВыбора, Источник*/)
		{
			if(true/*ТипЗнч(ЗначениеВыбора) = Тип("СхемаКомпоновкиДанных")*/)
			{
				if(true/*Не ЗаписьОтчетаДоступна(ОтчетОбъект)*/)
				{
					/*Предупреждение("Право на изменение отчета имеет только владелец");*/
				}
				/*// Запишем схему компоновки в реквизит
*/
				/*ОтчетОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(ЗначениеВыбора);*/
				/*ИнициализироватьКомпоновщикНастроек(ОтчетОбъект, ЗначениеВыбора);*/
				/*ФормаОтчета.КомпоновщикНастроекПользователя.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ЗначениеВыбора));*/
				/*ОтчетОбъект.ПрименитьНастройку();*/
				/*ОбработкаФормыПослеПримененияНастройки(ОтчетОбъект, ФормаОтчета, Истина);*/
				/*ФормаОтчета.Модифицированность = Истина;*/
			}
		}

		public void ОбработкаНачалаВыбораОтчета(/*ОтчетОбъект, Элемент, СтандартнаяОбработка*/)
		{
			/*СписокОтчетов = ПолучитьСписокТиповыхОтчетов();*/
			/*ВыбранныйЭлемент = СписокОтчетов.ВыбратьЭлемент("Выберете отчет");*/
			if(true/*ВыбранныйЭлемент <> Неопределено*/)
			{
				/*Элемент.Значение = ВыбранныйЭлемент.Значение;*/
			}
		}

		public void ПриНажатииКнопкиВверхВниз(/*ФормаОтчета, ОтчетОбъект, Кнопка*/)
		{
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			/*Индекс = Число(Сред(Кнопка.Имя, 24, 1));*/
			/*Направление = ?(Найти(Кнопка.Имя,"Вверх") <> 0, -1, 1);*/
			if(true/*Найти(Кнопка.Имя,"Строк") <> 0*/)
			{
				/*ТабличноеПоле = ЭлементыФормы.Найти("ДинамическаяГруппировка" + Индекс + "ТабличноеПолеСтрок");*/
			}
			if(true/*ТабличноеПоле <> Неопределено и ТабличноеПоле.ТекущаяСтрока <> Неопределено*/)
			{
				/*ТаблицаЗначений = ТабличноеПоле.Значение;*/
				if(true/*Направление + ТаблицаЗначений.Индекс(ТабличноеПоле.ТекущаяСтрока) < ТаблицаЗначений.Количество()
				И Направление + ТаблицаЗначений.Индекс(ТабличноеПоле.ТекущаяСтрока) >= 0*/)
				{
					/*ТаблицаЗначений.Сдвинуть(ТабличноеПоле.ТекущаяСтрока, Направление);*/
				}
			}
		}

		public void СохранитьНастройкиФормыОтчета(/*ОтчетОбъект, ЭтаФорма*/)
		{
			/*НастройкиФормыОтчета = Новый Структура("ПанельПользователя, ПанельВариантов");*/
			if(true/*ЭтаФорма.ЭлементыФормы.Найти("СервиснаяПанель") <> Неопределено*/)
			{
				/*СервиснаяПанель                         = ЭтаФорма.ЭлементыФормы.СервиснаяПанель;*/
				/*НастройкиФормыОтчета.ПанельПользователя = СервиснаяПанель.Кнопки.Найти("ПанельПользователя") <> Неопределено И СервиснаяПанель.Кнопки.ПанельПользователя.Пометка;*/
				/*НастройкиФормыОтчета.ПанельВариантов    = СервиснаяПанель.Кнопки.Найти("ПанельВариантов") <> Неопределено И СервиснаяПанель.Кнопки.ПанельВариантов.Пометка;*/
			}
			/*НастраиваемыйОбъект = ПолучитьИдентификаторОбъекта(ОтчетОбъект);*/
			/*Пользователь = глЗначениеПеременной("глТекущийПользователь");*/
			if(true/*Найти(НастраиваемыйОбъект, "Отчет") = 0*/)
			{
			}
			/*ТЗ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СохраненныеНастройки.Ссылка
		|ИЗ
		|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|		ПО СохраненныеНастройкиПользователи.Ссылка = СохраненныеНастройки.Ссылка
		|ГДЕ
		|	СохраненныеНастройки.ТипНастройки = &ТипНастройки
		|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
		|	И СохраненныеНастройкиПользователи.Пользователь = &Пользователь";*/
			/*Запрос = Новый Запрос(ТЗ);*/
			/*Запрос.УстановитьПараметр("ТипНастройки", Перечисления.ТипыНастроек.ОбщиеНастройкиОтчетов);*/
			/*Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);*/
			/*Запрос.УстановитьПараметр("Пользователь", Пользователь);*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			if(true/*Выборка.Следующий()*/)
			{
				/*НастройкиФормы = Выборка.Ссылка.ПолучитьОбъект();*/
			}
			/*НастройкиФормы.ХранилищеНастроек = Новый ХранилищеЗначения(НастройкиФормыОтчета);*/
			/*НастройкиФормы.Записать();*/
			/*СохранитьПараметрыТабличногоДокумента(ЭтаФорма.ЭлементыФормы.Результат, ОтчетОбъект.СохраненнаяНастройка);*/
		}

		public void ВосстановитьНастройкиФормыОтчета(/*ЭтотОбъект, ЭтаФорма*/)
		{
			/*НастраиваемыйОбъект = ПолучитьИдентификаторОбъекта(ЭтотОбъект);*/
			/*Пользователь = глЗначениеПеременной("глТекущийПользователь");*/
			if(true/*Найти(НастраиваемыйОбъект, "Отчет") = 0*/)
			{
			}
			if(true/*ЭтаФорма.ЭтоОтработкаРасшифровки*/)
			{
			}
			/*ТЗ = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СохраненныеНастройки.Ссылка
		|ИЗ
		|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СохраненныеНастройки КАК СохраненныеНастройки
		|		ПО СохраненныеНастройкиПользователи.Ссылка = СохраненныеНастройки.Ссылка
		|ГДЕ
		|	СохраненныеНастройки.ТипНастройки = &ТипНастройки
		|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект
		|	И СохраненныеНастройкиПользователи.Пользователь = &Пользователь";*/
			/*Запрос = Новый Запрос(ТЗ);*/
			/*Запрос.УстановитьПараметр("ТипНастройки", Перечисления.ТипыНастроек.ОбщиеНастройкиОтчетов);*/
			/*Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);*/
			/*Запрос.УстановитьПараметр("Пользователь", Пользователь);*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			if(true/*Выборка.Следующий()*/)
			{
				/*НастройкиФормы = Выборка.Ссылка.ПолучитьОбъект();*/
				/*НастройкиФормыОтчета = НастройкиФормы.ХранилищеНастроек.Получить();*/
				if(true/*НастройкиФормыОтчета <> Неопределено*/)
				{
					if(true/*ЭтаФорма.ЭлементыФормы.Найти("СервиснаяПанель") <> Неопределено*/)
					{
						/*СервиснаяПанель = ЭтаФорма.ЭлементыФормы.СервиснаяПанель;*/
						if(true/*СервиснаяПанель.Кнопки.Найти("ПанельПользователя") <> Неопределено*/)
						{
							/*СервиснаяПанель.Кнопки.ПанельПользователя.Пометка = НастройкиФормыОтчета.ПанельПользователя;*/
						}
						if(true/*СервиснаяПанель.Кнопки.Найти("ПанельВариантов") <> Неопределено*/)
						{
							/*СервиснаяПанель.Кнопки.ПанельВариантов.Пометка = НастройкиФормыОтчета.ПанельВариантов;*/
						}
					}
				}
			}
		}
		// Возвращает картинку представления элемента отчета

		public object ПолучитьКартинкуПредставленияЭлементаОтчета(/*ПредставлениеЭлементаОтчета*/)
		{
			if(true/*ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Таблица*/)
			{
			}
			return null;
		}
		// Открывает форму настройки периода

		public object НастроитьПериод(/*НастройкаПериода, НачалоПериода, КонецПериода*/)
		{
			/*НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;*/
			/*НастройкаПериода.УстановитьПериод(НачалоПериода, ?(КонецПериода='0001-01-01', КонецПериода, КонецДня(КонецПериода)));*/
			/*НастройкаПериода.РедактироватьКакИнтервал = ложь;*/
			/*НастройкаПериода.РедактироватьКакПериод = Истина;*/
			if(true/*НастройкаПериода.Редактировать()*/)
			{
				/*НачалоПериода = НастройкаПериода.ПолучитьДатуНачала();*/
				/*КонецПериода = НастройкаПериода.ПолучитьДатуОкончания();*/
			}
			return null;
		}

		public object ПолучитьПоследнийИспользуемыйВариант(/*Ссылка*/)
		{
			/*Значение = ВосстановитьЗначение("ПоследниеИспользованныеНастройкиПользователя");*/
			if(true/*Значение = Неопределено ИЛИ Значение[Ссылка] = Неопределено*/)
			{
			}
			return null;
		}

		public void СохранитьПоследнююИспользуемуюНастройку(/*ОтчетОбъект*/)
		{
			/*Значение = ВосстановитьЗначение("ПоследниеИспользованныеНастройкиПользователя");*/
			if(true/*Значение = Неопределено ИЛИ ТипЗнч(Значение) <> Тип("Соответствие")*/)
			{
				/*Значение = Новый Соответствие;*/
			}
			/*Значение[ПолучитьИдентификаторОбъекта(ОтчетОбъект)] = ОтчетОбъект.СохраненнаяНастройка;*/
			/*СохранитьЗначение("ПоследниеИспользованныеНастройкиПользователя", Значение);*/
		}

		public void ПроверитьЗначенияПараметров(/*ЗначенияНастроек, ПараметрыПанели, Отказ*/)
		{
			/*Отказ = ложь;*/
			if(true/*ЗначенияНастроек.Свойство("ДинамическиеПараметры") И ПараметрыПанели.Свойство("Параметры")*/)
			{
				if(true/*ПараметрыПанели.Параметры.Колонки.Найти("Заполнено") <> Неопределено*/)
				{
					/*СтрокиПарамтеровДляПроверки = ПараметрыПанели.Параметры.НайтиСтроки(Новый Структура("Заполнено", истина));*/
					if(true/*СтрокиПарамтеровДляПроверки.Количество() > 0*/)
					{
						/*СтрокаПредупреждения = "Не заполнен(а)";*/
						if(true/*Отказ*/)
						{
							/*СтрокаПредупреждения = СтрокаПредупреждения + "!";*/
							/*Предупреждение(СтрокаПредупреждения);*/
						}
					}
				}
			}
		}

		public object ПолучитьЗначенияНастроекПанелиПользователя(/*ОтчетОбъект, ФормаОтчета*/)
		{
			/*ПараметрыИсполненияОтчета = Неопределено;*/
			/*ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			/*ЭлементыФормы = ФормаОтчета.ЭлементыФормы;*/
			/*ЗначенияНастроек = Новый Структура;*/
			if(true/*ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Найти("Заголовок") <> Неопределено*/)
			{
				/*Пометка = ФормаОтчета.ЭлементыФормы.КоманднаяПанельДействияСОтчетом.Кнопки.Заголовок.Пометка;*/
			}
			/*ЗначенияНастроек.Вставить("ВыводитьЗаголовокОтчета", Пометка);*/
			/*ЗначенияНастроек.Вставить("ФормироватьПриОткрытии", Ложь);*/
			/*//ДинамическиеОтборы
*/
			/*ЗначенияНастроек.Вставить("ДинамическиеОтборы", ПолучитьСтруктуруДинамическихОтборов(ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект), ЭлементыФормы));*/
			/*ЗначенияНастроек.Вставить("ДинамическиеПараметры", ПолучитьСтруктуруДинамическихПараметров(ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект), ЭлементыФормы));*/
			/*ЗначенияНастроек.Вставить("ДинамическиеГруппировки", ПолучитьСтруктуруДинамическихГруппировок(ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект), ЭлементыФормы));*/
			/*ЗначенияНастроек.Вставить("НастройкиКомпоновщика", ФормаОтчета.КомпоновщикНастроекПользователя.ПолучитьНастройки());*/
			/*ДополнительныеНастройкиОтчета = Новый Массив;*/
			/*ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			if(true/*ПараметрыИсполненияОтчета.Свойство("ДополнительныеНастройкиОтчета") И ПараметрыИсполненияОтчета.ДополнительныеНастройкиОтчета*/)
			{
				/*ДополнительныеНастройкиОтчета = ОтчетОбъект.ПолучитьДополнительныеНастройкиОтчета();*/
			}
			/*// Запомним видимость страниц компоновки чтобы при загрузке значений знать,
*/
			/*// брать из значений по умолчанию или из запомненных значений
*/
			/*ВидимостьСтраниц = Новый Соответствие;*/
			/*ВидимостьСтраниц.Вставить("Параметры", ЭлементыФормы.ПанельЗакладок.Страницы.Параметры.Видимость);*/
			/*ВидимостьСтраниц.Вставить("Отбор", ЭлементыФормы.ПанельЗакладок.Страницы.Отбор.Видимость);*/
			/*ВидимостьСтраниц.Вставить("Порядок", ЭлементыФормы.ПанельЗакладок.Страницы.Порядок.Видимость);*/
			if(true/*ЭлементыФормы.ПанельЗакладок.Страницы.Найти("Показатели") <> Неопределено*/)
			{
				/*ВидимостьСтраниц.Вставить("Показатели", ЭлементыФормы.ПанельЗакладок.Страницы.Показатели.Видимость);*/
				/*ЗначенияНастроек.Вставить("Показатели", ПолучитьСтруктуруПоказателей(ЭлементыФормы));*/
			}
			/*ЗначенияНастроек.Вставить("ВидимостьСтраниц", ВидимостьСтраниц);*/
			/*// Стандартный период
*/
			/*ЗначенияНастроек.Вставить("СтандартныйПериод", ФормаОтчета.СтандартныйПериод);*/
			/*// Стандартная дата начала
*/
			/*ЗначенияНастроек.Вставить("СтандартнаяДатаНачала", ФормаОтчета.СтандартнаяДатаНачала);*/
			/*ТиповыеОтчетыПереопределяемый.ДополнитьЗначенияНастроекПанелиПользователя(ЗначенияНастроек, ОтчетОбъект, ФормаОтчета);*/
			if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ПриПолучениеНастроекПользователя") И ПараметрыИсполненияОтчета.ПриПолучениеНастроекПользователя*/)
			{
				/*ФормаОтчета.ПриПолучениеНастроекПользователя(ЗначенияНастроек);*/
			}
			return null;
		}

		public object ДобавитьРодителей(/*ЭлементРасшифровки, ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы = Ложь*/)
		{
			if(true/*ТипЗнч(ЭлементРасшифровки) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля")*/)
			{
			}
			return null;
		}
		// Возвращает массив, по которому следует расшифровать отчет

		public object ПолучитьМассивПолейРасшифровки(/*Расшифровка, ДанныеРасшифровки, ТекущийОтчет = Неопределено, ВключатьРесурсы = Ложь*/)
		{
			/*МассивПолейРасшифровки = Новый Массив;*/
			if(true/*ТипЗнч(Расшифровка) <> Тип("ИдентификаторРасшифровкиКомпоновкиДанных") 
		И ТипЗнч(Расшифровка) <> Тип("ДанныеРасшифровкиКомпоновкиДанных")*/)
			{
			}
			if(true/*ТекущийОтчет = Неопределено*/)
			{
				/*ТекущийОтчет = ДанныеРасшифровки;*/
			}
			/*// Добавим поля родительских группировок
*/
			/*ДобавитьРодителей(ДанныеРасшифровки.Элементы[Расшифровка], ТекущийОтчет, МассивПолейРасшифровки, ВключатьРесурсы);*/
			/*Количество = МассивПолейРасшифровки.Количество();*/
			/*// Добавим отбор, установленный в отчете
*/
			return null;
		}
		// Копирует настройки компоновки данных из одного компоновщика настроек в другой

		public void СкопироватьНастройкиКомпоновкиДанных(/*НастройкиПриемник, НастройкиИсточник*/)
		{
			if(true/*НастройкиИсточник = Неопределено*/)
			{
			}
			if(true/*ТипЗнч(НастройкиПриемник) = Тип("НастройкиКомпоновкиДанных")*/)
			{
			}
			if(true/*ТипЗнч(НастройкиИсточник) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")*/)
			{
				/*ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);*/
				/*СкопироватьНастройкиКомпоновкиДанных(НастройкиПриемник.Настройки, НастройкиИсточник.Настройки);*/
			}
			/*// Копирование настроек
*/
			if(true/*ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных")*/)
			{
				/*ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыДанных, НастройкиИсточник.ПараметрыДанных);*/
				/*СкопироватьЭлементы(НастройкиПриемник.ПользовательскиеПоля, НастройкиИсточник.ПользовательскиеПоля);*/
				/*СкопироватьЭлементы(НастройкиПриемник.Отбор,         НастройкиИсточник.Отбор);*/
				/*СкопироватьЭлементы(НастройкиПриемник.Порядок,       НастройкиИсточник.Порядок);*/
			}
			if(true/*ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных")*/)
			{
				/*СкопироватьЭлементы(НастройкиПриемник.ПоляГруппировки, НастройкиИсточник.ПоляГруппировки);*/
				/*СкопироватьЭлементы(НастройкиПриемник.Отбор,           НастройкиИсточник.Отбор);*/
				/*СкопироватьЭлементы(НастройкиПриемник.Порядок,         НастройкиИсточник.Порядок);*/
				/*ЗаполнитьЗначенияСвойств(НастройкиПриемник, НастройкиИсточник);*/
			}
			/*СкопироватьЭлементы(НастройкиПриемник.Выбор,              НастройкиИсточник.Выбор);*/
			/*СкопироватьЭлементы(НастройкиПриемник.УсловноеОформление, НастройкиИсточник.УсловноеОформление);*/
			/*ЗаполнитьЭлементы(НастройкиПриемник.ПараметрыВывода,      НастройкиИсточник.ПараметрыВывода);*/
			/*// Копирование структуры
*/
			if(true/*ТипЗнч(НастройкиИсточник) = Тип("НастройкиКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаКомпоновкиДанных")*/)
			{
			}
			if(true/*ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(НастройкиИсточник) = Тип("ГруппировкаДиаграммыКомпоновкиДанных")*/)
			{
			}
			if(true/*ТипЗнч(НастройкиИсточник) = Тип("ТаблицаКомпоновкиДанных")*/)
			{
			}
			if(true/*ТипЗнч(НастройкиИсточник) = Тип("ДиаграммаКомпоновкиДанных")*/)
			{
			}
		}
		// Заменяет цвета в диаграмме

		public void ЗаменитьЦветаВДиаграмме(/*Диаграмма, ТаблицаЦветовСерий*/)
		{
			/*Серии = Диаграмма.Серии;*/
		}
		// Удаляет недоступные элементы отбора из компоновщика

		public void УдалитьНедоступныеПоляИзОтбора(/*КомпоновщикНастроек*/)
		{
			/*Количество = КомпоновщикНастроек.Настройки.Отбор.Элементы.Количество();*/
		}
		// Возвращает компоновщик настроек по схеме компоновки и настройкам компоновщика

		public object ПолучитьКомпоновщикПоСхемеИНастройкам(/*Схема, Настройки = Неопределено*/)
		{
			/*КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;*/
			/*КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));*/
			if(true/*Настройки <> Неопределено*/)
			{
				/*КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);*/
			}
			return null;
		}
		// Добавляет в группировку автовыбранное поле

		public object ДобавитьАвтоВыбранноеПоле(/*Структура*/)
		{
			/*ВыбранноеПоле = Структура.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));*/
			return null;
		}
		// Добавляет в группировку автоэлемент порядка

		public void ДобавитьАвтоЭлементПорядка(/*Строка*/)
		{
			/*ПолеПолеПорядок = Строка.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));*/
		}
		// Возвращает представление по типу элемента структуры

		public object ПолучитьПредставлениеПоЭлементуСтруктуры(/*ЭлементСтруктуры*/)
		{
			if(true/*ТипЗнч(ЭлементСтруктуры) = Тип("ГруппировкаКомпоновкиДанных")*/)
			{
			}
			return null;
		}
		// Возвращает тип элемента структуры по представлению

		public object ПолучитьТипЭлементаПоПредставлению(/*Представление*/)
		{
			if(true/*Представление = Перечисления.ПредставленияЭлементовОтчетов.Таблица*/)
			{
			}
			return null;
		}
		/////////////////////////////////////////////////////////////////////////////////
		// ОбЩИЕ ПРОЦЕДУРЫ ОТЧЕТОВ
		// Выводит заголовок типового отчета в табличный документ

		public void ВыводЗаголовкаТиповогоОтчета(/*ОтчетОбъект, Результат, ВыводВФормуОтчета = Истина*/)
		{
			/*ТипРезультата = ТипЗнч(Результат);*/
			if(true/*ТипРезультата <> Тип("ТабличныйДокумент") 
		И ТипРезультата <> Тип("ПолеТабличногоДокумента")*/)
			{
			}
			/*ПараметрыИсполненияОтчета = Неопределено;*/
			/*ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			if(true/*ЭтоСтараяВерсияОтчета(ОтчетОбъект)*/)
			{
				/*ЗначениеПараметра = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("TitleOutput"));*/
				/*ВыводитьЗаголовок = (ЗначениеПараметра.Значение = ТипВыводаТекстаКомпоновкиДанных.Выводить И ЗначениеПараметра.Использование);*/
				if(true/*Не ВыводВФормуОтчета И Не ВыводитьЗаголовок*/)
				{
				}
				/*МакетЗаголовок = ПолучитьОбщийМакет("ЗаголовокТиповогоОтчета");*/
				/*ОбластьЗаголовок = МакетЗаголовок.ПолучитьОбласть("Заголовок");*/
				/*ЗаголовокОтчета = ОтчетОбъект.КомпоновщикНастроек.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Title")).Значение;*/
				/*ОбластьЗаголовок.Параметры.ЗаголовокОтчета = ЗаголовокОтчета;*/
				/*ОбластьЗаголовок.Параметры.ОписаниеНастроекОтчета = ПолучитьОписаниеНастроекОтчета(ОтчетОбъект.КомпоновщикНастроек);*/
				/*Результат.Вывести(ОбластьЗаголовок);*/
			}
		}

		public object ПолучитьОписаниеНастроекОтчета(/*КомпоновщикНастроек*/)
		{
			if(true/*КомпоновщикНастроек.Настройки.Структура.Количество() = 0*/)
			{
			}
			/*// Период
*/
			/*ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));*/
			/*ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));*/
			/*ЗначениеПараметраКонецПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));*/
			if(true/*ЗначениеПараметраНачалоПериода <> Неопределено 
		И ЗначениеПараметраКонецПериода <> Неопределено*/)
			{
				/*НачалоПериода = ?(ТипЗнч(ЗначениеПараметраНачалоПериода.Значение) = Тип("СтандартнаяДатаНачала") или ТипЗнч(ЗначениеПараметраНачалоПериода.Значение) = Тип("Дата"), Дата(ЗначениеПараметраНачалоПериода.Значение), '00010101');*/
				/*КонецПериода = ?(ТипЗнч(ЗначениеПараметраКонецПериода.Значение) = Тип("СтандартнаяДатаНачала") или ТипЗнч(ЗначениеПараметраКонецПериода.Значение) = Тип("Дата"), Дата(ЗначениеПараметраКонецПериода.Значение), '00010101');*/
				if(true/*НачалоПериода = '00010101' И КонецПериода = '00010101'*/)
				{
					/*ОписаниеПериода = НСтр("ru='Период не установлен'");*/
				}
			}
			if(true/*Не ПустаяСтрока(ОПисаниеПериода)*/)
			{
				/*ОписаниеПериода = "Период: " + ОписаниеПериода + Символы.ПС;*/
			}
			/*ЭлементОтчета = КомпоновщикНастроек.Настройки.Структура[0];*/
			/*ПредставлениеЭлементаОтчета = ПолучитьПредставлениеПоЭлементуСтруктуры(ЭлементОтчета);*/
			if(true/*ПредставлениеЭлементаОтчета = Перечисления.ПредставленияЭлементовОтчетов.Таблица*/)
			{
				/*Строки = ПолучитьМассивГруппировок(ЭлементОтчета, КомпоновщикНастроек);*/
				/*ТипСтрок = "Группировки строк";*/
			}
			/*Показатели = ПолучитьПоказатели(КомпоновщикНастроек);*/
			/*ДополнительныеПоля = ПолучитьДополнительныеПоля(КомпоновщикНастроек);*/
			/*СтрокаОтбор = Строка(КомпоновщикНастроек.Настройки.Отбор);*/
			/*ОписаниеНастроекОтчета = 
	ОписаниеПериода +
	СформироватьСтрокуПолей(ТипСтрок, Строки) + 
	СформироватьСтрокуПолей(ТипКолонок, Колонки) + 
	СформироватьСтрокуПолей("Дополнительные поля", ДополнительныеПоля) +
	СформироватьСтрокуПолей("Показатели", Показатели) +
	?(ПустаяСтрока(СтрокаОтбор) , "", "Отбор: " + СтрокаОтбор);*/
			return null;
		}

		public object СформироватьСтрокуПолей(/*ТипПолей, МассивПолей*/)
		{
			if(true/*МассивПолей = Неопределено ИЛИ МассивПолей.Количество() = 0*/)
			{
			}
			/*СтрокаПолей = ТипПолей + ": ";*/
			/*СтрокаПолей = СтрокаПолей + Символы.ПС;*/
			return null;
		}

		public object ПолучитьПоказатели(/*КомпоновщикНастроек*/)
		{
			/*Элементы = Новый Массив;*/
			/*ВыбранныеПоля = ПолучитьВыбранныеПоля(КомпоновщикНастроек);*/
			return null;
		}

		public object ПолучитьДополнительныеПоля(/*КомпоновщикНастроек*/)
		{
			/*Элементы = Новый Массив;*/
			/*ВыбранныеПоля = ПолучитьВыбранныеПоля(КомпоновщикНастроек);*/
			return null;
		}

		public object ПолучитьДоступноеПоле(/*Знач Поле, ОбластьПоиска*/)
		{
			return null;
		}
		// Возвращает массив группировок компоновщика настроек

		public object ПолучитьМассивГруппировок(/*ЭлементСтруктуры, КомпоновщикНастроек, МассивГруппировок = Неопределено*/)
		{
			if(true/*МассивГруппировок = Неопределено*/)
			{
				/*МассивГруппировок = Новый Массив;*/
			}
			if(true/*ТипЗнч(ЭлементСтруктуры) <> Тип("ГруппировкаКомпоновкиДанных") 
		и ТипЗнч(ЭлементСтруктуры) <> Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		и ТипЗнч(ЭлементСтруктуры) <> Тип("ГруппировкаДиаграммыКомпоновкиДанных")*/)
			{
			}
			if(true/*ЭлементСтруктуры.Структура.Количество() = 0*/)
			{
			}
			return null;
		}
		// Выводит типовой отчет в табличный документ

		public void ВывестиТиповойОтчет(/*ОтчетОбъект, Результат, ДанныеРасшифровки, ВыводВФормуОтчета = Истина, ВнешниеНаборыДанных = Неопределено, ВыводитьШапкуОтчетаНаВсехСтраницах = истина*/)
		{
			/*ПараметрыИсполненияОтчета = Неопределено;*/
			/*ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			/*ОтчетОбъект.КомпоновщикНастроек.Восстановить();*/
			/*Схема = ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект);*/
			if(true/*ВыводВФормуОтчета*/)
			{
				/*Попытка
			УниверсальныйМеханизмФормированияОтчета(ОтчетОбъект, Схема, ПараметрыИсполненияОтчета, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, ВыводитьШапкуОтчетаНаВсехСтраницах);*/
				/*Исключение
			#Если ТолстыйКлиентОбычноеПриложение тогда
				Предупреждение("Отчет не сформирован!" + Символы.ПС + ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(ИнформацияОбОшибке()));*/
				/*#КонецЕсли
		КонецПопытки;*/
			}
		}

		public void УниверсальныйМеханизмФормированияОтчета(/*ОтчетОбъект, Схема, ПараметрыИсполненияОтчета, Результат, ДанныеРасшифровки, ВыводВФормуОтчета, ВнешниеНаборыДанных, ВыводитьШапкуОтчетаНаВсехСтраницах*/)
		{
			/*//Сгенерируем макет компоновки данных при помощи компоновщика макета
*/
			/*КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;*/
			/*ТипРезультата = ТипЗнч(Результат);*/
			if(true/*ТипРезультата = Тип("ТабличныйДокумент") 
		ИЛИ ТипРезультата = Тип("ПолеТабличногоДокумента")*/)
			{
				/*ВыводВТабличныйДокумент = Истина;*/
			}
			/*//В качестве схемы компоновки будет выступать схема самого отчета
*/
			/*//В качестве настроек отчета - текущие настройки отчета
*/
			/*//Данные расшифровки будем помещать в ДанныеРасшифровки
*/
			if(true/*ВыводВФормуОтчета*/)
			{
				/*МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, ОтчетОбъект.КомпоновщикНастроек.Настройки, ДанныеРасшифровки);*/
				/*ДополнитьМакетыМакетаКомпоновкиРасшифровкойРесурсов(МакетКомпоновки, ОтчетОбъект.КомпоновщикНастроек);*/
				/*//Создадим и инициализируем процессор компоновки
*/
				/*ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;*/
				if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("ИспользоватьСобытияПриФормированииОтчета") И ПараметрыИсполненияОтчета.ИспользоватьСобытияПриФормированииОтчета*/)
				{
					/*ОтчетОбъект.ПередВыводомОтчета(МакетКомпоновки, ПроцессорКомпоновки);*/
				}
				if(true/*ВнешниеНаборыДанных = Неопределено*/)
				{
					/*ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , ДанныеРасшифровки, Истина);*/
				}
			}
			/*//Создадим и инициализируем процессор вывода результата
*/
			if(true/*ВыводВТабличныйДокумент*/)
			{
				/*ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;*/
				/*ПроцессорВывода.УстановитьДокумент(Результат);*/
			}
			/*//Обозначим начало вывода
*/
			/*ПроцессорВывода.НачатьВывод();*/
			/*#Если ТолстыйКлиентОбычноеПриложение тогда
		Состояние(НСТР("ru='Если Вы хотите прервать вывод отчета, нажмите Ctrl+Break'"));*/
			/*#КонецЕсли
	
	ТаблицаЗафиксирована = Не ВыводВФормуОтчета;*/
			if(true/*ВыводВТабличныйДокумент*/)
			{
				/*Результат.ФиксацияСверху = 0;*/
			}
			/*//определим нужна ли фиксация в отчете. Если элементов структуры больше 2-х
*/
			/*КолВоВключеныхЭлементов = 0;*/
			/*//Основной цикл вывода отчета
*/
			while(true/*Истина*/)
			{
				/*#Если ТолстыйКлиентОбычноеПриложение тогда
			ОбработкаПрерыванияПользователя();*/
				/*//Получим следующий элемент результата компоновки
*/
				/*ЭлементРезультата = ПроцессорКомпоновки.Следующий();*/
				if(true/*ЭлементРезультата = Неопределено*/)
				{
					/*//Следующий элемент не получен - заканчиваем цикл вывода
*/
					/*Прервать;*/
				}
			}
			/*//Обозначем завершение вывода
*/
			/*ПроцессорВывода.ЗакончитьВывод();*/
		}

		public object ПолучитьОписаниеРодительскойПричиныИнформацииОбОшибке(/*ИнформацияОбОшибке*/)
		{
			while(true/*ИнформацияОбОшибке.Причина <> Неопределено*/)
			{
				/*ИнформацияОбОшибке = ИнформацияОбОшибке.Причина;*/
			}
			return null;
		}
		// Дорабатывает отчет перед выводом

		public void ДоработатьТиповойОтчетПередВыводом(/*ОтчетОбъект, КомпоновщикНастроек = Неопределено*/)
		{
			if(true/*КомпоновщикНастроек = Неопределено*/)
			{
				/*КомпоновщикНастроек = ОтчетОбъект.КомпоновщикНастроек;*/
			}
			/*// Отработка "Отрицательное красным"
*/
			if(true/*ОтчетОбъект.ОтрицательноеКрасным И Не ОтчетОбъект.РасширеннаяНастройка*/)
			{
				/*НовыйЭлемент = КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Добавить();*/
				/*// Настройка оформления
*/
				/*ЗначениеПараметра = НовыйЭлемент.Оформление.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("MarkNegatives"));*/
				/*ЗначениеПараметра.Использование = Истина;*/
				/*ЗначениеПараметра.Значение = Истина;*/
			}
			if(true/*Не ОтчетОбъект.РасширеннаяНастройка*/)
			{
				/*// Убрать вывод заголовка, т.к. он выводится нестандартно
*/
				/*УстановитьПараметрВывода(КомпоновщикНастроек, "TitleOutput", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);*/
			}
		}

		public void УстановитьГруппировку(/*КомпоновщикНастроек, ЗначенияНастроек*/)
		{
			/*МассивПервыхЭлементовСтруктуры = Новый Массив;*/
			/*НайтиПервыеЭлементыСтруктуры(ЗначенияНастроек.Значение.ИмяГруппировки, КомпоновщикНастроек.Настройки.Структура, МассивПервыхЭлементовСтруктуры);*/
		}

		public void ДобавитьГруппировкиПользователя(/*Структура, СписокГруппировки, Строки, МассивСохраненныхЭлементов = Неопределено*/)
		{
			/*Элемент = Неопределено;*/
			if(true/*ТипЗнч(Структура) = Тип("ТаблицаКомпоновкиДанных") ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных")*/)
			{
				/*ТипГруппировки = Тип("ГруппировкаТаблицыКомпоновкиДанных");*/
				if(true/*Строки*/)
				{
					/*Элемент = Структура.Строки;*/
				}
			}
			if(true/*МассивСохраненныхЭлементов <> Неопределено*/)
			{
			}
		}

		public void НайтиПервыеЭлементыСтруктуры(/*Имя, Структура, МассивГруппировок*/)
		{
		}

		public object ПоследниеЭлементыСтруктуры(/*ПервыйЭлементСтруктуры*/)
		{
			/*ЭлементСтруктурыНовый = ПервыйЭлементСтруктуры;*/
			/*Имя = ПервыйЭлементСтруктуры.Имя;*/
			while(true/*Имя = ЭлементСтруктурыНовый.Имя*/)
			{
				if(true/*ТипЗнч(ЭлементСтруктурыНовый) = Тип("ТаблицаКомпоновкиДанных") 
			ИЛИ ТипЗнч(ЭлементСтруктурыНовый) = Тип("ДиаграммаКомпоновкиДанных")*/)
				{
					/*Прервать;*/
				}
				if(true/*ЭлементСтруктурыНовый.Структура.Количество() = 0*/)
				{
					/*ЭлементСтруктурыНовый = Неопределено;*/
					/*Прервать;*/
				}
				/*ЭлементСтруктурыНовый = ЭлементСтруктурыНовый.Структура[0];*/
			}
			return null;
		}

		public void ОбновитьПоляВНастройкеПользователя(/*ВыбранныеПоляПользователя, ВыбранныеПоля*/)
		{
			if(true/*ВыбранныеПоляПользователя.Элементы.Количество() = 0*/)
			{
				/*СкопироватьЭлементы(ВыбранныеПоляПользователя, ВыбранныеПоля);*/
			}
		}

		public object ЭтоДетальнаяЗапись(/*ДанныеРасшифровки, Расшифровка*/)
		{
			/*ЭтоДетальнаяЗапись = Ложь;*/
			/*Элемент = ДанныеРасшифровки.Элементы[Расшифровка];*/
			if(true/*ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхПоля")*/)
			{
				/*Элементы = Элемент.ПолучитьРодителей();*/
				/*ПоляВРасшифровке  = Элемент.ПолучитьПоля();*/
				if(true/*Элементы.Количество() = 1*/)
				{
					/*Элемент = Элементы[0];*/
					if(true/*ТипЗнч(Элемент) = Тип("ЭлементРасшифровкиКомпоновкиДанныхГруппировка")*/)
					{
						/*ЭтоДетальнаяЗапись = Истина;*/
					}
				}
			}
			return null;
		}

		public object ЭтоВнешнийОбъект(/*ОтчетОбъект*/)
		{
			if(true/*Метаданные.НайтиПоПолномуИмени(ОтчетОбъект.Метаданные().ПолноеИмя()) = Неопределено*/)
			{
				/*ЭтоВнешнийОтчет = Истина;*/
			}
			return null;
		}

		public object ПолучитьСписокПолейКомпоновщикаНастроек(/*ОтчетОбъект, КомпоновщикНастроек*/)
		{
			/*СписокПолей = Новый СписокЗначений;*/
			/*СписокПолейИсключений = Новый СписокЗначений;*/
			if(true/*ЗначениеЗаполнено(ОтчетОбъект.СохраненнаяНастройка)*/)
			{
				if(true/*ТипЗнч(ОтчетОбъект.ПараметрыПанелиПользователя) = Тип("ХранилищеЗначения")*/)
				{
					/*НастройкиПанели = ОтчетОбъект.ПараметрыПанелиПользователя.Получить();*/
					if(true/*НастройкиПанели.Свойство("СписокИсключаемыхПолейРасшифровки")*/)
					{
						/*СписокПолейИсключений = НастройкиПанели.СписокИсключаемыхПолейРасшифровки;*/
					}
				}
			}
			/*ДобавитьПоля(КомпоновщикНастроек.Настройки.ДоступныеПоляГруппировок.Элементы, СписокПолей, СписокПолейИсключений);*/
			return null;
		}

		public void ДобавитьПоля(/*Элементы, СписокПолей, СписокПолейИсключений*/)
		{
		}

		public void УдалитьИспользованныеПоляРасшифровки(/*СписокПолейРасшифровки, МассивПолейРасшифровки*/)
		{
		}
		// На основании отбора настраивает расшифровываемый отчет

		public void НастроитьТиповойОтчет(/*ОтчетОбъект, Отбор, КомпоновщикОсновногоОтчета = Неопределено*/)
		{
			if(true/*ТипЗнч(Отбор) <> Тип("Массив")*/)
			{
			}
			/*// Настройка отбора
*/
			/*// Настройка параметров
*/
			if(true/*КомпоновщикОсновногоОтчета = Неопределено*/)
			{
			}
		}
		// Возвращает имя формы, с помощью которого следует редактировать пользовательское поле

		public object ПолучитьИмяФормыРедактированияПользовательскогоПоля(/*ПользовательскоеПоле*/)
		{
			if(true/*ТипЗнч(ПользовательскоеПоле) = Тип("ПользовательскоеПолеВыражениеКомпоновкиДанных")*/)
			{
				if(true/*ПолучитьВыражениеАгрегатаИтоговыхЗаписей(ПользовательскоеПоле) <> Неопределено*/)
				{
					/*ИмяФормы = "Форма" + "Формула";*/
				}
			}
			if(true/*ПользовательскоеПоле.Варианты.Элементы.Количество() > 0
		И ПолучитьПараметрИзСтроки(ПользовательскоеПоле.Варианты.Элементы[0].Значение) = "ДоработкаТаблицы"*/)
			{
				/*ИмяФормы = "Форма" + ПолучитьПараметрИзСтроки(ПользовательскоеПоле.Варианты.Элементы[0].Значение, 2);*/
			}
			if(true/*ПользовательскоеПоле.Варианты.Элементы.Количество() > 2
		И (ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Тренд"
		ИЛИ ПользовательскоеПоле.Варианты.Элементы[0].Значение = "1Состояние")*/)
			{
				/*ИмяФормы = "ФормаИнтервал";*/
			}
			return null;
		}

		public object ПолучитьВыражениеАгрегатаИтоговыхЗаписей(/*ПользовательскоеПоле*/)
		{
			/*ВыражениеДетальныхЗаписей = ПользовательскоеПоле.ПолучитьПредставлениеВыраженияДетальныхЗаписей();*/
			/*ВыражениеИтоговыхЗаписей = ПользовательскоеПоле.ПолучитьПредставлениеВыраженияИтоговыхЗаписей();*/
			/*ВыражениеАгрегата = СтрЗаменить(ВыражениеИтоговыхЗаписей, ВыражениеДетальныхЗаписей, "");*/
			/*ВыражениеАгрегата = СтрЗаменить(ВыражениеАгрегата, ")", "");*/
			if(true/*ВыражениеАгрегата = "Сумма("
		ИЛИ ВыражениеАгрегата = "Количество(Различные "
		ИЛИ ВыражениеАгрегата = "Количество("
		ИЛИ ВыражениеАгрегата = "Максимум("
		ИЛИ ВыражениеАгрегата = "Минимум("
		ИЛИ ВыражениеАгрегата = "Среднее("*/)
			{
			}
			return null;
		}

		public object ПолучитьПараметрИзСтроки(/*Знач Строка, НомерПараметра = 1*/)
		{
			return null;
		}
		// Возвращает список доступных для выбора ресурсов

		public object ПолучитьСписокДоступныхРесурсов(/*КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение = Истина, ВключаяПользовательскиеПоляВыбор = Истина*/)
		{
			/*СписокРесурсов = Новый СписокЗначений;*/
			/*ДобавитьРесурсы(СписокРесурсов, КомпоновщикНастроек.Настройки.ДоступныеПоляВыбора, КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение, ВключаяПользовательскиеПоляВыбор);*/
			return null;
		}

		public object ДобавитьРесурсы(/*СписокРесурсов, КоллекцияПолей, КомпоновщикНастроек, ВключаяПользовательскиеПоляВыражение, ВключаяПользовательскиеПоляВыбор*/)
		{
			return null;
		}
		// Возвращает доступное поле по полю компоновки

		public object ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(/*ПолеКомпоновкиДанных, ОбластьПоиска*/)
		{
			if(true/*ТипЗнч(ПолеКомпоновкиДанных) = Тип("Строка")*/)
			{
				/*ПолеПоиска = Новый ПолеКомпоновкиДанных(ПолеКомпоновкиДанных);*/
			}
			if(true/*ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")*/)
			{
			}
			return null;
		}

		public object ПолучитьДоступныйПараметрПоПараметруКомпоновкиДанных(/*ПарамтерКомпоновкиДанных, ОбластьПоиска*/)
		{
			if(true/*ТипЗнч(ПарамтерКомпоновкиДанных) = Тип("Строка")*/)
			{
				/*ПолеПоиска = Новый ПараметрКомпоновкиДанных(ПарамтерКомпоновкиДанных);*/
			}
			if(true/*ТипЗнч(ОбластьПоиска) = Тип("КомпоновщикНастроекКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("ДанныеРасшифровкиКомпоновкиДанных")
		ИЛИ ТипЗнч(ОбластьПоиска) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")*/)
			{
			}
			return null;
		}
		// Заполняет отбор построителя по отбору компоновщика

		public void ЗаполнитьОтборПоОтборуКомпоновщика(/*Отбор, ОтборКомпоновщика*/)
		{
			/*ЗаполнитьЗначенияСвойств(Отбор, ОтборКомпоновщика, "Использование, Представление");*/
			if(true/*ОтборКомпоновщика.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше*/)
			{
				/*Отбор.ВидСравнения = ВидСравнения.Больше;*/
			}
			/*Отбор.Значение = ОтборКомпоновщика.ПравоеЗначение;*/
		}
		// Возвращает список всех группировок компоновщика настроек

		public object ПолучитьЭлементыСтруктуры(/*ЭлементСтруктуры*/)
		{
			/*СписокПолей = Новый СписокЗначений;*/
			if(true/*ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных")*/)
			{
				/*Структура = ЭлементСтруктуры.Настройки.Структура;*/
			}
			/*ДобавитьЭлементСтруктуры(Структура, СписокПолей);*/
			return null;
		}

		public void ДобавитьЭлементСтруктуры(/*Структура, СписокПолей*/)
		{
		}
		// Возвращает список всех группировок компоновщика настроек

		public object ПолучитьГруппировки(/*ЭлементСтруктуры, ПоказыватьГруппировкиТаблиц = истина*/)
		{
			/*СписокПолей = Новый СписокЗначений;*/
			if(true/*ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных")*/)
			{
				/*Структура = ЭлементСтруктуры.Настройки.Структура;*/
				/*ДобавитьГруппировки(Структура, СписокПолей);*/
			}
			return null;
		}

		public void ДобавитьГруппировки(/*Структура, СписокПолей, ПоказыватьГруппировкиТаблиц = истина*/)
		{
		}
		// Возвращает массив полей группировок всех группировок компоновщика настроек

		public object ПолучитьМассивПолейГруппировки(/*КомпоновщикНастроек, БезПользовательскихПолей = Ложь*/)
		{
			/*МассивПолей = Новый Массив;*/
			/*Структура = КомпоновщикНастроек.Настройки.Структура;*/
			/*ДобавитьПоляГруппировкиВМассив(Структура, МассивПолей, БезПользовательскихПолей);*/
			return null;
		}

		public void ДобавитьПоляГруппировкиВМассив(/*Структура, МассивПолей, БезПользовательскихПолей*/)
		{
		}
		// Возвращает список полей группировок всех группировок компоновщика настроек

		public object ПолучитьПоляГруппировок(/*КомпоновщикНастроек, БезПользовательскихПолей = Ложь*/)
		{
			/*СписокПолей = Новый СписокЗначений;*/
			/*Структура = КомпоновщикНастроек.Настройки.Структура;*/
			/*ДобавитьПоляГруппировки(Структура, СписокПолей, БезПользовательскихПолей);*/
			return null;
		}

		public void ДобавитьПоляГруппировки(/*Структура, СписокПолей, БезПользовательскихПолей*/)
		{
		}
		// Возвращает группировку по полю группировки

		public object ПолучитьЭлементСтруктурыПоПолюГруппировки(/*ПолеГруппировки, КомпоновщикНастроек*/)
		{
			/*Структура = КомпоновщикНастроек.Настройки.Структура;*/
			return null;
		}

		public object НайтиЭлементСтруктурыПоПолюГруппировки(/*Структура, ПолеГруппировки*/)
		{
			return null;
		}
		// Возвращает пользовательское поле по полю компоновки данных

		public object НайтиПользовательскоеПоле(/*КомпоновщикНастроек, ПолеКомпоновкиДанных*/)
		{
			return null;
		}
		// Возвращает массив наборов данных - запрос в схеме компоновки данных

		public object ПолучитьНаборыДанныхЗапрос(/*СхемаКомпоновкиДанных, НаборыДанных = Неопределено, МассивНаборовДанных = Неопределено*/)
		{
			if(true/*МассивНаборовДанных = Неопределено*/)
			{
				/*МассивНаборовДанных = Новый Массив;*/
			}
			if(true/*НаборыДанных = Неопределено*/)
			{
				/*НаборыДанных = СхемаКомпоновкиДанных.НаборыДанных;*/
			}
			return null;
		}
		////////////////////////////////////////////////////////////
		// ФУНКЦИИ ДЛЯ ПРОГРАММНОЙ НАСТРОЙКИ КОМПОНОВЩИКА НАСТРОЕК
		// Устанавливает параметр данных компоновщика настроек

		public object УстановитьПараметр(/*КомпоновщикНастроекКоллекцияЗначений, ИмяПараметра, Значение, Использование = Истина*/)
		{
			if(true/*ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КомпоновщикНастроекКомпоновкиДанных")*/)
			{
				/*ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));*/
			}
			if(true/*ЗначениеПараметра = Неопределено*/)
			{
			}
			return null;
		}
		// Устанавливает параметр вывода компоновщика настроек

		public object УстановитьПараметрВывода(/*КомпоновщикНастроекГруппировка, ИмяПараметра, Значение, Использование = Истина*/)
		{
			if(true/*ТипЗнч(КомпоновщикНастроекГруппировка) = Тип("КомпоновщикНастроекКомпоновкиДанных")*/)
			{
				/*ЗначениеПараметра = КомпоновщикНастроекГруппировка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));*/
			}
			if(true/*ЗначениеПараметра = Неопределено*/)
			{
			}
			return null;
		}
		// Удаляет отбор из компоновщика настроек, если поле не указано, очищает отбор

		public object УдалитьОтбор(/*КомпоновщикНастроек, Знач Поле = Неопределено*/)
		{
			if(true/*Поле = Неопределено*/)
			{
				/*КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();*/
			}
			if(true/*ТипЗнч(Поле) = Тип("Строка")*/)
			{
				/*Поле = Новый ПолеКомпоновкиДанных(Поле);*/
			}
			/*ПолеУдалено = Ложь;*/
			/*Элементы = ПолучитьЭлементыОтбора(КомпоновщикНастроек);*/
			return null;
		}
		// Удаляет указанное выбранное поле из компоновщика настроек, если поле не указано - очищает все поля

		public object УдалитьВыбранноеПоле(/*ЭлементСтруктуры, Знач Поле = Неопределено*/)
		{
			if(true/*ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных")*/)
			{
				/*ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;*/
			}
			if(true/*Поле = Неопределено*/)
			{
				/*ВыбранныеПоля.Элементы.Очистить();*/
			}
			if(true/*ТипЗнч(Поле) = Тип("Строка")*/)
			{
				/*Поле = Новый ПолеКомпоновкиДанных(Поле);*/
			}
			/*ПолеУдалено = Ложь;*/
			/*Элементы = ПолучитьВыбранныеПоля(ВыбранныеПоля);*/
			return null;
		}
		// Функция удаляет из компоновщика настроек указанную в параметре группировку, если параметр не указан, удаляет все группировки

		public object УдалитьГруппировку(/*КомпоновщикНастроек, Знач Поле = Неопределено, Строки = Истина*/)
		{
			if(true/*КомпоновщикНастроек.Настройки.Структура.Количество() = 0*/)
			{
			}
			/*Элемент = КомпоновщикНастроек.Настройки.Структура[0];*/
			if(true/*ТипЗнч(Элемент) = Тип("ТаблицаКомпоновкиДанных")*/)
			{
				if(true/*Строки И Элемент.Строки.Количество() > 0*/)
				{
					/*Элемент = Элемент.Строки[0];*/
				}
			}
			if(true/*Поле = Неопределено*/)
			{
				/*КомпоновщикНастроек.Настройки.Структура.Очистить();*/
			}
			if(true/*ТипЗнч(Поле) = Тип("Строка")*/)
			{
				/*Поле = Новый ПолеКомпоновкиДанных(Поле);*/
			}
			while(true/*Истина*/)
			{
				if(true/*Элемент.ПоляГруппировки.Элементы.Количество() > 0 
			И Элемент.ПоляГруппировки.Элементы[0].Поле = Поле*/)
				{
					/*Элемент.Родитель.Структура.Очистить();*/
					/*Прервать;*/
				}
			}
			/*;;*/
			return null;
		}
		// Возвращает массив элементов отбора или групп элементов отбора

		public object ПолучитьЭлементыОтбора(/*КомпоновщикНастроек, ТолькоГруппы = Ложь*/)
		{
			/*МассивПолей = Новый Массив;*/
			/*ДобавитьЭлементыОтбораВМассив(КомпоновщикНастроек.Настройки.Отбор.Элементы, МассивПолей, ТолькоГруппы);*/
			return null;
		}

		public void ДобавитьЭлементыОтбораВМассив(/*Элементы, МассивПолей, ТолькоГруппы = Ложь*/)
		{
		}
		// Возвращает массив выбранных полей или групп выбранных полей

		public object ПолучитьВыбранныеПоля(/*ЭлементСтруктуры, ТолькоГруппы = Ложь*/)
		{
			if(true/*ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных") 
		ИЛИ ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")*/)
			{
				/*ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;*/
			}
			/*МассивПолей = Новый Массив;*/
			/*ДобавитьВыбранныеПоляВМассивДляПоказателей(ВыбранныеПоля.Элементы, МассивПолей, ТолькоГруппы);*/
			return null;
		}

		public void ДобавитьВыбранныеПоляВМассивДляПоказателей(/*ЭлементСтруктуры, МассивПолей, ТолькоГруппы = Ложь*/)
		{
			if(true/*ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных")*/)
			{
				/*ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;*/
			}
		}

		public void ДобавитьВыбранныеПоляВМассив(/*ЭлементСтруктуры, МассивПолей, ТолькоГруппы = Ложь*/)
		{
			if(true/*ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных")*/)
			{
				/*ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;*/
			}
		}
		// Функция проверяет, могут ли в отчете выводиться детальные поля

		public object ВСтруктуреМогутБытьДетальныеПоля(/*КомпоновщикНастроек*/)
		{
			/*ПоляГруппировки = ПолучитьМассивПолейГруппировки(КомпоновщикНастроек);*/
			/*ВыбранныеПоля = ПолучитьВыбранныеПоля(КомпоновщикНастроек);*/
			/*МогутБытьДетальныеПоля = Ложь;*/
			return null;
		}

		public object ПолеЯвляетсяРодителемДругого(/*КомпоновщикНастроек, Поле1, Поле2*/)
		{
			/*ДоступноеПоле1 = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Поле1, КомпоновщикНастроек);*/
			/*ДоступноеПоле2 = ПолучитьДоступноеПолеПоПолюКомпоновкиДанных(Поле2, КомпоновщикНастроек);*/
			if(true/*ДоступноеПоле1 = ДоступноеПоле2*/)
			{
			}
			while(true/*ДоступноеПоле2.Родитель <> Неопределено*/)
			{
				/*ДоступноеПоле2 = ДоступноеПоле2.Родитель;*/
				if(true/*ДоступноеПоле1 = ДоступноеПоле2*/)
				{
				}
			}
			return null;
		}
		// Добавляет в набор данных поле набора данных

		public object ДобавитьПолеНабораДанных(/*НаборДанных, Поле, Заголовок, ПутьКДанным = Неопределено*/)
		{
			if(true/*ПутьКДанным = Неопределено*/)
			{
				/*ПутьКДанным = Поле;*/
			}
			/*ПолеНабораДанных = НаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));*/
			/*ПолеНабораДанных.Поле        = Поле;*/
			/*ПолеНабораДанных.Заголовок   = Заголовок;*/
			/*ПолеНабораДанных.ПутьКДанным = ПутьКДанным;*/
			return null;
		}
		// Добавляет в набор данных поля периода Период секунда, минута, час ....

		public object ДобавитьПоляПериодаВНаборДанных(/*НаборДанных*/)
		{
			/*СписокПериодов = Новый СписокЗначений;*/
			/*СписокПериодов.Добавить("ПериодСекунда",   "Период секунда");*/
			/*СписокПериодов.Добавить("ПериодМинута",    "Период минута");*/
			/*СписокПериодов.Добавить("ПериодЧас",       "Период час");*/
			/*СписокПериодов.Добавить("ПериодДень",      "Период день");*/
			/*СписокПериодов.Добавить("ПериодНеделя",    "Период неделя");*/
			/*СписокПериодов.Добавить("ПериодДекада",    "Период декада");*/
			/*СписокПериодов.Добавить("ПериодМесяц",     "Период месяц");*/
			/*СписокПериодов.Добавить("ПериодКвартал",   "Период квартал");*/
			/*СписокПериодов.Добавить("ПериодПолугодие", "Период полугодие");*/
			/*СписокПериодов.Добавить("ПериодГод",       "Период год");*/
			/*ИмяПапки = "Периоды";*/
			/*СписокПолейНабораДанных = Новый СписокЗначений;*/
			/*ПапкаПолейНабораДанных = НаборДанных.Поля.Добавить(Тип("ПапкаПолейНабораДанныхСхемыКомпоновкиДанных"));*/
			/*ПапкаПолейНабораДанных.Заголовок   = ИмяПапки;*/
			/*ПапкаПолейНабораДанных.ПутьКДанным = ИмяПапки;*/
			return null;
		}
		// Функция добавляет поле итога в схему компоновки данных. Если параметр Выражение не указан, используется Сумма(ПутьКДанным)

		public object ДобавитьПолеИтога(/*СхемаКомпоновкиДанных, ПутьКДанным, Выражение = Неопределено*/)
		{
			if(true/*Выражение = Неопределено*/)
			{
				/*Выражение = "Сумма(" + ПутьКДанным + ")";*/
			}
			/*ПолеИтога = СхемаКомпоновкиДанных.ПоляИтога.Добавить();*/
			/*ПолеИтога.ПутьКДанным = ПутьКДанным;*/
			/*ПолеИтога.Выражение = Выражение;*/
			return null;
		}
		// Функция добавляет выбранное поле в набор выбранных полей

		public object ДобавитьВыбранноеПоле(/*ЭлементСтруктуры, Знач Поле, Заголовок = Неопределено*/)
		{
			if(true/*ТипЗнч(ЭлементСтруктуры) = Тип("КомпоновщикНастроекКомпоновкиДанных")*/)
			{
				/*ВыбранныеПоля = ЭлементСтруктуры.Настройки.Выбор;*/
			}
			if(true/*ТипЗнч(Поле) = Тип("Строка")*/)
			{
				/*Поле = Новый ПолеКомпоновкиДанных(Поле);*/
			}
			/*ВыбранноеПоле = ВыбранныеПоля.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));*/
			/*ВыбранноеПоле.Поле = Поле;*/
			if(true/*Заголовок <> Неопределено*/)
			{
				/*ВыбранноеПоле.Заголовок = Заголовок;*/
			}
			return null;
		}
		// Функция добавляет в схему компоновки источник данных с типом "Local"

		public object ДобавитьЛокальныйИсточникДанных(/*СхемаКомпоновкиДанных*/)
		{
			/*ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();*/
			/*ИсточникДанных.Имя = "ИсточникДанных1";*/
			/*ИсточникДанных.ТипИсточникаДанных = "Local";*/
			return null;
		}
		// Функция добавляет набор данных - запрос в указанную в параметре коллекцию наборов данных

		public object ДобавитьНаборДанныхЗапрос(/*НаборыДанных, ИсточникДанных, ИмяНабораДанных = "НаборДанных1"*/)
		{
			/*НаборДанных = НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));*/
			/*НаборДанных.Имя = ИмяНабораДанных;*/
			/*НаборДанных.ИсточникДанных = ИсточникДанных.Имя;*/
			return null;
		}
		// Функция добавляет набор данных - объединение в указанную в параметре коллекцию наборов данных

		public object ДобавитьНаборДанныхОбъединение(/*НаборыДанных, ИсточникДанных, ИмяНабораДанных = "НаборДанных1"*/)
		{
			/*НаборДанных = НаборыДанных.Добавить(Тип("НаборДанныхОбъединениеСхемыКомпоновкиДанных"));*/
			/*НаборДанных.Имя = ИмяНабораДанных;*/
			return null;
		}

		public void ЗаполнитьПолеНабораДанныхОстаток(/*ПолеНабораДанных, ГруппаОстатка*/)
		{
			/*ПутьКДанным = ПолеНабораДанных.ПутьКДанным;*/
			if(true/*Найти(ПутьКДанным, "НачальныйОстаток") > 0 ИЛИ Найти(ПутьКДанным, "КонечныйОстаток") > 0*/)
			{
				/*ПолеНабораДанных.Роль.Остаток = Истина;*/
				/*ПолеНабораДанных.Роль.ГруппаОстатка = ГруппаОстатка;*/
				if(true/*ВРег(Прав(ПутьКДанным, 2)) = "ДТ"*/)
				{
					/*ПолеНабораДанных.Роль.ТипБухгалтерскогоОстатка = ТипБухгалтерскогоОстаткаКомпоновкиДанных.Дебет;*/
				}
				if(true/*Найти(ПутьКДанным, "НачальныйОстаток") > 0*/)
				{
					/*ПолеНабораДанных.Роль.ТипОстатка = ТипОстаткаКомпоновкиДанных.НачальныйОстаток;*/
				}
			}
		}
		// Добавляет в макеты макета компоновки расшифровку для ресурсов

		public void ДополнитьМакетыМакетаКомпоновкиРасшифровкойРесурсов(/*МакетКомпоновки, КомпоновщикНастроек*/)
		{
		}

		public object ЭтоВыражениеПоляПараметраРасшифровкиРесурс(/*ВыражениеПоля, КомпоновщикНастроек*/)
		{
			/*ДоступныеРесурсы = ПолучитьСписокДоступныхРесурсов(КомпоновщикНастроек);*/
			/*ДостуныйРесурс = ДоступныеРесурсы.НайтиПоЗначению(Новый ПолеКомпоновкиДанных(ВыражениеПоля.Поле));*/
			return null;
		}

		public object СериализоватьОбъектXDTO(/*Объект*/)
		{
			/*ЗаписьXML = Новый ЗаписьXML();*/
			/*ЗаписьXML.УстановитьСтроку();*/
			/*СериализаторXDTO.ЗаписатьXML(ЗаписьXML, Объект);*/
			/*СтрокаXML = ЗаписьXML.Закрыть();*/
			return null;
		}

		public object СериализоватьОбъект(/*Объект*/)
		{
			/*ЗаписьXML = Новый ЗаписьXML();*/
			/*ЗаписьXML.УстановитьСтроку();*/
			/*Объект2 = Объект.ПолучитьОбъект();*/
			/*ЗаписатьXML(ЗаписьXML, Объект2);*/
			/*СтрокаXML = ЗаписьXML.Закрыть();*/
			return null;
		}

		public object ПрочитатьОбъектXDTO(/*СтрокаXML*/)
		{
			/*ЧтениеXML = Новый ЧтениеXML;*/
			/*ЧтениеXML.УстановитьСтроку(СтрокаXML);*/
			/*Объект = СериализаторXDTO.ПрочитатьXML(ЧтениеXML);*/
			/*ЧтениеXML.Закрыть();*/
			return null;
		}

		public object ПрочитатьОбъект(/*СтрокаXML*/)
		{
			/*ЧтениеXML = Новый ЧтениеXML;*/
			/*ЧтениеXML.УстановитьСтроку(СтрокаXML);*/
			/*Объект = ПрочитатьXML(ЧтениеXML);*/
			/*ЧтениеXML.Закрыть();*/
			return null;
		}

		public void УстановитьДопустимоеЗначениеСпискаВыбора(/*Элемент, Значение = Неопределено*/)
		{
			if(true/*Значение = Неопределено*/)
			{
				/*Значение = Элемент.Значение;*/
			}
			/*НайденноеЗначение = Элемент.СписокВыбора.НайтиПоЗначению(Значение.Вариант);*/
			if(true/*НайденноеЗначение = Неопределено И Элемент.СписокВыбора.Количество() > 0*/)
			{
				/*Значение.Вариант = Элемент.СписокВыбора[0].Значение;*/
				/*Элемент.Значение = Элемент.СписокВыбора[0].Значение;*/
			}
		}

		public void ПрименитьНастройкуПользователя(/*ЗначениеГруппировки, СписокГруппировки*/)
		{
			if(true/*Типзнч(СписокГруппировки) = Тип("ТаблицаЗначений")*/)
			{
			}
		}
		// Заполняет отбор компоновщика по отбору построителя

		public object ПолучитьТаблицуДоступныхВариантов(/*НастраиваемыйОбъект, Пользователь = Неопределено, СПомеченнымиНаУдаление = Ложь, ТипНастройки = Неопределено, СписокДоступныхНастроек = Неопределено*/)
		{
			return null;
		}

		public object ПолучитьСписокДоступныхВариантов(/*НастраиваемыйОбъект, Пользователь = Неопределено, СПомеченнымиНаУдаление = Ложь, ОтчетОбъект = Неопределено*/)
		{
			/*СписокНастроек = Новый СписокЗначений;*/
			if(true/*ОтчетОбъект <> Неопределено*/)
			{
				/*ПараметрыИсполненияОтчета = Неопределено;*/
				/*ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
				/*СписокДоступныхНастроек = Неопределено;*/
				if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("СписокДоступныхПредопределенныхНастроек")*/)
				{
					/*СписокДоступныхНастроек = ПараметрыИсполненияОтчета.СписокДоступныхПредопределенныхНастроек;*/
				}
			}
			/*ТаблицаДоступныхНастроек = ПолучитьТаблицуДоступныхВариантов(НастраиваемыйОбъект, Пользователь, СПомеченнымиНаУдаление,, СписокДоступныхНастроек);*/
			return null;
		}

		public object НастройкиКомпоновщикаПростые(/*КомпоновщикНастроек*/)
		{
			if(true/*КомпоновщикНастроек.Настройки.Структура.Количество() = 1*/)
			{
				if(true/*КомпоновщикНастроек.Настройки.Структура[0].Имя <> ""*/)
				{
				}
				if(true/*ТипЗнч(КомпоновщикНастроек.Настройки.Структура[0]) = Тип("ГруппировкаКомпоновкиДанных")*/)
				{
				}
			}
			return null;
		}

		public object ЭтоПростаяСтруктура(/*Структура*/)
		{
			/*// Количество структур везде должно быть 1
*/
			/*// Таблица и Диаграмма могут быть только на верхнем уровне
*/
			/*НастройкиПростые = Истина;*/
			if(true/*(ТипЗнч(Структура) = Тип("ГруппировкаКомпоновкиДанных") 
		ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаТаблицыКомпоновкиДанных") 
		ИЛИ ТипЗнч(Структура) = Тип("ГруппировкаДиаграммыКомпоновкиДанных"))
		И Структура.Имя <> ""*/)
			{
			}
			if(true/*ТипЗнч(Структура) = Тип("КоллекцияЭлементовСтруктурыТаблицыКомпоновкиДанных")
		ИЛИ ТипЗнч(Структура) = Тип("КоллекцияЭлементовСтруктурыДиаграммыКомпоновкиДанных")*/)
			{
				if(true/*Структура.Количество() > 1
			ИЛИ (Структура.Количество() = 1 И Не ЭтоПростаяСтруктура(Структура[0]))*/)
				{
				}
			}
			return null;
		}

		public object ПолучитьТаблицуСтандартныхПериодов(/**/)
		{
			/*ТаблицаСтандартныхПериодов = Новый ТаблицаЗначений;*/
			/*ТаблицаСтандартныхПериодов.Колонки.Добавить("Периодичность");*/
			/*ТаблицаСтандартныхПериодов.Колонки.Добавить("Время");*/
			/*ТаблицаСтандартныхПериодов.Колонки.Добавить("СтандартныйПериод");*/
			/*ТаблицаСтандартныхПериодов.Колонки.Добавить("Представление");*/
			/*// Произвольный
*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "", "ПроизвольныйПериод", ВариантСтандартногоПериода.ПроизвольныйПериод, "Произвольный период");*/
			/*// День
*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "День", "Предыдущий",    ВариантСтандартногоПериода.Вчера, "Вчера");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "День", "Текущий",       ВариантСтандартногоПериода.Сегодня, " Сегодня");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "День", "Следующий",     ВариантСтандартногоПериода.Завтра, "  Завтра");*/
			/*// Неделя
*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "Предыдущий",  ВариантСтандартногоПериода.ПрошлаяНеделя, "Предыдущая неделя");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "Текущий",     ВариантСтандартногоПериода.ЭтаНеделя, " Эта неделя");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "Следующий",   ВариантСтандартногоПериода.СледующаяНеделя, " Следующая неделя");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "СНачала",     ВариантСтандартногоПериода.СНачалаЭтойНедели, "С начала этой недели");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Неделя", "ДоКонца",     ВариантСтандартногоПериода.ДоКонцаЭтойНедели, "До конца этой недели");*/
			/*// Декада
*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "Предыдущий",  ВариантСтандартногоПериода.ПрошлаяДекада, "Предыдущая декада");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "Текущий",     ВариантСтандартногоПериода.ЭтаДекада, " Эта декада");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "Следующий",   ВариантСтандартногоПериода.СледующаяДекада, "  Следующая декада");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "СНачала",     ВариантСтандартногоПериода.СНачалаЭтойДекады, "С начала этой декады");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Декада", "ДоКонца",     ВариантСтандартногоПериода.ДоКонцаЭтойДекады, "До конца этой декады");*/
			/*// Месяц
*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "Предыдущий",   ВариантСтандартногоПериода.ПрошлыйМесяц, "Предыдущий месяц");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "Текущий",      ВариантСтандартногоПериода.ЭтотМесяц, " Этот месяц");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "Следующий",    ВариантСтандартногоПериода.СледующийМесяц, "  Следующий месяц");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "СНачала",      ВариантСтандартногоПериода.СНачалаЭтогоМесяца, "С начала этого месяца");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Месяц", "ДоКонца",      ВариантСтандартногоПериода.ДоКонцаЭтогоМесяца, "До конца этого месяца");*/
			/*// Квартал
*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "Предыдущий", ВариантСтандартногоПериода.ПрошлыйКвартал, "Предыдущий квартал");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "Текущий",    ВариантСтандартногоПериода.ЭтотКвартал, " Этот квартал");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "Следующий",  ВариантСтандартногоПериода.СледующийКвартал, "  Следующий квартал");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "СНачала",    ВариантСтандартногоПериода.СНачалаЭтогоКвартала, "С начала этого квартала");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Квартал", "ДоКонца",    ВариантСтандартногоПериода.ДоКонцаЭтогоКвартала, "До конца этого квартала");*/
			/*// Полугодие
*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "Предыдущий", ВариантСтандартногоПериода.ПрошлоеПолугодие, "Предыдущее полугодие");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "Текущий",    ВариантСтандартногоПериода.ЭтоПолугодие, " Это полугодие");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "Следующий",  ВариантСтандартногоПериода.СледующееПолугодие, "  Следующее полугодие");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "СНачала",    ВариантСтандартногоПериода.СНачалаЭтогоПолугодия, "С начала этого полугодия");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Полугодие", "ДоКонца",    ВариантСтандартногоПериода.ДоКонцаЭтогоПолугодия, "До конца этого полугодия");*/
			/*// Год
*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "Предыдущий",     ВариантСтандартногоПериода.ПрошлыйГод, "Предыдущий год");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "Текущий",        ВариантСтандартногоПериода.ЭтотГод, " Этот год");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "Следующий",      ВариантСтандартногоПериода.СледующийГод, "  Следующий год");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "СНачала",        ВариантСтандартногоПериода.СНачалаЭтогоГода, "С начала этого года");*/
			/*ДобавитьСтрокуСтандартногоПериода(ТаблицаСтандартныхПериодов, "Год", "ДоКонца",        ВариантСтандартногоПериода.ДоКонцаЭтогоГода, "До конца этого года");*/
			return null;
		}

		public object ПолучитьТаблицуСтандартныхДатНачала(/**/)
		{
			/*ТаблицаСтандартныхПериодов = Новый ТаблицаЗначений;*/
			/*ТаблицаСтандартныхПериодов.Колонки.Добавить("Периодичность");*/
			/*ТаблицаСтандартныхПериодов.Колонки.Добавить("Время");*/
			/*ТаблицаСтандартныхПериодов.Колонки.Добавить("СтандартнаяДатаНачала");*/
			/*ТаблицаСтандартныхПериодов.Колонки.Добавить("Представление");*/
			/*// Произвольная
*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "", "ПроизвольнаяДата",  ВариантСтандартнойДатыНачала.ПроизвольнаяДата, "Произвольная дата");*/
			/*// День
*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "День", "Предыдущий",    ВариантСтандартнойДатыНачала.НачалоПрошлогоДня, "Начало вчерашнего дня");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "День", "Текущий",       ВариантСтандартнойДатыНачала.НачалоЭтогоДня, " Начало сегодняшнего дня");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "День", "Следующий",     ВариантСтандартнойДатыНачала.НачалоСледующегоДня, "  Начало завтрашнего дня");*/
			/*// Неделя
*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Неделя", "Предыдущий",  ВариантСтандартнойДатыНачала.НачалоПрошлойНедели, "Начало предыдущей недели");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Неделя", "Текущий",     ВариантСтандартнойДатыНачала.НачалоЭтойНедели, " Начало этой недели");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Неделя", "Следующий",   ВариантСтандартнойДатыНачала.НачалоСледующейНедели, "  Начало следующей недели");*/
			/*// Декада
*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Декада", "Предыдущий",  ВариантСтандартнойДатыНачала.НачалоПрошлойДекады, "Начало предыдущей декады");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Декада", "Текущий",     ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца, " Начало этой декады");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Декада", "Следующий",   ВариантСтандартнойДатыНачала.НачалоСледующейДекады, "  Начало следующей декады");*/
			/*// Месяц
*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Месяц", "Предыдущий",   ВариантСтандартнойДатыНачала.НачалоПрошлогоМесяца, "Начало предыдущего месяца");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Месяц", "Текущий",      ВариантСтандартнойДатыНачала.НачалоЭтогоМесяца, " Начало этого месяца");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Месяц", "Следующий",    ВариантСтандартнойДатыНачала.НачалоСледующегоМесяца, "  Начало следующего месяца");*/
			/*// Квартал
*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Квартал", "Предыдущий", ВариантСтандартнойДатыНачала.НачалоПрошлогоКвартала, "Начало предыдущего квартала");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Квартал", "Текущий",    ВариантСтандартнойДатыНачала.НачалоЭтогоКвартала, " Начало этого квартала");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Квартал", "Следующий",  ВариантСтандартнойДатыНачала.НачалоСледующегоКвартала, "  Начало следующего квартала");*/
			/*// Полугодие
*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Полугодие", "Предыдущий", ВариантСтандартнойДатыНачала.НачалоПрошлогоПолугодия, "Начало предыдущего полугодия");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Полугодие", "Текущий",    ВариантСтандартнойДатыНачала.НачалоЭтогоПолугодия, " Начало этого полугодия");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Полугодие", "Следующий",  ВариантСтандартнойДатыНачала.НачалоСледующегоПолугодия, "  Начало следующего полугодия");*/
			/*// Год
*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Год", "Предыдущий",     ВариантСтандартнойДатыНачала.НачалоПрошлогоГода, "Начало предыдущего года");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Год", "Текущий",        ВариантСтандартнойДатыНачала.НачалоЭтогоГода, " Начало этого года");*/
			/*ДобавитьСтрокуСтандартнойДатыНачала(ТаблицаСтандартныхПериодов, "Год", "Следующий",      ВариантСтандартнойДатыНачала.НачалоСледующегоГода, "  Начало этого года");*/
			return null;
		}

		public void ДобавитьСтрокуСтандартногоПериода(/*ТаблицаСтандартныхПериодов, Периодичность, Время, СтандартныйПериод, Представление*/)
		{
			/*НоваяСтрока = ТаблицаСтандартныхПериодов.Добавить();*/
			/*НоваяСтрока.Периодичность = Периодичность;*/
			/*НоваяСтрока.Время = Время;*/
			/*НоваяСтрока.СтандартныйПериод = СтандартныйПериод;*/
			/*НоваяСтрока.Представление = Представление;*/
		}

		public void ДобавитьСтрокуСтандартнойДатыНачала(/*ТаблицаСтандартныхПериодов, Периодичность, Время, СтандартнаяДатаНачала, Представление*/)
		{
			/*НоваяСтрока = ТаблицаСтандартныхПериодов.Добавить();*/
			/*НоваяСтрока.Периодичность = Периодичность;*/
			/*НоваяСтрока.Время = Время;*/
			/*НоваяСтрока.СтандартнаяДатаНачала = СтандартнаяДатаНачала;*/
			/*НоваяСтрока.Представление = Представление;*/
		}

		public object ПолучитьСписокВыбораСтандартногоПериодаПользователя(/*Параметры*/)
		{
			/*ТаблицаСтандартныхПериодов = ПолучитьТаблицуСтандартныхПериодов();*/
			/*ВспомогательныйПериод = Новый СтандартныйПериод;*/
			/*СписокВыбораПериодовПользователя = Новый СписокЗначений;*/
			if(true/*Параметры.ПроизвольныйПериод*/)
			{
				/*СписокВыбораПериодовПользователя.Вставить(0, ВариантСтандартногоПериода.ПроизвольныйПериод, "Произвольный период");*/
			}
			return null;
		}

		public object ПолучитьСписокВыбораСтандартнойДатыНачалаПользователя(/*Параметры*/)
		{
			/*ТаблицаСтандартныхДатНачала = ПолучитьТаблицуСтандартныхДатНачала();*/
			/*ВспомогательныйПериод = Новый СтандартнаяДатаНачала;*/
			/*СписокВыбораПериодовПользователя = Новый СписокЗначений;*/
			if(true/*Параметры.ПроизвольныйПериод*/)
			{
				/*СписокВыбораПериодовПользователя.Вставить(0, ВариантСтандартнойДатыНачала.ПроизвольнаяДата, "Произвольная дата");*/
			}
			return null;
		}

		public object ПолучитьЗаголовокОтчета(/*ОтчетОбъект, ФормаОтчета = Неопределено*/)
		{
			return null;
		}

		public object ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(/*ОтчетОбъект, ФормаОтчета = Неопределено*/)
		{
			/*ЗначенияНастроек = Новый Структура;*/
			/*ЗначенияНастроек.Вставить("ВыводитьЗаголовокОтчета", Истина);*/
			/*ЗначенияНастроек.Вставить("ФормироватьПриОткрытии", Ложь);*/
			/*//ДинамическиеОтборы
*/
			/*ЗначенияНастроек.Вставить("ДинамическиеОтборы", Новый Соответствие);*/
			/*ЗначенияНастроек.Вставить("ДинамическиеПараметры", Новый Соответствие);*/
			/*ЗначенияНастроек.Вставить("ДинамическиеГруппировки", Новый Соответствие);*/
			/*Компоновщик = Новый КомпоновщикНастроекКомпоновкиДанных;*/
			/*СхемаОбъекта = ПолучитьСхемуКомпоновкиОбъекта(ОтчетОбъект);*/
			/*Компоновщик.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаОбъекта));*/
			/*ЗаполнитьЭлементы(Компоновщик.Настройки["ПараметрыДанных"], СхемаОбъекта.НастройкиПоУмолчанию["ПараметрыДанных"]);*/
			/*ЗначенияНастроек.Вставить("НастройкиКомпоновщика", Компоновщик.ПолучитьНастройки());*/
			/*// Запомним видимость страниц компоновки чтобы при загрузке значений знать,
*/
			/*// брать из значений по умолчанию или из запомненных значений
*/
			/*ВидимостьСтраниц = Новый Соответствие;*/
			/*ВидимостьСтраниц.Вставить("Параметры", Ложь);*/
			/*ВидимостьСтраниц.Вставить("Отбор", Ложь);*/
			/*ВидимостьСтраниц.Вставить("Порядок", Ложь);*/
			/*ВидимостьСтраниц.Вставить("Показатели", ложь);*/
			/*ЗначенияНастроек.Вставить("ВидимостьСтраниц", ВидимостьСтраниц);*/
			/*ЗначенияНастроек.Вставить("Показатели", Новый Соответствие);*/
			/*// Стандартный период
*/
			/*ЗначенияНастроек.Вставить("СтандартныйПериод", Новый СтандартныйПериод);*/
			/*// Стандартная дата начала
*/
			/*ЗначенияНастроек.Вставить("СтандартнаяДатаНачала", Новый СтандартнаяДатаНачала);*/
			/*ТиповыеОтчетыПереопределяемый.ДополнитьЗначенияНастроекПанелиПользователяПоумолчанию(ЗначенияНастроек, ОтчетОбъект);*/
			return null;
		}

		public object ПолучитьПараметрыПанелиПользователяПоУмолчанию(/*ОтчетОбъект, ФормаОтчета = Неопределено*/)
		{
			return null;
		}

		public object ПолучитьНастройкуПользователяНастройкиОтчета(/*НастраиваемыйОбъект, Пользователь = Неопределено*/)
		{
			if(true/*Пользователь = Неопределено*/)
			{
				/*Пользователь = глЗначениеПеременной("глТекущийПользователь");*/
			}
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ Разрешенные
	|	СохраненныеНастройкиПользователи.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки.Пользователи КАК СохраненныеНастройкиПользователи
	|ГДЕ
	|	СохраненныеНастройкиПользователи.Пользователь = &Пользователь
	|	И СохраненныеНастройкиПользователи.Ссылка.ТипНастройки = &ТипНастройки
	|	И СохраненныеНастройкиПользователи.Ссылка.НастраиваемыйОбъект = &НастраиваемыйОбъект";*/
			/*Запрос.УстановитьПараметр("Пользователь", Пользователь);*/
			/*Запрос.УстановитьПараметр("ТипНастройки", Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета);*/
			/*Запрос.УстановитьПараметр("НастраиваемыйОбъект", НастраиваемыйОбъект);*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			if(true/*Выборка.Следующий()*/)
			{
			}
			return null;
		}

		public void ЗагрузитьВСхемуНастройкиКомпоновщика(/*Схема, Настройки*/)
		{
			/*НастройкиXDTO = СериализаторXDTO.ЗаписатьXDTO(Настройки);*/
			/*СхемаXDTO = СериализаторXDTO.ЗаписатьXDTO(Схема);*/
			if(true/*НастройкиXDTO <> Неопределено*/)
			{
				if(true/*СхемаXDTO.Свойства().Получить("defaultSettings") <> Неопределено*/)
				{
					/*СхемаXDTO.defaultSettings = НастройкиXDTO;*/
				}
			}
			/*Схема = СериализаторXDTO.ПрочитатьXDTO(СхемаXDTO);*/
		}

		public void ОбновитьТаблицуДоступныхНастроекПользователю(/*ОтчетОбъект*/)
		{
			/*ПараметрыИсполненияОтчета = Неопределено;*/
			/*ПараметрыИсполненияОтчета = ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			/*СписокДоступныхНастроек = Неопределено;*/
			if(true/*ПараметрыИсполненияОтчета <> Неопределено И ПараметрыИсполненияОтчета.Свойство("СписокДоступныхПредопределенныхНастроек")*/)
			{
				/*СписокДоступныхНастроек = ПараметрыИсполненияОтчета.СписокДоступныхПредопределенныхНастроек;*/
			}
			/*ОтчетОбъект.ТаблицаВариантовОтчета = ПолучитьТаблицуДоступныхВариантов(ПолучитьИдентификаторОбъекта(ОтчетОбъект), глЗначениеПеременной("глТекущийПользователь"),,, СписокДоступныхНастроек);*/
		}

		public object ДобавитьИЗаполнитьСтроку(/*Родитель, Использование, Имя, Представление*/)
		{
			/*НоваяСтрока = Родитель.Строки.Добавить();*/
			/*НоваяСтрока.Использование = Использование;*/
			/*НоваяСтрока.Имя = Имя;*/
			/*НоваяСтрока.Представление = Представление;*/
			return null;
		}

		public object ДобавитьСтрокуПериодичности(/*Таблица, Периодичность, Использование*/)
		{
			/*НоваяСтрока = Таблица.Добавить();*/
			/*НоваяСтрока.Периодичность = Периодичность;*/
			/*НоваяСтрока.Использование = Использование;*/
			return null;
		}

		public void ОбновитьЦветаДиаграммы(/*Результат, ТаблицаЦветовСерий*/)
		{
			if(true/*ТаблицаЦветовСерий = Неопределено 
		ИЛИ ТаблицаЦветовСерий.Колонки.Количество() = 0*/)
			{
			}
			/*Рисунки = Результат.Рисунки;*/
		}

		public void УстановитьЗначениеВЭлементеПоСтруктуре(/*Структура, Ключ, ЭлементФормы*/)
		{
			/*Значение = ПолучитьЗначенияЭлементаСтруктуры(Структура, Ключ);*/
			if(true/*Значение <> Неопределено*/)
			{
				/*ЭлементФормы.Значение = Значение;*/
			}
		}

		public object ПолучитьЗначенияЭлементаСтруктуры(/*Структура, Ключ*/)
		{
			if(true/*Структура = Неопределено*/)
			{
			}
			/*Значение = Неопределено;*/
			/*Структура.Свойство(Ключ, Значение);*/
			return null;
		}

		public void УстановитьДопустимоеЗначениеВПолеВыбора(/*Элемент, Значение, УстанавливатьПервоеЗначение = Ложь*/)
		{
			if(true/*ЗначениеЗаполнено(Элемент.Значение)*/)
			{
			}
			if(true/*Значение <> Неопределено И Элемент.СписокВыбора.НайтиПоЗначению(Значение) <> Неопределено*/)
			{
				/*Элемент.Значение = Значение;*/
			}
			if(true/*Элемент.Значение = Неопределено И УстанавливатьПервоеЗначение И Элемент.СписокВыбора.Количество() > 1*/)
			{
				/*Элемент.Значение = Элемент.СписокВыбора[1].Значение;*/
			}
		}

		public object ПолучитьСтруктуруДинамическихОтборов(/*Параметры, ЭлементыФормы*/)
		{
			/*Соответствие = Новый Соответствие;*/
			if(true/*Параметры = Неопределено*/)
			{
			}
			return null;
		}

		public object ПолучитьСтруктуруДинамическихПараметров(/*Параметры, ЭлементыФормы*/)
		{
			/*Соответствие = Новый Соответствие;*/
			if(true/*Параметры = Неопределено или НЕ Параметры.Свойство("Параметры")*/)
			{
			}
			return null;
		}

		public object ПолучитьСтруктуруДинамическихГруппировок(/*Параметры, ЭлементыФормы*/)
		{
			/*Соответствие = Новый Соответствие;*/
			if(true/*Параметры = Неопределено или НЕ Параметры.Свойство("Группировки")*/)
			{
			}
			return null;
		}

		public void ПрименитьНастройкуПользователяНастройкиОтчета(/*ОтчетОбъект*/)
		{
			/*СсылкаНаОбъект = ПолучитьИдентификаторОбъекта(ОтчетОбъект);*/
			/*НастраиваемыйОбъект = ?(ОтчетОбъект.СохраненнаяНастройка.Пустая(), СсылкаНаОбъект, ОтчетОбъект.СохраненнаяНастройка);*/
			/*Настройка = ПолучитьНастройкуПользователяНастройкиОтчета(НастраиваемыйОбъект);*/
			if(true/*Настройка <> Неопределено*/)
			{
				/*Настройка = Настройка.ПолучитьОбъект();*/
				/*Значение = Настройка.ХранилищеНастроек.Получить();*/
				/*ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(Значение["ЗначенияНастроекПанелиПользователя"]);*/
			}
		}

		public object ПолучитьИдентификаторОбъекта(/*ОтчетОбъект*/)
		{
			return null;
		}

		public object ПолучитьСхемуКомпоновкиОбъекта(/*ОтчетОбъект*/)
		{
			return null;
		}

		public void ЗаполнитьОтборыПоУмолчанию(/*ОтчетОбъект, СписокПолейПодстановки*/)
		{
		}

		public void ПоказатьКопиюРезультата(/*Результат*/)
		{
			/*ТабДок = Новый ТабличныйДокумент;*/
			/*ТабДок.Вывести(Результат);*/
			/*ТабДок.ОтображатьЗаголовки = Ложь;*/
			/*ТабДок.ОтображатьСетку = Ложь;*/
			/*ТабДок.СохранятьСвойстваОтображения = Истина;*/
			/*ТабДок.Показать();*/
		}

		public void ЗаполнитьНастройкиПоКомпановщику(/*ОтчетОбъект, КомпоновщикНастроек, ЗначенияНастроек*/)
		{
			if(true/*ЗначенияНастроек = Неопределено*/)
			{
				/*ЗначенияНастроек = ПолучитьЗначенияНастроекПанелиПользователяПоУмолчанию(ОтчетОбъект);*/
			}
			if(true/*ЭтоСтараяВерсияОтчета(ОтчетОбъект)*/)
			{
			}
			/*ПараметрыПанели  = ПолучитьПараметрыПанелиПользователяОбъекта(ОтчетОбъект);*/
			if(true/*ПараметрыПанели = Неопределено*/)
			{
			}
			/*// Установка Настроек компоновки на панели настроек
*/
			/*// Установим у всех параметров использование
*/
			/*// Установка параметра ПериодОтчета
*/
			/*//ЗначениеПараметра = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("ПериодОтчета"));
*/
			/*//ЕстьПериод = ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки.НайтиСтроки(Новый Структура("Имя", "Период"))[0].Использование;
*/
			/*//Если ЕстьПериод И ЗначениеПараметра <> Неопределено Тогда
*/
			/*//	Периоды = ПолучитьСписокПериодов(ЗначениеПараметра.Значение, ПараметрыПанели);
*/
			/*//	ЗначениеПараметра.Использование = Периоды.Количество() <> 0;
*/
			/*//	Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("СписокЗначений") Тогда
*/
			/*//		ЗначениеПараметра.Значение = Периоды;
*/
			/*//	Иначе
*/
			/*//		ЗначениеПараметра.Значение = Периоды[0].Значение;
*/
			/*//	КонецЕсли;
*/
			/*//КонецЕсли;
*/
			if(true/*ПараметрыПанели.ДеревоНастроекСтандартныхСтраниц.Строки.Найти("Период").Использование*/)
			{
				/*// Установка Стандартного периода
*/
				/*ЗначениеПараметраНачалоПериода = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("НачалоПериода"));*/
				/*ЗначениеПараметраКонецПериода  = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("КонецПериода"));*/
				if(true/*ЗначениеПараметраНачалоПериода <> Неопределено И ЗначениеПараметраКонецПериода <> Неопределено*/)
				{
					/*СтандартныйПериод = Неопределено;*/
					/*ЗначенияНастроек.Свойство("СтандартныйПериод", СтандартныйПериод);*/
					if(true/*СтандартныйПериод <> Неопределено*/)
					{
						if(true/*ЗначениеПараметраНачалоПериода.Использование*/)
						{
							/*ЗначенияНастроек.СтандартныйПериод.ДатаНачала = ЗначениеПараметраНачалоПериода.Значение;*/
						}
						if(true/*ЗначениеПараметраКонецПериода.Использование*/)
						{
							/*ЗначенияНастроек.СтандартныйПериод.ДатаОкончания = ЗначениеПараметраКонецПериода.Значение;*/
						}
						/*ЗначенияНастроек.СтандартныйПериод = СтандартныйПериод;*/
					}
				}
				/*// Установка Стандартной даты начала
*/
				/*ЗначениеПараметраПериод = КомпоновщикНастроек.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных("Период"));*/
				if(true/*ЗначениеПараметраПериод <> Неопределено*/)
				{
					/*СтандартнаяДатаНачала = Неопределено;*/
					/*ЗначенияНастроек.Свойство("СтандартнаяДатаНачала", СтандартнаяДатаНачала);*/
					if(true/*СтандартнаяДатаНачала <> Неопределено*/)
					{
						if(true/*ЗначениеПараметраПериод.Использование*/)
						{
							/*ЗначенияНастроек.СтандартнаяДатаНачала.Дата = ЗначениеПараметраПериод.Значение;*/
						}
					}
				}
			}
			/*// Установка Динамических отборов
*/
			if(true/*ЗначенияНастроек.Свойство("ДинамическиеПараметры") И ПараметрыПанели.Свойство("Параметры")*/)
			{
			}
			/*// Установка Динамических отборов
*/
			/*//
*/
			if(true/*ЗначенияНастроек.Свойство("ДинамическиеГруппировки") И ПараметрыПанели.Свойство("Группировки")*/)
			{
				/*Группировки =  ПолучитьГруппировки(КомпоновщикНастроек);*/
			}
		}

		public void ДобавитьГрупипровкуВЗначениеНастроек(/*КомпоновщикНастроек, Группировка, ЭлементТабличноеПоле*/)
		{
			/*СтрокаГруппировки = ЭлементТабличноеПоле.Добавить();*/
			/*Представление = "";*/
			/*СтрокаГруппировки.Представление = Представление;*/
			/*СтрокаГруппировки.Использование = Группировка.Использование;*/
		}

		public void ОчиститьКомпоновщикНастроек(/*КомпоновщикНастроек*/)
		{
			if(true/*ТипЗнч(КомпоновщикНастроек) <> Тип("КомпоновщикНастроекКомпоновкиДанных")*/)
			{
			}
			/*КомпоновщикНастроек.Настройки.Выбор.Элементы.Очистить();*/
			/*КомпоновщикНастроек.Настройки.Отбор.Элементы.Очистить();*/
			/*КомпоновщикНастроек.Настройки.Структура.Очистить();*/
			/*КомпоновщикНастроек.Настройки.ПользовательскиеПоля.Элементы.Очистить();*/
			/*КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Очистить();*/
			/*//очистим параметры
*/
		}

		public object ИнициализироватьКомпоновщикНастроек(/*ОтчетОбъект, Схема = Неопределено, ЗагружатьНастройкиПоУмолчанию = Ложь, ТолькоПолучитьСКД = ложь*/)
		{
			/*Схема = ОтчетОбъект.СхемаКомпоновкиДанных;*/
			if(true/*Схема = Неопределено*/)
			{
				/*Схема = ОтчетОбъект.СхемаКомпоновкиДанных.Получить();*/
			}
			if(true/*Схема = Неопределено*/)
			{
				/*// Если схема компоновки еще не редактировалась, создадим новую
*/
				/*ОтчетОбъект.СхемаКомпоновкиДанных = Новый ХранилищеЗначения(Новый СхемаКомпоновкиДанных);*/
			}
			if(true/*Не ТолькоПолучитьСКД*/)
			{
				/*ОтчетОбъект.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Схема));*/
			}
			if(true/*ЗагружатьНастройкиПоУмолчанию*/)
			{
				/*// Загрузим настройки по умолчанию
*/
				/*ОтчетОбъект.КомпоновщикНастроек.ЗагрузитьНастройки(Схема.НастройкиПоУмолчанию);*/
			}
			return null;
		}

		public object ПолучитьСписокТиповыхОтчетов(/**/)
		{
			/*СписокОтчетов = Новый СписокЗначений;*/
			return null;
		}

		public object ЗаписьОтчетаДоступна(/*ОтчетОбъект, ПроверяемаяСохраненнаяНастройка = Неопределено*/)
		{
			if(true/*ПроверяемаяСохраненнаяНастройка = Неопределено*/)
			{
				/*ПроверяемаяСохраненнаяНастройка = ОтчетОбъект.СохраненнаяНастройка;*/
			}
			/*СписокДоступныхНастроек = ПолучитьСписокДоступныхВариантов(ПолучитьИдентификаторОбъекта(ОтчетОбъект), глЗначениеПеременной("глТекущийПользователь"),, ОтчетОбъект);*/
			/*Элемент = СписокДоступныхНастроек.НайтиПоЗначению(ПроверяемаяСохраненнаяНастройка);*/
			if(true/*ПроверяемаяСохраненнаяНастройка.Пустая()*/)
			{
				/*// Основную настройку типового отчета сохранять нельзя
*/
			}
			return null;
		}
		// Получает параметр данных компоновщика настроек

		public object ПолучитьПараметр(/*КомпоновщикНастроекКоллекцияЗначений, ИмяПараметра*/)
		{
			if(true/*ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("КомпоновщикНастроекКомпоновкиДанных")
		ИЛИ ТипЗнч(КомпоновщикНастроекКоллекцияЗначений) = Тип("ДанныеРасшифровкиКомпоновкиДанных")*/)
			{
				/*ЗначениеПараметра = КомпоновщикНастроекКоллекцияЗначений.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));*/
			}
			return null;
		}
		// Получает параметр вывода компоновщика настроек

		public object ПолучитьПараметрВывода(/*КомпоновщикНастроекГруппировка, ИмяПараметра*/)
		{
			if(true/*ТипЗнч(КомпоновщикНастроекГруппировка) = Тип("КомпоновщикНастроекКомпоновкиДанных") 
		ИЛИ ТипЗнч(КомпоновщикНастроекГруппировка) = Тип("ДанныеРасшифровкиКомпоновкиДанных")*/)
			{
				/*ЗначениеПараметра = КомпоновщикНастроекГруппировка.Настройки.ПараметрыВывода.НайтиЗначениеПараметра(Новый ПараметрКомпоновкиДанных(ИмяПараметра));*/
			}
			return null;
		}

		public object ПолучитьНастройкуОтчета(/*ТекстФайлаНастройки*/)
		{
			/*СтруктураНастроек = Новый Структура("Версия, Наименование, НастраиваемыйОбъект, Описание, ХранилищеНастроек");*/
			/*НачалоВерсии = Найти(ТекстФайлаНастройки, "<ВЕРСИЯ>");*/
			/*КонецВерсии  = Найти(ТекстФайлаНастройки, "</ВЕРСИЯ>");*/
			/*СтруктураНастроек.Версия = Сред(ТекстФайлаНастройки, НачалоВерсии + 8, КонецВерсии - НачалоВерсии - 8);*/
			/*НачалоНаименования = Найти(ТекстФайлаНастройки, "<НАИМЕНОВАНИЕ>");*/
			/*КонецНаименования  = Найти(ТекстФайлаНастройки, "</НАИМЕНОВАНИЕ>");*/
			/*СтруктураНастроек.Наименование = Сред(ТекстФайлаНастройки, НачалоНаименования + 14, КонецНаименования - НачалоНаименования - 14);*/
			/*НачалоОбъект = Найти(ТекстФайлаНастройки, "<ОБЪЕКТ>");*/
			/*КонецОбъект  = Найти(ТекстФайлаНастройки, "</ОБЪЕКТ>");*/
			/*СтруктураНастроек.НастраиваемыйОбъект = Сред(ТекстФайлаНастройки, НачалоОбъект + 8, КонецОбъект - НачалоОбъект - 8 );*/
			/*НачалоОписание = Найти(ТекстФайлаНастройки, "<ОПИСАНИЕ>");*/
			/*КонецОписание  = Найти(ТекстФайлаНастройки, "</ОПИСАНИЕ>");*/
			/*СтруктураНастроек.Описание = Сред(ТекстФайлаНастройки, НачалоОписание + 10,  КонецОписание - НачалоОписание - 10 );*/
			/*НачалоНастройки = Найти(ТекстФайлаНастройки, "<НАСТРОЙКА>");*/
			/*КонецНастройки  = Найти(ТекстФайлаНастройки, "</НАСТРОЙКА>");*/
			/*СтрокаXML = Сред(ТекстФайлаНастройки, НачалоНастройки + 11, КонецНастройки - НачалоНастройки - 11);*/
			/*Попытка 
		СтруктураНастроек.ХранилищеНастроек = ПрочитатьОбъект(СтрокаXML);*/
			/*Исключение
		СтруктураНастроек = Неопределено;*/
			/*КонецПопытки;*/
			return null;
		}
		// Процедура загружает настройки по умолчанию, в предопредленные элементы справочника

		public object ЗагрузитьНастройкуПредопределенногоЭлемента(/*НазваниеМакета, ОтчетНазвание = Неопределено, ТекстовыйДокумент = Неопределено, Перезаписать = ложь*/)
		{
			/*БылиИзменения = ложь;*/
			/*Настройка = Неопределено;*/
			if(true/*ОтчетНазвание = Неопределено И ТекстовыйДокумент = Неопределено*/)
			{
			}
			if(true/*Настройка = Неопределено*/)
			{
			}
			/*СохраненаяНастройка = Неопределено;*/
			/*ВЫПОЛНИТЬ("СохраненаяНастройка = Справочники.СохраненныеНастройки."+НазваниеМакета);*/
			if(true/*ЗначениеЗаполнено(СохраненаяНастройка)*/)
			{
				/*ОбъектСохраненаяНастройка = СохраненаяНастройка.ПолучитьОбъект();*/
				if(true/*СохраненаяНастройка.НастраиваемыйОбъект <> Настройка.НастраиваемыйОбъект*/)
				{
					/*ОбъектСохраненаяНастройка.НастраиваемыйОбъект = Настройка.НастраиваемыйОбъект;*/
					/*БылиИзменения = истина;*/
				}
				if(true/*СохраненаяНастройка.ТипНастройки <> Перечисления.ТипыНастроек.НастройкиОтчета*/)
				{
					/*ОбъектСохраненаяНастройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиОтчета;*/
					/*БылиИзменения = истина;*/
				}
				if(true/*СохраненаяНастройка.Наименование = ""*/)
				{
					/*ОбъектСохраненаяНастройка.Наименование = Настройка.Наименование;*/
					/*БылиИзменения = истина;*/
				}
				if(true/*СохраненаяНастройка.Описание <> Настройка.Описание*/)
				{
					/*ОбъектСохраненаяНастройка.Описание = Настройка.Описание;*/
					/*БылиИзменения = истина;*/
				}
				if(true/*СохраненаяНастройка.Пользователи.Количество() = 0*/)
				{
					/*НоваяСтрока = ОбъектСохраненаяНастройка.Пользователи.Добавить();*/
					/*НоваяСтрока.Пользователь = Справочники.ГруппыПользователей.ВсеПользователи;*/
					/*НоваяСтрока.ПравоИзменения = истина;*/
					/*БылиИзменения = истина;*/
				}
				/*НастройкаТекущая = СохраненаяНастройка.ХранилищеНастроек.Получить();*/
				/*ИзмениласьНастройка = НастройкаТекущая <> Неопределено и НастройкаТекущая.Свойство("Изменялась") И НастройкаТекущая.Изменялась;*/
				if(true/*НастройкаТекущая = Неопределено или Не ИзмениласьНастройка или Перезаписать*/)
				{
					/*ОбъектСохраненаяНастройка.ХранилищеНастроек = Новый ХранилищеЗначения(Настройка.ХранилищеНастроек.Получить());*/
					/*БылиИзменения = истина;*/
				}
			}
			if(true/*БылиИзменения*/)
			{
				/*ОбъектСохраненаяНастройка.Записать();*/
				/*УдалитьПользовательскиеНастройки(ОбъектСохраненаяНастройка.Ссылка);*/
			}
			return null;
		}

		public void УдалитьПользовательскиеНастройки(/*Ссылка*/)
		{
			/*ТЗ = "ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.ТипНастройки = &ТипНастройки
	|	И СохраненныеНастройки.НастраиваемыйОбъект = &НастраиваемыйОбъект";*/
			/*Запрос = Новый Запрос(ТЗ);*/
			/*Запрос.УстановитьПараметр("ТипНастройки",  Перечисления.ТипыНастроек.НастройкиПользователяНастройкиОтчета);*/
			/*Запрос.УстановитьПараметр("НастраиваемыйОбъект",  Ссылка);*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			while(true/*Выборка.Следующий()*/)
			{
				/*Объект = Выборка.Ссылка.ПолучитьОбъект();*/
				/*Объект.Удалить();*/
			}
			/*;;*/
		}

		public object ЗагрузитьНастройкуОтчета(/*СохраненаяНастройка, Настройка, ОбновлятьЭлемент = ложь, ЗаписыватьЭлемент = истина*/)
		{
			/*БылиИзменения = ложь;*/
			if(true/*СохраненаяНастройка <> Неопределено И СохраненаяНастройка <> Справочники.СохраненныеНастройки.ПустаяСсылка()*/)
			{
				/*ОбъектСохраненаяНастройка = СохраненаяНастройка.ПолучитьОбъект();*/
				if(true/*СохраненаяНастройка.НастраиваемыйОбъект <> Настройка.НастраиваемыйОбъект*/)
				{
					/*ОбъектСохраненаяНастройка.НастраиваемыйОбъект = Настройка.НастраиваемыйОбъект;*/
					/*БылиИзменения = истина;*/
				}
				if(true/*СохраненаяНастройка.ТипНастройки <> Перечисления.ТипыНастроек.НастройкиОтчета*/)
				{
					/*ОбъектСохраненаяНастройка.ТипНастройки = Перечисления.ТипыНастроек.НастройкиОтчета;*/
					/*БылиИзменения = истина;*/
				}
				if(true/*СохраненаяНастройка.Наименование = ""*/)
				{
					/*ОбъектСохраненаяНастройка.Наименование = Настройка.Наименование;*/
					/*БылиИзменения = истина;*/
				}
				if(true/*СохраненаяНастройка.Описание <> Настройка.Описание*/)
				{
					/*ОбъектСохраненаяНастройка.Описание = Настройка.Описание;*/
					/*БылиИзменения = истина;*/
				}
				if(true/*СохраненаяНастройка.Пользователи.Количество() = 0*/)
				{
					/*НоваяСтрока = ОбъектСохраненаяНастройка.Пользователи.Добавить();*/
					/*НоваяСтрока.Пользователь = Справочники.ГруппыПользователей.ВсеПользователи;*/
					/*НоваяСтрока.ПравоИзменения = истина;*/
					/*БылиИзменения = истина;*/
				}
				/*НастройкаТекущая = СохраненаяНастройка.ХранилищеНастроек.Получить();*/
				if(true/*НастройкаТекущая = Неопределено или НЕ НастройкаТекущая.Свойство("Изменялась", истина) или ОбновлятьЭлемент*/)
				{
					/*ОбъектСохраненаяНастройка.ХранилищеНастроек = Новый ХранилищеЗначения(Настройка.ХранилищеНастроек.Получить());*/
					/*БылиИзменения = истина;*/
				}
			}
			if(true/*БылиИзменения и ЗаписыватьЭлемент*/)
			{
				/*ОбъектСохраненаяНастройка.Записать();*/
			}
			return null;
		}

		public void ПолучитьФайлСНастройкойОтчета(/*НастройкаОтчета, ТекстовыйДокумент*/)
		{
			/*Настройка = НастройкаОтчета.ХранилищеНастроек.Получить();*/
			if(true/*Настройка <> Неопределено и Настройка.Свойство("Изменялась")*/)
			{
				/*Настройка.Удалить("Изменялась");*/
			}
			/*ТекстовыйДокумент.ДобавитьСтроку("<НАСТРОЙКА_ВАРИАНТА_ОТЧЕТА>");*/
			if(true/*Настройка <> Неопределено и Настройка.Свойство("Версия")*/)
			{
				/*ТекстовыйДокумент.ДобавитьСтроку("<ВЕРСИЯ>" + Настройка.Версия + "</ВЕРСИЯ>");*/
			}
			/*ТекстовыйДокумент.ДобавитьСтроку("<НАИМЕНОВАНИЕ>" + НастройкаОтчета.Наименование + "</НАИМЕНОВАНИЕ>");*/
			/*ТекстовыйДокумент.ДобавитьСтроку("<ОБЪЕКТ>" + НастройкаОтчета.НастраиваемыйОбъект + "</ОБЪЕКТ>");*/
			/*ТекстовыйДокумент.ДобавитьСтроку("<ОПИСАНИЕ>" + НастройкаОтчета.Описание + "</ОПИСАНИЕ>");*/
			/*ЗаписьXML = Новый ЗаписьXML();*/
			/*ЗаписьXML.УстановитьСтроку();*/
			/*ЗаписатьXML(ЗаписьXML, Новый ХранилищеЗначения(Настройка));*/
			/*СтрокаXML = ЗаписьXML.Закрыть();*/
			/*ТекстовыйДокумент.ДобавитьСтроку("<НАСТРОЙКА>" + СтрокаXML + "</НАСТРОЙКА>");*/
			/*ТекстовыйДокумент.ДобавитьСтроку("</НАСТРОЙКА_ВАРИАНТА_ОТЧЕТА>");*/
		}

		public void ЗагрузитьНастройкиОтчетов(/*СписокНастроек, СоответсвиеИмяОтчета = Неопределено, Перезаписать = ложь*/)
		{
		}

		public object ПолучитьИмяОтчета(/*НазваниеМакета*/)
		{
			/*СписокНастроек = ПолучитьТаблицуПредопределенныхНастроек();*/
			/*СтрокиСписка = СписокНастроек.НайтиСтроки(Новый Структура("Макет", НазваниеМакета));*/
			/*ОтчетНазваниеОтчета = "";*/
			if(true/*СтрокиСписка.Количество()=1*/)
			{
				/*НазваниеОтчета = СтрокиСписка[0].Отчет;*/
			}
			return null;
		}

		public object ПолучитьТаблицуПредопределенныхНастроек(/**/)
		{
			/*СписокНастроек = Новый ТаблицаЗначений;*/
			/*СписокНастроек.Колонки.Добавить("Макет");*/
			/*СписокНастроек.Колонки.Добавить("Представление");*/
			/*СписокНастроек.Колонки.Добавить("Отчет");*/
			/*СписокНастроек.Колонки.Добавить("ОтчетПредставление");*/
			/*Запрос = Новый Запрос();*/
			/*Запрос.Текст = "ВЫБРАТЬ
	|	СохраненныеНастройки.Ссылка
	|ИЗ
	|	Справочник.СохраненныеНастройки КАК СохраненныеНастройки
	|ГДЕ
	|	СохраненныеНастройки.Предопределенный";*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			/*СписокПредопределенныхМакетов = Новый СписокЗначений;*/
			while(true/*Выборка.Следующий()*/)
			{
				/*СписокПредопределенныхМакетов.Добавить(Справочники.СохраненныеНастройки.ПолучитьИмяПредопределенного(Выборка.Ссылка));*/
			}
			return null;
		}

		public object ПолучитьИмяФайлаДляНастройки(/*Знач ИмяФайла, Ссылка*/)
		{
			/*ИмяФайла = СокрЛП(ИмяФайла);*/
			/*ИмяФайла = СтрЗаменить(ИмяФайла, "\", "");*/
			/*ИмяФайла = СтрЗаменить(ИмяФайла, ":", "");*/
			/*ИмяФайла = СтрЗаменить(ИмяФайла, "?", "");*/
			/*ИмяФайла = СтрЗаменить(ИмяФайла, "*", "");*/
			/*ИмяФайла = СтрЗаменить(ИмяФайла, "/", "");*/
			/*ИмяФайла = СтрЗаменить(ИмяФайла, "&", "");*/
			/*ИмяФайла = СтрЗаменить(ИмяФайла, """", "");*/
			/*ИмяФайла = СтрЗаменить(ИмяФайла, "<", "");*/
			/*ИмяФайла = СтрЗаменить(ИмяФайла, ">", "");*/
			/*ИмяФайла = СтрЗаменить(ИмяФайла, "|", "");*/
			/*НазваниеОтчета = Ссылка.НастраиваемыйОбъект;*/
			/*НазваниеОтчета = СтрЗаменить(НазваниеОтчета, "ОтчетОбъект.", "");*/
			/*ИмяФайла = НазваниеОтчета +"_"+ ИмяФайла;*/
			return null;
		}

		public void ПодставитьОтборПоПолюВПанель(/*ОтчетОбъект, Поле, Значение*/)
		{
			/*ЗначениеНастройкиПанели = ПолучитьЗначенияНастроекПанелиПользователяОбъекта(ОтчетОбъект);*/
			if(true/*ЗначениеНастройкиПанели = Неопределено*/)
			{
			}
			/*СтруктураОтбора = ЗначениеНастройкиПанели.ДинамическиеОтборы.Получить(Поле);*/
			if(true/*СтруктураОтбора <> Неопределено*/)
			{
				if(true/*ТипЗНч(СтруктураОтбора.Значение) = ТипЗнч(Значение)*/)
				{
					/*СтруктураОтбора.Значение = Значение;*/
				}
				/*СтруктураОтбора.Использование = истина;*/
			}
			if(true/*ЗначениеНастройкиПанели.Свойство("ДинамическиеПараметры")*/)
			{
				/*СтруктураПараметра = ЗначениеНастройкиПанели.ДинамическиеПараметры.Получить(Поле);*/
				if(true/*СтруктураПараметра <> Неопределено*/)
				{
					if(true/*ТипЗнч(СтруктураПараметра.Значение) = ТипЗнч(Значение)*/)
					{
						/*СтруктураПараметра.Значение = Значение;*/
					}
					/*СтруктураПараметра.Использование = истина;*/
				}
			}
			/*ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Новый ХранилищеЗначения(ЗначениеНастройкиПанели);*/
		}

		public void ОбновитьПредопределенныеВариантыОтчетов(/*СписокВариантов = Неопределено, Перезаписать = ложь*/)
		{
			/*СписокНастроек = Новый СписокЗначений;*/
			/*СоответсвиеИмяОтчета = Новый Соответствие;*/
			/*ТаблицаНастроек = ПолучитьТаблицуПредопределенныхНастроек();*/
			if(true/*СписокВариантов = Неопределено*/)
			{
				/*СписокНастроек.ОтметитьЭлементы("Выберите варианты отчетов, которые требуется обновить:");*/
				/*Кол = СписокНастроек.Количество();*/
				/*КолУдаленных = 0;*/
			}
			/*ЗагрузитьНастройкиОтчетов(СписокНастроек, СоответсвиеИмяОтчета, Перезаписать);*/
		}

		public void ОткрытьФормуРасшифровки(/*ОтчетОбъект, Заголовок*/)
		{
			/*ФормаРасшифровки = ПолучитьОбщуюФорму("ФормаРасшифровкиАналитическихОтчетов", , );*/
			/*ОтчетОбъект.ЗначенияНастроекПанелиПользователя = Неопределено;*/
			/*УстановитьПараметрВывода(ОтчетОбъект.КомпоновщикНастроек, "Title", Заголовок);*/
			/*ФормаРасшифровки.ОтчетОбъект = ОтчетОбъект;*/
			/*ФормаРасшифровки.РежимФормированияОтчета = истина;*/
			/*ФормаРасшифровки.Заголовок = Заголовок;*/
			/*ФормаРасшифровки.Открыть();*/
			/*ФормаРасшифровки.Заголовок = Заголовок;*/
			/*ФормаРасшифровки.ОбновитьФорму();*/
		}
		// события элемента управления периодом

		public void ДействияПанелиДинамическийОтборПериодВыборПриИзменении(/*ФормаОтчета, Элемент*/)
		{
			/*ПараметрыИсполненияОтчета = Неопределено;*/
			/*ПараметрыИсполненияОтчета = ФормаОтчета.ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			/*ДатаКакПериодПодобратьДатуПоТексту(Элемент.Значение, ФормаОтчета.СтандартныйПериод.ДатаНачала, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);*/
			/*ФормаОтчета.СтандартныйПериод.ДатаОкончания = ПолучитьКонецПериода(ФормаОтчета.СтандартныйПериод.ДатаНачала, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);*/
			/*ФормаОтчета.ЭлементыФормы.ДинамическийОтборСтандартныйПериодПользователя.Значение = ФормаОтчета.СтандартныйПериод.Вариант;*/
			/*Элемент.Значение = ПолучитьПредставлениеПериода(ФормаОтчета.СтандартныйПериод.ДатаНачала, ФормаОтчета.СтандартныйПериод.ДатаОкончания, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);*/
		}

		public void ДействияПанелиДинамическийОтборПериодВыборПриНачалеВыбораИзСписка(/*ФормаОтчета, Элемент, СтандартнаяОбработка*/)
		{
			/*ПараметрыИсполненияОтчета = Неопределено;*/
			/*ПараметрыИсполненияОтчета = ФормаОтчета.ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			/*НачалоВыбораИзСпискаПредставленияПериода(Элемент, СтандартнаяОбработка, ФормаОтчета.СтандартныйПериод.ДатаНачала, ФормаОтчета, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);*/
			/*ФормаОтчета.СтандартныйПериод.ДатаОкончания = ПолучитьКонецПериода(ФормаОтчета.СтандартныйПериод.ДатаНачала, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);*/
			/*ФормаОтчета.ЭлементыФормы.ДинамическийОтборСтандартныйПериодПользователя.Значение = ФормаОтчета.СтандартныйПериод.Вариант;*/
		}

		public void ДействияПанелиДинамическийОтборПериодВыборАвтоПодборТекста(/*ФормаОтчета, Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка*/)
		{
			/*ПараметрыИсполненияОтчета = Неопределено;*/
			/*ПараметрыИсполненияОтчета = ФормаОтчета.ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			/*ДатаКакПериодАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);*/
		}

		public void ДействияПанелиДинамическийОтборПериодВыборОчистка(/*ФормаОтчета, Элемент, СтандартнаяОбработка*/)
		{
			/*СтандартнаяОбработка = ложь;*/
		}

		public void ДействияПанелиДинамическийОтборПериодВыборОкончаниеВводаТекстаОкончаниеВводаТекста(/*ФормаОтчета, Элемент, Текст, Значение, СтандартнаяОбработка*/)
		{
			/*ПараметрыИсполненияОтчета = Неопределено;*/
			/*ПараметрыИсполненияОтчета = ФормаОтчета.ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			/*ДатаКакПериодОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета );*/
		}

		public object ПолучитьКонецПериода(/*ДатаНачала, МинимальныйПериод*/)
		{
			if(true/*ВРЕГ(МинимальныйПериод) = "МЕСЯЦ"*/)
			{
			}
			return null;
		}

		public object ДатаКакПериодПодобратьДатуПоТексту(/*Текст, ДатаПоТексту = НеОпределено, МинимальныйПериод*/)
		{
			/*СписокВозврата = Новый СписокЗначений;*/
			/*ТекущийГод = Год(ТекущаяДата());*/
			if(true/*ПустаяСтрока(Текст)*/)
			{
			}
			if(true/*Найти(Текст, ".") <> 0*/)
			{
				/*Подстроки = РазложитьСтрокуВМассивПодстрок(Текст, ".");*/
			}
			if(true/*Подстроки.Количество() = 1*/)
			{
				if(true/*ВРЕГ(МинимальныйПериод) = "МЕСЯЦ"*/)
				{
					/*// единственное слово - пытаемся получить месяц
*/
					if(true/*ТолькоЦифрыВСтроке(Текст)*/)
					{
						/*МесяцЧислом = Число(Текст);*/
						if(true/*МесяцЧислом >= 1 и МесяцЧислом <=12*/)
						{
							/*ДатаПоТексту = Дата(ТекущийГод, МесяцЧислом, 1);*/
							if(true/*СтрДлина(Текст) = 1*/)
							{
								/*СписокВозврата.Добавить(Формат(ДатаПоТексту, "ДФ='М/гг'"));*/
							}
						}
					}
				}
			}
			return null;
		}

		public void НачалоВыбораИзСпискаПредставленияПериода(/*Элемент, СтандартнаяОбработка, Период, ЭтаФорма, МинимальныйПериод, НачальноеЗначение = Неопределено*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			if(true/*НачальноеЗначение = Неопределено*/)
			{
				/*НачальноеЗначение = Период;*/
			}
			/*СписокВыбора = Новый СписокЗначений;*/
			/*НачалоТекущегоГода = НачалоГода(НачальноеЗначение);*/
			if(true/*ВРЕГ(МинимальныйПериод) = "ГОД"*/)
			{
				/*НачалоПрошлогоГода = НачалоГода(ДобавитьМесяц(НачалоТекущегоГода, -36))-1;*/
				/*СписокВыбора.Добавить(НачалоПрошлогоГода, (Формат(НачалоПрошлогоГода-1, "ДФ='yyyy'") + "..."));*/
			}
			/*НачалоМесяцаЗаполнения = НачалоПрошлогоГода+1;*/
			/*ЭлементПоУмолчанию = Неопределено;*/
			if(true/*ВРЕГ(МинимальныйПериод) = "МЕСЯЦ"*/)
			{
				/*НачалоСледующегоГода = КонецГода(НачалоТекущегоГода) + 1;*/
			}
			/*СписокВыбора.Добавить(НачалоСледующегоГода, (Формат(НачалоСледующегоГода, "ДФ='yyyy'") + "..."));*/
			/*ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокВыбора, Элемент, ЭлементПоУмолчанию);*/
			if(true/*ВыбранныйЭлемент = Неопределено*/)
			{
			}
			/*Период           = ВыбранныйЭлемент.Значение;*/
			/*Элемент.Значение = ПолучитьПредставлениеПериода(Период, , МинимальныйПериод);*/
		}

		public object СписокМесяцевПоСтроке(/*Текст*/)
		{
			/*СписокМесяцев = Новый СписокЗначений;*/
			/*Месяцы = Новый Соответствие;*/
			/*МесяцыВозврата = Новый Массив;*/
			return null;
		}

		public object СписокКварталовПоСтроке(/*Текст*/)
		{
			/*СписокМесяцев = Новый СписокЗначений;*/
			/*Кварталы = Новый Соответствие;*/
			/*МесяцыВозврата = Новый Массив;*/
			return null;
		}

		public object ПолучитьПредставлениеПериода(/*ДатаНачала, ДатаОкончания, МинимальныйПериод*/)
		{
			/*НачалоПериода = ДатаНачала;*/
			if(true/*ВРЕГ(МинимальныйПериод) = "МЕСЯЦ"*/)
			{
				/*НачалоПериода = НачалоМесяца(ДатаНачала);*/
			}
			if(true/*ДатаОкончания <> Неопределено и (ПолучитьКонецПериода(ДатаНачала, МинимальныйПериод) <> КонецДня(ДатаОкончания) или ДатаНачала <> НачалоПериода)*/)
			{
			}
			return null;
		}

		public object РазложитьСтрокуВМассивПодстрок(/*Знач Стр, Разделитель = ","*/)
		{
			/*МассивСтрок = Новый Массив();*/
			if(true/*Разделитель = " "*/)
			{
				/*Стр = СокрЛП(Стр);*/
				while(true/*1=1*/)
				{
					/*Поз = Найти(Стр,Разделитель);*/
					if(true/*Поз=0*/)
					{
						/*МассивСтрок.Добавить(Стр);*/
					}
					/*МассивСтрок.Добавить(Лев(Стр,Поз-1));*/
					/*Стр = СокрЛ(Сред(Стр,Поз));*/
				}
				/*;;*/
			}
			return null;
		}
		// глРазложить

		public object ТолькоЦифрыВСтроке(/*Знач СтрокаПроверки, УчитыватьЛидирующиеНули = Истина, УчитыватьПробелы = Истина*/)
		{
			if(true/*ТипЗнч(СтрокаПроверки) <> Тип("Строка")*/)
			{
			}
			if(true/*НЕ ЗначениеЗаполнено(СтрокаПроверки)*/)
			{
			}
			if(true/*НЕ УчитыватьПробелы*/)
			{
				/*СтрокаПроверки = СтрЗаменить(СтрокаПроверки, " ", "");*/
			}
			if(true/*НЕ УчитыватьЛидирующиеНули*/)
			{
				/*НомерПервойЦифры = 0;*/
				/*СтрокаПроверки = Сред(СтрокаПроверки, НомерПервойЦифры);*/
			}
			return null;
		}

		public void ДатаКакПериодАвтоПодборТекста(/*Текст, ТекстАвтоПодбора, СтандартнаяОбработка, МинимальныйПериодОтчета*/)
		{
			/*Список = ДатаКакПериодПодобратьДатуПоТексту(Текст, , МинимальныйПериодОтчета);*/
			if(true/*Список.Количество() = 1*/)
			{
				/*ТекстАвтоПодбора = Список[0].Значение;*/
			}
			/*СтандартнаяОбработка = Ложь;*/
		}

		public void ДатаКакПериодОкончаниеВводаТекста(/*Текст, Значение, СтандартнаяОбработка, МинимальныйПериодОтчета*/)
		{
			/*Список = ДатаКакПериодПодобратьДатуПоТексту(Текст, , МинимальныйПериодОтчета);*/
			if(true/*Список.Количество() = 1*/)
			{
				/*Значение = Текст;*/
			}
			/*СтандартнаяОбработка = Ложь;*/
		}

		public void ДействияПанелиСтандартныйПериодПользователяПриИзменении(/*ФормаОтчета, Элемент*/)
		{
			/*ПараметрыИсполненияОтчета = Неопределено;*/
			/*ПараметрыИсполненияОтчета = ФормаОтчета.ОтчетОбъект.ПолучитьПараметрыИсполненияОтчета();*/
			/*ФормаОтчета.СтандартныйПериод.Вариант = ?(Элемент.Значение = Неопределено, ВариантСтандартногоПериода.ПроизвольныйПериод, Элемент.Значение);*/
			if(true/*ПараметрыИсполненияОтчета <> Неопределено и ПараметрыИсполненияОтчета.Свойство("МинимальныйПериодОтчета")*/)
			{
				/*ФормаОтчета.ЭлементыФормы.ДинамическийОтборПериодВыбор.Значение = ПолучитьПредставлениеПериода(ФормаОтчета.СтандартныйПериод.ДатаНачала, ФормаОтчета.СтандартныйПериод.ДатаОкончания, ПараметрыИсполненияОтчета.МинимальныйПериодОтчета);*/
			}
		}
	}
}

