using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class УправлениеЗапасамиПартионныйУчет
	{
		// Функция формирует соответствие организации и способа ведения партионного учета по организации.
		//
		// Параметры
		//  СтруктураШапкиДокумента – Структура - Реквизиты документа "Расчет себестоимости"
		//
		// Возвращаемое значение:
		//   Соответствие – Соответствие организации и способа ведения партионного учета по организации
		//

		public object ПодготовитьСоответствиеСпособыВеденияПартионногоУчетаПоОрганизациям(/*СтруктураШапкиДокумента*/)
		{
			/*Соответствие = Новый Соответствие;*/
			if(true/*Не СтруктураШапкиДокумента.ОтражатьВУправленческомУчете*/)
			{
			}
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = "
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ВыпускПродукции.ДокументВыпуска.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции КАК ВыпускПродукции
	|	
	|ГДЕ
	|	ВыпускПродукции.Период МЕЖДУ &НачДата И &КонДата
	|	И ВыпускПродукции.КодОперации <> &ВыпускПродукцииПоФиксированнойСтоимости
	|";*/
			/*Запрос.УстановитьПараметр("НачДата", СтруктураШапкиДокумента.мНачДата);*/
			/*Запрос.УстановитьПараметр("КонДата", СтруктураШапкиДокумента.мКонДата);*/
			/*Запрос.УстановитьПараметр("ВыпускПродукцииПоФиксированнойСтоимости", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);*/
			/*РезультатЗапроса = Запрос.Выполнить();*/
			if(true/*Не РезультатЗапроса.Пустой()*/)
			{
				/*Выборка = РезультатЗапроса.Выбрать();*/
				while(true/*Выборка.Следующий()*/)
				{
					/*СпособВеденияПартионногоУчетаПоОрганизации = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(
				Выборка.Организация,
				СтруктураШапкиДокумента.мНачДата
			);*/
					/*Соответствие.Вставить(Выборка.Организация, СпособВеденияПартионногоУчетаПоОрганизации);*/
				}
				/*;;*/
			}
			return null;
		}
		// ПодготовитьСоответствиеСпособыВеденияПартионногоУчетаПоОрганизациям()

		public object КомиссионныйТовар(/*СчетУчета*/)
		{
			/*Комиссионный = Ложь;*/
			if(true/*НЕ ЗначениеЗаполнено(СчетУчета)*/)
			{
			}
			if(true/*ТипЗнч(СчетУчета) = Тип("ПланСчетовСсылка.Хозрасчетный")*/)
			{
				/*Комиссионный = СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыПринятыеНаКомиссию);*/
			}
			return null;
		}
		// КомиссионныйТовар()
		// Процедура считывает указанный реквизит объекта по ссылке без чтения всего объекта
		//

		public object ПрочитатьРеквизитДокумента(/*ИмяРеквизита, ДокументСсылка*/)
		{
			if(true/*ЗначениеЗаполнено(ДокументСсылка)*/)
			{
				/*МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипЗнч(ДокументСсылка));*/
				if(true/*МетаданныеДокумента <> Неопределено*/)
				{
					if(true/*МетаданныеДокумента.Реквизиты.Найти(ИмяРеквизита)<>Неопределено*/)
					{
						/*Запрос = Новый Запрос("Выбрать "+ИмяРеквизита+" Из Документ."+МетаданныеДокумента.Имя+" ГДЕ Ссылка = &Ссылка");*/
						/*Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);*/
						/*Выборка = Запрос.Выполнить().Выбрать();*/
						if(true/*Выборка.Следующий()*/)
						{
						}
					}
				}
			}
			return null;
		}

		public object ПолучитьСтруктруУчетнойПолитикиДляПроведенияПоПартиям(/*Упр = Истина, Бух = Истина, Нал = Истина, Меж = Истина*/)
		{
			/*СтруктраУчетнойПолитики = Новый Структура();*/
			if(true/*Упр*/)
			{
				/*СтруктраУчетнойПолитики.Вставить("Упр",Новый Структура());*/
				/*//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
*/
				/*СтруктраУчетнойПолитики.Упр.Вставить("СпособОценкиМПЗ","УчетнаяПолитика.СпособОценкиМПЗ");*/
				/*СтруктраУчетнойПолитики.Упр.Вставить("СписыватьПартииПриПроведенииДокументов","Константы.СписыватьПартииПриПроведенииДокументов");*/
				/*СтруктраУчетнойПолитики.Упр.Вставить("ВестиПартионныйУчетПоСкладам","Константы.ВестиПартионныйУчетПоСкладам");*/
				/*СтруктраУчетнойПолитики.Упр.Вставить("СтратегияСписанияПоСтатусам","Константы.СтратегияСписанияПартийТоваровПоСтатусам");*/
				/*СтруктраУчетнойПолитики.Упр.Вставить("УчетЗатратПоЗаказамНаПроизводство","УчетнаяПолитика.УчетЗатратПоЗаказамНаПроизводство");*/
				/*//Параметры специфичные для упр. учета
*/
				/*СтруктраУчетнойПолитики.Упр.Вставить("СпособВеденияПартионногоУчетаПоОрганизации","НастройкаСпособовВеденияУправленческогоПартионногоУчета.СпособВеденияПартионногоУчетаПоОрганизации");*/
				/*СтруктраУчетнойПолитики.Упр.Вставить("НеВключатьНДСВСтоимостьПартий","УчетнаяПолитика.НеВключатьНДСВСтоимостьПартий");*/
			}
			if(true/*Бух ИЛИ Нал*/)
			{
				/*//Для Бух учета
*/
				/*СтруктраУчетнойПолитики.Вставить("Бух",Новый Структура());*/
				/*//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
*/
				/*СтруктраУчетнойПолитики.Бух.Вставить("СпособОценкиМПЗ",							"УчетнаяПолитикаОрганизаций.СпособОценкиМПЗ");*/
				/*СтруктраУчетнойПолитики.Бух.Вставить("СписыватьПартииПриПроведенииДокументов",	"Константы.СписыватьПартииПриПроведенииДокументовБух");*/
				/*СтруктраУчетнойПолитики.Бух.Вставить("ВестиПартионныйУчетПоСкладам",			"Константы.ВестиПартионныйУчетПоСкладамРегл");*/
				/*СтруктраУчетнойПолитики.Бух.Вставить("СтратегияСписанияПоСтатусам",				"Константы.СтратегияСписанияПартийТоваровПоСтатусам");*/
				/*СтруктраУчетнойПолитики.Бух.Вставить("УчетЗатратПоЗаказамНаПроизводство",		"УчетнаяПолитикаОрганизаций.УчетЗатратПоЗаказамНаПроизводство");*/
				/*СтруктраУчетнойПолитики.Бух.Вставить("СистемаНалогообложения",					"УчетнаяПолитикаОрганизаций.СистемаНалогообложения");*/
				/*//Параметры специфичные для бух. учета
*/
				/*СтруктраУчетнойПолитики.Бух.Вставить("МоментОпределенияНалоговойБазыНДС","УчетнаяПолитикаОрганизаций.МоментОпределенияНалоговойБазыНДС");*/
				/*//Для Нал учета
*/
				/*СтруктраУчетнойПолитики.Вставить("Нал",Новый Структура());*/
				/*//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
*/
				/*СтруктраУчетнойПолитики.Нал.Вставить("СпособОценкиМПЗ","УчетнаяПолитикаОрганизаций.СпособОценкиМПЗ");*/
				/*СтруктраУчетнойПолитики.Нал.Вставить("СписыватьПартииПриПроведенииДокументов","Константы.СписыватьПартииПриПроведенииДокументовБух");*/
				/*СтруктраУчетнойПолитики.Нал.Вставить("ВестиПартионныйУчетПоСкладам","Константы.ВестиПартионныйУчетПоСкладамРегл");*/
				/*СтруктраУчетнойПолитики.Нал.Вставить("СтратегияСписанияПоСтатусам","Константы.СтратегияСписанияПартийТоваровПоСтатусам");*/
				/*СтруктраУчетнойПолитики.Нал.Вставить("УчетЗатратПоЗаказамНаПроизводство","УчетнаяПолитикаОрганизаций.УчетЗатратПоЗаказамНаПроизводство");*/
				/*//Параметры специфичные для нал. учета
*/
				/*СтруктраУчетнойПолитики.Нал.Вставить("СложныйУчетНДС","УчетнаяПолитикаОрганизаций.СложныйУчетНДС");*/
				/*СтруктраУчетнойПолитики.Нал.Вставить("РозничнаяТорговляОблагаетсяЕНВД","УчетнаяПолитикаОрганизаций.РозничнаяТорговляОблагаетсяЕНВД");*/
				/*СтруктраУчетнойПолитики.Нал.Вставить("ОбъектНалогообложенияУСН","УчетнаяПолитикаОрганизаций.ОбъектНалогообложенияУСН");*/
			}
			if(true/*Меж*/)
			{
				/*СтруктраУчетнойПолитики.Вставить("Меж",Новый Структура());*/
				/*//Параметры необходимые для универсального проведения по партиям (совпадают для всех учетов)
*/
				/*СтруктраУчетнойПолитики.Меж.Вставить("СпособОценкиМПЗ","УчетнаяПолитикаОрганизаций.СпособОценкиМПЗ");*/
				/*СтруктраУчетнойПолитики.Меж.Вставить("ВестиПартионныйУчетПоСкладам","Константы.ВестиПартионныйУчетПоСкладамРегл");*/
				/*СтруктраУчетнойПолитики.Меж.Вставить("СтратегияСписанияПоСтатусам","Константы.СтратегияСписанияПартийТоваровПоСтатусам");*/
				/*СтруктраУчетнойПолитики.Меж.Вставить("УчетЗатратПоЗаказамНаПроизводство","УчетнаяПолитикаОрганизаций.УчетЗатратПоЗаказамНаПроизводство");*/
			}
			return null;
		}
		// Возвращает таблицу значений с данными учетной политики для всех организаций
		// Данные берутся на заданный момент времени
		//
		// Параметры:
		//	Момент времени, дата
		//
		// Возварщаемое значение:
		//	Таблица значений
		//

		public object ПолучитьУчетнуюПолитику(/*МоментКон, Упр = Истина, Бух = Истина, Нал = Истина, Меж = Истина, Организация = Неопределено*/)
		{
			if(true/*НЕ (Упр ИЛИ Бух ИЛИ Нал ИЛИ Меж)*/)
			{
			}
			/*СтруктраУчетнойПолитики = ПолучитьСтруктруУчетнойПолитикиДляПроведенияПоПартиям(Упр, Бух, Нал, Меж);*/
			/*ТекстЗапроса = "ВЫБРАТЬ";*/
			/*ТекстСписокТаблиц = "
	|ИЗ";*/
			/*//Удалим последнюю запятую
*/
			/*ТекстЗапроса = Лев(ТекстЗапроса,СтрДлина(ТекстЗапроса)-1);*/
			/*ТекстСписокТаблиц = Лев(ТекстСписокТаблиц,СтрДлина(ТекстСписокТаблиц)-1);*/
			/*Запрос = Новый Запрос(ТекстЗапроса + ТекстСписокТаблиц);*/
			/*Запрос.УстановитьПараметр("Организация",Организация);*/
			if(true/*ТипЗнч(МоментКон) = Тип("Дата")*/)
			{
				/*Запрос.УстановитьПараметр("ДатаСреза", МоментКон);*/
			}
			/*РезультатЗапроса = Запрос.Выполнить();*/
			if(true/*РезультатЗапроса.Пустой()*/)
			{
			}
			/*Выборка = РезультатЗапроса.Выбрать();*/
			/*Выборка.Следующий();*/
			/*Результат = Новый Структура();*/
			return null;
		}
		// ПолучитьУчетнуюПолитику()
		// Читает заданные в структуре реквизиты объекта, переданного ссылкой
		//

		public void ПолучитьРеквизитыОбъекта(/*ДокументСсылка, СтруктураРеквизитов*/)
		{
			/*ТипДок = ТипЗнч(ДокументСсылка);*/
			/*МетаДок = Метаданные.НайтиПоТипу(ТипДок);*/
			if(true/*Справочники.ТипВсеСсылки().СодержитТип(ТипДок)*/)
			{
				/*НазваниеТаблицы = "Справочник."+МетаДок.Имя;*/
			}
			if(true/*МетаДок <> Неопределено*/)
			{
				/*СтрРеквизиты = "";*/
				/*Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	" + Сред(СтрРеквизиты, 2) +"
		|ИЗ
		|	"+НазваниеТаблицы+"
		|
		|ГДЕ
		|	Ссылка = &Ссылка");*/
				/*Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);*/
				/*Выборка = Запрос.Выполнить().Выбрать();*/
				if(true/*Выборка.Следующий()*/)
				{
					/*ЗаполнитьЗначенияСвойств(СтруктураРеквизитов, Выборка);*/
				}
			}
		}
		// Получает параметр учетной политики для заданной организации по заданному учету
		// Перед использованием функции должна быть заполнена таблица параметров учетной политики
		//
		// Параметры:
		//	ИмяПараметра - Строка, имя запрашиваемого параметра учетной политики,
		//	Учет         - Может принимать три значения: "Упр", "Бух", "Нал", "Меж". Задает учет
		//	СтруктураПараметров - структура, содержащая все общие параметры.
		//
		// Возвращаемое значение:
		//	Значение учетной политики
		//

		public object ПолучитьПараметрУчетнойПолитикиПартионногоУчета(/*ИмяПараметра, Учет, СтруктураПараметров*/)
		{
			/*УчетнаяПолитика = Неопределено;*/
			/*СтрокаУчетнойПолитики = Неопределено;*/
			/*ЗначениеПараметраУчетнойПолитики = Неопределено;*/
			if(true/*СтруктураПараметров.Свойство("УчетнаяПолитика",УчетнаяПолитика)
 	  И ТипЗНЧ(УчетнаяПолитика) = Тип("Структура")
	  И УчетнаяПолитика.Свойство(Учет, СтрокаУчетнойПолитики)
	  И СтрокаУчетнойПолитики.Свойство(ИмяПараметра,ЗначениеПараметраУчетнойПолитики)*/)
			{
			}
			return null;
		}
		// ПолучитьПараметрУчетнойПолитикиПартионногоУчета()
		// Объект Описание типов с одним типом Подразделения
		//
		// Параметры
		//  Нет.
		//
		// Возвращаемое значение:
		//   Объект Описание типов с типом Подразделения
		//

		public object ПолучитьОписаниеТиповПодразделения(/**/)
		{
			/*МассивТипов = Новый Массив;*/
			/*МассивТипов.Добавить(Тип("СправочникСсылка.Подразделения"));*/
			return null;
		}
		// Объект Описание типов с типами - заказами
		//
		// Параметры
		//  Нет.
		//
		// Возвращаемое значение:
		//   Объект Описание типов с типом ЗаказПокупателя
		//

		public object ПолучитьОписаниеТиповЗаказ(/**/)
		{
			/*МассивТипов = Новый Массив;*/
			/*МассивТипов.Добавить(Тип("ДокументСсылка.ЗаказПокупателя"));*/
			return null;
		}
		// ПолучитьОписаниеТиповЗаказ()
		// Преобразует код операции в направление списания
		//
		// Параметры:
		//	КодОперации   - код операции по регистру партий
		//	СтатьяЗатрат  - статья затрат, определяющая направление списания в производство.
		//
		// Возвращаемое значение:
		//	Направление списания.
		//

		public object ПолучитьНаправлениеСписанияПоКодуОперации(/*КодОперации, СтатьяЗатрат = Неопределено, СчетЗатрат = Неопределено, ИмяПланСчетов = "Хозрасчетный"*/)
		{
			/*КодыОпераций = Перечисления.КодыОперацийПартииТоваров;*/
			if(true/*КодОперации=КодыОпераций.Реализация 
		ИЛИ КодОперации=КодыОпераций.РеализацияКомиссия
		ИЛИ КодОперации=КодыОпераций.РеализацияРозница
		ИЛИ КодОперации=КодыОпераций.ВозвратОтПокупателя 
		ИЛИ КодОперации=КодыОпераций.ВозвратОтПокупателяТекущийМесяц*/)
			{
				/*НаправлениеСписания = "СебестоимостьПродаж";*/
			}
			/*// Для регламентированного учета направление списания определяется 
*/
			/*// по счету затрат если он задан
*/
			if(true/*(ЗначениеЗаполнено(СчетЗатрат)) 
	  И ((КодОперации = КодыОпераций.СписаниеПартийВПроизводствоОперативно)
	    ИЛИ (КодОперации = КодыОпераций.СписаниеНаБрак) 
		ИЛИ (КодОперации = КодыОпераций.СписаниеНаВложенияВоВнеоборотныеАктивы)
		ИЛИ (КодОперации = КодыОпераций.СписаниеНаЗатраты)
		ИЛИ (КодОперации = КодыОпераций.СписаниеПартийПереданныхВПроизводство))*/)
			{
				/*ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетЗатрат, СтатьяЗатрат, ИмяПланСчетов);*/
				if(true/*ХарактерЗатрат = Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы*/)
				{
					/*НаправлениеСписания = "ОбщехозяйственныеРасходы";*/
				}
			}
			return null;
		}
		// ПолучитьНаправлениеСписанияПоКодуОперации(КодОперации)
		// Возвращает строковое описание регистра-источника для заданного кода операции
		//
		// Параметры:
		//	КодОперации   - код операции по регистру партий
		//
		// Возвращаемое значение:
		//	Источник списания.
		//

		public object ПолучитьИсточникПоКодуОперации(/*КодОперации*/)
		{
			/*КодыОпераций = Перечисления.КодыОперацийПартииТоваров;*/
			if(true/*КодОперации = КодыОпераций.Реализация
		ИЛИ КодОперации = КодыОпераций.РеализацияРозница
		ИЛИ КодОперации = КодыОпераций.ПередачаНаКомиссию 
		ИЛИ КодОперации = КодыОпераций.ВозвратПоставщику
		ИЛИ КодОперации = КодыОпераций.Комплектация
		ИЛИ КодОперации = КодыОпераций.КорректировкаСерийИХарактеристик
		ИЛИ КодОперации = КодыОпераций.КорректировкаКачества
		ИЛИ КодОперации = КодыОпераций.ПередачаТарыКонтрагенту
		ИЛИ КодОперации = КодыОпераций.ПеремещениеМеждуСкладами
		ИЛИ КодОперации = КодыОпераций.ПереоценкаПринятыхНаКомиссию
		ИЛИ КодОперации = КодыОпераций.РезервированиеПодЗаказ
		ИЛИ КодОперации = КодыОпераций.СнятиеРезерваПодЗаказ
		ИЛИ КодОперации = КодыОпераций.СписаниеНаЗатраты
		ИЛИ КодОперации = КодыОпераций.СписаниеПоИнвентаризации
		ИЛИ КодОперации = КодыОпераций.СписаниеПоОрдеру
		ИЛИ КодОперации = КодыОпераций.ВключениеАктиваВСоставМПЗ*/)
			{
			}
			if(true/*КодОперации = КодыОпераций.ВозвратОтКомиссионера
		ИЛИ КодОперации = КодыОпераций.РеализацияКомиссия
		ИЛИ КодОперации = КодыОпераций.ВозвратОтПереработчика
		ИЛИ КодОперации = КодыОпераций.СписаниеПартийПереданныхВПроизводство*/)
			{
			}
			/*// По умолчанию
*/
			return null;
		}
		// ПолучитьИсточникПоКоду()
		// Общая процедура для добавления записей в набор записей с сопутствующими действиями.
		// Добавляет строку в таблицу движений, инкрементирует номер последней строки,
		// устанавливает признак модифицированности.
		//

		public object ДобавитьДвижениеВСтруктуруПараметров(/*ИмяРегистра, СтруктураПараметров*/)
		{
			/*Движение = СтруктураПараметров["ТаблицаДвижений" + ИмяРегистра].Добавить();*/
			/*// Увеличим счетчик движений на 1:
*/
			/*СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра] = СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра]+1;*/
			/*// Устанавливаем флаг модификации
*/
			/*СтруктураПараметров["ИзмененыДвижения"+ИмяРегистра] = Истина;*/
			return null;
		}
		// Создает наборы записей по регистрам управленческого учета
		//
		// Параметры:
		//	Нет.
		//

		public void СоздатьНаборыЗаписейУпр(/*СтруктураПараметров*/)
		{
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете*/)
			{
				/*СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахУпр",    РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеУпр",   РегистрыНакопления.ПартииТоваровПереданные.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияНезавершенноеПроизводствоУпр", РегистрыНакопления.НезавершенноеПроизводство.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияЗатратыУпр",                   РегистрыНакопления.Затраты.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияПродажиСебестоимость",       РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияСтроительствоОбъектовОсновныхСредств", РегистрыНакопления.СтроительствоОбъектовОсновныхСредств.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств", РегистрыНакопления.ЗатратыНаСтроительствоОбъектовОсновныхСредств.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияСтоимостьОСУпр", РегистрыНакопления.СтоимостьОС.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияОССписанныеНаЗатратыУпр", РегистрыНакопления.ОССписанныеНаЗатраты.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияБракВПроизводствеУпр", РегистрыНакопления.БракВПроизводстве.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияПартииМатериаловВЭксплуатацииУпр",       РегистрыНакопления.ПартииМатериаловВЭксплуатации.СоздатьНаборЗаписей());*/
				/*// Учет реализации принятых на комиссию товаров для отчета комитенту
*/
				/*СтруктураПараметров.Вставить("ДвиженияРеализованныеТовары",            РегистрыНакопления.РеализованныеТовары.СоздатьНаборЗаписей());*/
			}
		}
		// СоздатьНаборыЗаписейУпр()
		// Создает наборы записей по регистрам бухгалтерского и налогового учета
		//
		// Параметры:
		//	Нет.
		//

		public void СоздатьНаборыЗаписейРегл(/*СтруктураПараметров*/)
		{
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете*/)
			{
				/*СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахБух",   РегистрыНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеБух",  РегистрыНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияНезавершенноеПроизводствоБух",РегистрыНакопления.НезавершенноеПроизводствоБухгалтерскийУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияЗатратыБух",                  РегистрыНакопления.ЗатратыБухгалтерскийУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияСтоимостьОСБух",              РегистрыНакопления.СтоимостьОСБухгалтерскийУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияОССписанныеНаЗатратыБух", РегистрыНакопления.ОССписанныеНаЗатратыОрганизаций.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияБракВПроизводствеБух", РегистрыНакопления.БракВПроизводствеБухгалтерскийУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияПартииМатериаловВЭксплуатацииБух",    РегистрыНакопления.ПартииМатериаловВЭксплуатацииБухгалтерскийУчет.СоздатьНаборЗаписей());*/
				/*// Учет НДС
*/
				/*СтруктураПараметров.Вставить("ДвиженияНДСПартииТоваров",            РегистрыНакопления.НДСПартииТоваров.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияНДСНезавершенноеПроизводство",РегистрыНакопления.НДСНезавершенноеПроизводство.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияНДСКосвенныеРасходы",         РегистрыНакопления.НДСКосвенныеРасходы.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияНДСПредъявленный",            РегистрыНакопления.НДСПредъявленный.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияНДСВключенныйВСтоимость",     РегистрыНакопления.НДСВключенныйВСтоимость.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияНДСПредъявленныйРеализация0", РегистрыНакопления.НДСПредъявленныйРеализация0.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияНДСНачисленный",				РегистрыНакопления.НДСНачисленный.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияНДСРеализация0",				РегистрыНакопления.НДСРеализация0.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияНДСпоОСиНМА",					РегистрыНакопления.НДСпоОСиНМА.СоздатьНаборЗаписей());*/
				/*// Проводки
*/
				/*СтруктураПараметров.Вставить("ДвиженияХозрасчетный",                РегистрыБухгалтерии.Хозрасчетный.СоздатьНаборЗаписей());*/
			}
			/*// При включении НДС в стоимость отражение в налоговом учете должно производиться одновременно с отражением в бухгалтерском учете
*/
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете Или СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете*/)
			{
				/*СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахНал", РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеНал",РегистрыНакопления.ПартииТоваровПереданныеНалоговыйУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияНезавершенноеПроизводствоНал", РегистрыНакопления.НезавершенноеПроизводствоНалоговыйУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияЗатратыНал",                РегистрыНакопления.ЗатратыНалоговыйУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияСтоимостьОСНал",            РегистрыНакопления.СтоимостьОСНалоговыйУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияБракВПроизводствеНал", РегистрыНакопления.БракВПроизводствеНалоговыйУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияПартииМатериаловВЭксплуатацииНал",  РегистрыНакопления.ПартииМатериаловВЭксплуатацииНалоговыйУчет.СоздатьНаборЗаписей());*/
				/*// Проводки
*/
				/*СтруктураПараметров.Вставить("ДвиженияНалоговый",                 РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей());*/
			}
		}
		// СоздатьНаборыЗаписейРегл()
		// Создает наборы записей по регистрам международного учета
		//
		// Параметры:
		//	Нет.
		//

		public void СоздатьНаборыЗаписейМеж(/*СтруктураПараметров*/)
		{
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете*/)
			{
				/*СтруктураПараметров.Вставить("ДвиженияПартииТоваровНаСкладахМеж", РегистрыНакопления.ПартииТоваровНаСкладахМеждународныйУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияПартииТоваровПереданныеМеж",РегистрыНакопления.ПартииТоваровПереданныеМеждународныйУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияНезавершенноеПроизводствоМеж",  РегистрыНакопления.НезавершенноеПроизводствоМеждународныйУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияБракВПроизводствеМеж", РегистрыНакопления.БракВПроизводствеМеждународныйУчет.СоздатьНаборЗаписей());*/
				/*СтруктураПараметров.Вставить("ДвиженияЗатратыМеж",  РегистрыНакопления.ЗатратыМеждународныйУчет.СоздатьНаборЗаписей());*/
				/*// Проводки
*/
				/*СтруктураПараметров.Вставить("ДвиженияМеждународный",             РегистрыБухгалтерии.Международный.СоздатьНаборЗаписей());*/
			}
		}
		// СоздатьНаборыЗаписейУпр()
		// Создает наборы записей для заданных учетов.
		//

		public void СоздатьНаборыЗаписей(/*СтруктураПараметров, ТаблицаСписания = Неопределено, Регистратор =Неопределено */)
		{
			/*СоздатьНаборыЗаписейУпр(СтруктураПараметров);*/
			/*СоздатьНаборыЗаписейРегл(СтруктураПараметров);*/
			/*СоздатьНаборыЗаписейМеж(СтруктураПараметров);*/
		}
		// Подготовка наборов записей по регистрам Упр учета к добавлению в них строк
		//
		// Параметры:
		//	Нет.
		//

		public void ПодготовитьНаборыЗаписейУпр(/*СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи*/)
		{
			/*ОтражатьВУправленческомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете;*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладахУпр", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровПереданныеУпр", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНезавершенноеПроизводствоУпр", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыУпр", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияПродажиСебестоимость", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияСтроительствоОбъектовОсновныхСредств", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияСтоимостьОСУпр", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияОССписанныеНаЗатратыУпр", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияБракВПроизводствеУпр", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияРеализованныеТовары", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияПартииМатериаловВЭксплуатацииУпр", Ложь);*/
			if(true/*ОтражатьВУправленческомУчете*/)
			{
				/*СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Очистить();*/
				/*СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Очистить();*/
				/*СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияНезавершенноеПроизводствоУпр.Очистить();*/
				/*СтруктураПараметров.ДвиженияНезавершенноеПроизводствоУпр.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияЗатратыУпр.Очистить();*/
				/*СтруктураПараметров.ДвиженияЗатратыУпр.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияПродажиСебестоимость.Очистить();*/
				/*СтруктураПараметров.ДвиженияПродажиСебестоимость.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредств.Очистить();*/
				/*СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредств.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств.Очистить();*/
				/*СтруктураПараметров.ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияСтоимостьОСУпр.Очистить();*/
				/*СтруктураПараметров.ДвиженияСтоимостьОСУпр.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияОССписанныеНаЗатратыУпр.Очистить();*/
				/*СтруктураПараметров.ДвиженияОССписанныеНаЗатратыУпр.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияБракВПроизводствеУпр.Очистить();*/
				/*СтруктураПараметров.ДвиженияБракВПроизводствеУпр.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииУпр.Отбор.Регистратор.Установить(Регистратор);*/
				/*// Таблицы движений:
*/
				/*// Для партий на складах
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахУпр", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Очистить();*/
				/*// Служебные колонки
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*// Валюты и курсы - для пересчета
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ВалютаДокумента");*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КурсДокумента");*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КратностьДокумента");*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*// Количество поступления - для комплектации
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладах", Регистратор));*/
				}
				/*// Для партий товаров переданных
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеУпр", СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Очистить();*/
				/*// Служебные колонки
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*// Валюты и курсы - для пересчета
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ВалютаДокумента");*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КурсДокумента");*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КратностьДокумента");*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*// Количество поступления - для комплектации
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровПереданные", Регистратор));*/
				}
				/*// Для товаров, переданных в производство
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийНезавершенноеПроизводствоУпр", СтруктураПараметров.ДвиженияНезавершенноеПроизводствоУпр.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоУпр.Очистить();*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводство", Регистратор));*/
				}
				/*// Для товаров, списанных на затраты
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыУпр", СтруктураПараметров.ДвиженияЗатратыУпр.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийЗатратыУпр.Очистить();*/
				if(true/*Не ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("Затраты", Регистратор));*/
				}
				/*// Для МПЗ, списанных на себестоимость продаж
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийПродажиСебестоимость", СтруктураПараметров.ДвиженияПродажиСебестоимость.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийПродажиСебестоимость.Очистить();*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиПродажиСебестоимость", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПродажиСебестоимость", Регистратор));*/
				}
				/*// Для строительства объектов ОС
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийСтроительствоОбъектовОсновныхСредств", СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредств.Выгрузить());*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиСтроительствоОбъектовОсновныхСредств", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("СтроительствоОбъектовОсновныхСредств", Регистратор));*/
				}
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыНаСтроительствоОбъектовОсновныхСредств", СтруктураПараметров.ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств.Выгрузить());*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыНаСтроительствоОбъектовОсновныхСредств", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ЗатратыНаСтроительствоОбъектовОсновныхСредств", Регистратор));*/
				}
				/*// Для принятия к учету ОС
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийОССписанныеНаЗатратыУпр", СтруктураПараметров.ДвиженияОССписанныеНаЗатратыУпр.Выгрузить());*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиОССписанныеНаЗатратыУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ОССписанныеНаЗатраты", Регистратор));*/
				}
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийСтоимостьОСУпр", СтруктураПараметров.ДвиженияСтоимостьОСУпр.Выгрузить());*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("СтоимостьОС", Регистратор));*/
				}
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийБракВПроизводствеУпр", СтруктураПараметров.ДвиженияБракВПроизводствеУпр.Выгрузить());*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("БракВПроизводстве", Регистратор));*/
				}
				/*СтруктураПараметров.ДвиженияРеализованныеТовары.Очистить();*/
				/*СтруктураПараметров.ДвиженияРеализованныеТовары.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийРеализованныеТовары", СтруктураПараметров.ДвиженияРеализованныеТовары.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийРеализованныеТовары.Очистить();*/
				/*СтруктураПараметров.Вставить("ТекНомерСтрокиРеализованныеТовары", 0);*/
				/*// Для метериалов, переданных в эксплуатацию
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийПартииМатериаловВЭксплуатацииУпр", СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииУпр.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииУпр.Очистить();*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииУпр", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииМатериаловВЭксплуатации", Регистратор));*/
				}
			}
		}
		// ПодготовитьНаборыЗаписейУпр()
		// Подготовка наборов записей по регистрам бух и нал учета к добавлению в них строк
		//
		// Параметры:
		//	Нет.
		//

		public void ПодготовитьНаборыЗаписейРегл(/*СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи*/)
		{
			/*ОтражатьВБухгалтерскомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете;*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладахБух", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровПереданныеБух", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНезавершенноеПроизводствоБух", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыБух", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияХозрасчетный", Ложь);*/
			/*// НДС	
*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПартииТоваров",             Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНДСНезавершенноеПроизводство", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНДСКосвенныеРасходы",          Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПредъявленный",			 Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНДСНачисленный",				 Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНДСРеализация0",				 Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНДСВключенныйВСтоимость",		 Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНДСПредъявленныйРеализация0",	 Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНДСпоОСиНМА",					 Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияСтоимостьОСБух", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияОССписанныеНаЗатратыБух", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияБракВПроизводствеБух", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияПартииМатериаловВЭксплуатацииБух", Ложь);*/
			if(true/*ОтражатьВБухгалтерскомУчете*/)
			{
				/*// Бухгалтерские
*/
				/*СтруктураПараметров.ДвиженияПартииТоваровНаСкладахБух.Очистить();*/
				/*СтруктураПараметров.ДвиженияПартииТоваровПереданныеБух.Очистить();*/
				/*СтруктураПараметров.ДвиженияПартииТоваровНаСкладахБух.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияПартииТоваровПереданныеБух.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияНезавершенноеПроизводствоБух.Очистить();*/
				/*СтруктураПараметров.ДвиженияНезавершенноеПроизводствоБух.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияЗатратыБух.Очистить();*/
				/*СтруктураПараметров.ДвиженияЗатратыБух.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияСтоимостьОСБух.Очистить();*/
				/*СтруктураПараметров.ДвиженияСтоимостьОСБух.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияОССписанныеНаЗатратыБух.Очистить();*/
				/*СтруктураПараметров.ДвиженияОССписанныеНаЗатратыБух.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияБракВПроизводствеБух.Очистить();*/
				/*СтруктураПараметров.ДвиженияБракВПроизводствеБух.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииБух.Очистить();*/
				/*СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииБух.Отбор.Регистратор.Установить(Регистратор);*/
				if(true/*Не ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииМатериаловВЭксплуатацииБухгалтерскийУчет", Регистратор));*/
				}
				/*// Таблицы значений с движениями
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахБух", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахБух.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Очистить();*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеБух", СтруктураПараметров.ДвиженияПартииТоваровПереданныеБух.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Очистить();*/
				/*// Служебные колонки
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*// Количество поступления - для комплектации
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
				/*СтруктураПараметров.ДвиженияХозрасчетный.Очистить();*/
				/*СтруктураПараметров.ДвиженияХозрасчетный.Отбор.Регистратор.Установить(Регистратор);*/
				if(true/*Не ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладахБухгалтерскийУчет", Регистратор));*/
				}
				/*// Служебные колонки
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*// Количество поступления - для комплектации
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровПереданныеБухгалтерскийУчет", Регистратор));*/
				}
				/*// Для МПЗ, переданных в производство
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийНезавершенноеПроизводствоБух", СтруктураПараметров.ДвиженияНезавершенноеПроизводствоБух.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоБух.Очистить();*/
				if(true/*Не ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоБухгалтерскийУчет", Регистратор));*/
					/*СтруктураПараметров.Вставить("НачНомерСтрокиНезавершенноеПроизводствоБух", СтруктураПараметров.ТекНомерСтрокиНезавершенноеПроизводствоБух);*/
				}
				/*// Для товаров, списанных на затраты
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыБух", СтруктураПараметров.ДвиженияЗатратыБух.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийЗатратыБух.Очистить();*/
				if(true/*Не ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ЗатратыБухгалтерскийУчет", Регистратор));*/
				}
				/*// НДС
*/
				/*СтруктураПараметров.ДвиженияНДСПартииТоваров.Очистить();*/
				/*СтруктураПараметров.ДвиженияНДСПартииТоваров.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияНДСНезавершенноеПроизводство.Очистить();*/
				/*СтруктураПараметров.ДвиженияНДСНезавершенноеПроизводство.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияНДСКосвенныеРасходы.Очистить();*/
				/*СтруктураПараметров.ДвиженияНДСКосвенныеРасходы.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияНДСПредъявленный.Очистить();*/
				/*СтруктураПараметров.ДвиженияНДСПредъявленный.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость.Очистить();*/
				/*СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0.Очистить();*/
				/*СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияНДСНачисленный.Очистить();*/
				/*СтруктураПараметров.ДвиженияНДСНачисленный.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияНДСРеализация0.Очистить();*/
				/*СтруктураПараметров.ДвиженияНДСРеализация0.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияНДСпоОСиНМА.Очистить();*/
				/*СтруктураПараметров.ДвиженияНДСпоОСиНМА.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПартииТоваров",               СтруктураПараметров.ДвиженияНДСПартииТоваров.Выгрузить());*/
				/*// Служебные колонки
*/
				/*СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров.Колонки.Добавить("КодОперацииПартииТоваров",Новый ОписаниеТипов("ПеречислениеСсылка.КодыОперацийПартииТоваров"));*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийНДСНезавершенноеПроизводство", СтруктураПараметров.ДвиженияНДСНезавершенноеПроизводство.Выгрузить());*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийНДСКосвенныеРасходы",          СтруктураПараметров.ДвиженияНДСКосвенныеРасходы.Выгрузить());*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПредъявленный",          СтруктураПараметров.ДвиженияНДСПредъявленный.Выгрузить());*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийНДСВключенныйВСтоимость",          СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость.Выгрузить());*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийНДСПредъявленныйРеализация0",          СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0.Выгрузить());*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийНДСНачисленный",          СтруктураПараметров.ДвиженияНДСНачисленный.Выгрузить());*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийНДСРеализация0",          СтруктураПараметров.ДвиженияНДСРеализация0.Выгрузить());*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийНДСпоОСиНМА",          СтруктураПараметров.ДвиженияНДСпоОСиНМА.Выгрузить());*/
				/*СтруктураПараметров.Вставить("ТекНомерСтрокиНДСПартииТоваров", 0);*/
				/*СтруктураПараметров.Вставить("ТекНомерСтрокиНДСНезавершенноеПроизводство", 0);*/
				/*СтруктураПараметров.Вставить("ТекНомерСтрокиНДСКосвенныеРасходы", 0);*/
				/*СтруктураПараметров.Вставить("ТекНомерСтрокиНДСПредъявленный", 0);*/
				/*СтруктураПараметров.Вставить("ТекНомерСтрокиНДСПредъявленныйРеализация0", 0);*/
				/*СтруктураПараметров.Вставить("ТекНомерСтрокиНДСНачисленный", 0);*/
				/*СтруктураПараметров.Вставить("ТекНомерСтрокиНДСРеализация0", 0);*/
				/*СтруктураПараметров.Вставить("ТекНомерСтрокиНДСпоОСиНМА", 0);*/
				/*СтруктураПараметров.Вставить("ТекНомерСтрокиНДСВключенныйВСтоимость", 0);*/
				/*// Для принятия к учету ОС
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийОССписанныеНаЗатратыБух", СтруктураПараметров.ДвиженияОССписанныеНаЗатратыБух.Выгрузить());*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиОССписанныеНаЗатратыБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ОССписанныеНаЗатратыОрганизаций", Регистратор));*/
				}
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийСтоимостьОСБух", СтруктураПараметров.ДвиженияСтоимостьОСБух.Выгрузить());*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("СтоимостьОСБухгалтерскийУчет", Регистратор));*/
				}
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийБракВПроизводствеБух", СтруктураПараметров.ДвиженияБракВПроизводствеБух.Выгрузить());*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("БракВПроизводствеБухгалтерскийУчет", Регистратор));*/
				}
				/*// Для метериалов, переданных в эксплуатацию
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийПартииМатериаловВЭксплуатацииБух", СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииБух.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииБух.Очистить();*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииБух", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииМатериаловВЭксплуатацииБухгалтерскийУчет", Регистратор));*/
				}
			}
			/*ОтражатьВНалоговомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете;*/
			if(true/*ОтражатьВБухгалтерскомУчете*/)
			{
				/*// При включении НДС в стоимость отражение в налоговом учете должно производиться одновременно с отражением в бухгалтерском учете
*/
				if(true/*Регистратор.Метаданные().Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено*/)
				{
					/*СтруктураРеквизитовДокумента = Новый Структура("ОтражатьВНалоговомУчете");*/
					/*ПолучитьРеквизитыОбъекта(Регистратор, СтруктураРеквизитовДокумента);*/
					/*ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете ИЛИ СтруктураРеквизитовДокумента.ОтражатьВНалоговомУчете;*/
				}
			}
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладахНал", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровПереданныеНал", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНезавершенноеПроизводствоНал", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыНал", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНалоговый", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияСтоимостьОСНал", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияБракВПроизводствеНал", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияПартииМатериаловВЭксплуатацииНал", Ложь);*/
			if(true/*ОтражатьВНалоговомУчете*/)
			{
				/*// Налоговые
*/
				/*СтруктураПараметров.ДвиженияПартииТоваровНаСкладахНал.Очистить();*/
				/*СтруктураПараметров.ДвиженияПартииТоваровПереданныеНал.Очистить();*/
				/*СтруктураПараметров.ДвиженияПартииТоваровНаСкладахНал.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияПартииТоваровПереданныеНал.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияНезавершенноеПроизводствоНал.Очистить();*/
				/*СтруктураПараметров.ДвиженияНезавершенноеПроизводствоНал.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияЗатратыНал.Очистить();*/
				/*СтруктураПараметров.ДвиженияЗатратыНал.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияСтоимостьОСНал.Очистить();*/
				/*СтруктураПараметров.ДвиженияСтоимостьОСНал.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияБракВПроизводствеНал.Очистить();*/
				/*СтруктураПараметров.ДвиженияБракВПроизводствеНал.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииНал.Отбор.Регистратор.Установить(Регистратор);*/
				/*// Таблицы значений с движениями
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахНал", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахНал.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Очистить();*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеНал", СтруктураПараметров.ДвиженияПартииТоваровПереданныеНал.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Очистить();*/
				/*СтруктураПараметров.ДвиженияНалоговый.Очистить();*/
				/*СтруктураПараметров.ДвиженияНалоговый.Отбор.Регистратор.Установить(Регистратор);*/
				/*// Служебные колонки
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*// Количество поступления - для комплектации
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладахНалоговыйУчет", Регистратор));*/
				}
				/*// Служебные колонки
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*// Количество поступления - для комплектации
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровПереданныеНалоговыйУчет", Регистратор));*/
				}
				/*// Для МПЗ, переданных в производство
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийНезавершенноеПроизводствоНал", СтруктураПараметров.ДвиженияНезавершенноеПроизводствоНал.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоНал.Очистить();*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоНалоговыйУчет", Регистратор));*/
					/*СтруктураПараметров.Вставить("НачНомерСтрокиНезавершенноеПроизводствоНал", СтруктураПараметров.ТекНомерСтрокиНезавершенноеПроизводствоНал);*/
				}
				/*// Для товаров, списанных на затраты
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыНал", СтруктураПараметров.ДвиженияЗатратыНал.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийЗатратыНал.Очистить();*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ЗатратыНалоговыйУчет", Регистратор));*/
				}
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийСтоимостьОСНал", СтруктураПараметров.ДвиженияСтоимостьОСНал.Выгрузить());*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиСтоимостьОСНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("СтоимостьОСНалоговыйУчет", Регистратор));*/
				}
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийБракВПроизводствеНал", СтруктураПараметров.ДвиженияБракВПроизводствеНал.Выгрузить());*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("БракВПроизводствеНалоговыйУчет", Регистратор));*/
				}
				/*// Для метериалов, переданных в эксплуатацию
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийПартииМатериаловВЭксплуатацииНал", СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииНал.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииНал.Очистить();*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиПартииМатериаловВЭксплуатацииНал", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииМатериаловВЭксплуатацииНалоговыйУчет", Регистратор));*/
				}
			}
		}
		// Подготовка наборов записей по регистрам бух и нал учета к добавлению в них строк
		//
		// Параметры:
		//	Нет.
		//

		public void ПодготовитьНаборыЗаписейМеж(/*СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи*/)
		{
			/*ОтражатьВМеждународномУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете;*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровНаСкладахМеж", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияПартииТоваровПереданныеМеж", ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияНезавершенноеПроизводствоМеж", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияМеждународный", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияБракВПроизводствеМеж", Ложь);*/
			/*СтруктураПараметров.Вставить("ИзмененыДвиженияЗатратыМеж", Ложь);*/
			if(true/*ОтражатьВМеждународномУчете*/)
			{
				/*// Международные
*/
				/*СтруктураПараметров.ДвиженияПартииТоваровНаСкладахМеж.Очистить();*/
				/*СтруктураПараметров.ДвиженияПартииТоваровПереданныеМеж.Очистить();*/
				/*СтруктураПараметров.ДвиженияПартииТоваровНаСкладахМеж.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияПартииТоваровПереданныеМеж.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияНезавершенноеПроизводствоМеж.Очистить();*/
				/*СтруктураПараметров.ДвиженияНезавершенноеПроизводствоМеж.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияБракВПроизводствеМеж.Очистить();*/
				/*СтруктураПараметров.ДвиженияБракВПроизводствеМеж.Отбор.Регистратор.Установить(Регистратор);*/
				/*СтруктураПараметров.ДвиженияЗатратыМеж.Очистить();*/
				/*СтруктураПараметров.ДвиженияЗатратыМеж.Отбор.Регистратор.Установить(Регистратор);*/
				/*// Таблицы значений с движениями
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровНаСкладахМеж", СтруктураПараметров.ДвиженияПартииТоваровНаСкладахМеж.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Очистить();*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийПартииТоваровПереданныеМеж", СтруктураПараметров.ДвиженияПартииТоваровПереданныеМеж.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Очистить();*/
				/*СтруктураПараметров.ДвиженияМеждународный.Очистить();*/
				/*СтруктураПараметров.ДвиженияМеждународный.Отбор.Регистратор.Установить(Регистратор);*/
				/*// Служебные колонки
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*// Количество поступления - для комплектации
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
				/*СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровНаСкладахМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровНаСкладахМеждународныйУчет", Регистратор));*/
				/*// Служебные колонки
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("Заказ", ПолучитьОписаниеТиповЗаказ());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("СтоимостьПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("Подразделение", ПолучитьОписаниеТиповПодразделения());*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("СуммаВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("ВалютнаяСуммаЗадолженностиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*// Количество поступления - для комплектации
*/
				/*СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж.Колонки.Добавить("КоличествоПоступление", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
				/*СтруктураПараметров.Вставить("ТекНомерСтрокиПартииТоваровПереданныеМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ПартииТоваровПереданныеМеждународныйУчет", Регистратор));*/
				/*// Для МПЗ, переданных в производство
*/
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийНезавершенноеПроизводствоМеж", СтруктураПараметров.ДвиженияНезавершенноеПроизводствоМеж.Выгрузить());*/
				/*СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоМеж.Очистить();*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиНезавершенноеПроизводствоМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("НезавершенноеПроизводствоМеждународныйУчет", Регистратор));*/
				}
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийБракВПроизводствеМеж", СтруктураПараметров.ДвиженияБракВПроизводствеМеж.Выгрузить());*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиБракВПроизводствеМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("БракВПроизводствеМеждународныйУчет", Регистратор));*/
				}
				/*СтруктураПараметров.Вставить("ТаблицаДвиженийЗатратыМеж", СтруктураПараметров.ДвиженияЗатратыМеж.Выгрузить());*/
				if(true/*НЕ ЗамещатьПриЗаписи*/)
				{
					/*СтруктураПараметров.Вставить("ТекНомерСтрокиЗатратыМеж", ПолныеПрава.МаксНомерСтрокиВНабореЗаписей("ЗатратыМеждународныйУчет", Регистратор));*/
				}
			}
		}
		// Подготавливает параметры, необходимые для работы с наборами записей для заданных учетов.
		//

		public void ПодготовитьНаборыЗаписей(/*СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи = Истина, ИзмененыДвижения = Истина*/)
		{
			/*СтруктураПараметров.Вставить("Период",         Период);*/
			/*СтруктураПараметров.Вставить("Регистратор",    Регистратор);*/
			/*ПодготовитьНаборыЗаписейУпр(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи);*/
			/*ПодготовитьНаборыЗаписейРегл(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи);*/
			/*ПодготовитьНаборыЗаписейМеж(СтруктураПараметров, ТаблицаСписания, Период, Регистратор, ЗамещатьПриЗаписи);*/
			/*// Установим флаги модифицированности для наборов записей всех регистров, 
*/
			/*// для которых документ является регистратором
*/
			/*// и по которым у документа есть движения
*/
			/*// для того, чтобы набор записей был перезаписан 
*/
			/*// При вызове из обработки проведение по регистрам НДС модифицированность не устанавливаем
*/
			/*ТаблицаДвиженийРегистратора = ПолныеПрава.ОпределитьНаличиеДвиженийПоРегистратору(Регистратор);*/
		}
		// ПодготовитьНаборыЗаписей
		// Записывет набор записей в базу данных.
		//

		public void ЗаписатьДвижения(/*ДвиженияРегистра, ТаблицаДвиженийРегистра, Замещать, ДвижениеНДСПродукции = Ложь, ТолькоВключениеНДСВСтоимость = Неопределено*/)
		{
			/*// При замещении нужно удалять записи, сформированные прошлым списанием партий (СписаниеПартий=Истина),
*/
			/*// если у регистра есть реквизит СписаниеПартий, то нужно удалить строки с Истина
*/
			/*// Для списания партий НДС предусмотрены еще 2 реквизита СписаниеПартийНДС и НДСПродукции
*/
			/*// Движения по налоговому учету могут создаваться при проведении по бухгалтерскому учету если в документе
*/
			/*// установлен флаг "Отражать в налоговом учете"
*/
			/*ДМ = ДвиженияРегистра.Метаданные();*/
			/*ЕстьРеквизитСписаниеПартий = (ДМ.Реквизиты.Найти("СписаниеПартий") <> Неопределено);*/
			if(true/*Замещать И ЕстьРеквизитСписаниеПартий*/)
			{
				/*ЕстьРеквизитСписаниеПартийНДС = (ДМ.Реквизиты.Найти("СписаниеПартийНДС") <> Неопределено);*/
				/*ЕстьРеквизитНДСПродукции = (ДМ.Реквизиты.Найти("НДСПродукции") <> Неопределено);*/
				if(true/*ТаблицаДвиженийРегистра=Неопределено*/)
				{
					/*ТаблицаДвиженийРегистра = ДвиженияРегистра.Выгрузить();*/
				}
				/*// Установим УБ (эксклюзивную) перед чтением набора записей
*/
				if(true/*глЗначениеПеременной("ИспользоватьБлокировкуДанных")*/)
				{
					if(true/*Метаданные.РегистрыНакопления.Содержит(ДМ)*/)
					{
						/*ТипТаблицы = "РегистрНакопления";*/
					}
					/*СтруктураПараметровБлокировки = Новый Структура(
				"ТипТаблицы,ИмяТаблицы"
				,ТипТаблицы
				,ДМ.Имя + ".НаборЗаписей");*/
					/*СтруктураЗначенийБлокировки = Новый Структура("Регистратор", ДвиженияРегистра.Отбор.Регистратор.Значение);*/
					/*ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки,СтруктураЗначенийБлокировки,, Ложь, "");*/
				}
				/*ДвиженияРегистра.Прочитать();*/
				/*Инд = ДвиженияРегистра.Количество();*/
				while(true/*Инд >0*/)
				{
					/*Инд = Инд - 1;*/
					/*Удалять = Ложь;*/
					if(true/*ДвиженияРегистра[Инд].СписаниеПартий*/)
					{
						/*Удалять = Истина;*/
						if(true/*ЕстьРеквизитСписаниеПартийНДС*/)
						{
							/*//При проведении только по бухгалтерскому учету удаляем только движения 
*/
							/*//включения НДС в стоимость сформированные в бухучете
*/
							if(true/*ТолькоВключениеНДСВСтоимость = Истина*/)
							{
								/*Удалять = ДвиженияРегистра[Инд].СписаниеПартийНДС;*/
								/*// При проведении только по налоговому учету оставляем только движения
*/
								/*// включения НДС в стоимость, сформированные бухучетом
*/
							}
						}
					}
					if(true/*Удалять*/)
					{
						/*ДвиженияРегистра.Удалить(Инд);*/
					}
				}
				/*// Заполним параметр "Списание партий"
*/
				/*ТаблицаДвиженийРегистра.ЗаполнитьЗначения(Истина, "СписаниеПартий");*/
				/*ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(ДвиженияРегистра, ТаблицаДвиженийРегистра);*/
				/*ДвиженияРегистра.Записать(Истина);*/
			}
		}
		//ЗаписатьДвижения
		// Запись движений по упр. учету
		//
		// Параметры:
		//	Нет.
		//

		public void ЗаписатьДвиженияДокументаУпр(/*СтруктураПараметров, ТаблицаСписания, Замещать*/)
		{
			/*ОтражатьВУправленческомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете;*/
			if(true/*ОтражатьВУправленческомУчете*/)
			{
				/*// Управленческий учет
*/
				if(true/*СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладахУпр*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладахУпр, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахУпр, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияПартииТоваровПереданныеУпр*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровПереданныеУпр, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеУпр, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНезавершенноеПроизводствоУпр*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНезавершенноеПроизводствоУпр, 
			СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоУпр, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияПродажиСебестоимость*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияПродажиСебестоимость, 
			СтруктураПараметров.ТаблицаДвиженийПродажиСебестоимость, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияЗатратыУпр*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыУпр, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыУпр, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияСтроительствоОбъектовОсновныхСредств*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияСтроительствоОбъектовОсновныхСредств, 
			СтруктураПараметров.ТаблицаДвиженийСтроительствоОбъектовОсновныхСредств, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыНаСтроительствоОбъектовОсновныхСредств, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыНаСтроительствоОбъектовОсновныхСредств, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияСтоимостьОСУпр*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияСтоимостьОСУпр, 
			СтруктураПараметров.ТаблицаДвиженийСтоимостьОСУпр, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияОССписанныеНаЗатратыУпр*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияОССписанныеНаЗатратыУпр, 
			СтруктураПараметров.ТаблицаДвиженийОССписанныеНаЗатратыУпр, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияБракВПроизводствеУпр*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияБракВПроизводствеУпр, 
			СтруктураПараметров.ТаблицаДвиженийБракВПроизводствеУпр, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияПартииМатериаловВЭксплуатацииУпр*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииУпр, 
			СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииУпр, Замещать);*/
				}
				/*// Для отчета комитенту
*/
				if(true/*СтруктураПараметров.ИзмененыДвиженияРеализованныеТовары*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияРеализованныеТовары, 
			СтруктураПараметров.ТаблицаДвиженийРеализованныеТовары, Замещать);*/
				}
			}
		}
		// ЗаписатьДвиженияДокументаУпр()
		// Запись движений по бух и нал учету
		//
		// Параметры:
		//	Нет.
		//

		public void ЗаписатьДвиженияДокументаРегл(/*СтруктураПараметров, ТаблицаСписания, Замещать*/)
		{
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете*/)
			{
				/*// Бухгалтерский учет
*/
				if(true/*СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладахБух*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладахБух, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияПартииТоваровПереданныеБух*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровПереданныеБух, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеБух, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНезавершенноеПроизводствоБух*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНезавершенноеПроизводствоБух, 
			СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоБух, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияХозрасчетный*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияХозрасчетный, Неопределено, Замещать, СтруктураПараметров.Свойство("ТолькоДвиженияНДС"));*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияЗатратыБух*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыБух, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыБух, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНДСПартииТоваров*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСПартииТоваров, 
			СтруктураПараметров.ТаблицаДвиженийНДСПартииТоваров, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНДСНезавершенноеПроизводство*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСНезавершенноеПроизводство, 
			СтруктураПараметров.ТаблицаДвиженийНДСНезавершенноеПроизводство, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНДСКосвенныеРасходы*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСКосвенныеРасходы, 
			СтруктураПараметров.ТаблицаДвиженийНДСКосвенныеРасходы, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНДСПредъявленный*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСПредъявленный, 
			СтруктураПараметров.ТаблицаДвиженийНДСПредъявленный, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНДСВключенныйВСтоимость*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСВключенныйВСтоимость, 
			СтруктураПараметров.ТаблицаДвиженийНДСВключенныйВСтоимость, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНДСПредъявленныйРеализация0*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСПредъявленныйРеализация0, 
			СтруктураПараметров.ТаблицаДвиженийНДСПредъявленныйРеализация0, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНДСНачисленный*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСНачисленный, 
			СтруктураПараметров.ТаблицаДвиженийНДСНачисленный, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНДСРеализация0*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСРеализация0, 
			СтруктураПараметров.ТаблицаДвиженийНДСРеализация0, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНДСпоОСиНМА*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНДСпоОСиНМА, 
			СтруктураПараметров.ТаблицаДвиженийНДСпоОСиНМА, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияСтоимостьОСБух*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияСтоимостьОСБух, 
			СтруктураПараметров.ТаблицаДвиженийСтоимостьОСБух, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияОССписанныеНаЗатратыБух*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияОССписанныеНаЗатратыБух, 
			СтруктураПараметров.ТаблицаДвиженийОССписанныеНаЗатратыБух, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияБракВПроизводствеБух*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияБракВПроизводствеБух, 
			СтруктураПараметров.ТаблицаДвиженийБракВПроизводствеБух, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияПартииМатериаловВЭксплуатацииБух*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииБух, 
			СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииБух, Замещать);*/
				}
			}
			/*ОтражатьВНалоговомУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете;*/
			/*ТолькоВключениеНДСВСтоимость = Неопределено;*/
			if(true/*СтруктураПараметров.Свойство("ТолькоВключениеНДСВСтоимостьНУ", ТолькоВключениеНДСВСтоимость)*/)
			{
				/*ОтражатьВНалоговомУчете = Истина;*/
			}
			if(true/*ОтражатьВНалоговомУчете*/)
			{
				/*// Налоговый учет
*/
				if(true/*СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладахНал*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладахНал, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал, Замещать, , ТолькоВключениеНДСВСтоимость);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияПартииТоваровПереданныеНал*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровПереданныеНал, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеНал, Замещать, , ТолькоВключениеНДСВСтоимость);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНезавершенноеПроизводствоНал*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНезавершенноеПроизводствоНал, 
			СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоНал, Замещать, , ТолькоВключениеНДСВСтоимость);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНалоговый*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНалоговый, Неопределено, Замещать, , ТолькоВключениеНДСВСтоимость);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияЗатратыНал*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыНал, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыНал, Замещать, , ТолькоВключениеНДСВСтоимость);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияСтоимостьОСНал*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияСтоимостьОСНал, 
			СтруктураПараметров.ТаблицаДвиженийСтоимостьОСНал, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияБракВПроизводствеНал*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияБракВПроизводствеНал, 
			СтруктураПараметров.ТаблицаДвиженийБракВПроизводствеНал, Замещать, , ТолькоВключениеНДСВСтоимость);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияПартииМатериаловВЭксплуатацииНал*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииМатериаловВЭксплуатацииНал, 
			СтруктураПараметров.ТаблицаДвиженийПартииМатериаловВЭксплуатацииНал, Замещать, , ТолькоВключениеНДСВСтоимость);*/
				}
			}
		}
		// Запись движений по меж учету
		//
		// Параметры:
		//	Нет.
		//

		public void ЗаписатьДвиженияДокументаМеж(/*СтруктураПараметров, ТаблицаСписания, Замещать*/)
		{
			/*ОтражатьВМеждународномУчете = СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете;*/
			if(true/*ОтражатьВМеждународномУчете*/)
			{
				/*// Международный учет
*/
				if(true/*СтруктураПараметров.ИзмененыДвиженияПартииТоваровНаСкладахМеж*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровНаСкладахМеж, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахМеж, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияПартииТоваровПереданныеМеж*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияПартииТоваровПереданныеМеж, 
			СтруктураПараметров.ТаблицаДвиженийПартииТоваровПереданныеМеж, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияНезавершенноеПроизводствоМеж*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияНезавершенноеПроизводствомеж, 
			СтруктураПараметров.ТаблицаДвиженийНезавершенноеПроизводствоМеж, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияМеждународный*/)
				{
					/*СтруктураПараметров.ДвиженияМеждународный.Записать(Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияБракВПроизводствеМеж*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияБракВПроизводствеМеж, 
			СтруктураПараметров.ТаблицаДвиженийБракВПроизводствеМеж, Замещать);*/
				}
				if(true/*СтруктураПараметров.ИзмененыДвиженияЗатратыМеж*/)
				{
					/*ЗаписатьДвижения(СтруктураПараметров.ДвиженияЗатратыМеж, 
			СтруктураПараметров.ТаблицаДвиженийЗатратыМеж, Замещать);*/
				}
			}
		}
		// Процедура-вход для записи движений документа в базу данных
		//

		public void ЗаписатьДвиженияДокумента(/*СтруктураПараметров, ТаблицаСписания, Замещать = Истина*/)
		{
			/*// Управленческий учет
*/
			/*ЗаписатьДвиженияДокументаУпр(СтруктураПараметров, ТаблицаСписания, Замещать);*/
			/*// Бухгалтерский и налоговый учет
*/
			/*ЗаписатьДвиженияДокументаРегл(СтруктураПараметров, ТаблицаСписания, Замещать);*/
			/*// Международный учет
*/
			/*ЗаписатьДвиженияДокументаМеж(СтруктураПараметров, ТаблицаСписания, Замещать);*/
			/*// Запись наборов записей регистров, сформированных во внешних процедурах.
*/
			/*// Используется при погашении стоимости спецодежды, спецоснастки и инвентаря.
*/
			if(true/*СтруктураПараметров.Свойство("НаборыЗаписейРегистров")*/)
			{
				/*УправлениеЗатратамиДвиженияПоРегистрам.ЗаписатьНаборыЗаписейРегистров(СтруктураПараметров.НаборыЗаписейРегистров);*/
			}
		}
		// ЗаписатьДвиженияДокумента()
		// Бух
		// Проверка списываемой партии по бух учету
		//
		// Параметры:
		//	Нет.
		//
		// Возвращаемое значение:
		//	Булево
		//

		public object ПроверитьПартиюНаСкладеБух(/*СтрокаПартии, СтрокаДокумента, СтруктураПараметров*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВБухгалтерскомУчете*/)
			{
				if(true/*СтрокаДокумента.СчетУчетаБУ <> СтрокаПартии.СчетУчета
			И СтрокаДокумента.ПринятыеСчетУчетаБУ <> СтрокаПартии.СчетУчета*/)
				{
				}
			}
			return null;
		}
		// ПроверитьПартиюНаСкладеБух()
		// Проверка партии по измерению "Качество"
		//
		// Параметры:
		//	Нет.
		//
		// Возвращаемое значение:
		//
		//

		public object ПроверитьПартиюПоКачеству(/*СтрокаПартии, СтрокаДокумента*/)
		{
			/*КачествоНовый = Справочники.Качество.Новый;*/
			if(true/*ЗначениеЗаполнено(СтрокаПартии.Качество)*/)
			{
				/*// Если задано, какое качество списывать, проверяем
*/
				if(true/*ЗначениеЗаполнено(СтрокаДокумента.Качество)*/)
				{
					if(true/*СтрокаПартии.Качество<>СтрокаДокумента.Качество*/)
					{
					}
					/*// В противном случае списываем только новые
*/
				}
			}
			return null;
		}
		// ПроверитьПартиюПоКачеству()
		// Проверка партии по измерению "Склад"
		//
		// Параметры:
		//	Нет.
		//
		// Возвращаемое значение:
		//
		//

		public object ПроверитьПартиюПоСкладуБух(/*СтрокаПартии, СтрокаДокумента, СтруктураПараметров*/)
		{
			/*// Склад, если партионный учет по складам
*/
			if(true/*ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров)*/)
			{
				if(true/*СтрокаПартии.Склад <> СтрокаДокумента.Склад
			И ЗначениеЗаполнено(СтрокаПартии.Склад)*/)
				{
					/*// пустые склады могут остаться со времени, когда не было партионного учета по складам
*/
				}
			}
			return null;
		}
		// ПроверитьПартиюПоСкладу()
		// Проверка партии по измерению "Заказ"
		//
		// Параметры:
		//	Нет.
		//
		// Возвращаемое значение:
		//
		//

		public object ПроверитьПартиюПоЗаказу(/*СтрокаПартии, СтрокаДокумента*/)
		{
			if(true/*СтрокаДокумента.СписыватьТолькоПоЗаказу*/)
			{
				if(true/*СтрокаПартии.Заказ <> СтрокаДокумента.ЗаказПартии*/)
				{
					/*// Заполненные не отличаются
*/
					if(true/*ЗначениеЗаполнено(СтрокаДокумента.ЗаказПартии)*/)
					{
					}
				}
			}
			return null;
		}
		// ПроверитьПартиюПоЗаказу()
		// Приведение таблицы списания к требуемому виду
		//

		public void ПодготовитьТаблицуСписания(/*СтруктураПараметров, ТаблицаСписания, Упр, Бух, Нал*/)
		{
			/*// SSSS
*/
			if(true/*ТаблицаСписания.Колонки.Найти("ВестиПартионныйУчетПоСериям") = Неопределено*/)
			{
				/*// Получим данные о признаках ведения учета по сериям, установленным для номенклатуры
*/
				/*МассивНоменклатуры = ТаблицаСписания.ВыгрузитьКолонку("Номенклатура");*/
				/*МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);*/
				/*Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Номенклатура.Ссылка,
		|	Номенклатура.ВестиПартионныйУчетПоСериям
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Ссылка В(&МассивНоменклатуры)");*/
				/*Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);*/
				/*Выборка = Запрос.Выполнить().Выбрать();*/
				/*// Данные из запроса поместим в соответствие
*/
				/*Соотв = Новый Соответствие;*/
				while(true/*Выборка.Следующий()*/)
				{
					/*Соотв.Вставить(Выборка.Ссылка, Выборка.ВестиПартионныйУчетПоСериям);*/
				}
				/*// Заполним колонку "ВестиПартионныйУчетПоСериям" значениями из соответствия
*/
				/*ТаблицаСписания.Колонки.Добавить("ВестиПартионныйУчетПоСериям", Новый ОписаниеТипов("Булево"));*/
			}
			/*// Приведем к виду со всеми колонками
*/
			if(true/*ТаблицаСписания.Колонки.Найти("ОтражатьВУправленческомУчете") = Неопределено*/)
			{
				/*ТаблицаСписания.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));*/
			}
			if(true/*ТаблицаСписания.Колонки.Найти("ОтражатьВБухгалтерскомУчете") = Неопределено*/)
			{
				/*ТаблицаСписания.Колонки.Добавить("ОтражатьВБухгалтерскомУчете", Новый ОписаниеТипов("Булево"));*/
			}
			if(true/*ТаблицаСписания.Колонки.Найти("ОтражатьВНалоговомУчете") = Неопределено*/)
			{
				/*ТаблицаСписания.Колонки.Добавить("ОтражатьВНалоговомУчете", Новый ОписаниеТипов("Булево"));*/
			}
			if(true/*ТаблицаСписания.Колонки.Найти("ОтражатьВМеждународномУчете") = Неопределено*/)
			{
				/*ТаблицаСписания.Колонки.Добавить("ОтражатьВМеждународномУчете", Новый ОписаниеТипов("Булево"));*/
			}
			if(true/*ТаблицаСписания.Колонки.Найти("ИсточникПоКодуОперации") <> Неопределено*/)
			{
				/*// Таблица строк получена запросом к регистру СписанныеТовары		
*/
				/*СтруктураПараметров.Вставить("ЕстьНаСкладах", ТаблицаСписания.Найти("НаСкладах", "ИсточникПоКодуОперации") <> Неопределено);*/
				/*СтруктураПараметров.Вставить("ЕстьПереданные", ТаблицаСписания.Найти("Переданные", "ИсточникПоКодуОперации") <> Неопределено);*/
			}
		}
		//ПодготовитьТаблицуСписания
		/////////////////////////////////////////////////////////////////////////////////
		// СПИСАНИЯ (КРЕДИТ)
		// Упр учет
		// Структура отбора партий по упр учету заполняется нужными значениями
		//
		// Параметры:
		//	Нет.
		//

		public void ЗаполнитьСтруктуруОтбораУпр(/*СтруктураОтбора, СтрокаДокумента, РегистрУчета, СписыватьПустыеСерии*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);*/
				/*СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);*/
				if(true/*РегистрУчета="НаСкладах"*/)
				{
					/*// Дополнительно отбираются пустые серии на случай, если партионный учет по сериям был включен после проведения
*/
					/*// документов оприходования. В этом случае серия не прописалась в регистры "ПартииТоваров"
*/
					/*// Контроль остатков серии произведен по регистру "ТоварыНаСкладах"
*/
					if(true/*СписыватьПустыеСерии*/)
					{
						/*СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());*/
					}
				}
			}
		}
		// ЗаполнитьСтруктуруОтбораУпр()
		// Упр учет
		// Структура отбора партий по регл учету заполняется нужными значениями
		//
		// Параметры:
		//	Нет.
		//

		public void ЗаполнитьСтруктуруОтбораРегл(/*СтруктураОтбора, СтрокаДокумента, РегистрУчета, СписыватьПустыеСерии*/)
		{
			/*// Бух
*/
			if(true/*СтрокаДокумента.ОтражатьВБухгалтерскомУчете*/)
			{
				/*СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);*/
				/*СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);*/
				/*СтруктураОтбора.Вставить("Организация",                СтрокаДокумента.Организация);*/
				if(true/*РегистрУчета="НаСкладах"*/)
				{
					/*// Дополнительно отбираются пустые серии на случай, если партионный учет по сериям был включен после проведения
*/
					/*// документов оприходования. В этом случае серия не прописалась в регистры "ПартииТоваров"
*/
					/*// Контроль остатков серии произведен по регистру "ТоварыНаСкладах"
*/
					if(true/*СписыватьПустыеСерии*/)
					{
						/*СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());*/
					}
				}
			}
			/*//Если СтрокаДокумента.ОтражатьВБухгалтерскомУчете Тогда
*/
			/*// Нал
*/
			if(true/*СтрокаДокумента.ОтражатьВНалоговомУчете*/)
			{
				/*СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);*/
				/*СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);*/
				/*СтруктураОтбора.Вставить("Организация",                СтрокаДокумента.Организация);*/
				if(true/*РегистрУчета="НаСкладах"*/)
				{
					/*// Дополнительно отбираются пустые серии на случай, если партионный учет по сериям был включен после проведения
*/
					/*// документов оприходования. В этом случае серия не прописалась в регистры "ПартииТоваров"
*/
					/*// Контроль остатков серии произведен по регистру "ТоварыНаСкладах"
*/
					if(true/*СписыватьПустыеСерии*/)
					{
						/*СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());*/
					}
				}
			}
			/*//Если СтрокаДокумента.ОтражатьВНалоговомУчете Тогда
*/
		}
		// ЗаполнитьСтруктуруОтбораРегл()
		// Структура отбора партий по меж учету заполняется нужными значениями
		//
		// Параметры:
		//	Нет.
		//

		public void ЗаполнитьСтруктуруОтбораМеж(/*СтруктураОтбора, СтрокаДокумента, РегистрУчета, СписыватьПустыеСерии*/)
		{
			/*// Меж
*/
			if(true/*СтрокаДокумента.ОтражатьВМеждународномУчете*/)
			{
				/*СтруктураОтбора.Вставить("СчетУчета",                  СтрокаДокумента.СчетУчетаМУ);*/
				/*СтруктураОтбора.Вставить("Номенклатура",               СтрокаДокумента.Номенклатура);*/
				/*СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);*/
				/*СтруктураОтбора.Вставить("Организация",                СтрокаДокумента.Организация);*/
				if(true/*РегистрУчета="НаСкладах"*/)
				{
					/*// Дополнительно отбираются пустые серии на случай, если партионный учет по сериям был включен после проведения
*/
					/*// документов оприходования. В этом случае серия не прописалась в регистры "ПартииТоваров"
*/
					/*// Контроль остатков серии произведен по регистру "ТоварыНаСкладах"
*/
					if(true/*СписыватьПустыеСерии*/)
					{
						/*СтруктураОтбора.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());*/
					}
				}
			}
		}
		// ЗаполнитьСтруктуруОтбораМеж()
		// Возвращает имя соответствующего регистра для строки по упр учету
		//
		// Параметры:
		//	Нет.
		//

		public void ПолучитьПолучитьИмяРегистраУпр(/*ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				if(true/*ВидРегистра="ПартииТоваров"*/)
				{
					/*ИмяРегистра = ВидРегистра + РегистрУчета + "Упр";*/
				}
			}
		}
		// ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, "ПартииТоваров", РегистрУчета, СтрокаДокумента)
		// Возвращает имя соответствующего регистра для строки по регл учету
		//
		// Параметры:
		//	Нет.
		//

		public void ПолучитьПолучитьИмяРегистраРегл(/*ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВБухгалтерскомУчете*/)
			{
				if(true/*ВидРегистра="ПартииТоваров"*/)
				{
					/*ИмяРегистра = ВидРегистра + РегистрУчета + "Бух";*/
				}
			}
			if(true/*СтрокаДокумента.ОтражатьВНалоговомУчете*/)
			{
				if(true/*ВидРегистра="ПартииТоваров"*/)
				{
					/*ИмяРегистра = ВидРегистра + РегистрУчета + "Нал";*/
				}
			}
		}
		// ПолучитьПолучитьИмяРегистраРегл(ИмяРегистра, "ПартииТоваров", РегистрУчета, СтрокаДокумента)
		// Возвращает имя соответствующего регистра для строки по межд учету
		//
		// Параметры:
		//	Нет.
		//

		public void ПолучитьПолучитьИмяРегистраМеж(/*ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВМеждународномУчете*/)
			{
				if(true/*ВидРегистра="ПартииТоваров"*/)
				{
					/*ИмяРегистра = ВидРегистра + РегистрУчета + "Меж";*/
				}
			}
		}
		// ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, "ПартииТоваров", РегистрУчета, СтрокаДокумента)
		// Заполняет поля записи списания по упр учету
		//
		// Параметры:
		//	Нет.
		//

		public void ЗаполнитьПоляЗаписиСписанияУпр(/*Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;*/
				if(true/*РегистрУчета="НаСкладах"*/)
				{
					/*Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;*/
					/*Движение.Склад 			        = СтрокаПартии.Склад;*/
					/*Движение.Заказ  				= СтрокаПартии.Заказ;*/
					/*Движение.Качество  				= СтрокаПартии.Качество;*/
				}
				/*Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;*/
				/*Движение.СтатусПартии		    = СтрокаПартии.СтатусПартии;*/
				/*// Реквизиты
*/
				/*Движение.Подразделение	        = СтрокаДокумента.Подразделение;*/
				if(true/*РегистрУчета="Переданные"*/)
				{
					/*Движение.СтатусПередачи		= СтрокаПартии.СтатусПередачи;*/
				}
				/*// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
*/
				/*// Номер строки, по которой списана партия
*/
				/*// Используется при возврате товаров от покупателя, ордерной схеме поступления,
*/
				/*// механизмом корректировки стоимости списания 
*/
				/*Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;*/
				/*// Сумма выручки и сумма НДС  - для учета НДС
*/
				/*Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ*КоэффПоступления, 2);*/
				/*Движение.СуммаНДСВыручкиБУ  = Окр(СтрокаДокумента.СуммаНДС *КоэффПоступления, 2);*/
				/*// Уменьшим сумму в исх. строке
*/
				/*СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;*/
				/*СтрокаДокумента.СуммаНДС = СтрокаДокумента.СуммаНДС - Движение.СуммаНДСВыручкиБУ;*/
				/*// Сумма выручки в валюте документа - для отчета комитенту
*/
				/*Движение.СуммаВыручки = Окр(СтрокаДокумента.СуммаЗадолженности*КоэффПоступления, 2);*/
				/*// Валюты и курсы - для пересчета
*/
				/*Движение.ВалютаДокумента = СтрокаДокумента.ВалютаДокумента;*/
				/*Движение.КурсДокумента = СтрокаДокумента.КурсДокумента;*/
				/*Движение.КратностьДокумента = СтрокаДокумента.КратностьДокумента;*/
				/*СтрокаДокумента.СуммаЗадолженности = СтрокаДокумента.СуммаЗадолженности - Движение.СуммаВыручки;*/
				/*// Количество поступления - для комплектации
*/
				/*Движение.КоличествоПоступление    = Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);*/
				/*СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;*/
			}
		}
		// ЗаполнитьПоляЗаписиСписанияУпр()
		// Заполняет поля записи списания по регл учету
		//
		// Параметры:
		//	Нет.
		//

		public void ЗаполнитьПоляЗаписиСписанияРегл(/*Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВБухгалтерскомУчете*/)
			{
				/*Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;*/
				if(true/*РегистрУчета="НаСкладах"*/)
				{
					/*Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;*/
					/*Движение.Склад 			        = СтрокаПартии.Склад;*/
					/*Движение.Заказ  				= СтрокаПартии.Заказ;*/
					/*Движение.Качество  				= СтрокаПартии.Качество;*/
				}
				/*Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;*/
				/*Движение.СчетУчета		        = СтрокаПартии.СчетУчета;*/
				/*Движение.Организация	        = СтрокаДокумента.Организация;*/
				/*// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
*/
				/*// Номер строки, по которой списана партия
*/
				/*// Используется при возврате товаров от покупателя, ордерной схеме поступления,
*/
				/*// механизмом корректировки стоимости списания 
*/
				/*Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;*/
				/*// Сумма выручки и сумма НДС  - для учета НДС
*/
				/*Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ * КоэффПоступления, 2);*/
				/*Движение.СуммаНДСВыручкиБУ  = Окр(СтрокаДокумента.СуммаНДС * КоэффПоступления, 2);*/
				/*// Сумма задолженности
*/
				if(true/*Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику*/)
				{
					/*// Для учета отклонений в стоимости при возврате поставщику
*/
					/*Движение.ВалютнаяСуммаЗадолженностиБУ = Окр(Движение.Стоимость * КоэффСписанияВалютный, 2);*/
				}
				/*// СтоимостьПоступление для учета отклонений в стоимости при реализации тары
*/
				/*Движение.СтоимостьПоступление = Окр(СтрокаДокумента.СтоимостьПоступлениеБУ * КоэффПоступления, 2);*/
				/*// Уменьшим сумму в исх. строке
*/
				/*СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;*/
				/*СтрокаДокумента.СуммаНДС = СтрокаДокумента.СуммаНДС - Движение.СуммаНДСВыручкиБУ;*/
				/*СтрокаДокумента.СтоимостьПоступлениеБУ = СтрокаДокумента.СтоимостьПоступлениеБУ - Движение.СтоимостьПоступление;*/
				/*// Количество поступления - для комплектации
*/
				/*Движение.КоличествоПоступление    = Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);*/
				/*СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;*/
			}
			if(true/*СтрокаДокумента.ОтражатьВНалоговомУчете*/)
			{
				/*Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;*/
				if(true/*РегистрУчета="НаСкладах"*/)
				{
					/*Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;*/
					/*Движение.Склад 			        = СтрокаПартии.Склад;*/
					/*Движение.Заказ  				= СтрокаПартии.Заказ;*/
					/*Движение.Качество  				= СтрокаПартии.Качество;*/
				}
				/*Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;*/
				/*Движение.СчетУчета		        = СтрокаПартии.СчетУчета;*/
				/*Движение.Организация	        = СтрокаДокумента.Организация;*/
				/*// Ресурсы для учета постоянных и временных разниц
*/
				/*Движение.ПостояннаяРазница	= Окр(СтрокаПартии.ПостояннаяРазница  * КоэффСписания,2,1);*/
				/*Движение.ВременнаяРазница	= Окр(СтрокаПартии.ВременнаяРазница   * КоэффСписания,2,1);*/
				/*СтрокаПартии.ПостояннаяРазница  = СтрокаПартии.ПостояннаяРазница  - Движение.ПостояннаяРазница;*/
				/*СтрокаПартии.ВременнаяРазница   = СтрокаПартии.ВременнаяРазница   - Движение.ВременнаяРазница;*/
				/*// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
*/
				/*// Номер строки, по которой списана партия
*/
				/*// Используется при возврате товаров от покупателя, ордерной схеме поступления,
*/
				/*// механизмом корректировки стоимости списания 
*/
				/*Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;*/
				/*// Сумма выручки и сумма НДС  - для учета НДС
*/
				/*Движение.СуммаВыручкиБУ     = Окр(СтрокаДокумента.СуммаЗадолженностиБУ*КоэффПоступления, 2);*/
				/*Движение.СуммаНДСВыручкиБУ  = Окр(СтрокаДокумента.СуммаНДС *КоэффПоступления, 2);*/
				/*// СтоимостьПоступление для учета отклонений в стоимости при реализации тары
*/
				/*Движение.СтоимостьПоступление = Окр(СтрокаДокумента.СтоимостьПоступлениеБУ * КоэффПоступления, 2);*/
				/*// Уменьшим сумму в исх. строке
*/
				/*СтрокаДокумента.СуммаЗадолженностиБУ = СтрокаДокумента.СуммаЗадолженностиБУ - Движение.СуммаВыручкиБУ;*/
				/*СтрокаДокумента.СуммаНДС = СтрокаДокумента.СуммаНДС - Движение.СуммаНДСВыручкиБУ;*/
				/*СтрокаДокумента.СтоимостьПоступлениеБУ = СтрокаДокумента.СтоимостьПоступлениеБУ - Движение.СтоимостьПоступление;*/
				/*// Количество поступления - для комплектации
*/
				/*Движение.КоличествоПоступление    = Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);*/
				/*СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;*/
			}
		}
		// ЗаполнитьПоляЗаписиСписанияРегл()
		// Заполняет поля записи списания по межд учету
		//
		// Параметры:
		//	Нет.
		//

		public void ЗаполнитьПоляЗаписиСписанияМеж(/*Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВМеждународномУчете*/)
			{
				/*Движение.ХарактеристикаНоменклатуры = СтрокаПартии.ХарактеристикаНоменклатуры;*/
				if(true/*РегистрУчета="НаСкладах"*/)
				{
					/*Движение.СерияНоменклатуры 		= СтрокаПартии.СерияНоменклатуры;*/
					/*Движение.Склад 			        = СтрокаПартии.Склад;*/
					/*Движение.Заказ  				= СтрокаПартии.Заказ;*/
					/*Движение.Качество  				= СтрокаПартии.Качество;*/
				}
				/*Движение.ДокументОприходования	= СтрокаПартии.ДокументОприходования;*/
				/*Движение.СчетУчета  		    = СтрокаПартии.СчетУчета;*/
				/*// Реквизиты
*/
				/*Движение.Организация	        = СтрокаДокумента.Организация;*/
				/*// Вспомогательные поля, не являющиеся измерениями и реквизитами, но используемые для...
*/
				/*// Номер строки, по которой списана партия
*/
				/*// Используется при возврате товаров от покупателя, ордерной схеме поступления,
*/
				/*// механизмом корректировки стоимости списания 
*/
				/*Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;*/
				/*// Количество поступления - для комплектации
*/
				/*Движение.КоличествоПоступление    = Окр(СтрокаДокумента.КоличествоПоступление*КоэффПоступления, 3);*/
				/*СтрокаДокумента.КоличествоПоступление = СтрокаДокумента.КоличествоПоступление - Движение.КоличествоПоступление;*/
			}
		}
		// ЗаполнитьПоляЗаписиСписанияМеж()
		// Возвращает текст содержащий вид табличной части
		//

		public object ТекстСтрокиДокумента(/*СтрокаДокумента*/)
		{
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.ВидТабличнойЧасти)*/)
			{
				/*ТекстСтрокиДокумента = ", табличная часть """ + Строка(СтрокаДокумента.ВидТабличнойЧасти)+"""";*/
			}
			return null;
		}
		// ТекстСтрокиДокумента()
		// Сообщает о нехватке партии в управленческом учете
		//
		// Параметры:
		//	СтрокаДокумента.
		//

		public void СообщитьОНехваткеПартииУпр(/*СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*СтрокаСообщения = "Управленческий учет. ";*/
				if(true/*РегистрУчета = "НаСкладах"*/)
				{
					/*СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ?(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров), ", со склада: " + СтрокаДокумента.Склад, "");*/
				}
				/*СтруктураПараметров.Вставить("Отказ", Истина);*/
				/*ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);*/
			}
		}
		// СообщитьОНехваткеПартииУпр()
		// Сообщает о нехватке партии в регл учете
		//
		// Параметры:
		//	СтрокаДокумента.
		//

		public void СообщитьОНехваткеПартииРегл(/*СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВБухгалтерскомУчете*/)
			{
				/*СтрокаСообщения = "Бухгалтерский учет. ";*/
				if(true/*РегистрУчета = "НаСкладах"*/)
				{
					/*СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ", счета учета " + СтрокаДокумента.СчетУчетаБУ + ", " + СтрокаДокумента.ПринятыеСчетУчетаБУ
			+ ?(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров), ", со склада: " + СтрокаДокумента.Склад, "");*/
				}
				/*СтруктураПараметров.Вставить("Отказ", Истина);*/
				/*ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);*/
			}
			if(true/*СтрокаДокумента.ОтражатьВНалоговомУчете*/)
			{
				/*СтрокаСообщения = "Налоговый учет. ";*/
				if(true/*РегистрУчета = "НаСкладах"*/)
				{
					/*СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ", счет учета " + СтрокаДокумента.СчетУчетаНУ
			+ ?(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров), ", со склада: " + СтрокаДокумента.Склад, "");*/
				}
				/*СтруктураПараметров.Вставить("Отказ", Истина);*/
				/*ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);*/
			}
		}
		// СообщитьОНехваткеПартииРегл()
		// Сообщает о нехватке партии в меж учете
		//
		// Параметры:
		//	СтрокаДокумента.
		//

		public void СообщитьОНехваткеПартииМеж(/*СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВМеждународномУчете*/)
			{
				/*СтрокаСообщения = "Учет по МСФО. ";*/
				if(true/*РегистрУчета = "НаСкладах"*/)
				{
					/*СтрокаСообщения = СтрокаСообщения +
			"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
			+ "Не списано по партиям " + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
			+ " товара " + СтрокаДокумента.Номенклатура
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
			+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
			+ ", счет учета " + СтрокаДокумента.СчетУчетаМУ
			+ ?(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров), ", со склада: " + СтрокаДокумента.Склад, "");*/
				}
				/*СтруктураПараметров.Вставить("Отказ", Истина);*/
				/*ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения);*/
			}
		}
		// СообщитьОНехваткеПартииРегл()
		// Сообщает о нехватке партии в управленческом учете
		//
		// Параметры:
		//	СтрокаДокумента.
		//

		public void СообщитьОНеполномСписанииУказаннойПартииУпр(/*СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*СтрокаСообщения = "Управленческий учет. ";*/
				/*СтрокаСообщения = СтрокаСообщения +
		"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
		+ "По указанному документу поступления товаров " + СтрокаДокумента.ДокументПартии + " партия не была списана полностью" + Символы.ПС
		+ " товар " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "");*/
				/*Сообщить(СтрокаСообщения);*/
			}
		}
		// СообщитьОНехваткеПартииУпр()
		// Сообщает о нехватке партии в регл учете
		//
		// Параметры:
		//	СтрокаДокумента.
		//

		public void СообщитьОНеполномСписанииУказаннойПартииРегл(/*СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВБухгалтерскомУчете*/)
			{
				/*СтрокаСообщения = "Бухгалтерский учет. ";*/
				/*СтрокаСообщения = СтрокаСообщения +
		"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
		+ "По указанному документу поступления товаров " + СтрокаДокумента.ДокументПартии + " партия не была списана полностью" + Символы.ПС 
		+ " товар " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "");*/
				/*Сообщить(СтрокаСообщения);*/
			}
			if(true/*СтрокаДокумента.ОтражатьВНалоговомУчете*/)
			{
				/*СтрокаСообщения = "Налоговый учет. ";*/
				/*СтрокаСообщения = СтрокаСообщения +
		"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
		+ "По указанному документу поступления товаров " + СтрокаДокумента.ДокументПартии + " партия не была списана полностью" + Символы.ПС 
		+ " товар " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "");*/
				/*Сообщить(СтрокаСообщения);*/
			}
		}
		// СообщитьОНехваткеПартииРегл()
		// Сообщает о нехватке партии в меж учете
		//
		// Параметры:
		//	СтрокаДокумента.
		//

		public void СообщитьОНеполномСписанииУказаннойПартииМеж(/*СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВМеждународномУчете*/)
			{
				/*СтрокаСообщения = "Учет по МСФО. ";*/
				/*СтрокаСообщения = СтрокаСообщения +
		"Документ " + СтрокаДокумента.Регистратор + ТекстСтрокиДокумента(СтрокаДокумента)+ Символы.ПС
		+ "По указанному документу поступления товаров " + СтрокаДокумента.ДокументПартии + " партия не была списана полностью" + Символы.ПС 
		+ " товар " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "");*/
				/*Сообщить(СтрокаСообщения);*/
			}
		}
		// СообщитьОНехваткеПартииРегл()
		// Общие
		// Возвращает имя соответствующего регистра для строки
		//
		// Параметры:
		//	Нет.
		//

		public object ПолучитьИмяРегистра(/*ВидРегистра, РегистрУчета, СтрокаДокумента*/)
		{
			/*ИмяРегистра ="";*/
			/*ПолучитьПолучитьИмяРегистраУпр(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента);*/
			/*ПолучитьПолучитьИмяРегистраРегл(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента);*/
			/*ПолучитьПолучитьИмяРегистраМеж(ИмяРегистра, ВидРегистра, РегистрУчета, СтрокаДокумента);*/
			return null;
		}
		// ПолучитьИмяРегистра("ПартииТоваров", РегистрУчета, СтрокаДокумента)
		// Отбирает в партиях строки соответствующие значениям обрабатываемой строки
		//
		// Параметры:
		//	Нет.
		//
		// Возвращаемое значение:
		//	Массив строк
		//

		public object ОтобратьСтрокиПартий(/*ТаблицаПартий, СтрокаДокумента, РегистрУчета*/)
		{
			/*// Структура отбор строк партий
*/
			/*СтруктураОтбора = Новый Структура;*/
			/*ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Ложь);*/
			/*ЗаполнитьСтруктуруОтбораРегл(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Ложь);*/
			/*ЗаполнитьСтруктуруОтбораМеж(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Ложь);*/
			/*МассивСтрок = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);*/
			/*// Для регистров "ПартииТоваровНаСкладах"...
*/
			/*// Если серия заполнена - попытаемся отобрать дополнительно пустые серии
*/
			/*// Если серия в документе не заполнена - пустые серии уже отобраны
*/
			/*// Для переданных товаров учет по сериям не ведется.
*/
			if(true/*РегистрУчета ="НаСкладах"*/)
			{
				if(true/*ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры)*/)
				{
					/*// Серии не отбираются при резервировании т.к. в заказах нет серий
*/
					if(true/*СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.РезервированиеПодЗаказ
			   И СтрокаДокумента.КодОперацииПартииТоваров <> Перечисления.КодыОперацийПартииТоваров.СнятиеРезерваПодЗаказ*/)
					{
						/*ЗаполнитьСтруктуруОтбораУпр(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Истина);*/
						/*ЗаполнитьСтруктуруОтбораРегл(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Истина);*/
						/*ЗаполнитьСтруктуруОтбораМеж(СтруктураОтбора, СтрокаДокумента, РегистрУчета, Истина);*/
						/*МассивСтрокСПустымиСериями = ТаблицаПартий.НайтиСтроки(СтруктураОтбора);*/
					}
				}
			}
			return null;
		}
		// ОтобратьСтрокиПартий()
		// Заполняет поля записи списания
		//
		// Параметры:
		//	Нет.
		//

		public void ЗаполнитьПоляЗаписиСписания(/*Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный*/)
		{
			/*ЗаполнитьПоляЗаписиСписанияУпр(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления);*/
			/*ЗаполнитьПоляЗаписиСписанияРегл(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления, КоэффСписанияВалютный);*/
			/*ЗаполнитьПоляЗаписиСписанияМеж(Движение, СтрокаПартии, СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоэффСписания, КоэффПоступления);*/
		}
		// ЗаполнитьПоляЗаписиСписания()
		// Списание со склада по строке
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//
		// Возвращаемое значение:
		//   ТаблицаЗначений   – таблица списанных партий
		//

		public void СписаниеПартий(/*СтрокаДокумента, СтруктураПараметров, РегистрУчета*/)
		{
			/*КодыОпераций = Перечисления.КодыОперацийПартииТоваров;*/
			/*// Партии для данного учета
*/
			/*ИмяРегистра = ПолучитьИмяРегистра("ПартииТоваров", РегистрУчета, СтрокаДокумента);*/
			/*// Если нет регистра, по которому списываем, тогда пропускаем
*/
			if(true/*ИмяРегистра=""*/)
			{
			}
			/*ДеревоПартий = СтруктураПараметров["Дерево"+ИмяРегистра];*/
			/*СтруктураИзмерений = СтруктураПараметров[ИмяРегистра + "СтруктураИзмерений"];*/
			/*ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистра + "ТаблицаОстатков"];*/
			/*СтрокаДереваПартий = ДеревоПартий.Строки.Найти(СтрокаДокумента.НомерСтрокиДокумента, "НомерСтрокиДокумента");*/
			/*// Подлежащее погашению при списании количество
*/
			/*КоличествоОсталосьПогасить = СтрокаДокумента.Количество;*/
			/*// В строке может быть указана стоимость поступления, если затем товар будет оприходован с другой стоимостью
*/
			/*СтоимостьПоступлениеОсталосьПогасить = 0;*/
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*СтоимостьПоступлениеОсталосьПогасить = СтрокаДокумента.СтоимостьПоступление;*/
			}
			/*КоэффСписанияВалютный = 0;*/
			/*// Валютная задолженность при возврате товаров поставщику должна списываться пропорционально стоимости
*/
			if(true/*СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратПоставщику 
	   И СтрокаДокумента.СуммаЗадолженностиБУ <> 0*/)
			{
				/*КоэффСписанияВалютный = СтрокаДокумента.КорВалютнаяСуммаЗадолженностиБУ/СтрокаДокумента.СуммаЗадолженностиБУ;*/
			}
			/*СтрокаСписанныхТоваров = Новый Структура("КоличествоПоступление",СтрокаДокумента.КоличествоПоступление);*/
			/*КоличествоСписанноеПоДокументуПартии = 0;*/
			if(true/*СтрокаДереваПартий <> Неопределено*/)
			{
			}
			/*// Восстановим ранее сохраненное количество поступления для движений по НДС
*/
			/*СтрокаДокумента.КоличествоПоступление = СтрокаСписанныхТоваров.КоличествоПоступление;*/
			/*// Товара не хватило
*/
			if(true/*(КоличествоОсталосьПогасить > 0)*/)
			{
				/*СообщитьОНехваткеПартии(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);*/
			}
		}
		// СписаниеПартий()
		// Сообщение о нехватке партий
		//
		// Параметры:
		//	Нет.
		//

		public void СообщитьОНехваткеПартии(/*СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить*/)
		{
			/*СообщитьОНехваткеПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);*/
			/*СообщитьОНехваткеПартииРегл(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);*/
			/*СообщитьОНехваткеПартииМеж(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);*/
		}
		// СообщитьОНехваткеПартии()
		// Сообщение о неполном списании явно указанной партии
		//
		// Параметры:
		//	Нет.
		//

		public void СообщитьОНеполномСписанииУказаннойПартии(/*СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить*/)
		{
			/*СообщитьОНеполномСписанииУказаннойПартииУпр(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);*/
			/*СообщитьОНеполномСписанииУказаннойПартииРегл(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);*/
			/*СообщитьОНеполномСписанииУказаннойПартииМеж(СтрокаДокумента, СтруктураПараметров, РегистрУчета, КоличествоОсталосьПогасить);*/
		}
		// СообщитьОНехваткеПартии()

		public object ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(/*СпособОценкиМПЗ, ПсевдонимТаблицы*/)
		{
			/*флПоСредней = ложь;*/
			if(true/*ТипЗнч(СпособОценкиМПЗ)=Тип("Строка") И ВРег(СпособОценкиМПЗ) = "ПО СРЕДНЕЙ"*/)
			{
				/*флПоСредней = истина;*/
			}
			if(true/*флПоСредней*/)
			{
				/*стрПолеВыборки 		= "";*/
				/*стрПолеСортировки 	= "";*/
			}
			return null;
		}
		/////////////////////////////////////////////////////////////////////////////////
		// ДВИЖЕНИЯ,ВЫПОЛНЯЕМЫЕ ПО РЕЗУЛЬТАТУ СПИСАНИЯ
		// Отражение продажи комиссионного товара
		//
		// Параметры:
		//	Нет.
		//

		public void ВыполнитьДвиженияПоРеализованнымТоварамКомитента(/*СтруктураПараметров, ТаблицаСписания*/)
		{
			/*МассивДокументов = Новый Массив;*/
			/*КодОперации = Перечисления.КодыОперацийПартииТоваров;*/
		}
		// ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтрокаДокумента, СтруктураПараметров, Движение)()
		// Связанные со списанием движения по упр учету
		//
		// Параметры:
		//	Нет.
		//

		public void ВыполнитьСвязанныеДвиженияУпр(/*СтрокаДокумента, СтруктураПараметров, Движение*/)
		{
			if(true/*СтрокаДокумента.ОтражатьвУправленческомУчете*/)
			{
				if(true/*СтрокаДокумента.НеСписывать И НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером 
		   И ( СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.Реализация Или
				СтрокаДокумента.КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПередачаТарыКонтрагенту)*/)
				{
					/*ОприходоватьТоварПринятыйНаОтветственноеХранениеУпр(СтрокаДокумента, СтруктураПараметров, Движение);*/
				}
			}
		}
		// ВыполнитьСвязанныеДвиженияУпр()

		public void ПроведениеКорректировкиРеализации(/*Ссылка, СтруктураПараметров, ТаблицаСписания*/)
		{
			/*ДокументОбъект = Ссылка.ПолучитьОбъект();*/
			/*Отказ = Ложь;*/
			/*ДокументОбъект.ПодготовитьСтруктуруШапкиДокумента(Заголовок, СтруктураШапкиДокумента);*/
			/*ДокументОбъект.ПодготовитьТаблицыДокумента(СтруктураШапкиДокумента, ТаблицаПоТоварам, ТаблицаПоУслугам);*/
			/*ПрошлыйПериод = Год(СтруктураШапкиДокумента.ДокументРеализацииДата) < Год(СтруктураШапкиДокумента.Дата);*/
		}

		public object ПолучитьПартииРеализованныхТоваровДляКорректировки(/*СтруктураШапкиДокумента, СтрокаТЧ*/)
		{
			/*Запрос = Новый Запрос();*/
			/*Запрос.УстановитьПараметр("Регистратор", 				СтруктураШапкиДокумента.ДокументРеализацииСсылка);*/
			/*Запрос.УстановитьПараметр("ДатаДокументаОтгрузки", 		СтруктураШапкиДокумента.ДокументРеализацииДата);*/
			/*Запрос.УстановитьПараметр("ДатаДокумента", 				СтруктураШапкиДокумента.Дата);*/
			/*Запрос.УстановитьПараметр("Организация", 				СтруктураШапкиДокумента.Организация);*/
			/*Запрос.УстановитьПараметр("Номенклатура", 				СтрокаТЧ.Номенклатура);*/
			/*Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаТЧ.ХарактеристикаНоменклатуры);*/
			/*Запрос.УстановитьПараметр("СерияНоменклатуры", 			СтрокаТЧ.СерияНоменклатуры);*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура,
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СчетУчета,
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ДокументОприходования,
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СчетУчета.Забалансовый КАК Комиссионный,
	|	СУММА(ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.КоличествоРасход) КАК Количество,
	|	СУММА(-ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СтоимостьРасход) КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Обороты(
	|			&ДатаДокументаОтгрузки,
	|			&ДатаДокумента,
	|			Регистратор,
	|			Организация = &Организация
	|				И Номенклатура = &Номенклатура
	|				И ХарактеристикаНоменклатуры = &ХарактеристикаНоменклатуры
	|				И СерияНоменклатуры = &СерияНоменклатуры) КАК ПартииТоваровНаСкладахБухгалтерскийУчетОбороты
	|ГДЕ
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.Номенклатура,
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.СчетУчета,
	|	ПартииТоваровНаСкладахБухгалтерскийУчетОбороты.ДокументОприходования";*/
			return null;
		}
		// По документу партии определяется комитент, договор и счет расчетов с ним.
		// Возвращаемое значение:
		//   Структура – список параметров (комитент, договор
		//	 с комитентом и счет расчетов с комитентом).
		//

		public object ПараметрыРасчетовСКомитентом(/*Партия, Отказ = Ложь, Заголовок = ""*/)
		{
			/*Параметры = Новый Структура();*/
			/*Параметры.Вставить("Комитент",Справочники.Контрагенты.ПустаяСсылка());*/
			/*Параметры.Вставить("ДоговорКомиссии",Справочники.ДоговорыКонтрагентов.ПустаяСсылка());*/
			/*Параметры.Вставить("СчетРасчетовСКомитентом", ПланыСчетов.Хозрасчетный.ПустаяСсылка());*/
			/*Параметры.Вставить("СчетРасчетовПоАвансамСКомитентом", ПланыСчетов.Хозрасчетный.ПустаяСсылка());*/
			/*Параметры.Вставить("ВалютаРасчетовСКомитентом", Справочники.Валюты.ПустаяСсылка());*/
			/*ОрганизацияПоПартии = Справочники.Организации.ПустаяСсылка();*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПоступлениеТоваровУслуг.Организация КАК Организация,
	|	ПоступлениеТоваровУслуг.Контрагент КАК Комитент,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента КАК Договор,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовСКонтрагентом КАК СчетРасчетов,
	|	ПоступлениеТоваровУслуг.СчетУчетаРасчетовПоАвансам КАК СчетАвансов,
	|	ПоступлениеТоваровУслуг.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаРасчетов
	|ИЗ
	|	Документ.ПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
	|ГДЕ
	|	ПоступлениеТоваровУслуг.Ссылка = &Партия
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДокументРасчетовСКонтрагентом.Организация,
	|	ДокументРасчетовСКонтрагентом.Контрагент,
	|	ДокументРасчетовСКонтрагентом.ДоговорКонтрагента,
	|	Неопределено,
	|	Неопределено,
	|	ДокументРасчетовСКонтрагентом.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|ИЗ
	|	Документ.ДокументРасчетовСКонтрагентом КАК ДокументРасчетовСКонтрагентом
	|ГДЕ
	|	ДокументРасчетовСКонтрагентом.Ссылка = &Партия";*/
			/*Запрос.УстановитьПараметр("Партия", Партия);*/
			/*РезультатЗапроса = Запрос.Выполнить().Выбрать();*/
			if(true/*РезультатЗапроса.Следующий()*/)
			{
				/*Параметры.Вставить("Комитент",     				РезультатЗапроса.Комитент);*/
				/*Параметры.Вставить("ДоговорКомиссии",      		РезультатЗапроса.Договор);*/
				/*Параметры.Вставить("СчетРасчетовСКомитентом",	РезультатЗапроса.СчетРасчетов);*/
				/*Параметры.Вставить("СчетРасчетовПоАвансамСКомитентом",	РезультатЗапроса.СчетАвансов);*/
				/*Параметры.Вставить("ВалютаРасчетовСКомитентом", РезультатЗапроса.ВалютаРасчетов);*/
				/*ОрганизацияПоПартии = РезультатЗапроса.Организация;*/
			}
			if(true/*НЕ ЗначениеЗаполнено(Параметры.СчетРасчетовСКомитентом)*/)
			{
				/*СчетаРасчетов = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(ОрганизацияПоПартии, Параметры.Комитент, Параметры.ДоговорКомиссии);*/
				/*Параметры.Вставить("СчетРасчетовСКомитентом",	СчетаРасчетов.СчетРасчетовСКомитентом);*/
				if(true/*НЕ ЗначениеЗаполнено(Параметры.СчетРасчетовСКомитентом)*/)
				{
					if(true/*НЕ ЗначениеЗаполнено(Партия)*/)
					{
						/*ОбщегоНазначения.СообщитьОбОшибке("При списании комиссионных товаров не определена партия оприходования.
				|Невозможно определить счет расчетов с комитентом.",Отказ,Заголовок);*/
					}
				}
			}
			return null;
		}
		// ПараметрыРасчетовСКомитентом()

		public void ДополнитьТаблицуПартийДляКорректировки(/*ТаблицаПартий, СтрокаТЧ*/)
		{
			/*МассивКоэфф = ТаблицаПартий.ВыгрузитьКолонку("Количество");*/
			if(true/*ТаблицаПартий.Колонки.Найти("СуммаБУ") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("СуммаБУ");*/
				if(true/*ТаблицаПартий.Колонки.Найти("СуммаВыручкиБУ") = Неопределено*/)
				{
					/*ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.СуммаБУ, МассивКоэфф, , Ложь), "СуммаБУ");*/
				}
			}
			if(true/*ТаблицаПартий.Колонки.Найти("НДС") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("НДС");*/
				if(true/*ТаблицаПартий.Колонки.Найти("СуммаНДСВыручкиБУ") = Неопределено*/)
				{
					/*ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.НДС, МассивКоэфф, , Ложь), "НДС");*/
				}
			}
			if(true/*ТаблицаПартий.Колонки.Найти("СуммаВал") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("СуммаВал");*/
				/*ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.СуммаВал, МассивКоэфф, , Ложь), "СуммаВал");*/
			}
			if(true/*ТаблицаПартий.Колонки.Найти("НДСВал") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("НДСВал");*/
				/*ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.НДСВал, МассивКоэфф, , Ложь), "НДСВал");*/
			}
			if(true/*ТаблицаПартий.Колонки.Найти("НДСИтоговый") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("НДСИтоговый");*/
				/*ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.НДСИтоговый, МассивКоэфф, , Ложь), "НДСИтоговый");*/
			}
			if(true/*ТаблицаПартий.Колонки.Найти("НДСДоИзм") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("НДСДоИзм");*/
				/*ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.НДСДоИзм, МассивКоэфф, , Ложь), "НДСДоИзм");*/
			}
			if(true/*ТаблицаПартий.Колонки.Найти("НДСДоКорр") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("НДСДоКорр");*/
				/*ТаблицаПартий.ЗагрузитьКолонку(ОбщегоНазначения.РаспределитьПропорционально(СтрокаТЧ.НДСДоКорр, МассивКоэфф, , Ложь), "НДСДоКорр");*/
			}
			if(true/*ТаблицаПартий.Колонки.Найти("СчетДоходовБУ") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("СчетДоходовБУ");*/
				/*ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СчетДоходовБУ, "СчетДоходовБУ");*/
			}
			if(true/*ТаблицаПартий.Колонки.Найти("СчетДоходовНУ") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("СчетДоходовНУ");*/
				/*ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СчетДоходовНУ, "СчетДоходовНУ");*/
			}
			if(true/*ТаблицаПартий.Колонки.Найти("Номенклатура") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("Номенклатура");*/
				/*ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.Номенклатура, "Номенклатура");*/
			}
			if(true/*ТаблицаПартий.Колонки.Найти("СубконтоБУ") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("СубконтоБУ");*/
			}
			/*ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СубконтоБУ, "СубконтоБУ");*/
			if(true/*ТаблицаПартий.Колонки.Найти("СубконтоНУ") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("СубконтоНУ");*/
				/*ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СубконтоНУ, "СубконтоНУ");*/
			}
			if(true/*ТаблицаПартий.Колонки.Найти("СтавкаНДС") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("СтавкаНДС");*/
				/*ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СтавкаНДС, "СтавкаНДС");*/
			}
			if(true/*ТаблицаПартий.Колонки.Найти("СчетРасходовБУ") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("СчетРасходовБУ");*/
				/*ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СчетРасходовБУ, "СчетРасходовБУ");*/
			}
			if(true/*ТаблицаПартий.Колонки.Найти("СчетРасходовНУ") = Неопределено*/)
			{
				/*ТаблицаПартий.Колонки.Добавить("СчетРасходовНУ");*/
				/*ТаблицаПартий.ЗаполнитьЗначения(СтрокаТЧ.СчетРасходовНУ, "СчетРасходовНУ");*/
			}
		}
		/////////////////////////////////////////////////////////////////////////////////
		// КОРРЕСПОНДИРУЮЩИЕ СПИСАНИЮ ДВИЖЕНИЯ (ДЕБЕТ)
		//Ответственное хранение
		//Процедура ОприходоватьТоварПринятыйНаОтветственноеХранение(СтрокаДокумента, СтруктураПараметров, Строка)
		//	ОприходоватьТоварПринятыйНаОтветственноеХранениеУпр(СтрокаДокумента, СтруктураПараметров, Строка);
		//	ОприходоватьТоварПринятыйНаОтветственноеХранениеБух(СтрокаДокумента, СтруктураПараметров, Строка);
		//
		//КонецПроцедуры//ОприходоватьТоварПринятыйНаОтветственноеХранение

		public void ОприходоватьТоварПринятыйНаОтветственноеХранениеУпр(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*Учет = "Упр";*/
			}
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);*/
			/*ЗаполнитьЗначенияСвойств(Движение,Строка);*/
			/*Движение.ВидДвижения = ВидДвиженияНакопления.Приход;*/
			/*Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ОтложеннаяОтгрузка;*/
			if(true/*Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТара*/)
			{
				/*Движение.СтатусПартии = Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка;*/
			}
		}
		//ОприходоватьТоварПринятыйНаОтветственноеХранение

		public void ЗаполнитьОбщиеСвойстваКорДвижения(/*Движение, Строка*/)
		{
			/*// Свойства из основного движения
*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*// Свойства кор. движения
*/
			/*Движение.Активность  = Истина;*/
			/*Движение.ВидДвижения = ВидДвиженияНакопления.Приход;*/
		}
		// Движение по себестоимости продаж
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//

		public void СписаниеНаСебестоимостьПродажУпр(/*СтрокаДокумента, СтруктураПараметров, Строка, ТипЗаписи = "Прямая"*/)
		{
			if(true/*СтрокаДокумента.ВедениеУчетаПоПроектам*/)
			{
				/*// Создадим таблицу значений для передачи в ОтразитьДвиженияПоПроектам
*/
				/*ТаблицаПоТоварам = Новый ТаблицаЗначений;*/
				if(true/*НЕ (ТипЗнч(СтрокаДокумента.Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам") 
		   И СтрокаДокумента.Проект.МетодРаспределения <> Перечисления.МетодыРаспределенияПоПроектам.РегламентнымДокументом)*/)
				{
					/*ТаблицаПоТоварам.Колонки.Добавить("Проект");*/
					/*ТаблицаПоТоварам.ЗаполнитьЗначения(СтрокаДокумента.Проект,"Проект");*/
				}
				/*ТаблицаПоТоварам.Колонки.Добавить("СтоимостьБезСкидок",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*НоваяСтрока = ТаблицаПоТоварам.Добавить();*/
				/*ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);*/
				/*ТаблицаДвижений = Новый ТаблицаЗначений;*/
				/*ТаблицаДвижений.Колонки.Добавить("Заказ");*/
				/*ТаблицаДвижений.Колонки.Добавить("СтатусПартии");*/
				/*ТаблицаДвижений.Колонки.Добавить("СуммаВыручки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*ТаблицаДвижений.Колонки.Добавить("СуммаНДСВыручкиБУ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
				/*ТаблицаДвижений.Колонки.Добавить("НомерКорСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));*/
				/*УправлениеПроектами.ОтразитьДвиженияПоПроектам(ТаблицаПоТоварам,ТаблицаДвижений,СтрокаДокумента.Проект,СтруктураПараметров.Период,"Продажи");*/
				/*НуженНомерКорСтроки = Истина;*/
			}
			/*СформироватьДвиженияСписанияНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Строка, ТипЗаписи);*/
		}
		// СписаниеНаСебестоимостьПродажУпр()

		public void СформироватьДвиженияСписанияНаСебестоимостьПродажУпр(/*СтрокаДокумента, СтруктураПараметров, Строка, ТипЗаписи = "Прямая"*/)
		{
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ПродажиСебестоимость", СтруктураПараметров);*/
			if(true/*ТипЗаписи = "Сторно"*/)
			{
				/*КоэффициентСторно = -1;*/
			}
			/*ЗаполнитьЗначенияСвойств(Движение,Строка);*/
			/*Движение.Активность = Истина;*/
			/*Движение.Организация = СтруктураПараметров.ОрганизацияУпр;*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания)*/)
			{
				/*Движение.ЗаказПокупателя = СтрокаДокумента.ЗаказСписания;*/
			}
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКомплекта)*/)
			{
				/*Движение.Номенклатура = СтрокаДокумента.НоменклатураКомплекта;*/
			}
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаКомплекта)*/)
			{
				/*Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаКомплекта;*/
			}
			/*Движение.Подразделение = СтрокаДокумента.Подразделение;*/
			if(true/*(ЗначениеЗаполнено(СтрокаДокумента.НоменклатураКомплекта)) И (НЕ СтрокаДокумента.Количество = 0)*/)
			{
				/*Движение.Количество = КоэффициентСторно*СтрокаДокумента.КоличествоКомплекта*Строка.Количество/СтрокаДокумента.Количество;*/
			}
			if(true/*НЕ Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.НаКомиссию*/)
			{
				/*Движение.Стоимость  = КоэффициентСторно*Строка.Стоимость;*/
			}
			/*Строка.НомерКорСтроки = СтруктураПараметров.ТекНомерСтрокиПродажиСебестоимость;*/
		}
		//СформироватьДвиженияСписанияНаСебестоимостьПродажУпр()
		// Склад

		public void ЗаполнитьСериюВДвижении(/*СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров*/)
		{
			if(true/*СтрокаДокумента.ВестиПартионныйУчетПоСериям*/)
			{
				/*// Если задана новая серия или установлен флаг изменить серию - подставляем ее
*/
				if(true/*ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатурыНовая) Или СтрокаДокумента.ИзменитьСерию*/)
				{
					/*Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;*/
				}
			}
		}
		//ЗаполнитьСериюВДвижении()
		// Поступление товаров на склад
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
		//

		public void ПоступлениеНаСкладУпр(/*СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Упр";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*Движение.Активность  = Истина;*/
			/*Движение.ВидДвижения = ВидДвиженияНакопления.Приход;*/
			/*// Измерения
*/
			/*ЗаполнитьСкладВДвижении(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз);*/
			/*Движение.Номенклатура 	= Строка.Номенклатура;*/
			/*Движение.Организация 	= Строка.Организация;*/
			/*Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;*/
			/*// Если задана новая характеристика или установлен флаг изменить характеристику, подставляем ее
*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Или СтрокаДокумента.ИзменитьХарактеристику*/)
			{
				/*Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;*/
			}
			/*ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров);*/
			/*// Качество номенклатуры в движении есть только, если списано со склада
*/
			if(true/*СписаноИз = "НаСкладах"*/)
			{
				/*Движение.Качество	= Строка.Качество;*/
			}
			/*// Если задано новое качество, подставляем его
*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.КачествоНовое)*/)
			{
				/*Движение.Качество = СтрокаДокумента.КачествоНовое;*/
			}
			/*// Вместо пустого качества - новый
*/
			if(true/*НЕ ЗначениеЗаполнено(Движение.Качество)*/)
			{
				/*Движение.Качество = Справочники.Качество.Новый;*/
			}
			/*Движение.ДокументОприходования = Строка.ДокументОприходования;*/
			if(true/*НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера И 
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаСерийИХарактеристик И
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаКачества*/)
			{
				/*Движение.Заказ	= ?(ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);*/
			}
			/*Движение.СтатусПартии = Строка.СтатусПартии;*/
			/*// Новая номенклатура-для комплектации: меняется все
*/
			/*// Аналогично обрабатывается включение оборудования в состав МПЗ
*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая)*/)
			{
				/*Движение.Номенклатура = СтрокаДокумента.НоменклатураНовая;*/
				/*Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;*/
				/*Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;*/
				/*СпособОценкиМПЗ = ВРег(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", Учет, СтруктураПараметров));*/
				if(true/*СпособОценкиМПЗ <> "ПО СРЕДНЕЙ"*/)
				{
					/*Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;*/
				}
				/*// Комплект(ующее) приходуется со статусом партии, указанным в документе
*/
				/*// Если значение не заполнено - статус партии "купленный"
*/
				/*// Статус партии "по ордеру" не меняем
*/
				if(true/*СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация 
		   Или СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВключениеАктиваВСоставМПЗ*/)
				{
					if(true/*Строка.СтатусПартии = Перечисления.СтатусыПартийТоваров.ПоОрдеру*/)
					{
						/*Движение.СтатусПартии = Строка.СтатусПартии;*/
					}
				}
			}
			/*// Ресурсы
*/
			/*Движение.Количество	= Строка.Количество;*/
			/*Движение.Стоимость	= Строка.Стоимость;*/
			/*// Новое количество-для комплектации
*/
			if(true/*СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация*/)
			{
				if(true/*Строка.Количество < 0*/)
				{
					/*Движение.Количество	= -Строка.КоличествоПоступление;*/
				}
			}
			/*// Оприходование может быть с новой стоимостью
*/
			if(true/*Строка.СтоимостьПоступление<>0*/)
			{
				/*Движение.Стоимость = Строка.СтоимостьПоступление;*/
			}
			/*// Реквизиты
*/
			/*Движение.КодОперации  = СтрокаДокумента.КодОперацииПартииТоваров;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];*/
		}
		//ПоступлениеНаСкладУпр()
		// Поступление товаров на склад
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//

		public void ПоступлениеНаСкладБух(/*СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Бух";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*Движение.Активность  = Истина;*/
			/*Движение.ВидДвижения = ВидДвиженияНакопления.Приход;*/
			/*// Измерения
*/
			/*ЗаполнитьСкладВДвижении(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз);*/
			/*Движение.Номенклатура 	= Строка.Номенклатура;*/
			/*Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;*/
			/*// Если задана новая характеристика или установлен флаг изменить характеристику, подставляем ее
*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Или СтрокаДокумента.ИзменитьХарактеристику*/)
			{
				/*Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;*/
			}
			/*ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров);*/
			/*// Качество номенклатуры в движении есть только, если списано со склада
*/
			if(true/*СписаноИз = "НаСкладах"*/)
			{
				/*Движение.Качество	= Строка.Качество;*/
			}
			/*// Если задано новое качество, подставляем его
*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.КачествоНовое)*/)
			{
				/*Движение.Качество	= СтрокаДокумента.КачествоНовое;*/
			}
			/*// Вместо пустого качества - новый
*/
			if(true/*НЕ ЗначениеЗаполнено(Движение.Качество)*/)
			{
				/*Движение.Качество = Справочники.Качество.Новый;*/
			}
			/*Движение.ДокументОприходования = Строка.ДокументОприходования;*/
			if(true/*НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера И 
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаСерийИХарактеристик И
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаКачества*/)
			{
				/*Движение.Заказ	= ?(ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);*/
			}
			/*// Если счет не изменился, может быть указан только счет учета
*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.КорСчетБУ)*/)
			{
				/*Движение.СчетУчета = СтрокаДокумента.КорСчетБУ;*/
			}
			/*// Если списан принятый на комиссию товар, то он приходуется на специально указанный счет
*/
			if(true/*((ТипЗНЧ(СтрокаДокумента) = Тип("СтрокаТаблицыЗначений")) И (НЕ СтрокаДокумента.Владелец().Колонки.Найти("ПринятыеСчетУчетаБУ") = Неопределено))
	  ИЛИ ((ТипЗНЧ(СтрокаДокумента) = Тип("Структура")) И СтрокаДокумента.Свойство("ПринятыеСчетУчетаБУ"))*/)
			{
				if(true/*Строка.СчетУчета=СтрокаДокумента.ПринятыеСчетУчетаБУ*/)
				{
					if(true/*ЗначениеЗаполнено(СтрокаДокумента.ПринятыеКорСчетБУ)*/)
					{
						/*Движение.СчетУчета = СтрокаДокумента.ПринятыеКорСчетБУ;*/
					}
				}
			}
			/*Движение.Организация = СтрокаДокумента.Организация;*/
			/*// Новая номенклатура-для комплектации: меняется все
*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая)*/)
			{
				/*Движение.Номенклатура= СтрокаДокумента.НоменклатураНовая;*/
				/*Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;*/
				/*Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;*/
				/*СпособОценкиМПЗ = ВРег(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", Учет, СтруктураПараметров));*/
				if(true/*СпособОценкиМПЗ <> "ПО СРЕДНЕЙ"*/)
				{
					/*Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;*/
				}
			}
			/*// Ресурсы
*/
			/*Движение.Количество	= Строка.Количество;*/
			/*Движение.Стоимость	= Строка.Стоимость;*/
			/*// Новое количество-для комплектации
*/
			if(true/*СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация*/)
			{
				/*Движение.Количество	= Строка.КоличествоПоступление;*/
			}
			/*// Оприходование может быть с новой стоимостью
*/
			if(true/*((ТипЗНЧ(СтрокаДокумента) = Тип("СтрокаТаблицыЗначений")) И (НЕ СтрокаДокумента.Владелец().Колонки.Найти("СтоимостьПоступление") = Неопределено))
	  ИЛИ ((ТипЗНЧ(СтрокаДокумента) = Тип("Структура")) И СтрокаДокумента.Свойство("СтоимостьПоступление"))*/)
			{
				if(true/*Строка.СтоимостьПоступление<>0*/)
				{
					/*Движение.Стоимость = Строка.СтоимостьПоступление;*/
				}
			}
			/*// Реквизиты
*/
			/*Движение.КодОперации  = СтрокаДокумента.КодОперацииПартииТоваров;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];*/
		}
		//ПоступлениеНаСкладБух
		// Поступление товаров на склад
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
		//

		public void ПоступлениеНаСкладНал(/*СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Нал";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*Движение.Активность = Истина;*/
			/*Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;*/
			/*// Измерения
*/
			/*ЗаполнитьСкладВДвижении(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз);*/
			/*Движение.Номенклатура 	= Строка.Номенклатура;*/
			/*Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;*/
			/*// Если задана новая характеристика или установлен флаг изменить характеристику, подставляем ее
*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Или СтрокаДокумента.ИзменитьХарактеристику*/)
			{
				/*Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;*/
			}
			/*ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров);*/
			/*// Качество номенклатуры в движении есть только, если списано со склада
*/
			if(true/*СписаноИз = "НаСкладах"*/)
			{
				/*Движение.Качество	= Строка.Качество;*/
			}
			/*// Если задана новыя качество, подставляем его
*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.КачествоНовое)*/)
			{
				/*Движение.Качество	= СтрокаДокумента.КачествоНовое;*/
			}
			/*// Вместо пустого качества - новый
*/
			if(true/*НЕ ЗначениеЗаполнено(Движение.Качество)*/)
			{
				/*Движение.Качество	= Справочники.Качество.Новый;*/
			}
			/*Движение.ДокументОприходования	= Строка.ДокументОприходования;*/
			if(true/*НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера И 
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаСерийИХарактеристик И
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаКачества*/)
			{
				/*Движение.Заказ	= ?(ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);*/
			}
			/*// Списание со счета 10.МЦ обрабатывается особым образом
*/
			if(true/*Строка.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ*/)
			{
				/*Движение.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;*/
			}
			/*// Если списан принятый на комиссию товар, то он приходуется на специально указанный счет
*/
			if(true/*Строка.СчетУчета=СтрокаДокумента.ПринятыеСчетУчетаНУ*/)
			{
				if(true/*ЗначениеЗаполнено(СтрокаДокумента.ПринятыеКорСчетНУ)*/)
				{
					/*Движение.СчетУчета		= СтрокаДокумента.ПринятыеКорСчетНУ;*/
				}
			}
			/*Движение.Организация        = СтрокаДокумента.Организация;*/
			/*// Новая номенклатура-для комплектации: меняется все
*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая)*/)
			{
				/*Движение.Номенклатура= СтрокаДокумента.НоменклатураНовая;*/
				/*Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;*/
				/*Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;*/
				/*СпособОценкиМПЗ = ВРег(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", Учет, СтруктураПараметров));*/
				if(true/*СпособОценкиМПЗ <> "ПО СРЕДНЕЙ"*/)
				{
					/*Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;*/
				}
			}
			/*// Ресурсы
*/
			/*Движение.Количество	= Строка.Количество;*/
			/*Движение.Стоимость	= Строка.Стоимость;*/
			/*Движение.ПостояннаяРазница	= Строка.ПостояннаяРазница;*/
			/*Движение.ВременнаяРазница	= Строка.ВременнаяРазница;*/
			/*// Новое количество-для комплектации
*/
			if(true/*СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация*/)
			{
				/*Движение.Количество	= Строка.КоличествоПоступление;*/
			}
			/*// Оприходование может быть с новой стоимостью
*/
			if(true/*Строка.СтоимостьПоступление<>0*/)
			{
				/*Движение.Стоимость = Строка.СтоимостьПоступление;*/
			}
			/*// Реквизиты
*/
			/*Движение.КодОперации  = СтрокаДокумента.КодОперацииПартииТоваров;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];*/
		}
		//ПоступлениеНаСкладНал
		// Поступление товаров на склад
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
		//

		public void ПоступлениеНаСкладМеж(/*СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Меж";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровНаСкладах"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*Движение.Активность = Истина;*/
			/*Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;*/
			/*ЗаполнитьСкладВДвижении(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз);*/
			/*Движение.Номенклатура 	= Строка.Номенклатура;*/
			/*Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;*/
			/*// Если задана новая характеристика или установлен флаг изменить характеристику, подставляем ее
*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.ХарактеристикаНоменклатурыНовая) Или СтрокаДокумента.ИзменитьХарактеристику*/)
			{
				/*Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;*/
			}
			/*ЗаполнитьСериюВДвижении(СтрокаДокумента, Движение, Строка, СписаноИз, СтруктураПараметров);*/
			/*// Качество номенклатуры в движении есть только, если списано со склада
*/
			if(true/*СписаноИз = "НаСкладах"*/)
			{
				/*Движение.Качество	= Строка.Качество;*/
			}
			/*// Если задана новыя качество, подставляем его
*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.КачествоНовое)*/)
			{
				/*Движение.Качество	= СтрокаДокумента.КачествоНовое;*/
			}
			/*// Вместо пустого качества - новый
*/
			if(true/*НЕ ЗначениеЗаполнено(Движение.Качество)*/)
			{
				/*Движение.Качество	= Справочники.Качество.Новый;*/
			}
			/*Движение.ДокументОприходования	= Строка.ДокументОприходования;*/
			if(true/*НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.ВозвратОтКомиссионера И 
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаСерийИХарактеристик И
		НЕ СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.КорректировкаКачества*/)
			{
				/*Движение.Заказ	= ?(ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания), СтрокаДокумента.ЗаказСписания, Неопределено);*/
			}
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.КорСчетМУ)*/)
			{
				/*Движение.СчетУчета	= СтрокаДокумента.КорСчетМУ;*/
			}
			/*Движение.Организация        = СтрокаДокумента.Организация;*/
			/*// Новая номенклатура-для комплектации: меняется все
*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.НоменклатураНовая)*/)
			{
				/*Движение.Номенклатура= СтрокаДокумента.НоменклатураНовая;*/
				/*Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;*/
				/*Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатурыНовая;*/
				/*СпособОценкиМПЗ = ВРег(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", Учет, СтруктураПараметров));*/
				if(true/*СпособОценкиМПЗ <> "ПО СРЕДНЕЙ"*/)
				{
					/*Движение.ДокументОприходования	= СтрокаДокумента.ДокументОприходованияНовый;*/
				}
			}
			/*// Ресурсы
*/
			/*Движение.Количество	= Строка.Количество;*/
			/*Движение.Стоимость	= Строка.Стоимость;*/
			/*// Новое количество-для комплектации
*/
			if(true/*СтрокаДокумента.КодОперацииПартииТоваров = СтруктураПараметров.КодыОпераций.Комплектация*/)
			{
				/*Движение.Количество	= Строка.КоличествоПоступление;*/
			}
			/*// Оприходование может быть с новой стоимостью
*/
			if(true/*Строка.СтоимостьПоступление<>0*/)
			{
				/*Движение.Стоимость		= Строка.СтоимостьПоступление;*/
			}
			/*// Реквизиты
*/
			/*Движение.КодОперации  = СтрокаДокумента.КодОперацииПартииТоваров;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровНаСкладах"+Учет];*/
		}
		//ПоступлениеНаСкладМеж
		//Процедура изменяет вид склада в движениях по партионным регистрам

		public void ЗаполнитьСкладВДвижении(/*Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров, СписаноИз*/)
		{
			if(true/*ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", Учет, СтруктураПараметров) = Истина*/)
			{
				/*// Если движение по заказу на переработку, то склад может не заполняться
*/
				/*ВидЗаказа = ПрочитатьРеквизитДокумента("ВидОперации", СтрокаДокумента.ЗаказСписания);*/
				if(true/*ВидЗаказа = Перечисления.ВидыОперацийЗаказПокупателя.Переработка*/)
				{
					/*// В движении склад не заполняется в двух случаях: 
*/
					/*// - либо поступление - не со склада
*/
					/*// - либо поступление - со склада, но исходный склад не заполнен
*/
					if(true/*НЕ (СписаноИз = "НаСкладах") ИЛИ НЕ ЗначениеЗаполнено(Строка.Склад)*/)
					{
						/*Движение.Склад	= Неопределено;*/
					}
				}
				/*// Если задан новый склад поступления, подставляем его
*/
				if(true/*ЗначениеЗаполнено(СтрокаДокумента.СкладПолучатель)*/)
				{
					/*Движение.Склад 	= СтрокаДокумента.СкладПолучатель;*/
				}
			}
		}
		// Переданные на комиссию
		// Поступление товаров отданных
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
		//

		public void ПоступлениеПереданныхУпр(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Упр";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период                 = Строка.Период;*/
			/*Движение.Регистратор            = Строка.Регистратор;*/
			/*Движение.Активность				= Истина;*/
			/*Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;*/
			/*Движение.Номенклатура 			= Строка.Номенклатура;*/
			/*Движение.Организация 			= Строка.Организация;*/
			/*Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;*/
			/*Движение.ДокументОприходования	= Строка.ДокументОприходования;*/
			/*Движение.СтатусПартии	    = Строка.СтатусПартии;*/
			/*Движение.СтатусПередачи		= СтрокаДокумента.СтатусПередачи;*/
			/*Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;*/
			/*Движение.ДокументПередачи   	= СтрокаДокумента.ДокументПередачи;*/
			/*// Ресурсы
*/
			/*Движение.Количество				= Строка.Количество;*/
			/*Движение.Стоимость	= Строка.Стоимость;*/
			/*// Оприходование с новой стоимостью
*/
			if(true/*Строка.СтоимостьПоступление<>0*/)
			{
				/*Движение.Стоимость			= Строка.СтоимостьПоступление;*/
			}
			/*// Реквизиты
*/
			/*Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровПереданные"+Учет];*/
		}
		// Поступление товаров отданных
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
		//

		public void ПоступлениеПереданныхБух(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Бух";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период                 = Строка.Период;*/
			/*Движение.Регистратор            = Строка.Регистратор;*/
			/*Движение.Активность				= Истина;*/
			/*Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;*/
			/*Движение.Номенклатура 			= Строка.Номенклатура;*/
			/*Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;*/
			/*Движение.ДокументОприходования	= Строка.ДокументОприходования;*/
			/*// Если счет не изменился, может быть указан только счет учета
*/
			if(true/*Строка.СчетУчета = СтрокаДокумента.СчетУчетаБУ*/)
			{
				if(true/*ЗначениеЗаполнено(СтрокаДокумента.КорСчетБУ)*/)
				{
					/*Движение.СчетУчета		= СтрокаДокумента.КорСчетБУ;*/
				}
			}
			/*Движение.Организация        = СтрокаДокумента.Организация;*/
			/*Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;*/
			/*Движение.ДокументПередачи   	= СтрокаДокумента.ДокументПередачи;*/
			/*// Ресурсы
*/
			/*Движение.Количество				= Строка.Количество;*/
			/*Движение.Стоимость	= Строка.Стоимость;*/
			/*// Оприходование с новой стоимостью
*/
			if(true/*Строка.СтоимостьПоступление<>0*/)
			{
				/*Движение.Стоимость			= Строка.СтоимостьПоступление;*/
			}
			/*// Реквизиты
*/
			/*Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровПереданные"+Учет];*/
		}
		// Поступление товаров отданных
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
		//

		public void ПоступлениеПереданныхНал(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Нал";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период                 = Строка.Период;*/
			/*Движение.Регистратор            = Строка.Регистратор;*/
			/*Движение.Активность				= Истина;*/
			/*Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;*/
			/*Движение.Номенклатура 			= Строка.Номенклатура;*/
			/*Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;*/
			/*Движение.ДокументОприходования	= Строка.ДокументОприходования;*/
			/*// Списание со счета 10.МЦ обрабатывается особым образом
*/
			if(true/*Строка.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ*/)
			{
				/*Движение.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;*/
			}
			/*Движение.Организация        = СтрокаДокумента.Организация;*/
			/*Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;*/
			/*Движение.ДокументПередачи	= СтрокаДокумента.ДокументПередачи;*/
			/*// Ресурсы
*/
			/*Движение.Количество				= Строка.Количество;*/
			/*Движение.Стоимость	= Строка.Стоимость;*/
			/*Движение.ПостояннаяРазница	= Строка.ПостояннаяРазница;*/
			/*Движение.ВременнаяРазница	= Строка.ВременнаяРазница;*/
			/*// Оприходование с новой стоимостью
*/
			if(true/*Строка.СтоимостьПоступление<>0*/)
			{
				/*Движение.Стоимость			= Строка.СтоимостьПоступление;*/
			}
			/*// Реквизиты
*/
			/*Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровПереданные"+Учет];*/
		}
		// Поступление товаров отданных
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//  ТаблицаПоступающихПартий  – ТаблицаЗначений – поступающие партии товаров
		//

		public void ПоступлениеПереданныхМеж(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Меж";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииТоваровПереданные"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период                 = Строка.Период;*/
			/*Движение.Регистратор            = Строка.Регистратор;*/
			/*Движение.Активность				= Истина;*/
			/*Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;*/
			/*Движение.Номенклатура 			= Строка.Номенклатура;*/
			/*Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;*/
			/*Движение.ДокументОприходования	= Строка.ДокументОприходования;*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.КорСчетМУ)*/)
			{
				/*Движение.СчетУчета		= СтрокаДокумента.КорСчетМУ;*/
			}
			/*Движение.Организация        = СтрокаДокумента.Организация;*/
			/*Движение.ДоговорКонтрагента	= СтрокаДокумента.ДоговорКонтрагента;*/
			/*Движение.ДокументПередачи   	= СтрокаДокумента.ДокументПередачи;*/
			/*// Ресурсы
*/
			/*Движение.Количество				= Строка.Количество;*/
			/*Движение.Стоимость	= Строка.Стоимость;*/
			/*// Оприходование с новой стоимостью
*/
			if(true/*Строка.СтоимостьПоступление<>0*/)
			{
				/*Движение.Стоимость			= Строка.СтоимостьПоступление;*/
			}
			/*// Реквизиты
*/
			/*Движение.КодОперации		    = СтрокаДокумента.КодОперацииПартииТоваров;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииТоваровПереданные"+Учет];*/
		}
		// Списание на постоянные затраты
		// Поступление товаров на постоянные затраты
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//

		public void СписаниеНаПостоянныеЗатратыУпр(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Проект = СтрокаДокумента.Проект;*/
			if(true/*СтрокаДокумента.ВедениеУчетаПоПроектам И ЗначениеЗаполнено(Проект)*/)
			{
				if(true/*ТипЗнч(Проект) = Тип("СправочникСсылка.ВидыРаспределенияПоПроектам")
		   И Проект.МетодРаспределения = Перечисления.МетодыРаспределенияПоПроектам.ПриПроведенииДокументов*/)
				{
					/*// Создадим таблицу значений для передачи в РаспределитьЗатратыПоПроектам
*/
					/*ТаблицаДвижений = Новый ТаблицаЗначений;*/
					/*НоваяСтрока = ТаблицаДвижений.Добавить();*/
					/*ЗаполнитьЗначенияСвойств(НоваяСтрока,Строка);*/
					/*НоваяСтрока.Сумма = Строка.Стоимость;*/
					/*ТаблицаДвижений.Колонки.Добавить("НомерКорСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));*/
					/*ТаблицаДвижений.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
					/*УправлениеПроектами.РаспределитьЗатратыПоПроектам(ТаблицаДвижений,НоваяСтрока, НоваяСтрока.Сумма, СтрокаДокумента.Проект,СтруктураПараметров.Период);*/
					/*НуженНомерКорСтроки = Истина;*/
				}
			}
			if(true/*НЕ СтрокаДокумента.ВедениеУчетаПоПроектам*/)
			{
				/*Проект = Неопределено;*/
			}
			/*СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр(СтрокаДокумента, СтруктураПараметров, Строка, Проект);*/
		}
		//СписаниеНаПостоянныеЗатратыУпр

		public void СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр(/*СтрокаДокумента, СтруктураПараметров, Строка, Проект*/)
		{
			/*Учет = "Упр";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("Затраты"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);*/
			/*ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);*/
			/*Движение.Проект 				= Проект;*/
			/*ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, , СтруктураПараметров);*/
			/*// Ресурсы
*/
			/*Движение.Сумма				    = Строка.Стоимость;*/
			/*ЗаполнитьЗначенияСвойств(Строка, Новый Структура("НомерКорСтроки",СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет]));*/
		}
		// СформироватьДвиженияСписаниеНаПостоянныеЗатратыУпр
		// Поступление товаров на постоянные затраты
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//

		public void СписаниеНаПостоянныеЗатратыБух(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Бух";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("Затраты"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);*/
			/*ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);*/
			/*Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;*/
			/*Движение.СчетУчета		= СтрокаДокумента.КорСчетБУ;*/
			/*ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);*/
			/*// Ресурсы
*/
			/*Движение.Сумма	= Строка.Стоимость;*/
			/*// Реквизиты
*/
			/*ЗаполнитьЗначенияСвойств(Строка, Новый Структура("НомерКорСтроки",СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет]));*/
		}
		// СписаниеНаПостоянныеЗатратыБух
		// Поступление товаров на постоянные затраты
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//

		public void СписаниеНаПостоянныеЗатратыМеж(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Меж";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("Затраты"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);*/
			/*ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);*/
			/*Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;*/
			/*Движение.СчетУчета		= СтрокаДокумента.КорСчетМУ;*/
			/*ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);*/
			/*// Ресурсы
*/
			/*Движение.Сумма	= Строка.Стоимость;*/
			/*// Реквизиты
*/
			/*ЗаполнитьЗначенияСвойств(Строка, Новый Структура("НомерКорСтроки",СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет]));*/
		}
		// СписаниеНаПостоянныеЗатратыМеж
		// Поступление товаров на постоянные затраты
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//

		public void СписаниеНаПостоянныеЗатратыНал(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Нал";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("Затраты"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);*/
			/*ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);*/
			/*ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);*/
			/*Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;*/
			/*Движение.СчетУчета		= СтрокаДокумента.КорСчетНУ;*/
			/*// Ресурсы
*/
			/*Движение.ПостояннаяРазница	= Строка.ПостояннаяРазница;*/
			/*Движение.ВременнаяРазница	= Строка.ВременнаяРазница;*/
			/*Движение.Сумма				= Строка.Стоимость;*/
			if(true/*СтрокаДокумента.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения*/)
			{
				/*Движение.ПостояннаяРазница	= Движение.ПостояннаяРазница + Строка.Стоимость;*/
				/*Движение.Сумма				= 0;*/
			}
			/*// Реквизиты
*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиЗатраты"+Учет];*/
		}
		// СписаниеНаПостоянныеЗатратыНал
		// Списание в производство

		public void ЗаполнитьЗаказВДвижении(/*Учет, Движение, СтрокаДокумента, Организация = Неопределено, СтруктураПараметров*/)
		{
			/*УчетЗатратПоЗаказамНаПроизводство = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("УчетЗатратПоЗаказамНаПроизводство", Учет, СтруктураПараметров);*/
			/*// Заказ списания
*/
			/*ЗаказСписания = Неопределено;*/
			if(true/*ЗначениеЗаполнено(СтрокаДокумента.ЗаказСписания)*/)
			{
				if(true/*ТипЗнч(СтрокаДокумента.ЗаказСписания) = Тип("ДокументСсылка.ЗаказПокупателя")*/)
				{
					/*ЗаказСписания = СтрокаДокумента.ЗаказСписания;*/
				}
			}
			/*Движение.Заказ = ЗаказСписания;*/
		}
		// ЗаполнитьЗаказВДвижении
		// Поступление товаров в незавершенное производство
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//

		public void ПоступлениеВПроизводствоУпр(/*СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Упр";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("НезавершенноеПроизводство"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*Движение.Активность = Истина;*/
			/*Движение.ВидДвижения			= ВидДвиженияНакопления.Приход;*/
			/*Движение.Подразделение 			= СтрокаДокумента.Подразделение;*/
			/*Движение.НоменклатурнаяГруппа 	= СтрокаДокумента.НоменклатурнаяГруппа;*/
			/*Движение.СтатьяЗатрат 			= СтрокаДокумента.СтатьяЗатрат;*/
			/*Движение.Затрата				= Строка.Номенклатура;*/
			/*Движение.ХарактеристикаЗатраты  = Строка.ХарактеристикаНоменклатуры;*/
			/*СтруктураРеквизитов = Новый Структура("ВестиУчетПоСериямВНЗП");*/
			/*ПолучитьРеквизитыОбъекта(Строка.Номенклатура, СтруктураРеквизитов);*/
			if(true/*СтруктураРеквизитов.ВестиУчетПоСериямВНЗП*/)
			{
				/*Движение.СерияЗатраты = СтрокаДокумента.СерияНоменклатуры;*/
			}
			/*ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, Неопределено, СтруктураПараметров);*/
			/*// Ресурсы
*/
			/*Движение.Количество = Строка.Количество;*/
			/*Движение.Стоимость	= Строка.Стоимость;*/
			/*// Реквизиты
*/
			/*Движение.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиНезавершенноеПроизводство"+Учет];*/
		}
		// ПоступлениеВПроизводствоУпр
		// Поступление товаров в незавершенное производство
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//

		public void ПоступлениеВПроизводствоБух(/*СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Бух";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("НезавершенноеПроизводство"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);*/
			/*ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);*/
			/*Движение.Подразделение 			= СтрокаДокумента.ПодразделениеОрганизации;*/
			/*Движение.СчетУчета              = СтрокаДокумента.КорСчетБУ;*/
			/*Движение.Затрата				= Строка.Номенклатура;*/
			/*Движение.ХарактеристикаЗатраты  = Строка.ХарактеристикаНоменклатуры;*/
			/*СтруктураРеквизитов = Новый Структура("ВестиУчетПоСериямВНЗП");*/
			/*ПолучитьРеквизитыОбъекта(Строка.Номенклатура, СтруктураРеквизитов);*/
			if(true/*СтруктураРеквизитов.ВестиУчетПоСериямВНЗП*/)
			{
				/*Движение.СерияЗатраты = СтрокаДокумента.СерияНоменклатуры;*/
			}
			/*ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);*/
			/*// Ресурсы
*/
			/*Движение.Количество = Строка.Количество;*/
			/*Движение.Стоимость = Строка.Стоимость;*/
			/*// Реквизиты
*/
			/*Движение.КодОперации = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиНезавершенноеПроизводство"+Учет];*/
		}
		// ПоступлениеВПроизводствоБух
		// Поступление товаров в незавершенное производство
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//

		public void ПоступлениеВПроизводствоНал(/*СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Нал";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("НезавершенноеПроизводство"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);*/
			/*ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);*/
			/*Движение.Подразделение 			= СтрокаДокумента.ПодразделениеОрганизации;*/
			/*Движение.СчетУчета              = СтрокаДокумента.КорСчетНУ;*/
			/*Движение.Затрата				= Строка.Номенклатура;*/
			/*Движение.ХарактеристикаЗатраты  = Строка.ХарактеристикаНоменклатуры;*/
			/*СтруктураРеквизитов = Новый Структура("ВестиУчетПоСериямВНЗП");*/
			/*ПолучитьРеквизитыОбъекта(Строка.Номенклатура, СтруктураРеквизитов);*/
			if(true/*СтруктураРеквизитов.ВестиУчетПоСериямВНЗП*/)
			{
				/*Движение.СерияЗатраты = СтрокаДокумента.СерияНоменклатуры;*/
			}
			/*ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);*/
			/*// Ресурсы
*/
			/*Движение.Количество = Строка.Количество;*/
			if(true/*СтрокаДокумента.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения*/)
			{
				/*Движение.ПостояннаяРазница	= Строка.ПостояннаяРазница+ Строка.Стоимость;*/
				/*Движение.Стоимость = 0;*/
			}
			/*Движение.ВременнаяРазница	= Строка.ВременнаяРазница;*/
			/*// Реквизиты
*/
			/*Движение.КодОперации  = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиНезавершенноеПроизводство"+Учет];*/
		}
		//ПоступлениеВПроизводствоНал
		// Поступление товаров в незавершенное производство
		//
		// Параметры
		//  СтруктураПараметров  – Структура, содержащая общие параметры
		//

		public void ПоступлениеВПроизводствоМеж(/*СписаноИз, СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Меж";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("НезавершенноеПроизводство"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*ЗаполнитьЗначенияСвойств(Движение, СтрокаДокумента);*/
			/*ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);*/
			/*Движение.Подразделение			= СтрокаДокумента.ПодразделениеОрганизации;*/
			/*Движение.СчетУчета				= СтрокаДокумента.КорСчетМУ;*/
			/*Движение.Затрата				= Строка.Номенклатура;*/
			/*Движение.ХарактеристикаЗатраты	= Строка.ХарактеристикаНоменклатуры;*/
			/*СтруктураРеквизитов = Новый Структура("ВестиУчетПоСериямВНЗП");*/
			/*ПолучитьРеквизитыОбъекта(Строка.Номенклатура, СтруктураРеквизитов);*/
			if(true/*СтруктураРеквизитов.ВестиУчетПоСериямВНЗП*/)
			{
				/*Движение.СерияЗатраты = СтрокаДокумента.СерияНоменклатуры;*/
			}
			/*ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);*/
			/*// Ресурсы
*/
			/*Движение.Количество = Строка.Количество;*/
			/*Движение.Стоимость = Строка.Стоимость;*/
			/*// Реквизиты
*/
			/*Движение.КодОперации  = Перечисления.КодыОперацийНезавершенноеПроизводство.СписаниеПартийВПроизводствоОперативно;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиНезавершенноеПроизводство"+Учет];*/
		}
		// ПоступлениеВПроизводствоМеж
		// Списание на брак

		public void ЗаполнитьОбщиеСвойстваСписанияНаБрак(/*Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров*/)
		{
			/*// Сначала заполним свойства называющиеся так же, как в строке документа
*/
			/*ЗаполнитьЗначенияСвойств(Движение,СтрокаДокумента);*/
			/*// Свойства с отличающимся названием
*/
			/*Движение.ХарактеристикаПродукции = СтрокаДокумента.ХарактеристикаНоменклатурыНовая;*/
			/*Движение.СерияПродукции			 = СтрокаДокумента.СерияНоменклатурыНовая;*/
			/*ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);*/
			/*// Свойства из основного движения
*/
			/*Движение.Сумма       = Строка.Стоимость;*/
			/*// Реквизиты
*/
			/*Движение.КодОперации = Перечисления.КодыОперацийБракВПроизводстве.СписаниеПартийВПроизводствоОперативно;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиБракВПроизводстве"+Учет];*/
		}
		// ЗаполнитьОбщиеСвойстваСписанияНаБрак
		// Списание на брак
		//
		// Параметры
		//

		public void СписаниеНаБракУпр(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Упр";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("БракВПроизводстве"+Учет, СтруктураПараметров);*/
			/*ЗаполнитьОбщиеСвойстваСписанияНаБрак(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров );*/
			/*ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, , СтруктураПараметров);*/
		}
		// СписаниеНаБракУпр
		// Списание на брак
		//
		// Параметры
		//

		public void СписаниеНаБракБух(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Бух";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("БракВПроизводстве"+Учет, СтруктураПараметров);*/
			/*ЗаполнитьОбщиеСвойстваСписанияНаБрак(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров);*/
			/*Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;*/
			/*Движение.СчетУчета		= СтрокаДокумента.КорСчетБУ;*/
			/*ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);*/
		}
		// СписаниеНаБракБух
		// Списание на брак
		//
		// Параметры
		//

		public void СписаниеНаБракНал(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Нал";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("БракВПроизводстве"+Учет, СтруктураПараметров);*/
			/*ЗаполнитьОбщиеСвойстваСписанияНаБрак(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров);*/
			/*Движение.Подразделение = СтрокаДокумента.ПодразделениеОрганизации;*/
			/*Движение.СчетУчета	   = СтрокаДокумента.КорСчетНУ;*/
			/*ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);*/
			if(true/*СтрокаДокумента.СтатьяЗатрат.ВидРасходовНУ = Перечисления.ВидыРасходовНУ.НеУчитываемыеВЦеляхНалогообложения*/)
			{
				/*Движение.ПостояннаяРазница	= Строка.ПостояннаяРазница+ Строка.Стоимость;*/
				/*Движение.Сумма = 0;*/
			}
			/*Движение.ВременнаяРазница	= Строка.ВременнаяРазница;*/
		}
		// СписаниеНаБракНал
		// Списание на брак
		//
		// Параметры
		//

		public void СписаниеНаБракМеж(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Меж";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("БракВПроизводстве"+Учет, СтруктураПараметров);*/
			/*ЗаполнитьОбщиеСвойстваСписанияНаБрак(Движение, Строка, СтрокаДокумента, Учет, СтруктураПараметров);*/
			/*Движение.Подразделение	= СтрокаДокумента.ПодразделениеОрганизации;*/
			/*Движение.СчетУчета		= СтрокаДокумента.КорСчетМУ;*/
			/*ЗаполнитьЗаказВДвижении(Учет, Движение, СтрокаДокумента, СтрокаДокумента.Организация, СтруктураПараметров);*/
		}
		// СписаниеНаБракМеж
		// Вложения во внеоборотные активы
		// Вложения в объекты внеоборотных активов
		//
		// Параметры
		//

		public void ВложенияВоВнеоборотныеАктивыУпр(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Упр";*/
			/*// Движение по регистру накопления стоимости объектов строительства
*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("СтроительствоОбъектовОсновныхСредств", СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*Движение.Активность = Истина;*/
			/*Движение.ВидДвижения         = ВидДвиженияНакопления.Приход;*/
			/*Движение.ОбъектСтроительства = СтрокаДокумента.ОбъектСтроительства;*/
			/*Движение.Сумма				 = Строка.Стоимость;*/
			/*// Реквизиты
*/
			/*//Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиСтроительствоОбъектовОсновныхСредств"];
*/
			/*// Движение по регистру учета оборота затрат
*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ЗатратыНаСтроительствоОбъектовОсновныхСредств", СтруктураПараметров);*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*Движение.Активность = Истина;*/
			/*Движение.ОбъектСтроительства = СтрокаДокумента.ОбъектСтроительства;*/
			/*Движение.СтатьяЗатрат        = СтрокаДокумента.СтатьяЗатрат;*/
			/*Движение.Сумма				 = Строка.Стоимость;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиЗатратыНаСтроительствоОбъектовОсновныхСредств"];*/
			/*// Реквизиты
*/
		}
		// Списание на амортизацию

		public void СписаниеНаАмортизациюУпр(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Упр";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("СтоимостьОС"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*Движение.Активность  = Истина;*/
			/*Движение.ВидДвижения = ВидДвиженияНакопления.Приход;*/
			/*Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;*/
			if(true/*Учет = "Бух"
		ИЛИ Учет = "Нал"*/)
			{
				/*Движение.Организация  = СтрокаДокумента.Организация;*/
				/*Движение.ВидОперации  = Перечисления.ВидыСобытийОС.ПринятиеКУчету;*/
			}
			/*Движение.Стоимость = Строка.Стоимость;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиСтоимостьОС"+Учет];*/
		}

		public void СписаниеНаАмортизациюБух(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Бух";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("СтоимостьОС"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*Движение.Активность  = Истина;*/
			/*Движение.ВидДвижения = ВидДвиженияНакопления.Приход;*/
			/*Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;*/
			/*Движение.Организация  = СтрокаДокумента.Организация;*/
			/*Движение.ВидОперации  = Перечисления.ВидыСобытийОС.ПринятиеКУчету;*/
			/*Движение.Стоимость = Строка.Стоимость;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиСтоимостьОС"+Учет];*/
		}

		public void СписаниеНаАмортизациюНал(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Нал";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("СтоимостьОС"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*Движение.Активность  = Истина;*/
			/*Движение.ВидДвижения = ВидДвиженияНакопления.Приход;*/
			/*Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;*/
			/*Движение.Организация  = СтрокаДокумента.Организация;*/
			/*Движение.ВидОперации  = Перечисления.ВидыСобытийОС.ПринятиеКУчету;*/
			/*Движение.Стоимость = Строка.Стоимость;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиСтоимостьОС"+Учет];*/
		}
		// Списание на затраты

		public void СписаниеНаЗатратыОСУпр(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Упр";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ОССписанныеНаЗатраты"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*Движение.Активность  = Истина;*/
			/*Движение.ВидДвижения = ВидДвиженияНакопления.Приход;*/
			/*Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;*/
			/*Движение.Стоимость = Строка.Стоимость;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиОССписанныеНаЗатраты"+Учет];*/
		}

		public void СписаниеНаЗатратыОСБух(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Бух";*/
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ОССписанныеНаЗатраты"+Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*Движение.Активность  = Истина;*/
			/*Движение.ВидДвижения = ВидДвиженияНакопления.Приход;*/
			/*Движение.ОсновноеСредство = СтрокаДокумента.ОсновноеСредство;*/
			/*Движение.Организация  = СтрокаДокумента.Организация;*/
			/*Движение.Стоимость = Строка.Стоимость;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиОССписанныеНаЗатраты"+Учет];*/
		}
		// Передача материалов в эксплуатацию

		public void ПередачаМатериаловВЭксплуатациюУпр(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*ИмяРегистра = "ПартииМатериаловВЭксплуатации"+ "Упр";*/
			/*// Измерение ФизЛицо в регистрах партии материалов в эксплуатации обязательно для 
*/
			/*// заполнения.
*/
			if(true/*НЕ ЗначениеЗаполнено(СтрокаДокумента.ФизЛицо)*/)
			{
			}
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистра, СтруктураПараметров);*/
			/*// Свойства
*/
			/*Движение.Период      = Строка.Период;*/
			/*Движение.Регистратор = Строка.Регистратор;*/
			/*Движение.Активность  = Истина;*/
			/*Движение.ВидДвижения = ВидДвиженияНакопления.Приход;*/
			/*Движение.Подразделение           = СтрокаДокумента.Подразделение;*/
			/*Движение.Номенклатура            = Строка.Номенклатура;*/
			/*Движение.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;*/
			/*Движение.СерияНоменклатуры       = Строка.СерияНоменклатуры;*/
			/*Движение.ДокументПередачи        = СтрокаДокумента.ДокументПередачи;*/
			/*Движение.ФизЛицо                 = СтрокаДокумента.ФизЛицо;*/
			/*Движение.НазначениеИспользования = СтрокаДокумента.НазначениеИспользования;*/
			/*Движение.Количество = Строка.Количество;*/
			/*Движение.Стоимость  = Строка.Стоимость;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтроки"+ИмяРегистра];*/
		}
		// ПередачаМатериаловВЭксплуатациюУпр()

		public void ПередачаМатериаловВЭксплуатациюБух(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Бух";*/
			if(true/*НЕ ЗначениеЗаполнено(СтрокаДокумента.ФизЛицо)*/)
			{
			}
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииМатериаловВЭксплуатации"+ Учет, СтруктураПараметров);*/
			/*// Свойства
*/
			/*ЗаполнитьЗначенияСвойств(Движение, Строка);*/
			/*ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);*/
			/*Движение.Подразделение           = СтрокаДокумента.ПодразделениеОрганизации;*/
			/*Движение.СчетУчета       		 = СтрокаДокумента.КорСчетБУ;*/
			/*Движение.ДокументПередачи        = СтрокаДокумента.ДокументПередачи;*/
			/*Движение.ФизЛицо                 = СтрокаДокумента.ФизЛицо;*/
			/*Движение.НазначениеИспользования = СтрокаДокумента.НазначениеИспользования;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииМатериаловВЭксплуатации"+ Учет];*/
		}
		// ПередачаМатериаловВЭксплуатациюБух()

		public void ПередачаМатериаловВЭксплуатациюНал(/*СтрокаДокумента, СтруктураПараметров, Строка*/)
		{
			/*Учет = "Нал";*/
			if(true/*НЕ ЗначениеЗаполнено(СтрокаДокумента.ФизЛицо)*/)
			{
			}
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров("ПартииМатериаловВЭксплуатации"+ Учет, СтруктураПараметров);*/
			/*ЗаполнитьЗначенияСвойств(Движение, Строка);*/
			/*ЗаполнитьОбщиеСвойстваКорДвижения(Движение, Строка);*/
			/*Движение.Подразделение           = СтрокаДокумента.ПодразделениеОрганизации;*/
			if(true/*Строка.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ*/)
			{
				/*Движение.СчетУчета = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;*/
			}
			/*Движение.ДокументПередачи        = СтрокаДокумента.ДокументПередачи;*/
			/*Движение.ФизЛицо                 = СтрокаДокумента.ФизЛицо;*/
			/*Движение.НазначениеИспользования = СтрокаДокумента.НазначениеИспользования;*/
			/*Строка.НомерКорСтроки = СтруктураПараметров["ТекНомерСтрокиПартииМатериаловВЭксплуатации"+ Учет];*/
		}
		// ПередачаМатериаловВЭксплуатациюНал()
		// Общая процедура поступления: маршрутизирует алгоритм поступления
		//

		public void ВыполнитьКорДвижениеУпр(/*СписаноИз, ПриходоватьВ, СтрокаДокумента, СтруктураПараметров, Движение*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*// Общие для всех учетов алгоритмы
*/
				if(true/*ПриходоватьВ = "НаСкладах"*/)
				{
					/*ПоступлениеНаСкладУпр(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);*/
				}
			}
		}
		// Общая процедура поступления: маршрутизирует алгоритм поступления
		//

		public void ВыполнитьКорДвижениеРегл(/*СписаноИз, ПриходоватьВ, СтрокаДокумента, СтруктураПараметров, Движение*/)
		{
			/*КодыОпераций = Перечисления.КодыОперацийПартииТоваров;*/
			if(true/*СтрокаДокумента.ОтражатьВБухгалтерскомУчете*/)
			{
				/*// Общие для всех учетов алгоритмы
*/
				if(true/*ПриходоватьВ = "НаСкладах"*/)
				{
					/*ПоступлениеНаСкладБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);*/
				}
				if(true/*ПриходоватьВ = "ОбщепроизводственныеРасходы"
			ИЛИ ПриходоватьВ = "ОбщехозяйственныеРасходы" 
			ИЛИ ПриходоватьВ = "КоммерческиеРасходы"
			ИЛИ ПриходоватьВ = "ИздержкиОбращения"*/)
				{
					/*СписаниеНаПостоянныеЗатратыБух(СтрокаДокумента, СтруктураПараметров, Движение);*/
				}
				if(true/*ПриходоватьВ = "ЗатратыПриПринятииКУчету"*/)
				{
					/*СписаниеНаЗатратыОСБух(СтрокаДокумента, СтруктураПараметров, Движение);*/
				}
			}
			if(true/*СтрокаДокумента.ОтражатьВНалоговомУчете*/)
			{
				/*// Общие для всех учетов алгоритмы
*/
				if(true/*ПриходоватьВ = "НаСкладах"*/)
				{
					/*ПоступлениеНаСкладНал(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);*/
				}
			}
		}
		// Общая процедура поступления: маршрутизирует алгоритм поступления
		//

		public void ВыполнитьКорДвижениеМеж(/*СписаноИз, ПриходоватьВ, СтрокаДокумента, СтруктураПараметров, Движение*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВМеждународномУчете*/)
			{
				/*// Общие для всех учетов алгоритмы
*/
				if(true/*ПриходоватьВ = "НаСкладах"*/)
				{
					/*ПоступлениеНаСкладМеж(СписаноИз, СтрокаДокумента, СтруктураПараметров, Движение);*/
				}
				if(true/*ПриходоватьВ = "ОбщепроизводственныеРасходы"
			ИЛИ ПриходоватьВ = "ОбщехозяйственныеРасходы" 
			ИЛИ ПриходоватьВ = "КоммерческиеРасходы"
			ИЛИ ПриходоватьВ = "ИздержкиОбращения"*/)
				{
					/*СписаниеНаПостоянныеЗатратыМеж(СтрокаДокумента, СтруктураПараметров, Движение);*/
				}
			}
		}
		// Общие
		////////////////////////////////////////////////////////////////////////////////
		// СПЕЦИФИЧЕСКИЕ ПРОЦЕДУРЫ ДВИЖЕНИЯ ПАРТИЙ ДЛЯ ОПРЕДЕЛЕННЫХ ВИДОВ ДОКУМЕНТОВ
		// Процедуры, обслуживающие возврат товара от покупателя
		// Возврат товара от комиссионера обслуживается общим случаем списания партий товаров

		public void ПолучитьТаблицуПартийПринятыхНаОтветственноеХранение(/*СтруктураПараметров, ДокументПартии, СтрУчет*/)
		{
			/*Запрос = Новый Запрос;*/
			if(true/*СтрУчет = "Управленческий"*/)
			{
				/*Запрос.Текст = "ВЫБРАТЬ
		               |	ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		               |	ПартииТоваровНаСкладах.Склад КАК Склад,
		               |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
		               |	ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
		               |	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
		               |	ПартииТоваровНаСкладах.СтатусПартии КАК СтатусПартии,
		               |	ПартииТоваровНаСкладах.Заказ КАК Заказ,
		               |	ПартииТоваровНаСкладах.Качество КАК Качество,
		               |	СУММА(ВЫБОР
		               |			КОГДА ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
		               |				ТОГДА ПартииТоваровНаСкладах.Количество
		               |			ИНАЧЕ -ПартииТоваровНаСкладах.Количество
		               |		КОНЕЦ) КАК Количество,
		               |	СУММА(ВЫБОР
		               |			КОГДА ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
		               |				ТОГДА ПартииТоваровНаСкладах.Стоимость
		               |			ИНАЧЕ -ПартииТоваровНаСкладах.Стоимость
		               |		КОНЕЦ) КАК Стоимость,
					   |	ПартииТоваровНаСкладах.Организация
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		               |ГДЕ
		               |	ПартииТоваровНаСкладах.КодОперации = &КодОперации
		               |	И (ПартииТоваровНаСкладах.ДокументДвижения = &ДокументПартии
		               |			ИЛИ ПартииТоваровНаСкладах.Регистратор = &ДокументПартии)
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	ПартииТоваровНаСкладах.Номенклатура,
		               |	ПартииТоваровНаСкладах.Склад,
		               |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
		               |	ПартииТоваровНаСкладах.СерияНоменклатуры,
		               |	ПартииТоваровНаСкладах.ДокументОприходования,
		               |	ПартииТоваровНаСкладах.СтатусПартии,
		               |	ПартииТоваровНаСкладах.Заказ,
		               |	ПартииТоваровНаСкладах.Качество,
					   |	ПартииТоваровНаСкладах.Организация";*/
			}
			/*Запрос.УстановитьПараметр("КодОперации", Перечисления.КодыОперацийПартииТоваров.ОтложеннаяОтгрузка);*/
			/*Запрос.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);*/
			/*Запрос.УстановитьПараметр("ДокументПартии", ДокументПартии);*/
			/*СтруктураПараметров.Вставить("ТаблицаПартийПринятыхНаОтветственноеХранение"+СтрУчет,Запрос.Выполнить().Выгрузить());*/
		}
		//ПолучитьТаблицуПартийПринятыхНаОтветственноеХранение()
		// Определяет параметры возврата
		//

		public void ПолучитьПараметрыВозвратаОтПокупателя(/*СтрокаДокумента, СтруктураПараметров, ИмяРегистраПартии, СтрУчет, ВестиПУПоСкладам, НаборОснование*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*ИмяРегистраПартии = "ПартииТоваровНаСкладахУпр";*/
				/*ВестиПУПоСкладам  = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров);*/
				/*СтрУчет			  = "Управленческий";*/
				/*НаборОснование	  = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();*/
			}
		}
		//ПолучитьПараметрыВозвратаОтПокупателя
		// Возвращает таблицу партий товаров, которую можно оприходовать документом "Возврат товаров от покупателя"
		//

		public object ПолучитьТаблицуЗаписейОснованияВозврата(/*СтрокаДокумента, СтруктураПараметров, ДокументПартии, НаборОснование, СтрУчет, ИмяРегистраПартии*/)
		{
			/*// Партии, которые можно вернуть, получаем при первом вызове и помещаем в структуру параметров
*/
			/*// Затем до конца обработки документа используем таблицы значений из структуры параметров
*/
			/*ТаблицаЗаписейОснования = Неопределено;*/
			/*ТаблицыПартийВозврата = Неопределено;*/
			/*// В табличной части возврата от покупателя может быть указано произвольное количество документов партии
*/
			if(true/*СтруктураПараметров.Свойство("ТаблицыПартийВозврата"+СтрУчет,ТаблицыПартийВозврата)*/)
			{
				/*ТаблицаЗаписейОснования = ТаблицыПартийВозврата.Получить(ДокументПартии.УникальныйИдентификатор());*/
				if(true/*ТаблицаЗаписейОснования <> Неопределено*/)
				{
				}
			}
			/*КодыОпераций = СтруктураПараметров.КодыОпераций;*/
			/*// Если указан партиеобразующий документ, данные берутся из него
*/
			if(true/*Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения.ДокументОприходования.Тип.СодержитТип(ТипЗнч(ДокументПартии))*/)
			{
				/*// Для сообщения о нехватке партии
*/
				/*СтруктураПараметров.Вставить("СтрокаСообщенияНеНайдено", "Не найдено поступление ");*/
				/*СтруктураПараметров.Вставить("СтрокаСообщенияДокументПартии", ", по документу партии ");*/
				/*// 
*/
				if(true/*ТипЗнч(ДокументПартии)=Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену")*/)
				{
					/*// Движения поступления выполнены с неправильной себестоимостью
*/
					/*// Правильная себестоимость известна только в конце месяца после расчета себестоимости выпуска
*/
					/*Запрос = Новый Запрос;*/
					/*Запрос.УстановитьПараметр("ДокументВыпуска",ДокументПартии);*/
					/*Запрос.УстановитьПараметр("КодОперации",Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииФиксНаСклад);*/
					if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
					{
						/*ЗаполнитьЗапросВозвратПоПоступлениюУпр(Запрос);*/
					}
					/*ТаблицаЗаписейОснования = Запрос.Выполнить().Выгрузить();*/
				}
				/*// Если указан документ списания, данные о партиях берутся из него
*/
			}
			/*//Если Метаданные.РегистрыНакопления.ПартииТоваровНаСкладах.Измерения.ДокументОприходования.Тип.СодержитТип(ТипЗнч(ДокументПартии)) Тогда
*/
			/*// В полученной таблице найдем партии, которые уже возвращались другими возвратами
*/
			/*ТаблицаЗаписейОснования = ПодготовитьТаблицуЗаписейОснования(ТаблицаЗаписейОснования, СтруктураПараметров, ДокументПартии, СтрУчет);*/
			if(true/*НЕ СтруктураПараметров.Свойство("ТаблицыПартийВозврата"+СтрУчет,ТаблицыПартийВозврата)*/)
			{
				/*ТаблицыПартийВозврата = Новый Соответствие;*/
			}
			/*ТаблицыПартийВозврата.Вставить(ДокументПартии.УникальныйИдентификатор(),ТаблицаЗаписейОснования);*/
			/*СтруктураПараметров.Вставить("ТаблицыПартийВозврата"+СтрУчет,ТаблицыПартийВозврата);*/
			return null;
		}
		// ПолучитьТаблицуЗаписейОснованияВозврата()

		public void ЗаполнитьЗапросПоВозвратуУпр(/*Запрос*/)
		{
			/*Запрос.Текст = "ВЫБРАТЬ
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.СтатусПартии,
               |	Подзапрос.Заказ,
               |	СУММА(Подзапрос.Количество) КАК Количество,
               |	СУММА(Подзапрос.Стоимость) КАК Стоимость,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
			   |	Подзапрос.Организация
               |ИЗ
               |	(ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
               |		ПартииТоваровНаСкладах.СтатусПартии КАК СтатусПартии,
               |		ПартииТоваровНаСкладах.Заказ КАК Заказ,
               |		ПартииТоваровНаСкладах.Количество КАК Количество,
               |		ПартииТоваровНаСкладах.Стоимость КАК Стоимость,
               |		0 КАК СтоимостьПоступление,
               |		ПартииТоваровНаСкладах.КодОперации КАК КодОперацииПартииТоваров,
               |		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
               |		ПартииТоваровНаСкладах.Период КАК Период,
               |		ПартииТоваровНаСкладах.Качество КАК Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
			   |		ПартииТоваровНаСкладах.Организация КАК Организация
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.Регистратор = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период
               |	
               |	ОБЪЕДИНИТЬ ВСЕ
               |	
               |	ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования,
               |		ПартииТоваровНаСкладах.СтатусПартии,
               |		ПартииТоваровНаСкладах.Заказ,
               |		ПартииТоваровНаСкладах.Количество,
               |		ПартииТоваровНаСкладах.Стоимость,
               |		0,
               |		ПартииТоваровНаСкладах.КодОперации,
               |		ПартииТоваровНаСкладах.ДокументДвижения,
               |		ПартииТоваровНаСкладах.ДокументДвиженияПериод,
               |		ПартииТоваровНаСкладах.Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
			   |		ПартииТоваровНаСкладах.Организация КАК Организация
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период) КАК Подзапрос
               |
               |СГРУППИРОВАТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.СтатусПартии,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
			   |	Подзапрос.Организация
			   |УПОРЯДОЧИТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.СтатусПартии,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
			   |	Подзапрос.Организация";*/
		}
		// ЗаполнитьЗапросПоВозвратуУпр(Запрос)()

		public void ЗаполнитьЗапросПоВозвратуБух(/*Запрос*/)
		{
			/*Запрос.Текст = "ВЫБРАТЬ
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.Заказ,
               |	СУММА(Подзапрос.Количество) КАК Количество,
               |	СУММА(Подзапрос.Стоимость) КАК Стоимость,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
               |	Подзапрос.СчетУчета,
               |	Подзапрос.Организация
               |ИЗ
               |	(ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
               |		ПартииТоваровНаСкладах.Заказ КАК Заказ,
               |		ПартииТоваровНаСкладах.Количество КАК Количество,
               |		ПартииТоваровНаСкладах.Стоимость КАК Стоимость,
               |		0 КАК СтоимостьПоступление,
               |		ПартииТоваровНаСкладах.КодОперации КАК КодОперацииПартииТоваров,
               |		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
               |		ПартииТоваровНаСкладах.Период КАК Период,
               |		ПартииТоваровНаСкладах.Качество КАК Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
               |		ПартииТоваровНаСкладах.СчетУчета КАК СчетУчета,
               |		ПартииТоваровНаСкладах.Организация КАК Организация
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.Регистратор = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период
               |	
               |	ОБЪЕДИНИТЬ ВСЕ
               |	
               |	ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования,
               |		ПартииТоваровНаСкладах.Заказ,
               |		ПартииТоваровНаСкладах.Количество,
               |		ПартииТоваровНаСкладах.Стоимость,
               |		0,
               |		ПартииТоваровНаСкладах.КодОперации,
               |		ПартииТоваровНаСкладах.ДокументДвижения,
               |		ПартииТоваровНаСкладах.ДокументДвиженияПериод,
               |		ПартииТоваровНаСкладах.Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
               |		ПартииТоваровНаСкладах.СчетУчета,
               |		ПартииТоваровНаСкладах.Организация
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период) КАК Подзапрос
               |
               |СГРУППИРОВАТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
               |	Подзапрос.СчетУчета,
               |	Подзапрос.Организация
			   |УПОРЯДОЧИТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
               |	Подзапрос.СчетУчета,
               |	Подзапрос.Организация";*/
		}
		// ЗаполнитьЗапросПоВозвратуБух(Запрос)

		public void ЗаполнитьЗапросПоВозвратуНал(/*Запрос*/)
		{
			/*Запрос.Текст = "ВЫБРАТЬ
               |	Подзапрос.Номенклатура,
               |	Подзапрос.Склад,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.Заказ,
               |	СУММА(Подзапрос.Количество) КАК Количество,
               |	СУММА(Подзапрос.Стоимость) КАК Стоимость,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
               |	Подзапрос.СчетУчета,
               |	Подзапрос.Организация,
               |	СУММА(Подзапрос.ПостояннаяРазница) КАК ПостояннаяРазница,
               |	СУММА(Подзапрос.ВременнаяРазница) КАК ВременнаяРазница
               |ИЗ
               |	(ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
               |		ПартииТоваровНаСкладах.Склад КАК Склад,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
               |		ПартииТоваровНаСкладах.Заказ КАК Заказ,
               |		ПартииТоваровНаСкладах.Количество КАК Количество,
               |		ПартииТоваровНаСкладах.Стоимость КАК Стоимость,
               |		0 КАК СтоимостьПоступление,
               |		ПартииТоваровНаСкладах.КодОперации КАК КодОперацииПартииТоваров,
               |		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
               |		ПартииТоваровНаСкладах.Период КАК Период,
               |		ПартииТоваровНаСкладах.Качество КАК Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
               |		ПартииТоваровНаСкладах.СчетУчета КАК СчетУчета,
               |		ПартииТоваровНаСкладах.Организация КАК Организация,
               |		ПартииТоваровНаСкладах.ПостояннаяРазница КАК ПостояннаяРазница,
               |		ПартииТоваровНаСкладах.ВременнаяРазница КАК ВременнаяРазница
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.Регистратор = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период
               |	
               |	ОБЪЕДИНИТЬ ВСЕ
               |	
               |	ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура,
               |		ПартииТоваровНаСкладах.Склад,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования,
               |		ПартииТоваровНаСкладах.Заказ,
               |		ПартииТоваровНаСкладах.Количество,
               |		ПартииТоваровНаСкладах.Стоимость,
               |		0,
               |		ПартииТоваровНаСкладах.КодОперации,
               |		ПартииТоваровНаСкладах.ДокументДвижения,
               |		ПартииТоваровНаСкладах.ДокументДвиженияПериод,
               |		ПартииТоваровНаСкладах.Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
               |		ПартииТоваровНаСкладах.СчетУчета,
               |		ПартииТоваровНаСкладах.Организация,
               |		ПартииТоваровНаСкладах.ПостояннаяРазница,
               |		ПартииТоваровНаСкладах.ВременнаяРазница
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период) КАК Подзапрос
               |
               |СГРУППИРОВАТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.Склад,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
               |	Подзапрос.СчетУчета,
               |	Подзапрос.Организация
			   |УПОРЯДОЧИТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.Склад,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
               |	Подзапрос.СчетУчета,
               |	Подзапрос.Организация";*/
		}
		// ЗаполнитьЗапросПоВозвратуНал

		public void ЗаполнитьЗапросПоВозвратуМеж(/*Запрос*/)
		{
			/*Запрос.Текст = "ВЫБРАТЬ
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.Заказ,
               |	СУММА(Подзапрос.Количество) КАК Количество,
               |	СУММА(Подзапрос.Стоимость) КАК Стоимость,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
               |	Подзапрос.СчетУчета,
               |	Подзапрос.Организация
               |ИЗ
               |	(ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
               |		ПартииТоваровНаСкладах.Заказ КАК Заказ,
               |		ПартииТоваровНаСкладах.Количество КАК Количество,
               |		ПартииТоваровНаСкладах.Стоимость КАК Стоимость,
               |		0 КАК СтоимостьПоступление,
               |		ПартииТоваровНаСкладах.КодОперации КАК КодОперацииПартииТоваров,
               |		ПартииТоваровНаСкладах.Регистратор КАК Регистратор,
               |		ПартииТоваровНаСкладах.Период КАК Период,
               |		ПартииТоваровНаСкладах.Качество КАК Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
               |		ПартииТоваровНаСкладах.СчетУчета КАК СчетУчета,
               |		ПартииТоваровНаСкладах.Организация КАК Организация
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.Регистратор = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период
               |	
               |	ОБЪЕДИНИТЬ ВСЕ
               |	
               |	ВЫБРАТЬ
               |		ПартииТоваровНаСкладах.Номенклатура,
               |		ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
               |		ПартииТоваровНаСкладах.СерияНоменклатуры,
               |		ПартииТоваровНаСкладах.ДокументОприходования,
               |		ПартииТоваровНаСкладах.Заказ,
               |		ПартииТоваровНаСкладах.Количество,
               |		ПартииТоваровНаСкладах.Стоимость,
               |		0,
               |		ПартииТоваровНаСкладах.КодОперации,
               |		ПартииТоваровНаСкладах.ДокументДвижения,
               |		ПартииТоваровНаСкладах.ДокументДвиженияПериод,
               |		ПартииТоваровНаСкладах.Качество,
               |		ПартииТоваровНаСкладах.Номенклатура.ВестиПартионныйУчетПоСериям,
               |		ПартииТоваровНаСкладах.СчетУчета,
               |		ПартииТоваровНаСкладах.Организация
               |	ИЗ
               |		РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет КАК ПартииТоваровНаСкладах
               |	ГДЕ
               |		ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияРасход
               |		И ПартииТоваровНаСкладах.КодОперации В(&КодыСписание)
               |		И ПартииТоваровНаСкладах.ДокументДвижения = &Регистратор
               |		И ПартииТоваровНаСкладах.Период < &Период) КАК Подзапрос
               |
               |СГРУППИРОВАТЬ ПО
               |	Подзапрос.Номенклатура,
               |	Подзапрос.ХарактеристикаНоменклатуры,
               |	Подзапрос.СерияНоменклатуры,
               |	Подзапрос.ДокументОприходования,
               |	Подзапрос.Заказ,
               |	Подзапрос.СтоимостьПоступление,
               |	Подзапрос.КодОперацииПартииТоваров,
               |	Подзапрос.Регистратор,
               |	Подзапрос.Период,
               |	Подзапрос.Качество,
               |	Подзапрос.ВестиПартионныйУчетПоСериям,
               |	Подзапрос.СчетУчета,
               |	Подзапрос.Организация";*/
		}
		// ЗаполнитьЗапросПоВозвратуМеж

		public void ЗаполнитьЗапросВозвратПоПоступлениюУпр(/*Запрос*/)
		{
			/*Запрос.Текст = "ВЫБРАТЬ
	|	ВыпускПродукции.Продукция КАК Номенклатура,
	|	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаНоменклатуры,
	|	ВыпускПродукции.СерияПродукции КАК СерияНоменклатуры,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.СтатусПартии,
	|	СУММА(ВыпускПродукции.Количество) КАК Количество,
	|	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	|	ВыпускПродукции.ДокументВыпуска КАК ДокументОприходования,
	|	ВыпускПродукции.ДокументВыпуска.Организация КАК Организация
	|ИЗ
	|	РегистрНакопления.ВыпускПродукции КАК ВыпускПродукции
	|ГДЕ
	|	ВыпускПродукции.КодОперации = &КодОперации
	|	И ВыпускПродукции.ДокументВыпуска = &ДокументВыпуска
	|
	|СГРУППИРОВАТЬ ПО
	|	ВыпускПродукции.Продукция,
	|	ВыпускПродукции.ХарактеристикаПродукции,
	|	ВыпускПродукции.СерияПродукции,
	|	ВыпускПродукции.Заказ,
	|	ВыпускПродукции.СтатусПартии,
	|	ВыпускПродукции.ДокументВыпуска";*/
		}
		//ЗаполнитьЗапросВозвратПоПоступлениюУпр

		public void ЗаполнитьЗапросВозвратПоПоступлениюБух(/*Запрос*/)
		{
			/*Запрос.Текст = "ВЫБРАТЬ
	               |	ВыпускПродукции.Продукция КАК Номенклатура,
	               |	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаНоменклатуры,
	               |	ВыпускПродукции.СерияПродукции КАК СерияНоменклатуры,
	               |	ВыпускПродукции.Заказ,
	               |	СУММА(ВыпускПродукции.Количество) КАК Количество,
	               |	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	               |	ВыпускПродукции.ДокументВыпуска КАК ДокументОприходования,
	               |	ВыпускПродукции.СчетДт КАК СчетУчета,
	               |	ВыпускПродукции.Подразделение.Владелец КАК Организация
	               |ИЗ
	               |	РегистрНакопления.ВыпускПродукцииБухгалтерскийУчет КАК ВыпускПродукции
	               |ГДЕ
	               |	ВыпускПродукции.КодОперации = &КодОперации
	               |	И ВыпускПродукции.ДокументВыпуска = &ДокументВыпуска
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВыпускПродукции.Продукция,
	               |	ВыпускПродукции.ХарактеристикаПродукции,
	               |	ВыпускПродукции.СерияПродукции,
	               |	ВыпускПродукции.Заказ,
	               |	ВыпускПродукции.ДокументВыпуска,
	               |	ВыпускПродукции.СчетДт,
	               |	ВыпускПродукции.Подразделение.Владелец";*/
		}
		//ЗаполнитьЗапросВозвратПоПоступлениюБух

		public void ЗаполнитьЗапросВозвратПоПоступлениюНал(/*Запрос*/)
		{
			/*Запрос.Текст = "ВЫБРАТЬ
	               |	ВыпускПродукции.Продукция КАК Номенклатура,
	               |	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаНоменклатуры,
	               |	ВыпускПродукции.СерияПродукции КАК СерияНоменклатуры,
	               |	ВыпускПродукции.Заказ,
	               |	СУММА(ВыпускПродукции.Количество) КАК Количество,
	               |	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	               |	ВыпускПродукции.ДокументВыпуска КАК ДокументОприходования,
	               |	ВыпускПродукции.СчетДт КАК СчетУчета,
	               |	ВыпускПродукции.Подразделение.Владелец КАК Организация,
	               |	СУММА(ВыпускПродукции.ПостояннаяРазница) КАК ПостояннаяРазница,
	               |	СУММА(ВыпускПродукции.ВременнаяРазница) КАК ВременнаяРазница
	               |ИЗ
	               |	РегистрНакопления.ВыпускПродукцииНалоговыйУчет КАК ВыпускПродукции
	               |ГДЕ
	               |	ВыпускПродукции.КодОперации = &КодОперации
	               |	И ВыпускПродукции.ДокументВыпуска = &ДокументВыпуска
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВыпускПродукции.Продукция,
	               |	ВыпускПродукции.ХарактеристикаПродукции,
	               |	ВыпускПродукции.СерияПродукции,
	               |	ВыпускПродукции.Заказ,
	               |	ВыпускПродукции.ДокументВыпуска,
	               |	ВыпускПродукции.СчетДт,
	               |	ВыпускПродукции.Подразделение.Владелец";*/
		}
		//ЗаполнитьЗапросВозвратПоПоступлениюНал

		public void ЗаполнитьЗапросВозвратПоПоступлениюМеж(/*Запрос*/)
		{
			/*Запрос.Текст = "ВЫБРАТЬ
	               |	ВыпускПродукции.Продукция КАК Номенклатура,
	               |	ВыпускПродукции.ХарактеристикаПродукции КАК ХарактеристикаНоменклатуры,
	               |	ВыпускПродукции.СерияПродукции КАК СерияНоменклатуры,
	               |	ВыпускПродукции.Заказ,
	               |	СУММА(ВыпускПродукции.Количество) КАК Количество,
	               |	СУММА(ВыпускПродукции.Стоимость) КАК Стоимость,
	               |	ВыпускПродукции.ДокументВыпуска КАК ДокументОприходования,
	               |	ВыпускПродукции.СчетДт КАК СчетУчета,
	               |	ВыпускПродукции.Подразделение.Владелец КАК Организация
	               |ИЗ
	               |	РегистрНакопления.ВыпускПродукцииМеждународныйУчет КАК ВыпускПродукции
	               |ГДЕ
	               |	ВыпускПродукции.КодОперации = &КодОперации
	               |	И ВыпускПродукции.ДокументВыпуска = &ДокументВыпуска
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	ВыпускПродукции.Продукция,
	               |	ВыпускПродукции.ХарактеристикаПродукции,
	               |	ВыпускПродукции.СерияПродукции,
	               |	ВыпускПродукции.Заказ,
	               |	ВыпускПродукции.ДокументВыпуска,
	               |	ВыпускПродукции.СчетДт,
	               |	ВыпускПродукции.Подразделение.Владелец";*/
		}
		//ЗаполнитьЗапросВозвратПоПоступлениюМеж
		// Корректирует таблицу основания с учетом ранее проведенных возвратов
		// Таблица основания корректируется либо по документу поступления, либо по документу реализации
		// Ситуация, когда есть возвраты и по документу поступления и по документу реализации не обслуживается
		//

		public object ПодготовитьТаблицуЗаписейОснования(/*ТаблицаЗаписейОснования, СтруктураШапкиДокумента, ДокументПартии, СтрУчет*/)
		{
			/*ЗапросПоВозвратам = Новый Запрос;*/
			/*ЗапросПоВозвратам.Текст = "ВЫБРАТЬ
	                          |	ПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
	                          |	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	                          |	ПартииТоваровНаСкладах.СерияНоменклатуры КАК СерияНоменклатуры,
							  |	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	                          |	ВЫБОР
	                          |		КОГДА ПартииТоваровНаСкладах.КодОперации = &ВозвратТекущегоМесяца
	                          |			ТОГДА -ПартииТоваровНаСкладах.Количество
	                          |		ИНАЧЕ ПартииТоваровНаСкладах.Количество
	                          |	КОНЕЦ КАК Количество,
	                          |	ВЫБОР
	                          |		КОГДА ПартииТоваровНаСкладах.КодОперации = &ВозвратТекущегоМесяца
	                          |			ТОГДА -ПартииТоваровНаСкладах.Стоимость
	                          |		ИНАЧЕ ПартииТоваровНаСкладах.Стоимость
	                          |	КОНЕЦ КАК Стоимость," +
							  ?(СтрУчет = "Налоговый","
	                          |	ВЫБОР
	                          |		КОГДА ПартииТоваровНаСкладах.КодОперации = &ВозвратТекущегоМесяца
	                          |			ТОГДА -ПартииТоваровНаСкладах.ВременнаяРазница
	                          |		ИНАЧЕ ПартииТоваровНаСкладах.ВременнаяРазница
	                          |	КОНЕЦ КАК ВременнаяРазница,
							  |	ВЫБОР
	                          |		КОГДА ПартииТоваровНаСкладах.КодОперации = &ВозвратТекущегоМесяца
	                          |			ТОГДА -ПартииТоваровНаСкладах.ПостояннаяРазница
	                          |		ИНАЧЕ ПартииТоваровНаСкладах.ПостояннаяРазница
	                          |	КОНЕЦ КАК ПостояннаяРазница,","") + "
	                          |	ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров
	                          |ИЗ
	                          |	Документ.ВозвратТоваровОтПокупателя КАК ВозвратТоваровОтПокупателя
	                          |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	                          |			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	                          |			ПО СписанныеТовары.Регистратор = ПартииТоваровНаСкладах.Регистратор
	                          |				И (СписанныеТовары.ДокументПартии = &ДокументПартии)
	                          |				И СписанныеТовары.НомерСтроки = ПартииТоваровНаСкладах.НомерСтрокиСписанныхТоваров
	                          |		ПО ПартииТоваровНаСкладах.Регистратор = ВозвратТоваровОтПокупателя.Ссылка
	                          |ГДЕ
	                          |	ВозвратТоваровОтПокупателя.Товары.ДокументПартии = &ДокументПартии
	                          |	И ВозвратТоваровОтПокупателя.МоментВремени > &МоментНач
	                          |	И ВозвратТоваровОтПокупателя.МоментВремени < &МоментКон";*/
			/*ЗапросПоВозвратам.УстановитьПараметр("ДокументПартии",ДокументПартии);*/
			/*СтруктураРеквизитовДокумента = Новый Структура("Дата");*/
			/*ПолучитьРеквизитыОбъекта(ДокументПартии, СтруктураРеквизитовДокумента);*/
			/*МоментНач = Новый МоментВремени(СтруктураРеквизитовДокумента.Дата,ДокументПартии);*/
			/*МоментКон = Новый МоментВремени(СтруктураШапкиДокумента.Период,СтруктураШапкиДокумента.Регистратор);*/
			/*ЗапросПоВозвратам.УстановитьПараметр("МоментНач",МоментНач);*/
			/*ЗапросПоВозвратам.УстановитьПараметр("МоментКон",МоментКон);*/
			/*ЗапросПоВозвратам.УстановитьПараметр("ВозвратТекущегоМесяца", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц);*/
			/*// Изменим текст запроса, если учет отличается от управленческого
*/
			if(true/*СтрУчет <> "Управленческий"*/)
			{
				/*ЗапросПоВозвратам.Текст = СтрЗаменить(ЗапросПоВозвратам.Текст,".ПартииТоваровНаСкладах",".ПартииТоваровНаСкладах"+СтрУчет+"Учет");*/
			}
			/*РезультатЗапроса = ЗапросПоВозвратам.Выполнить();*/
			if(true/*Не РезультатЗапроса.Пустой()*/)
			{
				/*ТаблицаВозвратов = РезультатЗапроса.Выгрузить();*/
				/*// Уменьшим количество и стоимость в таблице основания
*/
			}
			return null;
		}
		// ПодготовитьТаблицуЗаписейОснования
		// Выполняет движения документа возврат товаров от покупателя
		//

		public void ВыполнитьДвиженияВозврата(/*СтруктураПараметров, СтрокаДокумента, Строка, ИмяРегистраПартии, 
									ВестиПУПоСкладам, ДокументПартии, КоличествоОсталосьПогасить, КоэффСписания*/)
		{
			/*Движение = ДобавитьДвижениеВСтруктуруПараметров(ИмяРегистраПартии, СтруктураПараметров);*/
			/*КачествоНовый = Справочники.Качество.Новый;*/
			/*// Свойства
*/
			/*Движение.Период      = СтрокаДокумента.Период;*/
			/*Движение.Регистратор = СтрокаДокумента.Регистратор;*/
			/*Движение.Активность = Истина;*/
			/*// Возврат текущего месяца может быть с неизвестной стоимостью
*/
			/*// например, если возвращается продукция
*/
			/*// в этом случае он учитывается как сторно расхода 
*/
			/*// и обрабатывается корректировкой стоимости списания как расход
*/
			if(true/*ВозвратТекущегоМесяца*/)
			{
				/*Движение.ВидДвижения = ВидДвиженияНакопления.Расход;*/
				/*КоэффициентСторно    = -1;*/
				/*ТипЗаписи = "Прямая";*/
			}
			/*// Измерения
*/
			if(true/*ВестиПУПоСкладам*/)
			{
				/*Движение.Склад	= СтрокаДокумента.Склад;*/
				/*// Если задан новый склад поступления, подставляем его
*/
				if(true/*ЗначениеЗаполнено(СтрокаДокумента.СкладПолучатель)*/)
				{
					/*Движение.Склад	= СтрокаДокумента.СкладПолучатель;*/
				}
			}
			/*Движение.Номенклатура	= СтрокаДокумента.Номенклатура;*/
			/*Движение.Организация = Строка.Организация;*/
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*Движение.СтатусПартии = Строка.СтатусПартии;*/
			}
			/*Движение.ХарактеристикаНоменклатуры = СтрокаДокумента.ХарактеристикаНоменклатуры;*/
			/*// Если партионный учет по сериям не ведется - серии в регистре "партии товаров на складах" нет
*/
			if(true/*СтрокаДокумента.ВестиПартионныйУчетПоСериям*/)
			{
				/*Движение.СерияНоменклатуры	= СтрокаДокумента.СерияНоменклатуры;*/
			}
			/*Движение.ДокументОприходования	= Строка.ДокументОприходования;*/
			/*Движение.Качество = СтрокаДокумента.Качество;*/
			if(true/*НЕ ЗначениеЗаполнено(Движение.Качество)*/)
			{
				/*Движение.Качество = КачествоНовый;*/
			}
			/*// Ресурсы
*/
			/*ПогашаемоеКоличество = Окр(Строка.Количество * КоэффСписания,3,1);*/
			/*ПогашаемаяСтоимость  = Окр(Строка.Стоимость * КоэффСписания,2,1);*/
			/*Движение.Количество  = КоэффициентСторно*ПогашаемоеКоличество;*/
			/*Движение.Стоимость   = КоэффициентСторно*ПогашаемаяСтоимость;*/
			if(true/*СтрокаДокумента.ОтражатьВНалоговомУчете*/)
			{
				/*Движение.ПостояннаяРазница	= КоэффициентСторно*Окр(Строка.ПостояннаяРазница * КоэффСписания,3,1);*/
				/*Движение.ВременнаяРазница	= КоэффициентСторно*Окр(Строка.ВременнаяРазница * КоэффСписания,2,1);*/
			}
			/*// Реквизиты
*/
			if(true/*ВозвратТекущегоМесяца*/)
			{
				/*Движение.КодОперации = Перечисления.КодыОперацийПартииТоваров.ВозвратОтПокупателяТекущийМесяц;*/
			}
			if(true/*ПогашаемоеКоличество < КоличествоОсталосьПогасить*/)
			{
				/*КоэффПоступления = ПогашаемоеКоличество / КоличествоОсталосьПогасить;*/
			}
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*// Сумма выручки в валюте документа - для отчета комитенту
*/
				/*Движение.СуммаВыручки = КоэффициентСторно*Окр(СтрокаДокумента.СуммаЗадолженности*КоэффПоступления, 2);*/
				/*// Валюты и курсы - для пересчета
*/
				/*Движение.ВалютаДокумента = СтрокаДокумента.ВалютаДокумента;*/
				/*Движение.КурсДокумента = СтрокаДокумента.КурсДокумента;*/
				/*Движение.КратностьДокумента = СтрокаДокумента.КратностьДокумента;*/
			}
			/*СтрокаДокумента.СуммаЗадолженности = СтрокаДокумента.СуммаЗадолженности - КоэффициентСторно*Движение.СуммаВыручки;*/
			/*КоличествоОсталосьПогасить = КоличествоОсталосьПогасить - ПогашаемоеКоличество;*/
			/*Строка.Количество = Строка.Количество - ПогашаемоеКоличество;*/
			/*Строка.Стоимость  = Строка.Стоимость  - ПогашаемаяСтоимость;*/
			if(true/*СтрокаДокумента.ОтражатьВНалоговомУчете*/)
			{
				/*Строка.ПостояннаяРазница = Строка.ПостояннаяРазница - КоэффициентСторно * Движение.ПостояннаяРазница;*/
				/*Строка.ВременнаяРазница  = Строка.ВременнаяРазница  - КоэффициентСторно * Движение.ВременнаяРазница;*/
			}
			/*// Номер строки, по которой списана партия
*/
			/*// Используется при возврате товаров от покупателя, ордерной схеме поступления,
*/
			/*// механизмом корректировки стоимости списания 
*/
			/*Движение.НомерСтрокиСписанныхТоваров = СтруктураПараметров.НомерСтрокиСписанныхТоваров;*/
			/*// Списание на себестоимость продаж (сторно)
*/
			if(true/*ПолучитьНаправлениеСписанияПоКодуОперации(СтрокаДокумента.КодОперацииПартииТоваров) = "СебестоимостьПродаж"*/)
			{
				if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
				{
					/*СписаниеНаСебестоимостьПродажУпр(СтрокаДокумента, СтруктураПараметров, Движение, ТипЗаписи);*/
				}
			}
			/*ПодготовитьДанныеДляВыполненияДвиженийПоРезульататамСписания(СтруктураПараметров, Движение, Неопределено, СтрокаДокумента,Неопределено
	,"Возврат", Неопределено , ТипЗаписи);*/
			/*СписаниеПринятыхНаОтветственноеХранение(СтрокаДокумента, СтруктураПараметров, Движение, ИмяРегистраПартии);*/
		}
		//ВыполнитьДвиженияВозврата

		public void СписаниеПринятыхНаОтветственноеХранение(/*СтрокаДокумента, СтруктураПараметров, Движение, ИмяРегистраПартии*/)
		{
			/*// Спишем партии, находящиеся на ответственном хранении
*/
			if(true/*СтрокаДокумента.ОтражатьВБухгалтерскомУчете*/)
			{
				/*СтрУчет = "Бухгалтерский";*/
			}
			/*ТаблицаПартийПринятыхНаОтветственноеХранение = Неопределено;*/
			if(true/*СтруктураПараметров.Свойство("ТаблицаПартийПринятыхНаОтветственноеХранение"+СтрУчет,ТаблицаПартийПринятыхНаОтветственноеХранение)*/)
			{
				/*СтруктураИзмерений = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Заказ, Качество");*/
				/*ЗаполнитьЗначенияСвойств(СтруктураИзмерений, Движение);*/
				if(true/*СтрокаДокумента.ОтражатьВБухгалтерскомУчете*/)
				{
					/*СтруктураИзмерений.Вставить("Организация",Движение.Организация);*/
					/*СтруктураИзмерений.Вставить("СчетУчета", ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение);*/
				}
				/*МассивСтрок = ТаблицаПартийПринятыхНаОтветственноеХранение.НайтиСтроки(СтруктураИзмерений);*/
				/*КоличествоОсталосьПогасить = Движение.Количество;*/
			}
		}
		// СписаниеПринятыхНаОтветственноеХраниние()
		// Поступление товаров по возврату от покупателя
		//

		public void ПоступлениеВозвратОтПокупателя(/*СтрокаДокумента, СтруктураПараметров*/)
		{
			/*ДокументПартии = СтрокаДокумента.ДокументПартии;*/
			/*// Возврат без указания документа партии обрабатывается в модуле документа
*/
			if(true/*НЕ ЗначениеЗаполнено(ДокументПартии)*/)
			{
			}
			/*ИмяРегистраПартии = Неопределено;*/
			/*СтрУчет			  = Неопределено;*/
			/*ВестиПУПоСкладам  = Неопределено;*/
			/*НаборОснование	  = Неопределено;*/
			/*ПолучитьПараметрыВозвратаОтПокупателя(СтрокаДокумента, СтруктураПараметров, ИмяРегистраПартии, СтрУчет, ВестиПУПоСкладам, НаборОснование);*/
			/*ТаблицаЗаписейОснования = ПолучитьТаблицуЗаписейОснованияВозврата (СтрокаДокумента,
																	  СтруктураПараметров,
																	  ДокументПартии,
																	  НаборОснование,
																	  СтрУчет,
																	  ИмяРегистраПартии);*/
			/*НайденныеСтроки = ОтобратьСтрокиПартий(ТаблицаЗаписейОснования, СтрокаДокумента, "НаСкладах");*/
			/*КоличествоОсталосьПогасить = СтрокаДокумента.Количество;*/
			/*// Товара не хватило
*/
			if(true/*(КоличествоОсталосьПогасить > 0)*/)
			{
				/*ОбщегоНазначения.СообщитьОбОшибке(СтрУчет + " учет. Документ " + СтрокаДокумента.Регистратор + ", строка :" + СтрокаДокумента.НомерСтроки + Символы.ПС
		+ СтруктураПараметров.СтрокаСообщенияНеНайдено + КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
		+ " товара " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, "")
		+ СтруктураПараметров.СтрокаСообщенияДокументПартии + ДокументПартии);*/
				/*СтруктураПараметров.Вставить("Отказ", Истина);*/
			}
		}
		// Снятие резерва по заказам покупателей при закрытии заказов
		//

		public void СнятиеРезервовПоЗаказамПокупателей(/*СтрокаДокумента, СтруктураПараметров*/)
		{
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*ИмяРегистраПартии = "ПартииТоваровНаСкладахУпр";*/
				/*ВестиПУПоСкладам =ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров);*/
				/*СтрУчет="Управленческий";*/
			}
			/*// Партии для данного учета
*/
			/*ДеревоПартий = СтруктураПараметров["Дерево"+ИмяРегистраПартии];*/
			/*ТаблицаОстатковПартий = СтруктураПараметров[ИмяРегистраПартии + "ТаблицаОстатков"];*/
			/*СтрокаДереваПартий = ДеревоПартий.Строки.Найти(СтрокаДокумента.НомерСтрокиДокумента, "НомерСтрокиДокумента");*/
			/*СтруктураИзмерений = СтруктураПараметров[ИмяРегистраПартии + "СтруктураИзмерений"];*/
			if(true/*СтрокаДереваПартий <> Неопределено*/)
			{
			}
		}
		// СнятиеРезервовПоЗаказамПокупателей()

		public object ПолучитьТаблицуСписанияРасходнымОрдером(/*СтрокаДокумента, СтруктураПараметров*/)
		{
			/*ТаблицыСписанияРасходнымОрдером = Неопределено;*/
			/*ТаблицаСписанияРасходнымОрдером = Неопределено;*/
			/*// Отборы по видам учета
*/
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*СтрУчет = "Упр";*/
			}
			if(true/*СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером)*/)
			{
				/*ТаблицаСписанияРасходнымОрдером = ТаблицыСписанияРасходнымОрдером.Получить(СтрУчет);*/
				if(true/*ТаблицаСписанияРасходнымОрдером <> Неопределено*/)
				{
				}
			}
			/*// Сначала получим таблицу исходного документа
*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	""СписаниеПартийРасходнымОрдером1"" КАК QuieryId ";*/
			/*Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;*/
			/*Запрос.Текст = 	Запрос.Текст + ",
	|	Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	Регистратор,
	|	НомерСтрокиДокумента,
	|	Период,
	|	НомерСтроки
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|
	|ГДЕ
	|	Регистратор=&Регистратор
	|";*/
			/*// Отборы по видам учета
*/
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*Запрос.Текст = 	Запрос.Текст + " И (ОтражатьВУправленческомУчете)";*/
			}
			if(true/*СтрокаДокумента.ОтражатьВБухгалтерскомУчете*/)
			{
				/*Запрос.Текст = 	Запрос.Текст + " И (ОтражатьВБухгалтерскомУчете)";*/
			}
			if(true/*СтрокаДокумента.ОтражатьВНалоговомУчете*/)
			{
				/*Запрос.Текст = 	Запрос.Текст + " И (ОтражатьВНалоговомУчете)";*/
			}
			if(true/*СтрокаДокумента.ОтражатьВМеждународномУчете*/)
			{
				/*Запрос.Текст = 	Запрос.Текст + " И (ОтражатьВМеждународномУчете)";*/
			}
			/*Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.ОсновнойДокумент);*/
			/*Запрос.УстановитьПараметр("Номенклатура", СтрокаДокумента.Номенклатура);*/
			/*Запрос.УстановитьПараметр("ХарактеристикаНоменклатуры", СтрокаДокумента.ХарактеристикаНоменклатуры);*/
			/*ТаблицаСписанияРасходнымОрдером=Запрос.Выполнить().Выгрузить();*/
			/*ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВУправленческомУчете,"ОтражатьВУправленческомУчете");*/
			/*ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВБухгалтерскомУчете, "ОтражатьВБухгалтерскомУчете");*/
			/*ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВНалоговомУчете,     "ОтражатьВНалоговомУчете");*/
			/*ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.ОтражатьВМеждународномУчете, "ОтражатьВМеждународномУчете");*/
			/*СтруктураПараметров.Вставить("ОсновнойДокумент",СтрокаДокумента.ОсновнойДокумент);*/
			/*// Если записей по исх. документу нет
*/
			if(true/*ТаблицаСписанияРасходнымОрдером.Количество()=0*/)
			{
			}
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	""СписаниеПартийРасходнымОрдером2"" КАК QuieryId,
	|	Строки.Регистратор,
	|	Строки.Период,
	|	Строки.НомерСтроки,
	|	СУММА(Строки.Количество) КАК Количество,
	|	Строки.Номенклатура,
	|	Строки.СерияНоменклатуры,
	|	Строки.ХарактеристикаНоменклатуры,
	|	Строки.Склад
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки
	|ГДЕ
	|	Строки.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Строки.ОсновнойДокумент = &ОсновнойДокумент
	|	И Строки.Регистратор <> &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	Строки.Регистратор,
	|	Строки.Период,
	|	Строки.НомерСтроки,
	|	Строки.Номенклатура,
	|	Строки.СерияНоменклатуры,
	|	Строки.ХарактеристикаНоменклатуры,
	|	Строки.Склад";*/
			/*// Отборы по видам учета
*/
			if(true/*СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
				/*Запрос.Текст = 	СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (ОтражатьВУправленческомУчете) И ");*/
			}
			if(true/*СтрокаДокумента.ОтражатьВБухгалтерскомУчете*/)
			{
				/*Запрос.Текст = 	СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (ОтражатьВБухгалтерскомУчете) И ");*/
			}
			if(true/*СтрокаДокумента.ОтражатьВНалоговомУчете*/)
			{
				/*Запрос.Текст = 	СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (ОтражатьВНалоговомУчете) И ");*/
			}
			if(true/*СтрокаДокумента.ОтражатьВМеждународномУчете*/)
			{
				/*Запрос.Текст = 	СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ (ОтражатьВМеждународномУчете) И ");*/
			}
			/*Запрос.УстановитьПараметр("ДатаНач", ТаблицаСписанияРасходнымОрдером[0].Период);*/
			/*Запрос.УстановитьПараметр("ДатаКон", СтрокаДокумента.Период);*/
			/*Запрос.УстановитьПараметр("ОсновнойДокумент", СтрокаДокумента.ОсновнойДокумент);*/
			/*Запрос.УстановитьПараметр("Регистратор", СтрокаДокумента.Регистратор);*/
			/*ТаблицаОрдеров = Запрос.Выполнить().Выгрузить();*/
			/*ТаблицаСписанияРасходнымОрдером.ЗаполнитьЗначения(СтрокаДокумента.Период, "Период");*/
			/*// Пересчет сумм, уже списанных другими расходными ордерами
*/
			if(true/*НЕ СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером)*/)
			{
				/*ТаблицыСписанияРасходнымОрдером = Новый Соответствие;*/
			}
			/*ТаблицыСписанияРасходнымОрдером.Вставить(СтрУчет,ТаблицаСписанияРасходнымОрдером);*/
			/*СтруктураПараметров.Вставить("ТаблицыСписанияРасходнымОрдером",ТаблицыСписанияРасходнымОрдером);*/
			return null;
		}
		// ПолучитьТаблицуСписанияРасходнымОрдером()
		// Списание партий ордерного склада
		// Обслуживаются документы:
		// 1.Расходный ордер на товары
		// 2 Приходный ордер на товары с видом операции "перемещение"
		// 3 Поступление товаров и услуг в НТТ с видом операции "перемещение"
		// Параметры СтрокаДокумента -
		// СтруктураПараметров - структура, хранящая основные переменные

		public void СписаниеПартийОрдерныйСклад(/*СтрокаДокумента, СтруктураПараметров*/)
		{
			/*// Отложенная отгрузка отражается только в бухгалтерском и управленческом учете
*/
			if(true/*СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РасходныйОрдерНаТовары")И
	   НЕ СтруктураПараметров.СписыватьПартииРасходнымОрдером И
	   НЕ (СтрокаДокумента.ОтражатьВУправленческомУчете ИЛИ СтрокаДокумента.ОтражатьВБухгалтерскомУчете
	     ИЛИ (СтруктураПараметров.Свойство("ОсновнойДокумент")
		   И (ТипЗНЧ(СтруктураПараметров.ОсновнойДокумент) = Тип("ДокументСсылка.ПередачаТоваров"))
		   И СтрокаДокумента.ОтражатьВНалоговомУчете))*/)
			{
			}
			/*ТаблицаСписанияРасходнымОрдером = ПолучитьТаблицуСписанияРасходнымОрдером(СтрокаДокумента, СтруктураПараметров);*/
			/*// Если записей по исх. документу нет
*/
			if(true/*ТаблицаСписанияРасходнымОрдером = Неопределено Или ТаблицаСписанияРасходнымОрдером.Количество()=0*/)
			{
			}
			/*СтруктураПоиска = Новый Структура("Номенклатура, СерияНоменклатуры, ХарактеристикаНоменклатуры",
									СтрокаДокумента.Номенклатура,
									СтрокаДокумента.СерияНоменклатуры,
									СтрокаДокумента.ХарактеристикаНоменклатуры
									);*/
			/*// В расходном ордере склад должен совпадать со складом в табличной части основного документа
*/
			if(true/*СтруктураПараметров.ТипЗначенияРегистратора = Тип("ДокументСсылка.РасходныйОрдерНаТовары")*/)
			{
				/*СтруктураПоиска.Вставить("Склад", СтрокаДокумента.Склад);*/
			}
			/*МассивСтрокСписания = ТаблицаСписанияРасходнымОрдером.НайтиСтроки(СтруктураПоиска);*/
			/*// Серия может быть указана в документе реализации или в ордере
*/
			if(true/*СтрокаДокумента.ВестиПартионныйУчетПоСериям И ЗначениеЗаполнено(СтрокаДокумента.СерияНоменклатуры)*/)
			{
				/*СтруктураПоиска.Вставить("СерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());*/
				/*МассивСтрокСПустойСерией = ТаблицаСписанияРасходнымОрдером.НайтиСтроки(СтруктураПоиска);*/
			}
			/*КоличествоОсталосьПогасить = СтрокаДокумента.Количество;*/
			/*// Товара не хватило
*/
			if(true/*(КоличествоОсталосьПогасить > 0)*/)
			{
				/*СтрУчет = "Упр";*/
				if(true/*СтрокаДокумента.ОтражатьВБухгалтерскомУчете*/)
				{
					/*СтрУчет = "Бух";*/
				}
				/*ОбщегоНазначения.СообщитьОбОшибке(СтрУчет + " учет. Документ " + СтрокаДокумента.Регистратор + Символы.ПС
		+ "Не найдено в документе списания "+ СтрокаДокумента.ОсновнойДокумент+ " "+ КоличествоОсталосьПогасить + " " + СтрокаДокумента.Номенклатура.ЕдиницаХраненияОстатков 
		+ " товара " + СтрокаДокумента.Номенклатура
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоХарактеристикам, ", х-ка: " + СтрокаДокумента.ХарактеристикаНоменклатуры, "")
		+ ?(СтрокаДокумента.Номенклатура.ВестиУчетПоСериям, ", серия: " + СтрокаДокумента.СерияНоменклатуры, ""));*/
				/*СтруктураПараметров.Вставить("Отказ", Истина);*/
			}
			/*// Теперь отметим все выполненные движения как принадлежащие документу реализации:
*/
			/*СтруктураРеквизитовДокумента = Новый Структура("Дата");*/
			/*ПолучитьРеквизитыОбъекта(СтрокаДокумента.ОсновнойДокумент, СтруктураРеквизитовДокумента);*/
		}
		// СписаниеПартийОрдерныйСклад()
		// Общие
		// Возвращает таблицу документов
		//
		// Параметры
		//ДокументСписания
		//Упр
		//Бух
		//Нал
		// Возвращаемое значение:
		//   Таблица строк документа
		//

		public object ПолучитьТаблицуСтрокДокументов(/*ДокументСписания=Неопределено, Упр = Истина, Бух = Истина, Нал = Истина*/)
		{
			/*// Общая часть запроса
*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.УстановитьПараметр("ДокументСписания", ДокументСписания);*/
			/*Запрос.УстановитьПараметр("ВозвратОтКомиссионера", Перечисления.КодыОперацийПартииТоваров.ВозвратОтКомиссионера);*/
			/*Запрос.УстановитьПараметр("РеализацияКомиссия", Перечисления.КодыОперацийПартииТоваров.РеализацияКомиссия);*/
			/*Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);*/
			/*Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);*/
			/*Запрос.УстановитьПараметр("Упр", Упр);*/
			/*Запрос.УстановитьПараметр("Бух", Бух);*/
			/*Запрос.УстановитьПараметр("Нал", Нал);*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	""ПолучитьТаблицуСтрокДокументов"" КАК QuieryId ";*/
			/*Ресурсы = Метаданные.РегистрыСведений.СписанныеТовары.Ресурсы;*/
			/*Запрос.Текст = 	Запрос.Текст + ",
	|	Регистратор,
	|	Период,
	|	НомерСтроки,
	|	НомерСтрокиДокумента,
	|	Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|	КОГДА
	|	КодОперацииПартииТоваров = &ВозвратОтКомиссионера
	|	ИЛИ КодОперацииПартииТоваров = &РеализацияКомиссия
	|	ИЛИ КодОперацииПартииТоваров = &ВозвратОтПереработчика
	|	ИЛИ КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	|	ТОГДА ""Переданные""
	|	ИНАЧЕ
	|	""НаСкладах""
	|	КОНЕЦ КАК ИсточникПоКодуОперации
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК Строки";*/
			if(true/*ДокументСписания <> Неопределено*/)
			{
				/*Запрос.Текст = Запрос.Текст+ "
		|ГДЕ
		|	Строки.Регистратор = &ДокументСписания";*/
			}
			/*Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВУправленческомУчете", "(ОтражатьВУправленческомУчете И &Упр) КАК ОтражатьВУправленческомУчете");*/
			/*Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВБухгалтерскомУчете", "(ОтражатьВБухгалтерскомУчете И &Бух) КАК ОтражатьВБухгалтерскомУчете");*/
			/*Запрос.Текст = СтрЗаменить(Запрос.Текст, "ОтражатьВНалоговомУчете", "(ОтражатьВНалоговомУчете И &Нал) КАК ОтражатьВНалоговомУчете");*/
			/*Результат = Запрос.Выполнить();*/
			return null;
		}
		//ПолучитьТаблицуСтрокДокументов
		// Добавление остатков по партионному учету
		//
		// Параметры:
		//	Нет.
		//

		public void ПолучитьОстатки(/*СтруктураПараметров, ТаблицаСписания, МоментКон, Организация*/)
		{
			/*ПолучитьОстаткиУпр(СтруктураПараметров, ТаблицаСписания, МоментКон);*/
			/*ПолучитьОстаткиРегл(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация);*/
			/*ПолучитьОстаткиМеж(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация);*/
		}
		// ПолучитьОстатки()
		/////////////////////////////////////////////////////////////////////////////////
		// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ
		// Дополнительные движения по результату списания партий
		//
		// Параметры:
		//	Нет.
		//

		public void ВыполнитьДопДвиженияПоРезультатуСписания(/*СтруктураПараметров, ТаблицаСписания*/)
		{
			if(true/*ТаблицаСписания.Найти(Перечисления.КодыОперацийПартииТоваров.ПередачаМатериаловВЭксплуатацию, "КодОперацииПартииТоваров") <> Неопределено*/)
			{
				/*//Если используется расширенная аналитика и фирма на УСН, то погашение стоимости осуществляется не в партионном учете
*/
				if(true/*НЕ (СтруктураПараметров.Свойство("ИспользоватьРасширеннуюАналитику")
		  И СтруктураПараметров.ИспользоватьРасширеннуюАналитику
		  И УправлениеЗапасамиПартионныйУчет.ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СистемаНалогообложения", "Бух", СтруктураПараметров) = Перечисления.СистемыНалогообложения.Упрощенная)*/)
				{
					/*ПроцедурыПогашенияСтоимости.ПогашениеСтоимостиПриПередачеВЭксплуатацию(СтруктураПараметров, СтруктураПараметров.ТаблицаСписанныхПартий);*/
				}
			}
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьвУправленческомУчете*/)
			{
				/*ВыполнитьДопДвиженияПоРезультатуСписанияУпр(СтруктураПараметров, ТаблицаСписания);*/
			}
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьвБухгалтерскомУчете ИЛИ СтруктураПараметров.ЕстьСтрокиОтражатьвНалоговомУчете*/)
			{
				/*ВыполнитьДопДвиженияПоРезультатуСписанияРегл(СтруктураПараметров, ТаблицаСписания);*/
			}
			/*//Добавлен алгоритм формирование корр движений
*/
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьвМеждународномУчете*/)
			{
				/*ВыполнитьДопДвиженияПоРезультатуСписанияМеж(СтруктураПараметров, ТаблицаСписания);*/
			}
		}
		// ВыполнитьДопДвиженияПоРезультатуСписания()
		// Запускает формирование движений по результату списания партий в упр учете
		//
		// Параметры:
		//	Нет.
		//

		public void ВыполнитьДопДвиженияПоРезультатуСписанияУпр(/*СтруктураПараметров, ТаблицаСписания*/)
		{
			/*//Добавлен алгоритм формирование корр движений
*/
			/*// Запись данных о реализованных товаррах
*/
			/*ВыполнитьДвиженияПоРеализованнымТоварамКомитента(СтруктураПараметров, ТаблицаСписания);*/
		}
		// ВыполнитьДопДвиженияПоРезультатуСписанияУпр()
		// Запускает формирование движений по результату списания партий в регл учете
		//
		// Параметры:
		//	Нет.
		//

		public void ВыполнитьДопДвиженияПоРезультатуСписанияРегл(/*СтруктураПараметров, ТаблицаСписания*/)
		{
			/*//Добавлен алгоритм формирование корр движений
*/
			if(true/*СтруктураПараметров.СписыватьПартииНДС
	  И НЕ (СтруктураПараметров.Свойство("ИспользоватьРасширеннуюАналитику")
	  	И СтруктураПараметров.ИспользоватьРасширеннуюАналитику
	  	И ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СистемаНалогообложения", "Бух", СтруктураПараметров) = Перечисления.СистемыНалогообложения.Упрощенная)*/)
			{
				/*УчетНДС.ВыполнитьДвиженияПоНДС(СтруктураПараметров, ТаблицаСписания);*/
			}
			if(true/*СтруктураПараметров.Свойство("СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизации")
	   И ТаблицаСписания.Количество() <> 0*/)
			{
				/*СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизацииНазад(СтруктураПараметров, ТаблицаСписания);*/
			}
			if(true/*((ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")) И (НЕ СтруктураПараметров.Регистратор.ВидОперации = Перечисления.ВидыОперацийВозвратТоваровПоставщику.ИзПереработки))
	  ИЛИ ТипЗнч(СтруктураПараметров.Регистратор) = Тип("ДокументСсылка.ВозвратТоваровПоставщикуИзНТТ")*/)
			{
				if(true/*СтруктураПараметров.ФормироватьПроводкиПоСписаниюТМЦ*/)
				{
					/*УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.СформироватьПроводкиОтклоненийВСтоимостиПриВозвратеПоставщику(СтруктураПараметров);*/
				}
			}
		}
		// ВыполнитьДопДвиженияПоРезультатуСписанияРегл()
		// Запускает формирование движений по результату списания партий в упр учете
		//
		// Параметры:
		//	Нет.
		//

		public void ВыполнитьДопДвиженияПоРезультатуСписанияМеж(/*СтруктураПараметров, ТаблицаСписания*/)
		{
			/*//Добавлен алгоритм формирование корр движений
*/
		}
		// ВыполнитьДопДвиженияПоРезультатуСписанияУпр()
		/////////////////////////////////////////////////////////////////////////////////
		// СПИСАНИЕ ПАРТИЙ ТОВАРОВ ПО ЗАДАННОЙ ТАБЛИЦЕ СПИСАНИЯ
		// СтруктураПараметров - основная переменная модуля, передается в бОльшую часть процедур и функций,
		// содержит бОльшую часть параметров, нужных для проведения по партиям

		public void ДополнитьСтруктуруПараметров(/*СтруктураПараметров, ТаблицаСписания*/)
		{
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете*/)
			{
				/*СтруктураПараметров.Вставить("СпособОценкиМПЗУпр", Строка(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Упр",  СтруктураПараметров)));*/
				/*СтруктураПараметров.Вставить("СтратегияСтатусПартииУпр",  ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СтратегияСписанияПоСтатусам", "Упр", СтруктураПараметров));*/
				/*СтруктураПараметров.Вставить("ВестиПартионныйУчетПоСкладамУпр", ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Упр", СтруктураПараметров));*/
			}
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете*/)
			{
				/*СтруктураПараметров.Вставить("СпособОценкиМПЗБух", Строка(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Бух", СтруктураПараметров)));*/
				/*СтруктураПараметров.Вставить("СтратегияСтатусПартииБух",  ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СтратегияСписанияПоСтатусам", "Бух", СтруктураПараметров));*/
				/*СтруктураПараметров.Вставить("ВестиПартионныйУчетПоСкладамБух", ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Бух", СтруктураПараметров));*/
				/*СтруктураПараметров.Вставить("СтоимостьСписанияБУ", 0);*/
				/*СтруктураПараметров.Вставить("СуммаЗадолженностиБУ", 0);*/
				/*СтруктураПараметров.Вставить("СуммаЗадолженностиБУВал", ТаблицаСписания.Итог("КорВалютнаяСуммаЗадолженностиБУ"));*/
				/*СтруктураПараметров.Вставить("СуммаЗадолженностиБУВалПоСтрокам", 0);*/
			}
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете*/)
			{
				/*СтруктураПараметров.Вставить("СпособОценкиМПЗНал", Строка(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Нал", СтруктураПараметров)));*/
				/*СтруктураПараметров.Вставить("СтратегияСтатусПартииНал",  ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СтратегияСписанияПоСтатусам", "Нал", СтруктураПараметров));*/
				/*СтруктураПараметров.Вставить("ВестиПартионныйУчетПоСкладамНал", ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Нал", СтруктураПараметров));*/
				/*СтруктураПараметров.Вставить("КэшОтноситсяКДеятельностиЕНВД", Новый Соответствие);*/
				/*СтруктураПараметров.Вставить("СтоимостьСписанияНУ", 0);*/
			}
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете*/)
			{
				/*СтруктураПараметров.Вставить("СпособОценкиМПЗМеж", Строка(ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособОценкиМПЗ", "Меж", СтруктураПараметров)));*/
				/*СтруктураПараметров.Вставить("СтратегияСтатусПартииМеж",  ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СтратегияСписанияПоСтатусам", "Меж", СтруктураПараметров));*/
				/*СтруктураПараметров.Вставить("ВестиПартионныйУчетПоСкладамМеж", ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ВестиПартионныйУчетПоСкладам", "Меж", СтруктураПараметров));*/
			}
			/*СтруктураПараметров.Вставить("КэшПоВидамСубконто", Новый Соответствие);*/
			/*// От значения этой константы зависит будет ли партия списана на забалансовый счет документом списания
*/
			/*// при списании по ордеру
*/
			/*СтруктураПараметров.Вставить("СписыватьПартииРасходнымОрдером",Константы.СписыватьПартииРасходнымОрдером.Получить());*/
			/*СтруктураПараметров.Вставить("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании",глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании"));*/
		}
		//ДополнитьСтруктуруПараметров(СтруктураПараметров)

		public object ПодготовитьСтруктуруТаблицыСписания(/*СтруктураПараметров, ТаблицаСписания*/)
		{
			/*ТаблицаСписанныхПартий = Новый ТаблицаЗначений();*/
			/*// Определение состава колонок 
*/
			/*СписокКодовОпераций = Новый СписокЗначений;*/
			/*СписокКодовОпераций.ЗагрузитьЗначения(ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(ТаблицаСписания.ВыгрузитьКолонку("КодОперацииПартииТоваров")));*/
			/*СтруктураКолонокТаблицыСписания = Новый Структура();*/
			/*СтруктураКолонокТаблицыСписания.Вставить("ОтражатьВУправленческомУчете");*/
			/*СтруктураКолонокТаблицыСписания.Вставить("ОтражатьВБухгалтерскомУчете");*/
			/*СтруктураКолонокТаблицыСписания.Вставить("ОтражатьВНалоговомУчете");*/
			/*СтруктураКолонокТаблицыСписания.Вставить("ОтражатьВМеждународномУчете");*/
			/*СтруктураКолонокТаблицыСписания.Вставить("НомерСтрокиДокумента");*/
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете*/)
			{
				/*ОпределитьСоставКолонокТаблицаСписанныхПартийУпр(СтруктураПараметров, СписокКодовОпераций,СтруктураКолонокТаблицыСписания);*/
			}
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете*/)
			{
				/*УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ОпределитьСоставКолонокТаблицаСписанныхПартийБух(СтруктураПараметров, СписокКодовОпераций,СтруктураКолонокТаблицыСписания);*/
				if(true/*СтруктураПараметров.СписыватьПартииНДС*/)
				{
					/*Запрос = Новый Запрос();*/
					/*Запрос.УстановитьПараметр("ТаблицаСписания", ТаблицаСписания);*/
					/*Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;*/
					/*Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
			               |	ТаблицаСписания.СчетУчетаБУ
			               |ПОМЕСТИТЬ ТаблицаСписания
			               |ИЗ
			               |	&ТаблицаСписания КАК ТаблицаСписания
			               |ГДЕ
			               |	(ТаблицаСписания.СчетУчетаБУ В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ОборудованиеКУстановке))
			               |			ИЛИ ТаблицаСписания.СчетУчетаБУ В ИЕРАРХИИ (ЗНАЧЕНИЕ(ПланСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств)))";*/
					/*УчетНДС.ОпределитьСоставКолонокТаблицаСписанныхПартийНДС(СтруктураПараметров, СписокКодовОпераций, СтруктураКолонокТаблицыСписания, Запрос.Выполнить().Выгрузить()[0].Количество <> 0);*/
					/*Запрос.МенеджерВременныхТаблиц.Закрыть();*/
				}
			}
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете*/)
			{
				/*УправлениеЗапасамиПартионныйУчетФормированиеПроводокРегл.ОпределитьСоставКолонокТаблицаСписанныхПартийНал(СтруктураПараметров, СписокКодовОпераций, СтруктураКолонокТаблицыСписания);*/
				/*//!!! + вызов для УСН здесь или отдельно. Возможен выбор из двух вызовов по УП
*/
			}
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете*/)
			{
				/*УправлениеЗапасамиПартионныйУчетФормированиеПроводокМежд.ОпределитьСоставКолонокТаблицаСписанныхПартийМеж(СтруктураПараметров, СписокКодовОпераций,СтруктураКолонокТаблицыСписания);*/
			}
			/*// Подготовка структуры таблицы
*/
			/*КолонкиТаблицыСписания = ТаблицаСписания.Колонки;*/
			/*ПриоритетныеКолонкиТаблицыСписания = "";*/
			if(true/*ТаблицаСписанныхПартий.Колонки.Найти("РегистрУчета") = Неопределено*/)
			{
				/*ТаблицаСписанныхПартий.Колонки.Добавить("РегистрУчета");*/
			}
			if(true/*ТаблицаСписанныхПартий.Колонки.Найти("Движение") = Неопределено*/)
			{
				/*ТаблицаСписанныхПартий.Колонки.Добавить("Движение");*/
			}
			if(true/*не ПустаяСтрока(ПриоритетныеКолонкиТаблицыСписания)*/)
			{
				/*ПриоритетныеКолонкиТаблицыСписания = Сред(ПриоритетныеКолонкиТаблицыСписания,2);*/
			}
			/*СтруктураПараметров.Вставить("ПриоритетныеКолонкиТаблицыСписания", ПриоритетныеКолонкиТаблицыСписания);*/
			return null;
		}

		public void ПодготовитьДанныеДляВыполненияДвиженийПоРезульататамСписания(/*СтруктураПараметров, Движение, СтрокаПартии, СтрокаДокумента,РегистрУчета
	,ВидОперации, СписаноИз, ТипЗаписи, СтрокаСписанныхТоваров = Неопределено*/)
		{
			/*ТаблицаСписанныхПартий = СтруктураПараметров.ТаблицаСписанныхПартий;*/
			/*НоваяСтрока = ТаблицаСписанныхПартий.Добавить();*/
			/*// Заполнение по строке партии
*/
			if(true/*НЕ СтрокаПартии = Неопределено*/)
			{
				/*ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПартии);*/
			}
			/*// Заполнение по строке движения, возможно изменение одного части значений
*/
			if(true/*НЕ Движение = Неопределено*/)
			{
				/*ЗаполнитьЗначенияСвойств(НоваяСтрока, Движение);*/
			}
			/*// Максимальный приоритет по строке документа
*/
			if(true/*НЕ СтрокаДокумента = Неопределено*/)
			{
				/*ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДокумента);*/
			}
			if(true/*СтрокаСписанныхТоваров <> Неопределено*/)
			{
				/*ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаСписанныхТоваров);*/
			}
			/*НоваяСтрока.Движение = Движение;*/
			/*//Дополнить служебной информацией 
*/
			/*ЗаполнитьЗначенияСвойств(НоваяСтрока,
	Новый структура("ВидОперации, СписаноИз, ТипЗаписи, РегистрУчета", ВидОперации, СписаноИз, ТипЗаписи, РегистрУчета));*/
		}
		//
		// Параметры
		// ТаблицаСписания - таблица значений полученная из регистра Списанные товары
		// МоментКон	   - момент времени проведения документа
		// Останавливаться - останавливать проведение по партиям на первом документе, который не провелся по партиям
		// ПроведениеОстановлено - признак того что проведение остановлено для обработки проведение по партиям

		public void ВыполнитьСписание(/*СтруктураПараметров, ТаблицаСписания, МоментКон, Останавливаться = Ложь, ПроведениеОстановлено = Ложь */)
		{
			/*Организация = ТаблицаСписания[0].Организация;*/
			/*СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВУправленческомУчете")<>Неопределено);*/
			/*СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВБухгалтерскомУчете")<>Неопределено);*/
			/*СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВНалоговомУчете", 		ТаблицаСписания.Найти(Истина, "ОтражатьВНалоговомУчете")<>Неопределено);*/
			/*СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВМеждународномУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВМеждународномУчете")<>Неопределено);*/
			/*СтруктураПараметров.Вставить("Организация", Организация);*/
			/*ДополнитьСтруктуруПараметров(СтруктураПараметров, ТаблицаСписания);*/
			/*СтруктураПараметров.Вставить("КодыОпераций",Перечисления.КодыОперацийПартииТоваров);*/
			if(true/*ЗначениеЗаполнено(ТаблицаСписания[0].ОсновнойДокумент)*/)
			{
				/*СтруктураПараметров.Вставить("ОсновнойДокумент",ТаблицаСписания[0].ОсновнойДокумент);*/
			}
			/*// Подготовка наборов записей
*/
			/*ПодготовитьНаборыЗаписей(СтруктураПараметров, ТаблицаСписания, ТаблицаСписания[0].Период, ТаблицаСписания[0].Регистратор, Истина);*/
			/*СтруктураПараметров.Вставить("ТипЗначенияРегистратора", ТипЗнч(ТаблицаСписания[0].Регистратор));*/
			/*СтруктураПараметров.Вставить("ТаблицаСписанныхПартий",ПодготовитьСтруктуруТаблицыСписания(СтруктураПараметров, ТаблицаСписания));*/
			/*// Для закрытия заказов покупателей дерево остатков партий должно получаться особым способом
*/
			if(true/*СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей")*/)
			{
				/*СтруктураПараметров.Вставить("ЗакрытиеЗаказовПокупателей");*/
			}
			/*// В некоторых случаях получать остатки не нужно
*/
			/*ТребуетсяПолучитьОстатки = Истина;*/
			/*// Ордерная схема поступления
*/
			if(true/*СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
	   Или СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.АвансовыйОтчет") 
	   Или СтруктураПараметров.ТипЗначенияРегистратора =Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки")*/)
			{
				/*ТребуетсяПолучитьОстатки = Ложь;*/
				/*// Возврат товаров от покупателя (возврат от комиссионера обрабатывается основным алгоритмом списания
*/
				/*// фактически являясь частным случаем перемещения товаров)
*/
			}
			if(true/*ТребуетсяПолучитьОстатки*/)
			{
				/*// Добавление в структуру остатков по партионному учету
*/
				/*ПолучитьОстатки(СтруктураПараметров, ТаблицаСписания, МоментКон, Организация);*/
			}
			/*ОбрабатываемыйДокумент = Неопределено;*/
			/*СтруктураВидовУчета = Новый Структура("ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, ОтражатьВМеждународномУчете");*/
			/*СтрокаДокумента = Новый Структура;*/
			if(true/*СтруктураПараметров.Свойство("ТаблицыСписанияРасходнымОрдером")*/)
			{
				/*СтруктураПараметров.Удалить("ТаблицыСписанияРасходнымОрдером");*/
			}
			if(true/*Не ОбрабатываемыйДокумент = Неопределено*/)
			{
				if(true/*ТипЗнч(ОбрабатываемыйДокумент)=Тип("ДокументСсылка.КорректировкаРеализации")*/)
				{
					if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьвБухгалтерскомУчете*/)
					{
						/*ПроведениеКорректировкиРеализации(ОбрабатываемыйДокумент, СтруктураПараметров, ТаблицаСписания);*/
					}
					if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьвУправленческомУчете*/)
					{
						/*ВыполнитьДопДвиженияПоРезультатуСписанияУпр(СтруктураПараметров, ТаблицаСписания);*/
					}
				}
				/*// Если задан параметр останавливаться при нехватке партий и партий не хватило - прекратим проведение
*/
				if(true/*Останавливаться И СтруктураПараметров.Отказ*/)
				{
					/*ОбщегоНазначения.СообщитьОбОшибке("Проведение по партиям остановлено ",СтруктураПараметров.Отказ);*/
					/*ПроведениеОстановлено = Истина;*/
				}
				/*ЗаписатьДвиженияДокумента(СтруктураПараметров, ТаблицаСписания, Истина);*/
				/*#Если Клиент Тогда
			Состояние("Проведен документ " + ОбрабатываемыйДокумент);*/
				/*#КонецЕсли;*/
			}
		}
		//ВыполнитьСписание()
		// Сдвиг ГП расчетов по реализации
		//

		public void СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизацииНазад(/*СтруктураПараметров, ТаблицаСписания*/)
		{
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасчетыПоРеализацииОрганизации.МоментВремени
	|ИЗ
	|	Последовательность.РасчетыПоРеализацииОрганизации.Границы КАК РасчетыПоРеализацииОрганизации
	|ГДЕ
	|	РасчетыПоРеализацииОрганизации.Организация = &Организация";*/
			/*Запрос.УстановитьПараметр("Организация", ТаблицаСписания[0].Организация);*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			/*МоментВремениДокумента = Новый МоментВремени(СтруктураПараметров.Период, СтруктураПараметров.Регистратор);*/
			if(true/*Выборка.Следующий()*/)
			{
				/*// Граница переносится назад, если документ проводится задним числом
*/
				if(true/*МоментВремениДокумента.Сравнить(Выборка.МоментВремени) = -1*/)
				{
					/*Последовательности.РасчетыПоРеализацииОрганизации.УстановитьГраницу(МоментВремениДокумента, Новый Структура("Организация", ТаблицаСписания[0].Организация));*/
				}
			}
		}
		// СдвигГраницыПоследовательностиРасчетыПоРеализацииОрганизацииНазад
		//
		//

		public object ОпределитьНеобходимостьСдвигаГраницы(/*ДокументМоментВремени, Учет, Отбор = Неопределено, СписыватьПартииПриПроведенииДокументов = Ложь*/)
		{
			/*// Границу последовательности можно сдвигать вперед только если между границей
*/
			/*// и документом нет других документов в последовательности
*/
			/*// Исключения - регламентные документы
*/
			/*// Регламентные документы могут располагаться в последней секунде месяца
*/
			/*// одновременно с другими документами и иметь момент времени меньше,
*/
			/*// чем документы списания, находящиеся в той же секунде
*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Последовательность.Регистратор
	               |ИЗ
	               |	Последовательность.ПартионныйУчет КАК Последовательность
	               |ГДЕ
				   |    Организация =&Организация
	               |	И Последовательность.МоментВремени > &Граница
	               |	И Последовательность.МоментВремени < &Документ
	               |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска)
	               |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров)
				   |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену)
				   |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг)
				   |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.ПоступлениеТоваровИзПереработки)
				   |	И (НЕ Последовательность.Регистратор = &Регистратор)";*/
			if(true/*Учет = "Упр"*/)
			{
				/*ГраницаМоментВремени = Последовательности.ПартионныйУчет.ПолучитьГраницу(Отбор);*/
			}
			/*Запрос.УстановитьПараметр("Организация", Отбор.Организация);*/
			/*Запрос.УстановитьПараметр("Граница", ГраницаМоментВремени);*/
			/*Запрос.УстановитьПараметр("Документ", ДокументМоментВремени);*/
			/*Запрос.УстановитьПараметр("Регистратор", ДокументМоментВремени.Ссылка);*/
			if(true/*ГраницаМоментВремени = Неопределено ИЛИ ГраницаМоментВремени.Дата = '00010101'*/)
			{
			}
			return null;
		}
		//
		//

		public object ОпределитьНаличиеПоследующихДокументовВПоследовательности(/*ДокументМоментВремени, Учет, Отбор = Неопределено*/)
		{
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Последовательность.Регистратор
	               |ИЗ
	               |	Последовательность.ПартионныйУчет КАК Последовательность
	               |ГДЕ
				   |    Организация =&Организация
	               |	И Последовательность.МоментВремени > &Документ
	               |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.РасчетСебестоимостиВыпуска)
	               |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.КорректировкаСтоимостиСписанияТоваров)
				   |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.ОтчетПроизводстваЗаСмену)
				   |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.АктОбОказанииПроизводственныхУслуг)
				   |	И (НЕ Последовательность.Регистратор ССЫЛКА Документ.ПоступлениеТоваровИзПереработки)
				   |	И (НЕ Последовательность.Регистратор = &Регистратор)";*/
			if(true/*Учет = "Бух" ИЛИ Учет = "Нал"*/)
			{
				/*Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПартионныйУчет", "ПартионныйУчетБУ");*/
			}
			/*Запрос.УстановитьПараметр("Организация", Отбор.Организация);*/
			/*Запрос.УстановитьПараметр("Документ", ДокументМоментВремени);*/
			/*Запрос.УстановитьПараметр("Регистратор", ДокументМоментВремени.Ссылка);*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТКА ПОСТУПЛЕНИЯ НЕОТФАКТУРОВАННЫХ ТОВАРОВ

		public void ПоступлениеТоваровПоОрдеруУпр(/*СтрокаДокумента, СтруктураПараметров*/)
		{
			if(true/*НЕ СтрокаДокумента.ОтражатьВУправленческомУчете*/)
			{
			}
			/*КодыОпераций = Перечисления.КодыОперацийПартииТоваров;*/
			/*Ссылка = СтрокаДокумента.Регистратор;*/
			/*ПриходныйОрдер = СтрокаДокумента.ПоступлениеПриходныйОрдер;*/
			if(true/*Не ТипЗнч(ПриходныйОрдер) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары")*/)
			{
			}
			/*ЗапросДатаОрдера = Новый Запрос("ВЫБРАТЬ Дата ИЗ Документ.ПриходныйОрдерНаТовары ГДЕ Ссылка = &Ссылка");*/
			/*ЗапросДатаОрдера.УстановитьПараметр("Ссылка", ПриходныйОрдер);*/
			/*Выборка = ЗапросДатаОрдера.Выполнить().Выбрать();*/
			/*Выборка.Следующий();*/
			/*// Дата начала обработки
*/
			/*ДатаНач = Выборка.Дата;*/
			/*// Дата конца обработки
*/
			/*ДатаКон = СтрокаДокумента.Период;*/
			/*// Партии, поступившие по накладной
*/
			/*ЗапросПартии = Новый Запрос;*/
			/*ЗапросПартии.УстановитьПараметр("Регистратор", Ссылка);*/
			/*ЗапросПартии.УстановитьПараметр("ВидДвиженияПриход", ВидДвиженияНакопления.Приход);*/
			/*ЗапросПартии.УстановитьПараметр("ПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);*/
			/*ЗапросПартии.Текст = 
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ПартииТоваровНаСкладах.Заказ,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК Количество,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
	|	СУММА(ПартииТоваровНаСкладах.Количество) КАК КоличествоДляВозврата,
	|	СУММА(ПартииТоваровНаСкладах.Стоимость) КАК СтоимостьДляВозврата,
	|	ПартииТоваровНаСкладах.Качество
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|ГДЕ
	|	ПартииТоваровНаСкладах.ВидДвижения = &ВидДвиженияПриход
	|	И ПартииТоваровНаСкладах.СтатусПартии <> &ПоОрдеру
	|	И ПартииТоваровНаСкладах.Регистратор = &Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Качество";*/
			/*ТабПартий = ЗапросПартии.Выполнить().Выгрузить();*/
			/*МассивНоменклатуры = ТабПартий.ВыгрузитьКолонку("Номенклатура");*/
			/*МассивНоменклатуры = ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивНоменклатуры);*/
			/*// Пустая таблица
*/
			/*ТабПартийПеред = Новый ТаблицаЗначений;*/
			/*ТабПартийПеред.Колонки.Добавить("Номенклатура");*/
			/*ТабПартийПеред.Колонки.Добавить("ХарактеристикаНоменклатуры");*/
			/*ТабПартийПеред.Колонки.Добавить("ДокументОприходования");*/
			/*ТабПартийПеред.Колонки.Добавить("ДоговорКонтрагента");*/
			/*ТабПартийПеред.Колонки.Добавить("ДокументПередачи");*/
			/*ТабПартийПеред.Колонки.Добавить("СтатусПартии");*/
			/*ТабПартийПеред.Колонки.Добавить("СтатусПередачи");*/
			/*ТабПартийПеред.Колонки.Добавить("Количество");*/
			/*ТабПартийПеред.Колонки.Добавить("Стоимость");*/
			/*// Запрос для определения количества строк в регистре партий:
*/
			if(true/*СтруктураПараметров.ТекНомерСтрокиПартииТоваровНаСкладахУпр = 0*/)
			{
				/*Запрос = Новый Запрос;*/
				/*Запрос.Текст = "ВЫБРАТЬ
		               |	МАКСИМУМ(ПартииТоваровНаСкладах.НомерСтроки) КАК НомерСтроки
		               |ИЗ
		               |	РегистрНакопления.ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
		               |ГДЕ
		               |	ПартииТоваровНаСкладах.Регистратор = &Регистратор";*/
				/*Запрос.УстановитьПараметр("Регистратор", Ссылка);*/
				/*Результат = Запрос.Выполнить();*/
				if(true/*НЕ Результат.Пустой()*/)
				{
					/*Выборка = Результат.Выбрать();*/
					/*Выборка.Следующий();*/
					/*СтруктураПараметров.ТекНомерСтрокиПартииТоваровНаСкладахУпр = Выборка.НомерСтроки;*/
				}
			}
			/*// Запрос по списанию партий ордеров:
*/
			/*Запрос = Новый Запрос;*/
			/*МассивРеализация = Новый Массив;*/
			/*МассивРеализация.Добавить(КодыОпераций.Реализация);*/
			/*МассивРеализация.Добавить(КодыОпераций.РеализацияРозница);*/
			/*МассивРеализация.Добавить(КодыОпераций.РеализацияКомиссия);*/
			/*МассивРеализация.Добавить(КодыОпераций.ВозвратОтПокупателяТекущийМесяц);*/
			/*Запрос.УстановитьПараметр("КодыСписаниеНаСебестоимость", МассивРеализация);*/
			/*МассивСписаниеНаПереданные = Новый Массив;*/
			/*МассивСписаниеНаПереданные.Добавить(КодыОпераций.ПередачаНаКомиссию);*/
			/*МассивСписаниеНаПереданные.Добавить(КодыОпераций.ПередачаВПереработку);*/
			/*Запрос.УстановитьПараметр("КодыСписаниеНаПереданные",МассивСписаниеНаПереданные);*/
			/*Запрос.УстановитьПараметр("КодыСписаниеНаЗатраты", КодыОпераций.СписаниеНаЗатраты);*/
			/*МассивПеремещениеСклад= Новый Массив;*/
			/*МассивПеремещениеСклад.Добавить(КодыОпераций.ПеремещениеМеждуСкладами);*/
			/*МассивПеремещениеСклад.Добавить(КодыОпераций.ПереоценкаПринятыхНаКомиссию);*/
			/*МассивПеремещениеСклад.Добавить(КодыОпераций.КорректировкаСерийИХарактеристик);*/
			/*МассивПеремещениеСклад.Добавить(КодыОпераций.КорректировкаКачества);*/
			/*МассивПеремещениеСклад.Добавить(КодыОпераций.РезервированиеПодЗаказ);*/
			/*МассивПеремещениеСклад.Добавить(КодыОпераций.СнятиеРезерваПодЗаказ);*/
			/*Запрос.УстановитьПараметр("КодыПеремещениеСклад", МассивПеремещениеСклад);*/
			/*МассивСписаниеНаСклад = Новый Массив;*/
			/*МассивСписаниеНаСклад.Добавить(КодыОпераций.ВозвратОтКомиссионера);*/
			/*МассивСписаниеНаСклад.Добавить(КодыОпераций.ВозвратОтПереработчика);*/
			/*Запрос.УстановитьПараметр("КодыСписаниеНаСклад", МассивСписаниеНаСклад);*/
			/*Запрос.УстановитьПараметр("МассивДокументовОприходования", ПриходныйОрдер);*/
			/*Запрос.УстановитьПараметр("ДатаНач", ДатаНач);*/
			/*Запрос.УстановитьПараметр("ДатаКон", ДатаКон);*/
			/*Запрос.УстановитьПараметр("Ссылка", Ссылка);*/
			/*Запрос.УстановитьПараметр("ВидДвиженияРасход", ВидДвиженияНакопления.Расход);*/
			/*Запрос.УстановитьПараметр("МассивНоменклатуры", МассивНоменклатуры);*/
			/*Запрос.УстановитьПараметр("КодОперацииСписаниеПоОрдеру", Перечисления.КодыОперацийПартииТоваров.СписаниеПоОрдеру);*/
			/*Запрос.УстановитьПараметр("КодыСписаниеПартийВПроизводство", КодыОпераций.СписаниеПартийВПроизводствоОперативно);*/
			/*Запрос.УстановитьПараметр("КодКомплектация", КодыОпераций.Комплектация);*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	""НаСкладах"" КАК СписаноИз,
	|	Источник.Период КАК Период,
	|	Источник.Регистратор КАК Регистратор,
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	СУММА(Источник.Количество) КАК Количество,
	|	СУММА(Источник.Стоимость) КАК Стоимость,
	|	Источник.КодОперации,
	|	ВЫБОР
	|		КОГДА (НЕ Переданные.СтатусПередачи ЕСТЬ NULL )
	|			ТОГДА Переданные.СтатусПередачи	
	|		ИНАЧЕ
	|			Неопределено
	|	КОНЕЦ КАК СтатусПередачи,	
	|	ВЫБОР
	|		КОГДА (НЕ Переданные.ДокументПередачи ЕСТЬ NULL )
	|			ТОГДА Переданные.ДокументПередачи	
	|		КОГДА (НЕ МатериалыВЭксплуатации.ДокументПередачи ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.ДокументПередачи
	|		ИНАЧЕ
	|			Неопределено
	|	КОНЕЦ КАК ДокументПередачи,
	|	Переданные.ДоговорКонтрагента,
	|	Переданные.КодОперации КАК КодОперацииПартииТоваровПереданные,
	|	НаСкладахПоступление.Склад КАК СкладПолучатель,
	|	НаСкладахПоступление.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатурыНовая,
	|	НаСкладахПоступление.СерияНоменклатуры КАК СерияНоменклатурыНовая,
	|	Источник.КодОперации КАК КодОперацииПартииТоваров,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА (НЕ НезавершенноеПроизводство.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтатьяЗатрат,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА (НЕ НезавершенноеПроизводство.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатурнаяГруппа,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ Себестоимость.Подразделение ЕСТЬ NULL )
	|			ТОГДА Себестоимость.Подразделение
	|		КОГДА (НЕ НезавершенноеПроизводство.Подразделение ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.Подразделение
	|		КОГДА (НЕ МатериалыВЭксплуатации.Подразделение ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Подразделение,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		КОГДА (НЕ НаСкладахПоступление.Заказ ЕСТЬ NULL )
	|			ТОГДА НаСкладахПоступление.Заказ
	|		КОГДА (НЕ НезавершенноеПроизводство.Заказ ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ЗаказСписания,
	|	0 КАК СтоимостьПоступление,
	|	Источник.Качество,
	|	НаСкладахПоступление.Качество КАК КачествоНовое,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям КАК ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|		КОГДА (НЕ МатериалыВЭксплуатации.ФизЛицо ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.ФизЛицо
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА (НЕ МатериалыВЭксплуатации.НазначениеИспользования ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.НазначениеИспользования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НазначениеИспользования,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК НоменклатураНовая,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ДокументОприходованияНовый,
	|	ЕСТЬNULL(ИсточникДляКомплектации.Количество, 0) КАК КоличествоПоступление,
	|	Источник.НомерСтрокиСписанныхТоваров КАК НомерСтрокиСписанныхТоваров,
	|	СписанныеТовары.ВалютаДокумента КАК ВалютаДокумента,
	|	СписанныеТовары.КурсДокумента КАК КурсДокумента,
	|	СписанныеТовары.КратностьДокумента КАК КратностьДокумента,
	|	СписанныеТовары.НоменклатураКомплекта КАК НоменклатураКомплекта,
	|	СписанныеТовары.ХарактеристикаКомплекта КАК ХарактеристикаКомплекта,
	|	СУММА(ВЫБОР
	|		КОГДА НЕ СписанныеТовары.Количество = 0
	|			ТОГДА СписанныеТовары.КоличествоКомплекта*Источник.Количество/СписанныеТовары.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ) КАК КоличествоКомплекта,
	|	СписанныеТовары.СуммаЗадолженности КАК СуммаВыручки,	
	|	СписанныеТовары.Проект КАК Проект,
	|	ЕСТЬNULL(СписанныеТовары.ВедениеУчетаПоПроектам, ЛОЖЬ) КАК ВедениеУчетаПоПроектам	
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданные КАК Переданные
	|		ПО Источник.Регистратор = Переданные.Регистратор
	|			И Источник.НомерКорСтроки = Переданные.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаПереданные))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.Затраты КАК Затраты
	|		ПО Источник.Регистратор = Затраты.Регистратор
	|			И Источник.НомерКорСтроки = Затраты.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаЗатраты))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор
	|			И Источник.НомерКорСтроки = Себестоимость.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладахПоступление
	|		ПО Источник.Регистратор = НаСкладахПоступление.Регистратор
	|			И Источник.НомерКорСтроки = НаСкладахПоступление.НомерСтроки
	|			И (Источник.КодОперации В (&КодыПеремещениеСклад))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НезавершенноеПроизводство КАК НезавершенноеПроизводство
	|		ПО Источник.Регистратор = НезавершенноеПроизводство.Регистратор
	|			И Источник.НомерКорСтроки = НезавершенноеПроизводство.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеПартийВПроизводство))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииМатериаловВЭксплуатации КАК МатериалыВЭксплуатации
	|		ПО Источник.Регистратор = МатериалыВЭксплуатации.Регистратор
	|			И Источник.НомерКорСтроки = МатериалыВЭксплуатации.НомерСтроки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК ИсточникДляКомплектации
	|		ПО Источник.Регистратор = ИсточникДляКомплектации.Регистратор
	|			И Источник.НомерКорСтроки = ИсточникДляКомплектации.НомерСтроки
	|			И (Источник.КодОперации В (&КодКомплектация))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ПО Источник.Регистратор = СписанныеТовары.Регистратор
	|			И (Источник.НомерСтрокиСписанныхТоваров = СписанныеТовары.НомерСтроки)
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.КодОперации <> &КодОперацииСписаниеПоОрдеру
	|	И Источник.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	Источник.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.Заказ,
	|	Источник.КодОперации,
	|	ВЫБОР
	|		КОГДА (НЕ Переданные.СтатусПередачи ЕСТЬ NULL )
	|			ТОГДА Переданные.СтатусПередачи	
	|		ИНАЧЕ
	|			Неопределено
	|	КОНЕЦ,	
	|	ВЫБОР
	|		КОГДА (НЕ Переданные.ДокументПередачи ЕСТЬ NULL )
	|			ТОГДА Переданные.ДокументПередачи	
	|		КОГДА (НЕ МатериалыВЭксплуатации.ДокументПередачи ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.ДокументПередачи
	|		ИНАЧЕ
	|			Неопределено
	|	КОНЕЦ,
	|	Переданные.ДоговорКонтрагента,
	|	Переданные.КодОперации,
	|	НаСкладахПоступление.Склад,
	|	НаСкладахПоступление.ХарактеристикаНоменклатуры,
	|	НаСкладахПоступление.СерияНоменклатуры,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА Затраты.СтатьяЗатрат
	|		КОГДА (НЕ НезавершенноеПроизводство.СтатьяЗатрат ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.СтатьяЗатрат
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА Затраты.НоменклатурнаяГруппа
	|		КОГДА (НЕ НезавершенноеПроизводство.НоменклатурнаяГруппа ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.НоменклатурнаяГруппа
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Подразделение ЕСТЬ NULL )
	|			ТОГДА Затраты.Подразделение
	|		КОГДА (НЕ Себестоимость.Подразделение ЕСТЬ NULL )
	|			ТОГДА Себестоимость.Подразделение
	|		КОГДА (НЕ НезавершенноеПроизводство.Подразделение ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.Подразделение
	|		КОГДА (НЕ МатериалыВЭксплуатации.Подразделение ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.Подразделение
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ Затраты.Заказ ЕСТЬ NULL )
	|			ТОГДА Затраты.Заказ
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		КОГДА (НЕ НаСкладахПоступление.Заказ ЕСТЬ NULL )
	|			ТОГДА НаСкладахПоступление.Заказ
	|		КОГДА (НЕ НезавершенноеПроизводство.Заказ ЕСТЬ NULL )
	|			ТОГДА НезавершенноеПроизводство.Заказ
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Источник.Качество,
	|	НаСкладахПоступление.Качество,
	|	ВЫБОР
	|		КОГДА (НЕ МатериалыВЭксплуатации.ФизЛицо ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.ФизЛицо
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ МатериалыВЭксплуатации.НазначениеИспользования ЕСТЬ NULL )
	|			ТОГДА МатериалыВЭксплуатации.НазначениеИспользования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.Номенклатура ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.Номенклатура
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА (НЕ ИсточникДляКомплектации.ДокументОприходования ЕСТЬ NULL )
	|			ТОГДА ИсточникДляКомплектации.ДокументОприходования
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	ЕСТЬNULL(ИсточникДляКомплектации.Количество, 0),
	|	Источник.НомерСтрокиСписанныхТоваров,
	|	СписанныеТовары.ВалютаДокумента,
	|	СписанныеТовары.КурсДокумента,
	|	СписанныеТовары.КратностьДокумента,
	|	СписанныеТовары.НоменклатураКомплекта,
	|	СписанныеТовары.ХарактеристикаКомплекта,
	|	Источник.КодОперации,
	|	СписанныеТовары.СуммаЗадолженности,
	|	СписанныеТовары.Проект,
	|	СписанныеТовары.ВедениеУчетаПоПроектам
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Переданные"",
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	НаСкладах.Склад,
	|	Источник.ХарактеристикаНоменклатуры,
	|	НаСкладах.СерияНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	НаСкладах.Заказ,
	|	СУММА(Источник.Количество),
	|	СУММА(Источник.Стоимость),
	|	Источник.КодОперации,
	|	Источник.СтатусПередачи,
	|	Источник.ДокументПередачи,
	|	Источник.ДоговорКонтрагента,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	НаСкладах.КодОперации,
	|	Источник.НомерКорСтроки,
	|	NULL,
	|	NULL,
	|	Себестоимость.Подразделение,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	0,
	|	NULL,
	|	NULL,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	NULL,
	|	ЛОЖЬ
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные КАК Источник
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладах КАК НаСкладах
	|		ПО Источник.Регистратор = НаСкладах.Регистратор
	|			И Источник.НомерКорСтроки = НаСкладах.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСклад))
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ПродажиСебестоимость КАК Себестоимость
	|		ПО Источник.Регистратор = Себестоимость.Регистратор
	|			И Источник.НомерКорСтроки = Себестоимость.НомерСтроки
	|			И (Источник.КодОперации В (&КодыСписаниеНаСебестоимость))
	|ГДЕ
	|	Источник.Период МЕЖДУ &ДатаНач И &ДатаКон
	|	И Источник.ВидДвижения = &ВидДвиженияРасход
	|	И Источник.Регистратор <> &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Источник.Организация,
	|	Источник.Номенклатура,
	|	Источник.ДоговорКонтрагента,
	|	Источник.ДокументПередачи,
	|	Источник.ХарактеристикаНоменклатуры,
	|	Источник.ДокументОприходования,
	|	Источник.СтатусПартии,
	|	Источник.СтатусПередачи,
	|	НаСкладах.Склад,
	|	НаСкладах.СерияНоменклатуры,
	|	НаСкладах.Заказ,
	|	Источник.Период,
	|	Источник.Регистратор,
	|	Источник.КодОперации,
	|	НаСкладах.КодОперации,
	|	Источник.НомерКорСтроки,
	|	ВЫБОР
	|		КОГДА (НЕ Себестоимость.ЗаказПокупателя ЕСТЬ NULL )
	|			ТОГДА Себестоимость.ЗаказПокупателя
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	Себестоимость.Подразделение,
	|	Источник.Номенклатура.ВестиПартионныйУчетПоСериям
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период,
	|	Регистратор";*/
			/*Запрос.Текст = СтрЗаменить(Запрос.Текст, "ГДЕ", "ГДЕ Источник.Номенклатура В (&МассивНоменклатуры)
	|	И Источник.ДокументОприходования В (&МассивДокументовОприходования) И ");*/
			/*ТаблицаЗапроса = Запрос.Выполнить().Выгрузить();*/
			/*// Пустые колонки для совместимости со структурой регистра СписанныеТовары
*/
			/*ТаблицаЗапроса.Колонки.Добавить("СтатусПартииНовый");*/
			/*ТаблицаЗапроса.Колонки.Добавить("ОтражатьВУправленческомУчете", Новый ОписаниеТипов("Булево"));*/
			/*ТаблицаЗапроса.Колонки.Добавить("ОтражатьВБухгалтерскомУчете",  Новый ОписаниеТипов("Булево"));*/
			/*ТаблицаЗапроса.Колонки.Добавить("ОтражатьВНалоговомУчете",      Новый ОписаниеТипов("Булево"));*/
			/*ТаблицаЗапроса.Колонки.Добавить("ОтражатьВМеждународномУчете",  Новый ОписаниеТипов("Булево"));*/
			/*ТаблицаЗапроса.Колонки.Добавить("ВидТабличнойЧасти");*/
			/*ТаблицаЗапроса.Колонки.Добавить("ЗаказПартии");*/
			/*ТаблицаЗапроса.ЗаполнитьЗначения(Истина, "ОтражатьВУправленческомУчете");*/
			/*ТаблицаЗапроса.Колонки.Добавить("ИзменитьСерию", Новый ОписаниеТипов("Булево"));*/
			/*ТаблицаЗапроса.Колонки.Добавить("ИзменитьХарактеристику", Новый ОписаниеТипов("Булево"));*/
			if(true/*ТаблицаЗапроса.Количество() = 0*/)
			{
			}
			/*// Таблицы остатков партий
*/
			/*СтруктураПараметров.Вставить("ТаблицаПартииТоваровНаСкладах"+"Упр", ТабПартий);*/
			/*СтруктураПараметров.Вставить("ТаблицаПартииТоваровПереданные"+"Упр", ТабПартийПеред);*/
			/*НачНомерНаСкладах = 0;*/
			if(true/*Не СтруктураПараметров.Свойство("МинНомерСтрокиПартииТоваровНаСкладахУпр",НачНомерНаСкладах)*/)
			{
				/*НачНомерНаСкладах = СтруктураПараметров.ТекНомерСтрокиПартииТоваровНаСкладахУпр;*/
				/*СтруктураПараметров.Вставить("МинНомерСтрокиПартииТоваровНаСкладахУпр", НачНомерНаСкладах);*/
			}
			/*НачНомерПереданные = 0;*/
			if(true/*Не СтруктураПараметров.Свойство("МинНомерСтрокиПартииТоваровПереданныеУпр",НачНомерПереданные)*/)
			{
				/*НачНомерПереданные = СтруктураПараметров.ТекНомерСтрокиПартииТоваровПереданныеУпр;*/
				/*СтруктураПараметров.Вставить("МинНомерСтрокиПартииТоваровПереданныеУпр", НачНомерПереданные);*/
			}
		}
		// ПоступлениеТоваровПоОрдеруУпр

		public void СдвинутьГраницуПоследовательности(/*ИмяПоследовательности, ДокументМоментВремени, Учет, Отбор, СписыватьПартииПриПроведенииДокументов*/)
		{
			/*СдвигатьГраницу = ОпределитьНеобходимостьСдвигаГраницы(ДокументМоментВремени, Учет, Отбор, СписыватьПартииПриПроведенииДокументов);*/
			if(true/*СдвигатьГраницу*/)
			{
				/*Последовательности[ИмяПоследовательности].УстановитьГраницу(ДокументМоментВремени, Отбор);*/
				/*Набор = Последовательности[ИмяПоследовательности].СоздатьНаборЗаписей();*/
				/*Набор.Отбор.Регистратор.Установить(ДокументМоментВремени.Ссылка);*/
				if(true/*ЗначениеЗаполнено(Набор.Отбор.Регистратор.Значение)*/)
				{
					if(true/*ДокументМоментВремени.Ссылка.Проведен*/)
					{
						/*ДокументПроведенВХронологическойПоследовательности = (НЕ СписыватьПартииПриПроведенииДокументов) ИЛИ ОпределитьНаличиеПоследующихДокументовВПоследовательности(ДокументМоментВремени, Учет, Отбор);*/
						if(true/*ДокументПроведенВХронологическойПоследовательности*/)
						{
							/*Набор.Прочитать();*/
							/*Набор.Записать();*/
						}
					}
				}
			}
		}

		public void УстановкаГраницыПоследовательности(/*ЗакрытиеЗаказовПокупателей, ТаблицаСписания, Учет, ДокументМоментВремени, КорректировкаСтоимостиСписания=Ложь, СписыватьПартииПриПроведенииДокументовУпр*/)
		{
			/*ИмяПоследовательности = "ПартионныйУчет";*/
			if(true/*Учет = "Упр"*/)
			{
				/*ИмяПоследовательности = ИмяПоследовательности;*/
			}
			if(true/*ЗакрытиеЗаказовПокупателей*/)
			{
				/*СписокОрганизаций = ТаблицаСписания.ВыгрузитьКолонку("Организация");*/
				/*//СписокОрганизаций.Добавить(Справочники.Организации.ПустаяСсылка());
*/
			}
		}
		// УстановкаГраницыПоследовательности()
		// Процедура-вход для всех документов. Проводит переданный документ по учету партий товаров
		//
		// Параметры
		//  ОбрабатываемыйДокумент - проводимый документ
		//

		public void ДвижениеПартийТоваров(/*ОбрабатываемыйДокумент, ТаблицаСписания = Неопределено,
								КоличествоСтрокВДокументе = 0, ЗНАЧ Упр = Истина,
								ЗНАЧ Бух = Истина, ЗНАЧ Нал = Истина,
								Останавливаться = Ложь, ПроведениеОстановлено = Ложь,
								ДокументМоментВремени = Неопределено, СписаниеВыполняетсяОбработкой = Ложь,
								СтруктураНаборовЗаписей = Неопределено,
								ФормироватьПроводки = Неопределено, СписыватьПартииНДС = Неопределено, УчетнаяПолитика = Неопределено*/)
		{
			/*СтруктураДата = Новый Структура("Дата");*/
			/*СтруктураДата.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());*/
			/*ПолучитьРеквизитыОбъекта(ОбрабатываемыйДокумент, СтруктураДата);*/
			/*ИспользоватьРасширеннуюАналитику = Ложь;*/
			if(true/*глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
	 И глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураДата.Дата*/)
			{
				if(true/*УчетнаяПолитика <> Неопределено
		 И УчетнаяПолитика.Свойство("Бух")
		 И УчетнаяПолитика.Бух.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная*/)
				{
					/*Упр = Ложь;*/
					/*Бух = Ложь;*/
					/*ИспользоватьРасширеннуюАналитику = Истина;*/
				}
			}
			/*ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");*/
			if(true/*НЕ СписаниеВыполняетсяОбработкой*/)
			{
				/*Упр = Упр И ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументов;*/
				/*Бух = Бух И ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух;*/
				/*Нал = Нал И ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовНал;*/
			}
			/*СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(ОбрабатываемыйДокумент.Организация, ОбрабатываемыйДокумент.Дата);*/
			/*Упр = Упр И (НЕ СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется);*/
			/*// Если не переданы строки документа, выбираем из базы.
*/
			if(true/*ТаблицаСписания = Неопределено*/)
			{
				/*// Таблица строк документов списания
*/
				/*ТаблицаСписания = ПолучитьТаблицуСтрокДокументов(ОбрабатываемыйДокумент, Упр, Бух, Нал);*/
			}
			/*УчетНДС.ДополнитьСписанныеТоварыДаннымиПоКомиссии(ОбрабатываемыйДокумент, ТаблицаСписания);*/
			if(true/*ТаблицаСписания.Колонки.Найти("Покупатель") = Неопределено*/)
			{
				/*ТаблицаСписания.Колонки.Добавить("Покупатель", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));*/
			}
			/*КоличествоСтрокВДокументе = ТаблицаСписания.Количество();*/
			/*СтруктураПараметров = Новый Структура;*/
			/*СтруктураПараметров.Вставить("ИспользоватьРасширеннуюАналитику", ИспользоватьРасширеннуюАналитику);*/
			/*СтруктураПараметров.Вставить("Покупатель", 						 СтруктураДата.Контрагент);*/
			if(true/*ТаблицаСписания.Количество() > 0*/)
			{
				/*СтруктураПараметров.Вставить("ФормироватьПроводкиПоСписаниюТМЦ", ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух);*/
				/*СтруктураПараметров.Вставить("СписыватьПартииНДС", ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух);*/
			}
			if(true/*СписаниеВыполняетсяОбработкой*/)
			{
				if(true/*НЕ ФормироватьПроводки = Неопределено*/)
				{
					/*СтруктураПараметров.Вставить("ФормироватьПроводкиПоСписаниюТМЦ", ФормироватьПроводки);*/
				}
				if(true/*НЕ СписыватьПартииНДС = Неопределено*/)
				{
					/*СтруктураПараметров.Вставить("СписыватьПартииНДС", СписыватьПартииНДС);*/
				}
			}
			if(true/*ДокументМоментВремени = Неопределено*/)
			{
				/*ДокументМоментВремени = Новый МоментВремени(СтруктураДата.Дата, ОбрабатываемыйДокумент);*/
			}
			if(true/*КоличествоСтрокВДокументе > 0*/)
			{
				/*СтруктураПараметров.Вставить("ТекстСообщений", "");*/
				/*СтруктураПараметров.Вставить("Отказ", Ложь);*/
				/*СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВУправленческомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВУправленческомУчете")<>Неопределено);*/
				/*СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВБухгалтерскомУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВБухгалтерскомУчете")<>Неопределено);*/
				/*СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВНалоговомУчете", 		ТаблицаСписания.Найти(Истина, "ОтражатьВНалоговомУчете")<>Неопределено);*/
				/*СтруктураПараметров.Вставить("ЕстьСтрокиОтражатьВМеждународномУчете", 	ТаблицаСписания.Найти(Истина, "ОтражатьВМеждународномУчете")<>Неопределено);*/
				if(true/*НЕ (Упр ИЛИ Бух ИЛИ Нал ИЛИ СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете)*/)
				{
				}
				/*//Получение учетной политики
*/
				if(true/*УчетнаяПолитика = Неопределено*/)
				{
					/*СтруктураПараметров.Вставить("УчетнаяПолитика", ПолучитьУчетнуюПолитику(ДокументМоментВремени, 
															СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете И Упр, 
															(СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете  И Бух) ИЛИ СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете, 
															СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете И Нал,
															СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете, ОбрабатываемыйДокумент.Организация));*/
					if(true/*СтруктураПараметров.УчетнаяПолитика = Неопределено*/)
					{
					}
				}
				if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете И Нал*/)
				{
					if(true/*ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СистемаНалогообложения", "Бух", СтруктураПараметров) = Перечисления.СистемыНалогообложения.Упрощенная
			  И ПолучитьПараметрУчетнойПолитикиПартионногоУчета("ОбъектНалогообложенияУСН", "Нал", СтруктураПараметров) = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы*/)
					{
						/*//Для объекта налогообложения "Доходы" партионный налоговый учет не ведется
*/
						/*СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете = Ложь;*/
					}
				}
				if(true/*ЗначениеЗаполнено(ОбрабатываемыйДокумент.Организация) И СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете И Упр*/)
				{
					/*СпособВеденияПартионногоУчетаПоОрганизации = ПолучитьПараметрУчетнойПолитикиПартионногоУчета("СпособВеденияПартионногоУчетаПоОрганизации", "Упр", СтруктураПараметров);*/
					/*СтруктураПараметров.Вставить("ОрганизацияУпр", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(ОбрабатываемыйДокумент.Организация,СпособВеденияПартионногоУчетаПоОрганизации));*/
				}
				if(true/*СтруктураНаборовЗаписей = Неопределено*/)
				{
					/*// Движения - наборы записей по регистрам
*/
					/*СоздатьНаборыЗаписей(СтруктураПараметров);*/
				}
				/*ПодготовитьТаблицуСписания(СтруктураПараметров, ТаблицаСписания, Упр, Бух, Нал);*/
				/*Строка0 = ТаблицаСписания[0];*/
				if(true/*НЕ ЗначениеЗаполнено(Строка0.Регистратор)*/)
				{
					/*ТаблицаСписания.ЗаполнитьЗначения(ОбрабатываемыйДокумент, "Регистратор");*/
				}
				if(true/*НЕ ЗначениеЗаполнено(Строка0.Период)*/)
				{
					/*ТаблицаСписания.ЗаполнитьЗначения(СтруктураДата.Дата, "Период");*/
				}
				/*ВыполнитьСписание(СтруктураПараметров, ТаблицаСписания, ДокументМоментВремени, Останавливаться, ПроведениеОстановлено);*/
			}
			/*// Сдвиг границы последовательности осуществляется только при онлайновом списании партий
*/
			/*// либо из обработки проведение по партиям.
*/
			/*ЗакрытиеЗаказовПокупателей = ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.ЗакрытиеЗаказовПокупателей");*/
			/*КорректировкаСтоимостиСписания = ТипЗнч(ОбрабатываемыйДокумент) = Тип("ДокументСсылка.КорректировкаСтоимостиСписанияТоваров");*/
			if(true/*НЕ СписаниеВыполняетсяОбработкой*/)
			{
				if(true/*Упр*/)
				{
					/*УстановкаГраницыПоследовательности(ЗакрытиеЗаказовПокупателей, ТаблицаСписания, "Упр", ДокументМоментВремени, КорректировкаСтоимостиСписания, ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументов);*/
				}
				if(true/*Бух Или Нал*/)
				{
					/*УстановкаГраницыПоследовательности(ЗакрытиеЗаказовПокупателей, ТаблицаСписания, "Бух", ДокументМоментВремени, КорректировкаСтоимостиСписания, ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух);*/
				}
			}
		}
		// ДвижениеПартийТоваров()

		public object ПолучитьСписокДокументовПоПоследовательности(/*ИмяПоследовательности,МоментВремениНачало, ДатаОкончания, МаксимальноеКоличествоДокументовВВыборке=1000, Организации=Неопределено*/)
		{
			/*Запрос = Новый Запрос("ВЫБРАТЬ ПЕРВЫЕ " + Формат(МаксимальноеКоличествоДокументовВВыборке,"ЧГ=") + "
	                      |	ТаблицаПоследовательности.Период КАК Дата,
						  |	ТаблицаПоследовательности.Регистратор КАК Ссылка,
						  |	ТаблицаПоследовательности.Организация КАК Организация
	                      |ИЗ
	                      |	Последовательность." + ИмяПоследовательности + " КАК ТаблицаПоследовательности
						  |ГДЕ
						  |	ТаблицаПоследовательности.Период <= &ДатаКон
						  |	И (ТаблицаПоследовательности.Период > &Период
						  |	ИЛИ ((ТаблицаПоследовательности.Период = &Период) И (ТаблицаПоследовательности.Регистратор > &Регистратор)))");*/
			if(true/*ЗначениеЗаполнено(Организации)*/)
			{
				/*Запрос.Текст = Запрос.Текст + "
	                      |	И ТаблицаПоследовательности.Организация В (&Организации)";*/
				/*Запрос.УстановитьПараметр("Организации",Организации);*/
			}
			/*Запрос.Текст = Запрос.Текст + "						  
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	ТаблицаПоследовательности.Период,
						  |	ТаблицаПоследовательности.Регистратор";*/
			/*Запрос.УстановитьПараметр("ДатаКон",ДатаОкончания);*/
			/*Запрос.УстановитьПараметр("Период",МоментВремениНачало.Дата);*/
			/*Запрос.УстановитьПараметр("Регистратор",МоментВремениНачало.Ссылка);*/
			return null;
		}
		// СЛУЖЕБНЫЕ ФУНКЦИИ ДЛЯ СОВМЕСТИМОСТИ С БП
		////////////////////////////////////////////////////////////////////////////////
		// ДВИЖЕНИЯ ПО НДС
		////////////////////////////////////////////////////////////////////////////////
		////////////////////////////////////////////////////////////////////////////////
		// ПОЛУЧЕНИЕ ОСТАТКОВ ИЗ РЕГИСТРОВ ПАРТИЙ
		// Упр

		public void ЗаполнитьЗапросПартийНаСкладахУпр(/*Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ*/)
		{
			/*ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|		&Дат, 
	|		Организация = &Организация 
	|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В (
	|				ВЫБРАТЬ
	|					РегистрСведений.СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары
	|				ГДЕ
	|					РегистрСведений.СписанныеТовары.Регистратор = &Ссылка) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СтатусПартии,
	|	Заказ,
	|	СерияНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.ДопустимыйСтатус1 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус2 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус3 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус4 <> &ПустойСтатус
	|					ТОГДА ПартииТоваровНаСкладах.СтатусПартии = &ПустойСтатус
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииПоОрдеру
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|	
	|		И (ВЫБОР
	|			КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|							ТОГДА ВЫБОР
	|									КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|										ТОГДА ЛОЖЬ
	|									ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|								КОНЕЦ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОНЕЦ)
	|		И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";*/
		}
		// ЗаполнитьЗапросПартийНаСкладахУпр()

		public void ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателей(/*Запрос*/)
		{
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии
	|
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|		&Дат, 
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры, Заказ) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры,
	|					СписанныеТовары.ЗаказПартии
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)) КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Заказ
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И СписанныеТовары.ЗаказПартии = ПартииТоваровНаСкладах.Заказ
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|	
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";*/
		}
		// ЗаполнитьЗапросПартийНаСкладахУпрДляЗакрытияЗаказовПокупателей()

		public void ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиУпр(/*Запрос, ВестиПартионныйУчетПоСкладам*/)
		{
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|		&Дат, 
	|		Организация = &Организация 
	|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) " + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В ( 
	|				ВЫБРАТЬ
	|					СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СерияНоменклатуры,
	|	СтатусПартии
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|				ИЛИ СписанныеТовары.Качество = &ПустоеКачество)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|			И (ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииВозвратнаяТараОтложеннаяОтгрузка
	|				ИЛИ ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииКупленныйОтложеннаяОтгрузка)
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|		ПО 
	|			(СписанныеТоварыОрдера.Регистратор = &Ссылка)
	|			И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|			И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры " + ?(ВестиПартионныйУчетПоСкладам,"
	|			И (ВЫБОР
	|					КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|					ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) ","")+"
	|			И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|	
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|ИТОГИ ПО
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";*/
			/*Запрос.УстановитьПараметр("СтатусПартииВозвратнаяТараОтложеннаяОтгрузка", Перечисления.СтатусыПартийТоваров.ВозвратнаяТараОтложеннаяОтгрузка);*/
			/*Запрос.УстановитьПараметр("СтатусПартииКупленныйОтложеннаяОтгрузка", Перечисления.СтатусыПартийТоваров.КупленныйОтложеннаяОтгрузка);*/
		}
		// ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиУпр()

		public void ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеУпр(/*Запрос,ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ*/)
		{
			/*ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии
	|
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах.Остатки(
	|		&Дат, 
	|		Организация = &Организация 
	|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СтатусПартии,
	|	Заказ,
	|	СерияНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказСписания = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.ДопустимыйСтатус1 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус2 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус3 <> &ПустойСтатус
	|						ИЛИ СписанныеТовары.ДопустимыйСтатус4 <> &ПустойСтатус
	|					ТОГДА ПартииТоваровНаСкладах.СтатусПартии = &ПустойСтатус
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = &СтатусПартииПоОрдеру
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|							ИЛИ ПартииТоваровНаСкладах.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|	
	|		И (ВЫБОР
	|			КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|				ТОГДА ВЫБОР
	|						КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|							ТОГДА ВЫБОР
	|									КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|										ТОГДА ЛОЖЬ
	|									ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|								КОНЕЦ
	|						ИНАЧЕ ИСТИНА
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|		КОНЕЦ)
	|		И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
	|				ИЛИ СписанныеТовары.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|		ПО (СписанныеТоварыОрдера.Регистратор = &Ссылка)
	|			И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|			И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|					ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента	
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";*/
		}
		// ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеУпр()

		public object ПолучитьДеревоПартийНаСкладахУпр(/*МоментКон, СтруктураПараметров*/)
		{
			/*Запрос = Новый Запрос;*/
			/*ОсновнойДокумент = Неопределено;*/
			/*СтруктураПараметров.Свойство("ОсновнойДокумент",ОсновнойДокумент);*/
			/*Регистратор = СтруктураПараметров.Регистратор;*/
			/*СпособОценкиМПЗ = СтруктураПараметров.СпособОценкиМПЗУпр;*/
			/*СтратегияСтатусПартии = СтруктураПараметров.СтратегияСтатусПартииУпр;*/
			/*ВестиПартионныйУчетПоСкладам = СтруктураПараметров.ВестиПартионныйУчетПоСкладамУпр;*/
			/*// Для повышения быстродействия остатки партий получаются различными способами 
*/
			if(true/*СтруктураПараметров.Свойство("ЗакрытиеЗаказовПокупателей")*/)
			{
				/*ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателей(Запрос);*/
			}
			/*Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("ПустойСтатус", Перечисления.СтатусыПартийТоваров.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("СтатусПартииПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);*/
			/*Запрос.УстановитьПараметр("ПустоеКачество", Справочники.Качество.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);*/
			/*Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("Организация", СтруктураПараметров.ОрганизацияУпр);*/
			/*Запрос.УстановитьПараметр("Ссылка", Регистратор);*/
			if(true/*ОсновнойДокумент <> Неопределено*/)
			{
				/*Запрос.УстановитьПараметр("ОсновнойДокумент", ОсновнойДокумент);*/
			}
			/*Запрос.УстановитьПараметр("Дат", МоментКон);*/
			/*Запрос.УстановитьПараметр("НаКомиссию", Перечисления.СтатусыПартийТоваров.НаКомиссию);*/
			return null;
		}
		//ПолучитьДеревоПартийНаСкладахУпр

		public object ПолучитьДеревоПартийПереданныеУпр(/*МоментКон, Регистратор, ДоговорКонтрагента, СпособОценкиМПЗ, СтратегияСтатусПартии*/)
		{
			/*ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровПереданные");*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Заказ КАК ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СтатусПартии,
	|	ПартииТоваровПереданные.СтатусПередачи
	|
	|ПОМЕСТИТЬ ПартииТоваровПереданные
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданные.Остатки(
	|		&Дат,
	|		(Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары 
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)" + ?(ДоговорКонтрагента = Неопределено, "", "
	|		И ДоговорКонтрагента = &ДоговорКонтрагента") + ") КАК ПартииТоваровПереданные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СтатусПартии,
	|	ЗаказПередачи
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.Количество,
	|	ПартииТоваровПереданные.Стоимость,
	|	ПартииТоваровПереданные.СтатусПартии,
	|	ПартииТоваровПереданные.СтатусПередачи,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СтатусПартии = &НаКомиссию
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровПереданные КАК ПартииТоваровПереданные 
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровПереданные.СтатусПартии = &ПустойСтатус
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = &СтатусПартииПоОрдеру
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус1
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус2
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус3
	|				ИЛИ ПартииТоваровПереданные.СтатусПартии = СписанныеТовары.ДопустимыйСтатус4)
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	|						ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &ВозвратОтПереработчика
	|					ТОГДА СписанныеТовары.ЗаказПартии = ПартииТоваровПереданные.ЗаказПередачи
	|							ИЛИ ПартииТоваровПереданные.ЗаказПередачи = &ЗаказПоставщикуПустаяСсылка
	|								И СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоДокументПередачи,
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии " + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, "Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровПереданные";*/
			/*Запрос.УстановитьПараметр("ПустойСтатус", Перечисления.СтатусыПартийТоваров.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("Ссылка", Регистратор);*/
			/*Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);*/
			/*Запрос.УстановитьПараметр("Дат", МоментКон);*/
			/*Запрос.УстановитьПараметр("НаКомиссию", Перечисления.СтатусыПартийТоваров.НаКомиссию);*/
			/*Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);*/
			/*Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);*/
			/*Запрос.УстановитьПараметр("СтатусПартииПоОрдеру", Перечисления.СтатусыПартийТоваров.ПоОрдеру);*/
			/*Запрос.УстановитьПараметр("ЗаказПоставщикуПустаяСсылка", Документы.ЗаказПоставщику.ПустаяСсылка());*/
			return null;
		}
		// Бух

		public void ЗаполнитьЗапросПартийНаСкладахБух(/*Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ*/)
		{
			/*ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СчетУчета,
	|	Заказ,
	|	СерияНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация
	|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаБУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ)
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";*/
		}
		// ЗаполнитьЗапросПартийНаСкладахБух()

		public void ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейБух(/*Запрос*/)
		{
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация
	|
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	|		&Дат, 
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры, Заказ) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры,
	|					СписанныеТовары.ЗаказПартии
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)) КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Заказ
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Организация = ПартииТоваровНаСкладах.Организация
	|			И СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И СписанныеТовары.ЗаказПартии = ПартииТоваровНаСкладах.Заказ
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|	
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";*/
		}
		// ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейБух()

		public void ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиБух(/*Запрос, ВестиПартионныйУчетПоСкладам*/)
		{
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) " + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СерияНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|				ИЛИ СписанныеТовары.Качество = &ПустоеКачество)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|		
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|		ПО 
	|			СписанныеТоварыОрдера.Регистратор = &Ссылка
	|			И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|			И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры " + ?(ВестиПартионныйУчетПоСкладам,"
	|			И (ВЫБОР
	|					КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|					ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ) ","")+"
	|			И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|	И ПартииТоваровНаСкладах.СчетУчета = &СчетУчета
	|
	|ИТОГИ ПО
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента	
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";*/
			/*Запрос.УстановитьПараметр("СчетУчета", ПланыСчетов.Хозрасчетный.ТМЦпринятыеНаОтветственноеХранение);*/
		}
		// ЗаполнитьЗапросПартийНаСкладахДляОтложеннойОтгрузкиБух

		public void ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеБух(/*Запрос,ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ*/)
		{
			/*ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры)В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СчетУчета,
	|	Заказ,
	|	СерияНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ВЫБОР
	|		КОГДА СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказСписания = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация
	|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаБУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ)
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
	|				ИЛИ СписанныеТовары.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|			ПО (СписанныеТоварыОрдера.Регистратор = &Ссылка)
	|				И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|				И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|				И (ВЫБОР
	|					КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|						ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|					ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";*/
		}
		// ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеБух()

		public object ПолучитьДеревоПартийНаСкладахБух(/*МоментКон, Организация, СтруктураПараметров*/)
		{
			/*Запрос = Новый Запрос;*/
			/*ОсновнойДокумент = Неопределено;*/
			/*СтруктураПараметров.Свойство("ОсновнойДокумент",ОсновнойДокумент);*/
			/*Регистратор = СтруктураПараметров.Регистратор;*/
			/*СпособОценкиМПЗ = СтруктураПараметров.СпособОценкиМПЗБух;*/
			/*СтратегияСтатусПартии = СтруктураПараметров.СтратегияСтатусПартииБух;*/
			/*ВестиПартионныйУчетПоСкладам = СтруктураПараметров.ВестиПартионныйУчетПоСкладамБух;*/
			/*// Для повышения быстродействия остатки партий получаются различными способами в зависимости от 
*/
			/*// типа документа
*/
			if(true/*СтруктураПараметров.Свойство("ЗакрытиеЗаказовПокупателей")*/)
			{
				/*ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейБух(Запрос);*/
			}
			/*Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("ПустоеКачество", Справочники.Качество.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);*/
			/*Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("Ссылка", Регистратор);*/
			if(true/*ОсновнойДокумент <> Неопределено*/)
			{
				/*Запрос.УстановитьПараметр("ОсновнойДокумент", ОсновнойДокумент);*/
			}
			/*Запрос.УстановитьПараметр("Дат", МоментКон);*/
			/*Запрос.УстановитьПараметр("Организация", Организация);*/
			return null;
		}

		public object ПолучитьДеревоПартийПереданныеБух(/*МоментКон, Регистратор, Организация, ДоговорКонтрагента, СпособОценкиМПЗ, СтратегияСтатусПартии*/)
		{
			/*ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровПереданные");*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Заказ КАК ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СчетУчета
	|
	|ПОМЕСТИТЬ ПартииТоваровПереданные
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданныеБухгалтерскийУчет.Остатки(
	|			&Дат,
	|			(Номенклатура, ХарактеристикаНоменклатуры) В (
	|					ВЫБРАТЬ
	|						СписанныеТовары.Номенклатура,
	|						СписанныеТовары.ХарактеристикаНоменклатуры
	|					ИЗ
	|						РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|					ГДЕ
	|						СписанныеТовары.Регистратор = &Ссылка)" + ?(ДоговорКонтрагента = Неопределено, "", "
	|			И ДоговорКонтрагента = &ДоговорКонтрагента") + ") КАК ПартииТоваровПереданные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СчетУчета,
	|	ЗаказПередачи
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.Количество,
	|	ПартииТоваровПереданные.Стоимость,
	|	ПартииТоваровПереданные.СчетУчета,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровПереданные КАК ПартииТоваровПереданные
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровПереданные.СчетУчета = СписанныеТовары.СчетУчетаБУ
	|						ИЛИ ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ)	
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	|						ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &ВозвратОтПереработчика
	|					ТОГДА СписанныеТовары.ЗаказПартии = ПартииТоваровПереданные.ЗаказПередачи
	|							ИЛИ ПартииТоваровПереданные.ЗаказПередачи = &ЗаказПоставщикуПустаяСсылка
	|								И СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоДокументПередачи,
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии " + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, "Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровПереданные";*/
			/*Запрос.УстановитьПараметр("Ссылка", Регистратор);*/
			/*Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);*/
			/*Запрос.УстановитьПараметр("Дат", МоментКон);*/
			/*Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);*/
			/*Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);*/
			/*Запрос.УстановитьПараметр("Организация", Организация);*/
			/*Запрос.УстановитьПараметр("ЗаказПоставщикуПустаяСсылка", Документы.ЗаказПоставщику.ПустаяСсылка());*/
			return null;
		}
		//ПолучитьДеревоПартийПереданныеБух
		// Нал

		public void ЗаполнитьЗапросПартийНаСкладахНал(/*Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ*/)
		{
			/*ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ПартииТоваровНаСкладах.ВременнаяРазницаОстаток  КАК ВременнаяРазница,
	|	ПартииТоваровНаСкладах.ПостояннаяРазницаОстаток КАК ПостояннаяРазница
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СчетУчета,
	|	Заказ,
	|	СерияНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ПартииТоваровНаСкладах.ВременнаяРазница,
	|	ПартииТоваровНаСкладах.ПостояннаяРазница,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаНУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация
	|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаНУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаНУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = &МатериалыВСоставеОСвНУ)
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";*/
		}
		// ЗаполнитьЗапросПартийНаСкладахНал()

		public void ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейНал(/*Запрос*/)
		{
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ПартииТоваровНаСкладах.ПостояннаяРазницаОстаток,
	|	ПартииТоваровНаСкладах.ВременнаяРазницаОстаток
	|
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах 
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры, Заказ) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры,
	|					СписанныеТовары.ЗаказПартии
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)) КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Заказ
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ПартииТоваровНаСкладах.ПостояннаяРазницаОстаток,
	|	ПартииТоваровНаСкладах.ВременнаяРазницаОстаток
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			СписанныеТовары.Организация = ПартииТоваровНаСкладах.Организация
	|			И СписанныеТовары.Номенклатура = ПартииТоваровНаСкладах.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры
	|			И СписанныеТовары.ЗаказПартии = ПартииТоваровНаСкладах.Заказ
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|	
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";*/
		}
		//ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейНал()

		public void ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеНал(/*Запрос, ВестиПартионныйУчетПоСкладам, СтратегияСтатусПартии, СпособОценкиМПЗ*/)
		{
			/*ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ПартииТоваровНаСкладах.ВременнаяРазницаОстаток  КАК ВременнаяРазница,
	|	ПартииТоваровНаСкладах.ПостояннаяРазницаОстаток КАК ПостояннаяРазница
	|	
	|ПОМЕСТИТЬ ПартииТоваровНаСкладах
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахНалоговыйУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		И (Номенклатура, ХарактеристикаНоменклатуры) В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Номенклатура,
	|					СписанныеТовары.ХарактеристикаНоменклатуры
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И (Склад В (
	|				ВЫБРАТЬ
	|					СписанныеТовары.Склад
	|				ИЗ
	|					РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|				ГДЕ
	|					СписанныеТовары.Регистратор = &ОсновнойДокумент) 
	|			ИЛИ Склад = &ПустойСклад)", "") + ") КАК ПартииТоваровНаСкладах
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	Качество,
	|	" + ?(ВестиПартионныйУчетПоСкладам, "Склад," , "") + "
	|	СчетУчета,
	|	Заказ,
	|	СерияНоменклатуры
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТоварыОрдера.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.Количество,
	|	ПартииТоваровНаСкладах.Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ПартииТоваровНаСкладах.ВременнаяРазница,
	|	ПартииТоваровНаСкладах.ПостояннаяРазница,
	|	ВЫБОР
	|		КОГДА СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаНУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказСписания = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровНаСкладах КАК ПартииТоваровНаСкладах
	|		ПО 
	|			ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация
	|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И (ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад ИЛИ ПартииТоваровНаСкладах.Склад = &ПустойСклад)", "") + "
	|			И (ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаНУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаНУ
	|				ИЛИ ПартииТоваровНаСкладах.СчетУчета = &МатериалыВСоставеОСвНУ)
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры
	|				ИЛИ СписанныеТовары.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.СписанныеТовары КАК СписанныеТоварыОрдера
	|			ПО (СписанныеТоварыОрдера.Регистратор = &Ссылка)
	|				И СписанныеТоварыОрдера.Номенклатура = СписанныеТовары.Номенклатура
	|				И СписанныеТоварыОрдера.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|				И (ВЫБОР
	|					КОГДА СписанныеТоварыОрдера.Регистратор ССЫЛКА Документ.РасходныйОрдерНаТовары
	|						ТОГДА СписанныеТоварыОрдера.Склад = СписанныеТовары.Склад
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ)
	|				И (СписанныеТоварыОрдера.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|					ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + ",
	|	ПартииТоваровНаСкладах.Склад
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровНаСкладах";*/
		}
		// ЗаполнитьЗапросПартийНаСкладахДляСписанияПоОрдернойСхемеНал()

		public object ПолучитьДеревоПартийНаСкладахНал(/*МоментКон, Организация, СтруктураПараметров*/)
		{
			/*Запрос = Новый Запрос;*/
			/*ОсновнойДокумент = Неопределено;*/
			/*СтруктураПараметров.Свойство("ОсновнойДокумент",ОсновнойДокумент);*/
			/*Регистратор = СтруктураПараметров.Регистратор;*/
			/*СпособОценкиМПЗ = СтруктураПараметров.СпособОценкиМПЗНал;*/
			/*СтратегияСтатусПартии = СтруктураПараметров.СтратегияСтатусПартииНал;*/
			/*ВестиПартионныйУчетПоСкладам = СтруктураПараметров.ВестиПартионныйУчетПоСкладамНал;*/
			/*// Для повышения быстродействия остатки партий получаются различными способами в зависимости от 
*/
			/*// типа документа
*/
			if(true/*СтруктураПараметров.Свойство("ЗакрытиеЗаказовПокупателей")*/)
			{
				/*ЗаполнитьЗапросПартийНаСкладахДляЗакрытияЗаказовПокупателейНал(Запрос);*/
			}
			/*Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("ПустоеКачество", Справочники.Качество.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);*/
			/*Запрос.УстановитьПараметр("ПустойСклад", Справочники.Склады.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("Ссылка", Регистратор);*/
			if(true/*ОсновнойДокумент <> Неопределено*/)
			{
				/*Запрос.УстановитьПараметр("ОсновнойДокумент", ОсновнойДокумент);*/
			}
			/*Запрос.УстановитьПараметр("МатериалыВСоставеОСвНУ",ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ);*/
			/*Запрос.УстановитьПараметр("Дат", МоментКон);*/
			/*Запрос.УстановитьПараметр("Организация", Организация);*/
			/*Запрос.УстановитьПараметр("Новый", Справочники.Качество.Новый);*/
			return null;
		}
		//ПолучитьДеревоПартийНаСкладахНал

		public object ПолучитьДеревоПартийПереданныеНал(/*МоментКон, Регистратор, Организация, ДоговорКонтрагента, СпособОценкиМПЗ, СтратегияСтатусПартии*/)
		{
			/*ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровПереданные");*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Заказ КАК ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СчетУчета,
	|	ПартииТоваровПереданные.ВременнаяРазницаОстаток  КАК ВременнаяРазница,
	|	ПартииТоваровПереданные.ПостояннаяРазницаОстаток КАК ПостояннаяРазница
	|
	|ПОМЕСТИТЬ ПартииТоваровПереданные
	|ИЗ
	|	РегистрНакопления.ПартииТоваровПереданныеНалоговыйУчет.Остатки(
	|			&Дат,
	|			Номенклатура В (
	|					ВЫБРАТЬ
	|						СписанныеТовары.Номенклатура
	|					ИЗ
	|						РегистрСведений.СписанныеТовары КАК СписанныеТовары 
	|					ГДЕ
	|						СписанныеТовары.Регистратор = &Ссылка)" + ?(ДоговорКонтрагента = Неопределено, "", "
	|			И ДоговорКонтрагента = &ДоговорКонтрагента") + ") КАК ПартииТоваровПереданные
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Номенклатура,
	|	ХарактеристикаНоменклатуры,
	|	СчетУчета,
	|	ЗаказПередачи
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.Количество,
	|	ПартииТоваровПереданные.Стоимость,
	|	ПартииТоваровПереданные.СчетУчета,
	|	ПартииТоваровПереданные.ВременнаяРазница,
	|	ПартииТоваровПереданные.ПостояннаяРазница,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаНУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|			ПартииТоваровПереданные КАК ПартииТоваровПереданные
	|		ПО 
	|			СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровПереданные.СчетУчета = СписанныеТовары.СчетУчетаНУ
	|						ИЛИ ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаНУ)	
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	|						ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &ВозвратОтПереработчика
	|					ТОГДА СписанныеТовары.ЗаказПартии = ПартииТоваровПереданные.ЗаказПередачи
	|							ИЛИ ПартииТоваровПереданные.ЗаказПередачи = &ЗаказПоставщикуПустаяСсылка
	|								И СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоДокументПередачи,
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии " + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, "Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента
	|;
	|
	|///////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ ПартииТоваровПереданные";*/
			/*Запрос.УстановитьПараметр("Ссылка", Регистратор);*/
			/*Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);*/
			/*Запрос.УстановитьПараметр("Дат", МоментКон);*/
			/*Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);*/
			/*Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);*/
			/*Запрос.УстановитьПараметр("Организация", Организация);*/
			/*Запрос.УстановитьПараметр("ЗаказПоставщикуПустаяСсылка", Документы.ЗаказПоставщику.ПустаяСсылка());*/
			return null;
		}
		//ПолучитьДеревоПартийПереданныеНал
		// Меж

		public object ПолучитьДеревоПартийНаСкладахМеж(/*МоментКон, Регистратор, Организация, СпособОценкиМПЗ, СтратегияСтатусПартии, ВестиПартионныйУчетПоСкладам, ОсновнойДокумент = Неопределено*/)
		{
			/*ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровНаСкладах");*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровНаСкладах.ДокументОприходования КАК ДокументОприходования,
	|	ПартииТоваровНаСкладах.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровНаСкладах.Номенклатура,
	|	ПартииТоваровНаСкладах.Склад,
	|	ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры,
	|	ПартииТоваровНаСкладах.СерияНоменклатуры,
	|	ПартииТоваровНаСкладах.Качество,
	|	ПартииТоваровНаСкладах.Заказ,
	|	ПартииТоваровНаСкладах.КоличествоОстаток КАК Количество,
	|	ПартииТоваровНаСкладах.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровНаСкладах.СчетУчета,
	|	ПартииТоваровНаСкладах.Организация,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоСерияНоменклатуры,
	|	ВЫБОР
	|		КОГДА ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоЗаказ,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровНаСкладах.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровНаСкладахМеждународныйУчет.Остатки(
	|		&Дат,
	|		Организация = &Организация
	|		    И Номенклатура В
	|		        (ВЫБРАТЬ
	|		            РегистрСведений.СписанныеТовары.Номенклатура
	|		        ИЗ
	|		            РегистрСведений.СписанныеТовары
	|		        ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" + ?(ВестиПартионныйУчетПоСкладам, "
	|		И Склад В 
	|		    (ВЫБРАТЬ
	|		        РегистрСведений.СписанныеТовары.Склад
	|		    ИЗ
	|		        РегистрСведений.СписанныеТовары
	|		    ГДЕ
	|		        РегистрСведений.СписанныеТовары.Регистратор = &ОсновнойДокумент)", "") + ") КАК ПартииТоваровНаСкладах
	|		ПО ПартииТоваровНаСкладах.Организация = СписанныеТовары.Организация
	|			И ПартииТоваровНаСкладах.Номенклатура = СписанныеТовары.Номенклатура
	|			И ПартииТоваровНаСкладах.ХарактеристикаНоменклатуры = СписанныеТовары.ХарактеристикаНоменклатуры
	|			И (ВЫБОР
	|				КОГДА ПартииТоваровНаСкладах.Качество = &ПустоеКачество
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ ВЫБОР
	|						КОГДА СписанныеТовары.Качество = &ПустоеКачество
	|							ТОГДА ПартииТоваровНаСкладах.Качество = &КачествоНовый
	|						ИНАЧЕ ПартииТоваровНаСкладах.Качество = СписанныеТовары.Качество
	|					КОНЕЦ
	|			КОНЕЦ)
	|			" + ?(ВестиПартионныйУчетПоСкладам, "И ПартииТоваровНаСкладах.Склад = СписанныеТовары.Склад", "") + "
	|			И ПартииТоваровНаСкладах.СчетУчета = СписанныеТовары.СчетУчетаМУ
	|			И (ВЫБОР
	|				КОГДА СписанныеТовары.СписыватьТолькоПоЗаказу = ИСТИНА
	|					ТОГДА ВЫБОР
	|							КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|								ТОГДА ВЫБОР
	|										КОГДА (НЕ СписанныеТовары.ЗаказПартии = НЕОПРЕДЕЛЕНО)
	|											ТОГДА ЛОЖЬ
	|										ИНАЧЕ ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|									КОНЕЦ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|					КОГДА ПартииТоваровНаСкладах.Заказ <> СписанныеТовары.ЗаказПартии
	|						ТОГДА ПартииТоваровНаСкладах.Заказ = &ПустойЗаказ
	|					ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|			КОНЕЦ)
	|			И (СписанныеТовары.СерияНоменклатуры = ПартииТоваровНаСкладах.СерияНоменклатуры
	|				ИЛИ ПартииТоваровНаСкладах.СерияНоменклатуры = &ПустаяСерияНоменклатуры)
	|ГДЕ
	|	СписанныеТовары.Регистратор = &ОсновнойДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоСерияНоменклатуры,
	|	ЧислоДокументОприходования,
	|	ЧислоЗаказ,
	|	ЧислоСтатусПартии" + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, " Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";*/
			/*Запрос.УстановитьПараметр("ПустаяСерияНоменклатуры", Справочники.СерииНоменклатуры.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("ПустойЗаказ", Документы.ЗаказПокупателя.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("ПустоеКачество", Справочники.Качество.ПустаяСсылка());*/
			/*Запрос.УстановитьПараметр("КачествоНовый", Справочники.Качество.Новый);*/
			/*Запрос.УстановитьПараметр("Ссылка", Регистратор);*/
			if(true/*ОсновнойДокумент <> Неопределено*/)
			{
				/*Запрос.УстановитьПараметр("ОсновнойДокумент", ОсновнойДокумент);*/
			}
			/*Запрос.УстановитьПараметр("Дат", МоментКон);*/
			/*Запрос.УстановитьПараметр("Организация", Организация);*/
			return null;
		}
		//ПолучитьДеревоПартийНаСкладахМеж

		public object ПолучитьДеревоПартийПереданныеМеж(/*МоментКон, Регистратор, Организация, ДоговорКонтрагента, СпособОценкиМПЗ, СтратегияСтатусПартии*/)
		{
			/*ПараметрыЗапроса_ДатаОприходования = ПолучитьДанныеДляЗапроса_ДокументОприходованияДата(СпособОценкиМПЗ,"ПартииТоваровПереданные");*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	СписанныеТовары.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	ПартииТоваровПереданные.ДоговорКонтрагента,
	|	ПартииТоваровПереданные.ДокументПередачи,
	|	ПартииТоваровПереданные.ДокументПередачи.Заказ КАК ЗаказПередачи,
	|	ПартииТоваровПереданные.ДокументОприходования,
	|	ПартииТоваровПереданные.ДокументОприходования.Представление КАК ДокументОприходованияПредставление,
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Выбор+"
	|	ПартииТоваровПереданные.Номенклатура,
	|	ПартииТоваровПереданные.ХарактеристикаНоменклатуры,
	|	ПартииТоваровПереданные.КоличествоОстаток КАК Количество,
	|	ПартииТоваровПереданные.СтоимостьОстаток КАК Стоимость,
	|	ПартииТоваровПереданные.СчетУчета,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ЧислоСтатусПартии,
	|	ВЫБОР
	|		КОГДА СписанныеТовары.ДокументПартии = НЕОПРЕДЕЛЕНО
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА СписанныеТовары.ДокументПартии = ПартииТоваровПереданные.ДокументОприходования
	|					ТОГДА 0
	|				ИНАЧЕ 1
	|			КОНЕЦ
	|	КОНЕЦ КАК ЧислоДокументОприходования,
	|	ВЫБОР
	|		КОГДА ПартииТоваровПереданные.ДокументПередачи = СписанныеТовары.ДокументПередачи
	|			ТОГДА 0
	|		ИНАЧЕ 1
	|	КОНЕЦ КАК ЧислоДокументПередачи
	|ИЗ
	|	РегистрСведений.СписанныеТовары КАК СписанныеТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ПартииТоваровПереданныеМеждународныйУчет.Остатки(&Дат,	
	|																					Номенклатура В
	|																					    (ВЫБРАТЬ
	|																					        РегистрСведений.СписанныеТовары.Номенклатура
	|																					    ИЗ
	|																					        РегистрСведений.СписанныеТовары
	|																					    ГДЕ
	|																					        РегистрСведений.СписанныеТовары.Регистратор = &Ссылка)" +
																						?(ДоговорКонтрагента = Неопределено, "", "
	|																					 	И ДоговорКонтрагента = &ДоговорКонтрагента") + "
	|																				) КАК ПартииТоваровПереданные
	|		ПО СписанныеТовары.Номенклатура = ПартииТоваровПереданные.Номенклатура
	|			И СписанныеТовары.ХарактеристикаНоменклатуры = ПартииТоваровПереданные.ХарактеристикаНоменклатуры
	|			И (ПартииТоваровПереданные.СчетУчета = СписанныеТовары.СчетУчетаБУ
	|						ИЛИ ПартииТоваровПереданные.СчетУчета = СписанныеТовары.ПринятыеСчетУчетаБУ)	
	|			И ВЫБОР
	|			КОГДА СписанныеТовары.КодОперацииПартииТоваров = &СписаниеПартийПереданныхВПроизводство
	|					ИЛИ СписанныеТовары.КодОперацииПартииТоваров = &ВозвратОтПереработчика
	|				ТОГДА СписанныеТовары.ЗаказПартии = ПартииТоваровПереданные.ДокументПередачи.Заказ
	|				ИНАЧЕ ИСТИНА
	|				КОНЕЦ
	|ГДЕ
	|	СписанныеТовары.Регистратор = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЧислоДокументПередачи,
	|	ЧислоДокументОприходования,
	|	ЧислоСтатусПартии " + ?(СтратегияСтатусПартии = Перечисления.СтретегииСписанияПартийТоваровПоСтатусам.СначалаПринятыеПотомСобственные, "Убыв", "") + ",
	|	"+ПараметрыЗапроса_ДатаОприходования.ДокОприходованияДата_Сортировка+"
	|	ДокументОприходования" + ?(СпособОценкиМПЗ = "ЛИФО", " Убыв","") + "
	|ИТОГИ ПО
	|	НомерСтрокиДокумента";*/
			/*Запрос.УстановитьПараметр("Ссылка", Регистратор);*/
			/*Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);*/
			/*Запрос.УстановитьПараметр("Дат", МоментКон);*/
			/*Запрос.УстановитьПараметр("СписаниеПартийПереданныхВПроизводство", Перечисления.КодыОперацийПартииТоваров.СписаниеПартийПереданныхВПроизводство);*/
			/*Запрос.УстановитьПараметр("ВозвратОтПереработчика", Перечисления.КодыОперацийПартииТоваров.ВозвратОтПереработчика);*/
			/*Запрос.УстановитьПараметр("Организация", Организация);*/
			return null;
		}
		//ПолучитьДеревоПартийПереданныеБух
		// Упр
		// Остатки партий на складах по упр.учету
		//
		// Параметры:
		//	СтруктураПараметров
		//	МоментКон
		//

		public void ПолучитьОстаткиПартийНаСкладахУпр(/*СтруктураПараметров, МоментКон*/)
		{
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете*/)
			{
				/*СтруктураПараметров.Вставить("ДеревоПартииТоваровНаСкладахУпр", 
			ПолучитьДеревоПартийНаСкладахУпр (МоментКон,СтруктураПараметров));*/
				/*СтруктураИзмерений = Новый Структура;*/
				/*ТаблицаОстатковПартий = Новый ТаблицаЗначений;*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Количество");*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");*/
				/*СтруктураПараметров.Вставить("ПартииТоваровНаСкладахУпр" + "СтруктураИзмерений", СтруктураИзмерений);*/
				/*СтруктураПараметров.Вставить("ПартииТоваровНаСкладахУпр" + "ТаблицаОстатков", ТаблицаОстатковПартий);*/
			}
		}
		// ПолучитьОстаткиПартийНаСкладахУпр()

		public void ПолучитьОстаткиПартийПереданныхУпр(/*СтруктураПараметров, МоментКон, ДоговорКонтрагента*/)
		{
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВУправленческомУчете*/)
			{
				/*СтруктураПараметров.Вставить("ДеревоПартииТоваровПереданныеУпр", ПолучитьДеревоПартийПереданныеУпр(МоментКон, СтруктураПараметров.Регистратор, ДоговорКонтрагента, СтруктураПараметров.СпособОценкиМПЗУпр, СтруктураПараметров.СтратегияСтатусПартииУпр));*/
				/*СтруктураИзмерений = Новый Структура;*/
				/*ТаблицаОстатковПартий = Новый ТаблицаЗначений;*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Количество");*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");*/
				/*СтруктураПараметров.Вставить("ПартииТоваровПереданныеУпр" + "СтруктураИзмерений", СтруктураИзмерений);*/
				/*СтруктураПараметров.Вставить("ПартииТоваровПереданныеУпр" + "ТаблицаОстатков", ТаблицаОстатковПартий);*/
			}
		}
		// ПолучитьОстаткиПартийПереданныхУпр()
		// Регл
		// Остатки партий на складах по регл.учету
		//
		// Параметры:
		//	Нет.
		//

		public void ПолучитьОстаткиПартийНаСкладахРегл(/*СтруктураПараметров, МоментКон, Организация*/)
		{
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете*/)
			{
				/*СтруктураПараметров.Вставить("ДеревоПартииТоваровНаСкладахБух",
			ПолучитьДеревоПартийНаСкладахБух (МоментКон, Организация, СтруктураПараметров));*/
				/*СтруктураИзмерений = Новый Структура;*/
				/*ТаблицаОстатковПартий = Новый ТаблицаЗначений;*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Количество");*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");*/
				/*СтруктураПараметров.Вставить("ПартииТоваровНаСкладахБух" + "СтруктураИзмерений", СтруктураИзмерений);*/
				/*СтруктураПараметров.Вставить("ПартииТоваровНаСкладахБух" + "ТаблицаОстатков", ТаблицаОстатковПартий);*/
			}
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете*/)
			{
				/*СтруктураПараметров.Вставить("ДеревоПартииТоваровНаСкладахНал", 
			ПолучитьДеревоПартийНаСкладахНал( МоментКон, Организация, СтруктураПараметров));*/
				/*СтруктураИзмерений = Новый Структура;*/
				/*ТаблицаОстатковПартий = Новый ТаблицаЗначений;*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Количество");*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("ПостояннаяРазница");*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("ВременнаяРазница");*/
				/*СтруктураПараметров.Вставить("ПартииТоваровНаСкладахНал" + "СтруктураИзмерений", СтруктураИзмерений);*/
				/*СтруктураПараметров.Вставить("ПартииТоваровНаСкладахНал" + "ТаблицаОстатков", ТаблицаОстатковПартий);*/
			}
		}
		// ПолучитьОстаткиПартийНаСкладахРегл()
		// Остатки партий переданных по регл.учету
		//
		// Параметры:
		//	Нет.
		//

		public void ПолучитьОстаткиПартийПереданныхРегл(/*СтруктураПараметров, МоментКон, Организация, ДоговорКонтрагента*/)
		{
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВБухгалтерскомУчете*/)
			{
				/*СтруктураПараметров.Вставить("ДеревоПартииТоваровПереданныеБух", ПолучитьДеревоПартийПереданныеБух(МоментКон, СтруктураПараметров.Регистратор, Организация, ДоговорКонтрагента, СтруктураПараметров.СпособОценкиМПЗБух, СтруктураПараметров.СтратегияСтатусПартииБух));*/
				/*СтруктураИзмерений = Новый Структура;*/
				/*ТаблицаОстатковПартий = Новый ТаблицаЗначений;*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Количество");*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");*/
				/*СтруктураПараметров.Вставить("ПартииТоваровПереданныеБух" + "СтруктураИзмерений", СтруктураИзмерений);*/
				/*СтруктураПараметров.Вставить("ПартииТоваровПереданныеБух" + "ТаблицаОстатков", ТаблицаОстатковПартий);*/
			}
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете*/)
			{
				/*СтруктураПараметров.Вставить("ДеревоПартииТоваровПереданныеНал", ПолучитьДеревоПартийПереданныеНал(МоментКон, СтруктураПараметров.Регистратор, Организация, ДоговорКонтрагента, СтруктураПараметров.СпособОценкиМПЗНал, СтруктураПараметров.СтратегияСтатусПартииНал));*/
				/*СтруктураИзмерений = Новый Структура;*/
				/*ТаблицаОстатковПартий = Новый ТаблицаЗначений;*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Количество");*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("ПостояннаяРазница");*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("ВременнаяРазница");*/
				/*СтруктураПараметров.Вставить("ПартииТоваровПереданныеНал" + "СтруктураИзмерений", СтруктураИзмерений);*/
				/*СтруктураПараметров.Вставить("ПартииТоваровПереданныеНал" + "ТаблицаОстатков", ТаблицаОстатковПартий);*/
			}
		}
		// ПолучитьОстаткиПартийПереданныхРегл()
		// Меж
		// Остатки партий на складах по меж.учету
		//
		// Параметры:
		//	Нет.
		//

		public void ПолучитьОстаткиПартийНаСкладахМеж(/*СтруктураПараметров, МоментКон,  Организация*/)
		{
			/*// Таблицы остатков партий
*/
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете*/)
			{
				/*ОсновнойДокумент = Неопределено;*/
				/*СтруктураПараметров.Свойство("ОсновнойДокумент",ОсновнойДокумент);*/
				/*СтруктураПараметров.Вставить("ДеревоПартииТоваровНаСкладахМеж", 
			ПолучитьДеревоПартийНаСкладахМеж (МоментКон, 
											   СтруктураПараметров.Регистратор,
											   Организация,
											   СтруктураПараметров.СпособОценкиМПЗМеж,
											   СтруктураПараметров.СтратегияСтатусПартииМеж,
											   СтруктураПараметров.ВестиПартионныйУчетПоСкладамМеж,
											   ОсновнойДокумент));*/
				/*СтруктураИзмерений = Новый Структура;*/
				/*ТаблицаОстатковПартий = Новый ТаблицаЗначений;*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Количество");*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");*/
				/*СтруктураПараметров.Вставить("ПартииТоваровНаСкладахМеж" + "СтруктураИзмерений", СтруктураИзмерений);*/
				/*СтруктураПараметров.Вставить("ПартииТоваровНаСкладахМеж" + "ТаблицаОстатков", ТаблицаОстатковПартий);*/
			}
		}
		// ПолучитьОстаткиПартийНаСкладахМеж()
		// Остатки партий переданных по меж.учету
		//
		// Параметры:
		//	Нет.
		//

		public void ПолучитьОстаткиПартийПереданныхМеж(/*СтруктураПараметров, МоментКон, Организация, ДоговорКонтрагента*/)
		{
			/*// Таблицы остатков партий
*/
			if(true/*СтруктураПараметров.ЕстьСтрокиОтражатьВМеждународномУчете*/)
			{
				/*СтруктураПараметров.Вставить ("ДеревоПартииТоваровПереданныеМеж", 
			ПолучитьДеревоПартийПереданныеМеж (МоментКон,
											   СтруктураПараметров.Регистратор,
											   Организация,
											   ДоговорКонтрагента,
											   СтруктураПараметров.СпособОценкиМПЗМеж,
											   СтруктураПараметров.СтратегияСтатусПартииМеж));*/
				/*СтруктураИзмерений = Новый Структура;*/
				/*ТаблицаОстатковПартий = Новый ТаблицаЗначений;*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Количество");*/
				/*ТаблицаОстатковПартий.Колонки.Добавить("Стоимость");*/
				/*СтруктураПараметров.Вставить("ПартииТоваровПереданныеМеж" + "СтруктураИзмерений", СтруктураИзмерений);*/
				/*СтруктураПараметров.Вставить("ПартииТоваровПереданныеМеж" + "ТаблицаОстатков", ТаблицаОстатковПартий);*/
			}
		}
		// ПолучитьОстаткиПартийПереданныхМеж()
		// Получение остатков по упр. учету
		//
		// Параметры:
		//	Нет.
		//

		public void ПолучитьОстаткиУпр(/*СтруктураПараметров, ТаблицаСписания, МоментКон*/)
		{
			/*// По партионному учету остатки берутся из двух регистров
*/
			if(true/*СтруктураПараметров.ЕстьНаСкладах*/)
			{
				/*ПолучитьОстаткиПартийНаСкладахУпр(СтруктураПараметров, МоментКон);*/
			}
			if(true/*СтруктураПараметров.ЕстьПереданные*/)
			{
				/*ПолучитьОстаткиПартийПереданныхУпр(СтруктураПараметров, МоментКон,ТаблицаСписания[0].ДоговорКонтрагента);*/
			}
		}
		// ПолучитьОстаткиУпр()
		// Получение остатков по регл. учету
		//
		// Параметры:
		//	Нет.
		//

		public void ПолучитьОстаткиРегл(/*СтруктураПараметров, ТаблицаСписания, МоментКон, Организация*/)
		{
			/*//// По партионному учету остатки берутся из двух регистров
*/
			if(true/*СтруктураПараметров.ЕстьНаСкладах*/)
			{
				/*ПолучитьОстаткиПартийНаСкладахРегл(СтруктураПараметров, МоментКон, Организация);*/
			}
			if(true/*СтруктураПараметров.ЕстьПереданные*/)
			{
				/*ПолучитьОстаткиПартийПереданныхРегл(СтруктураПараметров, МоментКон, Организация, ТаблицаСписания[0].ДоговорКонтрагента);*/
			}
		}
		// ПолучитьОстаткиРегл()
		// Получение остатков по меж. учету
		//
		// Параметры:
		//	Нет.
		//

		public void ПолучитьОстаткиМеж(/*СтруктураПараметров, ТаблицаСписания, МоментКон, Организация*/)
		{
			/*//// По партионному учету остатки берутся из двух регистров
*/
			if(true/*СтруктураПараметров.ЕстьНаСкладах*/)
			{
				/*ПолучитьОстаткиПартийНаСкладахМеж(СтруктураПараметров, МоментКон, Организация);*/
			}
			if(true/*СтруктураПараметров.ЕстьПереданные*/)
			{
				/*ПолучитьОстаткиПартийПереданныхМеж(СтруктураПараметров, МоментКон, Организация, ТаблицаСписания[0].ДоговорКонтрагента);*/
			}
		}
		// ПолучитьОстаткиРегл()

		public object ПолучитьСтрокуОстатковПартий(/*СтрокаПартииРаспределения, СтруктураИзмерений, ТаблицаОстатковПартий*/)
		{
			/*ЗаполнитьЗначенияСвойств(СтруктураИзмерений, СтрокаПартииРаспределения);*/
			/*МассивСтрок = ТаблицаОстатковПартий.НайтиСтроки(СтруктураИзмерений);*/
			if(true/*МассивСтрок.Количество() = 0*/)
			{
				/*СтрокаТаблицы = ТаблицаОстатковПартий.Добавить();*/
				/*ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СтрокаПартииРаспределения);*/
			}
			return null;
		}
		// ПОЛУЧЕНИЕ ОСТАТКОВ ИЗ РЕГИСТРОВ ПАРТИЙ
		////////////////////////////////////////////////////////////////////////////////

		public void ВыполнитьВосстановлениеНаСервере(/*ДатаКонцаОбработки,
										   Организация,
										   ОтражатьВУправленческомУчете,
										   ОтражатьВБухгалтерскомУчете,
										   Останавливаться,
										   МаксимальноеКоличествоДокументовВТранзакции,
										   МаксимальноеКоличествоСтрокВТранзакции,
										   ФормироватьПроводки*/)
		{
			/*ЗаполнениеДокументов.ВыполнитьВосстановление (ДатаКонцаОбработки,
						Организация,
						ОтражатьВУправленческомУчете,
						ОтражатьВБухгалтерскомУчете,
						Останавливаться,
						МаксимальноеКоличествоДокументовВТранзакции,
						МаксимальноеКоличествоСтрокВТранзакции,						
						ФормироватьПроводки);*/
		}
		//ВыполнитьВосстановлениеНаСервере

		public void ЗаписатьДокументНаСервере(/*ДокументСсылка, РежимЗаписи*/)
		{
			/*Попытка
	
		ДокументСсылка.ПолучитьОбъект().Записать(РежимЗаписи);*/
			/*Исключение
	
	КонецПопытки;*/
		}
		//ЗаписатьДокументНаСервере
		////////////////////////////////////////////////////////////////////////////////
		// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ, ФОРМИРУЮЩИЕ СТРУКТУРУ ДАННЫХ ДЛЯ УПР. УЧЕТА

		public void ОпределитьСоставКолонокТаблицаСписанныхПартийОбщихДляВсехВидовУчета(/*СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок*/)
		{
			/*СтруктураКолонок.Вставить("Организация");*/
			/*СтруктураКолонок.Вставить("Номенклатура");*/
			/*СтруктураКолонок.Вставить("Склад");*/
			/*СтруктураКолонок.Вставить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));*/
			/*СтруктураКолонок.Вставить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));*/
			/*СтруктураКолонок.Вставить("КодОперацииПартииТоваров");*/
			/*СтруктураКолонок.Вставить("КодОперации");*/
			/*// из движений
*/
			/*СтруктураКолонок.Вставить("СписаноИз");*/
			/*СтруктураКолонок.Вставить("ТипЗаписи");*/
			/*СтруктураКолонок.Вставить("ВидОперации");*/
			/*СтруктураКолонок.Вставить("СерияНоменклатуры");*/
			/*СтруктураКолонок.Вставить("ХарактеристикаНоменклатуры");*/
			/*СтруктураКолонок.Вставить("ДоговорКонтрагента");*/
			/*СтруктураКолонок.Вставить("СтавкаНДС");*/
			/*СтруктураКолонок.Вставить("НоменклатурнаяГруппа");*/
			/*СтруктураКолонок.Вставить("ИзменитьСклад");*/
			/*СтруктураКолонок.Вставить("СкладПолучатель");*/
			/*СтруктураКолонок.Вставить("СтоимостьПоступление");*/
			/*СтруктураКолонок.Вставить("КоличествоПоступление");*/
			/*СтруктураКолонок.Вставить("НоменклатураНовая");*/
			/*СтруктураКолонок.Вставить("ДокументОприходованияНовый");*/
			/*СтруктураКолонок.Вставить("ХарактеристикаНоменклатурыНовая");*/
			/*СтруктураКолонок.Вставить("СерияНоменклатурыНовая");*/
			/*СтруктураКолонок.Вставить("КачествоНовое");*/
			/*СтруктураКолонок.Вставить("ПодразделениеОрганизации");*/
			/*СтруктураКолонок.Вставить("СтатьяЗатрат");*/
			/*СтруктураКолонок.Вставить("ДокументОприходования");*/
			/*СтруктураКолонок.Вставить("ФизЛицо");*/
			/*СтруктураКолонок.Вставить("ОсновноеСредство");*/
			/*СтруктураКолонок.Вставить("ДокументПередачи");*/
			/*СтруктураКолонок.Вставить("НазначениеИспользования");*/
			/*СтруктураКолонок.Вставить("Регистратор");*/
			/*СтруктураКолонок.Вставить("НеСписывать");*/
			/*СтруктураКолонок.Вставить("Продукция");*/
			/*СтруктураКолонок.Вставить("ЗаказСписания");*/
			/*СтруктураКолонок.Вставить("ИзменитьХарактеристику");*/
			/*СтруктураКолонок.Вставить("ИзменитьСерию");*/
			/*СтруктураКолонок.Вставить("ВестиПартионныйУчетПоСериям");*/
			/*СтруктураКолонок.Вставить("СуммаЗадолженностиБУ");*/
			/*СтруктураКолонок.Вставить("СуммаНДС");*/
			/*СтруктураКолонок.Вставить("НДСВключенВСтоимость");*/
			/*СтруктураКолонок.Вставить("СуммаБезНДС");*/
			/*СтруктураКолонок.Вставить("СчетУчетаНДС");*/
			/*СтруктураКолонок.Вставить("КорВалютнаяСуммаЗадолженностиБУ");*/
			/*СтруктураКолонок.Вставить("НомерСтрокиДокумента");*/
		}

		public void ОпределитьСоставКолонокТаблицаСписанныхПартийУпр(/*СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок*/)
		{
			/*ОпределитьСоставКолонокТаблицаСписанныхПартийОбщихДляВсехВидовУчета(СтруктураПараметров, СписокИспользуемыхОпераций, СтруктураКолонок);*/
			/*КодыОпераций = СтруктураПараметров.КодыОпераций;*/
			/*// Колонки базовые
*/
			/*СтруктураКолонок.Вставить("ВедениеУчетаПоПроектам");*/
			/*СтруктураКолонок.Вставить("НоменклатураКомплекта");*/
			/*СтруктураКолонок.Вставить("ХарактеристикаКомплекта");*/
			/*СтруктураКолонок.Вставить("КоличествоКомплекта");*/
			/*СтруктураКолонок.Вставить("Подразделение");*/
			/*СтруктураКолонок.Вставить("Проект");*/
			/*СтруктураКолонок.Вставить("ОбъектСтроительства");*/
			/*СтруктураКолонок.Вставить("ВалютаДокумента");*/
			/*СтруктураКолонок.Вставить("КурсДокумента");*/
			/*СтруктураКолонок.Вставить("КратностьДокумента");*/
			/*СтруктураКолонок.Вставить("СтатусПартииНовый");*/
			/*СтруктураКолонок.Вставить("СтатусПередачи");*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРИХОДНЫЕ ДВИЖЕНИЯ

		public void ВыполнитьПриходПоРегистрамПартий(/*ТаблицаСтаройРегистрацииВПоследовательности, СтруктураШапкиДокумента, Отказ=Ложь, ТаблицаПоТоварам=Неопределено, ТаблицаПоТаре=Неопределено, ТаблицаПоОборудованию_ТаблицаПоКомплектам=Неопределено, ЗНАЧ Упр=Ложь, ЗНАЧ Бух=Ложь, ЗНАЧ Нал=Ложь*/)
		{
			if(true/*глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат")
	  И глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= СтруктураШапкиДокумента.Дата*/)
			{
				if(true/*СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН*/)
				{
					/*Упр = Ложь;*/
					/*Бух = Ложь;*/
				}
			}
			if(true/*Отказ ИЛИ НЕ (Упр ИЛИ Бух ИЛИ Нал)*/)
			{
			}
			/*//сохранение таблиц в копии
*/
			if(true/*ТаблицаПоТоварам<>неопределено*/)
			{
				/*КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();*/
			}
			if(true/*ТаблицаПоТаре<>неопределено*/)
			{
				/*КопияТаблицаПоТаре	= ТаблицаПоТаре.Скопировать();*/
			}
			if(true/*ТаблицаПоОборудованию_ТаблицаПоКомплектам<>неопределено*/)
			{
				/*КопияТаблицаПоОборудованию_ТаблицаПоКомплектам 	= ТаблицаПоОборудованию_ТаблицаПоКомплектам.Скопировать();*/
			}
			/*ТипРегистратора = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);*/
			if(true/*ТипРегистратора = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") 
		ИЛИ ТипРегистратора = Тип("ДокументСсылка.КорректировкаПоступления")*/)
			{
				/*ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, ТаблицаПоОборудованию_ТаблицаПоКомплектам, Упр, Бух, Нал, ТаблицаСтаройРегистрацииВПоследовательности);*/
			}
		}

		public void ВыполнитьПриходПоРегистрамПартий_ВводНачальныхОстатковУСН(/*СтруктураШапкиДокумента, ТаблицаПартийНаСкладах, ТаблицаПартийПереданных, ТаблицаСтаройРегистрацииВПоследовательности*/)
		{
			if(true/*ТаблицаПартийНаСкладах.Количество()+ТаблицаПартийПереданных.Количество()=0*/)
			{
			}
			/*Движения = Новый Структура();*/
			/*//ПО ПАРТИОННОМУ УЧЕТУ УСН
*/
			if(true/*ТаблицаПартийНаСкладах.Количество()>0*/)
			{
				/*Движения.Вставить("ПартииТоваровНаСкладахНалоговыйУчет",РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет.СоздатьНаборЗаписей());*/
				/*Движения.ПартииТоваровНаСкладахНалоговыйУчет.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);*/
				/*ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ПартииТоваровНаСкладахНалоговыйУчет, новый Структура("ТаблицаПартий",ТаблицаПартийНаСкладах));*/
				/*ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ПартииТоваровНаСкладахНалоговыйУчет, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, СтруктураШапкиДокумента.Дата);*/
			}
			if(true/*ТаблицаПартийПереданных.Количество()>0*/)
			{
				/*Движения.Вставить("ПартииТоваровПереданныеНалоговыйУчет",РегистрыНакопления.ПартииТоваровПереданныеНалоговыйУчет.СоздатьНаборЗаписей());*/
				/*Движения.ПартииТоваровПереданныеНалоговыйУчет.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);*/
				/*ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения.ПартииТоваровПереданныеНалоговыйУчет, новый Структура("ТаблицаПартий",ТаблицаПартийПереданных));*/
				/*ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения.ПартииТоваровПереданныеНалоговыйУчет, ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, СтруктураШапкиДокумента.Дата);*/
			}
			/*ЗарегистрироватьДокументВПоследовательностяхПартионногоУчетаНаСервере(
		СтруктураШапкиДокумента.Ссылка, 
		СтруктураШапкиДокумента.Дата, 
		СтруктураШапкиДокумента.Организация, 
		ложь, 
		ложь, 
		истина,
		ТаблицаСтаройРегистрацииВПоследовательности);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// УНИВЕРСАЛЬНЫЕ ПРИХОДНЫЕ ДВИЖЕНИЯ

		public object ОпределитьКодОперацииПартийТоваров(/*ТипДокумента, ВидОперации = Неопределено, ВидДоговора = Неопределено*/)
		{
			if(true/*ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")*/)
			{
				if(true/*ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия*/)
				{
					if(true/*ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом*/)
					{
					}
				}
			}
			return null;
		}
		// Функция создает таблицу для формирования сторнирующих движений по рег. Партии товаров на складах, в случае поступления по ордеру
		//     СтруктураПараметров - дополнительные параметры, предусмотрены если ПриходныйОрдер указывается только в шапке (для документа ВозвратПереданныхТоваров)

		public object СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(/*ТабТовары, СтруктураПараметров*/)
		{
			/*СтруктураПараметров.Свойство("ПриходныйОрдер",мПриходныйОрдер);*/
			/*СтруктураПараметров.Свойство("Склад",мСклад);*/
			if(true/*мПриходныйОрдер<>неопределено*/)
			{
				if(true/*мПриходныйОрдер.БезПраваПродажи*/)
				{
					/*ТаблицаПартииПоОрдерам = ТабТовары.СкопироватьКолонки();*/
					/*ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");*/
				}
			}
			/*ТаблицаПартииПоОрдерам = ТабТовары.Скопировать();*/
			/*ТаблицаПартииПоОрдерам.Колонки[СтруктураПараметров.ИмяРеквизитаКоличество].Имя = "КоличествоСтарое";*/
			/*ТаблицаПартииПоОрдерам.Колонки.Добавить("Количество");*/
			/*//у старой колонки может быть запрет на указание отрицательных чисел
*/
			/*ТаблицаПартииПоОрдерам.Колонки.Добавить("ДокументОприходования");*/
			if(true/*ТаблицаПартииПоОрдерам.Колонки.Найти("Склад") = неопределено*/)
			{
				/*ТаблицаПартииПоОрдерам.Колонки.Добавить("Склад");*/
			}
			/*мЕстьСерияНоменклатуры = ТаблицаПартииПоОрдерам.Колонки.Найти("СерияНоменклатуры") <> неопределено;*/
			/*Сч = 0;*/
			while(true/*Сч < ТаблицаПартииПоОрдерам.Количество()*/)
			{
				/*СтрокаТаблицы = ТаблицаПартииПоОрдерам.Получить(Сч);*/
				if(true/*мПриходныйОрдер = неопределено*/)
				{
					if(true/*СтрокаТаблицы.БезПраваПродажи = Истина*/)
					{
						/*ТаблицаПартииПоОрдерам.Удалить(СтрокаТаблицы);*/
						/*Продолжить;*/
					}
				}
				/*// Документ оприходования - приходный ордрер
*/
				/*СтрокаТаблицы.ДокументОприходования = ?(мПриходныйОрдер=неопределено,СтрокаТаблицы.ДокументПолучения,мПриходныйОрдер);*/
				/*СтрокаТаблицы.Склад                 = ?(мСклад=неопределено,СтрокаТаблицы.ДокументПолучения.Склад,мСклад);*/
				/*СтрокаТаблицы.Количество            = - СтрокаТаблицы.КоличествоСтарое;*/
				if(true/*НЕ ТаблицаПартииПоОрдерам.Колонки.Найти("Заказ") = Неопределено*/)
				{
					/*СтрокаТаблицы.Заказ                	= Неопределено;*/
				}
				if(true/*мЕстьСерияНоменклатуры*/)
				{
					/*// Если партионный учет по сериям не ведется, то надо очистить серию
*/
					if(true/*НЕ ТаблицаПартииПоОрдерам.Колонки.Найти("ВестиПартионныйУчетПоСериям") = Неопределено*/)
					{
						/*ВестиПартионныйУчетПоСериям = СтрокаТаблицы.ВестиПартионныйУчетПоСериям;*/
					}
					if(true/*НЕ ВестиПартионныйУчетПоСериям*/)
					{
						/*СтрокаТаблицы.СерияНоменклатуры = Неопределено;*/
					}
				}
				/*Сч = Сч + 1;*/
			}
			return null;
		}
		// СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоТоварам)
		// По виду договора определяет статус партии прихода товаров (не возвратная тара!)
		//
		// Параметры:
		//  СтруктураШапкиДокумента   - структура, содержащая рексвизиты шапки документа и результаты запроса по шапке
		//
		// Возвращаемое значение:
		//  Значение перечисления "Статусы партии товаров".
		//

		public object ОпределитьСтатусПартииПриходаПоВидуДоговора(/*СтруктураШапкиДокумента*/)
		{
			if(true/*СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом ИЛИ
		СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером*/)
			{
				/*Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;*/
			}
			return null;
		}
		// ОпределитьСтатусПартииПриходаПоВидуДоговора()
		// По виду операции определяет статус партии прихода товаров (не возвратная тара!)
		//
		// Параметры:
		//  Нет.
		//
		// Возвращаемое значение:
		//  Значение перечисления "Статусы партии товаров".
		//

		public object ОпределитьСтатусПартииПриходаУпр(/*СтруктураШапкиДокумента*/)
		{
			/*Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка();*/
			/*ТипДокумента = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);*/
			if(true/*ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")*/)
			{
				if(true/*СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
		 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства 
		 ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование*/)
				{
					if(true/*СтруктураШапкиДокумента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом*/)
					{
						/*Статус = Перечисления.СтатусыПартийТоваров.НаКомиссию;*/
					}
				}
			}
			if(true/*Статус = Перечисления.СтатусыПартийТоваров.ПустаяСсылка()*/)
			{
				/*ОбщегоНазначения.Сообщение("Для документа """ +
		СтруктураШапкиДокумента.Ссылка + """ не удалось определить статус партии товаров!", СтатусСообщения.Важное);*/
			}
			return null;
		}
		// ОпределитьСтатусПартииПриходаУпр()

		public void ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(/*ТаблицаТЧ, ТаблицаДвижений, СтатусПартии, ВестиПартионныйУчетПоСкладам, СпособОценкиМПЗ, СтруктураШапкиДокумента, ВидУчета,флФормированиеРазниц=ложь*/)
		{
			/*ТипДокумента =  ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);*/
			/*масСтрокиДвиженийКУдалению = новый Массив;*/
			if(true/*масСтрокиДвиженийКУдалению.Количество()>0*/)
			{
			}
		}
		// ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе()

		public void РассчитатьСуммыДляПартионныхРегистров(/*СтруктураШапкиДокумента, СтруктТаблицДокумента,ТаблицыДанныхДокумента, ВидУчета, ТипДокумента*/)
		{
			if(true/*ВидУчета = "УправленческийУчет"*/)
			{
				if(true/*СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам")*/)
				{
					if(true/*ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства")
				ИЛИ ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуОС")*/)
					{
					}
				}
				/*//Если СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам") Тогда
*/
				if(true/*СтруктТаблицДокумента.Свойство("ТаблицаПоТаре")*/)
				{
					if(true/*ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров")*/)
					{
					}
				}
				/*//Если СтруктТаблицДокумента.Свойство("ТаблицаПоТаре") ТОгда
*/
			}
		}

		public void ПодготовитьТаблицыДокументаПриВозврате(/*СтруктураШапкиДокумента,СтруктТаблицДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоКомплектам, ВидУчета*/)
		{
			if(true/*ТаблицаПоТаре<>неопределено*/)
			{
				/*СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",ТаблицаПоТаре.Скопировать());*/
				/*СтруктТаблицДокумента.ТаблицаПоТаре.Колонки.КоличествоДок.Имя = "Количество";*/
			}
			if(true/*ВидУчета = "Упр"*/)
			{
				/*СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",ТаблицаПоКомплектам.Скопировать());*/
				/*СтруктТаблицДокумента.ТаблицаПоТаре.Колонки.Удалить("Стоимость");*/
				/*СтруктТаблицДокумента.ТаблицаПоТаре.Колонки.СуммаБезНДС.Имя = "Стоимость";*/
				/*СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.ПлюсСебестоимость.Имя = "Стоимость";*/
				/*СтруктТаблицДокумента.ТаблицаПоТоварам.Колонки.КоличествоДок.Имя = "Количество";*/
			}
		}

		public void ПодготовитьТаблицыДокументаВозвратИзЭксплуатации(/*СтруктураШапкиДокумента, СтруктТаблицДокумента*/)
		{
		}
		// ПодготовитьТаблицыДокументаВозвратИзЭксплуатации()

		public void ВыполнитьПриходПоРегистрамПартийПоВидуУчета(/*СтруктураШапкиДокумента, УчетнаяПолитика, КодОперацииПартииТоваров, Отказ, СтруктТаблицДокумента, Движения, ВидУчета*/)
		{
			/*ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);*/
			/*СуффиксРегистра = ?(ВидУчета = "УправленческийУчет","",ВидУчета);*/
			/*Движения.Вставить("ПартииТоваровНаСкладах"+СуффиксРегистра,РегистрыНакопления["ПартииТоваровНаСкладах" + СуффиксРегистра].СоздатьНаборЗаписей());*/
			/*Движения["ПартииТоваровНаСкладах"+СуффиксРегистра].Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);*/
			/*ТаблицыДанныхДокумента = ОбщегоНазначения.ЗагрузитьТаблицыДокументаВСтруктуру(Движения["ПартииТоваровНаСкладах"+СуффиксРегистра], СтруктТаблицДокумента);*/
			if(true/*ВидУчета = "УправленческийУчет"*/)
			{
				/*ВестиПартионныйУчетПоСкладам = глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам;*/
				/*ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Организация", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации));*/
			}
			/*РассчитатьСуммыДляПартионныхРегистров(СтруктураШапкиДокумента, СтруктТаблицДокумента,ТаблицыДанныхДокумента, ВидУчета, ТипДокумента);*/
			/*СписокТаблицДокумента = "";*/
			/*// Заполнить недостающие поля.
*/
			if(true/*СтруктТаблицДокумента.Свойство("ТаблицаПоТоварам")*/)
			{
				/*СписокТаблицДокумента = СписокТаблицДокумента + ?(СписокТаблицДокумента = "","",", ") + "ТаблицаПоТоварам";*/
				/*ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(СтруктТаблицДокумента.ТаблицаПоТоварам, 
														ТаблицыДанныхДокумента["ТаблицаПоТоварам"], 
														ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента), 
														ВестиПартионныйУчетПоСкладам, 
														УчетнаяПолитика[ВидУчета].СпособОценкиМПЗ, 
														СтруктураШапкиДокумента, 
														ВидУчета);*/
			}
			if(true/*СтруктТаблицДокумента.Свойство("ТаблицаПоОборудованию")*/)
			{
				/*СписокТаблицДокумента = СписокТаблицДокумента + ?(СписокТаблицДокумента = "","",", ") + "ТаблицаПоОборудованию";*/
				/*ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(СтруктТаблицДокумента.ТаблицаПоОборудованию, 
														ТаблицыДанныхДокумента["ТаблицаПоОборудованию"], 
														Перечисления.СтатусыПартийТоваров.Оборудование, 
														ВестиПартионныйУчетПоСкладам, 
														УчетнаяПолитика[ВидУчета].СпособОценкиМПЗ, 
														СтруктураШапкиДокумента, 
														ВидУчета);*/
			}
			if(true/*СтруктТаблицДокумента.Свойство("ТаблицаПоТаре")*/)
			{
				/*СписокТаблицДокумента = СписокТаблицДокумента + ?(СписокТаблицДокумента = "","",", ") + "ТаблицаПоТаре";*/
				/*ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(СтруктТаблицДокумента.ТаблицаПоТаре, 
														ТаблицыДанныхДокумента["ТаблицаПоТаре"], 
														?(ТипДокумента=Тип("ДокументСсылка.ПриходныйОрдерНаТовары"),Перечисления.СтатусыПартийТоваров.ПоОрдеру,Перечисления.СтатусыПартийТоваров.ВозвратнаяТара), 
														ВестиПартионныйУчетПоСкладам, 
														УчетнаяПолитика[ВидУчета].СпособОценкиМПЗ, 
														СтруктураШапкиДокумента, 
														ВидУчета);*/
			}
			if(true/*ТипДокумента <> Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства")*/)
			{
				/*//Документ ОприходованиеМатериаловИзПроизводства содержит код операции в табличной части											
*/
				/*ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации", КодОперацииПартииТоваров, СписокТаблицДокумента);*/
			}
			if(true/*ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров")*/)
			{
				/*//для данных документов качество для товаров указывается в табличной части, его не требуется изменять.
*/
				/*//Необходимо заполнить только качество для тары, если она есть
*/
				if(true/*СтруктТаблицДокумента.Свойство("ТаблицаПоТаре")*/)
				{
					/*ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, "ТаблицаПоТаре");*/
				}
			}
			/*// Заполнить таблицу для сторнирующих движений по партиям товаров на складах для поступления по ордеру
*/
			if(true/*СтруктураШапкиДокумента.Свойство("ВидПоступления")
	  И (СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру)
	  И (ВидУчета = "УправленческийУчет")*/)
			{
				/*СписокТаблицДокументаСторно = "";*/
				if(true/*НЕ ВестиПартионныйУчетПоСкладам*/)
				{
					/*ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Склад", Неопределено, СписокТаблицДокументаСторно);*/
				}
				/*ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "СтатусПартии", Перечисления.СтатусыПартийТоваров.ПоОрдеру, СписокТаблицДокументаСторно);*/
				/*ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Стоимость",    0, СписокТаблицДокументаСторно);*/
				/*ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "КодОперации",  Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру, СписокТаблицДокументаСторно);*/
				/*ОбщегоНазначения.УстановитьЗначениеВТаблицыДокумента(ТаблицыДанныхДокумента, "Качество", Справочники.Качество.Новый, СписокТаблицДокументаСторно);*/
			}
			/*ОбщегоНазначения.ЗаписатьТаблицыДокументаВРегистр(Движения["ПартииТоваровНаСкладах"+СуффиксРегистра], ВидДвиженияНакопления.Приход, ТаблицыДанныхДокумента, СтруктураШапкиДокумента.Дата);*/
		}

		public void ПодготовитьТаблицуТоваров_ГТДИмпорт(/*ТаблицаДвижений, ВидУчета*/)
		{
			if(true/*ТаблицаДвижений.Количество()=0*/)
			{
			}
			if(true/*ВидУчета="УправленческийУчет"*/)
			{
				/*ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");*/
			}
			/*Инд=0;*/
			while(true/*Инд<ТаблицаДвижений.Количество()*/)
			{
				if(true/*(НЕ ЗначениеЗаполнено(ТаблицаДвижений[Инд].ДокументОприходования) И ВидУчета="УправленческийУчет") ИЛИ
			НЕ ЗначениеЗаполнено(ТаблицаДвижений[Инд].Номенклатура) ИЛИ
			((ВидУчета="БухгалтерскийУчет" ИЛИ ВидУчета="НалоговыйУчет") И ТаблицаДвижений[Инд].Сумма=0)*/)
				{
					/*ТаблицаДвижений.Удалить(Инд);*/
				}
			}
			/*;;*/
		}

		public void ПодготовитьТаблицы_ПоступлениеДопРасходов(/*СтруктураТаблиц, ВидУчета*/)
		{
		}

		public void ВыполнитьПриходПоРегиструПродажиСебестоимость(/*СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента*/)
		{
			/*// ТОВАРЫ ПО РЕГИСТРУ ПродажиСебестоимость
*/
			if(true/*СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером*/)
			{
				/*Движения.Вставить("ПродажиСебестоимость",РегистрыНакопления.ПродажиСебестоимость.СоздатьНаборЗаписей());*/
				/*Движения.ПродажиСебестоимость.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);*/
				/*НаборДвижений = Движения.ПродажиСебестоимость;*/
				/*// Получим таблицу значений, совпадающую со структурой набора записей регистра.
*/
				/*ТаблицаДвиженийПродажиСебестоимость = НаборДвижений.Выгрузить();*/
				/*ТаблицаДвиженийПродажиСебестоимость.Очистить();*/
				/*ТаблицаДвижений = ТаблицаДвиженийПродажиСебестоимость.Скопировать();*/
				/*// Заполним таблицу движений.
*/
				/*ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СтруктТаблицДокумента.ТаблицаПоТоварам, ТаблицаДвижений);*/
				/*ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка ,"ДокументОприходования");*/
				/*ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Подразделение, "Подразделение");*/
				/*ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");*/
				/*ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");*/
				/*ТаблицаДвижений.ЗаполнитьЗначения(УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента.Организация,СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации), "Организация");*/
				/*НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;*/
				/*НаборДвижений.ВыполнитьДвижения();*/
			}
			/*//Если СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
*/
		}

		public void ВыполнитьДвиженияПБУ1802(/*СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента,УчетнаяПолитика,КодОперацииПартииТоваров*/)
		{
			/*//При использовании УСН движения по ПБУ18 не формируются
*/
			if(true/*СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН*/)
			{
			}
			/*ТипДокумента = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);*/
			/*//Для некоторых типов документов движения по ПБУ18 не формируются:
*/
			if(true/*//1. В документах Возврат..., ОприходованиеМатериаловИзПроизводства  приходные движения формируются 
		//  на основании расходных движений, которые 
		//	были выполнены при отражении сделки (передача в эксплуатацию, реализация, передача товаров и т.д.).
		//  За формирование данных движений отвечает логика списания партий. Здесь такие движения не формируются
		ТипДокумента = Тип("ДокументСсылка.ВозвратМатериаловИзЭксплуатации") 	ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров") 			ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")  ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ОприходованиеМатериаловИзПроизводства") ИЛИ
		//2.  В документах ПоступлениеТоваровИзПереработки, 
		//		ПоступлениеТоваровИУслуг с видом операции "В Переработку" разницы в оценке стоимости не возникают 
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровИзПереработки") ИЛИ
		
		(ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И 
			СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку) ИЛИ
		//3.  Для документа ПринятиеКУчетуОС предусмотрены свои процедуры по формированию разниц - "СформироватьПроводкиПоРазницам_ПринятиеКУчетуОС"
		ТипДокумента = Тип("ДокументСсылка.ПринятиеКУчетуОС") ИЛИ 
        //4.  Для документа ГТДИмпорт движения по разницам не формируются, если неустановлен признак РассчитатьРазницы в СтруктураШапкиДокумента
		(ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") И НЕ СтруктураШапкиДокумента.РассчитатьРазницы)*/)
			{
				/*//1. В документах Возврат..., ОприходованиеМатериаловИзПроизводства  приходные движения формируются 
*/
				/*//  на основании расходных движений, которые 
*/
				/*//	были выполнены при отражении сделки (передача в эксплуатацию, реализация, передача товаров и т.д.).
*/
				/*//  За формирование данных движений отвечает логика списания партий. Здесь такие движения не формируются
*/
				/*//2.  В документах ПоступлениеТоваровИзПереработки, 
*/
				/*//		ПоступлениеТоваровИУслуг с видом операции "В Переработку" разницы в оценке стоимости не возникают 
*/
				/*//3.  Для документа ПринятиеКУчетуОС предусмотрены свои процедуры по формированию разниц - "СформироватьПроводкиПоРазницам_ПринятиеКУчетуОС"
*/
				/*//4.  Для документа ГТДИмпорт движения по разницам не формируются, если неустановлен признак РассчитатьРазницы в СтруктураШапкиДокумента
*/
				/*(ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") И НЕ СтруктураШапкиДокумента.РассчитатьРазницы)
			Тогда
			Возврат;*/
			}
			/*ЕстьТовары = СтруктТаблицДокумента.ТаблицаПоТоварам.Количество() > 0;*/
			/*ЕстьОборудование = СтруктТаблицДокумента.Свойство("ТаблицаПоОборудованию") И СтруктТаблицДокумента.ТаблицаПоОборудованию.Количество() > 0;*/
			if(true/*НЕ (ЕстьТовары ИЛИ ЕстьОборудование)*/)
			{
			}
			/*ПрименениеПБУ18 = СтруктураШапкиДокумента.ПоддержкаПБУ18;*/
			/*//Заполнение признака формирования движений затратам - необходимо только для двух типов документов
*/
			/*флФормироватьДвиженияПоЗатратам = ложь;*/
			if(true/*ТипДокумента = Тип("ДокументСсылка.ГТДИмпорт") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов")*/)
			{
				/*флФормироватьДвиженияПоЗатратам = истина;*/
			}
			/*//Движения не формируется, если не применяется ПБУ18 и не требуется формировать движения по затратам
*/
			if(true/*не (ПрименениеПБУ18 или флФормироватьДвиженияПоЗатратам)*/)
			{
			}
			/*//создадим движения-проводки НУ
*/
			/*Движения.Вставить("Налоговый",РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей());*/
			/*Движения.Налоговый.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);*/
			if(true/*флФормироватьДвиженияПоЗатратам*/)
			{
				/*Движения.Вставить("ЗатратыНалоговыйУчет",РегистрыНакопления.ЗатратыНалоговыйУчет.СоздатьНаборЗаписей());*/
				/*Движения.ЗатратыНалоговыйУчет.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);*/
			}
			if(true/*ЕстьТовары*/)
			{
				/*//Формирование движений для таблицы товаров
*/
				/*ЗаполнитьДвиженияПБУ1802(УчетнаяПолитика,СтруктураШапкиДокумента,Движения, СтруктТаблицДокумента.ТаблицаПоТоварам,КодОперацииПартииТоваров,ПрименениеПБУ18,флФормироватьДвиженияПоЗатратам,неопределено);*/
			}
			if(true/*ЕстьОборудование*/)
			{
				/*//Формирование движений для таблицы оборудования
*/
				/*ЗаполнитьДвиженияПБУ1802(УчетнаяПолитика,СтруктураШапкиДокумента,Движения, СтруктТаблицДокумента.ТаблицаПоОборудованию,КодОперацииПартииТоваров,ПрименениеПБУ18,флФормироватьДвиженияПоЗатратам,Перечисления.СтатусыПартийТоваров.Оборудование);*/
			}
		}

		public void ЗаполнитьПроводкиПБУ1802(/*СтруктураШапкиДокумента,ТаблицаТЧ,СтрокаТаблицы,СчетНУСоответствующийСчетуБУ,ВидУчетаВПроводку,Стоимость,ПроводкиНУ,флФормироватьДвиженияПоЗатратам*/)
		{
			/*СкладВПроводку = неопределено;*/
			if(true/*ТаблицаТЧ.Колонки.Найти("Склад") <> Неопределено*/)
			{
				/*СкладВПроводку = СтрокаТаблицы.Склад;*/
			}
			/*Проводка = ПроводкиНУ.Добавить();*/
			/*Проводка.Период      = СтруктураШапкиДокумента.Дата;*/
			/*Проводка.Организация = СтруктураШапкиДокумента.Организация;*/
			/*Проводка.Сумма       = Стоимость;*/
			/*Проводка.Содержание  = СтрокаТаблицы.Содержание;*/
			/*Проводка.СчетДт      = СчетНУСоответствующийСчетуБУ;*/
			/*БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);*/
			/*БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СкладВПроводку);*/
			/*Проводка.ВидУчетаДт  = ВидУчетаВПроводку;*/
			/*Проводка.Регистратор = СтруктураШапкиДокумента.Ссылка;*/
			/*Проводка = ПроводкиНУ.Добавить();*/
			/*Проводка.Период      = СтруктураШапкиДокумента.Дата;*/
			/*Проводка.Организация = СтруктураШапкиДокумента.Организация;*/
			/*Проводка.Содержание  = СтрокаТаблицы.Содержание;*/
			/*Проводка.СчетДт      = СтрокаТаблицы.СчетУчетаНУ;*/
			/*БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Номенклатура", СтрокаТаблицы.Номенклатура);*/
			/*БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт,Проводка.СубконтоДт,"Склады",       СкладВПроводку);*/
			if(true/*флФормироватьДвиженияПоЗатратам*/)
			{
				/*БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "Подразделения",    СтрокаТаблицы.ПодразделениеОрганизации);*/
				if(true/*ТипЗнч(СтрокаТаблицы.СтатьяЗатратНУ) = Тип("СправочникСсылка.СтатьиЗатрат")*/)
				{
					/*БухгалтерскийУчет.УстановитьСубконто( Проводка.СчетДт, Проводка.СубконтоДт, "СтатьиЗатрат",     СтрокаТаблицы.СтатьяЗатратНУ);*/
				}
			}
			/*Проводка.Сумма = - Стоимость;*/
			/*Проводка.ВидУчетаДт = ВидУчетаВПроводку;*/
			/*Проводка.Регистратор = СтруктураШапкиДокумента.Ссылка;*/
		}

		public void ЗаполнитьДвиженияПБУ1802(/*УчетнаяПолитика,СтруктураШапкиДокумента,Движения, ТаблицаТЧ,КодОперацииПартииТоваров,ПоддержкаПБУ18,флФормироватьДвиженияПоЗатратам,СтатусПартии*/)
		{
			/*ТипДокумента = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);*/
			/*ПроводкиНУ = Движения.Налоговый;*/
			/*СодержаниеОперации = ОпределитьСодержаниеОперацииДляПБУ18(СтруктураШапкиДокумента,СтатусПартии);*/
			/*// по регистру партии товаров Налоговый учет	
*/
			/*НаборДвижений = Движения.ПартииТоваровНаСкладахНалоговыйУчет;*/
			/*// Получим таблицу значений, совпадающую со структурой набора записей регистра.
*/
			/*ТаблицаДвижений = НаборДвижений.Выгрузить();*/
			/*ТаблицаДвижений.Очистить();*/
			/*ТаблицаРазницы = ТаблицаТЧ.СкопироватьКолонки();*/
			if(true/*ТаблицаРазницы.Колонки.Найти("ВременнаяРазница")=неопределено*/)
			{
				/*ТаблицаРазницы.Колонки.Добавить("ВременнаяРазница");*/
			}
			if(true/*ТаблицаРазницы.Колонки.Найти("ПостояннаяРазница")=неопределено*/)
			{
				/*ТаблицаРазницы.Колонки.Добавить("ПостояннаяРазница");*/
			}
			/*//кэш для хранения счетов БУ, для которых уже получали счет НУ (в целях ускорения выполнения процедуры)
*/
			/*КэшСчетов = Новый Соответствие;*/
			/*НомерСтроки = 1;*/
			if(true/*ТаблицаРазницы.Количество()=0*/)
			{
			}
			/*ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаРазницы, ТаблицаДвижений);*/
			/*// Недостающие поля.
*/
			if(true/*СтатусПартии = неопределено*/)
			{
				/*СтатусПартии = ОпределитьСтатусПартииПриходаУпр(СтруктураШапкиДокумента);*/
			}
			/*ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(ТаблицаРазницы, 
													ТаблицаДвижений, 
													СтатусПартии, 
													глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл, 
													УчетнаяПолитика.НалоговыйУчет.СпособОценкиМПЗ, 
													СтруктураШапкиДокумента, 
													"НалоговыйУчет",истина);*/
			/*ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");*/
			/*ТаблицаДвижений.ЗаполнитьЗначения(Справочники.Качество.Новый, "Качество");*/
			/*ТаблицаДвижений.ЗаполнитьЗначения(КодОперацииПартииТоваров, "КодОперации");*/
			/*ТаблицаДвижений.ЗаполнитьЗначения(0, "Стоимость");*/
			/*ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");*/
			/*НаборДвижений.мПериод            = СтруктураШапкиДокумента.Дата;*/
			/*НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;*/
			/*НаборДвижений.ВыполнитьПриход();*/
		}

		public void СформироватьПроводкиПоРазницам_ПринятиеКУчетуОС(/*СтруктураШапкиДокумента, ТаблицаПоОС, ДанныеУчетОС*/)
		{
			if(true/*не СтруктураШапкиДокумента.ПоддержкаПБУ18 ИЛИ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН*/)
			{
			}
			/*СуммыРазниц = ДанныеУчетОС.струСуммыРазниц;*/
			/*//создадим движения-проводки НУ
*/
			/*ПроводкиНУ=РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();*/
			/*ПроводкиНУ.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);*/
			/*Проводка = ПроводкиНУ.Добавить();*/
			/*Проводка.Период       = СтруктураШапкиДокумента.Дата;*/
			/*Проводка.Организация  = СтруктураШапкиДокумента.Организация;*/
			/*Проводка.НомерЖурнала = "ОС";*/
			/*Проводка.Содержание   = "Оприходованы МПЗ";*/
			/*Проводка.КоличествоДт = ТаблицаПоОС.Количество();*/
			/*Проводка.Сумма = 0;*/
			/*Проводка.СчетДт       = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;*/
			/*БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтруктураШапкиДокумента.НоменклатураМПЗ);*/
			/*БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.СкладМПЗ);*/
			/*Проводка = ПроводкиНУ.Добавить();*/
			/*Проводка.Период       = СтруктураШапкиДокумента.Дата;*/
			/*Проводка.Организация  = СтруктураШапкиДокумента.Организация;*/
			/*Проводка.НомерЖурнала = "ОС";*/
			/*Проводка.Содержание   = "Оприходованы МПЗ";*/
			/*Проводка.Сумма        = СуммыРазниц.СуммаНУ + СуммыРазниц.СуммаВР;*/
			/*Проводка.СчетДт       = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;*/
			/*БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтруктураШапкиДокумента.НоменклатураМПЗ);*/
			/*БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.СкладМПЗ);*/
			/*Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ВР;*/
			if(true/*СуммыРазниц.СуммаПР <> 0*/)
			{
				/*Проводка = ПроводкиНУ.Добавить();*/
				/*Проводка.Период       = СтруктураШапкиДокумента.Дата;*/
				/*Проводка.Организация  = СтруктураШапкиДокумента.Организация;*/
				/*Проводка.НомерЖурнала = "ОС";*/
				/*Проводка.Содержание   = "Оприходованы МПЗ";*/
				/*Проводка.Сумма        = СуммыРазниц.СуммаПР;*/
				/*Проводка.СчетДт       = ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;*/
				/*БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Номенклатура", СтруктураШапкиДокумента.НоменклатураМПЗ);*/
				/*БухгалтерскийУчет.УстановитьСубконто(Проводка.СчетДт, Проводка.СубконтоДт, "Склады",       СтруктураШапкиДокумента.СкладМПЗ);*/
				/*Проводка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПР;*/
			}
			/*ПроводкиНУ.Записать(ложь);*/
		}

		public object ОпределитьСодержаниеОперацииДляПБУ18(/*СтруктураШапкиДокумента,СтатусПартии*/)
		{
			/*ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);*/
			if(true/*ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")*/)
			{
			}
			return null;
		}

		public void ВыполнитьОприходованиеПоРегистрамНалоговогоУчета(/*СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента,УчетнаяПолитика,КодОперацииПартииТоваров*/)
		{
			if(true/*СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И
		СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ОприходованиеТоваров И
		ЗначениеЗаполнено(СтруктураШапкиДокумента.ИнвентаризацияТоваровНаСкладе) И
		СтруктураШапкиДокумента.Свойство("СтавкаНалогаНаПрибыль") И
		СтруктураШапкиДокумента.ПоддержкаПБУ18 И
		СтруктураШапкиДокумента.Дата >= '20060101' И
		СтруктураШапкиДокумента.Дата < '20100101'*/)
			{
				/*КоэффициентСуммыНУ = СтруктураШапкиДокумента.СтавкаНалогаНаПрибыль;*/
			}
			/*// ТОВАРЫ ПО РЕГИСТРУ ПартииТоваровНаСкладахНалоговыйУчет.
*/
			/*Движения.Вставить("ПартииТоваровНаСкладахНалоговыйУчет",РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет.СоздатьНаборЗаписей());*/
			/*Движения.ПартииТоваровНаСкладахНалоговыйУчет.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);*/
			/*НаборДвижений = Движения.ПартииТоваровНаСкладахНалоговыйУчет;*/
			/*ТаблицаДвижений = Движения.ПартииТоваровНаСкладахНалоговыйУчет.ВыгрузитьКолонки();*/
			/*// Заполним таблицу движений.		
*/
			/*ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(СтруктТаблицДокумента.ТаблицаПоТоварам, ТаблицаДвижений);*/
			if(true/*СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ВводНачальныхОстатков*/)
			{
			}
			/*// Недостающие поля.
*/
			/*ЗаполнитьПоляПартииТоваровНаСкладахПриПриходе(СтруктТаблицДокумента.ТаблицаПоТоварам, ТаблицаДвижений, Перечисления.СтатусыПартийТоваров.Купленный, глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладамРегл, УчетнаяПолитика.НалоговыйУчет.СпособОценкиМПЗ, СтруктураШапкиДокумента, "НалоговыйУчет");*/
			/*ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");*/
			/*ТаблицаДвижений.ЗаполнитьЗначения(КодОперацииПартииТоваров, "КодОперации");*/
			/*НаборДвижений.мПериод = СтруктураШапкиДокумента.Дата;*/
			/*НаборДвижений.мТаблицаДвижений = ТаблицаДвижений;*/
			/*Движения.ПартииТоваровНаСкладахНалоговыйУчет.ВыполнитьПриход();*/
		}

		public void ВыполнитьПриходПоРегистрамНалоговогоУчетаУСН(/*СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента*/)
		{
			/*НаборДвижений = Движения.ПартииТоваровНаСкладахНалоговыйУчет;*/
			/*// Получим таблицу значений, совпадающую со структурой набора записей регистра.
*/
			/*ТаблицаДвижений = НаборДвижений.Выгрузить();*/
			/*ТаблицаДвижений.Очистить();*/
			/*НалоговыйУчетУСН.ПоступлениеПоПартиямУСН(СтруктураШапкиДокумента, СтруктТаблицДокумента.ТаблицаПоТоварам, ТаблицаДвижений, 
		Перечисления.ВидыРасходовУСН.Номенклатура);*/
			/*//Недостающие поля.
*/
			/*ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Организация, "Организация");*/
			/*ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Дата, "Период");*/
			/*ТаблицаДвижений.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "Регистратор");*/
			/*ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");*/
			/*НаборДвижений.мПериод            = СтруктураШапкиДокумента.Дата;*/
			/*НаборДвижений.мТаблицаДвижений   = ТаблицаДвижений;*/
			/*Движения.ПартииТоваровНаСкладахНалоговыйУчет.ВыполнитьПриход();*/
		}

		public void ВыполнитьПриходПоРегистрамПартийВсеВидыУчета(/*СтруктураШапкиДокумента, Отказ=Ложь, ТаблицаПоТоварам=Неопределено, ТаблицаПоТаре=Неопределено, ТаблицаПоОборудованию=Неопределено, Упр=Ложь, Бух=Ложь, Нал=Ложь, ТаблицаСтаройРегистрацииВПоследовательности*/)
		{
			/*Движения = Новый Структура();*/
			/*ТипДокумента = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);*/
			/*// Определим код операции движений по регистру партий
*/
			/*КодОперацииПартииТоваров = ОпределитьКодОперацииПартийТоваров(ТипДокумента, 
																	?(СтруктураШапкиДокумента.Свойство("ВидОперации"),СтруктураШапкиДокумента.ВидОперации,Неопределено), 
																	?(СтруктураШапкиДокумента.Свойство("ВидДоговора"),СтруктураШапкиДокумента.ВидДоговора,Неопределено));*/
			/*//Получение учетных политик
*/
			/*УчетнаяПолитика = Новый Структура();*/
			/*// ТОВАРЫ, ТАРА И ОБОРУДОВАНИЕ ПО РЕГИСТРУ ПартииТоваровНаСкладах.
*/
			/*СтруктТаблицДокумента = Новый Структура;*/
			if(true/*НЕ ТаблицаПоТоварам = Неопределено И
		//Приход товаров по документу ВозвратПереданныхТоваров в данном модуле не выполняется, 
		//	может быть только сторнирование ордерных партий
		ТипДокумента <> Тип("ДокументСсылка.ВозвратПереданныхТоваров")*/)
			{
				/*//Приход товаров по документу ВозвратПереданныхТоваров в данном модуле не выполняется, 
*/
				/*//	может быть только сторнирование ордерных партий
*/
				/*ТипДокумента <> Тип("ДокументСсылка.ВозвратПереданныхТоваров") Тогда
		СтруктТаблицДокумента.Вставить("ТаблицаПоТоварам",      ТаблицаПоТоварам);*/
			}
			if(true/*НЕ ТаблицаПоОборудованию = Неопределено*/)
			{
				if(true/*НЕ ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")*/)
				{
					/*//Для документа ВозвратТоваровОтПокупателя в таблице ТаблицаПоОборудованию передается таблица по комплектам
*/
					/*СтруктТаблицДокумента.Вставить("ТаблицаПоОборудованию", ТаблицаПоОборудованию);*/
				}
			}
			if(true/*НЕ ТаблицаПоТаре = Неопределено*/)
			{
				/*СтруктТаблицДокумента.Вставить("ТаблицаПоТаре",         ТаблицаПоТаре);*/
			}
			/*СпособВеденияПартионногоУчетаПоОрганизации = неопределено;*/
			if(true/*Упр*/)
			{
				/*ПараметрыУчетнойПолитикиУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(СтруктураШапкиДокумента.Дата);*/
				if(true/*НЕ ЗначениеЗаполнено(ПараметрыУчетнойПолитикиУпр)*/)
				{
					/*Отказ = Истина;*/
				}
				/*УчетнаяПолитика.Вставить("УправленческийУчет", ПараметрыУчетнойПолитикиУпр);*/
				/*СпособВеденияПартионногоУчетаПоОрганизации = СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации;*/
				if(true/*СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации <> Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется*/)
				{
					/*// Создать таблицу для сторнирующих движений по партиям товаров на складах для поступления по ордеру
*/
					if(true/*СтруктураШапкиДокумента.Свойство("ВидПоступления")
			  И (СтруктураШапкиДокумента.ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру)*/)
					{
						/*струПараметры = новый Структура;*/
						/*струПараметры.Вставить("ИмяРеквизитаКоличество", "Количество");*/
						if(true/*ТипДокумента = Тип("ДокументСсылка.ВозвратПереданныхТоваров")*/)
						{
							/*струПараметры.Вставить("ПриходныйОрдер", СтруктураШапкиДокумента.СкладОрдер);*/
							/*струПараметры.Вставить("Склад", СтруктураШапкиДокумента.СкладОрдер.Склад);*/
						}
						if(true/*НЕ ТаблицаПоТоварам = Неопределено*/)
						{
							/*СтруктТаблицДокумента.Вставить("ТаблицаПоТоварамСторно",      СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоТоварам,струПараметры));*/
						}
						if(true/*НЕ ТаблицаПоТаре = Неопределено*/)
						{
							/*СтруктТаблицДокумента.Вставить("ТаблицаПоТареСторно",         СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоТаре,струПараметры));*/
						}
						if(true/*НЕ ТаблицаПоОборудованию = Неопределено И НЕ ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")*/)
						{
							/*СтруктТаблицДокумента.Вставить("ТаблицаПоОборудованиюСторно", СоздатьТаблицуСторнированияПартийПриПоступленииПоОрдеру(ТаблицаПоОборудованию, струПараметры));*/
						}
					}
					if(true/*ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")*/)
					{
						/*ПодготовитьТаблицыДокументаПриВозврате(СтруктураШапкиДокумента, СтруктТаблицДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, "Упр");*/
					}
					/*ВыполнитьПриходПоРегистрамПартийПоВидуУчета(СтруктураШапкиДокумента, УчетнаяПолитика, КодОперацииПартииТоваров, Отказ, СтруктТаблицДокумента, Движения, "УправленческийУчет");*/
					/*//удалим из структуры таблиц таблицы Сторно, чтобы они не попали в движения по БУ и НУ
*/
					if(true/*СтруктТаблицДокумента.Свойство("ТаблицаПоТоварамСторно")*/)
					{
						/*СтруктТаблицДокумента.Удалить("ТаблицаПоТоварамСторно");*/
					}
					if(true/*СтруктТаблицДокумента.Свойство("ТаблицаПоТареСторно")*/)
					{
						/*СтруктТаблицДокумента.Удалить("ТаблицаПоТареСторно");*/
					}
					if(true/*СтруктТаблицДокумента.Свойство("ТаблицаПоОборудованиюСторно")*/)
					{
						/*СтруктТаблицДокумента.Удалить("ТаблицаПоОборудованиюСторно");*/
					}
				}
			}
			if(true/*Бух ИЛИ Нал*/)
			{
				/*ПарамерыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);*/
				if(true/*НЕ ЗначениеЗаполнено(ПарамерыУчетнойПолитикиРегл)*/)
				{
					/*Отказ = Истина;*/
				}
			}
			if(true/*Бух*/)
			{
				/*УчетнаяПолитика.Вставить("БухгалтерскийУчет", ПарамерыУчетнойПолитикиРегл);*/
				if(true/*ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")*/)
				{
					/*ПодготовитьТаблицыДокументаПриВозврате(СтруктураШапкиДокумента, СтруктТаблицДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, "Регл");*/
				}
				/*ВыполнитьПриходПоРегистрамПартийПоВидуУчета(СтруктураШапкиДокумента, УчетнаяПолитика, КодОперацииПартииТоваров, Отказ, СтруктТаблицДокумента, Движения, "БухгалтерскийУчет");*/
			}
			if(true/*Нал*/)
			{
				if(true/*СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН") 
		  И	СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН
		  И СтруктТаблицДокумента.Свойство("ТаблицаПоТаре")*/)
				{
					/*СтруктТаблицДокумента.Удалить("ТаблицаПоТаре");*/
					/*//Для УСН движения по таре в налоговом учете не формируем
*/
				}
				/*УчетнаяПолитика.Вставить("НалоговыйУчет", ПарамерыУчетнойПолитикиРегл);*/
				if(true/*ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")*/)
				{
					/*ПодготовитьТаблицыДокументаПриВозврате(СтруктураШапкиДокумента, СтруктТаблицДокумента, ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоОборудованию, "Регл");*/
				}
				if(true/*ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров")*/)
				{
					/*ВыполнитьОприходованиеПоРегистрамНалоговогоУчета(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента,УчетнаяПолитика,КодОперацииПартииТоваров);*/
				}
				/*//ПО ПАРТИОННОМУ УЧЕТУ УСН
*/
				if(true/*(НЕ СтруктураШапкиДокумента.Свойство("ОтражатьВНалоговомУчетеУСН")) И (СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН)
			И НЕ (ТипДокумента=Тип("ДокументСсылка.ПринятиеКУчетуОС") И НЕ СтруктураШапкиДокумента.ОтразитьВСоставеМПЗ)*/)
				{
					/*ВыполнитьПриходПоРегистрамНалоговогоУчетаУСН(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента);*/
				}
			}
			if(true/*ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")*/)
			{
				if(true/*СтруктураШапкиДокумента.Свойство("ДопроведениеДокумента")*/)
				{
					if(true/*СтруктураШапкиДокумента.ДопроведениеДокумента
			  И СтруктураШапкиДокумента.Ссылка.ОтражатьВУправленческомУчете*/)
					{
						/*ВыполнитьПриходПоРегиструПродажиСебестоимость(СтруктураШапкиДокумента,Движения,СтруктТаблицДокумента);*/
					}
				}
			}
			/*ЗарегистрироватьДокументВПоследовательностяхПартионногоУчетаНаСервере(
		СтруктураШапкиДокумента.Ссылка, 
		СтруктураШапкиДокумента.Дата, 
		СтруктураШапкиДокумента.Организация, 
		Упр, 
		Бух, 
		Нал, 
		СпособВеденияПартионногоУчетаПоОрганизации,
		ТаблицаСтаройРегистрацииВПоследовательности);*/
			/*//Сдвигаем границу последовательности	
*/
			/*ПараметрыСписанияПартий = глЗначениеПеременной("ПараметрыПартионногоУчета");*/
			/*ДокументМоментВремени = Новый МоментВремени(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Ссылка);*/
			if(true/*ПараметрыСписанияПартий.СписыватьПартииПриПроведенииДокументов И Упр*/)
			{
				/*СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(СтруктураШапкиДокумента.Организация, ДокументМоментВремени);*/
				/*Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(СтруктураШапкиДокумента.Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ), Ложь);*/
				/*СдвинутьГраницуПоследовательности("ПартионныйУчет", ДокументМоментВремени, "Упр", Отбор, Истина);*/
			}
			if(true/*ПараметрыСписанияПартий.СписыватьПартииПриПроведенииДокументовБух И Бух*/)
			{
				/*Отбор = Новый Структура("Организация, ПроведенВХронологическойПоследовательности", СтруктураШапкиДокумента.Организация, Ложь);*/
				/*СдвинутьГраницуПоследовательности("ПартионныйУчетБУ", ДокументМоментВремени, "Бух", Отбор, Истина);*/
			}
		}
		//ПРИХОДНЫЕ ДВИЖЕНИЯ ДОКУМЕНТ ПРИНЯТИЕ К УЧЕТУ ОС

		public object ПодготовитьДанныеДляПринятияКУчетуОС(/*СтруктураШапкиДокумента, ТаблицаПоТоварам, Упр, Бух, Нал*/)
		{
			/*ТаблицаОприходования = новый ТаблицаЗначений;*/
			/*ТаблицаОприходования.Колонки.Добавить("Номенклатура");*/
			/*ТаблицаОприходования.Колонки.Добавить("ХарактеристикаНоменклатуры");*/
			/*ТаблицаОприходования.Колонки.Добавить("СерияНоменклатуры");*/
			/*ТаблицаОприходования.Колонки.Добавить("Склад");*/
			/*ТаблицаОприходования.Колонки.Добавить("СуммаУпр");*/
			/*ТаблицаОприходования.Колонки.Добавить("СуммаБух");*/
			/*ТаблицаОприходования.Колонки.Добавить("СуммаНал");*/
			/*ТаблицаОприходования.Колонки.Добавить("ПостояннаяРазница");*/
			/*ТаблицаОприходования.Колонки.Добавить("ВременнаяРазница");*/
			/*ТаблицаОприходования.Колонки.Добавить("СчетУчетаБУ");*/
			/*ТаблицаОприходования.Колонки.Добавить("СчетУчетаНУ");*/
			/*ТаблицаОприходования.Колонки.Добавить("Количество");*/
			/*ТаблицаОприходования.Колонки.Добавить("НомерСтроки");*/
			/*струСуммыРазниц = новый Структура("СуммаНУ,СуммаВР,СуммаПР",0,0,0);*/
			if(true/*Нал и СтруктураШапкиДокумента.ПоддержкаПБУ18*/)
			{
				/*//получение данных о временных и постоянных разницах, уже записанных в регистр партий налогового учета
*/
				/*НаборДвижений = РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет;*/
				/*НаборЗаписей = НаборДвижений.СоздатьНаборЗаписей();*/
				/*Отбор = НаборЗаписей.Отбор.Регистратор;*/
				/*Отбор.Установить(СтруктураШапкиДокумента.Ссылка);*/
				/*// Установим УБ (эксклюзивную) перед чтением набора записей
*/
				if(true/*глЗначениеПеременной("ИспользоватьБлокировкуДанных")*/)
				{
					/*СтруктураПараметровБлокировки = Новый Структура(
				"ТипТаблицы,ИмяТаблицы"
				,"РегистрНакопления"
				,"ПартииТоваровНаСкладахНалоговыйУчет.НаборЗаписей");*/
					/*СтруктураЗначенийБлокировки = Новый Структура("Регистратор", СтруктураШапкиДокумента.Ссылка);*/
					/*ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки,СтруктураЗначенийБлокировки,, Ложь, "");*/
				}
				/*НаборЗаписей.Прочитать();*/
				/*ТаблицаПартий = НаборЗаписей.Выгрузить();*/
				/*СуммаНУ = ТаблицаПартий.Итог("Стоимость") + ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства, СтруктураШапкиДокумента.СтоимостьНУ, 0);*/
				/*СуммаВР = ТаблицаПартий.Итог("ВременнаяРазница") +  ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства, СтруктураШапкиДокумента.СтоимостьПР, 0);*/
				/*СуммаПР = ТаблицаПартий.Итог("ПостояннаяРазница") + ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства, СтруктураШапкиДокумента.СтоимостьВР, 0);*/
				/*струСуммыРазниц.Вставить("СуммаНУ",СуммаНУ);*/
				/*струСуммыРазниц.Вставить("СуммаВР",СуммаВР);*/
				/*струСуммыРазниц.Вставить("СуммаПР",СуммаПР);*/
			}
			/*СтрокаТаблицы 								= ТаблицаОприходования.Добавить();*/
			/*СтрокаТаблицы.НомерСтроки 					= 0;*/
			/*СтрокаТаблицы.Номенклатура 					= СтруктураШапкиДокумента.НоменклатураМПЗ;*/
			/*СтрокаТаблицы.ХарактеристикаНоменклатуры 	= СтруктураШапкиДокумента.ХарактеристикаМПЗ;*/
			/*СтрокаТаблицы.СерияНоменклатуры 			= СтруктураШапкиДокумента.СерияМПЗ;*/
			/*СтрокаТаблицы.Склад 						= СтруктураШапкиДокумента.СкладМПЗ;*/
			/*СтрокаТаблицы.Количество 					= ТаблицаПоТоварам.Количество();*/
			if(true/*Упр*/)
			{
				/*СтрокаТаблицы.СуммаУпр 					= СтруктураШапкиДокумента.Стоимость;*/
			}
			if(true/*Бух*/)
			{
				/*СтрокаТаблицы.СуммаБух 					= ТаблицаПоТоварам.Итог("СуммаОС_БУ");*/
				/*СтрокаТаблицы.СчетУчетаБУ 				= СтруктураШапкиДокумента.СчетУчетаМПЗБУ;*/
			}
			if(true/*Нал*/)
			{
				if(true/*СтруктураШапкиДокумента.ПоддержкаПБУ18*/)
				{
					/*СтрокаТаблицы.СчетУчетаНУ 				= ПланыСчетов.Налоговый.МатериалыВСоставеОСвНУ;*/
					/*СтрокаТаблицы.СуммаНал 					= 0;*/
					/*СтрокаТаблицы.ПостояннаяРазница 		= СуммаПР;*/
					/*СтрокаТаблицы.ВременнаяРазница 			= СуммаНУ + СуммаВР;*/
				}
			}
			return null;
		}
		//ПРОВОДКИ ПО ПОСТУПЛЕНИЮ ТМЦ
		//Процедура для формирования проводок по поступлению ТМЦ для переданного документа. Вызывается из документов поступления ТМЦ
		//	Готовит входные параметры для процедуры СформироватьПроводкиВсеВидыУчета исходя из типа документа
		// Параметры
		//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
		//  Отказ  								– булево – признак отказа
		//  ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОбъектамСтроительства
		//										– ТаблицаЗначений – таблицы документа по которым необходимо сформировать проводки
		//  Бух, Нал							– булево – признаки формирования проводок по БУ и НУ

		public void СформироватьПроводкиПоПоступлениюТМЦ(/*СтруктураШапкиДокумента, Отказ=Ложь, ТаблицаПоТоварам=Неопределено, ТаблицаПоТаре=Неопределено, ТаблицаПоУслугам=неопределено, ТаблицаПоОборудованию_ТаблицаПоКомплектам=Неопределено, ТаблицаПоОбъектамСтроительства=неопределено, Бух=Ложь, Нал=Ложь*/)
		{
			if(true/*Отказ ИЛИ НЕ (Бух ИЛИ Нал)*/)
			{
			}
			/*//сохранение таблиц в копии
*/
			if(true/*ТаблицаПоТоварам<>неопределено*/)
			{
				/*КопияТаблицаПоТоварам = ТаблицаПоТоварам.Скопировать();*/
			}
			if(true/*ТаблицаПоТаре<>неопределено*/)
			{
				if(true/*ТипЗнч(ТаблицаПоТаре)=Тип("ТаблицаЗначений")*/)
				{
					/*КопияТаблицаПоТаре	= ТаблицаПоТаре.Скопировать();*/
				}
			}
			if(true/*ТаблицаПоОборудованию_ТаблицаПоКомплектам<>неопределено*/)
			{
				/*КопияТаблицаПоОборудованию_ТаблицаПоКомплектам 	= ТаблицаПоОборудованию_ТаблицаПоКомплектам.Скопировать();*/
			}
			if(true/*ТаблицаПоУслугам<>неопределено*/)
			{
				/*КопияТаблицаПоУслугам = ТаблицаПоУслугам.Скопировать();*/
			}
			if(true/*ТаблицаПоОбъектамСтроительства<>неопределено*/)
			{
				/*КопияТаблицаПоОбъектамСтроительства = ТаблицаПоОбъектамСтроительства.Скопировать();*/
			}
			/*ТипРегистратора = ТипЗНЧ(СтруктураШапкиДокумента.Ссылка);*/
			if(true/*ТипРегистратора = Тип("ДокументСсылка.АвансовыйОтчет")*/)
			{
				/*СформироватьПроводкиВсеВидыУчета(СтруктураШапкиДокумента, Отказ, КопияТаблицаПоТоварам, КопияТаблицаПоТаре, КопияТаблицаПоУслугам, , , Бух, Нал);*/
			}
		}
		//Процедура для формирования проводок по поступлению ТМЦ.
		//	Готовит входные параметры для процедуры СформироватьПроводкиПоВидуУчета исходя из признаков отражения в учете
		//	Выполняет запись заполненной структуры движений
		// Параметры
		//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
		//  Отказ  								– булево – признак отказа
		//  ТаблицаПоТоварам, ТаблицаПоТаре, ТаблицаПоУслугам, ТаблицаПоОборудованию, ТаблицаПоОбъектамСтроительства
		//										– ТаблицаЗначений – таблицы документа по которым необходимо сформировать проводки
		//  Бух, Нал							– булево – признаки формирования проводок по БУ и НУ

		public void СформироватьПроводкиВсеВидыУчета(/*СтруктураШапкиДокумента, Отказ=Ложь, ТаблицаПоТоварам=Неопределено, ТаблицаПоТаре=Неопределено, ТаблицаПоУслугам=неопределено, ТаблицаПоОборудованию=Неопределено, ТаблицаПоОбъектамСтроительства = неопределено, Бух=Ложь, Нал=Ложь*/)
		{
			/*Движения = Новый Структура();*/
			/*ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);*/
			/*СтруктТаблицДокумента = Новый Структура;*/
			if(true/*НЕ ТаблицаПоТоварам = Неопределено*/)
			{
				/*СтруктТаблицДокумента.Вставить("Товары",      ТаблицаПоТоварам);*/
			}
			if(true/*НЕ ТаблицаПоОборудованию = Неопределено*/)
			{
				/*СтруктТаблицДокумента.Вставить("Оборудование", ТаблицаПоОборудованию);*/
			}
			if(true/*НЕ ТаблицаПоТаре = Неопределено*/)
			{
				/*СтруктТаблицДокумента.Вставить("Тара",         ТаблицаПоТаре);*/
			}
			if(true/*НЕ ТаблицаПоОбъектамСтроительства = Неопределено*/)
			{
				/*СтруктТаблицДокумента.Вставить("ОбъектыСтроительства",         ТаблицаПоОбъектамСтроительства);*/
			}
			if(true/*НЕ ТаблицаПоУслугам = Неопределено*/)
			{
				/*СтруктТаблицДокумента.Вставить("Услуги",         ТаблицаПоУслугам);*/
			}
			if(true/*Бух*/)
			{
				/*СформироватьПроводкиПоВидуУчета(СтруктураШапкиДокумента, Отказ, СтруктТаблицДокумента, Движения, "БухгалтерскийУчет");*/
			}
			if(true/*Нал*/)
			{
				/*СформироватьПроводкиПоВидуУчета(СтруктураШапкиДокумента, Отказ, СтруктТаблицДокумента, Движения, "НалоговыйУчет");*/
			}
		}
		//Процедура для формирования проводок по поступлению ТМЦ.
		//	Готовит входные параметры для процедуры СформироватьПроводкиПоТабличнойЧастиПоВидуУчета исходя из вида учета и таблиц документа
		// Параметры
		//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
		//  Отказ  								– булево – признак отказа
		//  СтруктТаблицДокумента               – Структура – содержит таблицы документа по которым необходимо сформировать проводки
		//  Движения               				– Структура – содержит коллекции движений по проводкам Бух и Нал
		//  ВидУчета							– Строка ("БухгалтерскийУчет" или "НалоговыйУчет") Вид учета по которому необходимо сформировать движения

		public void СформироватьПроводкиПоВидуУчета(/*СтруктураШапкиДокумента, Отказ, СтруктТаблицДокумента, Движения, ВидУчета*/)
		{
			/*ИмяРегистраБухгалтерии = ?(ВидУчета="БухгалтерскийУчет","Хозрасчетный","Налоговый");*/
			/*Движения.Вставить(ИмяРегистраБухгалтерии,РегистрыБухгалтерии[ИмяРегистраБухгалтерии].СоздатьНаборЗаписей());*/
			/*Движения[ИмяРегистраБухгалтерии].Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);*/
		}
		//Функция для расчета сумм в проводки.
		// Параметры
		//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
		//  СтрокаТаблицы  						– Строка таблицы значений - Строка , на основании которой формируется проводка
		//  ИмяТЧ               				– Строка – содержит имя табличной части по которой формируется проводка
		// Возвращаемое значение:
		//  Структура, содержащая рассчитанные суммы. Элементы структуры:
		//		Стоимость,НДС,СтоимостьВал,НДСВал - есть всегда, могут быть равными 0
		//      СтоимостьНУ - появляется в некоторых случаях если стоимость нал отличается от стоимости бух

		public object РассчитатьСуммыПроводок(/*СтруктураШапкиДокумента, СтрокаТаблицы, ИмяТЧ*/)
		{
			/*СтруктураСуммы = новый Структура("Стоимость,НДС,СтоимостьВал,НДСВал",0,0,0,0);*/
			/*ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);*/
			if(true/*ИмяТЧ = "Тара"*/)
			{
				/*СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.ПроводкаСумма / СтруктураШапкиДокумента.КурсДокумента * СтруктураШапкиДокумента.КратностьДокумента);*/
				/*СтруктураСуммы.Вставить("Стоимость", СтрокаТаблицы.ПроводкаСумма);*/
			}
			/*СчетУчетаБУЗабалансовый = ложь;*/
			if(true/*ИмяТЧ = "Товары" и (
		ТипДокумента =  Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
		ТипДокумента =  Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") ИЛИ
		ТипДокумента =  Тип("ДокументСсылка.ПоступлениеДопРасходов") ИЛИ
		ТипДокумента =  Тип("ДокументСсылка.АвансовыйОтчет")
		)*/)
			{
				/*СчетУчетаБУЗабалансовый = СтрокаТаблицы.СчетУчетаБУ.Забалансовый;*/
			}
			if(true/*ТипДокумента =  Тип("ДокументСсылка.ПоступлениеТоваровУслуг")*/)
			{
				if(true/*СтруктураШапкиДокумента.НДСВключенВСтоимость*/)
				{
					/*СтруктураСуммы.Вставить("СтоимостьВал", СтрокаТаблицы.СуммаБезНДСВал+СтрокаТаблицы.НДСВал);*/
				}
				if(true/*СтруктураШапкиДокумента.НДСВключенВСтоимость ИЛИ СчетУчетаБУЗабалансовый*/)
				{
					/*СтруктураСуммы.Вставить("Стоимость", СтрокаТаблицы.СуммаБезНДС + СтрокаТаблицы.НДС);*/
				}
				/*СтруктураСуммы.Вставить("НДС",СтрокаТаблицы.НДС);*/
				/*СтруктураСуммы.Вставить("НДСВал",СтрокаТаблицы.НДСВал);*/
			}
			return null;
		}
		//Процедура для заполнения счета в проводке.
		// Параметры
		//  СтруктураПараметры  						– Структура – содержит исходные параметры формирования проводок
		//  Проводка  							– запись регистра бухгалтерии – заполняемая проводка
		//  флДебет               				– булево – содержит признак какой счет заполнять (дебета или кредита)
		//  ИсточникШапка               		– Структура – содержит структуру шапки документа
		//  ИсточникТабЧасть					- Строка табличной части - содержит строку табличной части по данным которой заполняется проводка

		public void ЗаполнитьСчетПроводки(/*СтруктураПараметры, Проводка, флДебет, ИсточникШапка, ИсточникТабЧасть*/)
		{
			if(true/*флДебет*/)
			{
				/*ИмяСчета = "СчетДт";*/
				if(true/*СтруктураПараметры.ИсточникДанныхДт="Ш"*/)
				{
					/*Источник = ИсточникШапка;*/
				}
			}
			/*мСчет = СтруктураПараметры[ИмяСчета];*/
			if(true/*ТипЗнч(мСчет)=Тип("Строка")*/)
			{
				/*Проводка[ИмяСчета] = Источник[мСчет];*/
				/*//счет получается из источника данных по имени реквизита заданного в параметрах
*/
			}
		}
		//Процедура для заполнения аналитики в проводке.
		// Параметры
		//  СтруктураПараметры  						– Структура – содержит исходные параметры формирования проводок
		//  Проводка  							– запись регистра бухгалтерии – заполняемая проводка
		//  флДебет               				– булево – содержит признак какой счет заполнять (дебета или кредита)
		//  ИсточникШапка               		– Структура – содержит Структурактуру шапки документа
		//  ИсточникТабЧасть					- Строка табличной части - содержит строку табличной части по данным которой заполняется проводка
		//  СкладПроводок						- Справочник ссылка Склады - содержит склад которым нужно заполнить проводку

		public void ЗаполнитьАналитикуПроводки(/*СтруктураПараметры, Проводка, флДебет, ИсточникШапка, ИсточникТабЧасть, СкладПроводок*/)
		{
			if(true/*флДебет*/)
			{
				/*ИмяСчета = "СчетДт";*/
				/*ИмяСубконто = "СубконтоДт";*/
				if(true/*СтруктураПараметры.ИсточникДанныхДт="Ш"*/)
				{
					/*Источник = ИсточникШапка;*/
				}
			}
			/*Ном = 1;*/
		}
		//Процедура для формирования проводок по поступлению ТМЦ.
		//	Создает проводки по указанной табличной части по переданному виду учета
		// Параметры
		//  Движения               				– Структура – содержит коллекции движений по проводкам Бух и Нал
		//  СтруктураПараметрыПроводок               – Структура – содержит исходные параметры для формирования проводок
		//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
		//  ИмяТЧ  								– Строка 	– имя табличной части для которой формируются проводки
		//  ТаблицаТЧ  							– ТаблицаЗначений 	– данные табличной части для которой формируются проводки
		//  ВидУчета							– Строка ("БухгалтерскийУчет" или "НалоговыйУчет") Вид учета по которому необходимо сформировать движения

		public void СформироватьПроводкиПоТабличнойЧастиПоВидуУчета(/*Движения, СтруктураПараметрыПроводок, СтруктураШапкиДокумента, ИмяТЧ, ТаблицаТЧ, ВидУчета*/)
		{
			/*Проводки = Движения[?(ВидУчета="БухгалтерскийУчет","Хозрасчетный","Налоговый")];*/
			/*ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);*/
			if(true/*ТипДокумента = Тип("ДокументСсылка.ОприходованиеТоваров") и ВидУчета="НалоговыйУчет" 
		И (НЕ СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ВводНачальныхОстатков)*/)
			{
				if(true/*СтруктураШапкиДокумента.Свойство("СтавкаНалогаНаПрибыль") И
			СтруктураШапкиДокумента.ПоддержкаПБУ18 И
	    	СтруктураШапкиДокумента.Дата >= '20060101' И
		    СтруктураШапкиДокумента.Дата < '20100101'*/)
				{
					/*КоэффициентСуммыНУ = СтруктураШапкиДокумента.СтавкаНалогаНаПрибыль;*/
				}
			}
			/*ИспользованиеРА = УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата);*/
			/*ТЗРНаСчете15 = Ложь;*/
			if(true/*ИспользованиеРА*/)
			{
				/*УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);*/
				if(true/*НЕ ЗначениеЗаполнено(УчетнаяПолитика)
		  ИЛИ УчетнаяПолитика.ВидУчетаТЗР = Перечисления.ВариантыУчетаТЗР.ОтнесениеНаОтдельныйСчет*/)
				{
					/*ТЗРНаСчете15 = Истина;*/
				}
			}
			/*ЕстьПолноеСодержание = Не (ТаблицаТЧ.Колонки.найти("Содержание") = Неопределено);*/
		}
		//Функция для получения структуры исходных параметров для формирования проводок.
		// Параметры
		//  СтруктураШапкиДокумента  			– Структура – содержит структуру шапки документа
		//  ИмяТабЧасти               			– Строка – содержит имя табличной части по которой формируется проводка
		//  ВидУчета							– Строка ("БухгалтерскийУчет" или "НалоговыйУчет") Вид учета по которому необходимо сформировать движения
		// Возвращаемое значение:
		//  Структура, содержащая исходные параметры формирования проводок. Элементы структуры:
		//		ПриходТМЦ 				- Структура параметров для формирования проводок по поступлению ТМЦ
		//			Элементы структуры:
		//				СодержаниеПроводки, НомерЖурнала - строки для заполнения соответствующих реквизитов проводок
		//				СчетДт - строка, имя реквизита для заполнения счета дебета
		//				Склад - структура, содержит данные для извлечения склада: СкладВШапке (булево), ИмяРеквСклад (строка)
		//				СчетКт - строка, имя реквизита для заполнения счета дебета. МОжет также содержать явную ссылку на счет
		//				ВалютаКт - строка, имя реквизита для заполнения валюты
		//				СубконтоДт - структура, содержит данные для заполнения аналитики дебета:
		//						Ключ - строка, может содержать
		//							1) вид субконто (напр. "Номенклатура")
		//							2) номер субконто (тогда будет "Номер1" или "Номер2")
		//						Значение может содержать
		//							1) строка: имя реквизита - источник данных для заполнения субконто
		//							2) ключевая строка "#Склад" - признак того что в это субконто нужно заполнить склад.
		//								Склад в этом случае определяется так, как описано в элементе структуры Склад
		//							3) конкретное значение для заполнения аналитики
		//				СубконтоКт - структура, содержит данные для заполнения аналитики кредита. Содержимое аналогично СубкотноДт
		//				ИсточникДанныхДт - строка, содержит сведения откуда брать данные для заполнения счета и аналитики дебета:
		//					"Ш" - из шапки (по структуре шапки документа), "ТЧ" - из табличной части (по данным таблицы документа)
		//				ИсточникДанныхКт - строка, содержит сведения откуда брать данные для заполнения счета и аналитики кредита:
		//					"Ш" - из шапки (по структуре шапки документа), "ТЧ" - из табличной части (по данным таблицы документа)
		//
		//      ВыделениеНДС 			- Структура параметров для формирования проводок по выделению НДС
		//			Элементы структуры:
		//				СодержаниеПроводки, НомерЖурнала - строки для заполнения соответствующих реквизитов проводок
		//				СчетДт - строка, имя реквизита для заполнения счета дебета
		//				СчетКт - строка, имя реквизита для заполнения счета дебета. МОжет также содержать явную ссылку на счет
		//				ВалютаКт - строка, имя реквизита для заполнения валюты
		//				СубконтоДт - структура, содержит данные для заполнения аналитики дебета (подробнее см. выше)
		//				СубконтоКт - структура, содержит данные для заполнения аналитики кредита (подробнее см. выше)
		//				ИсточникДанныхДт - строка, содержит сведения откуда брать данные для заполнения счета и аналитики дебета (подробнее см. выше)
		//				ИсточникДанныхКт - строка, содержит сведения откуда брать данные для заполнения счета и аналитики кредита (подробнее см. выше)
		//
		//		НДСНалоговыйАгент  		- Структура параметров для формирования проводок по НДС налогового агента
		//			Элементы структуры:  аналогично элементу структуры ВыделениеНДС

		public object ПолучитьПараметрыПроводок(/*СтруктураШапкиДокумента,ИмяТабЧасти, ВидУчета*/)
		{
			/*ТипДокумента = ТипЗнч(СтруктураШапкиДокумента.Ссылка);*/
			/*СуффиксУчета = ?(ВидУчета="БухгалтерскийУчет","БУ","НУ");*/
			/*мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");*/
			/*СтруктураПараметрыПроводок = новый Структура;*/
			if(true/*ВидУчета = "НалоговыйУчет" И ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")*/)
			{
				if(true/*СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку*/)
				{
					/*//не нужно формировать проводки - возвращаем пустую структуру
*/
				}
			}
			if(true/*ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")*/)
			{
				if(true/*ИмяТабЧасти = "Услуги" И НЕ
			(СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
		 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства 
		 или СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование)*/)
				{
					/*//не нужно формировать проводки - возвращаем пустую структуру
*/
				}
			}
			if(true/*ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") И 
		ИмяТабЧасти = "Услуги" И СтруктураШапкиДокумента.ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслугВНТТ.ОтПоставщика*/)
			{
				/*//не нужно формировать проводки - возвращаем пустую структуру
*/
			}
			if(true/*ТипДокумента = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")*/)
			{
				if(true/*ИмяТабЧасти = "Товары" И СтруктураШапкиДокумента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПокупателем*/)
				{
					/*//не нужно формировать проводки - возвращаем пустую структуру
*/
				}
			}
			/*//параметры проводок по приходу ТМЦ
*/
			/*СтруктураПриходТМЦ = новый Структура;*/
			/*СтруктураАналитикаКт = новый Структура;*/
			if(true/*ИмяТабЧасти = "Оборудование"*/)
			{
				/*СтруктураПриходТМЦ.Вставить("СодержаниеПроводки",?(ВидУчета = "НалоговыйУчет","Оприходованы ОС","Затраты на приобретение ОС"));*/
				/*СтруктураПриходТМЦ.Вставить("НомерЖурнала","ОС");*/
			}
			/*СтруктураПриходТМЦ.Вставить("СчетДт","СчетУчета"+СуффиксУчета);*/
			/*СтруктураПриходТМЦ.Вставить("Склад",новый Структура("СкладВШапке,ИмяРеквСклад",истина,"Склад"));*/
			/*СтруктураАналитикаДт = новый Структура;*/
			if(true/*ИмяТабЧасти = "ОбъектыСтроительства"*/)
			{
				/*СтруктураАналитикаДт.Вставить("ОбъектыСтроительства","ОбъектСтроительства");*/
				/*СтруктураАналитикаДт.Вставить("СтатьиЗатрат","СтатьяЗатрат");*/
				/*СтруктураАналитикаДт.Вставить("СпособыСтроительства","СпособСтроительства");*/
			}
			/*ИсточникДанныхКредит = "Ш";*/
			/*ИсточникДанныхДебет = "ТЧ";*/
			if(true/*ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
		ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")*/)
			{
				if(true/*ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")*/)
				{
					/*СтруктураПриходТМЦ.Вставить("Склад",новый Структура("СкладВШапке,ИмяРеквСклад",ложь,?(СтруктураШапкиДокумента.ВидПоступления=Перечисления.ВидыПоступленияТоваров.НаСклад,"Склад","ПриходныйОрдерСклад")));*/
				}
				if(true/*ВидУчета="БухгалтерскийУчет"*/)
				{
					if(true/*ИмяТабЧасти = "Тара"*/)
					{
						/*СтруктураПриходТМЦ.Вставить("СчетКт","СчетУчетаРасчетовПоТаре");*/
					}
					/*СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");*/
					/*СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");*/
					/*СтруктураПриходТМЦ.Вставить("ВалютаКт","ВалютаВзаиморасчетов");*/
				}
			}
			/*СтруктураПриходТМЦ.Вставить("СубконтоДт",СтруктураАналитикаДт);*/
			/*СтруктураПриходТМЦ.Вставить("СубконтоКт",СтруктураАналитикаКт);*/
			/*СтруктураПриходТМЦ.Вставить("ИсточникДанныхДт",ИсточникДанныхДебет);*/
			/*СтруктураПриходТМЦ.Вставить("ИсточникДанныхКт",ИсточникДанныхКредит);*/
			/*СтруктураПараметрыПроводок.Вставить("ПриходТМЦ", СтруктураПриходТМЦ);*/
			if(true/*ВидУчета="БухгалтерскийУчет"*/)
			{
				/*//параметры проводок по выделению НДС
*/
				if(true/*(ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") ИЛИ
			ТипДокумента = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") ИЛИ
			ТипДокумента = Тип("ДокументСсылка.ПоступлениеДопРасходов") ИЛИ
			ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")) И
			ИмяТабЧасти <> "Тара"*/)
				{
					if(true/*НЕ СтруктураШапкиДокумента.НДСВключенВСтоимость И СтруктураШапкиДокумента.УчитыватьНДС*/)
					{
						/*СтруктураНДС = новый Структура;*/
						/*СтруктураАналитикаДт = новый Структура;*/
						/*СтруктураАналитикаКт = новый Структура;*/
						/*СтруктураНДС.Вставить("СчетДт","СчетУчетаНДС");*/
						/*СтруктураНДС.Вставить("СодержаниеПроводки","Выделен НДС");*/
						if(true/*ТипДокумента = Тип("ДокументСсылка.АвансовыйОтчет")*/)
						{
							/*СтруктураАналитикаДт.Вставить("Контрагенты","Поставщик");*/
							/*СтруктураАналитикаДт.Вставить("СФПолученные","СчетФактура");*/
							/*СтруктураНДС.Вставить("ИсточникДанныхДт","ТЧ");*/
						}
						/*СтруктураНДС.Вставить("СубконтоДт",СтруктураАналитикаДт);*/
						if(true/*СтруктураШапкиДокумента.Свойство("УчетАгентскогоНДС") И СтруктураШапкиДокумента.УчетАгентскогоНДС 
					И СтруктураШапкиДокумента.Свойство("НалоговыйАгентПоОплате") И СтруктураШапкиДокумента.НалоговыйАгентПоОплате 
					И УчетНДС.НалоговыйАгентЗаСчетСобственныхСредств(СтруктураШапкиДокумента.ВидАгентскогоДоговора)*/)
						{
							/*СтруктураНДС.Вставить("СчетКт",ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);*/
							/*СтруктураАналитикаКт.Вставить("Контрагенты","Контрагент");*/
							/*СтруктураАналитикаКт.Вставить("Договоры","ДоговорКонтрагента");*/
							/*СтруктураНДС.Вставить("СубконтоКт",СтруктураАналитикаКт);*/
							/*СтруктураНДС.Вставить("НомерЖурнала","");*/
							/*СтруктураНДС.Вставить("ИсточникДанныхКт","Ш");*/
						}
						/*СтруктураПараметрыПроводок.Вставить("ВыделениеНДС", СтруктураНДС);*/
					}
					/*//Параметры проводок по выделению НДС налогового агента
*/
					if(true/*СтруктураШапкиДокумента.Свойство("УчетАгентскогоНДС") И СтруктураШапкиДокумента.УчетАгентскогоНДС 
				И ((Не (СтруктураШапкиДокумента.Свойство("НалоговыйАгентПоОплате") И СтруктураШапкиДокумента.НалоговыйАгентПоОплате)
				Или (СтруктураШапкиДокумента.Свойство("ВидАгентскогоДоговора") И Не УчетНДС.НалоговыйАгентЗаСчетСобственныхСредств(СтруктураШапкиДокумента.ВидАгентскогоДоговора))))*/)
					{
						/*СтруктураНДСНалоговыйАгент = новый Структура;*/
						/*СтруктураНДСНалоговыйАгент.Вставить("СодержаниеПроводки","Начислен НДС в качестве налогового агента");*/
						/*СтруктураНДСНалоговыйАгент.Вставить("СчетДт",СтруктураПриходТМЦ.СчетКт);*/
						/*СтруктураНДСНалоговыйАгент.Вставить("СубконтоДт",СтруктураПриходТМЦ.СубконтоКт);*/
						/*СтруктураНДСНалоговыйАгент.Вставить("ВалютаДт",СтруктураПриходТМЦ.ВалютаКт);*/
						/*СтруктураНДСНалоговыйАгент.Вставить("ИсточникДанныхДт",СтруктураПриходТМЦ.ИсточникДанныхКт);*/
						if(true/*СтруктураШапкиДокумента.НалоговыйАгентПоОплате*/)
						{
							/*СтруктураНДСНалоговыйАгент.Вставить("СчетКт",ПланыСчетов.Хозрасчетный.РасчетыНДСНалоговогоАгента);*/
							/*СтруктураАналитикаКт = Новый Структура("Контрагенты, Договоры", "Контрагент", "ДоговорКонтрагента");*/
							/*СтруктураНДСНалоговыйАгент.Вставить("СубконтоКт",СтруктураАналитикаКт);*/
							/*СтруктураНДСНалоговыйАгент.Вставить("НомерЖурнала","");*/
							/*СтруктураНДСНалоговыйАгент.Вставить("ИсточникДанныхКт","Ш");*/
						}
						/*СтруктураПараметрыПроводок.Вставить("НДСНалоговыйАгент", СтруктураНДСНалоговыйАгент);*/
					}
				}
			}
			return null;
		}

		public void ВыполнитьОприходованиеПоРегиструБухгалтерииНалоговый(/*СтруктураШапкиДокумента,ТаблицаПоТоварам*/)
		{
			if(true/*СтруктураШапкиДокумента.ОтражатьВНалоговомУчете И
		СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ОприходованиеТоваров И
		ЗначениеЗаполнено(СтруктураШапкиДокумента.ИнвентаризацияТоваровНаСкладе) И
		СтруктураШапкиДокумента.Свойство("СтавкаНалогаНаПрибыль") И
		СтруктураШапкиДокумента.ПоддержкаПБУ18 И
	    СтруктураШапкиДокумента.Дата >= '20060101' И
		СтруктураШапкиДокумента.Дата < '20100101'*/)
			{
				/*КоэффициентСуммыНУ = СтруктураШапкиДокумента.СтавкаНалогаНаПрибыль;*/
			}
			/*//Проводки по разницам в НУ
*/
			if(true/*не СтруктураШапкиДокумента.ПоддержкаПБУ18*/)
			{
			}
			if(true/*не (СтруктураШапкиДокумента.ВидОперации = Перечисления.ВидыОперацийОприходованиеТоваров.ВводНачальныхОстатков ИЛИ КоэффициентСуммыНУ<>1)*/)
			{
			}
			/*ПроводкиНУ = РегистрыБухгалтерии.Налоговый.СоздатьНаборЗаписей();*/
			/*ПроводкиНУ.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);*/
			/*ПроводкиНУ.Записать(ложь);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// ДВИЖЕНИЯ ПО НДС
		// Отражение включения НДС в стоимость, исключения НДС из стоимости партии товаров по результатам проведения по партионному учету НДС
		// Включение - исключение НДС из стоимости отражается в регистре - приемнике
		//

		public void ВключениеИсключениеНДСВСтоимостьПартииТоваров(/*СтрокаДокумента, СтруктураПараметров, СтруктураШапкиДокумента, ВключитьВСтоимость, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, ОтражатьПоПартиям = Истина*/)
		{
			if(true/*Не ОтражатьПоПартиям*/)
			{
			}
			/*КодыОпераций = Перечисления.КодыОперацийПартииТоваров;*/
			if(true/*СтруктураПараметров.Свойство("ТолькоДвиженияНДС")*/)
			{
				/*// При формировании движений только по НДС данные по партиям БУ/НУ не корректируются
*/
			}
			if(true/*СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ПеремещениеМеждуСкладами 
	   Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаБрак
	   Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеНаЗатраты
	   Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.СписаниеПартийВПроизводствоОперативно
	   Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.Комплектация
	   Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ВключениеНДСВСтоимость*/)
			{
				/*СтараяСтоимость = СтрокаДокумента.Стоимость;*/
				/*СтароеКоличество = СтрокаДокумента.Количество;*/
				/*СтрокаДокумента.Стоимость = СтрокаДокумента.НДС;*/
				/*СтрокаДокумента.Количество = 0;*/
				/*СписаноИз = "НаСкладах";*/
				if(true/*ОтражатьВНалоговомУчете*/)
				{
					/*Счета003 = ПланыСчетов.Хозрасчетный.МатериалыПринятыеВПереработку;*/
					if(true/*Счета003 = СтрокаДокумента.СчетУчетаБУ ИЛИ Счета003 = СтрокаДокумента.ПринятыеСчетУчетаБУ*/)
					{
						/*ОтражатьВНалоговомУчете = Ложь;*/
					}
				}
				/*// Если проведение по партиям выполняется только по бухгалтерскому учету - нужно переписать только движения
*/
				/*// включения НДС в стоимость в налоговом учете
*/
				/*ТолькоВключениеНДСВСтоимостьНУ = ОтражатьВНалоговомУчете и НЕ СтруктураПараметров.ЕстьСтрокиОтражатьВНалоговомУчете;*/
				/*СтруктураПараметров.Вставить("ТолькоВключениеНДСВСтоимостьНУ", ТолькоВключениеНДСВСтоимостьНУ);*/
				if(true/*СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ПеремещениеМеждуСкладами 
		   Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.ВключениеНДСВСтоимость 
		   Или СтрокаДокумента.КодОперацииПартииТоваров = КодыОпераций.Комплектация*/)
				{
					if(true/*ОтражатьВБухгалтерскомУчете*/)
					{
						/*ПоступлениеНаСкладБух(СписаноИз, СтрокаДокумента, СтруктураПараметров, СтрокаДокумента);*/
						/*Движение = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахБух[СтрокаДокумента.НомерКорСтроки -1];*/
					}
					if(true/*ОтражатьВНалоговомУчете*/)
					{
						/*ПоступлениеНаСкладНал(СписаноИз, СтрокаДокумента, СтруктураПараметров, СтрокаДокумента);*/
						/*ДвижениеНал = СтруктураПараметров.ТаблицаДвиженийПартииТоваровНаСкладахНал[СтрокаДокумента.НомерКорСтроки -1];*/
					}
				}
				/*// Движения создаются в налоговом учете при проведении по бухгалтерскому учету и не должны 
*/
				/*// затираться при проведении по налоговому учету
*/
				/*// Для этого установим признак "СписаниеПартийНДС"
*/
				if(true/*ОтражатьВНалоговомУчете*/)
				{
					/*ДвижениеНал.СписаниеПартийНДС = Истина;*/
				}
				/*СтрокаДокумента.Стоимость = СтараяСтоимость;*/
				/*СтрокаДокумента.Количество = СтароеКоличество;*/
			}
		}
		//ВключениеИсключениеНДСВСтоимостьПартииТоваров
		////////////////////////////////////////////////////////////////////////////////
		// РАСПРЕДЕЛЕНИЕ ДОП РАСХОДОВ НА ПРИОБРЕТЕНИЕ
		// Упр
		// Распределение за период доп расходов на поступление товаров
		//
		// Параметры:
		//	Нет.
		//

		public void ВыполнитьРаспределениеДопРасходов(/*ДатаНачалаВосстановления, ДатаКонцаОбработки, СтОтборОстатков = Неопределено, Документ=Неопределено, ДатаДокумента=Неопределено*/)
		{
			/*// Остатки нераспределенных доп.расходов
*/
			if(true/*ТипЗнч(СтОтборОстатков) = Тип("Структура")*/)
			{
				/*ТабОстатков = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.Остатки(ДатаКонцаОбработки, СтОтборОстатков);*/
			}
			/*// Поступление партий
*/
			/*Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Парт.Номенклатура,
	|	Парт.Склад,
	|	Парт.ХарактеристикаНоменклатуры,
	|	Парт.СерияНоменклатуры,
	|	Парт.ДокументОприходования,
	|	Парт.СтатусПартии,
	|	Парт.Заказ,
	|	Парт.Качество,
	|	СУММА(Парт.Количество) КАК Количество,
	//|	СУММА(Парт.Стоимость) КАК Стоимость,
	|	Парт.Регистратор
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладах КАК Парт
	|
	|ГДЕ
	|	Парт.КодОперации В(&СписокКодыОперации) И
	|	Парт.ВидДвижения = &ВидДвижения И
	|	Парт.Период МЕЖДУ &ДатаНач И &ДатаКон И
	|	Парт.Номенклатура В(&Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	Парт.Номенклатура,
	|	Парт.Склад,
	|	Парт.ХарактеристикаНоменклатуры,
	|	Парт.СерияНоменклатуры,
	|	Парт.ДокументОприходования,
	|	Парт.СтатусПартии,
	|	Парт.Заказ,
	|	Парт.Качество,
	|	Парт.Регистратор");*/
			/*СписокКодыОперации = Новый Массив;*/
			/*СписокКодыОперации.Добавить(Перечисления.КодыОперацийПартииТоваров.Поступление);*/
			/*Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);*/
			/*Запрос.УстановитьПараметр("ДатаНач", ДатаНачалаВосстановления);*/
			/*Запрос.УстановитьПараметр("ДатаКон", ДатаКонцаОбработки);*/
			/*Запрос.УстановитьПараметр("СписокКодыОперации", СписокКодыОперации);*/
			/*Запрос.УстановитьПараметр("Номенклатура", ТабОстатков.ВыгрузитьКолонку("Номенклатура"));*/
			/*ТабПоступлений = Запрос.Выполнить().Выгрузить();*/
			/*ТабПоступлений.Колонки.Добавить("Стоимость", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));*/
			/*// Запись в регистр
*/
			if(true/*Документ<>Неопределено*/)
			{
				/*// Партии
*/
				/*НаборЗаписей = РегистрыНакопления.ПартииТоваровНаСкладах.СоздатьНаборЗаписей();*/
				/*НаборЗаписей.Отбор.Регистратор.Установить(Документ);*/
				/*ТаблицаДвижений = НаборЗаписей.Выгрузить();*/
				/*ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабПоступлений, ТаблицаДвижений);*/
				/*ТаблицаДвижений.ЗаполнитьЗначения(0, "Количество");*/
				/*ТаблицаДвижений.ЗаполнитьЗначения(Перечисления.КодыОперацийПартииТоваров.ПоступлениеДопРасходов, "КодОперации");*/
				/*НаборЗаписей.мПериод = ДатаДокумента;*/
				/*НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;*/
				/*НаборЗаписей.ВыполнитьПриход();*/
				/*НаборЗаписей.Записать();*/
				/*// Доп расходы
*/
				/*НаборЗаписей = РегистрыНакопления.ДопРасходыНаПриобретениеТоваров.СоздатьНаборЗаписей();*/
				/*НаборЗаписей.Отбор.Регистратор.Установить(Документ);*/
				/*ТаблицаДвижений = НаборЗаписей.Выгрузить();*/
				/*// Стоимостью является сумма
*/
				/*ТабПоступлений.Колонки.Стоимость.Имя = "Сумма";*/
				/*ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабПоступлений, ТаблицаДвижений);*/
				/*НаборЗаписей.мПериод = ДатаДокумента;*/
				/*НаборЗаписей.мТаблицаДвижений = ТаблицаДвижений;*/
				/*НаборЗаписей.ВыполнитьРасход();*/
				/*НаборЗаписей.Записать();*/
			}
		}
		// ВыполнитьРаспределениеДопРасходов(ДатаНачалаВосстановления, ДатаКонцаОбработки)
		// Функция определяет признак ведения суммового учета по складам на конкретном счете учета.
		//

		public object ВедетсяСуммовойУчетПоСкладам(/*Счет*/)
		{
			/*УчетПоСкладам = Ложь;*/
			/*СтрокаВидаСубконто = Счет.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады, "ВидСубконто");*/
			if(true/*СтрокаВидаСубконто <> Неопределено*/)
			{
				/*УчетПоСкладам = СтрокаВидаСубконто.Суммовой;*/
			}
			return null;
		}
		// ВедетсяСуммовойУчетПоСкладам()
		// Функция применяется при необходимости получить сведения о параметрах партионного учета.
		//
		// Параметры:
		// нет.
		//
		// Возвращаемое значение - структура, содержащая константы относящиеся к параметрам партионного учета.
		//

		public object ПолучитьПараметрыПартионногоУчета(/**/)
		{
			/*СтруктураПараметровПартионногоУчета = Новый Структура();*/
			/*СтруктураПараметровПартионногоУчета.Вставить("СписыватьПартииПриПроведенииДокументов",Константы.СписыватьПартииПриПроведенииДокументов.Получить());*/
			/*СтруктураПараметровПартионногоУчета.Вставить("СписыватьПартииПриПроведенииДокументовБух",Константы.СписыватьПартииПриПроведенииДокументовБух.Получить());*/
			/*СтруктураПараметровПартионногоУчета.Вставить("СписыватьПартииНДСПриПроведенииДокументов",СтруктураПараметровПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух);*/
			/*СтруктураПараметровПартионногоУчета.Вставить("СписыватьПартииПриПроведенииДокументовНал",СтруктураПараметровПартионногоУчета.СписыватьПартииПриПроведенииДокументовБух);*/
			/*СтруктураПараметровПартионногоУчета.Вставить("СтратегияСписанияПартийТоваровПоСтатусам",Константы.СтратегияСписанияПартийТоваровПоСтатусам.Получить());*/
			/*СтруктураПараметровПартионногоУчета.Вставить("ВестиПартионныйУчетПоСкладам",Константы.ВестиПартионныйУчетПоСкладам.Получить());*/
			/*СтруктураПараметровПартионногоУчета.Вставить("ВестиПартионныйУчетПоСкладамРегл",Константы.ВестиПартионныйУчетПоСкладамРегл.Получить());*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// РЕГИСТРАЦИЯ В ПОСЛЕДОВАТЕЛЬНОСТЯХ

		public void СдвинутьГраницуПоследовательностиНазад(/*Дата, Ссылка, ТаблицаСтаройРегистрацииВПоследовательности, ТаблицаПоследовательностейДляРегистрации = Неопределено*/)
		{
		}

		public void ЗарегистрироватьДокументВПоследовательностяхПартионногоУчетаНаСервере(/*Ссылка, Дата, Организация = Неопределено, Упр=Ложь, Бух = Ложь, Нал = Ложь, СпособВеденияПартионногоУчетаПоОрганизации=Неопределено,ТаблицаСтаройРегистрацииВПоследовательности = Неопределено*/)
		{
			/*ТаблицаПоследовательностейДляРегистрации = Новый ТаблицаЗначений();*/
			/*ТаблицаПоследовательностейДляРегистрации.Колонки.Добавить("ИмяПоследовательности");*/
			/*ТаблицаПоследовательностейДляРегистрации.Колонки.Добавить("Организация");*/
			if(true/*Упр*/)
			{
				if(true/*СпособВеденияПартионногоУчетаПоОрганизации = Неопределено*/)
				{
					/*СпособВеденияПартионногоУчетаПоОрганизацииДляУУ = УправлениеЗапасами.ПолучитьСпособВеденияПартионногоУчетаПоОрганизации(Организация, Дата);*/
				}
				if(true/*СпособВеденияПартионногоУчетаПоОрганизацииДляУУ <> Перечисления.СпособыВеденияПартионногоУчетаПоОрганизациям.НеВедется*/)
				{
					/*НоваяСтрока = ТаблицаПоследовательностейДляРегистрации.Добавить();*/
					/*НоваяСтрока.ИмяПоследовательности = "ПартионныйУчет";*/
					/*НоваяСтрока.Организация = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(Организация, СпособВеденияПартионногоУчетаПоОрганизацииДляУУ);*/
				}
			}
			if(true/*Бух ИЛИ Нал*/)
			{
				/*НоваяСтрока = ТаблицаПоследовательностейДляРегистрации.Добавить();*/
				/*НоваяСтрока.ИмяПоследовательности = "ПартионныйУчетБУ";*/
				/*НоваяСтрока.Организация = Организация;*/
			}
			if(true/*ТаблицаСтаройРегистрацииВПоследовательности <> Неопределено
	  И ТаблицаСтаройРегистрацииВПоследовательности.Количество() > 0*/)
			{
				/*//Документ перепроводиться и уже был зарегистрирован в последовательности ранее  
*/
				/*СдвинутьГраницуПоследовательностиНазад(Дата, Ссылка, ТаблицаСтаройРегистрацииВПоследовательности, ТаблицаПоследовательностейДляРегистрации);*/
			}
		}

		public void УдалитьРегистрациюДокументаВПоследовательностяхНаСервере(/*ДокументСсылка, ПроверятьДвижения,ТаблицаСтаройРегистрацииВПоследовательности*/)
		{
			/*// получение списка последовательностей в которых зарегистрирован документ
*/
			if(true/*ПроверятьДвижения*/)
			{
				/*ТаблицаРегистраций = ОпределитьНаличиеРегистрацииДокументаВПоследовательности(ДокументСсылка);*/
			}
		}
		//УдалитьРегистрациюДокументаВПоследовательностях

		public object ОпределитьНаличиеРегистрацииДокументаВПоследовательности(/*ДокументСсылка*/)
		{
			/*ТекстЗапроса = "";*/
			/*КоллекцияПоследовательностей = Метаданные.Последовательности;*/
			/*МетаданныеДокумента = ДокументСсылка.Метаданные();*/
			if(true/*ТекстЗапроса = ""*/)
			{
			}
			return null;
		}
		//ОпределитьНаличиеРегистрацииДокументаВПоследовательности
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ДВИЖЕНИЙ ПО РЕГИСТРУ "ПАРТИИ ТОВАРОВ НА СКЛАДАХ"
		// Процедура формирует движения по регистру "Партии товаров на складах".
		//
		// Параметры:
		//  СтруктураШапкиДокумента – Структура - Реквизиты документа
		//	СтрокаВыборки - ВыборкаИзРезультатаЗапроса - Текущая строка выборки
		//	КодОперацииПартииТоваров - ПеречислениеСсылка.КодыОперацийПартииТоваров - Код операции
		//	Количество - Число - Количество номенклатуры
		//	Стоимость - Число - Учетная стоимость выпуска
		//	ПостояннаяРазница - Число - Учетная стоимость выпуска в части постоянной разницы
		//	ВременнаяРазница - Число - Учетная стоимость выпуска в части временной разницы
		//	ВидОтраженияВУчете - ПеречислениеСсылка.ВидыОтраженияВУчете - Вид отражения в учете
		//	НаборЗаписейПартииТоваровНаСкладах - РегистрНакопленияНаборЗаписей - Набор записей регистра накопления "Партии товаров на складах".
		//

		public void СформироватьСтрокуДвиженияПоРегиструПартииТоваровНаСкладах(/*
	СтруктураШапкиДокумента,
	СтрокаВыборки,
	КодОперацииПартииТоваров,
	Количество,
	Стоимость,
	ПостояннаяРазница,
	ВременнаяРазница,
	ВидОтраженияВУчете,
	НаборЗаписейПартииТоваровНаСкладах
	*/)
		{
			if(true/*Количество = 0 
	   И Стоимость = 0
	   И ПостояннаяРазница = 0
	   И ВременнаяРазница = 0*/)
			{
			}
			/*// Давальческое сырье не отражается в движениях регистра по налоговому учету.
*/
			if(true/*ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете
	   И СтрокаВыборки.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку*/)
			{
			}
			/*// В движениях по регистру "Партии товаров на складах" должны быть заполнены измерения:
*/
			/*//	- Номенклатура,
*/
			/*//	- СчетУчета - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
*/
			/*//	- Организация - заполняется только при отражении документа в бухгалтерском, налоговом или международном учете,
*/
			/*//	- Склад - заполняется, если ведется суммовой учет по складам
*/
			/*//		склад не заполняется для продукции, выпущенной из давальческого сырья (при указании заказа покупателя: переработка),
*/
			/*//	- ХарактеристикаНоменклатуры,
*/
			/*//	- СерияНоменклатуры - заполняется, если ведется партионный учет по сериям,
*/
			/*//	- ДокументОприходования - заполняется, если не используется способ списания МПЗ "По средней",
*/
			/*//	- СтатусПартии - заполняется только при отражении документа в управленческом учете,
*/
			/*//	- Заказ - заполняется, если в заказе покупателя указан договор с установленным флажком "Вести учет товаров по заказам покупателей"
*/
			/*//		или если указан заказ покупателя: переработка.
*/
			/*//	- Качество.
*/
			/*//
*/
			/*// В движениях должны быть заполнены реквизиты:
*/
			/*//	- КодОперации - записывается код операции "Выпуск по операции стоимость",
*/
			/*//	- ДокументДвижения - документ, движения которого корректируются по фактической стоимости.
*/
			/*// Сформируем движение по регистру "Партии товаров на складах".
*/
			/*НоваяСтрока = НаборЗаписейПартииТоваровНаСкладах.Добавить();*/
			/*НоваяСтрока.Активность = Истина;*/
			/*НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;*/
			/*НоваяСтрока.Период = СтруктураШапкиДокумента.Дата;*/
			/*ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаВыборки);*/
			if(true/*Не СтрокаВыборки.ВестиПартионныйУчетПоСериям*/)
			{
				/*НоваяСтрока.СерияНоменклатуры = Неопределено;*/
			}
			/*// Заполнение заказа зависит от вида отражения в учете.
*/
			if(true/*ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете*/)
			{
				/*ОрганизацияУпр = УправлениеЗапасами.ПолучитьОрганизациюВСоответствииСоСпособомВеденияПартионногоУчетаПоОрганизациям(
			СтруктураШапкиДокумента.Организация,
			СтруктураШапкиДокумента.СпособВеденияПартионногоУчетаПоОрганизации
		);*/
				/*НоваяСтрока.Организация = ОрганизацияУпр;*/
				if(true/*КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру*/)
				{
					/*НоваяСтрока.ДокументОприходования = СтрокаВыборки.ПриходныйОрдер;*/
				}
				if(true/*КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ПоступлениеПоОрдеру*/)
				{
					/*НоваяСтрока.СтатусПартии = Перечисления.СтатусыПартийТоваров.ПоОрдеру;*/
				}
				if(true/*глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам
		   И (Не СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваРасч
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВозвратМатериаловИзПроизводстваФикс
			ИЛИ КодОперацииПартииТоваров = Перечисления.КодыОперацийПартииТоваров.ВыпускПродукцииФиксНаСклад)*/)
				{
					/*НоваяСтрока.Склад = СтрокаВыборки.СкладПолучатель;*/
				}
			}
			if(true/*СтрокаВыборки.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка
	 ИЛИ СтрокаВыборки.ОбособленныйУчетТоваровПоЗаказамПокупателей*/)
			{
				/*НоваяСтрока.Заказ = СтрокаВыборки.ЗаказРезерв;*/
			}
			/*НоваяСтрока.КодОперации = КодОперацииПартииТоваров;*/
			/*НоваяСтрока.ДокументДвижения = СтрокаВыборки.ДокументВыпуска;*/
			/*НоваяСтрока.СписаниеПартий = Истина;*/
			/*НоваяСтрока.Количество = Количество;*/
			/*НоваяСтрока.Стоимость = Стоимость;*/
			if(true/*ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете
	   И СтруктураШапкиДокумента.ОтражатьВНалоговомУчете*/)
			{
				/*НоваяСтрока.ПостояннаяРазница = ПостояннаяРазница;*/
				/*НоваяСтрока.ВременнаяРазница = ВременнаяРазница;*/
			}
		}
	}
}

