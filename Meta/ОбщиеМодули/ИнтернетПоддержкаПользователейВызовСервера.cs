using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class ИнтернетПоддержкаПользователейВызовСервера
	{
		///////////////////////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С ОБРАБОТКАМИ
		// Процедура записывает из двоичных данных файл обработки в константу.
		//
		// Параметры:
		//	ДвоичныеДанныеОбработки - ДвоичныеДанные - двоичные данные обработки.
		//

		public void ЗаписатьФайлОбработкиВКонстанту(/*ДвоичныеДанныеОбработки*/)
		{
			if(true/*ДвоичныеДанныеОбработки <> Неопределено*/)
			{
				/*Константы.ФайлОбработкиИнтернетПоддержкиПользователей.Установить(Новый ХранилищеЗначения(ДвоичныеДанныеОбработки));*/
			}
		}
		// Функция определеяет версию обработки механизма интернет-поддержки пользователей.
		//
		// Возвращаемое значение - Неопределено или Строка - версия обработки.
		//

		public object ПолучитьВерсиюОбработки(/**/)
		{
			/*ФайлОбработки = Константы.ФайлОбработкиИнтернетПоддержкиПользователей.Получить().Получить();*/
			if(true/*ФайлОбработки = Неопределено*/)
			{
			}
			/*Попытка
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");*/
			/*ФайлОбработки.Записать(ИмяВременногоФайла);*/
			/*ВнешняяОбработка = ВнешниеОбработки.Создать(ИмяВременногоФайла);*/
			/*Версия = ВнешняяОбработка.ВерсияМеханизмаИнтернетПоддержкиПользователей();*/
			/*Исключение
		Возврат Неопределено;*/
			/*КонецПопытки;*/
			return null;
		}
		///////////////////////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ ПО РАБОТЕ С НАСТРОЙКАМИ ПОЛЬЗОВАТЕЛЕЙ
		// Устанавливает настройку "ПовторитьПопыткуПодключенияПриСтартеПрограммы", которая не позволяет "стучаться" механизму
		// до появления связи.
		//
		// Параметры:
		//	УстанавливатьНастройку - Булево - установить или сбросить "ПовторитьПопыткуПодключенияПриСтартеПрограммы".
		//

		public void УстановитьНастройкуПовторитьПопыткуПодключенияПриСтартеПрограммы(/*УстанавливатьНастройку*/)
		{
			/*ХранилищеОбщихНастроек.Сохранить("ИнтернетПоддержкаПользователей", "ПовторитьПопыткуПодключенияПриСтартеПрограммы", УстанавливатьНастройку);*/
		}
		// Возвращает настройку "ПовторитьПопыткуПодключенияПриСтартеПрограммы".
		//
		// Возвращаемое значение - Неопределено или Булево - напоминать об отсутствии связи.
		//

		public object ПолучитьНастройкуПовторитьПопыткуПодключенияПриСтартеПрограммы(/**/)
		{
			/*ПовторитьПопыткуПодключенияПриСтартеПрограммы = ХранилищеОбщихНастроек.Загрузить("ИнтернетПоддержкаПользователей", "ПовторитьПопыткуПодключенияПриСтартеПрограммы");*/
			return null;
		}
		///////////////////////////////////////////////////////////////////////////////////////////////////
		// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
		// Процедура получает, если есть логин и пароль из инетрнет-поддрежки пользователей.
		//
		// Параметры:
		//	Логин - Строка - логин.
		//	Пароль - Строка - пароль.
		//

		public void ЗагрузкаЛогинаИПароляИзПараметровИнтернетПоддержкиПользователей(/*Логин = "", Пароль = ""*/)
		{
			/*Фильтр = Новый Структура("Имя", "login");*/
			/*Выборка = РегистрыСведений.ПараметрыИнтернетПоддержкиПользователей.Выбрать(Фильтр);*/
			while(true/*Выборка.Следующий()*/)
			{
				if(true/*ПустаяСтрока(Выборка.БизнесПроцесс)*/)
				{
					/*Логин = Выборка.Значение;*/
					/*Прервать;*/
				}
			}
			/*;	
	
	Фильтр = Новый Структура("Имя", "password");*/
			/*Выборка = РегистрыСведений.ПараметрыИнтернетПоддержкиПользователей.Выбрать(Фильтр);*/
			while(true/*Выборка.Следующий()*/)
			{
				if(true/*ПустаяСтрока(Выборка.БизнесПроцесс)*/)
				{
					/*Пароль = Выборка.Значение;*/
					/*Прервать;*/
				}
			}
			/*;;*/
		}
		// Процедура записывает в журнал регистрации код ошибки.
		//
		// Параметры:
		//	КодОшибки - Строка - код ошибки.
		//

		public void ЗаписатьОшибкуВЖурналРегистрации(/*Ошибка*/)
		{
			/*ИмяСобытия	= НСтр("ru = 'Интернет-поддержка пользователей: Ошибка'");*/
			/*ЗаписьЖурналаРегистрации(ИмяСобытия, УровеньЖурналаРегистрации.Ошибка, , , Ошибка);*/
		}
		// Возвращает запускать или нет механизм или нет.
		//
		// Возвращаемое значение - Булево - Истина, если запускать, Ложь - иначе.
		//

		public object ЗапускатьМеханизмПриСтарте(/**/)
		{
			/*ПовторитьПопыткуПодключенияПриСтартеПрограммы	= ХранилищеОбщихНастроек.Загрузить("ИнтернетПоддержкаПользователей", "ПовторитьПопыткуПодключенияПриСтартеПрограммы");*/
			/*ПовторитьПопыткуПодключенияПриСтартеПрограммы	= ?(ПовторитьПопыткуПодключенияПриСтартеПрограммы = Неопределено, Истина, ПовторитьПопыткуПодключенияПриСтартеПрограммы);*/
			/*ВсегдаПоказыватьПриСтартеПрограммы				= ХранилищеОбщихНастроек.Загрузить("ИнтернетПоддержкаПользователей", "ВсегдаПоказыватьПриСтартеПрограммы");*/
			/*ВсегдаПоказыватьПриСтартеПрограммы				= ?(ВсегдаПоказыватьПриСтартеПрограммы= Неопределено, Истина, ВсегдаПоказыватьПриСтартеПрограммы);*/
			return null;
		}
		// Процедура сохранения стартовых параметров в регистре сведений
		// при запуске механизма
		//
		// Параметры
		// СтруктураСтартовыхПараметров - структура Ключ - имя параметра
		//                                значение - значение параметра во временном хранилище
		// ОбластьВидимости - область видимости параметра

		public void СохранитьСтартовыеПараметры(/*СтруктураСтартовыхПараметров, ОбластьВидимости*/)
		{
		}
	}
}

