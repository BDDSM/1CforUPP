using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class ПроцедурыПерсонифицированногоУчета
	{
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ ПРЕОБРАЗОВАНИЯ ЗНАЧЕНИЯ
		//Преобразует дату в формат, требуемый правилами подготовки документов в ПФ РФ

		public object ДатаВФайл(/*Знач ДатавФайл*/)
		{
			if(true/*ЗначениеЗаполнено(ДатавФайл)*/)
			{
				//Возврат """" + Формат(ДатавФайл, "ДФ='дд/ММ/гггг'") + """";
			}
			return null;
		}
		//Преобразует строку отчета, содержащую дату в вормате "ДД/ММ/ГГГГ", в значение типа "Дата"

		public object ДатаИзФайла(/*Знач ДатаИзФайла*/)
		{
			//Число = Сред(ДатаИзФайла,1,2);
			//Месяц = Сред(ДатаИзФайла,4,2);
			//Год = Сред(ДатаИзФайла,7,4);
			return null;
		}
		//Преобразует строку в число

		public object ЧислоИзФайла(/*Знач ЧислоИзФайла*/)
		{
			return null;
		}
		//Преобразует дату в формат, необходимый для печатных форм сведений в ПФР: "ДД" месяц ГГГГ

		public object ДатаВОтчет(/*Знач Дата*/)
		{
			if(true/*(ТипЗнч(Дата) = Тип("Дата"))и(Дата <> Дата('00010101'))*/)
			{
				//Стр = Формат(Дата,"ДФ='дд ММММ гггг'") + " года";
			}
			return null;
		}
		//Разбивает строку значений, разделенных запятыми, на элементы с учётом пар ограничительных символов

		public object РазложитьСтрокуФайлаСведенийПФР(/*Знач Стр,Разделитель = ",",Ограничитель = """"*/)
		{
			/*//Первый проход: определяем позиции пар ограничителей
*/
			//ДлинаСтроки = СтрДлина(Стр);
			//МассивПозицииОграничителя = Новый Массив();
			//КопияСтр = Стр;
			//ТекИндекс =0;
			while(true/*Истина*/)
			{
				/*//поиск первого ограничетеля
*/
				//НачПоз = Найти(КопияСтр,Ограничитель);
				if(true/*НачПоз =0*/)
				{
				}
				//ТекИндекс = ТекИндекс+НачПоз;
				//МассивПозицииОграничителя.Добавить(ТекИндекс);
				//КопияСтр = Сред(КопияСтр,НачПоз+1);
				/*//двигаемся вперед по строке
*/
				/*//поиск второго ограничителя
*/
				//КонПоз = Найти(КопияСтр,Ограничитель);
				if(true/*КонПоз = 0*/)
				{
					//КонПоз = ДлинаСтроки +1;
				}
				//ТекИндекс = ТекИндекс+КонПоз;
				//МассивПозицииОграничителя.Добавить(ТекИндекс);
				//КопияСтр = Сред(КопияСтр,КонПоз+1);
				/*//двигаемся вперед по строке
*/
			}
			/*;	
	КоличествоПарОграничителей = МассивПозицииОграничителя.Количество()/2;*/
			/*//Второй проход: раскладываем строку на элементы, разделенные символом "Разделитель"
*/
			//МассивСтрок = Новый Массив();
			//ГоловаЭлемента = "";
			//ТекИндекс =0;
			//ДлинаРазделителя = СтрДлина(Разделитель);
			while(true/*Истина*/)
			{
				//Поз = Найти(Стр,Разделитель);
				if(true/*Поз=0*/)
				{
					//МассивСтрок.Добавить(ГоловаЭлемента+Стр);
				}
				/*//Если позиция разделителя находится внутри пары ограничителей, то данный разделитель не учитываем
*/
				//ВнутриОграничителей = Ложь;
				if(true/*ВнутриОграничителей*/)
				{
					//ГоловаЭлемента = ГоловаЭлемента + Лев(Стр,Поз);
					//Стр = Сред(Стр,Поз+1);
				}
				/*//Идём дальше по строке
*/
				//ТекИндекс = ТекИндекс+Поз;
			}
			/*//Убираем ограничители
*/
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		//Приводит стаж к нормальному виду, когда месяцев не более 12, дней не более 30

		public void ПолучитьПриведенныйСтаж(/*Лет, Месяцев, Дней*/)
		{
			//ДнейВГоду 		= 12 * 30;
			//ВсегоДней 		= Лет*ДнейВГоду + Месяцев*30 + Дней;
			//Лет 			= Цел(ВсегоДней / ДнейВГоду);
			//ОстатокДней 	= ВсегоДней - Лет * ДнейВГоду;
			//Месяцев			= Цел(ОстатокДней / 30);
			//Дней			= ОстатокДней % 30;
		}
		//Вычисляет разность между двумя датами: в годах, месяцах, днях

		public void ПолучитьСтажЗаПериод(/*Знач ДатаОкончанияПериода, Знач ДатаНачалаПериода, Лет=0, Месяцев=0, Дней=0*/)
		{
			if(true/*ДатаОкончанияПериода >= ДатаНачалаПериода*/)
			{
				//Лет1		=	Год(ДатаОкончанияПериода);
				//Месяцев1	=	Месяц(ДатаОкончанияПериода);
				if(true/*НачалоДня(ДатаОкончанияПериода) <> НачалоДня(КонецМесяца(ДатаОкончанияПериода))*/)
				{
					//Дней1		=	День(ДатаОкончанияПериода);
				}
				//Лет2		=	Год(ДатаНачалаПериода);
				//Месяцев2	=	Месяц(ДатаНачалаПериода);
				if(true/*НачалоДня(ДатаНачалаПериода) <> НачалоДня(КонецМесяца(ДатаНачалаПериода))*/)
				{
					//Дней2		=	День(ДатаНачалаПериода);
				}
				//Лет		=	Лет1		-	Лет2;
				//Месяцев	=	Месяцев1	-	Месяцев2;
				//Дней	=	Дней1		-	Дней2 + 1;
				/*//1 день на увольнение
*/
			}
		}
		//ПолучитьСтажЗаПериод

		public object ПолучитьПорядокВключенияПериодаВСтраховойСтаж(/*ВидПособияСоциальногоСтрахования = Неопределено, ВидВремени = Неопределено, ОбозначениеВТабелеУчетаРабочегоВремени = Неопределено*/)
		{
			//ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.ПустаяСсылка();
			if(true/*ВидПособияСоциальногоСтрахования = Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды 
		ИЛИ ОбозначениеВТабелеУчетаРабочегоВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ОтпускПоБеременностиИРодам*/)
			{
				//ВидСтажаСЗВ4 = Перечисления.ВидыСтажаСЗВ4.Декрет;
			}
			return null;
		}
		// ПолучитьПорядокВключенияПериодаВСтраховойСтаж()
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ВЫХОДНЫХ ФАЙЛОВ СВЕДЕНИЙ
		//Вовращает номер пачки документа

		public object НомерПачкиДокумента(/*Знач НомерДокумента*/)
		{
			//НомерПачки = "";
			//НомерДокумента = СокрП(НомерДокумента);
			/*//Возьмём все цифры в правой части номера
*/
			//ДлинаНомера = СтрДлина(НомерДокумента);
			if(true/*НомерПачки <> ""*/)
			{
				//Возврат Формат(Число(Прав(НомерПачки, 5)), "ЧГ=0");
			}
			return null;
		}
		//Формирует имя выходного файла сведений в ПФ РФ

		public object ПолучитьИмяФайлаПФ(/*Документ, ГодПредставленияСведений, Знач ВыборкаПоШапкеДокумента = Неопределено*/)
		{
			if(true/*ВыборкаПоШапкеДокумента = Неопределено*/)
			{
				//ИмяТаблицы = Документ.Метаданные().Имя;
				/*// Формируем запрос и получаем необходимые данные
*/
				//Запрос = Новый Запрос;
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокПерсучета.Номер,
		|	ДокПерсучета.НомерПачки,
		|	ДокПерсучета.Организация,
		|	ДокПерсучета.Организация.РегистрационныйНомерПФР,
		|	ДокПерсучета.ФорматФайла КАК ФорматФайла
		|ИЗ
		|	Документ." + ИмяТаблицы + " КАК ДокПерсучета
		|ГДЕ
		|	ДокПерсучета.Ссылка = &ДокументСсылка";*/
				//Запрос.УстановитьПараметр("ДокументСсылка", Документ.Ссылка);
				//ВыборкаПоШапкеДокумента = Запрос.Выполнить().Выбрать();
				if(true/*Не ВыборкаПоШапкеДокумента.Следующий()*/)
				{
				}
			}
			//НомерПачки = СокрЛП(ВыборкаПоШапкеДокумента.НомерПачки);
			//ФорматФайла = ВыборкаПоШапкеДокумента.ФорматФайла;
			//РегНомерПФР = ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР;
			//СтрНомПачки = Прав("100000"+НомерПачки,5);
			if(true/*ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04*/)
			{
				//ИмяФайла = Прав(РегНомерПФР,6) + Лев(СтрНомПачки,2) + "." + Прав(СтрНомПачки,3);
			}
			return null;
		}
		//Возвращает заполненную "запись-заголовок" для выходного файла сведений в ПФ РФ

		public object ПолучитьЗаписьЗаголовок(/**/)
		{
			/*// программа подготовки данных
*/
			//+ """" + РегламентированнаяОтчетность.РедакцияКонфигурации() + """";
			/*// Версия программы подготовки
*/
			return null;
		}
		//Возвращает заполненную "запись о пачке" для выходного файла сведений в ПФ РФ

		public object ПолучитьЗаписьОПачке(/*НомерПачки,ДатаСоставленияОписи,ТипСведений,ВидКорректировки,РасчетныйПериодГод="0", Категория = "", ТУ = "", СтаховаяЧасть = 0, НакопительнаяЧасть = 0 */)
		{
			/*// Номер пачки, присвоенный работодателем
*/
			/*// Тип пачки
*/
			/*// Тип описи
*/
			/*// Число типов документов в пачке
*/
			/*// Расчетный период:	год
*/
			/*// Код категории застрахованного лица 
*/
			/*// Код дополнительного тарифа
*/
			/*// Территориальные условия (код) 
*/
			/*// Тип сведений
*/
			/*// Вид корректировки
*/
			/*// Отчетный период квартал
*/
			/*// Отчетный период год
*/
			/*// Всего начислено
*/
			/*// пособие по временной нетрудоспособности
*/
			/*// сумма начисленных страховых взносов на страховую часть
*/
			/*// сумма начисленных страховых взносов на накопительную часть
*/
			/*// сумма начисленных страховых взносов по дополнительному тарифу
*/
			/*// Исходящий номер СПУ:	Код подразделения	
*/
			//+ ",0";
			/*// Исходящий номер
*/
			return null;
		}
		//Возвращает заполненную "запись о типе документа" для выходного файла сведений в ПФ РФ

		public object ПолучитьЗаписьОТипеДокумента(/*ТипДокумента,КоличествоДокументов*/)
		{
			/*СтрокаВФайл = """ТИПД"",""" 
	+ ТипДокумента + """," 
	+ КоличествоДокументов;*/
			return null;
		}
		//Возвращает заполненную "запись о работодателе" для выходного файла сведений в ПФ РФ

		public object ПолучитьЗаписьОРаботодателе(/*Организация, ДатаАктуальности, Отказ*/)
		{
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("Организация", Организация);
			//Запрос.УстановитьПараметр("ДатаАктуальности", ДатаАктуальности);
			//Запрос.УстановитьПараметр("ЭтоФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	Организации.ИНН,
	|	ВЫБОР
	|		КОГДА Организации.ЮрФизЛицо = &ЭтоФизЛицо
	|			ТОГДА ""0""
	|		ИНАЧЕ Организации.КПП
	|	КОНЕЦ КАК КПП,
	|	Организации.РегистрационныйНомерПФР,
	|	Организации.Наименование КАК НаименованиеОрганизации,
	|	Организации.ЮрФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	Справочник.Организации КАК Организации
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо = &Организация) КАК ФИОФизЛицСрезПоследних
	|		ПО ФИОФизЛицСрезПоследних.ФизЛицо = Организации.Ссылка
	|ГДЕ
	|	Организации.Ссылка = &Организация";*/
			//Выборка = Запрос.Выполнить().Выбрать();
			if(true/*Выборка.Следующий()*/)
			{
				if(true/*Выборка.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо*/)
				{
					/*// Для предпринимателя 
*/
					if(true/*НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(Выборка.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо)*/)
					{
						//ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя неверно введен ИНН!", Отказ);
					}
					if(true/*Выборка.Фамилия <> NULL*/)
					{
						//ФИО = СокрЛП(Выборка.Фамилия + " " + Выборка.Имя + " " + Выборка.Отчество);
					}
					if(true/*РегламентированнаяОтчетность.СтрокаНаписанаПоРусски(ФИО)=0*/)
					{
						//ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя Фамилия, Имя, Отчество должно быть введены русскими буквами!", Отказ);
					}
					if(true/*Найти(ФИО, " ")=0*/)
					{
						//ОбщегоНазначения.СообщитьОбОшибке("Для физического лица-работодателя должны быть указаны, как минимум, фамилия и имя!", Отказ);
					}
					//НаименованиеОрганизации = ФИО;
				}
				if(true/*СокрЛП(Выборка.РегистрационныйНомерПФР) = ""*/)
				{
					//ОбщегоНазначения.СообщитьОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Для организации не указан регистрационный номер в ПФР !"), Отказ);
				}
				/*СтрокаВФайл = """РБТД"",""РБТД"","  
		+ """" + Выборка.РегистрационныйНомерПФР + """," 
		+ Выборка.ИНН + ","  
		+ Выборка.КПП + ","  
		+ """" + СтрЗаменить(СокрЛП(Выборка.НаименованиеОрганизации), """", "'") + """";*/
			}
			return null;
		}
		//Разбирает переданные данные о месте рождения и заполняет соответствующие поля записи,
		//выводимой в файл сведений для ПФ РФ

		public void ВписатьВЗаписьМестоРождения(/*Запись, Знач МестоРождения*/)
		{
			//МестоРождения = РегламентированнаяОтчетность.РазложитьМестоРождения(МестоРождения);
			//Запись.ТипМестаРождения = ?(МестоРождения.Особое = 1, "ОСОБОЕ", "СТАНДАРТ");
			//Запись.МестоРожденияНаселенныйПункт = МестоРождения.НаселенныйПункт;
			//Запись.МестоРожденияРайон = МестоРождения.Район;
			//Запись.МестоРожденияОбласть = МестоРождения.Область;
			//Запись.МестоРожденияСтрана = МестоРождения.Страна;
		}
		//Разбирает переданные данные о документе, удостоверяющем личность, и заполняет
		//соответствующие поля записи, выводимой в файл сведений для ПФ РФ

		public void ВписатьВЗаписьДокумент(/*Запись, ТекущиеДанные*/)
		{
			//СерииДокумента = РегламентированнаяОтчетность.РазложитьСериюДокумента(ТекущиеДанные.ДокументВид,ТекущиеДанные.ДокументСерия);
			if(true/*ЗначениеЗаполнено(ТекущиеДанные.ДокументВид)*/)
			{
				//Запись.ДокументВид = ТекущиеДанные.ДокументВидКодПФР;
			}
			//Запись.ДокументНаименование = ТекущиеДанные.ДокументВидКодПФР;
			//Запись.ДокументСерияРимскиеЦифры = СерииДокумента.Часть1;
			//Запись.ДокументСерияРусскиеБуквы = СерииДокумента.Часть2;
			//Запись.ДокументНомер = ТекущиеДанные.ДокументНомер;
			//Запись.ДокументДатаВыдачи = ТекущиеДанные.ДокументДатаВыдачи;
			//Запись.ДокументКемВыдан = ТекущиеДанные.ДокументКемВыдан;
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ ПРЕДОСТАВЛЕНИЯ ПОЛЬЗОВАТЕЛЯМ ФАЙЛОВ СВЕДЕНИЙ
		//
		//Предоставляет сформированный файл сведений документа для просмотра

		public void ПоказатьФайлДокумента(/*ДокументОбъект, ЗаголовокОкна*/)
		{
			//Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
			if(true/*НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос)*/)
			{
			}
			//ЕстьОшибки = Ложь;
			//ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект,ЕстьОшибки);
			if(true/*ЕстьОшибки*/)
			{
			}
			//ТекстовыйДокумент = Новый ТекстовыйДокумент;
			//ТекстовыйДокумент.УстановитьТекст(ТекстФайла);
			//ТекстовыйДокумент.Показать(ЗаголовокОкна, "Файл сведений");
		}
		//Записывает файл сведений документа в каталог, указанный пользователем

		public void ЗаписатьФайлДокументаНаДискету(/*ДокументОбъект, ТекущийПользователь, ИмяФайла, Знач КодировкаФайла = Неопределено, ВыбиратьКаталог = Истина, ТекстОповещения = ""*/)
		{
			//Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
			if(true/*НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект,Вопрос)*/)
			{
			}
			//ЕстьОшибки = Ложь;
			//ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект,ЕстьОшибки);
			if(true/*ЕстьОшибки*/)
			{
			}
			if(true/*ВыбиратьКаталог*/)
			{
				//Длг = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.ВыборКаталога);
				//Длг.Каталог = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(ТекущийПользователь,"ОсновнойКаталогФайлов");
				//Длг.Заголовок = "Укажите каталог";
				if(true/*Длг.Выбрать()*/)
				{
					//ИмяФайла = Длг.Каталог+"\" + ИмяФайла;
					//ТекстовыйДокумент = Новый ТекстовыйДокумент;
					//ТекстовыйДокумент.УстановитьТекст(ТекстФайла);
					if(true/*КодировкаФайла = Неопределено*/)
					{
						//КодировкаФайла = "windows-1251";
					}
					//ТекстовыйДокумент.Записать(ИмяФайла,КодировкаФайла);
					if(true/*Не ЗначениеЗаполнено(ТекстОповещения)*/)
					{
						//ТекстОповещения = "Файл-пачка записан под именем: ";
					}
					//Предупреждение(ТекстОповещения + ИмяФайла);
				}
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ФАЙЛА ИНДИВИДУАЛЬНЫХ СВЕДЕНИЙ ПФР XML ФОРМАТ 7.0
		/////////////////////////////////////
		// XML STREAM
		/////////////////////////////////////
		// Создает и возвращает объект ЗаписьXML, для создания XML документа

		public object СоздатьПотокXML(/*ИмяФайла = Неопределено*/)
		{
			//ПотокXML = Новый ЗаписьXML();
			//ПотокXML.УстановитьСтроку("windows-1251");
			//ПотокXML.Отступ = Истина;
			if(true/*ИмяФайла <> Неопределено*/)
			{
				//ПотокXML.ОткрытьФайл(ИмяФайла, "windows-1251");
			}
			//ПотокXML.ЗаписатьОбъявлениеXML();
			return null;
		}
		// Сохраняет документ XML  на диск и закрывает запись XML

		public object ЗаписатьПотокXML(/*ПотокXML*/)
		{
			return null;
		}
		/////////////////////////////////////
		// XML TREE
		/////////////////////////////////////
		// Возвращает Истина если строка дерева представляет атрибуты XML узла

		public object СтрокаСАтрибутами(/*СтрокаДереваXML*/)
		{
			//Возврат СтрокаДереваXML.Имя = "АтрибутыXMLУзла";
			return null;
		}
		// Ищет и возвращает атрибут XML узла по имени

		public object НайтиАтрибуты(/*СтрокаДереваXML*/)
		{
			return null;
		}
		// КОМПОЗИЦИЯ ДЕРЕВА
		// Создает объект дерево значений, представляющее XML файл

		public object СоздатьДеревоXML(/**/)
		{
			//НовоеДеревоXML = Новый ДеревоЗначений;
			//НовоеДеревоXML.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
			//НовоеДеревоXML.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
			return null;
		}
		// Добавляет узел в дерево XML, устанавливая его атрибуты

		public object ДобавитьУзелВДеревоXML(/*Ветка, Имя, Значение, СписокАтрибутов = Неопределено*/)
		{
			//НовыйУзел = Ветка.Строки.Добавить();
			//НовыйУзел.Имя = Имя;
			//НовыйУзел.Значение = Значение;
			if(true/*СписокАтрибутов <> Неопределено*/)
			{
				//ВеткаАтрибутов = НовыйУзел.Строки.Добавить();
				//ВеткаАтрибутов.Имя = "АтрибутыXMLУзла";
				//ВеткаАтрибутов.Значение = Неопределено;
			}
			return null;
		}
		// ИМПОРТ / ЭКСПОРТ ДЕРЕВА
		// записывает значения из дерева значение в поток связянный с файлом XML

		public void ЗаписатьУзелДереваXMLВXMLдляПФР(/*СтрокаДерева, ПотокXML, ПрефиксПространстваИмен = Неопределено, URIПространстваИмен = Неопределено*/)
		{
			if(true/*ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений")*/)
			{
				if(true/*НЕ ПустаяСтрока(СтрокаДерева.Имя)*/)
				{
					//ПотокXML.ЗаписатьНачалоЭлемента(СтрЗаменить(СтрокаДерева.Имя,"__","-"));
					if(true/*ПрефиксПространстваИмен <> Неопределено И URIПространстваИмен <> Неопределено*/)
					{
						//ПотокXML.ЗаписатьСоответствиеПространстваИмен(ПрефиксПространстваИмен, URIПространстваИмен);
					}
					//СписокАтрибутов = НайтиАтрибуты(СтрокаДерева);
					if(true/*СписокАтрибутов <> Неопределено*/)
					{
					}
					//ПотокXML.ЗаписатьТекст(?(СтрокаДерева.Значение = "00.00.0000", "", СтрокаДерева.Значение));
				}
			}
			if(true/*ТипЗнч(СтрокаДерева) = Тип("СтрокаДереваЗначений")*/)
			{
				if(true/*НЕ ПустаяСтрока(СтрокаДерева.Имя)*/)
				{
					//ПотокXML.ЗаписатьКонецЭлемента();
				}
			}
		}
		// добавляет реквизит в дерево значений, представляющее XML файл

		public void ДобавитьИнформациюВДерево(/*ДеревоВыгрузки, НаборЗаписей*/)
		{
			//ПустаяДата = Дата(1,1,1);
		}
		// Возвращаент копию переданной структуры данных.

		public object СкопироватьСтруктуруДанных(/*КоллекцияИсходная*/)
		{
			//ТипЗначения = ТипЗнч(КоллекцияИсходная);
			if(true/*ТипЗначения=Тип("Структура")*/)
			{
				//КоллекцияКопия=Новый Структура;
			}
			return null;
		}
		//Возвращает формат записи файла сведений в виде таблицы с именами и типами полей

		public object ПолучитьФорматЗаписиПФР(/*Знач МакетФормата, Знач ИмяЗаписи*/)
		{
			//ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
			//ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
			//ТаблицаФормаЗаписи.Колонки.Добавить("ТипДанных",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
			//ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
			//ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
			//ТаблицаФормаЗаписи.Колонки.Добавить("ЭлементНеОбязателен");
			//ОбластьФорматЗаписи = МакетФормата.ПолучитьОбласть(ИмяЗаписи);
			return null;
		}
		// Загружает формат набора записей файла сведений о доходах физлиц из заданного табличного документа

		public object ЗагрузитьФорматНабораЗаписейдляПФР(/*Знач МакетФормата, Знач ИмяНабораЗаписей, НомерВыбираемогоЭлемента = 1*/)
		{
			//ФорматНабора = Новый Структура();
			//ОбластьНабораЗаписей = МакетФормата.ПолучитьОбласть(ИмяНабораЗаписей);
			return null;
		}
		// ЗагрузитьФорматНабораЗаписей()
		// Процедура устанавливает заголовочные параметры файла выгрузки XML формата 07.00
		//

		public void ЗаполнитьИмяИЗаголовокФайла(/*УзелПФР, МакетФормата, ИмяФайла*/)
		{
			/*// добавляем реквизит ИмяФайла
*/
			//НаборЗаписейИмяФайла = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ИмяФайла");
			//НаборЗаписейИмяФайла.ИмяФайла.Значение = ИмяФайла;
			//ДобавитьИнформациюВДерево(УзелПФР, НаборЗаписейИмяФайла);
			/*// Добавляем Реквизит заголовок файла
*/
			//НаборЗаписейЗаголовокФайла = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ЗаголовокФайла");
			//НаборЗаписейПрограммаПодготовкиДанных = НаборЗаписейЗаголовокФайла.ПрограммаПодготовкиДанных.Значение;
			//НаборЗаписейПрограммаПодготовкиДанных.Версия = РегламентированнаяОтчетность.РедакцияКонфигурации();
			//НаборЗаписейПрограммаПодготовкиДанных.НазваниеПрограммы = РегламентированнаяОтчетность.ИДКонфигурации();
			//ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПФР, "ЗаголовокФайла", ""), НаборЗаписейЗаголовокФайла);
		}
		// ЗаполнитьИмяИЗаголовокФайла()
		// Функция устанавливает значения реквизитов XML узла ВходящаяОпись
		//

		public object ЗаполнитьНаборЗаписейВходящаяОпись(/*УзелПФР, МакетФормата, ТипДокумента, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, НомерДокументаВПачке, УзелПачкаСЗВ4 = Неопределено, НаборЗаписейИтогоСуммаВзносов = Неопределено, ТегВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ", ЗаменятьБуквуЕ = Истина*/)
		{
			/*// устанавливаем значение номер пачки
*/
			//НаборЗаписейВходящаяОпись = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, ТегВходящейОписи, 1);
			//НаборЗаписейВходящаяОпись.НомерПачки.Значение.Основной = НомерПачки;
			//НаборЗаписейВходящаяОпись.НомерВПачке.Значение = НомерДокументаВПачке;
			/*// Составитель пачки
*/
			//НаборЗаписейСоставительПачки = НаборЗаписейВходящаяОпись.СоставительПачки.Значение;
			//ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкаПоШапкеДокумента, ЗаменятьБуквуЕ);
			//НаборЗаписейСоставДокументов = НаборЗаписейВходящаяОпись.СоставДокументов.Значение;
			//НаборЗаписейСоставДокументов.Количество.Значение = 1;
			//НаборЗаписейНаличиеДокументов = НаборЗаписейСоставДокументов.НаличиеДокументов.Значение;
			//НаборЗаписейНаличиеДокументов.ТипДокумента = ТипДокумента;
			//НаборЗаписейНаличиеДокументов.Количество = КоличествоДокументов;
			//НаборЗаписейВходящаяОпись.ДатаСоставления.Значение = ВыборкаПоШапкеДокумента.Дата;
			if(true/*ТипДокумента = "ИС_СЗВ-4-1" Или ТипДокумента = "ИС_СЗВ-4-2"*/)
			{
				//НаборЗаписейПачкаСЗВ4 = НаборЗаписейВходящаяОпись.ПачкаСЗВ4.Значение;
				//НаборЗаписейПачкаСЗВ4.РасчетныйПериод.Значение = ВыборкаПоШапкеДокумента.Год;
				//НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.КодКатегории = ВыборкаПоШапкеДокумента.КодОсновногоТарифа;
				if(true/*ВыборкаПоШапкеДокумента.КодОсновногоТарифа = "НР"*/)
				{
					//НаборЗаписейПачкаСЗВ4.ТарифСтраховыхВзносов.Значение.НазваниеКатегории = "НАЕМ/РАБОТНИК";
				}
				if(true/*ТипДокумента = "ИС_СЗВ-4-1"*/)
				{
					//НаборЗаписейПачкаСЗВ4.Удалить("ТерриториальныеУсловия");
				}
				//НаборЗаписейПачкаСЗВ4.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
				if(true/*ВыборкаПоШапкеДокумента.ВидКорректировки = "КОРР"*/)
				{
					//НаборЗаписейПачкаСЗВ4.ВидКорректировки.Значение = "КОРРЕКТИРУЮЩАЯ";
				}
				//УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
				//УзелВходящаяОпись = ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,"");
				//НаборЗаписейИтогоСуммаВзносов = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "СтраховыеВзносы");
				//НаборЗаписейПачкаСЗВ4.Удалить("ИтогоСуммаВзносов");
				//ДобавитьИнформациюВДерево(УзелВходящаяОпись, НаборЗаписейВходящаяОпись);
				//УзелПачкаСЗВ4 = УзелВходящаяОпись.Строки[6];
			}
			return null;
		}
		// ЗаполнитьНаборЗаписейВходящаяОпись()

		public void ЗаменитьБуквуЁ(/*РедактируемаяСтрока, НазваниеРеквизита, ВыводитьПредупреждение = Истина*/)
		{
			if(true/*Найти(ВРег(РедактируемаяСтрока), "Ё") > 0*/)
			{
				if(true/*ВыводитьПредупреждение*/)
				{
					//ОбщегоНазначения.СообщитьОбОшибке("В реквизите """ + НазваниеРеквизита + """ (" + РедактируемаяСтрока +") буква Ё заменена на Е.");
				}
				//РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "Ё", "Е");
				//РедактируемаяСтрока = СтрЗаменить(РедактируемаяСтрока, "ё", "е");
			}
		}
		// ЗаменитьБуквуЁ()
		// Процедура заполняет реквизиты файла - сведения об организации
		//

		public void ЗаполнитьСоставительПачки(/*НаборЗаписейСоставительПачки, ВыборкапоШапкеДокумента, ЗаменятьБуквуЕ = Истина*/)
		{
			if(true/*ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо*/)
			{
				//НаборЗаписейСоставительПачки.КодЕГРИП.Значение = СокрЛП(ВыборкаПоШапкеДокумента.ОрганизацияОГРН);
				//НаборЗаписейСоставительПачки.Удалить("КодЕГРЮЛ");
			}
			//НаборЗаписейСоставительПачки.Форма.Значение = ВРег(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеОКОПФ, 40));
			if(true/*ЗаменятьБуквуЕ*/)
			{
				//ЗаменитьБуквуЁ(НаборЗаписейСоставительПачки.Форма.Значение, "Организационно-правовая форма по ОКОПФ");
			}
			//НомерПФР = СтрЗаменить(ВыборкаПоШапкеДокумента.ОрганизацияРегистрационныйНомерПФР, " ", "");
			if(true/*СтрДлина(НомерПФР) <> 14*/)
			{
				//НомерПФР = Лев(НомерПФР, 8) + "0" + Сред(НомерПФР, 9);
			}
			//НаборЗаписейСоставительПачки.РегистрационныйНомер.Значение = НомерПФР;
			//НаборЗаписейСоставительПачки.Удалить("ДатаВыдачиЛицензии");
			//НаборЗаписейСоставительПачки.Удалить("НомерЛицензии");
			//НаборЗаписейНалоговыйНомер = НаборЗаписейСоставительПачки.НалоговыйНомер.Значение;
			//НаборЗаписейНалоговыйНомер.ИНН = ВыборкаПоШапкеДокумента.ОрганизацияИНН;
			if(true/*ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо*/)
			{
				//НаборЗаписейНалоговыйНомер.Удалить("КПП");
				//ТаблицаПолей = НаборЗаписейСоставительПачки.НалоговыйНомер.Поля;
				//ТаблицаПолей.Индексы.Добавить("ИмяПоля");
				//СтрокаКПП = ТаблицаПолей.Найти("КПП", "ИмяПоля");
				if(true/*СтрокаКПП <> Неопределено*/)
				{
					//ТаблицаПолей.Удалить(СтрокаКПП);
				}
			}
			//НаборЗаписейСоставительПачки.НаименованиеОрганизации.Значение = СокрЛП(ВРЕГ(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеПолное,НаборЗаписейСоставительПачки.НаименованиеОрганизации.Размер)));
			if(true/*ЗаменятьБуквуЕ*/)
			{
				//ЗаменитьБуквуЁ(НаборЗаписейСоставительПачки.НаименованиеОрганизации.Значение, "Наименование организации");
			}
			//НаборЗаписейСоставительПачки.НаименованиеКраткое.Значение = СокрЛП(ВРег(Лев(ВыборкаПоШапкеДокумента.ОрганизацияНаименованиеСокращенное, НаборЗаписейСоставительПачки.НаименованиеКраткое.Размер)));
			if(true/*ЗаменятьБуквуЕ*/)
			{
				//ЗаменитьБуквуЁ(НаборЗаписейСоставительПачки.НаименованиеКраткое.Значение, "Краткое наименование организации");
			}
			//НаборЗаписейСоставительПачки.Удалить("Подразделение");
		}
		// ЗаполнитьСоставительПачки()
		// Процедура ищет адрес в справочнике Адресный классификатор, и если
		// не находит указанный регион, район, город, населенный пункт, то возвращает
		// Отказ = Истина, в текстеошибки возвращается текст ошибки.
		// Если не найдена только улица, то возвращается только ТекстОшибки,
		// значение переменной отказ не изменяется.

		public object ПроверитьАдресПоКЛАДР(/*АдресСписком*/)
		{
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("парамРегион", АдресСписком.Регион);
			//Запрос.УстановитьПараметр("парамРайон", АдресСписком.Район);
			//Запрос.УстановитьПараметр("парамГород", АдресСписком.Город);
			//Запрос.УстановитьПараметр("парамНаселенныйПункт", АдресСписком.НаселенныйПункт);
			//Запрос.УстановитьПараметр("парамУлица", АдресСписком.Улица);
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА НаселенныйПункт.КодРайонаВКоде = 0
	|				И &ПарамРайон <> """"
	|			ТОГДА "" район""
	|		КОГДА НаселенныйПункт.КодГородаВКоде = 0
	|				И &ПарамГород <> """"
	|			ТОГДА "" город""
	|		КОГДА НаселенныйПункт.КодНаселенногоПунктаВКоде = 0
	|				И &ПарамНаселенныйПункт <> """"
	|			ТОГДА "" населённый пункт""
	|		КОГДА ЕСТЬNULL(АдресныйКлассификатор.КодУлицыВКоде, 0) = 0
	|				И &парамУлица <> """"
	|			ТОГДА ""а улица""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК СообщениеОбОшибке
	|ИЗ
	|	(ВЫБРАТЬ
	|		Город.КодРегионаВКоде КАК КодРегионаВКоде,
	|		Город.КодРайонаВКоде КАК КодРайонаВКоде,
	|		Город.КодГородаВКоде КАК КодГородаВКоде,
	|		ЕСТЬNULL(АдресныйКлассификатор.КодНаселенногоПунктаВКоде, 0) КАК КодНаселенногоПунктаВКоде
	|	ИЗ
	|		(ВЫБРАТЬ
	|			Район.КодРегионаВКоде КАК КодРегионаВКоде,
	|			Район.КодРайонаВКоде КАК КодРайонаВКоде,
	|			ЕСТЬNULL(АДресныйКлассификатор.КодГородаВКоде, 0) КАК КодГородаВКоде
	|		ИЗ
	|			(ВЫБРАТЬ
	|				Регион.КодРегионаВКоде КАК КодРегионаВКоде,
	|				ЕСТЬNULL(АдресныйКлассификатор.КодРайонаВКоде, 0) КАК КодРайонаВКоде
	|			ИЗ
	|				(ВЫБРАТЬ
	|					АдресныйКлассификатор.КодРегионаВКоде КАК КодРегионаВКоде
	|				ИЗ
	|					РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|				ГДЕ
	|					АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамРегион
	|					И АдресныйКлассификатор.ТипАдресногоЭлемента = 1) КАК Регион
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|					ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамРайон)
	|						И (АдресныйКлассификатор.КодРегионаВКоде = Регион.КодРегионаВКоде)
	|						И (АдресныйКлассификатор.ТипАдресногоЭлемента = 2)) КАК Район
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АДресныйКлассификатор
	|				ПО (АДресныйКлассификатор.Наименование + "" "" + АДресныйКлассификатор.Сокращение = &парамГород)
	|					И (АДресныйКлассификатор.КодРегионаВКоде = Район.КодРегионаВКоде)
	|					И (АДресныйКлассификатор.КодРайонаВКоде = Район.КодРайонаВКоде)
	|					И (АДресныйКлассификатор.ТипАдресногоЭлемента = 3)) КАК Город
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|			ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамНаселенныйПункт)
	|				И (АдресныйКлассификатор.КодРегионаВКоде = Город.КодРегионаВКоде)
	|				И (АдресныйКлассификатор.КодРайонаВКоде = Город.КодРайонаВКоде)
	|				И (АдресныйКлассификатор.КодГородаВКоде = Город.КодГородаВКоде)
	|				И (АдресныйКлассификатор.ТипАдресногоЭлемента = 4)) КАК НаселенныйПункт
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.АдресныйКлассификатор КАК АдресныйКлассификатор
	|		ПО (АдресныйКлассификатор.Наименование + "" "" + АдресныйКлассификатор.Сокращение = &парамУлица)
	|			И (АдресныйКлассификатор.КодРегионаВКоде = НаселенныйПункт.КодРегионаВКоде)
	|			И (АдресныйКлассификатор.КодРайонаВКоде = НаселенныйПункт.КодРайонаВКоде)
	|			И (АдресныйКлассификатор.КодГородаВКоде = НаселенныйПункт.КодГородаВКоде)
	|			И (АдресныйКлассификатор.КодНаселенногоПунктаВКоде = НаселенныйПункт.КодНаселенногоПунктаВКоде)
	|			И (АдресныйКлассификатор.ТипАдресногоЭлемента = 5)
	|
	|УПОРЯДОЧИТЬ ПО
	|	СообщениеОбОшибке";*/
			//ВыборкаЗапроса = Запрос.Выполнить().Выбрать();
			//ТекстОшибки = "";
			if(true/*ВыборкаЗапроса.Следующий()*/)
			{
				//ТекстОшибки = ВыборкаЗапроса.СообщениеОбОшибке;
			}
			return null;
		}
		// ПроверитьАдресПоКЛАДР()
		// Процедура заполняет адрес, представленный в структуре для записи в XML файл
		// входными данынми является строка адреса
		//  СписокСтран - Список стран и их кодов
		// СписокСокращений1-5 - сокращения для определенного реквизита адреса
		// ФорматИностранныйАдрес, ФорматНеструктурированныйАдрес - форматы данных для не Российских адресов.
		// ВыходноеЗначение: НаборЗаписейАдрес

		public void ЗаполнитьАдрес(/*НаборЗаписейАдрес, СтрокаАдрес, СписокСтран, ФорматНеструктурированныйАдрес, ФорматИностранныйАдрес, ТекстПредупреждения*/)
		{
			//АдресСписком = УправлениеКонтактнойИнформацией.ПолучитьСтруктуруАдресаИзСтроки(ВРег(СтрокаАдрес));
			//ЗаПределамиРФ = Ложь;
			//АдресСписком.Свойство("ЗаПределамиРФ", ЗаПределамиРФ);
			/*// ЗаПределамиРФ может быть неопределно, поэтому сравниваем на значение
*/
			if(true/*ЗаПределамиРФ = Истина*/)
			{
				if(true/*АдресСписком.Страна = "РОССИЯ"*/)
				{
					/*// Неструктурированный адрес
*/
					//НаборЗаписейАдрес = СкопироватьСтруктуруДанных(ФорматНеструктурированныйАдрес);
					//НаборЗаписейАдрес.НеструктурированныйАдрес.Значение.Адрес = ВРег(СокрЛП(СтрокаАдрес));
					//НаборЗаписейАдрес.ТипАдреса.Значение = "НЕСТРУКТУРИРОВАННЫЙ";
					//НаборЗаписейАдрес.Удалить("Индекс");
					//ТекстПредупреждения = " сохранен как неструктурированный адрес.";
				}
			}
		}
		// ПФРXMLЗаполнитьАдрес()
		// Функция преобразует дерево значений в котором представлен XML файл, в текст
		//

		public object ПолучитьТекстФайлаИзДереваЗначений(/*ДеревоВыгрузки, АтрибутыПачкиВходящихДокументов = Неопределено*/)
		{
			/*// Преобразуем дерево в строковое описание XML
*/
			//ПотокВыгрузкиXML = СоздатьПотокXML();
			//ЗаписатьУзелДереваXMLВXMLдляПФР(ДеревоВыгрузки, ПотокВыгрузкиXML);
			/*// получаем содержимое файла в виде строки
*/
			/*ТекстФайла = СтрЗаменить(ЗаписатьПотокXML(ПотокВыгрузкиXML),"<ПачкаВходящихДокументов>",
	"<ПачкаВходящихДокументов " + ?(АтрибутыПачкиВходящихДокументов = Неопределено, "Окружение=""В составе файла"" Стадия=""До обработки""", АтрибутыПачкиВходящихДокументов) + ">");*/
			return null;
		}
		// ПолучитьТекстФайлаИзДереваЗначений
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ ДЛЯ ФОРМИРОВАНИЯ ОТЧЕТОВ ПО СОХРАНЕННОМУ XML ФАЙЛУ
		//
		// Функция возвращает значение строки дерева значений из колонки "Имя"

		public object ИзвлечьДанное(/*СтрокаДерева,Имя*/)
		{
			//СтрокаДанных = СтрокаДерева.Строки.Найти(Имя,"Имя",Истина);
			if(true/*СтрокаДанных = Неопределено*/)
			{
			}
			return null;
		}
		// Функция возращает представление адреса полученное из строк дерева значений,
		// представляющих XML ПФР файл выгрузки формат 07.00

		public object ПредставлениеАдресадляПФР(/*Знач СтрокаДереваАдрес*/)
		{
			//Адрес = "";
			//ТипАдреса = ИзвлечьДанное(СтрокаДереваАдрес, "ТипАДреса");
			//Индекс = ИзвлечьДанное(СтрокаДереваАдрес, "Индекс");
			//СтрокаДереваРоссийскийАдрес = СтрокаДереваАдрес.Строки.Найти("РоссийскийАдрес");
			//СтрокаДереваИностранныйАдрес = СтрокаДереваАдрес.Строки.Найти("ИностранныйАдрес");
			//СтрокаДереваНеструктурированныйАдрес = СтрокаДереваАдрес.Строки.Найти("НеструктурированныйАдрес");
			if(true/*СтрокаДереваРоссийскийАдрес <> Неопределено*/)
			{
				//СтрокаДереваРегион = СтрокаДереваРоссийскийАдрес.Строки.Найти("Регион");
				if(true/*СтрокаДереваРегион <> Неопределено*/)
				{
					//Регион = ИзвлечьДанное(СтрокаДереваРегион, "ГеографическоеНазвание");
					//СокращениеРегион =  ИзвлечьДанное(СтрокаДереваРегион, "Сокращение");
				}
				//СтрокаДереваРайон = СтрокаДереваРоссийскийАдрес.Строки.Найти("Район");
				if(true/*СтрокаДереваРайон <> Неопределено*/)
				{
					//Район = ИзвлечьДанное(СтрокаДереваРайон, "ГеографическоеНазвание");
					//СокращениеРайон = ИзвлечьДанное(СтрокаДереваРайон, "Сокращение");
				}
				//СтрокаДереваГород = СтрокаДереваРоссийскийАдрес.Строки.Найти("Город");
				if(true/*СтрокаДереваГород <> Неопределено*/)
				{
					//Город = ИзвлечьДанное(СтрокаДереваГород, "ГеографическоеНазвание");
					//СокращениеГород = ИзвлечьДанное(СтрокаДереваГород, "Сокращение");
				}
				//СтрокаДереваНаселенныйПункт = СтрокаДереваРоссийскийАдрес.Строки.Найти("НаселенныйПункт");
				if(true/*СтрокаДереваНаселенныйПункт <> Неопределено*/)
				{
					//НаселенныйПункт = ИзвлечьДанное(СтрокаДереваНаселенныйПункт, "ГеографическоеНазвание");
					//СокращениеНаселенныйПункт = ИзвлечьДанное(СтрокаДереваНаселенныйПункт, "Сокращение");
				}
				//СтрокаДереваУлица = СтрокаДереваРоссийскийАдрес.Строки.Найти("Улица");
				if(true/*СтрокаДереваУлица <> Неопределено*/)
				{
					//Улица = ИзвлечьДанное(СтрокаДереваУлица, "ГеографическоеНазвание");
					//СокращениеУлица = ИзвлечьДанное(СтрокаДереваУлица, "Сокращение");
				}
				//СтрокаДереваДом = СтрокаДереваРоссийскийАдрес.Строки.Найти("Дом");
				if(true/*СтрокаДереваДом <> Неопределено*/)
				{
					//СокращениеДом = ИзвлечьДанное(СтрокаДереваДом, "Сокращение");
					//Дом = ИзвлечьДанное(СтрокаДереваДом, "Номер");
				}
				//СтрокаДереваКорпус = СтрокаДереваРоссийскийАдрес.Строки.Найти("Корпус");
				if(true/*СтрокаДереваКорпус <> Неопределено*/)
				{
					//СокращениеКорпус = ИзвлечьДанное(СтрокаДереваКорпус, "Сокращение");
					//Корпус = ИзвлечьДанное(СтрокаДереваКорпус, "Номер");
				}
				//СтрокаДереваКвартира = СтрокаДереваРоссийскийАдрес.Строки.Найти("Квартира");
				if(true/*СтрокаДереваКвартира <> Неопределено*/)
				{
					//СокращениеКвартира = ИзвлечьДанное(СтрокаДереваКвартира, "Сокращение");
					//Квартира = ИзвлечьДанное(СтрокаДереваКвартира, "Номер");
				}
				/*Адрес = ?(ЗначениеЗаполнено(Индекс),", "+Индекс,"")+
		?(ЗначениеЗаполнено(Регион), ", "+Регион+" "+СокращениеРегион, "")+
		?(ЗначениеЗаполнено(Район), ", "+Район+" "+СокращениеРайон, "")+
		?(ЗначениеЗаполнено(Город), ", "+Город+" "+СокращениеГород, "")+
		?(ЗначениеЗаполнено(НаселенныйПункт), ", "+НаселенныйПункт+" "+СокращениеНаселенныйПункт, "")+
		?(ЗначениеЗаполнено(Улица), ", "+Улица+" "+СокращениеУлица, "")+
		?(ЗначениеЗаполнено(Дом), ", "+СокращениеДом+" "+Дом, "")+
		?(ЗначениеЗаполнено(Корпус), ", "+СокращениеКорпус+" "+Корпус, "")+
		?(ЗначениеЗаполнено(Квартира), ", "+СокращениеКвартира+" "+Квартира, "");*/
				//Адрес = Сред(Адрес,2);
				/*//Убрали первую запятую
*/
			}
			return null;
		}
		// Функция возвращает представление даты полученной из XML файла.
		// СтрДата - дата в формате XML ПФР 07.00

		public object ДатаXMLВОтчет(/*СтрДата, РазвернутоеПредставление = Истина*/)
		{
			if(true/*СтрДата = ""*/)
			{
				//ВозвращаемаяДата = Дата(1, 1, 1);
			}
			if(true/*РазвернутоеПредставление*/)
			{
			}
			return null;
		}
		// Функция возвращает дерево значений, заполненное из текста XML файла.

		public object ПреобразоватьВДеревоXML(/*СтрокаXML*/)
		{
			//НовоеДеревоXML = СоздатьДеревоXML();
			return null;
		}
		// Функция производит формирование древовидной структуры,
		// начиная с переданной в ВеткаДерева ветки дерева значений
		// на основе описания XML, переданного в СтрокаXML

		public object ДобавитьВДеревоXML(/*ВеткаДерева, СтрокаXML*/)
		{
			//XMLПоток = Новый ЧтениеXML();
			//ДеревоФайла = Новый ДеревоЗначений;
			//ДеревоФайла.Колонки.Добавить("Имя",      Новый ОписаниеТипов("Строка"));
			//ДеревоФайла.Колонки.Добавить("Значение", Новый ОписаниеТипов("Строка"));
			//ТекущаяВетка = Неопределено;
			//СкопироватьВетку(ВеткаДерева, ДеревоФайла);
			return null;
		}
		// Функция копирует ветку дерева значений

		public void СкопироватьВетку(/*Приемник, Источник*/)
		{
			if(true/*ТипЗнч(Источник) = Тип("СтрокаДереваЗначений")*/)
			{
				/*// есть откуда скопировать
*/
				if(true/*ТипЗнч(Приемник) = Тип("СтрокаДереваЗначений")*/)
				{
					/*// некуда скопировать
*/
					//СтрокаПриемника =  Приемник;
				}
				//СтрокаПриемника.Имя = Источник.Имя;
				//СтрокаПриемника.Значение = Источник.Значение;
			}
		}
		// Функция создает и возвращает новую строку в дереве значений

		public object СоздатьУзелНаВетке(/*ТекущаяВетка, ДеревоОбработки*/)
		{
			if(true/*ТекущаяВетка = Неопределено*/)
			{
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ВЫХОДНЫХ ПЕЧАТНЫХ ФОРМ
		// Формирует представление периода болезни или отпуска за свой счет для вывода в печатную форму документа

		public object ПредставлениеПериодаБолезниОтпуска(/*Месяцы, Дни*/)
		{
			if(true/*Месяцы<>0*/)
			{
				//Представление = "" + Месяцы + " мес. ";
			}
			if(true/*Дни<>0*/)
			{
				//Представление = Представление + Дни + " дн.";
			}
			return null;
		}
		// Формирует представление параметров исчисляемого  трудового стажа
		//
		// Параметры:
		//		ЗаписьСтажа -	структура - запись о стаже
		// Возвращаемое значение:
		//		Строка

		public object ПредставлениеПараметровИсчисляемогоТрудовогоСтажа(/*ЗаписьСтажа*/)
		{
			//ПредставлениеПараметровИТС = "";
			//КодОснованияИТС = ЗаписьСтажа.ОснованиеИсчисляемогоСтажаКод;
			//ПервыйПараметрИТС = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
			//ВторойПараметрИТС = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
			//ТретийПараметрИТС = ЗаписьСтажа.ТретийПараметрИсчисляемогоСтажа;
			if(true/*КодОснованияИТС = "ВОДОЛАЗ"*/)
			{
				//ПредставлениеПараметровИТС = ?(ПервыйПараметрИТС > 0,""+ПервыйПараметрИТС+" ч ","")+?(ВторойПараметрИТС > 0,""+ВторойПараметрИТС+" мин","");
			}
			return null;
		}

		public object ПредставлениеПараметровТерриториальныхУсловий(/*ЗаписьСтажа*/)
		{
			//ПредставлениеПараметровТУ = "";
			//Ставка = ЗаписьСтажа.Коэффициент;
			//ПервыйПараметрТУ = ЗаписьСтажа.ПервыйПараметрИсчисляемогоСтажа;
			//ВторойПараметрТУ = ЗаписьСтажа.ВторойПараметрИсчисляемогоСтажа;
			if(true/*Ставка <> "0.00"*/)
			{
				//ПредставлениеПараметровТУ = Ставка;
			}
			return null;
		}
		// Формирует строки "дополнительных сведений" по выслуге лет в "удобочитаемом" виде для отражения в формах.
		//
		// Параметры:
		//		ЗаписьСтажа -	структура - запись о стаже
		//		СтрПервыйВторойПараметр  -	строка - возвращаемый параметр - представление первых двух параметров
		//		СтрСтавки  -	строка - возвращаемый параметр - представление третьего параметра
		//

		public void ПредставлениеПараметровПенсииЗаВыслугуЛет(/*ЗаписьСтажа, СтрПервыйВторойПараметр, СтрСтавки*/)
		{
			/*Экспорт
	
	КодОснования = ЗаписьСтажа.ОснованиеВыслугиЛетКод;*/
			//ПервыйПараметр = ЗаписьСтажа.ПервыйПараметрВыслугиЛет;
			//ВторойПараметр = ЗаписьСтажа.ВторойПараметрВыслугиЛет;
			//ТретийПараметр = ЗаписьСтажа.ТретийПараметрВыслугиЛет;
			//СтрПервыйВторойПараметр = "";
			//СтрСтавки = "";
			if(true/*(КодОснования="ИСПКЛС1") или (КодОснования="САМОЛЕТ") или (КодОснования="ИНСПЕКТ") 
		или (КодОснования="СПЕЦАВ") или (КодОснования="ЛЕТИСП") или (КодОснования="ИТСИСП") 
		или (КодОснования="ИНСПЕКТ") или (КодОснования="ИТСМАВ") или (КодОснования="ОПЫТИСП")*/)
			{
				//СтрПервыйВторойПараметр = ?(ПервыйПараметр>0,""+ПервыйПараметр+" ч ","")+?(ВторойПараметр>0,""+ВторойПараметр+" мин","");
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ РАЗБОРА ФАЙЛОВ СВЕДЕНИЙ
		//Функция разбирает заголовочные строки файла и возвращает информацию о пачке

		public object РазобратьЗаголовокФайла(/*Знач ТекстФайла,ИнформацияОПачке*/)
		{
			//ВсегоСтрокВФайле = СтрЧислоСтрок(ТекстФайла);
			if(true/*ВсегоСтрокВФайле < 4*/)
			{
				//Предупреждение("Неверная структура файла: количество строк должно быть не менее 4!");
			}
			//ИнформацияОРаботодателе = Новый Структура;
			/*//Обработка записи заголовка "ПАЧК"
*/
			//МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,3));
			if(true/*МассивДанныхСтроки.Количество()<>21*/)
			{
				//Сообщить("Строка 3: неверное количество полей записи 'ПАЧК'!");
			}
			//ИнформацияОПачке.Вставить("НомерПачкиРаботодателя",МассивДанныхСтроки[1]);
			//ИнформацияОПачке.Вставить("ДатаСоставленияОписи",ДатаИзФайла(МассивДанныхСтроки[4]));
			//ИнформацияОПачке.Вставить("РасчетныйПериод",МассивДанныхСтроки[6]);
			//ИнформацияОПачке.Вставить("КодКатегорииЗастрахованногоЛица",МассивДанныхСтроки[7]);
			//ИнформацияОПачке.Вставить("КодДополнительногоТарифа",МассивДанныхСтроки[8]);
			//ИнформацияОПачке.Вставить("ТерриториальныеУсловия",МассивДанныхСтроки[9]);
			//ИнформацияОПачке.Вставить("ТипСведений",МассивДанныхСтроки[10]);
			//ИнформацияОПачке.Вставить("ВидКорректировки",МассивДанныхСтроки[11]);
			//ИнформацияОПачке.Вставить("ИтогоВзносыСтраховаяЧасть",МассивДанныхСтроки[16]);
			//ИнформацияОПачке.Вставить("ИтогоВзносыНакопительнаяЧасть",МассивДанныхСтроки[17]);
			//ИнформацияОПачке.Вставить("ИтогоВзносыПоДопТарифу",МассивДанныхСтроки[18]);
			/*//ВсегоНЧСЛ										= Число(МассивДанныхСтроки[14]);
*/
			/*//НЧСЛБл										= Число(МассивДанныхСтроки[15]);
*/
			/*//Обработка записи заголовка "РБТД"
*/
			//МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,2));
			if(true/*МассивДанныхСтроки.Количество()<>6*/)
			{
				//Сообщить("Строка 2: неверное количество полей записи 'РБТД'!");
			}
			//ИнформацияОРаботодателе.Вставить("РегистрационныйНомерПФР",МассивДанныхСтроки[2]);
			//ИнформацияОРаботодателе.Вставить("ИНН",МассивДанныхСтроки[3]);
			//ИнформацияОРаботодателе.Вставить("КПП",МассивДанныхСтроки[4]);
			//ИнформацияОРаботодателе.Вставить("Наименование",МассивДанныхСтроки[5]);
			/*//Обработка записи заголовка "ТИПД"
*/
			//МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(СтрПолучитьСтроку(ТекстФайла,4));
			if(true/*МассивДанныхСтроки.Количество()<>3*/)
			{
				//Сообщить("Строка 4: неверное количество полей записи 'ТИПД'!");
			}
			//ИнформацияОПачке.Вставить("ТипДокумента",МассивДанныхСтроки[1]);
			//ИнформацияОПачке.Вставить("ДокументовВПачке",ЧислоИзФайла(МассивДанныхСтроки[2]));
			//ИнформацияОПачке.Вставить("ИнформацияОРаботодателе",ИнформацияОРаботодателе);
			return null;
		}
		//Выводит в табличный документ "ТабличныйДокумент" заполненный макет описи "Форма АДВ-6-1"

		public void ВывестиОписьАДВ6(/*ТабличныйДокумент,Знач ИнформацияОПачке,Знач ОтветственныеЛица, ЗаменятьБуквуЕ = Истина*/)
		{
			/*//Получим ответственные лица организации и их должности 
*/
			//МакетОписи = ПолучитьОбщийМакет("ФормаАДВ_6_1");
			//СекцияОпись = МакетОписи.ПолучитьОбласть("Опись");
			//СекцияОпись.Параметры.РегНомерПФР						= ИнформацияОПачке.ИнформацияОРаботодателе.РегистрационныйНомерПФР;
			//СекцияОпись.Параметры.ОКПО								= ИнформацияОПачке.ИнформацияОРаботодателе.Ссылка.КодПоОКПО;
			//СекцияОпись.Параметры.ИНН								= ИнформацияОПачке.ИнформацияОРаботодателе.ИНН;
			//СекцияОпись.Параметры.КПП								= ИнформацияОПачке.ИнформацияОРаботодателе.КПП;
			//НаименованиеСокращенное = ИнформацияОПачке.ИнформацияОРаботодателе.НаименованиеСокращенное;
			if(true/*ЗаменятьБуквуЕ*/)
			{
				//ЗаменитьБуквуЁ(НаименованиеСокращенное, "", Ложь);
			}
			//СекцияОпись.Параметры.Наименование = НаименованиеСокращенное;
			if(true/*ИнформацияОПачке.ТипДокумента = "АНКТ"*/)
			{
				//СекцияОпись.Параметры.ДокументовАДВ1вПачке 			= ИнформацияОПачке.ДокументовВПачке;
			}
			//СекцияОпись.Параметры.НомерПачкиРаботодателя 			= ИнформацияОПачке.НомерПачкиРаботодателя;
			//СекцияОпись.Параметры.ДолжностьИсполнителя				= ОтветственныеЛица.ИсполнительДолжность;
			//СекцияОпись.Параметры.РасшифровкаПодписиИсполнителя		= ОтветственныеЛица.Исполнитель;
			//СекцияОпись.Параметры.ДолжностьРуководителя		 		= ОтветственныеЛица.РуководительДолжность;
			//СекцияОпись.Параметры.РасшифровкаПодписиРуководителя	= ОтветственныеЛица.Руководитель;
			//СекцияОпись.Параметры.ДатаЗаполнения		 			= ДатаВОтчет(ИнформацияОПачке.ДатаСоставленияОписи);
			//ТабличныйДокумент.Вывести(СекцияОпись);
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ, ОБЕСПЕЧИВАЮЩИЕ РАБОТУ С ЗАПИСЯМИ ФАЙЛОВ СВЕДЕНИЙ
		//Возвращает формат записи файла сведений (таблицу с именами и типами полей)

		public object ПолучитьФорматЗаписи(/*Знач ИмяЗаписи,Знач ДокументФорматЗаписей*/)
		{
			//ТаблицаФормаЗаписи = Новый ТаблицаЗначений;
			//ТаблицаФормаЗаписи.Колонки.Добавить("ИмяПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(100));
			//ТаблицаФормаЗаписи.Колонки.Добавить("ТипПоля",ОбщегоНазначения.ПолучитьОписаниеТиповСтроки(10));
			//ТаблицаФормаЗаписи.Колонки.Добавить("Размер",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
			//ТаблицаФормаЗаписи.Колонки.Добавить("РазрядностьДробнойЧасти",ОбщегоНазначения.ПолучитьОписаниеТиповЧисла(5));
			//ОбластьФорматЗаписи = ДокументФорматЗаписей.ПолучитьОбласть(ИмяЗаписи);
			return null;
		}
		//Возвращает инициализировнную структуру, соответствующую формату записи

		public object ПолучитьСтруктуруЗаписи(/*Знач ТаблицаФорматаЗаписи*/)
		{
			//СтрИменаПолей = "";
			//СтрИменаПолей = Сред(СтрИменаПолей,2);
			/*//Убрали первую запятую
*/
			return null;
		}
		//Формирует строку для файла сведений на основе данных структуры записи

		public object ПолучитьСтрокуПоДаннымЗаписи(/*Знач Запись,Знач ТаблицаФорматаЗаписи*/)
		{
			//Стр = "";
			//СтрНули = "0000000000";
			//Стр = Сред(Стр,2);
			/*//Убрали первую запятую
*/
			return null;
		}
		//Выполняет разбор строки файла на значения элементов структуры записи

		public object РазложитьСтрокуВСтруктуруЗаписи(/*Знач Стр,Знач ТипЗаписи,Знач ТаблицаФормата,Запись,СтрОшибка*/)
		{
			/*Экспорт
	
	МассивДанныхСтроки = РазложитьСтрокуФайлаСведенийПФР(Стр);*/
			if(true/*МассивДанныхСтроки[0] <> ТипЗаписи*/)
			{
				//СтрОшибка = "Неверный тип записи. Ожидается запись с типом "+ТипЗаписи+"!";
			}
			if(true/*МассивДанныхСтроки.Количество() <> ТаблицаФормата.Количество()*/)
			{
				//СтрОшибка = "Неверное количество полей записи "+ТипЗаписи+"!";
			}
			//НомерПоля = 0;
			return null;
		}
		/////////////////////////////////////////////////////////////////////
		// ОБЩИЕ ПРОЦЕДУРЫ ПРОВЕРКИ ФОРМ СЗВ
		// Распечатывает список найденных ошибок с группировкой по физлицу

		public void ВывестиОшибкиПоТаблицеПлохихЗаписей(/*ТаблицаПлохихЗаписей, ИсточникОшибок, ВыводитьСообщенияВОбработчикСообщений = Ложь, СообщенияРазделПроверки = Неопределено*/)
		{
			//Обработка = глЗначениеПеременной("глОбработкаСообщений");
			//ВидСообщенияОшибка = Перечисления.ВидыСообщений.Ошибка;
			//Таблица = ТаблицаПлохихЗаписей.Скопировать();
			//Таблица.Свернуть("ФизЛицо");
			//МассивФизлиц = Таблица.ВыгрузитьКолонку("ФизЛицо");
			//ТаблицаПлохихЗаписей.Индексы.Добавить("ФизЛицо");
			if(true/*ТаблицаПлохихЗаписей.Количество() > 0*/)
			{
				//СтруктураПоиска = Новый Структура("ФизЛицо");
			}
		}
		//Проверяет правильность заполнения номера документа, удостоверяющего личность

		public object ПроверитьНомерУдостоверенияЛичности(/*ДокументКодИМНС, Знач Номер, СтрОшибка*/)
		{
			if(true/*ПустаяСтрока(РегламентированнаяОтчетность.ЗаменитьОдниСимволыДругими("0123456789",Номер,"          "))=0*/)
			{
				//СтрОшибка = "В номере документа присутствуют недопустимые символы!";
			}
			//ДлинаНомера = СтрДлина(СокрЛП(Номер));
			//СтрОшибка = "";
			if(true/*ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС01
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС03
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС04
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС06
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС21*/)
			{
				if(true/*ДлинаНомера <> 6*/)
				{
					//СтрОшибка = "Номер документа должен состоять из 6 символов!";
				}
			}
			return null;
		}
		// Проверяет правильность заполнения серии документа, удостоверяющего личность

		public object ПроверитьСериюУдостоверенияЛичности(/*ДокументКодИМНС, Знач Серия , СтрОшибка*/)
		{
			/*// проверка
*/
			if(true/*ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС01
		ИЛИ ДокументКодИМНС = Справочники.ДокументыУдостоверяющиеЛичность.ИМНС03*/)
			{
				//ТипДока = 1;
			}
			//СтрОшибка = "";
			//Серия = СокрЛП(Серия);
			if(true/*ТипДока = 1*/)
			{
				/*// паспорт СССР и свид о рожд
*/
				//Поз = Найти(Серия,"-");
				if(true/*Поз=0*/)
				{
					//СтрОшибка = "Серия документа должна состоять из двух частей, резделенных символом ""-""!";
				}
				//Ч1 = Лев(Серия, Поз-1);
				//Ч2 = СокрЛП(Сред(Серия, Поз+1));
				//Поз = Найти(Ч2,"-");
				if(true/*Поз <> 0*/)
				{
					//СтрОшибка = "В серии документа должно быть только две группы символов!";
				}
				if(true/*ПустаяСтрока(Ч1)*/)
				{
					//СтрОшибка = "В серии документа отсутствует числовая часть!";
				}
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-К
		//Добавляет новую строку в таблицу плохих записей стажа

		public void СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(/*ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки,ОсновнаяЗапись = ""*/)
		{
			if(true/*ОсновнаяЗапись = ""*/)
			{
				//ОсновнаяЗапись = Запись;
			}
			//ЗаголовокОшибки = СЗВК_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись,ОсновнаяЗапись);
			/*//Для строк сообщения сделаем отступ
*/
			//Стр = "";
			//МассивСтрок =  ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
			//ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;
			//НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
			//НоваяСтрока.ФизЛицо = Запись.ФизЛицо;
			//НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;
		}
		//Добавляет новую строку в таблицу плохих записей сведений

		public void СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(/*ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки*/)
		{
			//ЗаголовокОшибки ="Запись № "+Запись.НомерЗаписи+", Вид стажа: " +Запись.ВидСтажа + ":"+Символы.ПС;
			/*//Для строк сообщения сделаем отступ
*/
			//Стр = "";
			//МассивСтрок =  ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
			//ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;
			//НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
			//НоваяСтрока.ФизЛицо = Запись.ФизЛицо;
			//НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;
		}
		//Выполняет проверку дополнительной записи стажа на допустимось значений реквизитов

		public object СЗВК_ВыполнитьПроверкуДополнительнойЗаписи(/*Запись, ОсновнаяЗапись, ТаблицаПлохихЗаписей*/)
		{
			if(true/*НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) 
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа)*/)
			{
				/*СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дополнительная запись может вводиться только при заполнении хотя бы одного из реквизитов основной записи:
		| 		Особые условия труда , Выслуга лет, Территориальные условия, Основание исчисляемого стажа!",ОсновнаяЗапись);*/
			}
			if(true/*ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажа)*/)
			{
				//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи о стаже не может указываться основание исчисляемого стажа!",ОсновнаяЗапись);
			}
			/*//Проверка на обязательный ввод одной из льгот
*/
			//УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловия);
			//УказанРК = ЗначениеЗаполнено(Запись.РайонныйКоэффициент);
			//ЗаданаГруппаТерриториальныеУсловия = УказаныТерриториальныеУсловия или УказанРК;
			//УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
			//УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет);
			if(true/*(НЕ ЗаданаГруппаТерриториальныеУсловия) И (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеВыслугиЛет)*/)
			{
				//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо выслуга лет!",ОсновнаяЗапись);
			}
			/*//Проверка на ввод территориальной льготы
*/
			if(true/*ЗаданаГруппаТерриториальныеУсловия*/)
			{
				if(true/*(НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)) И(НЕ ЗначениеЗаполнено(ОсновнаяЗапись.РайонныйКоэффициент))*/)
				{
					//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи территориальная льгота может быть указана только при указании территориальной льготы в основной записи!",ОсновнаяЗапись);
				}
			}
			/*//Проверка на ввод условий труда
*/
			if(true/*УказаныОсобыеУсловияТруда*/)
			{
				//УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
				if(true/*(УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.ЗП12А)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.ЗП12Б)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.ЗП12Ж)*/)
				{
					//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда должен принимать значение ЗП12А, ЗП12Б или ЗП12Ж!",ОсновнаяЗапись);
				}
				if(true/*(УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТруда.ЗП12Ж) 
			И (ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа <> Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104)*/)
				{
					/*СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда ЗП12Ж может быть указан" 
			+Символы.ПС+"только в случае указания в основной записи кода исчисляемого стажа УИК104!",ОсновнаяЗапись);*/
				}
			}
			/*//Проверка на ввод основания выслуги лет
*/
			/*//Если УказаноОснованиеВыслугиЛет Тогда
*/
			//КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
			if(true/*НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)*/)
			{
				if(true/*Найти(",,ЗП81СМ,ЗП81ГД,ХИРУРСМ,ХИРУРГД,",","+КодВыслугиЛетЗаписи+",") = 0*/)
				{
					/*СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Если в основной записи не указан код выслуги лет, то в дополнительной записи" 
			+Символы.ПС+"основание выслуги лет должно быть пустым или указаны коды ЗП81СМ,ЗП81ГД,ХИРУРСМ или ХИРУРГД!",ОсновнаяЗапись);*/
				}
				/*//В основной записи код выслуги указан
*/
				//МассивПравилНаКодыВыслугиДопЗаписей =  Новый Массив;
				//МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",ЛЕТИСП,САМОЛЕТ,СПЕЦАВ,ОПЫТИСП,ИСПКЛС1,ИТСМАВ,");
				//МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",НОРМАПР,РЕАКТИВН,НОРМСП,");
				//МассивПравилНаКодыВыслугиДопЗаписей.Добавить(",,ЗП81СМ,ЗП81ГД,ХИРУРСМ,ХИРУРГД,");
				/*//пустой код допустим
*/
				//КодВыслугиЛетОсновнойЗаписи = СОКРЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);
				//ПроверочнаяСтрокаКодов = "";
				if(true/*ПроверочнаяСтрокаКодов = ""*/)
				{
					/*СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет "+ КодВыслугиЛетОсновнойЗаписи
			+Символы.ПС+"в дополнительной записи код выслуги указываться не может!",ОсновнаяЗапись);*/
				}
			}
			/*//КонецЕсли;	 
*/
			return null;
		}
		//Выполняет проверку записей стажа на допустимось значений реквизитов между группами

		public object СЗВК_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(/*СтруктураПараметров, ТаблицаПлохихЗаписей*/)
		{
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("МассивФизлиц",СтруктураПараметров.МассивФизлиц);
			/*//Проверяем на допустимые сочетания только те записи, в которых указан либо код условий труда, либо код основания исчисляемого стажа
*/
			/*//( указание только выслуги лет допустимо)
*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	Записи.ФизЛицо КАК ФизЛицо,
	|	Записи.НомерПериодаТрудовойДеятельности КАК НомерПериодаТрудовойДеятельности,
	|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
	|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
	|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
	|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
	|	Записи.НулевойПараметрИсчисляемогоСтажа КАК УказанныйНулевойПараметрИсчисляемогоСтажа,
	|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
	|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
	|	Сочетания.НомерПравила КАК НомерПравила,
	|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
	|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
	|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
	|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
	|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
	|	Сочетания.ФорматФОВ КАК ФорматФОВ,
	|	Записи.Организация КАК Организация,
	|	Записи.ВидДеятельности КАК ВидДеятельности,
	|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВК КАК Записи
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
	|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
	|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
	|					И Сочетания.КодУсловийТруда = """")
	|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
	|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
	|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
	|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
	|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
	|					И Сочетания.КодОснованияВыслугиЛет = """")
	|			И (Сочетания.ТипШаблонаКПС = ""Любой""
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
	|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
	|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
	|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
	|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
	|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
	|ГДЕ
	|	Записи.ФизЛицо В(&МассивФизлиц)
	|	И ((НЕ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL )
	|			ИЛИ (НЕ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL ))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	НомерПериодаТрудовойДеятельности,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";*/
			//Выборка = Запрос.Выполнить().Выбрать();
			while(true/*Выборка.СледующийПоЗначениюПоля("ФизЛицо")*/)
			{
				while(true/*Выборка.СледующийПоЗначениюПоля("НомерПериодаТрудовойДеятельности")*/)
				{
					while(true/*Выборка.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")*/)
					{
						while(true/*Выборка.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")*/)
						{
							//СтрокаСообщений = "Комбинация значений реквизитов:";
							//СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание выслуги лет = " + Выборка.УказанныйКодОснованияВыслугиЛет;
							//СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание исчисляемого стажа = " + Выборка.УказанныйКодОснованияИсчисляемогоСтажа;
							//СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Особые условия труда = " + Выборка.УказанныйКодУсловийТруда;
							//СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Код позиции списка = " + Выборка.УказанныйКодПозицииСписка;
							if(true/*(Выборка.НомерПравила = NULL)
						ИЛИ ( СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12100000-11465" И СокрЛП(Выборка.УказанныйКодОснованияИсчисляемогоСтажа) <> "ВОДОЛАЗ") 
						ИЛИ ( СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "УВД")*/)
							{
								//СтрокаСообщений = СтрокаСообщений+Символы.ПС+"Не является допустимой!";
								//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
							}
							/*//Флаг допустимости значений реквизитов  группы "Фактически отработанное время"  
*/
							//ФОВДопустимо = Ложь;
							//СтрокаСообщений = "Значения реквизитов группы ""Фактически отработанное время"" не соответствуют ни одному из заданных форматов:"+Символы.ПС;
							/*//Для Каждого ФорматФОВ из СписокДопустимыхФорматовФОВ цикл
*/
							while(true/*Выборка.Следующий()*/)
							{
								//ФорматФОВ = Выборка.ФорматФОВ;
								//СтрокаОшибкиФормата = "";
								//ПрошлоПроверку = 0;
								//СтрокаЗначенияПараметров = "";
								/*//Если формат не равен [ПУСТОЕ,ПУСТОЕ,ПУСТОЕ], то значения всех трех параметров не должны равняться 0
*/
								if(true/*(СокрЛП(ФорматФОВ) <> "___")и(СтрокаЗначенияПараметров="000")*/)
								{
									/*//
*/
									//ПрошлоПроверку = 0;
									//СтрокаОшибкиФормата = СтрокаОшибкиФормата + "В параметрах (Годы,Месяцы,Дни) должно быть указано отработанное время!"+Символы.ПС;
								}
								if(true/*ПрошлоПроверку = 3*/)
								{
									//ФОВДопустимо = Истина;
								}
								//СтрФорматФОВ = ФорматФОВ;
								//СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"_",",пустое");
								//СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"ч",",часы");
								//СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"м",",минуты");
								//СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Г",",годы");
								//СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"М",",месяцы");
								//СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Д",",дни");
								//СтрФорматФОВ = Сред(СтрФорматФОВ,2);
								/*//Убрали первую запятую
*/
								//СтрокаОшибкиФормата = "Соглано формату ["+СтрФорматФОВ+"]:"+Символы.ПС+СтрокаОшибкиФормата;
								//СтрокаСообщений = СтрокаСообщений + СтрокаОшибкиФормата;
							}
							/*// по вариантам формата ФОВ
*/
							if(true/*НЕ ФОВДопустимо*/)
							{
								//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
							}
						}
						/*// По дополнительным записям	
*/
					}
					/*// По основным записям	
*/
				}
				/*// По периодам деятельности
*/
			}
			/*// По физлицам	
*/
			return null;
		}
		//Формирует строку-заголовок для сообщения об ошибке, найденной в записи о стаже

		public object СЗВК_СформироватьЗаголовокОшибкиЗаписиОСтаже(/*Запись, ОсновнаяЗапись*/)
		{
			if(true/*НЕ ЗначениеЗаполнено(Запись.Организация)или(НЕ ЗначениеЗаполнено(Запись.ВидДеятельности))*/)
			{
				//ЗаголовокСообщения = "Период деятельности № "+ОсновнаяЗапись.НомерПериодаТрудовойДеятельности;
			}
			if(true/*ЗначениеЗаполнено(ОсновнаяЗапись.ДатаНачалаПериода)*/)
			{
				//ЗаголовокСообщения = ЗаголовокСообщения + ", Период: "+Формат(ОсновнаяЗапись.ДатаНачалаПериода,"ДФ='дд.ММ.гггг'")+"-"+Формат(ОсновнаяЗапись.ДатаОкончанияПериода,"ДФ='дд.ММ.гггг'");
			}
			if(true/*Запись.НомерДополнительнойЗаписи <> 0*/)
			{
				//ЗаголовокСообщения = ЗаголовокСообщения + ", Дополнительная запись № "+Запись.НомерДополнительнойЗаписи;
			}
			//ЗаголовокСообщения = ЗаголовокСообщения + ":"+Символы.ПС;
			return null;
		}
		//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-К

		public object СЗВК_ПроверитьНаборЗаписейОСтаже(/*ИнициаторВызова, МассивФизЛиц, ДатаАктуальности = "", РезультатВыборкиЗаписей = "", ВыборкаПоШапкеДокумента = Неопределено*/)
		{
			//ПустаяДата = Дата('00010101');
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("МассивФизЛиц" , МассивФизЛиц);
			if(true/*ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК")*/)
			{
				//Запрос.УстановитьПараметр("ДокументСсылка" ,				ИнициаторВызова);
				//Запрос.УстановитьПараметр("ДатаАктуальности" ,				ДатаАктуальности);
				//Запрос.УстановитьПараметр("Организация" ,					ВыборкаПоШапкеДокумента.Организация);
				//Запрос.УстановитьПараметр("ГоловнаяОрганизация" ,			ВыборкаПоШапкеДокумента.ГоловнаяОрганизация);
				/*Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияСЗВКРаботники.НомерСтроки КАК НомерСтроки,
		|	СведенияСЗВКРаботники.ФизЛицо.СтраховойНомерПФР КАК СтраховойНомерПФР,
		|	СведенияСЗВКРаботники.ФизЛицо.ДатаРождения КАК ДатаРождения,
		|	СведенияСЗВКРаботники.ФизЛицо КАК ФизЛицо,
		|	СведенияСЗВКРаботники.ФизЛицо.Наименование КАК ФизЛицоНаименование,
		|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
		|	СведенияОФизлицеДляСЗВК.ТерриториальныеУсловияНа31_12_2001.Код КАК ТерриториальныеУсловияНа_31_12_2001Код,
		|	СведенияОФизлицеДляСЗВК.РайонныйКоэффициентНа31_12_2001 КАК РайонныйКоэффициентНа_31_12_2001,
		|	ЗаписиОСтаже.НомерПериодаТрудовойДеятельности КАК НомерПериодаТрудовойДеятельности,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.Организация КАК Организация,
		|	ЗаписиОСтаже.Организация КАК ОрганизацияНаименование,
		|	ЗаписиОСтаже.ВидДеятельности КАК ВидДеятельности,
		|	ЗаписиОСтаже.ВидДеятельности.Код КАК ВидДеятельностиКод,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.РайонныйКоэффициент КАК РайонныйКоэффициент,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.НулевойПараметрИсчисляемогоСтажа КАК НулевойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ЗаписиОСтаже.Должность,
		|	ВЫБОР
		|		КОГДА РаботникиОрганизаций.КоличествоРабочихМест > 0
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК СведенияСЗВКРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо В (&МассивФизЛиц)) КАК ФИОФизЛицСрезПоследних
		|		ПО СведенияСЗВКРаботники.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВК КАК ЗаписиОСтаже
		|		ПО СведенияСЗВКРаботники.ФизЛицо = ЗаписиОСтаже.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОФизлицеДляСЗВК КАК СведенияОФизлицеДляСЗВК
		|		ПО СведенияСЗВКРаботники.ФизЛицо = СведенияОФизлицеДляСЗВК.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ КОЛИЧЕСТВО(РАЗЛИЧНЫЕ 
		|							ВЫБОР
		|							КОГДА &ДатаАктуальности >= РаботникиОрганизации.ПериодЗавершения  
		|									И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|								ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
		|								ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
		|							КОНЕЦ) КАК КоличествоРабочихМест, 
		|			РаботникиОрганизации.Сотрудник.Физлицо КАК ФизЛицо
		|		ИЗ
		|			РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&ДатаАктуальности,
		|				Организация = &ГоловнаяОрганизация
		|					И Сотрудник.Физлицо В
		|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|							СведенияОТрудовомСтажеСЗВКРаботникиОрганизации.ФизЛицо
		|						ИЗ
		|							Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК СведенияОТрудовомСтажеСЗВКРаботникиОрганизации
		|						ГДЕ
		|							СведенияОТрудовомСтажеСЗВКРаботникиОрганизации.Ссылка = &ДокументСсылка)
		|					И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизации
		|		ГДЕ
		|		ВЫБОР
		|			КОГДА &ДатаАктуальности >= РаботникиОрганизации.ПериодЗавершения 
		|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА РаботникиОрганизации.ПричинаИзмененияСостоянияЗавершения
		|			ИНАЧЕ РаботникиОрганизации.ПричинаИзмененияСостояния
		|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|		И ВЫБОР
		|			КОГДА &ДатаАктуальности >= РаботникиОрганизации.ПериодЗавершения 
		|					И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА РаботникиОрганизации.ОбособленноеПодразделениеЗавершения
		|			ИНАЧЕ РаботникиОрганизации.ОбособленноеПодразделение
		|		КОНЕЦ = &Организация
		|		СГРУППИРОВАТЬ ПО
		|			РаботникиОрганизации.Сотрудник.Физлицо) КАК РаботникиОрганизаций
		|		ПО СведенияСЗВКРаботники.ФизЛицо = РаботникиОрганизаций.ФизЛицо
		|ГДЕ
		|	СведенияСЗВКРаботники.Ссылка = &ДокументСсылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки,
		|	НомерПериодаТрудовойДеятельности,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";*/
				//ОсновнаяГруппировкаВыборки = "НомерСтроки";
				/*//Инициатором вызова является набор записей
*/
				/*Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.НомерПериодаТрудовойДеятельности КАК НомерПериодаТрудовойДеятельности,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.Организация КАК Организация,
		|	ЗаписиОСтаже.Организация КАК ОрганизацияНаименование,
		|	ЗаписиОСтаже.ВидДеятельности КАК ВидДеятельности,
		|	ЗаписиОСтаже.ВидДеятельности.Код КАК ВидДеятельностиКод,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.РайонныйКоэффициент КАК РайонныйКоэффициент,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.НулевойПараметрИсчисляемогоСтажа КАК НулевойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ЗаписиОСтаже.Должность
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВК КАК ЗаписиОСтаже
		|ГДЕ
		|	ЗаписиОСтаже.ФизЛицо В(&МассивФизЛиц)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизЛицо,
		|	НомерПериодаТрудовойДеятельности,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";*/
				//ОсновнаяГруппировкаВыборки = "ФизЛицо";
			}
			//РезультатВыборкиЗаписей = Запрос.Выполнить();
			//ВыборкаЗаписей =  РезультатВыборкиЗаписей.Выбрать();
			//ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
			//ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
			//ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
			/*//Проверку правильности заполнения записей надо выполнять отдельно для каждого физлица
*/
			while(true/*ВыборкаЗаписей.СледующийПоЗначениюПоля(ОсновнаяГруппировкаВыборки)*/)
			{
				if(true/*ВыборкаЗаписей.НомерПериодаТрудовойДеятельности = NULL*/)
				{
					/*//Физлицо не имеет сведений
*/
				}
				//ФизЛицо = ВыборкаЗаписей.ФизЛицо;
				//ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, Организация, ВидДеятельности, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи, НомерПериодаТрудовойДеятельности");
				/*//Список годов, в которых встречались записи с кодом исчисляемого стажа СЕЗОН
*/
				//СписокСезонныхГодов = Новый СписокЗначений;
				/*//Список значений группы реквизитов территориальные условия одной основной записи
*/
				//СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
				/*//Список значений кодов условий труда одной основной записи
*/
				//СписокУсловияТрудаЗаписи = Новый СписокЗначений;
				/*//Список значений кодов выслуги лет основной записи
*/
				//СписокВыслугаЛетЗаписи = Новый СписокЗначений;
				//ПредыдущийНомерПериодаДеятельности = 0;
				//ПредыдущийНомерОсновнойЗаписи = 0;
				//ПредыдущийНомерДополнительнойЗаписи = 0;
				//ПредыдущаяОрганизация = "";
				//ПредыдущийВидДеятельности = Справочники.ВидыОбщественноПолезнойДеятельности.ПустаяСсылка();
				while(true/*ВыборкаЗаписей.Следующий()*/)
				{
					//Запись = ВыборкаЗаписей;
					/*// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ РЕКВИЗИТОВ "Организация" и "ВидДеятельности"
*/
					/*//Организация и вид деятельности должны быть заполнены обязательно
*/
					if(true/*ПустаяСтрока(Запись.Организация)*/)
					{
						//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"));
					}
					if(true/*Запись.ВидДеятельности.Пустая()*/)
					{
						//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указан вид деятельности!");
					}
					/*//Проверим, сменился ли период деятельности
*/
					if(true/*Запись.НомерПериодаТрудовойДеятельности <> ПредыдущийНомерПериодаДеятельности*/)
					{
						//СменилсяНомерПериодаДеятельности = Истина;
					}
					if(true/*(Запись.Организация <> ПредыдущаяОрганизация) ИЛИ (Запись.ВидДеятельности <>ПредыдущийВидДеятельности)*/)
					{
						//СменилисьОрганизацияВидДеятельности = Истина;
					}
					if(true/*(СменилисьОрганизацияВидДеятельности)и(НЕ СменилсяНомерПериодаДеятельности)*/)
					{
						//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В рамках одного периода деятельности организация и вид деятельности меняться не должны!");
					}
					/*// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
*/
					/*//По умолчанию считаем, что запись основная
*/
					//ЭтоОсновнаяЗапись = Истина;
					/*//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
*/
					//ДополнительнаяЗаписьВозможна = Истина;
					if(true/*СменилсяНомерПериодаДеятельности*/)
					{
						//ДополнительнаяЗаписьВозможна = Ложь;
					}
					/*//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
*/
					if(true/*(Запись.ДатаНачалаПериода = ПустаяДата) и (Запись.ДатаОкончанияПериода = ПустаяДата)*/)
					{
						if(true/*ДополнительнаяЗаписьВозможна*/)
						{
							//ЭтоОсновнаяЗапись = Ложь;
						}
					}
					/*//Проверка только для основной записи о стаже
*/
					if(true/*ЭтоОсновнаяЗапись*/)
					{
						/*//Проверка на хронологический порядок записей
*/
						if(true/*ТекущаяОсновнаяЗапись.Организация <> Неопределено*/)
						{
							if(true/*Запись.ДатаНачалаПериода<=ТекущаяОсновнаяЗапись.ДатаОкончанияПериода*/)
							{
								//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
							}
						}
						/*//Переустановка текущей основной записи
*/
						//ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
						//ТекущаяОсновнаяЗапись.Организация = Запись.Организация;
						//ТекущаяОсновнаяЗапись.ВидДеятельности = Запись.ВидДеятельности;
						//ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
						//ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
						//ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
						//ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
						//ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
						//ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
						//ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
						//ТекущаяОсновнаяЗапись.НомерПериодаТрудовойДеятельности = Запись.НомерПериодаТрудовойДеятельности;
						//ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
						//ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
						//СписокТерриториальныеУсловияЗаписи.Очистить();
						//СписокУсловияТрудаЗаписи.Очистить();
						//СписокВыслугаЛетЗаписи.Очистить();
					}
					/*// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
*/
					/*//Проверка нумерации периодов деятельности
*/
					//ОжидаемыйНомерПериода = ПредыдущийНомерПериодаДеятельности +1;
					if(true/*СменилсяНомерПериодаДеятельности*/)
					{
						if(true/*(Запись.НомерПериодаТрудовойДеятельности <> ОжидаемыйНомерПериода)*/)
						{
							//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер периода трудовой деятельности. Ожидается номер: "+ОжидаемыйНомерПериода+"!");
						}
						/*//Сброс счетчика основных записей
*/
						//ПредыдущийНомерОсновнойЗаписи = 0;
					}
					/*//Проверка нумерации основных и дополнительных записей
*/
					if(true/*(ЭтоОсновнаяЗапись)*/)
					{
						//ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
						if(true/*(Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)*/)
						{
							//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");
							//;;
						}
						/*//Сброс счетчика дополнительных записей
*/
						//ПредыдущийНомерОсновнойЗаписи = 0;
					}
					/*//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
*/
					/*//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
*/
					//УказаныТерриториальныеУсловия = НЕ ПустаяСтрока(Запись.ТерриториальныеУсловияКод);
					//УказанРК = НЕ (Запись.РайонныйКоэффициент = 0);
					//ЗаданаГруппаТерриториальныеУсловия = УказаныТерриториальныеУсловия или УказанРК;
					/*//Признаки заполнения реквизитов группы "Особые условия труда"
*/
					//УказанКодПозицииСписка = НЕ ПустаяСтрока(Запись.КодПозицииСпискаКод);
					//УказаныОсобыеУсловияТруда = НЕ ПустаяСтрока(Запись.ОсобыеУсловияТрудаКод);
					//ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
					/*//Признаки заполнения реквизитов группы "Исчисляемый стаж"
*/
					//УказаноОснованиеИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ОснованиеИсчисляемогоСтажаКод);
					//УказанТретийПараметрИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ТретийПараметрИсчисляемогоСтажа);
					//ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
					/*//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
*/
					//УказанПараметрИсчисляемогоСтажа0 = НЕ (Запись.НулевойПараметрИсчисляемогоСтажа = 0);
					//УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0);
					//УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0);
					//ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа0 ИЛИ УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
					/*//Признаки заполнения реквизитов группы "ВыслугаЛет"
*/
					//УказаноОснованиеВыслугиЛет = НЕ ПустаяСтрока(Запись.ОснованиеВыслугиЛетКод);
					//ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
					/*//ПРОВЕРКА ЗАПИСЕЙ С ВИДОМ ДЕЯТЕЛЬНОСТИ, ОТЛИЧНЫМ ОТ РАБОТА
*/
					if(true/*Запись.ВидДеятельности <> Справочники.ВидыОбщественноПолезнойДеятельности.РАБОТА*/)
					{
						if(true/*ЗаданаГруппаТерриториальныеУсловия ИЛИ ЗаданаГруппаУсловияТруда ИЛИ ЗаданаГруппаИсчисляемыйСтаж ИЛИ ЗаданаГруппаФОВ
					ИЛИ ЗаданаГруппаФОВ ИЛИ ЗаданаГруппаВыслугаЛет*/)
						{
							//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Для записей с видом деятельности, отличным от РАБОТА, должен быть указан только период!", ТекущаяОсновнаяЗапись);
						}
						if(true/*НЕ ЭтоОсновнаяЗапись*/)
						{
							//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Дополнительные записи для видов деяетльности, отличных от РАБОТА, недопустимы!", ТекущаяОсновнаяЗапись);
						}
					}
					/*//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ  
*/
					if(true/*НЕ ЭтоОсновнаяЗапись*/)
					{
						//СЗВК_ВыполнитьПроверкуДополнительнойЗаписи(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
					}
					/*// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
*/
					if(true/*ЗаданаГруппаТерриториальныеУсловия*/)
					{
						//ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод)+", "+Запись.РайонныйКоэффициент;
						if(true/*СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено*/)
						{
							//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						}
					}
					if(true/*УказаныОсобыеУсловияТруда*/)
					{
						//ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						if(true/*СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено*/)
						{
							//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						}
					}
					if(true/*УказаноОснованиеВыслугиЛет*/)
					{
						//ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
						if(true/*СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено*/)
						{
							//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						}
					}
					/*//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "ТерриториальныеУсловия"
*/
					if(true/*УказаныТерриториальныеУсловия*/)
					{
						if(true/*Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКС 
					Или Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.РКСМ 
					Или Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКСР 
					Или Запись.ТерриториальныеУсловия = Справочники.ТерриториальныеУсловия.МКС*/)
						{
							if(true/*НЕ УказанРК*/)
							{
								//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Для территориальных условий РКС, МКС, МКСР и РКСМ должен быть указан районный коэффициент!", ТекущаяОсновнаяЗапись);
							}
						}
					}
					if(true/*(УказанРК) И НЕ(Запись.РайонныйКоэффициент >= 1.01 И Запись.РайонныйКоэффициент <= 2.00)*/)
					{
						//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Районный коэффициент должен быть в диапазоне от 1.01 до 2.00!", ТекущаяОсновнаяЗапись);
					}
					/*//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
*/
					//КПС = СокрЛП(Запись.КодПозицииСпискаКод);
					/*//Определим, к какому списку принадлежит код позиции
*/
					//НазваниеСписка ="";
					if(true/*УказанКодПозицииСписка*/)
					{
						if(true/*НЕ УказаныОсобыеУсловияТруда*/)
						{
							//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
						}
						//ДлинаКПС = СтрДлина(КПС);
						if(true/*(ДлинаКПС=8)или(ДлинаКПС=14)*/)
						{
							//Первые2СимволаКПС = Лев(КПС,2);
							if(true/*(Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12")*/)
							{
								//НазваниеСписка = "Список№1";
							}
						}
					}
					/*//УказанКодПозицииСписка
*/
					if(true/*УказаныОсобыеУсловияТруда*/)
					{
						/*//Проверки на возможные коды списков для конкретных условий труда
*/
						//КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						//Первые8СимволовКПС = Лев(КПС,8);
						//НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
						if(true/*Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.ЗП12А*/)
						{
							if(true/*(НазваниеСписка <> "Список№1")*/)
							{
								//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
							}
						}
					}
					/*//УказаныОсобыеУсловияТруда
*/
					/*//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
*/
					//УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
					//УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
					//УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
					//ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
					if(true/*УказаноОснованиеВыслугиЛет*/)
					{
						//КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
						//НачалоСообщения = "Для основания выслуги лет " + КодОснования;
						//УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
						/*//Медицинские работники
*/
						if(true/*(Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП81СМ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ЗП81ГД)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ХИРУРСМ)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.ХИРУРГД)*/)
						{
							if(true/*ТекущаяОсновнаяЗапись.ДатаОкончанияПериода < Дата('19991101')*/)
							{
								/*//до 1 ноября 1999 г
*/
								if(true/*ПараметрыУказаны*/)
								{
									//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " до 01.11.1999 года параметры 1-3 указываться не должны!", ТекущаяОсновнаяЗапись);
								}
								/*//после 1 ноября 1999 г
*/
								if(true/*НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1))*/)
								{
									//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " после 01.11.1999 третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
								}
							}
							/*//Педагогические работники	
*/
						}
					}
					/*//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
*/
					if(true/*УказанТретийПараметрИсчисляемогоСтажа*/)
					{
						if(true/*(Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕТИ") И (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕКРЕТ")*/)
						{
							//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать значение ДЕТИ или ДЕКРЕТ!", ТекущаяОсновнаяЗапись);
						}
					}
					if(true/*Запись.ОснованиеИсчисляемогоСтажа = Справочники.ОснованияИсчисляемогоТрудовогоСтажа.СЕЗОН*/)
					{
						if(true/*СписокСезонныхГодов.НайтиПоЗначению(Год(Запись.ДатаНачалаПериода)) = Неопределено*/)
						{
							//СписокСезонныхГодов.Добавить(Год(Запись.ДатаНачалаПериода));
						}
					}
					/*//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 0,1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
*/
					if(true/*ЗаданаГруппаФОВ*/)
					{
						if(true/*(НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеИсчисляемогоСтажа)
					И (НЕ ЗаданаГруппаТерриториальныеУсловия)*/)
						{
							/*СтрОшибка = " Параметры 0,1,2 исчисляемого стажа должны указываться только при заполнении других групп реквизитов"
					+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");*/
							//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
						}
						if(true/*Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ*/)
						{
							if(true/*Запись.ПервыйПараметрИсчисляемогоСтажа > 11*/)
							{
								//СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
								//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							}
							if(true/*Запись.ВторойПараметрИсчисляемогоСтажа > 30*/)
							{
								//СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
								//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							}
							//Лет = 0;
							//Месяцев = 0;
							//Дней = 0;
							//ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);
							//ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
							//КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
							//ФОВДляСравнения = Запись.НулевойПараметрИсчисляемогоСтажа *12*30 + Запись.ПервыйПараметрИсчисляемогоСтажа *30 + Запись.ВторойПараметрИсчисляемогоСтажа;
							if(true/*(ФОВДляСравнения > КалендарноеВремя)*/)
							{
								//СтрОшибка = "Указанное фактически отработанное время превышает календарное время!";
								//СЗВК_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							}
						}
					}
					/*//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
*/
					/*//Запомним для следующей итерации
*/
					//ПредыдущаяОрганизация = Запись.Организация;
					//ПредыдущийВидДеятельности = Запись.ВидДеятельности;
					//ПредыдущийНомерПериодаДеятельности= Запись.НомерПериодаТрудовойДеятельности;
					//ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
					//ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
				}
				/*//Цикл по записям о стаже текущего физлица
*/
			}
			/*//Цикл по физлицам
*/
			//СЗВК_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(Новый Структура("МассивФизлиц", МассивФизлиц), ТаблицаПлохихЗаписей);
			if(true/*ТаблицаПлохихЗаписей.Количество() > 0*/)
			{
				/*// Вывод ошибок
*/
				//ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже");
			}
			return null;
		}
		//Выполняет проверку правильности заполнения строк стажа

		public object СЗВК_ПроверитьНаборСведенийДляОценкиПенсионныхПрав(/*ИнициаторВызова, МассивФизЛиц, РезультатВыборкиЗаписей = ""*/)
		{
			//Запрос = Новый Запрос;
			if(true/*ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК")*/)
			{
				//Запрос.УстановитьПараметр("ДокументСсылка" , ИнициаторВызова);
				//Запрос.УстановитьПараметр("ДатаСреза", ИнициаторВызова.Дата);
				/*Запрос.Текст ="ВЫБРАТЬ
		|	СведенияСЗВКРаботники.ФизЛицо КАК ФизЛицо,
		|	СведенияСЗВКРаботники.НомерСтроки,
		|	СведенияДляОценкиПенсионныхПравСЗВК.НомерЗаписи,
		|	СведенияДляОценкиПенсионныхПравСЗВК.ВидСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа,
		|	СведенияДляОценкиПенсионныхПравСЗВК.КодСтажа.Код КАК КодСтажаКод,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Лет,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Месяцев,
		|	СведенияДляОценкиПенсионныхПравСЗВК.Дней,
		|	ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество КАК ФИОФизЛица
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеЗастрахованногоЛицаСЗВК.РаботникиОрганизации КАК СведенияСЗВКРаботники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияДляОценкиПенсионныхПравСЗВК КАК СведенияДляОценкиПенсионныхПравСЗВК
		|		ПО СведенияСЗВКРаботники.ФизЛицо = СведенияДляОценкиПенсионныхПравСЗВК.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизЛицСрезПоследних
		|		ПО СведенияСЗВКРаботники.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|ГДЕ
		|	СведенияСЗВКРаботники.Ссылка = &ДокументСсылка";*/
			}
			//РезультатВыборкиЗаписей = Запрос.Выполнить();
			/*//ТаблицаЗаписей =  РезультатВыборкиЗаписей.Выгрузить();
*/
			//ВыборкаЗаписей = РезультатВыборкиЗаписей.Выбрать();
			/*//Для имеющихся физлиц запросим записи о стаже
*/
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("МассивФизЛиц",МассивФизЛиц);
			/*Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаписиОСтажеДляСЗВК.ФизЛицо,
	|	ЗаписиОСтажеДляСЗВК.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ЗаписиОСтажеДляСЗВК.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтажеДляСЗВК.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет
	|ИЗ
	|	РегистрСведений.ЗаписиОСтажеДляСЗВК КАК ЗаписиОСтажеДляСЗВК
	|
	|ГДЕ
	|	ЗаписиОСтажеДляСЗВК.ФизЛицо В(&МассивФизЛиц)";*/
			//ТаблицаЗаписейОСтаже = Запрос.Выполнить().Выгрузить();
			//ТаблицаЗаписейОСтаже.Индексы.Добавить("ФизЛицо,ТерриториальныеУсловия");
			//ТаблицаЗаписейОСтаже.Индексы.Добавить("ФизЛицо,ОсобыеУсловияТруда");
			//ТаблицаЗаписейОСтаже.Индексы.Добавить("ФизЛицо,ОснованиеВыслугиЛет");
			/*// Таблица собщений об ошибках
*/
			//ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
			//ТаблицаПлохихЗаписей.Колонки.Добавить("Запись");
			//ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
			//ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
			/*//Проверку правильности заполнения записей надо выполнять отдельно для каждого физлица
*/
			while(true/*ВыборкаЗаписей.СледующийПоЗначениюПоля("ФизЛицо")*/)
			{
				if(true/*ВыборкаЗаписей.НомерЗаписи = NULL*/)
				{
					/*//Если записей нет, то пропустим физлицо
*/
				}
				//ФизЛицо = ВыборкаЗаписей.ФизЛицо;
				//КоличествоЗаписейОбОбщемТрудовомСтаже =0;
				//КоличествоЗаписейТЕРР =0;
				//КоличествоЗаписейОСОБ =0;
				//КоличествоЗаписейВЫСЛ =0;
				//СписокПроверенныхКодовСтажа = Новый СписокЗначений;
				/*//Для Каждого Запись Из НайдСтрокиСведений цикл
*/
				while(true/*ВыборкаЗаписей.Следующий()*/)
				{
					//Запись = ВыборкаЗаписей;
					//НачалоСообщения = "";
					if(true/*ПустаяСтрока(Строка(Запись.ВидСтажа))*/)
					{
						//СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Не указан вид стажа!");
					}
					if(true/*(Запись.Лет + Запись.Месяцев + Запись.Дней) = 0*/)
					{
						//СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Значения реквизитов ""Лет, Месяцев, Дней"" не должны одновременно равняться нулю!");
					}
					if(true/*Запись.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОбщийТрудовойСтаж*/)
					{
						/*//Проверка записей об общем стаже
*/
						//КоличествоЗаписейОбОбщемТрудовомСтаже = КоличествоЗаписейОбОбщемТрудовомСтаже + 1;
						if(true/*КоличествоЗаписейОбОбщемТрудовомСтаже > 1*/)
						{
							//СЗВК_ДобавитьЗаписьСведенийВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения+"Записей об общем стаже должно быть не больше одной!");
						}
					}
				}
				/*//По записям набора
*/
			}
			/*//По ФизЛицам
*/
			if(true/*ТаблицаПлохихЗаписей.Количество() > 0*/)
			{
				/*// Вывод ошибок
*/
				//ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке сведений для оценки пенсионных прав");
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-4
		// Выполняет авторасчет стажа для формы СЗВ4
		//

		public object СЗВ4_ПолучитьДанныеДляЗаполненияСтажа(/*ОбособленноеПодразделение, Год, СписокФизЛиц = Неопределено, Знач ДатаОкончанияПериодаЗаполнения = Неопределено*/)
		{
			//НачалоГода = Дата(Год,1,1);
			//КонецГода = КонецГода(Дата(Год,1,1));
			if(true/*ДатаОкончанияПериодаЗаполнения = Неопределено*/)
			{
				//ДатаОкончанияПериодаЗаполнения = КонецГода;
			}
			//ДатаОкончанияПериодаЗаполнения = КонецДня(ДатаОкончанияПериодаЗаполнения);
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			//Запрос.УстановитьПараметр("СписокФизЛиц",				СписокФизЛиц);
			//Запрос.УстановитьПараметр("Год",						Год);
			//Запрос.УстановитьПараметр("НачалоГода",					НачалоГода);
			//Запрос.УстановитьПараметр("КонецГода",					ДатаОкончанияПериодаЗаполнения);
			//Запрос.УстановитьПараметр("НачалоСледующегоГода",		ДатаОкончанияПериодаЗаполнения + 1);
			//Запрос.УстановитьПараметр("Организация",				ОбособленноеПодразделение);
			//Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение));
			//Запрос.УстановитьПараметр("ТерриториальныеУсловия",		ОбособленноеПодразделение.ТерриториальныеУсловияПФР);
			//Запрос.УстановитьПараметр("НеОтбиратьДанныеПоФизлицу",	СписокФизЛиц = Неопределено);
			/*Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|	&НачалоГода КАК ДатаС,
	|	РаботникиОрганизацииСрезПоследних.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ПериодЗавершения
	|ПОМЕСТИТЬ ВТДатыДвижений
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоГода,
	|			Организация = &ГоловнаяОрганизация " + ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников() + "
	|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|					ИЛИ Сотрудник.ФизЛицо В (&СписокФизЛиц) )) КАК РаботникиОрганизацииСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Период,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность,
	|	РаботникиОрганизации.ГрафикРаботы,
	|	РаботникиОрганизации.ПериодЗавершения
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	(&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|	И РаботникиОрганизации.Организация = &ГоловнаяОрганизация " + ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников("РаботникиОрганизации.") + "
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|	И РаботникиОрганизации.Период > &НачалоГода
	|	И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|	И РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.Физлицо,
	|	Работники.ПериодЗавершения,
	|	Работники.Организация,
	|	Работники.ПодразделениеОрганизацииЗавершения,
	|	Работники.ДолжностьЗавершения,
	|	Работники.ГрафикРаботыЗавершения,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|			И (ПериодыПерекрытия.Период > Работники.Период)
	|			И (&НеОтбиратьДанныеПоФизлицу
	|				ИЛИ ПериодыПерекрытия.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И (&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ Работники.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|	И Работники.Организация = &ГоловнаяОрганизация " + ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников("Работники.") + "
	|	И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|	И Работники.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И Работники.ПериодЗавершения > &НачалоГода
	|	И Работники.ПериодЗавершения < &НачалоСледующегоГода
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыДвижений.Сотрудник КАК Сотрудник,
	|	ПериодыДвижений.ФизЛицо КАК ФизЛицо,
	|	ПериодыДвижений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ПериодыДвижений.Должность КАК Должность,
	|	ПериодыДвижений.ГрафикРаботы,
	|	ПериодыДвижений.ДатаС,
	|	ПериодыДвижений.ДатаПо,
	|	ПериодыДвижений.ПериодЗавершения,
	|	ДатыУвольнения.ПричинаИзмененияСостояния
	|ПОМЕСТИТЬ ВТПериодыДвижений
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыНазначений1.Сотрудник КАК Сотрудник,
	|		ДатыНазначений1.Физлицо КАК ФизЛицо,
	|		ДатыНазначений1.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ДатыНазначений1.Должность КАК Должность,
	|		ДатыНазначений1.ГрафикРаботы КАК ГрафикРаботы,
	|		ДатыНазначений1.ДатаС КАК ДатаС,
	|		ВЫБОР
	|			КОГДА ДатыНазначений1.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода) > ДатыНазначений1.ПериодЗавершения
	|							ТОГДА ДатыНазначений1.ПериодЗавершения
	|						ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода)
	|					КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода)
	|		КОНЕЦ КАК ДатаПо,
	|		ДатыНазначений1.ПериодЗавершения КАК ПериодЗавершения
	|	ИЗ
	|		ВТДатыДвижений КАК ДатыНазначений1
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыНазначений2
	|			ПО ДатыНазначений1.Сотрудник = ДатыНазначений2.Сотрудник
	|				И (ДатыНазначений2.Организация = &ГоловнаяОрганизация)
	|				И (ДатыНазначений2.Период > ДатыНазначений1.ДатаС)
	|				И (ДатыНазначений2.Период < &НачалоСледующегоГода)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДатыНазначений1.Сотрудник,
	|		ДатыНазначений1.Физлицо,
	|		ДатыНазначений1.ПодразделениеОрганизации,
	|		ДатыНазначений1.Должность,
	|		ДатыНазначений1.ГрафикРаботы,
	|		ДатыНазначений1.ДатаС,
	|		ДатыНазначений1.ПериодЗавершения) КАК ПериодыДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыУвольнения
	|		ПО ПериодыДвижений.Сотрудник = ДатыУвольнения.Сотрудник
	|			И (ДатыУвольнения.Организация = &ГоловнаяОрганизация)
	|			И ПериодыДвижений.ДатаПо = ДатыУвольнения.Период
	|			И (ДатыУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПодразделениеОрганизации,
	|	Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыПостоянства.Сотрудник КАК Сотрудник,
	|	ПериодыПостоянства.ФизЛицо КАК ФизЛицо,
	|	"""" КАК ТретийПараметрИсчисляемогоСтажа,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&Год КАК Год,
	|	ПериодыПостоянства.ТерриториальныеУсловия,
	|	ПериодыПостоянства.ОсобыеУсловияТруда,
	|	ПериодыПостоянства.ГрафикРаботы,
	|	ПериодыПостоянства.КодПозицииСписка,
	|	ЕСТЬNULL(ПериодыПостоянства.ОснованиеВыслугиЛет, ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)) КАК ОснованиеВыслугиЛет,
	|	ПериодыПостоянства.НазначениеС КАК ДатаНачалаПериода,
	|	ДОБАВИТЬКДАТЕ(ПериодыПостоянства.НазначениеПо, ДЕНЬ, -1) КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТКадровыеПериоды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачалаПериодов.Сотрудник КАК Сотрудник,
	|		НачалаПериодов.ФизЛицо КАК ФизЛицо,
	|		НачалаПериодов.Должность КАК Должность,
	|		НачалаПериодов.ГрафикРаботы КАК ГрафикРаботы,
	|		НачалаПериодов.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		НачалаПериодов.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|		НачалаПериодов.КодПозицииСписка КАК КодПозицииСписка,
	|		НачалаПериодов.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|		НачалаПериодов.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|		НачалаПериодов.ДатаС КАК НазначениеС,
	|		ЕСТЬNULL(МИНИМУМ(ОкончанияПериодов.ДатаС), &НачалоСледующегоГода) КАК НазначениеПо
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПериодыНазначений.Сотрудник КАК Сотрудник,
	|			ПериодыНазначений.ФизЛицо КАК ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|			ПериодыНазначений.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|			ПериодыНазначений.Должность КАК Должность,
	|			ПериодыНазначений.КодПозицииСписка КАК КодПозицииСписка,
	|			ПериодыНазначений.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|			ПериодыНазначений.ГрафикРаботы КАК ГрафикРаботы,
	|			ПериодыНазначений.ДатаС КАК ДатаС,
	|			ЕСТЬNULL(ШР.ОсобыеУсловияТруда, ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)) КАК ОсобыеУсловияТруда
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПериодыНазначений.Сотрудник КАК Сотрудник,
	|				ПериодыНазначений.Физлицо КАК ФизЛицо,
	|				ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|				ВЫБОР
	|					КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|						ТОГДА &ТерриториальныеУсловия
	|					ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|				КОНЕЦ КАК ТерриториальныеУсловия,
	|				ПериодыНазначений.Должность КАК Должность,
	|				ПериодыНазначений.Должность.КодПозицииСписка КАК КодПозицииСписка,
	|				ПериодыНазначений.Должность.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|				ПериодыНазначений.ГрафикРаботы КАК ГрафикРаботы,
	|				ПериодыНазначений.ДатаС КАК ДатаС,
	|				МАКСИМУМ(ШР.Период) КАК Период
	|			ИЗ
	|				ВТДатыДвижений КАК ПериодыНазначений
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
	|						И (ШР.Период <= ПериодыНазначений.ДатаС)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПериодыНазначений.Сотрудник,
	|				ПериодыНазначений.Физлицо,
	|				ПериодыНазначений.ПодразделениеОрганизации,
	|				ВЫБОР
	|					КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|						ТОГДА &ТерриториальныеУсловия
	|					ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|				КОНЕЦ,
	|				ПериодыНазначений.Должность,
	|				ПериодыНазначений.Должность.КодПозицииСписка,
	|				ПериодыНазначений.Должность.ОснованиеВыслугиЛет,
	|				ПериодыНазначений.ГрафикРаботы,
	|				ПериодыНазначений.ДатаС) КАК ПериодыНазначений
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
	|					И (ШР.Период = ПериодыНазначений.Период)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПериодыНазначений.Сотрудник,
	|			ПериодыНазначений.ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации,
	|			ВЫБОР
	|				КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|					ТОГДА &ТерриториальныеУсловия
	|				ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|			КОНЕЦ,
	|			ПериодыНазначений.Должность,
	|			ПериодыНазначений.Должность.КодПозицииСписка,
	|			ПериодыНазначений.Должность.ОснованиеВыслугиЛет,
	|			ПериодыНазначений.ГрафикРаботы,
	|			ШР.Период,
	|			ШР.ОсобыеУсловияТруда
	|		ИЗ
	|			ВТПериодыДвижений КАК ПериодыНазначений
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
	|					И (ШР.Период > ПериодыНазначений.ДатаС)
	|					И (ШР.Период < ПериодыНазначений.ДатаПо
	|						ИЛИ ШР.Период = ПериодыНазначений.ДатаПо
	|							И ПериодыНазначений.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))) КАК НачалаПериодов
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|				РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|				РаботникиОрганизации.Период КАК ДатаС
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ГДЕ
	|				РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|						ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|				И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|				И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|				И РаботникиОрганизации.Период > &НачалоГода
	|				И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				Работники.Сотрудник,
	|				Работники.Сотрудник.Физлицо,
	|				Работники.ПериодЗавершения
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК Работники
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|					ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|						И (ПериодыПерекрытия.Период > Работники.Период)
	|						И (ПериодыПерекрытия.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
	|						И (&НеОтбиратьДанныеПоФизлицу
	|							ИЛИ ПериодыПерекрытия.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|						И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|			ГДЕ
	|				Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|						ИЛИ Работники.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|				И Работники.Организация = &ГоловнаяОрганизация
	|				И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|				И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|				И Работники.ПериодЗавершения > &НачалоГода
	|				И Работники.ПериодЗавершения < &НачалоСледующегоГода
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ПериодыНазначений.Сотрудник,
	|				ПериодыНазначений.ФизЛицо,
	|				ШР.Период
	|			ИЗ
	|				ВТПериодыДвижений КАК ПериодыНазначений
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
	|						И (ШР.Период > ПериодыНазначений.ДатаС)
	|						И (ШР.Период <= ПериодыНазначений.ДатаПо)) КАК ОкончанияПериодов
	|			ПО НачалаПериодов.Сотрудник = ОкончанияПериодов.Сотрудник
	|				И НачалаПериодов.ДатаС < ОкончанияПериодов.ДатаС
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НачалаПериодов.Сотрудник,
	|		НачалаПериодов.ФизЛицо,
	|		НачалаПериодов.ПодразделениеОрганизации,
	|		НачалаПериодов.ТерриториальныеУсловия,
	|		НачалаПериодов.Должность,
	|		НачалаПериодов.КодПозицииСписка,
	|		НачалаПериодов.ОснованиеВыслугиЛет,
	|		НачалаПериодов.ГрафикРаботы,
	|		НачалаПериодов.ДатаС,
	|		НачалаПериодов.ОсобыеУсловияТруда) КАК ПериодыПостоянства
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Начисления.Организация КАК Организация,
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.ВидРасчета.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТНЕСторнированныеНачисления
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			ПериодДействия МЕЖДУ &НачалоГода И &КонецГода
	|				И Организация = &ГоловнаяОрганизация
	|				И ВидРасчета.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|					ИЛИ Сотрудник.Физлицо В (&СписокФизЛиц) )
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТДатыДвижений.Сотрудник
	|					ИЗ
	|						ВТДатыДвижений)) КАК Начисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТНачисленияСУчетомСторнирования
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|ГДЕ
	|	ТСторно.ВидРасчета ЕСТЬ NULL 
	|	И (НЕ Начисления.Сторно)
	|
	|ОБЪЕДИНИТЬ
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.ФизЛицо КАК ФизЛицо,
	|		Начисления.Сотрудник КАК Сотрудник,
	|		Начисления.ВидРасчета КАК ВидРасчета,
	|		Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|		Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|		СУММА(ВЫБОР
	|				КОГДА Начисления.Сторно
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК СуммаСторно
	|	ИЗ
	|		ВТНЕСторнированныеНачисления КАК Начисления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Начисления.ФизЛицо,
	|		Начисления.Сотрудник,
	|		Начисления.ВидРасчета,
	|		Начисления.ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец,
	|		Начисления.ВидСтажаСЗВ4) КАК Начисления
	|ГДЕ
	|	Начисления.СуммаСторно > 0
	|
	|ОБЪЕДИНИТЬ	
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|			ТОГДА ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияКонец, СЕКУНДА, 1)
	|		ИНАЧЕ Начисления.ПериодДействияНачало
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|			ТОГДА Начисления.ПериодДействияКонец
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияНачало, СЕКУНДА, -1)
	|	КОНЕЦ,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И ((НЕ(ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|					И ТСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец)))
	|ГДЕ
	|	(НЕ ТСторно.ВидРасчета ЕСТЬ NULL )
	|	И (НЕ Начисления.Сторно)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияКонец, СЕКУНДА, 1),
	|	Начисления.ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И ((НЕ(ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|					И ТСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец)))
	|			И (ТСторно.ПериодДействияНачало > Начисления.ПериодДействияНачало)
	|			И (ТСторно.ПериодДействияКонец < Начисления.ПериодДействияКонец)
	|ГДЕ
	|	(НЕ ТСторно.ВидРасчета ЕСТЬ NULL )
	|	И (НЕ Начисления.Сторно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	ВидСтажаСЗВ4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияНачало >= КадровыеПериоды.ДатаНачалаПериода
	|			ТОГДА Начисления.ПериодДействияНачало
	|		ИНАЧЕ КадровыеПериоды.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияКонец <= КадровыеПериоды.ДатаОкончанияПериода
	|			ТОГДА Начисления.ПериодДействияКонец
	|		ИНАЧЕ КадровыеПериоды.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериода,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|	КадровыеПериоды.ФизЛицо КАК ФизЛицо,
	|	КадровыеПериоды.Сотрудник КАК Сотрудник,
	|	КадровыеПериоды.ОбособленноеПодразделение,
	|	КадровыеПериоды.Год
	|ПОМЕСТИТЬ ВТОплаченныеПериодыРаботы
	|ИЗ
	|	ВТКадровыеПериоды КАК КадровыеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСУчетомСторнирования КАК Начисления
	|		ПО КадровыеПериоды.Сотрудник = Начисления.Сотрудник
	|			И (Начисления.ПериодДействияНачало МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода
	|				ИЛИ Начисления.ПериодДействияКонец МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода)
	|			И (Начисления.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСУчетомСторнирования КАК ПовторныеНачисления
	|		ПО КадровыеПериоды.ФизЛицо = ПовторныеНачисления.ФизЛицо
	|			И (ПовторныеНачисления.ПериодДействияНачало = Начисления.ПериодДействияНачало)
	|			И (ПовторныеНачисления.ПериодДействияКонец = Начисления.ПериодДействияКонец)
	|			И (ПовторныеНачисления.ВидСтажаСЗВ4 <> Начисления.ВидСтажаСЗВ4)
	|			И (ПовторныеНачисления.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка))
	|ГДЕ
	|	(НЕ(Начисления.ВидСтажаСЗВ4 = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж)
	|				И ЕСТЬNULL(ПовторныеНачисления.ВидСтажаСЗВ4, """") = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЕТИ)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОтдельноСтоящиеПериоды.ФизЛицо,
	|	ОтдельноСтоящиеПериоды.Сотрудник,
	|	ОтдельноСтоящиеПериоды.ВидСтажаСЗВ4,
	|	ОтдельноСтоящиеПериоды.ОбособленноеПодразделение,
	|	ОтдельноСтоящиеПериоды.Год,
	|	ВЫБОР
	|		КОГДА ПересеченияПериодов.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтдельноСтоящиеПериоды.ДатаНачалаПериода
	|		ИНАЧЕ ПересеченияПериодов.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ПересеченияПериодов.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтдельноСтоящиеПериоды.ДатаОкончанияПериода
	|		ИНАЧЕ ПересеченияПериодов.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТОтредактированныеОплаченныеПериоды
	|ИЗ
	|	ВТОплаченныеПериодыРаботы КАК ОтдельноСтоящиеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВЫБОР
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 1
	|					ТОГДА ПересекающиеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|						И ПересекающиеПериоды.ДатаОкончанияПериода > ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаОкончанияПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|						И ПересекающиеПериоды.ДатаОкончанияПериода <= ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|						И ПересекающиеПериоды.ДатаОкончанияПериода > ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|						И ПересекающиеПериоды.ДатаОкончанияПериода <= ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ПересекающиеПериоды.ДатаОкончанияПериода
	|			КОНЕЦ КАК ДатаНачалаПериода,
	|			ВЫБОР
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 1
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|					ТОГДА ПересекающиеПериоды.ДатаОкончанияПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|					ТОГДА ИсходныеПериоды.ДатаОкончанияПериода
	|			КОНЕЦ КАК ДатаОкончанияПериода,
	|			ИсходныеПериоды.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|			ИсходныеПериоды.Сотрудник КАК Сотрудник,
	|			ИсходныеПериоды.ФизЛицо КАК ФизЛицо,
	|			ИсходныеПериоды.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|			ИсходныеПериоды.Год КАК Год
	|		ИЗ
	|			ВТОплаченныеПериодыРаботы КАК ИсходныеПериоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ОплаченныеПериоды1.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|					ОплаченныеПериоды1.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|					ОплаченныеПериоды1.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|					ОплаченныеПериоды1.Сотрудник КАК Сотрудник,
	|					ОплаченныеПериоды1.ФизЛицо КАК ФизЛицо,
	|					ОплаченныеПериоды1.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|					ОплаченныеПериоды1.Год КАК Год,
	|					1 КАК НомерИнтервала
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды1
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					ОплаченныеПериоды2.ДатаНачалаПериода,
	|					ОплаченныеПериоды2.ДатаОкончанияПериода,
	|					ОплаченныеПериоды2.ВидСтажаСЗВ4,
	|					ОплаченныеПериоды2.Сотрудник,
	|					ОплаченныеПериоды2.ФизЛицо,
	|					ОплаченныеПериоды2.ОбособленноеПодразделение,
	|					ОплаченныеПериоды2.Год,
	|					2
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды2
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					ОплаченныеПериоды3.ДатаНачалаПериода,
	|					ОплаченныеПериоды3.ДатаОкончанияПериода,
	|					ОплаченныеПериоды3.ВидСтажаСЗВ4,
	|					ОплаченныеПериоды3.Сотрудник,
	|					ОплаченныеПериоды3.ФизЛицо,
	|					ОплаченныеПериоды3.ОбособленноеПодразделение,
	|					ОплаченныеПериоды3.Год,
	|					3
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды3) КАК ПересекающиеПериоды
	|				ПО ИсходныеПериоды.ВидСтажаСЗВ4 = ПересекающиеПериоды.ВидСтажаСЗВ4
	|					И ИсходныеПериоды.Сотрудник = ПересекающиеПериоды.Сотрудник
	|					И ИсходныеПериоды.ОбособленноеПодразделение = ПересекающиеПериоды.ОбособленноеПодразделение
	|					И ИсходныеПериоды.Год = ПересекающиеПериоды.Год
	|					И ИсходныеПериоды.ДатаНачалаПериода > ПересекающиеПериоды.ДатаНачалаПериода
	|					И ИсходныеПериоды.ДатаНачалаПериода < ПересекающиеПериоды.ДатаОкончанияПериода) КАК ПересеченияПериодов
	|		ПО ОтдельноСтоящиеПериоды.ВидСтажаСЗВ4 = ПересеченияПериодов.ВидСтажаСЗВ4
	|			И ОтдельноСтоящиеПериоды.Сотрудник = ПересеченияПериодов.Сотрудник
	|			И ОтдельноСтоящиеПериоды.ОбособленноеПодразделение = ПересеченияПериодов.ОбособленноеПодразделение
	|			И ОтдельноСтоящиеПериоды.Год = ПересеченияПериодов.Год
	|			И ОтдельноСтоящиеПериоды.ДатаНачалаПериода <= ПересеченияПериодов.ДатаНачалаПериода
	|			И ОтдельноСтоящиеПериоды.ДатаОкончанияПериода >= ПересеченияПериодов.ДатаОкончанияПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НефильтрованныеДниСтажа.ДатаКалендаря,
	|	ДОБАВИТЬКДАТЕ(НефильтрованныеДниСтажа.ДатаКалендаря, ДЕНЬ, 1) КАК СледующаяДатаКалендаря,
	|	ДОБАВИТЬКДАТЕ(НефильтрованныеДниСтажа.ДатаКалендаря, ДЕНЬ, -1) КАК ПредыдущаяДатаКалендаря,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 1
	|			ТОГДА ""ДЕКРЕТ""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 2
	|			ТОГДА ""ДЕТИ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа,
	|	НефильтрованныеДниСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	НефильтрованныеДниСтажа.Сотрудник КАК Сотрудник,
	|	НефильтрованныеДниСтажа.ФизЛицо КАК ФизЛицо,
	|	НефильтрованныеДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	НефильтрованныеДниСтажа.Год КАК Год,
	|	НефильтрованныеДниСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	НефильтрованныеДниСтажа.КодПозицииСписка КАК КодПозицииСписка,
	|	НефильтрованныеДниСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТДниСтажа
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НефильтрованныеДниСтажа.ДатаКалендаря КАК ДатаКалендаря,
	|		ВЫБОР
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.Декрет)
	|				ТОГДА 1
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.Дети)
	|				ТОГДА 2
	|			ИНАЧЕ 3
	|		КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ТерриториальныеУсловия
	|		КОНЕЦ КАК ТерриториальныеУсловия,
	|		НефильтрованныеДниСтажа.Сотрудник КАК Сотрудник,
	|		НефильтрованныеДниСтажа.ФизЛицо КАК ФизЛицо,
	|		НефильтрованныеДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		НефильтрованныеДниСтажа.Год КАК Год,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ОсобыеУсловияТруда
	|		КОНЕЦ КАК ОсобыеУсловияТруда,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.КодПозицииСписка
	|		КОНЕЦ КАК КодПозицииСписка,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ОснованиеВыслугиЛет
	|		КОНЕЦ КАК ОснованиеВыслугиЛет
	|	ИЗ
	|		(ВЫБРАТЬ 
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	|			ВТКадровыеПериоды.ФизЛицо,
	|			ВТКадровыеПериоды.Сотрудник,
	|
	|			ВТКадровыеПериоды.ТретийПараметрИсчисляемогоСтажа,
	|			ВТКадровыеПериоды.ОбособленноеПодразделение,
	|			ВТКадровыеПериоды.Год,
	|			ВТКадровыеПериоды.ТерриториальныеУсловия,
	|			ВТКадровыеПериоды.ОсобыеУсловияТруда,
	|			ВТКадровыеПериоды.ГрафикРаботы,
	|			ВТКадровыеПериоды.КодПозицииСписка,
	|			ВТКадровыеПериоды.ОснованиеВыслугиЛет,
	|	 			
	|	 		МАКСИМУМ(ВидыСтажа.Порядок) КАК ПорядковыйНомерВидаСтажа
	|		ИЗ
	|			РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПериоды КАК ВТКадровыеПериоды
	|		ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ВТКадровыеПериоды.ДатаНачалаПериода И ВТКадровыеПериоды.ДатаОкончанияПериода)
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОтредактированныеОплаченныеПериоды КАК ВТОтредактированныеОплаченныеПериоды
	|		ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ВТОтредактированныеОплаченныеПериоды.ДатаНачалаПериода И ВТОтредактированныеОплаченныеПериоды.ДатаОкончанияПериода)
	|			И ВТОтредактированныеОплаченныеПериоды.Сотрудник = ВТКадровыеПериоды.Сотрудник
	|			И ВТОтредактированныеОплаченныеПериоды.ОбособленноеПодразделение = ВТКадровыеПериоды.ОбособленноеПодразделение
	|		
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыСтажаСЗВ4 КАК ВидыСтажа
	|		ПО ВидыСтажа.Ссылка = ВТОтредактированныеОплаченныеПериоды.ВидСтажаСЗВ4
	|		
	|		ГДЕ
	|			РегламентированныйПроизводственныйКалендарь.Год = &Год
	|				
	|	И		(НЕ ЕСТЬNULL(ВТКадровыеПериоды.Сотрудник, ВТОтредактированныеОплаченныеПериоды.Сотрудник) ЕСТЬ NULL )
	|		И ЕСТЬNULL(ВТОтредактированныеОплаченныеПериоды.ВидСтажаСЗВ4, """") <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж)
	|			
	|		СГРУППИРОВАТЬ ПО
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
	|			ВТКадровыеПериоды.ФизЛицо,
	|			ВТКадровыеПериоды.Сотрудник,
	|
	|			ВТКадровыеПериоды.ТретийПараметрИсчисляемогоСтажа,
	|			ВТКадровыеПериоды.ОбособленноеПодразделение,
	|			ВТКадровыеПериоды.Год,
	|			ВТКадровыеПериоды.ТерриториальныеУсловия,
	|			ВТКадровыеПериоды.ОсобыеУсловияТруда,
	|			ВТКадровыеПериоды.ГрафикРаботы,
	|			ВТКадровыеПериоды.КодПозицииСписка,
	|			ВТКадровыеПериоды.ОснованиеВыслугиЛет
	|		) КАК НефильтрованныеДниСтажа
	|		ЛЕВОЕ СОЕДИНЕНИЕ
	|		Перечисление.ВидыСтажаСЗВ4 КАК ВидыСтажа
	|		ПО ВидыСтажа.Порядок = НефильтрованныеДниСтажа.ПорядковыйНомерВидаСтажа
	|
	|ГДЕ
	|	НефильтрованныеДниСтажа.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|            ) КАК НефильтрованныеДниСтажа
	|СГРУППИРОВАТЬ ПО
	|	НефильтрованныеДниСтажа.Год,
	|	НефильтрованныеДниСтажа.Сотрудник,
	|	НефильтрованныеДниСтажа.ФизЛицо,
	|	НефильтрованныеДниСтажа.ДатаКалендаря,
	|	НефильтрованныеДниСтажа.ТерриториальныеУсловия,
	|	НефильтрованныеДниСтажа.ОбособленноеПодразделение,
	|	НефильтрованныеДниСтажа.ОсобыеУсловияТруда,
	|	НефильтрованныеДниСтажа.КодПозицииСписка,
	|	НефильтрованныеДниСтажа.ОснованиеВыслугиЛет
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Год,
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	ПредыдущаяДатаКалендаря,
	|	ТерриториальныеУсловия,
	|	ОсобыеУсловияТруда,
	|	КодПозицииСписка,
	|	ОснованиеВыслугиЛет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниСтажа.ДатаКалендаря,
	|	ДниСтажа.СледующаяДатаКалендаря КАК СледующаяДатаКалендаря,
	|	ДниСтажа.ПредыдущаяДатаКалендаря,
	|	ДниСтажа.ТретийПараметрИсчисляемогоСтажа,
	|	ДниСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ДниСтажа.ФизЛицо КАК ФизЛицо,
	|	ДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ДниСтажа.Год КАК Год,
	|	ДниСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ДниСтажа.КодПозицииСписка КАК КодПозицииСписка,
	|	ДниСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТСледующиеДниСтажа
	|ИЗ
	|	ВТДниСтажа КАК ДниСтажа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Год,
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	СледующаяДатаКалендаря,
	|	ТерриториальныеУсловия,
	|	ОсобыеУсловияТруда,
	|	КодПозицииСписка,
	|	ОснованиеВыслугиЛет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущийДень.ДатаКалендаря КАК НачалоПериода,
	|	ТекущийДень.ТретийПараметрИсчисляемогоСтажа,
	|	ТекущийДень.ТерриториальныеУсловия,
	|	ТекущийДень.ФизЛицо КАК ФизЛицо,
	|	ТекущийДень.ОбособленноеПодразделение,
	|	ТекущийДень.Год,
	|	ТекущийДень.ОсобыеУсловияТруда,
	|	ТекущийДень.КодПозицииСписка,
	|	ТекущийДень.ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТНачалаПериодов
	|ИЗ
	|	ВТДниСтажа КАК ТекущийДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСледующиеДниСтажа КАК ПредыдущийДень
	|		ПО ТекущийДень.ДатаКалендаря = ПредыдущийДень.СледующаяДатаКалендаря
	|			И ТекущийДень.ТерриториальныеУсловия = ПредыдущийДень.ТерриториальныеУсловия
	|			И ТекущийДень.ТретийПараметрИсчисляемогоСтажа = ПредыдущийДень.ТретийПараметрИсчисляемогоСтажа
	|			И ТекущийДень.ФизЛицо = ПредыдущийДень.ФизЛицо
	|			И ТекущийДень.ОбособленноеПодразделение = ПредыдущийДень.ОбособленноеПодразделение
	|			И ТекущийДень.Год = ПредыдущийДень.Год
	|			И ТекущийДень.ОсобыеУсловияТруда = ПредыдущийДень.ОсобыеУсловияТруда
	|			И ТекущийДень.КодПозицииСписка = ПредыдущийДень.КодПозицииСписка
	|			И ТекущийДень.ОснованиеВыслугиЛет = ПредыдущийДень.ОснованиеВыслугиЛет
	|ГДЕ
	|	ПредыдущийДень.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущийДень.ДатаКалендаря КАК ОкончаниеПериода,
	|	ТекущийДень.ТретийПараметрИсчисляемогоСтажа,
	|	ТекущийДень.ТерриториальныеУсловия,
	|	ТекущийДень.ФизЛицо КАК ФизЛицо,
	|	ТекущийДень.ОбособленноеПодразделение,
	|	ТекущийДень.Год,
	|	ТекущийДень.ОсобыеУсловияТруда,
	|	ТекущийДень.КодПозицииСписка,
	|	ТекущийДень.ОснованиеВыслугиЛет
	|ПОМЕСТИТЬ ВТОкончанияПериодов
	|ИЗ
	|	ВТДниСтажа КАК ТекущийДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниСтажа КАК СледующийДень
	|		ПО ТекущийДень.ДатаКалендаря = СледующийДень.ПредыдущаяДатаКалендаря
	|			И ТекущийДень.ТерриториальныеУсловия = СледующийДень.ТерриториальныеУсловия
	|			И ТекущийДень.ТретийПараметрИсчисляемогоСтажа = СледующийДень.ТретийПараметрИсчисляемогоСтажа
	|			И ТекущийДень.ФизЛицо = СледующийДень.ФизЛицо
	|			И ТекущийДень.ОбособленноеПодразделение = СледующийДень.ОбособленноеПодразделение
	|			И ТекущийДень.Год = СледующийДень.Год
	|			И ТекущийДень.ОсобыеУсловияТруда = СледующийДень.ОсобыеУсловияТруда
	|			И ТекущийДень.КодПозицииСписка = СледующийДень.КодПозицииСписка
	|			И ТекущийДень.ОснованиеВыслугиЛет = СледующийДень.ОснованиеВыслугиЛет
	|ГДЕ
	|	СледующийДень.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТНачалаПериодов.НачалоПериода КАК ДатаНачалаПериода,
	|	ЕСТЬNULL(МИНИМУМ(ВТОкончанияПериодов.ОкончаниеПериода), ВТНачалаПериодов.НачалоПериода) КАК ДатаОкончанияПериода,
	|	ВЫБОР
	|		КОГДА ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ""ДЕТИ""
	|			ТОГДА """"
	|		ИНАЧЕ ВТНачалаПериодов.ТерриториальныеУсловия
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа,
	|	ВТНачалаПериодов.ФизЛицо КАК ФизЛицо,
	|	ВТНачалаПериодов.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ВТНачалаПериодов.Год,
	|	&НачалоГода КАК ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ""ДЕТИ""
	|			ТОГДА """"
	|		ИНАЧЕ ВТНачалаПериодов.ОсобыеУсловияТруда
	|	КОНЕЦ КАК ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ""ДЕТИ""
	|			ТОГДА """"
	|		ИНАЧЕ ВТНачалаПериодов.КодПозицииСписка
	|	КОНЕЦ КАК КодПозицииСписка,
	|	ВЫБОР
	|		КОГДА ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""ДЕКРЕТ"")
	|			ТОГДА """"
	|		ИНАЧЕ ВТНачалаПериодов.ОснованиеВыслугиЛет
	|	КОНЕЦ КАК ОснованиеВыслугиЛет
	|ИЗ
	|	ВТНачалаПериодов КАК ВТНачалаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОкончанияПериодов КАК ВТОкончанияПериодов
	|		ПО ВТНачалаПериодов.ТерриториальныеУсловия = ВТОкончанияПериодов.ТерриториальныеУсловия
	|			И ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ВТОкончанияПериодов.ТретийПараметрИсчисляемогоСтажа
	|			И ВТНачалаПериодов.ФизЛицо = ВТОкончанияПериодов.ФизЛицо
	|			И ВТНачалаПериодов.ОбособленноеПодразделение = ВТОкончанияПериодов.ОбособленноеПодразделение
	|			И ВТНачалаПериодов.Год = ВТОкончанияПериодов.Год
	|			И ВТНачалаПериодов.ОсобыеУсловияТруда = ВТОкончанияПериодов.ОсобыеУсловияТруда
	|			И ВТНачалаПериодов.КодПозицииСписка = ВТОкончанияПериодов.КодПозицииСписка
	|			И ВТНачалаПериодов.ОснованиеВыслугиЛет = ВТОкончанияПериодов.ОснованиеВыслугиЛет
	|			И ВТНачалаПериодов.НачалоПериода <= ВТОкончанияПериодов.ОкончаниеПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТНачалаПериодов.НачалоПериода,
	|	ВТНачалаПериодов.ТерриториальныеУсловия,
	|	ВТНачалаПериодов.ТретийПараметрИсчисляемогоСтажа,
	|	ВТНачалаПериодов.ФизЛицо,
	|	ВТНачалаПериодов.ОбособленноеПодразделение,
	|	ВТНачалаПериодов.Год,
	|	ВТНачалаПериодов.ОсобыеУсловияТруда,
	|	ВТНачалаПериодов.КодПозицииСписка,
	|	ВТНачалаПериодов.ОснованиеВыслугиЛет
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	ДатаНачалаПериода";*/
			/*//
*/
			/*ПериодыДоговоровТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо КАК Физлицо,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&Год КАК Год,
	|	&НачалоГода КАК ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.КодПоОКАТО = """"
	|			ТОГДА &ТерриториальныеУсловия
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка) КАК ОсобыеУсловияТруда,
	|	"""" КАК КодПозицииСписка,
	|	ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка) КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала < &НачалоГода
	|			ТОГДА &НачалоГода
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания < &НачалоСледующегоГода
	|			ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания
	|		ИНАЧЕ &КонецГода
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоГода
	|	И (&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо В (&СписокФизЛиц) )
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	ДатаОкончанияПериода,
	|	ДатаНачалаПериода";*/
			//ТаблицаСтажа = Запрос.Выполнить().Выгрузить();
			//ТаблицаСтажа.Индексы.Добавить("ФизЛицо");
			/*// Удалим из таблицы стажа незначимые записи:
*/
			/*//  - если по физлицу имеется 2 непрерывных записи с одинаковыми условиями труда, то объединим данные записи 
*/
			//Н = ТаблицаСтажа.Количество() - 1;
			while(true/*Н > 0*/)
			{
				//ТекущаяЗапись = ТаблицаСтажа[Н];
				//ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
				if(true/*ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа*/)
				{
					/*// если совпадает физлицо
*/
					/*// если записи непрерывны (идут друг за другом по времени)
*/
					/*// и совпадают параметры стажа
*/
					/*// объединим записи в одну
*/
					//ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
					//ТаблицаСтажа.Удалить(ТекущаяЗапись);
				}
				//Н = Н - 1;
			}
			/*;
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");*/
			//Запрос.Текст = ПериодыДоговоровТекст;
			//ТаблицаСтажаПоДоговорам = Запрос.Выполнить().Выгрузить();
			//Н = ТаблицаСтажаПоДоговорам.Количество() - 1;
			while(true/*Н > 0*/)
			{
				//ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н];
				//ПредшествующаяЗапись = ТаблицаСтажаПоДоговорам[Н-1];
				if(true/*ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.ДатаНачалаПериода <= КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 // если записи идут друг за другом или пересекаются*/)
				{
					/*// если совпадает физлицо
*/
					/*// если записи идут друг за другом или пересекаются 
*/
					/*// объединим записи в одну
*/
					//ПредшествующаяЗапись.ДатаОкончанияПериода = Макс(ТекущаяЗапись.ДатаОкончанияПериода, ПредшествующаяЗапись.ДатаОкончанияПериода);
					//ПредшествующаяЗапись.ДатаНачалаПериода = Мин(ТекущаяЗапись.ДатаНачалаПериода, ПредшествующаяЗапись.ДатаНачалаПериода);
					//ТаблицаСтажаПоДоговорам.Удалить(ТекущаяЗапись);
				}
				//Н = Н - 1;
			}
			/*;
	
	ТаблицаСтажаПоДоговорам.Сортировать("ФизЛицо,ДатаНачалаПериода");*/
			//ПредшествующееФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
			//МассивСтрок = Новый Массив;
			//СтрокСтажа = 0;
			//СтруктураПоиска = Новый Структура("ФизЛицо");
			//Н = ТаблицаСтажаПоДоговорам.Количество();
			while(true/*Н > 0*/)
			{
				//ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н - 1];
				if(true/*ТекущаяЗапись.ФизЛицо <> ПредшествующееФизЛицо*/)
				{
					//ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущаяЗапись);
					//МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
					//ПредшествующееФизЛицо = ТекущаяЗапись.ФизЛицо;
				}
				//СтрокСтажа = МассивСтрок.Количество();
				if(true/*СтрокСтажа = 0*/)
				{
					//ЗаполнитьЗначенияСвойств(ТаблицаСтажа.Добавить(),ТекущаяЗапись);
					//Н = Н - 1;
				}
				//ДатаНачалаПериода = ТекущаяЗапись.ДатаНачалаПериода;
				//ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
				if(true/*ДатаОкончанияПериода >= ДатаНачалаПериода*/)
				{
					//НоваяСтрока = ТаблицаСтажа.Добавить();
					//ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяЗапись);
					//НоваяСтрока.ДатаНачалаПериода = ДатаНачалаПериода;
					//НоваяСтрока.ДатаОкончанияПериода = ДатаОкончанияПериода;
				}
				//Н = Н - 1;
			}
			/*;
	
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");*/
			//Н = ТаблицаСтажа.Количество() - 1;
			while(true/*Н > 0*/)
			{
				//ТекущаяЗапись = ТаблицаСтажа[Н];
				//ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
				if(true/*ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа*/)
				{
					/*// если совпадает физлицо
*/
					/*// если записи непрерывны (идут друг за другом по времени)
*/
					/*// и совпадают параметры стажа
*/
					/*// объединим записи в одну
*/
					//ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
					//ТаблицаСтажа.Удалить(ТекущаяЗапись);
				}
				//Н = Н - 1;
			}
			return null;
		}
		//Формирует строку-заголовок для сообщения об ошибке, найденной в записи о стаже

		public object СЗВ4_СформироватьЗаголовокОшибкиЗаписиОСтаже(/*Запись, ОсновнаяЗапись*/)
		{
			//ЗаголовокСообщения = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация: ")+СокрЛП(Запись.ОбособленноеПодразделение);
			//ЗаголовокСообщения = ЗаголовокСообщения + ", Период: "+Формат(ОсновнаяЗапись.ДатаНачалаПериода,"ДФ='дд.ММ.гггг'")+"-"+Формат(ОсновнаяЗапись.ДатаОкончанияПериода,"ДФ='дд.ММ.гггг'");
			if(true/*Запись.НомерДополнительнойЗаписи <> 0*/)
			{
				//ЗаголовокСообщения = ЗаголовокСообщения + ", Дополнительная запись № "+Запись.НомерДополнительнойЗаписи;
			}
			//ЗаголовокСообщения = ЗаголовокСообщения + ":"+Символы.ПС;
			return null;
		}
		//Добавляет новую строку в таблицу плохих записей стажа

		public void СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(/*ТаблицаПлохихЗаписей,Запись,ОписаниеОшибки,ОсновнаяЗапись = ""*/)
		{
			if(true/*ОсновнаяЗапись = ""*/)
			{
				//ОсновнаяЗапись = Запись;
			}
			//ЗаголовокОшибки = СЗВ4_СформироватьЗаголовокОшибкиЗаписиОСтаже(Запись,ОсновнаяЗапись);
			/*//Для строк сообщения сделаем отступ
*/
			//Стр = "";
			//МассивСтрок =  ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ОписаниеОшибки,Символы.ПС);
			//ПолноеОписаниеОшибки = ЗаголовокОшибки + Стр;
			//НоваяСтрока = ТаблицаПлохихЗаписей.Добавить();
			//НоваяСтрока.ФизЛицо = Запись.ФизЛицо;
			//НоваяСтрока.ОписаниеОшибки = ПолноеОписаниеОшибки;
		}
		//Выполняет проверку дополнительной записи стажа на допустимось значений реквизитов

		public object СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(/*Запись, ОсновнаяЗапись, ТаблицаПлохихЗаписей*/)
		{
			if(true/*НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОсобыеУсловияТруда) 
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)
		И НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа)*/)
			{
				/*СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дополнительная запись может вводиться только при заполнении хотя бы одного из реквизитов основной записи:
		| 		Особые условия труда , Выслуга лет, Территориальные условия, Основание исчисляемого стажа!",ОсновнаяЗапись);*/
			}
			if(true/*ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажа)*/)
			{
				//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи о стаже не может указываться основание исчисляемого стажа!",ОсновнаяЗапись);
			}
			/*//Проверка на обязательный ввод одной из льгот
*/
			//УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловия);
			//УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТруда);
			//УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛет);
			if(true/*(НЕ УказаныТерриториальныеУсловия) И (НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеВыслугиЛет)*/)
			{
				//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи должна быть задана либо территориальная льгота, либо особые условия труда, либо выслуга лет!",ОсновнаяЗапись);
			}
			/*//Проверка на ввод территориальной льготы
*/
			if(true/*УказаныТерриториальныеУсловия*/)
			{
				if(true/*НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ТерриториальныеУсловия)*/)
				{
					//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи территориальная льгота может быть указана только при указании территориальной льготы в основной записи!",ОсновнаяЗапись);
				}
			}
			/*//Проверка на ввод условий труда
*/
			if(true/*УказаныОсобыеУсловияТруда*/)
			{
				//УсловияТрудаЗаписи = Запись.ОсобыеУсловияТруда;
				if(true/*(УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_1)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_2)
			И (УсловияТрудаЗаписи <> Справочники.ОсобыеУсловияТруда.Ст27_7)*/)
				{
					//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда должен принимать значение 27-1, 27-2 или 27-7!",ОсновнаяЗапись);
				}
				if(true/*(УсловияТрудаЗаписи = Справочники.ОсобыеУсловияТруда.Ст27_7) 
			И (ОсновнаяЗапись.ОснованиеИсчисляемогоСтажа <> Справочники.ОснованияИсчисляемогоТрудовогоСтажа.УИК104)*/)
				{
					/*СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"В дополнительной записи код условий труда 27-7 может быть указан" 
			+Символы.ПС+"только в случае указания в основной записи кода исчисляемого стажа УИК104!",ОсновнаяЗапись);*/
				}
			}
			/*//Проверка на ввод основания выслуги лет
*/
			//КодВыслугиЛетЗаписи = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
			//Основание = Запись.ОснованиеВыслугиЛет;
			if(true/*НЕ ЗначениеЗаполнено(ОсновнаяЗапись.ОснованиеВыслугиЛет)*/)
			{
				if(true/*ЗначениеЗаполнено(Основание) 
			И Основание <> Справочники.ОснованияВыслугиЛет.Ст28_СМ 
			И Основание <> Справочники.ОснованияВыслугиЛет.Ст28_ГД 
			И Основание <> Справочники.ОснованияВыслугиЛет.Ст28_СМХР 
			И Основание <> Справочники.ОснованияВыслугиЛет.Ст28_ГДХР*/)
				{
					/*СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Если в основной записи не указан код выслуги лет, то в дополнительной записи" 
			+Символы.ПС+"основание выслуги лет должно быть пустым или указаны коды 27-СМ,27-ГД,27-СМХР или 27-ГДХР (до 2011 г. - 28-СМ,28-ГД,28-СМХР или 28-ГДХР)!",ОсновнаяЗапись);*/
				}
				/*//В основной записи код выслуги указан
*/
				//КодВыслугиЛетОсновнойЗаписи = СокрЛП(ОсновнаяЗапись.ОснованиеВыслугиЛетКод);
				//ОснованиеОсновнойЗаписи = ОсновнаяЗапись.ОснованиеВыслугиЛет;
				if(true/*ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.Ст28_СМ 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.Ст28_ГД 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.Ст28_СМХР 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.Ст28_ГДХР 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.ЛЕТИСП
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.САМОЛЕТ 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.СПЕЦАВ 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.ОПЫТИСП 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.ИСПКЛС1 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.ИТСМАВ 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.НОРМАПР 
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.РЕАКТИВН
			И ОснованиеОсновнойЗаписи <> Справочники.ОснованияВыслугиЛет.НОРМСП*/)
				{
					/*СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"При указании в основной записи кода выслуги лет " + КодВыслугиЛетОсновнойЗаписи
			+ Символы.ПС + "в дополнительной записи код выслуги указываться не может!",ОсновнаяЗапись);*/
				}
			}
			return null;
		}
		//Выполняет проверку записи стажа на допустимось значений реквизитов между группами

		public object СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(/*ИнициаторВызова, СтруктураПараметров, ТаблицаПлохихЗаписей*/)
		{
			//Запрос = Новый Запрос;
			if(true/*ТипЗнч(СтруктураПараметров) = Тип("ТаблицаЗначений")*/)
			{
				//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				//Запрос.УстановитьПараметр("ИсточникДанных",	СтруктураПараметров);
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧ.НомерСтроки КАК НомерСтроки,
		|	ТЧ.ФизЛицо КАК ФизЛицо,
		|	ТЧ.Организация,
		|	ТЧ.КатегорияЗастрахованныхЛиц,
		|	ТЧ.ОтчетныйПериод
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	&ИсточникДанных КАК ТЧ
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";*/
				//Запрос.Выполнить();
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	Записи.ФизЛицо КАК ФизЛицо,
		|	Записи.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	Записи.ОтчетныйПериод КАК ОтчетныйПериод,
		|	Записи.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
		|	Записи.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	Записи.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	Записи.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	Записи.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	Записи.ОсобыеУсловияТруда.Код КАК УказанныйКодУсловийТруда,
		|	ЕСТЬNULL(Записи.КодПозицииСписка.Код, """") КАК УказанныйКодПозицииСписка,
		|	Записи.ОснованиеИсчисляемогоСтажа.Код КАК УказанныйКодОснованияИсчисляемогоСтажа,
		|	Записи.ОснованиеВыслугиЛет.Код КАК УказанныйКодОснованияВыслугиЛет,
		|	Записи.ПервыйПараметрИсчисляемогоСтажа КАК УказанныйПервыйПараметрИсчисляемогоСтажа,
		|	Записи.ВторойПараметрИсчисляемогоСтажа КАК УказанныйВторойПараметрИсчисляемогоСтажа,
		|	Сочетания.НомерПравила КАК НомерПравила,
		|	Сочетания.КодУсловийТруда КАК КодУсловийТруда,
		|	Сочетания.ТипШаблонаКПС КАК ТипШаблонаКПС,
		|	Сочетания.КодПозицииСписка КАК КодПозицииСписка,
		|	Сочетания.КодОснованияИсчисляемогоСтажа КАК КодОснованияИсчисляемогоСтажа,
		|	Сочетания.КодОснованияВыслугиЛет КАК КодОснованияВыслугиЛет,
		|	Сочетания.ФорматФОВ КАК ФорматФОВ
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК Записи
		|		ПО ТЧРаботникиОрг.КатегорияЗастрахованныхЛиц = Записи.КатегорияЗастрахованныхЛиц
		|			И ТЧРаботникиОрг.ФизЛицо = Записи.ФизЛицо
		|			И ТЧРаботникиОрг.ОтчетныйПериод = Записи.ОтчетныйПериод
		|			И ТЧРаботникиОрг.Организация = Записи.ОбособленноеПодразделение
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДопустимыеСочетанияМеждуГруппамиСтажа КАК Сочетания
		|		ПО (Записи.ОсобыеУсловияТруда.Код = Сочетания.КодУсловийТруда
		|				ИЛИ Записи.ОсобыеУсловияТруда.Код ЕСТЬ NULL 
		|					И Сочетания.КодУсловийТруда = """")
		|			И (Записи.ОснованиеИсчисляемогоСтажа.Код = Сочетания.КодОснованияИсчисляемогоСтажа
		|				ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияИсчисляемогоСтажа = """")
		|			И (Записи.ОснованиеВыслугиЛет.Код = Сочетания.КодОснованияВыслугиЛет
		|				ИЛИ Записи.ОснованиеВыслугиЛет.Код ЕСТЬ NULL 
		|					И Сочетания.КодОснованияВыслугиЛет = """")
		|			И (Сочетания.ТипШаблонаКПС = ""Любой""
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Не указан""
		|					И Записи.КодПозицииСписка.Код ЕСТЬ NULL 
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""=""
		|					И Записи.КодПозицииСписка.Код = Сочетания.КодПозицииСписка
		|				ИЛИ Сочетания.ТипШаблонаКПС = ""Первые Н""
		|					И ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 8) = Сочетания.КодПозицииСписка
		|				ИЛИ ПОДСТРОКА(Записи.КодПозицииСписка.Код, 1, 4) = Сочетания.КодПозицииСписка)
		|ГДЕ
		|	(Записи.ОсобыеУсловияТруда.Код ЕСТЬ НЕ NULL 
		|			ИЛИ Записи.ОснованиеИсчисляемогоСтажа.Код ЕСТЬ НЕ NULL )
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	ОтчетныйПериод,
		|	КатегорияЗастрахованныхЛиц,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";*/
				//ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
			}
			//Выборка = Запрос.Выполнить().Выбрать();
			while(true/*Выборка.СледующийПоЗначениюПоля("ОбособленноеПодразделение")*/)
			{
				while(true/*Выборка.СледующийПоЗначениюПоля("ОтчетныйПериод")*/)
				{
					while(true/*Выборка.СледующийПоЗначениюПоля("КатегорияЗастрахованныхЛиц")*/)
					{
						while(true/*Выборка.СледующийПоЗначениюПоля(ИмяГруппировкиФизЛицо_НомерСтроки)*/)
						{
							while(true/*Выборка.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")*/)
							{
								while(true/*Выборка.СледующийПоЗначениюПоля("НомерДополнительнойЗаписи")*/)
								{
									//СтрокаСообщений = "Комбинация значений реквизитов:";
									//СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание выслуги лет = " + Выборка.УказанныйКодОснованияВыслугиЛет;
									//СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Основание исчисляемого стажа = " + Выборка.УказанныйКодОснованияИсчисляемогоСтажа;
									//СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Особые условия труда = " + Выборка.УказанныйКодУсловийТруда;
									//СтрокаСообщений = СтрокаСообщений + Символы.ПС+Символы.Таб+"Код позиции списка = " + Выборка.УказанныйКодПозицииСписка;
									if(true/*Не ЗначениеЗаполнено(Выборка.НомерПравила)
								Или СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12100000-11465" И СокрЛП(Выборка.УказанныйКодОснованияИсчисляемогоСтажа) <> "ВОДОЛАЗ" 
								Или Год(Выборка.ОтчетныйПериод) < 2002 И СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "УВД"
								Или Год(Выборка.ОтчетныйПериод) >= 2002 И СокрЛП(Выборка.УказанныйКодПозицииСписка) = "12003000-17541" И СокрЛП(Выборка.УказанныйКодОснованияВыслугиЛет) <> "27-14"*/)
									{
										//СтрокаСообщений = СтрокаСообщений+Символы.ПС+"Не является допустимой!";
										//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
									}
									/*//Флаг допустимости значений реквизитов  группы "Фактически отработанное время"  
*/
									//ФОВДопустимо = Ложь;
									//СтрокаСообщений = "Значения реквизитов группы ""Фактически отработанное время"" не соответствуют ни одному из заданных форматов:"+Символы.ПС;
									/*//Для Каждого ФорматФОВ из СписокДопустимыхФорматовФОВ цикл
*/
									while(true/*Выборка.Следующий()*/)
									{
										//ФорматФОВ = Выборка.ФорматФОВ;
										//СтрокаОшибкиФормата = "";
										//ПрошлоПроверку = 0;
										//СтрокаЗначенияПараметров = "";
										/*//Если формат не равен [ПУСТОЕ,ПУСТОЕ,ПУСТОЕ], то значения всех трех параметров не должны равняться 0
*/
										if(true/*(СокрЛП(ФорматФОВ) <> "___")и(СтрокаЗначенияПараметров="000")*/)
										{
											/*//
*/
											//ПрошлоПроверку = 0;
											//СтрокаОшибкиФормата = СтрокаОшибкиФормата + "В параметрах (Годы,Месяцы,Дни) должно быть указано отработанное время!"+Символы.ПС;
										}
										if(true/*ПрошлоПроверку = 2*/)
										{
											//ФОВДопустимо = Истина;
										}
										//СтрФорматФОВ = ФорматФОВ;
										//СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"_",",пустое");
										//СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"ч",",часы");
										//СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"м",",минуты");
										//СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Г",",годы");
										//СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"М",",месяцы");
										//СтрФорматФОВ = СтрЗаменить(СтрФорматФОВ,"Д",",дни");
										//СтрФорматФОВ = Сред(СтрФорматФОВ,2);
										/*//Убрали первую запятую
*/
										//СтрокаОшибкиФормата = "Соглано формату ["+СтрФорматФОВ+"]:"+Символы.ПС+СтрокаОшибкиФормата;
										//СтрокаСообщений = СтрокаСообщений + СтрокаОшибкиФормата;
									}
									/*// по вариантам формата ФОВ
*/
									if(true/*НЕ ФОВДопустимо*/)
									{
										//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,Выборка,СтрокаСообщений);
									}
								}
								/*// По дополнительным записям	
*/
							}
							/*// По основным записям	
*/
						}
						/*// По физлицам
*/
					}
					//;;
				}
				/*// По годам	
*/
			}
			/*// По обособленым подразделениям	
*/
			return null;
		}
		//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-4
		// Функция в параметре РезультатВыборкиЗаписей возвращает результат запроса выборки записей стажа

		public object СЗВ4_ПроверитьНаборЗаписейОСтаже(/*ИнициаторВызова, СтруктураПараметров, РезультатВыборкиЗаписей = "", ВыводитьСообщенияВОбработчикСообщений = Ложь, СообщенияРазделПроверки = Неопределено*/)
		{
			//Запрос = Новый Запрос;
			//ДоступнаРольРасчетчикаРегл = НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл();
			if(true/*ТипЗнч(ИнициаторВызова) = Тип("ДокументСсылка.СведенияОТрудовомСтажеИЗаработкеСЗВ4")*/)
			{
				//Запрос.УстановитьПараметр("ДокументСсылка",				ИнициаторВызова);
				//Запрос.УстановитьПараметр("ДатаАктуальности",			СтруктураПараметров.ДатаАктуальности);
				//Запрос.УстановитьПараметр("НачалоГода",					НачалоГода(СтруктураПараметров.ДатаАктуальности));
				//Запрос.УстановитьПараметр("Организация",				СтруктураПараметров.Организация);
				//Запрос.УстановитьПараметр("ГоловнаяОрганизация",		СтруктураПараметров.ГоловнаяОрганизация);
				//Запрос.УстановитьПараметр("ТрудовойДоговор",			Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
				//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				/*Запрос.Текст =
		"ВЫБРАТЬ
		|	ТЧ.НомерСтроки,
		|	ТЧ.ФизЛицо КАК ФизЛицо,
		|	ТЧ.АдресДляИнформирования,
		|	ТЧ.ФизЛицо.Наименование,
		|	ТЧ.ФизЛицо.СтраховойНомерПФР,
		|	ТЧ.Ссылка.Год,
		|	ТЧ.Ссылка.Организация
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК ТЧ
		|ГДЕ
		|	ТЧ.Ссылка = &ДокументСсылка
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо";*/
				//Запрос.Выполнить();
				/*Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТЗарегистрированныеСотрудниками
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО ТЧРаботникиОрг.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|			И (СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация)
		|ГДЕ
		|	СотрудникиОрганизаций.Ссылка ЕСТЬ НЕ NULL 
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";*/
				//Запрос.Выполнить();
				/*// В запросе кроме записей стажа выбираются данные, необходимые документу: ФИО физлиц, адреса, данные об отчислениях
*/
				/*Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
		|	ТЧРаботникиОрг.ФизЛицо КАК ФизЛицо,
		|	ТЧРаботникиОрг.ФизЛицоСтраховойНомерПФР КАК СтраховойНомерПФР,
		|	ТЧРаботникиОрг.АдресДляИнформирования КАК АдресДляИнформирования,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЕСТЬNULL(ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа, 0) КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЕСТЬNULL(ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа, 0) КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет,
		|	ФИОФизЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизЛицСрезПоследних.Отчество КАК Отчество,
		|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ТЧРаботникиОрг.ФизЛицоНаименование) КАК ФизЛицоНаименование,"
		+ ?(ДоступнаРольРасчетчикаРегл, "
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаСтраховуюЧастьПФР, 0) КАК НачисленоНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаНакопительнуюЧастьПФР, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоДополнительномуТарифу, 0) КАК НачисленоПоДополнительномуТарифу,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.ДнейБолезни, 0) КАК ДнейБолезни,
		|	ЕСТЬNULL(СуммыВзносов.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет,", "") + "
		|	ВЫБОР
		|		КОГДА РаботникиОрганизации.НомерСтроки ЕСТЬ NULL 
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ФизЛицоРаботаетВОрганизации
		|ИЗ
		|	ВТДанныеДокумента КАК ТЧРаботникиОрг
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
		|				&ДатаАктуальности,
		|				ФизЛицо В
		|					(ВЫБРАТЬ
		|						ТЧ.ФизЛицо
		|					ИЗ
		|						ВТДанныеДокумента КАК ТЧ)) КАК ФИОФизЛицСрезПоследних
		|		ПО ТЧРаботникиОрг.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТЗарегистрированныеСотрудниками КАК РаботникиОрганизации
		|		ПО ТЧРаботникиОрг.НомерСтроки = РаботникиОрганизации.НомерСтроки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
		|		ПО ТЧРаботникиОрг.ФизЛицо = ЗаписиОСтаже.ФизЛицо
		|			И ТЧРаботникиОрг.Год = ЗаписиОСтаже.Год
		|			И ТЧРаботникиОрг.Организация = ЗаписиОСтаже.ОбособленноеПодразделение"
		+ ?(ДоступнаРольРасчетчикаРегл, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносов
		|		ПО ТЧРаботникиОрг.ФизЛицо = СуммыВзносов.ФизЛицо
		|			И ТЧРаботникиОрг.Год = СуммыВзносов.Год
		|			И ТЧРаботникиОрг.Организация = СуммыВзносов.ОбособленноеПодразделение", "") + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕСТЬNULL(ЗаписиОСтаже.ОбособленноеПодразделение, """"),
		|	Год,
		|	НомерСтроки,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";*/
				//ИмяГруппировкиФизЛицо_НомерСтроки = "НомерСтроки";
				/*//Инициатором вызова является набор записей
*/
				//Запрос.УстановитьПараметр("МассивФизЛиц" , СтруктураПараметров.МассивФизЛиц);
				//Запрос.УстановитьПараметр("МассивЛет" , СтруктураПараметров.МассивЛет);
				//Запрос.УстановитьПараметр("МассивОбособленныхПодразделений" , СтруктураПараметров.МассивОбособленныхПодразделений);
				/*Запрос.Текст =
		"ВЫБРАТЬ
		|	ЗаписиОСтаже.ФизЛицо КАК ФизЛицо,
		|	ЗаписиОСтаже.Год КАК Год,
		|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
		|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
		|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
		|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
		|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
		|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
		|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
		|	ЗаписиОСтаже.ОсобыеУсловияТруда.Код КАК ОсобыеУсловияТрудаКод,
		|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
		|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
		|	ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа КАК ПервыйПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа КАК ВторойПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,"
		+ ?(ДоступнаРольРасчетчикаРегл, "
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаСтраховуюЧастьПФР, 0) КАК НачисленоНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоНаНакопительнуюЧастьПФР, 0) КАК НачисленоНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоДополнительномуТарифу, 0) КАК НачисленоПоДополнительномуТарифу,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаСтраховуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР, 0) КАК НачисленоПоВсейОрганизацииНаНакопительнуюЧастьПФР,
		|	ЕСТЬNULL(СуммыВзносов.ДнейБолезни, 0) КАК ДнейБолезни,
		|	ЕСТЬNULL(СуммыВзносов.ДнейОтпускаЗаСвойСчет, 0) КАК ДнейОтпускаЗаСвойСчет,", "") + "
		|	ЗаписиОСтаже.ОснованиеВыслугиЛет.Код КАК ОснованиеВыслугиЛетКод,
		|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
		|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет
		|ИЗ
		|	РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже"
		+ ?(ДоступнаРольРасчетчикаРегл, "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СуммыВзносовДляСЗВ4 КАК СуммыВзносов
		|		ПО ЗаписиОСтаже.ФизЛицо = СуммыВзносов.ФизЛицо
		|			И ЗаписиОСтаже.Год = СуммыВзносов.Год
		|			И ЗаписиОСтаже.ОбособленноеПодразделение = СуммыВзносов.ОбособленноеПодразделение", "") + "
		|ГДЕ
		|	ЗаписиОСтаже.ФизЛицо В(&МассивФизЛиц)
		|	И ЗаписиОСтаже.Год В(&МассивЛет)
		|	И ЗаписиОСтаже.ОбособленноеПодразделение В(&МассивОбособленныхПодразделений)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ОбособленноеПодразделение,
		|	Год,
		|	ФизЛицо,
		|	НомерОсновнойЗаписи,
		|	НомерДополнительнойЗаписи";*/
				//ИмяГруппировкиФизЛицо_НомерСтроки = "ФизЛицо";
			}
			//РезультатВыборкиЗаписей = Запрос.Выполнить();
			//ВыборкаЗаписей = РезультатВыборкиЗаписей.Выбрать();
			//ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
			//ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
			//ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
			/*//Проверку правильности заполнения записей надо выполнять отдельно для каждой организации, года и физлица
*/
			while(true/*ВыборкаЗаписей.СледующийПоЗначениюПоля("ОбособленноеПодразделение")*/)
			{
				//ОбособленноеПодразделение = ВыборкаЗаписей.ОбособленноеПодразделение;
				if(true/*ОбособленноеПодразделение = NULL*/)
				{
				}
				while(true/*ВыборкаЗаписей.СледующийПоЗначениюПоля("Год")*/)
				{
					//Год = ВыборкаЗаписей.Год;
					while(true/*ВыборкаЗаписей.СледующийПоЗначениюПоля(ИмяГруппировкиФизЛицо_НомерСтроки)*/)
					{
						if(true/*ВыборкаЗаписей.НомерОсновнойЗаписи = NULL*/)
						{
							/*//Физлицо не имеет сведений
*/
						}
						//ФизЛицо = ВыборкаЗаписей.ФизЛицо;
						/*// Для проверки неоплаченного стажа
*/
						//ВсегоДнейПоСтажу = 0;
						if(true/*ДоступнаРольРасчетчикаРегл*/)
						{
							//ВсегоНеотработанныхДней = ВыборкаЗаписей.ДнейБолезни + ВыборкаЗаписей.ДнейОтпускаЗаСвойСчет;
						}
						//ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, ОбособленноеПодразделение, Год, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
						/*//Список значений группы реквизитов территориальные условия одной основной записи
*/
						//СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
						/*//Список значений кодов условий труда одной основной записи
*/
						//СписокУсловияТрудаЗаписи = Новый СписокЗначений;
						/*//Список значений кодов выслуги лет основной записи
*/
						//СписокВыслугаЛетЗаписи = Новый СписокЗначений;
						//ПредыдущийНомерОсновнойЗаписи = 0;
						//ПредыдущийНомерДополнительнойЗаписи = 0;
						while(true/*ВыборкаЗаписей.Следующий()*/)
						{
							//Запись = ВыборкаЗаписей;
							/*//Организация, физлицо и год должны быть заполнены обязательно
*/
							if(true/*Запись.ОбособленноеПодразделение.Пустая()*/)
							{
								//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указана организация (обособленное подразделение)!");
							}
							if(true/*Запись.ФизЛицо.Пустая()*/)
							{
								//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указано физическое лицо!");
							}
							if(true/*Запись.Год < 2002*/)
							{
								//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Расчетный период (год) не может быть менее 2002!");
							}
							/*// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
*/
							/*//По умолчанию считаем, что запись основная
*/
							//ЭтоОсновнаяЗапись = Истина;
							/*//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
*/
							//ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
							/*//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
*/
							if(true/*Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) и Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода)*/)
							{
								if(true/*ДополнительнаяЗаписьВозможна*/)
								{
									//ЭтоОсновнаяЗапись = Ложь;
								}
							}
							/*// Проверка записей если сумма взносов равна нулю
*/
							if(true/*ДоступнаРольРасчетчикаРегл 
						И (Запись.НачисленоНаНакопительнуюЧастьПФР + Запись.НачисленоНаСтраховуюЧастьПФР) = 0*/)
							{
								if(true/*НЕ (Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕКРЕТ"
							ИЛИ Запись.ТретийПараметрИсчисляемогоСтажа = "ДЕТИ")*/)
								{
									/*ВсегоДнейПоСтажу = ВсегоДнейПоСтажу + 
							((Месяц(Запись.ДатаОкончанияПериода) - Месяц(Запись.ДатаНачалаПериода)) * 30
							+ ?(КонецМесяца(Запись.ДатаОкончанияПериода) = КонецДня(Запись.ДатаОкончанияПериода),30, День(Запись.ДатаОкончанияПериода))
							- ?(НачалоМесяца(Запись.ДатаНачалаПериода)= НачалоДня(Запись.ДатаНачалаПериода),0, День(Запись.ДатаНачалаПериода)));*/
								}
							}
							/*//Проверка только для основной записи о стаже
*/
							if(true/*ЭтоОсновнаяЗапись*/)
							{
								/*//Проверка на хронологический порядок записей
*/
								if(true/*ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено*/)
								{
									if(true/*Запись.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода*/)
									{
										//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
									}
								}
								/*//Переустановка текущей основной записи
*/
								//ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
								//ТекущаяОсновнаяЗапись.Год = Год;
								//ТекущаяОсновнаяЗапись.ОбособленноеПодразделение = ОбособленноеПодразделение;
								//ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
								//ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
								//ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
								//ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
								//ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
								//ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
								//ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
								//ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
								//ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
								//СписокТерриториальныеУсловияЗаписи.Очистить();
								//СписокУсловияТрудаЗаписи.Очистить();
								//СписокВыслугаЛетЗаписи.Очистить();
							}
							/*// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
*/
							/*//Проверка нумерации основных и дополнительных записей
*/
							if(true/*(ЭтоОсновнаяЗапись)*/)
							{
								//ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
								if(true/*(Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)*/)
								{
									//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");
									//;;
								}
							}
							/*//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
*/
							/*//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
*/
							//УказаныТерриториальныеУсловия = НЕ ПустаяСтрока(Запись.ТерриториальныеУсловияКод);
							/*//Признаки заполнения реквизитов группы "Особые условия труда"
*/
							//УказанКодПозицииСписка = НЕ ПустаяСтрока(Запись.КодПозицииСпискаКод);
							//УказаныОсобыеУсловияТруда = НЕ ПустаяСтрока(Запись.ОсобыеУсловияТрудаКод);
							//ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
							/*//Признаки заполнения реквизитов группы "Исчисляемый стаж"
*/
							//УказаноОснованиеИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ОснованиеИсчисляемогоСтажаКод);
							//УказанТретийПараметрИсчисляемогоСтажа = НЕ ПустаяСтрока(Запись.ТретийПараметрИсчисляемогоСтажа);
							//ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
							/*//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
*/
							//УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0);
							//УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0);
							//ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
							/*//Признаки заполнения реквизитов группы "ВыслугаЛет"
*/
							//УказаноОснованиеВыслугиЛет = НЕ ПустаяСтрока(Запись.ОснованиеВыслугиЛетКод);
							//ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
							/*//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
*/
							if(true/*НЕ ЭтоОсновнаяЗапись*/)
							{
								//СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
							}
							/*// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
*/
							if(true/*УказаныТерриториальныеУсловия*/)
							{
								//ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод);
								if(true/*СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено*/)
								{
									//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
								}
							}
							if(true/*УказаныОсобыеУсловияТруда*/)
							{
								//ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
								if(true/*СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено*/)
								{
									//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
								}
							}
							if(true/*УказаноОснованиеВыслугиЛет*/)
							{
								//ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
								if(true/*СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено*/)
								{
									//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
								}
							}
							/*//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
*/
							//КПС = СокрЛП(Запись.КодПозицииСпискаКод);
							/*//Определим, к какому списку принадлежит код позиции
*/
							//НазваниеСписка ="";
							if(true/*УказанКодПозицииСписка*/)
							{
								if(true/*НЕ УказаныОсобыеУсловияТруда*/)
								{
									//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
								}
								//ДлинаКПС = СтрДлина(КПС);
								if(true/*(ДлинаКПС=8)или(ДлинаКПС=14)*/)
								{
									//Первые2СимволаКПС = Лев(КПС,2);
									if(true/*(Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12")*/)
									{
										//НазваниеСписка = "Список№1";
									}
								}
							}
							/*//УказанКодПозицииСписка	 
*/
							if(true/*УказаныОсобыеУсловияТруда*/)
							{
								/*//Проверки на возможные коды списков для конкретных условий труда
*/
								//КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
								//Первые8СимволовКПС = ВРЕГ(Лев(КПС,8));
								//НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
								if(true/*Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_1*/)
								{
									if(true/*(НазваниеСписка <> "Список№1")*/)
									{
										//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
									}
								}
							}
							/*//УказаныОсобыеУсловияТруда	 
*/
							/*//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
*/
							//УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
							//УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
							//УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
							//ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
							if(true/*УказаноОснованиеВыслугиЛет*/)
							{
								//КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
								//НачалоСообщения = "Для основания выслуги лет " + КодОснования;
								//УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
								/*//Медицинские работники
*/
								if(true/*(Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМ) 
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГД)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМХР)
							ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГДХР)*/)
								{
									if(true/*НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1))*/)
									{
										//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
									}
									/*//Педагогические работники	
*/
								}
							}
							/*//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
*/
							if(true/*УказанТретийПараметрИсчисляемогоСтажа*/)
							{
								if(true/*(Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕТИ") И (Запись.ТретийПараметрИсчисляемогоСтажа <> "ДЕКРЕТ")*/)
								{
									//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать значение ДЕТИ или ДЕКРЕТ!", ТекущаяОсновнаяЗапись);
								}
							}
							/*//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
*/
							if(true/*ЗаданаГруппаФОВ*/)
							{
								if(true/*(НЕ УказаныОсобыеУсловияТруда) И (НЕ УказаноОснованиеИсчисляемогоСтажа)
							И (НЕ УказаныТерриториальныеУсловия)*/)
								{
									/*СтрОшибка = " Параметры 1,2 исчисляемого стажа должны указываться только при заполнении других групп реквизитов"
							+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");*/
									//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
								}
								if(true/*Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ*/)
								{
									if(true/*Запись.ПервыйПараметрИсчисляемогоСтажа > 11*/)
									{
										//СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
										//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
									}
									if(true/*Запись.ВторойПараметрИсчисляемогоСтажа > 30*/)
									{
										//СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
										//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
									}
									//Лет = 0;
									//Месяцев = 0;
									//Дней = 0;
									//ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);
									//ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
									//КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
									//ФОВДляСравнения = Запись.ПервыйПараметрИсчисляемогоСтажа *30 + Запись.ВторойПараметрИсчисляемогоСтажа;
									if(true/*(ФОВДляСравнения > КалендарноеВремя)*/)
									{
										//СтрОшибка = "Указанное фактически отработанное время превышает календарное время!";
										//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
									}
								}
							}
							/*//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
*/
							/*//Запомним для следующей итерации
*/
							//ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
							//ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
						}
						/*//Цикл по записям стажа текущего физлица за год
*/
						if(true/*ДоступнаРольРасчетчикаРегл 
					И (Запись.НачисленоНаНакопительнуюЧастьПФР + Запись.НачисленоНаСтраховуюЧастьПФР) = 0 
					И ВсегоНеотработанныхДней <> ВсегоДнейПоСтажу*/)
						{
							//СтрОшибка = "Если сумма взносов равна нулю, то количество дней периодов работы, за исключением периодов ""ДЕКРЕТ"", ""ДЕТИ"" " + Символы.ПС + "должно быть равно сумме дней из блоков Больничные листы и Административный отпуск ";
							//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка);
						}
					}
					/*//Цикл по физлицам
*/
				}
				/*//Цикл по годам 
*/
			}
			/*//Цикл по обособленным подразделениям
*/
			/*//Структура
*/
			//СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, СтруктураПараметров, ТаблицаПлохихЗаписей);
			if(true/*ТаблицаПлохихЗаписей.Количество() > 0*/)
			{
				/*// Вывод ошибок
*/
				//ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже", ВыводитьСообщенияВОбработчикСообщений, СообщенияРазделПроверки);
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////

		public void ФормированиеСведенийОСтажеИЗаработке(/*Год, Организация, ДатаОкончанияПериодаЗаполнения = Неопределено, СписокФизЛиц = Неопределено*/)
		{
			//ЗаполнятьСтаж = НастройкаПравДоступаПереопределяемый.ДоступнаРольКадровикаРегл();
			//ЗаполнятьСуммыВзносов = НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл();
			if(true/*Не ЗаполнятьСтаж И Не ЗаполнятьСуммыВзносов*/)
			{
			}
			//НачалоГода = Дата(Год,1,1);
			//КонецГода = КонецГода(НачалоГода);
			if(true/*ДатаОкончанияПериодаЗаполнения = Неопределено*/)
			{
				//ДатаОкончанияПериодаЗаполнения = КонецГода;
			}
			/*// РАСЧЕТ СУММ ВЗНОСОВ И ДНЕЙ ОТСУТСТВИЯ
*/
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			//Запрос.УстановитьПараметр("Год",						Год);
			//Запрос.УстановитьПараметр("НачалоГода",					НачалоГода);
			//Запрос.УстановитьПараметр("КонецГода",					КонецДня(ДатаОкончанияПериодаЗаполнения));
			//Запрос.УстановитьПараметр("ОбособленноеПодразделение",	Организация);
			//Запрос.УстановитьПараметр("СписокФизЛиц", 				СписокФизЛиц);
			//Запрос.УстановитьПараметр("НеОтбиратьДанныеПоФизлицу",	СписокФизЛиц = Неопределено);
			//Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			/*Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоГода,
	|			Организация = &ГоловнаяОрганизация
	|			И (&НеОтбиратьДанныеПоФизлицу ИЛИ Сотрудник.ФизЛицо В (&СписокФизЛиц) )
	|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК РаботникиОрганизацииСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &НачалоГода
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|		КОНЕЦ = &ОбособленноеПодразделение
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	РаботникиОрганизации.Период МЕЖДУ &НачалоГода И &КонецГода
	|			И (&НеОтбиратьДанныеПоФизлицу ИЛИ Сотрудник.ФизЛицо В (&СписокФизЛиц) )
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|	И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Сотрудник.Физлицо,
	|	Работники.Сотрудник
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|			И (&НеОтбиратьДанныеПоФизлицу ИЛИ ПериодыПерекрытия.Сотрудник.ФизЛицо В (&СписокФизЛиц) )
	|			И (ПериодыПерекрытия.Период > Работники.Период)
	|			И (ПериодыПерекрытия.Сотрудник = Работники.Сотрудник)
	|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.Организация = &ГоловнаяОрганизация
	|			И (&НеОтбиратьДанныеПоФизлицу ИЛИ Работники.Сотрудник.ФизЛицо В (&СписокФизЛиц) )
	|	И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И Работники.ОбособленноеПодразделениеЗавершения = &ОбособленноеПодразделение
	|	И Работники.ПериодЗавершения МЕЖДУ &НачалоГода И &КонецГода
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо,
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Организация = &ОбособленноеПодразделение
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо";*/
			//Запрос.Выполнить();
			if(true/*Не ЗаполнятьСуммыВзносов*/)
			{
				/*Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ФизЛица.Физлицо КАК Физлицо,
		|	ФизЛица.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	ВТСотрудники КАК ФизЛица
		|
		|УПОРЯДОЧИТЬ ПО
		|	ФизлицоНаименование";*/
			}
			//ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выбрать();
			if(true/*ЗаполнятьСуммыВзносов*/)
			{
				//НаборЗаписейОВзносах = РегистрыСведений.СуммыВзносовДляСЗВ4.СоздатьНаборЗаписей();
				//НаборЗаписейОВзносах.Отбор.ОбособленноеПодразделение.Значение = Организация;
				//НаборЗаписейОВзносах.Отбор.ОбособленноеПодразделение.Использование = Истина;
				//НаборЗаписейОВзносах.Отбор.Год.Значение = Год;
				//НаборЗаписейОВзносах.Отбор.Год.Использование = Истина;
				//НаборЗаписейОВзносах.Отбор.ФизЛицо.Использование = Истина;
			}
			/*// РАСЧЕТ СТАЖА
*/
			if(true/*ЗаполнятьСтаж*/)
			{
				//ТаблицаСтажа = СЗВ4_ПолучитьДанныеДляЗаполненияСтажа(Организация, Год, СписокФизЛиц, ДатаОкончанияПериодаЗаполнения);
				//НаборЗаписейОСтаже = РегистрыСведений.ЗаписиОСтажеДляСЗВ4.СоздатьНаборЗаписей();
				//НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Значение = Организация;
				//НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Использование = Истина;
				//НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Значение = НачалоГода;
				//НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Использование = Истина;
				//НаборЗаписейОСтаже.Отбор.ФизЛицо.Использование = Истина;
				//СтруктураПоиска = Новый Структура("ФизЛицо");
			}
			/*/////////////////////////////////////////////////////////////////////////////////////
*/
			/*// ОЧИСТКА СТАРЫХ ЗАПИСЕЙ О СТАЖЕ, ЗАПИСЕЙ О ВЗНОСАХ И ДОБАВЛЕНИЕ НОВЫХ ЗАПИСЕЙ ДОЛЖНО ПРОИСХОДИТЬ В РАМКАХ ОДНОЙ ТРАНЗАКЦИИ
*/
			//НачатьТранзакцию();
			/*// Загрузим полученные данные в наборы записей 
*/
			while(true/*ТаблицаРезультатаЗапроса.Следующий()*/)
			{
				if(true/*ЗаполнятьСтаж*/)
				{
					/*// Установим отбор записей в наборе по выбранному работнику
*/
					//НаборЗаписейОСтаже.Отбор.ФизЛицо.Значение = ТаблицаРезультатаЗапроса.ФизЛицо;
					//СтруктураПоиска.ФизЛицо = ТаблицаРезультатаЗапроса.ФизЛицо;
					//МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
					/*// Пронумеруем основные записи о стаже
*/
					//НомерЗаписи = 0;
					/*// Запишем записи стажа в режиме добавления (при записи набора происходит проверка записей стажа)
*/
				}
				if(true/*ЗаполнятьСуммыВзносов*/)
				{
					//НаборЗаписейОВзносах.Отбор.ФизЛицо.Значение = ТаблицаРезультатаЗапроса.ФизЛицо;
					if(true/*ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.НачисленоНаНакопительнуюЧастьПФР) 
				Или ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.НачисленоНаСтраховуюЧастьПФР) 
				Или ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.НачисленоПоДополнительномуТарифу) 
				Или ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.ДнейБолезни) 
				Или ЗначениеЗаполнено(ТаблицаРезультатаЗапроса.ДнейОтпускаЗаСвойСчет)*/)
					{
						//ЗаполнитьЗначенияСвойств(НаборЗаписейОВзносах.Добавить(),ТаблицаРезультатаЗапроса);
					}
				}
			}
			/*;
	
	ЗафиксироватьТранзакцию();*/
		}
		// ФормированиеСведенийОСтажеИЗаработке()
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРОГРАММОЙ CheckUFA
		// Процедура вызывает тестирование файла программой проверки
		//

		public void ПроверитьФайлВCheckUFA(/*ДокументОбъект, ФормаВладелец*/)
		{
			//ФормаПроверки = ПолучитьОбщуюФорму("ФормаПроверкиCheckUFA", ФормаВладелец);
			//ФормаПроверки.ДокументОбъект = ДокументОбъект;
			//ФормаПроверки.Открыть();
		}
		// Процедура, считывает путь установки CheckUFA из реестра, и
		// если не находит инофрмации, проверяет путь установки по умолчанию
		//

		public object ПолучитьПредполагаемыйПутьУстановкиCheckUFA(/**/)
		{
			//ПапкаПрограммы = "";
			//СистИнформация = Новый СистемнаяИнформация;
			//ВерсияОС = СистИнформация.ВерсияОС;
			//МожноИспользоватьКомандуРеестра = (Найти(ВерсияОС, "Windows 95") = 0) И (Найти(ВерсияОС, "Windows 98") = 0);
			if(true/*МожноИспользоватьКомандуРеестра*/)
			{
				//ВремПапка = КаталогВременныхФайлов();
				//КомандаСистемы("reg query HKLM\Software\CheckXmlUfa /s > FindCheckXmlUfa.txt", ВремПапка);
				//ТекстДокумент = Новый ТекстовыйДокумент;
				//ТекстДокумент.Прочитать(ВремПапка + "FindCheckXmlUfa.txt");
				//ПредСтрока = "";
				//ПапкаПрограммы = "";
				//УдалитьФайлы(ВремПапка + "\FindCheckXmlUfa.txt");
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ПРОГРАММОЙ CheckXML
		// Процедура, считывает путь установки CheckXML из реестра, и
		// если не находит инофрмации, проверяет путь установки по умолчанию
		//

		public object ПолучитьПредполагаемыйПутьУстановкиCheckXML(/**/)
		{
			//ПапкаПрограммы = "";
			//СистИнформация = Новый СистемнаяИнформация;
			//ВерсияОС = СистИнформация.ВерсияОС;
			//МожноИспользоватьКомандуРеестра = (Найти(ВерсияОС, "Windows 95") = 0) И (Найти(ВерсияОС, "Windows 98") = 0);
			if(true/*МожноИспользоватьКомандуРеестра*/)
			{
				//ВремПапка = КаталогВременныхФайлов();
				//КомандаСистемы("reg query HKCU\Software\CheckXML /s > FindCheckXML.txt", ВремПапка);
				//ТекстДокумент = Новый ТекстовыйДокумент;
				//ТекстДокумент.Прочитать(ВремПапка + "FindCheckXML.txt");
				//ПредСтрока = "";
				//ПапкаПрограммы = "";
				//УдалитьФайлы(ВремПапка + "\FindCheckXML.txt");
			}
			if(true/*ПапкаПрограммы = Неопределено Или ПапкаПрограммы = ""*/)
			{
				//ИсполняемыйФайл = Новый Файл("C:\Program Files\CheckXML\CheckXML.exe");
				if(true/*ИсполняемыйФайл.Существует()*/)
				{
					//ПапкаПрограммы = "C:\Program Files\CheckXML";
				}
			}
			return null;
		}
		//ПолучитьПредполагаемыйПутьУстановкиCheckXML()
		// Процедура вызывает тестирование файла программой проверки
		//

		public void ПроверитьФайлВCheckXML(/*ДокументОбъект, ФормаВладелец*/)
		{
			//ФормаПроверки = ПолучитьОбщуюФорму("ФормаПроверкиCheckXML", ФормаВладелец);
			//ФормаПроверки.ДокументОбъект = ДокументОбъект;
			//ФормаПроверки.Открыть();
		}
		// ПроверитьФайлВCheckXML()
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕРСУЧЕТА С 2010 ГОДА

		public void ПроставитьНомерПачки(/*ДокументОбъект*/)
		{
			if(true/*Не ЗначениеЗаполнено(ДокументОбъект.Организация)*/)
			{
			}
			if(true/*Не ЗначениеЗаполнено(ДокументОбъект.НомерПачки)*/)
			{
				/*// определим очередной номер
*/
				//Год = Год(ДокументОбъект.Дата);
				//СледующийНомер = РегламентированнаяОтчетность.ПолучитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год) + 1;
				//ДокументОбъект.НомерПачки = Формат(СледующийНомер,"ЧЦ=5; ЧГ=0");
				//РегламентированнаяОтчетность.УстановитьСчетчикВыгруженныхФайловПФР(ДокументОбъект.Организация, Год, СледующийНомер);
			}
		}

		public void ПроверитьВозможностьПроведения(/*ДокументОбъект, Отказ, РежимЗаписи*/)
		{
			if(true/*ДокументОбъект.СпециальныйДокумент2010года*/)
			{
				//ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
				//ОбработкаКомментариев.УдалитьСообщения();
				//ОбщегоНазначения.ВывестиИнформациюОбОшибке(?(РежимЗаписи = РежимЗаписиДокумента.Проведение,"Перепроведение","Отмена проведения") +" этого документа запрещен"+ ?(РежимЗаписи = РежимЗаписиДокумента.Проведение,"о","а") + "!", Отказ, Строка(ДокументОбъект));
				//ОбработкаКомментариев.ПоказатьСообщения();
			}
		}

		public object НачалоОтчетногоПериодаПерсучета(/*НекаяДата*/)
		{
			if(true/*НекаяДата < '20100701'*/)
			{
			}
			return null;
		}
		// ОкончаниеОтчетногоПериода()

		public object ОкончаниеОтчетногоПериодаПерсучета(/*ОтчетныйПериод*/)
		{
			return null;
		}
		// ОкончаниеОтчетногоПериода()

		public object ПредшествующийОтчетныйПериодПерсучета(/*НекаяДата*/)
		{
			if(true/*НекаяДата < '20100301'*/)
			{
			}
			return null;
		}
		// ОкончаниеОтчетногоПериода()

		public object ОписаниеОтчетногоПериодаДляПечати(/*Год, Квартал, РазбиратьКакКорректируемыйПериод = Ложь*/)
		{
			if(true/*РазбиратьКакКорректируемыйПериод*/)
			{
				//СтруктураОписания = Новый Структура("КорректируемыйГод,ЭтоКварталКорректируемогоГода,ЭтоПолугодиеКорректируемогоГода,Это9МесяцевКорректируемогоГода,ЭтоВесьКорректируемыйГод");
				if(true/*ЗначениеЗаполнено(Год)*/)
				{
					//СтруктураОписания.КорректируемыйГод = Год;
					if(true/*Год < "2011"*/)
					{
						//СтруктураОписания.ЭтоКварталКорректируемогоГода = Ложь;
						//СтруктураОписания.ЭтоПолугодиеКорректируемогоГода = Квартал = "1";
						//СтруктураОписания.Это9МесяцевКорректируемогоГода = Ложь;
						//СтруктураОписания.ЭтоВесьКорректируемыйГод = Квартал = "2";
					}
				}
			}
			return null;
		}
		// ОписаниеОтчетногоПериодаДляПечати()

		public object ОписаниеОтчетногоПериодаДляФайла(/*ОтчетныйПериод*/)
		{
			if(true/*ОтчетныйПериод = '20100101'*/)
			{
				//СтруктураОписания = Новый Структура("Квартал,Год",1,2010);
			}
			return null;
		}
		// ОписаниеОтчетногоПериодаДляПечати()

		public object ОписаниеОтчетногоПериодаДляПоказа(/*ОтчетныйПериод*/)
		{
			if(true/*ОтчетныйПериод = '20100701'*/)
			{
				//Описание = "2 полугодие 2010 г.";
			}
			return null;
		}
		// ОписаниеОтчетногоПериодаДляПечати()

		public void ПоместитьВМенеджерСоответствиеТарифаКатегории(/*МенеджерВременныхТаблиц*/)
		{
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОбщийНалоговыйРежим) КАК ВидТарифаСтраховыхВзносов,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР) КАК КатегорияЗастрахованныхЛиц,
	|	1 КАК Порядок,
	|	2010 КАК ГодС,
	|	2100 КАК ГодПо
	|ПОМЕСТИТЬ ВТСоответствиеТарифаКатегории
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2011,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2011,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СельХозПроизводители),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2020,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2020,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ITОрганизации),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2020,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2013,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1,
	|	2015,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УчастникПроектаИнновационныйЦентрСколково),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	6,
	|	2010,
	|	2100
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежим),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	3,
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	3,
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СельХозПроизводители),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	2,
	|	2010,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	3,
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.НародныеХудожественныеПромыслы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	2,
	|	2011,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацияИнвалидов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	3,
	|	2011,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОЗОИ),
	|	3,
	|	2010,
	|	2010
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.РезидентТехникоВнедренческойЗоны),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	3,
	|	2011,
	|	2019
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	3,
	|	2011,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ХозОбществаБюджетныхВУЗов),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	3,
	|	2011,
	|	2019
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ITОрганизации),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	3,
	|	2011,
	|	2019
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.УпрощенныйНалоговыйРежимПроизводство),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	3,
	|	2011,
	|	2012
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	4,
	|	2010,
	|	2014
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.НекоммерческиеОрганизации),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	1,
	|	2012,
	|	2013
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.БлаготворительныеОрганизации),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	1,
	|	2012,
	|	2013
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ОрганизацииОказывающиеИнжиниринговыеУслуги),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	1,
	|	2012,
	|	2013
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ДляФармацевтовАптек),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	3,
	|	2012,
	|	2013
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ДляЧленовЭкипажейМорскихСудовПодФлагомРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	3,
	|	2012,
	|	2027
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидТарифаСтраховыхВзносов";*/
			//Запрос.Выполнить();
		}

		public void ПоместитьВМенеджерСоответствиеВидаЗастрахованныхКатегории(/*МенеджерВременныхТаблиц*/)
		{
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР) КАК ИсходнаяКатегорияЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ) КАК ВидЗастрахованныхЛиц,
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР) КАК КатегорияЗастрахованныхЛиц,
	|	1 КАК Порядок
	|ПОМЕСТИТЬ ВТСоответствиеВидаЗастрахованныхКатегории
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖНР),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.НР),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПНР),
	|	3 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖСХ),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СХ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПСХ),
	|	3 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЕН),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЕСХН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПЕН),
	|	3 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖМН),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХМН),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПМН),
	|	3 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖОИ),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ООИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПОИ),
	|	3 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖХО),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ХО),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПХО),
	|	3 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖТЗ),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ТВЭЗ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПТЗ),
	|	3 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖИТ),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ОДИТ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПИТ),
	|	3 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖСИ),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.СМИ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПСИ),
	|	3 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЭД),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ПНЭД),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПЭД),
	|	3 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЦС),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИЦС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПЦС),
	|	3 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖСБ),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.АСБ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПСБ),
	|	3 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖЭС),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ЧЭС),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПЭС),
	|	3 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ПостоянноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	1 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПроживающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВЖИЖ),
	|	2 КАК Порядок
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ИНЖУ),
	|	ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ВременноПребывающиеИностранцы),
	|	ЗНАЧЕНИЕ(Перечисление.КатегорииЗастрахованныхЛицПФР.ВПИЖ),
	|	3 КАК Порядок
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИсходнаяКатегорияЗастрахованныхЛиц,
	|	ВидЗастрахованныхЛиц";*/
			//Запрос.Выполнить();
		}

		public object КатегорииЗастрахованныхЛицОрганизации(/*Организация, ГоловнаяОрганизация, ОтчетныйПериод, ОкончаниеОтчетногоПериода = Неопределено, ДляКорректирующихСведений = Истина*/)
		{
			//СписокКатегорийЗастрахованныхЛиц = Новый СписокЗначений;
			if(true/*ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами()*/)
			{
				//СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.НР, "НАЕМ/РАБОТНИК");
			}
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			//Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
			//Запрос.УстановитьПараметр("Организация", ГоловнаяОрганизация);
			//Запрос.УстановитьПараметр("ОтчетныйПериод",	ОтчетныйПериод);
			//Запрос.УстановитьПараметр("ГодОтчетногоПериода", Год(ОтчетныйПериод));
			if(true/*Не ЗначениеЗаполнено(ОкончаниеОтчетногоПериода)*/)
			{
				//ОкончаниеОтчетногоПериода = ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод);
			}
			//Запрос.УстановитьПараметр("ОкончаниеОтчетногоПериода", ОкончаниеОтчетногоПериода);
			//Запрос.УстановитьПараметр("ДополнитьКатегорииИностранныхГраждан", Год(ОтчетныйПериод) >= Год(ПроведениеРасчетов.ДатаСниженияТарифовСтраховыхВзносов()));
			//ПоместитьВМенеджерСоответствиеТарифаКатегории(Запрос.МенеджерВременныхТаблиц);
			//ПоместитьВМенеджерСоответствиеВидаЗастрахованныхКатегории(Запрос.МенеджерВременныхТаблиц);
			/*ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УчетнаяПолитикаНалоговыйУчет.ВидТарифаСтраховыхВзносов КАК ВидТарифаСтраховыхВзносов,
	|	ГОД(УчетнаяПолитикаНалоговыйУчет.Период) КАК ГодОтчетногоПериода
	|ПОМЕСТИТЬ ВТТарифыОрганизации
	|ИЗ
	|	ВТРегистрСведенийУчетнаяПолитикаНалоговыйУчет КАК УчетнаяПолитикаНалоговыйУчет
	|ГДЕ
	|	УчетнаяПолитикаНалоговыйУчет.Период МЕЖДУ &ОтчетныйПериод И &ОкончаниеОтчетногоПериода
	|	И УчетнаяПолитикаНалоговыйУчет.Организация = &Организация
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	УчетнаяПолитикаНалоговыйУчетСрезПоследних.ВидТарифаСтраховыхВзносов,
	|	&ГодОтчетногоПериода
	|ИЗ
	|	ВТРегистрСведенийУчетнаяПолитикаНалоговыйУчетСрезПоследнихПоОрганизация КАК УчетнаяПолитикаНалоговыйУчетСрезПоследних
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтраховыеВзносыСведенияОДоходахОбороты.РезультатОборот, 0) <> 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ЕНВД)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	&ГодОтчетногоПериода
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
	|			&ОтчетныйПериод,
	|			&ОкончаниеОтчетногоПериода,
	|			,
	|			ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И ОблагаетсяЕНВД) КАК СтраховыеВзносыСведенияОДоходахОбороты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтраховыеВзносыСведенияОДоходахОбороты.РезультатОборот, 0) <> 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ДляФармацевтовАптек)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	&ГодОтчетногоПериода
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
	|			&ОтчетныйПериод,
	|			&ОкончаниеОтчетногоПериода,
	|			,
	|			ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И ЯвляетсяДоходомФармацевта) КАК СтраховыеВзносыСведенияОДоходахОбороты
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтраховыеВзносыСведенияОДоходахОбороты.РезультатОборот, 0) <> 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ТарифыСтраховыхВзносов.ДляЧленовЭкипажейМорскихСудовПодФлагомРФ)
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ,
	|	&ГодОтчетногоПериода
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
	|			&ОтчетныйПериод,
	|			&ОкончаниеОтчетногоПериода,
	|			,
	|			ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				И ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ) КАК СтраховыеВзносыСведенияОДоходахОбороты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц
	|ПОМЕСТИТЬ ВТКатегорииЗастрахованныхЛиц
	|ИЗ
	|	ВТТарифыОрганизации КАК ТарифыОрганизации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифаКатегории
	|		ПО ТарифыОрганизации.ВидТарифаСтраховыхВзносов = СоответствиеТарифаКатегории.ВидТарифаСтраховыхВзносов
	|			И (ТарифыОрганизации.ГодОтчетногоПериода МЕЖДУ СоответствиеТарифаКатегории.ГодС И СоответствиеТарифаКатегории.ГодПо)
	|ГДЕ
	|	СоответствиеТарифаКатегории.КатегорияЗастрахованныхЛиц ЕСТЬ НЕ NULL 
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	СоответствиеВидаЗастрахованныхКатегории.КатегорияЗастрахованныхЛиц,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(СоответствиеВидаЗастрахованныхКатегории.КатегорияЗастрахованныхЛиц) КАК Представление,
	|	ПорядокОсновнойКатегории.Порядок КАК Порядок,
	|	ПорядокДопКатегории.Порядок КАК ПорядокДопКатегорий
	|ИЗ
	|	ВТКатегорииЗастрахованныхЛиц КАК КатегориЗастрахованныхЛицПоТарифам
	|		ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.КатегорииЗастрахованныхЛицПФР КАК ПорядокОсновнойКатегории
	|		ПО КатегориЗастрахованныхЛицПоТарифам.КатегорияЗастрахованныхЛиц = ПорядокОсновнойКатегории.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеВидаЗастрахованныхКатегории КАК СоответствиеВидаЗастрахованныхКатегории
	|			ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.КатегорииЗастрахованныхЛицПФР КАК ПорядокДопКатегории
	|			ПО СоответствиеВидаЗастрахованныхКатегории.КатегорияЗастрахованныхЛиц = ПорядокДопКатегории.Ссылка
	|		ПО КатегориЗастрахованныхЛицПоТарифам.КатегорияЗастрахованныхЛиц = СоответствиеВидаЗастрахованныхКатегории.ИсходнаяКатегорияЗастрахованныхЛиц
	|			И (&ДополнитьКатегорииИностранныхГраждан
	|				ИЛИ СоответствиеВидаЗастрахованныхКатегории.ВидЗастрахованныхЛиц = ЗНАЧЕНИЕ(Перечисление.ВидыЗастрахованныхЛицОбязательногоСтрахования.ГражданеРФ))
	|ГДЕ
	|	(НЕ СоответствиеВидаЗастрахованныхКатегории.КатегорияЗастрахованныхЛиц ЕСТЬ NULL )
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ПорядокДопКатегорий";*/
			//ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"СрезПоследнихПоОрганизация", ".СрезПоследних(&ОтчетныйПериод, Организация = &Организация)");
			//Запрос.Текст = СтрЗаменить(ТекстЗапроса,"ВТРегистрСведенийУчетнаяПолитикаНалоговыйУчет", ЗаполнениеРегламентированнойОтчетностиПереопределяемый.ИмяУчетнойПолитики());
			//Выборка = Запрос.Выполнить().Выбрать();
			while(true/*Выборка.Следующий()*/)
			{
				//СписокКатегорийЗастрахованныхЛиц.Добавить(Выборка.КатегорияЗастрахованныхЛиц,Выборка.Представление);
			}
			if(true/*СписокКатегорийЗастрахованныхЛиц.Количество() = 0*/)
			{
				//СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.НР, "НАЕМ/РАБОТНИК");
				if(true/*Год(ОтчетныйПериод) >= 2012*/)
				{
					//СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖНР, "ВР. ПРОЖИВАЮЩИЙ/НАЕМ/РАБОТНИК");
					//СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПНР, "ВР. ПРЕБЫВАЮЩИЙ/НАЕМ/РАБОТНИК");
				}
				if(true/*Год(ОтчетныйПериод) = 2010*/)
				{
					//СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ОЗОИ, "ОСОБАЯ/ЗОНА/ОРГАНИЗАЦИИ ИНВАЛИДОВ");
					if(true/*ДляКорректирующихСведений*/)
					{
						//СписокКатегорийЗастрахованныхЛиц.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.УСЕН, "УПРОЩЕН/СИСТЕМА/ЕДИНЫЙ/НАЛОГ");
					}
				}
			}
			return null;
		}

		public object ДанныеРуководителяОрганизации(/*Организация, ДатаАктуальности*/)
		{
			//СтруктураДанных = Новый Структура("Руководитель,ДолжностьРуководителя");
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("Дата", ДатаАктуальности - 1);
			//Запрос.УстановитьПараметр("Организация", Организация);
			/*Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК ДолжностьРуководителя,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК Руководитель,
	|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо.Наименование
	|ИЗ
	|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
	|			&Дата,
	|			СтруктурнаяЕдиница = &Организация
	|				И ОтветственноеЛицо = ЗНАЧЕНИЕ(Перечисление.ОтветственныеЛицаОрганизаций.Руководитель)) КАК ОтветственныеЛицаОрганизацийСрезПоследних";*/
			//Выборка = Запрос.Выполнить().Выбрать();
			//Выборка.Следующий();
			//ЗаполнитьЗначенияСвойств(СтруктураДанных,Выборка,"Руководитель,ДолжностьРуководителя");
			return null;
		}
		// ДанныеРуководителяОрганизации()

		public void ОписаниеСостоянияПринятыхПФРДанных(/*КоличествоПринятыхДокументов, ДокументыПФР, МассивПрошлыхПериодов, ИменаУчитываемыхПачек, ЭлементыФормы, ДописыватьРекламуРабочегоМеста = Ложь*/)
		{
			if(true/*КоличествоПринятыхДокументов = 0*/)
			{
				if(true/*МассивПрошлыхПериодов.Количество() = 0*/)
				{
					/*ТекстИнфонадписи = "Распределение сумм уплаченных взносов производится по данным текущего периода с использованием коэффициентов уплаты, рассчитанных в целом по страхователю."
			+ ?(ДописыватьРекламуРабочегоМеста," Сформировать комплект сведений, а также указать принятые ПФР сведения предыдущих периодов можно в рабочем месте подготовки данных для ПФР."," Для подбора сведений предыдущих периодов используйте меню Добавить.");*/
					//ВажностьСообщения = "СообщениеИнформация";
				}
			}
			//РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьСостояниеПачекДокументов, ЭлементыФормы.ПолеКартинкиСостояниеПачекДокументов, ТекстИнфонадписи, ВажностьСообщения);
		}
		// По переданной строке дерева, описывающего ПФР-овский файл, и структуре дополнительных данных
		// создает и заполняет структуру с данными входящей описи

		public object ДанныеОписиАДВ_6_3(/*СтрокаДереваВходящаяОпись, ДополнительныеДанные = Неопределено*/)
		{
			/*//Печать описи документов
*/
			//ИнформацияОПачке = Новый Структура;
			//ИнформацияОПачке.Вставить("РегНомерПФР", "");
			//ИнформацияОПачке.Вставить("НаименованиеОрганизации", "");
			//ИнформацияОПачке.Вставить("ИНН", "");
			//ИнформацияОПачке.Вставить("КПП", "");
			//ИнформацияОПачке.Вставить("ДокументовВПачке", "");
			//ИнформацияОПачке.Вставить("НачисленоСтраховая", "");
			//ИнформацияОПачке.Вставить("УплаченоСтраховая", "");
			//ИнформацияОПачке.Вставить("НачисленоНакопительная", "");
			//ИнформацияОПачке.Вставить("УплаченоНакопительная", "");
			//ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", "");
			if(true/*ДополнительныеДанные = Неопределено*/)
			{
				//ИнформацияОПачке.Вставить("РуководительДолжность", "");
				//ИнформацияОПачке.Вставить("Руководитель", "");
				//ИнформацияОПачке.Вставить("ОКПО", "");
			}
			//ИнформацияОПачке.Вставить("КодКатегории", ИзвлечьДанное(СтрокаДереваВходящаяОпись, "КодКатегории"));
			//ТипСведенийВФайле = ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ТипСведений");
			//ИнформацияОПачке.Вставить("ЭтоИсходныйДокумент",		ТипСведенийВФайле = "ИСХОДНАЯ");
			//ИнформацияОПачке.Вставить("ЭтоКорректирующийДокумент",	ТипСведенийВФайле = "КОРРЕКТИРУЮЩАЯ");
			//ИнформацияОПачке.Вставить("ЭтоОтменяющийДокумент",		ТипСведенийВФайле = "ОТМЕНЯЮЩАЯ");
			//ИнформацияОПачке.Вставить("ДатаСоставленияОписи", ДатаXMLВОтчет(ИзвлечьДанное(СтрокаДереваВходящаяОпись, "ДатаСоставления")));
			//СтрокаДереваСоставительПачки = СтрокаДереваВходящаяОпись.Строки.Найти("СоставительПачки", "Имя");
			if(true/*СтрокаДереваСоставительПачки <> Неопределено*/)
			{
				//ИнформацияОПачке.Вставить("НаименованиеОрганизации", ИзвлечьДанное(СтрокаДереваСоставительПачки, "НаименованиеКраткое"));
				//ИнформацияОПачке.Вставить("РегНомерПФР", ИзвлечьДанное(СтрокаДереваСоставительПачки, "РегистрационныйНомер"));
				//ИнформацияОПачке.Вставить("ИНН", ИзвлечьДанное(СтрокаДереваСоставительПачки, "ИНН"));
				//ИнформацияОПачке.Вставить("КПП", ИзвлечьДанное(СтрокаДереваСоставительПачки, "КПП"));
			}
			//Квартал = 0;
			//Год = 0;
			//СтрокаДереваОтчетныйПериод = СтрокаДереваВходящаяОпись.Строки.Найти("ОтчетныйПериод", "Имя");
			if(true/*СтрокаДереваОтчетныйПериод <> Неопределено*/)
			{
				//Квартал = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Квартал");
				//Год = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Год");
				//ИнформацияОПачке.Вставить("РасчетныйПериод", Квартал + ?(Год < "2011", "-ое полугодие ", "-ый квартал ") + Год + " года");
			}
			//Квартал = 0;
			//Год = 0;
			//СтрокаДереваОтчетныйПериод = СтрокаДереваВходящаяОпись.Строки.Найти("КорректируемыйОтчетныйПериод", "Имя");
			if(true/*СтрокаДереваОтчетныйПериод <> Неопределено*/)
			{
				//Квартал = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Квартал");
				//Год = ИзвлечьДанное(СтрокаДереваОтчетныйПериод, "Год");
			}
			//СтрокаДереваСоставДокументов = СтрокаДереваВходящаяОпись.Строки.Найти("СоставДокументов", "Имя");
			if(true/*СтрокаДереваСоставДокументов <> Неопределено*/)
			{
				//СтрокаДереваНаличиеДокументов = СтрокаДереваСоставДокументов.Строки.Найти("НаличиеДокументов", "Имя");
				if(true/*СтрокаДереваНаличиеДокументов <> Неопределено*/)
				{
					//ИнформацияОПачке.Вставить("ДокументовВПачке", ИзвлечьДанное(СтрокаДереваНаличиеДокументов, "Количество"));
				}
			}
			//СтрокаДереваВзносы = СтрокаДереваВходящаяОпись.Строки.Найти("СуммаВзносовНаСтраховую");
			if(true/*СтрокаДереваВзносы <> Неопределено*/)
			{
				//ИнформацияОПачке.Вставить("НачисленоСтраховая", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2"));
				//ИнформацияОПачке.Вставить("УплаченоСтраховая", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2"));
			}
			//СтрокаДереваВзносы = СтрокаДереваВходящаяОпись.Строки.Найти("СуммаВзносовНаНакопительную");
			if(true/*СтрокаДереваВзносы <> Неопределено*/)
			{
				//ИнформацияОПачке.Вставить("НачисленоНакопительная", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Начислено")), "ЧДЦ=2"));
				//ИнформацияОПачке.Вставить("УплаченоНакопительная", Формат(Число(ИзвлечьДанное(СтрокаДереваВзносы, "Уплачено")), "ЧДЦ=2"));
			}
			//СтрокаДереваНомерПачки = СтрокаДереваВходящаяОпись.Строки.Найти("НомерПачки", "Имя");
			if(true/*СтрокаДереваНомерПачки <> Неопределено*/)
			{
				//СтрокаДереваОсновной = СтрокаДереваНомерПачки.Строки.Найти("Основной", "Имя");
				if(true/*СтрокаДереваОсновной <> Неопределено*/)
				{
					//НомерПачкиРаботодателя = ИзвлечьДанное(СтрокаДереваНомерПачки, "Основной");
				}
				//ИнформацияОПачке.Вставить("НомерПачкиРаботодателя", НомерПачкиРаботодателя);
			}
			return null;
		}
		//Выводит в табличный документ "ТабличныйДокумент" заполненный макет описи "Форма АДВ-6-3"

		public void ВывестиОписьАДВ_6_3(/*ТабличныйДокумент,Знач ИнформацияОПачке*/)
		{
			//МакетОписи = ПолучитьОбщийМакет("ФормаАДВ_6_3");
			//СекцияОпись = МакетОписи.ПолучитьОбласть("Опись");
			//ЗаполнитьЗначенияСвойств(СекцияОпись.Параметры,ИнформацияОПачке);
			//ТабличныйДокумент.Вывести(СекцияОпись);
		}

		public object ПечатнаяФормаСЗВ_6(/*ДокументОбъект, ТипФормДокументов, ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь, ВыводитьСписок = Ложь, ОчищатьСообщения = Истина*/)
		{
			//ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			if(true/*ОчищатьСообщения*/)
			{
				//ОбработкаКомментариев.УдалитьСообщения();
			}
			//ЕстьОшибки = Ложь;
			//ТекстФайла = РегламентированнаяОтчетность.ПолучитьТекстФайла(ДокументОбъект, ЕстьОшибки);
			if(true/*ЕстьОшибки*/)
			{
				//ОбработкаКомментариев.ПоказатьСообщения();
			}
			//Заголовок = "Печать документа " + СокрЛП(ДокументОбъект);
			//ДеревоПФР = ПреобразоватьВДеревоXML(ТекстФайла);
			if(true/*ДеревоПФР = Неопределено*/)
			{
				//ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не удалось разобрать файл с данными!", , Заголовок);
				//ОбработкаКомментариев.ПоказатьСообщения();
			}
			//ДеревоПФР = ДеревоПФР.Строки.Найти("ФайлПФР","Имя");
			if(true/*ДеревоПФР = Неопределено*/)
			{
				//ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не удалось разобрать файл с данными!",, Заголовок);
				//ОбработкаКомментариев.ПоказатьСообщения();
			}
			//СтрокаДереваПачкаВходящихДокументов = ДеревоПФР.Строки.Найти("ПачкаВходящихДокументов","Имя");
			if(true/*СтрокаДереваПачкаВходящихДокументов <> Неопределено*/)
			{
				//СтрокаДереваВходящаяОпись = СтрокаДереваПачкаВходящихДокументов.Строки.Найти("ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ", "Имя");
				if(true/*СтрокаДереваВходящаяОпись <> Неопределено*/)
				{
					//ВыборкаПоШапкеДокумента = ДокументОбъект.СформироватьЗапросПоШапке().Выбрать();
					//ВыборкаПоШапкеДокумента.Следующий();
					/*// проверим данные руководителя
*/
					if(true/*Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель) Или Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РуководительДолжность)*/)
					{
						if(true/*Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Руководитель)*/)
						{
							//ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан руководитель!", , Заголовок);
						}
						if(true/*Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РуководительДолжность)*/)
						{
							//ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указана должность руководителя!", , Заголовок);
						}
						//ОбработкаКомментариев.ПоказатьСообщения();
					}
					//Вывести62как61 = ТипФормДокументов = "СЗВ-6-2" И ИмяМакета = "ФормаСЗВ_6_1";
					//ВыводимСЗВ_6_1 = Вывести62как61 Или ТипФормДокументов = "СЗВ-6-1" Или ТипФормДокументов = "СПВ-1";
					/*// Формы СЗВ-6-хх
*/
					//ДокументРезультат = Новый ТабличныйДокумент;
					//ДокументРезультат.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработке" + ИмяМакета;
					//ДокументРезультат.ОриентацияСтраницы = ?(ВыводимСЗВ_6_1, ОриентацияСтраницы.Портрет, ОриентацияСтраницы.Ландшафт);
					if(true/*Вывести62как61 Или ТипФормДокументов = "СЗВ-6-1"*/)
					{
						//Макет = ДокументОбъект.ПолучитьМакет("ФормаСЗВ_6_1");
					}
					/*// Рабочие области макета
*/
					//ОбластьШапка 	= Макет.ПолучитьОбласть("Шапка");
					//ОбластьДокумент = Макет.ПолучитьОбласть("Строка");
					//ОбластьПодвал 	= Макет.ПолучитьОбласть("Подвал");
					if(true/*ВыводимСЗВ_6_1 Или ТипФормДокументов = "СПВ-1"*/)
					{
						//ОбластьСтаж = Макет.ПолучитьОбласть("Стаж");
					}
					/*// Список застрахованных лиц
*/
					if(true/*ВыводитьСписок*/)
					{
						//ДокументСписокЗастрахованныхЛиц = Новый ТабличныйДокумент;
						//ДокументСписокЗастрахованныхЛиц.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ6_Список";
						//Макет = ДокументОбъект.ПолучитьМакет("СписокЗастрахованныхЛиц");
						//ОбластьШапкаСписка = Макет.ПолучитьОбласть("Шапка");
						//ОбластьСтрокаСписка = Макет.ПолучитьОбласть("СтрокаРаботника");
						//ОбластьПодвалСписка = Макет.ПолучитьОбласть("Подвал");
						//ПовторятьПриПечатиСтроки = Макет.ПолучитьОбласть("ПовторятьПриПечати");
						/*// повторяющаяся шапка страницы
*/
						/*// массив с двумя строками - для разбиения на страницы
*/
						//ВыводимыеОбласти = Новый Массив();
						//ВыводимыеОбласти.Добавить(ОбластьСтрокаСписка);
					}
					//ИнформацияОПачке = ДанныеОписиАДВ_6_3(СтрокаДереваВходящаяОпись, ВыборкаПоШапкеДокумента);
					if(true/*ТипФормДокументов = "СПВ-1"*/)
					{
						//ИнформацияОПачке.Вставить("ТипИногоДокумента","Сведения о начисленных, уплаченных страховых взносах на обязательное пенсионное страхование и страховом стаже застрахованного лица для установления трудовой пенсии");
						//ИнформацияОПачке.Вставить("Количество",ИнформацияОПачке.ДокументовВПачке);
						//ИнформацияОПачке.Вставить("ИныхДокументовВПачке",ИнформацияОПачке.ДокументовВПачке);
						//ИнформацияОПачке.Вставить("ДокументовВПачке","");
					}
					//НомерПачкиРаботодателя = ИнформацияОПачке.НомерПачкиРаботодателя;
					/*// Опись АДВ-6-3
*/
					if(true/*ТипФормДокументов <> "СЗВ-6-2"*/)
					{
						//ДокументОписи = Новый ТабличныйДокумент;
						//ДокументОписи.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СведенияОТрудовомСтажеИЗаработкеСЗВ6_АДВ_6_3";
						//ДокументОписи.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
						//ВывестиОписьАДВ_6_3(ДокументОписи, ИнформацияОПачке);
						//УниверсальныеМеханизмы.НапечататьДокумент(ДокументОписи, КоличествоЭкземпляров, НаПринтер,"Опись документов (АДВ-6-3); пачка №" + НомерПачкиРаботодателя,,ДокументОписи);
					}
					/*// копируем данные описи в остальные документы
*/
					//ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры,ИнформацияОПачке);
					//ЗаполнитьЗначенияСвойств(ОбластьПодвал.Параметры,ИнформацияОПачке);
					if(true/*ВыводитьСписок*/)
					{
						/*// Список застрахованных лиц
*/
						//ИнформацияОПачке.Вставить("РегистрационныйНомерПФР",ИнформацияОПачке.РегНомерПФР);
						//ИнформацияОПачке.Вставить("НаименованиеСокращенное",ИнформацияОПачке.НаименованиеОрганизации);
						//ЗаполнитьЗначенияСвойств(ОбластьШапкаСписка.Параметры,ИнформацияОПачке,"РасчетныйПериод,НомерПачкиРаботодателя, РегистрационныйНомерПФР,НаименованиеСокращенное");
						//ЗаполнитьЗначенияСвойств(ОбластьПодвалСписка.Параметры,ИнформацияОПачке,"РуководительДолжность, Руководитель, ДатаСоставленияОписи");
					}
					/*// выводим шапки документов
*/
					if(true/*Не ВыводимСЗВ_6_1*/)
					{
						//ДокументРезультат.Вывести(ОбластьШапка);
					}
					if(true/*ВыводитьСписок*/)
					{
						//ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьШапкаСписка);
						//НомерСтрокиСписка = 0;
					}
					/*//Цикл по документам файла
*/
					//ВыводилиДанные = Ложь;
					//НомерДокумента = 0;
					/*// по документам
*/
					/*// выводим подвалы документов
*/
					if(true/*Не ВыводимСЗВ_6_1*/)
					{
						//ДокументРезультат.Вывести(ОбластьПодвал);
					}
					if(true/*ВыводитьСписок*/)
					{
						/*// Список застрахованных лиц
*/
						//ДокументСписокЗастрахованныхЛиц.Вывести(ОбластьПодвалСписка);
					}
					/*// показываем результаты
*/
					if(true/*ВыводитьСписок*/)
					{
						//УниверсальныеМеханизмы.НапечататьДокумент(ДокументСписокЗастрахованныхЛиц,КоличествоЭкземпляров, НаПринтер,"Список застрахованных лиц; пачка №" + НомерПачкиРаботодателя);
					}
				}
			}
			return null;
		}
		// ВывестиСЗВ_6()

		public object ПереходВРабочееМестоПФРвОтветНаВопрос(/*ДокументОбъект, ФормаДокумента, ТекстВопросаСохранения, ТекстВопросаДействия, ТекстКнопкиДействия, ЗаголовокОкнаВопроса, Организация, ОтчетныйПериод, ОтчетныйГод, ТипСведений*/)
		{
			if(true/*НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ДокументОбъект, ТекстВопросаСохранения)*/)
			{
			}
			//Кнопки = Новый СписокЗначений();
			//Кнопки.Добавить("Перейти","Перейти в рабочее место");
			//Кнопки.Добавить(КодВозвратаДиалога.Да,ТекстКнопкиДействия);
			//Кнопки.Добавить(КодВозвратаДиалога.Отмена,"Отменить");
			//Ответ  = РаботаСДиалогами.ЗадатьВопрос(ТекстВопросаДействия, Кнопки, "Перейти", ЗаголовокОкнаВопроса);
			if(true/*Ответ = "Перейти"*/)
			{
				//Обработка = Обработки.ПодготовкаДанныхПФР2010.Создать();
				//Обработка.Организация		= Организация;
				//Обработка.ОтчетныйПериод	= ОтчетныйПериод;
				//Обработка.ОтчетныйГод		= ОтчетныйГод;
				//Обработка.ТипСведений		= ТипСведений;
				//Обработка.ПолучитьФорму("Форма").Открыть();
				//ФормаДокумента.Закрыть();
			}
			return null;
		}
		// ПереходВРабочееМестоПФРвОтветНаВопрос()

		public void ВписатьВзносыВНаборДанных(/*НаборДанных, НачисленоСтраховая, УплаченоСтраховая, НачисленоНакопительная, УплаченоНакопительная*/)
		{
			if(true/*НачисленоСтраховая > 0 Или УплаченоСтраховая > 0*/)
			{
				//СуммаВзносов = НаборДанных.СуммаВзносовНаСтраховую.Значение;
				if(true/*НачисленоСтраховая > 0*/)
				{
					//СуммаВзносов.Начислено = НачисленоСтраховая;
				}
				if(true/*УплаченоСтраховая > 0*/)
				{
					//СуммаВзносов.Уплачено = УплаченоСтраховая;
				}
			}
			if(true/*НачисленоНакопительная > 0 Или УплаченоНакопительная> 0*/)
			{
				//СуммаВзносов = НаборДанных.СуммаВзносовНаНакопительную.Значение;
				if(true/*НачисленоНакопительная > 0*/)
				{
					//СуммаВзносов.Начислено = НачисленоНакопительная;
				}
				if(true/*УплаченоНакопительная > 0*/)
				{
					//СуммаВзносов.Уплачено = УплаченоНакопительная;
				}
			}
		}
		// Функция устанавливает значения реквизитов XML узла ВходящаяОпись
		//

		public object ЗаполнитьНаборЗаписейВходящаяОпись2010(/*УзелПФР, МакетФормата, ТипДокумента, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, НомерДокументаВПачке, МакетВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ", НаборЗаписейВходящаяОпись = Неопределено, ТегВходящейОписи = "ВХОДЯЩАЯ_ОПИСЬ_ПО_СТРАХОВЫМ_ВЗНОСАМ"*/)
		{
			//НаборЗаписейВходящаяОпись = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, МакетВходящейОписи);
			//НаборЗаписейВходящаяОпись.НомерВПачке.Значение = НомерДокументаВПачке;
			/*// Составитель пачки
*/
			//НаборЗаписейСоставительПачки = НаборЗаписейВходящаяОпись.СоставительПачки.Значение;
			//ЗаполнитьСоставительПачки(НаборЗаписейСоставительПачки, ВыборкаПоШапкеДокумента);
			/*// ОрганизацияЮрФизЛицо, ОрганизацияИНН, ОрганизацияКПП, ОрганизацияОГРН, ОрганизацияНаименованиеОКОПФ, ОрганизацияНаименованиеПолное, ОрганизацияНаименованиеСокращенное
*/
			/*// Устанавливаем значение Номер пачки
*/
			//НаборЗаписейВходящаяОпись.НомерПачки.Значение.Основной = НомерПачки;
			/*// Блок СоставДокументов
*/
			//НаборЗаписейСоставДокументов = НаборЗаписейВходящаяОпись.СоставДокументов.Значение;
			//НаборЗаписейСоставДокументов.Количество.Значение = 1;
			//НаборЗаписейНаличиеДокументов = НаборЗаписейСоставДокументов.НаличиеДокументов.Значение;
			//НаборЗаписейНаличиеДокументов.ТипДокумента = ТипДокумента;
			//НаборЗаписейНаличиеДокументов.Количество = КоличествоДокументов;
			//НаборЗаписейВходящаяОпись.ДатаСоставления.Значение = ВыборкаПоШапкеДокумента.Дата;
			if(true/*ТипДокумента = "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ"*/)
			{
				//НаборЗаписейВходящаяОпись.ТипСведений.Значение = Строка(ВыборкаПоШапкеДокумента.ТипСведенийСЗВ);
				//НаборЗаписейВходящаяОпись.КодКатегории.Значение = ОбщегоНазначения.ПолучитьИмяЭлементаПеречисленияПоЗначению(ВыборкаПоШапкеДокумента.КатегорияЗастрахованныхЛиц);
				//НаборЗаписейОтчетныйПериод = НаборЗаписейВходящаяОпись.ОтчетныйПериод.Значение;
				//ЗаполнитьЗначенияСвойств(НаборЗаписейОтчетныйПериод,ОписаниеОтчетногоПериодаДляФайла(ВыборкаПоШапкеДокумента.ОтчетныйПериод));
				if(true/*ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ*/)
				{
					//НаборЗаписейВходящаяОпись.Удалить("КорректируемыйОтчетныйПериод");
				}
				//ВписатьВзносыВНаборДанных(НаборЗаписейВходящаяОпись, ВыборкаПоШапкеДокумента.НачисленоСтраховая, ВыборкаПоШапкеДокумента.УплаченоСтраховая, ВыборкаПоШапкеДокумента.НачисленоНакопительная, ВыборкаПоШапкеДокумента.УплаченоНакопительная);
			}
			//УзелПачкаВходящихДокументов = ДобавитьУзелВДеревоXML(УзелПФР, "ПачкаВходящихДокументов", "", );
			//ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТегВходящейОписи,""), НаборЗаписейВходящаяОпись);
			return null;
		}
		// ЗаполнитьНаборЗаписейВходящаяОпись2010()

		public object ФайлСведенийОВзносахИСтаже(/*ВыборкаПоШапкеДокумента, РезультатЗапросаПоЗаписямСтажа, КоличествоДокументов, Заголовок, Отказ*/)
		{
			//ДатаЗаполнения 			= ВыборкаПоШапкеДокумента.Дата;
			//ТипФормДокументов		= ВыборкаПоШапкеДокумента.ТипФормДокументов;
			//НомерПачки				= СокрЛП(ВыборкаПоШапкеДокумента.НомерПачки);
			//Ссылка					= ВыборкаПоШапкеДокумента.Ссылка;
			/*////////////////////////////////////////////////////////////////////////////////////////////
*/
			/*//ФОРМИРУЕМ ФАЙЛ СВЕДЕНИЙ
*/
			/*// Список стран
*/
			//СписокСтран = Новый Соответствие;
			//Запрос = Новый Запрос;
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	КлассификаторСтранМира.Наименование,
	|	КлассификаторСтранМира.Код
	|ИЗ
	|	Справочник.КлассификаторСтранМира КАК КлассификаторСтранМира";*/
			//Выборка = Запрос.Выполнить().Выбрать();
			while(true/*Выборка.Следующий()*/)
			{
				//СписокСтран.Вставить(СокрЛП(Выборка.Наименование), Строка(Выборка.Код));
			}
			/*;
	
	ДопустимыеЗначенияТретьегоПараметра = Новый Соответствие;*/
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕКРЕТ", Истина);
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕТИ", Истина);
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("АДМИНИСТР", Истина);
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("ВРНЕТРУД", Истина);
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЛДЕТИ", Истина);
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("ЧАЭС", Истина);
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("НЕОПЛ", Истина);
			/*// Загружаем формат файла сведений
*/
			//МакетФормата = ПолучитьОбщийМакет("ФорматПФР70_2010");
			//ТипДокументовПачки = "СВЕДЕНИЯ_О_СТРАХОВЫХ_ВЗНОСАХ_И_СТРАХОВОМ_СТАЖЕ_ЗЛ";
			/*// Создаем начальное дерево
*/
			//ДеревоВыгрузки = СоздатьДеревоXML();
			//УзелПФР = ДобавитьУзелВДеревоXML(ДеревоВыгрузки, "ФайлПФР", "", );
			//ЗаполнитьИмяИЗаголовокФайла(УзелПФР, МакетФормата, ПолучитьИмяФайлаПФ(Ссылка, ВыборкаПоШапкеДокумента.Год, ВыборкаПоШапкеДокумента));
			/*// Добавляем ветки ПачкаВходящихДокументов и ВходящаяОпись
*/
			//ДанныеВходящейОписи = "";
			//УзелПачкаВходящихДокументов = ЗаполнитьНаборЗаписейВходящаяОпись2010(УзелПФР, МакетФормата, ТипДокументовПачки, ВыборкаПоШапкеДокумента, КоличествоДокументов, НомерПачки, 1, ,ДанныеВходящейОписи);
			//ФорматСЗВ6 = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, ?(ТипФормДокументов = "СПВ-1","СПВ_1","СЗВ_6"));
			//ФорматВыработкаКалендарная = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ВыработкаКалендарная");
			//ФорматВыработкаВЧасах = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "ВыработкаВЧасах");
			if(true/*ТипФормДокументов = "СЗВ-6-2"*/)
			{
				//ФорматСЗВ6.СтажевыйПериод.Значение.Удалить("КоличествоЛьготныхСоставляющих");
				//ФорматСЗВ6.СтажевыйПериод.Значение.Удалить("ЛьготныйСтаж");
			}
			if(true/*ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ*/)
			{
				//ФорматСЗВ6.Удалить("КорректируемыйОтчетныйПериод");
			}
			if(true/*ВыборкаПоШапкеДокумента.ОрганизацияЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо*/)
			{
				//ФорматСЗВ6.Удалить("КПП");
				//ТаблицаПолей = ФорматСЗВ6.НалоговыйНомер.Поля;
				//ТаблицаПолей.Индексы.Добавить("ИмяПоля");
				//СтрокаКПП = ТаблицаПолей.Найти("КПП", "ИмяПоля");
				if(true/*СтрокаКПП <> Неопределено*/)
				{
					//ТаблицаПолей.Удалить(СтрокаКПП);
				}
			}
			//ФорматИностранныйАдрес = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 3);
			//ФорматНеструктурированныйАдрес = ЗагрузитьФорматНабораЗаписейдляПФР(МакетФормата, "АдресОбщий", 2);
			//НомерДокументаВПачке = 1;
			//ВыборкаПоРаботникиОрганизации	= РезультатЗапросаПоЗаписямСтажа.Выбрать();
			while(true/*ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерСтроки")*/)
			{
				//НаборЗаписейСЗВ6 = СкопироватьСтруктуруДанных(ФорматСЗВ6);
				/*// Общие данные пачки - берем их из описи
*/
				//НаборЗаписейСЗВ6.ВидФормы.Значение = ВыборкаПоШапкеДокумента.ТипФормДокументов;
				//НаборЗаписейСЗВ6.ТипСведений.Значение = ДанныеВходящейОписи.ТипСведений.Значение;
				//НаборЗаписейСЗВ6.РегистрационныйНомер.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.РегистрационныйНомер.Значение;
				//НаборЗаписейСЗВ6.НаименованиеКраткое.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.НаименованиеКраткое.Значение;
				//НаборЗаписейСЗВ6.НалоговыйНомер.Значение = ДанныеВходящейОписи.СоставительПачки.Значение.НалоговыйНомер.Значение;
				//НаборЗаписейСЗВ6.КодКатегории.Значение = ДанныеВходящейОписи.КодКатегории.Значение;
				//ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.ОтчетныйПериод.Значение,ДанныеВходящейОписи.ОтчетныйПериод.Значение);
				if(true/*ВыборкаПоШапкеДокумента.ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ*/)
				{
					if(true/*ТипФормДокументов = "СПВ-1"*/)
					{
						//ЗаполнитьЗначенияСвойств(НаборЗаписейСЗВ6.ОтчетныйПериод.Значение,ДанныеВходящейОписи.КорректируемыйОтчетныйПериод.Значение);
					}
				}
				//НаборЗаписейСЗВ6.ДатаЗаполнения.Значение = ВыборкаПоШапкеДокумента.Дата;
				/*// Данные физлица
*/
				//НомерДокументаВПачке = НомерДокументаВПачке + 1;
				//СтрокаНачалаСообщенияОбОшибке = "В строке № """+ СокрЛП(ВыборкаПоРаботникиОрганизации.НомерСтроки) + """: " + "По сотруднику "+ВыборкаПоРаботникиОрганизации.ФизЛицоНаименование + " ";
				if(true/*ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = "ИСХОДНАЯ"*/)
				{
					if(true/*ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода = NULL И ВыборкаПоРаботникиОрганизации.НачисленоСтраховая = 0 И ВыборкаПоРаботникиОрганизации.НачисленоНакопительная = 0*/)
					{
						//ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- Данных о стаже и взносах не обнаружено!", Отказ, Заголовок);
					}
				}
				//Фамилия = СокрЛП(ВыборкаПоРаботникиОрганизации.Фамилия);
				//Имя = СокрЛП(ВыборкаПоРаботникиОрганизации.Имя);
				//Отчество = СокрЛП(ВыборкаПоРаботникиОрганизации.Отчество);
				//НаборЗаписейСЗВ6.НомерВПачке.Значение = НомерДокументаВПачке;
				//НаборЗаписейСЗВ6.СтраховойНомер.Значение = ВыборкаПоРаботникиОрганизации.СтраховойНомерПФР;
				//НаборЗаписейФИО = НаборЗаписейСЗВ6.ФИО.Значение;
				//НаборЗаписейФИО.Фамилия = ВРег(Фамилия);
				//НаборЗаписейФИО.Имя = ВРег(Имя);
				//НаборЗаписейФИО.Отчество = ВРег(Отчество);
				if(true/*ТипФормДокументов = "СПВ-1"*/)
				{
					//НаборЗаписейСЗВ6.ДатаСоставленияНа.Значение = ВыборкаПоРаботникиОрганизации.ДатаСоставления;
				}
				if(true/*ВыборкаПоШапкеДокумента.ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ*/)
				{
					/*// заполнение отменяющей формы завершено
*/
					//ДобавитьИнформациюВДерево(ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,""), НаборЗаписейСЗВ6);
				}
				//ВписатьВзносыВНаборДанных(НаборЗаписейСЗВ6, ВыборкаПоРаботникиОрганизации.НачисленоСтраховая, ВыборкаПоРаботникиОрганизации.УплаченоСтраховая, ВыборкаПоРаботникиОрганизации.НачисленоНакопительная, ВыборкаПоРаботникиОрганизации.УплаченоНакопительная);
				/*// Выводим стаж
*/
				//ФорматСтажевыйПериод = СкопироватьСтруктуруДанных(НаборЗаписейСЗВ6.СтажевыйПериод.Значение);
				//НаборЗаписейСЗВ6.Удалить("СтажевыйПериод");
				//УзелСЗВ61 = ДобавитьУзелВДеревоXML(УзелПачкаВходящихДокументов, ТипДокументовПачки,"");
				//ДобавитьИнформациюВДерево(УзелСЗВ61, НаборЗаписейСЗВ6);
				if(true/*ТипФормДокументов = "СЗВ-6-2"*/)
				{
					while(true/*ВыборкаПоРаботникиОрганизации.СледующийПоЗначениюПоля("НомерОсновнойЗаписи")*/)
					{
						if(true/*ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода) И ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода)*/)
						{
							//ФорматСтажевыйПериод.НомерСтроки.Значение = ВыборкаПоРаботникиОрганизации.НомерОсновнойЗаписи;
							//ФорматСтажевыйПериод.ДатаНачалаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаНачалаПериода;
							//ФорматСтажевыйПериод.ДатаКонцаПериода.Значение = ВыборкаПоРаботникиОрганизации.ДатаОкончанияПериода;
							//УзелСтажевыйПериод = ДобавитьУзелВДеревоXML(УзелСЗВ61, "СтажевыйПериод","");
							//ДобавитьИнформациюВДерево(УзелСтажевыйПериод, ФорматСтажевыйПериод);
							/*// Признак наличия у работника основания для льготного стажа
*/
							/*РаботникОрганизацииИмеетЛьготныйСтаж =	ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТерриториальныеУсловияКод)  
							Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОсобыеУсловияТрудаКод)
							Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОснованиеИсчисляемогоСтажаКод) 
							Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ОснованиеВыслугиЛетКод) 
							Или ЗначениеЗаполнено(ВыборкаПоРаботникиОрганизации.ТретийПараметрИсчисляемогоСтажа);*/
							if(true/*РаботникОрганизацииИмеетЛьготныйСтаж*/)
							{
								/*ОбщегоНазначения.ВывестиИнформациюОбОшибке(СтрокаНачалаСообщенияОбОшибке + "- В записи о стаже имеется льготный стаж или прочие особенности. 
						|				Данные необходимо подавать по форме СЗВ-6-1!", Отказ, Заголовок);*/
							}
						}
					}
					//;;
				}
			}
			if(true/*Отказ*/)
			{
				//ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
				//ОбработкаКомментариев.ПоказатьСообщения();
			}
			/*// Преобразуем дерево в строковое описание XML
*/
			//ТекстФайла = ПолучитьТекстФайлаИзДереваЗначений(ДеревоВыгрузки);
			return null;
		}
		// ФайлСведенийОВзносахИСтаже()
		// Вычисляет адреса для информирования для переданной таблицы физлиц
		//
		// Параметры
		//
		// Возвращаемое значение:
		//   Таблица значений или Неопределено
		//

		public object АдресаДляИнформирования(/*ТаблицаФизлиц, Организация, ДатаАктуальности, Режим = ""*/)
		{
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	РаботникиОрганизации.ФизЛицо КАК ФизЛицо,
	|	РаботникиОрганизации.НомерСтроки
	|ПОМЕСТИТЬ ВТФизЛица
	|ИЗ
	|	&РаботникиОрганизации КАК РаботникиОрганизации
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";*/
			//Запрос.УстановитьПараметр("РаботникиОрганизации", ТаблицаФизлиц);
			//Запрос.Выполнить();
			if(true/*Режим = "ВсеАдреса"*/)
			{
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	РаботникиОрганизации.НомерСтроки КАК НомерСтроки,
		|	РаботникиОрганизации.ФизЛицо,
		|	ВЫБОР
		|		КОГДА АдресаДляИнформирования.Поле1 ЕСТЬ НЕ NULL 
		|			ТОГДА "","" + АдресаДляИнформирования.Поле1 + "","" + АдресаДляИнформирования.Поле2 + "","" + АдресаДляИнформирования.Поле3 + "","" + АдресаДляИнформирования.Поле4 + "","" + АдресаДляИнформирования.Поле5 + "","" + АдресаДляИнформирования.Поле6 + "","" + АдресаДляИнформирования.Поле7 + "","" + АдресаДляИнформирования.Поле8 + "","" + АдресаДляИнформирования.Поле9 + "","" + ВЫБОР
		|					КОГДА АдресаДляИнформирования.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|						ТОГДА ""дом""
		|					ИНАЧЕ ""владение""
		|				КОНЕЦ + "","" + ВЫБОР
		|					КОГДА АдресаДляИнформирования.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|						ТОГДА ""корпус""
		|					ИНАЧЕ ""строение""
		|				КОНЕЦ + "","" + ВЫБОР
		|					КОГДА АдресаДляИнформирования.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|						ТОГДА ""кв.""
		|					ИНАЧЕ ""оф.""
		|				КОНЕЦ
		|		КОГДА АдресаФактические.Поле1 ЕСТЬ НЕ NULL 
		|			ТОГДА "","" + АдресаФактические.Поле1 + "","" + АдресаФактические.Поле2 + "","" + АдресаФактические.Поле3 + "","" + АдресаФактические.Поле4 + "","" + АдресаФактические.Поле5 + "","" + АдресаФактические.Поле6 + "","" + АдресаФактические.Поле7 + "","" + АдресаФактические.Поле8 + "","" + АдресаФактические.Поле9 + "","" + ВЫБОР
		|					КОГДА АдресаФактические.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|						ТОГДА ""дом""
		|					ИНАЧЕ ""владение""
		|				КОНЕЦ + "","" + ВЫБОР
		|					КОГДА АдресаФактические.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|						ТОГДА ""корпус""
		|					ИНАЧЕ ""строение""
		|				КОНЕЦ + "","" + ВЫБОР
		|					КОГДА АдресаФактические.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|						ТОГДА ""кв.""
		|					ИНАЧЕ ""оф.""
		|				КОНЕЦ
		|		КОГДА АдресаРегистрации.Поле1 ЕСТЬ НЕ NULL 
		|			ТОГДА "","" + АдресаРегистрации.Поле1 + "","" + АдресаРегистрации.Поле2 + "","" + АдресаРегистрации.Поле3 + "","" + АдресаРегистрации.Поле4 + "","" + АдресаРегистрации.Поле5 + "","" + АдресаРегистрации.Поле6 + "","" + АдресаРегистрации.Поле7 + "","" + АдресаРегистрации.Поле8 + "","" + АдресаРегистрации.Поле9 + "","" + ВЫБОР
		|					КОГДА АдресаРегистрации.ТипДома В (ЗНАЧЕНИЕ(Перечисление.ТипыДомов.Дом), ЗНАЧЕНИЕ(Перечисление.ТипыДомов.ПустаяСсылка))
		|						ТОГДА ""дом""
		|					ИНАЧЕ ""владение""
		|				КОНЕЦ + "","" + ВЫБОР
		|					КОГДА АдресаРегистрации.ТипКорпуса В (ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.Корпус), ЗНАЧЕНИЕ(Перечисление.ТипыКорпусов.ПустаяСсылка))
		|						ТОГДА ""корпус""
		|					ИНАЧЕ ""строение""
		|				КОНЕЦ + "","" + ВЫБОР
		|					КОГДА АдресаРегистрации.ТипКвартиры В (ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.Квартира), ЗНАЧЕНИЕ(Перечисление.ТипыКвартир.ПустаяСсылка))
		|						ТОГДА ""кв.""
		|					ИНАЧЕ ""оф.""
		|				КОНЕЦ
		|		ИНАЧЕ """"
		|	КОНЕЦ КАК АдресДляИнформирования
		|ИЗ
		|	ВТФизЛица КАК РаботникиОрганизации
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаФактические
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаФактические.Объект
		|			И (АдресаФактические.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ФактАдресФизЛица))
		|			И (АдресаФактические.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаРегистрации
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаРегистрации.Объект
		|			И (АдресаРегистрации.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ЮрАдресФизЛица))
		|			И (АдресаРегистрации.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КонтактнаяИнформация КАК АдресаДляИнформирования
		|		ПО РаботникиОрганизации.ФизЛицо = АдресаДляИнформирования.Объект
		|			И (АдресаДляИнформирования.Вид = ЗНАЧЕНИЕ(Справочник.ВидыКонтактнойИнформации.ИнформАдресФизЛица))
		|			И (АдресаДляИнформирования.Тип = ЗНАЧЕНИЕ(Перечисление.ТипыКонтактнойИнформации.Адрес))
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";*/
			}
			return null;
		}
		// АдресаДляИнформирования()
		// Читает данные о застрахованном лице для заполнения строки документа персучета
		//
		// Параметры
		//  Физлицо - СправочникСсылка.ФизическиеЛица
		//
		// Возвращаемое значение:
		//   Структура со следующими полями: СтраховойНомерПФР, Фамилия, Имя, Отчество и, если требуется, - АдресДляИнформирования
		//

		public object ДанныеФизЛицаДляДокументаПерсучета(/*Физлицо, ДатаАктуальности, Организация, КатегорияЗастрахованныхЛиц, ОтчетныйПериод, ПолучатьАдрес = Ложь*/)
		{
			//ДанныеФизЛица = Новый Структура;
			//Фамилия = "";
			//Имя = "";
			//Отчество = "";
			//ОФизлице = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Физлицо,"СтраховойНомерПФР,Наименование");
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("ФизЛицо",			ФизЛицо);
			//Запрос.УстановитьПараметр("ДатаАктуальности",	ДатаАктуальности);
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(&ДатаАктуальности, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";*/
			//Выборка = Запрос.Выполнить().Выбрать();
			if(true/*Выборка.Следующий()*/)
			{
				//Фамилия = Выборка.Фамилия;
				//Имя = Выборка.Имя;
				//Отчество = Выборка.Отчество;
			}
			if(true/*Не ЗначениеЗаполнено(Фамилия + Имя + Отчество)*/)
			{
				//ОбщегоНазначения.ФамилияИнициалыФизЛица(ОФизлице.Наименование,Фамилия,Имя,Отчество);
			}
			//ДанныеФизЛица.Вставить("СтраховойНомерПФР", ОФизлице.СтраховойНомерПФР);
			//ДанныеФизЛица.Вставить("Фамилия", Фамилия);
			//ДанныеФизЛица.Вставить("Имя", Имя);
			//ДанныеФизЛица.Вставить("Отчество", Отчество);
			if(true/*ПолучатьАдрес*/)
			{
				//ТаблицаФизлиц = Новый ТаблицаЗначений;
				//ТаблицаФизлиц.Колонки.Добавить("ФизЛицо",Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
				//ТаблицаФизлиц.Колонки.Добавить("НомерСтроки",Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(5)));
				//СтрокаФизлица = ТаблицаФизлиц.Добавить();
				//СтрокаФизлица.ФизЛицо = ФизЛицо;
				//СтрокаФизлица.НомерСтроки = 1;
				//НовыйАдрес = АдресаДляИнформирования(ТаблицаФизлиц, Организация, ДатаАктуальности, "ИзменившиесяАдреса");
				if(true/*НовыйАдрес <> Неопределено*/)
				{
					//ДанныеФизЛица.Вставить("АдресДляИнформирования", НовыйАдрес[0].АдресДляИнформирования);
				}
			}
			//ДанныеФизЛица.Вставить("НачисленоСтраховая", 0);
			//ДанныеФизЛица.Вставить("УплаченоСтраховая", 0);
			//ДанныеФизЛица.Вставить("НачисленоНакопительная", 0);
			//ДанныеФизЛица.Вставить("УплаченоНакопительная", 0);
			if(true/*Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(КатегорияЗастрахованныхЛиц) Или Не ЗначениеЗаполнено(ОтчетныйПериод)*/)
			{
			}
			//МассивФизлиц = Новый Массив;
			//МассивФизлиц.Добавить(Физлицо);
			//ВзносыФизлиц = ПроцедурыПерсонифицированногоУчетаПолныеПрава.ДанныеОВзносахПоКатегориям(ДатаАктуальности, ОтчетныйПериод, ОтчетныйПериод, Организация, МассивФизлиц);
			//ВзносыФизлиц.Индексы.Добавить("Физлицо,КатегорияЗастрахованныхЛиц");
			//СтруктураПоиска = Новый Структура("Физлицо,КатегорияЗастрахованныхЛиц", Физлицо, КатегорияЗастрахованныхЛиц);
			//СтрокиФизлица = ВзносыФизлиц.НайтиСтроки(СтруктураПоиска);
			if(true/*СтрокиФизлица.Количество() > 0*/)
			{
				//ЗаполнитьЗначенияСвойств(ДанныеФизЛица, СтрокиФизлица[0]);
			}
			return null;
		}
		// ДанныеФизЛицаДляДокументаПерсучета()

		public object ДоначисленныеВзносыДляКорректирующегоДокумента(/*Организация, Дата, КорректируемыйПериод, КатегорияЗастрахованныхЛиц, ТаблицаФизлиц*/)
		{
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	СуммыВзносов.НомерСтроки,
	|	СуммыВзносов.ФизЛицо КАК ФизЛицо,
	|	СуммыВзносов.НачисленоНакопительная,
	|	СуммыВзносов.НачисленоСтраховая,
	|	СуммыВзносов.УплаченоНакопительная,
	|	СуммыВзносов.УплаченоСтраховая
	|ПОМЕСТИТЬ ВТСуммыВзносов
	|ИЗ
	|	&РаботникиОрганизации КАК СуммыВзносов
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";*/
			//Запрос.УстановитьПараметр("РаботникиОрганизации", ТаблицаФизлиц);
			//Запрос.Выполнить();
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.Дата) КАК Дата,
	|	КорректирующаяФорма.ФизЛицо
	|ПОМЕСТИТЬ ВТДата
	|ИЗ
	|	ВТСуммыВзносов КАК КорректирующаяФорма
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|		ПО КорректирующаяФорма.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4.ФизЛицо
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.Организация = &Организация
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.Дата < &Дата
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.Проведен
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|	И ВЫБОР
	|			КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.ОтчетныйПериод
	|			ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	КорректирующаяФорма.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4.Номер) КАК Номер,
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата,
	|	Даты.ФизЛицо
	|ПОМЕСТИТЬ ВТОписаниеДокумента
	|ИЗ
	|	ВТДата КАК Даты
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|		ПО Даты.Дата = СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация = &Организация
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Проведен
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|	И ВЫБОР
	|			КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.ОтчетныйПериод
	|			ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата,
	|	Даты.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОписаниеДокумента.ФизЛицо,
	|	МАКСИМУМ(СведенияОТрудовомСтажеИЗаработкеСЗВ4.Ссылка) КАК Ссылка
	|ПОМЕСТИТЬ ВТПредыдущиеДокументы
	|ИЗ
	|	ВТОписаниеДокумента КАК ОписаниеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4 КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4
	|		ПО ОписаниеДокумента.Дата = СведенияОТрудовомСтажеИЗаработкеСЗВ4.Дата
	|			И ОписаниеДокумента.Номер = СведенияОТрудовомСтажеИЗаработкеСЗВ4.Номер
	|ГДЕ
	|	СведенияОТрудовомСтажеИЗаработкеСЗВ4.Организация = &Организация
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.Проведен
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.КатегорияЗастрахованныхЛиц = &КатегорияЗастрахованныхЛиц
	|	И СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ <> ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ)
	|	И ВЫБОР
	|			КОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.ТипСведенийСЗВ = ЗНАЧЕНИЕ(Перечисление.ТипыСведенийСЗВ.ИСХОДНАЯ)
	|				ТОГДА СведенияОТрудовомСтажеИЗаработкеСЗВ4.ОтчетныйПериод
	|			ИНАЧЕ СведенияОТрудовомСтажеИЗаработкеСЗВ4.КорректируемыйПериод
	|		КОНЕЦ = &ОтчетныйПериод
	|
	|СГРУППИРОВАТЬ ПО
	|	ОписаниеДокумента.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СуммыВзносов.НомерСтроки КАК НомерСтроки,
	|	СуммыВзносов.ФизЛицо,
	|	СуммыВзносов.НачисленоНакопительная - ЕСТЬNULL(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоНакопительная, 0) КАК ДоначисленоНакопительная,
	|	СуммыВзносов.НачисленоСтраховая - ЕСТЬNULL(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.НачисленоСтраховая, 0) КАК ДоначисленоСтраховая,
	|	СуммыВзносов.УплаченоНакопительная - ЕСТЬNULL(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоНакопительная, 0) КАК ДоУплаченоНакопительная,
	|	СуммыВзносов.УплаченоСтраховая - ЕСТЬNULL(СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.УплаченоСтраховая, 0) КАК ДоУплаченоСтраховая
	|ИЗ
	|	ВТСуммыВзносов КАК СуммыВзносов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредыдущиеДокументы КАК ПредыдущиеДокументы
	|		ПО СуммыВзносов.ФизЛицо = ПредыдущиеДокументы.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации КАК СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации
	|		ПО (ПредыдущиеДокументы.Ссылка = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.Ссылка)
	|			И СуммыВзносов.ФизЛицо = СведенияОТрудовомСтажеИЗаработкеСЗВ4РаботникиОрганизации.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";*/
			//Запрос.УстановитьПараметр("Организация", Организация);
			//Запрос.УстановитьПараметр("Дата", Дата);
			//Запрос.УстановитьПараметр("ОтчетныйПериод", КорректируемыйПериод);
			//Запрос.УстановитьПараметр("КатегорияЗастрахованныхЛиц", КатегорияЗастрахованныхЛиц);
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ ПРОВЕРКИ ФОРМ СЗВ-6
		// Выполняет авторасчет стажа для формы СЗВ-6
		//

		public object СЗВ6_ПолучитьДанныеДляЗаполненияСтажа(/*ОбособленноеПодразделение, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, СписокФизЛиц = Неопределено*/)
		{
			//ДатаОкончанияПериода = КонецДня(ДатаОкончанияПериодаЗаполнения);
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			//Запрос.УстановитьПараметр("СписокФизЛиц",				СписокФизЛиц);
			//Запрос.УстановитьПараметр("ОтчетныйПериод",				ДатаНачалаПериодаЗаполнения);
			//Запрос.УстановитьПараметр("НачалоГода",					ДатаНачалаПериодаЗаполнения);
			//Запрос.УстановитьПараметр("КонецГода",					ДатаОкончанияПериода);
			//Запрос.УстановитьПараметр("НачалоСледующегоГода",		ДатаОкончанияПериода + 1);
			//Запрос.УстановитьПараметр("Организация",				ОбособленноеПодразделение);
			//Запрос.УстановитьПараметр("НеИсключатьРаботающихВСтудотряде", ДатаНачалаПериодаЗаполнения < ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования() Или Не ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудРаботающихВСтудотряде"));
			//Запрос.УстановитьПараметр("ГоловнаяОрганизация",		ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение));
			//Запрос.УстановитьПараметр("ТерриториальныеУсловия",		ОбщегоНазначения.ПолучитьЗначениеРеквизита(ОбособленноеПодразделение,"ТерриториальныеУсловияПФР"));
			//Запрос.УстановитьПараметр("НеОтбиратьДанныеПоФизлицу",	СписокФизЛиц = Неопределено);
			/*ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РаботникиОрганизацииСрезПоследних.Сотрудник,
	|	РаботникиОрганизацииСрезПоследних.Сотрудник.Физлицо КАК Физлицо,
	|	&НачалоГода КАК ДатаС,
	|	РаботникиОрганизацииСрезПоследних.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.Должность
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК ПериодЗавершения,
	|	ВЫБОР
	|		КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок
	|ПОМЕСТИТЬ ВТДатыДвижений
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&НачалоГода,
	|			Организация = &ГоловнаяОрганизация
	|				И Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеИсключатьРаботающихВСтудотряде
	|					ИЛИ (НЕ Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде))
	|				И &ПервоеДополнительноеУсловие
	|				И (&НеОтбиратьДанныеПоФизлицу
	|					ИЛИ Сотрудник.ФизЛицо В (&СписокФизЛиц))) КАК РаботникиОрганизацииСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостоянияЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПричинаИзмененияСостояния
	|		КОНЕЦ <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И ВЫБОР
	|			КОГДА &НачалоГода >= РаботникиОрганизацииСрезПоследних.ПериодЗавершения
	|					И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделениеЗавершения
	|			ИНАЧЕ РаботникиОрганизацииСрезПоследних.ОбособленноеПодразделение
	|		КОНЕЦ = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.Сотрудник.Физлицо,
	|	РаботникиОрганизации.Период,
	|	РаботникиОрганизации.Организация,
	|	РаботникиОрганизации.ПодразделениеОрганизации,
	|	РаботникиОрганизации.Должность,
	|	РаботникиОрганизации.ГрафикРаботы,
	|	РаботникиОрганизации.ПериодЗавершения,
	|	РаботникиОрганизации.ЗанимаемыхСтавок
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|ГДЕ
	|	(&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&СписокФизЛиц))
	|	И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|	И РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И (&НеИсключатьРаботающихВСтудотряде
	|			ИЛИ (НЕ РаботникиОрганизации.Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде))
	|	И &ВтороеДополнительноеУсловие
	|	И РаботникиОрганизации.ОбособленноеПодразделение = &Организация
	|	И РаботникиОрганизации.Период > &НачалоГода
	|	И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|	И РаботникиОрганизации.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	Работники.Сотрудник,
	|	Работники.Сотрудник.Физлицо,
	|	Работники.ПериодЗавершения,
	|	Работники.Организация,
	|	Работники.ПодразделениеОрганизацииЗавершения,
	|	Работники.ДолжностьЗавершения,
	|	Работники.ГрафикРаботыЗавершения,
	|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0),
	|	Работники.ЗанимаемыхСтавокЗавершения
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций КАК Работники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|		ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|			И (ПериодыПерекрытия.Период > Работники.Период)
	|			И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|			И Работники.Сотрудник = ПериодыПерекрытия.Сотрудник
	|ГДЕ
	|	Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|	И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|	И (&НеИсключатьРаботающихВСтудотряде
	|			ИЛИ (НЕ Работники.Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде))
	|	И (&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ Работники.Сотрудник.Физлицо В (&СписокФизЛиц))
	|	И Работники.Организация = &ГоловнаяОрганизация
	|	И &ТретьеДополнительноеУсловие
	|	И Работники.ОбособленноеПодразделениеЗавершения = &Организация
	|	И Работники.ПричинаИзмененияСостоянияЗавершения <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|	И Работники.ПериодЗавершения > &НачалоГода
	|	И Работники.ПериодЗавершения < &НачалоСледующегоГода
	|	И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыДвижений.Сотрудник КАК Сотрудник,
	|	ПериодыДвижений.ФизЛицо КАК ФизЛицо,
	|	ПериодыДвижений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	ПериодыДвижений.Должность КАК Должность,
	|	ПериодыДвижений.ГрафикРаботы,
	|	ПериодыДвижений.ЗанимаемыхСтавок,
	|	ПериодыДвижений.ДатаС,
	|	ПериодыДвижений.ДатаПо,
	|	ПериодыДвижений.ПериодЗавершения,
	|	ДатыУвольнения.ПричинаИзмененияСостояния
	|ПОМЕСТИТЬ ВТПериодыДвижений
	|ИЗ
	|	(ВЫБРАТЬ
	|		ДатыНазначений1.Сотрудник КАК Сотрудник,
	|		ДатыНазначений1.Физлицо КАК ФизЛицо,
	|		ДатыНазначений1.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ДатыНазначений1.Должность КАК Должность,
	|		ДатыНазначений1.ГрафикРаботы КАК ГрафикРаботы,
	|		ДатыНазначений1.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|		ДатыНазначений1.ДатаС КАК ДатаС,
	|		ВЫБОР
	|			КОГДА ДатыНазначений1.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВЫБОР
	|						КОГДА ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода) > ДатыНазначений1.ПериодЗавершения
	|							ТОГДА ДатыНазначений1.ПериодЗавершения
	|						ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода)
	|					КОНЕЦ
	|			ИНАЧЕ ЕСТЬNULL(МИНИМУМ(ДатыНазначений2.Период), &НачалоСледующегоГода)
	|		КОНЕЦ КАК ДатаПо,
	|		ДатыНазначений1.ПериодЗавершения КАК ПериодЗавершения
	|	ИЗ
	|		ВТДатыДвижений КАК ДатыНазначений1
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыНазначений2
	|			ПО ДатыНазначений1.Сотрудник = ДатыНазначений2.Сотрудник
	|				И (ДатыНазначений2.Организация = &ГоловнаяОрганизация)
	|				И (ДатыНазначений2.Период > ДатыНазначений1.ДатаС)
	|				И (ДатыНазначений2.Период < &НачалоСледующегоГода)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ДатыНазначений1.Сотрудник,
	|		ДатыНазначений1.Физлицо,
	|		ДатыНазначений1.ПодразделениеОрганизации,
	|		ДатыНазначений1.Должность,
	|		ДатыНазначений1.ГрафикРаботы,
	|		ДатыНазначений1.ДатаС,
	|		ДатыНазначений1.ПериодЗавершения,
	|		ДатыНазначений1.ЗанимаемыхСтавок) КАК ПериодыДвижений
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ДатыУвольнения
	|		ПО ПериодыДвижений.Сотрудник = ДатыУвольнения.Сотрудник
	|			И (ДатыУвольнения.Организация = &ГоловнаяОрганизация)
	|			И ПериодыДвижений.ДатаПо = ДатыУвольнения.Период
	|			И (ДатыУвольнения.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПодразделениеОрганизации,
	|	Должность
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПериодыПостоянства.Сотрудник КАК Сотрудник,
	|	ПериодыПостоянства.ФизЛицо КАК ФизЛицо,
	|	"""" КАК ТретийПараметрИсчисляемогоСтажа,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&ОтчетныйПериод КАК ОтчетныйПериод,
	|	ПериодыПостоянства.ТерриториальныеУсловия,
	|	ПериодыПостоянства.ОсобыеУсловияТруда,
	|	ПериодыПостоянства.ГрафикРаботы,
	|	ПериодыПостоянства.ЗанимаемыхСтавок,
	|	ПериодыПостоянства.КодПозицииСписка,
	|	ЕСТЬNULL(ПериодыПостоянства.ОснованиеВыслугиЛет, ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)) КАК ОснованиеВыслугиЛет,
	|	ПериодыПостоянства.НазначениеС КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ПериодыПостоянства.НазначениеПо = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ПериодыПостоянства.НазначениеПо, ДЕНЬ, -1)
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТКадровыеПериоды
	|ИЗ
	|	(ВЫБРАТЬ
	|		НачалаПериодов.Сотрудник КАК Сотрудник,
	|		НачалаПериодов.ФизЛицо КАК ФизЛицо,
	|		НачалаПериодов.Должность КАК Должность,
	|		НачалаПериодов.ГрафикРаботы КАК ГрафикРаботы,
	|		НачалаПериодов.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|		НачалаПериодов.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		НачалаПериодов.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|		НачалаПериодов.КодПозицииСписка КАК КодПозицииСписка,
	|		НачалаПериодов.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|		НачалаПериодов.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|		НачалаПериодов.ДатаС КАК НазначениеС,
	|		ЕСТЬNULL(МИНИМУМ(ОкончанияПериодов.ДатаС), &НачалоСледующегоГода) КАК НазначениеПо
	|	ИЗ
	|		(ВЫБРАТЬ
	|			ПериодыНазначений.Сотрудник КАК Сотрудник,
	|			ПериодыНазначений.ФизЛицо КАК ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|			ПериодыНазначений.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|			ПериодыНазначений.Должность КАК Должность,
	|			ПериодыНазначений.КодПозицииСписка КАК КодПозицииСписка,
	|			ПериодыНазначений.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|			ПериодыНазначений.ГрафикРаботы КАК ГрафикРаботы,
	|			ПериодыНазначений.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|			ПериодыНазначений.ДатаС КАК ДатаС,
	|			ЕСТЬNULL(ШР.ОсобыеУсловияТруда, ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)) КАК ОсобыеУсловияТруда
	|		ИЗ
	|			(ВЫБРАТЬ
	|				ПериодыНазначений.Сотрудник КАК Сотрудник,
	|				ПериодыНазначений.Физлицо КАК ФизЛицо,
	|				ПериодыНазначений.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|				ВЫБОР
	|					КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|						ТОГДА &ТерриториальныеУсловия
	|					ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|				КОНЕЦ КАК ТерриториальныеУсловия,
	|				ПериодыНазначений.Должность КАК Должность,
	|				ПериодыНазначений.Должность.КодПозицииСписка КАК КодПозицииСписка,
	|				ПериодыНазначений.Должность.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|				ПериодыНазначений.ГрафикРаботы КАК ГрафикРаботы,
	|				ПериодыНазначений.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|				ПериодыНазначений.ДатаС КАК ДатаС,
	|				МАКСИМУМ(ШР.Период) КАК Период
	|			ИЗ
	|				ВТДатыДвижений КАК ПериодыНазначений
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
	|						И (ШР.Период <= ПериодыНазначений.ДатаС)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				ПериодыНазначений.Сотрудник,
	|				ПериодыНазначений.Физлицо,
	|				ПериодыНазначений.ПодразделениеОрганизации,
	|				ПериодыНазначений.Должность,
	|				ПериодыНазначений.Должность.КодПозицииСписка,
	|				ПериодыНазначений.Должность.ОснованиеВыслугиЛет,
	|				ПериодыНазначений.ГрафикРаботы,
	|				ПериодыНазначений.ДатаС,
	|				ВЫБОР
	|					КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|						ТОГДА &ТерриториальныеУсловия
	|					ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|				КОНЕЦ,
	|				ПериодыНазначений.ЗанимаемыхСтавок) КАК ПериодыНазначений
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
	|					И (ШР.Период = ПериодыНазначений.Период)
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			ПериодыНазначений.Сотрудник,
	|			ПериодыНазначений.ФизЛицо,
	|			ПериодыНазначений.ПодразделениеОрганизации,
	|			ВЫБОР
	|				КОГДА ПериодыНазначений.ПодразделениеОрганизации.КодПоОКАТО = """"
	|					ТОГДА &ТерриториальныеУсловия
	|				ИНАЧЕ ПериодыНазначений.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|			КОНЕЦ,
	|			ПериодыНазначений.Должность,
	|			ПериодыНазначений.Должность.КодПозицииСписка,
	|			ПериодыНазначений.Должность.ОснованиеВыслугиЛет,
	|			ПериодыНазначений.ГрафикРаботы,
	|			NULL,
	|			ШР.Период,
	|			ШР.ОсобыеУсловияТруда
	|		ИЗ
	|			ВТПериодыДвижений КАК ПериодыНазначений
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|				ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|					И ПериодыНазначений.Должность = ШР.Должность
	|					И (ШР.Период > ПериодыНазначений.ДатаС)
	|					И (ШР.Период < ПериодыНазначений.ДатаПо
	|						ИЛИ ШР.Период = ПериодыНазначений.ДатаПо
	|							И ПериодыНазначений.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))) КАК НачалаПериодов
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				РаботникиОрганизации.Сотрудник КАК Сотрудник,
	|				РаботникиОрганизации.Сотрудник.Физлицо КАК Физлицо,
	|				РаботникиОрганизации.Период КАК ДатаС
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизации
	|			ГДЕ
	|				РаботникиОрганизации.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеИсключатьРаботающихВСтудотряде
	|						ИЛИ (НЕ РаботникиОрганизации.Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде))
	|				И (&НеОтбиратьДанныеПоФизлицу
	|						ИЛИ РаботникиОрганизации.Сотрудник.Физлицо В (&СписокФизЛиц))
	|				И РаботникиОрганизации.Организация = &ГоловнаяОрганизация
	|				И РаботникиОрганизации.Период > &НачалоГода
	|				И РаботникиОрганизации.Период < &НачалоСледующегоГода
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				Работники.Сотрудник,
	|				Работники.Сотрудник.Физлицо,
	|				Работники.ПериодЗавершения
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций КАК Работники
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК ПериодыПерекрытия
	|					ПО (ПериодыПерекрытия.Период <= Работники.ПериодЗавершения)
	|						И (ПериодыПерекрытия.Период > Работники.Период)
	|						И Работники.Сотрудник = ПериодыПерекрытия.Сотрудник
	|						И (ПериодыПерекрытия.Организация = &ГоловнаяОрганизация)
	|			ГДЕ
	|				Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				И Работники.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|				И (&НеИсключатьРаботающихВСтудотряде
	|						ИЛИ (НЕ Работники.Сотрудник.ЯвляетсяСтудентомРаботающимВСтудотряде))
	|				И (&НеОтбиратьДанныеПоФизлицу
	|						ИЛИ Работники.Сотрудник.Физлицо В (&СписокФизЛиц))
	|				И Работники.Организация = &ГоловнаяОрганизация
	|				И ПериодыПерекрытия.Период ЕСТЬ NULL 
	|				И Работники.ПериодЗавершения > &НачалоГода
	|				И Работники.ПериодЗавершения < &НачалоСледующегоГода
	|			
	|			ОБЪЕДИНИТЬ ВСЕ
	|			
	|			ВЫБРАТЬ
	|				ПериодыНазначений.Сотрудник,
	|				ПериодыНазначений.ФизЛицо,
	|				ШР.Период
	|			ИЗ
	|				ВТПериодыДвижений КАК ПериодыНазначений
	|					ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ШтатноеРасписаниеОрганизаций КАК ШР
	|					ПО ПериодыНазначений.ПодразделениеОрганизации = ШР.ПодразделениеОрганизации
	|						И ПериодыНазначений.Должность = ШР.Должность
	|						И (ШР.Период > ПериодыНазначений.ДатаС)
	|						И (ШР.Период <= ПериодыНазначений.ДатаПо)) КАК ОкончанияПериодов
	|			ПО НачалаПериодов.Сотрудник = ОкончанияПериодов.Сотрудник
	|				И НачалаПериодов.ДатаС < ОкончанияПериодов.ДатаС
	|	
	|	СГРУППИРОВАТЬ ПО
	|		НачалаПериодов.Сотрудник,
	|		НачалаПериодов.ФизЛицо,
	|		НачалаПериодов.ПодразделениеОрганизации,
	|		НачалаПериодов.ТерриториальныеУсловия,
	|		НачалаПериодов.Должность,
	|		НачалаПериодов.КодПозицииСписка,
	|		НачалаПериодов.ОснованиеВыслугиЛет,
	|		НачалаПериодов.ГрафикРаботы,
	|		НачалаПериодов.ДатаС,
	|		НачалаПериодов.ОсобыеУсловияТруда,
	|		НачалаПериодов.ЗанимаемыхСтавок) КАК ПериодыПостоянства
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря
	|ПОМЕСТИТЬ ВТДатыПериода
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоГода И &КонецГода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Организация КАК Организация,
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.ВидРасчета.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТФПД
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			ПериодДействия МЕЖДУ &НачалоГода И &КонецГода
	|				И Организация = &ГоловнаяОрганизация
	|				И ВидРасчета.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка)
	|				И (&НеОтбиратьДанныеПоФизлицу
	|					ИЛИ Сотрудник.Физлицо В (&СписокФизЛиц))
	|				И Сотрудник В
	|					(ВЫБРАТЬ
	|						ВТДатыДвижений.Сотрудник
	|					ИЗ
	|						ВТДатыДвижений)) КАК Начисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Начисления.Организация КАК Организация,
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	ДатыПериода.ДатаКалендаря КАК ПериодДействияНачало,
	|	ДатыПериода.ДатаКалендаря КАК ПериодДействияКонец,
	|	Начисления.Сторно КАК Сторно,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТНЕСторнированныеНачисления
	|ИЗ
	|	ВТДатыПериода КАК ДатыПериода
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТФПД КАК Начисления
	|		ПО (ДатыПериода.ДатаКалендаря МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Организация,
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	Сторно
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.ФизЛицо КАК ФизЛицо,
	|	Начисления.Сотрудник КАК Сотрудник,
	|	Начисления.ВидРасчета КАК ВидРасчета,
	|	Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4
	|ПОМЕСТИТЬ ВТНачисленияСУчетомСторнирования
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|ГДЕ
	|	ТСторно.ВидРасчета ЕСТЬ NULL 
	|	И (НЕ Начисления.Сторно)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	Начисления.ПериодДействияНачало,
	|	Начисления.ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	(ВЫБРАТЬ
	|		Начисления.ФизЛицо КАК ФизЛицо,
	|		Начисления.Сотрудник КАК Сотрудник,
	|		Начисления.ВидРасчета КАК ВидРасчета,
	|		Начисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|		Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|		СУММА(ВЫБОР
	|				КОГДА Начисления.Сторно
	|					ТОГДА -1
	|				ИНАЧЕ 1
	|			КОНЕЦ) КАК СуммаСторно
	|	ИЗ
	|		ВТНЕСторнированныеНачисления КАК Начисления
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Начисления.ФизЛицо,
	|		Начисления.Сотрудник,
	|		Начисления.ВидРасчета,
	|		Начисления.ПериодДействияНачало,
	|		Начисления.ПериодДействияКонец,
	|		Начисления.ВидСтажаСЗВ4) КАК Начисления
	|ГДЕ
	|	Начисления.СуммаСторно > 0
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|			ТОГДА ВЫБОР
	|					КОГДА ТСторно.ПериодДействияКонец = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|						ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					ИНАЧЕ ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияКонец, СЕКУНДА, 1)
	|				КОНЕЦ
	|		ИНАЧЕ Начисления.ПериодДействияНачало
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|			ТОГДА Начисления.ПериодДействияКонец
	|		КОГДА ТСторно.ПериодДействияНачало = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияНачало, СЕКУНДА, -1)
	|	КОНЕЦ,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО Начисления.Организация = ТСторно.Организация
	|			И Начисления.Сотрудник = ТСторно.Сотрудник
	|			И Начисления.ВидРасчета = ТСторно.ВидРасчета
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И ((НЕ(ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|					И ТСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец)))
	|ГДЕ
	|	ТСторно.ВидРасчета ЕСТЬ НЕ NULL 
	|	И (НЕ Начисления.Сторно)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	Начисления.ФизЛицо,
	|	Начисления.Сотрудник,
	|	Начисления.ВидРасчета,
	|	ВЫБОР
	|		КОГДА ТСторно.ПериодДействияКонец = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(ТСторно.ПериодДействияКонец, СЕКУНДА, 1)
	|	КОНЕЦ,
	|	Начисления.ПериодДействияКонец,
	|	Начисления.ВидСтажаСЗВ4
	|ИЗ
	|	ВТНЕСторнированныеНачисления КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНЕСторнированныеНачисления КАК ТСторно
	|		ПО (ТСторно.Организация = Начисления.Организация)
	|			И (ТСторно.Сотрудник = Начисления.Сотрудник)
	|			И (ТСторно.ВидРасчета = Начисления.ВидРасчета)
	|			И (ТСторно.Сторно)
	|			И (ТСторно.ПериодДействияНачало МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И (ТСторно.ПериодДействияКонец МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
	|			И ((НЕ(ТСторно.ПериодДействияНачало = Начисления.ПериодДействияНачало
	|					И ТСторно.ПериодДействияКонец = Начисления.ПериодДействияКонец)))
	|			И (ТСторно.ПериодДействияНачало > Начисления.ПериодДействияНачало)
	|			И (ТСторно.ПериодДействияКонец < Начисления.ПериодДействияКонец)
	|ГДЕ
	|	(НЕ ТСторно.ВидРасчета ЕСТЬ NULL )
	|	И (НЕ Начисления.Сторно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	ВидСтажаСЗВ4
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияНачало >= КадровыеПериоды.ДатаНачалаПериода
	|			ТОГДА Начисления.ПериодДействияНачало
	|		ИНАЧЕ КадровыеПериоды.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА Начисления.ПериодДействияКонец <= КадровыеПериоды.ДатаОкончанияПериода
	|			ТОГДА Начисления.ПериодДействияКонец
	|		ИНАЧЕ КадровыеПериоды.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериода,
	|	Начисления.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|	КадровыеПериоды.ФизЛицо КАК ФизЛицо,
	|	КадровыеПериоды.Сотрудник КАК Сотрудник,
	|	КадровыеПериоды.ОбособленноеПодразделение,
	|	КадровыеПериоды.ОтчетныйПериод
	|ПОМЕСТИТЬ ВТОплаченныеПериодыРаботы
	|ИЗ
	|	ВТКадровыеПериоды КАК КадровыеПериоды
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТНачисленияСУчетомСторнирования КАК Начисления
	|		ПО КадровыеПериоды.Сотрудник = Начисления.Сотрудник
	|			И (Начисления.ПериодДействияНачало МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода
	|				ИЛИ Начисления.ПериодДействияКонец МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода)
	|			И (Начисления.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНачисленияСУчетомСторнирования КАК ПовторныеНачисления
	|		ПО КадровыеПериоды.ФизЛицо = ПовторныеНачисления.ФизЛицо
	|			И (ПовторныеНачисления.ПериодДействияНачало = Начисления.ПериодДействияНачало)
	|			И (ПовторныеНачисления.ПериодДействияКонец = Начисления.ПериодДействияКонец)
	|			И (ПовторныеНачисления.ВидСтажаСЗВ4 <> Начисления.ВидСтажаСЗВ4)
	|			И (ПовторныеНачисления.ВидСтажаСЗВ4 <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ПустаяСсылка))
	|ГДЕ
	|	(НЕ((Начисления.ВидСтажаСЗВ4 = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж)
	|				ИЛИ Начисления.ВидСтажаСЗВ4 = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЛДЕТИ))
	|				И ЕСТЬNULL(ПовторныеНачисления.ВидСтажаСЗВ4, """") = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЕТИ)))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОтдельноСтоящиеПериоды.ФизЛицо,
	|	ОтдельноСтоящиеПериоды.Сотрудник,
	|	ОтдельноСтоящиеПериоды.ВидСтажаСЗВ4,
	|	ОтдельноСтоящиеПериоды.ОбособленноеПодразделение,
	|	ОтдельноСтоящиеПериоды.ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ПересеченияПериодов.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтдельноСтоящиеПериоды.ДатаНачалаПериода
	|		ИНАЧЕ ПересеченияПериодов.ДатаНачалаПериода
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ПересеченияПериодов.ФизЛицо ЕСТЬ NULL 
	|			ТОГДА ОтдельноСтоящиеПериоды.ДатаОкончанияПериода
	|		ИНАЧЕ ПересеченияПериодов.ДатаОкончанияПериода
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ПОМЕСТИТЬ ВТОтредактированныеОплаченныеПериоды
	|ИЗ
	|	ВТОплаченныеПериодыРаботы КАК ОтдельноСтоящиеПериоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
	|			ВЫБОР
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 1
	|					ТОГДА ПересекающиеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|						И ПересекающиеПериоды.ДатаОкончанияПериода > ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаОкончанияПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|						И ПересекающиеПериоды.ДатаОкончанияПериода <= ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|						И ПересекающиеПериоды.ДатаОкончанияПериода > ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|						И ПересекающиеПериоды.ДатаОкончанияПериода <= ИсходныеПериоды.ДатаОкончанияПериода
	|					ТОГДА ПересекающиеПериоды.ДатаОкончанияПериода
	|			КОНЕЦ КАК ДатаНачалаПериода,
	|			ВЫБОР
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 1
	|					ТОГДА ИсходныеПериоды.ДатаНачалаПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 2
	|					ТОГДА ПересекающиеПериоды.ДатаОкончанияПериода
	|				КОГДА ПересекающиеПериоды.НомерИнтервала = 3
	|					ТОГДА ИсходныеПериоды.ДатаОкончанияПериода
	|			КОНЕЦ КАК ДатаОкончанияПериода,
	|			ИсходныеПериоды.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|			ИсходныеПериоды.Сотрудник КАК Сотрудник,
	|			ИсходныеПериоды.ФизЛицо КАК ФизЛицо,
	|			ИсходныеПериоды.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|			ИсходныеПериоды.ОтчетныйПериод КАК ОтчетныйПериод
	|		ИЗ
	|			ВТОплаченныеПериодыРаботы КАК ИсходныеПериоды
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					ОплаченныеПериоды1.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|					ОплаченныеПериоды1.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|					ОплаченныеПериоды1.ВидСтажаСЗВ4 КАК ВидСтажаСЗВ4,
	|					ОплаченныеПериоды1.Сотрудник КАК Сотрудник,
	|					ОплаченныеПериоды1.ФизЛицо КАК ФизЛицо,
	|					ОплаченныеПериоды1.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|					ОплаченныеПериоды1.ОтчетныйПериод КАК ОтчетныйПериод,
	|					1 КАК НомерИнтервала
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды1
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					ОплаченныеПериоды2.ДатаНачалаПериода,
	|					ОплаченныеПериоды2.ДатаОкончанияПериода,
	|					ОплаченныеПериоды2.ВидСтажаСЗВ4,
	|					ОплаченныеПериоды2.Сотрудник,
	|					ОплаченныеПериоды2.ФизЛицо,
	|					ОплаченныеПериоды2.ОбособленноеПодразделение,
	|					ОплаченныеПериоды2.ОтчетныйПериод,
	|					2
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды2
	|				
	|				ОБЪЕДИНИТЬ
	|				
	|				ВЫБРАТЬ
	|					ОплаченныеПериоды3.ДатаНачалаПериода,
	|					ОплаченныеПериоды3.ДатаОкончанияПериода,
	|					ОплаченныеПериоды3.ВидСтажаСЗВ4,
	|					ОплаченныеПериоды3.Сотрудник,
	|					ОплаченныеПериоды3.ФизЛицо,
	|					ОплаченныеПериоды3.ОбособленноеПодразделение,
	|					ОплаченныеПериоды3.ОтчетныйПериод,
	|					3
	|				ИЗ
	|					ВТОплаченныеПериодыРаботы КАК ОплаченныеПериоды3) КАК ПересекающиеПериоды
	|				ПО ИсходныеПериоды.ВидСтажаСЗВ4 = ПересекающиеПериоды.ВидСтажаСЗВ4
	|					И ИсходныеПериоды.Сотрудник = ПересекающиеПериоды.Сотрудник
	|					И ИсходныеПериоды.ОбособленноеПодразделение = ПересекающиеПериоды.ОбособленноеПодразделение
	|					И ИсходныеПериоды.ОтчетныйПериод = ПересекающиеПериоды.ОтчетныйПериод
	|					И ИсходныеПериоды.ДатаНачалаПериода > ПересекающиеПериоды.ДатаНачалаПериода
	|					И ИсходныеПериоды.ДатаНачалаПериода < ПересекающиеПериоды.ДатаОкончанияПериода) КАК ПересеченияПериодов
	|		ПО ОтдельноСтоящиеПериоды.ВидСтажаСЗВ4 = ПересеченияПериодов.ВидСтажаСЗВ4
	|			И ОтдельноСтоящиеПериоды.Сотрудник = ПересеченияПериодов.Сотрудник
	|			И ОтдельноСтоящиеПериоды.ОбособленноеПодразделение = ПересеченияПериодов.ОбособленноеПодразделение
	|			И ОтдельноСтоящиеПериоды.ОтчетныйПериод = ПересеченияПериодов.ОтчетныйПериод
	|			И ОтдельноСтоящиеПериоды.ДатаНачалаПериода <= ПересеченияПериодов.ДатаНачалаПериода
	|			И ОтдельноСтоящиеПериоды.ДатаОкончанияПериода >= ПересеченияПериодов.ДатаОкончанияПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НефильтрованныеДниСтажа.ДатаКалендаря,
	|	ВЫБОР
	|		КОГДА НефильтрованныеДниСтажа.ДатаКалендаря = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НефильтрованныеДниСтажа.ДатаКалендаря, ДЕНЬ, 1)
	|	КОНЕЦ КАК СледующаяДатаКалендаря,
	|	ВЫБОР
	|		КОГДА НефильтрованныеДниСтажа.ДатаКалендаря = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(НефильтрованныеДниСтажа.ДатаКалендаря, ДЕНЬ, -1)
	|	КОНЕЦ КАК ПредыдущаяДатаКалендаря,
	|	ВЫБОР
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 1
	|			ТОГДА ""ДЕКРЕТ""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 2
	|			ТОГДА ""ДЕТИ""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 3
	|			ТОГДА ""ВРНЕТРУД""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 4
	|			ТОГДА ""АДМИНИСТР""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 5
	|			ТОГДА ""ДЛДЕТИ""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 6
	|			ТОГДА ""ЧАЭС""
	|		КОГДА МИНИМУМ(НефильтрованныеДниСтажа.ТретийПараметрИсчисляемогоСтажа) = 7
	|			ТОГДА ""НЕОПЛ""
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа,
	|	НефильтрованныеДниСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	НефильтрованныеДниСтажа.Сотрудник КАК Сотрудник,
	|	НефильтрованныеДниСтажа.ФизЛицо КАК ФизЛицо,
	|	НефильтрованныеДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	НефильтрованныеДниСтажа.ОтчетныйПериод КАК ОтчетныйПериод,
	|	НефильтрованныеДниСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	НефильтрованныеДниСтажа.КодПозицииСписка КАК КодПозицииСписка,
	|	НефильтрованныеДниСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	НефильтрованныеДниСтажа.ЗанимаемыхСтавок,
	|	НефильтрованныеДниСтажа.СтавокДляТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТДниСтажа
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		НефильтрованныеДниСтажа.ДатаКалендаря КАК ДатаКалендаря,
	|		ВЫБОР
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.Декрет)
	|				ТОГДА 1
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.Дети)
	|				ТОГДА 2
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВременнаяНетрудоспособность)
	|				ТОГДА 3
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|				ТОГДА 4
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЛДЕТИ)
	|				ТОГДА 5
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ЧАЭС)
	|				ТОГДА 6
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НЕОПЛ)
	|				ТОГДА 7
	|			ИНАЧЕ 8
	|		КОНЕЦ КАК ТретийПараметрИсчисляемогоСтажа,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|				ТОГДА НефильтрованныеДниСтажа.ЗанимаемыхСтавок
	|			ИНАЧЕ 0
	|		КОНЕЦ КАК СтавокДляТерриториальныхУсловий,
	|		ВЫБОР
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЛДЕТИ)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ЧАЭС)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НЕОПЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ТерриториальныеУсловия
	|		КОНЕЦ КАК ТерриториальныеУсловия,
	|		НефильтрованныеДниСтажа.Сотрудник КАК Сотрудник,
	|		НефильтрованныеДниСтажа.ФизЛицо КАК ФизЛицо,
	|		НефильтрованныеДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		НефильтрованныеДниСтажа.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|		НефильтрованныеДниСтажа.ОтчетныйПериод КАК ОтчетныйПериод,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЛДЕТИ)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ЧАЭС)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НЕОПЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ОсобыеУсловияТруда
	|		КОНЕЦ КАК ОсобыеУсловияТруда,
	|		ВЫБОР
	|			КОГДА НефильтрованныеДниСтажа.ГрафикРаботы.НеполныйРабочийДень
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЛДЕТИ)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ЧАЭС)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НЕОПЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.КодПозицииСписка
	|		КОНЕЦ КАК КодПозицииСписка,
	|		ВЫБОР
	|			КОГДА ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ОтпускБезСохраненияЗарплаты)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ВключаетсяВСтраховойСтаж)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ДЛДЕТИ)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.ЧАЭС)
	|					ИЛИ ВидыСтажа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НЕОПЛ)
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка)
	|			ИНАЧЕ НефильтрованныеДниСтажа.ОснованиеВыслугиЛет
	|		КОНЕЦ КАК ОснованиеВыслугиЛет
	|	ИЗ
	|		(ВЫБРАТЬ
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря КАК ДатаКалендаря,
	|			КадровыеПериоды.ФизЛицо КАК ФизЛицо,
	|			КадровыеПериоды.Сотрудник КАК Сотрудник,
	|			КадровыеПериоды.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|			КадровыеПериоды.ОтчетныйПериод КАК ОтчетныйПериод,
	|			КадровыеПериоды.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|			КадровыеПериоды.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|			КадровыеПериоды.ГрафикРаботы КАК ГрафикРаботы,
	|			КадровыеПериоды.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|			КадровыеПериоды.КодПозицииСписка КАК КодПозицииСписка,
	|			КадровыеПериоды.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|			МАКСИМУМ(ВидыСтажа.Порядок) КАК ПорядковыйНомерВидаСтажа
	|		ИЗ
	|			ВТДатыПериода КАК РегламентированныйПроизводственныйКалендарь
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТКадровыеПериоды КАК КадровыеПериоды
	|				ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ КадровыеПериоды.ДатаНачалаПериода И КадровыеПериоды.ДатаОкончанияПериода)
	|				ЛЕВОЕ СОЕДИНЕНИЕ ВТОтредактированныеОплаченныеПериоды КАК ОтредактированныеОплаченныеПериоды
	|					ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыСтажаСЗВ4 КАК ВидыСтажа
	|					ПО ОтредактированныеОплаченныеПериоды.ВидСтажаСЗВ4 = ВидыСтажа.Ссылка
	|				ПО (РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ ОтредактированныеОплаченныеПериоды.ДатаНачалаПериода И ОтредактированныеОплаченныеПериоды.ДатаОкончанияПериода)
	|					И (ОтредактированныеОплаченныеПериоды.Сотрудник = КадровыеПериоды.Сотрудник)
	|					И (ОтредактированныеОплаченныеПериоды.ОбособленноеПодразделение = КадровыеПериоды.ОбособленноеПодразделение)
	|		ГДЕ
	|			ЕСТЬNULL(КадровыеПериоды.Сотрудник, ОтредактированныеОплаченныеПериоды.Сотрудник) ЕСТЬ НЕ NULL 
	|			И ЕСТЬNULL(ОтредактированныеОплаченныеПериоды.ВидСтажаСЗВ4, """") <> ЗНАЧЕНИЕ(Перечисление.ВидыСтажаСЗВ4.НеВключаетсяВСтраховойСтаж)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			РегламентированныйПроизводственныйКалендарь.ДатаКалендаря,
	|			КадровыеПериоды.ФизЛицо,
	|			КадровыеПериоды.Сотрудник,
	|			КадровыеПериоды.ОбособленноеПодразделение,
	|			КадровыеПериоды.ОтчетныйПериод,
	|			КадровыеПериоды.ТерриториальныеУсловия,
	|			КадровыеПериоды.ОсобыеУсловияТруда,
	|			КадровыеПериоды.ГрафикРаботы,
	|			КадровыеПериоды.ЗанимаемыхСтавок,
	|			КадровыеПериоды.КодПозицииСписка,
	|			КадровыеПериоды.ОснованиеВыслугиЛет) КАК НефильтрованныеДниСтажа
	|			ЛЕВОЕ СОЕДИНЕНИЕ Перечисление.ВидыСтажаСЗВ4 КАК ВидыСтажа
	|			ПО (ВидыСтажа.Порядок = НефильтрованныеДниСтажа.ПорядковыйНомерВидаСтажа)
	|	ГДЕ
	|		НефильтрованныеДниСтажа.Сотрудник.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)) КАК НефильтрованныеДниСтажа
	|
	|СГРУППИРОВАТЬ ПО
	|	НефильтрованныеДниСтажа.ОтчетныйПериод,
	|	НефильтрованныеДниСтажа.Сотрудник,
	|	НефильтрованныеДниСтажа.ФизЛицо,
	|	НефильтрованныеДниСтажа.ДатаКалендаря,
	|	НефильтрованныеДниСтажа.ТерриториальныеУсловия,
	|	НефильтрованныеДниСтажа.ОбособленноеПодразделение,
	|	НефильтрованныеДниСтажа.ОсобыеУсловияТруда,
	|	НефильтрованныеДниСтажа.КодПозицииСписка,
	|	НефильтрованныеДниСтажа.ОснованиеВыслугиЛет,
	|	НефильтрованныеДниСтажа.ЗанимаемыхСтавок,
	|	НефильтрованныеДниСтажа.СтавокДляТерриториальныхУсловий
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетныйПериод,
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	ПредыдущаяДатаКалендаря,
	|	ТерриториальныеУсловия,
	|	ОсобыеУсловияТруда,
	|	КодПозицииСписка,
	|	ОснованиеВыслугиЛет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДниСтажа.ДатаКалендаря,
	|	ДниСтажа.СледующаяДатаКалендаря КАК СледующаяДатаКалендаря,
	|	ДниСтажа.ПредыдущаяДатаКалендаря,
	|	ДниСтажа.ТретийПараметрИсчисляемогоСтажа,
	|	ДниСтажа.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ДниСтажа.ФизЛицо КАК ФизЛицо,
	|	ДниСтажа.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ДниСтажа.ОтчетныйПериод КАК ОтчетныйПериод,
	|	ДниСтажа.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ДниСтажа.КодПозицииСписка КАК КодПозицииСписка,
	|	ДниСтажа.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ДниСтажа.ЗанимаемыхСтавок,
	|	ДниСтажа.СтавокДляТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТСледующиеДниСтажа
	|ИЗ
	|	ВТДниСтажа КАК ДниСтажа
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОтчетныйПериод,
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	СледующаяДатаКалендаря,
	|	ТерриториальныеУсловия,
	|	ОсобыеУсловияТруда,
	|	КодПозицииСписка,
	|	ОснованиеВыслугиЛет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущийДень.ДатаКалендаря КАК НачалоПериода,
	|	ТекущийДень.ТретийПараметрИсчисляемогоСтажа,
	|	ТекущийДень.ТерриториальныеУсловия,
	|	ТекущийДень.ФизЛицо КАК ФизЛицо,
	|	ТекущийДень.ОбособленноеПодразделение,
	|	ТекущийДень.ОтчетныйПериод,
	|	ТекущийДень.ОсобыеУсловияТруда,
	|	ТекущийДень.КодПозицииСписка,
	|	ТекущийДень.ОснованиеВыслугиЛет,
	|	ТекущийДень.ЗанимаемыхСтавок,
	|	ТекущийДень.СтавокДляТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТНачалаПериодов
	|ИЗ
	|	ВТДниСтажа КАК ТекущийДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСледующиеДниСтажа КАК ПредыдущийДень
	|		ПО ТекущийДень.ДатаКалендаря = ПредыдущийДень.СледующаяДатаКалендаря
	|			И ТекущийДень.ТерриториальныеУсловия = ПредыдущийДень.ТерриториальныеУсловия
	|			И ТекущийДень.ТретийПараметрИсчисляемогоСтажа = ПредыдущийДень.ТретийПараметрИсчисляемогоСтажа
	|			И ТекущийДень.ФизЛицо = ПредыдущийДень.ФизЛицо
	|			И ТекущийДень.ОбособленноеПодразделение = ПредыдущийДень.ОбособленноеПодразделение
	|			И ТекущийДень.ОтчетныйПериод = ПредыдущийДень.ОтчетныйПериод
	|			И ТекущийДень.ОсобыеУсловияТруда = ПредыдущийДень.ОсобыеУсловияТруда
	|			И ТекущийДень.КодПозицииСписка = ПредыдущийДень.КодПозицииСписка
	|			И ТекущийДень.ОснованиеВыслугиЛет = ПредыдущийДень.ОснованиеВыслугиЛет
	|			И ТекущийДень.ЗанимаемыхСтавок = ПредыдущийДень.ЗанимаемыхСтавок
	|			И ТекущийДень.СтавокДляТерриториальныхУсловий = ПредыдущийДень.СтавокДляТерриториальныхУсловий
	|ГДЕ
	|	ПредыдущийДень.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущийДень.ДатаКалендаря КАК ОкончаниеПериода,
	|	ТекущийДень.ТретийПараметрИсчисляемогоСтажа,
	|	ТекущийДень.ТерриториальныеУсловия,
	|	ТекущийДень.ФизЛицо КАК ФизЛицо,
	|	ТекущийДень.ОбособленноеПодразделение,
	|	ТекущийДень.ОтчетныйПериод,
	|	ТекущийДень.ОсобыеУсловияТруда,
	|	ТекущийДень.КодПозицииСписка,
	|	ТекущийДень.ОснованиеВыслугиЛет,
	|	ТекущийДень.ЗанимаемыхСтавок,
	|	ТекущийДень.СтавокДляТерриториальныхУсловий
	|ПОМЕСТИТЬ ВТОкончанияПериодов
	|ИЗ
	|	ВТДниСтажа КАК ТекущийДень
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДниСтажа КАК СледующийДень
	|		ПО ТекущийДень.ДатаКалендаря = СледующийДень.ПредыдущаяДатаКалендаря
	|			И ТекущийДень.ТерриториальныеУсловия = СледующийДень.ТерриториальныеУсловия
	|			И ТекущийДень.ТретийПараметрИсчисляемогоСтажа = СледующийДень.ТретийПараметрИсчисляемогоСтажа
	|			И ТекущийДень.ФизЛицо = СледующийДень.ФизЛицо
	|			И ТекущийДень.ОбособленноеПодразделение = СледующийДень.ОбособленноеПодразделение
	|			И ТекущийДень.ОтчетныйПериод = СледующийДень.ОтчетныйПериод
	|			И ТекущийДень.ОсобыеУсловияТруда = СледующийДень.ОсобыеУсловияТруда
	|			И ТекущийДень.КодПозицииСписка = СледующийДень.КодПозицииСписка
	|			И ТекущийДень.ОснованиеВыслугиЛет = СледующийДень.ОснованиеВыслугиЛет
	|			И ТекущийДень.ЗанимаемыхСтавок = СледующийДень.ЗанимаемыхСтавок
	|			И ТекущийДень.СтавокДляТерриториальныхУсловий = СледующийДень.СтавокДляТерриториальныхУсловий
	|ГДЕ
	|	СледующийДень.ФизЛицо ЕСТЬ NULL 
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НачалаПериодов.ФизЛицо КАК ФизЛицо,
	|	НачалаПериодов.ОтчетныйПериод,
	|	НачалаПериодов.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	НачалаПериодов.НачалоПериода КАК ДатаНачалаПериода,
	|	ЕСТЬNULL(МИНИМУМ(ОкончанияПериодов.ОкончаниеПериода), НачалаПериодов.НачалоПериода) КАК ДатаОкончанияПериода,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ОсобыеУсловияТруда В (ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.Ст27_3), ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.Ст27_4))
	|				И НачалаПериодов.ФизЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Мужской)
	|			ТОГДА """"
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.ОсобыеУсловияТруда
	|	КОНЕЦ КАК ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.КодПозицииСписка
	|	КОНЕЦ КАК КодПозицииСписка,
	|	НачалаПериодов.ТретийПараметрИсчисляемогоСтажа,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.ОснованиеВыслугиЛет
	|	КОНЕЦ КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.ТерриториальныеУсловия
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА 0
	|		КОГДА НачалаПериодов.ТерриториальныеУсловия В (ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.МКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.МКСР), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.РКС), ЗНАЧЕНИЕ(Справочник.ТерриториальныеУсловия.РКСМ))
	|			ТОГДА НачалаПериодов.СтавокДляТерриториальныхУсловий
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПараметрТерриториальныхУсловий,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА 0
	|		КОГДА НачалаПериодов.ОснованиеВыслугиЛет В (ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ПД), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ГДХР), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_СМ), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ГДХР), ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.Ст28_ГД))
	|			ТОГДА НачалаПериодов.ЗанимаемыхСтавок
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ТретийПараметрВыслугиЛет
	|ИЗ
	|	ВТНачалаПериодов КАК НачалаПериодов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТОкончанияПериодов КАК ОкончанияПериодов
	|		ПО НачалаПериодов.ТерриториальныеУсловия = ОкончанияПериодов.ТерриториальныеУсловия
	|			И НачалаПериодов.ТретийПараметрИсчисляемогоСтажа = ОкончанияПериодов.ТретийПараметрИсчисляемогоСтажа
	|			И НачалаПериодов.ФизЛицо = ОкончанияПериодов.ФизЛицо
	|			И НачалаПериодов.ОбособленноеПодразделение = ОкончанияПериодов.ОбособленноеПодразделение
	|			И НачалаПериодов.ОтчетныйПериод = ОкончанияПериодов.ОтчетныйПериод
	|			И НачалаПериодов.ОсобыеУсловияТруда = ОкончанияПериодов.ОсобыеУсловияТруда
	|			И НачалаПериодов.КодПозицииСписка = ОкончанияПериодов.КодПозицииСписка
	|			И НачалаПериодов.ОснованиеВыслугиЛет = ОкончанияПериодов.ОснованиеВыслугиЛет
	|			И НачалаПериодов.НачалоПериода <= ОкончанияПериодов.ОкончаниеПериода
	|			И НачалаПериодов.ЗанимаемыхСтавок = ОкончанияПериодов.ЗанимаемыхСтавок
	|			И НачалаПериодов.СтавокДляТерриториальныхУсловий = ОкончанияПериодов.СтавокДляТерриториальныхУсловий
	|
	|СГРУППИРОВАТЬ ПО
	|	НачалаПериодов.НачалоПериода,
	|	НачалаПериодов.ТерриториальныеУсловия,
	|	НачалаПериодов.ТретийПараметрИсчисляемогоСтажа,
	|	НачалаПериодов.ФизЛицо,
	|	НачалаПериодов.ОбособленноеПодразделение,
	|	НачалаПериодов.ОтчетныйПериод,
	|	НачалаПериодов.КодПозицииСписка,
	|	НачалаПериодов.ОснованиеВыслугиЛет,
	|	НачалаПериодов.ЗанимаемыхСтавок,
	|	НачалаПериодов.СтавокДляТерриториальныхУсловий,
	|	ВЫБОР
	|		КОГДА НачалаПериодов.ОсобыеУсловияТруда В (ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.Ст27_3), ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.Ст27_4))
	|				И НачалаПериодов.ФизЛицо.Пол = ЗНАЧЕНИЕ(Перечисление.ПолФизическихЛиц.Мужской)
	|			ТОГДА """"
	|		КОГДА НачалаПериодов.ТретийПараметрИсчисляемогоСтажа В (""ДЕТИ"", ""АДМИНИСТР"", ""ДЛДЕТИ"", ""ЧАЭС"", ""НЕОПЛ"")
	|			ТОГДА """"
	|		ИНАЧЕ НачалаПериодов.ОсобыеУсловияТруда
	|	КОНЕЦ
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОбособленноеПодразделение,
	|	ФизЛицо,
	|	ДатаНачалаПериода";*/
			/*//
*/
			/*ПериодыДоговоровТекст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо КАК Физлицо,
	|	&Организация КАК ОбособленноеПодразделение,
	|	&ОтчетныйПериод КАК ОтчетныйПериод,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.КодПоОКАТО, """") = """"
	|			ТОГДА &ТерриториальныеУсловия
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ПодразделениеОрганизации.ТерриториальныеУсловияПФР
	|	КОНЕЦ КАК ТерриториальныеУсловия,
	|	ЗНАЧЕНИЕ(Справочник.ОсобыеУсловияТруда.ПустаяСсылка) КАК ОсобыеУсловияТруда,
	|	"""" КАК КодПозицииСписка,
	|	ЗНАЧЕНИЕ(Справочник.ОснованияВыслугиЛет.ПустаяСсылка) КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала < &НачалоГода
	|			ТОГДА &НачалоГода
	|		ИНАЧЕ ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала
	|	КОНЕЦ КАК ДатаНачалаПериода,
	|	ВЫБОР
	|		КОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания < &НачалоСледующегоГода
	|			ТОГДА ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания
	|		ИНАЧЕ &КонецГода
	|	КОНЕЦ КАК ДатаОкончанияПериода
	|ИЗ
	|	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
	|ГДЕ
	|	ДоговорНаВыполнениеРаботСФизЛицом.Организация = &Организация
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаНачала <= &КонецГода
	|	И ДоговорНаВыполнениеРаботСФизЛицом.ДатаОкончания >= &НачалоГода
	|	И (&НеОтбиратьДанныеПоФизлицу
	|			ИЛИ ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник.Физлицо В (&СписокФизЛиц))
	|	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен
	|	И (&НеИсключатьРаботающихВСтудотряде
	|			ИЛИ (НЕ ДоговорНаВыполнениеРаботСФизЛицом.ЗаключенСоСтудентомРаботающимВСтудотряде))
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	ДатаОкончанияПериода,
	|	ДатаНачалаПериода";*/
			//ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ПервоеДополнительноеУсловие",ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников());
			//ТекстЗапроса = СтрЗаменить(ТекстЗапроса,"И &ВтороеДополнительноеУсловие",ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников("РаботникиОрганизации."));
			//Запрос.Текст = 	СтрЗаменить(ТекстЗапроса,"И &ТретьеДополнительноеУсловие",ПроцедурыПерсонифицированногоУчетаПереопределяемый.СЗВ4_ПолучитьДополнительныеУсловияДляСотрудников("Работники."));
			//ТаблицаСтажа = Запрос.Выполнить().Выгрузить();
			//ТаблицаСтажа.Индексы.Добавить("ФизЛицо");
			/*// Удалим из таблицы стажа незначимые записи:
*/
			/*//  - если по физлицу имеется 2 непрерывных записи с одинаковыми условиями труда, то объединим данные записи 
*/
			//Н = ТаблицаСтажа.Количество() - 1;
			while(true/*Н > 0*/)
			{
				//ТекущаяЗапись = ТаблицаСтажа[Н];
				//ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
				if(true/*ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ПараметрТерриториальныхУсловий = ПредшествующаяЗапись.ПараметрТерриториальныхУсловий
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			И ТекущаяЗапись.ТретийПараметрВыслугиЛет = ПредшествующаяЗапись.ТретийПараметрВыслугиЛет*/)
				{
					/*// если совпадает физлицо
*/
					/*// если записи непрерывны (идут друг за другом по времени)
*/
					/*// и совпадают параметры стажа
*/
					/*// объединим записи в одну
*/
					//ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
					//ТаблицаСтажа.Удалить(ТекущаяЗапись);
				}
				//Н = Н - 1;
			}
			/*;
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");*/
			//Запрос.Текст = ПериодыДоговоровТекст;
			//ТаблицаСтажаПоДоговорам = Запрос.Выполнить().Выгрузить();
			//Н = ТаблицаСтажаПоДоговорам.Количество() - 1;
			while(true/*Н > 0*/)
			{
				//ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н];
				//ПредшествующаяЗапись = ТаблицаСтажаПоДоговорам[Н-1];
				if(true/*ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.ДатаНачалаПериода <= КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 // если записи идут друг за другом или пересекаются*/)
				{
					/*// если совпадает физлицо
*/
					/*// если записи идут друг за другом или пересекаются 
*/
					/*// объединим записи в одну
*/
					//ПредшествующаяЗапись.ДатаОкончанияПериода = Макс(ТекущаяЗапись.ДатаОкончанияПериода, ПредшествующаяЗапись.ДатаОкончанияПериода);
					//ПредшествующаяЗапись.ДатаНачалаПериода = Мин(ТекущаяЗапись.ДатаНачалаПериода, ПредшествующаяЗапись.ДатаНачалаПериода);
					//ТаблицаСтажаПоДоговорам.Удалить(ТекущаяЗапись);
				}
				//Н = Н - 1;
			}
			/*;
	
	ТаблицаСтажаПоДоговорам.Сортировать("ФизЛицо,ДатаНачалаПериода");*/
			//ПредшествующееФизЛицо = Справочники.ФизическиеЛица.ПустаяСсылка();
			//МассивСтрок = Новый Массив;
			//СтрокСтажа = 0;
			//СтруктураПоиска = Новый Структура("ФизЛицо");
			//Н = ТаблицаСтажаПоДоговорам.Количество();
			while(true/*Н > 0*/)
			{
				//ТекущаяЗапись = ТаблицаСтажаПоДоговорам[Н - 1];
				if(true/*ТекущаяЗапись.ФизЛицо <> ПредшествующееФизЛицо*/)
				{
					//ЗаполнитьЗначенияСвойств(СтруктураПоиска,ТекущаяЗапись);
					//МассивСтрок = ТаблицаСтажа.НайтиСтроки(СтруктураПоиска);
					//ПредшествующееФизЛицо = ТекущаяЗапись.ФизЛицо;
				}
				//СтрокСтажа = МассивСтрок.Количество();
				if(true/*СтрокСтажа = 0*/)
				{
					//ЗаполнитьЗначенияСвойств(ТаблицаСтажа.Добавить(),ТекущаяЗапись);
					//Н = Н - 1;
				}
				//ДатаНачалаПериода = НачалоДня(ТекущаяЗапись.ДатаНачалаПериода);
				//ДатаОкончанияПериода = КонецДня(ТекущаяЗапись.ДатаОкончанияПериода);
				if(true/*ДатаОкончанияПериода >= ДатаНачалаПериода*/)
				{
					//НоваяСтрока = ТаблицаСтажа.Добавить();
					//ЗаполнитьЗначенияСвойств(НоваяСтрока,ТекущаяЗапись);
					//НоваяСтрока.ДатаНачалаПериода = ДатаНачалаПериода;
					//НоваяСтрока.ДатаОкончанияПериода = ДатаОкончанияПериода;
				}
				//Н = Н - 1;
			}
			/*;
	
	ТаблицаСтажа.Сортировать("ФизЛицо,ДатаНачалаПериода");*/
			//Н = ТаблицаСтажа.Количество() - 1;
			while(true/*Н > 0*/)
			{
				//ТекущаяЗапись = ТаблицаСтажа[Н];
				//ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
				if(true/*ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ПараметрТерриториальныхУсловий = ПредшествующаяЗапись.ПараметрТерриториальныхУсловий
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			И ТекущаяЗапись.ТретийПараметрВыслугиЛет = ПредшествующаяЗапись.ТретийПараметрВыслугиЛет*/)
				{
					/*// если совпадает физлицо
*/
					/*// если записи непрерывны (идут друг за другом по времени)
*/
					/*// и совпадают параметры стажа
*/
					/*// объединим записи в одну
*/
					//ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
					//ТаблицаСтажа.Удалить(ТекущаяЗапись);
				}
				//Н = Н - 1;
			}
			/*;
	
	ТаблицаСтажа = ПроцедурыПерсонифицированногоУчетаПолныеПрава.ВписатьКатегорииВДанныеСтажа(ОбособленноеПодразделение, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, ТаблицаСтажа);*/
			//Н = ТаблицаСтажа.Количество() - 1;
			while(true/*Н > 0*/)
			{
				//ТекущаяЗапись = ТаблицаСтажа[Н];
				//ПредшествующаяЗапись = ТаблицаСтажа[Н-1];
				if(true/*ТекущаяЗапись.ФизЛицо = ПредшествующаяЗапись.ФизЛицо // если совпадает физлицо
			И ТекущаяЗапись.КатегорияЗастрахованныхЛиц = ПредшествующаяЗапись.КатегорияЗастрахованныхЛиц
			И (ТекущаяЗапись.ДатаНачалаПериода = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)+1 
			ИЛИ КонецДня(ТекущаяЗапись.ДатаНачалаПериода) = КонецДня(ПредшествующаяЗапись.ДатаОкончанияПериода)) // если записи непрерывны (идут друг за другом по времени)
			// и совпадают параметры стажа
			И ТекущаяЗапись.ОсобыеУсловияТруда = ПредшествующаяЗапись.ОсобыеУсловияТруда
			И СокрЛП(ТекущаяЗапись.КодПозицииСписка) = СокрЛП(ПредшествующаяЗапись.КодПозицииСписка)
			И ТекущаяЗапись.ОснованиеВыслугиЛет = ПредшествующаяЗапись.ОснованиеВыслугиЛет
			И ТекущаяЗапись.ТерриториальныеУсловия = ПредшествующаяЗапись.ТерриториальныеУсловия
			И ТекущаяЗапись.ПараметрТерриториальныхУсловий = ПредшествующаяЗапись.ПараметрТерриториальныхУсловий
			И ТекущаяЗапись.ТретийПараметрИсчисляемогоСтажа = ПредшествующаяЗапись.ТретийПараметрИсчисляемогоСтажа
			И ТекущаяЗапись.ТретийПараметрВыслугиЛет = ПредшествующаяЗапись.ТретийПараметрВыслугиЛет*/)
				{
					/*// если совпадает физлицо
*/
					/*// если записи непрерывны (идут друг за другом по времени)
*/
					/*// и совпадают параметры стажа
*/
					/*// объединим записи в одну
*/
					//ПредшествующаяЗапись.ДатаОкончанияПериода = ТекущаяЗапись.ДатаОкончанияПериода;
					//ТаблицаСтажа.Удалить(ТекущаяЗапись);
				}
				//Н = Н - 1;
			}
			return null;
		}
		//Выполняет проверку правильности заполнения набора записей о стаже для формы СЗВ-6
		// Функция в параметре РезультатВыборкиЗаписей возвращает результат запроса выборки записей стажа

		public object СЗВ6_ПроверитьНаборЗаписейОСтаже(/*ИнициаторВызова, ТаблицаФизлиц, РезультатВыборкиЗаписей = "", ВыводитьСообщенияВОбработчикСообщений = Ложь, СообщенияРазделПроверки = Неопределено*/)
		{
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			//Запрос.УстановитьПараметр("ИсточникДанных",	ТаблицаФизлиц);
			/*ТекстЗапроса =
	"ВЫБРАТЬ
	|	ТЧ.НомерСтроки КАК НомерСтроки,
	|	ТЧ.ФизЛицо КАК ФизЛицо,
	|	ТЧ.Организация,
	|	ТЧ.КатегорияЗастрахованныхЛиц,
	|	ТЧ.ОтчетныйПериод,
	|	НЕОПРЕДЕЛЕНО КАК ПоляДляФайла
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	&ИсточникДанных КАК ТЧ
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ФизЛицо";*/
			if(true/*ИнициаторВызова = "НаборЗаписей"*/)
			{
				//Запрос.Текст = СтрЗаменить(ТекстЗапроса,"НЕОПРЕДЕЛЕНО КАК ПоляДляФайла","1 КАК ПоляДляФайла");
			}
			//Запрос.Выполнить();
			/*ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ТЧРаботникиОрг.НомерСтроки КАК НомерСтроки,
	|	ТЧРаботникиОрг.ФизЛицо КАК ФизЛицо,
	|	ТЧРаботникиОрг.КатегорияЗастрахованныхЛиц КАК КатегорияЗастрахованныхЛиц,
	|	ТЧРаботникиОрг.Организация,
	|	ТЧРаботникиОрг.ОтчетныйПериод КАК ОтчетныйПериод,
	|	НЕОПРЕДЕЛЕНО КАК ПоляДляФайла,
	|	ЗаписиОСтаже.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|	ЗаписиОСтаже.Год КАК Год,
	|	ЗаписиОСтаже.НомерОсновнойЗаписи КАК НомерОсновнойЗаписи,
	|	ЗаписиОСтаже.НомерДополнительнойЗаписи КАК НомерДополнительнойЗаписи,
	|	ЗаписиОСтаже.ДатаНачалаПериода КАК ДатаНачалаПериода,
	|	ЗаписиОСтаже.ДатаОкончанияПериода КАК ДатаОкончанияПериода,
	|	ЗаписиОСтаже.ТерриториальныеУсловия КАК ТерриториальныеУсловия,
	|	ЗаписиОСтаже.ТерриториальныеУсловия.Код КАК ТерриториальныеУсловияКод,
	|	ЗаписиОСтаже.ПараметрТерриториальныхУсловий КАК ТерриториальныеУсловияСтавка,
	|	ЗаписиОСтаже.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрг.ОтчетныйПериод < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ЗаписиОСтаже.ОсобыеУсловияТруда.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОсобыеУсловияТруда.КодДляОтчетности2010
	|	КОНЕЦ КАК ОсобыеУсловияТрудаКод,
	|	ЗаписиОСтаже.КодПозицииСписка КАК КодПозицииСписка,
	|	ЗаписиОСтаже.КодПозицииСписка.Код КАК КодПозицииСпискаКод,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа КАК ОснованиеИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеИсчисляемогоСтажа.Код КАК ОснованиеИсчисляемогоСтажаКод,
	|	ЕСТЬNULL(ЗаписиОСтаже.ПервыйПараметрИсчисляемогоСтажа, 0) КАК ПервыйПараметрИсчисляемогоСтажа,
	|	ЕСТЬNULL(ЗаписиОСтаже.ВторойПараметрИсчисляемогоСтажа, 0) КАК ВторойПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ТретийПараметрИсчисляемогоСтажа КАК ТретийПараметрИсчисляемогоСтажа,
	|	ЗаписиОСтаже.ОснованиеВыслугиЛет КАК ОснованиеВыслугиЛет,
	|	ВЫБОР
	|		КОГДА ТЧРаботникиОрг.ОтчетныйПериод < ДАТАВРЕМЯ(2011, 1, 1, 0, 0, 0)
	|			ТОГДА ЗаписиОСтаже.ОснованиеВыслугиЛет.Код
	|		ИНАЧЕ ЗаписиОСтаже.ОснованиеВыслугиЛет.КодДляОтчетности2010
	|	КОНЕЦ КАК ОснованиеВыслугиЛетКод,
	|	ЗаписиОСтаже.ПервыйПараметрВыслугиЛет КАК ПервыйПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ВторойПараметрВыслугиЛет КАК ВторойПараметрВыслугиЛет,
	|	ЗаписиОСтаже.ТретийПараметрВыслугиЛет КАК ТретийПараметрВыслугиЛет
	|ИЗ
	|	ВТДанныеДокумента КАК ТЧРаботникиОрг
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗаписиОСтажеДляСЗВ4 КАК ЗаписиОСтаже
	|		ПО ТЧРаботникиОрг.ФизЛицо = ЗаписиОСтаже.ФизЛицо
	|			И ТЧРаботникиОрг.Организация = ЗаписиОСтаже.ОбособленноеПодразделение
	|			И ТЧРаботникиОрг.ОтчетныйПериод = ЗаписиОСтаже.ОтчетныйПериод
	|			И ТЧРаботникиОрг.КатегорияЗастрахованныхЛиц = ЗаписиОСтаже.КатегорияЗастрахованныхЛиц
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки,
	|	НомерОсновнойЗаписи,
	|	НомерДополнительнойЗаписи";*/
			if(true/*ИнициаторВызова = "НаборЗаписей"*/)
			{
				//Запрос.Текст = ТекстЗапроса;
			}
			//РезультатВыборкиЗаписей = Запрос.Выполнить();
			//ВыборкаЗаписей = РезультатВыборкиЗаписей.Выбрать();
			//ТаблицаПлохихЗаписей = Новый ТаблицаЗначений;
			//ТаблицаПлохихЗаписей.Колонки.Добавить("Физлицо");
			//ТаблицаПлохихЗаписей.Колонки.Добавить("ОписаниеОшибки");
			//ДопустимыеЗначенияТретьегоПараметра = Новый Соответствие;
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕКРЕТ", Истина);
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЕТИ", Истина);
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("АДМИНИСТР", Истина);
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("ВРНЕТРУД", Истина);
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("ДЛДЕТИ", Истина);
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("ЧАЭС", Истина);
			//ДопустимыеЗначенияТретьегоПараметра.Вставить("НЕОПЛ", Истина);
			//СтрокаДопустимыхЗначений = "";
			while(true/*ВыборкаЗаписей.СледующийПоЗначениюПоля("НомерСтроки")*/)
			{
				/*// по наборам ФизЛицо + КатегорияЗастрахованныхЛиц + Организация + ОтчетныйПериод
*/
				if(true/*Не ЗначениеЗаполнено(ВыборкаЗаписей.ОбособленноеПодразделение)*/)
				{
					/*// записей о стаже нет
*/
				}
				//ФизЛицо = ВыборкаЗаписей.ФизЛицо;
				//ОбособленноеПодразделение = ВыборкаЗаписей.ОбособленноеПодразделение;
				//НачалоПериода = ВыборкаЗаписей.ОтчетныйПериод;
				//КонецПериода = ОкончаниеОтчетногоПериодаПерсучета(НачалоПериода);
				//ТекущаяОсновнаяЗапись = Новый Структура("ФизЛицо, ОбособленноеПодразделение, Год, ДатаНачалаПериода, ДатаОкончанияПериода, ОсобыеУсловияТруда, ОснованиеВыслугиЛет, ТерриториальныеУсловия, ОснованиеИсчисляемогоСтажа, ОснованиеВыслугиЛетКод, НомерОсновнойЗаписи, НомерДополнительнойЗаписи");
				/*//Список значений группы реквизитов территориальные условия одной основной записи
*/
				//СписокТерриториальныеУсловияЗаписи = Новый СписокЗначений;
				/*//Список значений кодов условий труда одной основной записи
*/
				//СписокУсловияТрудаЗаписи = Новый СписокЗначений;
				/*//Список значений кодов выслуги лет основной записи
*/
				//СписокВыслугаЛетЗаписи = Новый СписокЗначений;
				//ПредыдущийНомерОсновнойЗаписи = 0;
				//ПредыдущийНомерДополнительнойЗаписи = 0;
				while(true/*ВыборкаЗаписей.Следующий()*/)
				{
					//Запись = ВыборкаЗаписей;
					/*//Организация, физлицо и год должны быть заполнены обязательно
*/
					if(true/*Запись.ОбособленноеПодразделение.Пустая()*/)
					{
						//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указана организация (обособленное подразделение)!");
					}
					if(true/*Запись.ФизЛицо.Пустая()*/)
					{
						//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Не указано физическое лицо!");
					}
					/*// ПРОВЕРКА КОРРЕКТНОГО ЗАПОЛНЕНИЯ ДАТ НАЧАЛА И ОКОНЧАНИЯ ПЕРИОДА
*/
					/*//По умолчанию считаем, что запись основная
*/
					//ЭтоОсновнаяЗапись = Истина;
					/*//Проверим, возможно ли появление в текущей позиции дополнительной записи о стаже
*/
					//ДополнительнаяЗаписьВозможна = ПредыдущийНомерОсновнойЗаписи <> 0;
					/*//Проверка заполненния реквзитов "ДатаНачалаПериода" и "ДатаОкончанияПериода" 
*/
					if(true/*Не ЗначениеЗаполнено(Запись.ДатаНачалаПериода) и Не ЗначениеЗаполнено(Запись.ДатаОкончанияПериода)*/)
					{
						if(true/*ДополнительнаяЗаписьВозможна*/)
						{
							//ЭтоОсновнаяЗапись = Ложь;
						}
					}
					/*//Проверка только для основной записи о стаже
*/
					if(true/*ЭтоОсновнаяЗапись*/)
					{
						/*//Проверка на хронологический порядок записей
*/
						if(true/*ТекущаяОсновнаяЗапись.ДатаОкончанияПериода <> Неопределено*/)
						{
							if(true/*Запись.ДатаНачалаПериода <= ТекущаяОсновнаяЗапись.ДатаОкончанияПериода*/)
							{
								//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Дата начала периода должна быть больше даты окончания предыдущего периода!");
							}
						}
						/*//Переустановка текущей основной записи
*/
						//ТекущаяОсновнаяЗапись.ФизЛицо = ФизЛицо;
						//ТекущаяОсновнаяЗапись.Год = Запись.Год;
						//ТекущаяОсновнаяЗапись.ОбособленноеПодразделение = ОбособленноеПодразделение;
						//ТекущаяОсновнаяЗапись.ДатаНачалаПериода = Запись.ДатаНачалаПериода;
						//ТекущаяОсновнаяЗапись.ДатаОкончанияПериода = Запись.ДатаОкончанияПериода;
						//ТекущаяОсновнаяЗапись.ОсобыеУсловияТруда = Запись.ОсобыеУсловияТруда;
						//ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛет = Запись.ОснованиеВыслугиЛет;
						//ТекущаяОсновнаяЗапись.ОснованиеВыслугиЛетКод = Запись.ОснованиеВыслугиЛетКод;
						//ТекущаяОсновнаяЗапись.ТерриториальныеУсловия = Запись.ТерриториальныеУсловия;
						//ТекущаяОсновнаяЗапись.ОснованиеИсчисляемогоСтажа = Запись.ОснованиеИсчисляемогоСтажа;
						//ТекущаяОсновнаяЗапись.НомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
						//ТекущаяОсновнаяЗапись.НомерДополнительнойЗаписи = 0;
						//СписокТерриториальныеУсловияЗаписи.Очистить();
						//СписокУсловияТрудаЗаписи.Очистить();
						//СписокВыслугаЛетЗаписи.Очистить();
					}
					/*// ПРОВЕРКА ПРАВИЛЬНОСТИ НУМЕРАЦИИ ЗАПИСЕЙ
*/
					/*//Проверка нумерации основных и дополнительных записей
*/
					if(true/*ЭтоОсновнаяЗапись*/)
					{
						//ОжидаемыйНомерОсновнойЗаписи = ПредыдущийНомерОсновнойЗаписи +1;
						if(true/*(Запись.НомерОсновнойЗаписи <> ОжидаемыйНомерОсновнойЗаписи)*/)
						{
							//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Неверный номер основной записи. Ожидается номер: "+ОжидаемыйНомерОсновнойЗаписи+"!");
							//;;
						}
					}
					/*//  ОПРЕДЕЛИМ, ЗАДАНЫ ЛИ РЕКВИЗИТЫ ОТДЕЛЬНЫХ ГРУПП
*/
					/*//Признаки заполнения группы реквизитов "ТерриториальныеУсловия"
*/
					//УказаныТерриториальныеУсловия = ЗначениеЗаполнено(Запись.ТерриториальныеУсловияКод);
					//УказанаСтавкаТерриториальныхУсловий = ЗначениеЗаполнено(Запись.ТерриториальныеУсловияСтавка);
					/*//Признаки заполнения реквизитов группы "Особые условия труда"
*/
					//УказанКодПозицииСписка = ЗначениеЗаполнено(Запись.КодПозицииСпискаКод);
					//УказаныОсобыеУсловияТруда = ЗначениеЗаполнено(Запись.ОсобыеУсловияТрудаКод);
					//ЗаданаГруппаУсловияТруда = УказаныОсобыеУсловияТруда;
					/*//Признаки заполнения реквизитов группы "Исчисляемый стаж"
*/
					//УказаноОснованиеИсчисляемогоСтажа = ЗначениеЗаполнено(Запись.ОснованиеИсчисляемогоСтажаКод);
					//УказанТретийПараметрИсчисляемогоСтажа = ЗначениеЗаполнено(Запись.ТретийПараметрИсчисляемогоСтажа);
					//ЗаданаГруппаИсчисляемыйСтаж = УказаноОснованиеИсчисляемогоСтажа ИЛИ УказанТретийПараметрИсчисляемогоСтажа;
					/*//Признаки заполнения реквизитов группы "ФАКТИЧЕСКИ-ОТРАБОТАННОЕ ВРЕМЯ"
*/
					//УказанПараметрИсчисляемогоСтажа1 = НЕ (Запись.ПервыйПараметрИсчисляемогоСтажа = 0);
					//УказанПараметрИсчисляемогоСтажа2 = НЕ (Запись.ВторойПараметрИсчисляемогоСтажа = 0);
					//ЗаданаГруппаФОВ = УказанПараметрИсчисляемогоСтажа1 ИЛИ УказанПараметрИсчисляемогоСтажа2;
					/*//Признаки заполнения реквизитов группы "ВыслугаЛет"
*/
					//УказаноОснованиеВыслугиЛет = ЗначениеЗаполнено(Запись.ОснованиеВыслугиЛетКод);
					//ЗаданаГруппаВыслугаЛет = УказаноОснованиеВыслугиЛет;
					/*//  ПРОВЕРКА НА ДОПУСТИМЫЕ СОЧЕТАНИЯ МЕЖДУ ГРУППАМИ СТАЖА ОСНОВНОЙ И ДОПОЛНИТЕЛЬНОЙ ЗАПИСЕЙ 
*/
					if(true/*НЕ ЭтоОсновнаяЗапись*/)
					{
						//СЗВ4_ВыполнитьПроверкуДополнительнойЗаписиСтажа(Запись, ТекущаяОсновнаяЗапись, ТаблицаПлохихЗаписей);
					}
					/*// ПРОВЕРКА ОСНОВНЫХ И ДОПОЛНИТЕЛЬНЫХ ЗАПИСЕЙ НА ДУБЛИ ЗНАЧЕНИЙ РЕКВИЗИТОВ
*/
					if(true/*УказаныТерриториальныеУсловия*/)
					{
						//ПредставлениеЗначения = ""+ СОКРЛП(Запись.ТерриториальныеУсловияКод);
						if(true/*СписокТерриториальныеУсловияЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено*/)
						{
							//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанные в дополнительной записи территориальные условия "+ПредставлениеЗначения+" не должны повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						}
					}
					if(true/*УказаныОсобыеУсловияТруда*/)
					{
						//ПредставлениеЗначения = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						if(true/*СписокУсловияТрудаЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено*/)
						{
							//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код условий труда "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						}
					}
					if(true/*УказаноОснованиеВыслугиЛет*/)
					{
						//ПредставлениеЗначения = СОКРЛП(Запись.ОснованиеВыслугиЛетКод);
						if(true/*СписокВыслугаЛетЗаписи.НайтиПоЗначению(ПредставлениеЗначения) <> Неопределено*/)
						{
							//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей,ТекущаяОсновнаяЗапись,"Указанный в дополнительной записи код выслуги лет "+ ПредставлениеЗначения + " не должен повторяться в рамках одной основной записи!", ТекущаяОсновнаяЗапись);
						}
					}
					/*//  ПРОВЕРКА ЗНАЧЕНИЙ РЕКВИЗИТОВ ГРУППЫ "Особые условия труда"
*/
					//КПС = СокрЛП(Запись.КодПозицииСпискаКод);
					/*//Определим, к какому списку принадлежит код позиции
*/
					//НазваниеСписка ="";
					if(true/*УказанКодПозицииСписка*/)
					{
						if(true/*НЕ УказаныОсобыеУсловияТруда*/)
						{
							//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Код позиции списка не может указываться без указания кода особых условий труда!", ТекущаяОсновнаяЗапись);
						}
						//ДлинаКПС = СтрДлина(КПС);
						if(true/*(ДлинаКПС=8)или(ДлинаКПС=14)*/)
						{
							//Первые2СимволаКПС = Лев(КПС,2);
							if(true/*(Первые2СимволаКПС = "10")или(Первые2СимволаКПС = "11")или(Первые2СимволаКПС = "12")*/)
							{
								//НазваниеСписка = "Список№1";
							}
						}
					}
					/*//УказанКодПозицииСписка	 
*/
					if(true/*УказаныОсобыеУсловияТруда*/)
					{
						/*//Проверки на возможные коды списков для конкретных условий труда
*/
						//КодОсобыхУсловийТруда = СОКРЛП(Запись.ОсобыеУсловияТрудаКод);
						//Первые8СимволовКПС = ВРЕГ(Лев(КПС,8));
						//НачалоСообщения = "Для особых условий труда с кодом " + КодОсобыхУсловийТруда;
						if(true/*Запись.ОсобыеУсловияТруда = Справочники.ОсобыеУсловияТруда.Ст27_1*/)
						{
							if(true/*(НазваниеСписка <> "Список№1")*/)
							{
								//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись, НачалоСообщения + " должен быть указан код позиции Списка №1!", ТекущаяОсновнаяЗапись);
							}
						}
					}
					/*//УказаныОсобыеУсловияТруда	 
*/
					/*//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Выслуга лет"
*/
					//УказанПараметр1 = НЕ (Запись.ПервыйПараметрВыслугиЛет = 0);
					//УказанПараметр2 = НЕ (Запись.ВторойПараметрВыслугиЛет = 0);
					//УказанПараметр3 = НЕ (Запись.ТретийПараметрВыслугиЛет = 0);
					//ПараметрыУказаны = (УказанПараметр1) ИЛИ (УказанПараметр2) ИЛИ (УказанПараметр3);
					if(true/*УказаноОснованиеВыслугиЛет*/)
					{
						//КодОснования = СокрЛП(Запись.ОснованиеВыслугиЛетКод);
						//НачалоСообщения = "Для основания выслуги лет " + КодОснования;
						//УказанТолькоТретийПараметр = (НЕ УказанПараметр1) И (НЕ УказанПараметр2) И (УказанПараметр3);
						/*//Медицинские работники
*/
						if(true/*(Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМ) 
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГД)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_СМХР)
					ИЛИ (Запись.ОснованиеВыслугиЛет = Справочники.ОснованияВыслугиЛет.Ст28_ГДХР)*/)
						{
							if(true/*НЕ ((Запись.ТретийПараметрВыслугиЛет > 0) И (Запись.ТретийПараметрВыслугиЛет <= 1))*/)
							{
								//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,НачалоСообщения + " третий параметр должен содержать долю ставки (число от 0.01 до 1)!", ТекущаяОсновнаяЗапись);
							}
							/*//Педагогические работники	
*/
						}
					}
					/*//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "Исчисляемый стаж"  (Основание + Третий параметр)
*/
					if(true/*УказанТретийПараметрИсчисляемогоСтажа*/)
					{
						if(true/*ДопустимыеЗначенияТретьегоПараметра.Получить(Запись.ТретийПараметрИсчисляемогоСтажа) = Неопределено*/)
						{
							//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,"Третий параметр исчисляемого стажа должен содержать одно из значений: " + СтрокаДопустимыхЗначений + "!", ТекущаяОсновнаяЗапись);
						}
					}
					/*//  ПРОВЕРКА ПРАВИЛЬНОСТИ ЗАПОЛНЕНИЯ РЕКВИЗИТОВ ГРУППЫ "ФАКТИЧЕСКИ ОТРАБОТАННОЕ ВРЕМЯ" (ПАРАМЕТРЫ 1,2 ИСЧИСЛЯЕМОГО СТАЖА)   
*/
					if(true/*ЗаданаГруппаФОВ*/)
					{
						if(true/*Не УказаныОсобыеУсловияТруда И Не УказаноОснованиеИсчисляемогоСтажа И Не УказаныТерриториальныеУсловия*/)
						{
							/*СтрОшибка = " Параметры фактически отработанного времени должны указываться только при заполнении других групп реквизитов"
					+(Символы.ПС + " (Территориальные условия, Условия труда, Исчисляемый стаж: основание)!");*/
							//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
						}
						if(true/*Запись.ОснованиеИсчисляемогоСтажа	<>	Справочники.ОснованияИсчисляемогоТрудовогоСтажа.ВОДОЛАЗ*/)
						{
							if(true/*Запись.ПервыйПараметрИсчисляемогоСтажа > 11*/)
							{
								//СтрОшибка = "Первый параметр исчисляемого стажа (Месяцы) не должен быть больше 11!";
								//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							}
							if(true/*Запись.ВторойПараметрИсчисляемогоСтажа > 30*/)
							{
								//СтрОшибка = "Второй параметр исчисляемого стажа (Дни) не должен быть больше 30!";
								//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							}
							//Лет = 0;
							//Месяцев = 0;
							//Дней = 0;
							//ПолучитьСтажЗаПериод(ТекущаяОсновнаяЗапись.ДатаОкончанияПериода,	ТекущаяОсновнаяЗапись.ДатаНачалаПериода, Лет,	Месяцев, Дней);
							//ПолучитьПриведенныйСтаж(Лет,Месяцев,Дней);
							//КалендарноеВремя = Лет*12*30+Месяцев*30+Дней;
							//ФОВДляСравнения = Запись.ПервыйПараметрИсчисляемогоСтажа *30 + Запись.ВторойПараметрИсчисляемогоСтажа;
							if(true/*(ФОВДляСравнения > КалендарноеВремя)*/)
							{
								//СтрОшибка = "Указанное фактически отработанное время превышает календарное время!";
								//СЗВ4_ДобавитьЗаписьСтажаВТаблицуПлохих(ТаблицаПлохихЗаписей, Запись,СтрОшибка, ТекущаяОсновнаяЗапись);
							}
						}
					}
					/*//  ПОДГОТОВКА К СЛЕДУЮЩЕЙ ИТЕРАЦИИ  
*/
					/*//Запомним для следующей итерации
*/
					//ПредыдущийНомерОсновнойЗаписи = Запись.НомерОсновнойЗаписи;
					//ПредыдущийНомерДополнительнойЗаписи = Запись.НомерДополнительнойЗаписи;
				}
				/*//Цикл по записям стажа текущего физлица за год
*/
			}
			/*;
	
	СЗВ4_ВыполнитьПроверкуНаДопустимыеСочетанияМеждуГруппамиСтажа(ИнициаторВызова, ТаблицаФизлиц, ТаблицаПлохихЗаписей);*/
			if(true/*ТаблицаПлохихЗаписей.Количество() > 0*/)
			{
				/*// Вывод ошибок
*/
				//ВывестиОшибкиПоТаблицеПлохихЗаписей(ТаблицаПлохихЗаписей, "При проверке набора записей о стаже", ВыводитьСообщенияВОбработчикСообщений, СообщенияРазделПроверки);
			}
			return null;
		}

		public void ФормированиеСведенийОСтажеC2010(/*ДатаНачалаПериодаЗаполнения, Организация, СписокФизЛиц = Неопределено, ДатаОкончанияПериодаЗаполнения = Неопределено*/)
		{
			//ЗаполнятьСтаж = НастройкаПравДоступаПереопределяемый.ДоступнаРольКадровикаРегл();
			if(true/*Не ЗаполнятьСтаж*/)
			{
			}
			if(true/*ДатаОкончанияПериодаЗаполнения = Неопределено*/)
			{
				//ДатаОкончанияПериодаЗаполнения = ОкончаниеОтчетногоПериодаПерсучета(ДатаНачалаПериодаЗаполнения);
			}
			//ТаблицаСтажа = СЗВ6_ПолучитьДанныеДляЗаполненияСтажа(Организация, ДатаНачалаПериодаЗаполнения, ДатаОкончанияПериодаЗаполнения, СписокФизЛиц);
			//ТаблицаИзмерений = ТаблицаСтажа.Скопировать(,"ФизЛицо,КатегорияЗастрахованныхЛиц");
			//ТаблицаИзмерений.Свернуть("ФизЛицо,КатегорияЗастрахованныхЛиц");
			//ТаблицаФизлиц = ТаблицаИзмерений.Скопировать(,"ФизЛицо");
			//ТаблицаФизлиц.Свернуть("ФизЛицо");
			//НаборЗаписейОСтаже = РегистрыСведений.ЗаписиОСтажеДляСЗВ4.СоздатьНаборЗаписей();
			//НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Значение = Организация;
			//НаборЗаписейОСтаже.Отбор.ОбособленноеПодразделение.Использование = Истина;
			//НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Значение = ДатаНачалаПериодаЗаполнения;
			//НаборЗаписейОСтаже.Отбор.ОтчетныйПериод.Использование = Истина;
			//НаборЗаписейОСтаже.Отбор.ФизЛицо.Использование = Истина;
			//СтруктураПоиска = Новый Структура("ФизЛицо, КатегорияЗастрахованныхЛиц");
			/*/////////////////////////////////////////////////////////////////////////////////////
*/
			/*// ОЧИСТКА СТАРЫХ ЗАПИСЕЙ О СТАЖЕ, ЗАПИСЕЙ О ВЗНОСАХ И ДОБАВЛЕНИЕ НОВЫХ ЗАПИСЕЙ ДОЛЖНО ПРОИСХОДИТЬ В РАМКАХ ОДНОЙ ТРАНЗАКЦИИ
*/
			//НачатьТранзакцию();
			/*// очистим то, что было
*/
			//НаборЗаписейОСтаже.Отбор.КатегорияЗастрахованныхЛиц.Использование = Истина;
			/*// Загрузим полученные данные в наборы записей 
*/
			//ЗафиксироватьТранзакцию();
		}
		// ФормированиеСведенийОСтажеC2010()

		public object МассивКатегорийЗЛИностранцев(/**/)
		{
			/*Экспорт
	МассивКатегорий = Новый Массив;*/
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖИЖ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖНР);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖСХ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖЕН);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖМН);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖОИ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖХО);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖТЗ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖИТ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖСИ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖЭД);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖЦС);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖСБ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВЖЭС);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПИЖ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПНР);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПСХ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПЕН);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПМН);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПОИ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПХО);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПТЗ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПИТ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПСИ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПЭД);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПЦС);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПСБ);
			//МассивКатегорий.Добавить(Перечисления.КатегорииЗастрахованныхЛицПФР.ВПЭС);
			return null;
		}

		public object ТарифыПоКатегориям(/*ДатаАктуальности*/)
		{
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			//ПоместитьВМенеджерСоответствиеТарифаКатегории(Запрос.МенеджерВременныхТаблиц);
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТарифСтраховыхВзносов.ВидТарифа,
	|	ТарифСтраховыхВзносов.ПФР,
	|	ТарифСтраховыхВзносов.ПФРНакопительная
	|ПОМЕСТИТЬ ВТТарифы
	|ИЗ
	|	&ТаблицаТарифов КАК ТарифСтраховыхВзносов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоответствиеТарифовКатегориям.КатегорияЗастрахованныхЛиц,
	|	МАКСИМУМ(Тарифы.ПФР) - МАКСИМУМ(Тарифы.ПФРНакопительная) КАК ПФРСтраховая,
	|	МАКСИМУМ(Тарифы.ПФРНакопительная) КАК ПФРНакопительная
	|ИЗ
	|	ВТТарифы КАК Тарифы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоответствиеТарифаКатегории КАК СоответствиеТарифовКатегориям
	|		ПО Тарифы.ВидТарифа = СоответствиеТарифовКатегориям.ВидТарифаСтраховыхВзносов
	|			И (&ГодАктуальности МЕЖДУ СоответствиеТарифовКатегориям.ГодС И СоответствиеТарифовКатегориям.ГодПо)
	|ГДЕ
	|	СоответствиеТарифовКатегориям.КатегорияЗастрахованныхЛиц ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	СоответствиеТарифовКатегориям.КатегорияЗастрахованныхЛиц";*/
			//Запрос.УстановитьПараметр("ТаблицаТарифов", РасчетСтраховыхВзносов.ТекущиеТарифыСтраховыхВзносовПоВидамТарифа(ДатаАктуальности));
			//Запрос.УстановитьПараметр("ГодАктуальности", Год(ДатаАктуальности));
			//Выборка = Запрос.Выполнить().Выбрать();
			//ТарифыПоКатегориям = Новый Соответствие;
			while(true/*Выборка.Следующий()*/)
			{
				//ТарифыПоКатегориям.Вставить(Выборка.КатегорияЗастрахованныхЛиц, Новый Структура("ПФРСтраховая, ПФРНакопительная", Выборка.ПФРСтраховая, Выборка.ПФРНакопительная));
			}
			return null;
		}
	}
}
