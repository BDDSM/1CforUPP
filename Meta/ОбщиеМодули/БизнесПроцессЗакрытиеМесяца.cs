using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class БизнесПроцессЗакрытиеМесяца
	{
		//Функция получает типы регламентных документов, которые дожны быть созданы для переданой точки маршрута бизнес-процесса (регламентной операции)
		//	Если точка маршрута не передана, получаются типы документов для всех регламентных операций
		//Параметры: ТочкаМаршрута - ссылка на точку маршрута бизнес-процесса
		//Возвращаемое значение: Массив (если точка маршрута передана) либо Таблица значений (если точка маршрута не передана)

		public object ПолучитьСписокТиповДокументов(/*ТочкаМаршрута = Неопределено*/)
		{
			//Запрос = Новый Запрос;
			/*ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ДокументыРегламентныхОпераций.ТипДокумента,
	|	ДокументыРегламентныхОпераций.ТочкаМаршрута
	|ИЗ
	|	РегистрСведений.ДокументыРегламентныхОпераций КАК ДокументыРегламентныхОпераций
	|ГДЕ
	|	ДокументыРегламентныхОпераций.ТипДокумента <> """"";*/
			if(true/*ТочкаМаршрута <> Неопределено*/)
			{
				/*ТекстЗапроса = ТекстЗапроса + "
		|	И ДокументыРегламентныхОпераций.ТочкаМаршрута = &ТочкаМаршрута";*/
				//Запрос.УстановитьПараметр("ТочкаМаршрута", ТочкаМаршрута);
			}
			//Запрос.Текст = ТекстЗапроса;
			//Результат = Запрос.Выполнить().Выгрузить();
			if(true/*ТочкаМаршрута <> Неопределено*/)
			{
			}
			return null;
		}
		//Функция получает таблицу документов, созданных в рамках выполнения регламентной операции
		//Параметры: БизнесПроцесс	- процесс закрытия месяца,
		//	СписокТиповДокументов	- типы документов которые должны быть созданы в рамках регламентной операции
		//	ТочкаМаршрута 			- ссылка на точку маршрута бизнес-процесса
		//Возвращаемое значение - ТаблицаЗначений, содержащая документы и их ключевые реквизиты (признаки отражения в учетах, признак проведения и т.д.)

		public object ЗаполнитьТаблицуСуществующихДокументов(/*БизнесПроцесс, СписокТиповДокументов, ТочкаМаршрута*/)
		{
			//ТекстЗапроса = "";
			/*//Определяем, для какого бизнес-процесса была создана задача
*/
			//ГлавныйБизнесПроцесс = ОпределитьГлавныйБизнесПроцесс(БизнесПроцесс);
			//СтруктураПризнаковОтраженияВУчете = новый Структура("ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете",ГлавныйБизнесПроцесс.ОтражатьВУправленческомУчете,ГлавныйБизнесПроцесс.ОтражатьВБухгалтерскомУчете,ГлавныйБизнесПроцесс.ОтражатьВНалоговомУчете);
			if(true/*ПустаяСтрока(ТекстЗапроса)*/)
			{
			}
			//Запрос = Новый Запрос;
			//Запрос.Текст = ТекстЗапроса;
			//Запрос.УстановитьПараметр("ЗакрытиеМесяцаПериодРегистрации", 	ГлавныйБизнесПроцесс.ПериодРегистрации);
			//Запрос.УстановитьПараметр("ЗакрытиеМесяцаОрганизация", 			ГлавныйБизнесПроцесс.Организация);
			//Запрос.УстановитьПараметр("ПустаяОрганизация", 					Справочники.Организации.ПустаяСсылка());
			//Запрос.УстановитьПараметр("ПустойОтветственный", 				Справочники.Пользователи.ПустаяСсылка());
			//Результат = Запрос.Выполнить().Выгрузить();
			return null;
		}
		//Функция получает строку: дополнение к запросу с условием по периоду регистрации
		//Параметры:
		//		ЕстьРеквизитПериодРегистрации 	- булево, признак наличия реквизита "ПериодРегистрации"
		//		ПсевдонимТаблицы 				- строка, псеводним таблицы в запросе
		//		ИмяПараметраСравнения 			- строка, параметр запроса с которым происходит сравнение реквизита
		//		Периодичность 					- строка, периодичность к которой следует привести параметр сравнения и период регистрации
		//Возвращаемое значение - строка, дополнение к запросу содержащее текст условия по периоду регистрации документа

		public object СформироватьУсловиеПериодРегистрации(/*ЕстьРеквизитПериодРегистрации,ПсевдонимТаблицы,ИмяПараметраСравнения,Периодичность="Месяц"*/)
		{
			//ТекстУсловия = "";
			if(true/*ЕстьРеквизитПериодРегистрации*/)
			{
				//ТекстУсловия = ТекстУсловия + ПсевдонимТаблицы+".ПериодРегистрации";
			}
			//ТекстУсловия = "НАЧАЛОПЕРИОДА("+ТекстУсловия+", "+Периодичность+") = НАЧАЛОПЕРИОДА("+ИмяПараметраСравнения+", "+Периодичность+")";
			return null;
		}
		//Функция получает строку: дополнение к запросу с условием по организации
		//Параметры:
		//		ЕстьРеквизитОрганизация 	- булево, признак наличия реквизита "Организация"
		//		ПсевдонимТаблицы 			- строка, псеводним таблицы в запросе
		//		ИмяПараметраСравнения 		- строка, параметр запроса с которым происходит сравнение реквизита
		//		УчитыватьПустую 			- булево, признак того что условие должно включать проверку пустой организации
		//Возвращаемое значение - строка, дополнение к запросу содержащее текст условия по организации документа

		public object СформироватьУсловиеОрганизация(/*ЕстьРеквизитОрганизация,ПсевдонимТаблицы,ИмяПараметраСравнения,УчитыватьПустую*/)
		{
			if(true/*НЕ ЕстьРеквизитОрганизация*/)
			{
			}
			//РеквизитОрганизация = ПсевдонимТаблицы+".Организация";
			//ТекстУсловия = " И ("+РеквизитОрганизация+" = "+ИмяПараметраСравнения;
			if(true/*УчитыватьПустую*/)
			{
				//ТекстУсловия = ТекстУсловия + " ИЛИ "+РеквизитОрганизация+" = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))";
			}
			return null;
		}
		//Функция получает строку: дополнение к запросу с условием по признакам отражения в учете
		//Параметры:
		//		ЕстьРеквизитыОтраженияВУчетах 		- структура, содержит признаки наличия реквизитов отражения в учетах (УУ, БУ, НУ)
		//		ЗначенияПризнаковОтраженияВУчетах 	- структура, искомые признаки отражения в учетах, с которыми происходит сравнение
		//		ПсевдонимТаблицы 					- строка, псеводним таблицы в запросе
		//		ТочкаМаршрута 						- ссылка на точку маршрута бизнес-процесса
		//		ПериодРегистрации 					- период, за который выполняется бизнес-процесс
		//Возвращаемое значение - строка, дополнение к запросу содержащее текст условия по признакам отражения в учете документа

		public object СформироватьУсловиеОтражениеВУчете(/*ЕстьРеквизитыОтраженияВУчетах,ЗначенияПризнаковОтраженияВУчетах, ПсевдонимТаблицы, ТочкаМаршрута, ПериодРегистрации*/)
		{
			//ТекстЗапросаУсловие = "";
			//текЗначенияПризнаковОтраженияВУчетах = СкорректироватьОтражениеВУчете(ЗначенияПризнаковОтраженияВУчетах, ТочкаМаршрута, ПериодРегистрации);
			if(true/*ЕстьРеквизитыОтраженияВУчетах.УУ*/)
			{
				if(true/*текЗначенияПризнаковОтраженияВУчетах.ОтражатьВУправленческомУчете*/)
				{
					//ТекстЗапросаУсловие = ПсевдонимТаблицы + ".ОтражатьВУправленческомУчете";
				}
			}
			if(true/*ЕстьРеквизитыОтраженияВУчетах.БУ*/)
			{
				if(true/*текЗначенияПризнаковОтраженияВУчетах.ОтражатьВБухгалтерскомУчете*/)
				{
					//ТекстЗапросаУсловие = ТекстЗапросаУсловие + ?(ТекстЗапросаУсловие <> "", " ИЛИ ", "") + ПсевдонимТаблицы + ".ОтражатьВБухгалтерскомУчете";
				}
			}
			if(true/*ЕстьРеквизитыОтраженияВУчетах.НУ*/)
			{
				if(true/*текЗначенияПризнаковОтраженияВУчетах.ОтражатьВНалоговомУчете*/)
				{
					//ТекстЗапросаУсловие = ТекстЗапросаУсловие + ?(ТекстЗапросаУсловие <> "", " ИЛИ ", "") + ПсевдонимТаблицы + ".ОтражатьВНалоговомУчете";
				}
			}
			if(true/*ТекстЗапросаУсловие <> ""*/)
			{
			}
			return null;
		}
		// Функция формирует дополнительное условие к запросу для документов "Формирование книги продаж" и "Формирование книги покупок"
		// по использованию ставки НДС 0%
		//
		// Параметры
		// ПсевдонимТаблицы  - Строка, псевдоним основной таблицы запроса,
		//						в которую возвращаются ссылки на созданные ранее документ
		// ТочкаМаршрута  - ссылка на точку маршрута бизнес-процесса, для которой создана задача
		//
		// Возвращаемое значение:
		// Строка   - дополнение к тексту запроса с условием
		//

		public object СформироватьУсловиеФормированиеЗаписейКнигиПродажПокупокСтавка0(/*ПсевдонимТаблицы, ТочкаМаршрута*/)
		{
			//ТекстЗапросаУсловие = "";
			if(true/*ТочкаМаршрута.Имя = "ФормированиеЗаписейКнигиПокупок"*/)
			{
				//ТекстЗапросаУсловие = ПсевдонимТаблицы + ".ПредъявленНДСКВычету0 = ЛОЖЬ";
			}
			if(true/*ТекстЗапросаУсловие <> ""*/)
			{
			}
			return null;
		}
		//СформироватьУсловиеФормированиеЗаписейКнигиПродажПокупокСтавка0()
		//Функция корректирует значения признаков отражения в учете, применяемых для конкретной точки маршрута, с учетом специфики:
		//	1) Расширенная аналитика учета затрат - при расчете себестоимости по регл. учету не используется признак отражения в НУ
		//	2) В точке маршрута "Расчет себестоимости УУ" в документе не должны быть установлены признаки БУ и НУ
		//	3) В точке маршрута "Расчет себестоимости регл" в документе не дожен быть установлен признак УУ

		public object СкорректироватьОтражениеВУчете(/*ЗначенияПризнаковОтраженияВУчетах, ТочкаМаршрута, ПериодРегистрации*/)
		{
			//НовыеЗначенияПризнаковОтраженияВУчетах = Новый Структура;
			/*//копируем структуру, переданную в параметрах
*/
			if(true/*НЕ ЗначениеЗаполнено(ТочкаМаршрута)*/)
			{
			}
			//ИмяТочкиМаршрута = НРег(ТочкаМаршрута.Имя);
			if(true/*ИмяТочкиМаршрута = НРег("РассчитатьСебестоимость")*/)
			{
				/*//не проверяем признак НУ и БУ
*/
				//НовыеЗначенияПризнаковОтраженияВУчетах.Вставить("ОтражатьВБухгалтерскомУчете",	Ложь);
				//НовыеЗначенияПризнаковОтраженияВУчетах.Вставить("ОтражатьВНалоговомУчете",		Ложь);
			}
			return null;
		}
		//Функция возвращает массив наименований регламентных операций, недоступных при текущих настройках параметров учета
		//Вызывается из формы настройки закрытия месяца и из формы процедуры закрытия месяца
		//Параметры:
		//	ДатаАнализа (в зависимости от места вызова дата начала действия настройки / закрываемый период)
		//	Организация, для которой выполняется закрытие  месяца (заполняется только при вызове из формы процедуры закрытия месяца)
		//	ВариантНастройки - вариант настройки закрытия месяца (0 - общий, 1 - УСН Доходы, 2 - УСН доходы минус расходы)
		//	Данные отбираются
		//1) из макета "МакетНастроекПоУмолчанию" по значению колонки "Расширенная аналитика"
		//2) на основе анализа использования механизма отложенного проведения
		//3) индивидуальный код для случая УСН Доходы

		public object ЗаполнитьМассивНедоступныхРегламентныхОпераций(/*ДатаАнализа, Организация = Неопределено, ВариантНастройки = 0*/)
		{
			//МассивОпераций = Новый Массив;
			//Макет = Справочники.НастройкиЗакрытияМесяца.ПолучитьМакет("МакетНастроекПоУмолчанию");
			//ОбластьСписокНастроек = Макет.Области.Найти("Список");
			if(true/*ОбластьСписокНастроек <> Неопределено*/)
			{
				//ОбластьСписокНастроек = Макет.ПолучитьОбласть("Список");
			}
			//ИспользуетсяРА = Ложь;
			if(true/*глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") И
		глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= ДатаАнализа*/)
			{
				//ИспользуетсяРА = Истина;
			}
			//флИспользуетсяОтложенноеПроведение = Ложь;
			if(true/*Организация = Неопределено*/)
			{
				/*ЗапросОрганизации = новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Ссылка 
		|ИЗ Справочник.Организации
		|");*/
				//Выборка = ЗапросОрганизации.Выполнить().Выбрать();
				while(true/*Выборка.Следующий()*/)
				{
					//ДатаНачалаДействияОтложенногоПроведения = ОтложенноеПроведениеДокументов.ПолучитьДатуНачалаОтложенногоПроведения(Выборка.Ссылка);
					/*//Если организация не указана - вызов происходит из формы настройки. В этом случае параметр ДатаАнализа не имеет смысла сравнивать
*/
					/*//	с датой начала действия отложенного проведения
*/
					//флИспользуетсяОтложенноеПроведение = ЗначениеЗаполнено(ДатаНачалаДействияОтложенногоПроведения);
					if(true/*флИспользуетсяОтложенноеПроведение*/)
					{
						//Прервать;
					}
				}
				//;;
			}
			if(true/*НЕ флИспользуетсяОтложенноеПроведение*/)
			{
				//МассивОпераций.Добавить(НРег("ВыполнитьДопроведение"));
			}
			/*//Режим "УСН Доходы"
*/
			if(true/*ВариантНастройки = 1*/)
			{
				//МассивОпераций.Добавить(НРег("РассчитатьНДС"));
				//МассивОпераций.Добавить(НРег("РассчитатьНалогНаПрибыль"));
				//МассивОпераций.Добавить(НРег("ВыполнитьРегламентныеОперацииПоНУ"));
			}
			return null;
		}
		//Процедура обновляет карту маршрута: устанавливает цвет фона, выделяет отключенные и недоступные регл операции, выделяет регл операции назначенные текущему пользователю
		//Параметры:
		//	КартаМаршрута 							- карта маршрута бизнес-процесса
		//	РегламентныеОперации 					- табличная часть РегламентныеОперации справочника НастройкиЗакрытияМесяца или бизнес-процесса ЗакрытиеМесяца
		//	МассивНедоступныхРегламентныхОпераций 	- массив регламентных операций, недоступных для выполнения
		//	ГруппыТекущегоПользователя 				- массив из ссылок на справочник ГруппыПользователей, группы в которые входит текущий пользователь
		//	ТекущийПользователь 					- ссылка на справочник Пользователи (текущий пользователь)

		public void ОбновитьКартуМаршрута(/*КартаМаршрута, РегламентныеОперации, МассивНедоступныхРегламентныхОпераций, ГруппыТекущегоПользователя, ТекущийПользователь*/)
		{
			//ЦветИсключаемогоДействия 		= Новый Цвет(200, 200, 200);
			/*//серый
*/
			//ЦветТекстаНедоступнойОперации 	= Новый Цвет(51,51,51);
			/*//черный цвет
*/
			//ЖирнаяЛиния = Новый Линия(ТипСоединительнойЛинии.Сплошная,3);
		}
		//Функция объединяет точки маршрута переданных бизнес-процессов в один массив
		//	масОбрабатываемыеБизнесПроцессы - массив, содержащий идентификаторы обрабатываемых бизнес-процессов

		public object ПолучитьТочкиМаршрутаЗакрытияМесяцаИРасчетаНДС(/*масОбрабатываемыеБизнесПроцессы*/)
		{
			//ТочкиМаршрута = Новый Массив;
			return null;
		}
		//ПолучитьВсеТочкиМаршрута()
		//Процедура заполняет реквизиты создаваемых задач
		//Вызывается из обработчиков "ПриСозданииЗадач" бизнес-процессов ЗакрытиеМесяца и РасчетНДС
		//Параметры:
		//    БизнесПроцессСсылка 			- ссылка на бизнес-процесс
		//    ТочкаМаршрутаБизнесПроцесса 	- ссылка на точку маршрута, для которой создаются задачи
		//    ФормируемыеЗадачи 			- массив формируемых задач
		//	  Отказ 						- булево, признак отказа

		public void ПриСозданииЗадачБизнесПроцессов(/*БизнесПроцессСсылка, ТочкаМаршрутаБизнесПроцесса, ФормируемыеЗадачи, Отказ*/)
		{
			//ТочкаРО 			= ФормируемыеЗадачи[0].ТочкаМаршрута;
			if(true/*ТочкаРО.Вид	<> ВидТочкиМаршрутаБизнесПроцесса.Действие*/)
			{
			}
			/*//Если применяется бизнес-процесс "УСН", при старте основного бизнес-процесса ЗакрытиеМесяца задачи создаваться не должны
*/
			if(true/*ИспользоватьБизнесПроцессУСН(БизнесПроцессСсылка) И 
		ТипЗнч(ТочкаМаршрутаБизнесПроцесса) = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.ЗакрытиеМесяца")*/)
			{
				//ФормируемыеЗадачи.Очистить();
			}
			/*ТекстЗапроса = "ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РегламентныеОперации.РегламентнаяОперация КАК РегламентнаяОперация,
	|	РегламентныеОперации.Ответственный,
	|	РегламентныеОперации.Использовать
	|ИЗ
	|	БизнесПроцесс.ЗакрытиеМесяца.РегламентныеОперации КАК РегламентныеОперации
	|ГДЕ РегламентныеОперации.Ссылка = &текСсылка И РегламентныеОперации.РегламентнаяОперация = &РеглОперация
	|";*/
			//ЗапросДействия 			= Новый Запрос;
			//ЗапросДействия.Текст 	= ТекстЗапроса;
			//ЗапросДействия.УстановитьПараметр("РеглОперация", ТочкаРО);
			//ЗапросДействия.УстановитьПараметр("ТекСсылка", БизнесПроцессСсылка);
			//Выборка = ЗапросДействия.Выполнить().Выбрать();
			if(true/*Выборка.Следующий()*/)
			{
				/*//В выборке будет только один элемент
*/
				if(true/*Выборка.Использовать*/)
				{
					//ОбъектЗадача = ФормируемыеЗадачи[0];
					//ТипОтветственного = ТипЗнч(Выборка.ответственный);
					//ОбъектЗадача.Пользователь 			= ?(ТипОтветственного=Тип("СправочникСсылка.Пользователи"),Выборка.Ответственный,Неопределено);
					//ОбъектЗадача.ГруппаПользователей 	= ?(ТипОтветственного=Тип("СправочникСсылка.ГруппыПользователей"),Выборка.Ответственный,Неопределено);
				}
			}
		}
		//Функция определяет главный бизнес-процесс
		//

		public object ОпределитьГлавныйБизнесПроцесс(/*БизнесПроцессСсылка*/)
		{
			if(true/*БизнесПроцессСсылка = Неопределено*/)
			{
			}
			/*//Определяем, для какого бизнес-процесса была создана задача
*/
			//ВедущаяЗадача = БизнесПроцессСсылка.ВедущаяЗадача;
			if(true/*ЗначениеЗаполнено(ВедущаяЗадача)*/)
			{
				//ГлавныйБизнесПроцесс = ВедущаяЗадача.БизнесПроцесс;
				if(true/*Не ЗначениеЗаполнено(ГлавныйБизнесПроцесс)*/)
				{
					//ГлавныйБизнесПроцесс = БизнесПроцессы.ЗакрытиеМесяца.ПустаяСсылка();
				}
			}
			return null;
		}
		//ОпределитьГлавныйБизнесПроцесс()
		//Функция определяет бизнес-процесс РасчетНДС, подчиненный бизнес-процессу ЗакрытиеМесяца
		//

		public object ПолучитьПодчиненныйБизнесПроцессРасчетНДС(/*БизнесПроцессСсылка*/)
		{
			if(true/*БизнесПроцессСсылка.Пустая()*/)
			{
			}
			//Запрос = Новый Запрос;
			/*Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РасчетНДС.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.РасчетНДС КАК РасчетНДС
	|ГДЕ
	|	РасчетНДС.ВедущаяЗадача.БизнесПроцесс = &ВедущийБизнесПроцесс";*/
			//Запрос.УстановитьПараметр("ВедущийБизнесПроцесс", БизнесПроцессСсылка);
			//Выборка = Запрос.Выполнить().Выбрать();
			if(true/*Выборка.Следующий()*/)
			{
			}
			return null;
		}
		//Функция определяет бизнес-процесс ЗакрытиеМесяцаУСНДоходыМинусРасходы, подчиненный бизнес-процессу ЗакрытиеМесяца
		//

		public object ПолучитьПодчиненныйБизнесПроцессЗакрытиеМесяцаУСН(/*БизнесПроцессСсылка*/)
		{
			if(true/*БизнесПроцессСсылка.Пустая()*/)
			{
			}
			//Запрос = Новый Запрос;
			/*Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ЗакрытиеМесяцаУСН.Ссылка КАК Ссылка
	|ИЗ
	|	БизнесПроцесс.ЗакрытиеМесяцаУСНДоходыМинусРасходы КАК ЗакрытиеМесяцаУСН
	|ГДЕ
	|	ЗакрытиеМесяцаУСН.ОсновнойБизнесПроцесс = &ВедущийБизнесПроцесс";*/
			//Запрос.УстановитьПараметр("ВедущийБизнесПроцесс", БизнесПроцессСсылка);
			//Выборка = Запрос.Выполнить().Выбрать();
			if(true/*Выборка.Следующий()*/)
			{
			}
			return null;
		}
		//Функция определяет, завершен ли бизнес-процесс
		//

		public object БизнесПроцессЗавершен(/*БизнесПроцессСсылка*/)
		{
			if(true/*БизнесПроцессСсылка.Пустая()*/)
			{
			}
			if(true/*ИспользоватьБизнесПроцессУСН(БизнесПроцессСсылка)*/)
			{
			}
			return null;
		}
		//Функция определяет, необходимо ли для переданного бизнес процесса или настройки закрытия месяца использовать схему
		//	бизнес процесса ЗакрытиеМесяцаУСНДоходыМинусРасходы

		public object ИспользоватьБизнесПроцессУСН(/*БизнесПроцесс = Неопределено, НастройкаЗакрытияМесяца = Неопределено*/)
		{
			if(true/*НастройкаЗакрытияМесяца <> Неопределено*/)
			{
			}
			return null;
		}
		//Функция определяет, с точностью до какой периодичности заполняется реквизит ПериодРегистрации в регламентном документе
		//

		public object ОпределитьПериодичностьДокумента(/*ТипДокумента*/)
		{
			if(true/*НРег(ТипДокумента) = НРег("НачислениеНДСПоСМРХозспособом") ИЛИ 
		НРег(ТипДокумента) = НРег("РегламентныеОперацииНалоговогоУчетаПоУСН")*/)
			{
			}
			return null;
		}
		//Функция определяет, является ли регл. операция недоступной
		//	Признак недоступности - вхождение в массив недоступных регламентных операций

		public object РегламентнаяОперацияНедоступна(/*РеглОперация, МассивНедоступныхРегламентныхОпераций*/)
		{
			return null;
		}
	}
}

