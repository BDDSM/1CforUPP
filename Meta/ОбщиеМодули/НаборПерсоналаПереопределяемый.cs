using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class НаборПерсоналаПереопределяемый
	{
		////////////////////////////////////////////////////////////////////////////////
		// Вспомогательные процедуры, функции

		public object ПолучитьНаправлениеУпорядочивания(/*ИмяПоля*/)
		{
			if(true/*ИмяПоля = "ДатаПолучения" ИЛИ ИмяПоля = "ДатаСобытия" ИЛИ ИмяПоля = "Состояние"*/)
			{
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Процедуры, функции объекта

		public object ПолучитьСписокЗаявок(/*ПолеДляУпорядочивания, ДоступныеУчетныеЗаписиДляЧтения*/)
		{
			/*Запрос = Новый Запрос;*/
			/*Запрос.УстановитьПараметр("ТекущаяДата",	НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату()));*/
			/*РежимНабораПерсонала = ПроцедурыУправленияПерсоналомДополнительный.ПолучитьРежимНабораПерсонала();*/
			if(true/*ПравоДоступа("Чтение", Метаданные.Документы.ЭлектронноеПисьмо)*/)
			{
				/*Запрос.УстановитьПараметр("СписокУчетныхЗаписей",	ДоступныеУчетныеЗаписиДляЧтения);*/
				/*Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ЗаявкиКандидатов.Наименование КАК Наименование,
		|	ЗаявкиКандидатов.Ссылка КАК Ссылка,
		|	ЗаявкиКандидатов.Важность КАК Важность,
		|	ЕСТЬNULL(НеразобранныеПисьма.КоличествоНеразобранныхПисем, 0) КАК Количество";*/
				if(true/*ПолеДляУпорядочивания = "ДатаСобытия"*/)
				{
					/*Запрос.Текст = Запрос.Текст + ",
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НАЧАЛОПЕРИОДА(События.ДатаСобытия, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -4)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -5)
		|		КОГДА ЕСТЬNULL(НАЧАЛОПЕРИОДА(События.ДатаСобытия, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -3)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -4)
		|		КОГДА ЕСТЬNULL(НАЧАЛОПЕРИОДА(События.ДатаСобытия, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -2)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -3)
		|		КОГДА ЕСТЬNULL(НАЧАЛОПЕРИОДА(События.ДатаСобытия, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) < ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, НЕДЕЛЯ, -2)
		|		КОГДА ЕСТЬNULL(НАЧАЛОПЕРИОДА(События.ДатаСобытия, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) > ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 1)
		|			ТОГДА ДОБАВИТЬКДАТЕ(&ТекущаяДата, ДЕНЬ, 1)
		|		ИНАЧЕ ЕСТЬNULL(НАЧАЛОПЕРИОДА(События.ДатаСобытия, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1))
		|	КОНЕЦ КАК УпорядочиваниеДляДатыСобытия,
		|	ЕСТЬNULL(НАЧАЛОПЕРИОДА(События.ДатаСобытия, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) КАК ДатаСобытия,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(НАЧАЛОПЕРИОДА(События.ДатаСобытия, ДЕНЬ), ДАТАВРЕМЯ(1, 1, 1)) = ДАТАВРЕМЯ(1, 1, 1)
		|			ТОГДА 1
		|		ИНАЧЕ 2
		|	КОНЕЦ КАК ДополнительноеУпорядочивание";*/
				}
				/*Запрос.Текст = Запрос.Текст + "
		|ИЗ
		|	Справочник.ЗаявкиКандидатов КАК ЗаявкиКандидатов
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЭлектронноеПисьмо.ЗаявкаКандидата КАК ЗаявкаКандидата,
		|			СУММА(1) КАК КоличествоНеразобранныхПисем
		|		ИЗ
		|			Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|		ГДЕ
		|			ЭлектронноеПисьмо.ЗаявкаКандидата <> ЗНАЧЕНИЕ(Справочник.ЗаявкиКандидатов.ПустаяСсылка)
		|			И ЭлектронноеПисьмо.НеРассмотрено
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЭлектронноеПисьмо.ЗаявкаКандидата) КАК НеразобранныеПисьма
		|		ПО ЗаявкиКандидатов.Ссылка = НеразобранныеПисьма.ЗаявкаКандидата";*/
				if(true/*(ПолеДляУпорядочивания = "Состояние") ИЛИ (ПолеДляУпорядочивания = "ДатаСобытия")*/)
				{
					/*Запрос.Текст = Запрос.Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ВложенныйЗапрос.ЗаявкаКандидата КАК ЗаявкаКандидата,
		|			МАКСИМУМ(ВложенныйЗапрос.Дата) КАК ДатаСобытия
		|		ИЗ
		|			(ВЫБРАТЬ
		|				ЭлектронноеПисьмо.ЗаявкаКандидата КАК ЗаявкаКандидата,
		|				МАКСИМУМ(ВЫБОР
		|						КОГДА НАЧАЛОПЕРИОДА(ЭлектронноеПисьмо.РассмотретьПосле, ДЕНЬ) <= &ТекущаяДата И ЭлектронноеПисьмо.РассмотретьПосле > ЭлектронноеПисьмо.ДатаТранспорта
		|							ТОГДА ЭлектронноеПисьмо.РассмотретьПосле
		|						ИНАЧЕ ЭлектронноеПисьмо.ДатаТранспорта
		|					КОНЕЦ) КАК Дата
		|			ИЗ
		|				Документ.ЭлектронноеПисьмо КАК ЭлектронноеПисьмо
		|			ГДЕ
		|				ЭлектронноеПисьмо.НеРассмотрено
		|				И (НЕ ЭлектронноеПисьмо.ПометкаУдаления)
		|				И ЭлектронноеПисьмо.ЗаявкаКандидата <> ЗНАЧЕНИЕ(Справочник.ЗаявкиКандидатов.ПустаяСсылка)
		|				И ЭлектронноеПисьмо.УчетнаяЗапись В (&СписокУчетныхЗаписей)
		|	
		|			СГРУППИРОВАТЬ ПО
		|				ЭлектронноеПисьмо.ЗаявкаКандидата
		|	
		|			ОБЪЕДИНИТЬ
		|	
		|			ВЫБРАТЬ
		|				Встречи.ЗаявкаКандидата,
		|				МАКСИМУМ(ВЫБОР
		|						КОГДА НАЧАЛОПЕРИОДА(Встречи.ДатаНачала, ДЕНЬ) > &ТекущаяДата
		|							ТОГДА Встречи.Дата
		|						ИНАЧЕ Встречи.ДатаНачала
		|					КОНЕЦ)
		|			ИЗ
		|				Документ.Встречи КАК Встречи
		|			ГДЕ
		|				Встречи.Проведен
		|				И Встречи.ЗаявкаКандидата <> ЗНАЧЕНИЕ(Справочник.ЗаявкиКандидатов.ПустаяСсылка)
		|	
		|			СГРУППИРОВАТЬ ПО
		|				Встречи.ЗаявкаКандидата
		|	
		|			ОБЪЕДИНИТЬ
		|	
		|			ВЫБРАТЬ
		|				ЗаявкиКандидатов.Ссылка,
		|				ЗаявкиКандидатов.ДатаОткрытия
		|			ИЗ
		|				Справочник.ЗаявкиКандидатов КАК ЗаявкиКандидатов
		|	
		|			ОБЪЕДИНИТЬ
		|	
		|			ВЫБРАТЬ
		|				ТекущаяРаботаПоЗаявкамКандидатов.ЗаявкаКандидата,
		|				МАКСИМУМ(ТекущаяРаботаПоЗаявкамКандидатов.Период)
		|			ИЗ
		|				РегистрСведений.ТекущаяРаботаПоЗаявкамКандидатов КАК ТекущаяРаботаПоЗаявкамКандидатов
		|		
		|			СГРУППИРОВАТЬ ПО
		|				ТекущаяРаботаПоЗаявкамКандидатов.ЗаявкаКандидата) КАК ВложенныйЗапрос
		|		
		|				СГРУППИРОВАТЬ ПО
		|					ВложенныйЗапрос.ЗаявкаКандидата) КАК События
		|		ПО ЗаявкиКандидатов.Ссылка = События.ЗаявкаКандидата";*/
				}
				/*Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	(НЕ ЗаявкиКандидатов.Закрыта)
		|	И (НЕ ЗаявкиКандидатов.ПометкаУдаления)
		|
		|УПОРЯДОЧИТЬ ПО";*/
				if(true/*ПолеДляУпорядочивания = "ДатаСобытия"*/)
				{
					/*Запрос.Текст = Запрос.Текст + "
		|	УпорядочиваниеДляДатыСобытия УБЫВ,
		|	ЗаявкиКандидатов.Важность,
		|	ДатаСобытия "+ПолучитьНаправлениеУпорядочивания(ПолеДляУпорядочивания) + ",
		|	ДополнительноеУпорядочивание,";*/
				}
				/*Запрос.Текст = Запрос.Текст + "
		|	Наименование
		|АВТОУПОРЯДОЧИВАНИЕ";*/
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Процедуры, функции для работы формы документа

		public object ПолучитьТекстЗапросаПоЗаявкам(/**/)
		{
			/*ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЗаявкиКандидатов.Состояние,
	|	ЗаявкиКандидатов.ИсточникИнформации,
	|	ЗаявкиКандидатов.Вакансия,
	|	ЗаявкиКандидатов.Подразделение,
	|	ЗаявкиКандидатов.Должность,
	|	ЗаявкиКандидатов.ГруппаЗаявок,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Состояние = ЗНАЧЕНИЕ(Справочник.СостоянияЗаявокКандидатов.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СостояниеНеЗаполнено,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.ИсточникИнформации = ЗНАЧЕНИЕ(Справочник.ИсточникиИнформации.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ИсточникИнформацииНеЗаполнен,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Вакансия = ЗНАЧЕНИЕ(Справочник.Вакансии.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ВакансияНеЗаполнена,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Подразделение = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЗаявкиКандидатов.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|				ИЛИ ЗаявкиКандидатов.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПодразделениеНеЗаполнено,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДолжностьНеЗаполнена,
	|	ВЫБОР
	|		КОГДА (ЗаявкиКандидатов.Подразделение = НЕОПРЕДЕЛЕНО
	|				ИЛИ ЗаявкиКандидатов.Подразделение = ЗНАЧЕНИЕ(Справочник.Подразделения.ПустаяСсылка)
	|				ИЛИ ЗаявкиКандидатов.Подразделение = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка))
	|				И ЗаявкиКандидатов.Должность = ЗНАЧЕНИЕ(Справочник.Должности.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РабочееМестоНеЗаполнено,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.ГруппаЗаявок = ЗНАЧЕНИЕ(Справочник.ГруппыЗаявокКандидатов.ПустаяСсылка)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ГруппаЗаявокНеЗаполнена,
	|	ЗаявкиКандидатов.ДатаОткрытия,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.ДатаОткрытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ДатаОткрытияНеУказана,
	|	ЗаявкиКандидатов.Комментарий,
	|	ВЫБОР
	|		КОГДА ЗаявкиКандидатов.Комментарий ПОДОБНО """"
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК КомментарийНеЗаполнен
	|ИЗ
	|	Справочник.ЗаявкиКандидатов КАК ЗаявкиКандидатов
	|ГДЕ
	|	ЗаявкиКандидатов.Ссылка = &ЗаявкаКандидата";*/
			return null;
		}

		public object ПолучитьНаименованиеСправочникаПодразделения(/**/)
		{
			/*РежимНабораПерсонала = ПроцедурыУправленияПерсоналомДополнительный.ПолучитьРежимНабораПерсонала();*/
			if(true/*РежимНабораПерсонала = Перечисления.ВидыОрганизационнойСтруктурыПредприятия.ПоСтруктуреЮридическихЛиц*/)
			{
				/*НаименованиеСправочника = "ПодразделенияОрганизаций";*/
			}
			return null;
		}

		public object ПолучитьНаименованиеСправочникаДолжности(/**/)
		{
			/*НаименованиеСправочника = "Должности";*/
			return null;
		}

		public void ПроверитьДополнительныеУсловияКомандыФормы(/*Команда, ЭлементыФормы, Значение, ЭтаФорма, ЭтотОбъект*/)
		{
			if(true/*Команда = "OpenMeeting"*/)
			{
				/*ДанныеСтроки = ЭлементыФормы.ТабличноеПолеЗаявкиКандидатов.ТекущиеДанные;*/
				if(true/*ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.Ссылка.Пустая()*/)
				{
				}
				if(true/*Не ПустаяСтрока(Значение)*/)
				{
					/*ВыбранныйДокумент	= XMLЗначение(Тип("ДокументСсылка.Встречи"), Значение);*/
					/*ВыбранныйДокумент.ПолучитьФорму(, ЭтаФорма, ЭтотОбъект).Открыть();*/
				}
			}
		}

		public void ПроверитьДополнительныеУсловияЗначенияГруппировки(/*ЗначениеГруппировки, Объект*/)
		{
			if(true/*ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.СостоянияЗаявокКандидатов")*/)
			{
				if(true/*Не ЗначениеГруппировки.Пустая() И ТипЗнч(Объект) = Тип("Форма")*/)
				{
					/*// Реквизит заполняем только, если в процедуру передана форма
*/
					/*// Иначе необходимо записывать состояние непосредственно в регистр
*/
					/*Строка = Объект.ТекущаяРабота.Добавить();*/
					/*Строка.Период		= ОбщегоНазначения.ПолучитьРабочуюДату();*/
					/*Строка.Состояние	= ЗначениеГруппировки;*/
					/*Объект.Состояние	= ЗначениеГруппировки;*/
				}
			}
		}

		public void ПроверитьДополнительныеУсловияИмяГруппировки(/*ИмяГруппировки*/)
		{
			if(true/*ТипЗнч(ИмяГруппировки) = Тип("СправочникСсылка.Подразделения") И ИмяГруппировки.Пустая()*/)
			{
				/*ИмяГруппировки = "Подразделение не назначено";*/
			}
		}

		public void ДополнитьМакет(/*Форма, Выборка, ТекстМакетаОписанияЗаявки, КандидатСсылка*/)
		{
			/*НаборПерсоналаДополнительный.ДополнитьМакетОписанияЗаявки(Форма, Выборка, ТекстМакетаОписанияЗаявки, КандидатСсылка);*/
			/*ВыборкаВстреч = НаборПерсоналаДополнительный.ПолучитьСписокВстречПоЗаявке(КандидатСсылка);*/
			if(true/*ВыборкаВстреч.Количество() > 0*/)
			{
				/*ЕстьЗапланированныеВстречи	= "inline";*/
				/*СписокЗапланированныхВстреч	= "";*/
				while(true/*ВыборкаВстреч.Следующий()*/)
				{
					if(true/*НачалоДня(ВыборкаВстреч.ДатаНачала) = НачалоДня(ВыборкаВстреч.ДатаОкончания)*/)
					{
						/*ПериодВстречи = " " + Формат(ВыборкаВстреч.ДатаНачала, "ДФ='d MMMM'") + " с " + Формат(ВыборкаВстреч.ДатаНачала, "ДФ=H:mm") + " до " + Формат(ВыборкаВстреч.ДатаОкончания, "ДФ=H:mm");*/
					}
					/*НаименованиеВстречи = ВыборкаВстреч.Комментарий + ПериодВстречи;*/
					/*ИдВстречи = Строка(ВыборкаВстреч.Ссылка.УникальныйИдентификатор());*/
					/*СписокЗапланированныхВстреч = СписокЗапланированныхВстреч + "<A id=Команда href=""V8:OpenMeeting"" target="""+ИдВстречи+""">" + НаименованиеВстречи + "</A>&#160;&#160;";*/
				}
				/*;;*/
			}
			/*ТекстМакетаОписанияЗаявки = ТекстМакетаОписанияЗаявки + "
	|			<P id=ЕстьЗапланированныеВстречи style=""DISPLAY:"+ЕстьЗапланированныеВстречи+""">С кандидатом запланированы встречи: </P>
	|			<P id=СписокЗапланированныхВстреч style=""DISPLAY:"+ЕстьЗапланированныеВстречи+""">"+СписокЗапланированныхВстреч+". </P>";*/
		}

		public object ЯвляетсяОбъектомДополнительногоТипа(/*Объект*/)
		{
			if(true/*ТипЗнч(Объект) = Тип("ДокументОбъект.Встречи")
		Или ТипЗнч(Объект) = Тип("ДокументСсылка.Встречи")*/)
			{
			}
			return null;
		}

		public object ОбновитьСписокЗаявокПоДополнительномуСобытию(/*ИмяСобытия, ПолеДляУпорядочиванияЗаявок*/)
		{
			if(true/*ИмяСобытия = "ЗаписанаВстреча"*/)
			{
				if(true/*ПолеДляУпорядочиванияЗаявок = "ДатаСобытия"*/)
				{
				}
			}
			return null;
		}

		public object ОбновитьОписаниеЗаявкиПоДополнительномуСобытию(/*ИмяСобытия*/)
		{
			if(true/*ИмяСобытия = "ЗаписанаВстреча"*/)
			{
			}
			return null;
		}

		public object ИзмененСоставГруппировкиПоДополнительномуУсловию(/*НужнаяСтрока, ОбъектПеретаскивания*/)
		{
			if(true/*ТипЗнч(НужнаяСтрока.ЗначениеГруппировки) = Тип("СправочникСсылка.СостоянияЗаявокКандидатов")*/)
			{
				/*НаборПерсоналаДополнительный.ИзменитьСостояниеЗаявкиКандидата(ОбъектПеретаскивания, НужнаяСтрока.ЗначениеГруппировки);*/
			}
			return null;
		}

		public object СтандартнаяОбработкаПоДополнительномуУсловию(/*Строка, ПолеДляУпорядочиванияЗаявок, Ссылка*/)
		{
			/*СтандартнаяОбработка =  Строка = Неопределено
						ИЛИ ПолеДляУпорядочиванияЗаявок = "ДатаСобытия"
						ИЛИ ПолеДляУпорядочиванияЗаявок = "Наименование";*/
			if(true/*Не СтандартнаяОбработка*/)
			{
				/*Запрос = Новый Запрос;*/
				/*Запрос.УстановитьПараметр("ЗаявкаКандидата",	Ссылка);*/
				/*Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА ЗаявкиКандидатов.Вакансия = ЗНАЧЕНИЕ(Справочник.Вакансии.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ВакансияЗаполнена,
		|	ВЫБОР
		|		КОГДА ЗаявкиКандидатов.Состояние = ЗНАЧЕНИЕ(Справочник.СостоянияЗаявокКандидатов.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СостояниеЗаполнено
		|ИЗ
		|	Справочник.ЗаявкиКандидатов КАК ЗаявкиКандидатов
		|ГДЕ
		|	ЗаявкиКандидатов.Ссылка = &ЗаявкаКандидата";*/
				/*Выборка = Запрос.Выполнить().Выбрать();*/
				/*Выборка.Следующий();*/
				if(true/*Строка.Родитель = Неопределено*/)
				{
					/*ЗначениеГруппировки = Строка.ЗначениеГруппировки;*/
				}
				/*СтандартнаяОбработка =  ((ПолеДляУпорядочиванияЗаявок = "Подразделение" ИЛИ ПолеДляУпорядочиванияЗаявок = "Должность") И Выборка.ВакансияЗаполнена)
							ИЛИ (ТипЗнч(ЗначениеГруппировки) = Тип("СправочникСсылка.СостоянияЗаявокКандидатов") И ЗначениеГруппировки.Пустая() И Выборка.СостояниеЗаполнено);*/
			}
			return null;
		}

		public void УстановитьДоступностьДополнительныхКнопок(/*КнопкиПодменю, КомандыЗаявкиДоступны, НеДоступнаГрупповаяОбработка, ДанныеСтроки*/)
		{
			if(true/*КнопкиПодменю.Найти("НазначитьВстречу") <> Неопределено*/)
			{
				/*КнопкиПодменю.НазначитьВстречу.Доступность = КомандыЗаявкиДоступны И НеДоступнаГрупповаяОбработка;*/
			}
			/*НаборПерсоналаДополнительный.УстановитьДоступностьДополнительныхКнопок(КнопкиПодменю, КомандыЗаявкиДоступны, НеДоступнаГрупповаяОбработка, ДанныеСтроки);*/
		}

		public void ВыполнитьДополнительныеДействия(/*Кнопка, ЭлементыФормы, ЭтаФорма, ЭтотОбъект, ВыделенныеСтроки*/)
		{
			if(true/*Кнопка.Имя = "НазначитьВстречу"*/)
			{
				/*НаборПерсоналаДополнительный.НазначитьВстречу(ЭлементыФормы, ЭтаФорма, ЭтотОбъект);*/
			}
			/*НаборПерсоналаДополнительный.ВыполнитьДополнительныеДействия(Кнопка, ЭлементыФормы, ЭтаФорма, ЭтотОбъект, ВыделенныеСтроки);*/
		}

		public void ДополнитьКонтекстныеМеню(/*ЭлементыФормы, ДополнительныеДействия*/)
		{
			/*// Кнопка НазначитьВстречу
*/
			/*ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов.Кнопки.ПодменюЗаявки.Кнопки.Вставить(3, "РазделительДляВстреч", ТипКнопкиКоманднойПанели.Разделитель);*/
			/*КнопкаНазначитьВстречу = ЭлементыФормы.КоманднаяПанельЗаявкиКандидатов.Кнопки.ПодменюЗаявки.Кнопки.Вставить(4, "НазначитьВстречу", ТипКнопкиКоманднойПанели.Действие, "Назначить встречу", ДополнительныеДействия);*/
			/*КнопкаНазначитьВстречу.Картинка = БиблиотекаКартинок.НазначитьСобеседование;*/
			/*// Кнопка СписокНамеченныхВстреч
*/
			/*ЭлементыФормы.ДействияФормы.Кнопки.ПодменюОтчеты.Кнопки.Вставить(1, "СписокНамеченныхВстречСКандидатами", ТипКнопкиКоманднойПанели.Действие, "Список намеченных встреч с кандидатами", ДополнительныеДействия);*/
			/*НаборПерсоналаДополнительный.ДополнитьКонтекстныеМеню(ЭлементыФормы, ДополнительныеДействия);*/
		}

		public void ДополнитьДокHTML(/*ДокHTML, ДанныеСтроки, Выборка, Форма*/)
		{
			/*НаборПерсоналаДополнительный.ОбновитьМакетОписанияЗаявки(ДокHTML, Выборка, Форма, ДанныеСтроки.Ссылка);*/
			/*ВыборкаВстреч = НаборПерсоналаДополнительный.ПолучитьСписокВстречПоЗаявке(ДанныеСтроки.Ссылка);*/
			if(true/*ВыборкаВстреч.Количество() > 0*/)
			{
				/*РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ЕстьЗапланированныеВстречи", Истина);*/
				/*РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СписокЗапланированныхВстреч", Истина);*/
				/*СписокЗапланированныхВстреч	= "";*/
				while(true/*ВыборкаВстреч.Следующий()*/)
				{
					if(true/*НачалоДня(ВыборкаВстреч.ДатаНачала) = НачалоДня(ВыборкаВстреч.ДатаОкончания)*/)
					{
						/*ПериодВстречи = " " + Формат(ВыборкаВстреч.ДатаНачала, "ДФ='d MMMM'") + " с " + Формат(ВыборкаВстреч.ДатаНачала, "ДФ=H:mm") + " до " + Формат(ВыборкаВстреч.ДатаОкончания, "ДФ=H:mm");*/
					}
					/*НаименованиеВстречи = ВыборкаВстреч.Комментарий + ПериодВстречи;*/
					/*ИдВстречи = Строка(ВыборкаВстреч.Ссылка.УникальныйИдентификатор());*/
					/*СписокЗапланированныхВстреч = СписокЗапланированныхВстреч + "<A id=Команда href=""V8:OpenMeeting"" target="""+ИдВстречи+""">" + НаименованиеВстречи + "</A>&#160;&#160;";*/
				}
				/*;;*/
			}
			/*ДокHTML.getElementById("СписокЗапланированныхВстреч").innerHTML	= СписокЗапланированныхВстреч;*/
		}

		public void ФормаПередОткрытиемДополнительно(/*Форма, ДополнительныеДействия = Неопределено*/)
		{
			/*НаборПерсоналаДополнительный.ФормаПередОткрытиемДополнительно(Форма, ДополнительныеДействия);*/
		}
		// ФормаПередОткрытиемДополнительно

		public void ФормаОбработкаОповещенияДополнительно(/*Форма, ИмяСобытия, Параметр, Источник*/)
		{
			/*НаборПерсоналаДополнительный.ФормаОбработкаОповещенияДополнительно(Форма, ИмяСобытия, Параметр, Источник);*/
		}
		// ФормаОбработкаОповещенияДополнительно

		public void СписокКандидатовПриПолученииДанныхДополнительно(/*Форма, Элемент, ОформленияСтрок*/)
		{
			/*НаборПерсоналаДополнительный.СписокКандидатовПриПолученииДанныхДополнительно(Форма, Элемент, ОформленияСтрок);*/
		}
		// СписокКандидатовПриПолученииДанныхДополнительно

		public void СписокКандидатовПриАктивизацииСтрокиДополнительно(/*Форма, Элемент*/)
		{
			/*НаборПерсоналаДополнительный.СписокКандидатовПриАктивизацииСтрокиДополнительно(Форма, Элемент);*/
		}
		// СписокКандидатовПриАктивизацииСтрокиДополнительно
	}
}

