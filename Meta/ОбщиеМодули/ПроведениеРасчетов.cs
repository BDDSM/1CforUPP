using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class ПроведениеРасчетов
	{

		public void ВписатьВРезультатЗарегистрированныеВУчетеДанныеНДФЛ(/*РезультатыРасчетов, ЗарегистрированныеВУчетеДанные, ИменаКолонок*/)
		{
		}

		public void ВписатьРесурсВРезультатыРасчетовНДФЛ(/*РезультатыРасчетов, МесяцНалоговогоПериода, Сумма, ИмяРесурса, РаспределяемаяСтрока, СтрокиРаспределения, КоэффициентыРаспределения, СтрокаКлючей = "ФизЛицо, МесяцНалоговогоПериода", ПоказательРаспределения = "Подразделение", ТочностьВеличины = 0*/)
		{
			if(true/*Сумма <> 0*/)
			{
				//РаспределениеРесурса = ОбщегоНазначенияЗК.РаспределитьПропорционально(Сумма,КоэффициентыРаспределения, ТочностьВеличины);
				if(true/*РаспределениеРесурса = Неопределено*/)
				{
					//НоваяСтрока = РезультатыРасчетов.Добавить();
					//НоваяСтрока[ИмяРесурса] = Сумма;
					//ЗаполнитьЗначенияСвойств(НоваяСтрока, РаспределяемаяСтрока, СтрокаКлючей);
					//НоваяСтрока.МесяцНалоговогоПериода = МесяцНалоговогоПериода;
				}
			}
		}

		public object ВыделитьКоэффициентыРаспределенияИзКоллекцииСтрок(/*КоллекцияСтрокРаспределения, ИмяКолонки*/)
		{
			//Коэффициенты = Новый Массив;
			return null;
		}
		// ВыделитьКоэффициентыОтраженияИзМассиваСтрок()
		////////////////////////////////////////////////////////////////////////////////
		// Алгоритмы расчета
		// Для указанного алгоритма расчета записи регистра расчетов дописывает
		//  в текст запроса используемые алгоритмом поля
		//
		// Параметры
		//  ИмяАлгоритма - строка - "имя" алгоритма
		//  КомментироватьРасчет - булево - обозначает режим,
		//                 в котором производится расчет
		//  ТекстЗапроса - строка - текст запроса, который
		//                 используется в дальнейшем при расчете записей регистра
		//  ПоляЗапроса - массив - содержит перечень полей

		public void ДописатьПоляАлгоритмов(/*ИмяАлгоритма, КомментироватьРасчет, ТекстЗапроса, ПоляЗапроса = Неопределено*/)
		{
			if(true/*ИмяАлгоритма = "ИсчисленныйНДФЛ"*/)
			{
				/*ТекстЗапроса = ТекстЗапроса + ", 
		|	ИсчисленныйНДФЛ.ИсчисленныйНалог Как ИсчисленныйНалог";*/
				if(true/*КомментироватьРасчет*/)
				{
					//ПоляЗапроса.Добавить("ИсчисленныйНалог");
				}
			}
			if(true/*ИмяАлгоритма = "РасчетнаяБазаУдержаний"*/)
			{
				/*// если присоединяем к базе
*/
				/*ТекстЗапроса = ТекстЗапроса + ",
		|	База.РезультатБаза КАК РезультатБаза";*/
				if(true/*КомментироватьРасчет*/)
				{
					//ПоляЗапроса.Добавить("РезультатБаза");
				}
			}
			if(true/*ИмяАлгоритма = "РазмерОграниченияПособия"*/)
			{
				/*// размер ограничения пособия по нетрудоспособности
*/
				/*ТекстЗапроса = ТекстЗапроса + ", 
		|	ЕСТЬNULL(РазмерММОТ.Размер, 0) КАК РазмерММОТ,
		|	ЕСТЬNULL(РазмерММОТНаДатуДатаНачалаСобытия.Размер, 0) КАК РазмерММОТНаДатуДатаНачалаСобытия,
		|	ЕСТЬNULL(РазмерОграниченияПособия2010.Размер, 0) КАК РазмерОбщегоОграничения2010,
		|	ЕСТЬNULL(РазмерОграниченияПособия.Размер, 0) КАК РазмерОбщегоОграничения,
		|	ЕСТЬNULL(РазмерОграниченияПособия.РазмерПоБеременности, 0) КАК РазмерПоБеременности";*/
				if(true/*КомментироватьРасчет*/)
				{
					//ПоляЗапроса.Добавить("РазмерММОТ");
					//ПоляЗапроса.Добавить("РазмерММОТНаДатуДатаНачалаСобытия");
					//ПоляЗапроса.Добавить("РазмерОбщегоОграничения2010");
					//ПоляЗапроса.Добавить("РазмерОбщегоОграничения");
					//ПоляЗапроса.Добавить("РазмерПоБеременности");
				}
			}
			if(true/*ИмяАлгоритма = "ВремяВКалендарныхДнях"*/)
			{
				/*ТекстЗапроса = ТекстЗапроса + ",
		|ВремяВКалендарныхДнях.КалендарныхДней КАК КалендарныхДней";*/
				if(true/*КомментироватьРасчет*/)
				{
					//ПоляЗапроса.Добавить("КалендарныхДней");
				}
			}
			if(true/*ИмяАлгоритма = "СдельныйЗаработок"*/)
			{
				/*// размер сдельного заработка
*/
				/*ТекстЗапроса = ТекстЗапроса + ", 
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ)
		|			ТОГДА NULL
		|		ИНАЧЕ ДанныеОСдельномЗаработке.СуммаЗаработка 
		|	КОНЕЦ КАК РазмерСдельногоЗаработка,
		|ЕСТЬNULL(ДанныеОСдельномЗаработке.ОшибкаВводаФактическойВыработки, ЛОЖЬ) КАК ОшибкаВводаФактическойВыработки";*/
				if(true/*КомментироватьРасчет*/)
				{
					//ПоляЗапроса.Добавить("РазмерСдельногоЗаработка");
					//ПоляЗапроса.Добавить("ОшибкаВводаФактическойВыработки");
				}
			}
			if(true/*ИмяАлгоритма = "ДоходыОблагаемыеСтраховымиВзносамиЕСН"*/)
			{
				/*ТекстЗапроса = ТекстЗапроса + ", 
		|ОблагаемыеЕСНДоходы.Результат КАК ОблагаемыйЕСНДоход";*/
				if(true/*КомментироватьРасчет*/)
				{
					//ПоляЗапроса.Добавить("ОблагаемыйЕСНДоход");
				}
			}
			if(true/*ИмяАлгоритма = "УдержаноПоДокументу"*/)
			{
				/*ТекстЗапроса = ТекстЗапроса + ",
		|	НакопленныеДанные.УжеНачисленоВТекущемПериоде,
		|	НакопленныеДанные.УжеНачисленоЗаВсюИсторию";*/
				if(true/*КомментироватьРасчет*/)
				{
					//ПоляЗапроса.Добавить("УжеНачисленоВТекущемПериоде");
					//ПоляЗапроса.Добавить("УжеНачисленоЗаВсюИсторию");
				}
			}
			if(true/*ИмяАлгоритма = "ПочтовыеПереводы"*/)
			{
				/*ТекстЗапроса = ТекстЗапроса + ", 
		|	ЕСТЬNULL(ПочтовыеПереводы.РазмерПочтовогоПеревода,0) КАК РазмерПочтовогоПеревода,
		|	ЕСТЬNULL(ПочтовыеПереводы.ПоТарифу, Ложь) КАК ПоТарифу,
		|	ЕСТЬNULL(ПочтовыеПереводы.Процент, 0) КАК Процент,
		|	ПочтовыеПереводы.Получатель КАК Получатель,
		|	ПочтовыеПереводы.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
		|	ЕСТЬNULL(ПочтовыеПереводы.СуммаАлиментов, 0) КАК СуммаАлиментов";*/
				if(true/*КомментироватьРасчет*/)
				{
					//ПоляЗапроса.Добавить("РазмерПочтовогоПеревода");
					//ПоляЗапроса.Добавить("ПоТарифу");
					//ПоляЗапроса.Добавить("Процент");
					//ПоляЗапроса.Добавить("Получатель");
					//ПоляЗапроса.Добавить("ПорядокИсчисленияИздержек");
					//ПоляЗапроса.Добавить("СуммаАлиментов");
				}
			}
			if(true/*ИмяАлгоритма = "АлиментыВПрожиточныхМинимумах"*/)
			{
				/*ТекстЗапроса = ТекстЗапроса + ", 
		|	ЕСТЬNULL(ПрожиточныеМинимумы.Размер,0) КАК ВеличинаПрожиточногоМинимума";*/
				if(true/*КомментироватьРасчет*/)
				{
					//ПоляЗапроса.Добавить("ВеличинаПрожиточногоМинимума");
				}
			}
			if(true/*ИмяАлгоритма = "СреднийЗаработокПособий"*/)
			{
				/*ТекстЗапроса = ТекстЗапроса + ", 
		|ЕСТЬNULL(ДанныеОСреднемЗаработке2011.ОграниченныйЗаработок,0) Как СреднийЗаработокПособий2011,
		|ЕСТЬNULL(ДанныеОСреднемЗаработке2011.ОтработаноДнейДляПособийПоМатеринству,730) Как ОтработаноДнейДляПособийПоМатеринству,
		|ЕСТЬNULL(ДанныеОСреднемЗаработке2011.Заработок,0) Как СреднийЗаработокПособий2011БезОграничений,
		|ВЫБОР
		|	КОГДА Основной.Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
		|		ТОГДА 0
		|	ИНАЧЕ ЕСТЬNULL(ПродолжительностьРабочегоВремени.Доля, 1)
		|КОНЕЦ Как ДоляММОТ,
		|ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноДнейПособий,0) Как ОтработаноДнейПособий, 
		|ЕСТЬNULL(ДанныеДляРасчетаСреднего.ОтработаноДнейПособий2010,0) Как ОтработаноДнейПособий2010, 
		|ДанныеДляРасчетаСреднего.СреднийЗаработокПособий2010 Как СреднийЗаработокПособий2010,
		|ДанныеДляРасчетаСреднего.СреднийЗаработокПособий Как СреднийЗаработокПособий";*/
				if(true/*КомментироватьРасчет*/)
				{
					//ПоляЗапроса.Добавить("ОтработаноДнейПособий");
					//ПоляЗапроса.Добавить("СреднийЗаработокПособий");
					//ПоляЗапроса.Добавить("ОтработаноДнейПособий2010");
					//ПоляЗапроса.Добавить("СреднийЗаработокПособий2010");
					//ПоляЗапроса.Добавить("СреднийЗаработокПособий2011");
					//ПоляЗапроса.Добавить("СреднийЗаработокПособий2011БезОграничений");
					//ПоляЗапроса.Добавить("ОтработаноДнейДляПособийПоМатеринству");
					//ПоляЗапроса.Добавить("ДоляММОТ");
				}
			}
		}
		// ДописатьПоляАлгоритма()
		// Для указанного алгоритма расчета записи регистра расчетов
		// исполняет вспомогательные запросы и дописывает текст запроса
		// используемые временные таблицы
		//
		// Параметры
		//  ИмяАлгоритма - строка - "имя" алгоритма
		//  КомментироватьРасчет - булево - обозначает режим,
		//                 в котором производится расчет
		//  Запрос - запрос - запрос, который используется
		//                 в дальнейшем при расчете записей регистра
		//  ТекстЗапроса - строка - текст запроса, который
		//                 используется в дальнейшем при расчете записей регистра
		//  Условие - строка - дополнительный текст запроса
		//  ИмяРегистра - строка - "имя" рассчитываемого регистра
		//

		public void ДописатьАлгоритмВЗапрос(/*ИмяАлгоритма = "", КомментироватьРасчет = Ложь, Запрос = Неопределено, ТекстЗапроса = "", Условие = "", ИмяРегистра = ""*/)
		{
			/*// алгоритмы расчета записей регистров расчета
*/
			if(true/*ИмяАлгоритма = "ИсчисленныйНДФЛ"*/)
			{
				//МассивУдержанийИЛ = Новый Массив;
				//МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентом);
				//МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомБезБЛ);
				//МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПредела);
				//МассивУдержанийИЛ.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПределаБезБЛ);
				//Запрос.УстановитьПараметр("парамМассивУдержанийИЛ", МассивУдержанийИЛ);
				/*// ИсчисленныйНДФЛ
*/
				/*//	данные по исчисленному НДФЛ в текущем периоде регистрации
*/
				/*//	Поля 
*/
				/*//		НомерСтроки
*/
				/*//		ИсчисленныйНалог
*/
				/*//
*/
				/*//	Описание
*/
				/*//	Суммируем исчисленный НДФЛ по заданной организации в разрезе физлиц за 
*/
				/*//  базовый период строки удержания
*/
				/*//	
*/
				/*Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Удержания.НомерСтроки КАК НомерСтроки,
		|	Удержания.ФизЛицо КАК Физлицо,
		|	НАЧАЛОПЕРИОДА(Удержания.БазовыйПериодНачало, МЕСЯЦ) КАК МесяцУдержания
		|ПОМЕСТИТЬ ВТФизлица
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
		|ГДЕ
		|	Удержания.ВидРасчета В(&парамМассивУдержанийИЛ)
		|	И Удержания.Регистратор = &парамРегистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	МесяцУдержания
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Физлица.НомерСтроки КАК НомерСтроки,
		|	СУММА(НДФЛРасчетыСБюджетом.Налог) КАК ИсчисленныйНалог
		|ПОМЕСТИТЬ ВТИсчисленныйНДФЛ
		|ИЗ
		|	ВТФизлица КАК Физлица
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛРасчетыСБюджетом КАК НДФЛРасчетыСБюджетом
		|		ПО Физлица.Физлицо = НДФЛРасчетыСБюджетом.ФизЛицо
		|			И (НАЧАЛОПЕРИОДА(НДФЛРасчетыСБюджетом.Период, МЕСЯЦ) = Физлица.МесяцУдержания)
		|ГДЕ
		|	НДФЛРасчетыСБюджетом.Организация = &парамОрганизация
		|	И НДФЛРасчетыСБюджетом.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
		|	И НДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление)
		|
		|СГРУППИРОВАТЬ ПО
		|	Физлица.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";*/
				//Запрос.Выполнить();
				/*// присоединяем данные по исчисленному НДФЛ
*/
				/*ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТИсчисленныйНДФЛ КАК ИсчисленныйНДФЛ
		|ПО Основной.НомерСтроки = ИсчисленныйНДФЛ.НомерСтроки";*/
			}
			if(true/*ИмяАлгоритма = "РасчетнаяБазаУдержаний"*/)
			{
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	Удержания.Регистратор КАК Регистратор,
		|	Удержания.НомерСтроки КАК НомерСтроки,
		|	Удержания.ФизЛицо,
		|	Удержания.ПериодРегистрации,
		|	Удержания.Организация,
		|	Удержания.БазовыйПериодНачало,
		|	БазовыеВидыРасчета.ВидРасчета,
		|	Удержания.ПорядокРасчетаБазы,
		|	Удержания.БазовыйПериодКонец
		|ПОМЕСТИТЬ ВТ_ЗаписиУдержаний
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.УдержанияОрганизаций.БазовыеВидыРасчета КАК БазовыеВидыРасчета
		|		ПО Удержания.ВидРасчета = БазовыеВидыРасчета.Ссылка
		|ГДЕ
		|	&Условие
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Регистратор,
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Удержания.Регистратор КАК Регистратор,
		|	Удержания.НомерСтроки КАК НомерСтроки,
		|	Удержания.ФизЛицо,
		|	Удержания.ПериодРегистрации КАК ПериодРегистрации,
		|	Удержания.Организация,
		|	Удержания.БазовыйПериодНачало,
		|	Удержания.ВидРасчета,
		|	Удержания.ПорядокРасчетаБазы,
		|	Удержания.БазовыйПериодКонец,
		|	СотрудникиОрганизаций.Ссылка КАК Сотрудник
		|ПОМЕСТИТЬ ВТ_Удержания
		|ИЗ
		|	ВТ_ЗаписиУдержаний КАК Удержания
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
		|		ПО Удержания.ФизЛицо = СотрудникиОрганизаций.Физлицо
		|			И Удержания.Организация = СотрудникиОрганизаций.Организация
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ПериодРегистрации,
		|	Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(База.РезультатБаза) КАК РезультатБаза,
		|	База.Регистратор КАК Регистратор,
		|	База.НомерСтроки КАК НомерСтроки
		|ПОМЕСТИТЬ ВТБаза
		|ИЗ
		|	(ВЫБРАТЬ
		|		База.Результат КАК РезультатБаза,
		|		Основной.Регистратор КАК Регистратор,
		|		Основной.НомерСтроки КАК НомерСтроки
		|	ИЗ
		|		ВТ_Удержания КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК База
		|			ПО Основной.ПериодРегистрации = База.ПериодРегистрации
		|				И Основной.Сотрудник = База.Сотрудник
		|				И Основной.Организация = База.Организация
		|				И Основной.БазовыйПериодНачало <= База.ПериодДействияНачало
		|				И Основной.ВидРасчета = База.ВидРасчета
		|	ГДЕ
		|		Основной.ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ПриПриемеНаРаботу)
		|		И База.ВидРасчета ЕСТЬ НЕ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База.Результат,
		|		Основной.Регистратор,
		|		Основной.НомерСтроки
		|	ИЗ
		|		ВТ_Удержания КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК База
		|			ПО (Основной.ПериодРегистрации = НАЧАЛОПЕРИОДА(База.ПериодРегистрации, МЕСЯЦ))
		|				И Основной.Сотрудник = База.Сотрудник
		|				И Основной.Организация = База.Организация
		|				И Основной.БазовыйПериодНачало <= База.ПериодРегистрации
		|				И Основной.ВидРасчета = База.ВидРасчета
		|	ГДЕ
		|		Основной.ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ПриПриемеНаРаботу)
		|		И База.ВидРасчета ЕСТЬ НЕ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База.Результат,
		|		Основной.Регистратор,
		|		Основной.НомерСтроки
		|	ИЗ
		|		ВТ_Удержания КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК База
		|			ПО Основной.ПериодРегистрации = База.ПериодРегистрации
		|				И Основной.Сотрудник = База.Сотрудник
		|				И Основной.Организация = База.Организация
		|				И Основной.БазовыйПериодКонец >= База.ПериодДействияНачало
		|				И Основной.ВидРасчета = База.ВидРасчета
		|	ГДЕ
		|		Основной.ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ПриУвольнении)
		|		И База.ВидРасчета ЕСТЬ НЕ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База.Результат,
		|		Основной.Регистратор,
		|		Основной.НомерСтроки
		|	ИЗ
		|		ВТ_Удержания КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК База
		|			ПО (Основной.ПериодРегистрации = НАЧАЛОПЕРИОДА(База.ПериодРегистрации, МЕСЯЦ))
		|				И Основной.Сотрудник = База.Сотрудник
		|				И Основной.Организация = База.Организация
		|				И Основной.БазовыйПериодКонец >= База.ПериодРегистрации
		|				И Основной.ВидРасчета = База.ВидРасчета
		|	ГДЕ
		|		Основной.ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ПриУвольнении)
		|		И База.ВидРасчета ЕСТЬ НЕ NULL 
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База1.РезультатБаза,
		|		База1.Регистратор,
		|		База1.НомерСтроки
		|	ИЗ
		|		РегистрРасчета.УдержанияРаботниковОрганизаций.БазаОсновныеНачисленияРаботниковОрганизаций(
		|				&парамИзмеренияОсновного,
		|				&парамИзмеренияБазового,
		|				&парамРазрезы,
		|				&Условие
		|					И ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ЗаВесьПериод)) КАК База1
		|	ГДЕ
		|		((НЕ База1.Сторно)
		|				ИЛИ База1.ПериодРегистрацииРазрез < База1.ПериодРегистрации)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		База2.РезультатБаза,
		|		База2.Регистратор,
		|		База2.НомерСтроки
		|	ИЗ
		|		РегистрРасчета.УдержанияРаботниковОрганизаций.БазаДополнительныеНачисленияРаботниковОрганизаций(
		|				&парамИзмеренияОсновного,
		|				&парамИзмеренияБазового,
		|				&парамРазрезы,
		|				&Условие
		|					И ПорядокРасчетаБазы = ЗНАЧЕНИЕ(Перечисление.ПорядокРасчетаБазы.ЗаВесьПериод)) КАК База2
		|	ГДЕ
		|		((НЕ База2.Сторно)
		|				ИЛИ База2.ПериодРегистрацииРазрез < База2.ПериодРегистрации)) КАК База
		|
		|СГРУППИРОВАТЬ ПО
		|	База.Регистратор,
		|	База.НомерСтроки";*/
				//Разрезы = Новый Массив;
				//Разрезы.Добавить("ПериодРегистрации");
				//Запрос.УстановитьПараметр("парамРазрезы", Разрезы);
				//Запрос.Текст = СтрЗаменить(Запрос.Текст, "&Условие", Условие);
				//Запрос.Выполнить();
				/*ТекстЗапроса = ТекстЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТБаза Как База
		|		ПО База.Регистратор = Основной.Регистратор И База.НомерСтроки = Основной.НомерСтроки
		|";*/
			}
			if(true/*ИмяАлгоритма = "ВсегоОтработаноВремени"*/)
			{
				/*// Сумма отработанного времени по видам времени: 
*/
				/*//	ОтработанноеВПределахНормы,
*/
				/*//	ЧасовоеОтработанноеВПределахНормы,
*/
				/*//	ОтработанноеСверхНормы, необходим для расчета показателей ОтработаноВремениВДнях, ОтработаноВремениВЧасах
*/
				/*Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ОсновныеНачисления.Сотрудник КАК Сотрудник,
		|	ОсновныеНачисления.ПериодДействия КАК ПериодДействия
		|ПОМЕСТИТЬ ВТ_СотрудникиПериодыДействия
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|ГДЕ
		|	ОсновныеНачисления.Регистратор = &парамРегистратор
		|	И ОсновныеНачисления.Авторасчет
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТ_СписокВРПоДням
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТ_СписокВРПоЧасам
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ВидВремени В (ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы), ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЧасовоеОтработанноеВПределахНормы))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ФактическийПериодДействия.НомерСтроки,
		|	ФактическийПериодДействия.Сторно,
		|	ФактическийПериодДействия.Сотрудник КАК Сотрудник,
		|	ФактическийПериодДействия.Организация КАК Организация,
		|	ФактическийПериодДействия.ПериодДействия КАК ПериодДействия,
		|	ФактическийПериодДействия.ПериодДействияНачало,
		|	ФактическийПериодДействия.ПериодДействияКонец,
		|	ФактическийПериодДействия.ПериодРегистрации
		|ПОМЕСТИТЬ ВТ_ОсновныеФПД
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|			Регистратор = &парамРегистратор
		|				И Авторасчет) КАК ФактическийПериодДействия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	Организация,
		|	ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НесгруппированныеДанные.НомерСтроки КАК НомерСтроки,
		|	СУММА(НесгруппированныеДанные.ОтработаноДней) КАК ВсегоОтработаноДней,
		|	СУММА(НесгруппированныеДанные.ОтработаноЧасов) КАК ВсегоОтработаноЧасов
		|ПОМЕСТИТЬ ВТВсегоОтработаноВремени
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		ВЫБОР
		|			КОГДА Вспомогательный.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
		|				ТОГДА ВЫБОР
		|						КОГДА Вспомогательный.Сторно
		|							ТОГДА -1
		|						ИНАЧЕ 1
		|					КОНЕЦ * Вспомогательный.ОтработаноДней
		|			ИНАЧЕ ГрафикиРаботы.ОсновноеЗначение
		|		КОНЕЦ КАК ОтработаноДней,
		|		ВЫБОР
		|			КОГДА Вспомогательный.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
		|				ТОГДА 0
		|			ИНАЧЕ ГрафикиРаботы.ДополнительноеЗначение
		|		КОНЕЦ КАК ОтработаноЧасов
		|	ИЗ
		|		ВТ_ОсновныеФПД КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|					ВидРасчета В
		|							(ВЫБРАТЬ
		|								СписокВР.ВидРасчета
		|							ИЗ
		|								ВТ_СписокВРПоДням КАК СписокВР)
		|						И (Сотрудник, ПериодДействия) В
		|							(ВЫБРАТЬ
		|								ОсновныеНачисления.Сотрудник,
		|								ОсновныеНачисления.ПериодДействия
		|							ИЗ
		|								ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК Вспомогательный
		|			ПО Основной.Сотрудник = Вспомогательный.Сотрудник
		|				И Основной.Организация = Вспомогательный.Организация
		|				И Основной.ПериодДействия = Вспомогательный.ПериодДействия
		|				И (Основной.Сторно = Вспомогательный.Сторно
		|					ИЛИ Вспомогательный.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы))
		|				И Основной.ПериодРегистрации >= Вспомогательный.ПериодРегистрации
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|			ПО (Вспомогательный.ГрафикРаботы = ГрафикиРаботы.ГрафикРаботы)
		|				И (Вспомогательный.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы))
		|				И (ГрафикиРаботы.Месяц = Вспомогательный.ПериодДействия)
		|				И (ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням))
		|				И (ГрафикиРаботы.Дата МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
		|				И (ГрафикиРаботы.Дата МЕЖДУ Вспомогательный.ПериодДействияНачало И Вспомогательный.ПериодДействияКонец)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Основной.НомерСтроки,
		|		0,
		|		ВЫБОР
		|			КОГДА Вспомогательный.Сторно
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ * Вспомогательный.ОтработаноЧасов
		|	ИЗ
		|		ВТ_ОсновныеФПД КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|					ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|						И ВидРасчета В
		|							(ВЫБРАТЬ
		|								СписокВР.ВидРасчета
		|							ИЗ
		|								ВТ_СписокВРПоЧасам КАК СписокВР)
		|						И (Сотрудник, ПериодДействия) В
		|							(ВЫБРАТЬ
		|								ОсновныеНачисления.Сотрудник,
		|								ОсновныеНачисления.ПериодДействия
		|							ИЗ
		|								ВТ_СотрудникиПериодыДействия КАК ОсновныеНачисления)) КАК Вспомогательный
		|			ПО Основной.Сотрудник = Вспомогательный.Сотрудник
		|				И Основной.Организация = Вспомогательный.Организация
		|				И Основной.ПериодДействия = Вспомогательный.ПериодДействия
		|				И (Вспомогательный.ПериодДействияНачало МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)
		|				И (Вспомогательный.ПериодДействияКонец МЕЖДУ Основной.ПериодДействияНачало И Основной.ПериодДействияКонец)) КАК НесгруппированныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	НесгруппированныеДанные.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";*/
				//Запрос.Выполнить();
				/*ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТВсегоОтработаноВремени КАК ВсегоОтработаноВремени
		|ПО Основной.НомерСтроки = ВсегоОтработаноВремени.НомерСтроки
		|";*/
			}
			if(true/*ИмяАлгоритма = "РазмерОграниченияПособия"*/)
			{
				/*Запрос.Текст =
		"ВЫБРАТЬ
		|	Основной.НомерСтроки КАК НомерСтроки,
		|	Основной.ПериодДействияНачало,
		|	Основной.ДатаНачалаСобытия,
		|	Основной.Сотрудник
		|ПОМЕСТИТЬ ВТРассчитываемыеЗаписиБольничных
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
		|ГДЕ
		|	Основной.Регистратор = &парамРегистратор
		|	И Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";*/
				//Запрос.Выполнить();
				/*// РазмерММОТ
*/
				/*//	Поля:
*/
				/*//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
*/
				/*//		Размер - размер ММОТ
*/
				/*//	Описание:
*/
				/*//		получает размер ММОТ для каждой строки начислений
*/
				/*//
*/
				/*Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыАктуальностиММОТ.НомерСтроки КАК ОсновнойНомерСтроки,
		|	МинимальнаяОплатаТрудаРФ.Размер КАК Размер
		|ПОМЕСТИТЬ ВТРазмерММОТ
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(МинимальнаяОплатаТрудаРФ.Период) КАК ДатаАктуальности
		|	ИЗ
		|		ВТРассчитываемыеЗаписиБольничных КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|			ПО МинимальнаяОплатаТрудаРФ.Период <= Основной.ПериодДействияНачало
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальностиММОТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|		ПО МинимальнаяОплатаТрудаРФ.Период = ДатыАктуальностиММОТ.ДатаАктуальности";*/
				//Запрос.Выполнить();
				/*// РазмерММОТ
*/
				/*//	Поля:
*/
				/*//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
*/
				/*//		Размер - размер ММОТ
*/
				/*//	Описание:
*/
				/*//		получает размер ММОТ для каждой строки начислений
*/
				/*//
*/
				/*Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыАктуальностиММОТ.НомерСтроки КАК ОсновнойНомерСтроки,
		|	МинимальнаяОплатаТрудаРФ.Размер КАК Размер
		|ПОМЕСТИТЬ ВТРазмерММОТНаДатуДатаНачалаСобытия
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(МинимальнаяОплатаТрудаРФ.Период) КАК ДатаАктуальности
		|	ИЗ
		|		ВТРассчитываемыеЗаписиБольничных КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|			ПО МинимальнаяОплатаТрудаРФ.Период <= Основной.ДатаНачалаСобытия
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальностиММОТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МинимальнаяОплатаТрудаРФ КАК МинимальнаяОплатаТрудаРФ
		|		ПО МинимальнаяОплатаТрудаРФ.Период = ДатыАктуальностиММОТ.ДатаАктуальности";*/
				//Запрос.Выполнить();
				/*// РазмерОграниченияПособия
*/
				/*//	Поля:
*/
				/*//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
*/
				/*//		Размер - размер ограничения
*/
				/*//	Описание:
*/
				/*//		получает размер ограничения пособия для каждой строки начислений
*/
				/*//
*/
				/*Запрос.Текст =
		"ВЫБРАТЬ
		|	ДатыАктуальности.НомерСтроки КАК ОсновнойНомерСтроки,
		|	РазмерОграниченияПособияПоНетрудоспособности.Размер КАК Размер,
		|	РазмерОграниченияПособияПоНетрудоспособности.РазмерПоБеременности
		|ПОМЕСТИТЬ ВТРазмерОграниченияПособия
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		МАКСИМУМ(РазмерОграниченияПособияПоНетрудоспособности.Период) КАК ДатаАктуальности
		|	ИЗ
		|		ВТРассчитываемыеЗаписиБольничных КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|			ПО РазмерОграниченияПособияПоНетрудоспособности.Период <= Основной.ПериодДействияНачало
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки) КАК ДатыАктуальности
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерОграниченияПособияПоНетрудоспособности КАК РазмерОграниченияПособияПоНетрудоспособности
		|		ПО РазмерОграниченияПособияПоНетрудоспособности.Период = ДатыАктуальности.ДатаАктуальности";*/
				//Запрос.Выполнить();
				/*// ПредельнаяВеличинаБазы
*/
				/*//	Поля:
*/
				/*//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
*/
				/*//		Размер - размер ограничения
*/
				/*//	Описание:
*/
				/*//		получает размер ограничения пособия для каждой строки начислений
*/
				/*//
*/
				//Запрос.УстановитьПараметр("ДатаЗакона213ФЗ",ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
				/*Запрос.Текст =
		"ВЫБРАТЬ
		|	ПредельнаяВеличинаБазыСтраховыхВзносовСрезПоследних.Размер КАК Размер
		|ПОМЕСТИТЬ ВТПредельнаяВеличинаБазы
		|ИЗ
		|	РегистрСведений.ПредельнаяВеличинаБазыСтраховыхВзносов.СрезПоследних(&ДатаЗакона213ФЗ, ) КАК ПредельнаяВеличинаБазыСтраховыхВзносовСрезПоследних";*/
				//Запрос.Выполнить();
				/*// присоединяем данные о размере пособия
*/
				/*ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерММОТ КАК РазмерММОТ
		|ПО Основной.НомерСтроки = РазмерММОТ.ОсновнойНомерСтроки
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерММОТНаДатуДатаНачалаСобытия КАК РазмерММОТНаДатуДатаНачалаСобытия
		|ПО Основной.НомерСтроки = РазмерММОТНаДатуДатаНачалаСобытия.ОсновнойНомерСтроки
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТПредельнаяВеличинаБазы КАК РазмерОграниченияПособия2010
		|ПО Истина
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерОграниченияПособия КАК РазмерОграниченияПособия
		|ПО Основной.НомерСтроки = РазмерОграниченияПособия.ОсновнойНомерСтроки";*/
			}
			if(true/*ИмяАлгоритма = "ФактическийПериодДействия"*/)
			{
				/*Запрос.Текст =
		"ВЫБРАТЬ
		|	ФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
		|	ФактическийПериодДействия.ПериодДействияНачало,
		|	ФактическийПериодДействия.ПериодДействияКонец,
		|	ФактическийПериодДействия.ВидРасчета,
		|	ФактическийПериодДействия.Сотрудник
		|ПОМЕСТИТЬ ВТФактическийПериодДействия
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|			Регистратор = &парамРегистратор
		|				И Авторасчет) КАК ФактическийПериодДействия
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";*/
				//Запрос.Выполнить();
			}
			if(true/*ИмяАлгоритма = "ВремяВКалендарныхДнях"*/)
			{
				/*Запрос.Текст =
		"ВЫБРАТЬ
		|	ФактическийПериодДействия.НомерСтроки КАК НомерСтроки,
		|	СУММА(РАЗНОСТЬДАТ(ФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ФактическийПериодДействия.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ)) КАК КалендарныхДней
		|ПОМЕСТИТЬ ВТВремяВКалендарныхДнях
		|ИЗ
		|	ВТФактическийПериодДействия КАК ФактическийПериодДействия
		|ГДЕ
		|	ФактическийПериодДействия.ВидРасчета.КатегорияРасчета = &парамКатегорияНачисления
		|
		|СГРУППИРОВАТЬ ПО
		|	ФактическийПериодДействия.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";*/
				//Запрос.Выполнить();
				/*ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТВремяВКалендарныхДнях Как ВремяВКалендарныхДнях
		|ПО Основной.НомерСтроки = ВремяВКалендарныхДнях.НомерСтроки
		|";*/
			}
			if(true/*ИмяАлгоритма = "СдельныйЗаработок"*/)
			{
				/*// СдельныйЗаработокОрганизацииТекст
*/
				/*//	Поля:
*/
				/*//		ОсновнойНомерСтроки - номер строки рассчитываемых движений
*/
				/*//		РазмерЗаработка - размер сдельного заработка
*/
				/*//	Описание:
*/
				/*//		получает размер сдельного заработка для начислений со способом расчета "Сдельный заработок"
*/
				/*//
*/
				/*Запрос.Текст =
		"ВЫБРАТЬ
		|	НесгруппированныеДанные.ОсновнойНомерСтроки КАК ОсновнойНомерСтроки,
		|	СУММА(НесгруппированныеДанные.СуммаЗаработка) КАК СуммаЗаработка,
		|	МАКСИМУМ(НесгруппированныеДанные.ОшибкаВводаФактическойВыработки) КАК ОшибкаВводаФактическойВыработки
		|ПОМЕСТИТЬ ВТСдельныйЗаработокОрганизации
		|ИЗ
		|	(ВЫБРАТЬ
		|		Начисления.НомерСтроки КАК ОсновнойНомерСтроки,
		|		ФактическаяВыработка.Выработка КАК СуммаЗаработка,
		|		ЛОЖЬ КАК ОшибкаВводаФактическойВыработки
		|	ИЗ
		|		ВТФактическийПериодДействия КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
		|			ПО Начисления.Сотрудник = ФактическаяВыработка.Сотрудник
		|				И (ФактическаяВыработка.Период МЕЖДУ Начисления.ПериодДействияНачало И Начисления.ПериодДействияКонец)
		|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ПоДням), ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ЗаДень)))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		БезУчетаСторно.НомерСтроки,
		|		0,
		|		ВЫБОР
		|			КОГДА БезУчетаСторно.Сотрудник ЕСТЬ НЕ NULL 
		|					И БезУчетаСторно.Выработка ЕСТЬ НЕ NULL 
		|					И БезУчетаСторно.СуммаСторно <> 0
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ЛОЖЬ
		|		КОНЕЦ
		|	ИЗ
		|		(ВЫБРАТЬ
		|			Начисления.НомерСтроки КАК НомерСтроки,
		|			СУММА(ФактическаяВыработка.Выработка) КАК Выработка,
		|			СУММА(ВЫБОР
		|					КОГДА ПроверкаКоличестваЗаписей.Сторно
		|						ТОГДА -1
		|					КОГДА ПроверкаКоличестваЗаписей.Сторно = ЛОЖЬ
		|						ТОГДА 1
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК СуммаСторно,
		|			ПроверкаКоличестваЗаписей.Сотрудник КАК Сотрудник
		|		ИЗ
		|			РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
		|				ПО Начисления.Сотрудник = ФактическаяВыработка.Сотрудник
		|					И (ФактическаяВыработка.Период = Начисления.ПериодДействия)
		|					И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод)))
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ПроверкаКоличестваЗаписей
		|				ПО Начисления.Сотрудник = ПроверкаКоличестваЗаписей.Сотрудник
		|					И Начисления.ПериодДействия = ПроверкаКоличестваЗаписей.ПериодДействия
		|					И Начисления.ВидРасчета = ПроверкаКоличестваЗаписей.ВидРасчета
		|					И Начисления.Организация = ПроверкаКоличестваЗаписей.Организация
		|					И (Начисления.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
		|					И (ПроверкаКоличестваЗаписей.ВидРасчета.ВидВремени <> ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы))
		|					И ((НЕ(Начисления.Регистратор = ПроверкаКоличестваЗаписей.Регистратор
		|							И Начисления.НомерСтроки = ПроверкаКоличестваЗаписей.НомерСтроки)))
		|		ГДЕ
		|			Начисления.Регистратор = &парамРегистратор
		|			И Начисления.Авторасчет
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Начисления.НомерСтроки,
		|			ФактическаяВыработка.Выработка,
		|			ПроверкаКоличестваЗаписей.Сотрудник) КАК БезУчетаСторно
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		Начисления.НомерСтроки,
		|		СУММА(ФактическаяВыработка.Выработка),
		|		ЛОЖЬ
		|	ИЗ
		|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.ФактическаяВыработкаРаботниковОрганизаций КАК ФактическаяВыработка
		|			ПО Начисления.Сотрудник = ФактическаяВыработка.Сотрудник
		|				И (ФактическаяВыработка.Период = Начисления.ПериодДействия)
		|				И (ФактическаяВыработка.СпособВводаДанных В (ЗНАЧЕНИЕ(Перечисление.СпособыВводаДанныхОВремени.ВЦеломЗаПериод)))
		|	ГДЕ
		|		Начисления.Регистратор = &парамРегистратор
		|		И Начисления.Авторасчет
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Начисления.НомерСтроки,
		|		ФактическаяВыработка.Выработка) КАК НесгруппированныеДанные
		|
		|СГРУППИРОВАТЬ ПО
		|	НесгруппированныеДанные.ОсновнойНомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ОсновнойНомерСтроки";*/
				//Запрос.Выполнить();
				/*// присоединяем данные о сдельном заработке
*/
				/*ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТСдельныйЗаработокОрганизации КАК ДанныеОСдельномЗаработке
		|ПО Основной.НомерСтроки = ДанныеОСдельномЗаработке.ОсновнойНомерСтроки";*/
			}
			if(true/*ИмяАлгоритма = "ДоходыОблагаемыеСтраховымиВзносамиЕСН"*/)
			{
				/*// временная таблица с рассчитываемыми записями
*/
				if(true/*ИмяРегистра = "ОсновныеНачисленияРаботниковОрганизаций"*/)
				{
					/*Запрос.Текст =
			"ВЫБРАТЬ
			|	Основной.ФизЛицо КАК ФизЛицо,
			|	Основной.Организация КАК Организация,
			|	НАЧАЛОПЕРИОДА(ВЫБОР
			|			КОГДА Основной.ВидРасчета.ПериодДействияБазовый
			|				ТОГДА Основной.ПериодДействияНачало
			|			ИНАЧЕ Основной.БазовыйПериодНачало
			|		КОНЕЦ, МЕСЯЦ) КАК ПериодРасчета,
			|	Основной.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
			|	Основной.НомерСтроки,
			|	Основной.Регистратор,
			|	Основной.ПериодРегистрации
			|ПОМЕСТИТЬ ВТРассчитываемыеЗаписи
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Основной
			|ГДЕ
			|	Основной.Регистратор = &парамРегистратор
			|	И Основной.Авторасчет
			|	И Основной.ВидРасчета.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений)
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	ФизЛицо,
			|	Организация,
			|	ОбособленноеПодразделение,
			|	ПериодРасчета";*/
				}
				//Запрос.Выполнить();
				/*// ОблагаемыеЕСНДоходы - таблица с облагаемой базой
*/
				/*//	Поля:
*/
				/*//		НомерСтроки - номер строки рассчитываемых движений
*/
				/*//		Результат - сумма доходов физлица за указанный период регистрации
*/
				/*//	Описание:
*/
				/*//		выбираются все облагаемые взносами в ПФР доходы физлица, начисленные 
*/
				/*//      в указанном периоде регистрации по указанному в строке расчета 
*/
				/*//      обособленному подразделению 
*/
				/*//
*/
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	Доходы.НомерСтроки КАК НомерСтроки,
		|	СУММА(Доходы.Результат) КАК Результат
		|ПОМЕСТИТЬ ВТОблагаемыеЕСНДоходы
		|ИЗ
		|	(ВЫБРАТЬ
		|		РассчитываемыеЗаписи.НомерСтроки КАК НомерСтроки,
		|		ДополнительныеНачисленияРаботниковОрганизаций.Результат - ДополнительныеНачисленияРаботниковОрганизаций.СкидкаПриНалогообложении КАК Результат
		|	ИЗ
		|		ВТРассчитываемыеЗаписи КАК РассчитываемыеЗаписи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
		|			ПО РассчитываемыеЗаписи.Организация = ДополнительныеНачисленияРаботниковОрганизаций.Организация
		|				И РассчитываемыеЗаписи.ФизЛицо = ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо
		|				И РассчитываемыеЗаписи.ОбособленноеПодразделение = ДополнительныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение
		|				И (РассчитываемыеЗаписи.ПериодРасчета = НАЧАЛОПЕРИОДА(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации, МЕСЯЦ))
		|	ГДЕ
		|		(ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет
		|					И ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаЕСН <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.Матпомощь)
		|					И РассчитываемыеЗаписи.ПериодРегистрации < &ДатаЗаменыЕСНСтраховымиВзносами
		|				ИЛИ ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаСтраховыеВзносы.ВходитВБазуПФР
		|					И ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаСтраховыеВзносы <> ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.Матпомощь)
		|					И РассчитываемыеЗаписи.ПериодРегистрации >= &ДатаЗаменыЕСНСтраховымиВзносами)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		РассчитываемыеЗаписи.НомерСтроки,
		|		ОсновныеНачисленияРаботниковОрганизаций.Результат
		|	ИЗ
		|		ВТРассчитываемыеЗаписи КАК РассчитываемыеЗаписи
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
		|			ПО РассчитываемыеЗаписи.ПериодРасчета = ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации
		|				И РассчитываемыеЗаписи.Организация = ОсновныеНачисленияРаботниковОрганизаций.Организация
		|				И РассчитываемыеЗаписи.ФизЛицо = ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо
		|				И РассчитываемыеЗаписи.ОбособленноеПодразделение = ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение
		|	ГДЕ
		|		(ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаЕСН.ВходитВБазуФедеральныйБюджет
		|					И РассчитываемыеЗаписи.ПериодРегистрации < &ДатаЗаменыЕСНСтраховымиВзносами
		|				ИЛИ ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета.КодДоходаСтраховыеВзносы.ВходитВБазуПФР
		|					И РассчитываемыеЗаписи.ПериодРегистрации >= &ДатаЗаменыЕСНСтраховымиВзносами)) КАК Доходы
		|
		|СГРУППИРОВАТЬ ПО
		|	Доходы.НомерСтроки
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	НомерСтроки";*/
				//Запрос.УстановитьПараметр("ДатаЗаменыЕСНСтраховымиВзносами", ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
				//Запрос.Выполнить();
				/*ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТОблагаемыеЕСНДоходы КАК ОблагаемыеЕСНДоходы
		|ПО Основной.НомерСтроки = ОблагаемыеЕСНДоходы.НомерСтроки";*/
			}
			if(true/*ИмяАлгоритма = "УдержаноПоДокументу"*/)
			{
				/*// НакопленныеДанные
*/
				/*// уже начислено по другим регистраторам в данном расчетном периоде и за всю историю
*/
				/*// применяется для расчета удержаний "нарастающим итогом за месяц"
*/
				/*//	Поля:
*/
				/*//		Сотрудник
*/
				/*//		ДокументОснование
*/
				/*//		ВидРасчета
*/
				/*//		УжеНачисленоВТекущемПериоде
*/
				/*//		УжеНачисленоЗаВсюИсторию
*/
				/*//	Описание:
*/
				/*//		суммирует результаты по видам расчета и документам-основаниям
*/
				/*//
*/
				/*НакопленныеДанныеТекст = 
		"ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА Основной.ПериодРегистрации = НакопленныеДанные.ПериодРегистрации
		|					И Основной.БазовыйПериодНачало <= НакопленныеДанные.БазовыйПериодНачало
		|					И Основной.БазовыйПериодКонец >= НакопленныеДанные.БазовыйПериодКонец
		|				ТОГДА НакопленныеДанные.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК УжеНачисленоВТекущемПериоде,
		|	СУММА(ВЫБОР
		|			КОГДА НакопленныеДанные.ПериодРегистрации <= Основной.ПериодРегистрации
		|					И Основной.БазовыйПериодНачало >= НакопленныеДанные.БазовыйПериодНачало
		|				ТОГДА НакопленныеДанные.Результат
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК УжеНачисленоЗаВсюИсторию,
		|	НакопленныеДанные.ФизЛицо КАК ФизЛицо,
		|	НакопленныеДанные.ВидРасчета КАК ВидРасчета,
		|	НакопленныеДанные.ДокументОснование КАК ДокументОснование
		|ПОМЕСТИТЬ ВТНакопленныеДанные
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.УдержанияРаботниковОрганизаций КАК НакопленныеДанные
		|		ПО Основной.ФизЛицо = НакопленныеДанные.ФизЛицо
		|			И Основной.ВидРасчета = НакопленныеДанные.ВидРасчета
		|			И Основной.ПериодРегистрации >= НакопленныеДанные.ПериодРегистрации
		|			И Основной.Организация = НакопленныеДанные.Организация
		|			И Основной.ДокументОснование = НакопленныеДанные.ДокументОснование
		|			И Основной.Регистратор <> НакопленныеДанные.Регистратор
		|			И Основной.Сторно = НакопленныеДанные.Сторно
		|ГДЕ
		|	Основной.Регистратор = &парамРегистратор
		|	И Основной.Авторасчет
		|
		|СГРУППИРОВАТЬ ПО
		|	НакопленныеДанные.ФизЛицо,
		|	НакопленныеДанные.ВидРасчета,
		|	НакопленныеДанные.ДокументОснование
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	ВидРасчета,
		|	ДокументОснование";*/
				//Запрос.Текст = НакопленныеДанныеТекст;
				//Запрос.Выполнить();
				/*// присоединяем сводные данные по документу основанию
*/
				/*ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТНакопленныеДанные КАК НакопленныеДанные
		|ПО НакопленныеДанные.Физлицо = Основной.Физлицо
		|	И НакопленныеДанные.ВидРасчета = Основной.ВидРасчета
		|	И НакопленныеДанные.ДокументОснование = Основной.ДокументОснование";*/
			}
			if(true/*ИмяАлгоритма = "ПочтовыеПереводы"*/)
			{
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	Основная.ФизЛицо КАК ФизЛицо,
		|	Основная.Организация КАК Организация,
		|	ВЫБОР
		|		КОГДА Дополнительная.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ДополнительнаяСт.ДокументОснование
		|		ИНАЧЕ ЗНАЧЕНИЕ(Документ.ИсполнительныйЛист.ПустаяСсылка)
		|	КОНЕЦ КАК ДокументОснование,
		|	ВЫБОР
		|		КОГДА Основная.ПорядокИсчисленияИздержек ССЫЛКА Справочник.ТарифыПочтовогоСбора
		|					И Основная.ПорядокИсчисленияИздержек <> ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка)
		|				ИЛИ Основная.ПорядокИсчисленияИздержек ССЫЛКА Справочник.ТарифыБанковНаДенежныеПереводы
		|					И Основная.ПорядокИсчисленияИздержек <> ЗНАЧЕНИЕ(Справочник.ТарифыБанковНаДенежныеПереводы.ПустаяСсылка)
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ПоТарифу,
		|	ВЫБОР
		|		КОГДА Дополнительная.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА ЕСТЬNULL(ДополнительнаяСт.Результат, 0)
		|		ИНАЧЕ ЕСТЬNULL(Дополнительная.Результат, 0)
		|	КОНЕЦ КАК СуммаАлиментов,
		|	ВЫРАЗИТЬ(ВЫБОР
		|			КОГДА Дополнительная.Получатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|				ТОГДА ВЫБОР
		|						КОГДА Основная.ПорядокИсчисленияИздержек В (ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ТарифыБанковНаДенежныеПереводы.ПустаяСсылка), НЕОПРЕДЕЛЕНО)
		|							ТОГДА ДополнительнаяСт.Результат
		|						ИНАЧЕ ВЫБОР
		|								КОГДА ДополнительнаяСт.Результат = 0
		|									ТОГДА 0
		|								ИНАЧЕ (ДополнительнаяСт.Результат - ЕСТЬNULL(ДополнительнаяСт.ЗначениеС, 0)) * ЕСТЬNULL(ДополнительнаяСт.Процент, 0) / 100 + ЕСТЬNULL(ДополнительнаяСт.Сумма, 0)
		|							КОНЕЦ
		|					КОНЕЦ
		|			КОГДА ТИПЗНАЧЕНИЯ(Основная.ПорядокИсчисленияИздержек) = ТИП(ЧИСЛО)
		|				ТОГДА Дополнительная.Результат
		|			КОГДА Основная.ПорядокИсчисленияИздержек ССЫЛКА Справочник.ТарифыПочтовогоСбора
		|				ТОГДА ВЫБОР
		|						КОГДА Дополнительная.Результат = 0
		|							ТОГДА 0
		|						ИНАЧЕ (Дополнительная.Результат - Дополнительная.ЗначениеС) * Дополнительная.Процент / 100 + Дополнительная.Сумма
		|					КОНЕЦ
		|			КОГДА Основная.ПорядокИсчисленияИздержек ССЫЛКА Справочник.ТарифыБанковНаДенежныеПереводы
		|				ТОГДА ВЫБОР
		|						КОГДА Дополнительная.БанковскиеИздержки = 0
		|							ТОГДА 0
		|						КОГДА Дополнительная.БанковскиеИздержки < Дополнительная.МинимальныйТариф
		|							ТОГДА Дополнительная.МинимальныйТариф
		|						КОГДА Дополнительная.БанковскиеИздержки > Дополнительная.МаксимальныйТариф
		|								И Дополнительная.МаксимальныйТариф > 0
		|							ТОГДА Дополнительная.МаксимальныйТариф
		|						ИНАЧЕ Дополнительная.БанковскиеИздержки
		|					КОНЕЦ
		|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК РазмерПочтовогоПеревода,
		|	Дополнительная.Процент КАК Процент,
		|	ЕСТЬNULL(Основная.ПорядокИсчисленияИздержек, 0) КАК ПорядокИсчисленияИздержек,
		|	ЕСТЬNULL(Основная.Получатель, ЗНАЧЕНИЕ(Справочник.КОнтрагенты.ПустаяСсылка)) КАК Получатель
		|ПОМЕСТИТЬ ВТПочтовыеПереводыТекст
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основная
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Дополнительная.ПериодРегистрации КАК ПериодРегистрации,
		|			Дополнительная.ФизЛицо КАК ФизЛицо,
		|			Дополнительная.Организация КАК Организация,
		|			Дополнительная.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
		|			Дополнительная.Получатель КАК Получатель,
		|			Дополнительная.ВидРасчета КАК ВидРасчета,
		|			РасчетБазыДляТарифа.БазаДляТарифа КАК Результат,
		|			ЕСТЬNULL(ВЫБОР
		|					КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
		|						ТОГДА 0
		|					ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
		|				КОНЕЦ, 0) КАК ЗначениеС,
		|			ВЫБОР
		|				КОГДА (НЕ РазмерыТарифовПочтовогоСбора.Процент ЕСТЬ NULL )
		|					ТОГДА РазмерыТарифовПочтовогоСбора.Процент
		|				КОГДА (НЕ ТарифыБанков.Процент ЕСТЬ NULL )
		|					ТОГДА ТарифыБанков.Процент
		|				ИНАЧЕ Дополнительная.Показатель1
		|			КОНЕЦ КАК Процент,
		|			ЕСТЬNULL(РазмерыТарифовПочтовогоСбора.Сумма, 0) КАК Сумма,
		|			ЕСТЬNULL(ТарифыБанков.МинимальныйТариф, 0) КАК МинимальныйТариф,
		|			ЕСТЬNULL(ТарифыБанков.МаксимальныйТариф, 0) КАК МаксимальныйТариф,
		|			РасчетБазыДляТарифа.БазаДляТарифа * ЕСТЬNULL(ТарифыБанков.Процент, 0) / 100 КАК БанковскиеИздержки
		|		ИЗ
		|			РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
		|				ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|					Дополнительная.ПериодРегистрации КАК ПериодРегистрации,
		|					Дополнительная.ФизЛицо КАК ФизЛицо,
		|					Дополнительная.Организация КАК Организация,
		|					СУММА(Дополнительная.Результат) КАК БазаДляТарифа,
		|					Дополнительная.ПорядокИсчисленияИздержек КАК ПорядокИсчисленияИздержек,
		|					Дополнительная.Получатель КАК Получатель
		|				ИЗ
		|					РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
		|				ГДЕ
		|					Дополнительная.Регистратор = &парамРегистратор
		|					И (НЕ Дополнительная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.БанковскиеИздержки)))
		|				
		|				СГРУППИРОВАТЬ ПО
		|					Дополнительная.ПериодРегистрации,
		|					Дополнительная.ФизЛицо,
		|					Дополнительная.Организация,
		|					Дополнительная.ПорядокИсчисленияИздержек,
		|					Дополнительная.Получатель) КАК РасчетБазыДляТарифа
		|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыТарифовПочтовогоСбора КАК РазмерыТарифовПочтовогоСбора
		|					ПО РасчетБазыДляТарифа.БазаДляТарифа >= РазмерыТарифовПочтовогоСбора.ЗначениеС
		|						И (РасчетБазыДляТарифа.БазаДляТарифа < ВЫБОР
		|							КОГДА РазмерыТарифовПочтовогоСбора.ЗначениеПо = 0
		|								ТОГДА 99999999
		|							ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеПо
		|						КОНЕЦ)
		|						И РасчетБазыДляТарифа.ПорядокИсчисленияИздержек = РазмерыТарифовПочтовогоСбора.Тариф
		|				ПО Дополнительная.ПериодРегистрации = РасчетБазыДляТарифа.ПериодРегистрации
		|					И Дополнительная.ФизЛицо = РасчетБазыДляТарифа.ФизЛицо
		|					И Дополнительная.ПорядокИсчисленияИздержек = РасчетБазыДляТарифа.ПорядокИсчисленияИздержек
		|					И Дополнительная.Получатель = РасчетБазыДляТарифа.Получатель
		|				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ТарифыБанковНаДенежныеПереводы КАК ТарифыБанков
		|				ПО Дополнительная.ПорядокИсчисленияИздержек = ТарифыБанков.Ссылка
		|		ГДЕ
		|			Дополнительная.Регистратор = &парамРегистратор
		|			И Дополнительная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.БанковскиеИздержки))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Дополнительная.ПериодРегистрации,
		|			Дополнительная.ФизЛицо,
		|			Дополнительная.Организация,
		|			Дополнительная.ВидРасчета,
		|			Дополнительная.ПорядокИсчисленияИздержек,
		|			Дополнительная.Получатель,
		|			РасчетБазыДляТарифа.БазаДляТарифа,
		|			ВЫБОР
		|				КОГДА (НЕ РазмерыТарифовПочтовогоСбора.Процент ЕСТЬ NULL )
		|					ТОГДА РазмерыТарифовПочтовогоСбора.Процент
		|				КОГДА (НЕ ТарифыБанков.Процент ЕСТЬ NULL )
		|					ТОГДА ТарифыБанков.Процент
		|				ИНАЧЕ Дополнительная.Показатель1
		|			КОНЕЦ,
		|			РасчетБазыДляТарифа.БазаДляТарифа * ЕСТЬNULL(ТарифыБанков.Процент, 0) / 100,
		|			ЕСТЬNULL(РазмерыТарифовПочтовогоСбора.Сумма, 0),
		|			ЕСТЬNULL(ТарифыБанков.МинимальныйТариф, 0),
		|			ЕСТЬNULL(ТарифыБанков.МаксимальныйТариф, 0),
		|			ЕСТЬNULL(ВЫБОР
		|					КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
		|						ТОГДА 0
		|					ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
		|				КОНЕЦ, 0)) КАК Дополнительная
		|		ПО Основная.ПериодРегистрации = Дополнительная.ПериодРегистрации
		|			И Основная.ФизЛицо = Дополнительная.ФизЛицо
		|			И Основная.Организация = Дополнительная.Организация
		|			И Основная.ВидРасчета = Дополнительная.ВидРасчета
		|			И Основная.Получатель = Дополнительная.Получатель
		|			И Основная.ПорядокИсчисленияИздержек = Дополнительная.ПорядокИсчисленияИздержек
		|			И (ВЫБОР
		|				КОГДА Основная.ПорядокИсчисленияИздержек В (ЗНАЧЕНИЕ(Справочник.ТарифыПочтовогоСбора.ПустаяСсылка), ЗНАЧЕНИЕ(Справочник.ТарифыБанковНаДенежныеПереводы.ПустаяСсылка))
		|					ТОГДА Основная.Показатель1 = Дополнительная.Процент
		|				ИНАЧЕ ИСТИНА
		|			КОНЕЦ)
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			Дополнительная.ПериодРегистрации КАК ПериодРегистрации,
		|			Дополнительная.ФизЛицо КАК ФизЛицо,
		|			Дополнительная.Организация КАК Организация,
		|			Дополнительная.ДокументОснование КАК ДокументОснование,
		|			Дополнительная.ВидРасчета КАК ВидРасчета,
		|			СУММА(Дополнительная.Результат) КАК Результат,
		|			ВЫБОР
		|				КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
		|					ТОГДА 0
		|				ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
		|			КОНЕЦ КАК ЗначениеС,
		|			РазмерыТарифовПочтовогоСбора.Процент КАК Процент,
		|			РазмерыТарифовПочтовогоСбора.Сумма КАК Сумма
		|		ИЗ
		|			РегистрРасчета.УдержанияРаботниковОрганизаций КАК Дополнительная
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РазмерыТарифовПочтовогоСбора КАК РазмерыТарифовПочтовогоСбора
		|				ПО Дополнительная.ПорядокИсчисленияИздержек = РазмерыТарифовПочтовогоСбора.Тариф
		|					И Дополнительная.Результат >= РазмерыТарифовПочтовогоСбора.ЗначениеС
		|					И (Дополнительная.Результат < ВЫБОР
		|						КОГДА РазмерыТарифовПочтовогоСбора.ЗначениеПо = 0
		|							ТОГДА 99999999
		|						ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеПо
		|					КОНЕЦ)
		|		ГДЕ
		|			Дополнительная.Регистратор = &парамРегистратор
		|			И (НЕ Дополнительная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.БанковскиеИздержки)))
		|		
		|		СГРУППИРОВАТЬ ПО
		|			Дополнительная.ПериодРегистрации,
		|			Дополнительная.ФизЛицо,
		|			Дополнительная.Организация,
		|			Дополнительная.ДокументОснование,
		|			Дополнительная.ВидРасчета,
		|			РазмерыТарифовПочтовогоСбора.Процент,
		|			РазмерыТарифовПочтовогоСбора.Сумма,
		|			ВЫБОР
		|				КОГДА РазмерыТарифовПочтовогоСбора.Тариф.РасчетПоШкалеСПолнойСуммы
		|					ТОГДА 0
		|				ИНАЧЕ РазмерыТарифовПочтовогоСбора.ЗначениеС
		|			КОНЕЦ) КАК ДополнительнаяСт
		|		ПО Основная.ПериодРегистрации = ДополнительнаяСт.ПериодРегистрации
		|			И Основная.ФизЛицо = ДополнительнаяСт.ФизЛицо
		|			И Основная.Организация = ДополнительнаяСт.Организация
		|			И Основная.ДокументОснование = ДополнительнаяСт.ДокументОснование
		|			И Основная.ВидРасчета <> ДополнительнаяСт.ВидРасчета
		|ГДЕ
		|	Основная.Регистратор = &парамРегистратор
		|	И (ЕСТЬNULL(Дополнительная.Результат, 0) <> 0
		|				И Дополнительная.Получатель <> ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
		|			ИЛИ Основная.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПочтовыйСбор), ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.БанковскиеИздержки)))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ФизЛицо,
		|	ДокументОснование,
		|	Организация,
		|	Получатель";*/
				//Запрос.Выполнить();
				/*// присоединяем данные для расчета почтового перевода
*/
				/*ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТПочтовыеПереводыТекст КАК ПочтовыеПереводы
		|ПО Основной.Физлицо = ПочтовыеПереводы.Физлицо И
		|Основной.Организация = ПочтовыеПереводы.Организация И
		|Основной.ДокументОснование = ПочтовыеПереводы.ДокументОснование И
		|Основной.Получатель = ПочтовыеПереводы.Получатель И
		|Основной.ПорядокИсчисленияИздержек = ПочтовыеПереводы.ПорядокИсчисленияИздержек";*/
			}
			if(true/*ИмяАлгоритма = "АлиментыВПрожиточныхМинимумах"*/)
			{
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	Периоды.НомерСтроки,
		|	Периоды.Регистратор,
		|	ВеличинаПрожиточногоМинимума.Размер
		|ПОМЕСТИТЬ ВТПрожиточныеМинимумы
		|ИЗ
		|	(ВЫБРАТЬ
		|		Основной.НомерСтроки КАК НомерСтроки,
		|		Основной.Регистратор КАК Регистратор,
		|		МАКСИМУМ(ВеличинаПрожиточногоМинимума.Период) КАК Период,
		|		Основной.ДополнительныеДанные КАК ДополнительныеДанные
		|	ИЗ
		|		РегистрРасчета.УдержанияРаботниковОрганизаций КАК Основной
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВеличинаПрожиточногоМинимума КАК ВеличинаПрожиточногоМинимума
		|			ПО Основной.ДополнительныеДанные = ВеличинаПрожиточногоМинимума.ПрожиточныйМинимум
		|				И Основной.БазовыйПериодНачало >= ВеличинаПрожиточногоМинимума.Период
		|	ГДЕ
		|		Основной.Регистратор = &парамРегистратор
		|		И Основной.Авторасчет
		|	
		|	СГРУППИРОВАТЬ ПО
		|		Основной.НомерСтроки,
		|		Основной.Регистратор,
		|		Основной.ДополнительныеДанные) КАК Периоды
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ВеличинаПрожиточногоМинимума КАК ВеличинаПрожиточногоМинимума
		|		ПО Периоды.ДополнительныеДанные = ВеличинаПрожиточногоМинимума.ПрожиточныйМинимум
		|			И Периоды.Период = ВеличинаПрожиточногоМинимума.Период";*/
				//Запрос.Выполнить();
				/*ТекстЗапроса = ТекстЗапроса + "
		|ЛЕВОЕ СОЕДИНЕНИЕ ВТПрожиточныеМинимумы КАК ПрожиточныеМинимумы
		|ПО ПрожиточныеМинимумы.НомерСтроки = Основной.НомерСтроки
		|	И ПрожиточныеМинимумы.Регистратор = Основной.Регистратор";*/
			}
			if(true/*ИмяАлгоритма = "СреднийЗаработокПособий2011"*/)
			{
				//Запрос.УстановитьПараметр("ДатаЗакона213ФЗ",ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
				//Запрос.УстановитьПараметр("ВидРасчета", ОбщегоНазначенияЗК.ОсобыйЭлемент(ПланыВидовРасчета.СреднийЗаработок, "ПоЗаработкуПособийС2011"));
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(РасчетСреднегоЗаработка.Результат) КАК Результат,
		|	РасчетСреднегоЗаработка.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	РасчетСреднегоЗаработка.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД) КАК РасчетныйГод,
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД) < &ДатаЗакона213ФЗ
		|			ТОГДА &ДатаЗакона213ФЗ
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД)
		|	КОНЕЦ КАК ДатаОграниченияЗаработка,
		|	МАКСИМУМ(ДЕНЬГОДА(КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД))) - СУММА(РасчетСреднегоЗаработка.ОтработаноДней) КАК ОтработаноДнейДляПособийПоМатеринству
		|ПОМЕСТИТЬ ВТДанныеРегистраСреднего2011
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
		|ГДЕ
		|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
		|	И РасчетСреднегоЗаработка.ВидРасчета = &ВидРасчета
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетСреднегоЗаработка.ДатаНачалаСобытия,
		|	РасчетСреднегоЗаработка.ФизЛицо,
		|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД),
		|	ВЫБОР
		|		КОГДА НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД) < &ДатаЗакона213ФЗ
		|			ТОГДА &ДатаЗакона213ФЗ
		|		ИНАЧЕ НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД)
		|	КОНЕЦ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыРегистра.ДатаОграниченияЗаработка,
		|	ЕСТЬNULL(ПредельнаяВеличинаБазыСтраховыхВзносов.Размер, 0) КАК Размер
		|ПОМЕСТИТЬ ВТПредельнаяВеличинаЗаработкаПоГодам
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДанныеРегистра.ДатаОграниченияЗаработка КАК ДатаОграниченияЗаработка,
		|		МАКСИМУМ(ПредельнаяВеличинаБазыСтраховыхВзносов.Период) КАК ПериодРегистра
		|	ИЗ
		|		ВТДанныеРегистраСреднего2011 КАК ДанныеРегистра
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредельнаяВеличинаБазыСтраховыхВзносов КАК ПредельнаяВеличинаБазыСтраховыхВзносов
		|			ПО ДанныеРегистра.ДатаОграниченияЗаработка >= ПредельнаяВеличинаБазыСтраховыхВзносов.Период
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеРегистра.ДатаОграниченияЗаработка) КАК ДатыРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредельнаяВеличинаБазыСтраховыхВзносов КАК ПредельнаяВеличинаБазыСтраховыхВзносов
		|		ПО ДатыРегистра.ПериодРегистра = ПредельнаяВеличинаБазыСтраховыхВзносов.Период
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ВЫБОР
		|			КОГДА ДанныеРегистраСреднего.Результат <= ПредельнаяВеличинаЗаработка.Размер
		|				ТОГДА ДанныеРегистраСреднего.Результат
		|			ИНАЧЕ ПредельнаяВеличинаЗаработка.Размер
		|		КОНЕЦ) КАК ОграниченныйЗаработок,
		|	ДанныеРегистраСреднего.ДатаНачалаСобытия,
		|	ДанныеРегистраСреднего.ФизЛицо,
		|	СУММА(ДанныеРегистраСреднего.Результат) КАК Заработок,
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ДанныеРегистраСреднего.РасчетныйГод) = МИНИМУМ(ДанныеРегистраСреднего.РасчетныйГод)
		|			ТОГДА 365
		|		ИНАЧЕ 0
		|	КОНЕЦ + СУММА(ДанныеРегистраСреднего.ОтработаноДнейДляПособийПоМатеринству) КАК ОтработаноДнейДляПособийПоМатеринству
		|ПОМЕСТИТЬ ВТДанныеОСреднемЗаработке2011
		|ИЗ
		|	ВТДанныеРегистраСреднего2011 КАК ДанныеРегистраСреднего
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредельнаяВеличинаЗаработкаПоГодам КАК ПредельнаяВеличинаЗаработка
		|		ПО ДанныеРегистраСреднего.ДатаОграниченияЗаработка = ПредельнаяВеличинаЗаработка.ДатаОграниченияЗаработка
		|
		|СГРУППИРОВАТЬ ПО
		|	ДанныеРегистраСреднего.ДатаНачалаСобытия,
		|	ДанныеРегистраСреднего.ФизЛицо
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДатыРегистра.ДатаНачалаСобытия,
		|	ДатыРегистра.Сотрудник,
		|	ЕСТЬNULL(ВЫБОР
		|			КОГДА РаботникиОрганизаций.ПериодЗавершения <= ДатыРегистра.ДатаНачалаСобытия
		|					И РаботникиОрганизаций.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|				ТОГДА ВЫБОР
		|						КОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.СокращенноеРабочееВремя
		|								И РаботникиОрганизаций.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|								И РаботникиОрганизаций.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели <> 0
		|							ТОГДА РаботникиОрганизаций.ГрафикРаботыЗавершения.ДлительностьРабочейНедели / РаботникиОрганизаций.ГрафикРаботыЗавершения.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
		|						ИНАЧЕ 1
		|					КОНЕЦ
		|			КОГДА РаботникиОрганизаций.ГрафикРаботы.СокращенноеРабочееВремя
		|					И РаботникиОрганизаций.ГрафикРаботы.ГрафикПолногоРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.ГрафикиРаботы.ПустаяСсылка)
		|					И РаботникиОрганизаций.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели <> 0
		|				ТОГДА РаботникиОрганизаций.ГрафикРаботы.ДлительностьРабочейНедели / РаботникиОрганизаций.ГрафикРаботы.ГрафикПолногоРабочегоВремени.ДлительностьРабочейНедели
		|			ИНАЧЕ 1
		|		КОНЕЦ, 0) КАК Доля
		|ПОМЕСТИТЬ ВТПродолжительностьРабочегоВремени
		|ИЗ
		|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|		ДанныеРегистра.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|		ДанныеРегистра.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(РаботникиОрганизаций.Период) КАК ПериодРегистра
		|	ИЗ
		|		ВТРассчитываемыеЗаписиБольничных КАК ДанныеРегистра
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|			ПО ДанныеРегистра.ДатаНачалаСобытия >= РаботникиОрганизаций.Период
		|				И ДанныеРегистра.Сотрудник = РаботникиОрганизаций.Сотрудник
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ДанныеРегистра.ДатаНачалаСобытия,
		|		ДанныеРегистра.Сотрудник) КАК ДатыРегистра
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО ДатыРегистра.ПериодРегистра = РаботникиОрганизаций.Период
		|			И ДатыРегистра.Сотрудник = РаботникиОрганизаций.Сотрудник";*/
				//Запрос.Выполнить();
				/*ТекстЗапроса = ТекстЗапроса + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПродолжительностьРабочегоВремени КАК ПродолжительностьРабочегоВремени
		|		ПО Основной.Сотрудник = ПродолжительностьРабочегоВремени.Сотрудник
		|			И Основной.ДатаНачалаСобытия = ПродолжительностьРабочегоВремени.ДатаНачалаСобытия
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОСреднемЗаработке2011 КАК ДанныеОСреднемЗаработке2011
		|		ПО Основной.ФизЛицо = ДанныеОСреднемЗаработке2011.ФизЛицо
		|			И Основной.ДатаНачалаСобытия = ДанныеОСреднемЗаработке2011.ДатаНачалаСобытия";*/
			}
			/*// алгоритмы прочих расчетов
*/
			if(true/*ИмяАлгоритма = "РасчетнаяБазаСреднегоЗаработка"*/)
			{
				/*НачалоТекстаЗапроса = 
		"ВЫБРАТЬ
		|	РасчетСреднегоЗаработка.НомерСтроки,
		|	РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода,
		|	РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода,
		|	РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
		|	РасчетСреднегоЗаработка.ПериодРегистрации,
		|	РасчетСреднегоЗаработка.БазовыйПериодНачало,
		|	РасчетСреднегоЗаработка.БазовыйПериодКонец,
		|	РасчетСреднегоЗаработка.Сотрудник КАК Сотрудник,
		|	РасчетСреднегоЗаработка.Сотрудник.Физлицо КАК ФизЛицо,
		|	РасчетСреднегоЗаработка.Сотрудник.Организация КАК Организация,
		|	РасчетСреднегоЗаработка.ВидРасчета КАК ВидРасчета,
		|	СреднийЗаработокБазовыеВидыРасчета.ВидРасчета КАК БазовыйВидРасчета,
		|	ГОД(РасчетСреднегоЗаработка.ДатаНачалаСобытия) - 1 КАК ГодУчетаПремийПоИтогамГода
		|ПОМЕСТИТЬ ВТСтрокиСреднегоЗаработка
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
		|		ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
		|		ПО РасчетСреднегоЗаработка.ВидРасчета = СреднийЗаработокБазовыеВидыРасчета.Ссылка
		|ГДЕ
		|	РасчетСреднегоЗаработка.Регистратор = &парамРегистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СтраховыеВзносыСведенияОДоходахОбороты.Период КАК Период,
		|	СтраховыеВзносыСведенияОДоходахОбороты.ФизЛицо КАК ФизЛицо,
		|	СтраховыеВзносыСведенияОДоходахОбороты.Организация КАК Организация,
		|	СтраховыеВзносыСведенияОДоходахОбороты.ВидДохода КАК ВидДохода,
		|	СтраховыеВзносыСведенияОДоходахОбороты.СкидкаОборот
		|ПОМЕСТИТЬ ВТДанныеУчетаСкидок
		|ИЗ
		|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
		|			&парамДатаС,
		|			&парамДатаПо,
		|			Месяц,
		|			(ФизЛицо, Организация) В
		|					(ВЫБРАТЬ
		|						СтрокиСреднегоЗаработка.ФизЛицо,
		|						СтрокиСреднегоЗаработка.Организация
		|					ИЗ
		|						ВТСтрокиСреднегоЗаработка КАК СтрокиСреднегоЗаработка)
		|				И ВидДохода В (ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.МатпомощьПрокуроров), ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенкаПрокуроров), ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.Матпомощь), ЗНАЧЕНИЕ(Справочник.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка))) КАК СтраховыеВзносыСведенияОДоходахОбороты
		|ГДЕ
		|	СтраховыеВзносыСведенияОДоходахОбороты.Период >= &ДатаЗакона213ФЗ
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ),
		|	ЕСНСведенияОДоходах.ФизЛицо,
		|	ЕСНСведенияОДоходах.Организация,
		|	ЕСНСведенияОДоходах.КодДоходаЕСН,
		|	СУММА(ЕСНСведенияОДоходах.Скидка)
		|ИЗ
		|	РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
		|ГДЕ
		|	(ЕСНСведенияОДоходах.ФизЛицо, ЕСНСведенияОДоходах.Организация) В
		|			(ВЫБРАТЬ
		|				СтрокиСреднегоЗаработка.ФизЛицо,
		|				СтрокиСреднегоЗаработка.Организация
		|			ИЗ
		|				ВТСтрокиСреднегоЗаработка КАК СтрокиСреднегоЗаработка)
		|	И ЕСНСведенияОДоходах.КодДоходаЕСН В (ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.Матпомощь), ЗНАЧЕНИЕ(Справочник.ДоходыЕСН.МатпомощьПриРожденииРебенка))
		|	И ЕСНСведенияОДоходах.Период МЕЖДУ &парамДатаС И &парамДатаПо
		|	И ЕСНСведенияОДоходах.Период < &ДатаЗакона213ФЗ
		|
		|СГРУППИРОВАТЬ ПО
		|	ЕСНСведенияОДоходах.ФизЛицо,
		|	ЕСНСведенияОДоходах.Организация,
		|	ЕСНСведенияОДоходах.КодДоходаЕСН,
		|	НАЧАЛОПЕРИОДА(ЕСНСведенияОДоходах.Период, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Период,
		|	ВидДохода,
		|	ФизЛицо,
		|	Организация
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	БазаДополнительныеНачисления.РезультатБаза,
		|	БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
		|	БазаДополнительныеНачисления.НомерСтроки,
		|	БазаДополнительныеНачисления.ФизЛицо КАК ФизЛицо,
		|	БазаДополнительныеНачисления.Организация КАК Организация,
		|	БазаДополнительныеНачисления.ВидРасчетаРазрез,
		|	ВЫБОР
		|		КОГДА БазаДополнительныеНачисления.БазовыйПериодНачало < &ДатаЗакона213ФЗ
		|			ТОГДА БазаДополнительныеНачисления.ВидРасчетаРазрез.КодДоходаЕСН
		|		ИНАЧЕ БазаДополнительныеНачисления.ВидРасчетаРазрез.КодДоходаСтраховыеВзносы
		|	КОНЕЦ КАК КодДоходаСтраховыеВзносы,
		|	БазаДополнительныеНачисления.Сотрудник.ВидЗанятости КАК ВидЗанятости,
		|	БазаДополнительныеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало
		|ПОМЕСТИТЬ ВТБазаДопНачисленийПоБЛ
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
		|			&парамИзмерения,
		|			&парамИзмерения,
		|			&парамРазрезыБЛ,
		|			Регистратор = &парамРегистратор
		|				И ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010))) КАК БазаДополнительныеНачисления
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	БазовыйПериодНачало,
		|	КодДоходаСтраховыеВзносы,
		|	ФизЛицо,
		|	Организация" 
		+ ";" + Символы.ПС;*/
				if(true/*КомментироватьРасчет*/)
				{
					/*Запрос.Текст = НачалоТекстаЗапроса +
			"ВЫБРАТЬ
			|	ЕСТЬNULL(СУММА(База.РезультатБаза), 0) КАК РезультатБаза,
			|	ЕСТЬNULL(СУММА(База.СкидкаПоСтраховымВзносам), 0) КАК СкидкаПоСтраховымВзносам,
			|	База.ЧислоМесяцев,
			|	База.ПериодРасчетаСреднегоЗаработка,
			|	База.ВидРасчетаРазрез,
			|	База.ВидРасчетаРазрез.Наименование КАК ВидРасчетаНаименование,
			|	База.НомерСтроки КАК НомерСтроки,
			|	База.ОшибкаВводаСводногоТабеля,
			|	База.ДополнительноУменьшатьПропорциональныеПремии
			|ИЗ
			|	(ВЫБРАТЬ
			|		БазаОсновныеНачисления.РезультатБаза КАК РезультатБаза,
			|		1 КАК ЧислоМесяцев,
			|		БазаОсновныеНачисления.ВидРасчетаРазрез КАК ВидРасчетаРазрез,
			|		БазаОсновныеНачисления.ПериодРасчетаСреднегоЗаработка КАК ПериодРасчетаСреднегоЗаработка,
			|		БазаОсновныеНачисления.НомерСтроки КАК НомерСтроки,
			|		ВЫБОР
			|			КОГДА ОтработанноеВремя.Период ЕСТЬ НЕ NULL 
			|				ТОГДА ИСТИНА
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК ОшибкаВводаСводногоТабеля,
			|		0 КАК СкидкаПоСтраховымВзносам,
			|		ВЫБОР
			|			КОГДА БазаОсновныеНачисления.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА БазаОсновныеНачисления.ДатаНачалаБазовогоПериодаРазрез = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА БазаОсновныеНачисления.ДатаНачалаБазовогоПериодаРазрез МЕЖДУ БазаОсновныеНачисления.ДатаНачалаРасчетногоПериода И БазаОсновныеНачисления.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ КАК ДополнительноУменьшатьПропорциональныеПремии
			|	ИЗ
			|		РегистрРасчета.РасчетСреднегоЗаработка.БазаОсновныеНачисленияРаботниковОрганизаций(
			|				&парамИзмерения,
			|				&парамИзмерения,
			|				&парамРазрезы,
			|				Регистратор = &парамРегистратор
			|					И ВидРасчета В (&парамЗаработок)
			|					И (БазовыйПериодНачало <> НАЧАЛОПЕРИОДА(БазовыйПериодНачало, МЕСЯЦ)
			|						ИЛИ БазовыйПериодКонец <> КОНЕЦПЕРИОДА(БазовыйПериодКонец, МЕСЯЦ))) КАК БазаОсновныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК ОтработанноеВремя
			|			ПО БазаОсновныеНачисления.Сотрудник = ОтработанноеВремя.Сотрудник
			|				И (НАЧАЛОПЕРИОДА(БазаОсновныеНачисления.БазовыйПериодНачало, МЕСЯЦ) = ОтработанноеВремя.Период)
			|				И (ОтработанноеВремя.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Работа))
			|				И (ОтработанноеВремя.ВЦеломЗаПериод)
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисленияРаботниковОрганизаций.Результат,
			|		1,
			|		ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА ОсновныеНачисленияРаботниковОрганизаций.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисленияРаботниковОрганизаций.Сотрудник
			|				И (ОсновныеНачисленияРаботниковОрганизаций.ПериодДействия = НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ))
			|				И (ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамЗаработок)
			|		И РасчетСреднегоЗаработка.БазовыйПериодНачало = НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, МЕСЯЦ)
			|		И РасчетСреднегоЗаработка.БазовыйПериодКонец = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, МЕСЯЦ)
			|		И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		БазаДополнительныеНачисления.РезультатБаза,
			|		ВЫБОР
			|			КОГДА БазаДополнительныеНачисления.ЧислоМесяцевРазрез = 0
			|				ТОГДА 1
			|			ИНАЧЕ БазаДополнительныеНачисления.ЧислоМесяцевРазрез
			|		КОНЕЦ,
			|		БазаДополнительныеНачисления.ВидРасчетаРазрез,
			|		БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
			|		БазаДополнительныеНачисления.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА БазаДополнительныеНачисления.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА БазаДополнительныеНачисления.ДатаНачалаБазовогоПериодаРазрез = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА БазаДополнительныеНачисления.ДатаНачалаБазовогоПериодаРазрез МЕЖДУ БазаДополнительныеНачисления.ДатаНачалаРасчетногоПериода И БазаДополнительныеНачисления.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		РегистрРасчета.РасчетСреднегоЗаработка.БазаДополнительныеНачисленияРаботниковОрганизаций(
			|				&парамИзмерения,
			|				&парамИзмерения,
			|				&парамРазрезыДоп,
			|				Регистратор = &парамРегистратор
			|					И ВидРасчета В (&парамЗаработокБезБольничных)) КАК БазаДополнительныеНачисления
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		БазаДополнительныеНачисления.РезультатБаза - ЕСТЬNULL(ВЫБОР
			|				КОГДА ЕСТЬNULL(ДанныеУчетаСкидок.СкидкаОборот, 0) = 0
			|					ТОГДА 0
			|				КОГДА БазаДополнительныеНачисления.РезультатБаза > ДанныеУчетаСкидок.СкидкаОборот
			|					ТОГДА ДанныеУчетаСкидок.СкидкаОборот
			|				ИНАЧЕ БазаДополнительныеНачисления.РезультатБаза
			|			КОНЕЦ, 0),
			|		1,
			|		БазаДополнительныеНачисления.ВидРасчетаРазрез,
			|		БазаДополнительныеНачисления.ПериодРасчетаСреднегоЗаработка,
			|		БазаДополнительныеНачисления.НомерСтроки,
			|		ЛОЖЬ,
			|		ЕСТЬNULL(ВЫБОР
			|				КОГДА ЕСТЬNULL(ДанныеУчетаСкидок.СкидкаОборот, 0) = 0
			|					ТОГДА 0
			|				КОГДА БазаДополнительныеНачисления.РезультатБаза > ДанныеУчетаСкидок.СкидкаОборот
			|					ТОГДА ДанныеУчетаСкидок.СкидкаОборот
			|				ИНАЧЕ БазаДополнительныеНачисления.РезультатБаза
			|			КОНЕЦ, 0),
			|		ЛОЖЬ
			|	ИЗ
			|		ВТБазаДопНачисленийПоБЛ КАК БазаДополнительныеНачисления
			|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеУчетаСкидок КАК ДанныеУчетаСкидок
			|			ПО БазаДополнительныеНачисления.ФизЛицо = ДанныеУчетаСкидок.ФизЛицо
			|				И БазаДополнительныеНачисления.Организация = ДанныеУчетаСкидок.Организация
			|				И БазаДополнительныеНачисления.КодДоходаСтраховыеВзносы = ДанныеУчетаСкидок.ВидДохода
			|				И (БазаДополнительныеНачисления.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство))
			|				И БазаДополнительныеНачисления.БазовыйПериодНачало = ДанныеУчетаСкидок.Период
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Результат,
			|		12,
			|		Дополнительные.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА Дополнительные.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА Дополнительные.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = Дополнительные.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = Дополнительные.Сотрудник
			|				И РасчетСреднегоЗаработка.ГодУчетаПремийПоИтогамГода = Дополнительные.ГодУчетаПремийПоИтогамГода
			|				И (РасчетСреднегоЗаработка.ПериодРегистрации >= НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ))
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
			|		И Дополнительные.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисления.Результат,
			|		12,
			|		ОсновныеНачисления.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА ОсновныеНачисления.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА ОсновныеНачисления.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисления.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисления.Сотрудник
			|				И РасчетСреднегоЗаработка.ПериодРегистрации >= ОсновныеНачисления.ПериодРегистрации
			|				И РасчетСреднегоЗаработка.ГодУчетаПремийПоИтогамГода = ОсновныеНачисления.ГодУчетаПремийПоИтогамГода
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремии)
			|		И ОсновныеНачисления.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		Дополнительные.Результат,
			|		12,
			|		Дополнительные.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА Дополнительные.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА Дополнительные.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Дополнительные
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = Дополнительные.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = Дополнительные.Сотрудник
			|				И РасчетСреднегоЗаработка.ГодУчетаПремийПоИтогамГода = Дополнительные.ГодУчетаПремийПоИтогамГода
			|				И (НАЧАЛОПЕРИОДА(Дополнительные.ПериодРегистрации, МЕСЯЦ) <= РасчетСреднегоЗаработка.ПериодРегистрации)
			|				И (Дополнительные.ПериодРегистрации МЕЖДУ РасчетСреднегоЗаработка.БазовыйПериодНачало И РасчетСреднегоЗаработка.БазовыйПериодКонец
			|					ИЛИ РасчетСреднегоЗаработка.БазовыйПериодНачало = РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|						И Дополнительные.ПериодРегистрации < РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|					ИЛИ КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода, ДЕНЬ)
			|						И Дополнительные.ПериодРегистрации > РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремииИндексируемые)
			|		И Дополнительные.ВидРасчета ЕСТЬ НЕ NULL 
			|	
			|	ОБЪЕДИНИТЬ ВСЕ
			|	
			|	ВЫБРАТЬ
			|		ОсновныеНачисления.Результат,
			|		12,
			|		ОсновныеНачисления.ВидРасчета,
			|		РасчетСреднегоЗаработка.ПериодРасчетаСреднегоЗаработка,
			|		РасчетСреднегоЗаработка.НомерСтроки,
			|		ЛОЖЬ,
			|		0,
			|		ВЫБОР
			|			КОГДА РасчетСреднегоЗаработка.ВидРасчета В (&ПропорциональныеПремии)
			|				ТОГДА ВЫБОР
			|						КОГДА ОсновныеНачисления.ДатаНачалаБазовогоПериода = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
			|							ТОГДА ЛОЖЬ
			|						КОГДА ОсновныеНачисления.ДатаНачалаБазовогоПериода МЕЖДУ РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода И РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода
			|							ТОГДА ЛОЖЬ
			|						ИНАЧЕ ИСТИНА
			|					КОНЕЦ
			|			ИНАЧЕ ЛОЖЬ
			|		КОНЕЦ
			|	ИЗ
			|		ВТСтрокиСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
			|			ПО РасчетСреднегоЗаработка.БазовыйВидРасчета = ОсновныеНачисления.ВидРасчета
			|				И РасчетСреднегоЗаработка.Сотрудник = ОсновныеНачисления.Сотрудник
			|				И РасчетСреднегоЗаработка.ПериодРегистрации >= ОсновныеНачисления.ПериодРегистрации
			|				И РасчетСреднегоЗаработка.ГодУчетаПремийПоИтогамГода = ОсновныеНачисления.ГодУчетаПремийПоИтогамГода
			|				И (ОсновныеНачисления.ПериодРегистрации МЕЖДУ РасчетСреднегоЗаработка.БазовыйПериодНачало И РасчетСреднегоЗаработка.БазовыйПериодКонец
			|					ИЛИ РасчетСреднегоЗаработка.БазовыйПериодНачало = РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|						И ОсновныеНачисления.ПериодРегистрации < РасчетСреднегоЗаработка.ДатаНачалаРасчетногоПериода
			|					ИЛИ КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодКонец, ДЕНЬ) = КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода, ДЕНЬ)
			|						И ОсновныеНачисления.ПериодРегистрации > РасчетСреднегоЗаработка.ДатаОкончанияРасчетногоПериода)
			|	ГДЕ
			|		РасчетСреднегоЗаработка.ВидРасчета В(&парамПоГодовойПремииИндексируемые)
			|		И ОсновныеНачисления.ВидРасчета ЕСТЬ НЕ NULL ) КАК База
			|
			|СГРУППИРОВАТЬ ПО
			|	База.НомерСтроки,
			|	База.ЧислоМесяцев,
			|	База.ПериодРасчетаСреднегоЗаработка,
			|	База.ВидРасчетаРазрез,
			|	База.ВидРасчетаРазрез.Наименование,
			|	База.ОшибкаВводаСводногоТабеля,
			|	База.ДополнительноУменьшатьПропорциональныеПремии
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки";*/
					//Разрезы = Новый Массив(2);
					//Разрезы[0] = "ДатаНачалаБазовогоПериода";
					//Разрезы[1] = "ВидРасчета";
					//РазрезыДоп = Новый Массив(3);
					//РазрезыДоп[0] = "ЧислоМесяцев";
					//РазрезыДоп[1] = "ДатаНачалаБазовогоПериода";
					//РазрезыДоп[2] = "ВидРасчета";
				}
				//РазрезыДляБЛ = Новый Массив(1);
				//РазрезыДляБЛ[0] = "ВидРасчета";
				//Запрос.УстановитьПараметр("парамРазрезыБЛ",	РазрезыДляБЛ);
				//Измерения = Новый Массив(1);
				//Измерения[0] = "Сотрудник";
				//Запрос.УстановитьПараметр("парамИзмерения",	Измерения);
				//Запрос.УстановитьПараметр("парамРазрезы",	Разрезы);
				//Запрос.УстановитьПараметр("парамРазрезыДоп",РазрезыДоп);
				//Запрос.УстановитьПараметр("ДатаЗакона213ФЗ",ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
			}
			if(true/*ИмяАлгоритма = "ВремяСреднегоЗаработка"*/)
			{
				/*// ЗаписиДанныхДляСреднего
*/
				/*// Данные для расчета среднего заработка
*/
				/*// Поля:
*/
				/*//		НомерСтроки - ключевое поле в пределах регистратора,
*/
				/*//		ДатаНачалаРасчетногоПериода, ДатаОкончанияРасчетногоПериода - определяют расчетный период,
*/
				/*//		БазовыйПериодНачало, БазовыйПериодКонец - определяют часть расчетного периода,
*/
				/*//		ФизЛицо, Организация, Приказ - измерения регистра - для идентификации записи
*/
				/*//		ВидРасчета - вид заработка для расчета среднего 
*/
				/*//		СпособРасчета - способ расчета среднего заработка
*/
				/*//
*/
				/*// Описание:
*/
				/*//		выбираем из регистра расчета среднего заработка все записи по регистратору по
*/
				/*//      различным видам расчета в зависимости от состава параметра  "Заработок"
*/
				/*//
*/
				/*// БазовыеРасчетыОтпуска
*/
				/*// Список начислений из ПВР ОсновныеНачисленияОрганизаций, по результатов которых ведется 
*/
				/*// расчет среднего заработка для оплаты командировок и отпусков
*/
				/*// Поля:
*/
				/*//     ВидРасчета 
*/
				/*//
*/
				/*// БазовыеРасчеты
*/
				/*// Список начислений из ПВР ОсновныеНачисленияОрганизаций, по результатов которых ведется 
*/
				/*// расчет среднего заработка для выплаты пособий по нетрудоспособности
*/
				/*// Поля:
*/
				/*//     ВидРасчета 
*/
				/*//
*/
				/*// НормаПоПроизвКалендарю
*/
				/*// Данные о норме дней по шестидневке
*/
				/*// Поля:
*/
				/*//		МесяцПериода,
*/
				/*// 		ДнейПоПятидневке
*/
				/*// 		ДнейПоШестидневке
*/
				/*//
*/
				/*// Описание:
*/
				/*//		выбираем из производсвенного календаря с сумированием ресурса Шестидневка
*/
				/*//		условие - с начала периода расчета среднего заработка по конец периода
*/
				/*//		группируем по номеру месяца
*/
				/*//
*/
				/*// ВТПрогулыПоТабелюФПД
*/
				/*// Прогулы зарегистрированные табелем, таблица фактического периода действия
*/
				/*// Поля:
*/
				/*//		Сотрудник,
*/
				/*// 		ПериодРегистрации
*/
				/*// 		ПериодДействия
*/
				/*// 		ПериодДействияНачало
*/
				/*// 		ПериодДействияКонец
*/
				/*//		Дней
*/
				/*//		Часов
*/
				/*//
*/
				/*// Описание:
*/
				/*//		таблица фактического периода действия ПВР ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю
*/
				/*//		условие - прогулы зарегистрированы табелем
*/
				/*//
*/
				/*// ВТПрогулыПоТабелюДанныеГрафика
*/
				/*// Прогулы зарегистрированные табелем, таблица данные графика
*/
				/*// Поля:
*/
				/*//		Сотрудник,
*/
				/*// 		ПериодРегистрации
*/
				/*// 		ПериодДействия
*/
				/*// 		ПроизводственныйКалендарьШестидневкаФактическийПериодДействия
*/
				/*//
*/
				/*// Описание:
*/
				/*//		данные графика ПВР ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю
*/
				/*//		условие - прогулы зарегистрированы табелем
*/
				/*//
*/
				/*////////////////////////////////////////////////////////////////////////////////
*/
				/*// данные о продолжительности расчетного периода (ОтработаноДней и ОтработаноЧасов), а также
*/
				/*// об отработанном времени и норме времени за расчетный период  -
*/
				/*// 	нужны для включения премий, начисленных в фиксированных суммах, пропорционально отработанному времени)
*/
				/*// к каждой записи из данных для расчета среднего выбираем записи основного регистра по правилу:
*/
				/*// - если это запись по премиям в фикс. суммах - все записи основного регистра, попадающие в расчетный период
*/
				/*// - если это запись по заработку и начинает расчетный период - записи основного регистра за все "затронутые" месяцы расчетного периода
*/
				/*// - если же это одна из последующих записей по заработку - записи основного регистра за "затронутые" месяцы расчетного периода, кроме первого
*/
				/*// для записей расчета среднего по премиям в фикс. суммах собираем отработанное время и норму по пятидневке за весь расчетный период
*/
				/*// для записей по заработку собираем продолжительность её части расчетного периода
*/
				/*ТекстЗапроса =
		"ВЫБРАТЬ
		|	ЗаписиРасчетаСреднего.ПериодРегистрации,
		|	ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
		|	ЗаписиРасчетаСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|	ЗаписиРасчетаСреднего.БазовыйПериодКонец КАК БазовыйПериодКонец,
		|	ЗаписиРасчетаСреднего.Сотрудник КАК Сотрудник,
		|	ЗаписиРасчетаСреднего.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
		|	ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода КАК ДатаНачалаРасчетногоПериода,
		|	ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода КАК ДатаОкончанияРасчетногоПериода,
		|	ЗаписиРасчетаСреднего.ВидРасчета КАК ВидРасчета,
		|	ЗаписиРасчетаСреднего.СпособРасчета КАК СпособРасчета,
		|	ЗаписиРасчетаСреднего.ВидУчетаВремени,
		|	ЗаписиРасчетаСреднего.Организация
		|ПОМЕСТИТЬ ВТЗаписиДанныхДляСреднего
		|ИЗ
		|	РегистрРасчета.РасчетСреднегоЗаработка КАК ЗаписиРасчетаСреднего
		|ГДЕ
		|	ЗаписиРасчетаСреднего.Регистратор = &парамРегистратор
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТБазовыеРасчетыОтпуска
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
		|	И (ОсновныеНачисленияОрганизаций.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
		|			ИЛИ ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы)
		|				И ОсновныеНачисленияОрганизаций.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное))
		|	И ОсновныеНачисленияОрганизаций.Ссылка <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
		|ПОМЕСТИТЬ ВТВидыРасчетаЕжегодныхОтпусков
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
		|	И ОсновныеНачисленияОрганизаций.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)
		|	И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени В (ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ОсновнойОтпуск), ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск))
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫРАЗИТЬ(СреднийЗаработокБазовыеВидыРасчета.ВидРасчета КАК ПланВидовРасчета.ОсновныеНачисленияОрганизаций) КАК ВидРасчета
		|ПОМЕСТИТЬ ВТБазовыеРасчеты
		|ИЗ
		|	ПланВидовРасчета.СреднийЗаработок.БазовыеВидыРасчета КАК СреднийЗаработокБазовыеВидыРасчета
		|ГДЕ
		|	СреднийЗаработокБазовыеВидыРасчета.Ссылка В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий))
		|	И СреднийЗаработокБазовыеВидыРасчета.ВидРасчета ССЫЛКА ПланВидовРасчета.ОсновныеНачисленияОрганизаций
		|	И СреднийЗаработокБазовыеВидыРасчета.ВидРасчета.ЗачетНормыВремени
		|	И СреднийЗаработокБазовыеВидыРасчета.ВидРасчета <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
		|	И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы)
		|	И ОсновныеНачисленияОрганизаций.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ЦелодневноеНеотработанное)
		|	И ОсновныеНачисленияОрганизаций.Ссылка <> ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК МесяцПериода,
		|	СУММА(ПроизводственныйКалендарь.Пятидневка) КАК ДнейПоПятидневке,
		|	СУММА(ПроизводственныйКалендарь.Пятидневка) * 8 - СУММА(ВЫБОР
		|			КОГДА ПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Предпраздничный)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК ЧасовПоПятидневке,
		|	СУММА(ПроизводственныйКалендарь.Шестидневка) КАК ДнейПоШестидневке,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ПроизводственныйКалендарь.ДатаКалендаря) КАК КалендарныхДней
		|ПОМЕСТИТЬ ВТНормаПоПроизвКалендарю
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|ГДЕ
		|	ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &парамДатаС И &парамДатаПо
		|
		|СГРУППИРОВАТЬ ПО
		|	НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(ПроизводственныйКалендарь.ДатаКалендаря, МЕСЯЦ) КАК МесяцПериода,
		|	ПроизводственныйКалендарь.ДатаКалендаря КАК Праздник
		|ПОМЕСТИТЬ ВТПраздники
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК ПроизводственныйКалендарь
		|ГДЕ
		|	ПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &парамДатаС И &парамДатаПо
		|	И ПроизводственныйКалендарь.ВидДня = ЗНАЧЕНИЕ(Перечисление.ВидыДнейПроизводственногоКалендаря.Праздник)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	МесяцПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисленияРаботников.Сотрудник КАК Сотрудник,
		|	ОсновныеНачисленияРаботников.ПериодРегистрации КАК ПериодРегистрации,
		|	ОсновныеНачисленияРаботников.ПериодДействия КАК ПериодДействия,
		|	ОсновныеНачисленияРаботников.Сторно КАК Сторно,
		|	ОсновныеНачисленияРаботников.ВидРасчета КАК ВидРасчета,
		|	ОсновныеНачисленияРаботников.ПериодДействияНачало КАК ПериодДействияНачало,
		|	ОсновныеНачисленияРаботников.ПериодДействияКонец КАК ПериодДействияКонец
		|ПОМЕСТИТЬ ВТДанныеФПД
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
		|			ПериодДействия МЕЖДУ &парамДатаС И &парамДатаПо
		|				И Сотрудник В
		|					(ВЫБРАТЬ
		|						ЗаписиДанныхДляСреднего.Сотрудник
		|					ИЗ
		|						ВТЗаписиДанныхДляСреднего КАК ЗаписиДанныхДляСреднего)) КАК ОсновныеНачисленияРаботников
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеГрафика.Сотрудник КАК Сотрудник,
		|	ДанныеГрафика.ВидРасчета КАК ВидРасчета,
		|	ДанныеГрафика.ПериодРегистрации,
		|	ДанныеГрафика.ПериодДействия,
		|	ДанныеГрафика.ПериодДействияНачало,
		|	ДанныеГрафика.ПериодДействияКонец,
		|	ДанныеГрафика.Сторно,
		|	ДанныеГрафика.ПроизводственныйКалендарьШестидневкаФактическийПериодДействия
		|ПОМЕСТИТЬ ВТДанныеГрафика
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ДанныеГрафика(
		|			ПериодДействия МЕЖДУ &парамДатаС И &парамДатаПо
		|				И Сотрудник В
		|					(ВЫБРАТЬ
		|						ЗаписиДанныхДляСреднего.Сотрудник
		|					ИЗ
		|						ВТЗаписиДанныхДляСреднего КАК ЗаписиДанныхДляСреднего)) КАК ДанныеГрафика
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Сотрудник,
		|	ВидРасчета
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ПериодРегистрации,
		|	ОсновныеНачисления.ПериодДействия,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	СУММА(РабочееВремя.Дней) КАК Дней,
		|	СУММА(РабочееВремя.Часов) КАК Часов
		|ПОМЕСТИТЬ ВТПрогулыПоТабелюФПД
		|ИЗ
		|	ВТДанныеФПД КАК ОсновныеНачисления
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремя
		|		ПО ОсновныеНачисления.Сотрудник = РабочееВремя.Сотрудник
		|			И (ОсновныеНачисления.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю))
		|			И (РабочееВремя.Период МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
		|			И (РабочееВремя.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы))
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ПериодРегистрации,
		|	ОсновныеНачисления.ПериодДействия
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ДанныеГрафика.Сотрудник,
		|	ДанныеГрафика.ПериодРегистрации,
		|	ДанныеГрафика.ПериодДействия,
		|	ДанныеГрафика.ПроизводственныйКалендарьШестидневкаФактическийПериодДействия
		|ПОМЕСТИТЬ ВТПрогулыПоТабелюДанныеГрафика
		|ИЗ
		|	ВТДанныеГрафика КАК ДанныеГрафика
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.РабочееВремяРаботниковОрганизаций КАК РабочееВремя
		|		ПО ДанныеГрафика.Сотрудник = РабочееВремя.Сотрудник
		|			И (ДанныеГрафика.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ДниНеоплачиваемыеСогласноТабелю))
		|			И (РабочееВремя.Период МЕЖДУ ДанныеГрафика.ПериодДействияНачало И ДанныеГрафика.ПериодДействияКонец)
		|			И (РабочееВремя.ВидИспользованияРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	0 КАК НомерСтроки,
		|	ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КАК БазовыйПериодНачало,
		|	0 КАК ОтработаноПоПятидневке,
		|	0 КАК ОтработаноДней,
		|	0 КАК ОтработаноЧасов
		|ПОМЕСТИТЬ ВТДополнительныеДанные
		|ГДЕ
		|	ЛОЖЬ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ОтработанноеВремя.НомерСтроки КАК НомерСтроки,
		|	СУММА(ОтработанноеВремя.ОтработаноПоПятидневке) КАК ОтработаноПоПятидневке,
		|	НормаПоПроизвКалендарю.НормаПоПятидневкеПоПроизвКалендарю,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.БазовыйПериодНачало, МЕСЯЦ) <> ОтработанноеВремя.БазовыйПериодНачало
		|				ТОГДА 0
		|			ИНАЧЕ ОтработанноеВремя.ОтработаноДней
		|		КОНЕЦ) КАК ОтработаноДней,
		|	СУММА(ВЫБОР
		|			КОГДА НАЧАЛОПЕРИОДА(ОтработанноеВремя.БазовыйПериодНачало, МЕСЯЦ) <> ОтработанноеВремя.БазовыйПериодНачало
		|				ТОГДА 0
		|			ИНАЧЕ ОтработанноеВремя.ОтработаноЧасов
		|		КОНЕЦ) КАК ОтработаноЧасов
		|ИЗ
		|	(ВЫБРАТЬ
		|		ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
		|		ЗаписиРасчетаСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|		0 КАК ОтработаноПоПятидневке,
		|		ВЫБОР
		|			КОГДА ОсновныеНачисленияРаботников.Сторно
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ * РАЗНОСТЬДАТ(ОсновныеНачисленияРаботников.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ОсновныеНачисленияРаботников.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ) КАК ОтработаноДней,
		|		0 КАК ОтработаноЧасов
		|	ИЗ
		|		ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ОсновныеНачисленияРаботников.Сотрудник КАК Сотрудник,
		|				ОсновныеНачисленияРаботников.ПериодРегистрации КАК ПериодРегистрации,
		|				ОсновныеНачисленияРаботников.ПериодДействия КАК ПериодДействия,
		|				ОсновныеНачисленияРаботников.Сторно КАК Сторно,
		|				ОсновныеНачисленияРаботников.ПериодДействияНачало КАК ПериодДействияНачало,
		|				ОсновныеНачисленияРаботников.ПериодДействияКонец КАК ПериодДействияКонец
		|			ИЗ
		|				ВТДанныеФПД КАК ОсновныеНачисленияРаботников
		|			ГДЕ
		|				ОсновныеНачисленияРаботников.ВидРасчета В
		|						(ВЫБРАТЬ
		|							БазовыеРасчеты.ВидРасчета
		|						ИЗ
		|							ВТБазовыеРасчеты КАК БазовыеРасчеты)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ВТПрогулыТабеля.Сотрудник,
		|				ВТПрогулыТабеля.ПериодРегистрации,
		|				ВТПрогулыТабеля.ПериодДействия,
		|				ЛОЖЬ,
		|				ВТПрогулыТабеля.ПериодДействияНачало,
		|				ВТПрогулыТабеля.ПериодДействияКонец
		|			ИЗ
		|				ВТПрогулыПоТабелюФПД КАК ВТПрогулыТабеля) КАК ОсновныеНачисленияРаботников
		|			ПО ЗаписиРасчетаСреднего.Сотрудник = ОсновныеНачисленияРаботников.Сотрудник
		|				И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОсновныеНачисленияРаботников.ПериодРегистрации
		|				И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОсновныеНачисленияРаботников.ПериодДействия)
		|	ГДЕ
		|		ЗаписиРасчетаСреднего.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий))
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаписиРасчетаСреднего.НомерСтроки,
		|		ЗаписиРасчетаСреднего.БазовыйПериодНачало,
		|		0,
		|		ВЫБОР
		|			КОГДА ОсновныеНачисленияРаботников.Сторно
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ,
		|		0
		|	ИЗ
		|		ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеФПД КАК ОсновныеНачисленияРаботников
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТПраздники КАК Праздники
		|				ПО (Праздники.Праздник МЕЖДУ ОсновныеНачисленияРаботников.ПериодДействияНачало И ОсновныеНачисленияРаботников.ПериодДействияКонец)
		|			ПО ЗаписиРасчетаСреднего.Сотрудник = ОсновныеНачисленияРаботников.Сотрудник
		|				И ((НЕ ОсновныеНачисленияРаботников.ВидРасчета В
		|						(ВЫБРАТЬ
		|							БазовыеРасчеты.ВидРасчета
		|						ИЗ
		|							ВТБазовыеРасчеты КАК БазовыеРасчеты)))
		|				И (ОсновныеНачисленияРаботников.ВидРасчета В
		|					(ВЫБРАТЬ
		|						БазовыеРасчеты.ВидРасчета
		|					ИЗ
		|						ВТВидыРасчетаЕжегодныхОтпусков КАК БазовыеРасчеты))
		|				И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОсновныеНачисленияРаботников.ПериодРегистрации
		|				И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОсновныеНачисленияРаботников.ПериодДействия)
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций КАК УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций
		|			ПО ЗаписиРасчетаСреднего.Организация = УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.Организация
		|	ГДЕ
		|		ЗаписиРасчетаСреднего.ВидРасчета В (ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010), ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий))
		|		И Праздники.Праздник ЕСТЬ НЕ NULL 
		|		И НЕ ЕСТЬNULL(УчетнаяПолитикаПоРасчетуЗарплатыОрганизаций.НеУчитыватьПраздникиВоВремяОтпускаПриОплатеБольничных, ЛОЖЬ)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДанныеИндексируемыйЗаработок.НомерСтроки,
		|		ДанныеИндексируемыйЗаработок.БазовыйПериодНачало,
		|		ДанныеИндексируемыйЗаработок.ОтработаноПоПятидневке,
		|		ДанныеИндексируемыйЗаработок.ОтработаноДней,
		|		ДанныеИндексируемыйЗаработок.ОтработаноЧасов
		|	ИЗ
		|		(ВЫБРАТЬ
		|			ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
		|			ЗаписиРасчетаСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
		|			0 КАК ОтработаноПоПятидневке,
		|			ВЫБОР
		|				КОГДА ОтработанноеВремя.ВидРасчета В (&Прогулы)
		|					ТОГДА ОтработанноеВремя.НормаДней
		|				ИНАЧЕ ОтработанноеВремя.ОтработаноДней
		|			КОНЕЦ КАК ОтработаноДней,
		|			ВЫБОР
		|				КОГДА ОтработанноеВремя.ВидРасчета В (&Прогулы)
		|					ТОГДА ОтработанноеВремя.НормаЧасов
		|				ИНАЧЕ ОтработанноеВремя.ОтработаноЧасов
		|			КОНЕЦ КАК ОтработаноЧасов
		|		ИЗ
		|			ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремя
		|				ПО ЗаписиРасчетаСреднего.Сотрудник = ОтработанноеВремя.Сотрудник
		|					И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОтработанноеВремя.ПериодРегистрации
		|					И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОтработанноеВремя.ПериодДействия)
		|					И (ОтработанноеВремя.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
		|						ИЛИ ОтработанноеВремя.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы)
		|						ИЛИ ОтработанноеВремя.ВидРасчета.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы))
		|		ГДЕ
		|			ЗаписиРасчетаСреднего.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые)
		|			И ЗаписиРасчетаСреднего.СпособРасчета В(&парамНеОтпуск)
		|		
		|		ОБЪЕДИНИТЬ ВСЕ
		|		
		|		ВЫБРАТЬ
		|			ЗаписиРасчетаСреднего.НомерСтроки,
		|			ЗаписиРасчетаСреднего.БазовыйПериодНачало,
		|			0,
		|			ОтработанноеВремя.Дней,
		|			ОтработанноеВремя.Часов
		|		ИЗ
		|			ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТПрогулыПоТабелюФПД КАК ОтработанноеВремя
		|				ПО ЗаписиРасчетаСреднего.Сотрудник = ОтработанноеВремя.Сотрудник
		|					И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОтработанноеВремя.ПериодРегистрации
		|					И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОтработанноеВремя.ПериодДействия)
		|		ГДЕ
		|			ЗаписиРасчетаСреднего.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые)
		|			И ЗаписиРасчетаСреднего.СпособРасчета В(&парамНеОтпуск)) КАК ДанныеИндексируемыйЗаработок
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаписиРасчетаСреднего.НомерСтроки,
		|		ЗаписиРасчетаСреднего.БазовыйПериодНачало,
		|		0,
		|		ВЫБОР
		|			КОГДА ОсновныеНачисленияРаботников.Сотрудник ЕСТЬ NULL 
		|				ТОГДА 0
		|			КОГДА СУММА(ВЫБОР
		|						КОГДА ОсновныеНачисленияРаботников.Сторно
		|							ТОГДА -1
		|						ИНАЧЕ 1
		|					КОНЕЦ * РАЗНОСТЬДАТ(ОсновныеНачисленияРаботников.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ОсновныеНачисленияРаботников.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ)) < РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ), ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодКонец, МЕСЯЦ), СЕКУНДА, 1), ДЕНЬ)
		|				ТОГДА ВЫРАЗИТЬ(29.4 / РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ), ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодКонец, МЕСЯЦ), СЕКУНДА, 1), ДЕНЬ) * СУММА(ВЫБОР
		|								КОГДА ОсновныеНачисленияРаботников.Сторно
		|									ТОГДА -1
		|								ИНАЧЕ 1
		|							КОНЕЦ * РАЗНОСТЬДАТ(ОсновныеНачисленияРаботников.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(ОсновныеНачисленияРаботников.ПериодДействияКонец, СЕКУНДА, 1), ДЕНЬ)) КАК ЧИСЛО(7, 2))
		|			ИНАЧЕ 29.4
		|		КОНЕЦ,
		|		0
		|	ИЗ
		|		ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ОсновныеНачисленияРаботников.Сотрудник КАК Сотрудник,
		|				ОсновныеНачисленияРаботников.ПериодРегистрации КАК ПериодРегистрации,
		|				ОсновныеНачисленияРаботников.ПериодДействия КАК ПериодДействия,
		|				ОсновныеНачисленияРаботников.Сторно КАК Сторно,
		|				ОсновныеНачисленияРаботников.ПериодДействияНачало КАК ПериодДействияНачало,
		|				ОсновныеНачисленияРаботников.ПериодДействияКонец КАК ПериодДействияКонец
		|			ИЗ
		|				ВТДанныеФПД КАК ОсновныеНачисленияРаботников
		|			ГДЕ
		|				ОсновныеНачисленияРаботников.ВидРасчета В
		|						(ВЫБРАТЬ
		|							БазовыеРасчеты.ВидРасчета
		|						ИЗ
		|							ВТБазовыеРасчетыОтпуска КАК БазовыеРасчеты)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ВТПрогулыТабеля.Сотрудник,
		|				ВТПрогулыТабеля.ПериодРегистрации,
		|				ВТПрогулыТабеля.ПериодДействия,
		|				ЛОЖЬ,
		|				ВТПрогулыТабеля.ПериодДействияНачало,
		|				ВТПрогулыТабеля.ПериодДействияКонец
		|			ИЗ
		|				ВТПрогулыПоТабелюФПД КАК ВТПрогулыТабеля) КАК ОсновныеНачисленияРаботников
		|			ПО ЗаписиРасчетаСреднего.Сотрудник = ОсновныеНачисленияРаботников.Сотрудник
		|				И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОсновныеНачисленияРаботников.ПериодРегистрации
		|				И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОсновныеНачисленияРаботников.ПериодДействия)
		|	ГДЕ
		|		ЗаписиРасчетаСреднего.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые)
		|		И ЗаписиРасчетаСреднего.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ОсновныеНачисленияРаботников.Сотрудник,
		|		ЗаписиРасчетаСреднего.НомерСтроки,
		|		ЗаписиРасчетаСреднего.БазовыйПериодНачало,
		|		ЗаписиРасчетаСреднего.БазовыйПериодКонец
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаписиРасчетаСреднего.НомерСтроки,
		|		ЗаписиРасчетаСреднего.БазовыйПериодНачало,
		|		0,
		|		ВЫБОР
		|			КОГДА ОсновныеНачисленияРаботников.Сторно
		|				ТОГДА -1
		|			ИНАЧЕ 1
		|		КОНЕЦ * ОсновныеНачисленияРаботников.ПроизводственныйКалендарьШестидневкаФактическийПериодДействия,
		|		0
		|	ИЗ
		|		ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|				ОсновныеНачисленияРаботников.Сотрудник КАК Сотрудник,
		|				ОсновныеНачисленияРаботников.ПериодРегистрации КАК ПериодРегистрации,
		|				ОсновныеНачисленияРаботников.ПериодДействия КАК ПериодДействия,
		|				ОсновныеНачисленияРаботников.ПроизводственныйКалендарьШестидневкаФактическийПериодДействия КАК ПроизводственныйКалендарьШестидневкаФактическийПериодДействия,
		|				ОсновныеНачисленияРаботников.Сторно КАК Сторно
		|			ИЗ
		|				ВТДанныеГрафика КАК ОсновныеНачисленияРаботников
		|			ГДЕ
		|				ОсновныеНачисленияРаботников.ВидРасчета В
		|						(ВЫБРАТЬ
		|							БазовыеРасчеты.ВидРасчета
		|						ИЗ
		|							ВТБазовыеРасчетыОтпуска КАК БазовыеРасчеты)
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ
		|				ВТПрогулыТабеля.Сотрудник,
		|				ВТПрогулыТабеля.ПериодРегистрации,
		|				ВТПрогулыТабеля.ПериодДействия,
		|				ВТПрогулыТабеля.ПроизводственныйКалендарьШестидневкаФактическийПериодДействия,
		|				ЛОЖЬ
		|			ИЗ
		|				ВТПрогулыПоТабелюДанныеГрафика КАК ВТПрогулыТабеля) КАК ОсновныеНачисленияРаботников
		|			ПО ЗаписиРасчетаСреднего.Сотрудник = ОсновныеНачисленияРаботников.Сотрудник
		|				И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОсновныеНачисленияРаботников.ПериодРегистрации
		|				И (НАЧАЛОПЕРИОДА(ЗаписиРасчетаСреднего.БазовыйПериодНачало, МЕСЯЦ) = ОсновныеНачисленияРаботников.ПериодДействия)
		|	ГДЕ
		|		ЗаписиРасчетаСреднего.ВидРасчета = ЗНАЧЕНИЕ(ПланВидовРасчета.СреднийЗаработок.ПоЗаработкуИндексируемые)
		|		И ЗаписиРасчетаСреднего.СпособРасчета = ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ЗаписиРасчетаСреднего.НомерСтроки,
		|		ЗаписиРасчетаСреднего.БазовыйПериодНачало,
		|		ВЫБОР
		|			КОГДА ЗаписиРасчетаСреднего.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|				ТОГДА ОтработанноеВремя.ОтработаноДнейПоПятидневке
		|			ИНАЧЕ ОтработанноеВремя.ОтработаноЧасовПоПятидневке
		|		КОНЕЦ,
		|		0,
		|		0
		|	ИЗ
		|		ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОтработанноеВремя
		|			ПО ЗаписиРасчетаСреднего.Сотрудник = ОтработанноеВремя.Сотрудник
		|				И ЗаписиРасчетаСреднего.ПериодРегистрации >= ОтработанноеВремя.ПериодРегистрации
		|				И ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода <= ОтработанноеВремя.ПериодДействияКонец
		|				И ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода >= ОтработанноеВремя.ПериодДействияНачало
		|				И (ОтработанноеВремя.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеВПределахНормы)
		|					ИЛИ ОтработанноеВремя.ВидРасчета.ВидВремени = ЗНАЧЕНИЕ(Перечисление.ВидыВремени.ОтработанноеСверхНормы))
		|	ГДЕ
		|		ЗаписиРасчетаСреднего.ВидРасчета В(&ФиксПремии)
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		ДополнительныеДанные.НомерСтроки,
		|		ДополнительныеДанные.БазовыйПериодНачало,
		|		ДополнительныеДанные.ОтработаноПоПятидневке,
		|		ДополнительныеДанные.ОтработаноДней,
		|		ДополнительныеДанные.ОтработаноЧасов
		|	ИЗ
		|		ВТДополнительныеДанные КАК ДополнительныеДанные) КАК ОтработанноеВремя
		|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
		|			ЗаписиРасчетаСреднего.НомерСтроки КАК НомерСтроки,
		|			СУММА(ВЫБОР
		|					КОГДА ЗаписиРасчетаСреднего.ВидРасчета В (&ФиксПремии)
		|						ТОГДА ВЫБОР
		|								КОГДА ЗаписиРасчетаСреднего.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоДням)
		|									ТОГДА НормаПоПроизвКалендарю.ДнейПоПятидневке
		|								ИНАЧЕ НормаПоПроизвКалендарю.ЧасовПоПятидневке
		|							КОНЕЦ
		|					ИНАЧЕ 0
		|				КОНЕЦ) КАК НормаПоПятидневкеПоПроизвКалендарю
		|		ИЗ
		|			ВТЗаписиДанныхДляСреднего КАК ЗаписиРасчетаСреднего
		|				ЛЕВОЕ СОЕДИНЕНИЕ ВТНормаПоПроизвКалендарю КАК НормаПоПроизвКалендарю
		|				ПО (НормаПоПроизвКалендарю.МесяцПериода МЕЖДУ ЗаписиРасчетаСреднего.ДатаНачалаРасчетногоПериода И ЗаписиРасчетаСреднего.ДатаОкончанияРасчетногоПериода)
		|		
		|		СГРУППИРОВАТЬ ПО
		|			ЗаписиРасчетаСреднего.НомерСтроки) КАК НормаПоПроизвКалендарю
		|		ПО ОтработанноеВремя.НомерСтроки = НормаПоПроизвКалендарю.НомерСтроки
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтработанноеВремя.НомерСтроки,
		|	НормаПоПроизвКалендарю.НормаПоПятидневкеПоПроизвКалендарю
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";*/
				/*// в запросе по отработанному времени отдельно обрабатываются прогулы - выберем их список
*/
				/*ЗапросПВР = Новый Запрос(
		"ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка КАК Ссылка
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
		|	И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы)
		|");*/
				//Запрос.УстановитьПараметр("Прогулы", ЗапросПВР.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
				//СписокСпособов = Новый Массив();
				//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
				//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
				//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
				//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
				//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет);
				//Запрос.УстановитьПараметр("парамНеОтпуск", СписокСпособов);
			}
		}
		// ДописатьАлгоритмВЗапрос()
		// Для указанного алгоритма расчетывает ресурсы записи регистра расчетов

		public object РассчитатьРесурсыПоАлгоритму(/*ИмяАлгоритма = "", КомментироватьРасчет = Ложь, Знач КомментарийВидаРасчета = Неопределено, СтрокаДвижений = Неопределено, ИсходныеДанные = Неопределено*/)
		{
			if(true/*ИмяАлгоритма = "ПоСреднемуЗаработкуДляОтпуска"*/)
			{
				//ОплачиваемоеВремя = ?(Не ЗначениеЗаполнено(ИсходныеДанные.ОплачиваемыеДниОтпуска), 0, ИсходныеДанные.ОплачиваемыеДниОтпуска);
				if(true/*СтрокаДвижений.Сторно Или Не ЗначениеЗаполнено(ИсходныеДанные.ВидПособияСоциальногоСтрахования) Или Не ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(СтрокаДвижений.ПериодРегистрации, СтрокаДвижений.ОбособленноеПодразделение)*/)
				{
					if(true/*НЕ СтрокаДвижений.Сторно*/)
					{
						if(true/*ИсходныеДанные.СреднийЗаработок = NULL 
					ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам и ИсходныеДанные.ОтработаноЧасов = 0
					ИЛИ СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням и ИсходныеДанные.ОтработаноДнейПоСреднему = 0*/)
						{
							//ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
							//СтрокаДвижений.Результат = 0;
						}
					}
					//ПроцентОплаты = ?(СтрокаДвижений.Показатель1 = 0, 100, СтрокаДвижений.Показатель1);
					if(true/*КомментироватьРасчет*/)
					{
						//ОбщегоНазначенияЗК.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
						//ОбщегоНазначенияЗК.КомментарийРасчета("Дни отпуска: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
					}
					if(true/*СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам*/)
					{
						/*// переводим дни в часы: количество недель отпуска * длительность рабочей недели
*/
						//ОплачиваемоеВремя = ОплачиваемоеВремя / ИсходныеДанные.ЧислоДнейВНеделе * ИсходныеДанные.ДлительностьРабочейНедели;
						if(true/*КомментироватьРасчет*/)
						{
							//ОбщегоНазначенияЗК.КомментарийРасчета("Часы отпуска: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
						}
					}
					/*// Рассчитаем заработок за день (или за час для суммированного учета времени)
*/
					/*// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
*/
					if(true/*НЕ СтрокаДвижений.Сторно*/)
					{
						if(true/*СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам*/)
						{
							//ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработок / ИсходныеДанные.ОтработаноЧасовПоСреднему,2);
						}
						/*// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
*/
						//СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
					}
					//Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100;
					//СтрокаДвижений.Результат = Результат;
					if(true/*КомментироватьРасчет*/)
					{
						//ОбщегоНазначенияЗК.КомментарийРасчета(?(СтрокаДвижений.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам,"Среднечасовой заработок: ","Среднедневной заработок: ") + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
					}
				}
				//СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			}
			if(true/*ИмяАлгоритма = "ПоСреднемуЗаработкуФСС2011"*/)
			{
				//ОплачиваемоеВремя = ?(Не ЗначениеЗаполнено(ИсходныеДанные.КалендарныхДней), 0, ИсходныеДанные.КалендарныхДней);
				if(true/*Не ЗначениеЗаполнено(ИсходныеДанные.ВидПособияСоциальногоСтрахования) Или Не ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(СтрокаДвижений.ПериодРегистрации, СтрокаДвижений.ОбособленноеПодразделение)*/)
				{
					//ДатаЗакона = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
					if(true/*СтрокаДвижений.ПериодРегистрации < ДатаЗакона Или СтрокаДвижений.ПериодДействияНачало < ДатаЗакона*/)
					{
					}
					if(true/*ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мБезОграничений 
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничением
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничениемИВРазмереММОТ
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОграничениемВРазмереММОТ*/)
					{
					}
					if(true/*Не ЗначениеЗаполнено(ОплачиваемоеВремя)*/)
					{
						//ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет оплачиваемых дней в заданном периоде");
						//СтрокаДвижений.Результат = 0;
						//СтрокаДвижений.ДополнительныйРезультат = 0;
					}
					//ЭтоПереходныйПериод = СтрокаДвижений.ДатаНачалаСобытия < ДатаЗакона И СтрокаДвижений.ПериодДействияНачало >= ДатаЗакона;
					if(true/*ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуБезОграничений 
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничением
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничениемИВРазмереММОТ
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОграничениемВРазмереММОТ*/)
					{
						//ЭтоПереходныйПериод = Ложь;
					}
					if(true/*ЭтоПереходныйПериод*/)
					{
						//РезультатПоПравилам2010Года = 0;
						//ДополнительныйРезультатПоПравилам2010Года = 0;
						//ЗаработокЗаЕдиницуВремени2010Года = 0;
						if(true/*КомментироватьРасчет*/)
						{
							//ОбщегоНазначенияЗК.КомментарийРасчета("Пособие по страховому случаю, произошедшему до " + ДатаЗакона + ", за период после " + ДатаЗакона + " выплачивается по правилам 2011 года в том случае, если полученный результат превышает пособие, положенное по правилам 2010 года.", КомментарийВидаРасчета);
							//КомментарийСтарогоПорядка = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет по правилам 2010 года", КомментарийВидаРасчета);
						}
						if(true/*РассчитатьРесурсыПоАлгоритму("ПоСреднемуЗаработкуФСС213ФЗ", КомментироватьРасчет, КомментарийСтарогоПорядка, СтрокаДвижений, ИсходныеДанные)*/)
						{
							//РезультатПоПравилам2010Года = СтрокаДвижений.Результат;
							//ДополнительныйРезультатПоПравилам2010Года = СтрокаДвижений.ДополнительныйРезультат;
							//ЗаработокЗаЕдиницуВремени2010Года = СтрокаДвижений.ДополнительныеДанные;
							//СтрокаДвижений.Результат = 0;
							//СтрокаДвижений.ДополнительныйРезультат = 0;
						}
						if(true/*КомментироватьРасчет*/)
						{
							//КомментарийВидаРасчета = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет по правилам 2011 года", КомментарийВидаРасчета);
						}
					}
					//ПроцентОплаты = СтрокаДвижений.Показатель1;
					//ПроцентОплатыБезЛьгот = СтрокаДвижений.Показатель2;
					if(true/*КомментироватьРасчет*/)
					{
						//ОбщегоНазначенияЗК.КомментарийРасчета("Процент оплаты от среднего заработка: " + ПроцентОплаты, КомментарийВидаРасчета);
						//ОбщегоНазначенияЗК.КомментарийРасчета("Оплачивается " + ОплачиваемоеВремя + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день", "дня", "дней", ОплачиваемоеВремя), КомментарийВидаРасчета);
					}
					if(true/*ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуБезОграничений 
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничением
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничениемИВРазмереММОТ
				Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОграничениемВРазмереММОТ*/)
					{
						//УчитываемыхДнейВКалендарныхГодах = ИсходныеДанные.ОтработаноДнейДляПособийПоМатеринству;
					}
					/*ОграничениеВРазмереММОТ = ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОграничениемВРазмереММОТ
					Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОграничениемВРазмереММОТ;*/
					/*// Рассчитаем заработок за день
*/
					/*// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
*/
					if(true/*НЕ СтрокаДвижений.Сторно*/)
					{
						if(true/*ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйБезОграничений Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуБезОграничений*/)
						{
							//ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий2011БезОграничений / УчитываемыхДнейВКалендарныхГодах,2);
							if(true/*КомментироватьРасчет*/)
							{
								//ОбщегоНазначенияЗК.КомментарийРасчета("Пособие начисляется без ограничений", КомментарийВидаРасчета);
								//ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
							}
						}
						/*// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
*/
						//СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
					}
					//НормаВремени = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
					//РайонныйКоэффициентДляУвеличенияПособия = Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
					/*// Ограничение пособия сверху
*/
					if(true/*ОграничениеВРазмереММОТ*/)
					{
						//РазмерОграниченияСверху = ИсходныеДанные.РазмерММОТ * РайонныйКоэффициентДляУвеличенияПособия;
						if(true/*ОплачиваемоеВремя < НормаВремени*/)
						{
							//ОграничениеПособия = Окр(РазмерОграниченияСверху / НормаВремени * ОплачиваемоеВремя,2);
							if(true/*КомментироватьРасчет*/)
							{
								//ОбщегоНазначенияЗК.КомментарийРасчета("Максимальный размер пособия рассчитан из МРОТ в сумме " + ИсходныеДанные.РазмерММОТ + ?(РайонныйКоэффициентДляУвеличенияПособия = 1,"", " с учетом районного коэффициента в размере " + РайонныйКоэффициентДляУвеличенияПособия), КомментарийВидаРасчета);
								//ОбщегоНазначенияЗК.КомментарийРасчета("Максимальный размер за оплачиваемый период составляет: " + ОграничениеПособия, КомментарийВидаРасчета);
							}
						}
					}
					/*// Ограничение заработка снизу
*/
					//РазмерОграниченияСнизу = ИсходныеДанные.РазмерММОТНаДатуДатаНачалаСобытия * Мин(ИсходныеДанные.ДоляММОТ, 1);
					if(true/*КомментироватьРасчет*/)
					{
						//ОбщегоНазначенияЗК.КомментарийРасчета("Минимальный размер среднедневногого заработка рассчитан из МРОТ в сумме " + ИсходныеДанные.РазмерММОТНаДатуДатаНачалаСобытия + ?(Мин(ИсходныеДанные.ДоляММОТ, 1) = 1,"", " дополнительно учитывается коэффициент неполного рабочего времени в размере " + Мин(ИсходныеДанные.ДоляММОТ, 1)), КомментарийВидаРасчета);
					}
					if(true/*ЗаработокЗаЕдиницуВремени < РазмерОграниченияСнизу * 24 / 730*/)
					{
						//ЗаработокЗаЕдиницуВремени = Окр(РазмерОграниченияСнизу * 24 / 730, 2);
						if(true/*КомментироватьРасчет*/)
						{
							//ОбщегоНазначенияЗК.КомментарийРасчета("В качестве заработка за месяц принята сумма: " + РазмерОграниченияСнизу + ?(РайонныйКоэффициентДляУвеличенияПособия <= 1, "", "; при исчислении пособия будет учтен РК " + ИсходныеДанные.РайонныйКоэффициентРФОрганизации), КомментарийВидаРасчета);
						}
					}
					//ДневноеПособие = Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2);
					if(true/*КомментироватьРасчет*/)
					{
						//ОбщегоНазначенияЗК.КомментарийРасчета("Размер дневного пособия составил: " + ДневноеПособие, КомментарийВидаРасчета);
					}
					//Результат = Окр(ОплачиваемоеВремя * ДневноеПособие * РайонныйКоэффициентДляУвеличенияПособия,2);
					if(true/*ОграничениеВРазмереММОТ*/)
					{
						//Результат = Мин(Результат, ОграничениеПособия);
					}
					//СтрокаДвижений.Результат = Результат;
					/*// часть пособия, финансируемая федеральным бюджетом
*/
					if(true/*ЗначениеЗаполнено(ПроцентОплатыБезЛьгот) И ЗначениеЗаполнено(ИсходныеДанные.ВидПособияСоциальногоСтрахования)*/)
					{
						//ДневноеПособие = Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплатыБезЛьгот / 100,2);
						//Результат = Окр(ОплачиваемоеВремя * ДневноеПособие * РайонныйКоэффициентДляУвеличенияПособия,2);
						if(true/*ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемИВРазмереММОТС2010года*/)
						{
							//РазмерОграниченияСверху = ИсходныеДанные.РазмерММОТ * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
							if(true/*ОплачиваемоеВремя < НормаВремени*/)
							{
								//ОграничениеПособия = Окр(РазмерОграниченияСверху / НормаВремени * ОплачиваемоеВремя,2);
							}
						}
						if(true/*РазмерОграниченияСверху <> 0*/)
						{
							//Результат = Мин(Результат, ОграничениеПособия);
						}
						if(true/*Результат < СтрокаДвижений.Результат*/)
						{
							//СтрокаДвижений.ДополнительныйРезультат = (СтрокаДвижений.Результат - Результат) * ?(СтрокаДвижений.Сторно,-1,1);
							if(true/*КомментироватьРасчет*/)
							{
								//ОбщегоНазначенияЗК.КомментарийРасчета("Часть пособия, финансируемая Федеральным бюджетом, составляет: " + (СтрокаДвижений.Результат - Результат), КомментарийВидаРасчета);
							}
						}
					}
					if(true/*ЭтоПереходныйПериод*/)
					{
						if(true/*КомментироватьРасчет*/)
						{
							//КомментарийВидаРасчета = КомментарийВидаРасчета.Родитель;
						}
						if(true/*СтрокаДвижений.Сторно Или СтрокаДвижений.Результат < РезультатПоПравилам2010Года*/)
						{
							if(true/*Не СтрокаДвижений.Сторно*/)
							{
								//СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени2010Года;
								if(true/*КомментироватьРасчет*/)
								{
									//ОбщегоНазначенияЗК.КомментарийРасчета("Пособие начислено по правилам 2010 года", КомментарийВидаРасчета);
								}
							}
							//СтрокаДвижений.Результат = РезультатПоПравилам2010Года;
							//СтрокаДвижений.ДополнительныйРезультат = ДополнительныйРезультатПоПравилам2010Года;
						}
					}
				}
				//СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
			}
			if(true/*ИмяАлгоритма = "ПоСреднемуЗаработкуФСС213ФЗ"*/)
			{
				//ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
				if(true/*СтрокаДвижений.ПериодРегистрации < ДатаЗакона213ФЗ Или СтрокаДвижений.ПериодДействияНачало < ДатаЗакона213ФЗ*/)
				{
				}
				if(true/*НЕ СтрокаДвижений.Сторно*/)
				{
					if(true/*Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработокПособий2010)*/)
					{
						//ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
						//СтрокаДвижений.Результат = 0;
						//СтрокаДвижений.ДополнительныйРезультат = 0;
					}
				}
				//ПроцентОплаты = СтрокаДвижений.Показатель1;
				//ПроцентОплатыБезЛьгот = СтрокаДвижений.Показатель2;
				//ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныхДней = Null, 0,ИсходныеДанные.КалендарныхДней);
				/*// Рассчитаем заработок за день 
*/
				/*// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
*/
				if(true/*НЕ СтрокаДвижений.Сторно*/)
				{
					//ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий2010 / ИсходныеДанные.ОтработаноДнейПособий2010,2);
					/*// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
*/
					//СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				}
				//НормаВремени = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				if(true/*КомментироватьРасчет*/)
				{
					//ОбщегоНазначенияЗК.КомментарийРасчета("Процент оплаты: " + ПроцентОплаты, КомментарийВидаРасчета);
					//ОбщегоНазначенияЗК.КомментарийРасчета("Оплачивается " + ОплачиваемоеВремя + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день", "дня", "дней", ОплачиваемоеВремя), КомментарийВидаРасчета);
					//ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
				}
				if(true/*ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемС2010года 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничением*/)
				{
					//РазмерОграничения = ИсходныеДанные.РазмерОбщегоОграничения2010 / 365;
				}
				if(true/*РазмерОграничения = 0*/)
				{
					//Результат = ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплаты / 100,2);
					if(true/*КомментироватьРасчет*/)
					{
						//ОбщегоНазначенияЗК.КомментарийРасчета("Пособие начисляется без ограничений", КомментарийВидаРасчета);
					}
				}
				//СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
				//СтрокаДвижений.Результат = Результат;
				if(true/*ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйСОбщимОграничениемИВРазмереММОТС2010года 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничениемИВРазмереММОТ*/)
				{
					//РазмерОграничения = ИсходныеДанные.РазмерММОТ * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
				}
				if(true/*ЗначениеЗаполнено(ПроцентОплатыБезЛьгот) И ЗначениеЗаполнено(ИсходныеДанные.ВидПособияСоциальногоСтрахования)*/)
				{
					//Результат = 0;
					if(true/*РазмерОграничения = 0*/)
					{
						//Результат = ОплачиваемоеВремя * Окр(ЗаработокЗаЕдиницуВремени * ПроцентОплатыБезЛьгот / 100,2);
					}
					if(true/*Результат < СтрокаДвижений.Результат*/)
					{
						//СтрокаДвижений.ДополнительныйРезультат = (СтрокаДвижений.Результат - Результат) * ?(СтрокаДвижений.Сторно,-1,1);
						if(true/*КомментироватьРасчет*/)
						{
							//ОбщегоНазначенияЗК.КомментарийРасчета("Часть пособия, финансируемая Федеральным бюджетом, составляет: " + (СтрокаДвижений.Результат - Результат), КомментарийВидаРасчета);
						}
					}
				}
			}
			if(true/*ИмяАлгоритма = "ПособиеПоУходуЗаРебенком213ФЗ"*/)
			{
				if(true/*СтрокаДвижений.Показатель2 = 0*/)
				{
					//ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Не указано количество детей, за которыми производится уход ");
					//СтрокаДвижений.Результат = 0;
				}
				//ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
				//ДатаЗакона343ФЗ = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
				//КалендарныхДнейВМесяце = День(КонецМесяца(ИсходныеДанные.ПериодДействияНачало));
				//ОплачиваемыеДни = ИсходныеДанные.КалендарныхДней;
				/*// календарных дней за фактический период действия
*/
				if(true/*Не ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(СтрокаДвижений.ПериодРегистрации, СтрокаДвижений.ОбособленноеПодразделение)*/)
				{
					//КоличествоДетейВсего = СтрокаДвижений.Показатель2;
					//КоличествоПервыхДетей = СтрокаДвижений.Показатель3;
					if(true/*ИсходныеДанные.ПериодДействияНачало < ДатаЗакона213ФЗ*/)
					{
						/*// часть 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»: 
*/
						/*//	"В случае ухода за двумя и более детьми до достижения ими возраста полутора лет размер пособия, исчисленный в 
*/
						/*//	соответствии с частями первой и второй настоящей статьи, суммируется. При этом суммированный размер пособия, 
*/
						/*//	исчисленный исходя из среднего заработка (дохода, денежного довольствия), не может превышать 100 процентов 
*/
						/*//	размера указанного заработка (дохода, денежного довольствия)."
*/
						//ПроцентОплаты = Мин(40 * КоличествоДетейВсего,100);
						/*// части 3 и 4 ст. 15 Федерального закона от 19 мая 1995 года № 81-ФЗ «О государственных пособиях гражданам, имеющим детей»: 
*/
						/*//	"В районах и местностях, в которых в установленном порядке применяются районные коэффициенты к заработной плате, 
*/
						/*//	минимальный и максимальный размеры указанного пособия определяются с учетом этих коэффициентов."
*/
						/*//	"...суммированный размер пособия ... не может быть менее суммированного минимального размера пособия"
*/
						/*ОграничениеПособияСнизу = (ИсходныеДанные.МинимумПособияПоУходуЗаПервымРебенкомДоПолутораЛет * КоличествоПервыхДетей 
					+ ИсходныеДанные.МинимумПособияПоУходуЗаПоследующимРебенкомДоПолутораЛет * (КоличествоДетейВсего - КоличествоПервыхДетей)) * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);*/
						//ОграничениеПособияСверху = ИсходныеДанные.МаксимумПособияПоУходуЗаРебенкомДоПолутораЛет * КоличествоДетейВсего * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1);
						/*// определяем среднемесячный заработок путем умножения среднего дневного заработка на среднемесячное число календарных дней
*/
						/*// согласно п.5 Разъяснения о порядке назначения и выплаты ежемесячного пособия по уходу за ребенком, утв. приказом 
*/
						/*// Минздравсоцразвития РФ N 270, ФСС РФ N 106 от 13.04.2007
*/
						//РазмерПособия = Окр(СтрокаДвижений.Показатель1 * ПроцентОплаты / 100 * ?(ДеньГода(КонецГода(ИсходныеДанные.ПериодДействияНачало)) = 365,30.4,30.5), 2);
						/*// пособие за месяц с учетом ограничений
*/
						//ОрганиченныйРазмер = Макс(Мин(РазмерПособия, ОграничениеПособияСверху), ОграничениеПособияСнизу);
						if(true/*ОплачиваемыеДни < КалендарныхДнейВМесяце*/)
						{
							//Результат = Окр(ОрганиченныйРазмер / КалендарныхДнейВМесяце * ОплачиваемыеДни, 2);
						}
						if(true/*КомментироватьРасчет*/)
						{
							//ОбщегоНазначенияЗК.КомментарийРасчета("Размер пособия в процентах от среднего заработка: " + ПроцентОплаты, КомментарийВидаРасчета);
							//ОбщегоНазначенияЗК.КомментарийРасчета("Размер пособия за месяц исходя из среднего заработка: " + РазмерПособия, КомментарийВидаРасчета);
							//ОбщегоНазначенияЗК.КомментарийРасчета("Учтенный районный коэффициент: " + Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1), КомментарийВидаРасчета);
							//ОбщегоНазначенияЗК.КомментарийРасчета("Минимальный размер пособия: " + ОграничениеПособияСнизу, КомментарийВидаРасчета);
							//ОбщегоНазначенияЗК.КомментарийРасчета("Максимальный размер пособия: " + ОграничениеПособияСверху, КомментарийВидаРасчета);
							if(true/*ОрганиченныйРазмер = РазмерПособия*/)
							{
								//ТекстСообщения = "Расчет производится исходя из среднего заработка";
							}
							//ОбщегоНазначенияЗК.КомментарийРасчета(ТекстСообщения, КомментарийВидаРасчета);
							//ОбщегоНазначенияЗК.КомментарийРасчета("Календарных дней в месяце: " + КалендарныхДнейВМесяце, КомментарийВидаРасчета);
							//ОбщегоНазначенияЗК.КомментарийРасчета("Оплачиваемые дни отпуска: " + ОплачиваемыеДни, КомментарийВидаРасчета);
						}
					}
					//СтрокаДвижений.Результат = Результат;
				}
				//СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемыеДни * ?(СтрокаДвижений.Сторно,-1,1);
			}
			if(true/*ИмяАлгоритма = "ДоплатаДоСреднегоЗаработкаФСС2011"*/)
			{
				//ДатаЗакона = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
				if(true/*СтрокаДвижений.ПериодРегистрации < ДатаЗакона Или СтрокаДвижений.ПериодДействияНачало < ДатаЗакона*/)
				{
				}
				if(true/*ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мБезОграничений 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничением
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОбщимОграничениемИВРазмереММОТ
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйВ2011годуКакВ2010мСОграничениемВРазмереММОТ*/)
				{
				}
				//ОплачиваемоеВремя = ИсходныеДанные.КалендарныхДней;
				//ЭтоПереходныйПериод = СтрокаДвижений.ДатаНачалаСобытия < ДатаЗакона И СтрокаДвижений.ПериодДействияНачало >= ДатаЗакона;
				if(true/*ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуБезОграничений 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничением
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничениемИВРазмереММОТ
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОграничениемВРазмереММОТ*/)
				{
					//ЭтоПереходныйПериод = Ложь;
				}
				//РезультатПоПравилам2010Года = 0;
				//ЗаработокЗаЕдиницуВремени2010Года = 0;
				if(true/*ЭтоПереходныйПериод*/)
				{
					/*// Рассчитаем заработок за день 
*/
					/*// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
*/
					if(true/*СтрокаДвижений.Сторно*/)
					{
						//ЗаработокЗаЕдиницуВремени = СтрокаДвижений.ДополнительныеДанные;
					}
					//РезультатПоПравилам2010Года = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени;
					//ЗаработокЗаЕдиницуВремени2010Года = ЗаработокЗаЕдиницуВремени;
					if(true/*КомментироватьРасчет*/)
					{
						//ОбщегоНазначенияЗК.КомментарийРасчета("Расчет по правилам 2010 года", КомментарийВидаРасчета);
						//ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
						//ОбщегоНазначенияЗК.КомментарийРасчета("Расчет по правилам 2011 года", КомментарийВидаРасчета);
					}
				}
				if(true/*ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуБезОграничений 
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничением
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОбщимОграничениемИВРазмереММОТ
			Или ИсходныеДанные.ВариантАлгоритмаРасчета = Перечисления.ВариантыАлгоритмовРасчета.БольничныйПоБеременностиВ2013годуСОграничениемВРазмереММОТ*/)
				{
					//УчитываемыхДнейВКалендарныхГодах = ИсходныеДанные.ОтработаноДнейДляПособийПоМатеринству;
				}
				/*// Рассчитаем заработок за день
*/
				/*// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
*/
				if(true/*НЕ СтрокаДвижений.Сторно*/)
				{
					//ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий2011БезОграничений / УчитываемыхДнейВКалендарныхГодах,2);
					if(true/*КомментироватьРасчет*/)
					{
						//ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
					}
					/*// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
*/
					//СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				}
				//РазмерОграниченияСнизу = ИсходныеДанные.РазмерММОТ * Мин(ИсходныеДанные.ДоляММОТ, 1);
				if(true/*ЗаработокЗаЕдиницуВремени < РазмерОграниченияСнизу * 24 / 730*/)
				{
					//ЗаработокЗаЕдиницуВремени = Окр(РазмерОграниченияСнизу * 24 / 730 * Макс(ИсходныеДанные.РайонныйКоэффициентРФОрганизации, 1), 2);
					if(true/*КомментироватьРасчет*/)
					{
						//ОбщегоНазначенияЗК.КомментарийРасчета("Минимальный размер среднедневногого заработка рассчитан из МРОТ в сумме " + ИсходныеДанные.РазмерММОТ + ?(Мин(ИсходныеДанные.ДоляММОТ, 1) = 1,"", " дополнительно учитывается коэффициент неполного рабочего времени в размере " + Мин(ИсходныеДанные.ДоляММОТ, 1)), КомментарийВидаРасчета);
						//ОбщегоНазначенияЗК.КомментарийРасчета("В качестве среднего заработка за месяц принята сумма: " + РазмерОграниченияСнизу + "; размер среднедневного заработка" + ?(ИсходныеДанные.РайонныйКоэффициентРФОрганизации <= 1, "", " с учетом РК " + ИсходныеДанные.РайонныйКоэффициентРФОрганизации) + " составил: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
					}
				}
				//Результат = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени;
				if(true/*ЭтоПереходныйПериод*/)
				{
					if(true/*СтрокаДвижений.Сторно Или Результат < РезультатПоПравилам2010Года*/)
					{
						if(true/*Не СтрокаДвижений.Сторно*/)
						{
							//СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени2010Года;
							if(true/*КомментироватьРасчет*/)
							{
								//ОбщегоНазначенияЗК.КомментарийРасчета("Средний заработок рассчитан по правилам 2010 года", КомментарийВидаРасчета);
							}
						}
						//Результат = РезультатПоПравилам2010Года;
					}
				}
				if(true/*СтрокаДвижений.Сторно И Не СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени = 0*/)
				{
					/*// при расчете сторно получаем "отнормированную" базу из реквизита записи регистра 
*/
					/*// и учтем отработанное время; для записей которые были рассчитаны ранее, этот реквизит пуст, 
*/
					/*// поэтому для них получим базу прежним способом
*/
					//ОтработанноеВремя = ?(ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ИсходныеДанные.ОтработаноДней, ИсходныеДанные.ОтработаноЧасов);
					//РезультатБаза = СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени * ОтработанноеВремя;
				}
				//СреднийЗаработок = Результат;
				//Результат = Макс(СреднийЗаработок - ?(РезультатБаза = NULL, 0, РезультатБаза), 0);
				if(true/*КомментироватьРасчет*/)
				{
					//ОбщегоНазначенияЗК.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
					//ОбщегоНазначенияЗК.КомментарийРасчета("Средний заработок: " + СреднийЗаработок, КомментарийВидаРасчета);
					//КомментарийБазы = ОбщегоНазначенияЗК.КомментарийРасчета("Вычитаемые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
					//РасшифровкаБазы = ИсходныеДанные.Выбрать();
					while(true/*РасшифровкаБазы.Следующий()*/)
					{
						if(true/*ЗначениеЗаполнено(РасшифровкаБазы.РезультатБаза)*/)
						{
							//ОбщегоНазначенияЗК.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
						}
					}
					//;;
				}
				//СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
				//СтрокаДвижений.Результат = Результат;
			}
			if(true/*ИмяАлгоритма = "ДоплатаДоСреднегоЗаработкаФСС"*/)
			{
				if(true/*ПроведениеРасчетов.РассчитатьРесурсыПоАлгоритму("ДоплатаДоСреднегоЗаработкаФСС2011", КомментироватьРасчет, КомментарийВидаРасчета, СтрокаДвижений, ИсходныеДанные)*/)
				{
				}
				//ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
				//ЭтоПорядок2010 = СтрокаДвижений.ПериодРегистрации >= ДатаЗакона213ФЗ И СтрокаДвижений.ПериодДействияНачало >= ДатаЗакона213ФЗ;
				if(true/*НЕ СтрокаДвижений.Сторно*/)
				{
					if(true/*ЭтоПорядок2010*/)
					{
						if(true/*Не ЗначениеЗаполнено(ИсходныеДанные.СреднийЗаработокПособий2010)*/)
						{
							//ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": Нет данных для расчета среднего заработка");
							//СтрокаДвижений.Результат = 0;
						}
					}
				}
				/*// Рассчитаем заработок за день 
*/
				/*// для строк сторно заработок возьмем из реквизита "ДополнительныеДанные" записи начислений
*/
				if(true/*НЕ СтрокаДвижений.Сторно*/)
				{
					if(true/*ЭтоПорядок2010*/)
					{
						//ЗаработокЗаЕдиницуВремени = Окр(ИсходныеДанные.СреднийЗаработокПособий2010 / ИсходныеДанные.ОтработаноДнейПособий2010,2);
					}
					/*// сохраним заработок за единицу времени для возможных расчетов сторно записей в будущем 
*/
					//СтрокаДвижений.ДополнительныеДанные = ЗаработокЗаЕдиницуВремени;
				}
				if(true/*СтрокаДвижений.Сторно И НЕ СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени = 0*/)
				{
					/*// при расчете сторно получаем "отнормированную" базу из реквизита записи регистра 
*/
					/*// и учтем отработанное время; для записей которые были рассчитаны ранее, этот реквизит пуст, 
*/
					/*// поэтому для них получим базу прежним способом
*/
					//ОтработанноеВремя = ?(ИсходныеДанные.ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоДням, ИсходныеДанные.ОтработаноДней, ИсходныеДанные.ОтработаноЧасов);
					//РезультатБаза = СтрокаДвижений.РасчетнаяБазаЗаЕдиницуНормыВремени * ОтработанноеВремя;
				}
				//ОплачиваемоеВремя = ?(ИсходныеДанные.КалендарныхДней = Null, 0,ИсходныеДанные.КалендарныхДней);
				//СреднийЗаработок = ОплачиваемоеВремя * ЗаработокЗаЕдиницуВремени;
				//Результат = Макс(СреднийЗаработок - ?(РезультатБаза = NULL, 0, РезультатБаза), 0);
				if(true/*КомментироватьРасчет*/)
				{
					//ОбщегоНазначенияЗК.КомментарийРасчета("Среднедневной заработок: " + ЗаработокЗаЕдиницуВремени, КомментарийВидаРасчета);
					//ОбщегоНазначенияЗК.КомментарийРасчета("Оплачиваемое время: " + ОплачиваемоеВремя, КомментарийВидаРасчета);
					//ОбщегоНазначенияЗК.КомментарийРасчета("Средний заработок: " + СреднийЗаработок, КомментарийВидаРасчета);
					//КомментарийБазы = ОбщегоНазначенияЗК.КомментарийРасчета("Вычитаемые начисления составили всего: " + РезультатБаза, КомментарийВидаРасчета,,,, Ложь);
					//РасшифровкаБазы = ИсходныеДанные.Выбрать();
					while(true/*РасшифровкаБазы.Следующий()*/)
					{
						if(true/*ЗначениеЗаполнено(РасшифровкаБазы.РезультатБаза)*/)
						{
							//ОбщегоНазначенияЗК.КомментарийРасчета(РасшифровкаБазы.ВидРасчетаРазрезНаименование + ": " + РасшифровкаБазы.РезультатБаза, КомментарийБазы);
						}
					}
					//;;
				}
				//СтрокаДвижений.ОплаченоДнейЧасов = ОплачиваемоеВремя * ?(СтрокаДвижений.Сторно,-1,1);
				//СтрокаДвижений.Результат = Результат;
			}
			if(true/*ИмяАлгоритма = "ПочтовыеПереводы"*/)
			{
				if(true/*ИсходныеДанные.ПоТарифу*/)
				{
					if(true/*ИсходныеДанные.СуммаАлиментов > 500000 И ИсходныеДанные.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор*/)
					{
						//ОбщегоНазначенияЗК.ОшибкаРасчета(ИсходныеДанные.СотрудникНаименование + "; " + ИсходныеДанные.ВидРасчетаНаименование + ": превышена максимальная сумма почтового перевода - 500000 рублей");
					}
				}
			}
			if(true/*ИмяАлгоритма = "АлиментыВПрожиточныхМинимумах"*/)
			{
				//УжеНачисленоВТекущемПериоде = ?(ИсходныеДанные.УжеНачисленоВТекущемПериоде = Null, 0, ИсходныеДанные.УжеНачисленоВТекущемПериоде);
				//СтрокаДвижений.Результат = Макс(СтрокаДвижений.Показатель1 * ИсходныеДанные.ВеличинаПрожиточногоМинимума / 100 - УжеНачисленоВТекущемПериоде, 0);
				if(true/*КомментироватьРасчет*/)
				{
					//ОбщегоНазначенияЗК.КомментарийРасчета("Доля прож.минимума (%): " + СтрокаДвижений.Показатель1, КомментарийВидаРасчета);
					//ОбщегоНазначенияЗК.КомментарийРасчета("Величина прожиточного минимума: " + ИсходныеДанные.ВеличинаПрожиточногоМинимума, КомментарийВидаРасчета);
					//ОбщегоНазначенияЗК.КомментарийРасчета("Ранее зарегистрировано в текущем периоде: " + УжеНачисленоВТекущемПериоде, КомментарийВидаРасчета);
				}
			}
			return null;
		}
		// получить данные для расчета НДФЛ по ставке 13 процентов
		// Параметры:
		//  ПоследнийМесяцНалоговогоПериода - месяц налогового периода, по который (включительно) считается налог.
		//  						Это текущий или будущий месяц относительно периода регистрации
		//							Если Неопределено - нужно определить максимальный месяц налогового периода и
		//							минимальный месяц налоговго периода
		//  ПериодРегистрации - дата, по которую учитываются зарегистрированные доходы и начисленные налоги
		//  Организация - ссылка на организацию
		//  Регистратор - ссылка на регистратор записей НДФЛ
		//  СписокФизЛицТекст - текст запроса выборки списка физлиц, по которым необходимо выполнить расчет налога
		//	ДополнительныеПараметрыЗапроса - структура значений параметров запроса, необходимых для выполнения текста запроса "СписокФизЛицТекст"
		//
		// Возвращаемое значение:
		//	Таблица значений с колонками: ФизЛицо, ПодразделениеОрганизации, МесяцНалоговогоПериода, Налог,ПримененныйВычетЛичный,ПримененныйВычетНаДетей,ПримененныйВычетНаДетейДвойной,ПримененныйВычетНаДетейДвойнойВторой,ПримененныйВычетНаДетейИнвалидов,ПримененныйВычетНаДетейИнвалидовДвойной,ПримененныйВычетНаДетейИнвалидовДвойнойВторой,ПримененныйВычетИмущественныйРасход,ПримененныйВычетИмущественныйПроцентыПоКредитам,ПримененныйВычетИмущественныйПроцентыПриПерекредитовании
		//

		public object ПолучитьДанныеНДФЛПоРегистратору(/*Знач ПервыйМесяцНалоговогоПериода,
											Знач ПоследнийМесяцНалоговогоПериода,
											ПериодРегистрации,
											ОбособленноеПодразделение,
											Организация,
											Регистратор,
											Знач СписокФизЛицТекст,
											ДополнительныеПараметрыЗапроса = Неопределено,
											ЭтоПерерасчет = Ложь,
											КомментироватьРасчет = Ложь,
											ВозвращатьДанныеРасчетовБезПодразделений = Ложь,
											ДоходыРегистратораКУчету = Неопределено*/)
		{
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			//Запрос.УстановитьПараметр("Регистратор", Регистратор);
			//Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);
			//Запрос.УстановитьПараметр("НачалоМесяцаРасчета",НачалоМесяца(ПериодРегистрации));
			//Запрос.УстановитьПараметр("КонецМесяцаРасчета",КонецМесяца(ПериодРегистрации));
			//Запрос.УстановитьПараметр("НачалоГодаРасчета",НачалоГода(ПериодРегистрации));
			/*// установим дополнительные параметры
*/
			if(true/*ДополнительныеПараметрыЗапроса <> Неопределено*/)
			{
			}
			/*Запрос.Текст = 
	"ВЫБРАТЬ Физлицо
	|ПОМЕСТИТЬ ВТСписокФизЛиц
	|ИЗ (" + СписокФизЛицТекст + ") СписокФизЛиц
	|ИНДЕКСИРОВАТЬ ПО Физлицо";*/
			//Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
			//Запрос.Выполнить();
			if(true/*ДоходыРегистратораКУчету = Неопределено*/)
			{
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДАТАВРЕМЯ(1, 1, 1) КАК Период,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК Организация,
		|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК ФизЛицо,
		|	ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.ПустаяСсылка) КАК КодДохода,
		|	ДАТАВРЕМЯ(1, 1, 1) КАК ПериодРегистрации,
		|	0 КАК СуммаДохода,
		|	0 КАК СуммаВычета,
		|	ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка) КАК КодВычета,
		|	ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка) КАК ОбособленноеПодразделение,
		|	ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка) КАК ПодразделениеОрганизации
		|ПОМЕСТИТЬ ВТКорректировкаДанныхРегистратора
		|ГДЕ
		|	ЛОЖЬ";*/
			}
			//Запрос.Выполнить();
			if(true/*ПоследнийМесяцНалоговогоПериода = Неопределено*/)
			{
				/*// получим ПоследнийМесяцНалоговогоПериода
*/
				/*Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Данные.Период
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДФЛСведенияОДоходах.Период КАК Период
		|	ИЗ
		|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
		|			ПО НДФЛСведенияОДоходах.ФизЛицо = Работники.ФизЛицо
		|	ГДЕ
		|		НДФЛСведенияОДоходах.Организация = &ГоловнаяОрганизация
		|		И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &НачалоМесяцаРасчета
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КорректировкаДанныхРегистратора.Период
		|	ИЗ
		|		ВТКорректировкаДанныхРегистратора КАК КорректировкаДанныхРегистратора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
		|			ПО КорректировкаДанныхРегистратора.ФизЛицо = Работники.ФизЛицо
		|	ГДЕ
		|		КорректировкаДанныхРегистратора.Организация = &ГоловнаяОрганизация
		|		И НАЧАЛОПЕРИОДА(КорректировкаДанныхРегистратора.ПериодРегистрации, МЕСЯЦ) = &НачалоМесяцаРасчета) КАК Данные
		|
		|УПОРЯДОЧИТЬ ПО
		|	Данные.Период УБЫВ";*/
				//Результат = Запрос.Выполнить();
				if(true/*Результат.Пустой()*/)
				{
					//ПоследнийМесяцНалоговогоПериода = КонецМесяца(ПериодРегистрации);
				}
			}
			if(true/*ПервыйМесяцНалоговогоПериода = Неопределено*/)
			{
				/*// получим самый ранний месяц налогового периода
*/
				/*Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Данные.Период
		|ИЗ
		|	(ВЫБРАТЬ
		|		НДФЛСведенияОДоходах.Период КАК Период
		|	ИЗ
		|		РегистрНакопления.НДФЛСведенияОДоходах КАК НДФЛСведенияОДоходах
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
		|			ПО (Работники.Физлицо = НДФЛСведенияОДоходах.ФизЛицо)
		|	ГДЕ
		|		НДФЛСведенияОДоходах.Организация = &ГоловнаяОрганизация
		|		И НАЧАЛОПЕРИОДА(НДФЛСведенияОДоходах.ПериодРегистрации, МЕСЯЦ) = &НачалоМесяцаРасчета
		|	
		|	ОБЪЕДИНИТЬ ВСЕ
		|	
		|	ВЫБРАТЬ
		|		КорректировкаДанныхРегистратора.Период
		|	ИЗ
		|		ВТКорректировкаДанныхРегистратора КАК КорректировкаДанныхРегистратора
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТСписокФизЛиц КАК Работники
		|			ПО КорректировкаДанныхРегистратора.ФизЛицо = Работники.ФизЛицо
		|	ГДЕ
		|		КорректировкаДанныхРегистратора.Организация = &ГоловнаяОрганизация
		|		И НАЧАЛОПЕРИОДА(КорректировкаДанныхРегистратора.ПериодРегистрации, МЕСЯЦ) = &НачалоМесяцаРасчета) КАК Данные
		|
		|УПОРЯДОЧИТЬ ПО
		|	Данные.Период";*/
				//Результат = Запрос.Выполнить();
				if(true/*Результат.Пустой()*/)
				{
					//ПервыйМесяцНалоговогоПериода = ПериодРегистрации;
				}
			}
			//ДатаЗакона229ФЗ = ПроведениеРасчетов.ДатаЗакона229ФЗ();
			//Запрос.УстановитьПараметр("ДатаЗакона229ФЗ", ДатаЗакона229ФЗ);
			//Запрос.УстановитьПараметр("КонецПериодаРасчета", КонецМесяца(ПоследнийМесяцНалоговогоПериода));
			//Запрос.УстановитьПараметр("НачалоГодаПериодаРасчета", НачалоГода(ПервыйМесяцНалоговогоПериода));
			//Запрос.УстановитьПараметр("КонецГодаПериодаРасчета", КонецГода(ПоследнийМесяцНалоговогоПериода));
			/*// Таблица ВТДатыПоМесяцам: список дат налоговых периодов, в которых рассчитывается налог 
*/
			/*// Поля:
*/
			/*//		Период
*/
			//НачМесяца = НачалоГода(ПервыйМесяцНалоговогоПериода);
			//ДатыПоМесяцамТекст = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ") КАК Период";
			/*ДатыПоМесяцамТекст = ДатыПоМесяцамТекст + "
	|ПОМЕСТИТЬ ВТДатыПоМесяцам";*/
			while(true/*НачМесяца < НачалоМесяца(ПоследнийМесяцНалоговогоПериода)*/)
			{
				//НачМесяца = НачалоМесяца(КонецМесяца(НачМесяца) + 1);
				/*ДатыПоМесяцамТекст = ДатыПоМесяцамТекст +"
		|ОБЪЕДИНИТЬ ВСЕ ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачМесяца,"ДФ=гггг,М,д,Ч,м,с") + ")";*/
			}
			/*;
	Запрос.Текст = ДатыПоМесяцамТекст;*/
			//Запрос.Выполнить();
			/*// первый год
*/
			//НачалоГода = НачалоГода(ПоследнийМесяцНалоговогоПериода);
			//ПериодыТекстПоГодам = "ВЫБРАТЬ ДАТАВРЕМЯ(" + Формат(НачалоГода,"ДФ=гггг,М,д,Ч,м,с") + ") КАК НачалоНалоговогоПериода";
			/*ПериодыТекстПоГодам = ПериодыТекстПоГодам + "
	|ПОМЕСТИТЬ ВТПериодыПоГодам";*/
			//Запрос.Текст = ПериодыТекстПоГодам;
			//Запрос.Выполнить();
			/*// Периоды
*/
			/*// Таблица ВТПериоды: список периодов-физлиц по которым необходимо выполнить расчет налога
*/
			/*// Поля:
*/
			/*//		Период
*/
			/*//		Физлицо
*/
			if(true/*ЭтоПерерасчет*/)
			{
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	Работники.Физлицо КАК Физлицо,
		|	Месяцы.Период КАК Период,
		|	НАЧАЛОПЕРИОДА(Месяцы.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
		|	НАЧАЛОПЕРИОДА(Месяцы.Период, ГОД) КАК НачалоГодаНалоговогоПериода,
		|	КОНЕЦПЕРИОДА(Месяцы.Период, ГОД) КАК КонецГодаНалоговогоПериода
		|ПОМЕСТИТЬ ВТПериодыНалогаНаДоходы
		|ИЗ
		|	ВТСписокФизЛиц КАК Работники
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТДатыПоМесяцам КАК Месяцы
		|		ПО (ИСТИНА)
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Физлицо,
		|	Период";*/
			}
			//Запрос.Выполнить();
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13) КАК СтавкаНалогообложения,
	|	0.13 КАК Размер
	|ПОМЕСТИТЬ ВТСтавкиНалогаВПроцентах
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09),
	|	0.09
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35),
	|	0.35
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30),
	|	0.3
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15),
	|	0.15
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.НачалоНалоговогоПериода КАК НачалоНалоговогоПериода,
	|	УчетнаяПолитикаПоНДФЛ.ОсобенностиИсчисленияНДФЛ
	|ПОМЕСТИТЬ ВТПолитикаПримененияВычетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.НачалоНалоговогоПериода КАК НачалоНалоговогоПериода,
	|		МАКСИМУМ(УчетнаяПолитикаПоНДФЛ.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериодыПоГодам КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
	|			ПО Периоды.НачалоНалоговогоПериода >= УчетнаяПолитикаПоНДФЛ.Период
	|	ГДЕ
	|		УчетнаяПолитикаПоНДФЛ.Организация = &ГоловнаяОрганизация
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.НачалоНалоговогоПериода) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УчетнаяПолитикаПоНДФЛ КАК УчетнаяПолитикаПоНДФЛ
	|		ПО ДатыРегистра.ПериодРегистра = УчетнаяПолитикаПоНДФЛ.Период
	|ГДЕ
	|	УчетнаяПолитикаПоНДФЛ.Организация = &ГоловнаяОрганизация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыРегистра.ФизЛицо КАК ФизЛицо,
	|	ПериодыРегистра.МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтатусНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) <> ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РезидентРФ
	|ПОМЕСТИТЬ ВТРезидентствоФизлицНаКонецГода
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Физлица.ФизЛицо КАК ФизЛицо,
	|		Физлица.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		МАКСИМУМ(СтатусНалогоплательщика.Период) КАК Период
	|	ИЗ
	|		ВТПериодыНалогаНаДоходы КАК Физлица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
	|			ПО Физлица.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
	|				И (СтатусНалогоплательщика.Период <= ВЫБОР
	|					КОГДА Физлица.КонецГодаНалоговогоПериода > &КонецМесяцаРасчета
	|						ТОГДА &КонецМесяцаРасчета
	|					ИНАЧЕ Физлица.КонецГодаНалоговогоПериода
	|				КОНЕЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Физлица.ФизЛицо,
	|		Физлица.МесяцНалоговогоПериода) КАК ПериодыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
	|		ПО ПериодыРегистра.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
	|			И ПериодыРегистра.Период = СтатусНалогоплательщика.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПериодыРегистра.ФизЛицо КАК ФизЛицо,
	|	ПериодыРегистра.МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(СтатусНалогоплательщика.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) <> ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Нерезидент)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК РезидентРФ
	|ПОМЕСТИТЬ ВТРезидентствоФизлицНаКонецМесяца
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		Физлица.ФизЛицо КАК ФизЛицо,
	|		Физлица.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		МАКСИМУМ(СтатусНалогоплательщика.Период) КАК Период
	|	ИЗ
	|		ВТПериодыНалогаНаДоходы КАК Физлица
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
	|			ПО Физлица.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
	|				И (СтатусНалогоплательщика.Период <= ВЫБОР
	|					КОГДА Физлица.МесяцНалоговогоПериода > &КонецМесяцаРасчета
	|						ТОГДА &КонецМесяцаРасчета
	|					ИНАЧЕ Физлица.МесяцНалоговогоПериода
	|				КОНЕЦ)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Физлица.ФизЛицо,
	|		Физлица.МесяцНалоговогоПериода) КАК ПериодыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусНалогоплательщика
	|		ПО ПериодыРегистра.ФизЛицо = СтатусНалогоплательщика.ФизЛицо
	|			И ПериодыРегистра.Период = СтатусНалогоплательщика.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо,
	|	Периоды.ФизЛицо.Наименование КАК Порядок,
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.НачалоГодаНалоговогоПериода,
	|	Периоды.КонецГодаНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА РезидентствоФизлицНаКонецГода.РезидентРФ
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ РезидентствоФизлицНаКонецМесяца.РезидентРФ
	|	КОНЕЦ КАК Резидент
	|ПОМЕСТИТЬ ВТПериодыФизлиц
	|ИЗ
	|	ВТПериодыНалогаНаДоходы КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезидентствоФизлицНаКонецМесяца КАК РезидентствоФизлицНаКонецМесяца
	|		ПО Периоды.ФизЛицо = РезидентствоФизлицНаКонецМесяца.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = РезидентствоФизлицНаКонецМесяца.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРезидентствоФизлицНаКонецГода КАК РезидентствоФизлицНаКонецГода
	|		ПО Периоды.ФизЛицо = РезидентствоФизлицНаКонецГода.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = РезидентствоФизлицНаКонецГода.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.НачалоНалоговогоПериода КАК НачалоНалоговогоПериода,
	|	ДатыРегистра.КодВычета КАК КодВычета,
	|	ЕСТЬNULL(РазмерВычетов.Размер, 0) КАК Размер,
	|	ЕСТЬNULL(РазмерВычетов.ОграничениеПоДоходам, 0) КАК ОграничениеПоДоходам
	|ПОМЕСТИТЬ ВТРазмерыСтандартныхВычетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.НачалоНалоговогоПериода КАК НачалоНалоговогоПериода,
	|		ВидыВычетов.Ссылка КАК КодВычета,
	|		МАКСИМУМ(РазмерВычетов.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериодыПоГодам КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВычетыНДФЛ КАК ВидыВычетов
	|			ПО (ИСТИНА)
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК РазмерВычетов
	|			ПО (ВидыВычетов.Ссылка = РазмерВычетов.КодВычета)
	|				И Периоды.НачалоНалоговогоПериода >= РазмерВычетов.Период
	|	ГДЕ
	|		ВидыВычетов.ГруппаВычета В (ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Стандартные), ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.СтандартныеНаДетей))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.НачалоНалоговогоПериода,
	|		ВидыВычетов.Ссылка) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛРазмерВычетов КАК РазмерВычетов
	|		ПО ДатыРегистра.ПериодРегистра = РазмерВычетов.Период
	|			И ДатыРегистра.КодВычета = РазмерВычетов.КодВычета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.ФизЛицо КАК ФизЛицо,
	|	ДатыРегистра.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.Организация = &ГоловнаяОрганизация
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ПрименятьВычеты
	|ПОМЕСТИТЬ ВТПрименениеСтандартныхВычетов
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ПрименениеВычетов.Период) КАК ПериодСреза,
	|		Периоды.ФизЛицо КАК ФизЛицо,
	|		Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода
	|	ИЗ
	|		ВТПериодыФизлиц КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК ПрименениеВычетов
	|			ПО Периоды.МесяцНалоговогоПериода >= ПрименениеВычетов.Период
	|				И Периоды.ФизЛицо = ПрименениеВычетов.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.МесяцНалоговогоПериода) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛПрименениеВычетов КАК ПрименениеВычетов
	|		ПО ДатыРегистра.ПериодСреза = ПрименениеВычетов.Период
	|			И ДатыРегистра.ФизЛицо = ПрименениеВычетов.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.ФизЛицо КАК ФизЛицо,
	|	ДатыРегистра.МесяцНалоговогоПериода,
	|	ДатыРегистра.НачалоГодаНалоговогоПериода,
	|	ЕСТЬNULL(ДатыРегистра.КодВычета, ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)) КАК КодВычета,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА ВычетыНаДетей.ПериодЗавершения <= ДатыРегистра.МесяцНалоговогоПериода
	|					И ВычетыНаДетей.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|				ТОГДА ВычетыНаДетей.КоличествоДетейЗавершения
	|			ИНАЧЕ ВычетыНаДетей.КоличествоДетей
	|		КОНЕЦ, 0) КАК КоличествоДетей
	|ПОМЕСТИТЬ ВТПраваНаВычетыНаДетей
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		Периоды.ФизЛицо КАК ФизЛицо,
	|		ВычетыНаДетей.КодВычета КАК КодВычета,
	|		МАКСИМУМ(ВычетыНаДетей.Период) КАК ПериодРегистра,
	|		Периоды.НачалоГодаНалоговогоПериода КАК НачалоГодаНалоговогоПериода
	|	ИЗ
	|		ВТПериодыФизлиц КАК Периоды
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыНаДетей КАК ВычетыНаДетей
	|			ПО Периоды.МесяцНалоговогоПериода >= ВычетыНаДетей.Период
	|				И Периоды.ФизЛицо = ВычетыНаДетей.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		ВычетыНаДетей.КодВычета,
	|		Периоды.МесяцНалоговогоПериода,
	|		Периоды.НачалоГодаНалоговогоПериода) КАК ДатыРегистра
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыНаДетей КАК ВычетыНаДетей
	|		ПО ДатыРегистра.ПериодРегистра = ВычетыНаДетей.Период
	|			И ДатыРегистра.ФизЛицо = ВычетыНаДетей.Физлицо
	|			И ДатыРегистра.КодВычета = ВычетыНаДетей.КодВычета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДатыРегистра.ФизЛицо,
	|	ДатыРегистра.МесяцНалоговогоПериода,
	|	ДатыРегистра.НачалоГодаНалоговогоПериода,
	|	ЕСТЬNULL(ВычетыФизлиц.КодВычетаЛичный, ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)) КАК КодВычета
	|ПОМЕСТИТЬ ВТПраваНаЛичныеВычеты
	|ИЗ
	|	(ВЫБРАТЬ
	|		МАКСИМУМ(ВычетыФизлиц.Период) КАК ПериодСреза,
	|		Периоды.ФизЛицо КАК ФизЛицо,
	|		Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		Периоды.НачалоГодаНалоговогоПериода КАК НачалоГодаНалоговогоПериода
	|	ИЗ
	|		ВТПериодыФизлиц КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|			ПО Периоды.МесяцНалоговогоПериода >= ВычетыФизлиц.Период
	|				И Периоды.ФизЛицо = ВычетыФизлиц.Физлицо
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.ФизЛицо,
	|		Периоды.МесяцНалоговогоПериода,
	|		Периоды.НачалоГодаНалоговогоПериода) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК ВычетыФизлиц
	|		ПО ДатыРегистра.ПериодСреза = ВычетыФизлиц.Период
	|			И ДатыРегистра.ФизЛицо = ВычетыФизлиц.Физлицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Вычеты.ФизЛицо,
	|	ВЫБОР
	|		КОГДА Вычеты.МесяцНалоговогоПериода < &ДатаЗакона229ФЗ
	|			ТОГДА НАЧАЛОПЕРИОДА(Вычеты.МесяцНалоговогоПериода, ГОД)
	|		ИНАЧЕ Вычеты.МесяцНалоговогоПериода
	|	КОНЕЦ КАК МесяцНалоговогоПериода,
	|	Вычеты.КодВычета,
	|	Вычеты.НалоговыйПериод,
	|	СУММА(Вычеты.Размер) КАК Размер
	|ПОМЕСТИТЬ ВТПравоНаИмущественныеВычеты
	|ИЗ
	|	(ВЫБРАТЬ
	|		Обороты.ФизЛицо КАК ФизЛицо,
	|		НАЧАЛОПЕРИОДА(Обороты.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|		Обороты.КодВычетаИмущественный КАК КодВычета,
	|		Обороты.Год КАК НалоговыйПериод,
	|		Обороты.РазмерПриход КАК Размер
	|	ИЗ
	|		РегистрНакопления.НДФЛИмущественныеВычетыФизлиц.Обороты(
	|				&НачалоГодаПериодаРасчета,
	|				&КонецПериодаРасчета,
	|				Месяц,
	|				ФизЛицо В
	|						(ВЫБРАТЬ
	|							ФизЛица.ФизЛицо
	|						ИЗ
	|							ВТСписокФизЛиц КАК ФизЛица)
	|					И Организация = &ГоловнаяОрганизация) КАК Обороты
	|	ГДЕ
	|		Обороты.Год = ГОД(Обороты.Период)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДвиженияРегистратора.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ДвиженияРегистратора.Период, МЕСЯЦ),
	|		ДвиженияРегистратора.КодВычетаИмущественный,
	|		ДвиженияРегистратора.Год,
	|		ВЫБОР
	|			КОГДА ДвиженияРегистратора.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ТОГДА -ДвиженияРегистратора.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ
	|	ИЗ
	|		РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК ДвиженияРегистратора
	|	ГДЕ
	|		ДвиженияРегистратора.Регистратор = &Регистратор
	|		И ДвиженияРегистратора.ФизЛицо В
	|				(ВЫБРАТЬ
	|					ФизЛица.ФизЛицо
	|				ИЗ
	|					ВТСписокФизЛиц КАК ФизЛица)
	|		И ДвиженияРегистратора.Год = ГОД(ДвиженияРегистратора.Период)) КАК Вычеты
	|
	|СГРУППИРОВАТЬ ПО
	|	Вычеты.ФизЛицо,
	|	ВЫБОР
	|		КОГДА Вычеты.МесяцНалоговогоПериода < &ДатаЗакона229ФЗ
	|			ТОГДА НАЧАЛОПЕРИОДА(Вычеты.МесяцНалоговогоПериода, ГОД)
	|		ИНАЧЕ Вычеты.МесяцНалоговогоПериода
	|	КОНЕЦ,
	|	Вычеты.КодВычета,
	|	Вычеты.НалоговыйПериод
	|
	|ИМЕЮЩИЕ
	|	СУММА(Вычеты.Размер) > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Обороты.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(Обороты.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	Обороты.КодВычета,
	|	Обороты.СуммаДохода КАК СуммаДоходаОборот,
	|	Обороты.СуммаВычета КАК СуммаВычетаОборот
	|ПОМЕСТИТЬ ВТДоходыФизлиц
	|ИЗ
	|	РегистрНакопления.НДФЛСведенияОДоходах КАК Обороты
	|ГДЕ
	|	Обороты.Организация = &ГоловнаяОрганизация
	|	И Обороты.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|	И (НЕ Обороты.КодДохода.НеОблагаетсяУНалоговогоАгента)
	|	И Обороты.Период МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|	И Обороты.ПериодРегистрации <= &КонецМесяцаРасчета
	|	И Обороты.ФизЛицо В
	|			(ВЫБРАТЬ
	|				СписокСотрудников.ФизЛицо
	|			ИЗ
	|				ВТСписокФизЛиц КАК СписокСотрудников)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	КорректировкаДанныхРегистратора.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(КорректировкаДанныхРегистратора.Период, МЕСЯЦ),
	|	КорректировкаДанныхРегистратора.КодВычета,
	|	КорректировкаДанныхРегистратора.СуммаДохода,
	|	КорректировкаДанныхРегистратора.СуммаВычета
	|ИЗ
	|	ВТКорректировкаДанныхРегистратора КАК КорректировкаДанныхРегистратора
	|ГДЕ
	|	КорректировкаДанныхРегистратора.Организация = &ГоловнаяОрганизация
	|	И КорректировкаДанныхРегистратора.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|	И (НЕ КорректировкаДанныхРегистратора.КодДохода.НеОблагаетсяУНалоговогоАгента)
	|	И КорректировкаДанныхРегистратора.Период МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|	И КорректировкаДанныхРегистратора.ПериодРегистрации <= &КонецМесяцаРасчета
	|	И КорректировкаДанныхРегистратора.ФизЛицо В
	|			(ВЫБРАТЬ
	|				СписокСотрудников.ФизЛицо
	|			ИЗ
	|				ВТСписокФизЛиц КАК СписокСотрудников)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.КодВычета,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ПодразделениеОрганизации КАК Подразделение,
	|	СУММА(ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ПримененныйВычет) КАК СуммаОборот
	|ПОМЕСТИТЬ ВТПредоставленныеСтандартныеИСоциальныеВычеты
	|ИЗ
	|	РегистрНакопления.НДФЛПредоставленныеСтандартныеВычетыФизЛиц КАК ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ
	|ГДЕ
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Организация = &ГоловнаяОрганизация
	|	И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ФизЛицо В
	|			(ВЫБРАТЬ
	|				СписокСотрудников.ФизЛицо
	|			ИЗ
	|				ВТСписокФизЛиц КАК СписокСотрудников)
	|	И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Регистратор <> &Регистратор
	|	И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|	И ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.Период <= &КонецМесяцаРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ),
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.КодВычета,
	|	ПредоставленныеСтандартныеИСоциальныеВычетыНДФЛ.ПодразделениеОрганизации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДвиженияРегистратора.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ДвиженияРегистратора.Период, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	ДвиженияРегистратора.КодВычетаИмущественный КАК КодВычета,
	|	СУММА(ДвиженияРегистратора.Размер) КАК Сумма,
	|	ДвиженияРегистратора.ПодразделениеОрганизации КАК Подразделение
	|ПОМЕСТИТЬ ВТПредоставленоИмущественныхВычетов
	|ИЗ
	|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК ДвиженияРегистратора
	|ГДЕ
	|	ДвиженияРегистратора.Организация = &ГоловнаяОрганизация
	|	И ДвиженияРегистратора.Период МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|	И ДвиженияРегистратора.Регистратор <> &Регистратор
	|	И ДвиженияРегистратора.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|	И ДвиженияРегистратора.ФизЛицо В
	|			(ВЫБРАТЬ
	|				ФизЛица.ФизЛицо
	|			ИЗ
	|				ВТСписокФизЛиц КАК ФизЛица)
	|
	|СГРУППИРОВАТЬ ПО
	|	ДвиженияРегистратора.ПодразделениеОрганизации,
	|	ДвиженияРегистратора.ФизЛицо,
	|	НАЧАЛОПЕРИОДА(ДвиженияРегистратора.Период, МЕСЯЦ),
	|	ДвиженияРегистратора.КодВычетаИмущественный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	ВЫБОР
	|		КОГДА Периоды.Резидент
	|			ТОГДА ЕСТЬNULL(ПредоставленныеВычетыФизЛиц.СуммаОборот, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаОборот
	|ПОМЕСТИТЬ ВТСоциальныеВычетыПомесячно
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставленныеСтандартныеИСоциальныеВычеты КАК ПредоставленныеВычетыФизЛиц
	|		ПО Периоды.ФизЛицо = ПредоставленныеВычетыФизЛиц.ФизЛицо
	|			И (ПредоставленныеВычетыФизЛиц.КодВычета.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.Социальные))
	|			И Периоды.МесяцНалоговогоПериода = ПредоставленныеВычетыФизЛиц.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Периоды.Резидент,
	|	ВЫБОР
	|		КОГДА Периоды.Резидент
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|	КОНЕЦ КАК СтавкаНалогообложенияНеРезидента,
	|	ЕСТЬNULL(Обороты.СуммаДоходаОборот, 0) - ВЫБОР
	|		КОГДА Периоды.Резидент
	|			ТОГДА ЕСТЬNULL(Обороты.СуммаВычетаОборот, 0)
	|		КОГДА Обороты.КодВычета.НеПредоставляетсяНерезидентам
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(Обороты.СуммаВычетаОборот, 0)
	|	КОНЕЦ КАК ДоходыБезВычетов
	|ПОМЕСТИТЬ ВТДоходыСУчетомВычетовКДоходам
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыФизлиц КАК Обороты
	|		ПО Периоды.ФизЛицо = Обороты.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = Обороты.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	ЕСТЬNULL(СУММА(Доходы.ДоходыБезВычетов), 0) КАК ОблагаемыйДоход
	|ПОМЕСТИТЬ ВТДоходыРезидентовПоМесяцам
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСУчетомВычетовКДоходам КАК Доходы
	|		ПО Периоды.МесяцНалоговогоПериода = Доходы.МесяцНалоговогоПериода
	|			И Периоды.ФизЛицо = Доходы.ФизЛицо
	|			И (Доходы.Резидент)
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	ЕСТЬNULL(СУММА(Доходы.ДоходыБезВычетов), 0) КАК ОблагаемыйДоходЗаГод
	|ПОМЕСТИТЬ ВТДоходыРезидентовНарастающимЗаГод
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыСУчетомВычетовКДоходам КАК Доходы
	|		ПО (Доходы.МесяцНалоговогоПериода МЕЖДУ Периоды.НачалоГодаНалоговогоПериода И Периоды.МесяцНалоговогоПериода)
	|			И Периоды.ФизЛицо = Доходы.ФизЛицо
	|			И (Доходы.Резидент)
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ВычетыЛичные.КодВычета КАК КодВычетаЛичный,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.Резидент
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= ЕСТЬNULL(РазмерВычетовЛичный.ОграничениеПоДоходам, 0)
	|					ИЛИ ЕСТЬNULL(РазмерВычетовЛичный.ОграничениеПоДоходам, 0) = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовЛичный.Размер, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыЛичные,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.Резидент
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= РазмерВычетовНаДетей.ОграничениеПоДоходам
	|					ИЛИ РазмерВычетовНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовНаДетей.Размер, 0) * ЕСТЬNULL(ВычетыНаДетей.КоличествоДетей, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетские,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.Резидент
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= РазмерВычетовНаДетей.ОграничениеПоДоходам
	|					ИЛИ РазмерВычетовНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовНаДетейДвойные.Размер, 0) * ЕСТЬNULL(ВычетыНаДетейДвойные.КоличествоДетей, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеДвойные,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.Резидент
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= РазмерВычетовНаДетей.ОграничениеПоДоходам
	|					ИЛИ РазмерВычетовНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовНаДетейДвойныеВторые.Размер, 0) * ЕСТЬNULL(ВычетыНаДетейДвойныеВторые.КоличествоДетей, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеДвойныеВторые,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.Резидент
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= РазмерВычетовНаДетей.ОграничениеПоДоходам
	|					ИЛИ РазмерВычетовНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовНаТретьегоРебенка.Размер, 0) * ЕСТЬNULL(ВычетыНаТретьегоРебенка.КоличествоДетей, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаТретьегоРебенка,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.Резидент
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= РазмерВычетовНаДетей.ОграничениеПоДоходам
	|					ИЛИ РазмерВычетовНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовНаТретьегоРебенкаДвойные.Размер, 0) * ЕСТЬNULL(ВычетыНаТретьегоРебенкаДвойные.КоличествоДетей, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаТретьегоРебенкаДвойные,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.Резидент
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= РазмерВычетовНаДетей.ОграничениеПоДоходам
	|					ИЛИ РазмерВычетовНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовНаТретьегоРебенкаДвойныеВторые.Размер, 0) * ЕСТЬNULL(ВычетыНаТретьегоРебенкаДвойныеВторые.КоличествоДетей, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаТретьегоРебенкаДвойныеВторые,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.Резидент
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= РазмерВычетовНаДетей.ОграничениеПоДоходам
	|					ИЛИ РазмерВычетовНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовНаВторогоРебенка.Размер, 0) * ЕСТЬNULL(ВычетыНаВторогоРебенка.КоличествоДетей, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаВторогоРебенка,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.Резидент
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= РазмерВычетовНаДетей.ОграничениеПоДоходам
	|					ИЛИ РазмерВычетовНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовНаВторогоРебенкаДвойные.Размер, 0) * ЕСТЬNULL(ВычетыНаВторогоРебенкаДвойные.КоличествоДетей, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаВторогоРебенкаДвойные,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.Резидент
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= РазмерВычетовНаДетей.ОграничениеПоДоходам
	|					ИЛИ РазмерВычетовНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовНаВторогоРебенкаДвойныеВторые.Размер, 0) * ЕСТЬNULL(ВычетыНаВторогоРебенкаДвойныеВторые.КоличествоДетей, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыНаВторогоРебенкаДвойныеВторые,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.Резидент
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= РазмерВычетовНаДетей.ОграничениеПоДоходам
	|					ИЛИ РазмерВычетовНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовНаДетейИнвалидов.Размер, 0) * ЕСТЬNULL(ВычетыНаДетейИнвалидов.КоличествоДетей, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеИнвалидов,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.Резидент
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= РазмерВычетовНаДетей.ОграничениеПоДоходам
	|					ИЛИ РазмерВычетовНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовНаДетейИнвалидовДвойные.Размер, 0) * ЕСТЬNULL(ВычетыНаДетейИнвалидовДвойные.КоличествоДетей, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеИнвалидовДвойные,
	|	ВЫБОР
	|		КОГДА ПрименениеВычетов.ПрименятьВычеты
	|				И Периоды.Резидент
	|				И (ДоходыНарастающимИтогом.ОблагаемыйДоходЗаГод + ЕСТЬNULL(ДоходыСПредыдущегоМестаРаботы.Размер, 0) <= РазмерВычетовНаДетей.ОграничениеПоДоходам
	|					ИЛИ РазмерВычетовНаДетей.ОграничениеПоДоходам = 0)
	|			ТОГДА ЕСТЬNULL(РазмерВычетовНаДетейИнвалидовДвойныеВторые.Размер, 0) * ЕСТЬNULL(ВычетыНаДетейИнвалидовДвойныеВторые.КоличествоДетей, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтандартныеВычетыДетскиеИнвалидовДвойныеВторые,
	|	РазмерВычетовЛичный.ОграничениеПоДоходам КАК ОграничениеПоДоходамЛичные,
	|	РазмерВычетовНаДетей.ОграничениеПоДоходам КАК ОграничениеПоДоходамНаДетей
	|ПОМЕСТИТЬ ВТПраваНаСтандартныеВычетыПоМесяцам
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПрименениеСтандартныхВычетов КАК ПрименениеВычетов
	|		ПО Периоды.ФизЛицо = ПрименениеВычетов.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ПрименениеВычетов.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовНаДетей
	|		ПО (РазмерВычетовНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101))
	|			И Периоды.НачалоГодаНалоговогоПериода = РазмерВычетовНаДетей.НачалоНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаЛичныеВычеты КАК ВычетыЛичные
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовЛичный
	|			ПО ВычетыЛичные.КодВычета = РазмерВычетовЛичный.КодВычета
	|				И ВычетыЛичные.НачалоГодаНалоговогоПериода = РазмерВычетовЛичный.НачалоНалоговогоПериода
	|		ПО Периоды.МесяцНалоговогоПериода = ВычетыЛичные.МесяцНалоговогоПериода
	|			И Периоды.ФизЛицо = ВычетыЛичные.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычетыНаДетей КАК ВычетыНаДетей
	|		ПО (ВычетыНаДетей.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101))
	|			И Периоды.ФизЛицо = ВычетыНаДетей.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаДетей.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычетыНаДетей КАК ВычетыНаДетейДвойные
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовНаДетейДвойные
	|			ПО ВычетыНаДетейДвойные.КодВычета = РазмерВычетовНаДетейДвойные.КодВычета
	|				И ВычетыНаДетейДвойные.НачалоГодаНалоговогоПериода = РазмерВычетовНаДетейДвойные.НачалоНалоговогоПериода
	|		ПО (ВычетыНаДетейДвойные.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код102))
	|			И Периоды.ФизЛицо = ВычетыНаДетейДвойные.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаДетейДвойные.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычетыНаДетей КАК ВычетыНаДетейДвойныеВторые
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовНаДетейДвойныеВторые
	|			ПО ВычетыНаДетейДвойныеВторые.КодВычета = РазмерВычетовНаДетейДвойныеВторые.КодВычета
	|				И ВычетыНаДетейДвойныеВторые.НачалоГодаНалоговогоПериода = РазмерВычетовНаДетейДвойныеВторые.НачалоНалоговогоПериода
	|		ПО (ВычетыНаДетейДвойныеВторые.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код111))
	|			И Периоды.ФизЛицо = ВычетыНаДетейДвойныеВторые.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаДетейДвойныеВторые.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычетыНаДетей КАК ВычетыНаТретьегоРебенка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовНаТретьегоРебенка
	|			ПО ВычетыНаТретьегоРебенка.КодВычета = РазмерВычетовНаТретьегоРебенка.КодВычета
	|				И ВычетыНаТретьегоРебенка.НачалоГодаНалоговогоПериода = РазмерВычетовНаТретьегоРебенка.НачалоНалоговогоПериода
	|		ПО (ВычетыНаТретьегоРебенка.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код116))
	|			И Периоды.ФизЛицо = ВычетыНаТретьегоРебенка.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаТретьегоРебенка.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычетыНаДетей КАК ВычетыНаТретьегоРебенкаДвойные
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовНаТретьегоРебенкаДвойные
	|			ПО ВычетыНаТретьегоРебенкаДвойные.КодВычета = РазмерВычетовНаТретьегоРебенкаДвойные.КодВычета
	|				И ВычетыНаТретьегоРебенкаДвойные.НачалоГодаНалоговогоПериода = РазмерВычетовНаТретьегоРебенкаДвойные.НачалоНалоговогоПериода
	|		ПО (ВычетыНаТретьегоРебенкаДвойные.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код120))
	|			И Периоды.ФизЛицо = ВычетыНаТретьегоРебенкаДвойные.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаТретьегоРебенкаДвойные.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычетыНаДетей КАК ВычетыНаТретьегоРебенкаДвойныеВторые
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовНаТретьегоРебенкаДвойныеВторые
	|			ПО ВычетыНаТретьегоРебенкаДвойныеВторые.КодВычета = РазмерВычетовНаТретьегоРебенкаДвойныеВторые.КодВычета
	|				И ВычетыНаТретьегоРебенкаДвойныеВторые.НачалоГодаНалоговогоПериода = РазмерВычетовНаТретьегоРебенкаДвойныеВторые.НачалоНалоговогоПериода
	|		ПО (ВычетыНаТретьегоРебенкаДвойныеВторые.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код124))
	|			И Периоды.ФизЛицо = ВычетыНаТретьегоРебенкаДвойныеВторые.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаТретьегоРебенкаДвойныеВторые.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычетыНаДетей КАК ВычетыНаВторогоРебенка
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовНаВторогоРебенка
	|			ПО ВычетыНаВторогоРебенка.КодВычета = РазмерВычетовНаВторогоРебенка.КодВычета
	|				И ВычетыНаВторогоРебенка.НачалоГодаНалоговогоПериода = РазмерВычетовНаВторогоРебенка.НачалоНалоговогоПериода
	|		ПО (ВычетыНаВторогоРебенка.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код115))
	|			И Периоды.ФизЛицо = ВычетыНаВторогоРебенка.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаВторогоРебенка.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычетыНаДетей КАК ВычетыНаВторогоРебенкаДвойные
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовНаВторогоРебенкаДвойные
	|			ПО ВычетыНаВторогоРебенкаДвойные.КодВычета = РазмерВычетовНаВторогоРебенкаДвойные.КодВычета
	|				И ВычетыНаВторогоРебенкаДвойные.НачалоГодаНалоговогоПериода = РазмерВычетовНаВторогоРебенкаДвойные.НачалоНалоговогоПериода
	|		ПО (ВычетыНаВторогоРебенкаДвойные.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код119))
	|			И Периоды.ФизЛицо = ВычетыНаВторогоРебенкаДвойные.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаВторогоРебенкаДвойные.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычетыНаДетей КАК ВычетыНаВторогоРебенкаДвойныеВторые
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовНаВторогоРебенкаДвойныеВторые
	|			ПО ВычетыНаВторогоРебенкаДвойныеВторые.КодВычета = РазмерВычетовНаВторогоРебенкаДвойныеВторые.КодВычета
	|				И ВычетыНаВторогоРебенкаДвойныеВторые.НачалоГодаНалоговогоПериода = РазмерВычетовНаВторогоРебенкаДвойныеВторые.НачалоНалоговогоПериода
	|		ПО (ВычетыНаВторогоРебенкаДвойныеВторые.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код123))
	|			И Периоды.ФизЛицо = ВычетыНаВторогоРебенкаДвойныеВторые.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаВторогоРебенкаДвойныеВторые.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычетыНаДетей КАК ВычетыНаДетейИнвалидов
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовНаДетейИнвалидов
	|			ПО ВычетыНаДетейИнвалидов.КодВычета = РазмерВычетовНаДетейИнвалидов.КодВычета
	|				И ВычетыНаДетейИнвалидов.НачалоГодаНалоговогоПериода = РазмерВычетовНаДетейИнвалидов.НачалоНалоговогоПериода
	|		ПО (ВычетыНаДетейИнвалидов.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код106))
	|			И Периоды.ФизЛицо = ВычетыНаДетейИнвалидов.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаДетейИнвалидов.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычетыНаДетей КАК ВычетыНаДетейИнвалидовДвойные
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовНаДетейИнвалидовДвойные
	|			ПО ВычетыНаДетейИнвалидовДвойные.КодВычета = РазмерВычетовНаДетейИнвалидовДвойные.КодВычета
	|				И ВычетыНаДетейИнвалидовДвойные.НачалоГодаНалоговогоПериода = РазмерВычетовНаДетейИнвалидовДвойные.НачалоНалоговогоПериода
	|		ПО (ВычетыНаДетейИнвалидовДвойные.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код107))
	|			И Периоды.ФизЛицо = ВычетыНаДетейИнвалидовДвойные.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаДетейИнвалидовДвойные.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаВычетыНаДетей КАК ВычетыНаДетейИнвалидовДвойныеВторые
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРазмерыСтандартныхВычетов КАК РазмерВычетовНаДетейИнвалидовДвойныеВторые
	|			ПО ВычетыНаДетейИнвалидовДвойныеВторые.КодВычета = РазмерВычетовНаДетейИнвалидовДвойныеВторые.КодВычета
	|				И ВычетыНаДетейИнвалидовДвойныеВторые.НачалоГодаНалоговогоПериода = РазмерВычетовНаДетейИнвалидовДвойныеВторые.НачалоНалоговогоПериода
	|		ПО (ВычетыНаДетейИнвалидовДвойныеВторые.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код113))
	|			И Периоды.ФизЛицо = ВычетыНаДетейИнвалидовДвойныеВторые.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ВычетыНаДетейИнвалидовДвойныеВторые.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НДФЛДоходыПредыдущегоМестаРаботы КАК ДоходыСПредыдущегоМестаРаботы
	|		ПО Периоды.МесяцНалоговогоПериода = ДоходыСПредыдущегоМестаРаботы.МесяцНалоговогоПериода
	|			И Периоды.ФизЛицо = ДоходыСПредыдущегоМестаРаботы.ФизЛицо
	|			И (ДоходыСПредыдущегоМестаРаботы.Организация = &ГоловнаяОрганизация)
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыРезидентовНарастающимЗаГод КАК ДоходыНарастающимИтогом
	|		ПО Периоды.МесяцНалоговогоПериода = ДоходыНарастающимИтогом.МесяцНалоговогоПериода
	|			И Периоды.ФизЛицо = ДоходыНарастающимИтогом.ФизЛицо
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Доходы.ФизЛицо КАК ФизЛицо,
	|	СУММА(ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА Доходы.Резидент
	|					ТОГДА 0
	|				ИНАЧЕ Доходы.ДоходыБезВычетов
	|			КОНЕЦ * СтавкиНалогаВПроцентах.Размер КАК ЧИСЛО(13, 0))) КАК НалогНерезидента
	|ПОМЕСТИТЬ ВТНалогНерезидентов
	|ИЗ
	|	ВТДоходыСУчетомВычетовКДоходам КАК Доходы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНалогаВПроцентах КАК СтавкиНалогаВПроцентах
	|		ПО Доходы.СтавкаНалогообложенияНеРезидента = СтавкиНалогаВПроцентах.СтавкаНалогообложения
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизЛицо,
	|	Доходы.МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	Периоды.Порядок КАК Порядок,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Периоды.Резидент,
	|	ДоходыРезидентовПоМесяцам.ОблагаемыйДоход КАК ОблагаемыйДоходЗаМесяц,
	|	ДоходыРезидентовНарастающимЗаГод.ОблагаемыйДоходЗаГод КАК ОблагаемыйДоходНарастающимИтогом,
	|	СоциальныеВычеты.СуммаОборот КАК СоциальныйВычет,
	|	ВЫБОР
	|		КОГДА Периоды.Резидент
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(НалогНерезидентов.НалогНерезидента, 0)
	|	КОНЕЦ КАК НалогЗаМесяц,
	|	СтавкиНалогаВПроцентах.Размер КАК СтавкаДляРезидента,
	|	ПравоНаСтандартныеВычеты.КодВычетаЛичный,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыЛичные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетские,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеДвойные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеДвойныеВторые,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаТретьегоРебенка,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаТретьегоРебенкаДвойные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаТретьегоРебенкаДвойныеВторые,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаВторогоРебенка,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаВторогоРебенкаДвойные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыНаВторогоРебенкаДвойныеВторые,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеИнвалидов,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеИнвалидовДвойные,
	|	ПравоНаСтандартныеВычеты.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые,
	|	ЕСТЬNULL(ПолитикаПримененияВычетов.ОсобенностиИсчисленияНДФЛ, ЗНАЧЕНИЕ(Перечисление.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом)) КАК ОсобенностиУчетаВычетов,
	|	ГОД(Периоды.МесяцНалоговогоПериода) КАК НалоговыйПериод,
	|	ПравоНаСтандартныеВычеты.ОграничениеПоДоходамЛичные,
	|	ПравоНаСтандартныеВычеты.ОграничениеПоДоходамНаДетей
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТНалогНерезидентов КАК НалогНерезидентов
	|		ПО Периоды.ФизЛицо = НалогНерезидентов.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = НалогНерезидентов.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПраваНаСтандартныеВычетыПоМесяцам КАК ПравоНаСтандартныеВычеты
	|		ПО Периоды.ФизЛицо = ПравоНаСтандартныеВычеты.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ПравоНаСтандартныеВычеты.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыРезидентовНарастающимЗаГод КАК ДоходыРезидентовНарастающимЗаГод
	|		ПО Периоды.ФизЛицо = ДоходыРезидентовНарастающимЗаГод.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ДоходыРезидентовНарастающимЗаГод.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыРезидентовПоМесяцам КАК ДоходыРезидентовПоМесяцам
	|		ПО Периоды.ФизЛицо = ДоходыРезидентовПоМесяцам.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ДоходыРезидентовПоМесяцам.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСоциальныеВычетыПомесячно КАК СоциальныеВычеты
	|		ПО Периоды.ФизЛицо = СоциальныеВычеты.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = СоциальныеВычеты.МесяцНалоговогоПериода
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтавкиНалогаВПроцентах КАК СтавкиНалогаВПроцентах
	|		ПО (СтавкиНалогаВПроцентах.СтавкаНалогообложения = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13))
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПолитикаПримененияВычетов КАК ПолитикаПримененияВычетов
	|		ПО Периоды.НачалоГодаНалоговогоПериода = ПолитикаПримененияВычетов.НачалоНалоговогоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок,
	|	ФизЛицо,
	|	НалоговыйПериод,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	СУММА(ВЫБОР
	|			КОГДА ПравоНаИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код311)
	|				ТОГДА ПравоНаИмущественныеВычеты.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетИмущественныйРасходы,
	|	СУММА(ВЫБОР
	|			КОГДА ПравоНаИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код312)
	|				ТОГДА ПравоНаИмущественныеВычеты.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетИмущественныйПроцентыПоКредитам,
	|	СУММА(ВЫБОР
	|			КОГДА ПравоНаИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код318)
	|				ТОГДА ПравоНаИмущественныеВычеты.Размер
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ВычетИмущественныйПроцентыПриПерекредитовании
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПравоНаИмущественныеВычеты КАК ПравоНаИмущественныеВычеты
	|		ПО Периоды.ФизЛицо = ПравоНаИмущественныеВычеты.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ПравоНаИмущественныеВычеты.МесяцНалоговогоПериода
	|
	|СГРУППИРОВАТЬ ПО
	|	Периоды.ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Доходы.ФизЛицо КАК ФизЛицо,
	|	Доходы.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	Доходы.Подразделение КАК Подразделение,
	|	СУММА(Доходы.СуммаДохода) КАК СуммаДохода
	|ИЗ
	|	(ВЫБРАТЬ
	|		ПериодыФизлиц.ФизЛицо КАК ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ПериодыФизлиц.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|		СведенияОДоходахНДФЛ.ПодразделениеОрганизации КАК Подразделение,
	|		ЕСТЬNULL(СведенияОДоходахНДФЛ.СуммаДохода, 0) - ВЫБОР
	|			КОГДА ПериодыФизлиц.Резидент
	|				ТОГДА ЕСТЬNULL(СведенияОДоходахНДФЛ.СуммаВычета, 0)
	|			КОГДА СведенияОДоходахНДФЛ.КодВычета.НеПредоставляетсяНерезидентам
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(СведенияОДоходахНДФЛ.СуммаВычета, 0)
	|		КОНЕЦ КАК СуммаДохода
	|	ИЗ
	|		ВТПериодыФизлиц КАК ПериодыФизлиц
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДФЛСведенияОДоходах КАК СведенияОДоходахНДФЛ
	|			ПО ПериодыФизлиц.ФизЛицо = СведенияОДоходахНДФЛ.ФизЛицо
	|				И (ПериодыФизлиц.МесяцНалоговогоПериода = НАЧАЛОПЕРИОДА(СведенияОДоходахНДФЛ.Период, МЕСЯЦ))
	|				И (СведенияОДоходахНДФЛ.Организация = &ГоловнаяОрганизация)
	|				И (СведенияОДоходахНДФЛ.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13))
	|				И ((НЕ СведенияОДоходахНДФЛ.КодДохода.НеОблагаетсяУНалоговогоАгента))
	|				И (СведенияОДоходахНДФЛ.ПериодРегистрации <= &КонецМесяцаРасчета)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ПериодыФизлиц.ФизЛицо,
	|		НАЧАЛОПЕРИОДА(ПериодыФизлиц.МесяцНалоговогоПериода, МЕСЯЦ),
	|		КорректировкаДанныхРегистратора.ПодразделениеОрганизации,
	|		ЕСТЬNULL(КорректировкаДанныхРегистратора.СуммаДохода, 0) - ВЫБОР
	|			КОГДА ПериодыФизлиц.Резидент
	|				ТОГДА ЕСТЬNULL(КорректировкаДанныхРегистратора.СуммаВычета, 0)
	|			КОГДА КорректировкаДанныхРегистратора.КодВычета.НеПредоставляетсяНерезидентам
	|				ТОГДА 0
	|			ИНАЧЕ ЕСТЬNULL(КорректировкаДанныхРегистратора.СуммаВычета, 0)
	|		КОНЕЦ
	|	ИЗ
	|		ВТПериодыФизлиц КАК ПериодыФизлиц
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТКорректировкаДанныхРегистратора КАК КорректировкаДанныхРегистратора
	|			ПО ПериодыФизлиц.ФизЛицо = КорректировкаДанныхРегистратора.ФизЛицо
	|				И (ПериодыФизлиц.МесяцНалоговогоПериода = НАЧАЛОПЕРИОДА(КорректировкаДанныхРегистратора.Период, МЕСЯЦ))
	|				И (КорректировкаДанныхРегистратора.Организация = &ГоловнаяОрганизация)
	|				И (КорректировкаДанныхРегистратора.КодДохода.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13))
	|				И ((НЕ КорректировкаДанныхРегистратора.КодДохода.НеОблагаетсяУНалоговогоАгента))
	|				И (КорректировкаДанныхРегистратора.ПериодРегистрации <= &КонецМесяцаРасчета)) КАК Доходы
	|
	|СГРУППИРОВАТЬ ПО
	|	Доходы.ФизЛицо,
	|	Доходы.МесяцНалоговогоПериода,
	|	Доходы.Подразделение
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизЛицо КАК ФизЛицо,
	|	НАЧАЛОПЕРИОДА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода, МЕСЯЦ) КАК МесяцНалоговогоПериода,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ПодразделениеОрганизации КАК Подразделение,
	|	-СУММА(РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Налог) КАК Налог
	|ИЗ
	|	РегистрНакопления.НДФЛРасчетыСБюджетом КАК РасчетыНалогоплательщиковСБюджетомПоНДФЛ
	|ГДЕ
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Регистратор <> &Регистратор
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Начисление)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода МЕЖДУ &НачалоГодаПериодаРасчета И &КонецПериодаРасчета
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Организация = &ГоловнаяОрганизация
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизЛицо В
	|			(ВЫБРАТЬ
	|				СписокСотрудников.ФизЛицо
	|			ИЗ
	|				ВТСписокФизЛиц КАК СписокСотрудников)
	|	И РасчетыНалогоплательщиковСБюджетомПоНДФЛ.Период <= &КонецМесяцаРасчета
	|
	|СГРУППИРОВАТЬ ПО
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ПодразделениеОрганизации,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.ФизЛицо,
	|	РасчетыНалогоплательщиковСБюджетомПоНДФЛ.МесяцНалоговогоПериода
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	НДФЛПредоставленныеСтандартныеВычеты.ФизЛицо КАК ФизЛицо,
	|	НДФЛПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	НДФЛПредоставленныеСтандартныеВычеты.Подразделение КАК Подразделение,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета В (ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код103), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код104), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код105))
	|				ТОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета
	|			ИНАЧЕ ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.ПустаяСсылка)
	|		КОНЕЦ) КАК КодВычетаЛичный,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета В (ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код103), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код104), ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код105))
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетЛичный,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код101)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетей,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код102)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейДвойной,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код111)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейДвойнойВторой,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код116)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаТретьегоРебенка,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код120)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаТретьегоРебенкаДвойной,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код124)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаТретьегоРебенкаДвойнойВторой,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код115)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаВторогоРебенка,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код119)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаВторогоРебенкаДвойной,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код123)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаВторогоРебенкаДвойнойВторой,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код106)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейИнвалидов,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код107)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейИнвалидовДвойной,
	|	СУММА(ВЫБОР
	|			КОГДА НДФЛПредоставленныеСтандартныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код113)
	|				ТОГДА -НДФЛПредоставленныеСтандартныеВычеты.СуммаОборот
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетНаДетейИнвалидовДвойнойВторой
	|ИЗ
	|	ВТПредоставленныеСтандартныеИСоциальныеВычеты КАК НДФЛПредоставленныеСтандартныеВычеты
	|
	|СГРУППИРОВАТЬ ПО
	|	НДФЛПредоставленныеСтандартныеВычеты.Подразделение,
	|	НДФЛПредоставленныеСтандартныеВычеты.МесяцНалоговогоПериода,
	|	НДФЛПредоставленныеСтандартныеВычеты.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода,
	|	Подразделение
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.ФизЛицо КАК ФизЛицо,
	|	Периоды.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|	ИмущественныеВычеты.Подразделение КАК Подразделение,
	|	СУММА(ВЫБОР
	|			КОГДА ИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код311)
	|				ТОГДА -ИмущественныеВычеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетИмущественныйРасход,
	|	СУММА(ВЫБОР
	|			КОГДА ИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код312)
	|				ТОГДА -ИмущественныеВычеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетИмущественныйПроцентыПоКредитам,
	|	СУММА(ВЫБОР
	|			КОГДА ИмущественныеВычеты.КодВычета = ЗНАЧЕНИЕ(Справочник.ВычетыНДФЛ.Код318)
	|				ТОГДА -ИмущественныеВычеты.Сумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПримененныйВычетИмущественныйПроцентыПриПерекредитовании
	|ИЗ
	|	ВТПериодыФизлиц КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПредоставленоИмущественныхВычетов КАК ИмущественныеВычеты
	|		ПО Периоды.ФизЛицо = ИмущественныеВычеты.ФизЛицо
	|			И Периоды.МесяцНалоговогоПериода = ИмущественныеВычеты.МесяцНалоговогоПериода
	|ГДЕ
	|	ИмущественныеВычеты.Подразделение ЕСТЬ НЕ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ИмущественныеВычеты.Подразделение,
	|	Периоды.МесяцНалоговогоПериода,
	|	Периоды.ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	ФизЛицо,
	|	МесяцНалоговогоПериода,
	|	Подразделение";*/
			//Результат =	Запрос.ВыполнитьПакет();
			//ВсегоРезультатов = Результат.Количество();
			//ВыборкаРасчетов = Результат[ВсегоРезультатов - 6].Выбрать();
			//ПравоНаИмущественныеВычеты = Результат[ВсегоРезультатов - 5].Выгрузить();
			//ПравоНаИмущественныеВычеты.Индексы.Добавить("ФизЛицо, МесяцНалоговогоПериода");
			//РаспределениеДоходовПоПодразделениям = Результат[ВсегоРезультатов - 4].Выгрузить();
			//РаспределениеДоходовПоПодразделениям.Индексы.Добавить("ФизЛицо, МесяцНалоговогоПериода");
			//ИсчисленоРанее = Результат[ВсегоРезультатов - 3].Выгрузить();
			//СтандартныхВычетовРанее = Результат[ВсегоРезультатов - 2].Выгрузить();
			//ИмущественныхВычетовРанее = Результат[ВсегоРезультатов - 1].Выгрузить();
			//РаспределятьПоПодразделениям = Не ВозвращатьДанныеРасчетовБезПодразделений;
			//ТипНалог = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(13,0));
			//ТипВычет = Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,2));
			//РезультатыРасчетов = СтандартныхВычетовРанее.СкопироватьКолонки();
			//РезультатыРасчетов.Колонки.Добавить("Налог",ТипНалог);
			//РезультатыРасчетов.Колонки.Добавить("ПримененныйВычетИмущественныйРасход",ТипВычет);
			//РезультатыРасчетов.Колонки.Добавить("ПримененныйВычетИмущественныйПроцентыПоКредитам",ТипВычет);
			//РезультатыРасчетов.Колонки.Добавить("ПримененныйВычетИмущественныйПроцентыПриПерекредитовании",ТипВычет);
			if(true/*ВозвращатьДанныеРасчетовБезПодразделений*/)
			{
				//РезультатыРасчетов.Колонки.Добавить("Резидент", Новый ОписаниеТипов("Булево"));
				//РезультатыРасчетов.Колонки.Добавить("ОблагаемыйДоходНарастающимИтогом",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ОграничениеПоДоходамЛичные",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ОграничениеПоДоходамНаДетей",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетЛичныйЗаМесяц",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетНаДетейИнвалидовДвойнойЗаМесяц",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетНаДетейИнвалидовЗаМесяц",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетНаДетейДвойнойВторойЗаМесяц",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетНаДетейДвойнойЗаМесяц",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетНаДетейЗаМесяц",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетНаТретьегоРебенкаДвойнойЗаМесяц",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетНаТретьегоРебенкаЗаМесяц",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетНаВторогоРебенкаДвойнойЗаМесяц",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетНаВторогоРебенкаЗаМесяц",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетИмущественныйРасходыОстаток",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетИмущественныйПроцентыПриПерекредитованииОстаток",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("ВычетИмущественныйПроцентыПоКредитамОстаток",ТипВычет);
				//РезультатыРасчетов.Колонки.Добавить("НалогЗаМесяц",ТипВычет);
			}
			if(true/*РаспределятьПоПодразделениям*/)
			{
				//ВспомогательнаяТаблица = РезультатыРасчетов.СкопироватьКолонки();
				/*СтрокаРесурсов = "Налог,ПримененныйВычетЛичный" + 
						",ПримененныйВычетНаДетей,ПримененныйВычетНаДетейДвойной,ПримененныйВычетНаДетейДвойнойВторой" +
						",ПримененныйВычетНаТретьегоРебенка,ПримененныйВычетНаТретьегоРебенкаДвойной,ПримененныйВычетНаТретьегоРебенкаДвойнойВторой" +
						",ПримененныйВычетНаВторогоРебенка,ПримененныйВычетНаВторогоРебенкаДвойной,ПримененныйВычетНаВторогоРебенкаДвойнойВторой" +
						",ПримененныйВычетНаДетейИнвалидов,ПримененныйВычетНаДетейИнвалидовДвойной,ПримененныйВычетНаДетейИнвалидовДвойнойВторой,ПримененныйВычетИмущественныйРасход,ПримененныйВычетИмущественныйПроцентыПоКредитам,ПримененныйВычетИмущественныйПроцентыПриПерекредитовании";*/
				//МассивРесурсов = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(СтрокаРесурсов);
			}
			if(true/*КомментироватьРасчет*/)
			{
				//КомментарийНДФЛ = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет НДФЛ");
			}
			//СтруктураПоиска = Новый Структура("ФизЛицо, МесяцНалоговогоПериода");
			while(true/*ВыборкаРасчетов.СледующийПоЗначениюПоля("Порядок")*/)
			{
				while(true/*ВыборкаРасчетов.СледующийПоЗначениюПоля("ФизЛицо")*/)
				{
					if(true/*РаспределятьПоПодразделениям*/)
					{
						//СтруктураПоиска.ФизЛицо = ВыборкаРасчетов.ФизЛицо;
						//СтруктураПоиска.МесяцНалоговогоПериода = НачалоМесяца(ПериодРегистрации);
						//ДоходыМесяцаРасчета = РаспределениеДоходовПоПодразделениям.НайтиСтроки(СтруктураПоиска);
						//КоэффициентыПодразделенийМесяцаРасчета = ВыделитьКоэффициентыРаспределенияИзКоллекцииСтрок(ДоходыМесяцаРасчета, "СуммаДохода");
					}
					while(true/*ВыборкаРасчетов.СледующийПоЗначениюПоля("НалоговыйПериод")*/)
					{
						//ВычетЛичныйОстаток = 0;
						//ВычетНаДетейОстаток = 0;
						//ВычетНаДетейДвойнойОстаток = 0;
						//ВычетНаДетейДвойнойВторойОстаток = 0;
						//ВычетНаТретьегоРебенкаОстаток = 0;
						//ВычетНаТретьегоРебенкаДвойнойОстаток = 0;
						//ВычетНаТретьегоРебенкаДвойнойВторойОстаток = 0;
						//ВычетНаВторогоРебенкаОстаток = 0;
						//ВычетНаВторогоРебенкаДвойнойОстаток = 0;
						//ВычетНаВторогоРебенкаДвойнойВторойОстаток = 0;
						//ВычетНаДетейИнвалидовОстаток = 0;
						//ВычетНаДетейИнвалидовДвойнойОстаток = 0;
						//ВычетНаДетейИнвалидовДвойнойВторойОстаток = 0;
						//ВычетИмущественныйРасходыОстаток = 0;
						//ВычетИмущественныйПроцентыПоКредитамОстаток = 0;
						//ВычетИмущественныйПроцентыПриПерекредитованииОстаток = 0;
						//ВычетСоциальныйОстаток = 0;
						//ОблагаемыйДоход = 0;
						//ДоходЗаМесяцОстаток = 0;
						//НалогИсчисленный = 0;
						while(true/*ВыборкаРасчетов.Следующий()*/)
						{
							//ЗаполнитьЗначенияСвойств(СтруктураПоиска,ВыборкаРасчетов);
							if(true/*РаспределятьПоПодразделениям*/)
							{
								//ВспомогательнаяТаблица.Очистить();
								//Доходы = РаспределениеДоходовПоПодразделениям.НайтиСтроки(СтруктураПоиска);
								//БазаРаспределения = 0;
								if(true/*БазаРаспределения = 0*/)
								{
									/*// если доходов за прошлый месяц нет - будем использовать текущее распределение
*/
									//Доходы = ДоходыМесяцаРасчета;
									//КоэффициентыПодразделений = КоэффициентыПодразделенийМесяцаРасчета;
								}
								//ВписатьВРезультатЗарегистрированныеВУчетеДанныеНДФЛ(ВспомогательнаяТаблица, ИсчисленоРанее.НайтиСтроки(СтруктураПоиска), "Налог");
								/*ВписатьВРезультатЗарегистрированныеВУчетеДанныеНДФЛ(ВспомогательнаяТаблица, СтандартныхВычетовРанее.НайтиСтроки(СтруктураПоиска), "ПримененныйВычетЛичный" +
								",ПримененныйВычетНаДетей,ПримененныйВычетНаДетейДвойной,ПримененныйВычетНаДетейДвойнойВторой" +
								",ПримененныйВычетНаТретьегоРебенка,ПримененныйВычетНаТретьегоРебенкаДвойной,ПримененныйВычетНаТретьегоРебенкаДвойнойВторой" +
								",ПримененныйВычетНаВторогоРебенка,ПримененныйВычетНаВторогоРебенкаДвойной,ПримененныйВычетНаВторогоРебенкаДвойнойВторой" +
								",ПримененныйВычетНаДетейИнвалидов,ПримененныйВычетНаДетейИнвалидовДвойной,ПримененныйВычетНаДетейИнвалидовДвойнойВторой");*/
								//ВписатьВРезультатЗарегистрированныеВУчетеДанныеНДФЛ(ВспомогательнаяТаблица, ИмущественныхВычетовРанее.НайтиСтроки(СтруктураПоиска), "ПримененныйВычетИмущественныйРасход,ПримененныйВычетИмущественныйПроцентыПоКредитам,ПримененныйВычетИмущественныйПроцентыПриПерекредитовании");
							}
							if(true/*КомментироватьРасчет*/)
							{
								//КомментарийМесяца = ОбщегоНазначенияЗК.КомментарийРасчета("Расчет за " + Формат(ВыборкаРасчетов.МесяцНалоговогоПериода, "ДФ=ММММ"), КомментарийНДФЛ);
								if(true/*ВыборкаРасчетов.Резидент*/)
								{
									//ОбщегоНазначенияЗК.КомментарийРасчета("Статус: резидент РФ (или высококвалифицированный иностранный специалист)", КомментарийМесяца);
									//ОбщегоНазначенияЗК.КомментарийРасчета("Доход за период, всего: " + ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц, КомментарийМесяца,,,, Ложь);
								}
							}
							if(true/*ВыборкаРасчетов.Резидент*/)
							{
								if(true/*КомментироватьРасчет*/)
								{
									//ОбщегоНазначенияЗК.КомментарийРасчета("Облагаемый доход нарастающим итогом за год: " + ВыборкаРасчетов.ОблагаемыйДоходНарастающимИтогом, КомментарийМесяца);
								}
								/*// Расчет сумм примененных вычетов и налога
*/
								//ВычетСоциальныйЗаМесяц = 0;
								//ВычетЛичныйЗаМесяц = 0;
								//ВычетНаДетейЗаМесяц = 0;
								//ВычетНаДетейДвойнойЗаМесяц = 0;
								//ВычетНаДетейДвойнойВторойЗаМесяц = 0;
								//ВычетНаТретьегоРебенкаЗаМесяц = 0;
								//ВычетНаТретьегоРебенкаДвойнойЗаМесяц = 0;
								//ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц = 0;
								//ВычетНаВторогоРебенкаЗаМесяц = 0;
								//ВычетНаВторогоРебенкаДвойнойЗаМесяц = 0;
								//ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц = 0;
								//ВычетНаДетейИнвалидовЗаМесяц = 0;
								//ВычетНаДетейИнвалидовДвойнойЗаМесяц = 0;
								//ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц = 0;
								//ВычетИмущественныйРасходыЗаМесяц = 0;
								//ВычетИмущественныйПроцентыПоКредитамЗаМесяц = 0;
								//ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц = 0;
								//ВычетСоциальныйОстаток = ВычетСоциальныйОстаток + ВыборкаРасчетов.СоциальныйВычет;
								//СтрокиПравНаИмущественныеВычеты = ПравоНаИмущественныеВычеты.НайтиСтроки(СтруктураПоиска);
								if(true/*СтрокиПравНаИмущественныеВычеты.Количество() > 0*/)
								{
									//ВычетИмущественныйРасходыОстаток = ВычетИмущественныйРасходыОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетИмущественныйРасходы;
									//ВычетИмущественныйПроцентыПоКредитамОстаток = ВычетИмущественныйПроцентыПоКредитамОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетИмущественныйПроцентыПоКредитам;
									//ВычетИмущественныйПроцентыПриПерекредитованииОстаток = ВычетИмущественныйПроцентыПриПерекредитованииОстаток + СтрокиПравНаИмущественныеВычеты[0].ВычетИмущественныйПроцентыПриПерекредитовании;
								}
								if(true/*ВыборкаРасчетов.ОсобенностиУчетаВычетов = Перечисления.ОсобенностиИсчисленияНДФЛ.СтандартныеВычетыНарастающимИтогом*/)
								{
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток + ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц;
									//ВычетЛичныйОстаток = ВычетЛичныйОстаток + ВыборкаРасчетов.СтандартныеВычетыЛичные;
									//ВычетНаДетейОстаток = ВычетНаДетейОстаток + ВыборкаРасчетов.СтандартныеВычетыДетские;
									//ВычетНаДетейДвойнойОстаток = ВычетНаДетейДвойнойОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойные;
									//ВычетНаДетейДвойнойВторойОстаток = ВычетНаДетейДвойнойВторойОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеДвойныеВторые;
									//ВычетНаТретьегоРебенкаОстаток = ВычетНаТретьегоРебенкаОстаток + ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенка;
									//ВычетНаТретьегоРебенкаДвойнойОстаток = ВычетНаТретьегоРебенкаДвойнойОстаток + ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойные;
									//ВычетНаТретьегоРебенкаДвойнойВторойОстаток = ВычетНаТретьегоРебенкаДвойнойВторойОстаток + ВыборкаРасчетов.СтандартныеВычетыНаТретьегоРебенкаДвойныеВторые;
									//ВычетНаВторогоРебенкаОстаток = ВычетНаВторогоРебенкаОстаток + ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенка;
									//ВычетНаВторогоРебенкаДвойнойОстаток = ВычетНаВторогоРебенкаДвойнойОстаток + ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойные;
									//ВычетНаВторогоРебенкаДвойнойВторойОстаток = ВычетНаВторогоРебенкаДвойнойВторойОстаток + ВыборкаРасчетов.СтандартныеВычетыНаВторогоРебенкаДвойныеВторые;
									//ВычетНаДетейИнвалидовОстаток = ВычетНаДетейИнвалидовОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидов;
									//ВычетНаДетейИнвалидовДвойнойОстаток = ВычетНаДетейИнвалидовДвойнойОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойные;
									//ВычетНаДетейИнвалидовДвойнойВторойОстаток = ВычетНаДетейИнвалидовДвойнойВторойОстаток + ВыборкаРасчетов.СтандартныеВычетыДетскиеИнвалидовДвойныеВторые;
								}
								if(true/*ДоходЗаМесяцОстаток > 0*/)
								{
									//ВычетСоциальныйЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетСоциальныйОстаток);
									//ВычетСоциальныйОстаток = ВычетСоциальныйОстаток - ВычетСоциальныйЗаМесяц;
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетСоциальныйЗаМесяц;
									if(true/*ВыборкаРасчетов.КодВычетаЛичный = Справочники.ВычетыНДФЛ.Код103*/)
									{
										//ВычетЛичныйЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетЛичныйОстаток);
										//ВычетЛичныйОстаток = ВычетЛичныйОстаток - ВычетЛичныйЗаМесяц;
										//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетЛичныйЗаМесяц;
									}
									//ВычетНаДетейЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейОстаток);
									//ВычетНаДетейОстаток = ВычетНаДетейОстаток - ВычетНаДетейЗаМесяц;
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейЗаМесяц;
									//ВычетНаДетейДвойнойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейДвойнойОстаток);
									//ВычетНаДетейДвойнойОстаток = ВычетНаДетейДвойнойОстаток - ВычетНаДетейДвойнойЗаМесяц;
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейДвойнойЗаМесяц;
									//ВычетНаДетейДвойнойВторойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейДвойнойВторойОстаток);
									//ВычетНаДетейДвойнойВторойОстаток = ВычетНаДетейДвойнойВторойОстаток - ВычетНаДетейДвойнойВторойЗаМесяц;
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейДвойнойВторойЗаМесяц;
									//ВычетНаВторогоРебенкаЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаВторогоРебенкаОстаток);
									//ВычетНаВторогоРебенкаОстаток = ВычетНаВторогоРебенкаОстаток - ВычетНаВторогоРебенкаЗаМесяц;
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаВторогоРебенкаЗаМесяц;
									//ВычетНаВторогоРебенкаДвойнойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаВторогоРебенкаДвойнойОстаток);
									//ВычетНаВторогоРебенкаДвойнойОстаток = ВычетНаВторогоРебенкаДвойнойОстаток - ВычетНаВторогоРебенкаДвойнойЗаМесяц;
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаВторогоРебенкаДвойнойЗаМесяц;
									//ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаВторогоРебенкаДвойнойВторойОстаток);
									//ВычетНаВторогоРебенкаДвойнойВторойОстаток = ВычетНаВторогоРебенкаДвойнойВторойОстаток - ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц;
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц;
									//ВычетНаТретьегоРебенкаЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаТретьегоРебенкаОстаток);
									//ВычетНаТретьегоРебенкаОстаток = ВычетНаТретьегоРебенкаОстаток - ВычетНаТретьегоРебенкаЗаМесяц;
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаТретьегоРебенкаЗаМесяц;
									//ВычетНаТретьегоРебенкаДвойнойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаТретьегоРебенкаДвойнойОстаток);
									//ВычетНаТретьегоРебенкаДвойнойОстаток = ВычетНаТретьегоРебенкаДвойнойОстаток - ВычетНаТретьегоРебенкаДвойнойЗаМесяц;
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаТретьегоРебенкаДвойнойЗаМесяц;
									//ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаТретьегоРебенкаДвойнойВторойОстаток);
									//ВычетНаТретьегоРебенкаДвойнойВторойОстаток = ВычетНаТретьегоРебенкаДвойнойВторойОстаток - ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц;
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц;
									//ВычетНаДетейИнвалидовЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейИнвалидовОстаток);
									//ВычетНаДетейИнвалидовОстаток = ВычетНаДетейИнвалидовОстаток - ВычетНаДетейИнвалидовЗаМесяц;
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейИнвалидовЗаМесяц;
									//ВычетНаДетейИнвалидовДвойнойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейИнвалидовДвойнойОстаток);
									//ВычетНаДетейИнвалидовДвойнойОстаток = ВычетНаДетейИнвалидовДвойнойОстаток - ВычетНаДетейИнвалидовДвойнойЗаМесяц;
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейИнвалидовДвойнойЗаМесяц;
									//ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетНаДетейИнвалидовДвойнойВторойОстаток);
									//ВычетНаДетейИнвалидовДвойнойВторойОстаток = ВычетНаДетейИнвалидовДвойнойВторойОстаток - ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц;
									//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц;
									if(true/*ВыборкаРасчетов.КодВычетаЛичный <> Справочники.ВычетыНДФЛ.Код103*/)
									{
										//ВычетЛичныйЗаМесяц = Мин(ДоходЗаМесяцОстаток,ВычетЛичныйОстаток);
										//ВычетЛичныйОстаток = ВычетЛичныйОстаток - ВычетЛичныйЗаМесяц;
										//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетЛичныйЗаМесяц;
									}
									if(true/*ВыборкаРасчетов.МесяцНалоговогоПериода >= ДатаЗакона229ФЗ*/)
									{
										/*ДоходЗаМесяцДляИмущественныхВычетов = Макс(0, ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц - ВычетСоциальныйЗаМесяц - ВычетЛичныйЗаМесяц 
																			- ВычетНаДетейЗаМесяц - ВычетНаДетейДвойнойЗаМесяц - ВычетНаДетейДвойнойВторойЗаМесяц 
																			- ВычетНаТретьегоРебенкаЗаМесяц - ВычетНаТретьегоРебенкаДвойнойЗаМесяц - ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц 
																			- ВычетНаВторогоРебенкаЗаМесяц - ВычетНаВторогоРебенкаДвойнойЗаМесяц - ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц 
																			- ВычетНаДетейИнвалидовЗаМесяц - ВычетНаДетейИнвалидовДвойнойЗаМесяц - ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц);*/
									}
									if(true/*ДоходЗаМесяцДляИмущественныхВычетов > 0*/)
									{
										//ВычетИмущественныйПроцентыПоКредитамЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетИмущественныйПроцентыПоКредитамОстаток);
										//ВычетИмущественныйПроцентыПоКредитамОстаток = ВычетИмущественныйПроцентыПоКредитамОстаток - ВычетИмущественныйПроцентыПоКредитамЗаМесяц;
										//ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетИмущественныйПроцентыПоКредитамЗаМесяц;
										//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетИмущественныйПроцентыПоКредитамЗаМесяц;
										//ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетИмущественныйПроцентыПриПерекредитованииОстаток);
										//ВычетИмущественныйПроцентыПриПерекредитованииОстаток = ВычетИмущественныйПроцентыПриПерекредитованииОстаток - ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц;
										//ДоходЗаМесяцДляИмущественныхВычетов = ДоходЗаМесяцДляИмущественныхВычетов - ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц;
										//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц;
										//ВычетИмущественныйРасходыЗаМесяц = Мин(ДоходЗаМесяцДляИмущественныхВычетов, ВычетИмущественныйРасходыОстаток);
										//ВычетИмущественныйРасходыОстаток = ВычетИмущественныйРасходыОстаток - ВычетИмущественныйРасходыЗаМесяц;
										//ДоходЗаМесяцОстаток = ДоходЗаМесяцОстаток - ВычетИмущественныйРасходыЗаМесяц;
									}
									if(true/*РаспределятьПоПодразделениям*/)
									{
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетЛичныйЗаМесяц, "ПримененныйВычетЛичный", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейЗаМесяц, "ПримененныйВычетНаДетей", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейДвойнойЗаМесяц, "ПримененныйВычетНаДетейДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейДвойнойВторойЗаМесяц, "ПримененныйВычетНаДетейДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаТретьегоРебенкаЗаМесяц, "ПримененныйВычетНаТретьегоРебенка", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаТретьегоРебенкаДвойнойЗаМесяц, "ПримененныйВычетНаТретьегоРебенкаДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц, "ПримененныйВычетНаТретьегоРебенкаДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаВторогоРебенкаЗаМесяц, "ПримененныйВычетНаВторогоРебенка", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаВторогоРебенкаДвойнойЗаМесяц, "ПримененныйВычетНаВторогоРебенкаДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц, "ПримененныйВычетНаВторогоРебенкаДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейИнвалидовЗаМесяц, "ПримененныйВычетНаДетейИнвалидов", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейИнвалидовДвойнойЗаМесяц, "ПримененныйВычетНаДетейИнвалидовДвойной", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц, "ПримененныйВычетНаДетейИнвалидовДвойнойВторой", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетИмущественныйРасходыЗаМесяц, "ПримененныйВычетИмущественныйРасход", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетИмущественныйПроцентыПоКредитамЗаМесяц, "ПримененныйВычетИмущественныйПроцентыПоКредитам", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
										//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц, "ПримененныйВычетИмущественныйПроцентыПриПерекредитовании", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений,,,2);
									}
									if(true/*КомментироватьРасчет*/)
									{
										if(true/*ВычетСоциальныйЗаМесяц + ВычетЛичныйЗаМесяц 
									+ ВычетНаДетейЗаМесяц + ВычетНаДетейДвойнойЗаМесяц + ВычетНаДетейДвойнойВторойЗаМесяц 
									+ ВычетНаТретьегоРебенкаЗаМесяц + ВычетНаТретьегоРебенкаДвойнойЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц 
									+ ВычетНаВторогоРебенкаЗаМесяц + ВычетНаВторогоРебенкаДвойнойЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц 
									+ ВычетНаДетейИнвалидовЗаМесяц + ВычетНаДетейИнвалидовДвойнойЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц + ВычетИмущественныйПроцентыПоКредитамЗаМесяц + ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц + ВычетИмущественныйРасходыЗаМесяц <> 0*/)
										{
											/*КомментарийВычетов = ОбщегоНазначенияЗК.КомментарийРасчета("Примененные вычеты, всего: " + (ВычетСоциальныйЗаМесяц + ВычетЛичныйЗаМесяц 
											+ ВычетНаДетейЗаМесяц + ВычетНаДетейДвойнойЗаМесяц + ВычетНаДетейДвойнойВторойЗаМесяц 
											+ ВычетНаТретьегоРебенкаЗаМесяц + ВычетНаТретьегоРебенкаДвойнойЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц 
											+ ВычетНаВторогоРебенкаЗаМесяц + ВычетНаВторогоРебенкаДвойнойЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц 
											+ ВычетНаДетейИнвалидовЗаМесяц + ВычетНаДетейИнвалидовДвойнойЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц + ВычетИмущественныйПроцентыПоКредитамЗаМесяц + ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц + ВычетИмущественныйРасходыЗаМесяц), КомментарийМесяца);*/
											if(true/*ВычетСоциальныйЗаМесяц <> 0*/)
											{
												//ОбщегоНазначенияЗК.КомментарийРасчета("Примененный социальный вычет: " + ВычетСоциальныйЗаМесяц, КомментарийВычетов);
											}
											if(true/*ВычетЛичныйЗаМесяц <> 0*/)
											{
												//ОбщегоНазначенияЗК.КомментарийРасчета("Примененный личный вычет: " + ВычетЛичныйЗаМесяц, КомментарийВычетов);
											}
											if(true/*ВычетНаДетейЗаМесяц <> 0*/)
											{
												//ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей: " + ВычетНаДетейЗаМесяц, КомментарийВычетов);
											}
											if(true/*ВычетНаДетейДвойнойЗаМесяц + ВычетНаДетейДвойнойВторойЗаМесяц <> 0*/)
											{
												//ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей (двойной): " + (ВычетНаДетейДвойнойЗаМесяц + ВычетНаДетейДвойнойВторойЗаМесяц), КомментарийВычетов);
											}
											if(true/*ВычетНаВторогоРебенкаЗаМесяц <> 0*/)
											{
												//ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей: " + ВычетНаВторогоРебенкаЗаМесяц, КомментарийВычетов);
											}
											if(true/*ВычетНаВторогоРебенкаДвойнойЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц <> 0*/)
											{
												//ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей (двойной): " + (ВычетНаВторогоРебенкаДвойнойЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц), КомментарийВычетов);
											}
											if(true/*ВычетНаТретьегоРебенкаЗаМесяц <> 0*/)
											{
												//ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей: " + ВычетНаТретьегоРебенкаЗаМесяц, КомментарийВычетов);
											}
											if(true/*ВычетНаТретьегоРебенкаДвойнойЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц <> 0*/)
											{
												//ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей (двойной): " + (ВычетНаТретьегоРебенкаДвойнойЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц), КомментарийВычетов);
											}
											if(true/*ВычетНаДетейИнвалидовЗаМесяц <> 0*/)
											{
												//ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей-инвалидов: " + ВычетНаДетейИнвалидовЗаМесяц, КомментарийВычетов);
											}
											if(true/*ВычетНаДетейИнвалидовДвойнойЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц <> 0*/)
											{
												//ОбщегоНазначенияЗК.КомментарийРасчета("Примененный вычет на детей-инвалидов (двойной): " + (ВычетНаДетейИнвалидовДвойнойЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц), КомментарийВычетов);
											}
											if(true/*ВычетИмущественныйПроцентыПоКредитамЗаМесяц + ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц <> 0*/)
											{
												//ОбщегоНазначенияЗК.КомментарийРасчета("Вычеты на погашение процентов по ипотеке: " + (ВычетИмущественныйПроцентыПоКредитамЗаМесяц + ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц), КомментарийВычетов);
											}
											if(true/*ВычетИмущественныйРасходыЗаМесяц <> 0*/)
											{
												//ОбщегоНазначенияЗК.КомментарийРасчета("Вычеты по расходам на строительство: " + ВычетИмущественныйРасходыЗаМесяц, КомментарийВычетов);
											}
										}
									}
								}
								/*ОблагаемыйДоход = Макс(0, ОблагаемыйДоход + ВыборкаРасчетов.ОблагаемыйДоходЗаМесяц - (ВычетСоциальныйЗаМесяц + ВычетЛичныйЗаМесяц 
									+ ВычетНаДетейЗаМесяц + ВычетНаДетейДвойнойЗаМесяц + ВычетНаДетейДвойнойВторойЗаМесяц 
									+ ВычетНаТретьегоРебенкаЗаМесяц + ВычетНаТретьегоРебенкаДвойнойЗаМесяц + ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц 
									+ ВычетНаВторогоРебенкаЗаМесяц + ВычетНаВторогоРебенкаДвойнойЗаМесяц + ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц 
									+ ВычетНаДетейИнвалидовЗаМесяц + ВычетНаДетейИнвалидовДвойнойЗаМесяц + ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц + ВычетИмущественныйПроцентыПоКредитамЗаМесяц + ВычетИмущественныйПроцентыПриПерекредитованииЗаМесяц + ВычетИмущественныйРасходыЗаМесяц));*/
								//НалогЗаМесяц = Окр(ОблагаемыйДоход * ВыборкаРасчетов.СтавкаДляРезидента) - НалогИсчисленный;
								//НалогИсчисленный = НалогИсчисленный + НалогЗаМесяц;
								if(true/*ВозвращатьДанныеРасчетовБезПодразделений*/)
								{
									//СтрокаРезультата = РезультатыРасчетов.Добавить();
									//ЗаполнитьЗначенияСвойств(СтрокаРезультата, ВыборкаРасчетов, "ФизЛицо, МесяцНалоговогоПериода, Резидент, ОблагаемыйДоходНарастающимИтогом, ОграничениеПоДоходамЛичные, ОграничениеПоДоходамНаДетей");
									//СтрокаРезультата.ВычетЛичныйЗаМесяц = ВычетЛичныйЗаМесяц;
									//СтрокаРезультата.ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц = ВычетНаДетейИнвалидовДвойнойВторойЗаМесяц;
									//СтрокаРезультата.ВычетНаДетейИнвалидовДвойнойЗаМесяц = ВычетНаДетейИнвалидовДвойнойЗаМесяц;
									//СтрокаРезультата.ВычетНаДетейИнвалидовЗаМесяц = ВычетНаДетейИнвалидовЗаМесяц;
									//СтрокаРезультата.ВычетНаДетейДвойнойВторойЗаМесяц = ВычетНаДетейДвойнойВторойЗаМесяц;
									//СтрокаРезультата.ВычетНаДетейДвойнойЗаМесяц = ВычетНаДетейДвойнойЗаМесяц;
									//СтрокаРезультата.ВычетНаДетейЗаМесяц = ВычетНаДетейЗаМесяц;
									//СтрокаРезультата.ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц = ВычетНаТретьегоРебенкаДвойнойВторойЗаМесяц;
									//СтрокаРезультата.ВычетНаТретьегоРебенкаДвойнойЗаМесяц = ВычетНаТретьегоРебенкаДвойнойЗаМесяц;
									//СтрокаРезультата.ВычетНаТретьегоРебенкаЗаМесяц = ВычетНаТретьегоРебенкаЗаМесяц;
									//СтрокаРезультата.ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц = ВычетНаВторогоРебенкаДвойнойВторойЗаМесяц;
									//СтрокаРезультата.ВычетНаВторогоРебенкаДвойнойЗаМесяц = ВычетНаВторогоРебенкаДвойнойЗаМесяц;
									//СтрокаРезультата.ВычетНаВторогоРебенкаЗаМесяц = ВычетНаВторогоРебенкаЗаМесяц;
									//СтрокаРезультата.ВычетИмущественныйРасходыОстаток = ВычетИмущественныйРасходыОстаток;
									//СтрокаРезультата.ВычетИмущественныйПроцентыПриПерекредитованииОстаток = ВычетИмущественныйПроцентыПриПерекредитованииОстаток;
									//СтрокаРезультата.ВычетИмущественныйПроцентыПоКредитамОстаток = ВычетИмущественныйПроцентыПоКредитамОстаток;
									//СтрокаРезультата.НалогЗаМесяц = НалогЗаМесяц;
								}
								if(true/*КомментироватьРасчет*/)
								{
									//ОбщегоНазначенияЗК.КомментарийРасчета("Исчислено налога нарастающим итогом за год: " + Окр(ОблагаемыйДоход * ВыборкаРасчетов.СтавкаДляРезидента), КомментарийМесяца);
									//ОбщегоНазначенияЗК.КомментарийРасчета("Исчислено налога за месяц: " + НалогЗаМесяц, КомментарийМесяца);
									//РанееНалогИсчисленный = ИсчисленоРанее.Скопировать(ИсчисленоРанее.НайтиСтроки(СтруктураПоиска),"Налог");
									//РанееНалогИсчисленный = -РанееНалогИсчисленный.Итог("Налог");
									if(true/*РанееНалогИсчисленный <> 0*/)
									{
										//ОбщегоНазначенияЗК.КомментарийРасчета("Зарегистрировано ранее налога за месяц: " + РанееНалогИсчисленный, КомментарийМесяца);
									}
									//ОбщегоНазначенияЗК.КомментарийРасчета("Результат расчета за " + Формат(ВыборкаРасчетов.МесяцНалоговогоПериода, "ДФ=ММММ") + ": " + (НалогЗаМесяц - РанееНалогИсчисленный), КомментарийНДФЛ);
								}
							}
							if(true/*РаспределятьПоПодразделениям*/)
							{
								//ВписатьРесурсВРезультатыРасчетовНДФЛ(ВспомогательнаяТаблица, ВыборкаРасчетов.МесяцНалоговогоПериода, НалогЗаМесяц, "Налог", ВыборкаРасчетов, Доходы, КоэффициентыПодразделений);
								//ВспомогательнаяТаблица.Свернуть("ФизЛицо, МесяцНалоговогоПериода,Подразделение", СтрокаРесурсов);
							}
						}
						//;;
					}
					//;;
				}
				//;;
			}
			if(true/*РаспределятьПоПодразделениям*/)
			{
				//РезультатыРасчетов.Колонки.Подразделение.Имя = "ПодразделениеОрганизации";
			}
			return null;
		}
		// ПолучитьДанныеНДФЛПоРегистратору
		// По переданным движениям расчетов налогоплательщика по НДФЛ формирует движения по расчетам налогового агента
		//
		// Параметры
		//  РасчетыПоНДФЛ - таблица значений по структуре совпадающая с рег-ром НДФЛРасчетыСБюджетом
		//
		// Возвращаемое значение:
		//  таблица значений по структуре совпадающая с рег-ром РасчетыНалоговыхАгентовСБюджетомПоНДФЛ
		//

		public object РасчетыНалоговогоАгентаПоУдержанномуНДФЛ(/*РасчетыПоНДФЛ*/)
		{
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("ПустойКодПоОКАТО","");
			//Запрос.УстановитьПараметр("ПустойКПП","");
			//Запрос.УстановитьПараметр("РасчетыПоНДФЛ", РасчетыПоНДФЛ);
			//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	НДФЛРасчетыСБюджетом.НомерСтроки,
	|	НДФЛРасчетыСБюджетом.ФизЛицо,
	|	НДФЛРасчетыСБюджетом.МесяцНалоговогоПериода,
	|	НДФЛРасчетыСБюджетом.КодДохода,
	|	НДФЛРасчетыСБюджетом.КПП,
	|	НДФЛРасчетыСБюджетом.КодПоОКАТО,
	|	НДФЛРасчетыСБюджетом.Налог КАК Сумма,
	|	НДФЛРасчетыСБюджетом.Период,
	|	НДФЛРасчетыСБюджетом.СтавкаНалогообложенияРезидента,
	|	НДФЛРасчетыСБюджетом.ПодразделениеОрганизации,
	|	НДФЛРасчетыСБюджетом.ОбособленноеПодразделение
	|ПОМЕСТИТЬ ВТРасчетыФЛ
	|ИЗ
	|	&РасчетыПоНДФЛ КАК НДФЛРасчетыСБюджетом
	|ГДЕ
	|	НДФЛРасчетыСБюджетом.ВидСтроки = ЗНАЧЕНИЕ(Перечисление.НДФЛРасчетыСБюджетомВидСтроки.Удержание)
	|	И НДФЛРасчетыСБюджетом.Налог <> 0";*/
			//Запрос.Выполнить();
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДатыРегистра.НомерСтроки,
	|	ЕСТЬNULL(СтатусФизЛицКакНалогоплательщиковНДФЛ.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)) КАК Статус
	|ПОМЕСТИТЬ ВТСтатусНалогоплательщика
	|ИЗ
	|	(ВЫБРАТЬ
	|		РасчетыФЛ.ФизЛицо КАК ФизЛицо,
	|		РасчетыФЛ.МесяцНалоговогоПериода КАК МесяцНалоговогоПериода,
	|		МАКСИМУМ(СтатусФизЛицКакНалогоплательщиковНДФЛ.Период) КАК Период,
	|		РасчетыФЛ.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		ВТРасчетыФЛ КАК РасчетыФЛ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусФизЛицКакНалогоплательщиковНДФЛ
	|			ПО РасчетыФЛ.ФизЛицо = СтатусФизЛицКакНалогоплательщиковНДФЛ.ФизЛицо
	|				И РасчетыФЛ.МесяцНалоговогоПериода >= СтатусФизЛицКакНалогоплательщиковНДФЛ.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		РасчетыФЛ.ФизЛицо,
	|		РасчетыФЛ.МесяцНалоговогоПериода,
	|		РасчетыФЛ.НомерСтроки) КАК ДатыРегистра
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ КАК СтатусФизЛицКакНалогоплательщиковНДФЛ
	|		ПО ДатыРегистра.ФизЛицо = СтатусФизЛицКакНалогоплательщиковНДФЛ.ФизЛицо
	|			И ДатыРегистра.Период = СтатусФизЛицКакНалогоплательщиковНДФЛ.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасчетыФЛ.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	РасчетыФЛ.ФизЛицо,
	|	РасчетыФЛ.ОбособленноеПодразделение КАК Организация,
	|	РасчетыФЛ.МесяцНалоговогоПериода,
	|	РасчетыФЛ.Сумма,
	|	ВЫБОР
	|		КОГДА РасчетыФЛ.КПП <> &ПустойКПП
	|			ТОГДА РасчетыФЛ.КПП
	|		КОГДА ЕСТЬNULL(РасчетыФЛ.ПодразделениеОрганизации.КПП, &ПустойКПП) <> &ПустойКПП
	|			ТОГДА РасчетыФЛ.ПодразделениеОрганизации.КПП
	|		ИНАЧЕ ЕСТЬNULL(РасчетыФЛ.ОбособленноеПодразделение.КПП, &ПустойКПП)
	|	КОНЕЦ КАК КПП,
	|	ВЫБОР
	|		КОГДА РасчетыФЛ.КодПоОКАТО <> &ПустойКодПоОКАТО
	|			ТОГДА РасчетыФЛ.КодПоОКАТО
	|		КОГДА ЕСТЬNULL(РасчетыФЛ.ПодразделениеОрганизации.КодПоОКАТО, &ПустойКодПоОКАТО) <> &ПустойКодПоОКАТО
	|			ТОГДА РасчетыФЛ.ПодразделениеОрганизации.КодПоОКАТО
	|		ИНАЧЕ ЕСТЬNULL(РасчетыФЛ.ОбособленноеПодразделение.КодПоОКАТО, &ПустойКодПоОКАТО)
	|	КОНЕЦ КАК КодПоОКАТО,
	|	ВЫБОР
	|		КОГДА РасчетыФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка13)
	|			ТОГДА ВЫБОР
	|					КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.НеРезидент)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка13)
	|				КОНЕЦ
	|		КОГДА Статусы.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыНалогоплательщиковПоНДФЛ.Резидент)
	|			ТОГДА ВЫБОР
	|					КОГДА РасчетыФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка09)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка09)
	|					КОГДА РасчетыФЛ.СтавкаНалогообложенияРезидента = ЗНАЧЕНИЕ(Перечисление.НДФЛСтавкиНалогообложенияРезидента.Ставка35)
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка35)
	|				КОНЕЦ
	|		КОГДА РасчетыФЛ.КодДохода = ЗНАЧЕНИЕ(Справочник.ДоходыНДФЛ.Код1010)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка15)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.НДФЛСтавки.Ставка30)
	|	КОНЕЦ КАК Ставка,
	|	РасчетыФЛ.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТРасчетыФЛ КАК РасчетыФЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСтатусНалогоплательщика КАК Статусы
	|		ПО РасчетыФЛ.НомерСтроки = Статусы.НомерСтроки
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";*/
			//РасчетыНалоговогоАгента = Запрос.Выполнить().Выгрузить();
			//РасчетыНалоговогоАгента.Колонки.Добавить("ОКАТО_КПП");
			return null;
		}
		// РасчетыНалоговогоАгентаПоУдержанномуНДФЛ()
		// Собираем заработок для пособий за переданные календарные годы
		//
		// Параметры
		//  МассивЛет - массив лет, за которые собирается заработок
		//
		// Возвращаемое значение:
		//   Таблица значений
		//

		public object ЗаработокДляВыплатыПособийСоцСтрахованияС2011года(/*МассивЛет, Физлицо, Организация, УчитыватьЗаработокПредыдущихСтрахователей, ТолькоПоОбособленномуПодразделению = Ложь, УчитыватьВесьЗаработок = Ложь*/)
		{
			//РаннийГод = 10000;
			//ПозднийГод = 0;
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("МассивЛет", МассивЛет);
			//Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
			//Запрос.УстановитьПараметр("ОбособленноеПодразделение", Организация);
			//Запрос.УстановитьПараметр("ПоВсейОрганизации", Не ТолькоПоОбособленномуПодразделению);
			//Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			//Запрос.УстановитьПараметр("ГоловнаяОрганизация", ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			//Запрос.УстановитьПараметр("Начало", Дата(РаннийГод, 1, 1));
			//Запрос.УстановитьПараметр("Окончание", КонецДня(Дата(ПозднийГод, 12, 31)));
			//Запрос.УстановитьПараметр("ДатаДоЗакона212", ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() - 1);
			//Запрос.УстановитьПараметр("УчитыватьВесьЗаработок", УчитыватьВесьЗаработок);
			//Запрос.УстановитьПараметр("ОграничениеПоПериодуРегистрации", Макс(ОбщегоНазначения.ПолучитьРабочуюДату(),КонецДня(Дата(ПозднийГод, 12, 31))));
			/*ТекстВТСтраховыеВзносы = 
	"ВЫБРАТЬ
	|	СтраховыеВзносыСведенияОДоходахОбороты.РезультатОборот - СтраховыеВзносыСведенияОДоходахОбороты.СкидкаОборот КАК Заработок,
	|	СтраховыеВзносыСведенияОДоходахОбороты.Период
	|ПОМЕСТИТЬ ВТДоходыПоМесяцам
	|ИЗ
	|	РегистрНакопления.СтраховыеВзносыСведенияОДоходах.Обороты(
	|			&Начало,
	|			&Окончание,
	|			Месяц,
	|			ВидДохода.ВходитВБазуФСС
	|				И ФизЛицо = &ФизЛицо
	|				И Организация = &ГоловнаяОрганизация
	|				И (ОбособленноеПодразделение = &ОбособленноеПодразделение
	|					ИЛИ &ПоВсейОрганизации)) КАК СтраховыеВзносыСведенияОДоходахОбороты
	|ГДЕ
	|	ГОД(СтраховыеВзносыСведенияОДоходахОбороты.Период) В (&МассивЛет)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТСотрудники
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
	|	И СотрудникиОрганизаций.Физлицо = &Физлицо
	|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТНеоблагаемыеВзносамиОтсутствия
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
	|	И НЕ ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени
	|	И НЕ ОсновныеНачисленияОрганизаций.КодДоходаСтраховыеВзносы.ВходитВБазуФСС
	|	И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействия,
	|	СУММА(РАЗНОСТЬДАТ(ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ) * ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДнейИсключаемыхОтсутствий
	|ПОМЕСТИТЬ ВТПериодыИсключаемыхОтсутствий
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						СотрудникиФизлица.Ссылка
	|					ИЗ
	|						ВТСотрудники КАК СотрудникиФизлица)
	|				И ФизЛицо = &ФизЛицо
	|				И ВидРасчета В
	|					(ВЫБРАТЬ
	|						НеоблагаемыеВзносамиОтсутствия.Ссылка
	|					ИЗ
	|						ВТНеоблагаемыеВзносамиОтсутствия КАК НеоблагаемыеВзносамиОтсутствия)
	|				И Организация = &ГоловнаяОрганизация
	|				И (ОбособленноеПодразделение = &ОбособленноеПодразделение
	|					ИЛИ &ПоВсейОрганизации)
	|				И ГОД(ПериодДействия) В (&МассивЛет)
	|				И ПериодДействия > &ДатаДоЗакона212
	|				И ПериодРегистрации <= &ОграничениеПоПериодуРегистрации) КАК ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоходыПоМесяцам.Период
	|ПОМЕСТИТЬ ВТПериоды
	|ИЗ
	|	ВТДоходыПоМесяцам КАК ДоходыПоМесяцам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПериодыИсключаемыхОтсутствий.ПериодДействия
	|ИЗ
	|	ВТПериодыИсключаемыхОтсутствий КАК ПериодыИсключаемыхОтсутствий
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Периоды.Период КАК Месяц,
	|	НЕ ЕСТЬNULL(ГражданствоФизЛиц.НеИмеетПравоНаПенсию, ЛОЖЬ) КАК ИмеетПравоНаСтрахование
	|ПОМЕСТИТЬ ВТДанныеОПравеНаСтрахование
	|ИЗ
	|	(ВЫБРАТЬ
	|		Периоды.Период КАК Период,
	|		МАКСИМУМ(ГражданствоФизЛиц.Период) КАК ПериодРегистра
	|	ИЗ
	|		ВТПериоды КАК Периоды
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|			ПО Периоды.Период >= ГражданствоФизЛиц.Период
	|				И (ГражданствоФизЛиц.ФизЛицо = &ФизЛицо)
	|	
	|	СГРУППИРОВАТЬ ПО
	|		Периоды.Период) КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГражданствоФизЛиц КАК ГражданствоФизЛиц
	|		ПО Периоды.ПериодРегистра = ГражданствоФизЛиц.Период
	|			И (ГражданствоФизЛиц.ФизЛицо = &Физлицо)";*/
			/*ТекстСтраховыеВзносы = 
	"ВЫБРАТЬ
	|	ГОД(Периоды.Период) КАК РасчетныйГод,
	|	НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) КАК БазовыйПериодНачало,
	|	СУММА(ВЫБОР
	|			КОГДА &УчитыватьВесьЗаработок
	|				ТОГДА ЕСТЬNULL(ДоходыПоМесяцам.Заработок, 0)
	|			КОГДА ДанныеОПравеНаСтрахование.ИмеетПравоНаСтрахование
	|				ТОГДА ЕСТЬNULL(ДоходыПоМесяцам.Заработок, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Заработок,
	|	СУММА(ВЫБОР
	|			КОГДА &УчитыватьВесьЗаработок
	|				ТОГДА ЕСТЬNULL(ПериодыИсключаемыхОтсутствий.ДнейИсключаемыхОтсутствий, 0)
	|			КОГДА ДанныеОПравеНаСтрахование.ИмеетПравоНаСтрахование
	|				ТОГДА ЕСТЬNULL(ПериодыИсключаемыхОтсутствий.ДнейИсключаемыхОтсутствий, 0)
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ДнейБолезниУходаЗаДетьми,
	|	ЗНАЧЕНИЕ(Справочник.Работодатели.ТекущийРаботодатель) КАК Страхователь
	|ИЗ
	|	ВТПериоды КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПоМесяцам КАК ДоходыПоМесяцам
	|		ПО Периоды.Период = ДоходыПоМесяцам.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДанныеОПравеНаСтрахование КАК ДанныеОПравеНаСтрахование
	|		ПО Периоды.Период = ДанныеОПравеНаСтрахование.Месяц
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыИсключаемыхОтсутствий КАК ПериодыИсключаемыхОтсутствий
	|		ПО Периоды.Период = ПериодыИсключаемыхОтсутствий.ПериодДействия
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Периоды.Период, ГОД),
	|	ГОД(Периоды.Период)
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ВЫБОР
	|				КОГДА &УчитыватьВесьЗаработок
	|					ТОГДА ЕСТЬNULL(ДоходыПоМесяцам.Заработок, 0)
	|				КОГДА ДанныеОПравеНаСтрахование.ИмеетПравоНаСтрахование
	|					ТОГДА ЕСТЬNULL(ДоходыПоМесяцам.Заработок, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) > 0
	|		ИЛИ СУММА(ВЫБОР
	|				КОГДА &УчитыватьВесьЗаработок
	|					ТОГДА ЕСТЬNULL(ПериодыИсключаемыхОтсутствий.ДнейИсключаемыхОтсутствий, 0)
	|				КОГДА ДанныеОПравеНаСтрахование.ИмеетПравоНаСтрахование
	|					ТОГДА ЕСТЬNULL(ПериодыИсключаемыхОтсутствий.ДнейИсключаемыхОтсутствий, 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ) > 0)";*/
			/*ТекстВТЕСН = 
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТДополнительныеНачисления
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	НЕ ОсновныеНачисленияОрганизаций.КодДоходаЕСН.ВходитВБазуФСС
	|	И ОсновныеНачисленияОрганизаций.КодДоходаСтраховыеВзносы.ВходитВБазуФСС
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ДополнительныеНачисленияОрганизаций.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|ГДЕ
	|	НЕ ДополнительныеНачисленияОрганизаций.КодДоходаЕСН.ВходитВБазуФСС
	|	И ДополнительныеНачисленияОрганизаций.КодДоходаСтраховыеВзносы.ВходитВБазуФСС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ДанныеУчета.Заработок) КАК Заработок,
	|	НАЧАЛОПЕРИОДА(ДанныеУчета.Период, МЕСЯЦ) КАК Период
	|ПОМЕСТИТЬ ВТДоходыПоМесяцамЕСН
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЕСНСведенияОДоходах.Результат - ЕСНСведенияОДоходах.Скидка КАК Заработок,
	|		ЕСНСведенияОДоходах.Период КАК Период
	|	ИЗ
	|		РегистрНакопления.ЕСНСведенияОДоходах КАК ЕСНСведенияОДоходах
	|	ГДЕ
	|		ЕСНСведенияОДоходах.ФизЛицо = &ФизЛицо
	|		И ЕСНСведенияОДоходах.Организация = &ГоловнаяОрганизация
	|		И ЕСНСведенияОДоходах.КодДоходаЕСН.ВходитВБазуФСС
	|		И ГОД(ЕСНСведенияОДоходах.Период) В (&МассивЛет)
	|		И ЕСНСведенияОДоходах.Период МЕЖДУ &Начало И &Окончание
	|		И (ЕСНСведенияОДоходах.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				ИЛИ &ПоВсейОрганизации)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ОсновныеНачисленияРаботниковОрганизаций.Результат,
	|		ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
	|	ГДЕ
	|		ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо = &ФизЛицо
	|		И ГОД(ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации) В (&МассивЛет)
	|		И ОсновныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &Начало И &ДатаДоЗакона212
	|		И ОсновныеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
	|		И (ОсновныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				ИЛИ &ПоВсейОрганизации)
	|		И ОсновныеНачисленияРаботниковОрганизаций.ВидРасчета В
	|				(ВЫБРАТЬ
	|					ВидыРасчета.Ссылка
	|				ИЗ
	|					ВТДополнительныеНачисления КАК ВидыРасчета)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ДополнительныеНачисленияРаботниковОрганизаций.Результат - ДополнительныеНачисленияРаботниковОрганизаций.СкидкаПриНалогообложении,
	|		ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
	|	ГДЕ
	|		ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо = &ФизЛицо
	|		И ГОД(ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации) В (&МассивЛет)
	|		И ДополнительныеНачисленияРаботниковОрганизаций.ПериодРегистрации МЕЖДУ &Начало И &ДатаДоЗакона212
	|		И ДополнительныеНачисленияРаботниковОрганизаций.Организация = &ГоловнаяОрганизация
	|		И (ДополнительныеНачисленияРаботниковОрганизаций.ОбособленноеПодразделение = &ОбособленноеПодразделение
	|				ИЛИ &ПоВсейОрганизации)
	|		И ДополнительныеНачисленияРаботниковОрганизаций.ВидРасчета В
	|				(ВЫБРАТЬ
	|					ВидыРасчета.Ссылка
	|				ИЗ
	|					ВТДополнительныеНачисления КАК ВидыРасчета)) КАК ДанныеУчета
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(ДанныеУчета.Период, МЕСЯЦ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТСотрудникиЕСН
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Организация = &ГоловнаяОрганизация
	|	И СотрудникиОрганизаций.Физлицо = &Физлицо
	|	И СотрудникиОрганизаций.ВидЗанятости <> ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка
	|ПОМЕСТИТЬ ВТНеоблагаемыеВзносамиОтсутствияЕСН
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ЗачетНормыВремени
	|	И НЕ ОсновныеНачисленияОрганизаций.ЗачетОтработанногоВремени
	|	И НЕ ОсновныеНачисленияОрганизаций.КодДоходаЕСН.ВходитВБазуФСС
	|	И ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени <> ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.Прогулы)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаВыходныхДнейПоУходуЗаДетьмиИнвалидами)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействия,
	|	СУММА(РАЗНОСТЬДАТ(ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияНачало, ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействияКонец, ДЕНЬ), СЕКУНДА, 1), ДЕНЬ) * ВЫБОР
	|			КОГДА ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.Сторно
	|				ТОГДА -1
	|			ИНАЧЕ 1
	|		КОНЕЦ) КАК ДнейИсключаемыхОтсутствий
	|ПОМЕСТИТЬ ВТПериодыИсключаемыхОтсутствийЕСН
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			Сотрудник В
	|					(ВЫБРАТЬ
	|						СотрудникиФизлица.Ссылка
	|					ИЗ
	|						ВТСотрудникиЕСН КАК СотрудникиФизлица)
	|				И ФизЛицо = &ФизЛицо
	|				И ВидРасчета В
	|					(ВЫБРАТЬ
	|						НеоблагаемыеВзносамиОтсутствия.Ссылка
	|					ИЗ
	|						ВТНеоблагаемыеВзносамиОтсутствияЕСН КАК НеоблагаемыеВзносамиОтсутствия)
	|				И Организация = &ГоловнаяОрганизация
	|				И (ОбособленноеПодразделение = &ОбособленноеПодразделение
	|					ИЛИ &ПоВсейОрганизации)
	|				И ГОД(ПериодДействия) В (&МассивЛет)
	|				И (ПериодДействия <= &ДатаДоЗакона212)
	|				И ПериодРегистрации <= &ОграничениеПоПериодуРегистрации) КАК ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисленияРаботниковОрганизацийФактическийПериодДействия.ПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоходыПоМесяцам.Период
	|ПОМЕСТИТЬ ВТПериодыЕСН
	|ИЗ
	|	ВТДоходыПоМесяцамЕСН КАК ДоходыПоМесяцам
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	ПериодыИсключаемыхОтсутствий.ПериодДействия
	|ИЗ
	|	ВТПериодыИсключаемыхОтсутствийЕСН КАК ПериодыИсключаемыхОтсутствий";*/
			/*ТекстЕСН = 
	"ВЫБРАТЬ
	|	ГОД(Периоды.Период) КАК РасчетныйГод,
	|	НАЧАЛОПЕРИОДА(Периоды.Период, ГОД) КАК БазовыйПериодНачало,
	|	СУММА(ЕСТЬNULL(ДоходыПоМесяцам.Заработок, 0)) КАК Заработок,
	|	СУММА(ЕСТЬNULL(ПериодыИсключаемыхОтсутствий.ДнейИсключаемыхОтсутствий, 0)) КАК ДнейБолезниУходаЗаДетьми,
	|	ЗНАЧЕНИЕ(Справочник.Работодатели.ТекущийРаботодатель) КАК Страхователь
	|ИЗ
	|	ВТПериодыЕСН КАК Периоды
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТДоходыПоМесяцамЕСН КАК ДоходыПоМесяцам
	|		ПО Периоды.Период = ДоходыПоМесяцам.Период
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПериодыИсключаемыхОтсутствийЕСН КАК ПериодыИсключаемыхОтсутствий
	|		ПО Периоды.Период = ПериодыИсключаемыхОтсутствий.ПериодДействия
	|
	|СГРУППИРОВАТЬ ПО
	|	НАЧАЛОПЕРИОДА(Периоды.Период, ГОД),
	|	ГОД(Периоды.Период)
	|
	|ИМЕЮЩИЕ
	|	(СУММА(ЕСТЬNULL(ДоходыПоМесяцам.Заработок, 0)) > 0
	|		ИЛИ СУММА(ЕСТЬNULL(ПериодыИсключаемыхОтсутствий.ДнейИсключаемыхОтсутствий, 0)) > 0)";*/
			//ГодЗакона213ФЗ = Год(ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
			if(true/*ПозднийГод < ГодЗакона213ФЗ*/)
			{
				//Запрос.Текст = ТекстВТЕСН + ";" + Символы.ПС + ТекстЕСН + Символы.ПС + "УПОРЯДОЧИТЬ ПО" + Символы.ПС + "РасчетныйГод";
			}
			//ДанныеРасчета = Запрос.Выполнить().Выгрузить();
			if(true/*УчитыватьЗаработокПредыдущихСтрахователей*/)
			{
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	ЗаработокСотрудниковУДругихСтрахователей.Страхователь КАК Страхователь,
		|	ЗаработокСотрудниковУДругихСтрахователей.РасчетныйГод КАК РасчетныйГод,
		|	ЗаработокСотрудниковУДругихСтрахователей.Заработок
		|ИЗ
		|	РегистрСведений.ЗаработокСотрудниковУДругихСтрахователей КАК ЗаработокСотрудниковУДругихСтрахователей
		|ГДЕ
		|	ЗаработокСотрудниковУДругихСтрахователей.ФизЛицо = &ФизЛицо
		|	И ЗаработокСотрудниковУДругихСтрахователей.ГоловнаяОрганизация = &ГоловнаяОрганизация
		|	И ЗаработокСотрудниковУДругихСтрахователей.Страхователь <> ЗНАЧЕНИЕ(Справочник.Работодатели.ТекущийРаботодатель)
		|	И ЗаработокСотрудниковУДругихСтрахователей.РасчетныйГод В(&МассивЛет)
		|
		|УПОРЯДОЧИТЬ ПО
		|	РасчетныйГод,
		|	Страхователь";*/
				//Выборка = Запрос.Выполнить().Выбрать();
				while(true/*Выборка.Следующий()*/)
				{
					//НоваяСтрока = ДанныеРасчета.Добавить();
					//ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
					//НоваяСтрока.БазовыйПериодНачало = Дата(Выборка.РасчетныйГод, 1, 1);
				}
				//;;
			}
			return null;
		}
		// ЗаработокДляВыплатыПособийСоцСтрахованияС2011года()

		public void РасчетЗаработкаПособийС2011года(/*ДокументОбъект, ВыборкаПоШапкеДокумента = Неопределено, НаборРасчетСреднего = Неопределено, УчитыватьВесьЗаработок = Ложь*/)
		{
			//ДокументОбъект.РасчетСреднего2011.Очистить();
			if(true/*ДокументОбъект.ГодыРасчетаСреднего2011.Количество() = 0*/)
			{
			}
			//ДанныеРасчета = ЗаработокДляВыплатыПособийСоцСтрахованияС2011года(ДокументОбъект.ГодыРасчетаСреднего2011.ВыгрузитьКолонку("Год"), ДокументОбъект.Физлицо, ДокументОбъект.Организация, ДокументОбъект.УчитыватьЗаработокПредыдущихСтрахователей, Ложь, УчитыватьВесьЗаработок);
			if(true/*ДанныеРасчета = Неопределено*/)
			{
			}
			//ДокументОбъект.РасчетСреднего2011.Загрузить(ДанныеРасчета);
			if(true/*НаборРасчетСреднего = Неопределено*/)
			{
			}
			if(true/*ВыборкаПоШапкеДокумента = Неопределено*/)
			{
				//ВыборкаПоШапкеДокумента = ДокументОбъект.СформироватьЗапросПоШапке().Выбрать();
				//ВыборкаПоШапкеДокумента.Следующий();
			}
			//ДанныеРасчета.Колонки.Заработок.Имя = "Результат";
			//ДанныеРасчета.Колонки.ДнейБолезниУходаЗаДетьми.Имя = "ОтработаноДней";
			//ДанныеРасчета.Свернуть("БазовыйПериодНачало","Результат, ОтработаноДней");
			//ДанныеРасчета.Колонки.Добавить("ВидРасчета",Новый ОписаниеТипов("ПланВидовРасчетаСсылка.СреднийЗаработок"));
			//ДанныеРасчета.ЗаполнитьЗначения(ОбщегоНазначенияЗК.ОсобыйЭлемент(ПланыВидовРасчета.СреднийЗаработок, "ПоЗаработкуПособийС2011"),"ВидРасчета");
			//СтрокаСвойствИзДокумента = "ПериодРегистрации,ФизЛицо,Сотрудник,Организация,ДатаНачалаСобытия,СпособРасчета";
			//СтрокаСвойствИзСтрокиДанных = "БазовыйПериодНачало,ВидРасчета,Результат,ОтработаноДней";
			//НаборРасчетСреднего.Записать();
		}

		public object УчитываемыхДнейДляРасчетаСреднегоЗаработкаПособий2011(/*ДокументОбъект*/)
		{
			if(true/*ДокументОбъект.ЭтоПособиеПоМатеринству() И ДокументОбъект.ДатаНазначенияПособия() >= ДатаОтдельногоРасчетаПособийПоМатеринству()*/)
			{
				//Запрос = Новый Запрос;
				//Запрос.УстановитьПараметр("СреднийЗаработок", ДокументОбъект.РасчетСреднего2011.Выгрузить());
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	НАЧАЛОПЕРИОДА(РасчетСреднегоЗаработка.БазовыйПериодНачало, ГОД) КАК РасчетныйГод,
		|	РасчетСреднегоЗаработка.ДнейБолезниУходаЗаДетьми КАК ОтработаноДней
		|ПОМЕСТИТЬ ВТРасчетСреднегоЗаработка
		|ИЗ
		|	&СреднийЗаработок КАК РасчетСреднегоЗаработка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РасчетСреднегоЗаработка.РасчетныйГод,
		|	МАКСИМУМ(ДЕНЬГОДА(КОНЕЦПЕРИОДА(РасчетСреднегоЗаработка.РасчетныйГод, ГОД))) - СУММА(РасчетСреднегоЗаработка.ОтработаноДней) КАК ОтработаноДнейДляПособийПоМатеринству
		|ПОМЕСТИТЬ ВТДанныеРегистраСреднего2011
		|ИЗ
		|	ВТРасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
		|
		|СГРУППИРОВАТЬ ПО
		|	РасчетСреднегоЗаработка.РасчетныйГод
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА МАКСИМУМ(ДанныеРегистраСреднего.РасчетныйГод) = МИНИМУМ(ДанныеРегистраСреднего.РасчетныйГод)
		|			ТОГДА 365
		|		ИНАЧЕ 0
		|	КОНЕЦ + СУММА(ДанныеРегистраСреднего.ОтработаноДнейДляПособийПоМатеринству) КАК ОтработаноДнейДляПособийПоМатеринству
		|ИЗ
		|	ВТДанныеРегистраСреднего2011 КАК ДанныеРегистраСреднего";*/
				//Выборка = Запрос.Выполнить().Выбрать();
				if(true/*Выборка.Следующий()*/)
				{
				}
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Пилотный проект ФСС

		public object ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(/*ДатаАктуальности, Организация*/)
		{
			//Возврат НачалоМесяца(ДатаАктуальности) >= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ДатаПередачиФССВыплатыПособий");
			return null;
		}
		// ПособияПоОбязательномуСтрахованиюВыплачиваетФСС()
		////////////////////////////////////////////////////////////////////////////////
		// Создает строку в движениях  РасчетСреднегоЗаработка, заполняет по данным выборки
		// из запроса и возвращает ее
		// Используется в СформироватьИЗаписатьДанныеРасчетаСреднего
		// Параметры:
		// 	Выборка - спозиционированная выборка результата запроса
		//  НаборЗаписей - набор записей РасчетСреднегоЗаработка
		//  Регистратор - документ
		//  ВидРасчета - вид расчета среднего заработка
		//
		// Возвращаемое значение:
		// Запись регистра расчета РасчетСреднегоЗаработка
		//

		public object СоздатьСтрокуРасчетаСреднего(/*Выборка, НаборЗаписей, Регистратор, ВидРасчета*/)
		{
			//Строка = НаборЗаписей.Добавить();
			/*// предопределенные поля
*/
			//Строка.ПериодРегистрации				= Выборка.ПериодРегистрации;
			//Строка.ВидРасчета						= ВидРасчета;
			/*// измерения
*/
			//Строка.Сотрудник						= Выборка.Сотрудник;
			//Строка.Физлицо							= Выборка.Физлицо;
			//Строка.Организация						= Выборка.Организация;
			/*// реквизиты
*/
			//Строка.СпособРасчета					= Выборка.СпособРасчета;
			//Строка.ВидУчетаВремени					= Выборка.ВидУчетаВремени;
			//Строка.ДатаНачалаСобытия				= Выборка.ДатаНачалаСобытия;
			//Строка.ДатаНачалаРасчетногоПериода		= Выборка.НачалоБП;
			//Строка.ДатаОкончанияРасчетногоПериода	= Выборка.КонецБП;
			//Строка.ПериодРасчетаСреднегоЗаработка	= Выборка.ПериодРасчетаСреднегоЗаработка;
			//Строка.КоэффициентИндексации			= 1;
			return null;
		}
		// СоздатьСтрокуРасчетаСреднего()

		public void СкорректироватьНормируемыеВычетыПоНДФЛ(/*ДокументОбъект*/)
		{
			if(true/*ДокументОбъект.ДополнительныеНачисления.Количество() = 0*/)
			{
			}
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			//ДоходыП28Ст217 = Новый Массив;
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2761);
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2720);
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2730);
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2740);
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2760);
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2770);
			//ДоходыП28Ст217.Добавить(Справочники.ДоходыНДФЛ.Код2790);
			//Запрос.УстановитьПараметр("ДоходыП28Ст217", ДоходыП28Ст217);
			//Запрос.УстановитьПараметр("ДополнительныеНачисления", ДокументОбъект.ДополнительныеНачисления.Выгрузить());
			/*// прочитаем т.ч. документа и добавим в каждую строку Физлицо сотрудника и КодДоходаНДФЛ начисления
*/
			/*Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Работники.НомерСтроки,
	|	Работники.Сотрудник КАК Сотрудник,
	|	Работники.ВидРасчета КАК ВидРасчета,
	|	Работники.КодВычета,
	|	Работники.СуммаВычета
	|ПОМЕСТИТЬ ВТРаботники
	|ИЗ
	|	&ДополнительныеНачисления КАК Работники
	|ГДЕ
	|	Работники.Авторасчет
	|	И (НЕ Работники.Сторно)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета";*/
			//Запрос.Выполнить();
			/*Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Работники.Сотрудник.Физлицо КАК Физлицо,
	|	Работники.КодВычета КАК КодВычета,
	|	МИНИМУМ(Работники.СуммаВычета) КАК СуммаВычета
	|ИЗ
	|	ВТРаботники КАК Работники
	|ГДЕ
	|	Работники.ВидРасчета.КодДоходаНДФЛ В(&ДоходыП28Ст217)
	|
	|СГРУППИРОВАТЬ ПО
	|	Работники.Сотрудник.Физлицо,
	|	Работники.КодВычета
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	КодВычета";*/
			//ТаблицаВычетов = Запрос.Выполнить().Выгрузить();
			//ТаблицаВычетов.Индексы.Добавить("Физлицо,КодВычета");
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	НачисленияРаботников.Сотрудник.Физлицо КАК Физлицо,
	|	НачисленияРаботников.КодВычета КАК КодВычета,
	|	НачисленияРаботников.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	ВТРаботники КАК НачисленияРаботников
	|ГДЕ
	|	НачисленияРаботников.ВидРасчета.КодДоходаНДФЛ В(&ДоходыП28Ст217)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Физлицо,
	|	КодВычета,
	|	НомерСтроки";*/
			//Выборка = Запрос.Выполнить().Выбрать();
			//СтруктураПоиска = Новый Структура("Физлицо,КодВычета");
			while(true/*Выборка.Следующий()*/)
			{
				//СтрокаТЧ = ДокументОбъект.ДополнительныеНачисления.Найти(Выборка.НомерСтроки,"НомерСтроки");
				if(true/*СтрокаТЧ <> Неопределено*/)
				{
					//ЗаполнитьЗначенияСвойств(СтруктураПоиска,Выборка);
					//СтрокаВычета = ТаблицаВычетов.НайтиСтроки(СтруктураПоиска)[0];
					if(true/*СтрокаВычета.СуммаВычета = 0*/)
					{
						//СтрокаТЧ.СуммаВычета = 0;
					}
				}
			}
			//;;
		}
		// СкорректироватьНормируемыеВычетыПоНДФЛ()
		// Проверяет необходимость выполнения перерасчета документа
		// если в таблицах перерасчета по документу ссылка на который передана
		// есть хоть одна запись - возращает Истина
		// Параметры:
		//  Регистратор - ссылка на документ
		// Возвращаемое значение:
		//  булево
		//

		public object НеобходимостьПерерасчета(/*Регистратор*/)
		{
			/*Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Перерасчет.ФизЛицо
	|ИЗ
	|	(ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.ФизЛицо КАК ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ ПЕРВЫЕ 1
	|		Перерасчет.ФизЛицо
	|	ИЗ
	|		РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК Перерасчет
	|	
	|	ГДЕ
	|		Перерасчет.ОбъектПерерасчета = &парамРегистратор) КАК Перерасчет");*/
			//Запрос.УстановитьПараметр("парамРегистратор", Регистратор);
			return null;
		}
		// НеобходимостьПерерасчета
		// Возвращает вид учета времени в зависимости от вида расчета и вида графика

		public object ПолучитьВидУчетаВремени(/*СпособРасчета, ВидВремени, СуммированныйУчетРабочегоВремени = Ложь, НачислениеВидУчетаВремени = Неопределено, Показатели = Неопределено*/)
		{
			/*// вид учета времени определяется по способу расчета
*/
			if(true/*СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
		или ВидВремени = Перечисления.ВидыВремени.ЧасовоеНеотработанное 
		или ВидВремени = Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы*/)
			{
				//ВидУчетаВремени = Перечисления.ВидыУчетаВремени.ПоЧасам;
			}
			return null;
		}
		// Помещает в запрос временную таблицу "ВТПоказатели" с описанием
		// показателей расчета, используемых в произвольных формулах
		// Поля временной таблицы:
		//    ВидРасчета,
		//    КоличествоПоказателей,
		//    РасчетИмеетБазовыеНачисления,
		//    Показатель(1...N)ЯвляетсяРасчетнойБазой,
		//    Показатель(1...N)Наименование,
		//    Показатель(1...N)
		//
		// Параметры
		//	ИмяРегистра - строка, имя регистра расчета
		//	ИмяПВР - строка, имя соответствующего регистру расчета ПВР
		//	ВнешнееУсловие - строка, задает условие для отбора записей расчета
		//
		// Возвращаемое значение:
		//   число - количество показателей, используемых при расчете всех записей
		//

		public object ПолучитьДанныеОПроизвольныхФормулахВЗапросе(/*Запрос, ИмяРегистра, ВнешнееУсловие, ИмяПВР*/)
		{
			/*Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основной.ВидРасчета КАК ВидРасчета
	|ПОМЕСТИТЬ ВТВидыРасчета
	|ИЗ
	|	РегистрРасчета." + ИмяРегистра + " КАК Основной
	|ГДЕ
	|	" + ВнешнееУсловие + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";*/
			//Запрос.Выполнить();
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	Показатели.Ссылка КАК Ссылка,
	|	Показатели.НомерСтроки,
	|	Показатели.Показатель
	|ПОМЕСТИТЬ ВТВСЕПоказатели
	|ИЗ
	|	ПланВидовРасчета." + ИмяПВР +".Показатели КАК Показатели
	|ГДЕ
	|	Показатели.Ссылка В
	|			(ВЫБРАТЬ
	|				Основной.ВидРасчета
	|			ИЗ
	|				ВТВидыРасчета КАК Основной)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка";*/
			//Запрос.Выполнить();
			/*// Получим максимальное число показателей			
*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(Показатели.НомерСтроки) КАК КолВоПоказателей
	|ИЗ
	|	ВТВСЕПоказатели КАК Показатели";*/
			//ВыборкаКоличестваПоказателей = Запрос.Выполнить().Выбрать();
			//ВыборкаКоличестваПоказателей.Следующий();
			//КоличествоПоказателей = ВыборкаКоличестваПоказателей.КолВоПоказателей;
			if(true/*КоличествоПоказателей = Null*/)
			{
				//КоличествоПоказателей = 0;
			}
			/*// получим временную таблицу с расчетом показателей
*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Основной.ВидРасчета КАК ВидРасчета,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВСЕПоказатели.Показатель = ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.РасчетнаяБаза)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК РасчетИмеетБазовыеНачисления,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА ВСЕПоказатели.Показатель В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВЧасах),ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ОтработаноВремениВДнях),ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВДнях),ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ВремяВЧасах))
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ ЛОЖЬ
	|		КОНЕЦ) КАК РасчетИмеетОтработанноеВремя,
	|	МАКСИМУМ(ВСЕПоказатели.НомерСтроки) КАК КоличествоПоказателей";*/
			/*Запрос.Текст = Запрос.Текст + "
	|ПОМЕСТИТЬ ВТПоказатели
	|ИЗ
	|	ВТВидыРасчета КАК Основной
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТВСЕПоказатели КАК ВСЕПоказатели
	|		ПО Основной.ВидРасчета = ВСЕПоказатели.Ссылка";*/
			/*Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	Основной.ВидРасчета";*/
			/*Запрос.Текст = Запрос.Текст + "
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета";*/
			//Запрос.Выполнить();
			return null;
		}
		// ()

		public void ДобавитьПоказатели(/*НеобходимыеДанные, КоличествоПоказателей, ТекстЗапроса, КомментироватьРасчет, ПоляЗапроса, Показатель1Текст, Показатель1ТекстПредопределенный*/)
		{
			if(true/*НеобходимыеДанные.ПоказателиСхемМотивации*/)
			{
				if(true/*КоличествоПоказателей = 0*/)
				{
					/*ТекстЗапроса = ТекстЗапроса + ",
			| ВЫБОР
			|		КОГДА Основной.ВидРасчета.СпособРасчета В (ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.Процентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.СевернаяНадбавка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка),ЗНАЧЕНИЕ(Перечисление.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС))
			|			ТОГДА ИСТИНА
			|		ИНАЧЕ ЛОЖЬ
			|	КОНЕЦ КАК РасчетИмеетБазовыеНачисления,
			| Ложь КАК РасчетИмеетОтработанноеВремя,
			| 0 КАК КоличествоПоказателей,";*/
				}
				/*ТекстЗапроса = ТекстЗапроса + "
		| Основной.ВидРасчета.ФормулаРасчета КАК ФормулаРасчета";*/
				if(true/*КомментироватьРасчет*/)
				{
					//ПоляЗапроса.Добавить("КоличествоПоказателей");
					//ПоляЗапроса.Добавить("РасчетИмеетБазовыеНачисления");
					//ПоляЗапроса.Добавить("РасчетИмеетОтработанноеВремя");
					//ПоляЗапроса.Добавить("ФормулаРасчета");
				}
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		// ДАТЫ ИЗМЕНЕНИЯ ЗАКОНОДАТЕЛЬСТВА
		// Возвращает дату вступления в силу Федерального Закона от 24.07.2009 № 212-ФЗ
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   дата
		//

		public object ДатаЗаменыЕСНСтраховымиВзносами(/**/)
		{
			return null;
		}
		// Возвращает дату вступления в силу Федерального Закона от 08.12.2010 № 343-ФЗ
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   дата
		//

		public object ДатаНачалаРеформыСоцСтрахования(/**/)
		{
			return null;
		}
		// Возвращает дату вступления в силу Федерального Закона от 27.07.2010 № 229-ФЗ
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   дата
		//

		public object ДатаЗакона229ФЗ(/**/)
		{
			return null;
		}
		// Возвращает дату вступления в силу статьи 1 Федерального Закона от 25.02.2011 № 21-ФЗ
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   дата
		//

		public object ДатаОтдельногоРасчетаПособийПоМатеринству(/**/)
		{
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ РАСЧЕТА ДОКУМЕНТОВ
		// Заполняем переданный набор записей регистра расчета ОсновныеНачисленияОрганизации переданными данными

		public object ДобавитьСтрокуОсновныхНачислений(/*НаборЗаписей, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента*/)
		{
			//Движение = НаборЗаписей.Добавить();
			//СтрокаСвойствИзДокумента = "ПериодРегистрации,ФизЛицо,Организация,ОбособленноеПодразделение";
			//СтрокаСвойствИзСтрокиДокумента = ПроведениеРасчетовПереопределяемый.СтрокаСвойствИзСтрокиДокументаДляОсновныхНачислений();
			/*// ресурсы по норме времени
*/
			if(true/*ВыборкаПоСтрокамДокумента.ЗачетНормыВремени*/)
			{
				//СтрокаСвойствИзСтрокиДокумента = СтрокаСвойствИзСтрокиДокумента + ",НормаДней,НормаЧасов,НормаДнейПоПятидневке,НормаЧасовПоПятидневке";
			}
			/*// ресурсы по отработанному времени
*/
			if(true/*ВыборкаПоСтрокамДокумента.ЗачетОтработанногоВремени*/)
			{
				//СтрокаСвойствИзСтрокиДокумента = СтрокаСвойствИзСтрокиДокумента + ",ОтработаноДней,ОтработаноЧасов,ОтработаноДнейПоПятидневке,ОтработаноЧасовПоПятидневке";
			}
			//ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
			//ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
			return null;
		}
		// ДобавитьСтрокуОсновныхНачислений
		// Заполняем переданный набор записей регистра расчета ДополнительныеНачисленияОрганизации переданными данными

		public object ДобавитьСтрокуДополнительныхНачислений(/*НаборЗаписей, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента*/)
		{
			//Движение = НаборЗаписей.Добавить();
			//СтрокаСвойствИзДокумента = "ДатаНачалаСобытия,ФизЛицо,Организация,ОбособленноеПодразделение";
			/*СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Сторно,Результат,ОплаченоДнейЧасов,СторнируемыйДокумент,ЧислоМесяцев," 
									+ "Сотрудник,ПодразделениеОрганизации,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ГрафикРаботы,ВидУчетаВремени,"
									+ "Авторасчет,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание";*/
			//ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
			//ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
			//Движение.ПериодРегистрации   = ВыборкаПоШапкеДокумента.ПериодРегистрацииДополнительныхНачислений;
			return null;
		}
		// ДобавитьСтрокуДополнительныхНачислений()
		// Заполняем переданный набор записей регистра расчета УдержанияРаботниковОрганизаций переданными данными

		public object ДобавитьСтрокуУдержаний(/*НаборЗаписей, ВыборкаПоШапкеДокумента, ВыборкаПоСтрокамДокумента*/)
		{
			//Движение = НаборЗаписей.Добавить();
			//СтрокаСвойствИзДокумента = "ФизЛицо,Организация,ОбособленноеПодразделение,ПериодРегистрации";
			/*СтрокаСвойствИзСтрокиДокумента = "БазовыйПериодНачало,БазовыйПериодКонец,ВидРасчета,Сторно,Результат," 
									+ "Сотрудник,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6,ГрафикРаботы,ВидУчетаВремени,"
									+ "Авторасчет,ПериодРасчетаСреднегоЗаработкаНачало,ПериодРасчетаСреднегоЗаработкаОкончание";*/
			//ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоШапкеДокумента,СтрокаСвойствИзДокумента);
			//ЗаполнитьЗначенияСвойств(Движение,ВыборкаПоСтрокамДокумента,СтрокаСвойствИзСтрокиДокумента);
			return null;
		}
		// ДобавитьСтрокуДополнительныхНачислений()
		// Процедура формирует сторно-записи по перерассчитываемому документу

		public void СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(/*ПерерассчитываемыйДокумент = Неопределено, ВыборкаПоШапкеДокумента = Неопределено, НаборОсновныеНачисления = Неопределено, НаборДополнительныеНачисления = Неопределено, НаборУдержания = Неопределено, ОсобыйВидРасчета = Неопределено*/)
		{
			if(true/*Не ЗначениеЗаполнено(ПерерассчитываемыйДокумент)*/)
			{
				/*// по переданному документу заведомо нет движений
*/
			}
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("ПерерассчитываемыйДокумент", ПерерассчитываемыйДокумент);
			//Запрос.УстановитьПараметр("ПериодРегистрации", ВыборкаПоШапкеДокумента.ПериодРегистрации);
			//Запрос.УстановитьПараметр("ДокументИсправление", ВыборкаПоШапкеДокумента.Ссылка);
			if(true/*НаборОсновныеНачисления <> Неопределено*/)
			{
				/*// выполним запрос по основным начислениям
*/
				//Запрос.УстановитьПараметр("ОсобыйВидРасчета", ОсобыйВидРасчета);
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени КАК ЗачетОтработанногоВремени,
		|	ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени КАК ЗачетНормыВремени,
		|	ОсновныеНачисления.Показатель1,
		|	ОсновныеНачисления.Показатель2,
		|	ОсновныеНачисления.Показатель3,
		|	ОсновныеНачисления.Показатель4,
		|	ОсновныеНачисления.Показатель5,
		|	ОсновныеНачисления.Показатель6,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.ВидРасчета = &ОсобыйВидРасчета
		|			ТОГДА 0
		|		ИНАЧЕ -ОсновныеНачисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0)
		|	КОНЕЦ КАК Результат,
		|	ВЫБОР
		|		КОГДА ОсновныеНачисления.ВидРасчета = &ОсобыйВидРасчета
		|			ТОГДА 0
		|		ИНАЧЕ -ОсновныеНачисления.ДополнительныйРезультат - ЕСТЬNULL(СУММА(СторноНачисления.ДополнительныйРезультат), 0)
		|	КОНЕЦ КАК ДополнительныйРезультат,
		|	-ОсновныеНачисления.ОплаченоДнейЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОплаченоДнейЧасов), 0) КАК ОплаченоДнейЧасов,
		|	-ОсновныеНачисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0) КАК ОтработаноДней,
		|	-ОсновныеНачисления.ОтработаноЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасов), 0) КАК ОтработаноЧасов,
		|	-ОсновныеНачисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0) КАК ОтработаноДнейПоПятидневке,
		|	-ОсновныеНачисления.ОтработаноЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасовПоПятидневке), 0) КАК ОтработаноЧасовПоПятидневке,
		|	-ОсновныеНачисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0) КАК НормаДней,
		|	-ОсновныеНачисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0) КАК НормаЧасов,
		|	-ОсновныеНачисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0) КАК НормаДнейПоПятидневке,
		|	-ОсновныеНачисления.НормаЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасовПоПятидневке), 0) КАК НормаЧасовПоПятидневке,
		|	ОсновныеНачисления.ПодразделениеОрганизации,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ОсновныеНачисления.ДополнительныеДанные,
		|	ОсновныеНачисления.ДатаНачалаСобытия,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	ОсновныеНачисления.ГрафикРаботы,
		|	ОсновныеНачисления.ГрафикРаботыНорма,
		|	ОсновныеНачисления.ВидУчетаВремени,
		|	ОсновныеНачисления.Регистратор КАК СторнируемыйДокумент,
		|	ОсновныеНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	НЕОПРЕДЕЛЕНО КАК ВариантОбработкиЗаписиПриОтраженииВРеглУчете,
		|	ОсновныеНачисления.БазовыйПериодНачало,
		|	ОсновныеНачисления.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисления
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
		|		ПО ОсновныеНачисления.Сотрудник = СторноНачисления.Сотрудник
		|			И ОсновныеНачисления.ВидРасчета = СторноНачисления.ВидРасчета
		|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
		|			И (СторноНачисления.ПериодДействияКонец МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
		|			И (СторноНачисления.ПериодРегистрации > ОсновныеНачисления.ПериодРегистрации)
		|			И (СторноНачисления.ПериодРегистрации <= &ПериодРегистрации)
		|			И (СторноНачисления.СторнируемыйДокумент = ОсновныеНачисления.Регистратор)
		|			И (СторноНачисления.Регистратор <> &ДокументИсправление)
		|ГДЕ
		|	(НЕ ОсновныеНачисления.Сторно)
		|	И ОсновныеНачисления.Регистратор = &ПерерассчитываемыйДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ОсновныеНачисления.Сотрудник,
		|	ОсновныеНачисления.ВидРасчета,
		|	ОсновныеНачисления.Показатель1,
		|	ОсновныеНачисления.Показатель2,
		|	ОсновныеНачисления.Показатель3,
		|	ОсновныеНачисления.Показатель4,
		|	ОсновныеНачисления.Показатель5,
		|	ОсновныеНачисления.Показатель6,
		|	ОсновныеНачисления.ПодразделениеОрганизации,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ОсновныеНачисления.ДополнительныеДанные,
		|	ОсновныеНачисления.ДатаНачалаСобытия,
		|	ОсновныеНачисления.ПериодДействияНачало,
		|	ОсновныеНачисления.ПериодДействияКонец,
		|	ОсновныеНачисления.ГрафикРаботы,
		|	ОсновныеНачисления.ГрафикРаботыНорма,
		|	ОсновныеНачисления.ВидУчетаВремени,
		|	ОсновныеНачисления.Регистратор,
		|	ОсновныеНачисления.Результат,
		|	ОсновныеНачисления.ДополнительныйРезультат,
		|	ОсновныеНачисления.НормаДней,
		|	ОсновныеНачисления.НормаЧасов,
		|	ОсновныеНачисления.НормаДнейПоПятидневке,
		|	ОсновныеНачисления.ОтработаноДней,
		|	ОсновныеНачисления.ОтработаноЧасов,
		|	ОсновныеНачисления.ОтработаноДнейПоПятидневке,
		|	ОсновныеНачисления.ОплаченоДнейЧасов,
		|	ОсновныеНачисления.ОтработаноЧасовПоПятидневке,
		|	ОсновныеНачисления.НормаЧасовПоПятидневке,
		|	ОсновныеНачисления.ВидРасчета.ЗачетОтработанногоВремени,
		|	ОсновныеНачисления.ВидРасчета.ЗачетНормыВремени,
		|	ОсновныеНачисления.РасчетнаяБазаЗаЕдиницуНормыВремени,
		|	ОсновныеНачисления.БазовыйПериодНачало,
		|	ОсновныеНачисления.БазовыйПериодКонец";*/
				//Выборка = Запрос.Выполнить().Выбрать();
				while(true/*Выборка.Следующий()*/)
				{
					//Движение = ДобавитьСтрокуОсновныхНачислений(НаборОсновныеНачисления, ВыборкаПоШапкеДокумента, Выборка);
					//Движение.ДополнительныйРезультат = Выборка.ДополнительныйРезультат;
				}
				//;;
			}
			if(true/*НаборДополнительныеНачисления <> Неопределено*/)
			{
				/*// выполним запрос по дополнительным начислениям
*/
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеНачисления.Сотрудник,
		|	ДополнительныеНачисления.ВидРасчета,
		|	ДополнительныеНачисления.Показатель1,
		|	ДополнительныеНачисления.Показатель2,
		|	ДополнительныеНачисления.Показатель3,
		|	ДополнительныеНачисления.Показатель4,
		|	ДополнительныеНачисления.Показатель5,
		|	ДополнительныеНачисления.Показатель6,
		|	-ДополнительныеНачисления.Результат КАК Результат,
		|	-ДополнительныеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
		|	ДополнительныеНачисления.ПодразделениеОрганизации,
		|	ДополнительныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
		|	ДополнительныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	ДополнительныеНачисления.ДатаНачалаСобытия,
		|	ДополнительныеНачисления.ГрафикРаботы,
		|	ДополнительныеНачисления.ВидУчетаВремени,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	ДополнительныеНачисления.Регистратор КАК СторнируемыйДокумент,
		|	ДополнительныеНачисления.ЧислоМесяцев,
		|	ДополнительныеНачисления.БазовыйПериодНачало,
		|	ДополнительныеНачисления.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисления
		|ГДЕ
		|	(НЕ ДополнительныеНачисления.Сторно)
		|	И ДополнительныеНачисления.Регистратор = &ПерерассчитываемыйДокумент";*/
				/*// выполним запрос по дополнительным начислениям
*/
				//Выборка = Запрос.Выполнить().Выбрать();
				while(true/*Выборка.Следующий()*/)
				{
					//ДобавитьСтрокуДополнительныхНачислений(НаборДополнительныеНачисления, ВыборкаПоШапкеДокумента, Выборка);
				}
				//;;
			}
			if(true/*НаборУдержания <> Неопределено*/)
			{
				/*// выполним запрос по удержаниям
*/
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	УдержанияРаботниковОрганизаций.Сотрудник,
		|	УдержанияРаботниковОрганизаций.ВидРасчета,
		|	УдержанияРаботниковОрганизаций.Показатель1,
		|	УдержанияРаботниковОрганизаций.Показатель2,
		|	УдержанияРаботниковОрганизаций.Показатель3,
		|	УдержанияРаботниковОрганизаций.Показатель4,
		|	УдержанияРаботниковОрганизаций.Показатель5,
		|	УдержанияРаботниковОрганизаций.Показатель6,
		|	-УдержанияРаботниковОрганизаций.Результат КАК Результат,
		|	УдержанияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаНачало,
		|	УдержанияРаботниковОрганизаций.ПериодРасчетаСреднегоЗаработкаОкончание,
		|	УдержанияРаботниковОрганизаций.ДатаНачалаСобытия,
		|	УдержанияРаботниковОрганизаций.ГрафикРаботы,
		|	УдержанияРаботниковОрганизаций.ВидУчетаВремени,
		|	ЛОЖЬ КАК Авторасчет,
		|	ИСТИНА КАК Сторно,
		|	УдержанияРаботниковОрганизаций.Регистратор КАК СторнируемыйДокумент,
		|	УдержанияРаботниковОрганизаций.БазовыйПериодНачало,
		|	УдержанияРаботниковОрганизаций.БазовыйПериодКонец
		|ИЗ
		|	РегистрРасчета.УдержанияРаботниковОрганизаций КАК УдержанияРаботниковОрганизаций
		|ГДЕ
		|	(НЕ УдержанияРаботниковОрганизаций.Сторно)
		|	И УдержанияРаботниковОрганизаций.Регистратор = &ПерерассчитываемыйДокумент";*/
				/*// выполним запрос по дополнительным начислениям
*/
				//Выборка = Запрос.Выполнить().Выбрать();
				while(true/*Выборка.Следующий()*/)
				{
					//ДобавитьСтрокуУдержаний(НаборУдержания, ВыборкаПоШапкеДокумента, Выборка);
				}
				//;;
			}
		}
		// СформироватьСторноЗаписиПоПерерассчитываемомуДокументу()
		// Процедура рассчитывает начисления по среднему и заполняет реквизит Результат таблицы начислений
		// Параметры:
		//  	РассчитываемыеТаблицы  - структура из элементов, соответствующих табличным частям документа.
		//				Значение Истина для каждого из элементов структуры означает необходимость расчета
		//				соответствующей табличной части документа
		// 		РежимПерерасчета - булево - признак вызов расчета при перерасчете документа

		public object РассчитатьДокументСреднегоЗаработка(/*Документ, РассчитываемыеТаблицы, ВыборкаПоШапкеДокумента, РежимПерерасчета = Ложь, РезультатЗапросаПоРасчетСреднего = Неопределено, КомментироватьРасчет = Ложь, ОсобыйВидРасчета = Неопределено*/)
		{
			//Отказ = Ложь;
			//Ссылка = Документ.Ссылка;
			/*// Создадим наборы записей используемых регистров 
*/
			//НаборОсновныеНачисления = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
			//НаборОсновныеНачисления.Отбор.Регистратор.Значение = Ссылка;
			//НаборДополнительныеНачисления = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.СоздатьНаборЗаписей();
			//НаборДополнительныеНачисления.Отбор.Регистратор.Значение = Ссылка;
			//НаборРасчетСреднего = РегистрыРасчета.РасчетСреднегоЗаработка.СоздатьНаборЗаписей();
			//НаборРасчетСреднего.Отбор.Регистратор.Значение = Ссылка;
			if(true/*НЕ РассчитываемыеТаблицы.РасчетСреднего*/)
			{
				/*// получим реквизиты табличной части РасчетСреднего 
*/
				if(true/*РезультатЗапросаПоРасчетСреднего = Неопределено*/)
				{
					//Запрос = Новый Запрос;
					/*// Установим параметры запроса
*/
					//Запрос.УстановитьПараметр("ДокументСсылка",		Ссылка);
					/*Запрос.Текст =
			"ВЫБРАТЬ
			|	СтрокаРасчетСреднего.НомерСтроки,
			|	СтрокаРасчетСреднего.Ссылка.Сотрудник КАК Сотрудник,
			|	СтрокаРасчетСреднего.Ссылка.Сотрудник.Физлицо КАК Физлицо,
			|	ВЫБОР
			|		КОГДА СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
			|			ТОГДА СтрокаРасчетСреднего.Ссылка.Организация
			|		ИНАЧЕ СтрокаРасчетСреднего.Ссылка.Организация.ГоловнаяОрганизация
			|	КОНЕЦ КАК Организация,
			|	СтрокаРасчетСреднего.ВидРасчета,
			|	СтрокаРасчетСреднего.БазовыйПериодНачало КАК БазовыйПериодНачало,
			|	ВЫБОР КОГДА СтрокаРасчетСреднего.БазовыйПериодКонец <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) ТОГДА КОНЕЦПЕРИОДА(СтрокаРасчетСреднего.БазовыйПериодКонец, ДЕНЬ) ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0) КОНЕЦ КАК БазовыйПериодКонец,
			|	СтрокаРасчетСреднего.ОтработаноПоПятидневке,
			|	СтрокаРасчетСреднего.НормаПоПятидневке,
			|	СтрокаРасчетСреднего.ОтработаноДней,
			|	СтрокаРасчетСреднего.ОтработаноЧасов,
			|	СтрокаРасчетСреднего.ЧислоМесяцев,
			|	СтрокаРасчетСреднего.КоэффициентИндексации,
			|	СтрокаРасчетСреднего.Результат
			|ИЗ
			|	Документ." + Документ.Метаданные().Имя + ".РасчетСреднего КАК СтрокаРасчетСреднего
			|
			|ГДЕ
			|	СтрокаРасчетСреднего.Ссылка = &ДокументСсылка";*/
					//РезультатЗапросаПоРасчетСреднего = Запрос.Выполнить();
				}
				//ВыборкаПоРасчетСреднего = РезультатЗапросаПоРасчетСреднего.Выбрать();
				while(true/*ВыборкаПоРасчетСреднего.Следующий()*/)
				{
					/*СтрокаНачалаСообщенияОбОшибке = "В строке номер """+ СокрЛП(ВыборкаПоРасчетСреднего.НомерСтроки) +
			""" табл. части ""Расчет среднего"": ";*/
					/*// Вид расчета
*/
					if(true/*НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.ВидРасчета)*/)
					{
						//ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указан вид расчета среднего заработка!", Отказ);
					}
					/*// Дата начала базового периода
*/
					if(true/*НЕ ЗначениеЗаполнено(ВыборкаПоРасчетСреднего.БазовыйПериодНачало)*/)
					{
						//ОбщегоНазначения.СообщитьОбОшибке(СтрокаНачалаСообщенияОбОшибке + "не указана дата начала базового периода!", Отказ);
						/*// Дата окончания базового периода
*/
					}
					if(true/*НЕ Отказ*/)
					{
						/*// Заполним записи в наборах записей регистров
*/
						//Движение = НаборРасчетСреднего.Добавить();
						/*// Свойства
*/
						//Движение.ПериодРегистрации				= ВыборкаПоШапкеДокумента.ПериодРегистрации;
						//Движение.БазовыйПериодНачало			= ВыборкаПоРасчетСреднего.БазовыйПериодНачало;
						//Движение.БазовыйПериодКонец				= ВыборкаПоРасчетСреднего.БазовыйПериодКонец;
						//Движение.ВидРасчета						= ВыборкаПоРасчетСреднего.ВидРасчета;
						/*// Измерения
*/
						//Движение.Сотрудник						= ВыборкаПоРасчетСреднего.Сотрудник;
						//Движение.Физлицо						= ВыборкаПоРасчетСреднего.Физлицо;
						//Движение.Организация					= ВыборкаПоРасчетСреднего.Организация;
						/*// Ресурсы
*/
						//Движение.Результат						= ВыборкаПоРасчетСреднего.Результат;
						//Движение.ОтработаноПоПятидневке			= ВыборкаПоРасчетСреднего.ОтработаноПоПятидневке;
						//Движение.НормаПоПятидневке				= ВыборкаПоРасчетСреднего.НормаПоПятидневке;
						//Движение.ОтработаноДней					= ВыборкаПоРасчетСреднего.ОтработаноДней;
						//Движение.ОтработаноЧасов				= ВыборкаПоРасчетСреднего.ОтработаноЧасов;
						/*// Реквизиты
*/
						//Движение.КоэффициентИндексации			= ВыборкаПоРасчетСреднего.КоэффициентИндексации;
						//Движение.ЧислоМесяцев					= ВыборкаПоРасчетСреднего.ЧислоМесяцев;
						//Движение.ПериодРасчетаСреднегоЗаработка	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработка;
						//Движение.ДатаНачалаСобытия				= ВыборкаПоШапкеДокумента.ДатаНачалаСобытия;
						//Движение.СпособРасчета					= ВыборкаПоШапкеДокумента.СпособРасчета;
						//Движение.ДатаНачалаРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаНачало;
						//Движение.ДатаОкончанияРасчетногоПериода	= ВыборкаПоШапкеДокумента.ПериодРасчетаСреднегоЗаработкаОкончание;
					}
				}
				if(true/*НЕ Отказ*/)
				{
					//НаборРасчетСреднего.Записать();
				}
			}
			if(true/*Отказ*/)
			{
			}
			/*// Если это документ-исправление, тогда добавим сторно-записи из исправляемого документа.
*/
			if(true/*ЗначениеЗаполнено(Документ.ПерерассчитываемыйДокумент)*/)
			{
				//ПроведениеРасчетов.СформироватьСторноЗаписиПоПерерассчитываемомуДокументу(Документ.ПерерассчитываемыйДокумент, ВыборкаПоШапкеДокумента, НаборОсновныеНачисления, НаборДополнительныеНачисления, , ОсобыйВидРасчета);
			}
			//Документ.СформироватьДвиженияПоНачислениям(ВыборкаПоШапкеДокумента, НаборОсновныеНачисления);
			/*// Получим дополнительные записи, имеющие признак сторно, которые необходимо добавить 
*/
			/*// в текущий набор для того, чтобы в результате сохранения получился максимальный 
*/
			/*// фактический период действия
*/
			//ТаблицаСторноЗаписей = НаборОсновныеНачисления.ПолучитьДополнение();
			//ТаблицаСторноЗаписей.Колонки.Удалить("ПериодРегистрации");
			//ТаблицаСторноЗаписей.Колонки.ПериодРегистрацииСторно.Имя = "ПериодРегистрации";
			//ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияНачало");
			//ТаблицаСторноЗаписей.Колонки.ПериодДействияНачалоСторно.Имя = "ПериодДействияНачало";
			//ТаблицаСторноЗаписей.Колонки.Удалить("ПериодДействияКонец");
			//ТаблицаСторноЗаписей.Колонки.ПериодДействияКонецСторно.Имя = "ПериодДействияКонец";
			//ТаблицаСторноЗаписей.Колонки.Удалить("СторнируемыйДокумент");
			//ТаблицаСторноЗаписей.Колонки.Регистратор.Имя = "СторнируемыйДокумент";
			if(true/*ТаблицаСторноЗаписей.Количество() <> 0*/)
			{
				/*// если таблица сторно-записей не пустая, получим таблицу
*/
				/*// начислений зависисяцих от тех начислений, которые зарегистрированы,
*/
				//ТаблицаОсновныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийОсновные(НаборОсновныеНачисления.Выгрузить());
				//ТаблицаДополнительныхНачислений = ПроведениеРасчетов.ПолучитьТаблицуЗависимыхНачисленийДополнительные(ТаблицаСторноЗаписей);
			}
			/*// Очистим начисления
*/
			//Документ.Начисления.Очистить();
			/*// рассчитываем записи начислений и если надо, записи расчета среднего заработка
*/
			if(true/*РассчитываемыеТаблицы.Начисления*/)
			{
				if(true/*РассчитываемыеТаблицы.РасчетСреднего*/)
				{
					//ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , НаборРасчетСреднего, ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,,Истина,,,КомментироватьРасчет);
				}
				if(true/*НаборДополнительныеНачисления.Количество() > 0*/)
				{
					//НаборОсновныеНачисления.Записать(Истина, Истина);
					//ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ДополнительныеНачисленияРаботниковОрганизаций", НаборДополнительныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,,,,,КомментироватьРасчет);
					//НаборДополнительныеНачисления.Записать(Истина, Истина);
					/*// повторный расчет на случай зависимости основных начислений от дополнительных
*/
					//ПроведениеРасчетовПереопределяемый.РассчитатьЗаписиРегистраРасчета("ОсновныеНачисленияРаботниковОрганизаций", НаборОсновныеНачисления, , , ВыборкаПоШапкеДокумента.ГоловнаяОрганизация, ВыборкаПоШапкеДокумента.ОбособленноеПодразделение,,,,,КомментироватьРасчет);
				}
				/*// перепишем записи начислений в документ
*/
				//ЗаписиНачислений = НаборОсновныеНачисления.Выгрузить();
				//ЗаписиНачислений.Колонки.ПериодДействияНачало.Имя = "ДатаНачала";
				//ЗаписиНачислений.Колонки.ПериодДействияКонец.Имя  = "ДатаОкончания";
				//Документ.Начисления.Загрузить(ЗаписиНачислений);
				if(true/*НаборДополнительныеНачисления.Количество() > 0*/)
				{
					/*// перепишем записи начислений в документ
*/
					//ЗаписиНачислений = НаборДополнительныеНачисления.Выгрузить();
					//ЗаписиНачислений.Колонки.БазовыйПериодНачало.Имя = "ДатаНачала";
					//ЗаписиНачислений.Колонки.БазовыйПериодКонец.Имя = "ДатаОкончания";
				}
			}
			if(true/*РассчитываемыеТаблицы.РасчетСреднего*/)
			{
				/*// перепишем записи расчета среднего заработка в документ
*/
				//Документ.РасчетСреднего.Загрузить(НаборРасчетСреднего.Выгрузить());
			}
			if(true/*ПроведениеРасчетовПереопределяемый.ЗаписыватьДвиженияПриРасчетеДокументаСреднегоЗаработка(РассчитываемыеТаблицы, РежимПерерасчета)*/)
			{
				if(true/*НаборОсновныеНачисления.Модифицированность()*/)
				{
					//НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
				}
				if(true/*НаборДополнительныеНачисления.Модифицированность()*/)
				{
					//НаборДополнительныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
				}
				if(true/*НаборРасчетСреднего.Модифицированность()*/)
				{
					//НаборРасчетСреднего.Записать(Истина, Ложь, Истина, Ложь);
				}
				//ПроведениеРасчетовПереопределяемый.ВыполнитьДополнительныеДействияПриРасчетеДокументаСреднегоЗаработка(Документ);
			}
			if(true/*Не РежимПерерасчета*/)
			{
				/*// Удаляем движения для режима интерактивного расчета
*/
				//НаборОсновныеНачисления.Очистить();
				//НаборОсновныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
				if(true/*НаборДополнительныеНачисления.Количество() > 0*/)
				{
					//НаборДополнительныеНачисления.Очистить();
					//НаборДополнительныеНачисления.Записать(Истина, Ложь, Истина, Ложь);
				}
				//НаборРасчетСреднего.Очистить();
				//НаборРасчетСреднего.Записать();
			}
			return null;
		}
		// РассчитатьДокументСреднегоЗаработка()
		// Разбивает строку таблицы начислений на помесячные записи (длиной не более месяца)
		// Параметры:
		//		СтрокаНачислений - строка таблицы начислений, которую следует разбить
		//		ТаблицаНачислений - таблица начислений, имеющая 2 обязательные колонки: КолонкаДатаНачала и  КолонкаДатаОкончания
		//		КоллекцияКолонокТаблицы - коллекция колонок таблицы
		//		КолонкаДатаНачала - имя колонки, содержащей дату начала периода записи
		//		КолонкаДатаОкончания - имя колонки, содержащей дату окончания периода записи

		public void РазбитьСтрокуНачисленийНаПомесячныеЗаписи(/*СтрокаНачислений, ТаблицаНачислений, КолонкаДатаНачала = "ДатаНачала", КолонкаДатаОкончания = "ДатаОкончания"*/)
		{
			//НачалоПериода = СтрокаНачислений[КолонкаДатаНачала];
			//КонецПериода = СтрокаНачислений[КолонкаДатаОкончания];
			if(true/*НачалоМесяца(НачалоПериода) = НачалоМесяца(КонецПериода) ИЛИ КонецПериода < НачалоПериода*/)
			{
				/*// разбивать не надо
*/
			}
			//РазницаВМесяцах = (Год(КонецПериода)*12 + Месяц(КонецПериода)) - (Год(НачалоПериода)*12 + Месяц(НачалоПериода));
			/*// У первоначальной строки дату конца установим в конец первого месяца
*/
			//СтрокаНачислений[КолонкаДатаОкончания] = КонецМесяца(НачалоПериода);
			//ОчередноеНачалоМесяца = НачалоМесяца(НачалоПериода);
			/*// Для  последней строки установим конец периода в конец разбиваемого периода
*/
			//НоваяСтрока[КолонкаДатаОкончания]	 = КонецПериода;
		}
		// Сворачивает таблицу значений в которой расположены движения НДФЛСведенияОДоходах
		// опирается на структуру метаданных - сворачивает все ресурсы по измерениям+реквизитам
		// Парамтеры:
		//	ДвиженияНДФЛСведенияОДоходах - таблица значений
		// Возвращаемое значение:
		//	нет

		public void СвернутьДвиженияНДФЛСведенияОДоходах(/*ДвиженияНДФЛСведенияОДоходах*/)
		{
			//СтрокаСуммирования = "";
			//СтрокаСуммирования = Лев(СтрокаСуммирования, СтрДлина(СтрокаСуммирования)-1);
			/*// удалим последнюю запятую
*/
			//СтрокаГруппировки = "Регистратор,Период,";
			//СтрокаГруппировки = Лев(СтрокаГруппировки, СтрДлина(СтрокаГруппировки)-1);
			/*// удалим последнюю запятую
*/
			//ДвиженияНДФЛСведенияОДоходах.Свернуть(СтрокаГруппировки,СтрокаСуммирования);
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПОЛУЧЕНИЕ СПИСКОВ СПОСОБОВ РАСЧЕТА
		// Возвращает список регламентированных алгоритмов начислений
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
		//

		public object ПолучитьСписокОсновныхВариантовНачисленийОрганизации(/**/)
		{
			//СписокСпособов = Новый СписокЗначений;
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоДням);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоМесячнойТарифнойСтавкеПоЧасам);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоДневнойТарифнойСтавке);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоЧасовойТарифнойСтавке);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
			//ПроведениеРасчетовПереопределяемый.ДополнитьСписокОсновныхВариантовНачисленийОрганизации(СписокСпособов);
			return null;
		}
		// ПолучитьСписокОсновныхВариантовНачисленийОрганизации()
		// Возвращает список алгоритмов начислений, зависящих от среднего заработка
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
		//

		public object ПолучитьСписокНачисленийПоСреднемуЗаработку(/**/)
		{
			//СписокСпособов = Новый СписокЗначений;
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
			return null;
		}
		// ПолучитьСписокНачисленийПоСреднемуЗаработку()
		// Возвращает список алгоритмов начислений, являющихся почасовыми отклонениями
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
		//

		public object ПолучитьСписокНачисленийПочасовыхОтклонений(/**/)
		{
			//СписокСпособов = Новый СписокЗначений;
			//СписокСпособов.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
			//СписокСпособов.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
			return null;
		}
		// ПолучитьСписокНачисленийПочасовыхОтклонений()
		// Возвращает список регламентированных алгоритмов удержаний
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
		//

		public object ПолучитьСписокВариантовУдержанийОрганизации(/**/)
		{
			//СписокСпособов = Новый СписокЗначений;
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.УдержаниеФиксированнойСуммой);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула);
			return null;
		}
		// ПолучитьСписокВариантовУдержанийОрганизации()

		public object МассивРасчетовПоИсполнительнымЛистам(/**/)
		{
			//МассивРасчетов = Новый Массив;
			//МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ПочтовыйСборПоИЛ);
			//МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентом);
			//МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомБезБЛ);
			//МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПредела);
			//МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛПроцентомДоПределаБезБЛ);
			//МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммой);
			//МассивРасчетов.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммойДоПредела);
			//МассивИменЭлементов = Новый Массив;
			//МассивИменЭлементов.Добавить("БанковскиеИздержкиПоИЛ");
			//МассивИменЭлементов.Добавить("ИЛВПрожиточныхМинимумах");
			//МассивЭлементов = ОбщегоНазначенияЗК.ОсобыеЭлементы(ПланыВидовРасчета.УдержанияОрганизаций, МассивИменЭлементов);
			return null;
		}
		// МассивРасчетовПоИсполнительнымЛистам()
		// Возвращает алгоритмы начислений, не требующих указания валюты начислений, в виде соответствия
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   Соответствие, содержащая подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
		//

		public object ПолучитьСоответствиеСпособовРасчетаТребующихВалюту(/**/)
		{
			//Список = ПроведениеРасчетовПереопределяемый.ПолучитьСписокСпособовРасчетаНеТребующихУказанияВалюты();
			//СоответствиеСпособов = Новый Соответствие;
			return null;
		}
		// Получить()
		// Возвращает список процентных способов расчета
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
		//

		public object ПолучитьСписокНачисленийПроцентом(/**/)
		{
			//СписокСпособов = Новый Массив;
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.Процентом);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом);
			//СписокСпособов.Добавить(Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка);
			return null;
		}
		// Возвращает список предопределенных начислений

		public object ПредопределенныеНачисленияОрганизации(/**/)
		{
			//СписокПредопределенныхВР = Новый СписокЗначений;
			/*Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОсновныеНачисленияОрганизаций.Ссылка,
	                      |	ОсновныеНачисленияОрганизаций.Наименование
	                      |ИЗ
	                      |	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	                      |
	                      |ГДЕ
	                      |	(ОсновныеНачисленияОрганизаций.Предопределенный)");*/
			//Результат = Запрос.Выполнить().Выбрать();
			while(true/*Результат.Следующий()*/)
			{
				//СписокПредопределенныхВР.Добавить(Результат.Ссылка,Результат.Наименование);
			}
			return null;
		}
		// Возвращает список кодов вычетов, относящихся к конкретным доходам
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   список значений, содержащий ссылки на предопределенные эл-ты спр-ка ВычетыНДФЛ
		//

		public object ПолучитьСписокВычетовКДоходам(/**/)
		{
			/*Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВычетыНДФЛ.Ссылка,
	|	ВычетыНДФЛ.Код,
	|	ВычетыНДФЛ.Наименование
	|ИЗ
	|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	|ГДЕ
	|	(НЕ ВычетыНДФЛ.ПометкаУдаления)
	|	И ВычетыНДФЛ.ГруппаВычета = ЗНАЧЕНИЕ(Перечисление.ГруппыВычетовПоНДФЛ.ПустаяСсылка)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВычетыНДФЛ.Код");*/
			//Выборка = Запрос.Выполнить().Выбрать();
			//СписокВычетов = Новый СписокЗначений;
			while(true/*Выборка.Следующий()*/)
			{
				//СписокВычетов.Добавить(Выборка.Ссылка,СокрЛП(Выборка.Код) + " (" + СокрЛП(Выборка.Наименование) + ")");
			}
			return null;
		}
		// ПолучитьСписокВычетовКДоходам()

		public object ПолучитьСоответствиеДоходовИВычетов(/**/)
		{
			/*// Устанавливаем соответствие доходов и положенных по ним вычетов для целей исчисления НДФЛ
*/
			//СоответствиеДоходовИВычетов = Новый Соответствие;
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2761,Справочники.ВычетыНДФЛ.Код506);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.МатпомощьПриРожденииРебенка,Справочники.ВычетыНДФЛ.МатпомощьПриРожденииРебенка);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2720,Справочники.ВычетыНДФЛ.Код501);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2730,Справочники.ВычетыНДФЛ.Код502);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2740,Справочники.ВычетыНДФЛ.Код505);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2760,Справочники.ВычетыНДФЛ.Код503);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2770,Справочники.ВычетыНДФЛ.Код504);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2790,Справочники.ВычетыНДФЛ.Код507);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2791,Справочники.ВычетыНДФЛ.Код509);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код1211,Справочники.ВычетыНДФЛ.Код607);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2010,Справочники.ВычетыНДФЛ.Код403);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2201,Справочники.ВычетыНДФЛ.Код405);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2202,Справочники.ВычетыНДФЛ.Код405);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2203,Справочники.ВычетыНДФЛ.Код405);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2204,Справочники.ВычетыНДФЛ.Код405);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2205,Справочники.ВычетыНДФЛ.Код405);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2206,Справочники.ВычетыНДФЛ.Код405);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2207,Справочники.ВычетыНДФЛ.Код405);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2208,Справочники.ВычетыНДФЛ.Код405);
			//СоответствиеДоходовИВычетов.Вставить(Справочники.ДоходыНДФЛ.Код2209,Справочники.ВычетыНДФЛ.Код405);
			return null;
		}
		// ПолучитьСоответствиеДоходовИВычетов()

		public object ПолучитьТаблицуСоответствияДоходовИВычетов(/**/)
		{
			//ТаблицаСоответствияДоходовИВычетов = Новый ТаблицаЗначений;
			//ТаблицаСоответствияДоходовИВычетов.Колонки.Добавить("КодВычета",Новый ОписаниеТипов("СправочникСсылка.ВычетыНДФЛ"));
			//ТаблицаСоответствияДоходовИВычетов.Колонки.Добавить("КодДохода",Новый ОписаниеТипов("СправочникСсылка.ДоходыНДФЛ"));
			return null;
		}
		// ПолучитьТаблицуСоответствияДоходовИВычетов()
		// Проверяет соответствует ли указанный код вычета коду дохода по НДФЛ
		//
		// Параметры
		//  КодДохода - тип СправочникСсылка.ДоходыНДФЛ, код дохода
		//  КодВычета - тип СправочникСсылка.ВычетыНДФЛ, проверяемый код вычета
		//
		// Возвращаемое значение:
		//   булево - ответ на вопрос "соответствует ли?"
		//

		public object ВычетСоответствуетДоходу(/*КодДохода = Неопределено, КодВычета = Неопределено, СоответствиеДоходовИВычетов = Неопределено*/)
		{
			if(true/*Не ЗначениеЗаполнено(СоответствиеДоходовИВычетов)*/)
			{
				//СоответствиеДоходовИВычетов = ПолучитьСоответствиеДоходовИВычетов();
			}
			if(true/*КодДохода = Справочники.ДоходыНДФЛ.Код2761  // вычеты по пп 8, 28 ст. 217 НК РФ и договор ГПХ
		Или КодДохода = Справочники.ДоходыНДФЛ.МатпомощьПриРожденииРебенка 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2720 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2730 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2740 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2760 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2770 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2790 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2791 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код1211 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2010*/)
			{
				/*// вычеты по пп 8, 28 ст. 217 НК РФ и договор ГПХ
*/
				/*Или КодДохода = Справочники.ДоходыНДФЛ.МатпомощьПриРожденииРебенка 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2720 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2730 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2740 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2760 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2770 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2790 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2791 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код1211 
		Или КодДохода = Справочники.ДоходыНДФЛ.Код2010 Тогда
		Возврат КодВычета = СоответствиеДоходовИВычетов[КодДохода];*/
			}
			return null;
		}
		// ПроверитьСоответствиеДоходаИВычета()
		// Выбирает все зарегистрированные в ИБ категории расчета кроме Справочники.КатегорииРасчетов.Первичное
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   список значений с категориями для выбора
		//

		public object ПолучитьСписокЗависимыхКатегорийРасчета(/**/)
		{
			/*// Установим значение переключателя "ОчередностьНачисления" и список выбора для реквизита "КатегорияРасчета"
*/
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("Первичное", Справочники.КатегорииРасчетов.Первичное);
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	КатегорииРасчетов.Ссылка,
	|	КатегорииРасчетов.Наименование
	|ИЗ
	|	Справочник.КатегорииРасчетов КАК КатегорииРасчетов
	|ГДЕ
	|	КатегорииРасчетов.Ссылка <> &Первичное
	|
	|УПОРЯДОЧИТЬ ПО
	|	КатегорииРасчетов.Код";*/
			//Категории = Запрос.Выполнить().Выбрать();
			//СписокКатегорийРасчета = Новый СписокЗначений;
			while(true/*Категории.Следующий()*/)
			{
				//СписокКатегорийРасчета.Добавить(Категории.Ссылка, Категории.Наименование);
			}
			return null;
		}
		// ПолучитьСписокВычетовКДоходам()
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ВИДАМИ РАСЧЕТА
		// Эта функция возвращает информацию о виде расчета из переданного соответствия
		// Если в соответствии не найдена информация о виде расчета - она подготавливается и
		// помещается в соответствие
		// Применяется для работы с формами, в которых активно требуется получать
		// информащцию о видах расчета, например, при выводе строки табличного поля
		//
		// Параметры:
		//	СведенияОВидахРасчета - соответствие, у котрого в качестве ключа - ПланВидовРасчетаСсылка, а
		//  				  в качестве значения - структура из элементов
		//					  РазмерТребуется - булево - если да, то при вводе такого
		//										вида расчета требуется проставлять значение "размер"
		//										(суммы, проценты и проч. показатели, используемые при расчете)
		//
		//	ВидРасчета - ПланВидовРасчетаСсылка
		//
		// Возвращаемое значение:
		//  Описанная выше структура
		//

		public object ПолучитьСведенияОВидеРасчета(/*СведенияОВидахРасчета, ВидРасчета*/)
		{
			//СведенияОВидеРасчета = СведенияОВидахРасчета[ВидРасчета];
			if(true/*СведенияОВидеРасчета = Неопределено*/)
			{
				//ИзменениеПоказателяНеУказано = Перечисления.ИзменениеПоказателейСхемМотивации.ПустаяСсылка();
				/*// КодДоходаНДФЛ
*/
				/*// СпособРасчета
*/
				/*// ЗачетОтработанногоВремени
*/
				/*// ЗачетНормыВремени
*/
				/*// ВидВремени
*/
				/*// ПериодРасчетаСреднегоЗаработка
*/
				/*// РазмерТребуется
*/
				/*// НеТребуетВалюты
*/
				/*// ТребуетВводаТарифногоРазряда
*/
				//Неопределено);
				/*// ОбозначениеВТабелеУчетаРабочегоВремени
*/
				//СпособРасчета = ВидРасчета.СпособРасчета;
				//ТипВР = ТипЗнч(ВидРасчета);
				/*// размер требует способ расчета
*/
				//СведенияОВидеРасчета.СпособРасчета = СпособРасчета;
				//СведенияОВидеРасчета.РазмерТребуется = СпособРасчетаТребуетРазмер(СпособРасчета);
				//СведенияОВидеРасчета.НеТребуетВалюты = СпособРасчетаНеТребуетВалюты(СпособРасчета);
				/*// размер требует вид расчета
*/
				if(true/*ТипВР = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций")*/)
				{
					//ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ВидВремени,ЗачетОтработанногоВремени,ЗачетНормыВремени,КодДоходаНДФЛ,ТребуетВводаТарифногоРазряда,ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,ПериодРасчетаСреднегоЗаработка,ОбозначениеВТабелеУчетаРабочегоВремени");
					if(true/*СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок*/)
					{
						//СведенияОВидеРасчета.РазмерТребуется = Истина;
					}
					if(true/*СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда*/)
					{
						//СведенияОВидеРасчета.НеТребуетВалюты = Истина;
					}
				}
				if(true/*ТипВР = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций")*/)
				{
					//ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"КодДоходаНДФЛ,ТребуетВводаТарифногоРазряда,ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка");
					if(true/*СведенияОВидеРасчета.ТребуетВводаТарифногоРазряда*/)
					{
						//СведенияОВидеРасчета.НеТребуетВалюты = Истина;
					}
					if(true/*ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(СпособРасчета) <> Неопределено*/)
					{
						//СведенияОВидеРасчета.ПериодРасчетаСреднегоЗаработка = ВидРасчета.ЧислоМесяцев;
					}
				}
				if(true/*ТипВР = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций")*/)
				{
					if(true/*ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(СпособРасчета) <> Неопределено*/)
					{
						//ЗаполнитьЗначенияСвойств(СведенияОВидеРасчета,ВидРасчета,"ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка,ПериодРасчетаСреднегоЗаработка");
					}
				}
				//СведенияОВидахРасчета[ВидРасчета] = СведенияОВидеРасчета;
			}
			return null;
		}
		// ПолучитьСведенияОВидеРасчета
		// функция проверяет необходимость задавать размер для расчета по заданному способу
		// Парамерты:
		//	СпособРасчета
		//
		// Возвращаемое значение:
		//	булево - признак того, нужен ли размер для расчета таким способом
		//

		public object СпособРасчетаТребуетРазмер(/*СпособРасчета*/)
		{
			/*Возврат НЕ (
    СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СдельныйЗаработок 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом 
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
	    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
		или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула
  );*/
			return null;
		}

		public object СпособРасчетаНеТребуетВалюты(/*СпособРасчета*/)
		{
			/*Возврат (
	
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаВечерниеЧасы Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроцентомОтОблагаемыхЕСННачислений Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентом Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистПроцентомДоПредела Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистФиксСуммойДоПредела Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ИсполнительныйЛистВПрожиточныхМинимумах Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка Или
	СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом
	
    );*/
			return null;
		}
		// Проверяет правильность заполнения реквизитов вида расчета
		// для некуоторых случаев выдает сообщение об ошибке
		// для некоторых - возвращает текст сообщения
		// 	Параметры:
		//		ВидРасчета - объект Вид расчета
		//		Отказ - признак отказа (проверка не прошла)
		//	Возвращаемое значение:
		//		ТекстСообщения - текст сообщения о результате проверки

		public object ПроверитьНастройкуВидаРасчета(/*ВидРасчета, Отказ, ПроверятьСоответствиеБазовыхИВедущихРасчетов = Истина, ОбработкаКомментариев*/)
		{
			//МетаданныеВидаРасчета = ВидРасчета.Метаданные();
			//ВидРасчетаЯвляетсяНачислением = ПроведениеРасчетовПереопределяемый.ВидРасчетаЯвляетсяНачислением(МетаданныеВидаРасчета);
			if(true/*НЕ ЗначениеЗаполнено(ВидРасчета.Наименование)*/)
			{
				//ОбработкаКомментариев.ДобавитьСообщение("Не задано наименование " + ?(ВидРасчетаЯвляетсяНачислением, "начисления", "удержания") + "!", Перечисления.ВидыСообщений.Ошибка);
				//Отказ = Истина;
			}
			//ЕстьРеквизитСпособРасчета = МетаданныеВидаРасчета.Реквизиты.Найти("СпособРасчета") <> Неопределено;
			if(true/*ЕстьРеквизитСпособРасчета И НЕ ЗначениеЗаполнено(ВидРасчета.СпособРасчета)*/)
			{
				//ОбработкаКомментариев.ДобавитьСообщение("Не задан способ расчета!", Перечисления.ВидыСообщений.Ошибка);
				//Отказ = Истина;
			}
			/*ЭтоДоплата = ЕстьРеквизитСпособРасчета 
				И (ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработка 
					Или ВидРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);*/
			//ЕстьРеквизитКатегорияНачисления = МетаданныеВидаРасчета.Реквизиты.Найти("КатегорияРасчета") <> Неопределено;
			if(true/*ЕстьРеквизитКатегорияНачисления и НЕ ЗначениеЗаполнено(ВидРасчета.КатегорияРасчета)*/)
			{
				//ОбработкаКомментариев.ДобавитьСообщение("Не задана последовательность расчета!", Перечисления.ВидыСообщений.Ошибка);
				//Отказ = Истина;
			}
			/*// Вид расчета не может входить в собственную базу
*/
			//ВидРасчетаСсылка = ВидРасчета.Ссылка;
			/*// рассчитываем на то, что данная функция вызывается для видов расчета с поддержкой базового периода
*/
			if(true/*ВидРасчета.БазовыеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  Неопределено*/)
			{
				/*// в расчетную базу входят только начисления
*/
				//ОбработкаКомментариев.ДобавитьСообщение("Начисление не может быть включено в состав собственной расчетной базы!", Перечисления.ВидыСообщений.Ошибка);
				//Отказ = Истина;
			}
			if(true/*ВидРасчета.ВедущиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  Неопределено*/)
			{
				//ОбработкаКомментариев.ДобавитьСообщение("Начисление не может быть включено в состав собственного списка ведущих начислений!", Перечисления.ВидыСообщений.Ошибка);
				//Отказ = Истина;
			}
			//ЕстьРеквизитПроизвольнаяФормулаРасчета = МетаданныеВидаРасчета.Реквизиты.Найти("ПроизвольнаяФормулаРасчета") <> Неопределено;
			if(true/*ЕстьРеквизитПроизвольнаяФормулаРасчета И ВидРасчета.ПроизвольнаяФормулаРасчета И Не ЗначениеЗаполнено(ВидРасчета.ФормулаРасчета)*/)
			{
				//ОбработкаКомментариев.ДобавитьСообщение("Не заполнена формула расчета!", Перечисления.ВидыСообщений.Ошибка);
				//Отказ = Истина;
			}
			/*// тарифный разряд не может запрашиваться в удержаниях
*/
			//ТипыПВРУдержаний = Новый Массив;
			//ТипыПВРУдержаний.Добавить(Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"));
			//ПроведениеРасчетовПереопределяемый.ТипыПВРУдержанийДополнить(ТипыПВРУдержаний);
			if(true/*ТипыПВРУдержаний.Найти(ТипЗнч(ВидРасчета.Ссылка)) <> Неопределено*/)
			{
				//ПроверитьНаличиеЗапрашиваемыхПоказателейТипаТарифныйРазряд(ВидРасчета, ОбработкаКомментариев, Отказ);
			}
			/*// если поддерживается период действия
*/
			if(true/*МетаданныеВидаРасчета.ИспользованиеПериодаДействия*/)
			{
				if(true/*ВидРасчета.ВытесняющиеВидыРасчета.Найти(ВидРасчетаСсылка, "ВидРасчета") <>  Неопределено*/)
				{
					//ОбработкаКомментариев.ДобавитьСообщение("Начисление не может быть включено в состав собственного списка вытесняющих начислений!", Перечисления.ВидыСообщений.Ошибка);
					//Отказ = Истина;
				}
			}
			if(true/*Отказ*/)
			{
			}
			//ТекстСообщения = "";
			/*// Проверим значение реквизита "Категория начисления".
*/
			/*// Для ПВР "Удержания организаций" проверку пропустим.
*/
			if(true/*ЕстьРеквизитКатегорияНачисления и ВидРасчетаЯвляетсяНачислением и Не ПроведениеРасчетовПереопределяемый.ЕстьДоначисление(ВидРасчета)*/)
			{
				//Запрос = Новый Запрос;
				//Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	БазовыеВидыРасчета.ВидРасчета
		|ПОМЕСТИТЬ ВТ_ТаблицаБазовыхВидовРасчета
		|ИЗ
		|	&ТаблицаБазовыхВидовРасчета КАК БазовыеВидыРасчета";*/
				//ТаблицаБазовыхВидовРасчета = Видрасчета.БазовыеВидыРасчета.Выгрузить();
				//ТаблицаБазовыхВидовРасчета.Колонки.Добавить("Ссылка");
				//ТаблицаБазовыхВидовРасчета.ЗаполнитьЗначения(Видрасчета,"Ссылка");
				//Запрос.УстановитьПараметр("ТаблицаБазовыхВидовРасчета", ТаблицаБазовыхВидовРасчета);
				//Запрос.Выполнить();
				//Запрос.Текст = ПроведениеРасчетовПереопределяемый.ПолучитьТекстОписанияБазовыхНачислений(МетаданныеВидаРасчета);
				//Категории = Запрос.Выполнить().Выбрать();
				if(true/*Категории.Следующий()*/)
				{
					//МаксимальныйИндексКатегории = Категории.МаксимальныйИндексКатегории;
					//ЕстьДополнительныеВР = Категории.ЕстьДополнительныеВР;
					//ЕстьОсновныеВР = Категории.ЕстьОсновныеВР;
				}
				/*// Если в базу доп.начислений входят только основные, тогда категория расчета нам не интересна 
*/
				//НеПроверять = МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций И Не ЕстьДополнительныеВР И ЕстьОсновныеВР;
				if(true/*НеПроверять*/)
				{
					/*// ничего не делаем
*/
				}
			}
			/*// Проверим соответствие списков базовых и ведущих расчетов
*/
			if(true/*ПроверятьСоответствиеБазовыхИВедущихРасчетов*/)
			{
			}
			/*// Если ВР связан со средним заработком, проверим, чтобы был заполнен реквизит "ПериодРасчетаСреднегоЗаработка"
*/
			//ЕстьРеквизитПериодРасчетаСреднегоЗаработка = МетаданныеВидаРасчета.Реквизиты.Найти("ПериодРасчетаСреднегоЗаработка") <> Неопределено;
			if(true/*ЕстьРеквизитСпособРасчета и ЕстьРеквизитПериодРасчетаСреднегоЗаработка*/)
			{
				if(true/*ПроведениеРасчетов.ПолучитьСписокНачисленийПоСреднемуЗаработку().НайтиПоЗначению(ВидРасчета.СпособРасчета) <> Неопределено*/)
				{
					if(true/*НЕ ЗначениеЗаполнено(ВидРасчета.ПериодРасчетаСреднегоЗаработка) и ВидРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору*/)
					{
						//ОбработкаКомментариев.ДобавитьСообщение("Необходимо задать количество месяцев для расчета среднего заработка!", Перечисления.ВидыСообщений.Ошибка);
						//Отказ = Истина;
					}
				}
			}
			/*// Проверим соответствие способа отражения, кода ЕСН и отношения к ЕНВД
*/
			if(true/*(МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ОсновныеНачисленияОрганизаций 
		или МетаданныеВидаРасчета = Метаданные.ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций)
		и ВидРасчета.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма*/)
			{
				//ПроведениеРасчетовПереопределяемый.ПроверитьОтражениеВУчетеВидаРасчета(ВидРасчета, Отказ, ОбработкаКомментариев);
			}
			return null;
		}
		//ПроверитьНастройкуВидаРасчета

		public object УстановитьФлагНачисляетсяВЦеломЗаМесяц(/*ПроизвольнаяФормулаРасчета, Показатели, СпособРасчета = Неопределено, БазовыйПериодПрошлыйМесяц = Ложь*/)
		{
			//НачисляетсяВЦеломЗаМесяц = Истина;
			if(true/*ПроизвольнаяФормулаРасчета*/)
			{
				//СписокПоказателей = Новый Массив;
				//СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВДнях);
				//СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВКалендарныхДнях);
				//СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВЧасах);
				//СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ОтработаноВремениВДнях);
				//СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.ОтработаноВремениВЧасах);
				//СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.РасчетнаяБаза);
				//СписокПоказателей.Добавить(Справочники.ПоказателиСхемМотивации.СдельнаяВыработка);
				//ПоказателиСхемМотивацииПереопределяемый.ДополнитьПоказателиНачисляетсяВЦеломЗаМесяц(СписокПоказателей);
			}
			return null;
		}

		public void ПроверитьНаличиеЗапрашиваемыхПоказателейТипаТарифныйРазряд(/*ВидРасчета, ОбработкаКомментариев, Отказ*/)
		{
			//МассивПоказателей = Новый Массив;
			if(true/*МассивПоказателей.Количество() > 0*/)
			{
				//Запрос = Новый Запрос;
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА 1 В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					1
		|				ИЗ
		|					Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
		|				ГДЕ
		|					ПоказателиСхемМотивации.Ссылка В (&МассивПоказателей)
		|					И ПоказателиСхемМотивации.ТипПоказателя = ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ТарифныйРазряд))
		|			ТОГДА ИСТИНА
		|		ИНАЧЕ ЛОЖЬ
		|	КОНЕЦ КАК ЕстьОшибка,
		|	""Показатели типа """"Тарифный разряд"""" не могут запрашиваться в удержаниях"" КАК ТекстОшибки";*/
				//Запрос.УстановитьПараметр("МассивПоказателей", МассивПоказателей);
				//Выборка = Запрос.Выполнить().Выбрать();
				//Выборка.Следующий();
				if(true/*Выборка.ЕстьОшибка*/)
				{
					//ОбработкаКомментариев.ДобавитьСообщение(Выборка.ТекстОшибки, Перечисления.ВидыСообщений.Ошибка);
					//Отказ = Истина;
				}
			}
		}
		// ПроверитьНаличиеЗапрашиваемыхПоказателейТипаТарифныйРазряд
		////////////////////////////////////////////////////////////////////////////////
		// РАБОТА СО СТАЖЕМ
		//
		// проверка того, что способ расчета относится к расчетам от стажа

		public object ЭтоРасчетОтСтажа(/*СпособРасчета*/)
		{
			/*Возврат СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоДневнойТарифнойСтавке 
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоДням
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоМесячнойТарифнойСтавкеПоЧасам
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПоЧасовойТарифнойСтавке
    или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом;*/
			return null;
		}
		// Проверяет является ли способ расчета тем способом, которому требуется
		// информация о проценте надбавки за северный стаж
		//
		// Параметры:
		//  СпособРасчета - ПеречислениеСсылка.СпособыРасчетаОплатыТруда
		//

		public object ЭтоРасчетСеверныхНадбавок(/*СпособРасчета*/)
		{
			if(true/*СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка*/)
			{
			}
			return null;
		}
		// ПолучитьПроцентыСевернойНадбавкиЗаПериод
		// Предназначена для получения информации о процентах северной надбавки и датах начала их действия
		// за определенный период
		// Параметры:
		//  ДатаРегистрации - дата регистрации записи о стаже
		//  ПорядокНачисления - порядок начисления северной надбавки - ПеречислениеСсылка.ПорядокНачисленияСеверныхНадбавок
		//  НачальныйПроцент - процент на дату ДатаРегистрации
		//  Месяцев - количество месяцев стажа на дату ДатаРегистрации
		//  Дней - количество дней стажа на дату ДатаРегистрации
		//  ДатаНачала - начало периода, в котором мы получаем сведения о процентах надбавки
		//  ДатаОкончания - конец периода, в котором мы получаем сведения о процентах надбавки
		//
		// Возвращаемое значение:
		//  Массив структур вида "Период, Процент"
		//

		public object ПолучитьПроцентыСевернойНадбавкиЗаПериод(/*ДатаРегистрации, ПорядокНачисления, 
                        НачальныйПроцент, Месяцев, Дней, ДатаНачала, ДатаОкончания*/)
		{
			//мДлинаДня = 60*60*24;
			//ВозврМассив = Новый Массив;
			/*// в общем случае шкала может состоять из двух участков
*/
			//РазмерПериода1 = 0;
			//РазмерПрироста1 = 0;
			//Ограничение1 = 0;
			//РазмерПериода2 = 0;
			//РазмерПрироста2 = 0;
			//Ограничение2 = 0;
			if(true/*ПорядокНачисления = Перечисления.ПорядокНачисленияСеверныхНадбавок.Группа1Льготная*/)
			{
				//РазмерПериода1 = 6;
				//РазмерПрироста1 = 20;
				//Ограничение1 = 60;
				//РазмерПериода2 = 6;
				//РазмерПрироста2 = 10;
				//Ограничение2 = 100;
			}
			//ДатаОтсчета = ДатаРегистрации - Дней * мДлинаДня;
			/*ПрошлоМесяцевПослеДатыОтсчета = (Год(ДатаНачала) - Год(ДатаОтсчета)) * 12 + Месяц(ДатаНачала) - Месяц(ДатаОтсчета) -
        ?(День(ДатаНачала) >= День(ДатаОтсчета), 0, 1);*/
			/*ПрошлоМесяцев = (Год(ДатаНачала) - Год(ДатаОтсчета)) * 12 + Месяц(ДатаНачала) - Месяц(ДатаОтсчета) -
        ?(День(ДатаНачала) >= День(ДатаОтсчета), 0, 1) + Месяцев;*/
			if(true/*РазмерПериода2 = 0*/)
			{
				/*// у шкалы только один участок
*/
				//ПрошлоПериодов = Цел(ПрошлоМесяцев / РазмерПериода1);
				//ОстатокМесяцев = ПрошлоМесяцев - ПрошлоПериодов * РазмерПериода1;
				//Процент = Мин(НачальныйПроцент + ПрошлоПериодов * РазмерПрироста1, Ограничение1);
				//Элемент = Новый Структура("Период, Процент", ДатаНачала, Процент);
				//ВозврМассив.Добавить(Элемент);
				//ДатаСменыПроцента = ДобавитьМесяц(ДатаОтсчета, ПрошлоМесяцевПослеДатыОтсчета + РазмерПериода1 - ОстатокМесяцев);
				while(true/*ДатаСменыПроцента < ДатаОкончания*/)
				{
					//Процент = Мин(Процент + РазмерПрироста1, Ограничение1);
					//Элемент = Новый Структура("Период, Процент", ДатаСменыПроцента, Процент);
					//ВозврМассив.Добавить(Элемент);
					if(true/*Процент = Ограничение1*/)
					{
					}
					//ДатаСменыПроцента = ДобавитьМесяц(ДатаСменыПроцента, РазмерПериода1);
				}
				//;;
			}
			return null;
		}
		// Функция выбирает стажи по физлицу из ТЧ "Стажи" справочника "Физические лица"
		//
		// Параметры
		//  Физлицо		– СправочникСсылка.ФизическиеЛица – работник, которому вычисляется стаж
		//  ДопУсловие	– Строка – строка дополнительного условия в запрос
		//  ВидСтажа	– СправочникСсылка.ВидыСтажа - значение параметра для дополнительного условия
		//
		// Возвращаемое значение:
		//   ВыборкаИзРезультатаЗапроса   – выборка со стажами работника
		//

		public object ВыбратьСтажиРаботника(/*Физлицо, ДопУсловие = Неопределено, ВидСтажа = Неопределено*/)
		{
			//Запрос = Новый Запрос;
			/*ТекстЗапроса = 
	
	"ВЫБРАТЬ
	|	ФизическиеЛицаСтажи.ВидСтажа,
	|	ФизическиеЛицаСтажи.ВидСтажа.Наименование КАК Наименование,
	|	ФизическиеЛицаСтажи.ДатаОтсчета,
	|	ФизическиеЛицаСтажи.РазмерМесяцев,
	|	ФизическиеЛицаСтажи.РазмерДней
	|ИЗ
	|	Справочник.ФизическиеЛица.Стажи КАК ФизическиеЛицаСтажи
	|ГДЕ
	|	ФизическиеЛицаСтажи.Ссылка = &Физлицо
	|	И ФизическиеЛицаСтажи.ДатаОтсчета <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";*/
			if(true/*ДопУсловие <> Неопределено*/)
			{
				//ТекстЗапроса = ТекстЗапроса + " " + ДопУсловие;
				if(true/*ВидСтажа <> Неопределено*/)
				{
					//Запрос.УстановитьПараметр("ВидСтажа", ВидСтажа);
				}
			}
			//Запрос.Текст = ТекстЗапроса;
			//Запрос.УстановитьПараметр("Физлицо", Физлицо);
			return null;
		}
		// ВыбратьСтажиРаботника()
		// определяет начало непрерывного стажа физлица
		//
		// Параметры
		//  ДатаНачала - Дата, дата на которую формируется стаж
		//  Физлицо - Справочник.ФизическиеЛица, физ. лицо для которого определяется стаж
		//  Организация - Справочник.Организации, организация, где работает физлицо.
		//
		// Возвращаемое значение:
		//  дата - дата начала непрерывного стажа
		//

		public object ПолучитьНачалоСтажаДляБольничногоЛиста(/*ДатаНачала, Физлицо, Организация, ВидСтажа = Неопределено*/)
		{
			if(true/*ВидСтажа = Неопределено*/)
			{
				//ВидСтажа = ПроведениеРасчетовПереопределяемый.ПолучитьВидСтажаПоУмолчаниюДляБольничногоЛиста(ДатаНачала);
			}
			//ВыборкаПоСтажу = ВыбратьСтажиРаботника(Физлицо, "И ФизическиеЛицаСтажи.ВидСтажа = &ВидСтажа", ВидСтажа);
			if(true/*ВыборкаПоСтажу.Следующий()*/)
			{
				//ДатаСтажа = ДобавитьМесяц(ВыборкаПоСтажу.ДатаОтсчета, - ВыборкаПоСтажу.РазмерМесяцев) - ВыборкаПоСтажу.РазмерДней*86400;
			}
			return null;
		}
		// ПолучитьНачалоСтажаДляБольничногоЛиста()
		////////////////////////////////////////////////////////////////////////////////
		// ОБСЛУЖИВАНИЕ ПЕРЕРАСЧЕТОВ
		//
		// процедура выполняет дописывание наборов записей перерасчетов основных начислений по
		// переданной выборке
		// выборка должна содержать уникальные комбинации Физлицо+Регистратор (т.е. ОбъектПерерасчета)
		// которых еще нет в таблице перерасчета

		public void ДописатьПерерасчетыОсновныхНачислений(/*Выборка*/)
		{
			//Наборы = Новый Соответствие;
			while(true/*Выборка.Следующий()*/)
			{
				//Набор = Наборы[Выборка.Регистратор];
				if(true/*Набор = Неопределено*/)
				{
					//Набор = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
					//Набор.Отбор.ОбъектПерерасчета.Значение = Выборка.Регистратор;
					//Набор.Отбор.ОбъектПерерасчета.Использование = Истина;
					//Наборы.Вставить(Выборка.Регистратор, Набор);
				}
				//НоваяСтрока = Набор.Добавить();
				//НоваяСтрока.ОбъектПерерасчета	= Выборка.Регистратор;
				//НоваяСтрока.Сотрудник			= Выборка.Сотрудник;
				//НоваяСтрока.ФизЛицо				= Выборка.Физлицо;
				//НоваяСтрока.Организация			= Выборка.Организация;
			}
		}
		// Процедура выполняет дописывание наборов записей перерасчетов в
		// регистр сведений ЗаполнениеПлановыхНачислений
		//

		public void ДописатьПерерасчетыВЗаполнениеПлановыхНачислений(/*Выборка*/)
		{
			//Наборы = Новый Соответствие;
			while(true/*Выборка.Следующий()*/)
			{
				//Набор = Наборы[Выборка.ОбъектЗаполнения];
				if(true/*Набор = Неопределено*/)
				{
					//Набор = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
					//Набор.Отбор.ОбъектЗаполнения.Значение = Выборка.ОбъектЗаполнения;
					//Набор.Отбор.ОбъектЗаполнения.Использование = Истина;
					//Наборы.Вставить(Выборка.ОбъектЗаполнения, Набор);
				}
				//ЗаполнитьЗначенияСвойств(Набор.Добавить(),Выборка);
			}
		}
		// ДописатьПерерасчетыВЗаполнениеПлановыхНачислений()

		public void ОбработатьТаблицуПерерасчетов(/*Ссылка*/)
		{
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("Регистратор", Ссылка);
			/*ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перерасчеты.ОбъектПерерасчета КАК ОбъектПерерасчетаОсновные,
	|	ПерерасчетыДоп.ОбъектПерерасчета КАК ОбъектПерерасчетаДополнительные
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчеты
	|		ПО Начисления.СторнируемыйДокумент = Перерасчеты.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = Перерасчеты.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК ПерерасчетыДоп
	|		ПО Начисления.СторнируемыйДокумент = ПерерасчетыДоп.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = ПерерасчетыДоп.ФизЛицо
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И Начисления.Сторно";*/
			//Запрос.Текст = ТекстЗапроса;
			//ВыборкаОбъектПерерасчета = Запрос.Выполнить().Выбрать();
			while(true/*ВыборкаОбъектПерерасчета.Следующий()*/)
			{
				if(true/*ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные)*/)
				{
					//НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
					//НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные;
					//НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
					//НаборЗаписейПерерасчета.Записать();
				}
				if(true/*ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные)*/)
				{
					//НаборЗаписейПерерасчета = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
					//НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные;
					//НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
					//НаборЗаписейПерерасчета.Записать();
				}
			}
			/*;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Перерасчеты.ОбъектПерерасчета КАК ОбъектПерерасчетаОсновные,
	|	ПерерасчетыДоп.ОбъектПерерасчета КАК ОбъектПерерасчетаДополнительные
	|ИЗ
	|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК Начисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ПерерасчетОсновныхНачислений КАК Перерасчеты
	|		ПО Начисления.СторнируемыйДокумент = Перерасчеты.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = Перерасчеты.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций.ПерерасчетДополнительныхНачислений КАК ПерерасчетыДоп
	|		ПО Начисления.СторнируемыйДокумент = ПерерасчетыДоп.ОбъектПерерасчета
	|			И Начисления.ФизЛицо = ПерерасчетыДоп.ФизЛицо
	|ГДЕ
	|	Начисления.Регистратор = &Регистратор
	|	И Начисления.Сторно";*/
			//Запрос.Текст = ТекстЗапроса;
			//ВыборкаОбъектПерерасчета = Запрос.Выполнить().Выбрать();
			while(true/*ВыборкаОбъектПерерасчета.Следующий()*/)
			{
				if(true/*ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные)*/)
				{
					//НаборЗаписейПерерасчета = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
					//НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаОсновные;
					//НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
					//НаборЗаписейПерерасчета.Записать();
				}
				if(true/*ЗначениеЗаполнено(ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные)*/)
				{
					//НаборЗаписейПерерасчета = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
					//НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Значение = ВыборкаОбъектПерерасчета.ОбъектПерерасчетаДополнительные;
					//НаборЗаписейПерерасчета.Отбор.ОбъектПерерасчета.Использование = Истина;
					//НаборЗаписейПерерасчета.Записать();
				}
			}
			//;;
		}
		// Функция получает по таблице начислений таблицу зависимых начислений
		//
		// Параметры
		//  ТаблицаНачислений  – <Таблица значений> – таблица начислений по которым необходимо собрать зависимые начисления
		//
		// Возвращаемое заначение - – <Таблица значений>

		public object ПолучитьТаблицуЗависимыхНачисленийОсновные(/*ТаблицаНачислений*/)
		{
			if(true/*ТаблицаНачислений.Количество() = 0*/)
			{
			}
			//МенеджерВТ = Новый МенеджерВременныхТаблиц;
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
			//Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
			/*// поместим таблицу значений во временную таблицу
*/
			/*ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
	|	ТаблицаНачислений.ВидРасчета КАК ВидРасчета,
	|	ТаблицаНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаНачислений.ПериодДействия КАК ПериодДействия,
	|	ТаблицаНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ТаблицаНачислений.ПериодДействияКонец КАК ПериодДействияКонец,
	|	ТаблицаНачислений.Сторно
	|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗависимыеНачисления.ПериодРегистрации,
	|	ЗависимыеНачисления.Регистратор,
	|	ЗависимыеНачисления.ВидРасчета,
	|	ЗависимыеНачисления.ПериодДействия КАК ПериодДействия,
	|	ЗависимыеНачисления.ПериодДействияНачало,
	|	ЗависимыеНачисления.ПериодДействияКонец,
	|	ЗависимыеНачисления.БазовыйПериодНачало,
	|	ЗависимыеНачисления.БазовыйПериодКонец,
	|	ЗависимыеНачисления.Сторно,
	|	ЗависимыеНачисления.Сотрудник КАК Сотрудник,
	|	ЗависимыеНачисления.ФизЛицо,
	|	ЗависимыеНачисления.Организация,
	|	ЗависимыеНачисления.ГрафикРаботы,
	|	ЗависимыеНачисления.ГрафикРаботыНорма,
	|	ЗависимыеНачисления.ВидУчетаВремени,
	|	ЗависимыеНачисления.Показатель1,
	|	ЗависимыеНачисления.Показатель2,
	|	ЗависимыеНачисления.Показатель3,
	|	ЗависимыеНачисления.Показатель4,
	|	ЗависимыеНачисления.Показатель5,
	|	ЗависимыеНачисления.Показатель6,
	|	ЗависимыеНачисления.ПодразделениеОрганизации,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ЗависимыеНачисления.ДатаНачалаСобытия,
	|	ЗависимыеНачисления.ОбособленноеПодразделение,
	|	ЗависимыеНачисления.Авторасчет,
	|	ЗависимыеНачисления.СторнируемыйДокумент,
	|	ЗависимыеНачисления.Результат КАК Результат,
	|	ЗависимыеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|	ЗависимыеНачисления.ОтработаноДней КАК ОтработаноДней,
	|	ЗависимыеНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|	ЗависимыеНачисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|	ЗависимыеНачисления.ОтработаноЧасовПоПятидневке КАК ОтработаноЧасовПоПятидневке,
	|	ЗависимыеНачисления.НормаДней КАК НормаДней,
	|	ЗависимыеНачисления.НормаЧасов КАК НормаЧасов,
	|	ЗависимыеНачисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|	ЗависимыеНачисления.НормаЧасовПоПятидневке КАК НормаЧасовПоПятидневке,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.ВидРасчета.БазовыйПериодПрошлыйМесяц
	|			ТОГДА ЗависимыеНачисления.БазовыйПериодНачало
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействияНачало
	|	КОНЕЦ КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.ВидРасчета.БазовыйПериодПрошлыйМесяц
	|			ТОГДА ЗависимыеНачисления.БазовыйПериодКонец
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействияКонец
	|	КОНЕЦ КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.ВидРасчета.БазовыйПериодПрошлыйМесяц
	|			ТОГДА НАЧАЛОПЕРИОДА(ЗависимыеНачисления.БазовыйПериодНачало, МЕСЯЦ)
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействия
	|	КОНЕЦ КАК ПериодДействияПриведенный
	|ПОМЕСТИТЬ ВТ_ЗависимыеНачисления
	|ИЗ
	|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций.ФактическийПериодДействия(
	|			(НЕ ВидРасчета В
	|						(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|							ОсновныеНачисления.ВидРасчета
	|						ИЗ
	|							ВТ_ОсновныеНачисления КАК ОсновныеНачисления))
	|				И ВЫБОР
	|					КОГДА ВидРасчета.БазовыйПериодПрошлыйМесяц
	|						ТОГДА (Сотрудник, НАЧАЛОПЕРИОДА(БазовыйПериодНачало, МЕСЯЦ)) В
	|								(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|									ОсновныеНачисления.Сотрудник,
	|									ОсновныеНачисления.ПериодДействия
	|								ИЗ
	|									ВТ_ОсновныеНачисления КАК ОсновныеНачисления)
	|					ИНАЧЕ (Сотрудник, ПериодДействия) В
	|							(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|								ОсновныеНачисления.Сотрудник,
	|								ОсновныеНачисления.ПериодДействия
	|							ИЗ
	|								ВТ_ОсновныеНачисления КАК ОсновныеНачисления)
	|				КОНЕЦ) КАК ЗависимыеНачисления
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ПериодДействияПриведенный
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЗависимыеНачисления.Сотрудник КАК Сотрудник,
	|	ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.Сторнировать > 0
	|			ТОГДА ЗависимыеНачисления.ПериодДействияНачало
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействияНачалоНеСторно
	|	КОНЕЦ КАК ПериодДействияНачало,
	|	ВЫБОР
	|		КОГДА ЗависимыеНачисления.Сторнировать > 0
	|			ТОГДА ЗависимыеНачисления.ПериодДействияКонец
	|		ИНАЧЕ ЗависимыеНачисления.ПериодДействияКонецНеСторно
	|	КОНЕЦ КАК ПериодДействияКонец,
	|	ЗависимыеНачисления.Сторнировать,
	|	ЗависимыеНачисления.Начислить КАК Начислить,
	|	ЗависимыеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|	ЗависимыеНачисления.ПериодРегистрацииЗависимогоНачисления,
	|	ЗависимыеНачисления.ПериодДействия,
	|	ЗависимыеНачисления.БазовыйПериодНачало,
	|	ЗависимыеНачисления.БазовыйПериодКонец,
	|	ЗависимыеНачисления.Сторно,
	|	ЗависимыеНачисления.ФизЛицо,
	|	ЗависимыеНачисления.Организация,
	|	ЗависимыеНачисления.ГрафикРаботы,
	|	ЗависимыеНачисления.ГрафикРаботыНорма,
	|	ЗависимыеНачисления.ВидУчетаВремени,
	|	ЗависимыеНачисления.Показатель1,
	|	ЗависимыеНачисления.Показатель2,
	|	ЗависимыеНачисления.Показатель3,
	|	ЗависимыеНачисления.Показатель4,
	|	ЗависимыеНачисления.Показатель5,
	|	ЗависимыеНачисления.Показатель6,
	|	ЗависимыеНачисления.ПодразделениеОрганизации,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ЗависимыеНачисления.ДатаНачалаСобытия,
	|	ЗависимыеНачисления.ОбособленноеПодразделение,
	|	ЗависимыеНачисления.Авторасчет,
	|	ЗависимыеНачисления.СторнируемыйДокумент КАК СторнируемыйДокумент,
	|	ЗависимыеНачисления.Результат,
	|	ЗависимыеНачисления.ОплаченоДнейЧасов,
	|	ЗависимыеНачисления.ОтработаноДней,
	|	ЗависимыеНачисления.ОтработаноЧасов,
	|	ЗависимыеНачисления.ОтработаноДнейПоПятидневке,
	|	ЗависимыеНачисления.ОтработаноЧасовПоПятидневке,
	|	ЗависимыеНачисления.НормаДней,
	|	ЗависимыеНачисления.НормаЧасов,
	|	ЗависимыеНачисления.НормаДнейПоПятидневке,
	|	ЗависимыеНачисления.НормаЧасовПоПятидневке
	|ПОМЕСТИТЬ ВТ_Начисления
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|		ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|		ЗависимыеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|		ЗависимыеНачисления.ПериодДействияКонец КАК ПериодДействияКонец,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.ДатаНачала
	|				ТОГДА ЗависимыеНачисления.ДатаНачала
	|			ИНАЧЕ ОсновныеНачисления.ПериодДействияНачало
	|		КОНЕЦ КАК ПериодДействияНачалоНеСторно,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.ДатаОкончания
	|				ТОГДА ЗависимыеНачисления.ДатаОкончания
	|			ИНАЧЕ ОсновныеНачисления.ПериодДействияКонец
	|		КОНЕЦ КАК ПериодДействияКонецНеСторно,
	|		СУММА(ВЫБОР
	|				КОГДА ОсновныеНачисления.Сторно
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК Сторнировать,
	|		СУММА(ВЫБОР
	|				КОГДА (НЕ ОсновныеНачисления.Сторно)
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ) КАК Начислить,
	|		ОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|		ОсновныеНачисления.ПериодДействия КАК ПериодДействия,
	|		ЗависимыеНачисления.ПериодРегистрации КАК ПериодРегистрацииЗависимогоНачисления,
	|		ЗависимыеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|		ЗависимыеНачисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|		ЗависимыеНачисления.Сторно КАК Сторно,
	|		ЗависимыеНачисления.ФизЛицо КАК ФизЛицо,
	|		ЗависимыеНачисления.Организация КАК Организация,
	|		ЗависимыеНачисления.ГрафикРаботы КАК ГрафикРаботы,
	|		ЗависимыеНачисления.ГрафикРаботыНорма КАК ГрафикРаботыНорма,
	|		ЗависимыеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|		ЗависимыеНачисления.Показатель1 КАК Показатель1,
	|		ЗависимыеНачисления.Показатель2 КАК Показатель2,
	|		ЗависимыеНачисления.Показатель3 КАК Показатель3,
	|		ЗависимыеНачисления.Показатель4 КАК Показатель4,
	|		ЗависимыеНачисления.Показатель5 КАК Показатель5,
	|		ЗависимыеНачисления.Показатель6 КАК Показатель6,
	|		ЗависимыеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|		ЗависимыеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|		ЗависимыеНачисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		ЗависимыеНачисления.Авторасчет КАК Авторасчет,
	|		ЗависимыеНачисления.Регистратор КАК СторнируемыйДокумент,
	|		ЗависимыеНачисления.Результат КАК Результат,
	|		ЗависимыеНачисления.ОплаченоДнейЧасов КАК ОплаченоДнейЧасов,
	|		ЗависимыеНачисления.ОтработаноДней КАК ОтработаноДней,
	|		ЗависимыеНачисления.ОтработаноЧасов КАК ОтработаноЧасов,
	|		ЗависимыеНачисления.ОтработаноДнейПоПятидневке КАК ОтработаноДнейПоПятидневке,
	|		ЗависимыеНачисления.ОтработаноЧасовПоПятидневке КАК ОтработаноЧасовПоПятидневке,
	|		ЗависимыеНачисления.НормаДней КАК НормаДней,
	|		ЗависимыеНачисления.НормаЧасов КАК НормаЧасов,
	|		ЗависимыеНачисления.НормаДнейПоПятидневке КАК НормаДнейПоПятидневке,
	|		ЗависимыеНачисления.НормаЧасовПоПятидневке КАК НормаЧасовПоПятидневке
	|	ИЗ
	|		ВТ_ОсновныеНачисления КАК ОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ ВТ_ЗависимыеНачисления КАК ЗависимыеНачисления
	|			ПО ОсновныеНачисления.Сотрудник = ЗависимыеНачисления.Сотрудник
	|				И ОсновныеНачисления.ПериодДействия = ЗависимыеНачисления.ПериодДействияПриведенный
	|				И ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.ДатаОкончания
	|				И ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.ДатаНачала
	|				И (ЗависимыеНачисления.ПериодРегистрации < ОсновныеНачисления.ПериодРегистрации)
	|				И ((НЕ ЗависимыеНачисления.Сторно))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК Ведущие
	|			ПО (Ведущие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|				И (Ведущие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ОсновныеНачисленияОрганизаций.ВытесняющиеВидыРасчета КАК Вытесняющие
	|			ПО (Вытесняющие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|				И (Вытесняющие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|	ГДЕ
	|		((НЕ Ведущие.ВидРасчета ЕСТЬ NULL )
	|				ИЛИ (НЕ Вытесняющие.ВидРасчета ЕСТЬ NULL ))
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ЗависимыеНачисления.ПериодДействияНачало,
	|		ЗависимыеНачисления.ВидРасчета,
	|		ЗависимыеНачисления.ПериодДействияКонец,
	|		ОсновныеНачисления.Сотрудник,
	|		ОсновныеНачисления.ПериодРегистрации,
	|		ОсновныеНачисления.ПериодДействия,
	|		ЗависимыеНачисления.ПериодРегистрации,
	|		ЗависимыеНачисления.БазовыйПериодНачало,
	|		ЗависимыеНачисления.БазовыйПериодКонец,
	|		ЗависимыеНачисления.Сторно,
	|		ЗависимыеНачисления.ФизЛицо,
	|		ЗависимыеНачисления.Организация,
	|		ЗависимыеНачисления.ГрафикРаботы,
	|		ЗависимыеНачисления.ГрафикРаботыНорма,
	|		ЗависимыеНачисления.ВидУчетаВремени,
	|		ЗависимыеНачисления.ПодразделениеОрганизации,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|		ЗависимыеНачисления.ДатаНачалаСобытия,
	|		ЗависимыеНачисления.ОбособленноеПодразделение,
	|		ЗависимыеНачисления.Авторасчет,
	|		ЗависимыеНачисления.Регистратор,
	|		ЗависимыеНачисления.Показатель1,
	|		ЗависимыеНачисления.Показатель2,
	|		ЗависимыеНачисления.Показатель3,
	|		ЗависимыеНачисления.Показатель4,
	|		ЗависимыеНачисления.Показатель5,
	|		ЗависимыеНачисления.Показатель6,
	|		ЗависимыеНачисления.Результат,
	|		ЗависимыеНачисления.ОплаченоДнейЧасов,
	|		ЗависимыеНачисления.ОтработаноДней,
	|		ЗависимыеНачисления.ОтработаноЧасов,
	|		ЗависимыеНачисления.ОтработаноДнейПоПятидневке,
	|		ЗависимыеНачисления.ОтработаноЧасовПоПятидневке,
	|		ЗависимыеНачисления.НормаДней,
	|		ЗависимыеНачисления.НормаЧасов,
	|		ЗависимыеНачисления.НормаДнейПоПятидневке,
	|		ЗависимыеНачисления.НормаЧасовПоПятидневке,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.ДатаНачала
	|				ТОГДА ЗависимыеНачисления.ДатаНачала
	|			ИНАЧЕ ОсновныеНачисления.ПериодДействияНачало
	|		КОНЕЦ,
	|		ВЫБОР
	|			КОГДА ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.ДатаОкончания
	|				ТОГДА ЗависимыеНачисления.ДатаОкончания
	|			ИНАЧЕ ОсновныеНачисления.ПериодДействияКонец
	|		КОНЕЦ) КАК ЗависимыеНачисления
	|ГДЕ
	|	(НЕ(ЗависимыеНачисления.Сторнировать > 0
	|				И ЗависимыеНачисления.Начислить > 0))
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодРегистрации,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец,
	|	СторнируемыйДокумент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.ВидРасчета КАК ВидРасчета,
	|	ОсновныеНачисления.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.Сторнировать,
	|	ОсновныеНачисления.Начислить КАК Начислить,
	|	ОсновныеНачисления.ПериодРегистрации,
	|	ОсновныеНачисления.ПериодДействия,
	|	ОсновныеНачисления.БазовыйПериодНачало,
	|	ОсновныеНачисления.БазовыйПериодКонец,
	|	ОсновныеНачисления.Сторно,
	|	ОсновныеНачисления.ФизЛицо,
	|	ОсновныеНачисления.Организация,
	|	ОсновныеНачисления.ГрафикРаботы,
	|	ОсновныеНачисления.ГрафикРаботыНорма,
	|	ОсновныеНачисления.ВидУчетаВремени,
	|	ОсновныеНачисления.Показатель1,
	|	ОсновныеНачисления.Показатель2,
	|	ОсновныеНачисления.Показатель3,
	|	ОсновныеНачисления.Показатель4,
	|	ОсновныеНачисления.Показатель5,
	|	ОсновныеНачисления.Показатель6,
	|	ОсновныеНачисления.ПодразделениеОрганизации,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ОсновныеНачисления.ДатаНачалаСобытия,
	|	ОсновныеНачисления.ОбособленноеПодразделение,
	|	ОсновныеНачисления.Авторасчет,
	|	ОсновныеНачисления.СторнируемыйДокумент,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Результат,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОплаченоДнейЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОплаченоДнейЧасов), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОплаченоДнейЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноДней - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДней), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноДней,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноЧасов - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасов), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноДнейПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноДнейПоПятидневке,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.ОтработаноЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.ОтработаноЧасовПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтработаноЧасовПоПятидневке,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаДней - ЕСТЬNULL(СУММА(СторноНачисления.НормаДней), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаДней,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаЧасов - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасов), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаЧасов,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаДнейПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаДнейПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаДнейПоПятидневке,
	|	ВЫБОР
	|		КОГДА ОсновныеНачисления.Сторнировать > 0
	|			ТОГДА -ОсновныеНачисления.НормаЧасовПоПятидневке - ЕСТЬNULL(СУММА(СторноНачисления.НормаЧасовПоПятидневке), 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НормаЧасовПоПятидневке
	|ИЗ
	|	ВТ_Начисления КАК ОсновныеНачисления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК СторноНачисления
	|		ПО ОсновныеНачисления.Сотрудник = СторноНачисления.Сотрудник
	|			И ОсновныеНачисления.ВидРасчета = СторноНачисления.ВидРасчета
	|			И (СторноНачисления.ПериодДействияНачало МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
	|			И (СторноНачисления.ПериодРегистрации > ОсновныеНачисления.ПериодРегистрацииЗависимогоНачисления)
	|			И (СторноНачисления.ПериодРегистрации <= ОсновныеНачисления.ПериодРегистрации)
	|			И (СторноНачисления.СторнируемыйДокумент = ОсновныеНачисления.СторнируемыйДокумент)
	|			И (ОсновныеНачисления.Сторнировать > 0)
	|			И (НАЧАЛОПЕРИОДА(СторноНачисления.ПериодДействияКонец, ДЕНЬ) МЕЖДУ ОсновныеНачисления.ПериодДействияНачало И ОсновныеНачисления.ПериодДействияКонец)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОсновныеНачисления.Сотрудник,
	|	ОсновныеНачисления.ВидРасчета,
	|	ОсновныеНачисления.ПериодДействияНачало,
	|	ОсновныеНачисления.ПериодДействияКонец,
	|	ОсновныеНачисления.ПериодРегистрации,
	|	ОсновныеНачисления.ПериодДействия,
	|	ОсновныеНачисления.БазовыйПериодНачало,
	|	ОсновныеНачисления.БазовыйПериодКонец,
	|	ОсновныеНачисления.Сторно,
	|	ОсновныеНачисления.ФизЛицо,
	|	ОсновныеНачисления.Организация,
	|	ОсновныеНачисления.ГрафикРаботы,
	|	ОсновныеНачисления.ГрафикРаботыНорма,
	|	ОсновныеНачисления.ВидУчетаВремени,
	|	ОсновныеНачисления.ПодразделениеОрганизации,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ОсновныеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ОсновныеНачисления.ДатаНачалаСобытия,
	|	ОсновныеНачисления.ОбособленноеПодразделение,
	|	ОсновныеНачисления.Авторасчет,
	|	ОсновныеНачисления.СторнируемыйДокумент,
	|	ОсновныеНачисления.Сторнировать,
	|	ОсновныеНачисления.Начислить,
	|	ОсновныеНачисления.Показатель1,
	|	ОсновныеНачисления.Показатель2,
	|	ОсновныеНачисления.Показатель3,
	|	ОсновныеНачисления.Показатель4,
	|	ОсновныеНачисления.Показатель5,
	|	ОсновныеНачисления.Показатель6,
	|	ОсновныеНачисления.Результат,
	|	ОсновныеНачисления.НормаДней,
	|	ОсновныеНачисления.НормаЧасов,
	|	ОсновныеНачисления.НормаДнейПоПятидневке,
	|	ОсновныеНачисления.ОтработаноДней,
	|	ОсновныеНачисления.ОтработаноЧасов,
	|	ОсновныеНачисления.ОтработаноДнейПоПятидневке,
	|	ОсновныеНачисления.ОплаченоДнейЧасов,
	|	ОсновныеНачисления.ОтработаноЧасовПоПятидневке,
	|	ОсновныеНачисления.НормаЧасовПоПятидневке
	|
	|ИМЕЮЩИЕ
	|	(ВЫБОР
	|				КОГДА ОсновныеНачисления.Сторнировать > 0
	|					ТОГДА -ОсновныеНачисления.Результат - ЕСТЬNULL(СУММА(СторноНачисления.Результат), 0)
	|				ИНАЧЕ 0
	|			КОНЕЦ <> 0
	|			И ОсновныеНачисления.Сторнировать > 0
	|		ИЛИ ОсновныеНачисления.Начислить > 0)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Начислить УБЫВ,
	|	ВидРасчета,
	|	ПериодДействияНачало
	|АВТОУПОРЯДОЧИВАНИЕ";*/
			//Запрос.Текст = ТекстЗапроса;
			return null;
		}
		// ПолучитьТаблицуЗависимыхНачисленийОсновные()
		// Функция получает по таблице начислений таблицу зависимых начислений
		//
		// Параметры
		//  ТаблицаНачислений  – <Таблица значений> – таблица начислений по которым необходимо собрать зависимые начисления
		//
		// Возвращаемое заначение - – <Таблица значений>

		public object ПолучитьТаблицуЗависимыхНачисленийДополнительные(/*ТаблицаНачислений*/)
		{
			if(true/*ТаблицаНачислений.Количество() = 0*/)
			{
			}
			//МенеджерВТ = Новый МенеджерВременныхТаблиц;
			//Запрос = Новый Запрос;
			//Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
			//Запрос.УстановитьПараметр("ТаблицаНачислений", ТаблицаНачислений);
			/*ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ТаблицаНачислений.Сотрудник КАК Сотрудник,
	|	ТаблицаНачислений.ВидРасчета КАК ВидРасчета,
	|	ТаблицаНачислений.ПериодРегистрации КАК ПериодРегистрации,
	|	ТаблицаНачислений.ПериодДействияНачало КАК ПериодДействияНачало,
	|	ТаблицаНачислений.ПериодДействияКонец КАК ПериодДействияКонец
	|ПОМЕСТИТЬ ВТ_ОсновныеНачисления
	|ИЗ
	|	&ТаблицаНачислений КАК ТаблицаНачислений
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Сотрудник,
	|	ВидРасчета,
	|	ПериодРегистрации,
	|	ПериодДействияНачало,
	|	ПериодДействияКонец
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДопНачисления.Сотрудник,
	|	ДопНачисления.ВидРасчета,
	|	ДопНачисления.ПериодРегистрации,
	|	ДопНачисления.БазовыйПериодНачало,
	|	ДопНачисления.БазовыйПериодКонец,
	|	ДопНачисления.Сторно,
	|	ДопНачисления.ФизЛицо,
	|	ДопНачисления.Организация,
	|	ДопНачисления.ГрафикРаботы,
	|	ДопНачисления.ВидУчетаВремени,
	|	ДопНачисления.Показатель1,
	|	ДопНачисления.Показатель2,
	|	ДопНачисления.Показатель3,
	|	ДопНачисления.Показатель4,
	|	ДопНачисления.Показатель5,
	|	ДопНачисления.Показатель6,
	|	ДопНачисления.ПодразделениеОрганизации,
	|	ДопНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДопНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ДопНачисления.ДатаНачалаСобытия,
	|	ДопНачисления.ОбособленноеПодразделение,
	|	ДопНачисления.ЧислоМесяцев,
	|	ДопНачисления.СторнируемыйДокумент,
	|	СУММА(ДопНачисления.Результат) КАК Результат
	|ИЗ
	|	(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|		ОсновныеНачисления.Сотрудник КАК Сотрудник,
	|		ЗависимыеНачисления.ВидРасчета КАК ВидРасчета,
	|		ОсновныеНачисления.ПериодРегистрации КАК ПериодРегистрации,
	|		ЗависимыеНачисления.БазовыйПериодНачало КАК БазовыйПериодНачало,
	|		ЗависимыеНачисления.БазовыйПериодКонец КАК БазовыйПериодКонец,
	|		ЗависимыеНачисления.Сторно КАК Сторно,
	|		ЗависимыеНачисления.ФизЛицо КАК ФизЛицо,
	|		ЗависимыеНачисления.Организация КАК Организация,
	|		ЗависимыеНачисления.ГрафикРаботы КАК ГрафикРаботы,
	|		ЗависимыеНачисления.ВидУчетаВремени КАК ВидУчетаВремени,
	|		ЗависимыеНачисления.Показатель1 КАК Показатель1,
	|		ЗависимыеНачисления.Показатель2 КАК Показатель2,
	|		ЗависимыеНачисления.Показатель3 КАК Показатель3,
	|		ЗависимыеНачисления.Показатель4 КАК Показатель4,
	|		ЗависимыеНачисления.Показатель5 КАК Показатель5,
	|		ЗависимыеНачисления.Показатель6 КАК Показатель6,
	|		ЗависимыеНачисления.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаНачало КАК ПериодРасчетаСреднегоЗаработкаНачало,
	|		ЗависимыеНачисления.ПериодРасчетаСреднегоЗаработкаОкончание КАК ПериодРасчетаСреднегоЗаработкаОкончание,
	|		ЗависимыеНачисления.ДатаНачалаСобытия КАК ДатаНачалаСобытия,
	|		ЗависимыеНачисления.ОбособленноеПодразделение КАК ОбособленноеПодразделение,
	|		ЗависимыеНачисления.ЧислоМесяцев КАК ЧислоМесяцев,
	|		ЗависимыеНачисления.Регистратор КАК СторнируемыйДокумент,
	|		-ЗависимыеНачисления.Результат КАК Результат
	|	ИЗ
	|		ВТ_ОсновныеНачисления КАК ОсновныеНачисления
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ЗависимыеНачисления
	|			ПО ОсновныеНачисления.Сотрудник = ЗависимыеНачисления.Сотрудник
	|				И (НАЧАЛОПЕРИОДА(ЗависимыеНачисления.ПериодРегистрации, МЕСЯЦ) < ОсновныеНачисления.ПериодРегистрации)
	|				И ОсновныеНачисления.ПериодДействияНачало < ЗависимыеНачисления.БазовыйПериодКонец
	|				И ОсновныеНачисления.ПериодДействияКонец > ЗависимыеНачисления.БазовыйПериодНачало
	|				И ((НЕ ЗависимыеНачисления.Сторно))
	|			ЛЕВОЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций.ВедущиеВидыРасчета КАК Ведущие
	|			ПО (Ведущие.Ссылка = ЗависимыеНачисления.ВидРасчета)
	|				И (Ведущие.ВидРасчета = ОсновныеНачисления.ВидРасчета)
	|	ГДЕ
	|		(НЕ Ведущие.ВидРасчета ЕСТЬ NULL )) КАК ДопНачисления
	|
	|СГРУППИРОВАТЬ ПО
	|	ДопНачисления.Сотрудник,
	|	ДопНачисления.ВидРасчета,
	|	ДопНачисления.ПериодРегистрации,
	|	ДопНачисления.БазовыйПериодНачало,
	|	ДопНачисления.БазовыйПериодКонец,
	|	ДопНачисления.Сторно,
	|	ДопНачисления.ФизЛицо,
	|	ДопНачисления.Организация,
	|	ДопНачисления.ГрафикРаботы,
	|	ДопНачисления.ВидУчетаВремени,
	|	ДопНачисления.ПодразделениеОрганизации,
	|	ДопНачисления.ПериодРасчетаСреднегоЗаработкаНачало,
	|	ДопНачисления.ПериодРасчетаСреднегоЗаработкаОкончание,
	|	ДопНачисления.ДатаНачалаСобытия,
	|	ДопНачисления.ОбособленноеПодразделение,
	|	ДопНачисления.СторнируемыйДокумент,
	|	ДопНачисления.Показатель1,
	|	ДопНачисления.Показатель2,
	|	ДопНачисления.Показатель3,
	|	ДопНачисления.Показатель4,
	|	ДопНачисления.Показатель5,
	|	ДопНачисления.Показатель6,
	|	ДопНачисления.ЧислоМесяцев";*/
			//Запрос.Текст = ТекстЗапроса;
			return null;
		}
		// ПолучитьТаблицуЗависимыхНачисленийДополнительные()
		// Удаляем записи перерасчетов как по самому документу, так и по исходному документу,
		// если переданный документ является исправлением
		//
		// Параметры
		//  ДокументСсылка - ссылка на документ, для которого требуется удалить записи таблиц перерасчетов
		//

		public void УдалитьСведенияОПерерасчетеДокумента(/*ДокументСсылка, ТолькоПоИсправленнымДокументам = Ложь*/)
		{
			//ПерерасчетыПоДокументам = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
			//ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			//ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			//ДопПерерасчетыПоДокументам = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
			//ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			//ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			//СредПерерасчетыПоДокументам = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
			//СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
			//СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
			//МассивИсправленныхДокументов = Новый Массив;
			//ТипРегистратора = ТипЗнч(ДокументСсылка);
			if(true/*ТипРегистратора <> Тип("ДокументСсылка.ОтпускПоУходуЗаРебенком")*/)
			{
				/*// проверим, является ли переданный документ чьим-нибудь исправлением
*/
				//Запрос = Новый Запрос;
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент КАК ОбъектПерерасчета
		|ИЗ
		|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.Ссылка = &Исправление";*/
				//Запрос.УстановитьПараметр("Исправление", ДокументСсылка);
				//Выборка = Запрос.Выполнить().Выбрать();
				//Выборка.Следующий();
				//ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
				if(true/*ЗначениеЗаполнено(ОбъектПерерасчета)*/)
				{
					//ПерерасчетыФизлицПоДокументам = РегистрыРасчета.ОсновныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетОсновныхНачислений.СоздатьНаборЗаписей();
					//ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
					//ПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
					//ДопПерерасчетыФизлицПоДокументам = РегистрыРасчета.ДополнительныеНачисленияРаботниковОрганизаций.Перерасчеты.ПерерасчетДополнительныхНачислений.СоздатьНаборЗаписей();
					//ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
					//ДопПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
					//СредПерерасчетыФизлицПоДокументам = РегистрыРасчета.РасчетСреднегоЗаработка.Перерасчеты.ПерерасчетСреднегоЗаработка.СоздатьНаборЗаписей();
					//СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.Использование = Истина;
					//СредПерерасчетыФизлицПоДокументам.Отбор.ОбъектПерерасчета.ВидСравнения = ВидСравнения.Равно;
					/*// выберем исправленных физлиц - соответствующие им записи перерасчетов надо будет также удалить
*/
					//ЗапросФизлиц = Новый Запрос;
					/*ЗапросФизлиц.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ДополнительныеНачисленияРаботниковОрганизаций.ФизЛицо
			|ИЗ
			|	РегистрРасчета.ДополнительныеНачисленияРаботниковОрганизаций КАК ДополнительныеНачисленияРаботниковОрганизаций
			|ГДЕ
			|	ДополнительныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
			|	И ДополнительныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент = &ИсходныйДокумент
			|	И ДополнительныеНачисленияРаботниковОрганизаций.Сторно
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ОсновныеНачисленияРаботниковОрганизаций.ФизЛицо
			|ИЗ
			|	РегистрРасчета.ОсновныеНачисленияРаботниковОрганизаций КАК ОсновныеНачисленияРаботниковОрганизаций
			|ГДЕ
			|	ОсновныеНачисленияРаботниковОрганизаций.Регистратор = &Регистратор
			|	И ОсновныеНачисленияРаботниковОрганизаций.СторнируемыйДокумент = &ИсходныйДокумент
			|	И ОсновныеНачисленияРаботниковОрганизаций.Сторно
			|
			|ОБЪЕДИНИТЬ
			|
			|ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	РасчетСреднегоЗаработка.ФизЛицо
			|ИЗ
			|	РегистрРасчета.РасчетСреднегоЗаработка КАК РасчетСреднегоЗаработка
			|ГДЕ
			|	РасчетСреднегоЗаработка.Регистратор = &Регистратор";*/
					//ЗапросФизлиц.УстановитьПараметр("Регистратор", ДокументСсылка);
					//ЗапросФизлиц.УстановитьПараметр("ИсходныйДокумент", ОбъектПерерасчета);
					//МассивФизлиц = ЗапросФизлиц.Выполнить().Выгрузить().ВыгрузитьКолонку("ФизЛицо");
					/*// выявим все исправленные документы
*/
					while(true/*ЗначениеЗаполнено(ОбъектПерерасчета)*/)
					{
						//МассивИсправленныхДокументов.Добавить(ОбъектПерерасчета);
						//Запрос.УстановитьПараметр("Исправление", ОбъектПерерасчета);
						//Выборка = Запрос.Выполнить().Выбрать();
						//Выборка.Следующий();
						//ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
					}
					//;;
				}
			}
			if(true/*ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора)*/)
			{
				if(true/*Не ТолькоПоИсправленнымДокументам*/)
				{
					/*// удалим все записи перерасчетов по самому документу
*/
					//ПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
					//ПерерасчетыПоДокументам.Записать();
				}
				/*// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
*/
				/*// в переданном документе сотрудникам
*/
			}
			if(true/*ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора)*/)
			{
				if(true/*Не ТолькоПоИсправленнымДокументам*/)
				{
					/*// удалим все записи перерасчетов по самому документу
*/
					//ДопПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
					//ДопПерерасчетыПоДокументам.Записать();
				}
				/*// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
*/
				/*// в переданном документе сотрудникам
*/
			}
			if(true/*СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.ТипЗначения.СодержитТип(ТипРегистратора)*/)
			{
				if(true/*Не ТолькоПоИсправленнымДокументам*/)
				{
					/*// удалим все записи перерасчетов по самому документу
*/
					//СредПерерасчетыПоДокументам.Отбор.ОбъектПерерасчета.Значение = ДокументСсылка;
					//СредПерерасчетыПоДокументам.Записать();
				}
				/*// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
*/
				/*// в переданном документе сотрудникам
*/
			}
		}
		// Удаляем записи перезаполнений как по самому документу, так и по исходному документу,
		// если переданный документ является исправлением
		//
		// Параметры
		//  ДокументСсылка - ссылка на документ, для которого требуется удалить записи рег-ра перезаполнений
		//

		public void УдалитьСведенияОПерезаполненииДокумента(/*ДокументСсылка, СотрудникиДокумента = Неопределено, ТолькоПоИсправленнымДокументам = Ложь*/)
		{
			//НаборПерезаполнения = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
			//НаборПерезаполнения.Отбор.ОбъектЗаполнения.Использование = Истина;
			//НаборПерезаполнения.Отбор.ОбъектЗаполнения.ВидСравнения = ВидСравнения.Равно;
			if(true/*НаборПерезаполнения.Отбор.ОбъектЗаполнения.ТипЗначения.СодержитТип(ТипЗнч(ДокументСсылка))*/)
			{
				//НаборСотрудниковПерезаполнения = РегистрыСведений.ЗаполнениеПлановыхНачислений.СоздатьНаборЗаписей();
				//НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.Использование = Истина;
				//НаборСотрудниковПерезаполнения.Отбор.ОбъектЗаполнения.ВидСравнения = ВидСравнения.Равно;
				//МассивИсправленныхДокументов = Новый Массив;
				//ДополнительноеУсловие = ?(ДокументСсылка.Метаданные().Реквизиты.ПерерассчитываемыйДокумент.Тип.СодержитТип(Тип("ДокументСсылка.ПереносДанных")), " И (НЕ ДокументыИсправления.ПерерассчитываемыйДокумент ССЫЛКА Документ.ПереносДанных)", "");
				/*// проверим, является ли переданный документ чьим-нибудь исправлением
*/
				//Запрос = Новый Запрос;
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДокументыИсправления.ПерерассчитываемыйДокумент КАК ОбъектПерерасчета
		|ИЗ
		|	Документ." + ДокументСсылка.Метаданные().Имя + " КАК ДокументыИсправления
		|ГДЕ
		|	ДокументыИсправления.Ссылка = &Исправление" + ДополнительноеУсловие + "";*/
				//Запрос.УстановитьПараметр("Исправление", ДокументСсылка);
				//Выборка = Запрос.Выполнить().Выбрать();
				//Выборка.Следующий();
				//ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
				if(true/*ЗначениеЗаполнено(ОбъектПерерасчета)*/)
				{
					/*// выберем исправленных сотрудников - соответствующие им записи перерасчетов надо будет также удалить
*/
					//ЗапросСотрудников = Новый Запрос;
					/*ЗапросСотрудников.Текст =
			"ВЫБРАТЬ РАЗЛИЧНЫЕ
			|	ЗаполнениеПлановыхНачислений.Сотрудник
			|ИЗ
			|	РегистрСведений.ЗаполнениеПлановыхНачислений КАК ЗаполнениеПлановыхНачислений
			|ГДЕ
			|	ЗаполнениеПлановыхНачислений.ОбъектЗаполнения = &ОбъектЗаполнения
			|	И (&ПоВсемСотрудникам
			|			ИЛИ ЗаполнениеПлановыхНачислений.Сотрудник В (&Сотрудники))";*/
					//ЗапросСотрудников.УстановитьПараметр("ОбъектЗаполнения", ДокументСсылка);
					//ЗапросСотрудников.УстановитьПараметр("Сотрудники", СотрудникиДокумента);
					//ЗапросСотрудников.УстановитьПараметр("ПоВсемСотрудникам", СотрудникиДокумента = Неопределено);
					//МассивСотрудников = ЗапросСотрудников.Выполнить().Выгрузить().ВыгрузитьКолонку("Сотрудник");
					/*// выявим все исправленные документы
*/
					while(true/*ЗначениеЗаполнено(ОбъектПерерасчета)*/)
					{
						//МассивИсправленныхДокументов.Добавить(ОбъектПерерасчета);
						//Запрос.УстановитьПараметр("Исправление", ОбъектПерерасчета);
						//Выборка = Запрос.Выполнить().Выбрать();
						//Выборка.Следующий();
						//ОбъектПерерасчета = Выборка.ОбъектПерерасчета;
					}
					//;;
				}
				if(true/*Не ТолькоПоИсправленнымДокументам*/)
				{
					if(true/*СотрудникиДокумента = Неопределено*/)
					{
						/*// удалим все записи перезаполнений по самому документу
*/
						//НаборПерезаполнения.Отбор.ОбъектЗаполнения.Значение = ДокументСсылка;
						//НаборПерезаполнения.Записать(Истина);
					}
				}
				/*// для цепочки исправленных документов удалим записи перерасчетов по исправленным 
*/
				/*// в переданном документе сотрудникам
*/
			}
		}

		public object ЭтоЧисло(/*Слово*/)
		{
			//Цифры = "1234567890";
			return null;
		}

		public object ПолучитьМассивРазделителей(/**/)
		{
			//МассивРазделителей = Новый Массив;
			//МассивРазделителей.Добавить(" ");
			//МассивРазделителей.Добавить(Символы.ВК);
			//МассивРазделителей.Добавить(Символы.ВТаб);
			//МассивРазделителей.Добавить(Символы.НПП);
			//МассивРазделителей.Добавить(Символы.ПС);
			//МассивРазделителей.Добавить(Символы.ПФ);
			//МассивРазделителей.Добавить(Символы.Таб);
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Формульные расчеты
		// Функция извлекает из участка формулы, где размещен вызов ОценитьПо(),
		// текст первого параметра для дальнейшей обработки
		//

		public object ПараметрФункцииОценитьПо(/*УчастокФормулыРасчета*/)
		{
			//ПараметрФункцииОценитьПо = "";
			//НачалоОценитьПо = Найти(ВРег(УчастокФормулыРасчета), "ОЦЕНИТЬПО");
			/*// выбираем посимвольно строку после открывающейся скобки и до запятой (разделителя параметров)
*/
			//СимволНачалаПараметра = "(";
			//СимволОкончанияПараметра = ",";
			//СобиратьСимволы = Ложь;
			return null;
		}
		// ПараметрФункцииОценитьПо

		public object ПолучитьТекстОценитьПо(/*ПараметрФункцииОценитьПо, Шкала, ПустаяШкала = Ложь*/)
		{
			/*ТекстЗапроса = 
	"ВЫБРАТЬ
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеС, 0) КАК ЗначениеС,
	|	ЕСТЬNULL(СоставШкалОценкиПоказателейРасчета.ЗначениеПо, 0) КАК ЗначениеПо,
	|	СоставШкалОценкиПоказателейРасчета.Размер
	|ИЗ
	|	РегистрСведений.СоставШкалОценкиПоказателейРасчета КАК СоставШкалОценкиПоказателейРасчета
	|ГДЕ
	|	СоставШкалОценкиПоказателейРасчета.ШкалаОценкиПоказателя = &ШкалаОценкиПоказателя
	|
	|УПОРЯДОЧИТЬ ПО
	|	СоставШкалОценкиПоказателейРасчета.НомерСтрокиШкалы";*/
			//Запрос = Новый Запрос;
			//Запрос.Текст = ТекстЗапроса;
			//Запрос.УстановитьПараметр("ШкалаОценкиПоказателя", Шкала);
			//Выборка = Запрос.Выполнить().Выбрать();
			//Текст = "";
			if(true/*Выборка.Количество() = 0*/)
			{
				//ПустаяШкала = Истина;
			}
			//ПроцентнаяШкала = Шкала.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная;
			//КоличествоОткрытыхСкобок = 0;
			while(true/*Выборка.Следующий()*/)
			{
				if(true/*КоличествоОткрытыхСкобок > 0*/)
				{
					//Текст = Текст + " , ";
				}
				//Текст = Текст + "?(" + ПараметрФункцииОценитьПо+ " >" + Формат(Выборка.ЗначениеС,"ЧРД=.; ЧН=0; ЧГ=0") + " И " + ПараметрФункцииОценитьПо + " <="  + Формат(Выборка.ЗначениеПо,"ЧРД=.; ЧН=0; ЧГ=0") + " ," + Формат(Выборка.Размер / ?(ПроцентнаяШкала, 100, 1),"ЧРД=.; ЧН=0; ЧГ=0");
				//КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок + 1;
			}
			/*;
	
	КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок - 1;*/
			if(true/*КоличествоОткрытыхСкобок >= 0 И Текст <> ""*/)
			{
				//Текст = Текст + ", 0";
			}
			while(true/*КоличествоОткрытыхСкобок > 0*/)
			{
				//Текст = Текст + ")";
				//КоличествоОткрытыхСкобок = КоличествоОткрытыхСкобок - 1;
			}
			return null;
		}
		//ПолучитьТекстОценитьПо

		public void СообщитьОбОшибке(/*ОбработкаКомментариев, ТекстСообщения, Отказ*/)
		{
			if(true/*ТипЗнч(ОбработкаКомментариев) = Тип("ОбработкаОбъект.СообщенияВыполняемыхДействий")*/)
			{
				//Отказ = Истина;
				//ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.Ошибка);
			}
		}

		public object ПроверкаИФормированиеФормулыРасчета(/*Отказ, Показатели, МассивРазделителей, ОператорыИФункцииОднойСтрокой, ОператорыИФункции, мПеременные, ОбработкаКомментариев, ТекстФормулы, мФормулаРасчета, мФормулаРасчетаПредставление*/)
		{
			if(true/*Найти(ТекстФормулы, ";") <> 0*/)
			{
				//ОбщегоНазначения.СообщитьОбОшибке("В формуле не допустимо использование символа "";""", Отказ);
				//Отказ = Истина;
			}
			//Показатели.Очистить();
			/*// установим начальные значения
*/
			//НовыйТекст								= "";
			//ДлинаСтроки								= СтрДлина(ТекстФормулы);
			//ДлинаСтрокиБезПробелов					= СтрДлина(СокрП(ТекстФормулы));
			//Слово									= "";
			//СловоСобрано							= Ложь;
			//КоличествоПоказателей					= 0;
			//КоличествоНеПредопределенныхПоказателей	= 0;
			//мФормулаРасчета							= "";
			//мФормулаРасчетаПредставление			= "";
			/*// переменные для проверки правельности ввода показателей
*/
			//БылоОценитьПО			= Ложь;
			//БылоОценитьПОВЦикле		= Ложь;
			//ОткрытыхСкобок			= 0;
			//ЗакрытыхСкобок			= 0;
			//КонечествоПарамОценитьПО= 0;
			//ПервыйСимвОценитьПО		= 1;
			//ПоследийСимвОценитьПО	= 1;
			//НомерНеШкальногоПоказателя= 0;
			//НеШкальныеПоказатели	= Новый СписокЗначений;
			//СсылкаПоказатели		= Неопределено;
			/*// Автоматически рассчитываемые показатели не хранятся в данных, 
*/
			/*// поэтому на них не распространяется ограничение (6 показателей)
*/
			//АвтоРассчитываемыеПоказатели = АвтоматическиРассчитываемыеПоказатели();
			/*// разбор слов
*/
			/*// проверим не является ли последний показатель шкалой оценки 
*/
			if(true/*Не БылоОценитьПО И НовыйТекст <> "" И СсылкаПоказатели <> Неопределено*/)
			{
				if(true/*СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная Или
			СсылкаПоказатели.ТипПоказателя = Перечисления.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая*/)
				{
					//СообщитьОбОшибке(ОбработкаКомментариев, "Показатель №" + КоличествоПоказателей +" не может быть шкалой оценки!", Отказ);
				}
			}
			if(true/*Не Отказ*/)
			{
				/*// проверка формулы на прочие непредвиденные ошибки
*/
				if(true/*ЗначениеЗаполнено(НовыйТекст)*/)
				{
				}
			}
			/*// проверим нужа ли подмена базовых показателей
*/
			//ДелатьПодменуПоказателей		= Ложь;
			//ЕстьПредопределенные			= Ложь;
			//ЕстьНеПредопределенные			= Ложь;
			//ЕстьНеПредопределенныеПослеПред	= Ложь;
			//СчПоказателей = Показатели.Количество()-1;
			while(true/*СчПоказателей >= 0*/)
			{
				//Предопределенный = Показатели[СчПоказателей].Значение.Предопределенный;
				if(true/*ЕстьПредопределенные И Не ЕстьНеПредопределенные*/)
				{
					//ЕстьНеПредопределенныеПослеПред = (ЕстьНеПредопределенныеПослеПред Или Не Предопределенный) И ЕстьПредопределенные;
				}
				//ЕстьПредопределенные = ЕстьПредопределенные Или Предопределенный;
				//ЕстьНеПредопределенные	= ЕстьНеПредопределенные Или Не Предопределенный;
				if(true/*ЕстьНеПредопределенныеПослеПред И Предопределенный*/)
				{
					/*// не все предопределенные показатели находятся в конце, нужно переносить их в конец и проверять не был ли изменён состав показателей
*/
					//ДелатьПодменуПоказателей = Истина;
				}
				//СчПоказателей = СчПоказателей - 1;
			}
			if(true/*ДелатьПодменуПоказателей*/)
			{
				/*// подменим номера базовым показателям
*/
				//НомераПредопределенныхПоказателей	= Новый Массив;
				//НомераПоказателей					= Новый Массив;
				//ЗаменяемНаПоказатель		= Показатели.Количество() + 1;
				//НомераПоказателейКоличество	= НомераПоказателей.Количество();
			}
			return null;
		}
		//ПроверкаИФормированиеФормулыРасчета

		public object ПолучитьHTLMКодФормулыРасчета(/*ФормулаРасчета, Показатели, Режим, ВыводитьИдентификатор = Ложь*/)
		{
			//Числа = "0123456789";
			//ОператорыИФункции				=  ".,+,-,/,*,ЦЕЛ,INT,ОКР,ROUND,МАКС,MAX,МИН,MIN,?,=,<,>,<=,>=,ОЦЕНИТЬПО,(,),И,ИЛИ,НЕ,OR,AND,NOT";
			//ОператорыИФункцииОднойСтрокой	=  ".,+,-,/,*,?,=,<,>,(,)";
			//МассивРазделителей = Новый Массив;
			//МассивРазделителей.Добавить(" ");
			//МассивРазделителей.Добавить(Символы.ВК);
			//МассивРазделителей.Добавить(Символы.ВТаб);
			//МассивРазделителей.Добавить(Символы.НПП);
			//МассивРазделителей.Добавить(Символы.ПС);
			//МассивРазделителей.Добавить(Символы.ПФ);
			//МассивРазделителей.Добавить(Символы.Таб);
			//СловоСобрано		= Ложь;
			//НайденПоказатель	= Ложь;
			//Слово = "";
			//ДлинаСтроки					= СтрДлина(ФормулаРасчета);
			//НовыйHTMLКодФормулыРасчета	= "";
			/*// разбор слов
*/
			//НомерАнализируемогоСимвола = 1;
			while(true/*НомерАнализируемогоСимвола <= ДлинаСтроки*/)
			{
				//Символ = Сред(ФормулаРасчета, НомерАнализируемогоСимвола, 1);
				if(true/*Символ = "." И Слово = "ИсходныеДанные" и Сред(ФормулаРасчета, НомерАнализируемогоСимвола+1, 10) = "Показатель"*/)
				{
					//НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 10;
					//НомерПоказателя = "";
					//ШагВнутриЦикла = 0;
					//ПродолжитьЦикл = Истина;
					while(true/*ПродолжитьЦикл*/)
					{
						//НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 1;
						//СимволДляСравненияСЧислом = Сред(ФормулаРасчета, НомерАнализируемогоСимвола, 1);
						if(true/*Найти(Числа, СимволДляСравненияСЧислом) <> 0*/)
						{
							//НомерПоказателя = НомерПоказателя + СимволДляСравненияСЧислом;
							//ПродолжитьЦикл  = (НомерАнализируемогоСимвола <= ДлинаСтроки);
						}
					}
					if(true/*Режим = "Текст"*/)
					{
						if(true/*Показатели.Количество() >= Число(НомерПоказателя)*/)
						{
							if(true/*ВыводитьИдентификатор*/)
							{
								//ПоказательДляФормулы = Строка(Показатели[Число(НомерПоказателя) - 1].Показатель.Идентификатор);
							}
						}
					}
					//НовыйHTMLКодФормулыРасчета = НовыйHTMLКодФормулыРасчета + ПоказательДляФормулы;
					//НайденПоказатель = Истина;
					//Слово = "";
				}
				if(true/*СловоСобрано И Не НайденПоказатель*/)
				{
					/*//	ФормулаРасчета	= СтрЗаменить(ФормулаРасчета, "ИсходныеДанные.Показатель"+Показатель.НомерСтроки, ПоказательДляФормулы);
*/
					//НовыйHTMLКодФормулыРасчета = НовыйHTMLКодФормулыРасчета + Слово;
					//СловоСобрано = Ложь;
					//Слово = "";
				}
				if(true/*НЕ НайденПоказатель*/)
				{
					//НомерАнализируемогоСимвола = НомерАнализируемогоСимвола + 1;
				}
			}
			return null;
		}
		//ПолучитьHTLMКодФормулыРасчета
		// Формирует текстовую интерпретацию формулы по способу расчета и показателям для отображения
		// на экране.
		//
		// Параметры
		//  Объект - ПланВидовРасчетаОбъект для ПВР УправленческиеНачисления или УправленческиеУдержания
		//	Режим - "Текст" - формула выводится в виде текста, "HTML" - в виде HTML кода, по умолчанию = "Текст"
		// Возвращаемое значение:
		//   Строка   – содержит текстовую интерпретацию формулы расчета.
		//

		public object ВизуализироватьФормулуРасчета(/*Объект, Режим = "Текст", ЭтоРегламентированныеУдержания = Ложь*/)
		{
			//СпособРасчета = Объект.СпособРасчета;
			if(true/*Режим = "HTML"*/)
			{
				/*СтрокаФормулы ="
		|	<HTML><HEAD>
		|	</HEAD>
		|	<BODY vlink=#000 link=#000 scroll=auto rightMargin=0><FONT face=""MS Sans Serif"" size=1>
		|";*/
			}
			//ОписаниеСпособаРасчета = ПроведениеРасчетовПереопределяемый.ПолучитьОписаниеДополнительногоСпособа(СпособРасчета, Режим);
			if(true/*ЗначениеЗаполнено(ОписаниеСпособаРасчета)*/)
			{
				if(true/*Режим = "Текст"*/)
				{
					//СтрокаФормулы = ОписаниеСпособаРасчета;
				}
			}
			if(true/*Режим = "HTML"*/)
			{
				/*СтрокаФормулы = СтрокаФормулы + "
		|</font></HTML>";*/
			}
			return null;
		}
		// ВизуализироватьФормулуРасчета()

		public object АвтоматическиРассчитываемыеПоказатели(/**/)
		{
			//АвтоРассчитываемыеПоказатели = Новый Массив;
			//АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВДнях);
			//АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВКалендарныхДнях);
			//АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.ВремяВЧасах);
			//АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.КалендарныхДнейВмесяце);
			//АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениВДнях);
			//АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.НормаВремениВЧасах);
			//АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.ОтработаноВремениВДнях);
			//АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.ОтработаноВремениВЧасах);
			//АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.РасчетнаяБаза);
			//АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.СдельнаяВыработка);
			//АвтоРассчитываемыеПоказатели.Добавить(Справочники.ПоказателиСхемМотивации.Стаж);
			//ПроведениеРасчетовПереопределяемый.ДополнитьМассивАвтоматическиРассчитываемыхПоказателей(АвтоРассчитываемыеПоказатели);
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////
		// Законодательство
		// Возвращает список кодов дохода, не требующих ни ввода вычетов, ни исчисления налога по ставкам 9% или 35%
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//  список значений, содержащий ссылки на предопределенные эл-ты спр-ка ДоходыНДФЛ
		//

		public object ПолучитьСписокКодовДоходаОсновныхНачислений(/**/)
		{
			/*Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоходыНДФЛ.Ссылка,
	|	ДоходыНДФЛ.Представление
	|ИЗ
	|	Справочник.ДоходыНДФЛ КАК ДоходыНДФЛ
	|ГДЕ
	|	ДоходыНДФЛ.СтавкаНалогообложенияРезидента = &СтавкаНалогообложенияРезидента
	|	И (НЕ ДоходыНДФЛ.Ссылка В (&ЧастичноОблагаемыеДоходы))");*/
			//СписокКодовДохода = Новый Массив;
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2201);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2202);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2203);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2204);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2205);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2206);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2207);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2208);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2209);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2761);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2720);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2730);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2740);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2760);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.МатпомощьПриРожденииРебенка);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2770);
			//СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.Код2790);
			//Запрос.УстановитьПараметр("ЧастичноОблагаемыеДоходы",СписокКодовДохода);
			//Запрос.УстановитьПараметр("СтавкаНалогообложенияРезидента", Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
			//СписокКодовДохода = Новый СписокЗначений;
			//Выборка = Запрос.Выполнить().Выбрать();
			while(true/*Выборка.Следующий()*/)
			{
				//СписокКодовДохода.Добавить(Выборка.Ссылка,Выборка.Представление);
			}
			/*;
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.ПустаяСсылка(),"");*/
			return null;
		}
		// ПолучитьСписокКодовДоходаТребующихДополнительнойОбработки()
		// Возвращает список кодов дохода, облагаемых по ставке 13%
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//  список значений, содержащий ссылки на предопределенные эл-ты спр-ка ДоходыНДФЛ
		//

		public object ПолучитьСписокКодовДоходаДополнительныхНачислений(/**/)
		{
			//СписокКодовДохода = Новый СписокЗначений;
			/*Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоходыНДФЛ.Ссылка,
	|	ДоходыНДФЛ.Представление
	|ИЗ
	|	Справочник.ДоходыНДФЛ КАК ДоходыНДФЛ
	|ГДЕ
	|	ДоходыНДФЛ.СтавкаНалогообложенияРезидента = &СтавкаНалогообложенияРезидента");*/
			//Запрос.УстановитьПараметр("СтавкаНалогообложенияРезидента",Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
			//Выборка = Запрос.Выполнить().Выбрать();
			while(true/*Выборка.Следующий()*/)
			{
				//СписокКодовДохода.Добавить(Выборка.Ссылка,Выборка.Представление);
			}
			/*;
	СписокКодовДохода.Добавить(Справочники.ДоходыНДФЛ.ПустаяСсылка(),"");*/
			return null;
		}
		// ПолучитьСписокКодовДоходаДопНачисленийТребующихДополнительнойОбработки()
		// Возвращает список видов государственных единовременных пособий за счет ФСС
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   Список значений, содержащий подходящий перечень значений перечисления РазмерыГосударственныхПособий
		//

		public object ПолучитьСписокРасходовПоСоцСтрахованию(/**/)
		{
			//СписокПособий = Новый СписокЗначений;
			return null;
		}
		// Процедура заполняет список вычетов и список допустимых кодов дохода
		// в зависимости от вида договора.
		//

		public void ЗаполнитьСпискиКодовДоходовВычетовПоДоговорам(/*СписокВычетов, СписокАвторскихВознаграждений, ВидДоговора, ВидАвторскогоДоговора*/)
		{
			//МассивВычетов = Новый Массив;
			//СписокВычетов.Очистить();
			//СписокАвторскихВознаграждений.Очистить();
			if(true/*ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда*/)
			{
				//МассивВычетов.Добавить(Справочники.ВычетыНДФЛ.Код403);
				//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.Код2010);
				//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.КодДоходаПоУмолчанию);
				//СписокАвторскихВознаграждений.Добавить(Справочники.ДоходыНДФЛ.ПустаяСсылка());
			}
			//Запрос = Новый Запрос;
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВычетыНДФЛ.Код,
	|	ВычетыНДФЛ.Наименование,
	|	ВычетыНДФЛ.Ссылка
	|ИЗ
	|	Справочник.ВычетыНДФЛ КАК ВычетыНДФЛ
	|ГДЕ
	|	ВычетыНДФЛ.Ссылка В(&Ссылка)";*/
			//Запрос.УстановитьПараметр("Ссылка", МассивВычетов);
			//Выборка = Запрос.Выполнить().Выбрать();
			while(true/*Выборка.Следующий()*/)
			{
				//СписокВычетов.Добавить(Выборка.Ссылка, СокрЛП(Выборка.Код) +" " + Выборка.Наименование);
			}
			//;;
		}
		// ЗаполнитьСпискиКодовДоходовВычетов()
		////////////////////////////////////////////////////////////////////////////////
		// ИСПРАВЛЕНИЕ ДОКУМЕНТОВ
		// Функция получает документ(ы), которым был исправлен расчетный документ
		//
		// Параметры
		//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
		//  Режим - строка, допустимые значения: "КритерийОтбора", "ТаблицаДокумента"
		//  ИмяДокумента - имя соответствующего объекта метаданных
		//
		// Возвращаемое значение:
		//   Режим = "КритерийОтбора": массив документов-исправлений, возможно, пустой.
		//   Режим = "ТаблицаДокумента": ссылка на документ того же вида, что и переданный параметр;
		//   или Неопределено, если документ-исправление не найден.
		//

		public object ПолучитьДокументИсправление(/*ДокументСсылка = Неопределено, Режим = Неопределено, ИмяДокумента = Неопределено, ИмяРеквизита = "ПерерассчитываемыйДокумент"*/)
		{
			if(true/*Не ЗначениеЗаполнено(ДокументСсылка)*/)
			{
			}
			if(true/*Режим = Неопределено*/)
			{
				//Режим = ?(ДокументСсылка.Метаданные().Реквизиты.Найти("Сотрудник") = Неопределено, "КритерийОтбора","ТаблицаДокумента");
			}
			if(true/*Режим = "КритерийОтбора"*/)
			{
				/*ТекстЗапроса =
		"ВЫБРАТЬ
		|	ДокументыИсправления.Ссылка
		|ИЗ
		|	КритерийОтбора.ДокументыИсправления(&ИсходныйДокумент) КАК ДокументыИсправления
		|";*/
			}
			//Запрос = Новый Запрос(ТекстЗапроса);
			//Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
			//Результат = Запрос.Выполнить();
			if(true/*Режим = "КритерийОтбора"*/)
			{
			}
			return null;
		}
		// Функция получает документ(ы), которым был исправлен расчетный документ
		//
		// Параметры
		//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
		//  Режим - строка, допустимые значения: "КритерийОтбора", "ТаблицаДокумента"
		//
		// Возвращаемое значение:
		//   Режим = "КритерийОтбора": массив документов-исправлений, возможно, пустой.
		//   Режим = "ТаблицаДокумента": ссылка на документ того же вида, что и переданный параметр;
		//   или Неопределено, если документ-исправление не найден.
		//

		public object ПолучитьДокументСторнирование(/*ДокументСсылка = Неопределено*/)
		{
			if(true/*Не ЗначениеЗаполнено(ДокументСсылка)*/)
			{
			}
			//Запрос = Новый Запрос();
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ДокументыИсправления.Ссылка
	|ИЗ
	|	Документ.Сторнирование КАК ДокументыИсправления
	|ГДЕ
	|	ДокументыИсправления.СторнируемыйДокумент = &ИсходныйДокумент";*/
			//Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
			//Выборка = Запрос.Выполнить().Выбрать();
			if(true/*Выборка.Следующий()*/)
			{
			}
			return null;
		}
		// Определяет, можно ли изменять документ "задним числом", т.е. проверяет
		//   отсутствие исправлений и сторнирований.
		//
		// Параметры
		//  ДокументСсылка - ссылка на документ, включенный в механизм исправлений
		//  ОписаниеПричиныОтказа - переменная, куда возвращается описание проблемы
		//
		// Возвращаемое значение:
		//  булево
		//

		public object ДокументНельзяИзменятьЗаднимЧислом(/*ДокументСсылка = Неопределено, ОписаниеПричиныОтказа = ""*/)
		{
			//ОписаниеПричиныОтказа = "";
			if(true/*Не ЗначениеЗаполнено(ДокументСсылка)*/)
			{
			}
			return null;
		}
		// Выбирает из документов-исправлений сотрудников и помещает их в соответствие
		//
		// Параметры
		//  ТекстЗапроса - строка. содержит текст запроса выора сотрудников
		//  ДокументыИсправления - массив документов-исправлений
		//  ИмяПоля - строка, имя поля запроса, содержащего сотрудника
		//  ИмяПараметра - строка, имя параметра запроса, содержащего документы-исправления
		//
		// Возвращаемое значение:
		//   Соответствие с сотрудниками документов исправлений
		//

		public object СформироватьСоответствиеСотрудниковСИсправлениями(/*ТекстЗапроса = "", ДокументыИсправления = Неопределено, ИмяПоля = "Сотрудник", ИмяПараметра = "Исправления"*/)
		{
			//Сотрудники = Новый Соответствие;
			if(true/*ПустаяСтрока(ТекстЗапроса) Или Не ЗначениеЗаполнено(ДокументыИсправления)*/)
			{
			}
			//Запрос = Новый Запрос(ТекстЗапроса);
			//Запрос.УстановитьПараметр(ИмяПараметра,ДокументыИсправления);
			//Выборка = Запрос.Выполнить().Выбрать();
			while(true/*Выборка.Следующий()*/)
			{
				//Сотрудники.Вставить(Выборка[ИмяПоля], Истина);
			}
			return null;
		}
		// СформироватьСоответствиеСотрудниковСИсправлениями()
		// Обработчик подписки ПередЗаписьюДокументаИсправление
		//

		public void ПередЗаписьюДокументаПроверкаИсправленногоДокумента(/*Источник, Отказ, РежимЗаписи, РежимПроведения*/)
		{
			if(true/*РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Или РежимЗаписи = РежимЗаписиДокумента.Проведение*/)
			{
				if(true/*Источник.Метаданные().Реквизиты.Найти("ИсправляемыйДокумент") <> Неопределено*/)
				{
					//ИмяРеквизита = "ИсправляемыйДокумент";
				}
				if(true/*ЗначениеЗаполнено(ПолучитьДокументИсправление(Источник.Ссылка, , , ИмяРеквизита))*/)
				{
					if(true/*РежимЗаписи = РежимЗаписиДокумента.Проведение*/)
					{
						//ТекстСообщенияОбОшибке = "Документ был исправлен, проведение документа запрещено!";
					}
					//ОбщегоНазначения.СообщитьОбОшибке(ТекстСообщенияОбОшибке, Отказ);
				}
			}
		}

		public void ПриКопированииДокументаИсправления(/*Источник, ОбъектКопирования*/)
		{
			if(true/*Источник.Метаданные().Реквизиты.Найти("ИсправляемыйДокумент") <> Неопределено*/)
			{
				//ИмяРеквизита = "ИсправляемыйДокумент";
			}
			//Источник[ИмяРеквизита] = Неопределено;
		}
		// Создает набор записей регистра, описание объекта метаданных которого передано
		//
		// Параметры
		//  Движение - Объект метаданных, описывающий регистр, по которому производится движение
		//
		// Возвращаемое значение:
		//   новый набор записей переданного регистра
		//

		public object НаборЗаписейПоОбъектуМетаданных(/*Движение*/)
		{
			//НаборЗаписей = Неопределено;
			if(true/*Метаданные.РегистрыСведений.Содержит(Движение)*/)
			{
				//НаборЗаписей = РегистрыСведений[Движение.Имя].СоздатьНаборЗаписей();
			}
			return null;
		}
		// НаборДвиженийДокумента()
		// Читает движения переданного документа, сохраняет их в соответствие,
		//  а затем очищает
		//
		// Параметры
		//  ДокументСсылка - ДокументСсылка.<ИмяИсправляемогоДокумента>, исправляемый документ,
		//					чьи движения будут исправлены
		//  СоответствиеДвижений - соответствие, в этот параметр возвращаются удаленные движения
		//  Сотрудники, ФизЛица - соответствия, содержат сотрудников, физлиц, по которым следует
		//                  отбирать движения
		//
		// Возвращаемое значение:
		//   нет
		//

		public void ОбработатьДвиженияИсправляемогоДокумента(/*ДокументСсылка = Неопределено, СоответствиеДвижений = Неопределено, Сотрудники = Неопределено, ФизЛица = Неопределено*/)
		{
			if(true/*Не ЗначениеЗаполнено(ДокументСсылка)*/)
			{
			}
			if(true/*СоответствиеДвижений = Неопределено*/)
			{
			}
			//МетаданныеДокумента = ДокументСсылка.Метаданные();
			//Режим = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "ПоНесколькимСотрудникам","ПоОдномуСотруднику");
			if(true/*Режим = "ПоНесколькимСотрудникам"*/)
			{
				if(true/*Не ЗначениеЗаполнено(Сотрудники)*/)
				{
				}
			}
		}
		// ОбработатьДвиженияИсправляемогоДокумента()
		// Восстанавливает движения для переданного документа из переданного соответствия
		//

		public void ВосстановитьДвиженияИсправляемогоДокумента(/*ДокументСсылка = Неопределено, СоответствиеДвижений = Неопределено*/)
		{
			if(true/*Не ЗначениеЗаполнено(ДокументСсылка)*/)
			{
			}
			if(true/*СоответствиеДвижений = Неопределено*/)
			{
			}
			//МетаданныеДокумента = ДокументСсылка.Метаданные();
			//Режим = ?(МетаданныеДокумента.Реквизиты.Найти("Сотрудник") = Неопределено, "ПоНесколькимСотрудникам","ПоОдномуСотруднику");
			if(true/*Режим = "ПоНесколькимСотрудникам"*/)
			{
			}
		}
		// ВосстановитьДвиженияИсправляемогоДокумента()
		// Заполняет документ-исправление по исходному кадровому документу
		//

		public void ЗаполнитьИсправлениеПоКадровомуДокументу(/*ЭтотОбъект, ИсходныйДокумент, Сотрудники = Неопределено*/)
		{
			//ЭтотОбъект.ИсправляемыйДокумент = ИсходныйДокумент;
			//МД = ИсходныйДокумент.Метаданные();
			//МассивНепереносимыхРеквизитов = Новый Массив;
			//МассивНепереносимыхРеквизитов.Добавить("Проведен");
			//МассивНепереносимыхРеквизитов.Добавить("Номер");
			//МассивНепереносимыхРеквизитов.Добавить("Дата");
			//МассивНепереносимыхРеквизитов.Добавить("ПометкаУдаления");
			//МассивНепереносимыхРеквизитов.Добавить("Комментарий");
			//МассивНепереносимыхРеквизитов.Добавить("Ответственный");
			//МассивНепереносимыхРеквизитов.Добавить("КраткийСоставДокумента");
			//МассивНепереносимыхРеквизитов.Добавить("ДанныеПрошлойВерсии");
			//МассивНепереносимыхРеквизитов.Добавить("ИсправляемыйДокумент");
			//МассивНепереносимыхРеквизитов.Добавить("ДвиженияИсправляемогоДокумента");
			//Реквизиты = Новый Массив;
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("ИсходныйДокумент",	ИсходныйДокумент);
			//Текст = "";
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|"+Текст+"
	|ИЗ
	|	Документ." + МД.Имя + " КАК Док
	|ГДЕ
	|	Док.Ссылка = &ИсходныйДокумент
	|	И Док.Проведен";*/
			//Выборка = Запрос.Выполнить().Выбрать();
			if(true/*Выборка.Следующий()*/)
			{
				//ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
			}
			//Запрос.УстановитьПараметр("Сотрудники",			Сотрудники);
			//Запрос.УстановитьПараметр("ПоВсемСотрудникам",	Сотрудники = Неопределено);
		}

		public void ИсправлениеКадровогоДокументаПередЗаписью(/*Отказ, РежимЗаписи, РежимПроведения, ЭтотОбъект, ВосстанавливатьДвижения, ИсправляемыйДокумент, СоответствиеДвижений*/)
		{
			if(true/*РежимЗаписи = РежимЗаписиДокумента.Проведение И Не ЭтотОбъект.ИсправляемыйДокумент.Пустая()*/)
			{
				//Сотрудники	= Новый Массив;
				//Физлица		= Новый Массив;
				if(true/*ЭтотОбъект.Метаданные().ТабличныеЧасти.Найти("РаботникиОрганизации") = Неопределено*/)
				{
					//Сотрудники.Добавить(ЭтотОбъект.Сотрудник);
					//Физлица.Добавить(ЭтотОбъект.Физлицо);
				}
				//СоответствиеДвижений = ЭтотОбъект.ДвиженияИсправляемогоДокумента.Получить();
				if(true/*СоответствиеДвижений = Неопределено*/)
				{
					//СоответствиеДвижений = Новый Соответствие;
				}
				//ОбработатьДвиженияИсправляемогоДокумента(ЭтотОбъект.ИсправляемыйДокумент, СоответствиеДвижений, Сотрудники, Физлица);
				//ЭтотОбъект.ДвиженияИсправляемогоДокумента = Новый ХранилищеЗначения(СоответствиеДвижений);
			}
			if(true/*РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения*/)
			{
				//СоответствиеДвижений = ЭтотОбъект.ДвиженияИсправляемогоДокумента.Получить();
				if(true/*СоответствиеДвижений <> Неопределено*/)
				{
					//ЭтотОбъект.ДвиженияИсправляемогоДокумента	= Неопределено;
					if(true/*ЭтотОбъект.ИсправляемыйДокумент.Пустая()*/)
					{
						//Запрос = Новый Запрос;
						//Запрос.УстановитьПараметр("ДокументСсылка",	ЭтотОбъект.Ссылка);
						/*Запрос.Текст =
				"ВЫБРАТЬ
				|	Док.ИсправляемыйДокумент
				|ИЗ
				|	Документ." + ЭтотОбъект.Метаданные().Имя + " КАК Док
				|ГДЕ
				|	Док.Ссылка = &ДокументСсылка";*/
						//Выборка = Запрос.Выполнить().Выбрать();
						if(true/*Выборка.Следующий()*/)
						{
							//ИсправляемыйДокумент = Выборка.ИсправляемыйДокумент;
							//ВосстанавливатьДвижения		= Истина;
						}
					}
				}
			}
		}

		public void ИсправлениеКадровогоДокументаПриЗаписи(/*Отказ, ВосстанавливатьДвижения, ИсправляемыйДокумент, СоответствиеДвижений*/)
		{
			if(true/*ВосстанавливатьДвижения*/)
			{
				//ВосстановитьДвиженияИсправляемогоДокумента(ИсправляемыйДокумент, СоответствиеДвижений);
				//ВосстанавливатьДвижения = Ложь;
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		// МЕХАНИЗМ КОНТРОЛЯ ПЕРИОДИЧЕСКИХ ВЫПЛАТ

		public object ПолучитьНаборПериодическихВыплатПоДокументу(/*Ссылка, ДанныеДокумента = Неопределено*/)
		{
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("Ссылка", Ссылка);
			/*// Проверка в форме выполняется в ПередЗаписью, поэтому ссылки еще нет, 
*/
			/*//  используем ДанныеДокумента, при проведении - используем ссылку
*/
			if(true/*ДанныеДокумента <> Неопределено*/)
			{
				/*ТекстЗапроса =  "
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ДанныеДокумента.ДатаНачала КАК ПериодНачисления,
		|	ДанныеДокумента.Сотрудник КАК Сотрудник,
		|	ДанныеДокумента.ВидРасчета КАК ВидРасчета
		|ПОМЕСТИТЬ ВТДанныеДокумента
		|ИЗ
		|	&ДанныеДокумента КАК ДанныеДокумента";*/
				//Запрос.УстановитьПараметр("ДанныеДокумента", ДанныеДокумента);
			}
			/*ТекстЗапроса = ТекстЗапроса + "
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.РазВГод)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодНачисления, ГОД)
	|		КОГДА ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.РазВКвартал)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодНачисления, КВАРТАЛ)
	|		КОГДА ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления = ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.РазВМесяц)
	|			ТОГДА НАЧАЛОПЕРИОДА(ДанныеДокумента.ПериодНачисления, МЕСЯЦ)
	|	КОНЕЦ КАК ПериодНачисления,
	|	ДанныеДокумента.Сотрудник,
	|	ДанныеДокумента.ВидРасчета,
	|	&Ссылка КАК ДокументОснование
	|ИЗ
	|	ВТДанныеДокумента КАК ДанныеДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|		ПО ДанныеДокумента.ВидРасчета = ДополнительныеНачисленияОрганизаций.Ссылка
	|ГДЕ
	|	(НЕ ДополнительныеНачисленияОрганизаций.ПериодичностьНачисления В (ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.НеОпределена), ЗНАЧЕНИЕ(Перечисление.ПериодичностьНачисления.ПустаяСсылка)))";*/
			//Запрос.Текст = ТекстЗапроса;
			return null;
		}

		public void ДобавитьДвиженияПериодическихВыплат(/*Движения, Ссылка*/)
		{
			//Движения.ПериодическиеНачисления.Загрузить(ПолучитьНаборПериодическихВыплатПоДокументу(Ссылка));
		}
		// Возвращает дату вступления в силу Федерального Закона от 24.07.2009 № 212-ФЗ в очередной редакции
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   дата
		//

		public object ДатаРасширенияПеречняЛьготныхТарифовСтраховыхВзносов(/**/)
		{
			return null;
		}
		// ДатаЗаменыЕСНСтраховымиВзносами()
		// Возвращает дату вступления в силу Федерального Закона от 3 декабря 2011 года № 379-ФЗ
		//
		// Параметры
		//  нет
		//
		// Возвращаемое значение:
		//   дата
		//

		public object ДатаСниженияТарифовСтраховыхВзносов(/**/)
		{
			return null;
		}
		// ДатаЗаменыЕСНСтраховымиВзносами()

		public object ИменаПВРПоОдномуИзВР(/*ПВРСсылка*/)
		{
			//ИменаПВР = Новый Массив;
			//ИменаПВР.Добавить("ОсновныеНачисленияОрганизаций");
			//ИменаПВР.Добавить("ДополнительныеНачисленияОрганизаций");
			//ИменаПВР.Добавить("УдержанияОрганизаций");
			//МассивыИменПВРПоТипу = Новый Соответствие;
			//МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), ИменаПВР);
			//МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"), ИменаПВР);
			//МассивыИменПВРПоТипу.Вставить(Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"), ИменаПВР);
			//ПроведениеРасчетовПереопределяемый.ДополнитьСоответствиеИменПВРПоТипу(МассивыИменПВРПоТипу);
			return null;
		}
		// ИменаПВРПоОдномуИзВР

		public object ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета(/*ИменаПВР*/)
		{
			//ТекстЗапроса = "";
			//НомерПВР = 0;
			while(true/*НомерПВР < ИменаПВР.Количество()*/)
			{
				if(true/*НомерПВР > 0*/)
				{
					/*ТекстЗапроса = ТекстЗапроса + "
			|ОБЪЕДИНИТЬ";*/
				}
				/*ТекстЗапроса = ТекстЗапроса + "
		|ВЫБРАТЬ
		|	Ссылка КАК ВидРасчета,
		|	Показатель КАК Показатель,
		|	ЗапрашиватьПриКадровыхПеремещениях КАК ЗапрашиватьПриКадровыхПеремещениях";*/
				if(true/*НомерПВР = 0*/)
				{
					/*ТекстЗапроса = ТекстЗапроса + "
			|ПОМЕСТИТЬ ПоказателиВидаРасчета";*/
				}
				/*ТекстЗапроса = ТекстЗапроса + "
		|ИЗ
		|	ПланВидовРасчета." + ИменаПВР[НомерПВР] + ".Показатели
		|";*/
				//НомерПВР = НомерПВР + 1;
			}
			/*;
	
	ТекстЗапроса = ТекстЗапроса + "
	|ИНДЕКСИРОВАТЬ ПО
	|	ВидРасчета,
	|	Показатель
	|;
	|";*/
			return null;
		}
		// ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета

		public object СформироватьЗапросСвойствПоказателейВидовРасчета(/*ПоказателиФормулы, ПВРСсылка, ЭтоОсновноеНачисление*/)
		{
			//ТекстЗапроса = ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета(ИменаПВРПоОдномуИзВР(ПВРСсылка));
			/*ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиВидовРасчета.Показатель
	|ПОМЕСТИТЬ ПоказателиУжеЗапрашиваются
	|ИЗ
	|	ПоказателиВидаРасчета КАК ПоказателиВидовРасчета
	|ГДЕ
	|	ПоказателиВидовРасчета.ВидРасчета <> &Ссылка
	|	И ПоказателиВидовРасчета.Показатель В(&ПоказателиФормулы)
	|	И ПоказателиВидовРасчета.ЗапрашиватьПриКадровыхПеремещениях
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Ссылка КАК Показатель,
	|	ВЫБОР
	|		КОГДА ПоказателиСхемМотивации.ВозможностьИзменения = ЗНАЧЕНИЕ(Перечисление.ИзменениеПоказателейСхемМотивации.НеИзменяется)
	|				И (НЕ ПоказателиСхемМотивации.ТипПоказателя В (ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаЧисловая), ЗНАЧЕНИЕ(Перечисление.ТипыПоказателейСхемМотивации.ОценочнаяШкалаПроцентная)))
	|			ТОГДА ВЫБОР
	|					КОГДА ПоказателиСхемМотивации.ТарифнаяСтавка
	|							ИЛИ ПоказателиСхемМотивации.Ссылка В (ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаМесячная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаДневная), ЗНАЧЕНИЕ(Справочник.ПоказателиСхемМотивации.ТарифнаяСтавкаЧасовая))
	|						ТОГДА &ЭтоОсновноеНачисление
	|					ИНАЧЕ ВЫБОР
	|							КОГДА ПоказателиСхемМотивации.Ссылка В
	|										(ВЫБРАТЬ
	|											ПоказателиУжеЗапрашиваются.Показатель
	|										ИЗ
	|											ПоказателиУжеЗапрашиваются)
	|									И (НЕ ЕСТЬNULL(ПоказателиВидаРасчета.ЗапрашиватьПриКадровыхПеремещениях, ЛОЖЬ))
	|								ТОГДА ЛОЖЬ
	|							ИНАЧЕ ИСТИНА
	|						КОНЕЦ
	|				КОНЕЦ
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЗапрашиватьПриКадровыхПеремещениях
	|ИЗ
	|	Справочник.ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК ПоказателиВидаРасчета
	|		ПО ПоказателиСхемМотивации.Ссылка = ПоказателиВидаРасчета.Показатель
	|			И (ПоказателиВидаРасчета.ВидРасчета = &Ссылка)
	|ГДЕ
	|	ПоказателиСхемМотивации.Ссылка В(&ПоказателиФормулы)";*/
			//Запрос = Новый Запрос;
			//Запрос.Текст = ТекстЗапроса;
			//Запрос.УстановитьПараметр("ПоказателиФормулы", ПоказателиФормулы);
			//Запрос.УстановитьПараметр("Ссылка", ПВРСсылка);
			//Запрос.УстановитьПараметр("ЭтоОсновноеНачисление", ЭтоОсновноеНачисление);
			return null;
		}
		// СформироватьЗапросСвойствПоказателейВидовРасчета

		public void ЗаполнитьТаблицуПоказателейВидаРасчета(/*Объект, ПоказателиФормулы*/)
		{
			if(true/*Объект.Метаданные().Реквизиты.Найти("ЗачетОтработанногоВремени") <> Неопределено*/)
			{
				//ЭтоОсновноеНачисление = Объект.ЗачетОтработанногоВремени;
			}
			//Выборка = СформироватьЗапросСвойствПоказателейВидовРасчета(ПоказателиФормулы, Объект.Ссылка, ЭтоОсновноеНачисление).Выбрать();
			//Объект.Показатели.Очистить();
		}
		// ЗаполнитьТаблицуПоказателейВидаРасчета
		// Процедура обеспечивает ввод формульных начислений и удержаний
		//

		public void УстановитьПараметрыВидаРасчета(/*Параметр, Объект, Элементыформы*/)
		{
			//Объект.ФормулаРасчета				= Параметр[0];
			//Объект.ФормулаРасчетаПредставление	= Параметр[2];
			//Объект.СпособРасчета 				= Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула;
			//Объект.ПроизвольнаяФормулаРасчета	= Истина;
			//ЗаполнитьТаблицуПоказателейВидаРасчета(Объект, Параметр[1]);
			//Элементыформы.СпособРасчетаПредставление.УстановитьТекст(ПроведениеРасчетов.ВизуализироватьФормулуРасчета(Объект, "HTML", Объект.Метаданные().Имя = "УдержанияОрганизаций"));
		}
		// УстановитьПараметрыВидаРасчета
		// Процедура контролирует признак Запрашивать у показателей произвольной формулы так,
		// чтобы один и тот же показатель не мог быть запрошен в разных видах расчета одновременно,
		// так как это может привести к разным значениям одного и того же показателя
		// Исключения составляют виды расчета, в которых этот признак уже был установлен ранее
		//

		public void ПроверитьУстановкуПризнакаЗапрашивать(/*ПВРОбъект, Отказ, ОбработкаКомментариев*/)
		{
			/*ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Показатели.Показатель КАК Показатель,
	|	Показатели.ЗапрашиватьПриКадровыхПеремещениях КАК ЗапрашиватьПриКадровыхПеремещениях
	|ПОМЕСТИТЬ ПоказателиСхемМотивации
	|ИЗ
	|	&Показатели КАК Показатели
	|;
	|";*/
			//ТекстЗапроса = ТекстЗапроса + ТекстЗапросаВременнойТаблицыПоказателиВидаРасчета(ИменаПВРПоОдномуИзВР(ПВРОбъект.Ссылка));
			/*ТекстЗапроса = ТекстЗапроса + "
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПоказателиСхемМотивации.Показатель КАК Показатель,
	|	ПоказателиУжеЗапрашиваются.ВидРасчета
	|ИЗ
	|	ПоказателиСхемМотивации КАК ПоказателиСхемМотивации
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ПоказателиВидаРасчета КАК ПоказателиУжеЗапрашиваются
	|		ПО ПоказателиСхемМотивации.Показатель = ПоказателиУжеЗапрашиваются.Показатель
	|			И (ПоказателиУжеЗапрашиваются.ЗапрашиватьПриКадровыхПеремещениях)
	|			И (ПоказателиУжеЗапрашиваются.ВидРасчета <> &Ссылка)
	|ГДЕ
	|	ПоказателиСхемМотивации.ЗапрашиватьПриКадровыхПеремещениях
	|	И (НЕ ПоказателиСхемМотивации.Показатель В
	|				(ВЫБРАТЬ
	|					ПоказателиВидаРасчета.Показатель
	|				ИЗ
	|					ПоказателиВидаРасчета КАК ПоказателиВидаРасчета
	|				ГДЕ
	|					ПоказателиВидаРасчета.ВидРасчета = &Ссылка
	|					И ПоказателиВидаРасчета.ЗапрашиватьПриКадровыхПеремещениях))
	|ИТОГИ ПО
	|	Показатель";*/
			/*// ошибкой является установка признака запрашивать для уже запрашиваемых в других видах расчета показателей, 
*/
			/*// если этот признак не был установлен ранее
*/
			//Запрос = Новый Запрос;
			//Запрос.Текст = ТекстЗапроса;
			//Запрос.УстановитьПараметр("Ссылка", ПВРОбъект.Ссылка);
			//Запрос.УстановитьПараметр("Показатели", ПВРОбъект.Показатели.Выгрузить(, "Показатель, ЗапрашиватьПриКадровыхПеремещениях"));
			//РезультатЗапроса = Запрос.Выполнить();
			if(true/*НЕ РезультатЗапроса.Пустой()*/)
			{
				//ВыборкаПоПоказателям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				while(true/*ВыборкаПоПоказателям.Следующий()*/)
				{
					//ОбработкаКомментариев.ДобавитьСообщение("Показатель формулы расчета " + ВыборкаПоПоказателям.Показатель + " уже запрашивается в нижеперечисленных видах расчета:", Перечисления.ВидыСообщений.Раздел);
					//Выборка = ВыборкаПоПоказателям.Выбрать();
					while(true/*Выборка.Следующий()*/)
					{
						//Расшифровки = Новый Массив;
						//Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", Строка(Выборка.ВидРасчета), Выборка.ВидРасчета));
						//ОбработкаКомментариев.ДобавитьСообщение("", Перечисления.ВидыСообщений.ПустаяСсылка(), Расшифровки);
					}
					//;;
				}
				//;;
			}
		}
	}
}
