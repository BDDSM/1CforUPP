using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class ОценкаПроизводительностиВызовСервера
	{
		///////////////////////////////////////////////////////////////////////////////
		// ОСНОВНЫЕ ФУНКЦИИ
		// Функция время начала замера
		//
		// Параметры:
		//  КлючеваяОперация - ПеречислениеСсылка.КлючевыеОперации, замер этой ключевой операции начинается
		//  ВызовСКлиента - Булево, указывает откуда был произведен вызов функции
		//
		// Возвращаемое значение:
		//  Число - время начала замера
		//  0 - если замер этой ключевой операции уже начат
		//

		public object ЗафиксироватьВремяНачала(/*КлючеваяОперация, ВызовСКлиента*/)
		{
			if(true/*Не ВыполнятьЗамерыПроизводительности()*/)
			{
			}
			/*ВремяНачала = ТочноеВремя();*/
			/*Соответствие = ПолучитьПараметрСеанса();*/
			if(true/*ВызовСКлиента*/)
			{
			}
			/*// Проверка, если замер времени выполнения ключевой операции уже начат,
*/
			/*// то игнорировать повторный замер
*/
			if(true/*Соответствие.Получить(КлючеваяОперация) = Неопределено*/)
			{
				/*ПараметрыКО = Новый Структура("ВремяНачала, АвтоЗавершение", ВремяНачала, ВызовСКлиента);*/
				/*Соответствие.Вставить(КлючеваяОперация, ПараметрыКО);*/
				/*УстановитьПараметрСеанса(Соответствие);*/
			}
			return null;
		}
		// Процедура фиксирует время окончания замер
		//
		// Параметры:
		//  КлючеваяОперация - ПеречислениеСсылка.КлючевыеОперации, замер этой ключевой операции заканчивается,
		//  если параметр не указан, то предполагается, что начата замер только одной ключевой операции
		//  ВызовИзОбработчикаОжидания - Булево, указывает откуда был произведен вызов функции
		//
		// Возвращаемое значение:
		//  Число - время окончания замера
		//  0 - если ни один замер не начат
		//

		public object ЗафиксироватьВремяОкончания(/*КлючеваяОперация = Неопределено, ВызовИзОбработчикаОжидания*/)
		{
			if(true/*Не ВыполнятьЗамерыПроизводительности()*/)
			{
			}
			/*ВремяОкончания = ТочноеВремя();*/
			/*Соответствие = ПолучитьПараметрСеанса();*/
			/*// Если не начат ни один замер
*/
			if(true/*Соответствие.Количество() = 0*/)
			{
			}
			/*ВремяНачала = Неопределено;*/
			/*// Завершается замер начатый на клиенте
*/
			if(true/*КлючеваяОперация = Неопределено И ВызовИзОбработчикаОжидания*/)
			{
				/*// Завершается замер начатый на сервере
*/
			}
			/*// Не удалось найти время начала указаной ключевой операции
*/
			if(true/*ВремяНачала = Неопределено*/)
			{
			}
			/*Соответствие.Удалить(КлючеваяОперация);*/
			/*УстановитьПараметрСеанса(Соответствие);*/
			/*УстановитьПривилегированныйРежим(Истина);*/
			/*Запись = РегистрыСведений.ЗамерыВремени.СоздатьМенеджерЗаписи();*/
			/*Запись.ДатаЗамера = ТекущаяДата();*/
			/*Запись.КлючеваяОперация = КлючеваяОперация;*/
			/*Запись.НомерСеанса = НомерСеансаИнформационнойБазы();*/
			/*Запись.ВремяВыполнения = (ВремяОкончания - ВремяНачала - ?(ВызовИзОбработчикаОжидания, 100, 0)) / 1000;*/
			/*Запись.ИмяПользователя = ИмяПользователя();*/
			/*Попытка
		Запись.Записать(Ложь);*/
			/*Исключение
		ЗаписатьВЖурналРегистрации("ЗафиксироватьВремяОкончания",
			УровеньЖурналаРегистрации.Ошибка,
			ОписаниеОшибки());*/
			/*КонецПопытки;*/
			return null;
		}
		// Функция получает значение параметра сеанса ТекущийЗамерВремени
		//
		// Возвращаемое занчение:
		//  Соответствие - параметр сеанса установлен
		//

		public object ПолучитьПараметрСеанса(/**/)
		{
			/*УстановитьПривилегированныйРежим(Истина);*/
			return null;
		}
		// Процедура устанавливает значение параметра сеанса ТекущийЗамерВремени
		// Параметры:
		//  Соответствие - Произвольный тип данных, значение которое будет помещенов в параметр сеанса ТекущийЗамерВремени
		//

		public void УстановитьПараметрСеанса(/*Соответствие*/)
		{
			/*УстановитьПривилегированныйРежим(Истина);*/
			/*ХранилищеЗначения = Новый ХранилищеЗначения(Соответствие);*/
			/*ПараметрыСеанса.ТекущийЗамерВремени = ХранилищеЗначения;*/
		}
		// Функция получает точное время
		//
		// Возвращаемое значение:
		//  Число - время с точностью до миллисекунд

		public object ТочноеВремя(/**/)
		{
			/*Инструменты = ПолучитьИнструменты();*/
			return null;
		}
		// Процедура записывает данные в журнал регистрации
		//
		// Параметры:
		//  ИмяСобытия - Строка
		//  Уровень - УровеньЖурналаРегистрации
		//  ТекстСообщения - Строка
		//

		public void ЗаписатьВЖурналРегистрации(/*ИмяСобытия, Уровень, ТекстСообщения*/)
		{
			/*УстановитьПривилегированныйРежим(Истина);*/
			/*ЗаписьЖурналаРегистрации(ИмяСобытия,
		Уровень,
		,
		"Оценка производительности",
		ТекстСообщения);*/
		}
		// Функция получает занчение перечисления ОбщаяПроизводительностьСистемы
		//
		// Возвращаемое значение:
		//  ПеречилсениеСсылка - значение перечисления
		//  Неопределено - значение перечисления отсутствует
		//

		public object ПолучитьПредопределенный(/**/)
		{
			/*Попытка
		Возврат Перечисления.КлючевыеОперации.ОбщаяПроизводительностьСистемы;*/
			/*Исключение
		Возврат Перечисления.КлючевыеОперации.ПустаяСсылка();*/
			/*КонецПопытки;*/
			return null;
		}
		// Функция определяет необходимость выполнения замеров
		//
		// Возвращаемое значение:
		//  Булево - Истина выполнять, Ложь не выполнять
		//

		public object ВыполнятьЗамерыПроизводительности(/**/)
		{
			/*УстановитьПривилегированныйРежим(Истина);*/
			return null;
		}
		///////////////////////////////////////////////////////////////////////////////
		// РАБОТА С ВНЕШНЕЙ КОМПОНЕНТОЙ
		// Получить объект инструментов
		//
		// Возвращаемое значение:
		//  Объект "Addin.ETP.Tools"
		//

		public object ПолучитьИнструменты(/**/)
		{
			/*ПодключитьВнешнийКомпонент();*/
			return null;
		}
		// ПолучитьИнструменты()
		// Создать объект инструментов
		//
		// Возвращаемое значение:
		//  Объект "Addin.ETP.Tools"
		//

		public object СоздатьИнструменты(/**/)
		{
			return null;
		}
		// СоздатьИнструменты()
		// Подключить внешнюю компоненту КИП
		//

		public void ПодключитьВнешнийКомпонент(/**/)
		{
			/*ИмяКомпонента = "ОбщийМакет.ОценкаПроизводительностиВнешнийКомпонент";*/
			if(true/*Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP")*/)
			{
				/*#Если Клиент Тогда
			УстановитьВнешнююКомпоненту(ИмяКомпонента);*/
				if(true/*Не ПодключитьВнешнююКомпоненту(ИмяКомпонента, "ETP")*/)
				{
					/*ВызватьИсключение "Ошибка подключения внешнего компонента.";*/
				}
			}
			/*Инструменты = СоздатьИнструменты();*/
			/*ПодключеннаяВерсия = ВерсияКомпонента(Инструменты);*/
			/*ТребуемаяВерсия = "2.0.4.52";*/
			if(true/*ПодключеннаяВерсия <> ТребуемаяВерсия*/)
			{
				/*ВызватьИсключение
			"Версия подключенного внешнего компонента ("
			+ ПодключеннаяВерсия
			+ ") не совпадает с требуемой версией ("
			+ ТребуемаяВерсия
			+ "). Для устранения несоответствия версий, выгрузите всех клиентов"
			" и перезагрузите сервер 1С:Предприятия этой информационной базы.";*/
			}
		}
		// ПодключитьВнешнийКомпонент()
		// Выполнить метод внешнего компонента
		//
		// Параметры:
		//  Объект - "Addin.ETP.*", экземпляр класса внешнего компонента
		//  Имя - Строка, имя выполняемого метода
		//  Параметры - Структура, содержит имена и значения параметров
		//
		// Возвращаемое значение:
		//   Произвольный - результат, возвращаемый методом
		//

		public object ВыполнитьМетод(/*Объект, Имя, Параметры = Неопределено*/)
		{
			/*ИменаПараметров = "";*/
			if(true/*Параметры <> Неопределено*/)
			{
			}
			/*Попытка
		Возврат Вычислить("Объект." + Имя + "(" + ИменаПараметров + ")");*/
			if(true/*Объект <> Неопределено И Объект.ЕстьОшибка()*/)
			{
				/*ВызватьИсключение Объект.ОписаниеОшибки();*/
			}
			/*КонецПопытки;*/
			return null;
		}
		// ВыполнитьМетод()
		// Получить значение таймера для замера интервала времени
		//
		// Параметры:
		//  Инструменты - Объект внешнего компонента
		//
		// Возвращаемое значение:
		//  Число - текущее значение таймера в миллисекундах
		//

		public object ЗначениеТаймера(/*Инструменты*/)
		{
			return null;
		}
		// ЗначениеТаймера()
		// Получить версию текущего компонента.
		// Реализована из-за невозможности получения имени компьютера стандартным
		// способом на веб-клиенте
		//
		// Возвращаемое значение:
		//  Строка - имя текущего компьютера
		//

		public object ВерсияКомпонента(/*Инструменты*/)
		{
			return null;
		}
		// ВерсияКомпонента()
		///////////////////////////////////////////////////////////////////////////////
		// ИНИЦИАЛИЗАЦИЯ ПАРАМЕТРОВ СЕАНСА
		// Устанавливает параметры сеанса подсистемы оценка производительности
		//
		// Параметры:
		//  ИмяПараметра - Строка - имя параметра сеанса, значение которого необходимо установить
		//  УстановленныеПараметры - массив - в данный параметр помещается информация об установленных параметрах сеанса
		//

		public void УстановкаПараметровСеанса(/*Знач ИмяПараметра, УстановленныеПараметры*/)
		{
			if(true/*ИмяПараметра <> "ТекущийЗамерВремени"*/)
			{
			}
			/*УстановитьПривилегированныйРежим(Истина);*/
			/*ПараметрыСеанса.ТекущийЗамерВремени = Новый ХранилищеЗначения(Новый Соответствие);*/
			/*УстановленныеПараметры.Добавить(ИмяПараметра);*/
		}
	}
}

