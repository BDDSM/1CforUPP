using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class НалоговыйУчетУСН
	{
		///////////////////////////////////////////////////////////////////////////////
		// ФУНКЦИИ РАБОТЫ С ЕНВД
		//Определяет вид счета с точки зрения применения ЕНВД
		//

		public object ОтноситсяКДеятельностиЕНВД(/*Счет, Распределение = ""*/)
		{
			/*//~
*/
			//ВыборкаПоСчету = РегистрыСведений.СчетаУчетаПоДеятельностиЕНВД.Выбрать(новый структура("Счет",Счет));
			if(true/*ВыборкаПоСчету.Следующий()*/)
			{
				if(true/*НЕ ЗначениеЗаполнено(Распределение)*/)
				{
				}
			}
			return null;
		}
		//Возвращает массив счетов, на которых отражается выручка по деятельности, облагаемой ЕНВД
		//

		public object МассивСчетовВыручкиЕНВД(/**/)
		{
			/*//~
*/
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("Счет90_01", Планысчетов.Хозрасчетный.Выручка);
			/*Запрос.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.Ссылка КАК Счет
	|ИЗ
	|	РегистрСведений.СчетаУчетаПоДеятельностиЕНВД КАК СчетаУчетаПоДеятельностиЕНВД
	|		ЛЕВОЕ СОЕДИНЕНИЕ ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|		ПО СчетаУчетаПоДеятельностиЕНВД.Счет = Хозрасчетный.Ссылка
	|
	|ГДЕ
	|	Хозрасчетный.Ссылка В ИЕРАРХИИ(&Счет90_01)";*/
			//ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ РАБОТЫ С ФОРМАМИ
		//Устанавливает видимость реквизитов формы относящихся к УСН
		//

		public void УстановитьВидимостьРеквизитовУСН(/*РеквизитыФормы, Организация, Дата, ПоказыватьВДокументахСчетаУчета=истина*/)
		{
			/*//~
*/
			//УСН = ПрименениеУСН(Организация, Дата);
			//УСНДоходы = ПрименениеУСНДоходы(Организация, Дата);
			if(true/*УСН*/)
			{
				if(true/*УСНДоходы*/)
				{
					//ВидимостьУСН = Ложь;
				}
			}
			//ВидимостьНУ  = НЕ УСН;
			if(true/*НЕ РеквизитыФормы.Найти("ОтражатьВНалоговомУчете") = Неопределено*/)
			{
				if(true/*НЕ РеквизитыФормы.Найти("ОтражатьВНалоговомУчете").Значение*/)
				{
					//ВидимостьУСН = Ложь;
					//ВидимостьНУ  = Ложь;
				}
			}
		}

		public object ВидимостьКнопкиКУДиР(/*ДокументОбъект*/)
		{
			/*//~
*/
			if(true/*НЕ ПрименениеУСН(ДокументОбъект.Организация, ДокументОбъект.Дата)*/)
			{
			}
			//МетаданныеДокумента = ДокументОбъект.Метаданные();
			//ОтражатьВНалоговомУчете = ?(МетаданныеДокумента.Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено, ДокументОбъект.ОтражатьВНалоговомУчете, Истина);
			if(true/*НЕ ОтражатьВНалоговомУчете*/)
			{
			}
			//Параметры = Новый Структура("Ссылка, ВидОперации", ДокументОбъект, ДокументОбъект.ВидОперации);
			//ВыручкаСНТТ = ?(МетаданныеДокумента.Реквизиты.Найти("ВыручкаСНТТ") <> Неопределено, ДокументОбъект.ВыручкаСНТТ, Ложь);
			//Параметры.Вставить("ВыручкаСНТТ", ВыручкаСНТТ);
			//ВидОперацииДДС = ВидОперацииДДС(Параметры);
			if(true/*(ПрименениеУСНДоходы(ДокументОбъект.Организация, ДокументОбъект.Дата))*/)
			{
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ФОРМЫ НАСТРОЙКИ КУДИР
		// Процедура заполняет данные по УСН в платежных документах
		//

		public void ЗаполнитьНастройкуКУДиР(/*ДокументОбъект, ЗадатьВопрос = Ложь*/)
		{
			/*//~
*/
			if(true/*НЕ ПрименениеУСН(ДокументОбъект.Организация, ДокументОбъект.Дата)*/)
			{
				//ДокументОбъект.Графа4_УСН			 = 0;
				//ДокументОбъект.Графа5_УСН			 = 0;
				//ДокументОбъект.Графа6_УСН			 = 0;
				//ДокументОбъект.Графа7_УСН     		 = 0;
				//ДокументОбъект.НДС_УСН        		 = 0;
				//ДокументОбъект.ДоходыЕНВД_УСН 		 = Ложь;
				//ДокументОбъект.РасходыЕНВД_УСН		 = Ложь;
				//ДокументОбъект.РучнаяНастройка_УСН	 = Ложь;
				//ДокументОбъект.Содержание_УСН 		 = "";
			}
			//ВидОперации 	= ДокументОбъект.ВидОперации;
			//ОбъектДоходы 	= ПрименениеУСНДоходы(ДокументОбъект.Организация, ДокументОбъект.Дата);
			//ОбъектРасходы 	= НЕ ОбъектДоходы;
			//СторнироватьДоходыПриВозврате = Истина;
			//мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
			if(true/*ДокументОбъект.РучнаяНастройка_УСН*/)
			{
				if(true/*НЕ ЗадатьВопрос*/)
				{
				}
				if(true/*ОбщегоНазначения.ВопросПерезаполнитьКУДиР()*/)
				{
					//ДокументОбъект.РучнаяНастройка_УСН = Ложь;
				}
			}
			if(true/*ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.ПоступлениеДенежныхДокументов")*/)
			{
				//СуммаДляКУДиР = ДокументОбъект.ДенежныеДокументы.Итог("Сумма");
			}
			if(true/*НЕ ДокументОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета*/)
			{
				//КурсВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ДокументОбъект.ВалютаДокумента, ДокументОбъект.Дата);
				//СуммаДляКУДиР = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаДляКУДиР, ДокументОбъект.ВалютаДокумента, глЗначениеПеременной("ВалютаРегламентированногоУчета"), КурсВалюты.Курс, 1, КурсВалюты.Кратность, 1);
			}
			//Графа4_УСН = 0;
			//Графа5_УСН = 0;
			//Графа6_УСН = 0;
			//Графа7_УСН = 0;
			//ДоходыЕНВД_УСН = Ложь;
			//Содержание_УСН  = "" + ВидОперации + ".";
			if(true/*ВидОперации = Перечисления.ВидыОперацийПКО.ПриходДенежныхСредствРозничнаяВыручка*/)
			{
				//МетаданныеДокумента = ДокументОбъект.Метаданные();
				//НТТ = ?(МетаданныеДокумента.Реквизиты.Найти("ВыручкаСНТТ") <> Неопределено, ДокументОбъект.ВыручкаСНТТ, Ложь);
			}
			/*//Поступление
*/
			if(true/*(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПоставщиком) или //Доходы
		(ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке)*/)
			{
				/*//Доходы
*/
				/*(ВидОперации = Перечисления.ВидыОперацийПКО.ПолучениеНаличныхДенежныхСредствВБанке) Тогда
		Графа4_УСН      = 0;*/
				//Графа5_УСН      = 0;
			}
			//ДокументОбъект.Графа4_УСН 		= Графа4_УСН;
			//ДокументОбъект.Графа5_УСН 		= Графа5_УСН;
			//ДокументОбъект.Графа6_УСН 		= Графа6_УСН;
			//ДокументОбъект.Графа7_УСН      	= Графа7_УСН;
			//ДокументОбъект.НДС_УСН         	= 0;
			//ДокументОбъект.ДоходыЕНВД_УСН  	= ДоходыЕНВД_УСН;
			//ДокументОбъект.РасходыЕНВД_УСН 	= Ложь;
			//ДокументОбъект.Содержание_УСН  	= Содержание_УСН;
			/*//-
*/
		}
		// ЗаполнитьНастройкуКнигиУСН()
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ

		public object ПН(/*Контрагент*/)
		{
			/*//Полное наименование контрагента
*/
			return null;
		}

		public object СодержаниеКУДиР(/*СтруктураШапкиДокумента, ВидОперации, МетаданныеДокумента*/)
		{
			//СтрокаСодержание = "";
			//ДокументСсылка = СтруктураШапкиДокумента.Ссылка;
			if(true/*ВидОперации = "Поступление"*/)
			{
				if(true/*ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет")*/)
				{
					/*СтрокаСодержание = "Представлен авансовый отчет: " + ДокументСсылка.ФизЛицо + 
			", назначение аванса """ + СокрЛП(ДокументСсылка.НазначениеАванса) + """. ";*/
				}
			}
			if(true/*НЕ ЗначениеЗаполнено(СтрокаСодержание)*/)
			{
				//СтрокаСодержание = МетаданныеДокумента.Синоним + ". ";
			}
			return null;
		}

		public void СформироватьЗаписьРасшифровки(/*НаборЗаписейРасшифровки, Расход, ЗаписьКУДиР, ВидОперации*/)
		{
			if(true/*Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура*/)
			{
				/*Расход.Строки.Свернуть("Организация, ВидРасхода, СчетУчета, Валюта, ДоговорКонтрагента, 
								|РасчетныйДокумент, СтатусыПартийУСН, Партия, ОтражениеВУСН, СтатусыОплатыРасходовУСН,
								|РеквизитыДокументаОплаты",
								"Сумма, НДС");*/
			}
			//Счетчик = 1;
		}

		public object ПолучитьКоэффРаспределенияЕНВД(/*СтруктураШапкиДокумента, Период = "Квартал", Способ = "БУ"*/)
		{
			//Коэфф = 0;
			//НачальнаяДата = ?(Период = "Квартал", НачалоКвартала(СтруктураШапкиДокумента.Дата), НачалоГода(СтруктураШапкиДокумента.Дата));
			if(true/*Способ = "БУ"*/)
			{
				//Коэфф = НалоговыйУчет.КоэффициентРаспределенияРасходовПоВидамДеятельности(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.Дата, НачальнаяДата);
			}
			return null;
		}

		public void СкорректироватьРаспределениеПредыдущихКварталов(/*СтруктураШапкиДокумента, Коэфф, ТаблицаПринятых*/)
		{
			//ЗапросРасходы = Новый Запрос;
			//ЗапросРасходы.УстановитьПараметр("НачДата", НачалоГода(СтруктураШапкиДокумента.Дата));
			//ЗапросРасходы.УстановитьПараметр("КонДата", НачалоМесяца(СтруктураШапкиДокумента.Дата));
			//ЗапросРасходы.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
			//ЗапросРасходы.УстановитьПараметр("НеРаспределено", Перечисления.СтатусыРасходовУСН.НеРаспределено);
			/*ЗапросРасходы.Текст = 
	"ВЫБРАТЬ
	|	СУММА(РасходыПриУСНОбороты.СуммаРасход) КАК СуммаРасход,
	|	РасходыПриУСНОбороты.Валюта,
	|	РасходыПриУСНОбороты.Регистратор
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН.Обороты(&НачДата, &КонДата, Регистратор, Организация = &Организация) КАК РасходыПриУСНОбороты
	|ГДЕ
	|	РасходыПриУСНОбороты.СтатусыОплатыРасходовУСН = &НеРаспределено
	|	И РасходыПриУСНОбороты.Регистратор ССЫЛКА Документ.РегламентныеОперацииНалоговогоУчетаПоУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПриУСНОбороты.Валюта,
	|	РасходыПриУСНОбороты.Регистратор";*/
			//Результат = ЗапросРасходы.Выполнить().Выбрать();
			//ВсегоРаспределено = 0;
			while(true/*Результат.Следующий()*/)
			{
				//СуммаРасход 	= ?(НЕ ЗначениеЗаполнено(Результат.СуммаРасход), 0, Результат.СуммаРасход);
				//Валюта 			= ?(НЕ ЗначениеЗаполнено(Результат.Валюта), СтруктураШапкиДокумента.ВалютаРегламентированногоУчета, Результат.Валюта);
				//Регистратор 	= ?(НЕ ЗначениеЗаполнено(Результат.Регистратор), СтруктураШапкиДокумента.Ссылка, Результат.Регистратор);
				if(true/*Результат.Валюта = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета*/)
				{
					//ВсегоРаспределено = ВсегоРаспределено + СуммаРасход;
				}
			}
			if(true/*ВсегоРаспределено = 0*/)
			{
			}
			//ЗапросПринято = Новый Запрос;
			//ЗапросПринято.УстановитьПараметр("НачДата", НачалоГода(СтруктураШапкиДокумента.Дата));
			//ЗапросПринято.УстановитьПараметр("КонДата", НачалоМесяца(СтруктураШапкиДокумента.Дата));
			//ЗапросПринято.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
			//ЗапросПринято.УстановитьПараметр("ЭтапПроведения", 2);
			/*ЗапросПринято.Текст = 
	"ВЫБРАТЬ
	|	СУММА(КнигаУчетаДоходовИРасходов.Графа7) КАК Графа7
	|ИЗ
	|	РегистрНакопления.КнигаУчетаДоходовИРасходов КАК КнигаУчетаДоходовИРасходов
	|ГДЕ
	|	КнигаУчетаДоходовИРасходов.Период МЕЖДУ &НачДата И &КонДата
	|	И КнигаУчетаДоходовИРасходов.Регистратор ССЫЛКА Документ.РегламентныеОперацииНалоговогоУчетаПоУСН
	|	И КнигаУчетаДоходовИРасходов.ЭтапПроведения = &ЭтапПроведения";*/
			//Результат = ЗапросПринято.Выполнить().Выбрать();
			//ВсегоПринято = 0;
			if(true/*Результат.Следующий()*/)
			{
				//ВсегоПринято = ?(НЕ ЗначениеЗаполнено(Результат.Графа7), 0, Результат.Графа7);
			}
			//СуммаКорректировки = ВсегоРаспределено - Окр(ВсегоРаспределено*Коэфф, 2, 1) - ВсегоПринято;
			if(true/*СуммаКорректировки <> 0*/)
			{
				//СтрокаРасхода 							= ТаблицаПринятых.Добавить();
				//СтрокаРасхода.Организация 				= СтруктураШапкиДокумента.Организация;
				//СтрокаРасхода.ОтражениеВУСН 			= Перечисления.ОтражениеВУСН.Принимаются;
				//СтрокаРасхода.РасчетныйДокумент 		= СтруктураШапкиДокумента.Ссылка;
				//СтрокаРасхода.Сумма 					= СуммаКорректировки;
				//СтрокаРасхода.НДС 						= 0;
				//СтрокаРасхода.Валюта 					= СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
			}
		}
		// Преобразует таблицу значений в таблицу со вложенными таблицами, группируя значения по колонкам, формирование итога по строкам

		public object ТаблицуЗначенийВТаблицуСГруппировкой(/*ТаблицаРезультатов, знач ГруппировочныеКолонки= "",знач КолонкиИтогов = "", ВидОперации*/)
		{
			//ИтоговаяТаблица  = Новый ТаблицаЗначений();
			//ПромежуточнаяТаблица = Новый ТаблицаЗначений();
			//ИтоговаяТаблица.Колонки.Добавить("Строки");
			/*//Если ПустаяСтрока(ГруппировочныеКолонки) Тогда
*/
			/*//	Для каждого СтрокаТаблицы Из ТаблицаРезультатов Цикл
*/
			/*//		СтрокаДерева = ИтоговаяТаблица.Добавить();
*/
			/*//		ЗаполнитьЗначенияСвойств(СтрокаДерева, СтрокаТаблицы);
*/
			/*//	КонецЦикла; 
*/
			/*//	
*/
			/*//	Возврат ИтоговаяТаблица;
*/
			/*//КонецЕсли;
*/
			//ТаблицаГруппировок = ТаблицаРезультатов.Скопировать();
			//ТаблицаГруппировок.Свернуть(ГруппировочныеКолонки,КолонкиИтогов);
			//ЗначенияОтбора = Новый Структура(ГруппировочныеКолонки);
			if(true/*НЕ ПустаяСтрока(ГруппировочныеКолонки)*/)
			{
				//ТаблицаРезультатов.Индексы.Добавить(ГруппировочныеКолонки);
			}
			return null;
		}
		//Возвращает представление вида операции платежного документа
		//

		public object ВидОперацииДДС(/*СтруктураШапкиДокумента*/)
		{
			/*//
*/
			//ПредставлениеВида = "";
			//ВидОперации = СтруктураШапкиДокумента.ВидОперации;
			if(true/*(ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам) ИЛИ
		(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам)*/)
			{
				//ПредставлениеВида = "ОплатаОтПокупателя";
			}
			return null;
		}
		//Получить курс по документу оплаты (используется при зачете аванса поставщику
		//

		public object ОпределитьКурсПоДокументу(/*Договор, Сделка, РасчетныйДокумент*/)
		{
			//Курс = 1;
			if(true/*НЕ ЗначениеЗаполнено(РасчетныйДокумент)*/)
			{
			}
			if(true/*(ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) И (ЗначениеЗаполнено(Договор))*/)
			{
				if(true/*Договор.РасчетыВУсловныхЕдиницах*/)
				{
					//МетаданныеДокумента = РасчетныйДокумент.Метаданные();
					if(true/*ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаПлатежа", МетаданныеДокумента, "РасшифровкаПлатежа") И
				ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СуммаВзаиморасчетов", МетаданныеДокумента, "РасшифровкаПлатежа") И
				ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ДоговорКонтрагента", МетаданныеДокумента, "РасшифровкаПлатежа") И
				ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("Сделка", МетаданныеДокумента, "РасшифровкаПлатежа")*/)
					{
						//Сумма = 0;
						//СуммаВзаиморасчетов = 0;
						//Курс = ?(СуммаВзаиморасчетов = 0, 1, Сумма/СуммаВзаиморасчетов);
					}
				}
			}
			return null;
		}
		//Заменяет пустые ссылки в таблице фильтров на значения "Неопределено"
		//

		public void ОбработатьТаблицуФильтров(/*ТаблицаФильтров*/)
		{
		}
		//Возвращает реквизиты первичного документа для занесения в графу 2 КУДиР
		//

		public object РеквизитыПервичногоДокумента(/*Документ, ТЧ = "", Строка = 0, УказыватьВид = Ложь*/)
		{
			//НомерНаПечать = "";
			//ДатаНаПечать = "";
			//МетаданныеДокумента = Документ.Метаданные();
			/*//Проверим дату и номер первичного документа в табличной части
*/
			if(true/*(ЗначениеЗаполнено(ТЧ)) и (Строка > 0)*/)
			{
				if(true/*ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("НомерВходящегоДокумента", МетаданныеДокумента, ТЧ) И
			ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ДатаВходящегоДокумента", МетаданныеДокумента, ТЧ)*/)
				{
					if(true/*НЕ Документ[ТЧ].Количество() < Строка-1*/)
					{
						//НомерНаПечать = Документ[ТЧ][Строка-1].НомерВходящегоДокумента;
						//ДатаНаПечать = Формат(Документ[ТЧ][Строка-1].ДатаВходящегоДокумента, "ДФ=дд.ММ.гггг");
					}
				}
			}
			/*//Проверим дату и номер первичного документа в шапке
*/
			if(true/*НЕ ЗначениеЗаполнено(НомерНаПечать) И НЕ ЗначениеЗаполнено(ДатаНаПечать)*/)
			{
				if(true/*МетаданныеДокумента.Реквизиты.Найти("НомерВходящегоДокумента") <> Неопределено И
			МетаданныеДокумента.Реквизиты.Найти("ДатаВходящегоДокумента") <> Неопределено*/)
				{
					//НомерНаПечать = Документ.НомерВходящегоДокумента;
					//ДатаНаПечать = Формат(Документ.ДатаВходящегоДокумента, "ДФ=дд.ММ.гггг");
				}
			}
			/*//Если дата и номер первичного документа не указаны или не заполнены, используем дату и номер регистрации
*/
			if(true/*НЕ ЗначениеЗаполнено(НомерНаПечать)*/)
			{
				//НомерНаПечать = ОбщегоНазначения.ПолучитьНомерНаПечать(Документ);
			}
			if(true/*НЕ ЗначениеЗаполнено(ДатаНаПечать)*/)
			{
				//ДатаНаПечать = Формат(Документ.Дата, "ДФ=дд.ММ.гггг");
			}
			//РеквизитыПервичногоДокумента = "№ "+ НомерНаПечать + " от " + ДатаНаПечать;
			if(true/*УказыватьВид*/)
			{
				//РеквизитыПервичногоДокумента = МетаданныеДокумента.Синоним + " " + РеквизитыПервичногоДокумента;
			}
			return null;
		}
		//Определяет применяется ли упрощенная система налогообложения
		//

		public object ПрименениеУСН(/*Организация, Знач Дата*/)
		{
			/*//~
*/
			if(true/*НЕ ЗначениеЗаполнено(Организация)*/)
			{
			}
			if(true/*НЕ ЗначениеЗаполнено(Дата)*/)
			{
				//Дата = ТекущаяДата();
			}
			//УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
			//Возврат ?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), Ложь, (УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная));
			return null;
		}
		//Определяет применяется ли упрощенная система налогообложения
		//

		public object ПрименениеУСНДоходы(/*Организация, Знач Дата*/)
		{
			/*//~
*/
			if(true/*НЕ ЗначениеЗаполнено(Организация)*/)
			{
			}
			if(true/*НЕ ЗначениеЗаполнено(Дата)*/)
			{
				//Дата = ТекущаяДата();
			}
			//УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
			//ПрименяетсяУСН = ?(НЕ ЗначениеЗаполнено(УчетнаяПолитика), Ложь, (УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная));
			if(true/*НЕ (ПрименяетсяУСН)*/)
			{
			}
			if(true/*УчетнаяПолитика.ОбъектНалогообложенияУСН = Перечисления.ОбъектыНалогообложенияПоУСН.Доходы*/)
			{
			}
			return null;
		}
		//Возвращает новый статус оплаты расхода, полученный из текущего статуса
		//переданным событием

		public object ПолучитьНовыйСтатусОплаты(/*СтруктураШапкиДокумента, Расход, ТекСтатус, Событие = "Оплата", ПризнаватьРасход = Ложь*/)
		{
			/*//
*/
			//НовыйСтатус = ТекСтатус;
			//РасходыПоОплате = Ложь;
			//РасходыПоОтгрузке = Ложь;
			if(true/*ЗначениеЗаполнено(Расход.СчетУчета) И Расход.ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура*/)
			{
				//ТоварыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
				//РасходыПоОтгрузке = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
				//МатериалыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
				/*ЭтоТовар = ((Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.ТоварыОтгруженные)) ИЛИ 
					(Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Товары)));*/
				//ЭтоМатериал = Расход.СчетУчета.ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный.Материалы);
				//РасходыПоОплате = ((ТоварыПоОплате И ЭтоТовар) ИЛИ (МатериалыПоОплате И ЭтоМатериал));
			}
			/*//~//
*/
			if(true/*(Событие = "ВПроизводство") И (СтруктураШапкиДокумента.ПорядокПризнанияМатериальныхРасходов <> Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоФактуВыпускаПродукции)*/)
			{
				//Событие = "Списание";
			}
			/*//~\\
*/
			if(true/*Событие = "Оплата"*/)
			{
				if(true/*ТекСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено*/)
				{
					if(true/*РасходыПоОплате*/)
					{
						if(true/*Расход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются*/)
						{
							//НовыйСтатус = Перечисления.СтатусыРасходовУСН.НеСписаноПринято;
							//ПризнаватьРасход = Истина;
						}
					}
					/*//~//
*/
				}
			}
			return null;
		}
		//Возвращает текущий статус отражаения в НУ на основании комбинации двух статусов
		//поступления и списания

		public object ПолучитьКомбнациюСтатусовОтражениеВНУ(/*Статус1, Статус2*/)
		{
			//СписокСтатусов = Новый СписокЗначений;
			//СписокСтатусов.Добавить(Статус1);
			//СписокСтатусов.Добавить(Статус2);
			if(true/*НЕ СписокСтатусов.НайтиПоЗначению(Перечисления.ОтражениеВУСН.ПустаяСсылка()) = Неопределено*/)
			{
			}
			return null;
		}
		//Собирает таблицы прихода и расхода в единую таблицу движений регистров
		//Возвращает структуру, состоящую из трех таблиц (движения по трем регистрам

		public object СобратьТаблицыДвижений(/*СтруктураРасходов, ТаблицаВзаиморасчетов = Неопределено, ДопТаблицаРасходов = Неопределено, ДопСтруктураРасходов = Неопределено*/)
		{
			//ТаблицаКорректировкиРасход = СтруктураРасходов.ТаблицаРасход;
			//ТаблицаКорректировкиПриход = СтруктураРасходов.ТаблицаПриход;
			//ТаблицаПризнанныхРасходов  = СтруктураРасходов.ТаблицаПринятых;
			if(true/*НЕ ТаблицаКорректировкиПриход.Колонки.Найти("СтатусСписания") = Неопределено*/)
			{
				//ТаблицаКорректировкиПриход.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.ПустаяСсылка(), "СтатусСписания");
			}
			if(true/*ТаблицаВзаиморасчетов = Неопределено*/)
			{
				if(true/*НЕ ДопСтруктураРасходов = Неопределено*/)
				{
					//ТаблицаВзаиморасчетов = ДопСтруктураРасходов.ВзаиморасчетыРасход.СкопироватьКолонки();
				}
			}
			if(true/*НЕ ДопСтруктураРасходов = Неопределено*/)
			{
				//ТаблицаРезультат = ДопСтруктураРасходов.РасходыУСН.Скопировать();
			}
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		//Определяет долю выручки, не включаемую в доходы разделяя ее на выручку комитента
		//и выручку по деятельности ЕНВД

		public object ДоляЕНВДиКомиссии(/*СтруктураШапкиДокумента, ТаблицаСписанныхПартий = Неопределено, ДвиженияРегистров = Неопределено*/)
		{
			/*//
*/
			//ВыручкаВсего = 0;
			//ВыручкаЕНВД = 0;
			//ВыручкаКомиссии = 0;
			//МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();
			//ИмяВидаДокумента = МетаданныеДокумента.Имя;
			/*//В товарах
*/
			if(true/*(НЕ ТаблицаСписанныхПартий = НЕОПРЕДЕЛЕНО) И
		(НЕ МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") = НЕОПРЕДЕЛЕНО)*/)
			{
				if(true/*УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата)
			И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПринадлежностьНоменклатуры", МетаданныеДокумента, "Товары")*/)
				{
					//Запрос = Новый Запрос;
					//Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
					//Всего = 0;
					/*Запрос.Текст = "
			|ВЫБРАТЬ
			|	Реализация.СчетДоходовБУ,
			|	Реализация.ПринадлежностьНоменклатуры,
			|	Сумма(Реализация.Сумма) КАК Сумма
			|ИЗ
			|	Документ."+ИмяВидаДокумента+".Товары КАК Реализация
			|
			|ГДЕ
			|	Реализация.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	Реализация.СчетДоходовБУ,
			|	Реализация.ПринадлежностьНоменклатуры";*/
					//Выборка = Запрос.Выполнить().Выбрать();
					while(true/*Выборка.Следующий()*/)
					{
						//ВыручкаВсего = ВыручкаВсего + Выборка.Сумма;
						if(true/*Выборка.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый*/)
						{
							//ВыручкаКомиссии = ВыручкаКомиссии + Выборка.Сумма;
						}
					}
					//;;
				}
			}
			/*//В услугах
*/
			if(true/*ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("СчетДоходовБУ", МетаданныеДокумента, "Услуги")*/)
			{
				//Запрос = Новый Запрос;
				//Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
				//Всего = 0;
				/*Запрос.Текст = "
		|ВЫБРАТЬ
		|	Реализация.СчетДоходовБУ,
		|	Сумма(Реализация.Сумма) КАК Сумма
		|ИЗ
		|	Документ."+ИмяВидаДокумента+".Услуги КАК Реализация
		|
		|ГДЕ
		|	Реализация.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Реализация.СчетДоходовБУ";*/
				//Выборка = Запрос.Выполнить().Выбрать();
				while(true/*Выборка.Следующий()*/)
				{
					//ВыручкаВсего = ВыручкаВсего + Выборка.Сумма;
					if(true/*ОтноситсяКДеятельностиЕНВД(Выборка.СчетДоходовБУ)*/)
					{
						//ВыручкаЕНВД = ВыручкаЕНВД + Выборка.Сумма;
					}
				}
				//;;
			}
			/*//В услугах по переработке
*/
			if(true/*НЕ МетаданныеДокумента.ТабличныеЧасти.Найти("Продукция") = НЕОПРЕДЕЛЕНО*/)
			{
				//Запрос = Новый Запрос;
				//Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
				//Всего = 0;
				/*Запрос.Текст = "
		|ВЫБРАТЬ
		|	Реализация.СчетДоходовБУ,
		|	Сумма(Реализация.Сумма) КАК Сумма
		|ИЗ
		|	Документ."+ИмяВидаДокумента+".Продукция КАК Реализация
		|
		|ГДЕ
		|	Реализация.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	Реализация.СчетДоходовБУ";*/
				//Выборка = Запрос.Выполнить().Выбрать();
				while(true/*Выборка.Следующий()*/)
				{
					//ВыручкаВсего = ВыручкаВсего + Выборка.Сумма;
					if(true/*ОтноситсяКДеятельностиЕНВД(Выборка.СчетДоходовБУ)*/)
					{
						//ВыручкаЕНВД = ВыручкаЕНВД + Выборка.Сумма;
					}
				}
				//;;
			}
			//СтруктраВыручки = Новый Структура("Всего, ЕНВД, Комиссия", ВыручкаВсего, ВыручкаЕНВД, ВыручкаКомиссии);
			return null;
		}
		//Определяет долю выручки, не включаемую в доходы разделяя ее на выручку комитента
		//и выручку по деятельности ЕНВД

		public object ДоляЕНВДиКомиссииВозврат(/*СтруктураШапкиДокумента, ТаблицаСписанныхПартий = Неопределено, ДвиженияРегистров = Неопределено*/)
		{
			/*//
*/
			//ВыручкаВсего = 0;
			//ВыручкаЕНВД = 0;
			//ВыручкаКомиссии = 0;
			//ТаблицаВозврата = Новый ТаблицаЗначений();
			//ТаблицаВозврата.Колонки.Добавить("Всего");
			//ТаблицаВозврата.Колонки.Добавить("ЕНВД");
			//ТаблицаВозврата.Колонки.Добавить("Комиссия");
			//ТаблицаВозврата.Колонки.Добавить("ДокументПартии");
			//МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();
			//ИмяВидаДокумента = МетаданныеДокумента.Имя;
			/*//В товарах
*/
			if(true/*(НЕ ТаблицаСписанныхПартий = НЕОПРЕДЕЛЕНО) И
		(НЕ МетаданныеДокумента.ТабличныеЧасти.Найти("Товары") = НЕОПРЕДЕЛЕНО)*/)
			{
				if(true/*УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(СтруктураШапкиДокумента.Дата)
			И ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ПринадлежностьНоменклатуры", МетаданныеДокумента, "Товары")*/)
				{
					//Запрос = Новый Запрос;
					//Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
					//Всего = 0;
					/*Запрос.Текст = "
			|ВЫБРАТЬ
			|	Реализация.СчетДоходовБУ,
			|	Реализация.ДокументПартии,
			|	Реализация.ПринадлежностьНоменклатуры,
			|	Сумма(Реализация.Сумма) КАК Сумма
			|ИЗ
			|	Документ."+ИмяВидаДокумента+".Товары КАК Реализация
			|
			|ГДЕ
			|	Реализация.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	Реализация.СчетДоходовБУ,
			|	Реализация.ДокументПартии,
			|	Реализация.ПринадлежностьНоменклатуры";*/
					//Выборка = Запрос.Выполнить().Выбрать();
					while(true/*Выборка.Следующий()*/)
					{
						//СтрокаВозврата = ТаблицаВозврата.Добавить();
						//СтрокаВозврата.ДокументПартии = Выборка.ДокументПартии;
						//СтрокаВозврата.Всего = Выборка.Сумма;
						//СтрокаВозврата.Комиссия = 0;
						//СтрокаВозврата.ЕНВД = 0;
						if(true/*Выборка.ПринадлежностьНоменклатуры = Перечисления.ПринадлежностьНоменклатуры.Принятый*/)
						{
							//СтрокаВозврата.Комиссия = Выборка.Сумма;
						}
					}
					//;;
				}
			}
			//ТаблицаВозврата.Свернуть("ДокументПартии", "Всего, ЕНВД, Комиссия");
			return null;
		}
		//Дополняет таблицу списанных партий колонкой, с новым статусом списания и количеством
		//списанным по новому статусу

		public void ЗаполнитьОтражениеВНУпоСписанию(/*СтруктураШапкиДокумента, ТаблицаСписанныхПартий, ВидОперации*/)
		{
			//ВыручкаВсего = 0;
			//ВыручкаЕНВД = 0;
			//ВыручкаКомиссии = 0;
			//МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();
			//ИмяВидаДокумента = МетаданныеДокумента.Имя;
			if(true/*ТаблицаСписанныхПартий.Колонки.Найти("СтатусСписания") = Неопределено*/)
			{
				//ТаблицаСписанныхПартий.Колонки.Добавить("СтатусСписания");
			}
			if(true/*ТаблицаСписанныхПартий.Колонки.Найти("КоличествоПоСтатусуСписания") = Неопределено*/)
			{
				//ТаблицаСписанныхПартий.Колонки.Добавить("КоличествоПоСтатусуСписания");
			}
			//ТаблицаСписанныхПартий.ЗаполнитьЗначения(Перечисления.ОтражениеВУСН.Принимаются, "СтатусСписания");
			//ТаблицаСписанныхПартий.ЗаполнитьЗначения(0, "КоличествоПоСтатусуСписания");
			//ТабличныеЧасти = Новый Массив;
			if(true/*НЕ МетаданныеДокумента.ТабличныеЧасти.Найти("ИспользованныеМатериалы") = НЕОПРЕДЕЛЕНО*/)
			{
				//ТабличныеЧасти.Добавить("ИспользованныеМатериалы");
			}
			if(true/*ВидОперации = "ВозвратПоставщику"*/)
			{
			}
			//ЕстьСерия 			= НЕ (ТаблицаСписанныхПартий.Колонки.Найти("СерияНоменклатуры") = Неопределено);
			//ЕстьХарактеристика 	= НЕ (ТаблицаСписанныхПартий.Колонки.Найти("ХарактеристикаНоменклатуры") = Неопределено);
			//Переданные 			= (ЕстьХарактеристика И (НЕ ЕстьСерия));
		}
		//Формирует таблицы движений регистра "Расходы при УСН" по таблице остатков расходов
		//на заданную сумму по установленному виду операции

		public object ИзменениеСтатусовРасходов(/*СтруктураШапкиДокумента, ТаблицаРасходов, Сумма = 0, ВидОперации = "Оплата", КонтролироватьСумму = Истина, ДокументОплаты = Неопределено, ВходящаяСтруктура = Неопределено*/)
		{
			//ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
			//ТаблицаКорректировкиРасход = ТаблицаРасходов.СкопироватьКолонки();
			//ТаблицаКорректировкиПриход = ТаблицаРасходов.СкопироватьКолонки();
			//ТаблицаПризнанныхРасходов  = ТаблицаРасходов.СкопироватьКолонки();
			if(true/*ТаблицаРасходов.Колонки.Найти("НДС") = Неопределено*/)
			{
				//ТаблицаРасходов.Колонки.Добавить("НДС");
				//ТаблицаРасходов.ЗаполнитьЗначения(0, "НДС");
			}
			if(true/*ТаблицаРасходов.Колонки.Найти("Количество") = Неопределено*/)
			{
				//ТаблицаРасходов.Колонки.Добавить("Количество");
				//ТаблицаРасходов.ЗаполнитьЗначения(0, "Количество");
			}
			if(true/*ТаблицаРасходов.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено*/)
			{
				//ТаблицаРасходов.Колонки.Добавить("РеквизитыДокументаОплаты");
			}
			if(true/*ВидОперации = "Оплата"*/)
			{
				if(true/*ТаблицаКорректировкиПриход.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено*/)
				{
					//ТаблицаКорректировкиПриход.Колонки.Добавить("РеквизитыДокументаОплаты");
				}
				if(true/*ТаблицаПризнанныхРасходов.Колонки.Найти("РеквизитыДокументаОплаты") = Неопределено*/)
				{
					//ТаблицаПризнанныхРасходов.Колонки.Добавить("РеквизитыДокументаОплаты");
				}
				//ТаблицаКорректировкиПриход.ЗаполнитьЗначения(?(ЗначениеЗаполнено(ДокументОплаты), ДокументОплаты, СтруктураШапкиДокумента.Ссылка),"РеквизитыДокументаОплаты");
				//ТаблицаПризнанныхРасходов.ЗаполнитьЗначения(?(ЗначениеЗаполнено(ДокументОплаты), ДокументОплаты, СтруктураШапкиДокумента.Ссылка),"РеквизитыДокументаОплаты");
			}
			if(true/*ЗначениеЗаполнено(ВходящаяСтруктура)*/)
			{
				if(true/*ВходящаяСтруктура.ТаблицаПриход.Количество() > 0*/)
				{
				}
				if(true/*ВходящаяСтруктура.ТаблицаРасход.Количество() > 0*/)
				{
				}
				if(true/*ВходящаяСтруктура.ТаблицаПринятых.Количество() > 0*/)
				{
				}
				//ИтоговаяСтруктура = ВходящаяСтруктура;
			}
			return null;
		}

		public void ПроверитьСторноРасходовПОСписаню(/*СтруктураШапкиДокумента, НомерСтрокиРасходов, ВыделятьНДСУСНДокумент,
											ТаблицаКорректировкиРасход, ТаблицаКорректировкиПриход, ТаблицаПризнанныхРасходов,
											СтрокаКорректировкиРасход, СтрокаКорректировкиПриход*/)
		{
			if(true/*СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.НеПринимаются*/)
			{
			}
			//ВыделятьНДСУСН = ВыделятьНДСУСНДокумент;
			/*//ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
*/
			if(true/*(СтрокаКорректировкиПриход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Распределяются) И 
		(СтрокаКорректировкиРасход.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются)*/)
			{
				/*//В части входящего НДС
*/
				if(true/*(ВыделятьНДСУСН) И (СтрокаКорректировкиПриход.НДС > 0) И 
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.ОС) И
			(СтрокаКорректировкиРасход.ВидРасхода <> Перечисления.ВидыРасходовУСН.НМА) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплачено) И
			(СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН <> Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем)*/)
				{
					/*//Сторно
*/
					//СтрокаНДС = ТаблицаПризнанныхРасходов.Добавить();
					//ЗаполнитьЗначенияСвойств(СтрокаНДС, СтрокаКорректировкиРасход);
					//СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
					//СтрокаНДС.Сумма 		= - СтрокаКорректировкиПриход.НДС;
					//СтрокаНДС.Количество	= 0;
					//СтрокаНДС.НДС			= 0;
					/*//Распределяемые расходы
*/
					//СтрокаНДС = ТаблицаКорректировкиПриход.Добавить();
					//ЗаполнитьЗначенияСвойств(СтрокаНДС, СтрокаКорректировкиПриход);
					//СтрокаНДС.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено;
					//СтрокаНДС.ВидРасхода	= Перечисления.ВидыРасходовУСН.НДС;
					//СтрокаНДС.Сумма 		= СтрокаКорректировкиПриход.НДС;
					//СтрокаНДС.Количество	= 0;
					//СтрокаНДС.НДС			= 0;
				}
				if(true/*СтрокаКорректировкиРасход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеСписаноПринято*/)
				{
					/*//Сторно
*/
					//СтрокаСторно = ТаблицаПризнанныхРасходов.Добавить();
					//ЗаполнитьЗначенияСвойств(СтрокаСторно, СтрокаКорректировкиРасход);
					//СтрокаСторно.Сумма 		= - СтрокаКорректировкиПриход.Сумма;
					//СтрокаСторно.Количество	= - СтрокаКорректировкиПриход.Количество;
					//СтрокаСторно.НДС		= - СтрокаКорректировкиПриход.НДС;
					/*//Распределяемые расходы
*/
					//СтрокаКорректировкиПриход.СтатусыОплатыРасходовУСН = Перечисления.СтатусыРасходовУСН.НеРаспределено;
				}
			}
		}
		//Отражает прочее (настроенное вручную) движение денежных средств в КУДиР
		//

		public void ПрочееДДС(/*Документ*/)
		{
			//Период = ?(Документ.Метаданные().Реквизиты.Найти("ДатаОплаты") = Неопределено, Документ.Дата, Документ.ДатаОплаты);
			//КУДиР = Документ.Движения.КнигаУчетаДоходовИРасходов;
			if(true/*(Документ.Графа4_УСН = 0) И
		(Документ.Графа5_УСН = 0) И
		(Документ.Графа6_УСН = 0) И
		(Документ.Графа7_УСН = 0) И
		(Документ.НДС_УСН = 0)*/)
			{
			}
			//МетаданныеДокумента = Документ.Метаданные();
			if(true/*(МетаданныеДокумента.Реквизиты.Найти("ОтражатьВНалоговомУчете") <> Неопределено) И НЕ Документ.ОтражатьВНалоговомУчете*/)
			{
			}
			//СтрокаКниги  = КУДиР.Добавить();
			//СтрокаКниги.Организация		= Документ.Организация;
			//СтрокаКниги.СтрокаДокумента = 0;
			//СтрокаКниги.Период			= Период;
			//СтрокаКниги.Графа4			= Документ.Графа4_УСН;
			if(true/*Документ.ДоходыЕНВД_УСН*/)
			{
				//СтрокаКниги.ДоходЕНВД = Документ.Графа4_УСН - Документ.Графа5_УСН;
			}
			//СтрокаКниги.Графа6 = Документ.Графа6_УСН;
			if(true/*Документ.РасходыЕНВД_УСН*/)
			{
				//Расход = Документ.Движения.РасходыПриУСН;
				//СтрокаРасхода = Расход.ДобавитьПриход();
				//СтрокаРасхода.Период					= Период;
				//СтрокаРасхода.Организация 				= Документ.Организация;
				//СтрокаРасхода.ОтражениеВУСН 			= Перечисления.ОтражениеВУСН.Распределяются;
				//СтрокаРасхода.СтатусыОплатыРасходовУСН 	= Перечисления.СтатусыРасходовУСН.НеРаспределено;
				//СтрокаРасхода.РасчетныйДокумент 		= Документ.Ссылка;
				//СтрокаРасхода.Сумма 					= Документ.Графа7_УСН;
				//СтрокаРасхода.НДС 						= Документ.НДС_УСН;
				//СтрокаРасхода.Валюта 					= глЗначениеПеременной("ВалютаРегламентированногоУчета");
				//Расход.Записать();
			}
			//СтрокаКниги.Содержание = Документ.Содержание_УСН;
			//СтрокаКниги.РеквизитыПервичногоДокумента = РеквизитыПервичногоДокумента(Документ);
			//КУДиР.Записать();
		}
		//Собирает таблицу остатков взаиморасчетов по установленным фильтрам
		//Таблица фильтров содержит колонки:
		// - Имя поля (строка),
		// - Значение поля (произвольный),
		// - Условие (строка)

		public object ВыполнитьЗапросПоВзаиморасчетамУСН(/*Граница, Организация, ТаблицаФильтров, ДополнитьДоходами = Ложь*/)
		{
			//ОбработатьТаблицуФильтров(ТаблицаФильтров);
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("Организация", Организация);
			//Запрос.УстановитьПараметр("Граница",	 Граница);
			/*Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыУСНОстатки.Организация,
	|	ВзаиморасчетыУСНОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыУСНОстатки.Работник,
	|	ВзаиморасчетыУСНОстатки.Сделка,
	|	ВзаиморасчетыУСНОстатки.РасчетныйДокумент,
	|	ВзаиморасчетыУСНОстатки.РасчетныйДокумент.Дата КАК РасчетныйДокументДата,
	|	СУММА(ВзаиморасчетыУСНОстатки.СуммаВзаиморасчетовОстаток) КАК СуммаВзаиморасчетов,
	|	СУММА(ВзаиморасчетыУСНОстатки.ДоходЕНВДОстаток) КАК ДоходЕНВД,
	|	СУММА(ВзаиморасчетыУСНОстатки.ДоходКомитентаОстаток) КАК ДоходКомитента,
	|	СУММА(КнигаУчетаДоходовИРасходов.Графа5Оборот) КАК Графа5,
	|	СУММА(КнигаУчетаДоходовИРасходов.Графа4Оборот) КАК Графа4
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыУСН.Остатки(&Граница, Организация = &Организация";*/
			/*Текст = Текст + ") КАК ВзаиморасчетыУСНОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.КнигаУчетаДоходовИРасходов.Обороты(,,Регистратор,Организация = &Организация) КАК КнигаУчетаДоходовИРасходов
	|		ПО ВзаиморасчетыУСНОстатки.РасчетныйДокумент = КнигаУчетаДоходовИРасходов.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	ВзаиморасчетыУСНОстатки.Организация,
	|	ВзаиморасчетыУСНОстатки.ДоговорКонтрагента,
	|	ВзаиморасчетыУСНОстатки.Работник,
	|	ВзаиморасчетыУСНОстатки.Сделка,
	|	ВзаиморасчетыУСНОстатки.РасчетныйДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасчетныйДокументДата,
	|	ДоходКомитента УБЫВ,
	|	ДоходЕНВД УБЫВ";*/
			//Запрос.Текст = Текст;
			return null;
		}
		//Собирает таблицу остатков расходов по установленным фильтрам
		//Таблица фильтров содержит колонки:
		// - Имя поля (строка),
		// - Значение поля (произвольный),
		// - Условие (строка)

		public object ВыполнитьЗапросПоРасходам(/*Граница, Организация, ТаблицаФильтров*/)
		{
			//ОбработатьТаблицуФильтров(ТаблицаФильтров);
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("Организация", Организация);
			//Запрос.УстановитьПараметр("Граница",	 Граница);
			/*Текст = 
	"ВЫБРАТЬ
	|	РасходыУСН.Организация,
	|	РасходыУСН.ВидРасхода,
	|	РасходыУСН.ЭлементРасхода,
	|	РасходыУСН.СчетУчета,
	|	РасходыУСН.Валюта,
	|	РасходыУСН.ДоговорКонтрагента,
	|	РасходыУСН.РасчетныйДокумент,
	|	РасходыУСН.СтатусыПартийУСН,
	|	РасходыУСН.Партия,
	|	РасходыУСН.ОтражениеВУСН,
	|	РасходыУСН.СтатусыОплатыРасходовУСН,
	|	РасходыУСН.СтатусыОплатыРасходовУСН.Порядок КАК СтатусыОплатыРасходовУСНПорядок,
	|	СУММА(РасходыУСН.КоличествоОстаток) КАК Количество,
	|	СУММА(РасходыУСН.СуммаОстаток) КАК Сумма,
	|	СУММА(РасходыУСН.НДСОстаток) КАК НДС,
	|	РасходыУСН.НомерСтрокиДокумента КАК НомерСтрокиДокумента,
	|	РасходыУСН.РеквизитыДокументаОплаты КАК РеквизитыДокументаОплаты,
	|	РасходыУСН.Партия.Дата КАК ПартияДата,
	|	РасходыУСН.РасчетныйДокумент.Дата КАК РасчетныйДокументДата
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН.Остатки(&Граница, Организация = &Организация";*/
			/*Текст = Текст + ") КАК РасходыУСН
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыУСН.Организация,
	|	РасходыУСН.ВидРасхода,
	|	РасходыУСН.ЭлементРасхода,
	|	РасходыУСН.СчетУчета,
	|	РасходыУСН.Валюта,
	|	РасходыУСН.ДоговорКонтрагента,
	|	РасходыУСН.РасчетныйДокумент,
	|	РасходыУСН.СтатусыПартийУСН,
	|	РасходыУСН.Партия,
	|	РасходыУСН.ОтражениеВУСН,
	|	РасходыУСН.СтатусыОплатыРасходовУСН,
	|	РасходыУСН.НомерСтрокиДокумента,
	|	РасходыУСН.РеквизитыДокументаОплаты
	|
	|УПОРЯДОЧИТЬ ПО
	|	СтатусыОплатыРасходовУСНПорядок,
	|	ПартияДата,
	|	РасчетныйДокументДата,
	|	НомерСтрокиДокумента";*/
			//Запрос.Текст = Текст;
			return null;
		}
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ДВИЖЕНИЯ РЕГИСТРОВ
		//Добавить движение по регистру взаиморасчетов УСН
		//

		public void ДвижениеВзаиморасчетовУСН(/*ТаблицаДвижений, Организация, Договор = Неопределено, РасчетныйДокумент, Сделка, СуммаДокумента, СуммаЕНВД=0, СуммаКомиссии=0, Работник = Неопределено*/)
		{
			//Движение = ТаблицаДвижений.Добавить();
			//Движение.Организация = Организация;
			//Движение.ДоговорКонтрагента = Договор;
			//Движение.РасчетныйДокумент 	= РасчетныйДокумент;
			if(true/*ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")*/)
			{
				if(true/*НЕ Договор.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом*/)
				{
					//Движение.Сделка = Сделка;
				}
				if(true/*(Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом)*/)
				{
					//Движение.РасчетныйДокумент = Неопределено;
				}
			}
			//Движение.Работник 			= Работник;
			//Движение.СуммаВзаиморасчетов = СуммаДокумента;
			//Движение.ДоходЕНВД 			= СуммаЕНВД;
			//Движение.ДоходКомитента 	= СуммаКомиссии;
		}

		public void ВыделитьБезналичнуюОплату(/*СтруктураШапкиДокумента, ТаблицаДвижений, СуммаВзаиморасчетов, СуммаЕНВД, СуммаКомиссии*/)
		{
			if(true/*(НЕ СтруктураШапкиДокумента.Ссылка.Метаданные().ТабличныеЧасти.Найти("ОплатаПлатежнымиКартами") = НЕОПРЕДЕЛЕНО) И
		(НЕ СтруктураШапкиДокумента.Ссылка.Метаданные().ТабличныеЧасти.Найти("ОплатаБанковскимиКредитами") = НЕОПРЕДЕЛЕНО)*/)
			{
				//Запрос = Новый Запрос();
				//Запрос.УстановитьПараметр("Ссылка", СтруктураШапкиДокумента.Ссылка);
				/*Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахОплата.ДоговорВзаиморасчетовБанкаКредитора КАК ДоговорКонтрагента,
		|	СУММА(ОтчетОРозничныхПродажахОплата.Сумма) КАК СуммаОплаты
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.ОплатаБанковскимиКредитами КАК ОтчетОРозничныхПродажахОплата
		|ГДЕ
		|	ОтчетОРозничныхПродажахОплата.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетОРозничныхПродажахОплата.ДоговорВзаиморасчетовБанкаКредитора
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Ссылка.ДоговорВзаиморасчетовЭквайрера,
		|	СУММА(ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Сумма)
		|ИЗ
		|	Документ.ОтчетОРозничныхПродажах.ОплатаПлатежнымиКартами КАК ОтчетОРозничныхПродажахОплатаПлатежнымиКартами
		|ГДЕ
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ОтчетОРозничныхПродажахОплатаПлатежнымиКартами.Ссылка.ДоговорВзаиморасчетовЭквайрера";*/
				//Результат = Запрос.Выполнить().Выбрать();
				if(true/*ТаблицаДвижений.Колонки.Количество() = 0*/)
				{
					//ТаблицаДвижений = РегистрыНакопления.ВзаиморасчетыУСН.СоздатьНаборЗаписей().ВыгрузитьКолонки();
				}
				if(true/*ТаблицаДвижений.Колонки.Найти("ВидДвижения") = Неопределено*/)
				{
					//ТаблицаДвижений.Колонки.Добавить("ВидДвижения");
				}
				while(true/*Результат.Следующий()*/)
				{
					//КоэффБН = ?(СуммаВзаиморасчетов = 0, 0, Результат.СуммаОплаты / СуммаВзаиморасчетов);
					//СуммаВзаиморасчетов = СуммаВзаиморасчетов - Результат.СуммаОплаты;
					//СуммаЕНВД_БН = Окр(КоэффБН*СуммаЕНВД, 2, 1);
					//СуммаЕНВД = СуммаЕНВД - СуммаЕНВД_БН;
					//СуммаКомиссии_БН = Окр(КоэффБН*СуммаКомиссии, 2, 1);
					//СуммаКомиссии = СуммаКомиссии - СуммаКомиссии_БН;
					//ДвижениеВзаиморасчетовУСН(ТаблицаДвижений, СтруктураШапкиДокумента.Организация, Результат.ДоговорКонтрагента, СтруктураШапкиДокумента.Ссылка, СтруктураШапкиДокумента.Ссылка, Результат.СуммаОплаты, СуммаЕНВД_БН, СуммаКомиссии_БН);
					//ТаблицаДвижений[ТаблицаДвижений.Количество()-1].ВидДвижения = ВидДвиженияНакопления.Приход;
				}
				//;;
			}
		}
		//Отражает поступление расходов по регистру расходов УСН
		//

		public void ПоступлениеРасходовУСН(/*СтруктураШапкиДокумента, ТаблицаРасходов, ТаблицаДвижений, ВидРасхода, Договор = Неопределено, СтатусПартии, СуммаВключаетНДС = Истина, ВозвратБезУказанияПартии = Ложь, СторноРасхода = 0*/)
		{
			/*//
*/
			//НС = 0;
			//мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
			//УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
			//СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоНДС",УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС);
			//СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоТоварам",УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам);
			//СтруктураШапкиДокумента.Вставить("ПорядокПризнанияМатериальныхРасходов",УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов);
			//ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
			//Валюта = мВалютаРегламентированногоУчета;
			//ВалютаДокумента = мВалютаРегламентированногоУчета;
			//КурсВзаиморасчетов = 1;
			//КратностьВзаиморасчетов = 1;
			//КурсДокумента = 1;
			//КратностьДокумента = 1;
			//УчетАгентскогоНДС = Ложь;
			if(true/*ЗначениеЗаполнено(Договор) И (ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов"))*/)
			{
				//УчетАгентскогоНДС = Договор.УчетАгентскогоНДС;
			}
			//СтруктураШапкиДокумента.Свойство("ВалютаДокумента", ВалютаДокумента);
			//СтруктураШапкиДокумента.Свойство("КурсВзаиморасчетов", КурсВзаиморасчетов);
			//СтруктураШапкиДокумента.Свойство("КратностьВзаиморасчетов", КратностьВзаиморасчетов);
			//СтруктураШапкиДокумента.Свойство("ВалютаВзаиморасчетов", Валюта);
			//СтруктураШапкиДокумента.Свойство("КурсДокумента", КурсДокумента);
			//СтруктураШапкиДокумента.Свойство("КратностьДокумента", КратностьДокумента);
			//ВалютаДокумента 		= ?(ВалютаДокумента = Неопределено, мВалютаРегламентированногоУчета, ВалютаДокумента);
			//КурсВзаиморасчетов 		= ?(КурсВзаиморасчетов = Неопределено, 1, КурсВзаиморасчетов);
			//КратностьВзаиморасчетов = ?(КратностьВзаиморасчетов = Неопределено, 1, КратностьВзаиморасчетов);
			//Валюта 					= ?(Валюта = Неопределено, ВалютаДокумента, Валюта);
			//КурсДокумента 			= ?(КурсДокумента = Неопределено, 1, КурсДокумента);
			//КратностьДокумента 		= ?(КратностьДокумента = Неопределено, 1, КратностьДокумента);
			if(true/*ВидРасхода = Перечисления.ВидыРасходовУСН.Номенклатура*/)
			{
				//ТоварыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
				//РасходыПоОтгрузке = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
				//МатериалыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
			}
		}
		//Отражает поступление расходов по регистру расходов УСН
		//

		public void ПоступлениеПоПартиямУСН(/*СтруктураШапкиДокумента, ТаблицаРасходов, ТаблицаДвижений, ВидРасхода*/)
		{
			//Склад = Неопределено;
			//СтруктураШапкиДокумента.Свойство("Склад", Склад);
			if(true/*НЕ СтруктураШапкиДокумента.ОтражатьВНалоговомУчетеУСН*/)
			{
			}
		}
		//Отражает событие "списание" по регистру расходов при УСН
		//ТаблицаПартий - таблица движений регистра партионного учета НУ

		public void СписаниеРасходовУСН(/*СтруктураШапкиДокумента, ТаблицаПартий, ДвиженияРегистров, ВидРасхода, Договор, СтатусПартии, ВидОперации = "Списание"*/)
		{
			/*//
*/
			/*//Подготовка наборов фильтров
*/
			//МассивНоменклатуры = ТаблицаПартий.ВыгрузитьКолонку("Номенклатура");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
			//МассивСчетов = ТаблицаПартий.ВыгрузитьКолонку("СчетУчета");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСчетов);
			//МассивПартий = ТаблицаПартий.ВыгрузитьКолонку("ДокументОприходования");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПартий);
			//Статусы = Новый Массив;
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ВидРасхода";
			//Фильтр.ЗначениеПоля	= ВидРасхода;
			//Фильтр.Условие			= "=";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыПартийУСН";
			//Фильтр.ЗначениеПоля	= СтатусПартии;
			//Фильтр.Условие			= "=";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СчетУчета";
			//Фильтр.ЗначениеПоля	= МассивСчетов;
			//Фильтр.Условие			= "В";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ЭлементРасхода";
			//Фильтр.ЗначениеПоля	= МассивНоменклатуры;
			//Фильтр.Условие			= "В";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "Партия";
			//Фильтр.ЗначениеПоля	= МассивПартий;
			//Фильтр.Условие			= "В";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
			//Фильтр.ЗначениеПоля	= Статусы;
			//Фильтр.Условие			= "В";
			/*//Из таблицы расходов выбираем соответствующие партии и элементы расходов
*/
			//ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
			//ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
			//ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");
			/*//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
*/
			/*//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
*/
			//ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , ВидОперации, Ложь);
			if(true/*ВидОперации = "НаРеализацию"*/)
			{
				//ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.НаРеализации,"СтатусыПартийУСН");
			}
			//ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
			//ДвиженияРегистров.Вставить("ТаблицаПриход", ТаблицыДвижений.ТаблицаПриход);
		}
		//Отражает изменения по регистру расходов при УСН не влияющие на статус расхода
		//Такие как изменение счета учета или статуса партии.
		//
		//ТаблицаПартийПриход - таблица движений "Приход" регистра партионного учета НУ
		//ТаблицаПартийРасход - таблица движений "Расход" регистра партионного учета НУ

		public void ПеремещениеРасходовУСН(/*СтруктураШапкиДокумента, ТаблицаПартийПриход, ТаблицаПартийРасход, ДвиженияРегистров, ВидРасхода, Договор, СтатусПартии, ВидОперации = "Списание"*/)
		{
			if(true/*НЕ ТаблицаПартийПриход.Количество() = ТаблицаПартийРасход.Количество()*/)
			{
			}
			/*//Подготовка наборов фильтров
*/
			//МассивНоменклатуры = ТаблицаПартийРасход.ВыгрузитьКолонку("Номенклатура");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
			//МассивСчетов = ТаблицаПартийРасход.ВыгрузитьКолонку("СчетУчета");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСчетов);
			//МассивПартий = ТаблицаПартийРасход.ВыгрузитьКолонку("ДокументОприходования");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПартий);
			//Статусы = Новый Массив;
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ВидРасхода";
			//Фильтр.ЗначениеПоля	= ВидРасхода;
			//Фильтр.Условие			= "=";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыПартийУСН";
			//Фильтр.ЗначениеПоля	= СтатусПартии;
			//Фильтр.Условие			= "=";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СчетУчета";
			//Фильтр.ЗначениеПоля	= МассивСчетов;
			//Фильтр.Условие			= "В";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ЭлементРасхода";
			//Фильтр.ЗначениеПоля	= МассивНоменклатуры;
			//Фильтр.Условие			= "В";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "Партия";
			//Фильтр.ЗначениеПоля	= МассивПартий;
			//Фильтр.Условие			= "В";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
			//Фильтр.ЗначениеПоля	= Статусы;
			//Фильтр.Условие			= "В";
			/*//Из таблицы расходов выбираем соответствующие партии и элементы расходов
*/
			//ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода,Партия, СчетУчета");
			//ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
			/*//Соберем допрасходы для переноса на другую партию/номенклатуру
*/
			if(true/*ВидОперации = "Комплектация"*/)
			{
				/*//Подготовка наборов фильтров
*/
				//МассивНоменклатуры = ТаблицаПартийРасход.ВыгрузитьКолонку("Номенклатура");
				//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
				//МассивПартий = ТаблицаПартийРасход.ВыгрузитьКолонку("ДокументОприходования");
				//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПартий);
				//Статусы = Новый Массив;
				//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
				//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
				//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
				//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);
				/*//Формирование таблицы фильтров
*/
				//ТаблицаФильтров = Новый ТаблицаЗначений;
				//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
				//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
				//ТаблицаФильтров.Колонки.Добавить("Условие");
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля			= "ВидРасхода";
				//Фильтр.ЗначениеПоля	= Перечисления.ВидыРасходовУСН.ДопРасходы;
				//Фильтр.Условие			= "=";
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля			= "ЭлементРасхода";
				//Фильтр.ЗначениеПоля	= МассивНоменклатуры;
				//Фильтр.Условие			= "В";
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля			= "Партия";
				//Фильтр.ЗначениеПоля	= МассивПартий;
				//Фильтр.Условие			= "В";
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
				//Фильтр.ЗначениеПоля	= Статусы;
				//Фильтр.Условие			= "В";
				/*//Из таблицы расходов выбираем соответствующие партии и элементы расходов
*/
				//ТаблицаДопРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
				//ТаблицаДопРасходов.Индексы.Добавить("ЭлементРасхода,Партия");
				//ТаблицаРасчетныхДокументов = ТаблицаДопРасходов.Скопировать();
				//ТаблицаРасчетныхДокументов.Свернуть("ЭлементРасхода, Партия, РасчетныйДокумент", "Количество");
				//ТаблицаДопРасходов.Индексы.Добавить("ЭлементРасхода,Партия,РасчетныйДокумент");
				//ТаблицаРасчетныхДокументов.Индексы.Добавить("ЭлементРасхода,Партия");
			}
			//ТаблицаДляСписания.Колонки.Добавить("СчетПриход");
			//ТаблицаДляСписания.Колонки.Добавить("НоменклатураПриход");
			//ТаблицаДляСписания.Колонки.Добавить("ПартияПриход");
			//ТаблицаДляСписания.Колонки.Добавить("КоличествоПриход");
			/*//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
*/
			//КолПартий = ТаблицаПартийРасход.Количество();
			/*//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
*/
			//ТаблицаКорректировкиРасход = ТаблицаДляСписания.СкопироватьКолонки();
			//ТаблицаКорректировкиПриход = ТаблицаДляСписания.СкопироватьКолонки();
			//ТаблицаПризнанныхРасходов  = ТаблицаДляСписания.СкопироватьКолонки();
			//ТаблицыДвижений = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", ТаблицаКорректировкиПриход, ТаблицаКорректировкиРасход, ТаблицаПризнанныхРасходов);
			if(true/*ВидОперации = "НаРеализацию"*/)
			{
				//ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.НаРеализации,"СтатусыПартийУСН");
			}
			//ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
			//ДвиженияРегистров.Вставить("ТаблицаПриход", ТаблицыДвижений.ТаблицаПриход);
		}
		//Операция зачета аванса поставщику
		//ТаблицаДвижений - Таблица движений приход регистра Расходы УСН

		public void ЗачетАвансаПоставщикуУСН(/*СтруктураШапкиДокумента, ТаблицаДвижений, ДвиженияРегистров, Договор, Сделка, ТаблицаРД, СуммаДокумента, ПриходОтражен = Ложь*/)
		{
			//КЗ = 1;
			/*//Коэффициент знака взаиморасчетов (+1 или -1)
*/
			if(true/*ТаблицаРД.Количество() = 0*/)
			{
				//Строка = ТаблицаРД.Добавить();
				//Строка.ДокументРасчетовСКонтрагентом = Неопределено;
				//Строка.СуммаВзаиморасчетов = СуммаДокумента;
				//Строка.Сделка = Сделка;
			}
			if(true/*(ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")) И (ЗначениеЗаполнено(Договор))*/)
			{
				//УчетПоЗаказам = (Договор.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
				//УчетПоРД = (Договор.ВестиПоДокументамРасчетовСКонтрагентом);
			}
			//МассивРД = ТаблицаРД.ВыгрузитьКолонку("ДокументРасчетовСКонтрагентом");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивРД);
			//МассивСделок = ТаблицаРД.ВыгрузитьКолонку("Сделка");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСделок);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ДоговорКонтрагента";
			//Фильтр.ЗначениеПоля	= Договор;
			//Фильтр.Условие			= "=";
			if(true/*УчетПоЗаказам*/)
			{
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля			= "Сделка";
				//Фильтр.ЗначениеПоля		= МассивСделок;
				//Фильтр.Условие			= "В";
			}
			if(true/*УчетПоРД*/)
			{
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля			= "РасчетныйДокумент";
				//Фильтр.ЗначениеПоля		= МассивРД;
				//Фильтр.Условие			= "В";
			}
			//ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
			//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");
			//СуммаРегл = 0;
			//СуммаОсталосьПогасить = СуммаДокумента;
			//СтрокаРеквизитовПлДок = "";
			//ИтоговаяСтруктура = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", Новый ТаблицаЗначений(), Новый ТаблицаЗначений(), Новый ТаблицаЗначений());
			//ТаблицаРасходов = ТаблицаДвижений.Скопировать();
			if(true/*ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено*/)
			{
				//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
			}
			//ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
			if(true/*НЕ ПриходОтражен*/)
			{
			}
			//ДвиженияРегистров = СобратьТаблицыДвижений(ИтоговаяСтруктура, ТаблицаДвиженияВзаиморасчетов, , ДвиженияРегистров);
		}
		//Операция зачета аванса поставщику
		//ТаблицаДвижений - Таблица движений приход регистра Расходы УСН (сформированная процедурой списание расходов)

		public void ЗачетАвансаОтПокупателяУСН(/*СтруктураШапкиДокумента, ТаблицаДвижений, ДвиженияРегистровВх, ДвиженияРегистров, Договор, Сделка, ТаблицаРД, СуммаДокумента, СуммаЕНВД, СуммаКомиссии, КУДиР*/)
		{
			//КЗ = -1;
			/*//Коэффициент знака взаиморасчетов (+1 или -1)
*/
			if(true/*ТаблицаРД.Количество() = 0*/)
			{
				//Строка = ТаблицаРД.Добавить();
				//Строка.ДокументРасчетовСКонтрагентом = Неопределено;
				//Строка.СуммаВзаиморасчетов = СуммаДокумента;
				//Строка.Сделка = Сделка;
			}
			//УчетПоЗаказам = (Договор.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
			//УчетПоРД = (Договор.ВестиПоДокументамРасчетовСКонтрагентом);
			//МассивРД = ТаблицаРД.ВыгрузитьКолонку("ДокументРасчетовСКонтрагентом");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивРД);
			//МассивСделок = ТаблицаРД.ВыгрузитьКолонку("Сделка");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСделок);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ДоговорКонтрагента";
			//Фильтр.ЗначениеПоля	= Договор;
			//Фильтр.Условие			= "=";
			if(true/*УчетПоЗаказам*/)
			{
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля			= "Сделка";
				//Фильтр.ЗначениеПоля		= МассивСделок;
				//Фильтр.Условие			= "В";
			}
			if(true/*УчетПоРД*/)
			{
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля			= "РасчетныйДокумент";
				//Фильтр.ЗначениеПоля		= МассивРД;
				//Фильтр.Условие			= "В";
			}
			//ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров, Истина);
			//ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
			//СуммаОсталосьПогасить = СуммаДокумента;
			//СуммаЕНВДОсталосьПогасить = СуммаЕНВД;
			//СуммаКомиссииОсталосьПогасить = СуммаКомиссии;
			//Зачтено = СуммаДокумента - СуммаОсталосьПогасить;
			//ЗачтеноЕНВД = СуммаЕНВД - СуммаЕНВДОсталосьПогасить;
			//ЗачтеноКомиссии = СуммаКомиссии - СуммаКомиссииОсталосьПогасить;
			//КоэффОбщий = ?(СуммаДокумента - СуммаКомиссии <= 0, 0, (Зачтено - ЗачтеноКомиссии) / (СуммаДокумента - СуммаКомиссии));
			//КоэффДоходы = ?(СуммаДокумента - СуммаКомиссии - СуммаЕНВД <= 0, 0, (Зачтено - ЗачтеноКомиссии - ЗачтеноЕНВД) / (СуммаДокумента - СуммаКомиссии - СуммаЕНВД));
			//ТаблицаДляСписания = ТаблицаДвижений.СкопироватьКолонки();
			/*//Разложим таблицу расходов на движения корректировки статуса и принятые расходы
*/
			//НовыеТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Доход", Ложь);
			if(true/*ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено*/)
			{
				//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
			}
			//ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
			//ДвиженияРегистров = СобратьТаблицыДвижений(НовыеТаблицыДвижений, ТаблицаДвиженияВзаиморасчетов, ,ДвиженияРегистровВх);
		}
		//Операция зачета аванса поставщику
		//ТаблицаДвижений - Таблица движений приход регистра Расходы УСН (сформированная процедурой списание расходов)

		public void ЗачетАвансаОтПокупателяБезУчетаРасходовУСН(/*СтруктураШапкиДокумента, ДвиженияРегистров, Договор, Сделка, ТаблицаРД, СуммаДокумента, СуммаЕНВД, СуммаКомиссии, КУДиР, ЗачитыватьАванс, УдержатьВознаграждение*/)
		{
			//КЗ = -1;
			/*//Коэффициент знака взаиморасчетов (+1 или -1)
*/
			//СуммаОсталосьПогасить = СуммаДокумента;
			//СуммаЕНВДОсталосьПогасить = СуммаЕНВД;
			//СуммаКомиссииОсталосьПогасить = СуммаКомиссии;
			//ДоходПоУдержанномуВознаграждению = 0;
			if(true/*ТаблицаРД.Количество() = 0*/)
			{
				//Строка = ТаблицаРД.Добавить();
				//Строка.ДокументРасчетовСКонтрагентом = Неопределено;
				//Строка.СуммаВзаиморасчетов = СуммаДокумента;
				//Строка.Сделка = Сделка;
			}
			//УчетПоЗаказам = (Договор.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
			//УчетПоРД = (Договор.ВестиПоДокументамРасчетовСКонтрагентом И ЗачитыватьАванс);
			//МассивРД = ТаблицаРД.ВыгрузитьКолонку("ДокументРасчетовСКонтрагентом");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивРД);
			//МассивСделок = ТаблицаРД.ВыгрузитьКолонку("Сделка");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСделок);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ДоговорКонтрагента";
			//Фильтр.ЗначениеПоля		= Договор;
			//Фильтр.Условие			= "=";
			if(true/*УчетПоЗаказам*/)
			{
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля			= "Сделка";
				//Фильтр.ЗначениеПоля		= МассивСделок;
				//Фильтр.Условие			= "В";
			}
			if(true/*НЕ ЗачитыватьАванс*/)
			{
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля			= "РасчетныйДокумент";
				//Фильтр.ЗначениеПоля		= СтруктураШапкиДокумента.Ссылка;
				//Фильтр.Условие			= "=";
			}
			//ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров, Истина);
			//ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
			if(true/*ДоходПоУдержанномуВознаграждению > 0*/)
			{
				//КУДиР.Содержание = КУДиР.Содержание + "Комиссионное вознаграждение удержано из выручки комитента. ";
				/*КУДиР.Графа5 = КУДиР.Графа5 + МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДоходПоУдержанномуВознаграждению, СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
																СтруктураШапкиДокумента.ВалютаРегламентированногоУчета,
																СтруктураШапкиДокумента.КурсДокумента, 1,
																СтруктураШапкиДокумента.КратностьДокумента, 1);*/
			}
			//Зачтено = СуммаДокумента - СуммаОсталосьПогасить;
			//ЗачтеноЕНВД = СуммаЕНВД - СуммаЕНВДОсталосьПогасить;
			//ЗачтеноКомиссии = СуммаКомиссии - СуммаКомиссииОсталосьПогасить;
			if(true/*ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено*/)
			{
				//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
			}
			//ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
			//ТаблицаПризнанныхРасходов = Новый ТаблицаЗначений;
			//ТаблицаРезультат = Новый ТаблицаЗначений;
			//ДвиженияРегистров = Новый Структура("ВзаиморасчетыРасход, РасходыУСН, КУДиР", ТаблицаДвиженияВзаиморасчетов, ТаблицаРезультат, ТаблицаПризнанныхРасходов);
		}
		//Отразить оплату поставщику по взаиморасчетам УСН и расходам УСН
		//

		public void ОплатаПоставщикуУСН(/*СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидОперации = "Оплата", ИмяДопПоля = ""*/)
		{
			/*//
*/
			//КЗ = -1;
			/*//Коэффициент знака взаиморасчетов (+1 или -1)
*/
			//ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
			/*//Подготовка наборов фильтров
*/
			//МассивСделок = ТаблицаОплат.ВыгрузитьКолонку("Сделка");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСделок);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			if(true/*НЕ ТаблицаОплат.Колонки.Найти("ДоговорКонтрагента") = Неопределено*/)
			{
				//МассивДоговоров = ТаблицаОплат.ВыгрузитьКолонку("ДоговорКонтрагента");
				//ТаблицаОплат.Колонки.Добавить("Работник");
				//ТаблицаОплат.ЗаполнитьЗначения(Справочники.ФизическиеЛица.ПустаяСсылка(), "Работник");
				//ИмяИзмерения = "ДоговорКонтрагента";
			}
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивДоговоров);
			//Фильтр.ИмяПоля			= ИмяИзмерения;
			//Фильтр.ЗначениеПоля	= МассивДоговоров;
			//Фильтр.Условие			= "В";
			if(true/*МассивСделок.Количество() > 0*/)
			{
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля		= "Сделка";
				//Фильтр.ЗначениеПоля	= МассивСделок;
				//Фильтр.Условие		= "В";
			}
			if(true/*НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты)*/)
			{
				//МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
			}
			//ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамУСН(МоментДокумента, СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
			//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");
			/*//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
*/
			if(true/*ТаблицаДвиженияВзаиморасчетов.Количество() = 0*/)
			{
			}
			/*//Подготовка наборов фильтров
*/
			if(true/*ТипЗнч(ТаблицаДвиженияВзаиморасчетов[0].ДоговорКонтрагента) = Тип("ПланСчетовСсылка.Хозрасчетный")*/)
			{
				//УсловиеПоПолюРасходы = "СчетУчета";
				//УсловиеПоПолюРасчеты = "ДоговорКонтрагента";
				//МассивУсловия = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("ДоговорКонтрагента");
				//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивУсловия);
			}
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Статусы = Новый Массив;
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеВыпущеноНеОплачено);
			/*//~
*/
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= УсловиеПоПолюРасходы;
			//Фильтр.ЗначениеПоля		= МассивУсловия;
			//Фильтр.Условие			= "В";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
			//Фильтр.ЗначениеПоля	= Статусы;
			//Фильтр.Условие			= "В";
			if(true/*НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты)*/)
			{
				//МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
			}
			//ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(МоментДокумента, ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
			//ТаблицаДляСписания.Колонки.Добавить("СтруктураКурса");
			/*//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
*/
			//ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , ВидОперации, Ложь);
			if(true/*ВидОперации = "ОплатаАО"*/)
			{
				//ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка,"РасчетныйДокумент");
				//ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка.ФизЛицо,"ДоговорКонтрагента");
			}
			if(true/*ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено*/)
			{
				//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
			}
			//ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Приход,"ВидДвижения");
			//ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений, ТаблицаДвиженияВзаиморасчетов,, ДвиженияРегистров);
		}
		//Отразить оплату от покупателя по взаиморасчетам УСН и расходам УСН
		//

		public void ОплатаОтПокупателяУСН(/*СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ИмяДопПоля = ""*/)
		{
			/*//Подготовка движений регистра взаиморасчетов
*/
			//УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.ДатаОплаты, СтруктураШапкиДокумента.Организация);
			//КЗ = 1;
			/*//Коэффициент знака взаиморасчетов (+1 или -1)
*/
			/*//Услуги банка, удержанные из оплаты покупателя
*/
			//СуммаУслуг = 0;
			if(true/*СтруктураШапкиДокумента.Ссылка.Метаданные().Реквизиты.Найти("СуммаУслуг") <> Неопределено*/)
			{
				//СуммаУслуг = СтруктураШапкиДокумента.Ссылка.СуммаУслуг;
			}
			//МассивСделок = ТаблицаОплат.ВыгрузитьКолонку("Сделка");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСделок);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			if(true/*НЕ ТаблицаОплат.Колонки.Найти("ДоговорКонтрагента") = Неопределено*/)
			{
				//МассивДоговоров = ТаблицаОплат.ВыгрузитьКолонку("ДоговорКонтрагента");
				//ТаблицаОплат.Колонки.Добавить("Работник");
				//ТаблицаОплат.ЗаполнитьЗначения(Справочники.ФизическиеЛица.ПустаяСсылка(), "Работник");
				//ИмяИзмерения = "ДоговорКонтрагента";
			}
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивДоговоров);
			//Фильтр.ИмяПоля			= ИмяИзмерения;
			//Фильтр.ЗначениеПоля		= МассивДоговоров;
			//Фильтр.Условие			= "В";
			if(true/*МассивСделок.Количество() > 0*/)
			{
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля		= "Сделка";
				//Фильтр.ЗначениеПоля	= МассивСделок;
				//Фильтр.Условие		= "В";
			}
			if(true/*НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты)*/)
			{
				//МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
			}
			//ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамУСН(МоментДокумента, СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
			//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетовПолная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СуммаДоходЕНВДПолная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СуммаДоходКомПолная", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
			//СуммаКоррДоходовКомитента 	= 0;
			//СуммаКоррДоходовЕНВД		= 0;
			//СуммаУслугВсего				= СуммаУслуг;
			/*//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
*/
			if(true/*СуммаКоррДоходовКомитента > 0*/)
			{
				//КУДиР.Содержание = КУДиР.Содержание + "Оплата на сумму " + СуммаКоррДоходовКомитента + " руб. определена как выручка комитента. ";
			}
			if(true/*СуммаКоррДоходовЕНВД > 0*/)
			{
				//КУДиР.Содержание = КУДиР.Содержание + "Оплата на сумму " + СуммаКоррДоходовЕНВД + " руб. отнесена к деятельности ЕНВД. ";
			}
			if(true/*(СуммаУслугВсего) > 0*/)
			{
				//КУДиР.Содержание = КУДиР.Содержание + "Удержана комиссия банка на сумму " + СуммаУслугВсего + " руб. ";
				//КУДиР.Графа7 = КУДиР.Графа7 + СуммаУслугВсего;
			}
			/*//Подготовка движений регистра расходов	
*/
			/*//Подготовка наборов фильтров
*/
			//МассивПартий = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПартий);
			//Статусы = Новый Массив;
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ВидРасхода";
			//Фильтр.ЗначениеПоля	= Перечисления.ВидыРасходовУСН.Номенклатура;
			//Фильтр.Условие			= "=";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыПартийУСН";
			//Фильтр.ЗначениеПоля	= Перечисления.СтатусыПартийУСН.Списанные;
			//Фильтр.Условие			= "=";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "Партия";
			//Фильтр.ЗначениеПоля	= МассивПартий;
			//Фильтр.Условие			= "В";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
			//Фильтр.ЗначениеПоля	= Статусы;
			//Фильтр.Условие			= "В";
			/*//Из таблицы расходов выбираем соответствующие партии и элементы расходов
*/
			if(true/*НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты)*/)
			{
				//МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
			}
			//ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(МоментДокумента, ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
			/*//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
*/
			/*//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
*/
			//ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Доход", Ложь);
			if(true/*ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено*/)
			{
				//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
			}
			//ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
			//ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений, ТаблицаДвиженияВзаиморасчетов,,);
		}
		//Отражает перенос задолженности с одного контрагента на другого.
		//

		public void ПереносЗадолженностиУСН(/*СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, ВидДвижения, ИмяДопПоля = ""*/)
		{
			if(true/*ВидДвижения = ВидДвиженияНакопления.Приход*/)
			{
				//КЗ = -1;
				/*//Кредиторская задолженность
*/
			}
			//ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
			/*//Подготовка наборов фильтров
*/
			//МассивСделок = ТаблицаОплат.ВыгрузитьКолонку("Сделка");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСделок);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			if(true/*НЕ ТаблицаОплат.Колонки.Найти("ДоговорКонтрагента") = Неопределено*/)
			{
				//МассивДоговоров = ТаблицаОплат.ВыгрузитьКолонку("ДоговорКонтрагента");
				//ТаблицаОплат.Колонки.Добавить("Работник");
				//ТаблицаОплат.ЗаполнитьЗначения(Неопределено, "Работник");
				//ИмяИзмерения = "ДоговорКонтрагента";
			}
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивДоговоров);
			//Фильтр.ИмяПоля			= ИмяИзмерения;
			//Фильтр.ЗначениеПоля	= МассивДоговоров;
			//Фильтр.Условие			= "В";
			if(true/*МассивСделок.Количество() > 0*/)
			{
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля		= "Сделка";
				//Фильтр.ЗначениеПоля	= МассивСделок;
				//Фильтр.Условие		= "В";
			}
			if(true/*НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты)*/)
			{
				//МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
			}
			//ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамУСН(МоментДокумента, СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
			//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");
			/*//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
*/
			if(true/*ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено*/)
			{
				//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
			}
			//ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвижения,"ВидДвижения");
			/*//Отразим в таблице долг "новому" контрагенту.
*/
			if(true/*ВидДвижения = ВидДвиженияНакопления.Расход*/)
			{
				//НовыйВидДвижения = ВидДвиженияНакопления.Приход;
			}
			//ТаблицаВзаиморасчетов = ТаблицаДвиженияВзаиморасчетов.Скопировать();
			//ТаблицаВзаиморасчетов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ДоговорКонтрагента,"ДоговорКонтрагента");
			//ТаблицаВзаиморасчетов.ЗаполнитьЗначения(НовыйВидДвижения,"ВидДвижения");
			//ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаВзаиморасчетов,ТаблицаДвиженияВзаиморасчетов);
			//ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, Новый ТаблицаЗначений, , Неопределено, Ложь);
			//ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений, ТаблицаДвиженияВзаиморасчетов,,);
		}
		//Отражает списание задолженности

		public void СписаниеЗадолженностиУСН(/*СтруктураШапкиДокумента, ТаблицаОплат, ДвиженияРегистров, КУДиР, ВидДвижения*/)
		{
			if(true/*ВидДвижения = ВидДвиженияНакопления.Приход*/)
			{
				//КЗ = -1;
				/*//Кредиторская задолженность
*/
			}
			//ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
			/*//Подготовка наборов фильтров
*/
			//МассивСделок = ТаблицаОплат.ВыгрузитьКолонку("Сделка");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСделок);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			if(true/*НЕ ТаблицаОплат.Колонки.Найти("ДоговорКонтрагента") = Неопределено*/)
			{
				//МассивДоговоров = ТаблицаОплат.ВыгрузитьКолонку("ДоговорКонтрагента");
				//ТаблицаОплат.Колонки.Добавить("Работник");
				//ТаблицаОплат.ЗаполнитьЗначения(Неопределено, "Работник");
				//ИмяИзмерения = "ДоговорКонтрагента";
			}
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивДоговоров);
			//Фильтр.ИмяПоля			= ИмяИзмерения;
			//Фильтр.ЗначениеПоля	= МассивДоговоров;
			//Фильтр.Условие			= "В";
			if(true/*МассивСделок.Количество() > 0*/)
			{
				//Фильтр = ТаблицаФильтров.Добавить();
				//Фильтр.ИмяПоля		= "Сделка";
				//Фильтр.ЗначениеПоля	= МассивСделок;
				//Фильтр.Условие		= "В";
			}
			if(true/*НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента.ДатаОплаты)*/)
			{
				//МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени();
			}
			//ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамУСН(МоментДокумента, СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаДвиженияВзаиморасчетов = ТаблицаПлатежей.СкопироватьКолонки();
			//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("СтруктураКурса");
			/*//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
*/
			if(true/*ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено*/)
			{
				//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
			}
			//ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвижения,"ВидДвижения");
			//КЗ = 1;
			//МассивПартий = ТаблицаДвиженияВзаиморасчетов.ВыгрузитьКолонку("РасчетныйДокумент");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПартий);
			/*// По регистру Расходы УСН
*/
			//Статусы = Новый Массив;
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоПокупателем);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "РасчетныйДокумент";
			//Фильтр.ЗначениеПоля	= МассивПартий;
			//Фильтр.Условие			= "В";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
			//Фильтр.ЗначениеПоля	= Статусы;
			//Фильтр.Условие			= "В";
			/*//Из таблицы расходов выбираем соответствующие партии и элементы расходов
*/
			//ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаДвиженияРасходов = ТаблицаРасходов.СкопироватьКолонки();
			//ТаблицаДвиженияРасходов.Колонки.Добавить("СтруктураКурса");
			/*//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
*/
			if(true/*ТаблицаДвиженияРасходов.Колонки.Найти("ВидДвижения") = Неопределено*/)
			{
				//ТаблицаДвиженияРасходов.Колонки.Добавить("ВидДвижения");
			}
			//ТаблицаДвиженияРасходов.ЗаполнитьЗначения(ВидДвижения,"ВидДвижения");
			/*//КУДиР.Содержание = "Доходы от списания кредиторской задолженности";
*/
			//ТаблицаРасходов.Очистить();
			//ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, , Неопределено, Ложь);
			//ТаблицыДвижений.Вставить("ТаблицаРасход",ТаблицаДвиженияРасходов);
			//ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений, ТаблицаДвиженияВзаиморасчетов,,);
		}
		//Начисление ЗП документом отражение зарплаты в регл. учете
		//

		public void НачислениеЗП(/*СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР*/)
		{
			/*//
*/
			//МассивСчетов = Новый Массив;
			//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоНалогам);
			//МассивСчетов.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию);
			/*//~~//
*/
			//ПериодРегистрации = СтруктураШапкиДокумента.Ссылка.ПериодРегистрации;
			//ДатаНач = НачалоМесяца(ПериодРегистрации);
			//ДатаКон = СтруктураШапкиДокумента.Дата;
			/*//Определим период обработки сдельной зарплаты
*/
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("Истина", Истина);
			//Запрос.УстановитьПараметр("ПериодРегистрации", 	ПериодРегистрации);
			//Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
			//Запрос.УстановитьПараметр("Дата", 	 			СтруктураШапкиДокумента.Дата);
			//Запрос.УстановитьПараметр("ДатаКон", 	 		ДатаКон);
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	МАКСИМУМ(ОтражениеЗарплатыВРеглУчете.Дата) КАК Дата
	|ИЗ
	|	Документ.ОтражениеЗарплатыВРеглУчете КАК ОтражениеЗарплатыВРеглУчете
	|ГДЕ
	|	ОтражениеЗарплатыВРеглУчете.Проведен = &Истина
	|	И ОтражениеЗарплатыВРеглУчете.ПериодРегистрации = &ПериодРегистрации
	|	И ОтражениеЗарплатыВРеглУчете.Организация = &Организация
	|	И ОтражениеЗарплатыВРеглУчете.Дата < &Дата";*/
			//Выборка = Запрос.Выполнить().Выбрать();
			if(true/*Выборка.Следующий()*/)
			{
				if(true/*ЗначениеЗаполнено(Выборка.Дата)*/)
				{
					//ДатаНач = Мин(КонецДня(Выборка.Дата)+1, ДатаКон);
				}
			}
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("Счет70", 		ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
			//Запрос.УстановитьПараметр("СчетаНалогов", 	МассивСчетов);
			//Запрос.УстановитьПараметр("Ссылка", 		СтруктураШапкиДокумента.Ссылка);
			//Запрос.УстановитьПараметр("Зарплата", 		Перечисления.ВидыРасходовУСН.Зарплата);
			//Запрос.УстановитьПараметр("Налоги", 		Перечисления.ВидыРасходовУСН.Налоги);
			//Запрос.УстановитьПараметр("Сводно", 		Справочники.ФизическиеЛица.ПустаяСсылка());
			//Запрос.УстановитьПараметр("Неопределено", 	Неопределено);
			//Запрос.УстановитьПараметр("Организация", 	СтруктураШапкиДокумента.Организация);
			//Запрос.УстановитьПараметр("ДатаНач", 	 	ДатаНач);
			//Запрос.УстановитьПараметр("ДатаКон", 	 	ДатаКон);
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	&Зарплата КАК ВидРасхода,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоКт1 КАК ЭлементРасхода,
	|	&Неопределено КАК СчетУчета,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма КАК Сумма,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.ОтражениеВУСН КАК ОтражениеВУСН
	|ИЗ
	|	Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
	|ГДЕ
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка = &Ссылка
	|	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт В ИЕРАРХИИ(&Счет70)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Зарплата,
	|	БУОсновныеНачисления.ФизЛицо,
	|	&Неопределено,
	|	БУОсновныеНачисления.Результат,
	|	БУОсновныеНачисления.ОтражениеВУСН
	|ИЗ
	|	РегистрРасчета.БУОсновныеНачисления КАК БУОсновныеНачисления
	|ГДЕ
	|	БУОсновныеНачисления.Организация = &Организация
	|	И БУОсновныеНачисления.Регистратор.Дата МЕЖДУ &ДатаНач И &ДатаКон
	|	И (НЕ БУОсновныеНачисления.Регистратор Ссылка Документ.ОтражениеЗарплатыВРеглУчете)
	|	И (НЕ БУОсновныеНачисления.Регистратор Ссылка Документ.НачислениеПоБольничномуЛисту)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Зарплата,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СубконтоДт1,
	|	&Неопределено,
	|	-ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.ОтражениеВУСН
	|ИЗ
	|	Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
	|ГДЕ
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка = &Ссылка
	|	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт В ИЕРАРХИИ(&Счет70)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Налоги,
	|	&Неопределено,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма,
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.ОтражениеВУСН
	|ИЗ
	|	Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
	|ГДЕ
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка = &Ссылка
	|	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетКт В ИЕРАРХИИ(&СчетаНалогов)";*/
			/*//~~\\
*/
			//ТаблицаРасходов = Запрос.Выполнить().Выгрузить();
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт КАК СчетУчета,
	|	СУММА(ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Сумма) КАК Сумма
	|ИЗ
	|	Документ.ОтражениеЗарплатыВРеглУчете.ОтражениеВУчете КАК ОтражениеЗарплатыВРеглУчетеОтражениеВУчете
	|ГДЕ
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.Ссылка = &Ссылка
	|	И ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт В ИЕРАРХИИ(&СчетаНалогов)
	|
	|СГРУППИРОВАТЬ ПО
	|	ОтражениеЗарплатыВРеглУчетеОтражениеВУчете.СчетДт";*/
			//ТаблицаЗачетаНалогов = Запрос.Выполнить().Выгрузить();
			//ТаблицаЗачетаНалогов.Индексы.Добавить("СчетУчета");
			/*//Обработать удержания с незаполненным порядком признания расходов
*/
			//КоличествоСтрок = ТаблицаРасходов.Количество();
			//ТаблицаРасходов.Свернуть("ВидРасхода, ЭлементРасхода, СчетУчета, ОтражениеВУСН", "Сумма");
			//ТаблицаРасходов.Колонки.Добавить("Валюта");
			//ТаблицаРасходов.Колонки.Добавить("РасчетныйДокумент");
			//ТаблицаРасходов.Колонки.Добавить("СтатусыОплатыРасходовУСН");
			//ТаблицаРасходов.Колонки.Добавить("НДС");
			//ТаблицаРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.ВалютаВзаиморасчетов, "Валюта");
			//ТаблицаРасходов.ЗаполнитьЗначения(СтруктураШапкиДокумента.Ссылка, "РасчетныйДокумент");
			//ТаблицаРасходов.ЗаполнитьЗначения(Перечисления.СтатусыРасходовУСН.НеОплачено, "СтатусыОплатыРасходовУСН");
			//ТаблицаРасходов.ЗаполнитьЗначения(0, "НДС");
			//МассивРаботников = ТаблицаРасходов.ВыгрузитьКолонку("ЭлементРасхода");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивРаботников);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			/*//Расчеты с работниками
*/
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "Работник";
			//Фильтр.ЗначениеПоля	= МассивРаботников;
			//Фильтр.Условие			= "В";
			//ТаблицаПлатежей = ВыполнитьЗапросПоВзаиморасчетамУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаФильтров.Очистить();
			//МассивСчетов = ТаблицаРасходов.ВыгрузитьКолонку("СчетУчета");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивСчетов);
			/*//Расчеты по налогам
*/
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ДоговорКонтрагента";
			//Фильтр.ЗначениеПоля		= МассивСчетов;
			//Фильтр.Условие			= "В";
			//ТаблицаПлатежейНалогов = ВыполнитьЗапросПоВзаиморасчетамУСН(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Исключая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаДвиженияВзаиморасчетов 	= ТаблицаПлатежей.СкопироватьКолонки();
			//ТаблицаДвиженияРасходов 		= ТаблицаРасходов.СкопироватьКолонки();
			//ТаблицаДвиженияРасходов.Колонки.Добавить("КлючУникальности");
			/*//Заполняем таблицу списываемых расходов по таблице расходов
*/
			//ТаблицыДвиженийРез = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДвиженияРасходов, , "Оплата", Ложь);
			if(true/*ТаблицаДвиженияВзаиморасчетов.Колонки.Найти("ВидДвижения") = Неопределено*/)
			{
				//ТаблицаДвиженияВзаиморасчетов.Колонки.Добавить("ВидДвижения");
			}
			//ТаблицаДвиженияВзаиморасчетов.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход,"ВидДвижения");
			//ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвиженийРез, ТаблицаДвиженияВзаиморасчетов, ТаблицаРасходов, );
			if(true/*ТаблицаЗачетаНалогов.Итог("Сумма") > 0*/)
			{
				//ТаблицаЗачетаНалогов.Колонки.СчетУчета.Имя = "ДоговорКонтрагента";
				//ТаблицаЗачетаНалогов.Колонки.Добавить("Сделка");
				//КУДиР_Оплаты = Новый Структура("ДоходЕНВД, Графа4, Графа5, Графа6, Графа7, НДС, Содержание", 0,0,0,0,0,0,"");
				//ОплатаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаЗачетаНалогов, ДвиженияРегистров, КУДиР_Оплаты, "Налог");
			}
		}
		//Расчет и списание расходов будущих периодов
		//

		public void СписаниеРБПУСН(/*СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР*/)
		{
			//Заголовок = "Списание РБП для целей УСН";
			//Статусы = Новый Массив;
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ВидРасхода";
			//Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.РБП;
			//Фильтр.Условие			= "=";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
			//Фильтр.ЗначениеПоля	= Статусы;
			//Фильтр.Условие			= "В";
			/*//Из таблицы расходов выбираем соответствующие партии и элементы расходов
*/
			//ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
			//НачМесяца = НачалоМесяца(СтруктураШапкиДокумента.Дата);
			//КонМесяца = КонецМесяца(СтруктураШапкиДокумента.Дата);
			/*//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
*/
			/*//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
*/
			//ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Списание", Ложь);
			//ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
		}
		//Списывает материалы переданные в производство на основании движений по регистру
		//ЗатратыНаВыпускПродукцииБухгалтерскийУчет

		public void ВыпускПродукции(/*СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР*/)
		{
			/*//~
*/
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("Организация", СтруктураШапкиДокумента.Организация);
			//Запрос.УстановитьПараметр("ДатаНач", НачалоМесяца(СтруктураШапкиДокумента.Дата));
			//Запрос.УстановитьПараметр("ДатаКон", КонецМесяца(СтруктураШапкиДокумента.Дата));
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.Затрата,
	|	СУММА(ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.КоличествоОборот) КАК Количество
	|ИЗ
	|	РегистрНакопления.ЗатратыНаВыпускПродукцииБухгалтерскийУчет.Обороты(&ДатаНач, &ДатаКон, Месяц, ) КАК ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты
	|ГДЕ
	|	(ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.Организация = &Организация) И
	|	(ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.Затрата Ссылка Справочник.Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗатратыНаВыпускПродукцииБухгалтерскийУчетОбороты.Затрата";*/
			//ИспользованныеМатериалы = Запрос.Выполнить().Выгрузить();
			/*//Подготовка наборов фильтров
*/
			//МассивНоменклатуры = ИспользованныеМатериалы.ВыгрузитьКолонку("Затрата");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
			//Статусы = Новый Массив;
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеВыпущеноНеОплачено);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеВыпущено);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ВидРасхода";
			//Фильтр.ЗначениеПоля	= Перечисления.ВидыРасходовУСН.Номенклатура;
			//Фильтр.Условие			= "=";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыПартийУСН";
			//Фильтр.ЗначениеПоля	= Перечисления.СтатусыПартийУСН.ВПроизводстве;
			//Фильтр.Условие			= "=";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ЭлементРасхода";
			//Фильтр.ЗначениеПоля	= МассивНоменклатуры;
			//Фильтр.Условие			= "В";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
			//Фильтр.ЗначениеПоля	= Статусы;
			//Фильтр.Условие			= "В";
			/*//Из таблицы расходов выбираем соответствующие партии и элементы расходов
*/
			//ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
			//ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
			//ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");
			/*//Заполняем таблицу списываемых расходов по таблице расходов и фильтрам партионного учета
*/
			/*//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
*/
			//ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаДляСписания, , "Выпуск", Ложь);
			//ТаблицыДвижений.ТаблицаПриход.ЗаполнитьЗначения(Перечисления.СтатусыПартийУСН.Списанные,"СтатусыПартийУСН");
			//ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
			//ДвиженияРегистров.Вставить("ТаблицаПриход", ТаблицыДвижений.ТаблицаПриход);
		}
		//Расчет и списание расходов будущих периодов
		//

		public void РаспределениеЕНВД(/*СтруктураШапкиДокумента, ДвиженияРегистров, КУДиР*/)
		{
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
			//Фильтр.ЗначениеПоля		= Перечисления.СтатусыРасходовУСН.НеРаспределено;
			//Фильтр.Условие			= "=";
			//МетаданныеДокумента = СтруктураШапкиДокумента.Ссылка.Метаданные();
			//СтруктураШапкиДокумента.Дата = ?(МетаданныеДокумента.Реквизиты.Найти("ПериодРегистрации") <> Неопределено, КонецКвартала(СтруктураШапкиДокумента.Ссылка.ПериодРегистрации), КонецКвартала(СтруктураШапкиДокумента.Дата));
			/*//Из таблицы расходов выбираем соответствующие партии и элементы расходов
*/
			//ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
			/*//Разложим таблицу списываемых расходов на движения корректировки статуса и принятые расходы
*/
			//ТаблицыДвижений = ИзменениеСтатусовРасходов(СтруктураШапкиДокумента, ТаблицаРасходов, , "РаспределениеЕНВД", Ложь);
			//Метод = ?(СтруктураШапкиДокумента.МетодРаспределения = Перечисления.МетодыРаспределенияРасходовУСНПоВидамДеятельности.НарастающимИтогомСНачалаГода, "Год", "Квартал");
			/*База = ?(СтруктураШапкиДокумента.БазаРаспределения = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыВсегоНУ, "НВ",
			?(СтруктураШапкиДокумента.БазаРаспределения = Перечисления.БазаРаспределенияРасходовУСНПоВидамДеятельности.ДоходыПринимаемыеНУ, "НУ", "БУ"));*/
			//Коэфф = ПолучитьКоэффРаспределенияЕНВД(СтруктураШапкиДокумента, Метод, База);
			//ИтогРаспределения = ТаблицыДвижений.ТаблицаПринятых.Итог("Сумма")*Коэфф;
			//Распределено = 0;
			//МаксПозиция = Неопределено;
			//МаксСумма = 0;
			if(true/*(Коэфф = 0) ИЛИ (ТаблицыДвижений.ТаблицаПринятых.Количество() = 0)*/)
			{
				/*//Все расходы осносятся к УСН или нет распределенных расходов
*/
			}
			if(true/*(НЕ Метод = "Квартал") И (НЕ НачалоГода(СтруктураШапкиДокумента.Дата) = НачалоКвартала(СтруктураШапкиДокумента.Дата))*/)
			{
				//СкорректироватьРаспределениеПредыдущихКварталов(СтруктураШапкиДокумента, Коэфф, ТаблицыДвижений.ТаблицаПринятых);
			}
			//ДвиженияРегистров = СобратьТаблицыДвижений(ТаблицыДвижений,,,);
		}

		public void ВозвратПоДокументуУСН(/*СтруктураШапкиДокумента, ТаблицаПоТоварам, ДвиженияРегистров, КУДиР*/)
		{
			//мВалютаРегламентированногоУчета = СтруктураШапкиДокумента.ВалютаРегламентированногоУчета;
			//УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Дата, СтруктураШапкиДокумента.Организация);
			//СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоНДС",УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС);
			//СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоТоварам",УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам);
			//СтруктураШапкиДокумента.Вставить("ПорядокПризнанияМатериальныхРасходов",УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов);
			//ВыделятьНДСУСН = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
			//ВыделятьНДСУСНРеализация = ВыделятьНДСУСН;
			//УчетнаяПолитикаРализация = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(СтруктураШапкиДокумента.Сделка.Дата, СтруктураШапкиДокумента.Организация, Ложь);
			//ВыделятьНДСУСНРеализация = (УчетнаяПолитикаРализация.ПорядокПризнанияРасходовПоНДС = Перечисления.ПорядокПризнанияРасходовПоНДС.ПоОплатеПоставщику);
			//ТоварыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоОплатеПоставщику);
			//ТоварыПоОтгрузке = (СтруктураШапкиДокумента.ПорядокПризнанияРасходовПоТоварам = Перечисления.ПорядокПризнанияРасходовПоТоварам.ПоФактуРеализации);
			//МатериалыПоОплате = (СтруктураШапкиДокумента.ПорядокПризнанияМатериальныхРасходов = Перечисления.ПорядокПризнанияМатериальныхРасходов.ПоОплатеПоставщику);
			/*//Соберем данные о списанных партиях
*/
			//НаборЗаписей = РегистрыНакопления.ПартииТоваровНаСкладахНалоговыйУчет.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Сделка);
			//НаборЗаписей.Прочитать();
			//ТаблицаПартийРасход = НаборЗаписей.Выгрузить();
			/*//Удалим движения прихода
*/
			//КолСтрок = ТаблицаПартийРасход.Количество();
			/*//Добавим в партии информацию об изменении ОтражениеВУСН
*/
			//СтруктураШапкиДокументаРеализации = ОбщегоНазначения.СформироватьСтруктуруШапкиДокумента(СтруктураШапкиДокумента.Сделка.ПолучитьОбъект());
			//ЗаполнитьОтражениеВНУпоСписанию(СтруктураШапкиДокументаРеализации, ТаблицаПартийРасход, "Реализация");
			/*//Соберем данные о списанных расходах
*/
			//НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
			//НаборЗаписей.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Сделка);
			//НаборЗаписей.Прочитать();
			//ТаблицаРасходов = НаборЗаписей.Выгрузить();
			/*//Удалим движения прихода
*/
			//КолСтрок = ТаблицаРасходов.Количество();
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ВидРасхода";
			//Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.Номенклатура;
			//Фильтр.Условие			= "=";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыПартийУСН";
			//Фильтр.ЗначениеПоля		= Перечисления.СтатусыПартийУСН.Списанные;
			//Фильтр.Условие			= "=";
			//МассивНоменклатуры = ТаблицаПоТоварам.ВыгрузитьКолонку("Номенклатура");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ЭлементРасхода";
			//Фильтр.ЗначениеПоля		= МассивНоменклатуры;
			//Фильтр.Условие			= "В";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "Партия";
			//Фильтр.ЗначениеПоля		= СтруктураШапкиДокумента.Сделка;
			//Фильтр.Условие			= "=";
			/*//Из таблицы расходов выбираем соответствующие партии и элементы расходов
*/
			//ТаблицаОстатковРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаКорректировкиПриход = ТаблицаОстатковРасходов.СкопироватьКолонки();
			//ТаблицаКорректировкиРасход = ТаблицаКорректировкиПриход.Скопировать();
			//ТаблицаПризнанныхРасходов = ТаблицаКорректировкиПриход.Скопировать();
			//СтруктураРасходов = Новый Структура("ТаблицаПриход, ТаблицаРасход, ТаблицаПринятых", ТаблицаКорректировкиПриход, ТаблицаКорректировкиРасход, ТаблицаПризнанныхРасходов);
			//ДвиженияРегистров = СобратьТаблицыДвижений(СтруктураРасходов, , , ДвиженияРегистров);
		}

		public void СписаниеТЗР(/*СтруктураШапкиДокумента, ДвиженияРегистров*/)
		{
			/*//Подготовка наборов фильтров
*/
			//Статусы = Новый Массив;
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписано);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноПринято);
			//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеРаспределено);
			/*//Формирование таблицы фильтров
*/
			//ТаблицаФильтров = Новый ТаблицаЗначений;
			//ТаблицаФильтров.Колонки.Добавить("ИмяПоля");
			//ТаблицаФильтров.Колонки.Добавить("ЗначениеПоля");
			//ТаблицаФильтров.Колонки.Добавить("Условие");
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "ВидРасхода";
			//Фильтр.ЗначениеПоля		= Перечисления.ВидыРасходовУСН.ДопРасходы;
			//Фильтр.Условие			= "=";
			//Фильтр = ТаблицаФильтров.Добавить();
			//Фильтр.ИмяПоля			= "СтатусыОплатыРасходовУСН";
			//Фильтр.ЗначениеПоля	= Статусы;
			//Фильтр.Условие			= "В";
			/*//Из таблицы расходов выбираем соответствующие партии и элементы расходов
*/
			//ТаблицаРасходов = ВыполнитьЗапросПоРасходам(Новый Граница(СтруктураШапкиДокумента.Ссылка.МоментВремени(), ВидГраницы.Включая), СтруктураШапкиДокумента.Организация, ТаблицаФильтров);
			//ТаблицаРасчетныхДокументов = ТаблицаРасходов.Скопировать();
			//ТаблицаРасчетныхДокументов.Свернуть("ЭлементРасхода, Партия, РасчетныйДокумент", "Количество");
			//ТаблицаРасходов.Индексы.Добавить("ЭлементРасхода,Партия,РасчетныйДокумент");
			//ТаблицаРасчетныхДокументов.Индексы.Добавить("ЭлементРасхода,Партия");
			//ТаблицаДляСписания = ТаблицаРасходов.СкопироватьКолонки();
			//ТаблицаДляСписания.Колонки.Добавить("СтатусСписания");
			//ТаблицаДляСписания.Колонки.Добавить("КоличествоПоСтатусуСписания");
			//МассивНоменклатуры = ТаблицаРасходов.ВыгрузитьКолонку("ЭлементРасхода");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивНоменклатуры);
			//ОбщегоНазначения.УдалитьНеЗаполненныеЭлементыМассива(МассивНоменклатуры);
			//МассивПартий = ТаблицаРасходов.ВыгрузитьКолонку("Партия");
			//ОбщегоНазначения.УдалитьПовторяющиесяЭлементы(МассивПартий);
			//ОбщегоНазначения.УдалитьНеЗаполненныеЭлементыМассива(МассивПартий);
			//Запрос = Новый Запрос;
			//Запрос.УстановитьПараметр("НачДата", НачалоКвартала(СтруктураШапкиДокумента.Дата));
			//Запрос.УстановитьПараметр("КонДата", КонецКвартала(СтруктураШапкиДокумента.Дата));
			//Запрос.УстановитьПараметр("Организация", 		СтруктураШапкиДокумента.Организация);
			//Запрос.УстановитьПараметр("ВидРасхода", 		Перечисления.ВидыРасходовУСН.Номенклатура);
			//Запрос.УстановитьПараметр("СтатусСписания", 	Перечисления.ОтражениеВУСН.ПустаяСсылка());
			//Запрос.УстановитьПараметр("Номенклатура", МассивНоменклатуры);
			//Запрос.УстановитьПараметр("Партии", МассивПартий);
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	РасходыПриУСН.СтатусСписания,
	|	СУММА(РасходыПриУСН.Количество) КАК КоличествоСписания,
	|	РасходыПриУСН.ЭлементРасхода КАК Номенклатура,
	|	РасходыПриУСН.Партия КАК ДокументОприходования,
	|	РасходыПриУСН.Регистратор
	|ИЗ
	|	РегистрНакопления.РасходыПриУСН КАК РасходыПриУСН
	|ГДЕ
	|	РасходыПриУСН.ВидРасхода = &ВидРасхода
	|	И РасходыПриУСН.СтатусСписания <> &СтатусСписания
	|	И РасходыПриУСН.Организация = &Организация
	|	И РасходыПриУСН.Период МЕЖДУ &НачДата И &КонДата
	|	И РасходыПриУСН.Партия В(&Партии)
	|	И РасходыПриУСН.ЭлементРасхода В(&Номенклатура)
	|
	|СГРУППИРОВАТЬ ПО
	|	РасходыПриУСН.СтатусСписания,
	|	РасходыПриУСН.ЭлементРасхода,
	|	РасходыПриУСН.Партия,
	|	РасходыПриУСН.Регистратор
	|
	|УПОРЯДОЧИТЬ ПО
	|	РасходыПриУСН.Регистратор.Дата";*/
			//ТаблицаПартий = Запрос.Выполнить().Выгрузить();
		}
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// МЕНЕДЖЕР УСН (вход документов)
		//Основная процедура - собирает необходимые данные и вызвывает
		//ситуационные процедуры в зависимости от вида операции. Выполняет движения по регистрам

		public void ОтразитьВУСН(/*ДокументСсылка, ВидОперации = Неопределено, Параметры = Неопределено, ЭтапПроведения = 0*/)
		{
			/*//
*/
			//ВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
			//МетаданныеДокумента = ДокументСсылка.Метаданные();
			//ПустаяТаблицаРД = Новый ТаблицаЗначений;
			//ПустаяТаблицаРД.Колонки.Добавить("ДокументРасчетовСКонтрагентом");
			//ПустаяТаблицаРД.Колонки.Добавить("СуммаВзаиморасчетов");
			//ПустаяТаблицаРД.Колонки.Добавить("Сделка");
			/*//Сбор информации для структуры шапки
*/
			//Договор = ?(МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено, ДокументСсылка.ДоговорКонтрагента, ?(МетаданныеДокумента.Реквизиты.Найти("ФизЛицо") <> Неопределено,ДокументСсылка.ФизЛицо,Неопределено));
			//ВалютаДокумента = ?(МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено, ДокументСсылка.ВалютаДокумента, ВалютаРегламентированногоУчета);
			//ВалютаВзаиморасчетов = ?(МетаданныеДокумента.Реквизиты.Найти("ДоговорКонтрагента") <> Неопределено, ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов, ВалютаДокумента);
			//КурсВзаиморасчетов = ?(МетаданныеДокумента.Реквизиты.Найти("КурсВзаиморасчетов") <> Неопределено, ДокументСсылка.КурсВзаиморасчетов, ?(ВалютаДокумента = ВалютаРегламентированногоУчета, 1, ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, ВалютаРегламентированногоУчета)));
			//КратностьВзаиморасчетов = ?(МетаданныеДокумента.Реквизиты.Найти("КратностьВзаиморасчетов") <> Неопределено, ДокументСсылка.КратностьВзаиморасчетов, ?(ВалютаДокумента = ВалютаРегламентированногоУчета, 1, ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, ВалютаРегламентированногоУчета)));
			//ВедениеВзаиморасчетов = ?(ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов"), Договор.ВедениеВзаиморасчетов, Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
			//Сделка = ?(МетаданныеДокумента.Реквизиты.Найти("Сделка") <> Неопределено, ?(НЕ ЗначениеЗаполнено(ДокументСсылка.Сделка), Неопределено, ДокументСсылка.Сделка), Неопределено);
			//ДатаОплаты = ?(МетаданныеДокумента.Реквизиты.Найти("ДатаОплаты") <> Неопределено, ?(ДокументСсылка.Оплачено,УправлениеДенежнымиСредствами.ПолучитьДатуДвижений(ДокументСсылка.Дата,ДокументСсылка.ДатаОплаты),ДокументСсылка.Дата), ДокументСсылка.Дата);
			//ВидОперацииДок = ?(МетаданныеДокумента.Реквизиты.Найти("ВидОперации") <> Неопределено, ДокументСсылка.ВидОперации, Неопределено);
			/*//Сбор информации о заказах и расчетных документах
*/
			//ТаблицаРД = ПустаяТаблицаРД;
			if(true/*МетаданныеДокумента.ТабличныеЧасти.Найти("ДокументыРасчетовСКонтрагентом") <> Неопределено*/)
			{
				//ТаблицаРД = ДокументСсылка.ДокументыРасчетовСКонтрагентом.Выгрузить();
			}
			if(true/*ТаблицаРД.Колонки.Найти("Сделка") = Неопределено*/)
			{
				//ТаблицаРД.Колонки.Добавить("Сделка");
				//ТаблицаРД.ЗаполнитьЗначения(Сделка, "Сделка");
			}
			if(true/*ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам*/)
			{
				//ТаблицаРД.ЗаполнитьЗначения(Сделка, "Сделка");
			}
			//УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаОплаты, ДокументСсылка.Организация);
			if(true/*НЕ (УчетнаяПолитика.СистемаНалогообложения = Перечисления.СистемыНалогообложения.Упрощенная)*/)
			{
			}
			//ДвиженияРегистров = Неопределено;
			if(true/*Параметры = Неопределено*/)
			{
				//СтруктураШапкиДокумента = Новый Структура("Ссылка, Организация, Дата", ДокументСсылка, ДокументСсылка.Организация, ДокументСсылка.Дата);
			}
			//СтруктураШапкиДокумента.Вставить("ВалютаВзаиморасчетов",ВалютаВзаиморасчетов);
			//СтруктураШапкиДокумента.Вставить("ВалютаРегламентированногоУчета",ВалютаРегламентированногоУчета);
			//СтруктураШапкиДокумента.Вставить("ВалютаДокумента",ВалютаДокумента);
			//СтруктураШапкиДокумента.Вставить("ДатаОплаты",ДатаОплаты);
			//СтруктураШапкиДокумента.Вставить("ВидОперации",ВидОперацииДок);
			//СтруктураШапкиДокумента.Вставить("ДоговорКонтрагента",Договор);
			//СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоНДС",УчетнаяПолитика.ПорядокПризнанияРасходовПоНДС);
			//СтруктураШапкиДокумента.Вставить("ПорядокПризнанияРасходовПоТоварам",УчетнаяПолитика.ПорядокПризнанияРасходовПоТоварам);
			//СтруктураШапкиДокумента.Вставить("ПорядокПризнанияМатериальныхРасходов",УчетнаяПолитика.ПорядокПризнанияМатериальныхРасходов);
			//СтруктураШапкиДокумента.Вставить("МетодРаспределения",УчетнаяПолитика.МетодРаспределенияРасходовУСНПоВидамДеятельности);
			//СтруктураШапкиДокумента.Вставить("БазаРаспределения",УчетнаяПолитика.БазаРаспределенияРасходовУСНПоВидамДеятельности);
			//СтруктураШапкиДокумента.Вставить("Сделка",Сделка);
			if(true/*ВидОперации = Неопределено*/)
			{
				//ВидОперации = ВидОперацииДДС(СтруктураШапкиДокумента);
			}
			if(true/*ВидОперации = "НеОтражатьВНУ"*/)
			{
			}
			//КУДиР = Новый Структура("ДоходЕНВД, Графа4, Графа5, Графа6, Графа7, НДС, Содержание", 0,0,0,0,0,0,"");
			//КУДиР.Содержание = СодержаниеКУДиР(СтруктураШапкиДокумента, ВидОперации, МетаданныеДокумента);
			if(true/*МетаданныеДокумента.Реквизиты.Найти("ВалютаДокумента") <> Неопределено*/)
			{
				//СтруктураШапкиДокумента.Вставить("КурсДокумента", 		ЗаполнениеДокументов.КурсДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));
				//СтруктураШапкиДокумента.Вставить("КратностьДокумента", 	ЗаполнениеДокументов.КратностьДокумента(ДокументСсылка, ВалютаРегламентированногоУчета));
			}
			if(true/*(ВидОперации = "Поступление")
		ИЛИ (ВидОперации = "УслугаКомиссионера")
		ИЛИ (ВидОперации = "УслугаПоПереработке")*/)
			{
				//НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
				//НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
				//НаборЗаписей.Прочитать();
				//ТаблицаПрихода = НаборЗаписей.Выгрузить();
				//Статусы = Новый СписокЗначений;
				//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеСписаноНеОплачено);
				//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
				//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплаченоНеОплаченоПокупателем);
				if(true/*ЭтапПроведения > 0*/)
				{
					//Статусы.Добавить(Перечисления.СтатусыРасходовУСН.НеОплачено);
				}
				//КолвоЭлементовКоллекции = ТаблицаПрихода.Количество();
				//УчетАгентскогоНДС = Ложь;
				if(true/*ТипЗнч(Договор) = Тип("СправочникСсылка.ДоговорыКонтрагентов")*/)
				{
					//УчетАгентскогоНДС = Договор.УчетАгентскогоНДС;
				}
				if(true/*ВидОперации = "УслугаКомиссионера"*/)
				{
					/*СуммаВзаиморасчетов   = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(ДокументСсылка.Товары.Итог("СуммаВознаграждения"), ВалютаДокумента,
														   СтруктураШапкиДокумента.ВалютаВзаиморасчетов,
														   СтруктураШапкиДокумента.КурсДокумента, КурсВзаиморасчетов,
														   СтруктураШапкиДокумента.КратностьДокумента, КратностьВзаиморасчетов);*/
				}
				//ЗачетАвансаПоставщикуУСН(СтруктураШапкиДокумента, ТаблицаПрихода, ДвиженияРегистров, Договор, Сделка, ТаблицаРД, СуммаВзаиморасчетов, (ЭтапПроведения > 0));
				/*//КУДиР.Содержание = "Поступление в счет аванса. ";
*/
			}
			if(true/*(ВидОперации = "НачислениеЗП") ИЛИ (ВидОперации = "Выпуск")*/)
			{
				//МоментДокумента = СтруктураШапкиДокумента.Ссылка.МоментВремени().Дата;
			}
			if(true/*НЕ ДвиженияРегистров = Неопределено*/)
			{
				if(true/*ДвиженияРегистров.ВзаиморасчетыРасход.Количество() > 0*/)
				{
					//НаборЗаписей = РегистрыНакопления.ВзаиморасчетыУСН.СоздатьНаборЗаписей();
					//НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
					//ТаблицаДвижений = НаборЗаписей.Выгрузить();
					//ТаблицаДвижений.Очистить();
					/*// Заполним таблицу движений.
*/
					//ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДвиженияРегистров.ВзаиморасчетыРасход, ТаблицаДвижений);
					/*// Недостающие поля.
*/
					//ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка.Организация, "Организация");
					//ТаблицаДвижений.ЗаполнитьЗначения(МоментДокумента, "Период");
					//ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
					//ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
					if(true/*ЭтапПроведения = 0*/)
					{
						//ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(НаборЗаписей, ТаблицаДвижений);
						//НаборЗаписей.Записать(Истина);
					}
				}
				if(true/*ДвиженияРегистров.РасходыУСН.Количество() > 0*/)
				{
					//НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
					//НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
					//ТаблицаДвижений = НаборЗаписей.Выгрузить();
					//ТаблицаДвижений.Очистить();
					/*// Заполним таблицу движений.
*/
					//ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ДвиженияРегистров.РасходыУСН, ТаблицаДвижений);
					/*// Недостающие поля.
*/
					//ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка.Организация, "Организация");
					//ТаблицаДвижений.ЗаполнитьЗначения(МоментДокумента, "Период");
					//ТаблицаДвижений.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
					//ТаблицаДвижений.ЗаполнитьЗначения(Истина, "Активность");
					if(true/*ЭтапПроведения = 0*/)
					{
						//ОбщегоНазначения.ДобавитьСтрокиВНаборЗаписей(НаборЗаписей, ТаблицаДвижений);
						//НаборЗаписей.Записать(Истина);
					}
				}
				if(true/*(ДвиженияРегистров.КУДиР.Количество() > 0)
			ИЛИ (КУДиР.Графа4 <> 0) 
			ИЛИ (КУДиР.Графа5 <> 0) 
			ИЛИ (КУДиР.Графа6 <> 0)
			ИЛИ (КУДиР.Графа7 <> 0)*/)
				{
					//ИмяДокумента = МетаданныеДокумента.Имя;
					//ТаблицаРасходов = ДвиженияРегистров.КУДиР.Скопировать();
					if(true/*ТаблицаРасходов.Колонки.Найти("ВидРасхода") = Неопределено*/)
					{
						//ТаблицаРасходов.Колонки.Добавить("ВидРасхода");
					}
					if(true/*ТаблицаРасходов.Колонки.Найти("ОтражениеВУСН") = Неопределено*/)
					{
						//ТаблицаРасходов.Колонки.Добавить("ОтражениеВУСН");
					}
					if(true/*ТаблицаРасходов.Колонки.Найти("Валюта") = Неопределено*/)
					{
						//ТаблицаРасходов.Колонки.Добавить("Валюта");
						//ТаблицаРасходов.ЗаполнитьЗначения(ВалютаРегламентированногоУчета, "Валюта");
					}
					if(true/*ТаблицаРасходов.Колонки.Найти("Сумма") = Неопределено*/)
					{
						//ТаблицаРасходов.Колонки.Добавить("Сумма");
						//ТаблицаРасходов.ЗаполнитьЗначения(0, "Сумма");
					}
					if(true/*ТаблицаРасходов.Колонки.Найти("НДС") = Неопределено*/)
					{
						//ТаблицаРасходов.Колонки.Добавить("НДС");
						//ТаблицаРасходов.ЗаполнитьЗначения(0, "НДС");
					}
					/*//ТаблицаРасходов.Свернуть("ВидРасхода, ОтражениеВУСН, Валюта", "Сумма, НДС");
*/
					//КолвоЭлементовКоллекции = ТаблицаРасходов.Количество();
					if(true/*ВидОперации = "РаспределениеЕНВД"*/)
					{
						//ДеревоРасходов = ТаблицуЗначенийВТаблицуСГруппировкой(ТаблицаРасходов, "", "Сумма, НДС", ВидОперации);
					}
					/*//ТаблицаРасходов.Свернуть("ВидРасхода", "Сумма, НДС");
*/
					//ДеревоРасходов.Колонки.Добавить("Графа4", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					//ДеревоРасходов.Колонки.Добавить("Графа5", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					//ДеревоРасходов.Колонки.Добавить("Графа6", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					//ДеревоРасходов.Колонки.Добавить("ДоходЕНВД", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2)));
					//ДеревоРасходов.Колонки.Добавить("Описание");
					if(true/*ДеревоРасходов.Итог("Сумма") <> 0*/)
					{
						//К4 = КУДиР.Графа4 / ДеревоРасходов.Итог("Сумма");
						//К5 = КУДиР.Графа5 / ДеревоРасходов.Итог("Сумма");
						//К6 = КУДиР.Графа6 / ДеревоРасходов.Итог("Сумма");
						//КЕ = КУДиР.ДоходЕНВД / ДеревоРасходов.Итог("Сумма");
						if(true/*ДеревоРасходов.Количество() > 0*/)
						{
							//ДеревоРасходов[0].Графа4 = ДеревоРасходов[0].Графа4 + (КУДиР.Графа4 - ДеревоРасходов.Итог("Графа4"));
							//ДеревоРасходов[0].Графа5 = ДеревоРасходов[0].Графа5 + (КУДиР.Графа5 - ДеревоРасходов.Итог("Графа5"));
							//ДеревоРасходов[0].Графа6 = ДеревоРасходов[0].Графа6 + (КУДиР.Графа6 - ДеревоРасходов.Итог("Графа6"));
							//ДеревоРасходов[0].ДоходЕНВД = ДеревоРасходов[0].ДоходЕНВД + (КУДиР.ДоходЕНВД - ДеревоРасходов.Итог("ДоходЕНВД"));
						}
					}
					if(true/*(ДеревоРасходов.Количество() = 0) И ((КУДир.Графа4 <> 0) ИЛИ (КУДир.Графа5 <> 0) ИЛИ (КУДир.Графа6 <> 0) ИЛИ (КУДир.Графа7 <> 0))*/)
					{
						//Запись = ДеревоРасходов.Добавить();
						//Запись.Описание = КУДиР.Содержание;
						//Запись.Графа4	= КУДиР.Графа4;
						//Запись.Графа5	= КУДиР.Графа5;
						//Запись.Графа6	= КУДиР.Графа6;
						//Запись.Сумма	= КУДиР.Графа7;
						//Запись.НДС		= КУДиР.НДС;
						//Запись.ДоходЕНВД= КУДиР.ДоходЕНВД;
					}
					//НаборЗаписей = РегистрыНакопления.КнигаУчетаДоходовИРасходов.СоздатьНаборЗаписей();
					//НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
					//НаборЗаписей.Прочитать();
					//Инд=0;
					while(true/*Инд < НаборЗаписей.Количество()*/)
					{
						if(true/*НЕ НаборЗаписей[Инд].ЭтапПроведения < ЭтапПроведения*/)
						{
							//НаборЗаписей.Удалить(Инд);
						}
					}
					/*;
			
			НаборЗаписейРасшифровки = РегистрыСведений.РасшифровкаКУДиР.СоздатьНаборЗаписей();*/
					//НаборЗаписейРасшифровки.Отбор.Регистратор.Установить(ДокументСсылка);
					//НаборЗаписейРасшифровки.Прочитать();
					//Инд=0;
					while(true/*Инд < НаборЗаписейРасшифровки.Количество()*/)
					{
						if(true/*НЕ НаборЗаписейРасшифровки[Инд].ЭтапПроведения < ЭтапПроведения*/)
						{
							//НаборЗаписейРасшифровки.Удалить(Инд);
						}
					}
					//НаборЗаписей.Записать(Истина);
					//НаборЗаписейРасшифровки.Записать(Истина);
				}
			}
		}
		//Определяет по виду документов вид движения и вызывает основную процедуру
		//

		public void ДвиженияУСН(/*ДокументСсылка, РежимПроведения = Неопределено*/)
		{
			/*//
*/
			/*//Получение реквизитов шапки
*/
			//СтруктураШапкиДокумента = Новый Структура("Ссылка, ВидДокумента, Дата,  Организация,ДатаОплаты,Оплачено,ОтражатьВНалоговомУчете,ОтражатьВУправленческомУчете", ДокументСсылка, ДокументСсылка.Метаданные().Имя, ДокументСсылка.Дата);
			//МетаданныеДокумента = ДокументСсылка.Метаданные().Реквизиты;
			if(true/*СтруктураШапкиДокумента.ОтражатьВНалоговомУчете=Ложь*/)
			{
			}
			if(true/*НЕ ЗначениеЗаполнено(СтруктураШапкиДокумента["ДатаОплаты"])*/)
			{
				//СтруктураШапкиДокумента.Вставить("ДатаОплаты",СтруктураШапкиДокумента.Дата);
			}
			if(true/*НЕ ПрименениеУСН(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.ДатаОплаты)*/)
			{
			}
			if(true/*ПрименениеУСНДоходы(СтруктураШапкиДокумента.Организация, СтруктураШапкиДокумента.ДатаОплаты)*/)
			{
			}
			/*//~//
*/
			//ПараметрыПартионногоУчета = глЗначениеПеременной("ПараметрыПартионногоУчета");
			//СтруктураШапкиДокумента.Вставить("ПроводитьПоПартиям",ПараметрыПартионногоУчета.СписыватьПартииПриПроведенииДокументовНал);
			if(true/*РежимПроведения = Неопределено*/)
			{
				/*//Вызвано обработкой вовстановления последовательности. Выполняются все действия (крооме регистрации в последовательности)
*/
				/*//Очистим лишние движения под документами, что бы они не повлияли на результаты запросов
*/
				//НаборЗаписей = РегистрыНакопления.ВзаиморасчетыУСН.СоздатьНаборЗаписей();
				//НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
				if(true/*ЗначениеЗаполнено(НаборЗаписей.Отбор.Регистратор.Значение)*/)
				{
					//НаборЗаписей.Записать(Истина);
				}
				if(true/*(НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах")) И
			(НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПолучениеУслугПоПереработке")) И
			(НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет")) И
			(НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) И
			(НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")) И
			(НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ")) И
			(НЕ ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.РегламентныеОперацииНалоговогоУчетаПоУСН"))*/)
				{
					//НаборЗаписей = РегистрыНакопления.РасходыПриУСН.СоздатьНаборЗаписей();
					//НаборЗаписей.Отбор.Регистратор.Установить(ДокументСсылка);
					if(true/*ЗначениеЗаполнено(НаборЗаписей.Отбор.Регистратор.Значение)*/)
					{
						//НаборЗаписей.Прочитать();
						//Инд=0;
						while(true/*Инд < НаборЗаписей.Количество()*/)
						{
							if(true/*НаборЗаписей[Инд].ЭтапПроведения < 0*/)
							{
								//Инд=Инд+1;
							}
						}
						/*;
				
				НаборЗаписей.Записать(Истина);*/
					}
				}
			}
			/*//~\\
*/
			if(true/*ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.АвансовыйОтчет")*/)
			{
				//ОтразитьВУСН(ДокументСсылка, "Оплата", СтруктураШапкиДокумента,1);
				//ОтразитьВУСН(ДокументСсылка, "Поступление", СтруктураШапкиДокумента,2);
			}
		}
		////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
		// ОПЕРАЦИИ С ПОСЛЕДОВАТЕЛЬНОСТЬЮ

		public void РегистрацияВПоследовательностиНУ_УСН(/*СтруктураШапкиДокумента, РежимПроведения*/)
		{
			/*//~
*/
			if(true/*СтруктураШапкиДокумента.ПроводитьПоПартиям*/)
			{
				/*//Непосредственная регистрация в последовательности
*/
				//ПоследовательностьДляРегистрации = Последовательности.НалоговыйУчетУСН.СоздатьНаборЗаписей();
				//ПоследовательностьДляРегистрации.Отбор.Регистратор.Установить(СтруктураШапкиДокумента.Ссылка);
				//ПоследовательностьДляРегистрации.Прочитать();
				if(true/*ПоследовательностьДляРегистрации.Количество()>0*/)
				{
					//ПоследовательностьДляРегистрации.Очистить();
				}
				//ЗаписьРегистрации = ПоследовательностьДляРегистрации.Добавить();
				//ЗаписьРегистрации.Период 	  = СтруктураШапкиДокумента.ДатаОплаты;
				//ЗаписьРегистрации.Организация = СтруктураШапкиДокумента.Организация;
				/*// При этом должна соответствующим образом подвинуться граница (выполняется средствами платформы)
*/
				if(true/*ПоследовательностьДляРегистрации.Модифицированность()*/)
				{
					//ПоследовательностьДляРегистрации.Записать();
				}
			}
		}
		// Сдвиг ГП НУ УСН назад, используемый в неоперативных документах.
		//

		public void СдвигГраницыПоследовательностиНалоговогоУчетаУСННазад(/*Дата, Ссылка, Организация*/)
		{
			/*//~
*/
			//Запрос = Новый Запрос;
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	НУУСН_Границы.МоментВремени
	|ИЗ
	|	Последовательность.НалоговыйУчетУСН.Границы КАК НУУСН_Границы
	|ГДЕ
	|	НУУСН_Границы.Организация = &Организация
	|
	|	ДЛЯ ИЗМЕНЕНИЯ";*/
			//Запрос.УстановитьПараметр("Организация", Организация);
			if(true/*глЗначениеПеременной("ИспользоватьБлокировкуДанных")*/)
			{
				/*СтруктураПараметровБлокировки = Новый Структура(
			"ТипТаблицы,ИмяТаблицы"
			,"Последовательность"
			,"НалоговыйУчетУСН");*/
				//СтруктураЗначенийБлокировки = Новый Структура("Организация", Организация);
				//ОбщегоНазначения.УстановитьУправляемуюБлокировку(СтруктураПараметровБлокировки,СтруктураЗначенийБлокировки,, Ложь, "");
			}
			//Выборка = Запрос.Выполнить().Выбрать();
			//МоментВремениДокумента = Новый МоментВремени(Дата, Ссылка);
			if(true/*Выборка.Следующий()*/)
			{
				/*// Граница переносится назад, если документ проводится задним числом
*/
				if(true/*МоментВремениДокумента.Сравнить(Выборка.МоментВремени) = -1*/)
				{
					//Последовательности.НалоговыйУчетУСН.УстановитьГраницу(МоментВремениДокумента, Новый Структура("Организация", Организация));
				}
			}
		}
	}
}

