using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class СотрудникиОрганизацийКлиент
	{
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ ФОРМЫ ЭЛЕМЕНТА
		// Функция записывает элемент, спросив об этом у пользователя

		public object ЗаписатьЭлементПередВыполнениемДействия(/*ТекстВопроса = "", ЭтаФорма*/)
		{
			if(true/*ЭтаФорма.Модифицированность*/)
			{
				if(true/*Не ЗначениеЗаполнено(ТекстВопроса)*/)
				{
					/*ТекстВопроса = "Перед вводом на основании необходимо записать элемент. Записать элемент?";*/
				}
				/*Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);*/
				if(true/*Ответ = КодВозвратаДиалога.ОК*/)
				{
					/*Попытка
				Возврат ЭтаФорма.ЗаписатьВФорме();*/
					/*Исключение
				Возврат Ложь;*/
					/*КонецПопытки;*/
				}
			}
			return null;
		}
		// ЗаписатьЭлементПередВыполнениемДействия()
		// Функция проверяется прием на работу сотрудника или наличие начислений
		//
		// Параметры  Нет
		//
		// Возвращаемое значение:
		//   Булево
		//

		public object ЕстьНачисленияИлиПриемНаРаботу(/*ВидДоговора, Ссылка*/)
		{
			/*ВидыДоговоров = Новый Массив;*/
			/*СотрудникиОрганизацийПереопределяемый.ДополнитьВидыДоговоровДляУсловия(ВидыДоговоров);*/
			if(true/*ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский 
	 ИЛИ ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда*/)
			{
				/*//договор ГПХ, проверим регистрацию договоров документом
*/
				/*Запрос = Новый Запрос;*/
				/*ТекстЗапроса = 
		 "ВЫБРАТЬ ПЕРВЫЕ 1
		 |	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник
		 |ИЗ
		 |	Документ.ДоговорНаВыполнениеРаботСФизЛицом КАК ДоговорНаВыполнениеРаботСФизЛицом
		 |ГДЕ
		 |	ДоговорНаВыполнениеРаботСФизЛицом.Сотрудник = &парамСотрудник
		 |	И ДоговорНаВыполнениеРаботСФизЛицом.Проведен";*/
				/*Запрос.УстановитьПараметр("ПарамСотрудник", Ссылка);*/
				/*Запрос.Текст = ТекстЗапроса;*/
				/*Выборка = Запрос.Выполнить().Выбрать();*/
				if(true/*Выборка.Следующий()*/)
				{
				}
			}
			return null;
		}
		// ЕстьНачисленияИлиПриемНаРаботу()
		// Процедура формирует список обособленных подразделений организации

		public void СформироватьСписокОбособленныхПодразделений(/*ЭтаФорма*/)
		{
			/*Организация = ЭтаФорма.Организация;*/
			/*ЭтаФорма.мСписокОбособленныхПодразделений = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);*/
			/*ЭтаФорма.мСписокОбособленныхПодразделений.Вставить(0, Организация);*/
		}
		// СформироватьСписокОбособленныхПодразделений()
		// Процедура формирует заголовок надписи ПерсональныеНадбавки

		public void СформироватьЗаголовокПерсональныхНадбавок(/*ЭтаФорма*/)
		{
			/*ЭлементыФормы = ЭтаФорма.ЭлементыФормы;*/
			/*ТекстНадписи = СотрудникиОрганизацийПереопределяемый.СформироватьТекстНадписи();*/
			/*ЭлементыФормы.НадбавкиПоТрудовомуДоговоруТекст.Заголовок = ТекстНадписи;*/
			/*ЭлементыФормы.НадбавкиПоТрудовомуДоговоруТекст1.Заголовок = ТекстНадписи;*/
		}

		public void ПолучитьСписокПлановыхНачислений(/*ЭтаФорма*/)
		{
			/*Ссылка = ЭтаФорма.Ссылка;*/
			/*Организация = ЭтаФорма.Организация;*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеНачисленияСрезПоследних.Период,
	|	ПлановыеНачисленияСрезПоследних.ВидРасчета,
	|	ПлановыеНачисленияСрезПоследних.Показатель1,
	|	ПлановыеНачисленияСрезПоследних.Валюта1,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд1,
	|	ПлановыеНачисленияСрезПоследних.Показатель2,
	|	ПлановыеНачисленияСрезПоследних.Валюта2,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд2,
	|	ПлановыеНачисленияСрезПоследних.Показатель3,
	|	ПлановыеНачисленияСрезПоследних.Валюта3,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд3,
	|	ПлановыеНачисленияСрезПоследних.Показатель4,
	|	ПлановыеНачисленияСрезПоследних.Валюта4,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд4,
	|	ПлановыеНачисленияСрезПоследних.Показатель5,
	|	ПлановыеНачисленияСрезПоследних.Валюта5,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд5,
	|	ПлановыеНачисленияСрезПоследних.Показатель6,
	|	ПлановыеНачисленияСрезПоследних.Валюта6,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд6,
	|	ПлановыеНачисленияСрезПоследних.Действие,
	|	ПлановыеНачисленияСрезПоследних.ПериодЗавершения,
	|	ПлановыеНачисленияСрезПоследних.ВидРасчетаЗавершения,
	|	ПлановыеНачисленияСрезПоследних.ДействиеЗавершения,
	|	ПлановыеНачисленияСрезПоследних.Показатель1Завершения,
	|	ПлановыеНачисленияСрезПоследних.Показатель2Завершения,
	|	ПлановыеНачисленияСрезПоследних.Показатель3Завершения,
	|	ПлановыеНачисленияСрезПоследних.Показатель4Завершения,
	|	ПлановыеНачисленияСрезПоследних.Показатель5Завершения,
	|	ПлановыеНачисленияСрезПоследних.Показатель6Завершения,
	|	ПлановыеНачисленияСрезПоследних.Валюта1Завершения,
	|	ПлановыеНачисленияСрезПоследних.Валюта2Завершения,
	|	ПлановыеНачисленияСрезПоследних.Валюта3Завершения,
	|	ПлановыеНачисленияСрезПоследних.Валюта4Завершения,
	|	ПлановыеНачисленияСрезПоследних.Валюта5Завершения,
	|	ПлановыеНачисленияСрезПоследних.Валюта6Завершения,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд1Завершения,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд2Завершения,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд3Завершения,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд4Завершения,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд5Завершения,
	|	ПлановыеНачисленияСрезПоследних.ТарифныйРазряд6Завершения,
	|	ПлановыеНачисленияСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.ПлановыеНачисленияРаботниковОрганизаций.СрезПоследних(
	|			&ДатаСреза,
	|			Организация = &ГоловнаяОрганизация
	|				И Сотрудник = &Ссылка) КАК ПлановыеНачисленияСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПлановыеНачисленияСрезПоследних.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И ПлановыеНачисленияСрезПоследних.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.ПустаяСсылка)
	|				ТОГДА ЛОЖЬ
	|			КОГДА ПлановыеНачисленияСрезПоследних.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И ПлановыеНачисленияСрезПоследних.ДействиеЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.ПустаяСсылка)
	|					И &ДатаСреза < ПлановыеНачисленияСрезПоследних.ПериодЗавершения
	|				ТОГДА ЛОЖЬ
	|			КОГДА ПлановыеНачисленияСрезПоследних.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И &ДатаСреза >= ПлановыеНачисленияСрезПоследних.ПериодЗавершения
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";*/
			/*Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);*/
			/*Запрос.УстановитьПараметр("ДатаСреза", ОбщегоНазначения.ПолучитьРабочуюДату());*/
			/*Запрос.УстановитьПараметр("Ссылка", Ссылка);*/
			/*ЭтаФорма.ПлановыеНачисления = Запрос.Выполнить().Выгрузить();*/
		}

		public void ПолучитьСписокПлановыхУдержаний(/*ЭтаФорма*/)
		{
			/*Ссылка = ЭтаФорма.Ссылка;*/
			/*Организация = ЭтаФорма.Организация;*/
			/*Физлицо = ЭтаФорма.Физлицо;*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПлановыеУдержанияСрезПоследних.Период,
	|	ПлановыеУдержанияСрезПоследних.ВидРасчета,
	|	ПлановыеУдержанияСрезПоследних.Показатель1,
	|	ПлановыеУдержанияСрезПоследних.Валюта1,
	|	ПлановыеУдержанияСрезПоследних.Показатель2,
	|	ПлановыеУдержанияСрезПоследних.Валюта2,
	|	ПлановыеУдержанияСрезПоследних.Показатель3,
	|	ПлановыеУдержанияСрезПоследних.Валюта3,
	|	ПлановыеУдержанияСрезПоследних.Показатель4,
	|	ПлановыеУдержанияСрезПоследних.Валюта4,
	|	ПлановыеУдержанияСрезПоследних.Показатель5,
	|	ПлановыеУдержанияСрезПоследних.Валюта5,
	|	ПлановыеУдержанияСрезПоследних.Показатель6,
	|	ПлановыеУдержанияСрезПоследних.Валюта6,
	|	ПлановыеУдержанияСрезПоследних.Действие,
	|	ПлановыеУдержанияСрезПоследних.ПериодЗавершения,
	|	ПлановыеУдержанияСрезПоследних.ДействиеЗавершения,
	|	ПлановыеУдержанияСрезПоследних.Показатель1Завершения,
	|	ПлановыеУдержанияСрезПоследних.Показатель2Завершения,
	|	ПлановыеУдержанияСрезПоследних.Показатель3Завершения,
	|	ПлановыеУдержанияСрезПоследних.Показатель4Завершения,
	|	ПлановыеУдержанияСрезПоследних.Показатель5Завершения,
	|	ПлановыеУдержанияСрезПоследних.Показатель6Завершения,
	|	ПлановыеУдержанияСрезПоследних.Валюта1Завершения,
	|	ПлановыеУдержанияСрезПоследних.Валюта2Завершения,
	|	ПлановыеУдержанияСрезПоследних.Валюта3Завершения,
	|	ПлановыеУдержанияСрезПоследних.Валюта4Завершения,
	|	ПлановыеУдержанияСрезПоследних.Валюта5Завершения,
	|	ПлановыеУдержанияСрезПоследних.Валюта6Завершения,
	|	ПлановыеУдержанияСрезПоследних.Регистратор
	|ИЗ
	|	РегистрСведений.ПлановыеУдержанияРаботниковОрганизаций.СрезПоследних(
	|			&ДатаСреза,
	|			Организация = &ГоловнаяОрганизация
	|				И Физлицо = &Ссылка) КАК ПлановыеУдержанияСрезПоследних
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПлановыеУдержанияСрезПоследних.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И ПлановыеУдержанияСрезПоследних.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.ПустаяСсылка)
	|				ТОГДА ЛОЖЬ
	|			КОГДА ПлановыеУдержанияСрезПоследних.Действие = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И ПлановыеУдержанияСрезПоследних.ДействиеЗавершения <> ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.ПустаяСсылка)
	|					И &ДатаСреза < ПлановыеУдержанияСрезПоследних.ПериодЗавершения
	|				ТОГДА ЛОЖЬ
	|			КОГДА ПлановыеУдержанияСрезПоследних.ДействиеЗавершения = ЗНАЧЕНИЕ(Перечисление.ВидыДействияСНачислением.Прекратить)
	|					И &ДатаСреза >= ПлановыеУдержанияСрезПоследних.ПериодЗавершения
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";*/
			/*Запрос.УстановитьПараметр("ГоловнаяОрганизация", Организация);*/
			/*Запрос.УстановитьПараметр("ДатаСреза", ОбщегоНазначения.ПолучитьРабочуюДату());*/
			/*Запрос.УстановитьПараметр("Ссылка", Физлицо);*/
			/*ЭтаФорма.ПлановыеУдержания = Запрос.Выполнить().Выгрузить();*/
		}
		// Процедура очищает не используемые реквизиты перед записью объекта

		public void ОчиститьНеИспользуемыеРеквизиты(/*ЭтаФорма*/)
		{
			/*ВидыДоговоров = Новый Массив;*/
			/*СотрудникиОрганизацийПереопределяемый.ДополнитьВидыДоговоровДляУсловия(ВидыДоговоров);*/
			if(true/*ВидыДоговоров.Найти(ЭтаФорма.ВидДоговора) = Неопределено*/)
			{
				if(true/*СотрудникиОрганизацийПереопределяемый.ОчищатьВидЗанятости(ЭтаФорма)*/)
				{
					/*ЭтаФорма.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();*/
				}
				/*ЭтаФорма.НомерДоговора ="";*/
				/*ЭтаФорма.ДатаДоговора = Дата('00010101');*/
				/*ЭтаФорма.ПодразделениеОрганизации  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();*/
				/*ЭтаФорма.Должность		 = Справочники.ДолжностиОрганизаций.ПустаяСсылка();*/
				/*ЭтаФорма.ГрафикРаботы	 = Справочники.ГрафикиРаботы.ПустаяСсылка();*/
				/*ЭтаФорма.ЗанимаемыхСтавок = 0;*/
				/*ЭтаФорма.ДатаНачала 	  = Дата('00010101');*/
				/*ЭтаФорма.ДатаОкончания = Дата('00010101');*/
				/*ЭтаФорма.ИспытательныйСрок = 0;*/
				/*ЭтаФорма.ТарифнаяСтавка = 0;*/
				/*ЭтаФорма.ТарифныйРазряд = Справочники.ТарифныеРазряды.ПустаяСсылка();*/
				/*ЭтаФорма.ВалютаТарифнойСтавки = Справочники.Валюты.ПустаяСсылка();*/
			}
			/*СотрудникиОрганизацийПереопределяемый.ОчиститьНеИспользуемыеРеквизитыДополнительно(ЭтаФорма);*/
		}
		// Процедура устанавливает заголовок гиперссылкни ОткрытьСправочникФизлиц
		// в зависимости от варианта ввода физлица

		public void УстановитьЗаголовокОткрытьСправочникФизлиц(/*ЭтаФорма*/)
		{
			if(true/*ЭтаФорма.ВыборФизлица*/)
			{
				/*ЭтаФорма.ЭлементыФормы.ОткрытьСправочникФизлиц.Заголовок = "Открыть справочник физических лиц для выбора...";*/
			}
		}
		// УстановитьЗаголовокОткрытьСправочникФизлиц()
		// Процедура устанавливает доступность реквизитов физлица в зависимости от варианта ввода нового сотрудника

		public void УстановитьДоступностьРеквизитовФизлица(/*ЭтаФорма*/)
		{
			/*ЭлементыФормы 	= ЭтаФорма.ЭлементыФормы;*/
			/*ВыборФизлица	= ЭтаФорма.ВыборФизлица;*/
			/*ЭлементыФормы.НаименованиеФизлица.Видимость = Не ВыборФизлица;*/
			/*ЭлементыФормы.Физлицо.Видимость = ВыборФизлица;*/
			/*ЭлементыФормы.ДатаРождения.ТолькоПросмотр = ВыборФизлица;*/
			/*ЭлементыФормы.Пол.ТолькоПросмотр = ВыборФизлица;*/
			/*ЭлементыФормы.СтраховойНомерПФР.ТолькоПросмотр = ВыборФизлица;*/
			/*ЭлементыФормы.КодИМНС.ТолькоПросмотр = ВыборФизлица;*/
			/*ЭлементыФормы.ИНН.ТолькоПросмотр = ВыборФизлица;*/
		}
		// УстановитьДоступностьПоВИду()
		// Функция формирует структуру параметров для для ввода головной организации по подстроке
		//
		// Параметры
		//  НЕТ
		//
		// Возвращаемое значение:
		//   Структура имен и значений параметров
		//

		public object ПолучитьСтруктуруПараметровПодбораПоСтрокеОрганизации(/**/)
		{
			/*СтруктураПараметров = Новый Структура("ГоловнаяОрганизация", Справочники.Организации.ПустаяСсылка());*/
			return null;
		}
		// ПолучитьСтруктуруПараметровПодбораПоСтроке()()
		// Функция возвращает постфикс наименования, который соответствует виду договра
		// Возвращаемое значение:
		//   <Строка>   – постфикс наименования
		//

		public object ПолучитьПостфиксПоВидуДоговора(/*ВидДоговора, ВидЗанятости*/)
		{
			/*НовыйПостфикс = "";*/
			if(true/*ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор*/)
			{
				if(true/*ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство*/)
				{
					/*НовыйПостфикс ="(вн. совм.)";*/
				}
			}
			return null;
		}
		// ПолучитьПостфиксПоВидуДоговра()
		// Функция проверяет наличие в выборке из запроса постфикса, переданного
		// в качестве параметра и если есть такой, пытается подобрать другой постфикс
		// Параметры
		//  ПостфиксДляПроверки  – Строка – постфикс, который передаем для проверки
		//                 <продолжение описания параметра>
		//  ВыборкаИзЗапроса  – выборка из запроса по которой проверяем
		//
		// Возвращаемое значение:
		//   Строка   – подобранный постфикс наименования
		//

		public object ПроверитьИПодобратьПостфикс(/*ПостфиксДляПроверки, ВыборкаИзЗапроса*/)
		{
			/*НомПопытки = 1;*/
			/*НовыйПостфикс = ПостфиксДляПроверки;*/
			while(true/*Истина*/)
			{
				if(true/*НомПопытки > 9*/)
				{
					/*//выходи из цикла, не удалось автоматически подобрать постфикс
*/
					/*НовыйПостфикс = "";*/
					/*Прервать;*/
				}
				/*ВыборкаИзЗапроса.Сбросить();*/
				if(true/*ВыборкаИзЗапроса.НайтиСледующий(НовыйПостфикс,"Постфикс")*/)
				{
					/*НовыйПостфикс = Лев(ПостфиксДляПроверки,СтрДлина(ПостфиксДляПроверки)-1) + " " + Строка(НомПопытки) + ")";*/
					/*НомПопытки=НомПопытки + 1;*/
				}
			}
			return null;
		}
		// ПроверитьИПодобратьПостфикс()
		// Процедура управляет видимостью гиперссылки открытия формы физлица при вводе нового сотрудника
		// и заголовком гиперссылки

		public void УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно(/*ЭтаФорма*/)
		{
			/*РедактироватьФизлицоОтдельно	= ЭтаФорма.ЭлементыФормы.РедактироватьФизлицоОтдельно;*/
			/*ФизлицоОбъектНаименование		= ЭтаФорма.ФизлицоОбъект.Наименование;*/
			if(true/*ПустаяСтрока(ФизлицоОбъектНаименование)*/)
			{
				/*РедактироватьФизлицоОтдельно.Видимость = Ложь;*/
			}
		}
		// УстановитьЗаголовокВидимостьРедактированияФизлица()
		// Процедура изменяет заголовок гиперссылки ПерейтиКВводуГруппыДоступа

		public void УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа(/*ЭтаФорма*/)
		{
			/*ПерейтиКВводуГруппыДоступа 		= ЭтаФорма.ЭлементыФормы.ПерейтиКВводуГруппыДоступа;*/
			/*ФизлицоОбъект					= ЭтаФорма.ФизлицоОбъект;*/
			/*ГруппаДоступаФизическогоЛица 	= ФизлицоОбъект.ГруппаДоступаФизическогоЛица;*/
			/*ФизлицоОбъектНаименование		= ФизлицоОбъект.Наименование;*/
			/*ПерейтиКВводуГруппыДоступа.Видимость = ЭтаФорма.мЕстьОграниченияПравДоступаНаУровнеЗаписей И Не ЭтаФорма.ВыборФизлица И Не ПустаяСтрока(ФизлицоОбъектНаименование);*/
			if(true/*ПерейтиКВводуГруппыДоступа.Видимость*/)
			{
				if(true/*ЗначениеЗаполнено(ГруппаДоступаФизическогоЛица)*/)
				{
					/*ПерейтиКВводуГруппыДоступа.Заголовок = "Группа доступа: " + ГруппаДоступаФизическогоЛица + " ...";*/
					/*ПерейтиКВводуГруппыДоступа.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;*/
				}
			}
		}
		// УстановитьЗаголовокПерейтиКВводуГруппыДоступа()
		// Функция проверяет наличие ограничения прав доступа на уровне записей по физлицам
		// Возвращаемое значение:
		//   Истина - если есть ограничение
		//

		public object ЕстьОграничениеПравДоступаНаУровнеЗаписейПоФизлицам(/**/)
		{
			if(true/*ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей*/)
			{
				/*Запрос = Новый Запрос;*/
				/*Запрос.Текст = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа.Ссылка
		|ИЗ
		|	РегистрСведений.НазначениеВидовОбъектовДоступа КАК НазначениеВидовОбъектовДоступа
		|ГДЕ
		|	НазначениеВидовОбъектовДоступа.ВидОбъектаДоступа.Ссылка = ЗНАЧЕНИЕ(Перечисление.ВидыОбъектовДоступа.ФизическиеЛица)";*/
				/*Выборка = Запрос.Выполнить().Выбрать();*/
			}
			return null;
		}
		// ЕстьОграничениеПравДоступаНаУровнеЗаписейПоФизлицам()
		// Процедура получает ФИО физлица

		public void ПрочитатьФИО(/*ЭтаФорма*/)
		{
			/*мНаборЗаписейФИО	= ЭтаФорма.мНаборЗаписейФИО;*/
			/*Запрос = Новый Запрос;*/
			/*Запрос.УстановитьПараметр("ФизЛицо", ЭтаФорма.Физлицо);*/
			/*Запрос.Текст =
	"ВЫБРАТЬ
	|	ФИОФизЛицСрезПоследних.Период,
	|	ФИОФизЛицСрезПоследних.ФизЛицо,
	|	ФИОФизЛицСрезПоследних.Фамилия,
	|	ФИОФизЛицСрезПоследних.Имя,
	|	ФИОФизЛицСрезПоследних.Отчество
	|ИЗ
	|	РегистрСведений.ФИОФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ФИОФизЛицСрезПоследних";*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			/*мНаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();*/
			if(true/*Выборка.Следующий()*/)
			{
				/*ЗаполнитьЗначенияСвойств(мНаборЗаписейФИО.Добавить(), Выборка);*/
				/*ФИОСрез  = мНаборЗаписейФИО[0];*/
				/*ЭтаФорма.Фамилия  = ФИОСрез.Фамилия;*/
				/*ЭтаФорма.Имя      = ФИОСрез.Имя;*/
				/*ЭтаФорма.Отчество = ФИОСрез.Отчество;*/
			}
		}
		// ПрочитатьФИО()

		public void ОбработатьОтображениеОбособленногоПодразделения(/*ИзменятьДанные = Истина, ЭтаФорма*/)
		{
			/*ЭлементыФормы 				= ЭтаФорма.ЭлементыФормы;*/
			/*Организация 				= ЭтаФорма.Организация;*/
			/*ОбособленноеПодразделение	= ЭтаФорма.ОбособленноеПодразделение;*/
			if(true/*ЭтаФорма.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор*/)
			{
				/*ПоказыватьПодразделения = СотрудникиОрганизацийПереопределяемый.ПоказыватьОбособленноеПодразделение(ЭтаФорма);*/
				/*ЭлементыФормы.ОбособленноеПодразделение.Доступность  = ПоказыватьПодразделения;*/
				/*ЭлементыФормы.ОбособленноеПодразделение.АвтоОтметкаНезаполненного = ПоказыватьПодразделения;*/
				/*ЭлементыФормы.ОбособленноеПодразделение.ОтметкаНезаполненного = ПоказыватьПодразделения и Не ЗначениеЗаполнено(ОбособленноеПодразделение);*/
				if(true/*ЭлементыФормы.Найти("ОбособленноеПодразделение1") <> Неопределено*/)
				{
					/*ЭлементыФормы.ОбособленноеПодразделение1.Доступность = ПоказыватьПодразделения;*/
					/*ЭлементыФормы.ОбособленноеПодразделение1.АвтоОтметкаНезаполненного = ПоказыватьПодразделения;*/
					/*ЭлементыФормы.ОбособленноеПодразделение1.ОтметкаНезаполненного = ПоказыватьПодразделения и Не ЗначениеЗаполнено(ОбособленноеПодразделение);*/
				}
				if(true/*ИзменятьДанные и Не ПоказыватьПодразделения*/)
				{
					/*//	ОбособленноеПодразделение = Справочники.Организации.ПустаяСсылка();
*/
				}
			}
		}
		// Процедура управляет отображением кнопок выбора из списка

		public void ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(/*ЭтаФорма*/)
		{
			/*ЭлементыФормы 		= ЭтаФорма.ЭлементыФормы;*/
			/*ОрганизацияДляШР 	= ЭтаФорма.ОбособленноеПодразделение;*/
			/*ДатаАктуальности = ?(Не ЗначениеЗаполнено(ЭтаФорма.ДатаНачала), Неопределено, ЭтаФорма.ДатаНачала);*/
			/*СписокПодразделений = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("ПодразделениеОрганизации", ОрганизацияДляШР, ЭтаФорма.Должность, ДатаАктуальности);*/
			/*КоличествоЗначений = СписокПодразделений.Количество();*/
			/*ЭлементыФормы.ПодразделениеОрганизации.КнопкаСпискаВыбора = КоличествоЗначений > 0;*/
			/*ДополнительныйЭУ = ЭлементыФормы.Найти("ПодразделениеОрганизации1");*/
			if(true/*ДополнительныйЭУ <> Неопределено*/)
			{
				/*ДополнительныйЭУ.КнопкаСпискаВыбора = КоличествоЗначений > 0;*/
			}
			/*СписокДолжностей = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации("Должность", ОрганизацияДляШР, ЭтаФорма.ПодразделениеОрганизации, ДатаАктуальности);*/
			/*КоличествоЗначений = СписокДолжностей.Количество();*/
			/*ЭлементыФормы.Должность.КнопкаСпискаВыбора = КоличествоЗначений > 0;*/
			/*ДополнительныйЭУ = ЭлементыФормы.Найти("Должность1");*/
			if(true/*ДополнительныйЭУ <> Неопределено*/)
			{
				/*ДополнительныйЭУ.КнопкаСпискаВыбора = КоличествоЗначений > 0;*/
			}
		}
		// ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию()

		public void ФормаЭлементаОбновитьПредставлениеЭлемента(/*ИмяОбновляемогоЭлемента, ЭтаФорма, Параметр = Неопределено*/)
		{
			/*Ссылка = ЭтаФорма.Ссылка;*/
			/*Модифицированность = ЭтаФорма.Модифицированность;*/
			if(true/*ИмяОбновляемогоЭлемента = "Гражданство"*/)
			{
				/*мНаборЗаписейГражданство 	= ЭтаФорма.мНаборЗаписейГражданство;*/
				/*БылоГражданство = ЭтаФорма.Гражданство;*/
				/*БылаМодифицированность = Модифицированность;*/
				if(true/*мНаборЗаписейГражданство.Количество() > 0*/)
				{
					/*Гражданство = "" + мНаборЗаписейГражданство[0].Страна;*/
					if(true/*мНаборЗаписейГражданство[0].НеИмеетПравоНаПенсию*/)
					{
						/*Гражданство = Гражданство + ", не имеет права на медицинское и социальное страхование, право на пенсионное страхование зависит от срока трудового договора";*/
					}
					/*ЭтаФорма.Модифицированность = Истина;*/
				}
				/*ЭтаФорма.Модифицированность = БылаМодифицированность или БылоГражданство <> Гражданство;*/
				/*ЭтаФорма.Гражданство = Гражданство;*/
			}
		}
		// Процедура подбирает постфикс наименования перед записью нового сотрудника

		public void ПодобратьПостфиксНаименования(/*ЭтаФорма*/)
		{
			/*Ссылка  = ЭтаФорма.Ссылка;*/
			/*Физлицо = ЭтаФорма.Физлицо;*/
			/*Организация = ЭтаФорма.Организация;*/
			/*//запросом выбираем выбираем Актуальных не уволенных сотрудников
*/
			/*Запрос = Новый Запрос;*/
			/*ТекстЗапроса =
	"ВЫБРАТЬ
	|	Сотрудники.ПостфиксНаименования КАК Постфикс
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК Сотрудники
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		,
	|		Организация = &парамОрганизация
	|			И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
	|		ПО Сотрудники.Ссылка = Работники.Сотрудник
	|			И (Работники.ПричинаИзмененияСостояния = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
	|ГДЕ
	|	Сотрудники.Физлицо = &парамФизлицо
	|	И Сотрудники.Ссылка <> &Ссылка
	|	И Сотрудники.Организация = &парамОрганизация
	|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL
	|	И Сотрудники.Актуальность";*/
			/*Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);*/
			/*Запрос.УстановитьПараметр("парамОрганизация", Организация);*/
			/*Запрос.УстановитьПараметр("Ссылка", Ссылка);*/
			/*Запрос.Текст = ТекстЗапроса;*/
			/*ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();*/
			if(true/*ВыборкаИзЗапроса.Количество()>0*/)
			{
				/*//есть сотрудники по этому физлицу, необходимо подобрать постфикс
*/
				/*// проверим, есть сотрудник с пустым постфиксом
*/
				if(true/*ВыборкаИзЗапроса.НайтиСледующий(СОКРЛП(ЭтаФорма.ПостфиксНаименования),"Постфикс")*/)
				{
					/*//есть сотрудники с таким постфиксом, значит необходимо назначить другой постфикс этому сотруднику
*/
					/*ПостфиксНаименования = ПроверитьИПодобратьПостфикс(ПолучитьПостфиксПоВидуДоговора(ЭтаФорма.ВидДоговора, ЭтаФорма.ВидЗанятости), ВыборкаИзЗапроса);*/
					if(true/*Не ПустаяСтрока(ПостфиксНаименования)*/)
					{
						/*ЭтаФорма.Наименование = СОКРЛП(ЭтаФорма.ФизлицоОбъект.Наименование) + " " + ПостфиксНаименования;*/
					}
				}
			}
		}
		// ПодобратьПостфиксНаименования()

		public void ОбновитьДанныеНаСтраницах(/*ЭтаФорма*/)
		{
			/*ПанельДанныхСотрудник = ЭтаФорма.ЭлементыФормы.ПанельДанныхСотрудник;*/
			if(true/*ПанельДанныхСотрудник.ТекущаяСтраница = ПанельДанныхСотрудник.Страницы.НачисленияУдержания*/)
			{
				/*ПолучитьСписокПлановыхНачислений(ЭтаФорма);*/
				/*ПолучитьСписокПлановыхУдержаний(ЭтаФорма);*/
			}
		}
		// Процедура обрабатывает изменения ЭУ ВыборФизлица

		public void ОбработатьВыборФизлицаПриИзменении(/*ЭтаФорма*/)
		{
			/*ВыборФизлица	= ЭтаФорма.ВыборФизлица;*/
			/*ФизЛицо 		= ЭтаФорма.ФизЛицо;*/
			/*ФизлицоОбъект 	= ЭтаФорма.ФизлицоОбъект;*/
			/*//сбрасываем ссылку на физлицо, если выбрали - создавать новое физлицо
*/
			if(true/*Не ВыборФизлица И НЕ Физлицо.Пустая()*/)
			{
				/*ЭтаФорма.Физлицо 		= Справочники.ФизическиеЛица.ПустаяСсылка();*/
				/*ЭтаФорма.ФизлицоОбъект 	= Справочники.ФизическиеЛица.СоздатьЭлемент();*/
			}
			/*УстановитьДоступностьРеквизитовФизлица(ЭтаФорма);*/
			/*ЭтаФорма.Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ЭтаФорма.ФизлицоОбъект, ЭтаФорма.ПостфиксНаименования);*/
			/*УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно(ЭтаФорма);*/
			/*УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа(ЭтаФорма);*/
			/*УстановитьЗаголовокОткрытьСправочникФизлиц(ЭтаФорма);*/
			/*ЭтаФорма.мНаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();*/
			/*ПрочитатьФИО(ЭтаФорма);*/
			/*ПроверитьНовыеЗначенияКодовФизлица(ЭтаФорма);*/
		}
		// ОбработатьВыборФизлицаПриИзменении()
		// Процедура устанавливает видимость ЭУ в зависимости от использования тарифного разряда

		public void УстановитьВидимостьЭУПоИспользованиюТарифногоРазряда(/*ЭтаФорма, ВидРасчета*/)
		{
			/*ЭлементыФормы = ЭтаФорма.ЭлементыФормы;*/
			if(true/*ЭтаФорма.мДоступнаРольРасчетчика или ЭтаФорма.мДоступнаРольКадровика*/)
			{
				/*ИспользоватьТарифныйРазряд = ВидРасчета.ТребуетВводаТарифногоРазряда;*/
				/*ЭлементыФормы.НадписьТарифнаяСтавка.Заголовок = ?(ИспользоватьТарифныйРазряд,"Разряд:","Тариф \ Оклад:");*/
				/*ЭлементыФормы.ТарифныйРазряд.Видимость = ИспользоватьТарифныйРазряд;*/
				/*ЭлементыФормы.ТарифнаяСтавка.Видимость = Не ИспользоватьТарифныйРазряд;*/
				/*ЭлементыФормы.НадписьТарифнаяСтавка1.Заголовок = ?(ИспользоватьТарифныйРазряд,"Разряд:","Тариф \ Оклад:");*/
				/*ЭлементыФормы.ТарифныйРазряд1.Видимость = ИспользоватьТарифныйРазряд;*/
				/*ЭлементыФормы.ТарифнаяСтавка1.Видимость = Не ИспользоватьТарифныйРазряд;*/
				if(true/*ИспользоватьТарифныйРазряд*/)
				{
					/*ЭлементыФормы.НадписьВалютаТарифнойСтавки.Видимость = Ложь;*/
					/*ЭлементыФормы.ВалютаТарифнойСтавки.Видимость 		= Ложь;*/
					/*ЭлементыФормы.НадписьВалютаТарифнойСтавки1.Видимость = Ложь;*/
					/*ЭлементыФормы.ВалютаТарифнойСтавки1.Видимость 		= Ложь;*/
				}
			}
		}
		// УстановитьВидимостьЭУПоИспользованиюТарифногоРазряда()

		public void ПроверитьНовыеЗначенияКодовФизлица(/*ЭтаФорма*/)
		{
			/*ЭлементыФормы 	= ЭтаФорма.ЭлементыФормы;*/
			/*ФизлицоОбъект 	= ЭтаФорма.ФизлицоОбъект;*/
			/*// изменилось физлицо, обработаем отображение полей ввода ИНН и СтраховойНомерПФР
*/
			/*РаботаСДиалогами.ПроверитьИННОформитьПолеВвода(ФизлицоОбъект.ИНН, ЭлементыФормы.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо);*/
			/*ЭлементыФормы.ИНН1.ЦветТекстаПоля 	= ЭлементыФормы.ИНН.ЦветТекстаПоля;*/
			/*ЭлементыФормы.ИНН1.Подсказка 		= ЭлементыФормы.ИНН.Подсказка;*/
			/*РаботаСДиалогамиЗК.ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(ФизлицоОбъект.СтраховойНомерПФР, ЭлементыФормы.СтраховойНомерПФР);*/
			/*ЭлементыФормы.СтраховойНомерПФР1.ЦветТекстаПоля 	= ЭлементыФормы.СтраховойНомерПФР.ЦветТекстаПоля;*/
			/*ЭлементыФормы.СтраховойНомерПФР1.Подсказка 			= ЭлементыФормы.СтраховойНомерПФР.Подсказка;*/
		}

		public void ЗаполнитьНаборыПоФизлицу(/*ЭтаФорма*/)
		{
			/*ЭтаФорма.мНаборЗаписейГражданство.Очистить();*/
			/*ЭтаФорма.мНаборЗаписейГражданствоПриОткрытии.Очистить();*/
			/*ЭтаФорма.мНаборЗаписейИнвалидность.Очистить();*/
			/*ЭтаФорма.мНаборЗаписейИнвалидностьПриОткрытии.Очистить();*/
			/*ЭтаФорма.мНаборЗаписейПринятыеПоДолгосрочнымДоговорам.Очистить();*/
			/*ЭтаФорма.мНаборЗаписейПринятыеПоДолгосрочнымДоговорамПриОткрытии.Очистить();*/
			if(true/*ЭтаФорма.Физлицо.Пустая()*/)
			{
			}
			/*Параметр = ЭтаФорма.Физлицо;*/
			/*ОбщегоНазначения.ПолучитьСвязанныеДанныеФизлица(Параметр, ЭтаФорма.мНаборЗаписейГражданство);*/
			if(true/*ЭтаФорма.мНаборЗаписейГражданство.Количество() > 0*/)
			{
				/*ЗаполнитьЗначенияСвойств(ЭтаФорма.мНаборЗаписейГражданствоПриОткрытии.Добавить(), ЭтаФорма.мНаборЗаписейГражданство[0]);*/
			}
			/*ОбщегоНазначения.ПолучитьСвязанныеДанныеФизлица(Параметр, ЭтаФорма.мНаборЗаписейИнвалидность);*/
			if(true/*ЭтаФорма.мНаборЗаписейИнвалидность.Количество() > 0*/)
			{
				/*ЗаполнитьЗначенияСвойств(ЭтаФорма.мНаборЗаписейИнвалидностьПриОткрытии.Добавить(), ЭтаФорма.мНаборЗаписейИнвалидность[0]);*/
			}
			/*ЭтаФорма.мНаборЗаписейПринятыеПоДолгосрочнымДоговорам.Отбор.ФизЛицо.Установить(Параметр);*/
			/*ЭтаФорма.мНаборЗаписейПринятыеПоДолгосрочнымДоговорам.Прочитать();*/
			if(true/*ЭтаФорма.мНаборЗаписейПринятыеПоДолгосрочнымДоговорам.Количество() > 0*/)
			{
				/*ЭтаФорма.мНаборЗаписейПринятыеПоДолгосрочнымДоговорамПриОткрытии.Загрузить(ЭтаФорма.мНаборЗаписейПринятыеПоДолгосрочнымДоговорам.Выгрузить());*/
			}
			/*СотрудникиОрганизацийПереопределяемый.ЗаполнитьДополнительныеНаборыПоФизлицу(ЭтаФорма);*/
		}
		// Процедура обрабатывает изменение ЭУ физлицо

		public void ФормаЭлементаОбработатьИзменениеФизлица(/*ЭтаФорма*/)
		{
			/*Физлицо = ЭтаФорма.ФизЛицо;*/
			if(true/*Физлицо.Пустая()*/)
			{
				/*ЭтаФорма.Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка();*/
				/*ЭтаФорма.ФизлицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();*/
			}
			/*ЭтаФорма.Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ЭтаФорма.ФизлицоОбъект, ЭтаФорма.ПостфиксНаименования);*/
			/*УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно(ЭтаФорма);*/
			/*ПрочитатьФИО(ЭтаФорма);*/
			/*ЗаполнитьНаборыПоФизлицу(ЭтаФорма);*/
			/*ПроверитьНовыеЗначенияКодовФизлица(ЭтаФорма);*/
		}
		// ОбработатьИзменениеФизлица()

		public void ФормаЭлементаИННПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ЭлементыФормы 	= ЭтаФорма.ЭлементыФормы;*/
			/*ФизлицоОбъект 	= ЭтаФорма.ФизлицоОбъект;*/
			/*РаботаСДиалогами.ПроверитьИННОформитьПолеВвода(ЭтаФорма.ФизлицоОбъект.ИНН, ЭлементыФормы.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо);*/
			if(true/*ЭлементыФормы.Найти("ИНН1") <> Неопределено*/)
			{
				/*ЭлементыФормы.ИНН1.ЦветТекстаПоля 	= ЭлементыФормы.ИНН.ЦветТекстаПоля;*/
				/*ЭлементыФормы.ИНН1.Подсказка 		= ЭлементыФормы.ИНН.Подсказка;*/
			}
			if(true/*НЕ ЗначениеЗаполнено(ФизлицоОбъект.КодИМНС)*/)
			{
				/*ЭтаФорма.ФизлицоОбъект.КодИМНС = Лев(ФизлицоОбъект.ИНН,4);*/
			}
		}

		public void ФормаЭлементаСтраховойНомерПФРПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ЭлементыФормы 	= ЭтаФорма.ЭлементыФормы;*/
			/*РаботаСДиалогамиЗК.ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(ЭтаФорма.ФизлицоОбъект.СтраховойНомерПФР, ЭлементыФормы.СтраховойНомерПФР);*/
			if(true/*ЭлементыФормы.Найти("СтраховойНомерПФР1") <> Неопределено*/)
			{
				/*ЭлементыФормы.СтраховойНомерПФР1.ЦветТекстаПоля 	= ЭлементыФормы.СтраховойНомерПФР.ЦветТекстаПоля;*/
				/*ЭлементыФормы.СтраховойНомерПФР1.Подсказка 			= ЭлементыФормы.СтраховойНомерПФР.Подсказка;*/
			}
		}
		// Процедура обрабатывает отображение обособленного подразделения
		// и провереят ПодразделениеОрганизации в трудовом договоре

		public void ОбработкаРеквизитовТрудовогоДоговора(/*ЭтаФорма*/)
		{
			/*ОбособленноеПодразделение 	= ЭтаФорма.ОбособленноеПодразделение;*/
			/*Организация 				= ЭтаФорма.Организация;*/
			/*ПодразделениеОрганизации 	= ЭтаФорма.ПодразделениеОрганизации;*/
			if(true/*Не ЗначениеЗаполнено(ОбособленноеПодразделение)
		или Не Организация = ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение)*/)
			{
				/*ЭтаФорма.ОбособленноеПодразделение = Организация;*/
			}
			if(true/*Не ПодразделениеОрганизации.Пустая() 
		и Не ПодразделениеОрганизации.Владелец = ОбособленноеПодразделение*/)
			{
				/*//выбранное подразделение организации не соответствует организации
*/
				/*ЭтаФорма.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();*/
				/*Предупреждение("Выбранное подразделение не соответствует " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации") + "!");*/
			}
		}
		// Процедура проверяет какой вид занятости установить по умолчанию

		public void ПроверитьИУстановитьВидЗанятости(/*НеЗадаватьВопрос = Истина, ЭтаФорма*/)
		{
			/*ВидЗанятости	= ЭтаФорма.ВидЗанятости;*/
			/*Организация 	= ЭтаФорма.Организация;*/
			/*Физлицо		 	= ЭтаФорма.Физлицо;*/
			/*ДатаНачала	 	= ЭтаФорма.ДатаНачала;*/
			/*Ссылка		 	= ЭтаФорма.Ссылка;*/
			/*НадоПроверятьВидЗанятости = СотрудникиОрганизацийПереопределяемый.ПроверитьНеобходимостьУстановкиВидаЗанятости(ЭтаФорма);*/
			if(true/*НадоПроверятьВидЗанятости*/)
			{
				/*//проверим, есть актуальный не уволенный сотрудник в этой организации с видом занятости
*/
				/*// основное место работы или совместитель
*/
				/*// и если есть установим вид занятости - Внутреннее совместительство
*/
				/*Запрос = Новый Запрос;*/
				/*ТекстЗапроса =
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Сотрудники.ВидЗанятости,
		|	Сотрудники.Физлицо.Наименование КАК ФизлицоНаименование
		|ИЗ
		|	Справочник.СотрудникиОрганизаций КАК Сотрудники
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.РаботникиОрганизаций.СрезПоследних(
		|				&парамДатаСреза,
		|				Организация = &парамОрганизация
		|					И Сотрудник.Физлицо = &парамФизлицо) КАК Работники
		|		ПО Сотрудники.Ссылка = Работники.Сотрудник
		|			И (ВЫБОР
		|				КОГДА Работники.ПериодЗавершения <= &парамДатаСреза
		|						И Работники.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|					ТОГДА Работники.ПричинаИзмененияСостоянияЗавершения
		|				ИНАЧЕ Работники.ПричинаИзмененияСостояния
		|			КОНЕЦ = ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение))
		|ГДЕ
		|	Сотрудники.Физлицо = &парамФизлицо
		|	И Сотрудники.Организация = &парамОрганизация
		|	И Работники.ПричинаИзмененияСостояния ЕСТЬ NULL 
		|	И Сотрудники.Актуальность
		|	И Сотрудники.Ссылка <> &парамТекущийСотрудник
		|	И Сотрудники.ВидЗанятости В (ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы), ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство))";*/
				/*ДатаСреза = ?(ЗначениеЗаполнено(ДатаНачала), ДатаНачала, ОбщегоНазначения.ПолучитьРабочуюДату());*/
				/*Запрос.УстановитьПараметр("парамФизлицо",     Физлицо);*/
				/*Запрос.УстановитьПараметр("парамДатаСреза",   ДатаСреза);*/
				/*Запрос.УстановитьПараметр("парамТекущийСотрудник", Ссылка);*/
				/*Запрос.УстановитьПараметр("парамОрганизация", Организация);*/
				/*Запрос.Текст = ТекстЗапроса;*/
				/*Выборка = Запрос.Выполнить().Выбрать();*/
				if(true/*Выборка.Следующий()*/)
				{
					if(true/*НеЗадаватьВопрос*/)
					{
						/*ЭтаФорма.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство;*/
					}
				}
			}
		}
		// ПроверитьИУстановитьВидЗанятости()

		public void ПодразделениеДолжностьНачалоВыбораИзСписка(/*Элемент, СтандартнаяОбработка, ТипЭлемента, ЭтаФорма*/)
		{
			/*Организация 				= ЭтаФорма.ОбособленноеПодразделение;*/
			/*ПодразделениеОрганизации 	= ЭтаФорма.ПодразделениеОрганизации;*/
			/*Должность 					= ЭтаФорма.Должность;*/
			/*СтандартнаяОбработка = Ложь;*/
			/*СписокВыбора = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации(ТипЭлемента, Организация, ?(ТипЭлемента = "Должность", ПодразделениеОрганизации, Должность));*/
			/*Элемент.ВысотаСпискаВыбора = Мин(10, СписокВыбора.Количество());*/
			/*ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));*/
			if(true/*ЭлементСписка <> Неопределено  и Элемент.Значение <> ЭлементСписка.Значение*/)
			{
				/*Элемент.Значение = ЭлементСписка.Значение;*/
				/*ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);*/
				/*СотрудникиОрганизацийПереопределяемый.ЗаполнитьРеквизитыПоШтатномуРасписанию(ЭтаФорма);*/
			}
		}

		public void ПроверитьИПодобратьОрганизациюПередОткрытиемФормы(/*ЭтаФорма*/)
		{
			/*Организация = ЭтаФорма.Организация;*/
			if(true/*Не ЗначениеЗаполнено(Организация)*/)
			{
				/*ОбособленноеПодразделение = РаботаСДиалогами.ПолучитьОрганизацию();*/
				/*ЭтаФорма.ОбособленноеПодразделение = ОбособленноеПодразделение;*/
				/*ЭтаФорма.Организация = ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение);*/
			}
		}

		public void ОбработатьПоказЭУЯвляетсяСтудентом(/*ЭтаФорма*/)
		{
			/*ПоказыватьЭУИспользуетсяТрудРаботающихВСтудотряде = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудРаботающихВСтудотряде") и ЭтаФорма.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;*/
			/*ЭтаФорма.ЭлементыФормы.ЯвляетсяСтудентомРаботающимВСтудотряде.Видимость  = ПоказыватьЭУИспользуетсяТрудРаботающихВСтудотряде;*/
			/*ЭтаФорма.ЭлементыФормы.ЯвляетсяСтудентомРаботающимВСтудотряде1.Видимость = ПоказыватьЭУИспользуетсяТрудРаботающихВСтудотряде;*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ ЭЛЕМЕНТА

		public void ФормаЭлементаПриОткрытии(/*ЭтаФорма*/)
		{
			/*ЭлементыФормы = ЭтаФорма.ЭлементыФормы;*/
			/*// запомним значения в переменных
*/
			/*ЭтаФорма.мДатаДоговора = ЭтаФорма.ДатаДоговора;*/
			/*//для правильной автонумерации номера трудового договора
*/
			/*// Установим видимость реквизитов в зависимости от уч.политики 
*/
			/*ЭтаФорма.мМассивЭУ = Новый Массив();*/
			if(true/*глЗначениеПеременной("глЕстьВалютныеПоказателиОрганизаций")*/)
			{
				/*ЭтаФорма.мМассивЭУ.Добавить(ЭлементыФормы.СписокДоговоровГПХ.Колонки.Валюта);*/
			}
			/*ЭтаФорма.мМассивЭУ.Добавить(ЭлементыФормы.НадписьВалютаТарифнойСтавки);*/
			/*ЭтаФорма.мМассивЭУ.Добавить(ЭлементыФормы.ВалютаТарифнойСтавки);*/
			/*ЭтаФорма.мМассивЭУ.Добавить(ЭлементыФормы.НадписьВалютаТарифнойСтавки1);*/
			/*ЭтаФорма.мМассивЭУ.Добавить(ЭлементыФормы.ВалютаТарифнойСтавки1);*/
			if(true/*ЭтаФорма.мЭтоНовый*/)
			{
				/*УстановитьДоступностьРеквизитовФизлица(ЭтаФорма);*/
				/*ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаНовыйСотрудник;*/
				/*ЭлементыФормы.РедактироватьФизлицоОтдельно.Видимость = Ложь;*/
				/*ЭлементыФормы.ПерейтиКВводуТрудовогоДоговора.Видимость = ЭтаФорма.мДоступнаРольРасчетчика или ЭтаФорма.мДоступнаРольКадровика;*/
				/*УстановитьЗаголовокОткрытьСправочникФизлиц(ЭтаФорма);*/
				/*//получим очередной код элемента
*/
				/*ЭтаФорма.Код = ЭтаФорма.ЭтотОбъект.ПолучитьОчереднойТабельныйНомер();*/
			}
			if(true/*НЕ (ЭтаФорма.мДоступнаРольРасчетчика или ЭтаФорма.мДоступнаРольКадровика)*/)
			{
				/*Кнопки = ЭлементыФормы.ДействияФормы.Кнопки;*/
				/*Кнопки.Удалить(Кнопки.ПодменюПерейти);*/
			}
			/*УстановитьВидимостьСправкиФормы(Ложь, ЭтаФорма);*/
			/*СформироватьСписокОбособленныхПодразделений(ЭтаФорма);*/
			/*ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);*/
			/*ОбработатьОтображениеОбособленногоПодразделения(Ложь, ЭтаФорма);*/
			/*УстановитьВидимостьЭУПоИспользованиюТарифногоРазряда(ЭтаФорма, ЭтаФорма.ВидРасчета);*/
			/*ОбработатьПоказЭУЯвляетсяСтудентом(ЭтаФорма);*/
		}

		public void ФормаЭлементаПриЗакрытии(/*ЭтаФорма*/)
		{
			/*СохранитьЗначение("Справочник.СотрудникиОрганизаций.ОтображатьСправкуФормы", ЭтаФорма.ОтображатьСправкуФормы);*/
		}

		public void ФормаЭлементаОбработкаВыбора(/*ЗначениеВыбора, Источник, ЭтаФорма*/)
		{
			if(true/*ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ГруппыДоступаФизическихЛиц")*/)
			{
				/*ЭтаФорма.ФизлицоОбъект.ГруппаДоступаФизическогоЛица = ЗначениеВыбора;*/
				/*УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа(ЭтаФорма);*/
			}
		}

		public void ФормаЭлементаОбработкаЗаписиНовогоОбъекта(/*Объект, Источник, ЭтаФорма*/)
		{
			if(true/*ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов")*/)
			{
				/*ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭтаФорма.ЭлементыФормы.СвойстваИЗначения);*/
			}
			if(true/*ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов")*/)
			{
				/*ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭтаФорма.ЭлементыФормы.Категории);*/
			}
		}
		// ОбработкаЗаписиНовогоОбъекта()

		public void ФормаЭлементаПередЗаписью(/*Отказ, ЭтаФорма*/)
		{
			/*Отказ = Ложь;*/
			/*ОчиститьНеИспользуемыеРеквизиты(ЭтаФорма);*/
			/*ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");*/
			/*ОбработкаКомментариев.УдалитьСообщения();*/
			/*СписокНеЗаполненныхРеквизитов = Новый СписокЗначений;*/
			/*ОбнаруженыОшибки = Ложь;*/
			/*СрокаСообщенияОбОшибке = "";*/
			if(true/*ЭтаФорма.ЭтоНовый()*/)
			{
				/*// для нового сотрудника проверим возможность записи
*/
				/*ЭтаФорма.Актуальность  = Истина;*/
				/*//установим актуальность для нового сотрудника
*/
				/*//если создаем новое физлицо, проверим заполнение реквизитов
*/
				if(true/*Не ЭтаФорма.ВыборФизлица*/)
				{
					/*//необходимо создать новое физлицо, проверим реквизиты
*/
					if(true/*ПустаяСтрока(ЭтаФорма.ФизлицоОбъект.Наименование)*/)
					{
						/*СписокНеЗаполненныхРеквизитов.Добавить(" Имя");*/
						/*ОбнаруженыОшибки = Истина;*/
					}
				}
			}
			/*ВидДоговора 			= ЭтаФорма.ВидДоговора;*/
			/*ВидЗанятости 			= ЭтаФорма.ВидЗанятости;*/
			/*//проверим заполнение организации, вида договра, вида занятости
*/
			if(true/*Не ЗначениеЗаполнено(ВидДоговора)*/)
			{
				/*СписокНеЗаполненныхРеквизитов.Добавить(" Вид договора");*/
				/*ОбнаруженыОшибки = Истина;*/
			}
			/*СотрудникиОрганизацийПереопределяемый.ДополнитьСписокНеЗаполненныхРеквизитов(ЭтаФорма, СписокНеЗаполненныхРеквизитов, ОбнаруженыОшибки);*/
			if(true/*ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор и Не ЗначениеЗаполнено(ВидЗанятости)*/)
			{
				/*СписокНеЗаполненныхРеквизитов.Добавить(" Вид занятости");*/
				/*ОбнаруженыОшибки = Истина;*/
			}
			if(true/*ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор и Не ЗначениеЗаполнено(ЭтаФорма.ВалютаТарифнойСтавки)*/)
			{
				if(true/*ЭтаФорма.ЭлементыФормы.ВалютаТарифнойСтавки.Видимость*/)
				{
					/*СписокНеЗаполненныхРеквизитов.Добавить(" Валюта");*/
					/*ОбнаруженыОшибки = Истина;*/
				}
			}
			if(true/*ОбнаруженыОшибки*/)
			{
				if(true/*Не ПустаяСтрока(СрокаСообщенияОбОшибке)*/)
				{
					/*ОбработкаКомментариев.ДобавитьСообщение(СрокаСообщенияОбОшибке, Перечисления.ВидыСообщений.Ошибка);*/
					/*ОбработкаКомментариев.ДобавитьСообщение("Элемент не записан!", Перечисления.ВидыСообщений.ВажнаяИнформация);*/
				}
				if(true/*СписокНеЗаполненныхРеквизитов.Количество()>0*/)
				{
					/*ОбработкаКомментариев.ДобавитьСообщение("Не заполнены реквизиты: " + СписокНеЗаполненныхРеквизитов, Перечисления.ВидыСообщений.Ошибка);*/
					/*ОбработкаКомментариев.ДобавитьСообщение("Элемент не записан!", Перечисления.ВидыСообщений.ВажнаяИнформация);*/
				}
				/*ОбработкаКомментариев.ПоказатьСообщения();*/
				/*Отказ = Истина;*/
			}
			if(true/*ЭтаФорма.ЭтоНовый()*/)
			{
				if(true/*Не ЭтаФорма.ВыборФизлица*/)
				{
					/*//попытка записать новое физлицо
*/
					/*Попытка
				ЭтаФорма.ФизлицоОбъект.Записать();*/
					/*ЭтаФорма.Физлицо = ЭтаФорма.ФизлицоОбъект.Ссылка;*/
					/*Исключение
				ОбщегоНазначения.ПоказатьДиалогСИнформациейОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()));*/
					/*Отказ = Истина;*/
					/*КонецПопытки;*/
				}
			}
		}

		public void ФормаЭлементаПриЗаписи(/*Отказ, ЭтаФорма*/)
		{
			/*Экспорт

	ФизлицоОбъект 		= ЭтаФорма.ФизлицоОбъект;*/
			/*Ссылка				= ЭтаФорма.Ссылка;*/
			/*ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");*/
			/*ОбработкаКомментариев.УдалитьСообщения();*/
			/*ТаблицаСообщений = Новый ТаблицаЗначений;*/
			/*//запись не нового Сотрудника, проверим необходимось записи физлица
*/
			if(true/*Не ЭтаФорма.мЭтоНовый и ФизлицоОбъект.Модифицированность()*/)
			{
				/*Попытка	
			ФизлицоОбъект.Заблокировать();*/
				/*Исключение
			ТекстСообщения = "Физическое лицо: " + ФизлицоОбъект + " - объект заблокирован.";*/
				/*ОбработкаКомментариев.ДобавитьСообщение(ТекстСообщения, Перечисления.ВидыСообщений.Ошибка);*/
				/*ОбработкаКомментариев.ДобавитьСообщение("Элемент не записан!", Перечисления.ВидыСообщений.ВажнаяИнформация);*/
				/*ОбработкаКомментариев.ПоказатьСообщения();*/
				/*Отказ = Истина;*/
				/*КонецПопытки;*/
				/*ФизлицоОбъект.Записать();*/
				/*ПроцедурыУправленияПерсоналомПолныеПрава.СинхронизироватьНаименованияСотрудников(ФизлицоОбъект.Ссылка, Ссылка);*/
			}
			/*// запись в регистр ФИО физлиц
*/
			/*мНаборЗаписейФИО = ЭтаФорма.мНаборЗаписейФИО;*/
			if(true/*мНаборЗаписейФИО.Количество() = 0*/)
			{
				/*ЗаписьНабора = мНаборЗаписейФИО.Добавить();*/
				/*ЗаписьНабора.Период		= ?(ЗначениеЗаполнено(ФизлицоОбъект.ДатаРождения),ФизлицоОбъект.ДатаРождения,'19800101');*/
				/*ЗаписьНабора.Фамилия	= ЭтаФорма.Фамилия;*/
				/*ЗаписьНабора.Имя		= ЭтаФорма.Имя;*/
				/*ЗаписьНабора.Отчество	= ЭтаФорма.Отчество;*/
			}
			if(true/*мНаборЗаписейФИО.Количество() > 0 И ЗначениеЗаполнено(мНаборЗаписейФИО[0].Период)*/)
			{
				/*мНаборЗаписейФИО[0].Физлицо = ЭтаФорма.Физлицо;*/
				/*мНаборЗаписейФИО.Отбор.Физлицо.Использование	= Истина;*/
				/*мНаборЗаписейФИО.Отбор.Физлицо.Значение			= мНаборЗаписейФИО[0].Физлицо;*/
				/*мНаборЗаписейФИО.Отбор.Период.Использование		= Истина;*/
				/*мНаборЗаписейФИО.Отбор.Период.Значение			= мНаборЗаписейФИО[0].Период;*/
				/*мНаборЗаписейФИО.Записать(Истина);*/
			}
			/*ФИО = ЭтаФорма.Фамилия + " " + ЭтаФорма.Имя + " " + ЭтаФорма.Отчество;*/
			/*ФизическиеЛицаКлиент.ПроверитьДублиФизическихЛиц(Отказ, ОбработкаКомментариев, ФизлицоОбъект.Ссылка, ФизлицоОбъект.ИНН, ФизлицоОбъект.СтраховойНомерПФР, ФИО);*/
			/*мНаборЗаписейГражданство 			= ЭтаФорма.мНаборЗаписейГражданство;*/
			/*мНаборЗаписейГражданствоПриОткрытии = ЭтаФорма.мНаборЗаписейГражданствоПриОткрытии;*/
			if(true/*мНаборЗаписейГражданство.Количество() > 0 И ЗначениеЗаполнено(мНаборЗаписейГражданство[0].Период)*/)
			{
				/*НадоЗаписатьНаборЗаписей = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(мНаборЗаписейГражданство.Выгрузить(), мНаборЗаписейГражданствоПриОткрытии.Выгрузить());*/
				if(true/*НадоЗаписатьНаборЗаписей*/)
				{
					/*мНаборЗаписейГражданство[0].Физлицо = Ссылка.Физлицо;*/
					/*мНаборЗаписейГражданство.Отбор.Физлицо.Использование	= Истина;*/
					/*мНаборЗаписейГражданство.Отбор.Физлицо.Значение			= мНаборЗаписейГражданство[0].Физлицо;*/
					/*мНаборЗаписейГражданство.Отбор.Период.Использование		= Истина;*/
					/*мНаборЗаписейГражданство.Отбор.Период.Значение			= мНаборЗаписейГражданство[0].Период;*/
					/*мНаборЗаписейГражданство.Записать(Истина);*/
				}
			}
			/*// запись в регистр Сведения об инвалидности
*/
			/*мНаборЗаписейИнвалидность 				= ЭтаФорма.мНаборЗаписейИнвалидность;*/
			/*мНаборЗаписейИнвалидностьПриОткрытии 	= ЭтаФорма.мНаборЗаписейИнвалидностьПриОткрытии;*/
			if(true/*мНаборЗаписейИнвалидность.Количество() > 0 И ЗначениеЗаполнено(мНаборЗаписейИнвалидность[0].Период)*/)
			{
				/*НадоЗаписатьНаборЗаписей = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(мНаборЗаписейИнвалидность.Выгрузить(), мНаборЗаписейИнвалидностьПриОткрытии.Выгрузить());*/
				if(true/*НадоЗаписатьНаборЗаписей*/)
				{
					/*мНаборЗаписейИнвалидность[0].Физлицо = Ссылка.Физлицо;*/
					/*мНаборЗаписейИнвалидность.Отбор.Физлицо.Использование	= Истина;*/
					/*мНаборЗаписейИнвалидность.Отбор.Физлицо.Значение		= мНаборЗаписейИнвалидность[0].Физлицо;*/
					/*мНаборЗаписейИнвалидность.Отбор.Период.Использование	= Истина;*/
					/*мНаборЗаписейИнвалидность.Отбор.Период.Значение			= мНаборЗаписейИнвалидность[0].Период;*/
					/*мНаборЗаписейИнвалидность.Записать(Истина);*/
				}
			}
			/*мНаборЗаписейПринятыеПоДолгосрочнымДоговорам = ЭтаФорма.мНаборЗаписейПринятыеПоДолгосрочнымДоговорам;*/
			/*мНаборЗаписейПринятыеПоДолгосрочнымДоговорамПриОткрытии = ЭтаФорма.мНаборЗаписейПринятыеПоДолгосрочнымДоговорамПриОткрытии;*/
			if(true/*мНаборЗаписейПринятыеПоДолгосрочнымДоговорам.Модифицированность()*/)
			{
				/*НадоЗаписатьНаборЗаписей = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(мНаборЗаписейПринятыеПоДолгосрочнымДоговорам.Выгрузить(), мНаборЗаписейПринятыеПоДолгосрочнымДоговорамПриОткрытии.Выгрузить());*/
				if(true/*НадоЗаписатьНаборЗаписей*/)
				{
					/*мНаборЗаписейПринятыеПоДолгосрочнымДоговорам.Записать(Истина);*/
				}
			}
			/*// Обработка записи свойств и категорий
*/
			/*ОбработкаОбъектЗначенияСвойств = ЭтаФорма.ОбработкаОбъектЗначенияСвойств;*/
			/*ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;*/
			/*ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;*/
			/*Отказ = НЕ ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();*/
			/*ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;*/
			/*Отказ = НЕ ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

		public void ФормаЭлементаПереключитьВидимостьСправкиФормы(/*Кнопка, ЭтаФорма*/)
		{
			/*ЭтаФорма.ОтображатьСправкуФормы = НЕ ЭтаФорма.ОтображатьСправкуФормы;*/
			/*УстановитьВидимостьСправкиФормы(, ЭтаФорма);*/
		}

		public void ФормаЭлементаПоказатьИсториюОтражениеОсновныхНачислений(/*Кнопка, ЭтаФорма*/)
		{
			/*Ссылка	= ЭтаФорма.Ссылка;*/
			/*ФормаРегистра = РегистрыСведений.УчетОсновногоЗаработкаРаботниковОрганизацииВРегламентированномУчете.ПолучитьФормуСписка( , ЭтаФорма, Ссылка);*/
			/*ФормаРегистра.РегистрСведенийСписок.Отбор.Сотрудник.Установить(Ссылка);*/
			/*ФормаРегистра.РегистрСведенийСписок.Отбор.Организация.Установить(ЭтаФорма.Организация);*/
			/*ФормаРегистра.ЭлементыФормы.Организация.Доступность = Ложь;*/
			/*ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;*/
			/*ФормаРегистра.Открыть();*/
		}

		public void ФормаЭлементаПоказатьИсториюОтражениеПлановыхНачислений(/*Кнопка, ЭтаФорма*/)
		{
			/*Ссылка	= ЭтаФорма.Ссылка;*/
			/*ФормаРегистра = РегистрыСведений.РеглУчетПлановыхНачисленийРаботниковОрганизаций.ПолучитьФормуСписка( , ЭтаФорма, Ссылка);*/
			/*ФормаРегистра.РегистрСведенийСписок.Отбор.Сотрудник.Установить(Ссылка);*/
			/*ФормаРегистра.РегистрСведенийСписок.Отбор.Организация.Установить(ЭтаФорма.Организация);*/
			/*ФормаРегистра.ЭлементыФормы.Организация.Доступность = Ложь;*/
			/*ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;*/
			/*ФормаРегистра.Открыть();*/
		}

		public void ФормаЭлементаУДФОткрыть(/*Кнопка, ЭтаФорма*/)
		{
			/*Форма = Обработки.УправлениеДаннымиРаботника.ПолучитьФорму();*/
			/*Форма.УстановитьРеквизиты(ЭтаФорма.Физлицо, "Основное", ТекущаяДата());*/
			/*Форма.Открыть();*/
		}
		// УДФОткрыть()
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

		public void ФормаЭлементаОткрытьСправочникФизлицНажатие(/*Элемент, ЭтаФорма*/)
		{
			if(true/*ЭтаФорма.ВыборФизлица*/)
			{
				/*ФормаВыбора = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(, ЭтаФорма);*/
			}
			/*ФормаВыбора.Открыть();*/
		}

		public void ФормаЭлементаНаименованиеФизлицаПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ФизлицоОбъект	= ЭтаФорма.ФизлицоОбъект;*/
			/*ЭтаФорма.Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ЭтаФорма.ПостфиксНаименования);*/
			/*ФИО = Элемент.Значение;*/
			if(true/*ПустаяСтрока(ЭтаФорма.Фамилия) ИЛИ ЭтаФорма.ЭтоНовый()*/)
			{
				/*МассивФИО = ОбщегоНазначения.ПолучитьМассивФИО(ФИО);*/
				/*ЭтаФорма.Фамилия  = МассивФИО[0];*/
				/*ЭтаФорма.Имя      = МассивФИО[1];*/
				/*ЭтаФорма.Отчество = МассивФИО[2];*/
				if(true/*ЗначениеЗаполнено(ЭтаФорма.Отчество)*/)
				{
					/*ФизлицоОбъект.Пол = ПроцедурыУправленияПерсоналом.ПолучитьПол(ЭтаФорма.Отчество);*/
				}
			}
			/*УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно(ЭтаФорма);*/
			/*УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа(ЭтаФорма);*/
		}

		public void ФормаЭлементаРедактироватьФизлицоОтдельноНажатие(/*Элемент, ЭтаФорма*/)
		{
			/*Форма = ЭтаФорма.ФизлицоОбъект.ПолучитьФорму(, ЭтаФорма);*/
			/*Форма.ТолькоПросмотр = ЭтаФорма.ТолькоПросмотр;*/
			/*Форма.Открыть();*/
		}

		public void ФормаЭлементаПостфиксНаименованияНачалоВыбораИзСписка(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*ВидДоговора 	= ЭтаФорма.ВидДоговора;*/
			/*ВидЗанятости 	= ЭтаФорма.ВидЗанятости;*/
			/*Наименование 	= ЭтаФорма.Наименование;*/
			/*СписокВозможныхЗначений = Новый СписокЗначений;*/
			/*НаименованиеБезПостфикса = ЭтаФорма.ФизлицоОбъект.Наименование;*/
			/*СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса);*/
			if(true/*ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор*/)
			{
				if(true/*ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство*/)
				{
					/*СписокВозможныхЗначений.Добавить(НаименованиеБезПостфикса + " (вн. совм.)");*/
				}
			}
			if(true/*Не ПустаяСтрока(ЭтаФорма.ПостфиксНаименования) и СписокВозможныхЗначений.НайтиПоЗначению(Наименование) = Неопределено*/)
			{
				/*СписокВозможныхЗначений.Добавить(Наименование);*/
			}
			/*СписокВозможныхЗначений.Добавить("Произвольное","задать произвольное дополнение наименования (не более 15-и символов)");*/
			/*Элемент.СписокВыбора = СписокВозможныхЗначений;*/
		}

		public void ФормаЭлементаПостфиксНаименованияОбработкаВыбора(/*Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*ПостфиксНаименования 	= ЭтаФорма.ПостфиксНаименования;*/
			/*Наименование			= ЭтаФорма.Наименование;*/
			/*ФизлицоОбъект			= ЭтаФорма.ФизлицоОбъект;*/
			/*СтандартнаяОбработка = Ложь;*/
			if(true/*ВыбранноеЗначение = "Произвольное"*/)
			{
				/*Текст = ПостфиксНаименования;*/
				/*ВвестиСтроку(Текст, "Введите дополнение наименования", 15);*/
				/*ЭтаФорма.ПостфиксНаименования = Текст;*/
				/*ЭтаФорма.Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, Текст);*/
			}
		}

		public void ФормаЭлементаПерейтиКВводуТрудовогоДоговораНажатие(/*Элемент, ЭтаФорма*/)
		{
			/*ПанельДанныхНовыйСотрудник = ЭтаФорма.ЭлементыФормы.ПанельДанныхНовыйСотрудник;*/
			/*ПанельДанныхНовыйСотрудник.ТекущаяСтраница = ПанельДанныхНовыйСотрудник.Страницы.ТрудовойДоговор;*/
		}
		// Процедура - обработчик события "ПриИзменении" поля ввода ОбособленноеПодразделение

		public void ФормаЭлементаОбособленноеПодразделениеПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);*/
		}
		// ОбособленноеПодразделениеПриИзменении
		// Процедура - обработчик события "НачалоВыбора" поля ввода ОбособленноеПодразделение

		public void ФормаЭлементаОбособленноеПодразделениеНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*мСписокОбособленныхПодразделений = ЭтаФорма.мСписокОбособленныхПодразделений;*/
			/*//установим список выбора 
*/
			/*ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(мСписокОбособленныхПодразделений, Элемент, мСписокОбособленныхПодразделений.НайтиПоЗначению(Элемент.Значение));*/
			if(true/*ЭлементСписка <> Неопределено и Элемент.Значение <> ЭлементСписка.Значение*/)
			{
				/*Элемент.Значение = ЭлементСписка.Значение;*/
				/*ОбработкаРеквизитовТрудовогоДоговора(ЭтаФорма);*/
				/*ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);*/
			}
		}
		//ОбособленноеПодразделениеНачалоВыбора

		public void ФормаЭлементаЗанимаемыхСтавокРегулирование(/*Элемент, Направление, СтандартнаяОбработка, ЭтаФорма*/)
		{
			if(true/*Направление = 1*/)
			{
				/*// увеличиваем значение
*/
				/*Элемент.Значение = Элемент.Значение + 0.25;*/
			}
			/*СтандартнаяОбработка = Ложь;*/
		}

		public void ФормаЭлементаНадбавкиПоТрудовомуДоговоруТекстНажатие(/*Элемент, ЭтаФорма*/)
		{
			/*Отказ = Ложь;*/
			if(true/*ЭтаФорма.Модифицированность*/)
			{
				if(true/*Вопрос("Данные сотрудника еще не записаны! Записать?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК,) = КодВозвратаДиалога.ОК*/)
				{
					/*Отказ = Не ЭтаФорма.ЗаписатьВФорме();*/
				}
			}
			if(true/*Не Отказ*/)
			{
				/*ЭтотОбъект = ЭтаФорма.ЭтотОбъект;*/
				/*Попытка	
			ЭтотОбъект.Заблокировать();*/
				/*Исключение
			Предупреждение("Не удалось заблокировать объект """ + ЭтотОбъект + """!
				|" + ОписаниеОшибки(), 60);*/
				/*КонецПопытки;*/
				/*ФормаПерсональныеНадбавки = ЭтотОбъект.ПолучитьФорму("ФормаПерсональныеНадбавки", ЭтаФорма, ЭтаФорма.Ссылка);*/
				/*ФормаПерсональныеНадбавки.СправочникОбъект	= ЭтотОбъект;*/
				/*ФормаПерсональныеНадбавки.ТолькоПросмотр	= ЭтаФорма.ТолькоПросмотр;*/
				/*ФормаПерсональныеНадбавки.ОткрытьМодально();*/
				/*ЭтотОбъект.Разблокировать();*/
			}
		}

		public void ФормаЭлементаВидРасчетаПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ВидРасчета 		= ЭтаФорма.ВидРасчета;*/
			/*ЭлементыФормы 	= ЭтаФорма.ЭлементыФормы;*/
			/*УстановитьВидимостьЭУПоИспользованиюТарифногоРазряда(ЭтаФорма, ВидРасчета);*/
			/*СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(ЭтаФорма.мСведенияОВидахРасчета, ВидРасчета);*/
			/*ЭлементыФормы.ТарифнаяСтавка.Формат = "ЧДЦ=" + СведенияОВидеРасчета.Показатель1Точность;*/
			/*ЭлементыФормы.ТарифнаяСтавка1.Формат = "ЧДЦ=" + СведенияОВидеРасчета.Показатель1Точность;*/
		}

		public void ФормаЭлементаГражданствоНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка 	= Ложь;*/
			/*ФормаВвода	 			= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаЗаписиГражданство", ЭтаФорма);*/
			/*ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейГражданство;*/
			/*ФормаВвода.ПринятыеПоДолгосрочнымДоговорам = ЭтаФорма.мНаборЗаписейПринятыеПоДолгосрочнымДоговорам;*/
			/*ФормаВвода.Открыть();*/
		}

		public void ФормаЭлементаИнвалидностьНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*ФормаВвода	 			= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаЗаписиСведенияОбИнвалидности", ЭтаФорма);*/
			/*ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейИнвалидность;*/
			/*ФормаВвода.Открыть();*/
		}

		public void ФормаЭлементаСтандартныеВычетыНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*Отказ = Ложь;*/
			if(true/*ЭтаФорма.Модифицированность*/)
			{
				if(true/*Вопрос("Перед вводом сведений необходимо записать элемент. Записать?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК,) = КодВозвратаДиалога.ОК*/)
				{
					/*Отказ = Не ЭтаФорма.ЗаписатьВФорме();*/
				}
			}
			if(true/*Не Отказ*/)
			{
				/*ФормаВвода	= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаВводаДанныхНДФЛ", ЭтаФорма);*/
				/*ФормаВвода.СправочникОбъект = ЭтаФорма.ФизлицоОбъект;*/
				/*ФормаВвода.ЭлементыФормы.ОсновнаяПанель.Страницы.СтатусНалогоплательщика.Видимость = Ложь;*/
				/*ФормаВвода.Открыть();*/
			}
		}

		public void ФормаЭлементаСтатусНалогоплательщикаНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*Отказ = Ложь;*/
			if(true/*ЭтаФорма.Модифицированность*/)
			{
				if(true/*Вопрос("Перед вводом сведений необходимо записать элемент. Записать?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК,) = КодВозвратаДиалога.ОК*/)
				{
					/*Отказ = Не ЭтаФорма.ЗаписатьВФорме();*/
				}
			}
			if(true/*Не Отказ*/)
			{
				/*ФормаВвода	= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаВводаДанныхНДФЛ", ЭтаФорма);*/
				/*ФормаВвода.СправочникОбъект = ЭтаФорма.ФизлицоОбъект;*/
				/*ФормаВвода.ЭлементыФормы.ОсновнаяПанель.Страницы.Доходы.Видимость = Ложь;*/
				/*ФормаВвода.ЭлементыФормы.ОсновнаяПанель.Страницы.Вычеты.Видимость = Ложь;*/
				/*ФормаВвода.ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;*/
				/*ФормаВвода.Открыть();*/
			}
		}

		public void ФормаЭлементаИмущественныеВычетыНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*Организация	= ЭтаФорма.Организация;*/
			/*Физлицо		= ЭтаФорма.Физлицо;*/
			/*СтандартнаяОбработка = Ложь;*/
			/*Отказ = Ложь;*/
			if(true/*Не НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл()*/)
			{
				/*Предупреждение("Редактирование данных по НДФЛ недоступно!");*/
				/*Отказ = Истина;*/
			}
			if(true/*Не Отказ*/)
			{
				/*Запрос = Новый Запрос;*/
				/*ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ВЫРАЗИТЬ(НДФЛИмущественныеВычетыФизлиц.Регистратор КАК Документ.НДФЛПодтверждениеПраваНаИмущественныйВычет) КАК Регистратор
		|ИЗ
		|	РегистрНакопления.НДФЛИмущественныеВычетыФизлиц КАК НДФЛИмущественныеВычетыФизлиц
		|ГДЕ
		|	НДФЛИмущественныеВычетыФизлиц.Год = &парамГод
		|	И НДФЛИмущественныеВычетыФизлиц.ФизЛицо = &парамФизлицо
		|	И НДФЛИмущественныеВычетыФизлиц.Организация = &парамОрганизация
		|	И НДФЛИмущественныеВычетыФизлиц.ВидДвижения = &парамВидДвижения
		|	И НДФЛИмущественныеВычетыФизлиц.Регистратор ССЫЛКА Документ.НДФЛПодтверждениеПраваНаИмущественныйВычет";*/
				/*Запрос.Текст = ТекстЗапроса;*/
				/*Запрос.УстановитьПараметр("парамОрганизация", Организация);*/
				/*Запрос.УстановитьПараметр("парамФизлицо", Физлицо);*/
				/*Запрос.УстановитьПараметр("парамГод", Год(ТекущаяДата()));*/
				/*Запрос.УстановитьПараметр("парамВидДвижения", ВидДвиженияНакопления.Приход);*/
				/*Выборка = Запрос.Выполнить().Выбрать();*/
				if(true/*НЕ Выборка.Следующий()*/)
				{
					/*//нет вычетов, откроем документ для регистрации
*/
					/*ФормаДокумента = Документы.НДФЛПодтверждениеПраваНаИмущественныйВычет.ПолучитьФормуНовогоДокумента(,ЭтаФорма,);*/
					/*ФормаДокумента.НалоговыйПериод = Год(ТекущаяДата());*/
					/*ФормаДокумента.Организация = Организация;*/
					/*НоваяСтрока = ФормаДокумента.РаботникиОрганизации.Добавить();*/
					/*НоваяСтрока.ФизЛицо  = ФизЛицо;*/
					/*НоваяСтрока.ДатаСобытия = ТекущаяДата();*/
					/*ФормаДокумента.Открыть();*/
				}
			}
		}

		public void ФормаЭлементаОрганизацияАвтоПодборТекста(/*Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтрокеОрганизации(), Тип("СправочникСсылка.Организации"));*/
		}

		public void ФормаЭлементаОрганизацияОкончаниеВводаТекста(/*Элемент, Текст, Значение, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтрокеОрганизации(), ЭтаФорма, Тип("СправочникСсылка.Организации"), ЭтаФорма.мОбработкаПодбораПоСтрокеОрганизация, ЭтаФорма.мТекстПодбораПоСтрокеОрганизация, ЭтаФорма.мПоследнееЗначениеЭлементаПодбораПоСтрокеОрганизация, Ложь);*/
		}

		public void ФормаЭлементаПодразделениеОрганизацииПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);*/
			/*СотрудникиОрганизацийПереопределяемый.ЗаполнитьРеквизитыПоШтатномуРасписанию(ЭтаФорма);*/
		}

		public void ФормаЭлементаДолжностьПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);*/
			/*СотрудникиОрганизацийПереопределяемый.ЗаполнитьРеквизитыПоШтатномуРасписанию(ЭтаФорма);*/
		}

		public void ФормаЭлементаФизлицоПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ФизЛицо = ЭтаФорма.Физлицо;*/
			if(true/*Не ЗначениеЗаполнено(Физлицо) ИЛИ Физлицо <> ЭтаФорма.ФизлицоОбъект.Ссылка*/)
			{
				/*ФормаЭлементаОбработатьИзменениеФизлица(ЭтаФорма);*/
				/*ПроверитьИУстановитьВидЗанятости(,ЭтаФорма);*/
				/*ПодобратьПостфиксНаименования(ЭтаФорма);*/
			}
		}

		public void ФормаЭлементаВидЗанятостиПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ПодобратьПостфиксНаименования(ЭтаФорма);*/
		}

		public void ФормаЭлементаДатаРожденияПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			if(true/*Год(Элемент.Значение) >= Год(ОбщегоНазначения.ПолучитьРабочуюДату())*/)
			{
				/*Предупреждение("Внимание! Возможно, неверно задана дата рождения.");*/
			}
		}

		public void ФормаЭлементаПерейтиКВводуГруппыДоступаНажатие(/*Элемент, ЭтаФорма*/)
		{
			/*ФормаВыбора = Справочники.ГруппыДоступаФизическихЛиц.ПолучитьФормуВыбора(,ЭтаФорма,);*/
			/*ФормаВыбора.ПараметрТекущаяСтрока		= ЭтаФорма.ФизлицоОбъект.ГруппаДоступаФизическогоЛица;*/
			/*ФормаВыбора.ОткрытьМодально();*/
		}

		public void ФормаЭлементаСменитьФИОНажатие(/*Элемент, ЭтаФорма*/)
		{
			/*Физлицо = ЭтаФорма.Физлицо;*/
			/*мНаборЗаписейФИО = ЭтаФорма.мНаборЗаписейФИО;*/
			if(true/*ЭтаФорма.Ссылка.Пустая() Или Физлицо.Пустая()*/)
			{
			}
			/*ФормаВводаФИО = Физлицо.ПолучитьФорму("ФормаЗаписиФИО", ЭтаФорма, Физлицо);*/
			if(true/*мНаборЗаписейФИО.Количество() = 0*/)
			{
				/*мНаборЗаписейФИО.Добавить();*/
			}
			if(true/*ПустаяСтрока(мНаборЗаписейФИО[0].Фамилия + мНаборЗаписейФИО[0].Имя + мНаборЗаписейФИО[0].Отчество)
		И Не ЗначениеЗаполнено(мНаборЗаписейФИО[0].Период)*/)
			{
				/*ФИО = ЭтаФорма.Наименование;*/
				/*МассивФИО = ОбщегоНазначения.ПолучитьМассивФИО(ФИО);*/
				/*мНаборЗаписейФИО[0].Фамилия	= МассивФИО[0];*/
				/*мНаборЗаписейФИО[0].Имя		= МассивФИО[1];*/
				/*мНаборЗаписейФИО[0].Отчество= МассивФИО[2];*/
				/*мНаборЗаписейФИО[0].Период	= ?(ЗначениеЗаполнено(ФизЛицо.ДатаРождения),ФизЛицо.ДатаРождения,'19800101');*/
			}
			/*ФормаВводаФИО.НаборЗаписей = мНаборЗаписейФИО;*/
			/*ФормаВводаФИО.ФамилияПриОткрытии  = мНаборЗаписейФИО[0].Фамилия;*/
			/*ФормаВводаФИО.ИмяПриОткрытии      = мНаборЗаписейФИО[0].Имя;*/
			/*ФормаВводаФИО.ОтчествоПриОткрытии = мНаборЗаписейФИО[0].Отчество;*/
			/*ФормаВводаФИО.ПериодПриОткрытии   = мНаборЗаписейФИО[0].Период;*/
			/*ФормаВводаФИО.Открыть();*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ

		public void ФормаЭлементаПлановыеНачисленияПриПолученииДанных(/*Элемент, ОформленияСтрок, ЭтаФорма*/)
		{
			/*РаботаСДиалогамиЗК.ОформитьСтрокиПлановыхНачислений(Элемент, ЭтаФорма.мСведенияОВидахРасчета, ОформленияСтрок);*/
		}

		public void ФормаЭлементаПлановыеНачисленияВыбор(/*Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			if(true/*НЕ ЗначениеЗаполнено(ВыбраннаяСтрока.Регистратор)*/)
			{
			}
			/*Форма = ВыбраннаяСтрока.Регистратор.ПолучитьФорму( , Элемент, Элемент);*/
			/*Форма.Открыть();*/
		}

		public void ФормаЭлементаПлановыеУдержанияПриПолученииДанных(/*Элемент, ОформленияСтрок, ЭтаФорма*/)
		{
			/*РаботаСДиалогамиЗК.ОформитьСтрокиПлановыхУдержаний(Элемент, ЭтаФорма.мСведенияОВидахРасчета, ОформленияСтрок);*/
		}

		public void ФормаЭлементаПлановыеУдержанияВыбор(/*Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			if(true/*НЕ ЗначениеЗаполнено(ВыбраннаяСтрока.Регистратор)*/)
			{
			}
			/*Форма = ВыбраннаяСтрока.Регистратор.ПолучитьФорму( , Элемент, Элемент);*/
			/*Форма.Открыть();*/
		}

		public void ФормаЭлементаСписокДоговоровГПХПередНачаломДобавления(/*Элемент, Отказ, Копирование, ЭтаФорма*/)
		{
			/*Отказ = Истина;*/
		}
		// Процедура обеспечивает ввод на основании кадрового документа

		public void ФормаЭлементаКадровыеДокументыДействиеДобавить(/*Кнопка, ЭтаФорма*/)
		{
			if(true/*ЗаписатьЭлементПередВыполнениемДействия("Перед выполнением действия необходимо записать элемент. Записать элемент?", ЭтаФорма)*/)
			{
				/*СписокДокументов = Новый СписокЗначений;*/
				/*СписокДокументов.Добавить(Документы.ПриемНаРаботуВОрганизацию, 		"Прием на работу в организацию");*/
				/*СписокДокументов.Добавить(Документы.КадровоеПеремещениеОрганизаций, "Кадровое перемещение организаций");*/
				/*СписокДокументов.Добавить(Документы.УвольнениеИзОрганизаций, 		"Увольнение из организаций");*/
				/*ВыбранноеЗначение = СписокДокументов.ВыбратьЭлемент("Выбор вида документа");*/
				if(true/*Не ВыбранноеЗначение = Неопределено*/)
				{
					/*ДокументОбъект = ВыбранноеЗначение.Значение.СоздатьДокумент();*/
					/*ДокументОбъект.Заполнить(ЭтаФорма.Ссылка);*/
					/*ФормаДокумента = ДокументОбъект.ПолучитьФорму();*/
					/*ФормаДокумента.Открыть();*/
				}
			}
		}

		public void ФормаЭлементаКадровыеДокументыПередНачаломДобавления(/*Элемент, Отказ, Копирование, ЭтаФорма*/)
		{
			if(true/*Не Копирование*/)
			{
				/*Отказ = Истина;*/
				/*ЭтаФорма.КадровыеДокументыДействиеДобавить(Неопределено);*/
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ МЕХАНИЗМА СПРАВКИ

		public object ПолучитьТекстМакетаВстроеннойСправки(/*ЭтаФорма*/)
		{
			/*ЦветФонаСправки		= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветФона());*/
			/*ЦветСсылкиСправки	= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки());*/
			if(true/*ЭтаФорма.мЭтоНовый*/)
			{
				/*ТекстМакетаВстроеннойСправки =
		"<HTML>
		|	<HEAD>
		|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
		|	</HEAD>
		|
		|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto><FONT face=""MS Sans Serif"" size=1>
		|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭтаФорма.ЭлементыФормы.ВстроеннаяСправка)+">
		|		<DIV><B>Если сотрудник ранее уже работал " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("в организации") + "...</B><BR>
		|		Необходимо выбрать вариант «Создать нового сотрудника, выбрав его из справочника физических лиц» и далее выбрать физлицо из списка.</DIV>
		|		<DIV><B>Как уточнить наименование сотрудника?</B><BR>
		|		В поле ""Наименование"" нажать на кнопку выбора из списка, можно выбрать предложенные варианты или задать произвольное дополнение к наименованию.</DIV>
		|		
		|	</FONT></BODY>
		|</HTML>";*/
			}
			return null;
		}

		public void ПодготовитьСправкуФормы(/*ЭтаФорма*/)
		{
			/*ЭлементыФормы = ЭтаФорма.ЭлементыФормы;*/
			/*ЭлементыФормы.ПанельСправкиФормы.ЦветРамки			= РаботаСДиалогами.ВстроеннаяСправка_ЦветРамки();*/
			/*ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветФона	= РаботаСДиалогами.ВстроеннаяСправка_ЦветФона();*/
			/*ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветТекста	= РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки();*/
			/*ТекстМакетаВстроеннойСправки = ПолучитьТекстМакетаВстроеннойСправки(ЭтаФорма);*/
			/*ЭлементыФормы.ВстроеннаяСправка.УстановитьТекст(ТекстМакетаВстроеннойСправки);*/
		}

		public void УстановитьВидимостьСправкиФормы(/*ОбновитьСправку = Истина, ЭтаФорма*/)
		{
			/*ОтображатьСправкуФормы = ЭтаФорма.ОтображатьСправкуФормы;*/
			/*РаботаСДиалогамиЗК.ИзменитьВидимостьПанелиПоГоризонтали(ЭтаФорма, ОтображатьСправкуФормы, "ОсновнаяПанель", "СправкиФормы");*/
			/*ЭтаФорма.ЭлементыФормы.ДействияФормыСправка.Кнопки.ПереключениеСправкиФормы.Пометка = ОтображатьСправкуФормы;*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ И КАТЕГОРИЙ
		// Процедура перезаполняет таблицу свойств и значений.
		//
		// Параметры:
		//  Нет.
		//

		public void ФормаЭлементаПрочитатьЗаполнитьСвойстваИЗначения(/*ИмяДанных = "", ЭтаФорма*/)
		{
			/*Ссылка	= ЭтаФорма.Ссылка;*/
			/*ОбработкаОбъектЗначенияСвойств	= ЭтаФорма.ОбработкаОбъектЗначенияСвойств;*/
			/*// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
*/
			/*// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
*/
			/*// вызова из ПередОткрытием
*/
			if(true/*ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций*/)
			{
				/*ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;*/
				/*ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;*/
				/*ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();*/
			}
		}
		// Процедура перезаполняет таблицу Категорий.
		//
		// Параметры:
		//  Нет.
		//

		public void ФормаЭлементаПрочитатьЗаполнитьКатегории(/*ИмяДанных = "", ЭтаФорма*/)
		{
			/*ОбработкаОбъектКатегорииОбъекта = ЭтаФорма.ОбработкаОбъектКатегорииОбъекта;*/
			/*// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
*/
			/*// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
*/
			/*// вызова из ПередОткрытием.
*/
			if(true/*ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций*/)
			{
				/*ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = ЭтаФорма.Ссылка;*/
				/*ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();*/
			}
		}
		// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
		//

		public void ФормаЭлементаСвойстваИЗначенияПередНачаломДобавления(/*Элемент, Отказ, Копирование, ЭтаФорма*/)
		{
			/*Отказ = Истина;*/
			/*ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);*/
		}
		// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
		//

		public void ФормаЭлементаСвойстваИЗначенияПриНачалеРедактирования(/*Элемент, НоваяСтрока, ЭтаФорма*/)
		{
			/*ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);*/
		}

		public void ФормаЭлементаСвойстваИЗначенияПередУдалением(/*Элемент, Отказ, ЭтаФорма*/)
		{
			/*Отказ = Истина;*/
		}
		// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
		//

		public void ФормаЭлементаСвойстваИЗначенияПриВыводеСтроки(/*Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма*/)
		{
			/*ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);*/
		}
		// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
		//

		public void ФормаЭлементаСвойстваИЗначенияЗначениеПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ЭтаФорма.Модифицированность = Истина;*/
		}
		// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
		//

		public void ФормаЭлементаСвойстваИЗначенияЗначениеОчистка(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*ЭлементыФормы	= ЭтаФорма.ЭлементыФормы;*/
			/*ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;*/
			/*ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);*/
			/*ЭтаФорма.Модифицированность = Истина;*/
		}
		// Обработчик события Очистка элемента СвойстваИЗначения1.Значение.
		//

		public void ФормаЭлементаСвойстваИЗначения1ЗначениеОчистка(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*ЭлементыФормы	= ЭтаФорма.ЭлементыФормы;*/
			/*ЭлементыФормы.СвойстваИЗначения1.ТекущиеДанные.Значение = Неопределено;*/
			/*ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения1.ТекущиеДанные, Элемент);*/
			/*ЭтаФорма.Модифицированность = Истина;*/
		}
		// Обработчик события ПередНачаломДобавления элемента Категории.
		//

		public void ФормаЭлементаКатегорииПередНачаломДобавления(/*Элемент, Отказ, Копирование, ЭтаФорма*/)
		{
			/*Отказ = Истина;*/
			/*ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);*/
		}
		// Обработчик события ПередУдалением элемента Категории.
		//

		public void ФормаЭлементаКатегорииПередУдалением(/*Элемент, Отказ, ЭтаФорма*/)
		{
			/*Отказ = Истина;*/
		}
		// Обработчик события ПриНачалеРедактирования элемента Категории.
		//

		public void ФормаЭлементаКатегорииПриИзмененииФлажка(/*Элемент, НоваяСтрока, ЭтаФорма*/)
		{
			/*ЭтаФорма.Модифицированность = Истина;*/
		}
		// Обработчик события ПриВыводеСтроки элемента Категории.
		//

		public void ФормаЭлементаКатегорииПриВыводеСтроки(/*Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма*/)
		{
			if(true/*Элемент.Колонки.Принадлежность.Видимость*/)
			{
				/*ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;*/
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ И ФУНКЦИИ, ОТНОСЯЩИЕСЯ К СПРАВОЧНИКУ СОТРУДНИКИ В ЦЕЛОМ

		public void ОткрытьФормуНовогоДокументаНаОснованииДанныхСотрудника(/*ИмяДокумента, Сотрудники*/)
		{
			if(true/*ТипЗнч(Сотрудники) = Тип("Массив") И Сотрудники.Количество() = 0*/)
			{
			}
			if(true/*Не ПравоДоступа("Добавление", Метаданные.Документы[ИмяДокумента])*/)
			{
				/*Предупреждение("Нарушение прав доступа!");*/
			}
			if(true/*ТипЗнч(Сотрудники) = Тип("СправочникСсылка.СотрудникиОрганизаций")*/)
			{
				/*ДокументОбъект = Документы[ИмяДокумента].СоздатьДокумент();*/
				/*ДокументОбъект.Заполнить(Сотрудники);*/
				/*ФормаДокумента = ДокументОбъект.ПолучитьФорму();*/
				/*ФормаДокумента.Открыть();*/
			}
		}
	}
}

