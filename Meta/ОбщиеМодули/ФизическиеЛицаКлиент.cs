using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class ФизическиеЛицаКлиент
	{
		////////////////////////////////////////////////////////////////////////////////
		// Процедуры, функции для работы формы элемента
		// Процедура устанавливает в поле картинки основное изображение
		//

		public void ПоказатьОсновноеИзображение(/*ЭтаФорма*/)
		{
			/*мТекущееОсновноеИзображение = ЭтаФорма.мТекущееОсновноеИзображение;*/
			if(true/*мТекущееОсновноеИзображение = Неопределено*/)
			{
				/*ЭтаФорма.ЭлементыФормы.ОсновноеИзображение.Картинка = ЭтаФорма.мПустаяКартинка;*/
			}
		}
		// ПоказатьОсновноеИзображение()
		// Процедура считывает место рождения физлица
		//
		// Параметры:
		//  Нет.
		//
		// Возвращаемое значение:
		//  Нет.
		//

		public void ПрочитатьМестоРождения(/*ЭтаФорма*/)
		{
			/*ЭтаФорма.МестоРожденияФизЛица = РегламентированнаяОтчетность.ПредставлениеМестаРождения(ЭтаФорма.МестоРождения);*/
			if(true/*НЕ ЗначениеЗаполнено(ЭтаФорма.МестоРожденияФизЛица)*/)
			{
				/*ЭтаФорма.МестоРожденияФизЛица = "Ввести место рождения";*/
			}
		}
		// ПрочитатьМестоРождения
		// Процедура считывает заметки физлица
		//
		// Параметры:
		//  Нет.
		//
		// Возвращаемое значение:
		//  Нет.
		//

		public void ПрочитатьЗаметки(/*ЭтаФорма*/)
		{
			/*ОтборОбъект	= ЭтаФорма.Заметки.Отбор.Объект;*/
			/*ОтборОбъект.Значение = ЭтаФорма.Ссылка;*/
			/*ОтборОбъект.Использование = Истина;*/
		}

		public void ОбновитьПредставлениеЭлемента(/*ИмяОбновляемогоЭлемента, ЭтаФорма, Параметр = Неопределено*/)
		{
			if(true/*ИмяОбновляемогоЭлемента = "Гражданство"*/)
			{
				/*мНаборЗаписейГражданство	= ЭтаФорма.мНаборЗаписейГражданство;*/
				if(true/*мНаборЗаписейГражданство.Количество() > 0*/)
				{
					/*Надпись = "" + мНаборЗаписейГражданство[0].Страна;*/
					if(true/*мНаборЗаписейГражданство[0].НеИмеетПравоНаПенсию*/)
					{
						/*Надпись = Надпись + ", не имеет права на медицинское и социальное страхование, право на пенсионное страхование зависит от срока трудового договора";*/
					}
					/*ЭтаФорма.Гражданство = Надпись;*/
					/*ЭтаФорма.Модифицированность = Истина;*/
				}
			}
		}
		// Выполняет проверку дублей физических лиц в информационной базе
		//

		public void ПроверитьДублиФизическихЛиц(/*Отказ, ОбработкаКомментариев, ФизлицоСсылка, ИНН, СтраховойНомерПФР, ФИО, ДокументУдостоверяющийЛичность = Неопределено*/)
		{
			/*ТаблицаСообщений = ПолныеПраваЗК.ПроверитьДублиФизлиц(ФизлицоСсылка, ДокументУдостоверяющийЛичность, ИНН, СтраховойНомерПФР, ФИО);*/
			/*// покажем результаты проверки дублей физлиц
*/
			if(true/*ТаблицаСообщений.Количество() > 0*/)
			{
				/*РодительскаяСтрока = ОбработкаКомментариев.ДобавитьСообщение("Результат проверки дублей физлиц",Перечисления.ВидыСообщений.ВажнаяИнформация);*/
				/*ОбработкаКомментариев.ПоказатьСообщения();*/
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ получения статуса налогоплательщика по НДФЛ

		public void ОбработатьИзменениеПериодСтатусаНалогоплательщикаПоНДФЛ(/*ЭтаФорма*/)
		{
			/*РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(ЭтаФорма.ПериодСтатусаНалогоплательщикаПоНДФЛ, ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ);*/
			/*//уточним представление периода
*/
			/*ЭтаФорма.ПериодСтатусаНалогоплательщикаПоНДФЛ = РаботаСДиалогамиЗК.ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ);*/
			/*ДатаОкончания = "";*/
			/*Статус = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Резидент;*/
			if(true/*ЗначениеЗаполнено(ДатаОкончания)*/)
			{
				/*ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ = Статус;*/
				/*НадписьОкончанияДействия = "по " + РаботаСДиалогами.ДатаКакМесяцПредставление(ДатаОкончания);*/
			}
			/*ЭтаФорма.ЭлементыФормы.НадписьОкончаниеДействияСтатусаНДФЛ.Заголовок = НадписьОкончанияДействия;*/
		}

		public object ПолучитьОписаниеСтатусаНалогоплательщикаПоНДФЛ(/*СтатусНалогоплательщикаПоНДФЛ*/)
		{
			/*ТекстОписания = "";*/
			if(true/*СтатусНалогоплательщикаПоНДФЛ = Перечисления.СтатусыНалогоплательщиковПоНДФЛ.Резидент*/)
			{
				/*ТекстОписания = "Физическое лицо постоянно находится на территории РФ (за прошедшие 12 месяцев - более 183 дней)." + Символы.ПС + "При исчислении НДФЛ с оплаты труда будет применяться ставка 13%";*/
			}
			return null;
		}
		// ПолучитьОписаниеСтатусаНалогоплательщикаПоНДФЛ()

		public void ПолучитьСтатусНалогоплательщикаПоНДФЛ(/*ЭтаФорма*/)
		{
			/*НаборЗаписей = РегистрыСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей();*/
			/*НаборЗаписей.Отбор.Физлицо.Установить(ЭтаФорма.Ссылка);*/
			/*НаборЗаписей.Прочитать();*/
			/*ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ = НаборЗаписей.Выгрузить();*/
			/*ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Сортировать("Период");*/
			if(true/*ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Количество() > 0*/)
			{
				/*СтрокаТаблицы = ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ[ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Количество()-1];*/
			}
			/*ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ = СтрокаТаблицы.Период;*/
			/*ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ 	   = СтрокаТаблицы.Статус;*/
			/*ЭтаФорма.ПериодСтатусаНалогоплательщикаПоНДФЛ = РаботаСДиалогамиЗК.ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ);*/
			/*ЭтаФорма.РасшифровкаНДФЛ = ПолучитьОписаниеСтатусаНалогоплательщикаПоНДФЛ(ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ);*/
		}

		public object ЗаписатьДанныеОСтатусе(/*ЭтаФорма*/)
		{
			/*СтруктураПоиска = Новый Структура("Период");*/
			/*СтруктураПоиска.Вставить("Период", ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ);*/
			/*МассивСтрок = ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.НайтиСтроки(СтруктураПоиска);*/
			if(true/*МассивСтрок.Количество() > 0*/)
			{
				/*СтрокаТаблицы = МассивСтрок[0];*/
				/*СтрокаТаблицы.Статус  = ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ;*/
			}
			/*НаборЗаписей = РегистрыСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей();*/
			/*НаборЗаписей.Отбор.Физлицо.Установить(ЭтаФорма.Ссылка);*/
			if(true/*Не РаботаСДиалогамиЗК.ПроверитьИЗаписатьНаборЗаписей(НаборЗаписей, ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ, "Период")*/)
			{
			}
			return null;
		}
		// ЗаписатьДанныеОСтатусе()

		public void ОбработатьОповещениеОбИзмененииИсторииСтатусНалогоплательщикаПоНДФЛ(/*ЭтаФорма, ТаблицаИсторииЗначений*/)
		{
			/*ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ = ТаблицаИсторииЗначений.Скопировать();*/
			/*ЭтаФорма.Модифицированность = Истина;*/
			if(true/*ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Количество() > 0*/)
			{
				/*// установим в форме последнее значение
*/
				/*ЭтаФорма.СтатусНалогоплательщикаПоНДФЛ     = ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ[ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Количество()-1].Статус;*/
				/*ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ = ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ[ЭтаФорма.мТаблицаЗаписейСтатусНалогоплательщикаПоНДФЛ.Количество()-1].Период;*/
			}
			/*ЭтаФорма.ПериодСтатусаНалогоплательщикаПоНДФЛ = РаботаСДиалогамиЗК.ПолучитьПредставлениеПериодаКакМесяцГодРодительныйПадеж(ЭтаФорма.ДатаСтатусНалогоплательщикаПоНДФЛ);*/
			/*ОбработатьИзменениеПериодСтатусаНалогоплательщикаПоНДФЛ(ЭтаФорма);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ И КАТЕГОРИЙ
		// Процедура перезаполняет таблицу свойств и значений.
		//
		// Параметры:
		//  Нет.
		//

		public void ПрочитатьЗаполнитьСвойстваИЗначения(/*ИмяДанных = "", ЭтаФорма*/)
		{
			/*ОбработкаОбъектЗначенияСвойств = ЭтаФорма.ОбработкаОбъектЗначенияСвойств;*/
			/*Ссылка = ЭтаФорма.Ссылка;*/
			/*// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
*/
			/*// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
*/
			/*// вызова из ПередОткрытием
*/
			if(true/*ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица*/)
			{
				/*ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;*/
				/*ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;*/
				/*ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();*/
			}
		}
		// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
		//

		public void ФормаЭлементаСвойстваИЗначенияПередНачаломДобавления(/*Элемент, Отказ, Копирование, ЭтаФорма*/)
		{
			/*Отказ = Истина;*/
			/*ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);*/
		}
		// Обработчик события ПередУдалением элемента СвойстваИЗначения.
		//

		public void ФормаЭлементаСвойстваИЗначенияПередУдалением(/*Элемент, Отказ, ЭтаФорма*/)
		{
			/*Отказ = Истина;*/
		}
		// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
		//

		public void ФормаЭлементаСвойстваИЗначенияПриНачалеРедактирования(/*Элемент, НоваяСтрока, ЭтаФорма*/)
		{
			/*ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);*/
		}
		// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
		//

		public void ФормаЭлементаСвойстваИЗначенияПриВыводеСтроки(/*Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма*/)
		{
			/*ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);*/
		}
		// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
		//

		public void ФормаЭлементаСвойстваИЗначенияЗначениеПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ЭтаФорма.Модифицированность = Истина;*/
		}
		// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
		//

		public void ФормаЭлементаСвойстваИЗначенияЗначениеОчистка(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*ТекущиеДанные = ЭтаФорма.ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные;*/
			/*ТекущиеДанные.Значение = Неопределено;*/
			/*ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ТекущиеДанные, Элемент);*/
			/*ЭтаФорма.Модифицированность = Истина;*/
		}
		// Процедура перезаполняет таблицу Категорий.
		//
		// Параметры:
		//  Нет.
		//

		public void ПрочитатьЗаполнитьКатегории(/*ИмяДанных = "", ЭтаФорма*/)
		{
			/*ОбработкаОбъектКатегорииОбъекта = ЭтаФорма.ОбработкаОбъектКатегорииОбъекта;*/
			/*// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
*/
			/*// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
*/
			/*// вызова из ПередОткрытием.
*/
			if(true/*ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица*/)
			{
				/*ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = ЭтаФорма.Ссылка;*/
				/*ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();*/
			}
		}
		// Обработчик события ПередНачаломДобавления элемента Категории.
		//

		public void ФормаЭлементаКатегорииПередНачаломДобавления(/*Элемент, Отказ, Копирование, ЭтаФорма*/)
		{
			/*Отказ = Истина;*/
			/*ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);*/
		}
		// Обработчик события ПередУдалением элемента Категории.
		//

		public void ФормаЭлементаКатегорииПередУдалением(/*Элемент, Отказ, ЭтаФорма*/)
		{
			/*Отказ = Истина;*/
		}
		// Обработчик события ПриНачалеРедактирования элемента Категории.
		//

		public void ФормаЭлементаКатегорииПриИзмененииФлажка(/*Элемент, НоваяСтрока, ЭтаФорма*/)
		{
			/*ЭтаФорма.Модифицированность = Истина;*/
		}
		// Обработчик события ПриВыводеСтроки элемента Категории.
		//

		public void ФормаЭлементаКатегорииПриВыводеСтроки(/*Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма*/)
		{
			if(true/*Элемент.Колонки.Принадлежность.Видимость*/)
			{
				/*ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;*/
			}
		}
		///////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ
		// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
		//

		public void ФормаЭлементаКоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(/*Кнопка, ЭтаФорма*/)
		{
			/*УправлениеКонтактнойИнформацией.КонтактнаяИнформацияРедактироватьВДиалоге(Кнопка);*/
		}
		// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
		//

		public void ФормаЭлементаКоманднаяПанельКонтактнойИнформацииУстановитьОсновным(/*Кнопка, ЭтаФорма*/)
		{
			/*УправлениеКонтактнойИнформацией.УстановитьЗаписьОсновной(ЭтаФорма.НаборКонтактнойИнформации, ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация, Кнопка);*/
		}
		// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
		//

		public void ФормаЭлементаКонтактнаяИнформацияПриНачалеРедактирования(/*Элемент, НоваяСтрока, ЭтаФорма*/)
		{
			/*УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, ЭтаФорма.мПоследнееЗначениеЭлементаПодбораПоСтрокеВидаКИ);*/
		}
		// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
		//

		public void ФормаЭлементаКонтактнаяИнформацияПредставлениеНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма);*/
		}
		// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
		//

		public void ФормаЭлементаКонтактнаяИнформацияТипОчистка(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
		}
		// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
		//

		public void ФормаЭлементаКонтактнаяИнформацияВидНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(ЭтаФорма.Ссылка));*/
		}
		// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
		//

		public void ФормаЭлементаКонтактнаяИнформацияВидПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			if(true/*Элемент.Значение = Неопределено*/)
			{
				/*Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();*/
			}
			/*ЭтаФорма.мПоследнееЗначениеЭлементаПодбораПоСтрокеВидаКИ = Элемент.Значение;*/
		}
		// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
		//

		public void ФормаЭлементаКонтактнаяИнформацияВидАвтоПодборТекста(/*Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(ЭтаФорма.Ссылка)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));*/
		}
		// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
		//

		public void ФормаЭлементаКонтактнаяИнформацияВидОкончаниеВводаТекста(/*Элемент, Текст, Значение, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(ЭтаФорма.Ссылка)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), ЭтаФорма.мОбработкаПодбораПоСтрокеВидаКИ, ЭтаФорма.мТекстПодбораПоСтрокеВидаКИ, ЭтаФорма.мПоследнееЗначениеЭлементаПодбораПоСтрокеВидаКИ);*/
		}
		// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
		//

		public void ФормаЭлементаКонтактнаяИнформацияПередОкончаниемРедактирования(/*Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, ЭтаФорма*/)
		{
			/*УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, ЭтаФорма.мТекстПодбораПоСтрокеВидаКИ, ЭтаФорма.мОбработкаПодбораПоСтрокеВидаКИ);*/
			if(true/*Не (НоваяСтрока и ОтменаРедактирования) и Не Отказ*/)
			{
				/*ЭтаФорма.Модифицированность = Истина;*/
			}
		}
		// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
		//

		public void ФормаЭлементаКонтактнаяИнформацияПредставлениеПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация);*/
		}
		// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
		//

		public void ФормаЭлементаКонтактнаяИнформацияПриАктивизацииСтроки(/*Элемент, ЭтаФорма*/)
		{
			/*УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭтаФорма.ЭлементыФормы.КоманднаяПанельКонтактнойИнформации.Кнопки.УстановитьОсновным);*/
		}
		// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
		//

		public void ФормаЭлементаКонтактнаяИнформацияПриВыводеСтроки(/*Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма*/)
		{
			/*УправлениеКонтактнойИнформацией.КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);*/
		}
		// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
		//

		public void ФормаЭлементаКонтактнаяИнформацияПередУдалением(/*Элемент, Отказ, ЭтаФорма*/)
		{
			/*УправлениеКонтактнойИнформацией.УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ, ЭтаФорма);*/
		}
		// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
		//

		public void ФормаЭлементаКонтактнаяИнформацияПередНачаломДобавления(/*Элемент, Отказ, Копирование, ЭтаФорма*/)
		{
			/*УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, ЭтаФорма.мКнопкаРедактироватьКИВДиалоге, ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация, ЭтаФорма.НаборКонтактнойИнформации, Ложь, ЭтаФорма);*/
		}
		// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
		//

		public void ФормаЭлементаКонтактнаяИнформацияПередНачаломИзменения(/*Элемент, Отказ, ЭтаФорма*/)
		{
			/*УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, ЭтаФорма.мКнопкаРедактироватьКИВДиалоге, Ложь, ЭтаФорма);*/
		}
		// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
		//

		public void ФормаЭлементаКонтактнаяИнформацияТипПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*УправлениеКонтактнойИнформацией.КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭтаФорма.ЭлементыФормы.КонтактнаяИнформация);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
		// Процедура - обработчик события "ПередОткрытием" формы
		//

		public void ФормаЭлементаПередОткрытием(/*Отказ, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*ЭтаФорма.ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;*/
			/*ПрочитатьЗаполнитьСвойстваИЗначения(, ЭтаФорма);*/
			/*ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ФизическиеЛица;*/
			/*ПрочитатьЗаполнитьКатегории(, ЭтаФорма);*/
			/*ФИО = ЭтаФорма.Наименование;*/
			if(true/*ЭтаФорма.ЭтоНовый() И ЗначениеЗаполнено(ФИО) и Не ЗначениеЗаполнено(ЭтаФорма.Фамилия)*/)
			{
				/*МассивФИО = ОбщегоНазначения.ПолучитьМассивФИО(ФИО);*/
				/*ЭтаФорма.Фамилия  = МассивФИО[0];*/
				/*ЭтаФорма.Имя      = МассивФИО[1];*/
				/*ЭтаФорма.Отчество = МассивФИО[2];*/
			}
			/*ЭтаФорма.мЭтоНовый = ЭтаФорма.ЭтоНовый();*/
		}
		// Процедура - обработчик события "ПриОткрытии" формы
		//

		public void ФормаЭлементаПриОткрытии(/*ЭтаФорма*/)
		{
			/*ЭлементыФормы 	= ЭтаФорма.ЭлементыФормы;*/
			/*ЭтотОбъект 		= ЭтаФорма.ЭтотОбъект;*/
			/*МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(ЭтаФорма.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);*/
			/*ОбновитьПредставлениеЭлемента("Гражданство", ЭтаФорма);*/
			/*ОбновитьПредставлениеЭлемента("СемейноеПоложение", ЭтаФорма);*/
			/*ОбновитьПредставлениеЭлемента("УдостоверениеЛичности", ЭтаФорма);*/
			/*ОбновитьПредставлениеЭлемента("ФИО", ЭтаФорма);*/
			/*ОбновитьПредставлениеЭлемента("ВоинскийУчет", ЭтаФорма);*/
			/*ОбновитьПредставлениеЭлемента("Инвалидность", ЭтаФорма);*/
			/*ОбновитьПредставлениеЭлемента("ОсновноеИзображение", ЭтаФорма);*/
			/*ОбновитьПредставлениеЭлемента("ИзмененСписокСправочникаХранилищеДопИнформации", ЭтаФорма);*/
			/*ОбновитьПредставлениеЭлемента(ФизическиеЛицаПереопределяемый.ИмяОбновляемогоЭлементаДополнительно(), ЭтаФорма);*/
			/*ЭтаФорма.Модифицированность = Ложь;*/
			/*ЭтаФорма.мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнойИнформации.Кнопки.РедактироватьВДиалоге;*/
			/*УправлениеКонтактнойИнформацией.ИнициализацияКнопкиРедактированиеКИВДиалоге(ЭтаФорма.мКнопкаРедактироватьКИВДиалоге);*/
			/*// Место рождения.
*/
			/*ПрочитатьМестоРождения(ЭтаФорма);*/
			/*ЭтаФорма.ЕстьЛьготаПриНачисленииПособий = ЗначениеЗаполнено(ЭтотОбъект.ЛьготаПриНачисленииПособий);*/
			/*ЭлементыФормы.ЛьготаПриНачисленииПособий.ТолькоПросмотр = Не ЭтаФорма.ЕстьЛьготаПриНачисленииПособий;*/
			/*ЭлементыФормы.ЛьготаПриНачисленииПособий.АвтоВыборНезаполненного = ЭтаФорма.ЕстьЛьготаПриНачисленииПособий;*/
			/*ПрочитатьЗаметки(ЭтаФорма);*/
			/*ЭтаФорма.Заголовок = "Личные данные физического лица: " + ?(ЭтаФорма.ЭтоНовый(),"Новый",ЭтаФорма.Наименование);*/
			/*ЭлементыФормы.Образование.Колонки.Специальность.ЭлементУправления.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КлассификаторСпециальностейПоОбразованию");*/
			/*// Выведем картинку на первой странице
*/
			/*ЭтаФорма.мТекущееОсновноеИзображение = ЭтотОбъект.ОсновноеИзображение.Хранилище.Получить();*/
			/*ПоказатьОсновноеИзображение(ЭтаФорма);*/
			/*РаботаСДиалогами.ПроверитьИННОформитьПолеВвода(ЭтотОбъект.ИНН, ЭлементыФормы.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо);*/
			/*РаботаСДиалогамиЗК.ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(ЭтотОбъект.СтраховойНомерПФР, ЭлементыФормы.СтраховойНомерПФР);*/
		}
		// Процедура - обработчик события "ПриЗакрытии" формы
		//

		public void ФормаЭлементаПриЗакрытии(/*ЭтаФорма*/)
		{
			/*СохранитьЗначение("РедактироватьКИВДиалоге", ЭтаФорма.мКнопкаРедактироватьКИВДиалоге.Пометка);*/
		}
		// Процедура - обработчик события "ОбработкаВыбора" формы
		//

		public void ФормаЭлементаОбработкаВыбора(/*РезультатВыбора, ИсточникВыбора, ЭтаФорма*/)
		{
			if(true/*ИсточникВыбора = ЭтаФорма.мФормаВводаМестаРождения*/)
			{
				/*ЭтаФорма.МестоРождения = РезультатВыбора;*/
				/*//Представление места рождения
*/
				/*ЭтаФорма.МестоРожденияФизЛица = РегламентированнаяОтчетность.ПредставлениеМестаРождения(ЭтаФорма.МестоРождения);*/
				if(true/*НЕ ЗначениеЗаполнено(ЭтаФорма.МестоРожденияФизЛица)*/)
				{
					/*ЭтаФорма.МестоРожденияФизЛица = "Ввести место рождения";*/
				}
			}
		}
		// Процедура - обработчик события "ОбработкаЗаписиНовогоОбъекта" формы
		//

		public void ФормаЭлементаОбработкаЗаписиНовогоОбъекта(/*Объект, Источник, ЭтаФорма*/)
		{
			if(true/*ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов")*/)
			{
				/*ЭтаФорма.ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭтаФорма.ЭлементыФормы.СвойстваИЗначения);*/
			}
			if(true/*ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов")*/)
			{
				/*ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭтаФорма.ЭлементыФормы.Категории);*/
			}
		}
		// Процедура - обработчик события "ОбработкаОповещения" формы
		//

		public void ФормаЭлементаОбработкаОповещения(/*ИмяСобытия, Параметр, Источник, ЭтаФорма*/)
		{
			if(true/*ИмяСобытия = "ОбновитьФорму" И (Источник = ЭтаФорма Или Источник = ЭтаФорма.Ссылка)*/)
			{
				/*ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;*/
				/*ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента, ЭтаФорма, Параметр);*/
			}
		}
		// Процедура - обработчик события "ПриИзмененииДанных" формы
		//

		public void ФормаЭлементаПриИзмененииДанных(/*ЭтаФорма*/)
		{
			/*ПрочитатьЗаполнитьСвойстваИЗначения(, ЭтаФорма);*/
			/*ПрочитатьЗаполнитьКатегории(, ЭтаФорма);*/
		}
		// Процедура - обработчик события "ПриЗаписи" формы
		//

		public void ФормаЭлементаПриЗаписи(/*Отказ, ЭтаФорма*/)
		{
			/*ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");*/
			/*ОбработкаКомментариев.УдалитьСообщения();*/
			/*ТаблицаСообщений = Новый ТаблицаЗначений;*/
			/*ФИО = ЭтаФорма.Фамилия + " " + ЭтаФорма.Имя + " " + ЭтаФорма.Отчество;*/
			/*мНаборЗаписейДокументаУдостоверяющегоЛичность = ЭтаФорма.мНаборЗаписейДокументаУдостоверяющегоЛичность;*/
			/*Ссылка	= ЭтаФорма.Ссылка;*/
			/*ЭтоНовый = ЭтаФорма.мЭтоНовый;*/
			/*ЗаписьДокументаУдостоверяющегоЛичность = Неопределено;*/
			if(true/*мНаборЗаписейДокументаУдостоверяющегоЛичность.Количество() > 0*/)
			{
				/*ЗаписьДокументаУдостоверяющегоЛичность = Новый Структура("ДокументВид,ДокументСерия,ДокументНомер,ДокументДатаВыдачи,ДокументКодПодразделения");*/
				/*ЗаполнитьЗначенияСвойств(ЗаписьДокументаУдостоверяющегоЛичность, мНаборЗаписейДокументаУдостоверяющегоЛичность[0]);*/
			}
			/*ПроверитьДублиФизическихЛиц(Отказ, ОбработкаКомментариев, Ссылка, ЭтаФорма.ИНН, ЭтаФорма.СтраховойНомерПФР, ФИО, ЗаписьДокументаУдостоверяющегоЛичность);*/
			/*// запись в регистр паспортных данных
*/
			if(true/*мНаборЗаписейДокументаУдостоверяющегоЛичность.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Период)*/)
			{
				/*мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Физлицо = Ссылка;*/
				/*мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Физлицо.Использование	= Истина;*/
				/*мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Физлицо.Значение		= мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Физлицо;*/
				/*мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Использование	= Истина;*/
				/*мНаборЗаписейДокументаУдостоверяющегоЛичность.Отбор.Период.Значение			= мНаборЗаписейДокументаУдостоверяющегоЛичность[0].Период;*/
				/*мНаборЗаписейДокументаУдостоверяющегоЛичность.Записать(Истина);*/
			}
			/*мНаборЗаписейГражданство = ЭтаФорма.мНаборЗаписейГражданство;*/
			/*// запись в регистр гражданство
*/
			if(true/*мНаборЗаписейГражданство.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейГражданство[0].Период)*/)
			{
				/*мНаборЗаписейГражданство[0].Физлицо = ЭтаФорма.Ссылка;*/
				/*мНаборЗаписейГражданство.Отбор.Физлицо.Использование= Истина;*/
				/*мНаборЗаписейГражданство.Отбор.Физлицо.Значение		= мНаборЗаписейГражданство[0].Физлицо;*/
				/*мНаборЗаписейГражданство.Отбор.Период.Использование	= Истина;*/
				/*мНаборЗаписейГражданство.Отбор.Период.Значение		= мНаборЗаписейГражданство[0].Период;*/
				/*мНаборЗаписейГражданство.Записать(Истина);*/
			}
			/*мНаборЗаписейВоинскийУчет = ЭтаФорма.мНаборЗаписейВоинскийУчет;*/
			/*// запись в регистр воинский учет
*/
			if(true/*мНаборЗаписейВоинскийУчет.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейВоинскийУчет[0].Период)*/)
			{
				/*мНаборЗаписейВоинскийУчет[0].Физлицо = ЭтаФорма.Ссылка;*/
				/*мНаборЗаписейВоинскийУчет.Отбор.Физлицо.Использование	= Истина;*/
				/*мНаборЗаписейВоинскийУчет.Отбор.Физлицо.Значение		= мНаборЗаписейВоинскийУчет[0].Физлицо;*/
				/*мНаборЗаписейВоинскийУчет.Отбор.Период.Использование	= Истина;*/
				/*мНаборЗаписейВоинскийУчет.Отбор.Период.Значение			= мНаборЗаписейВоинскийУчет[0].Период;*/
				/*мНаборЗаписейВоинскийУчет.Записать(Истина);*/
			}
			/*мНаборЗаписейСемейноеПоложение = ЭтаФорма.мНаборЗаписейСемейноеПоложение;*/
			/*// запись в регистр семейное положение
*/
			if(true/*мНаборЗаписейСемейноеПоложение.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейСемейноеПоложение[0].Период)*/)
			{
				/*мНаборЗаписейСемейноеПоложение[0].Физлицо = Ссылка;*/
				/*мНаборЗаписейСемейноеПоложение.Отбор.Физлицо.Использование	= Истина;*/
				/*мНаборЗаписейСемейноеПоложение.Отбор.Физлицо.Значение		= мНаборЗаписейСемейноеПоложение[0].Физлицо;*/
				/*мНаборЗаписейСемейноеПоложение.Отбор.Период.Использование	= Истина;*/
				/*мНаборЗаписейСемейноеПоложение.Отбор.Период.Значение		= мНаборЗаписейСемейноеПоложение[0].Период;*/
				/*мНаборЗаписейСемейноеПоложение.Записать(Истина);*/
			}
			/*мНаборЗаписейИнвалидность = ЭтаФорма.мНаборЗаписейИнвалидность;*/
			/*// запись в регистр Сведения об инвалидности
*/
			if(true/*мНаборЗаписейИнвалидность.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейИнвалидность[0].Период)*/)
			{
				/*мНаборЗаписейИнвалидность[0].Физлицо = Ссылка;*/
				/*мНаборЗаписейИнвалидность.Отбор.Физлицо.Использование	= Истина;*/
				/*мНаборЗаписейИнвалидность.Отбор.Физлицо.Значение		= мНаборЗаписейИнвалидность[0].Физлицо;*/
				/*мНаборЗаписейИнвалидность.Отбор.Период.Использование	= Истина;*/
				/*мНаборЗаписейИнвалидность.Отбор.Период.Значение			= мНаборЗаписейИнвалидность[0].Период;*/
				/*мНаборЗаписейИнвалидность.Записать(Истина);*/
			}
			/*мНаборЗаписейФИО = ЭтаФорма.мНаборЗаписейФИО;*/
			/*// запись в регистр ФИО физлиц
*/
			if(true/*мНаборЗаписейФИО.Количество() = 0*/)
			{
				/*ЗаписьНабора = мНаборЗаписейФИО.Добавить();*/
				/*ЗаписьНабора.Период		= ?(ЗначениеЗаполнено(ЭтаФорма.ДатаРождения), ЭтаФорма.ДатаРождения,'19800101');*/
				/*ЗаписьНабора.Фамилия	= ЭтаФорма.Фамилия;*/
				/*ЗаписьНабора.Имя		= ЭтаФорма.Имя;*/
				/*ЗаписьНабора.Отчество	= ЭтаФорма.Отчество;*/
			}
			if(true/*мНаборЗаписейФИО.Количество() > 0 И
		 ЗначениеЗаполнено(мНаборЗаписейФИО[0].Период)*/)
			{
				/*мНаборЗаписейФИО[0].Физлицо 	= Ссылка;*/
				/*мНаборЗаписейФИО[0].Фамилия 	= ЭтаФорма.Фамилия;*/
				/*мНаборЗаписейФИО[0].Имя 		= ЭтаФорма.Имя;*/
				/*мНаборЗаписейФИО[0].Отчество	= ЭтаФорма.Отчество;*/
				/*мНаборЗаписейФИО.Отбор.Физлицо.Установить(Ссылка);*/
				/*мНаборЗаписейФИО.Отбор.Период.Установить(мНаборЗаписейФИО[0].Период);*/
				/*мНаборЗаписейФИО.Записать(Истина);*/
			}
			/*НаборЗаписей = ЭтаФорма.мНаборЗаписейПринятыеПоДолгосрочнымДоговорам;*/
			if(true/*НаборЗаписей.Модифицированность()*/)
			{
				/*НаборЗаписей.Отбор.ФизЛицо.Установить(Ссылка);*/
				/*НаборЗаписей.Записать(Истина);*/
			}
			/*ОбработкаОбъектЗначенияСвойств 	= ЭтаФорма.ОбработкаОбъектЗначенияСвойств;*/
			/*ОбработкаОбъектКатегорииОбъекта	= ЭтаФорма.ОбработкаОбъектКатегорииОбъекта;*/
			/*// Обработка записи свойств и категорий
*/
			/*ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;*/
			/*ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;*/
			/*Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();*/
			/*ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;*/
			/*Отказ = НЕ ЭтаФорма.ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();*/
			/*// Запись в регистр контактной информации
*/
			/*УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(ЭтаФорма.НаборКонтактнойИнформации, Ссылка, Отказ);*/
			/*// Заметки
*/
			/*ЭтаФорма.Заметки.Отбор.Объект.Значение = Ссылка;*/
		}
		// Процедура - обработчик события "ПослеЗаписи" формы
		//

		public void ФормаЭлементаПослеЗаписи(/*ЭтаФорма*/)
		{
			/*Ссылка = ЭтаФорма.Ссылка;*/
			/*ЭтаФорма.Заголовок = "Личные данные физического лица: " + ЭтаФорма.Наименование;*/
			/*ПроцедурыУправленияПерсоналомПолныеПрава.СинхронизироватьНаименованияСотрудников(Ссылка);*/
			/*Оповестить("ОбновитьДанныеОФизлице", Ссылка);*/
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

		public void ФормаЭлементаОсновныеДействияФормыДействиеПечать(/*Кнопка, ЭтаФорма*/)
		{
			/*Отказ = Ложь;*/
			if(true/*ЭтаФорма.Модифицированность()*/)
			{
				if(true/*Вопрос("Данные физлица еще не записаны! Записать?", РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК,) = КодВозвратаДиалога.ОК*/)
				{
					/*Отказ = Не ЭтаФорма.ЗаписатьВФорме();*/
				}
			}
			if(true/*Не Отказ*/)
			{
				/*ЭтаФорма.ЭтотОбъект.Печать();*/
			}
		}

		public void ФормаЭлементаДействияФормыРедактироватьКод(/*Кнопка, ЭтаФорма*/)
		{
			/*ЭлементыФормы = ЭтаФорма.ЭлементыФормы;*/
			/*МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтаФорма.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);*/
		}

		public void ФормаЭлементаДействияФормыТруд(/*Кнопка, ЭтаФорма*/)
		{
			/*Отказ = Ложь;*/
			if(true/*ЭтаФорма.ЭтоНовый()*/)
			{
				/*Вопрос = "Перед вводом сведений необходимо записать элемент. Записать?";*/
				/*Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);*/
				if(true/*Ответ = КодВозвратаДиалога.ОК*/)
				{
					/*Отказ = Не ЭтаФорма.ЗаписатьВФорме();*/
				}
			}
			if(true/*НЕ Отказ*/)
			{
				/*ФормаРедактирования = ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаВводаДанныхТруд", ЭтаФорма);*/
				/*ФормаРедактирования.Открыть();*/
			}
		}

		public void ФормаЭлементаДействияФормыНДФЛ(/*Кнопка, ЭтаФорма*/)
		{
			/*Отказ = Ложь;*/
			if(true/*ЭтаФорма.ЭтоНовый()*/)
			{
				/*Вопрос = "Перед вводом сведений необходимо записать элемент. Записать?";*/
				/*Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);*/
				if(true/*Ответ = КодВозвратаДиалога.ОК*/)
				{
					/*Отказ = Не ЭтаФорма.ЗаписатьВФорме();*/
				}
			}
			if(true/*НЕ Отказ*/)
			{
				/*ФормаВводаНДФЛ = ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаВводаДанныхНДФЛ", ЭтаФорма);*/
				/*ФормаВводаНДФЛ.Открыть();*/
			}
		}

		public void ФормаЭлементаДействияФормыФайлы(/*Кнопка, ЭтаФорма*/)
		{
			/*Отказ = Ложь;*/
			if(true/*ЭтаФорма.ЭтоНовый()*/)
			{
				/*Вопрос = "Перед вводом файлов и изображений необходимо записать элемент. Записать?";*/
				/*Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);*/
				if(true/*Ответ = КодВозвратаДиалога.ОК*/)
				{
					/*Отказ = Не ЭтаФорма.ЗаписатьВФорме();*/
				}
			}
			if(true/*НЕ Отказ*/)
			{
				/*Ссылка = ЭтаФорма.Ссылка;*/
				/*СтруктураДляСпискаИзображений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);*/
				/*СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);*/
				/*ОбязательныеОтборы = Новый Структура("Объект", Ссылка);*/
				/*РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);*/
			}
		}

		public void ФормаЭлементаДействияФормыПеречитать(/*Кнопка, ЭтаФорма, ЭтотОбъект*/)
		{
			if(true/*ЭтаФорма.Модифицированность*/)
			{
				/*ОтветНаВопрос = Вопрос("Данные были изменены. Перечитать данные?", РежимДиалогаВопрос.ДаНет);*/
				if(true/*ОтветНаВопрос <> КодВозвратаДиалога.Нет*/)
				{
					/*УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(ЭтаФорма.НаборКонтактнойИнформации, ЭтаФорма.Ссылка);*/
					/*ЭтотОбъект.Прочитать();*/
				}
			}
		}

		public void ФормаЭлементаНаименованиеПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ФИО = ЭтаФорма.Наименование;*/
			if(true/*ПустаяСтрока(ЭтаФорма.Фамилия) Или ЭтаФорма.ЭтоНовый()*/)
			{
				/*МассивФИО = ОбщегоНазначения.ПолучитьМассивФИО(ФИО);*/
				/*ЭтаФорма.Фамилия  = МассивФИО[0];*/
				/*ЭтаФорма.Имя      = МассивФИО[1];*/
				/*ЭтаФорма.Отчество = МассивФИО[2];*/
				if(true/*ЗначениеЗаполнено(ЭтаФорма.Отчество) И Не ЗначениеЗаполнено(ЭтаФорма.Пол)*/)
				{
					/*ЭтаФорма.Пол = ПроцедурыУправленияПерсоналом.ПолучитьПол(ЭтаФорма.Отчество);*/
				}
			}
		}
		// Процедура формирует список вариантов для наименования элемента

		public void ФормаЭлементаНаименованиеНачалоВыбораИзСписка(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*Фамилия		= ЭтаФорма.Фамилия;*/
			/*Имя			= ЭтаФорма.Имя;*/
			/*Отчество	= ЭтаФорма.Отчество;*/
			/*СписокВозможныхНаименований = Новый СписокЗначений;*/
			if(true/*ЗначениеЗаполнено(Фамилия)*/)
			{
				/*СписокВозможныхНаименований.Добавить(Фамилия);*/
				if(true/*ЗначениеЗаполнено(Имя)*/)
				{
					/*СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + СокрЛП(Имя));*/
					/*СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ".");*/
					if(true/*ЗначениеЗаполнено(Отчество)*/)
					{
						/*СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + СокрЛП(Имя) + " " + СокрЛП(Отчество));*/
						/*СписокВозможныхНаименований.Добавить(СокрЛП(Фамилия) + " " + Лев(Имя,1) + ". " + Лев(Отчество,1)+ ".");*/
					}
				}
			}
			/*Элемент.СписокВыбора = СписокВозможныхНаименований;*/
		}

		public void ФормаЭлементаКнопкаВызоваДанныхФИОНажатие(/*Элемент, ЭтаФорма*/)
		{
			/*ФормаВвода = ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаЗаписиФИО", ЭтаФорма);*/
			/*мНаборЗаписейФИО = ЭтаФорма.мНаборЗаписейФИО;*/
			if(true/*мНаборЗаписейФИО.Количество() = 0*/)
			{
				/*мНаборЗаписейФИО.Добавить();*/
			}
			if(true/*ПустаяСтрока(мНаборЗаписейФИО[0].Фамилия + мНаборЗаписейФИО[0].Имя + мНаборЗаписейФИО[0].Отчество)*/)
			{
				/*мНаборЗаписейФИО[0].Фамилия	= ЭтаФорма.Фамилия;*/
				/*мНаборЗаписейФИО[0].Имя		= ЭтаФорма.Имя;*/
				/*мНаборЗаписейФИО[0].Отчество= ЭтаФорма.Отчество;*/
				if(true/*НЕ ЗначениеЗаполнено(мНаборЗаписейФИО[0].Период)*/)
				{
					/*мНаборЗаписейФИО[0].Период	= ?(ЗначениеЗаполнено(ЭтаФорма.ДатаРождения),ЭтаФорма.ДатаРождения,'19800101');*/
				}
			}
			/*ФормаВвода.НаборЗаписей = мНаборЗаписейФИО;*/
			/*ФормаВвода.ФамилияПриОткрытии  = мНаборЗаписейФИО[0].Фамилия;*/
			/*ФормаВвода.ИмяПриОткрытии      = мНаборЗаписейФИО[0].Имя;*/
			/*ФормаВвода.ОтчествоПриОткрытии = мНаборЗаписейФИО[0].Отчество;*/
			/*ФормаВвода.ПериодПриОткрытии   = мНаборЗаписейФИО[0].Период;*/
			/*ФормаВвода.Физлицо = ЭтаФорма.Ссылка;*/
			/*ФормаВвода.Открыть();*/
		}
		// Процедура открывает основное изображение в отдельном окне.

		public void ФормаЭлементаОсновноеИзображениеНажатие(/*Элемент, ЭтаФорма*/)
		{
			/*Отказ = Ложь;*/
			if(true/*ЭтаФорма.ЭтоНовый()*/)
			{
				/*Вопрос = "Перед вводом основного изображения необходимо записать элемент. Записать?";*/
				/*Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);*/
				if(true/*Ответ = КодВозвратаДиалога.ОК*/)
				{
					/*Отказ = Не ЭтаФорма.ЗаписатьВФорме();*/
				}
			}
			if(true/*Не Отказ*/)
			{
				/*РаботаСФайлами.ОткрытьФормуИзображения(ЭтаФорма, ЭтаФорма.ОсновноеИзображение, ЭтаФорма.Ссылка);*/
			}
		}

		public void ФормаЭлементаКодИМНСПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			if(true/*НЕ ЗначениеЗаполнено(ЭтаФорма.ИНН)*/)
			{
				/*ЭтаФорма.ИНН = ЭтаФорма.КодИМНС;*/
			}
		}
		// Процедура записывает код ИФНС "по умолчанию" по первым 4 цифрам ИНН

		public void ФормаЭлементаИННПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ИНН = ЭтаФорма.ИНН;*/
			/*РаботаСДиалогами.ПроверитьИННОформитьПолеВвода(ИНН, ЭтаФорма.ЭлементыФормы.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо);*/
			if(true/*НЕ ЗначениеЗаполнено(ЭтаФорма.КодИМНС)*/)
			{
				/*ЭтаФорма.КодИМНС = Лев(ИНН,4);*/
			}
		}

		public void ФормаЭлементаСтраховойНомерПФРПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ЭтотОбъект = ЭтаФорма.ЭтотОбъект;*/
			/*РаботаСДиалогамиЗК.ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(ЭтотОбъект.СтраховойНомерПФР, ЭтаФорма.ЭлементыФормы.СтраховойНомерПФР);*/
		}

		public void ФормаЭлементаМестоРожденияНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*ЭтаФорма.мФормаВводаМестаРождения = ПолучитьОбщуюФорму("ФормаВводаМестаРождения", ЭтаФорма, "ФизЛицо"+ЭтаФорма.Код);*/
			/*ЭтаФорма.мФормаВводаМестаРождения.МестоРожденияСтрокой = ЭтаФорма.МестоРождения;*/
			/*ЭтаФорма.мФормаВводаМестаРождения.ЗаголовокФормы       = "Место рождения физ. лица: "+ЭтаФорма.Наименование;*/
			/*ЭтаФорма.мФормаВводаМестаРождения.Открыть();*/
		}

		public void ФормаЭлементаУдостоверениеЛичностиНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*Отказ = Ложь;*/
			/*ФормаВвода	 			= ПолучитьОбщуюФорму("РедактированиеДокументаУдостоверяющегоЛичность", ЭтаФорма);*/
			/*ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейДокументаУдостоверяющегоЛичность;*/
			/*ФормаВвода.Открыть();*/
		}

		public void ФормаЭлементаГражданствоНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка 	= Ложь;*/
			/*Отказ 					= Ложь;*/
			/*ФормаВвода	 			= ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаЗаписиГражданство", ЭтаФорма);*/
			/*ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейГражданство;*/
			/*ФормаВвода.ПринятыеПоДолгосрочнымДоговорам = ЭтаФорма.мНаборЗаписейПринятыеПоДолгосрочнымДоговорам;*/
			/*ФормаВвода.Открыть();*/
		}

		public void ФормаЭлементаВоинскийУчетНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*Отказ = Ложь;*/
			/*ФормаВвода	 			= ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаЗаписиВоинскийУчет", ЭтаФорма);*/
			/*ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейВоинскийУчет;*/
			/*ФормаВвода.Открыть();*/
		}

		public void ФормаЭлементаИнвалидностьНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*ФормаВвода	 			= ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаЗаписиСведенияОбИнвалидности", ЭтаФорма);*/
			/*ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейИнвалидность;*/
			/*ФормаВвода.Открыть();*/
		}

		public void ФормаЭлементаСемейноеПоложениеНачалоВыбора(/*Элемент, СтандартнаяОбработка, ЭтаФорма*/)
		{
			/*СтандартнаяОбработка = Ложь;*/
			/*Отказ = Ложь;*/
			/*ФормаВвода	 			= ЭтаФорма.ЭтотОбъект.ПолучитьФорму("ФормаЗаписиСемейноеПоложение", ЭтаФорма);*/
			/*ФормаВвода.НаборЗаписей = ЭтаФорма.мНаборЗаписейСемейноеПоложение;*/
			/*ФормаВвода.Открыть();*/
		}

		public void ФормаЭлементаДатаРожденияПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			if(true/*Год(Элемент.Значение) >= Год(ОбщегоНазначения.ПолучитьРабочуюДату())*/)
			{
				/*Предупреждение("Внимание! Возможно, неверно задана дата рождения.");*/
			}
		}

		public void ФормаЭлементаЕстьЛьготаПриНачисленииПособийПриИзменении(/*Элемент, ЭтаФорма*/)
		{
			/*ЭтотОбъект = ЭтаФорма.ЭтотОбъект;*/
			/*ЭлементыФормы = ЭтаФорма.ЭлементыФормы;*/
			/*ЭлементыФормы.ЛьготаПриНачисленииПособий.ТолькоПросмотр = Не ЭтаФорма.ЕстьЛьготаПриНачисленииПособий;*/
			/*ЭлементыФормы.ЛьготаПриНачисленииПособий.АвтоВыборНезаполненного = ЭтаФорма.ЕстьЛьготаПриНачисленииПособий;*/
			if(true/*ЭлементыФормы.ЛьготаПриНачисленииПособий.ТолькоПросмотр И ЗначениеЗаполнено(ЭтотОбъект.ЛьготаПриНачисленииПособий)*/)
			{
				/*ЭтотОбъект.ЛьготаПриНачисленииПособий = "";*/
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Заметки

		public void ФормаЭлементаЗаметкиПередНачаломДобавления(/*Элемент, Отказ, Копирование, ЭтаФорма*/)
		{
			/*Отказ = Истина;*/
			/*Форма = РегистрыСведений.Заметки.ПолучитьФормуРедактированияЗаписи();*/
			/*Форма.Автор  = глЗначениеПеременной("глТекущийПользователь");*/
			/*Форма.Объект = ЭтаФорма.Ссылка;*/
			/*Форма.Дата   = ТекущаяДата();*/
			if(true/*Копирование*/)
			{
				/*ОбъектКопирования = Элемент.ТекущиеДанные;*/
				/*Форма.ВидЗаметки = ЭтаФорма.ОбъектКопирования.ВидЗаметки;*/
				/*Форма.Содержание = ЭтаФорма.ОбъектКопирования.Содержание;*/
			}
			/*Форма.Открыть();*/
		}
	}
}

