using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace V82.ОбщиеМодули
{
	public partial class МенеджерОборудованияКлиент
	{
		////////////////////////////////////////////////////////////////////////////
		// МОДУЛЬ УПРАВЛЕНИЯ ПОДКЛЮЧАЕМЫМ ОБОРУДОВАНИЕМ (на клиенте)
		///////////////////////////////////////////////////////////////////////////////
		// ПОДКЛЮЧЕНИЕ ОБОРУДОВАНИЯ
		// Производит подключение доступного оборудования по списку типов ПО
		//

		public object ПодключитьОборудованиеПоТипу(/*ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = ""*/)
		{
			/*СтруктураТиповПО = Новый Структура();*/
			if(true/*ТипЗнч(ТипыПО) = Тип("Массив")*/)
			{
			}
			return null;
		}
		// Подключает одиночный экземпляр устройства определяемый идентификатором
		//

		public object ПодключитьОборудованиеПоИдентификатору(/*ИдентификаторКлиента, ИдентификаторУстройства,
                                               ОписаниеОшибки = ""*/)
		{
			return null;
		}
		// Функция подключает устройства по типу оборудования
		// Возвращает результат выполнения функции.

		public object ПодключитьОборудование(/*ИдентификаторКлиента, ТипыПО = Неопределено,
                               ИдентификаторУстройства = Неопределено, ОписаниеОшибки = ""*/)
		{
			/*КонечныйРезультат = Истина;*/
			/*Результат         = Истина;*/
			/*ОбъектДрайвера    = Неопределено;*/
			/*ОписаниеОшибки    = "";*/
			/*ОписаниеОшибкиУстройства = "";*/
			/*Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();*/
			if(true/*Не Результат*/)
			{
				/*ОписаниеОшибки = НСтр("ru = 'Предварительно необходимо выбрать рабочее место подключаемого оборудования текущего сеанса.'");*/
			}
			/*СписокОборудования =
	 МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипыПО,
	                                                              ИдентификаторУстройства);*/
			if(true/*СписокОборудования.Количество() > 0*/)
			{
			}
			return null;
		}
		///////////////////////////////////////////////////////////////////////////////
		// ОТКЛЮЧЕНИЕ ОБОРУДОВАНИЯ
		// Отключает все подключенное оборудование, соответствующее указанному типу ПО
		//

		public object ОтключитьОборудованиеПоТипу(/*ИдентификаторКлиента, ТипыПО, ОписаниеОшибки = ""*/)
		{
			return null;
		}
		// Отключает устройство, определенное идентификатором
		//

		public object ОтключитьОборудованиеПоИдентификатору(/*ИдентификаторКлиента, ИдентификаторУстройства, ОписаниеОшибки = ""*/)
		{
			return null;
		}
		// Производит принудительное отключение всего подключенного оборудования,
		// независимо от числа ссылок на подключение

		public object ОтключитьВсеОборудование(/*ОписаниеОшибки = ""*/)
		{
			/*КонечныйРезультат = Истина;*/
			/*Результат         = Истина;*/
			/*глПодключаемоеОборудование.ПараметрыПодключенияПО.Очистить();*/
			return null;
		}
		// Функция подключает устройства по типу оборудования
		// Возвращает результат выполнения функции.

		public object ОтключитьОборудование(/*ИдентификаторКлиента, ТипыПО = Неопределено, ИдентификаторУстройства = Неопределено, ОписаниеОшибки = ""*/)
		{
			/*КонечныйРезультат = Истина;*/
			/*Результат         = Истина;*/
			/*ВыходноеОписаниеОшибки = "";*/
			if(true/*глПодключаемоеОборудование.ПараметрыПодключенияПО <> Неопределено*/)
			{
				/*КоличествоУстройств = глПодключаемоеОборудование.ПараметрыПодключенияПО.Количество();*/
			}
			return null;
		}
		///////////////////////////////////////////////////////////////////////////////
		// ВСПОМОГАТЕЛЬНЫЕ ЭКСПОРТНЫЕ МЕТОДЫ
		// Функция, вызываемая при начале работы системы.
		// Выполняет подготовку данных механизма

		public object ПриНачалеРаботыСистемы(/**/)
		{
			if(true/*глПодключаемоеОборудование = Неопределено*/)
			{
				/*глПодключаемоеОборудование = Новый Структура("ДрайвераПодключаемогоОборудования,
		                                        |ПараметрыПодключенияПО,
		                                        |ПоследнийСлипЧек,
		                                        |МенеджерОборудованияСтандартныеДрайвераКлиент,
		                                        |ТаблицаУстройствДМ,
		                                        |ПараметрыДрайверМенеджера",
		                                         Новый Соответствие(),
		                                         Новый Массив(),
		                                         "",
		                                         Неопределено,
		                                         Новый Структура(),
		                                         Новый Структура());*/
			}
			return null;
		}
		// Функция, вызываемая при начале работы системы.
		// Выполняет подготовку данных механизма

		public object ПередЗавершениемРаботыСистемы(/**/)
		{
			return null;
		}
		// Функция осуществляет выбор устройства из списка доступных
		// по типу подключаемого оборудования
		// Если устройств более одного, то пользователю отображается
		// диалог со списком устройств с предложением выбрать "одно из..."

		public object ВыбратьУстройство(/*ТипПО, ТекстЗаголовкаВыбора, СообщениеНеПодключен*/)
		{
			/*//Выбор устройства
*/
			/*Идентификатор = Неопределено;*/
			/*Результат = МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента();*/
			if(true/*Не Результат*/)
			{
			}
			/*СписокДоступныхУстройств = 
	 МенеджерОборудованияКлиентПовтИсп.ПолучитьСписокОборудования(ТипПО);*/
			if(true/*СписокДоступныхУстройств.Количество() = 0*/)
			{
				if(true/*Не ПустаяСтрока(СообщениеНеПодключен)*/)
				{
					/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеНеПодключен);*/
				}
			}
			return null;
		}
		// Функция предоставляет диалог выбора рабочего места
		//

		public object ВыбратьРабочееМесто(/*ОткрыватьФормуВыбораПриПервомОбращении = Ложь, ИдентификаторКлиента = ""*/)
		{
			/*Результат    = Ложь;*/
			/*РабочееМесто = "";*/
			/*ПараметрыФормы = Новый Структура();*/
			/*ПараметрыФормы.Вставить("ОткрыватьПриПервомОбращении", ОткрыватьФормуВыбораПриПервомОбращении);*/
			/*ПараметрыФормы.Вставить("ИдентификаторКлиента", ИдентификаторКлиента);*/
			/*Ответ = ОткрытьФормуМодально("Справочник.ПодключаемоеОборудование.Форма.ФормаВыбораРабочегоМеста", ПараметрыФормы);*/
			if(true/*ТипЗнч(Ответ) = Тип("Структура")*/)
			{
				/*РабочееМесто = Ответ.РабочееМесто;*/
				/*МенеджерОборудованияСервер.УстановитьРабочееМестоКлиента(РабочееМесто);*/
				/*Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);*/
				/*Результат = Истина;*/
			}
			return null;
		}
		// Выполняет обновление имени компьютера в параметре сеанса "РабочееМестоКлиента"
		//

		public object ОбновитьРабочееМестоКлиента(/**/)
		{
			/*Результат = Истина;*/
			/*РабочееМесто = МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента();*/
			if(true/*Не ЗначениеЗаполнено(РабочееМесто)*/)
			{
				/*СистемнаяИнформация = Новый СистемнаяИнформация();*/
				/*МассивРабочихМест = МенеджерОборудованияКлиентПовтИсп.НайтиРабочиеМестаПоИД(ВРег(СистемнаяИнформация.ИдентификаторКлиента));*/
				if(true/*МассивРабочихМест.Количество() = 0*/)
				{
					/*Параметры = Новый Структура;*/
					/*Параметры.Вставить("ИмяКомпьютера");*/
					/*Параметры.Вставить("ИдентификаторКлиента");*/
					/*Параметры.Вставить("СетевойПорт");*/
					/*#Если Не ВебКлиент Тогда
				Параметры.ИмяКомпьютера = ИмяКомпьютера();*/
					/*#КонецЕсли
			
			Параметры.ИдентификаторКлиента = СистемнаяИнформация.ИдентификаторКлиента;*/
					/*Параметры.СетевойПорт          = МенеджерОборудованияКлиентСервер.ПолучитьСетевойПортПоУмолчанию();*/
					/*РабочееМесто = МенеджерОборудованияСервер.СоздатьРабочееМестоКлиента(Параметры);*/
				}
			}
			if(true/*Результат
		И РабочееМесто <> МенеджерОборудованияКлиентПовтИсп.ПолучитьРабочееМестоКлиента()*/)
			{
				/*МенеджерОборудованияСервер.УстановитьРабочееМестоКлиента(РабочееМесто);*/
				/*Оповестить("ИзмененоРабочееМестоТекущегоСеанса", РабочееМесто);*/
			}
			return null;
		}
		// Возвращает макет слип чека по наименованию макета
		//

		public object ПолучитьСлипЧек(/*ИмяМакета, ШиринаСлипЧека, Параметры, АвторизацияПИН = Ложь*/)
		{
			return null;
		}
		// Направляет команду ответственному обработчику драйвера
		// (в соответствии с указанным значением обработчика во входном параметре "Идентификатор")

		public object ВыполнитьКоманду(/*Идентификатор, Команда, ВходныеПараметры, ВыходныеПараметры, Таймаут = -1*/)
		{
			/*Результат = Ложь;*/
			/*// Поиск подключенного устройства
*/
			/*ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
	                                                        Идентификатор);*/
			if(true/*ПодключенноеУстройство <> Неопределено*/)
			{
				/*// Получение объекта драйвера
*/
				/*ОбъектДрайвера = ПолучитьОбъектДрайвера(ПодключенноеУстройство.ОбработчикДрайвера);*/
				if(true/*ОбъектДрайвера = Неопределено*/)
				{
					/*//Сообщить об ошибке, что не удалось загрузить драйвер.
*/
					/*ВыходныеПараметры = Новый Массив();*/
					/*ОписаниеОшибки = НСтр("ru = '""%Наименование%"": Не удалось загрузить драйвер устройства.
			                            |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");*/
					/*ОписаниеОшибки = СтрЗаменить(ОписаниеОшибки, "%Наименование%", ПодключенноеУстройство.Наименование);*/
					/*ВыходныеПараметры.Добавить(999);*/
					/*ВыходныеПараметры.Добавить(ОписаниеОшибки);*/
				}
			}
			return null;
		}
		// Выполняет дополнительную команду к драйверу, не требующую предварительного подключения устройства в системе
		//

		public object ВыполнитьДополнительнуюКоманду(/*Команда, ВходныеПараметры, ВыходныеПараметры,
                                       Идентификатор, Параметры*/)
		{
			/*Результат = Ложь;*/
			/*// Поиск подключенного устройства
*/
			/*ПодключенноеУстройство = ПолучитьПодключенноеУстройство(глПодключаемоеОборудование.ПараметрыПодключенияПО,
	                                                        Идентификатор);*/
			if(true/*ПодключенноеУстройство = Неопределено*/)
			{
				/*ДанныеОборудования = МенеджерОборудованияСервер.ПолучитьДанныеУстройства(Идентификатор);*/
				/*времПараметрыПодключения = Новый Структура();*/
				/*ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования.ОбработчикДрайвера);*/
				if(true/*ОбъектДрайвера = Неопределено*/)
				{
					/*//Сообщить об ошибке, что не удалось загрузить драйвер.
*/
					/*ВыходныеПараметры = Новый Массив();*/
					/*ТекстСообщения = НСтр("ru = 'Не удалось загрузить драйвер устройства.
			                            |Проверьте, что драйвер корректно установлен и зарегистрирован в системе.'");*/
					/*ВыходныеПараметры.Добавить(999);*/
					/*ВыходныеПараметры.Добавить(ТекстСообщения);*/
					/*ВыходныеПараметры.Добавить(НСтр("ru='Не установлен'"));*/
				}
			}
			return null;
		}
		// Выводить модальную диалоговую форму настройки устройства
		//Входные параметры:
		//   Устройство   - СправочникСсылка.ПодключаемоеОборудование

		public object ВыполнитьНастройкуОборудования(/*Идентификатор, НастройкиИзменены = Ложь,СообщениеОбОшибке = ""*/)
		{
			/*Результат = Истина;*/
			/*ДанныеУстройства = МенеджерОборудованияКлиентПовтИсп.ПолучитьДанныеУстройства(Идентификатор);*/
			/*ОбработчикДрайвера = ДанныеУстройства.ОбработчикДрайвера;*/
			/*ИдентификаторУстройства = ДанныеУстройства.ИдентификаторУстройства;*/
			/*//Получить параметры из базы
*/
			/*ПараметрыОбработки = МенеджерОборудованияКлиентПовтИсп.ПолучитьПараметрыУстройства(Идентификатор);*/
			/*ПараметрыОбработки.Вставить("Идентификатор", Идентификатор);*/
			/*// Получение формы настройки параметров
*/
			/*ФормаНастройки = МенеджерОборудованияКлиентПовтИсп.ПолучитьИмяФормыНастройкиПараметров(Строка(ОбработчикДрайвера));*/
			/*ФормаНастройки = ПолучитьФорму("ОбщаяФорма." + ФормаНастройки, ПараметрыОбработки);*/
			/*Ответ = ФормаНастройки.ОткрытьМодально();*/
			if(true/*Ответ = КодВозвратаДиалога.ОК*/)
			{
				/*ПараметрыФормы = ФормаНастройки.Параметры;*/
				/*Результат = МенеджерОборудованияСервер.СохранитьПараметрыУстройства(Идентификатор, ПараметрыОбработки);*/
				if(true/*Не Результат*/)
				{
					/*СообщениеОбОшибке = НСтр("ru='Не удалось сохранить параметры устройства.'");*/
				}
			}
			return null;
		}
		// Сохраняет пользовательские настройки подключаемого оборудования
		//

		public void СохранитьПользовательскиеНастройкиПодключаемогоОборудования(/*СписокНастроек*/)
		{
			/*МенеджерОборудованияСервер.СохранитьПользовательскиеНастройкиПодключаемогоОборудования(СписокНастроек);*/
		}
		///////////////////////////////////////////////////////////////////////////////
		// МЕТОДЫ РАБОТЫ С ТСД
		// Выгружает таблицу с данными в терминал сбора данных
		// УникальныйИдентификатор 	- идентификатор формы
		// ТаблицаТСД 				- массив структур в которых могут присутствовать только нижеуказанные ключи:
		// 	 - Штрихкод
		// 	 - Номенклатура
		// 	 - ЕдиницаИзмерения
		// 	 - ХарактеристикаНоменклатуры
		// 	 - СерияНоменклатуры
		// 	 - Качество
		// 	 - Цена
		// 	 - Количество

		public void ВыгрузитьДанныеВТСД(/*УникальныйИдентификатор, ТаблицаВыгрузкиВТСД*/)
		{
			/*ОписаниеОшибки = "";*/
			if(true/*МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента()*/)
			{
				/*// Подключение устройства
*/
				/*ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ТерминалСбораДанных",
		    НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен'"));*/
				if(true/*ИдентификаторУстройства <> Неопределено*/)
				{
					/*Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			                                                                              ИдентификаторУстройства, ОписаниеОшибки);*/
					if(true/*Результат*/)
					{
						/*// выгружаем в ТСД
*/
						/*ВходныеПараметры  = Новый Массив();*/
						/*ВыходныеПараметры = Неопределено;*/
						/*// Преобразуем массив структур в массив списка значений с предопределённым и фиксированным порядком полей:
*/
						/*// 	0 - Штрихкод
*/
						/*// 	1 - Номенклатура
*/
						/*// 	2 - ЕдиницаИзмерения
*/
						/*// 	3 - ХарактеристикаНоменклатуры
*/
						/*// 	4 - СерияНоменклатуры
*/
						/*// 	5 - Качество
*/
						/*// 	6 - Цена
*/
						/*// 	7 - Количество
*/
						/*МассивТСД = Новый Массив;*/
						/*ВходныеПараметры.Добавить("Items");*/
						/*ВходныеПараметры.Добавить(МассивТСД);*/
						/*Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
				                                                        "UploadDirectory",
				                                                        ВходныеПараметры,
				                                                        ВыходныеПараметры);*/
						if(true/*НЕ Результат*/)
						{
							/*ТекстСообщения = НСтр("ru='При выгрузке данных в терминал сбора данных произошла ошибка.
					                          |%ОписаниеОшибки%
					                          |Данные в терминал сбора данных не выгружены.'");*/
							/*ТекстСообщения = СтрЗаменить(ТекстСообщения, "%ОписаниеОшибки%", ВыходныеПараметры[1]);*/
							/*ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);*/
						}
						/*МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                 ИдентификаторУстройства);*/
					}
				}
			}
		}
		// Загружает в таблицу данные из терминала сбора данных
		// УникальныйИдентификатор 	- идентификатор формы
		// ТаблицаТСД 				- массив структур с ключами:
		// 	 - Штрихкод
		// 	 - Количество

		public void ЗагрузитьДанныеИзТСД(/*УникальныйИдентификатор, ТаблицаЗагрузкиИзТСД*/)
		{
			/*ТаблицаЗагрузкиИзТСД = Новый Массив();*/
			/*ОписаниеОшибки = "";*/
			if(true/*МенеджерОборудованияКлиент.ОбновитьРабочееМестоКлиента()*/)
			{
				/*// Подключение устройства
*/
				/*ИдентификаторУстройства = МенеджерОборудованияКлиент.ВыбратьУстройство("ТерминалСбораДанных",
		    НСтр("ru='Выберите терминал сбора данных'"), НСтр("ru='Терминал сбора данных не подключен'"));*/
				if(true/*ИдентификаторУстройства <> Неопределено*/)
				{
					/*Результат = МенеджерОборудованияКлиент.ПодключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
			                                                                              ИдентификаторУстройства, ОписаниеОшибки);*/
					if(true/*Результат*/)
					{
						/*ВходныеПараметры  = Неопределено;*/
						/*ВыходныеПараметры = Неопределено;*/
						/*Результат = МенеджерОборудованияКлиент.ВыполнитьКоманду(ИдентификаторУстройства,
				                                                        "DownloadDocument",
				                                                        ВходныеПараметры,
				                                                        ВыходныеПараметры);*/
						if(true/*Результат*/)
						{
							/*Оповестить("DataCollectionTerminal", ТаблицаЗагрузкиИзТСД, "ПодключаемоеОборудование");*/
						}
						/*МенеджерОборудованияКлиент.ОтключитьОборудованиеПоИдентификатору(УникальныйИдентификатор,
				                                                                 ИдентификаторУстройства);*/
					}
				}
			}
		}
		///////////////////////////////////////////////////////////////////////////////
		//  МЕТОДЫ РАБОТЫ С КАРДРИДЕРОМ
		// Определяет соответствует ли код карты шаблону
		// На входе:
		// ДанныеДорожек - Массив содержащий строки кода дорожки. Всего 3 Элемента.
		// ДанныеШаблона - структура содержащая данные шаблона:
		//	- Суффикс
		//	- Префикс
		//	- РазделительБлоков
		//	- ДлинаКода
		// На выходе:
		// Истина - код соответствует шаблону
		// Сообщение пользователю что именно не соответствует

		public object КодСоответствуетШаблонуМК(/*ДанныеДорожек, ДанныеШаблона*/)
		{
			/*ОднаДорожкаПрисутствует = Ложь;*/
			/*ПроверкаПройдена = Истина;*/
			if(true/*ОднаДорожкаПрисутствует*/)
			{
			}
			return null;
		}
		///////////////////////////////////////////////////////////////////////////////
		// ОБЩИЕ МЕТОДЫ ОБРАБОТКИ СОБЫТИЙ ОТ УСТРОЙСТВ
		// Производит обработку данных события, полученных от клиента
		//

		public object ОбработатьСобытиеОтУстройства(/*ОписаниеСобытия, ОписаниеОшибки = ""*/)
		{
			/*Результат = Истина;*/
			/*// Поиск обработчика события
*/
			return null;
		}
		///////////////////////////////////////////////////////////////////////////////
		//  ВСПОМОГАТЕЛЬНЫЕ МЕТОДЫ
		//Поиск по идентификатору подключенного ранее устройства
		//

		public object ПолучитьПодключенноеУстройство(/*СписокПодключений, Идентификатор*/)
		{
			/*ПодключенноеУстройство = Неопределено;*/
			return null;
		}
		// Выполняет подготовку к переустановке компоненты: Спрашивает пользователя, устанавливает флаг ТребуетсяПереустановка.
		// Процедура вызывается из модуля формы настройки оборудования ПриОткрытии

		public void ПодготовкаКПереустановкеКомпоненты(/*ПодключаемоеОборудованиеСсылка, ВерсияТекущая, Отказ*/)
		{
			/*#Если ВебКлиент Тогда
		ВерсияИзКонфигурации = МенеджерОборудованияКлиентСерверПереопределяемый.ПолучитьОбработчикаДрайвера(МенеджерОборудованияСервер.ПолучитьОбработчикДрайвераИзСсылки(ПодключаемоеОборудованиеСсылка)).ПолучитьВерсиюВнешнейКомпоненты();*/
			/*ТребуетсяПереустановка = МенеджерОборудованияСервер.ПолучитьПризнакПереустановкиИзСсылки(ПодключаемоеОборудованиеСсылка);*/
			if(true/*НЕ ТребуетсяПереустановка
			И ЗначениеЗаполнено(ВерсияИзКонфигурации)
			И ЗначениеЗаполнено(ВерсияТекущая)
			И ВерсияИзКонфигурации <> ВерсияТекущая*/)
			{
				/*Ответ = Вопрос(НСтр("ru='На вашем компьютере установлена компонента версии '")+ВерсияТекущая+Символы.ПС
				+НСтр("ru='В конфигурации доступна версия компоненты '")+ВерсияИзКонфигурации+Символы.ПС+Символы.ПС
				+НСтр("ru='Обновить компоненту из конфигурации? (требуется перезапустить 1С:Предприятие)'"), РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, НСтр("ru='Обновление компоненты'"));*/
				if(true/*Ответ = КодВозвратаДиалога.Да*/)
				{
					/*МенеджерОборудованияСервер.УстановитьПризнакПереустановки(ПодключаемоеОборудованиеСсылка, Истина);*/
					/*Отказ = Истина;*/
				}
			}
			/*#КонецЕсли;*/
		}
		///////////////////////////////////////////////////////////////////////////////
		//  РАБОТА С ДРАЙВЕРОМ
		// Проверяет установлен ли драйвер.
		//

		public object ДрайверУстановлен(/*Идентификатор*/)
		{
			/*ДанныеОборудования = МенеджерОборудованияСервер.ПолучитьДанныеУстройства(Идентификатор);*/
			/*ОбъектДрайвера = ПолучитьОбъектДрайвера(ДанныеОборудования.ОбработчикДрайвера);*/
			return null;
		}
		// Установливает драйвер из дистрибутива поставщика
		//

		public void УстановитьДрайверИзДистрибутива(/*ИмяМакета, ИмяФайла*/)
		{
			/*ВременныйКаталог = КаталогВременныхФайлов();*/
			/*// Получение макета с сервера
*/
			/*СсылкаНаФайл = МенеджерОборудованияСервер.ПолучитьМакетССервера(ИмяМакета);*/
			/*// Распаковка архива дистрибутива во временный каталог
*/
			/*Результат = ПолучитьФайл(СсылкаНаФайл, ВременныйКаталог + "Model.zip", Ложь);*/
			/*ФайлМакета = Новый ЧтениеZipФайла();*/
			/*ФайлМакета.Открыть(ВременныйКаталог + "Model.zip");*/
			/*ВременныйКаталог = ВременныйКаталог + "Model\";*/
			/*// Удаление всех временных файлов после работы
*/
			/*ВременныйКаталог = СтрЗаменить(ВременныйКаталог, "Model\", "");*/
			/*Попытка
		УдалитьФайлы(ВременныйКаталог + "Model.zip");*/
			/*Исключение
	КонецПопытки;*/
		}
		// Получение объекта драйвера.
		//

		public object ПолучитьОбъектДрайвера(/*ДрайверУстройства*/)
		{
			/*ОбъектДрайвера = Неопределено;*/
			if(true/*ОбъектДрайвера = Неопределено*/)
			{
				/*// Сканеры штрихкода/Считыватели магнитных карт
*/
				if(true/*ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода") 
			 Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКарт")*/)
				{
					/*#Если ВебКлиент Тогда
					ПодключитьВнешнююКомпоненту("ОбщийМакет.Драйвер1ССканерШтрихкода", "Сканер");*/
					/*ОбъектДрайвера = Новый ("AddIn.Сканер.Scanner");*/
					/*#Иначе
					ProgID = "AddIn.Scanner";*/
					/*ПодключитьВнешнююКомпоненту(ProgID);*/
					/*ОбъектДрайвера = Новый (ProgID);*/
					/*#КонецЕсли;*/
				}
				/*Исключение
		КонецПопытки;*/
			}
			if(true/*ОбъектДрайвера <> Неопределено*/)
			{
				/*глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования.Вставить(ДрайверУстройства, ОбъектДрайвера);*/
				/*ОбъектДрайвера = глПодключаемоеОборудование.ДрайвераПодключаемогоОборудования[ДрайверУстройства];*/
			}
			return null;
		}
		// Установка из макета драйвера устройства.
		//

		public void УстановитьДрайвер(/*Идентификатор*/)
		{
			/*ДанныеОборудования = МенеджерОборудованияСервер.ПолучитьДанныеУстройства(Идентификатор);*/
			/*ДрайверУстройства = ДанныеОборудования.ОбработчикДрайвера;*/
			/*// Сканеры штрихкода/Считыватели магнитных карт
*/
			if(true/*ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССканерыШтрихкода")   
		 Или ДрайверУстройства = ПредопределенноеЗначение("Перечисление.ОбработчикиДрайверовПодключаемогоОборудования.Обработчик1ССчитывателиМагнитныхКарт")*/)
			{
				/*#Если ВебКлиент Тогда
				УстановитьВнешнююКомпоненту("ОбщийМакет.Драйвер1ССканерШтрихкода");*/
				/*#Иначе
				УстановитьДрайверИзДистрибутива("Драйвер1ССканерШтрихкодаExe", "ScanOPOS.exe");*/
				/*#КонецЕсли;*/
			}
			/*Исключение
	КонецПопытки;*/
		}
	}
}

