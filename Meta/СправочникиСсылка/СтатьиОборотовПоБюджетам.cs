
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиСсылка
{
	///<summary>
	///(Упр)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class СтатьиОборотовПоБюджетам:СправочникСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("6b5a8962-cdd3-4e03-afb7-7cda5ebfdfa7");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191010.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public bool Предопределенный {get;set;}
		public Guid Родитель {get;set;}
		public bool ЭтоГруппа {get;set;}
		public string/*9*/ Код {get;set;}
		[DataMember(Name = "Представление")]//Проверить основное представление.
		[ProtoMember(3)]
		public string/*100*/ Наименование {get;set;}
		///<summary>
		///Полное наименование, например, для печати
		///</summary>
		public string/*(0)*/ НаименованиеПолное {get;set;}//Наименование полное
		///<summary>
		///Признак использования количественных оборотов
		///</summary>
		public bool УчетПоКоличеству {get;set;}//Учет по количеству
		///<summary>
		///Признак использования суммовых оборотов
		///</summary>
		public bool УчетПоСумме {get;set;}//Учет по сумме
		///<summary>
		///Источник данных для расчетов бюджетирования, ресурс которого будет использоваться для пересчета количественных оборотов по статье в суммовые
		///</summary>
		public V82.СправочникиСсылка.ИсточникиДанныхДляРасчетовБюджетирования ИсточникДанныхДляЦены {get;set;}//Источник данных для цены
		///<summary>
		///Показатель источника данных расчетов бюджетирования, который будет использоваться для пересчета количественного оборота по статье в суммовой
		///</summary>
		public string/*(50)*/ ПоказательИсточникаДанныхДляЦены {get;set;}//Показатель источника данных для цены
		public V82.СправочникиСсылка.ИсточникиДанныхДляРасчетовБюджетирования ИсточникДанныхДляФакта {get;set;}//Источник данных для факта
		///<summary>
		///Показатель источника данных расчетов бюджетирования, который будет использоваться для получения фактических данных
		///</summary>
		public string/*(100)*/ ПоказательИсточникаДанныхДляФактаСум {get;set;}//Показатель источника данных для факта сум
		///<summary>
		///Способ определения валюты оборота при получении фактических данных
		///</summary>
		public V82.Перечисления/*Ссылка*/.СпособыОпределенияВалютыОборотаПоСтатье СпособОпределенияВалютыОборотаФакт {get;set;}//Способ определения валюты оборота факт
		///<summary>
		///Показатель источника данных расчетов бюджетирования, который будет использоваться для получения фактических данных
		///</summary>
		public string/*(100)*/ ПоказательИсточникаДанныхДляФактаКол {get;set;}//Показатель источника данных для факта кол
		public V82.СправочникиСсылка.КлассификаторЕдиницИзмерения ЕдиницаИзмерения {get;set;}//Единица измерения
		///<summary>
		///Признак разделения оборотов по контрагентам
		///</summary>
		public bool РазделениеПоКонтрагентам {get;set;}//Разделение по контрагентам
		///<summary>
		///Признак разделения оборотов по ресурсам
		///</summary>
		public bool РазделениеПоНоменклатуре {get;set;}//Разделение по номенклатуре
		public V82.СправочникиСсылка.Валюты ОсновнаяВалюта {get;set;}//Основная валюта
		public V82.СправочникиСсылка.Подразделения ОсновноеЦФО {get;set;}//ЦФО по умолчанию
		public V82.СправочникиСсылка.Проекты ОсновнойПроект {get;set;}//Основной проект
		public V82.СправочникиСсылка.Контрагенты ОсновнойКонтрагент {get;set;}//Основной контрагент
		public object ОсновнаяНоменклатура {get;set;}//Основная номенклатура
		public string/*(0)*/ Комментарий {get;set;}
		public decimal/*(15.2)*/ КоэффициентДляФактаСум {get;set;}//Коэффициент для факта (сум)
		public decimal/*(15.2)*/ КоэффициентДляФактаКол {get;set;}//Коэффициент для факта (кол)
		
		public СтатьиОборотовПоБюджетам()
		{
		}
		
		public СтатьиОборотовПоБюджетам(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_IsMetadata [Предопределенный]
					,_Code [Код]
					,_Description [Наименование]
					,_Fld3816 [НаименованиеПолное]
					,_Fld3817 [УчетПоКоличеству]
					,_Fld3818 [УчетПоСумме]
					,_Fld3819RRef [ИсточникДанныхДляЦены]
					,_Fld3820 [ПоказательИсточникаДанныхДляЦены]
					,_Fld3821RRef [ИсточникДанныхДляФакта]
					,_Fld3822 [ПоказательИсточникаДанныхДляФактаСум]
					,_Fld3823RRef [СпособОпределенияВалютыОборотаФакт]
					,_Fld3824 [ПоказательИсточникаДанныхДляФактаКол]
					,_Fld3825RRef [ЕдиницаИзмерения]
					,_Fld3826 [РазделениеПоКонтрагентам]
					,_Fld3827 [РазделениеПоНоменклатуре]
					,_Fld3828RRef [ОсновнаяВалюта]
					,_Fld3829RRef [ОсновноеЦФО]
					,_Fld3830RRef [ОсновнойПроект]
					,_Fld3831RRef [ОсновнойКонтрагент]
					,_Fld3832_TYPE [ОсновнаяНоменклатура_Тип],_Fld3832_RRRef [ОсновнаяНоменклатура],_Fld3832_RTRef [ОсновнаяНоменклатура_Вид]
					,_Fld3833 [Комментарий]
					,_Fld3834 [КоэффициентДляФактаСум]
					,_Fld3835 [КоэффициентДляФактаКол]
					From _Reference249(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Предопределенный = ((byte[])Читалка.GetValue(3))[0]==1;
							Код = Читалка.GetString(4);
							Наименование = Читалка.GetString(5);
							НаименованиеПолное = Читалка.GetString(6);
							УчетПоКоличеству = ((byte[])Читалка.GetValue(7))[0]==1;
							УчетПоСумме = ((byte[])Читалка.GetValue(8))[0]==1;
							ИсточникДанныхДляЦены = new V82.СправочникиСсылка.ИсточникиДанныхДляРасчетовБюджетирования((byte[])Читалка.GetValue(9));
							ПоказательИсточникаДанныхДляЦены = Читалка.GetString(10);
							ИсточникДанныхДляФакта = new V82.СправочникиСсылка.ИсточникиДанныхДляРасчетовБюджетирования((byte[])Читалка.GetValue(11));
							ПоказательИсточникаДанныхДляФактаСум = Читалка.GetString(12);
							СпособОпределенияВалютыОборотаФакт = V82.Перечисления/*Ссылка*/.СпособыОпределенияВалютыОборотаПоСтатье.ПустаяСсылка.Получить((byte[])Читалка.GetValue(13));
							ПоказательИсточникаДанныхДляФактаКол = Читалка.GetString(14);
							ЕдиницаИзмерения = new V82.СправочникиСсылка.КлассификаторЕдиницИзмерения((byte[])Читалка.GetValue(15));
							РазделениеПоКонтрагентам = ((byte[])Читалка.GetValue(16))[0]==1;
							РазделениеПоНоменклатуре = ((byte[])Читалка.GetValue(17))[0]==1;
							ОсновнаяВалюта = new V82.СправочникиСсылка.Валюты((byte[])Читалка.GetValue(18));
							ОсновноеЦФО = new V82.СправочникиСсылка.Подразделения((byte[])Читалка.GetValue(19));
							ОсновнойПроект = new V82.СправочникиСсылка.Проекты((byte[])Читалка.GetValue(20));
							ОсновнойКонтрагент = new V82.СправочникиСсылка.Контрагенты((byte[])Читалка.GetValue(21));
							Комментарий = Читалка.GetString(25);
							КоэффициентДляФактаСум = Читалка.GetDecimal(26);
							КоэффициентДляФактаКол = Читалка.GetDecimal(27);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.СправочникиОбъект.СтатьиОборотовПоБюджетам  ПолучитьОбъект()
		{
			var Объект = new V82.СправочникиОбъект.СтатьиОборотовПоБюджетам();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Предопределенный = Предопределенный;
			Объект.Родитель = Родитель;
			Объект.ЭтоГруппа = ЭтоГруппа;
			Объект.Код = Код;
			Объект.Наименование = Наименование;
			Объект.НаименованиеПолное = НаименованиеПолное;
			Объект.УчетПоКоличеству = УчетПоКоличеству;
			Объект.УчетПоСумме = УчетПоСумме;
			Объект.ИсточникДанныхДляЦены = ИсточникДанныхДляЦены;
			Объект.ПоказательИсточникаДанныхДляЦены = ПоказательИсточникаДанныхДляЦены;
			Объект.ИсточникДанныхДляФакта = ИсточникДанныхДляФакта;
			Объект.ПоказательИсточникаДанныхДляФактаСум = ПоказательИсточникаДанныхДляФактаСум;
			Объект.СпособОпределенияВалютыОборотаФакт = СпособОпределенияВалютыОборотаФакт;
			Объект.ПоказательИсточникаДанныхДляФактаКол = ПоказательИсточникаДанныхДляФактаКол;
			Объект.ЕдиницаИзмерения = ЕдиницаИзмерения;
			Объект.РазделениеПоКонтрагентам = РазделениеПоКонтрагентам;
			Объект.РазделениеПоНоменклатуре = РазделениеПоНоменклатуре;
			Объект.ОсновнаяВалюта = ОсновнаяВалюта;
			Объект.ОсновноеЦФО = ОсновноеЦФО;
			Объект.ОсновнойПроект = ОсновнойПроект;
			Объект.ОсновнойКонтрагент = ОсновнойКонтрагент;
			Объект.ОсновнаяНоменклатура = ОсновнаяНоменклатура;
			Объект.Комментарий = Комментарий;
			Объект.КоэффициентДляФактаСум = КоэффициентДляФактаСум;
			Объект.КоэффициентДляФактаКол = КоэффициентДляФактаКол;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.СправочникиСсылка.СтатьиОборотовПоБюджетам ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.СправочникиСсылка.СтатьиОборотовПоБюджетам)Кэш[УИ];
			}
			var Ссылка = new V82.СправочникиСсылка.СтатьиОборотовПоБюджетам(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}