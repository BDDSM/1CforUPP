
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиСсылка
{
	///<summary>
	///Доверенности налогоплательщика на представителя
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ДоверенностиНалогоплательщика:СправочникСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("1d7957f5-e538-463a-b3ef-913e8125349c");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20120928011945.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public bool Предопределенный {get;set;}
		public Guid Владелец {get;set;}
		public string/*9*/ Код {get;set;}
		[DataMember(Name = "Представление")]//Проверить основное представление.
		[ProtoMember(3)]
		public string/*100*/ Наименование {get;set;}
		public string/*(50)*/ НомерДовер {get;set;}//Номер доверенности
		///<summary>
		///Дата выдачи доверенности
		///</summary>
		public DateTime ДатаВыдачи {get;set;}//Дата выдачи
		///<summary>
		///Дата окончания действия доверенности
		///</summary>
		public DateTime ДатаОкончания {get;set;}//Дата окончания
		public decimal/*(1)*/ ПризнакДоверителя {get;set;}//Признак доверителя
		public string/*(1000)*/ ДоверительЮЛ_НаимОрг {get;set;}//Наименование организации
		public string/*(10)*/ ДоверительЮЛ_ИНН {get;set;}//ИНН
		public string/*(9)*/ ДоверительЮЛ_КПП {get;set;}//КПП
		public string/*(13)*/ ДоверительЮЛ_ОГРН {get;set;}//ОГРН
		///<summary>
		///ИНН руководителя доверителя
		///</summary>
		public string/*(12)*/ ДоверительРук_ИНН {get;set;}//ИНН руководителя доверителя
		public string/*(12)*/ ДоверительФЛ_ИНН {get;set;}//ИНН
		public string/*(15)*/ ДоверительФЛ_ОГРН {get;set;}//ОГРН
		public V82.СправочникиСсылка.КлассификаторСтранМира ДоверительФЛ_Гражданство {get;set;}//Гражданство
		public DateTime ДоверительФЛ_ДатаРождения {get;set;}//ДатаРождения
		public string/*(1000)*/ ПредставительЮЛ_НаимОрг {get;set;}//Наименование организации
		public string/*(10)*/ ПредставительЮЛ_ИНН {get;set;}//ИНН
		public string/*(9)*/ ПредставительЮЛ_КПП {get;set;}//КПП
		public string/*(13)*/ ПредставительЮЛ_ОГРН {get;set;}//ОГРН
		public string/*(12)*/ ПредставительФЛ_ИНН {get;set;}//ИНН
		public string/*(15)*/ ПредставительФЛ_ОГРН {get;set;}//ОГРН
		public V82.СправочникиСсылка.КлассификаторСтранМира ПредставительФЛ_Гражданство {get;set;}//Гражданство
		public DateTime ПредставительФЛ_ДатаРождения {get;set;}//ДатаРождения
		public string/*(1000)*/ НотариусЮЛ_НаимОрг {get;set;}//Наименование организации
		public string/*(10)*/ НотариусЮЛ_ИНН {get;set;}//ИНН
		public string/*(9)*/ НотариусЮЛ_КПП {get;set;}//КПП
		public string/*(13)*/ НотариусЮЛ_ОГРН {get;set;}//ОГРН
		public string/*(12)*/ НотариусФЛ_ИНН {get;set;}//ИНН
		public bool ДоверительЯвляетсяЮЛ {get;set;}//Доверитель является ЮЛ
		public bool ПредставительЯвляетсяЮЛ {get;set;}//Представитель является ЮЛ
		public bool НотариусЯвляетсяЮЛ {get;set;}//Нотариус является ЮЛ
		public bool ЗаверенаНотариально {get;set;}//Заверена нотариально
		///<summary>
		///наличие уполномоченного лица у доверителя - юл
		///</summary>
		public bool ДоверительИмеетУЛ {get;set;}//Доверитель имеет УЛ
		public bool ПредставительЯвляетсяСотрудником {get;set;}//Представитель является сотрудником
		
		public ДоверенностиНалогоплательщика()
		{
		}
		
		public ДоверенностиНалогоплательщика(byte[] УникальныйИдентификатор)
			: this(УникальныйИдентификатор,0)
		{
		}
		
		public ДоверенностиНалогоплательщика(byte[] УникальныйИдентификатор,int Глубина)
		{
			if (Глубина>3)
			{
				return;
			}
			if (new Guid(УникальныйИдентификатор) == Guid.Empty)
			{
				return;
			}
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_IsMetadata [Предопределенный]
					,_Code [Код]
					,_Description [Наименование]
					,_Fld23393 [НомерДовер]
					,_Fld23394 [ДатаВыдачи]
					,_Fld23395 [ДатаОкончания]
					,_Fld23396 [ПризнакДоверителя]
					,_Fld23397 [ДоверительЮЛ_НаимОрг]
					,_Fld23398 [ДоверительЮЛ_ИНН]
					,_Fld23399 [ДоверительЮЛ_КПП]
					,_Fld23400 [ДоверительЮЛ_ОГРН]
					,_Fld23401 [ДоверительРук_ИНН]
					,_Fld23402 [ДоверительФЛ_ИНН]
					,_Fld23403 [ДоверительФЛ_ОГРН]
					,_Fld23404RRef [ДоверительФЛ_Гражданство]
					,_Fld23405 [ДоверительФЛ_ДатаРождения]
					,_Fld23406 [ПредставительЮЛ_НаимОрг]
					,_Fld23407 [ПредставительЮЛ_ИНН]
					,_Fld23408 [ПредставительЮЛ_КПП]
					,_Fld23409 [ПредставительЮЛ_ОГРН]
					,_Fld23410 [ПредставительФЛ_ИНН]
					,_Fld23411 [ПредставительФЛ_ОГРН]
					,_Fld23412RRef [ПредставительФЛ_Гражданство]
					,_Fld23413 [ПредставительФЛ_ДатаРождения]
					,_Fld23414 [НотариусЮЛ_НаимОрг]
					,_Fld23415 [НотариусЮЛ_ИНН]
					,_Fld23416 [НотариусЮЛ_КПП]
					,_Fld23417 [НотариусЮЛ_ОГРН]
					,_Fld23418 [НотариусФЛ_ИНН]
					,_Fld23419 [ДоверительЯвляетсяЮЛ]
					,_Fld23420 [ПредставительЯвляетсяЮЛ]
					,_Fld23421 [НотариусЯвляетсяЮЛ]
					,_Fld23422 [ЗаверенаНотариально]
					,_Fld23423 [ДоверительИмеетУЛ]
					,_Fld23424 [ПредставительЯвляетсяСотрудником]
					From _Reference23095(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор  ";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Предопределенный = ((byte[])Читалка.GetValue(3))[0]==1;
							Код = Читалка.GetString(4);
							Наименование = Читалка.GetString(5);
								НомерДовер = Читалка.GetString(6);
								ДатаВыдачи = Читалка.GetDateTime(7);
								ДатаОкончания = Читалка.GetDateTime(8);
								ПризнакДоверителя = Читалка.GetDecimal(9);
								ДоверительЮЛ_НаимОрг = Читалка.GetString(10);
								ДоверительЮЛ_ИНН = Читалка.GetString(11);
								ДоверительЮЛ_КПП = Читалка.GetString(12);
								ДоверительЮЛ_ОГРН = Читалка.GetString(13);
								ДоверительРук_ИНН = Читалка.GetString(14);
								ДоверительФЛ_ИНН = Читалка.GetString(15);
								ДоверительФЛ_ОГРН = Читалка.GetString(16);
								ДоверительФЛ_Гражданство = new V82.СправочникиСсылка.КлассификаторСтранМира((byte[])Читалка.GetValue(17),Глубина+1);
								ДоверительФЛ_ДатаРождения = Читалка.GetDateTime(18);
								ПредставительЮЛ_НаимОрг = Читалка.GetString(19);
								ПредставительЮЛ_ИНН = Читалка.GetString(20);
								ПредставительЮЛ_КПП = Читалка.GetString(21);
								ПредставительЮЛ_ОГРН = Читалка.GetString(22);
								ПредставительФЛ_ИНН = Читалка.GetString(23);
								ПредставительФЛ_ОГРН = Читалка.GetString(24);
								ПредставительФЛ_Гражданство = new V82.СправочникиСсылка.КлассификаторСтранМира((byte[])Читалка.GetValue(25),Глубина+1);
								ПредставительФЛ_ДатаРождения = Читалка.GetDateTime(26);
								НотариусЮЛ_НаимОрг = Читалка.GetString(27);
								НотариусЮЛ_ИНН = Читалка.GetString(28);
								НотариусЮЛ_КПП = Читалка.GetString(29);
								НотариусЮЛ_ОГРН = Читалка.GetString(30);
								НотариусФЛ_ИНН = Читалка.GetString(31);
								ДоверительЯвляетсяЮЛ = ((byte[])Читалка.GetValue(32))[0]==1;
								ПредставительЯвляетсяЮЛ = ((byte[])Читалка.GetValue(33))[0]==1;
								НотариусЯвляетсяЮЛ = ((byte[])Читалка.GetValue(34))[0]==1;
								ЗаверенаНотариально = ((byte[])Читалка.GetValue(35))[0]==1;
								ДоверительИмеетУЛ = ((byte[])Читалка.GetValue(36))[0]==1;
								ПредставительЯвляетсяСотрудником = ((byte[])Читалка.GetValue(37))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.СправочникиОбъект.ДоверенностиНалогоплательщика  ПолучитьОбъект()
		{
			var Объект = new V82.СправочникиОбъект.ДоверенностиНалогоплательщика();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Предопределенный = Предопределенный;
			Объект.Владелец = Владелец;
			Объект.Код = Код;
			Объект.Наименование = Наименование;
			Объект.НомерДовер = НомерДовер;
			Объект.ДатаВыдачи = ДатаВыдачи;
			Объект.ДатаОкончания = ДатаОкончания;
			Объект.ПризнакДоверителя = ПризнакДоверителя;
			Объект.ДоверительЮЛ_НаимОрг = ДоверительЮЛ_НаимОрг;
			Объект.ДоверительЮЛ_ИНН = ДоверительЮЛ_ИНН;
			Объект.ДоверительЮЛ_КПП = ДоверительЮЛ_КПП;
			Объект.ДоверительЮЛ_ОГРН = ДоверительЮЛ_ОГРН;
			Объект.ДоверительРук_ИНН = ДоверительРук_ИНН;
			Объект.ДоверительФЛ_ИНН = ДоверительФЛ_ИНН;
			Объект.ДоверительФЛ_ОГРН = ДоверительФЛ_ОГРН;
			Объект.ДоверительФЛ_Гражданство = ДоверительФЛ_Гражданство;
			Объект.ДоверительФЛ_ДатаРождения = ДоверительФЛ_ДатаРождения;
			Объект.ПредставительЮЛ_НаимОрг = ПредставительЮЛ_НаимОрг;
			Объект.ПредставительЮЛ_ИНН = ПредставительЮЛ_ИНН;
			Объект.ПредставительЮЛ_КПП = ПредставительЮЛ_КПП;
			Объект.ПредставительЮЛ_ОГРН = ПредставительЮЛ_ОГРН;
			Объект.ПредставительФЛ_ИНН = ПредставительФЛ_ИНН;
			Объект.ПредставительФЛ_ОГРН = ПредставительФЛ_ОГРН;
			Объект.ПредставительФЛ_Гражданство = ПредставительФЛ_Гражданство;
			Объект.ПредставительФЛ_ДатаРождения = ПредставительФЛ_ДатаРождения;
			Объект.НотариусЮЛ_НаимОрг = НотариусЮЛ_НаимОрг;
			Объект.НотариусЮЛ_ИНН = НотариусЮЛ_ИНН;
			Объект.НотариусЮЛ_КПП = НотариусЮЛ_КПП;
			Объект.НотариусЮЛ_ОГРН = НотариусЮЛ_ОГРН;
			Объект.НотариусФЛ_ИНН = НотариусФЛ_ИНН;
			Объект.ДоверительЯвляетсяЮЛ = ДоверительЯвляетсяЮЛ;
			Объект.ПредставительЯвляетсяЮЛ = ПредставительЯвляетсяЮЛ;
			Объект.НотариусЯвляетсяЮЛ = НотариусЯвляетсяЮЛ;
			Объект.ЗаверенаНотариально = ЗаверенаНотариально;
			Объект.ДоверительИмеетУЛ = ДоверительИмеетУЛ;
			Объект.ПредставительЯвляетсяСотрудником = ПредставительЯвляетсяСотрудником;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.СправочникиСсылка.ДоверенностиНалогоплательщика ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.СправочникиСсылка.ДоверенностиНалогоплательщика)Кэш[УИ];
			}
			var Ссылка = new V82.СправочникиСсылка.ДоверенностиНалогоплательщика(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}