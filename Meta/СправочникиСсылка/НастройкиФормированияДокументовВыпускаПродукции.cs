
using System;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиСсылка
{
	///<summary>
	///Настройки формирования документов выпуска продукции по данным подсистемы "Оперативный учет производства"
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class НастройкиФормированияДокументовВыпускаПродукции:СправочникСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("2fdcecb7-ce58-4214-8de4-96723168ac5d");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191903.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public bool Предопределенный {get;set;}
		public Guid Родитель {get;set;}
		public bool ЭтоГруппа {get;set;}
		[DataMember(Name = "Представление")]//Проверить основное представление.
		[ProtoMember(3)]
		public string/*70*/ Наименование {get;set;}
		///<summary>
		///Дата, по которую учтены данные в сформированных документах
		///</summary>
		public DateTime ГраницаОбработки {get;set;}//Граница обработки
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		public V82.Перечисления/*Ссылка*/.Периодичность ПериодДетализации {get;set;}//Период детализации
		public string/*(50)*/ ВидРегулярногоДокумента {get;set;}//Вид регулярного документа
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		public V82.СправочникиСсылка.ПодразделенияОрганизаций ПодразделениеОрганизации {get;set;}//Подразделение организации
		public V82.СправочникиСсылка.Склады Склад {get;set;}
		public bool ОтражатьВУправленческомУчете {get;set;}//Отражать в управленческом учете
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		public bool ОтразитьВыпуск {get;set;}//Отразить выпуск
		public bool ОтразитьМатериалы {get;set;}//Отразить материалы
		public bool НеОбрабатыватьПериодДоЗавершенияСмен {get;set;}//Не формировать документы за период, в котором есть незавершенные смены
		///<summary>
		///Формировать документы автоматически (регламентным заданием)
		///</summary>
		public bool ФормироватьДокументыАвтоматически {get;set;}//Формировать документы автоматически
		///<summary>
		///Уникальный идентификатор регламентного задания
		///</summary>
		public string/*(36)*/ РегламентноеЗадание {get;set;}//Регламентное задание
		///<summary>
		///Количество дней после окончания периода, по истечении которых формируются документы
		///</summary>
		public decimal/*(2)*/ Задержка {get;set;}
		public string/*(0)*/ Комментарий {get;set;}
		public bool НеОбрабатыватьВсеДокументы {get;set;}//Не обрабатывать все документы
		
		public НастройкиФормированияДокументовВыпускаПродукции()
		{
		}
		
		public НастройкиФормированияДокументовВыпускаПродукции(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_IsMetadata [Предопределенный]
					,_Description [Наименование]
					,_Fld2850 [ГраницаОбработки]
					,_Fld2851RRef [Подразделение]
					,_Fld2852RRef [ПериодДетализации]
					,_Fld2853 [ВидРегулярногоДокумента]
					,_Fld2854RRef [Организация]
					,_Fld2855RRef [ПодразделениеОрганизации]
					,_Fld2856RRef [Склад]
					,_Fld2857 [ОтражатьВУправленческомУчете]
					,_Fld2858 [ОтражатьВБухгалтерскомУчете]
					,_Fld2859 [ОтражатьВНалоговомУчете]
					,_Fld2860 [ОтразитьВыпуск]
					,_Fld2861 [ОтразитьМатериалы]
					,_Fld2862 [НеОбрабатыватьПериодДоЗавершенияСмен]
					,_Fld2863 [ФормироватьДокументыАвтоматически]
					,_Fld2864 [РегламентноеЗадание]
					,_Fld2865 [Задержка]
					,_Fld2866 [Комментарий]
					,_Fld2867 [НеОбрабатыватьВсеДокументы]
					From _Reference158(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Предопределенный = ((byte[])Читалка.GetValue(3))[0]==1;
							Наименование = Читалка.GetString(4);
							ГраницаОбработки = Читалка.GetDateTime(5);
							Подразделение = new V82.СправочникиСсылка.Подразделения((byte[])Читалка.GetValue(6));
							ПериодДетализации = V82.Перечисления/*Ссылка*/.Периодичность.ПустаяСсылка.Получить((byte[])Читалка.GetValue(7));
							ВидРегулярногоДокумента = Читалка.GetString(8);
							Организация = new V82.СправочникиСсылка.Организации((byte[])Читалка.GetValue(9));
							ПодразделениеОрганизации = new V82.СправочникиСсылка.ПодразделенияОрганизаций((byte[])Читалка.GetValue(10));
							Склад = new V82.СправочникиСсылка.Склады((byte[])Читалка.GetValue(11));
							ОтражатьВУправленческомУчете = ((byte[])Читалка.GetValue(12))[0]==1;
							ОтражатьВБухгалтерскомУчете = ((byte[])Читалка.GetValue(13))[0]==1;
							ОтражатьВНалоговомУчете = ((byte[])Читалка.GetValue(14))[0]==1;
							ОтразитьВыпуск = ((byte[])Читалка.GetValue(15))[0]==1;
							ОтразитьМатериалы = ((byte[])Читалка.GetValue(16))[0]==1;
							НеОбрабатыватьПериодДоЗавершенияСмен = ((byte[])Читалка.GetValue(17))[0]==1;
							ФормироватьДокументыАвтоматически = ((byte[])Читалка.GetValue(18))[0]==1;
							РегламентноеЗадание = Читалка.GetString(19);
							Задержка = Читалка.GetDecimal(20);
							Комментарий = Читалка.GetString(21);
							НеОбрабатыватьВсеДокументы = ((byte[])Читалка.GetValue(22))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.СправочникиОбъект.НастройкиФормированияДокументовВыпускаПродукции  ПолучитьОбъект()
		{
			var Объект = new V82.СправочникиОбъект.НастройкиФормированияДокументовВыпускаПродукции();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Предопределенный = Предопределенный;
			Объект.Родитель = Родитель;
			Объект.ЭтоГруппа = ЭтоГруппа;
			Объект.Наименование = Наименование;
			Объект.ГраницаОбработки = ГраницаОбработки;
			Объект.Подразделение = Подразделение;
			Объект.ПериодДетализации = ПериодДетализации;
			Объект.ВидРегулярногоДокумента = ВидРегулярногоДокумента;
			Объект.Организация = Организация;
			Объект.ПодразделениеОрганизации = ПодразделениеОрганизации;
			Объект.Склад = Склад;
			Объект.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
			Объект.ОтражатьВБухгалтерскомУчете = ОтражатьВБухгалтерскомУчете;
			Объект.ОтражатьВНалоговомУчете = ОтражатьВНалоговомУчете;
			Объект.ОтразитьВыпуск = ОтразитьВыпуск;
			Объект.ОтразитьМатериалы = ОтразитьМатериалы;
			Объект.НеОбрабатыватьПериодДоЗавершенияСмен = НеОбрабатыватьПериодДоЗавершенияСмен;
			Объект.ФормироватьДокументыАвтоматически = ФормироватьДокументыАвтоматически;
			Объект.РегламентноеЗадание = РегламентноеЗадание;
			Объект.Задержка = Задержка;
			Объект.Комментарий = Комментарий;
			Объект.НеОбрабатыватьВсеДокументы = НеОбрабатыватьВсеДокументы;
			return Объект;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}