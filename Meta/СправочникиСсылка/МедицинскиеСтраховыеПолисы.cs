
using System;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиСсылка
{
	[ProtoContract]
	[DataContract]
	public partial class МедицинскиеСтраховыеПолисы:СправочникСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("be04091e-2e71-4a2a-9dc2-912b8acc2caa");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191911.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public bool Предопределенный {get;set;}
		public string/*9*/ Код {get;set;}
		[DataMember(Name = "Представление")]//Проверить основное представление.
		[ProtoMember(3)]
		public string/*25*/ Наименование {get;set;}
		public V82.СправочникиСсылка.ФизическиеЛица Физлицо {get;set;}
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		public V82.Перечисления/*Ссылка*/.ВидыМедицинскогоСтрахования ВидСтрахования {get;set;}//Вид страхования
		public DateTime ДатаВыдачиПолиса {get;set;}//Дата выдачи полиса
		public DateTime ДатаОкончанияПолиса {get;set;}//Дата окончания полиса
		public V82.СправочникиСсылка.ПрограммыМедицинскогоСтрахования ПрограммаСтрахования {get;set;}//Программа страхования
		public bool СтрахованиеРодственника {get;set;}//Страхование родственника
		public string/*(50)*/ Родственник {get;set;}
		public V82.Перечисления/*Ссылка*/.ПолФизическихЛиц Пол {get;set;}
		public DateTime ДатаРождения {get;set;}//Дата рождения
		public string/*(300)*/ УдостоверениеЛичности {get;set;}//Удостоверение личности
		public string/*(100)*/ АдресФактический {get;set;}//Адрес фактический
		public string/*(100)*/ ТелефонДомашний {get;set;}//Телефон домашний
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ДокументыУдостоверяющиеЛичность ДокументВид {get;set;}//Вид документа
		///<summary>
		///(Общ)
		///</summary>
		public string/*(14)*/ ДокументСерия {get;set;}//Серия документа
		///<summary>
		///(Общ)
		///</summary>
		public string/*(14)*/ ДокументНомер {get;set;}//Номер документа
		///<summary>
		///(Общ)
		///</summary>
		public DateTime ДокументДатаВыдачи {get;set;}//Дата выдачи документа
		///<summary>
		///(Общ)
		///</summary>
		public string/*(0)*/ ДокументКемВыдан {get;set;}//Кем выдан документ
		///<summary>
		///(Регл)
		///</summary>
		public string/*(15)*/ ДокументКодПодразделения {get;set;}//Код подразделения в документе
		public string/*(0)*/ Комментарий {get;set;}
		
		public МедицинскиеСтраховыеПолисы()
		{
		}
		
		public МедицинскиеСтраховыеПолисы(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_IsMetadata [Предопределенный]
					,_Code [Код]
					,_Description [Наименование]
					,_Fld2539RRef [Физлицо]
					,_Fld2540RRef [Организация]
					,_Fld2541RRef [ВидСтрахования]
					,_Fld2542 [ДатаВыдачиПолиса]
					,_Fld2543 [ДатаОкончанияПолиса]
					,_Fld2544RRef [ПрограммаСтрахования]
					,_Fld2545 [СтрахованиеРодственника]
					,_Fld2546 [Родственник]
					,_Fld2547RRef [Пол]
					,_Fld2548 [ДатаРождения]
					,_Fld2549 [УдостоверениеЛичности]
					,_Fld2550 [АдресФактический]
					,_Fld2551 [ТелефонДомашний]
					,_Fld2552RRef [ДокументВид]
					,_Fld2553 [ДокументСерия]
					,_Fld2554 [ДокументНомер]
					,_Fld2555 [ДокументДатаВыдачи]
					,_Fld2556 [ДокументКемВыдан]
					,_Fld2557 [ДокументКодПодразделения]
					,_Fld2558 [Комментарий]
					From _Reference136(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Предопределенный = ((byte[])Читалка.GetValue(3))[0]==1;
							Код = Читалка.GetString(4);
							Наименование = Читалка.GetString(5);
							Физлицо = new V82.СправочникиСсылка.ФизическиеЛица((byte[])Читалка.GetValue(6));
							Организация = new V82.СправочникиСсылка.Организации((byte[])Читалка.GetValue(7));
							ВидСтрахования = V82.Перечисления/*Ссылка*/.ВидыМедицинскогоСтрахования.ПустаяСсылка.Получить((byte[])Читалка.GetValue(8));
							ДатаВыдачиПолиса = Читалка.GetDateTime(9);
							ДатаОкончанияПолиса = Читалка.GetDateTime(10);
							ПрограммаСтрахования = new V82.СправочникиСсылка.ПрограммыМедицинскогоСтрахования((byte[])Читалка.GetValue(11));
							СтрахованиеРодственника = ((byte[])Читалка.GetValue(12))[0]==1;
							Родственник = Читалка.GetString(13);
							Пол = V82.Перечисления/*Ссылка*/.ПолФизическихЛиц.ПустаяСсылка.Получить((byte[])Читалка.GetValue(14));
							ДатаРождения = Читалка.GetDateTime(15);
							УдостоверениеЛичности = Читалка.GetString(16);
							АдресФактический = Читалка.GetString(17);
							ТелефонДомашний = Читалка.GetString(18);
							ДокументВид = new V82.СправочникиСсылка.ДокументыУдостоверяющиеЛичность((byte[])Читалка.GetValue(19));
							ДокументСерия = Читалка.GetString(20);
							ДокументНомер = Читалка.GetString(21);
							ДокументДатаВыдачи = Читалка.GetDateTime(22);
							ДокументКемВыдан = Читалка.GetString(23);
							ДокументКодПодразделения = Читалка.GetString(24);
							Комментарий = Читалка.GetString(25);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.СправочникиОбъект.МедицинскиеСтраховыеПолисы  ПолучитьОбъект()
		{
			var Объект = new V82.СправочникиОбъект.МедицинскиеСтраховыеПолисы();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Предопределенный = Предопределенный;
			Объект.Код = Код;
			Объект.Наименование = Наименование;
			Объект.Физлицо = Физлицо;
			Объект.Организация = Организация;
			Объект.ВидСтрахования = ВидСтрахования;
			Объект.ДатаВыдачиПолиса = ДатаВыдачиПолиса;
			Объект.ДатаОкончанияПолиса = ДатаОкончанияПолиса;
			Объект.ПрограммаСтрахования = ПрограммаСтрахования;
			Объект.СтрахованиеРодственника = СтрахованиеРодственника;
			Объект.Родственник = Родственник;
			Объект.Пол = Пол;
			Объект.ДатаРождения = ДатаРождения;
			Объект.УдостоверениеЛичности = УдостоверениеЛичности;
			Объект.АдресФактический = АдресФактический;
			Объект.ТелефонДомашний = ТелефонДомашний;
			Объект.ДокументВид = ДокументВид;
			Объект.ДокументСерия = ДокументСерия;
			Объект.ДокументНомер = ДокументНомер;
			Объект.ДокументДатаВыдачи = ДокументДатаВыдачи;
			Объект.ДокументКемВыдан = ДокументКемВыдан;
			Объект.ДокументКодПодразделения = ДокументКодПодразделения;
			Объект.Комментарий = Комментарий;
			return Объект;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}