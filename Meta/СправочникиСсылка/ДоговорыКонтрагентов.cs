
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиСсылка
{
	///<summary>
	///(Общ)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ДоговорыКонтрагентов:СправочникСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("f77d42e4-148c-4450-ad6a-47b092128306");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191916.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public bool Предопределенный {get;set;}
		public Guid Владелец {get;set;}
		public Guid Родитель {get;set;}
		public bool ЭтоГруппа {get;set;}
		public string/*9*/ Код {get;set;}
		[DataMember(Name = "Представление")]//Проверить основное представление.
		[ProtoMember(3)]
		public string/*50*/ Наименование {get;set;}
		///<summary>
		///(Общ) Определяет валюту взаиморасчетов по договору, не может меняться, если по договору проведен хотя бы один документ
		///</summary>
		public V82.СправочникиСсылка.Валюты ВалютаВзаиморасчетов {get;set;}//Валюта взаиморасчетов
		///<summary>
		///(Общ)
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВедениеВзаиморасчетовПоДоговорам ВедениеВзаиморасчетов {get;set;}//Ведение взаиморасчетов
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///(Упр) 
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВидыУсловийДоговоровВзаиморасчетов ВидУсловийДоговора {get;set;}//Вид условий договора
		///<summary>
		///(Упр) Держать резерв без оплаты ограниченное/неограниченное время
		///</summary>
		public bool ДержатьРезервБезОплатыОграниченноеВремя {get;set;}//Держать резерв без оплаты ограниченное время
		///<summary>
		///(Упр) 
		///</summary>
		public decimal/*(15.2)*/ ДопустимаяСуммаЗадолженности {get;set;}//Допустимая сумма дебиторской задолженности
		///<summary>
		///(Упр) 
		///</summary>
		public decimal/*(10)*/ ДопустимоеЧислоДнейЗадолженности {get;set;}//Допустимое число дней дебиторской задолженности
		///<summary>
		///(Общ) 
		///</summary>
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		///<summary>
		///(Упр) 
		///</summary>
		public bool КонтролироватьСуммуЗадолженности {get;set;}//Контролировать сумму дебиторской задолженности
		///<summary>
		///(Упр) 
		///</summary>
		public bool КонтролироватьЧислоДнейЗадолженности {get;set;}//Контролировать число дней дебиторской задолженности
		///<summary>
		///(Общ) Обособленный партионный учет Товаров по заказам покупателей
		///</summary>
		public bool ОбособленныйУчетТоваровПоЗаказамПокупателей {get;set;}//Обособленный учет Товаров по заказам покупателей
		///<summary>
		///(Общ) 
		///</summary>
		public decimal/*(5.2)*/ ПроцентКомиссионногоВознаграждения {get;set;}//Процент комиссионного вознаграждения
		///<summary>
		///(Общ) 
		///</summary>
		public V82.Перечисления/*Ссылка*/.СпособыРасчетаКомиссионногоВознаграждения СпособРасчетаКомиссионногоВознаграждения {get;set;}//Способ расчета комиссионного вознаграждения
		///<summary>
		///(Упр) 
		///</summary>
		public decimal/*(5.2)*/ ПроцентПредоплаты {get;set;}//Процент предоплаты
		///<summary>
		///(Общ) Тип цен по умолчанию для оформления покупок по данному договору
		///</summary>
		public object ТипЦен {get;set;}//Тип цен
		///<summary>
		///(Общ)
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВидыДоговоровКонтрагентов ВидДоговора {get;set;}//Вид договора
		///<summary>
		///(Упр) Если 0, то неограничено
		///</summary>
		public decimal/*(10)*/ ЧислоДнейРезерваБезОплаты {get;set;}//Число дней резерва без оплаты
		///<summary>
		///Признак того что в данном договоре организация выступает в качестве налогового агента
		///</summary>
		public bool УчетАгентскогоНДС {get;set;}//Учет агентского НДС
		///<summary>
		///Разновидность договора с обязанностью оплаты организацией НДС в качестве налогового агента 
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВидыАгентскихДоговоров ВидАгентскогоДоговора {get;set;}//Вид агентского договора
		///<summary>
		///(Регл)
		///</summary>
		public bool РасчетыВУсловныхЕдиницах {get;set;}//Расчеты в условных единицах
		public bool КонтролироватьДенежныеСредстваКомитента {get;set;}//Контролировать денежные средства комитента
		public bool РеализацияНаЭкспорт {get;set;}//Реализация на экспорт
		public DateTime Дата {get;set;}
		public string/*(20)*/ Номер {get;set;}
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.ВидыВзаиморасчетов ВидВзаиморасчетов {get;set;}//Вид взаиморасчетов
		public bool ВестиПоДокументамРасчетовСКонтрагентом {get;set;}//Вести по документам расчетов с контрагентом
		public object ОсновнойПроект {get;set;}//Основной проект
		public V82.СправочникиСсылка.СтатьиДвиженияДенежныхСредств ОсновнаяСтатьяДвиженияДенежныхСредств {get;set;}//Основная статья движения денежных средств
		public DateTime СрокДействия {get;set;}//Срок действия договора
		public V82.СправочникиСсылка.Номенклатура НаименованиеДляСчетаФактурыНаАванс {get;set;}//Обобщенное наименование товаров для счета-фактуры на аванс
		public V82.Перечисления/*Ссылка*/.ПорядокРегистрацииСчетовФактурНаАванс ПорядокРегистрацииСчетовФактурНаАвансПоДоговору {get;set;}//Порядок регистрации счетов-фактур на аванс по договору
		public bool НалоговыйАгентПоОплате {get;set;}//НДС при исполнении обязанностей налогового агента начисляется по оплате
		///<summary>
		///Если не установлен, для контроля просроченной задолженности используется срок из учетной политики организации
		///</summary>
		public bool УстановленСрокОплатыДляРезервовПоСомнительнымДолгам {get;set;}//Установлен срок оплаты для резервов по сомнительным долгам
		///<summary>
		///Срок в днях, после которого долг считается просроченным
		///</summary>
		public decimal/*(5)*/ СрокОплатыДляРезервовПоСомнительнымДолгам {get;set;}//Срок оплаты для резервов по сомнительным долгам
		
		public ДоговорыКонтрагентов()
		{
		}
		
		public ДоговорыКонтрагентов(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_IsMetadata [Предопределенный]
					,_Code [Код]
					,_Description [Наименование]
					,_Fld2200RRef [ВалютаВзаиморасчетов]
					,_Fld2201RRef [ВедениеВзаиморасчетов]
					,_Fld2202 [Комментарий]
					,_Fld2203RRef [ВидУсловийДоговора]
					,_Fld2204 [ДержатьРезервБезОплатыОграниченноеВремя]
					,_Fld2205 [ДопустимаяСуммаЗадолженности]
					,_Fld2206 [ДопустимоеЧислоДнейЗадолженности]
					,_Fld2207RRef [Организация]
					,_Fld2208 [КонтролироватьСуммуЗадолженности]
					,_Fld2209 [КонтролироватьЧислоДнейЗадолженности]
					,_Fld2210 [ОбособленныйУчетТоваровПоЗаказамПокупателей]
					,_Fld2211 [ПроцентКомиссионногоВознаграждения]
					,_Fld2212RRef [СпособРасчетаКомиссионногоВознаграждения]
					,_Fld2213 [ПроцентПредоплаты]
					,_Fld2214_TYPE [ТипЦен_Тип],_Fld2214_RRRef [ТипЦен],_Fld2214_RTRef [ТипЦен_Вид]
					,_Fld2215RRef [ВидДоговора]
					,_Fld2216 [ЧислоДнейРезерваБезОплаты]
					,_Fld2217 [УчетАгентскогоНДС]
					,_Fld2218RRef [ВидАгентскогоДоговора]
					,_Fld2219 [РасчетыВУсловныхЕдиницах]
					,_Fld2220 [КонтролироватьДенежныеСредстваКомитента]
					,_Fld2221 [РеализацияНаЭкспорт]
					,_Fld2222 [Дата]
					,_Fld2223 [Номер]
					,_Fld2224RRef [ВидВзаиморасчетов]
					,_Fld2225 [ВестиПоДокументамРасчетовСКонтрагентом]
					,_Fld2226_TYPE [ОсновнойПроект_Тип],_Fld2226_RRRef [ОсновнойПроект],_Fld2226_RTRef [ОсновнойПроект_Вид]
					,_Fld2227RRef [ОсновнаяСтатьяДвиженияДенежныхСредств]
					,_Fld2228 [СрокДействия]
					,_Fld2229RRef [НаименованиеДляСчетаФактурыНаАванс]
					,_Fld2230RRef [ПорядокРегистрацииСчетовФактурНаАвансПоДоговору]
					,_Fld2231 [НалоговыйАгентПоОплате]
					,_Fld2232 [УстановленСрокОплатыДляРезервовПоСомнительнымДолгам]
					,_Fld2233 [СрокОплатыДляРезервовПоСомнительнымДолгам]
					From _Reference86(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Предопределенный = ((byte[])Читалка.GetValue(3))[0]==1;
							Код = Читалка.GetString(4);
							Наименование = Читалка.GetString(5);
							ВалютаВзаиморасчетов = new V82.СправочникиСсылка.Валюты((byte[])Читалка.GetValue(6));
							ВедениеВзаиморасчетов = V82.Перечисления/*Ссылка*/.ВедениеВзаиморасчетовПоДоговорам.ПустаяСсылка.Получить((byte[])Читалка.GetValue(7));
							Комментарий = Читалка.GetString(8);
							ВидУсловийДоговора = V82.Перечисления/*Ссылка*/.ВидыУсловийДоговоровВзаиморасчетов.ПустаяСсылка.Получить((byte[])Читалка.GetValue(9));
							ДержатьРезервБезОплатыОграниченноеВремя = ((byte[])Читалка.GetValue(10))[0]==1;
							ДопустимаяСуммаЗадолженности = Читалка.GetDecimal(11);
							ДопустимоеЧислоДнейЗадолженности = Читалка.GetDecimal(12);
							Организация = new V82.СправочникиСсылка.Организации((byte[])Читалка.GetValue(13));
							КонтролироватьСуммуЗадолженности = ((byte[])Читалка.GetValue(14))[0]==1;
							КонтролироватьЧислоДнейЗадолженности = ((byte[])Читалка.GetValue(15))[0]==1;
							ОбособленныйУчетТоваровПоЗаказамПокупателей = ((byte[])Читалка.GetValue(16))[0]==1;
							ПроцентКомиссионногоВознаграждения = Читалка.GetDecimal(17);
							СпособРасчетаКомиссионногоВознаграждения = V82.Перечисления/*Ссылка*/.СпособыРасчетаКомиссионногоВознаграждения.ПустаяСсылка.Получить((byte[])Читалка.GetValue(18));
							ПроцентПредоплаты = Читалка.GetDecimal(19);
							ВидДоговора = V82.Перечисления/*Ссылка*/.ВидыДоговоровКонтрагентов.ПустаяСсылка.Получить((byte[])Читалка.GetValue(23));
							ЧислоДнейРезерваБезОплаты = Читалка.GetDecimal(24);
							УчетАгентскогоНДС = ((byte[])Читалка.GetValue(25))[0]==1;
							ВидАгентскогоДоговора = V82.Перечисления/*Ссылка*/.ВидыАгентскихДоговоров.ПустаяСсылка.Получить((byte[])Читалка.GetValue(26));
							РасчетыВУсловныхЕдиницах = ((byte[])Читалка.GetValue(27))[0]==1;
							КонтролироватьДенежныеСредстваКомитента = ((byte[])Читалка.GetValue(28))[0]==1;
							РеализацияНаЭкспорт = ((byte[])Читалка.GetValue(29))[0]==1;
							Дата = Читалка.GetDateTime(30);
							Номер = Читалка.GetString(31);
							ВидВзаиморасчетов = new V82.СправочникиСсылка.ВидыВзаиморасчетов((byte[])Читалка.GetValue(32));
							ВестиПоДокументамРасчетовСКонтрагентом = ((byte[])Читалка.GetValue(33))[0]==1;
							ОсновнаяСтатьяДвиженияДенежныхСредств = new V82.СправочникиСсылка.СтатьиДвиженияДенежныхСредств((byte[])Читалка.GetValue(37));
							СрокДействия = Читалка.GetDateTime(38);
							НаименованиеДляСчетаФактурыНаАванс = new V82.СправочникиСсылка.Номенклатура((byte[])Читалка.GetValue(39));
							ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = V82.Перечисления/*Ссылка*/.ПорядокРегистрацииСчетовФактурНаАванс.ПустаяСсылка.Получить((byte[])Читалка.GetValue(40));
							НалоговыйАгентПоОплате = ((byte[])Читалка.GetValue(41))[0]==1;
							УстановленСрокОплатыДляРезервовПоСомнительнымДолгам = ((byte[])Читалка.GetValue(42))[0]==1;
							СрокОплатыДляРезервовПоСомнительнымДолгам = Читалка.GetDecimal(43);
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.СправочникиОбъект.ДоговорыКонтрагентов  ПолучитьОбъект()
		{
			var Объект = new V82.СправочникиОбъект.ДоговорыКонтрагентов();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Предопределенный = Предопределенный;
			Объект.Владелец = Владелец;
			Объект.Родитель = Родитель;
			Объект.ЭтоГруппа = ЭтоГруппа;
			Объект.Код = Код;
			Объект.Наименование = Наименование;
			Объект.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
			Объект.ВедениеВзаиморасчетов = ВедениеВзаиморасчетов;
			Объект.Комментарий = Комментарий;
			Объект.ВидУсловийДоговора = ВидУсловийДоговора;
			Объект.ДержатьРезервБезОплатыОграниченноеВремя = ДержатьРезервБезОплатыОграниченноеВремя;
			Объект.ДопустимаяСуммаЗадолженности = ДопустимаяСуммаЗадолженности;
			Объект.ДопустимоеЧислоДнейЗадолженности = ДопустимоеЧислоДнейЗадолженности;
			Объект.Организация = Организация;
			Объект.КонтролироватьСуммуЗадолженности = КонтролироватьСуммуЗадолженности;
			Объект.КонтролироватьЧислоДнейЗадолженности = КонтролироватьЧислоДнейЗадолженности;
			Объект.ОбособленныйУчетТоваровПоЗаказамПокупателей = ОбособленныйУчетТоваровПоЗаказамПокупателей;
			Объект.ПроцентКомиссионногоВознаграждения = ПроцентКомиссионногоВознаграждения;
			Объект.СпособРасчетаКомиссионногоВознаграждения = СпособРасчетаКомиссионногоВознаграждения;
			Объект.ПроцентПредоплаты = ПроцентПредоплаты;
			Объект.ТипЦен = ТипЦен;
			Объект.ВидДоговора = ВидДоговора;
			Объект.ЧислоДнейРезерваБезОплаты = ЧислоДнейРезерваБезОплаты;
			Объект.УчетАгентскогоНДС = УчетАгентскогоНДС;
			Объект.ВидАгентскогоДоговора = ВидАгентскогоДоговора;
			Объект.РасчетыВУсловныхЕдиницах = РасчетыВУсловныхЕдиницах;
			Объект.КонтролироватьДенежныеСредстваКомитента = КонтролироватьДенежныеСредстваКомитента;
			Объект.РеализацияНаЭкспорт = РеализацияНаЭкспорт;
			Объект.Дата = Дата;
			Объект.Номер = Номер;
			Объект.ВидВзаиморасчетов = ВидВзаиморасчетов;
			Объект.ВестиПоДокументамРасчетовСКонтрагентом = ВестиПоДокументамРасчетовСКонтрагентом;
			Объект.ОсновнойПроект = ОсновнойПроект;
			Объект.ОсновнаяСтатьяДвиженияДенежныхСредств = ОсновнаяСтатьяДвиженияДенежныхСредств;
			Объект.СрокДействия = СрокДействия;
			Объект.НаименованиеДляСчетаФактурыНаАванс = НаименованиеДляСчетаФактурыНаАванс;
			Объект.ПорядокРегистрацииСчетовФактурНаАвансПоДоговору = ПорядокРегистрацииСчетовФактурНаАвансПоДоговору;
			Объект.НалоговыйАгентПоОплате = НалоговыйАгентПоОплате;
			Объект.УстановленСрокОплатыДляРезервовПоСомнительнымДолгам = УстановленСрокОплатыДляРезервовПоСомнительнымДолгам;
			Объект.СрокОплатыДляРезервовПоСомнительнымДолгам = СрокОплатыДляРезервовПоСомнительнымДолгам;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.СправочникиСсылка.ДоговорыКонтрагентов ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.СправочникиСсылка.ДоговорыКонтрагентов)Кэш[УИ];
			}
			var Ссылка = new V82.СправочникиСсылка.ДоговорыКонтрагентов(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}