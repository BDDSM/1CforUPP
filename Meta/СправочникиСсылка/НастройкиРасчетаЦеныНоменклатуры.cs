
using System;
using System.Collections;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиСсылка
{
	[ProtoContract]
	[DataContract]
	public partial class НастройкиРасчетаЦеныНоменклатуры:СправочникСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("f0684db4-392b-4b73-90b7-d9ad544ecc4e");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191124.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public bool Предопределенный {get;set;}
		public Guid Родитель {get;set;}
		public bool ЭтоГруппа {get;set;}
		[DataMember(Name = "Представление")]//Проверить основное представление.
		[ProtoMember(3)]
		public string/*100*/ Наименование {get;set;}
		///<summary>
		///Формировать документы автоматически (регламентным заданием)
		///</summary>
		public bool ФормироватьДокументыАвтоматически {get;set;}//Формировать документы автоматически
		///<summary>
		///Уникальный идентификатор регламентного задания
		///</summary>
		public string/*(36)*/ РегламентноеЗадание {get;set;}//Регламентное задание
		public ХранилищеЗначения НастройкиКомпоновщика {get;set;}//Настройки компоновщика
		public V82.СправочникиСсылка.ТипыЦенНоменклатуры ТипЦен {get;set;}//Тип цен
		public V82.Перечисления/*Ссылка*/.ВидыОтраженияВУчете ВидОтраженияВУчете {get;set;}//Использовать данные
		public decimal/*(1)*/ ПорядокФормированияЦены {get;set;}//Порядок формирования цены
		public string/*(0)*/ Комментарий {get;set;}
		public V82.СправочникиСсылка.НастройкиРасчетаСебестоимости НастройкаРасчетаСебестоимости {get;set;}//Настройка расчета себестоимости
		public bool СоздаватьНовыйДокумент {get;set;}//Создавать новый документ
		
		public НастройкиРасчетаЦеныНоменклатуры()
		{
		}
		
		public НастройкиРасчетаЦеныНоменклатуры(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_IsMetadata [Предопределенный]
					,_Description [Наименование]
					,_Fld2835 [ФормироватьДокументыАвтоматически]
					,_Fld2836 [РегламентноеЗадание]
					,_Fld2837 [НастройкиКомпоновщика]
					,_Fld2838RRef [ТипЦен]
					,_Fld2839RRef [ВидОтраженияВУчете]
					,_Fld2840 [ПорядокФормированияЦены]
					,_Fld2841 [Комментарий]
					,_Fld2842RRef [НастройкаРасчетаСебестоимости]
					,_Fld2843 [СоздаватьНовыйДокумент]
					From _Reference156(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Предопределенный = ((byte[])Читалка.GetValue(3))[0]==1;
							Наименование = Читалка.GetString(4);
							ФормироватьДокументыАвтоматически = ((byte[])Читалка.GetValue(5))[0]==1;
							РегламентноеЗадание = Читалка.GetString(6);
							ТипЦен = new V82.СправочникиСсылка.ТипыЦенНоменклатуры((byte[])Читалка.GetValue(8));
							ВидОтраженияВУчете = V82.Перечисления/*Ссылка*/.ВидыОтраженияВУчете.ПустаяСсылка.Получить((byte[])Читалка.GetValue(9));
							ПорядокФормированияЦены = Читалка.GetDecimal(10);
							Комментарий = Читалка.GetString(11);
							НастройкаРасчетаСебестоимости = new V82.СправочникиСсылка.НастройкиРасчетаСебестоимости((byte[])Читалка.GetValue(12));
							СоздаватьНовыйДокумент = ((byte[])Читалка.GetValue(13))[0]==1;
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.СправочникиОбъект.НастройкиРасчетаЦеныНоменклатуры  ПолучитьОбъект()
		{
			var Объект = new V82.СправочникиОбъект.НастройкиРасчетаЦеныНоменклатуры();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Предопределенный = Предопределенный;
			Объект.Родитель = Родитель;
			Объект.ЭтоГруппа = ЭтоГруппа;
			Объект.Наименование = Наименование;
			Объект.ФормироватьДокументыАвтоматически = ФормироватьДокументыАвтоматически;
			Объект.РегламентноеЗадание = РегламентноеЗадание;
			Объект.НастройкиКомпоновщика = НастройкиКомпоновщика;
			Объект.ТипЦен = ТипЦен;
			Объект.ВидОтраженияВУчете = ВидОтраженияВУчете;
			Объект.ПорядокФормированияЦены = ПорядокФормированияЦены;
			Объект.Комментарий = Комментарий;
			Объект.НастройкаРасчетаСебестоимости = НастройкаРасчетаСебестоимости;
			Объект.СоздаватьНовыйДокумент = СоздаватьНовыйДокумент;
			return Объект;
		}
		
		private static readonly Hashtable Кэш = new Hashtable(1000);
		
		public static V82.СправочникиСсылка.НастройкиРасчетаЦеныНоменклатуры ВзятьИзКэша(byte[] УникальныйИдентификатор)
		{
			var УИ = new Guid(УникальныйИдентификатор);
			if (Кэш.ContainsKey(УИ))
			{
				return (V82.СправочникиСсылка.НастройкиРасчетаЦеныНоменклатуры)Кэш[УИ];
			}
			var Ссылка = new V82.СправочникиСсылка.НастройкиРасчетаЦеныНоменклатуры(УникальныйИдентификатор);
			Кэш.Add(УИ, Ссылка);
			return Ссылка;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}