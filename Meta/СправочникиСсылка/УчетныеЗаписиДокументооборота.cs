
using System;
using System.IO;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиСсылка
{
	[ProtoContract]
	[DataContract]
	public partial class УчетныеЗаписиДокументооборота:СправочникСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("b8ae20b8-da26-42d6-aa88-1518a3882bbd");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191416.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public bool Предопределенный {get;set;}
		public string/*5*/ Код {get;set;}
		public string/*150*/ Наименование {get;set;}
		public string/*(255)*/ ИмяПользователяPOP3 {get;set;}//Имя пользователя POP3
		public string/*(255)*/ ПарольPOP3 {get;set;}//Пароль POP3
		public string/*(255)*/ СерверPOP3 {get;set;}//Сервер POP3
		public decimal/*(5)*/ ПортPOP3 {get;set;}//Порт POP3
		public string/*(255)*/ ИмяПользователяSMTP {get;set;}//Имя пользователя SMTP
		public string/*(255)*/ ПарольSMTP {get;set;}//Пароль SMTP
		public string/*(255)*/ СерверSMTP {get;set;}//Сервер SMTP
		public decimal/*(5)*/ ПортSMTP {get;set;}//Порт SMTP
		public bool ТребуетсяSMTPАутентификация {get;set;}//Требуется SMTP Аутентификация
		public string/*(255)*/ АдресЭлектроннойПочты {get;set;}//Адрес электронной почты
		public V82.СправочникиСсылка.НалоговыеОрганы НалоговыйОрган {get;set;}//Налоговый орган
		public V82.СправочникиСсылка.СерверыДокументооборота СерверДокументооборота {get;set;}//Сервер документооборота
		public string/*(40)*/ СертификатРуководителя {get;set;}//Сертификат руководителя
		public string/*(40)*/ СертификатГлавногоБухгалтера {get;set;}//Сертификат главного бухгалтера
		public string/*(40)*/ СертификатДляШифрования {get;set;}//Сертификат для шифрования
		public bool УдалитьАвтоматическоеОпределениеНабораПодписей {get;set;}//Удалить автоматическое определение набора подписей
		public bool ИспользуютсяСъемныеКлючевыеНосители {get;set;}//Используются съемные ключевые носители
		public bool УдалитьНестандартныеТаймауты {get;set;}//Нестандартные таймауты
		public decimal/*(2)*/ УдалитьТаймаутНалоговогоОргана {get;set;}//Таймаут налогового органа
		public decimal/*(2)*/ УдалитьТаймаутНалогоплательщика {get;set;}//Таймаут налогоплательщика
		public bool УдалитьИспользуетсяОбособленнымиПодразделениями {get;set;}//Удалить используется обособленными подразделениями
		public bool ОбменНапрямую {get;set;}//Используется возможность документооборота без посредничества специализированного оператора связи
		public bool ОбменНапрямуюСФСГС {get;set;}//Используется возможность документооборота с Росстатом без посредничества специализированного оператора связи
		public bool НеФормироватьПодтвержденияАвтоматически {get;set;}//Не формировать подтверждения автоматически
		public V82.Перечисления/*Ссылка*/.РежимыАвтонастройкиУчетнойЗаписиДокументооборота РежимАвтонастройки {get;set;}//Режим автонастройки
		public bool ИспользоватьСервисОнлайнПроверкиОтчетов {get;set;}//Использовать сервис онлайн-проверки отчетов
		public bool ПредназначенаДляДокументооборотаСФНС {get;set;}//Предназначена для документооборота с ФНС
		public bool ПредназначенаДляДокументооборотаСПФР {get;set;}//Предназначена для документооборота с ПФР
		public bool ПредназначенаДляДокументооборотаСФСГС {get;set;}//Предназначена для документооборота с Росстатом
		public string/*(3)*/ ИдентификаторСпецоператора {get;set;}//Идентификатор спецоператора
		public string/*(43)*/ ИдентификаторАбонента {get;set;}
		public string/*(40)*/ ИдентификаторСистемыОтправителяПФР {get;set;}//Идентификатор системы отправителя (ПФР)
		public string/*(40)*/ ИдентификаторСистемыОтправителяФСГС {get;set;}//Идентификатор системы отправителя (ФСГС)
		public bool ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя {get;set;}//Является учетной записью уполномоченного представителя
		public string/*(12)*/ ИННУполномоченногоПредставителя {get;set;}//ИНН уполномоченного представителя
		public string/*(9)*/ КППУполномоченногоПредставителя {get;set;}//КПП уполномоченного представителя
		public string/*(0)*/ ПолноеНаименованиеУполномоченногоПредставителя {get;set;}//Полное наименование уполномоченного представителя
		public V82.Перечисления/*Ссылка*/.СтатусыУчетнойЗаписиДокументооборота СтатусУчетнойЗаписи {get;set;}//Статус учетной записи
		public V82.Перечисления/*Ссылка*/.СпецоператорыСвязи СпецоператорСвязи {get;set;}//Спецоператор связи

		public V82.СправочникиОбъект.УчетныеЗаписиДокументооборота  ПолучитьОбъект()
		{
			var Объект = new V82.СправочникиОбъект.УчетныеЗаписиДокументооборота();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Предопределенный = Предопределенный;
			Объект.Код = Код;
			Объект.Наименование = Наименование;
			Объект.ИмяПользователяPOP3 = ИмяПользователяPOP3;
			Объект.ПарольPOP3 = ПарольPOP3;
			Объект.СерверPOP3 = СерверPOP3;
			Объект.ПортPOP3 = ПортPOP3;
			Объект.ИмяПользователяSMTP = ИмяПользователяSMTP;
			Объект.ПарольSMTP = ПарольSMTP;
			Объект.СерверSMTP = СерверSMTP;
			Объект.ПортSMTP = ПортSMTP;
			Объект.ТребуетсяSMTPАутентификация = ТребуетсяSMTPАутентификация;
			Объект.АдресЭлектроннойПочты = АдресЭлектроннойПочты;
			Объект.НалоговыйОрган = НалоговыйОрган;
			Объект.СерверДокументооборота = СерверДокументооборота;
			Объект.СертификатРуководителя = СертификатРуководителя;
			Объект.СертификатГлавногоБухгалтера = СертификатГлавногоБухгалтера;
			Объект.СертификатДляШифрования = СертификатДляШифрования;
			Объект.УдалитьАвтоматическоеОпределениеНабораПодписей = УдалитьАвтоматическоеОпределениеНабораПодписей;
			Объект.ИспользуютсяСъемныеКлючевыеНосители = ИспользуютсяСъемныеКлючевыеНосители;
			Объект.УдалитьНестандартныеТаймауты = УдалитьНестандартныеТаймауты;
			Объект.УдалитьТаймаутНалоговогоОргана = УдалитьТаймаутНалоговогоОргана;
			Объект.УдалитьТаймаутНалогоплательщика = УдалитьТаймаутНалогоплательщика;
			Объект.УдалитьИспользуетсяОбособленнымиПодразделениями = УдалитьИспользуетсяОбособленнымиПодразделениями;
			Объект.ОбменНапрямую = ОбменНапрямую;
			Объект.ОбменНапрямуюСФСГС = ОбменНапрямуюСФСГС;
			Объект.НеФормироватьПодтвержденияАвтоматически = НеФормироватьПодтвержденияАвтоматически;
			Объект.РежимАвтонастройки = РежимАвтонастройки;
			Объект.ИспользоватьСервисОнлайнПроверкиОтчетов = ИспользоватьСервисОнлайнПроверкиОтчетов;
			Объект.ПредназначенаДляДокументооборотаСФНС = ПредназначенаДляДокументооборотаСФНС;
			Объект.ПредназначенаДляДокументооборотаСПФР = ПредназначенаДляДокументооборотаСПФР;
			Объект.ПредназначенаДляДокументооборотаСФСГС = ПредназначенаДляДокументооборотаСФСГС;
			Объект.ИдентификаторСпецоператора = ИдентификаторСпецоператора;
			Объект.ИдентификаторАбонента = ИдентификаторАбонента;
			Объект.ИдентификаторСистемыОтправителяПФР = ИдентификаторСистемыОтправителяПФР;
			Объект.ИдентификаторСистемыОтправителяФСГС = ИдентификаторСистемыОтправителяФСГС;
			Объект.ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя = ЯвляетсяУчетнойЗаписьюУполномоченногоПредставителя;
			Объект.ИННУполномоченногоПредставителя = ИННУполномоченногоПредставителя;
			Объект.КППУполномоченногоПредставителя = КППУполномоченногоПредставителя;
			Объект.ПолноеНаименованиеУполномоченногоПредставителя = ПолноеНаименованиеУполномоченногоПредставителя;
			Объект.СтатусУчетнойЗаписи = СтатусУчетнойЗаписи;
			Объект.СпецоператорСвязи = СпецоператорСвязи;
			return Объект;
		}

		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}

		public string СериализацияJson()
		{
			return this.ToJson();
		}

		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}