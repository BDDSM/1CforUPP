
using System;
using System.IO;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиСсылка
{
	[ProtoContract]
	[DataContract]
	public partial class ПоказателиСхемМотивации:СправочникСсылка,IСериализаторProtoBuf,IСериализаторJson
	{
		public static readonly Guid ГуидКласса = new Guid("d03cb594-8587-490b-bb44-4dbc80c0781d");
		public static readonly DateTime ВерсияКласса = DateTime.ParseExact("20121221191518.000", new string[] {"yyyyMMddHHmmss.fff"}, CultureInfo.InvariantCulture, DateTimeStyles.None);
		public static readonly long КонтрольнаяСуммаКласса = 123;
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления {get;set;}
		public bool Предопределенный {get;set;}
		[DataMember(Name = "Представление")]//Проверить основное представление.
		[ProtoMember(3)]
		public string/*100*/ Наименование {get;set;}
		public V82.Перечисления/*Ссылка*/.ТипыПоказателейСхемМотивации ТипПоказателя {get;set;}//Тип показателя
		public V82.Перечисления/*Ссылка*/.ИзменениеПоказателейСхемМотивации ВозможностьИзменения {get;set;}//Возможность изменения
		public V82.Перечисления/*Ссылка*/.ВидыПоказателейСхемМотивации ВидПоказателя {get;set;}//Вид показателя
		public bool ПоказательЭффективности {get;set;}//Показатель эффективности
		public string/*(100)*/ Идентификатор {get;set;}
		public bool ТарифнаяСтавка {get;set;}//Тарифная ставка
		public V82.СправочникиСсылка.ПоказателиСхемМотивации ФактическийПоказатель {get;set;}//Фактический показатель
		public V82.Перечисления/*Ссылка*/.СпособыРасчетаСуммыПоказателей СпособРасчетаСуммы {get;set;}//Способ расчета суммы
		public V82.СправочникиСсылка.ПоказателиСхемМотивации СуммируемыйПоказатель {get;set;}//Суммируемый показатель 
		public V82.СправочникиСсылка.Валюты Валюта {get;set;}
		public V82.СправочникиСсылка.ВидыСтажа ВидСтажа {get;set;}//Вид стажа
		
		public ПоказателиСхемМотивации()
		{
		}
		
		public ПоказателиСхемМотивации(byte[] УникальныйИдентификатор)
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Select top 1 
					_IDRRef [Ссылка]
					,_Version [Версия]
					,_Marked [ПометкаУдаления]
					,_IsMetadata [Предопределенный]
					,_Description [Наименование]
					,_Fld3222RRef [ТипПоказателя]
					,_Fld3223RRef [ВозможностьИзменения]
					,_Fld3224RRef [ВидПоказателя]
					,_Fld3225 [ПоказательЭффективности]
					,_Fld3226 [Идентификатор]
					,_Fld3227 [ТарифнаяСтавка]
					,_Fld3228RRef [ФактическийПоказатель]
					,_Fld3229RRef [СпособРасчетаСуммы]
					,_Fld3230RRef [СуммируемыйПоказатель]
					,_Fld3231RRef [Валюта]
					,_Fld3232RRef [ВидСтажа]
					From _Reference194(NOLOCK)
					Where _IDRRef=@УникальныйИдентификатор";
					Команда.Parameters.AddWithValue("УникальныйИдентификатор", УникальныйИдентификатор);
					using (var Читалка = Команда.ExecuteReader())
					{
						if (Читалка.Read())
						{
							//ToDo: Читать нужно через GetValues()
							Ссылка = new Guid((byte[])Читалка.GetValue(0));
							var ПотокВерсии = ((byte[])Читалка.GetValue(1));
							Array.Reverse(ПотокВерсии);
							Версия =  BitConverter.ToInt64(ПотокВерсии, 0);
							ВерсияДанных =  Convert.ToBase64String(ПотокВерсии);
							ПометкаУдаления = ((byte[])Читалка.GetValue(2))[0]==1;
							Предопределенный = ((byte[])Читалка.GetValue(3))[0]==1;
							Наименование = Читалка.GetString(4);
							ТипПоказателя = V82.Перечисления/*Ссылка*/.ТипыПоказателейСхемМотивации.ПустаяСсылка.Получить((byte[])Читалка.GetValue(5));
							ВозможностьИзменения = V82.Перечисления/*Ссылка*/.ИзменениеПоказателейСхемМотивации.ПустаяСсылка.Получить((byte[])Читалка.GetValue(6));
							ВидПоказателя = V82.Перечисления/*Ссылка*/.ВидыПоказателейСхемМотивации.ПустаяСсылка.Получить((byte[])Читалка.GetValue(7));
							ПоказательЭффективности = ((byte[])Читалка.GetValue(8))[0]==1;
							Идентификатор = Читалка.GetString(9);
							ТарифнаяСтавка = ((byte[])Читалка.GetValue(10))[0]==1;
							ФактическийПоказатель = new V82.СправочникиСсылка.ПоказателиСхемМотивации((byte[])Читалка.GetValue(11));
							СпособРасчетаСуммы = V82.Перечисления/*Ссылка*/.СпособыРасчетаСуммыПоказателей.ПустаяСсылка.Получить((byte[])Читалка.GetValue(12));
							СуммируемыйПоказатель = new V82.СправочникиСсылка.ПоказателиСхемМотивации((byte[])Читалка.GetValue(13));
							Валюта = new V82.СправочникиСсылка.Валюты((byte[])Читалка.GetValue(14));
							ВидСтажа = new V82.СправочникиСсылка.ВидыСтажа((byte[])Читалка.GetValue(15));
							//return Ссылка;
						}
						else
						{
							//return null;
						}
					}
				}
			}
		}
		
		public V82.СправочникиОбъект.ПоказателиСхемМотивации  ПолучитьОбъект()
		{
			var Объект = new V82.СправочникиОбъект.ПоказателиСхемМотивации();
			Объект._ЭтоНовый = false;
			Объект.Ссылка = Ссылка;
			Объект.Версия = Версия;
			Объект.ПометкаУдаления = ПометкаУдаления;
			Объект.Предопределенный = Предопределенный;
			Объект.Наименование = Наименование;
			Объект.ТипПоказателя = ТипПоказателя;
			Объект.ВозможностьИзменения = ВозможностьИзменения;
			Объект.ВидПоказателя = ВидПоказателя;
			Объект.ПоказательЭффективности = ПоказательЭффективности;
			Объект.Идентификатор = Идентификатор;
			Объект.ТарифнаяСтавка = ТарифнаяСтавка;
			Объект.ФактическийПоказатель = ФактическийПоказатель;
			Объект.СпособРасчетаСуммы = СпособРасчетаСуммы;
			Объект.СуммируемыйПоказатель = СуммируемыйПоказатель;
			Объект.Валюта = Валюта;
			Объект.ВидСтажа = ВидСтажа;
			return Объект;
		}
		
		public void СериализацияProtoBuf(Stream Поток)
		{
			Serializer.Serialize(Поток,this);
		}
		
		public string СериализацияJson()
		{
			return this.ToJson();
		}
		
		public string СериализацияXml()
		{
			return this.ToXml();
		}
	}
}