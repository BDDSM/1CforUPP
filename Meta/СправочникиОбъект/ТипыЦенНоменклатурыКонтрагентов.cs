
using System;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	///<summary>
	///(Упр)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ТипыЦенНоменклатурыКонтрагентов:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		[DataMember]
		[ProtoMember(3)]
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		[DataMember]
		[ProtoMember(4)]
		public bool ПометкаУдаления {get;set;}
		[DataMember]
		[ProtoMember(5)]
		public bool Предопределенный {get;set;}
		[DataMember]
		[ProtoMember(6)]
		public Guid Владелец {get;set;}
		[DataMember]
		[ProtoMember(7)]
		public string/*9*/ Код {get;set;}
		[DataMember]
		[ProtoMember(8)]
		public string/*100*/ Наименование {get;set;}
		[DataMember]
		[ProtoMember(9)]
		public V82.СправочникиСсылка.Валюты ВалютаЦены {get;set;}//Валюта цены по умолчанию
		///<summary>
		///Истина - цена включает НДС, ложь - не включает
		///</summary>
		[DataMember]
		[ProtoMember(10)]
		public bool ЦенаВключаетНДС {get;set;}//Цена включает НДС
		[DataMember]
		[ProtoMember(11)]
		public V82.СправочникиСсылка.ТипыЦенНоменклатуры ТипЦеныНоменклатуры {get;set;}//Тип цены номенклатуры
		[DataMember]
		[ProtoMember(12)]
		public string/*(0)*/ ОписаниеТипаЦеныНоменклатурыКонтрагента {get;set;}//Описание типа цены номенклатуры контрагента
		[DataMember]
		[ProtoMember(13)]
		public string/*(0)*/ Комментарий {get;set;}
		public void Записать()
		{
			//Установка блокировки элемента на горизантально масштабированный кластер.
			//Опционально введение тайм аута на запись одного и того же объекта, не чаще раза в 5-секунд. Защита от спама. упращение алгоритма блокировки.
			//Выделение сервиса для блокировки элемента и генерации кода
			//Выполнение операций контроля без обращений к sql-серверу.
			//Контроль конфликта блокировок.
			//Контроль загрузки булкинсертом гетерогенной коллекции.
			//Контроль уникальности кода для справочников.
			//Контроль уникальности номера для документов, в границах префикса.
			//Контроль владельца, он не может быть группой.
			//Контроль владельца он должен быть задан.
			//Контроль родителя он должен быть группой.
			//Контроль количества уровней, должен соотвествовать метаданным.
			//Контроль версии, объект не должен был быть записан перед чтением текущей записи, алгоритм версионника.
			//Контроль уникальности ссылки
			//Контроль зацикливания
			//Опционально контроль битых ссылок.
			//Соблюдейние транзакционности. ПередЗаписью. Открытие транзации. Валидации. ПриЗаписи. Фиксация транзакции. Информирование о записи элемента.
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference270(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_OwnerIDRRef
						,_Code
						,_Description
						,_Fld3977RRef
						,_Fld3978
						,_Fld3979RRef
						,_Fld3980
						,_Fld3981)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Владелец
						,@Код
						,@Наименование
						,@ВалютаЦены
						,@ЦенаВключаетНДС
						,@ТипЦеныНоменклатуры
						,@ОписаниеТипаЦеныНоменклатурыКонтрагента
						,@Комментарий)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference270
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_OwnerIDRRef	= @Владелец
						,_Code	= @Код
						,_Description	= @Наименование
						,_Fld3977RRef	= @ВалютаЦены
						,_Fld3978	= @ЦенаВключаетНДС
						,_Fld3979RRef	= @ТипЦеныНоменклатуры
						,_Fld3980	= @ОписаниеТипаЦеныНоменклатурыКонтрагента
						,_Fld3981	= @Комментарий
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Владелец", Владелец);
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ВалютаЦены", ВалютаЦены.Ссылка);
					Команда.Parameters.AddWithValue("ЦенаВключаетНДС", ЦенаВключаетНДС);
					Команда.Parameters.AddWithValue("ТипЦеныНоменклатуры", ТипЦеныНоменклатуры.Ссылка);
					Команда.Parameters.AddWithValue("ОписаниеТипаЦеныНоменклатурыКонтрагента", ОписаниеТипаЦеныНоменклатурыКонтрагента);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference270
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/
		////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТЧИКИ СОБЫТИЙ
		// Процедура - обработчик события "ПередЗаписью" формы.
		//

		public void ПередЗаписью(/*Отказ*/)
		{
			/*// среди всех типов цен одного контрагента не может быть более одного,
*/
			/*// ссылающегося на данный тип цен компании
*/
			if(true/*НЕ ОбменДанными.Загрузка И ЗначениеЗаполнено(ТипЦеныНоменклатуры)*/)
			{
				//Отбор = Новый Структура("ТипЦеныНоменклатуры",ТипЦеныНоменклатуры);
				//Выборка = Справочники.ТипыЦенНоменклатурыКонтрагентов.Выбрать(,Владелец,Отбор,);
				while(true/*Выборка.Следующий()*/)
				{
					if(true/*Ссылка <> Выборка.Ссылка*/)
					{
						/*// такой тип цен уже встречался
*/
						/*Предупреждение("Тип цен номенклатуры "+Выборка.ТипЦеныНоменклатуры.Наименование+" уже использовался "
				              +"в типе цен номенклатуры контрагента "+Выборка.Наименование+"!");*/
						//Отказ = Истина;
					}
				}
				//;;
			}
		}
		// ПередЗаписью()
	}
}