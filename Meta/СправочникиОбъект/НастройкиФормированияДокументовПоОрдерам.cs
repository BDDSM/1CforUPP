
using System;
using System.Data.SqlClient;
using V82;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	public partial class НастройкиФормированияДокументовПоОрдерам:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*100*/ Наименование;
		///<summary>
		///Формировать документы автоматически (регламентным заданием)
		///</summary>
		public bool ФормироватьДокументыАвтоматически;//Формировать документы автоматически
		///<summary>
		///Уникальный идентификатор регламентного задания
		///</summary>
		public string/*(36)*/ РегламентноеЗадание;//Регламентное задание
		public ХранилищеЗначения НастройкиКомпоновщика;//Настройки компоновщика
		public string/*(0)*/ Комментарий;
		public V82.Перечисления/*Ссылка*/.Периодичность ПериодДетализации;//Период детализации
		public bool ОтражатьВУправленческомУчете;//Отражать в управленческом учете
		public bool ОтражатьВБухгалтерскомУчете;//Отражать в бухгалтерском учете
		public bool ОтражатьВНалоговомУчете;//Отражать в налоговом учете
		///<summary>
		///Дата, по которую учтены данные в сформированных документах
		///</summary>
		public DateTime ГраницаОбработки;//Граница обработки
		public object ШаблонРегулярногоДокумента;//Шаблон регулярного документа
		public string/*(50)*/ ВидРегулярногоДокумента;//Вид регулярного документа
		public bool НеОбрабатыватьВсеДокументы;//Не обрабатывать все документы
		///<summary>
		///Количество дней после окончания периода, по истечении которых формируются документы
		///</summary>
		public decimal/*(2)*/ Задержка;
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference160(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_ParentIDRRef
						,_Folder
						,_Description
						,_Fld2882
						,_Fld2883
						,_Fld2884
						,_Fld2885
						,_Fld2886RRef
						,_Fld2887
						,_Fld2888
						,_Fld2889
						,_Fld2890
						,_Fld2892
						,_Fld2893
						,_Fld2894)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Родитель
						,@ЭтоГруппа
						,@Наименование
						,@ФормироватьДокументыАвтоматически
						,@РегламентноеЗадание
						,@НастройкиКомпоновщика
						,@Комментарий
						,@ПериодДетализации
						,@ОтражатьВУправленческомУчете
						,@ОтражатьВБухгалтерскомУчете
						,@ОтражатьВНалоговомУчете
						,@ГраницаОбработки
						,@ВидРегулярногоДокумента
						,@НеОбрабатыватьВсеДокументы
						,@Задержка)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference160
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_ParentIDRRef	= @Родитель
						,_Folder	= @ЭтоГруппа
						,_Description	= @Наименование
						,_Fld2882	= @ФормироватьДокументыАвтоматически
						,_Fld2883	= @РегламентноеЗадание
						,_Fld2884	= @НастройкиКомпоновщика
						,_Fld2885	= @Комментарий
						,_Fld2886RRef	= @ПериодДетализации
						,_Fld2887	= @ОтражатьВУправленческомУчете
						,_Fld2888	= @ОтражатьВБухгалтерскомУчете
						,_Fld2889	= @ОтражатьВНалоговомУчете
						,_Fld2890	= @ГраницаОбработки
						,_Fld2892	= @ВидРегулярногоДокумента
						,_Fld2893	= @НеОбрабатыватьВсеДокументы
						,_Fld2894	= @Задержка
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Родитель", Родитель);
					Команда.Parameters.AddWithValue("ЭтоГруппа", ЭтоГруппа?new byte[]{0}:new byte[]{1});
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ФормироватьДокументыАвтоматически", ФормироватьДокументыАвтоматически);
					Команда.Parameters.AddWithValue("РегламентноеЗадание", РегламентноеЗадание);
					Команда.Parameters.AddWithValue("НастройкиКомпоновщика",new byte[0]);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.Parameters.AddWithValue("ПериодДетализации", ПериодДетализации.Ключ());
					Команда.Parameters.AddWithValue("ОтражатьВУправленческомУчете", ОтражатьВУправленческомУчете);
					Команда.Parameters.AddWithValue("ОтражатьВБухгалтерскомУчете", ОтражатьВБухгалтерскомУчете);
					Команда.Parameters.AddWithValue("ОтражатьВНалоговомУчете", ОтражатьВНалоговомУчете);
					Команда.Parameters.AddWithValue("ГраницаОбработки", ГраницаОбработки);
					Команда.Parameters.AddWithValue("ВидРегулярногоДокумента", ВидРегулярногоДокумента);
					Команда.Parameters.AddWithValue("НеОбрабатыватьВсеДокументы", НеОбрабатыватьВсеДокументы);
					Команда.Parameters.AddWithValue("Задержка", Задержка);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference160
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/
		////////////////////////////////////////////////////////////////////////////////
		// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
		// Выполняет проверку заполненности реквизитов.
		//
		// Параметры
		//	Заголовок - заголовок сообщения об ошибке
		//
		// Возвращаемое значение
		//	Истина  - все проверяемые реквизиты заполнены
		//	Ложь	- не все проверяемые реквизиты заполнены

		public object РеквизитыЗаполнены(/*Знач Заголовок*/)
		{
			if(true/*ЭтотОбъект.ЭтоГруппа*/)
			{
			}
			//Отказ = Ложь;
			/*// Должны быть заполнены обязательные реквизиты
*/
			//СтруктураОбязательныхПолей = Новый Структура();
			//СтруктураОбязательныхПолей.Вставить("ПериодДетализации",	"Не указан период детализации формируемых документов");
			//СтруктураОбязательныхПолей.Вставить("ВидРегулярногоДокумента",	"Не указан вид формируемых документов");
			//ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураОбязательныхПолей, Отказ, Заголовок);
			/*// Документ должен принадлежать хотя бы к одному виду учета (управленческий, бухгалтерский, налоговый)
*/
			//СтруктураШапкиДокумента = Новый Структура("ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете");
			//ЗаполнитьЗначенияСвойств(СтруктураШапкиДокумента, ЭтотОбъект);
			//ОбщегоНазначения.ПроверитьПринадлежностьКВидамУчета(СтруктураШапкиДокумента, Отказ, Заголовок);
			return null;
		}
		// Подготавливает заголовок сообщений об ошибках при записи
		//
		// Возвращаемое значение
		//  Строка, заголовок сообщений

		public object ЗаголовокПриЗаписи(/**/)
		{
			return null;
		}
		// Возвращает имя объекта метаданных для создания регл. задания
		//
		// Возвращаемое значение
		//	Строка  - имя объекта метаданных

		public object ИмяРегламентногоЗадания(/**/)
		{
			return null;
		}

		public void ПередЗаписью(/*Отказ*/)
		{
			/*// Проверим заполнение реквизитов
*/
			//Заголовок = ЗаголовокПриЗаписи();
			//Отказ = НЕ РеквизитыЗаполнены(Заголовок);
		}
		//Функция проверяет корректность отборов:
		//	отбор по виду операции должен соответствовать отбору по направлению
		//Возвращаемое значение - булево (истина - отбор корректен, ложь - обнаружены несоответствия)

		public object ПроверитьНастройкиОтбора(/**/)
		{
			//КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
			//ТекНастройкиКомпоновщика = НастройкиКомпоновщика.Получить();
			//КомпоновщикНастроек.ЗагрузитьНастройки(ТекНастройкиКомпоновщика);
			//ОтборКомпоновщикНастроек = КомпоновщикНастроек.Настройки.Отбор.Элементы;
			//ОтборНаправление = Неопределено;
			/*//значение отбора по полю Направление
*/
			//МассивОтборВидОперации = Новый Массив;
			/*//массив значений отбора по полю ВидОперации
*/
			if(true/*ОтборНаправление = Неопределено ИЛИ МассивОтборВидОперации.Количество() = 0*/)
			{
			}
			//ЗначениеОтборНаправление = НРег(СокрЛП(ОтборНаправление.ПравоеЗначение));
			if(true/*ЗначениеОтборНаправление = "приход"*/)
			{
				//ТипЗначенияВидОперации = Тип("ПеречислениеСсылка.ВидыОперацийПриходныйОрдер");
			}
			return null;
		}

		public void ОбработатьГруппуЭлементовОтбора(/*ГруппаЭлементовОтбора, ОтборНаправление, МассивОтборВидОперации*/)
		{
		}

		public void ОбработатьЭлементОтбора(/*ЭлементОтбора, ОтборНаправление, МассивОтборВидОперации*/)
		{
			if(true/*НЕ ЭлементОтбора.Использование*/)
			{
			}
			if(true/*НРег(СокрЛП(ЭлементОтбора.ЛевоеЗначение)) = "направление"*/)
			{
				//ОтборНаправление = ЭлементОтбора;
			}
		}
	}
}