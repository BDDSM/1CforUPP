
using System;
using System.Data.SqlClient;
using V82;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	///<summary>
	///(Упр)
	///</summary>
	public partial class СтрокиФинансовогоРасчета:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*9*/ Код;
		public string/*100*/ Наименование;
		public V82.Перечисления/*Ссылка*/.ВидыСтрокФинансовогоРасчета ВидСтроки;//Вид строки
		public object Измерение;
		public string/*(0)*/ Формула;
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference253(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Code
						,_Description
						,_Fld3852RRef
						,_Fld3854)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Код
						,@Наименование
						,@ВидСтроки
						,@Формула)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference253
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_Code	= @Код
						,_Description	= @Наименование
						,_Fld3852RRef	= @ВидСтроки
						,_Fld3854	= @Формула
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ВидСтроки", ВидСтроки.Ключ());
					Команда.Parameters.AddWithValue("Формула", Формула);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference253
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/
		// Процедура генерирует код перемещаемого элемента (группы) справочника,
		// а также код расположенного рядом элемента при интерактивном перемещении
		// элемента в форме списка справочника.
		// Записывает переставляемые элементы с измененными кодами.
		// В случае сдвига группы элементов также изменяет коды вложенных в группу
		// элементов.
		//
		// Параметры
		//  Направление  – число – направление сдвига элемента,
		//                 принимает значения:
		//                      1 - при сдвиге вниз;
		//                     -1 - при сдвиге вверх.
		//

		public void ИзменитьКод(/*Направление*/)
		{
			//ТекущийКод    = Код;
			//СписокКодов   = Новый СписокЗначений;
			//СтрокиРасчета  = Справочники.СтрокиФинансовогоРасчета;
			//ВыборкаСтроки = СтрокиРасчета.Выбрать(Родитель, Владелец, , "Код Убыв");
			while(true/*ВыборкаСтроки.Следующий()*/)
			{
				//СписокКодов.Добавить(ВыборкаСтроки.Код);
			}
			if(true/*СписокКодов.Количество() < 2*/)
			{
				/*// На данном уровне имеется только один элемент или группа справочника.
*/
				/*// Игнорируем действие пользователя.
*/
			}
			//ПорядковыйНомер = СписокКодов.Индекс(СписокКодов.НайтиПоЗначению(ТекущийКод));
			if(true/*(ПорядковыйНомер = 0) И (Направление < 0)*/)
			{
				/*// Попытка перемещения первого по порядку элемента вверх.
*/
				//ИндексЭлементаЗамены = СписокКодов.Количество() - 1;
			}
			//КодЭлементаЗамены     = СписокКодов.Получить(ИндексЭлементаЗамены).Значение;
			//ЭлементЗаменыСсылка   = СтрокиРасчета.НайтиПоКоду(КодЭлементаЗамены,,Родитель, Владелец);
			if(true/*ЭлементЗаменыСсылка <> СтрокиРасчета.ПустаяСсылка()*/)
			{
			}
			/*// Необходимо поменять формулы, использующие строки с измененными кодами
*/
			//Запрос=Новый Запрос;
			/*Запрос.Текст="ВЫБРАТЬ
	|	СтрокиРасчетаСтрокиРасчетаДляФормулы.Ссылка КАК СтрокаРасчета
	|ИЗ
	|	Справочник.СтрокиФинансовогоРасчета.СтрокиРасчетаДляФормулы КАК СтрокиРасчетаСтрокиРасчетаДляФормулы
	|
	|ГДЕ
	|	СтрокиРасчетаСтрокиРасчетаДляФормулы.Ссылка.Владелец = &Владелец И
	|	СтрокиРасчетаСтрокиРасчетаДляФормулы.Ссылка.ВидСтроки = &ВидСтроки И
	|	(СтрокиРасчетаСтрокиРасчетаДляФормулы.СтрокаРасчета = &ЭлементЗамены 
	|	ИЛИ СтрокиРасчетаСтрокиРасчетаДляФормулы.СтрокаРасчета = &ТекущийОбъект)";*/
			//Запрос.УстановитьПараметр("ЭлементЗамены",ЭлементЗаменыСсылка);
			//Запрос.УстановитьПараметр("ТекущийОбъект",Ссылка);
			//Запрос.УстановитьПараметр("Владелец",Владелец);
			//Запрос.УстановитьПараметр("ВидСтроки",Перечисления.ВидыСтрокФинансовогоРасчета.РасчетПоДругимСтрокамОтчета);
			//РезультатЗапроса=Запрос.Выполнить().Выбрать();
			//НачатьТранзакцию();
			while(true/*РезультатЗапроса.Следующий()*/)
			{
				//ОбъектРасчет=РезультатЗапроса.СтрокаРасчета.ПолучитьОбъект();
				//СтараяФормула=ОбъектРасчет.Формула;
				//СтараяФормула=СтрЗаменить(СтараяФормула,"["+ТекущийКод+"]","#");
				//СтараяФормула=СтрЗаменить(СтараяФормула,"["+ПредыдущийКод+"]","["+ТекущийКод+"]");
				//СтараяФормула=СтрЗаменить(СтараяФормула,"#","["+ПредыдущийКод+"]");
				//ОбъектРасчет.Формула=СтараяФормула;
				//ОбъектРасчет.Записать();
			}
			/*;
	ЗафиксироватьТранзакцию();*/
		}
		// ИзменитьКод()

		public void ПередЗаписью(/*Отказ*/)
		{
			if(true/*ОбменДанными.Загрузка*/)
			{
			}
			//ТекстСообщения="";
			if(true/*ВидСтроки=Перечисления.ВидыСтрокФинансовогоРасчета.ПустаяСсылка()*/)
			{
				//ТекстСообщения="Не указан вид строки финансового расчета.";
			}
			if(true/*Не ТекстСообщения=""*/)
			{
				//Сообщить(ТекстСообщения);
				//Отказ=Истина;
			}
		}
	}
}
