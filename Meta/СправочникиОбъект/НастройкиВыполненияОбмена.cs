
using System;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	[ProtoContract]
	[DataContract]
	public partial class НастройкиВыполненияОбмена:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		[DataMember]
		[ProtoMember(3)]
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		[DataMember]
		[ProtoMember(4)]
		public bool ПометкаУдаления {get;set;}
		[DataMember]
		[ProtoMember(5)]
		public bool Предопределенный {get;set;}
		[DataMember]
		[ProtoMember(6)]
		public string/*6*/ Код {get;set;}
		[DataMember]
		[ProtoMember(7)]
		public string/*150*/ Наименование {get;set;}
		[DataMember]
		[ProtoMember(8)]
		public bool ВыполнятьДействияПодПолнымиПравами {get;set;}//Выполнять действия под полными правами
		[DataMember]
		[ProtoMember(9)]
		public bool ИспользоватьРегламентныеЗадания {get;set;}//Использовать регламентные задания
		[DataMember]
		[ProtoMember(10)]
		public bool ДинамическиИзменятьИнтервалМеждуОбменами {get;set;}//Динамически изменять интервал между обменами
		[DataMember]
		[ProtoMember(11)]
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}//Пользователь
		[DataMember]
		[ProtoMember(12)]
		public bool КаждыйЗапускПрограммы {get;set;}//Каждый запуск программы
		[DataMember]
		[ProtoMember(13)]
		public bool КаждоеЗавершениеРаботыСПрограммой {get;set;}//Каждое завершение работы с программой
		[DataMember]
		[ProtoMember(14)]
		public string/*(255)*/ КаталогПроверкиДоступности {get;set;}//Каталог проверки доступности
		[DataMember]
		[ProtoMember(15)]
		public string/*(255)*/ ВыполнятьОбменПриПоявленииФайла {get;set;}//Выполнять обмен при появлении файла
		[DataMember]
		[ProtoMember(16)]
		public decimal/*(10)*/ КоличествоЭлементовВТранзакцииНаВыгрузкуДанных {get;set;}//Количество элементов в транзакции на выгрузку данных
		[DataMember]
		[ProtoMember(17)]
		public decimal/*(10)*/ КоличествоЭлементовВТранзакцииНаЗагрузкуДанных {get;set;}//Количество элементов в транзакции на загрузку данных
		[DataMember]
		[ProtoMember(18)]
		public V82.СправочникиСсылка.УчетныеЗаписиЭлектроннойПочты УчетнаяЗаписьОтправкиСообщенияОбОшибке {get;set;}//Учетная запись отправки сообщения об ошибке
		[DataMember]
		[ProtoMember(19)]
		public string/*(100)*/ АдресДляОтправкиСообщенийОбОшибке {get;set;}//Адрес для отправки сообщений об ошибке
		[DataMember]
		[ProtoMember(20)]
		public string/*(0)*/ Комментарий {get;set;}
		[DataMember]
		[ProtoMember(21)]
		public string/*(40)*/ РегламентноеЗадание {get;set;}//Регламентное задание
		public void Записать()
		{
			//Установка блокировки элемента на горизантально масштабированный кластер.
			//Опционально введение тайм аута на запись одного и того же объекта, не чаще раза в 5-секунд. Защита от спама. упращение алгоритма блокировки.
			//Выделение сервиса для блокировки элемента и генерации кода
			//Выполнение операций контроля без обращений к sql-серверу.
			//Контроль конфликта блокировок.
			//Контроль загрузки булкинсертом гетерогенной коллекции.
			//Контроль уникальности кода для справочников.
			//Контроль уникальности номера для документов, в границах префикса.
			//Контроль владельца, он не может быть группой.
			//Контроль владельца он должен быть задан.
			//Контроль родителя он должен быть группой.
			//Контроль количества уровней, должен соотвествовать метаданным.
			//Контроль версии, объект не должен был быть записан перед чтением текущей записи, алгоритм версионника.
			//Контроль уникальности ссылки
			//Контроль зацикливания
			//Опционально контроль битых ссылок.
			//Соблюдейние транзакционности. ПередЗаписью. Открытие транзации. Валидации. ПриЗаписи. Фиксация транзакции. Информирование о записи элемента.
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference22676(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Code
						,_Description
						,_Fld22693
						,_Fld22694
						,_Fld22696
						,_Fld22697RRef
						,_Fld22698
						,_Fld22699
						,_Fld22700
						,_Fld22701
						,_Fld22702
						,_Fld22703
						,_Fld22704RRef
						,_Fld22705
						,_Fld22706
						,_Fld22695)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Код
						,@Наименование
						,@ВыполнятьДействияПодПолнымиПравами
						,@ИспользоватьРегламентныеЗадания
						,@ДинамическиИзменятьИнтервалМеждуОбменами
						,@Ответственный
						,@КаждыйЗапускПрограммы
						,@КаждоеЗавершениеРаботыСПрограммой
						,@КаталогПроверкиДоступности
						,@ВыполнятьОбменПриПоявленииФайла
						,@КоличествоЭлементовВТранзакцииНаВыгрузкуДанных
						,@КоличествоЭлементовВТранзакцииНаЗагрузкуДанных
						,@УчетнаяЗаписьОтправкиСообщенияОбОшибке
						,@АдресДляОтправкиСообщенийОбОшибке
						,@Комментарий
						,@РегламентноеЗадание)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference22676
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_Code	= @Код
						,_Description	= @Наименование
						,_Fld22693	= @ВыполнятьДействияПодПолнымиПравами
						,_Fld22694	= @ИспользоватьРегламентныеЗадания
						,_Fld22696	= @ДинамическиИзменятьИнтервалМеждуОбменами
						,_Fld22697RRef	= @Ответственный
						,_Fld22698	= @КаждыйЗапускПрограммы
						,_Fld22699	= @КаждоеЗавершениеРаботыСПрограммой
						,_Fld22700	= @КаталогПроверкиДоступности
						,_Fld22701	= @ВыполнятьОбменПриПоявленииФайла
						,_Fld22702	= @КоличествоЭлементовВТранзакцииНаВыгрузкуДанных
						,_Fld22703	= @КоличествоЭлементовВТранзакцииНаЗагрузкуДанных
						,_Fld22704RRef	= @УчетнаяЗаписьОтправкиСообщенияОбОшибке
						,_Fld22705	= @АдресДляОтправкиСообщенийОбОшибке
						,_Fld22706	= @Комментарий
						,_Fld22695	= @РегламентноеЗадание
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ВыполнятьДействияПодПолнымиПравами", ВыполнятьДействияПодПолнымиПравами);
					Команда.Parameters.AddWithValue("ИспользоватьРегламентныеЗадания", ИспользоватьРегламентныеЗадания);
					Команда.Parameters.AddWithValue("ДинамическиИзменятьИнтервалМеждуОбменами", ДинамическиИзменятьИнтервалМеждуОбменами);
					Команда.Parameters.AddWithValue("Ответственный", Ответственный.Ссылка);
					Команда.Parameters.AddWithValue("КаждыйЗапускПрограммы", КаждыйЗапускПрограммы);
					Команда.Parameters.AddWithValue("КаждоеЗавершениеРаботыСПрограммой", КаждоеЗавершениеРаботыСПрограммой);
					Команда.Parameters.AddWithValue("КаталогПроверкиДоступности", КаталогПроверкиДоступности);
					Команда.Parameters.AddWithValue("ВыполнятьОбменПриПоявленииФайла", ВыполнятьОбменПриПоявленииФайла);
					Команда.Parameters.AddWithValue("КоличествоЭлементовВТранзакцииНаВыгрузкуДанных", КоличествоЭлементовВТранзакцииНаВыгрузкуДанных);
					Команда.Parameters.AddWithValue("КоличествоЭлементовВТранзакцииНаЗагрузкуДанных", КоличествоЭлементовВТранзакцииНаЗагрузкуДанных);
					Команда.Parameters.AddWithValue("УчетнаяЗаписьОтправкиСообщенияОбОшибке", УчетнаяЗаписьОтправкиСообщенияОбОшибке.Ссылка);
					Команда.Parameters.AddWithValue("АдресДляОтправкиСообщенийОбОшибке", АдресДляОтправкиСообщенийОбОшибке);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.Parameters.AddWithValue("РегламентноеЗадание", РегламентноеЗадание);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference22676
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/

		public object НайтиРеглЗаданиеПоПараметру(/*УникальныйНомерЗадания*/)
		{
			return null;
		}

		public object НайтиРегламентноеЗаданиеПоНастройке(/**/)
		{
			//ТекущееРегламентноеЗадание = НайтиРеглЗаданиеПоПараметру(РегламентноеЗадание);
			return null;
		}

		public void УстановитьПараметрыРегламентногоЗадания(/*РеквизитЗадания, ПараметрЗадания, КлючРегламентногоЗадания = "", Постфикс = ""*/)
		{
			if(true/*ПараметрЗадания = Неопределено*/)
			{
				//РеквизитЗадания = "";
			}
		}

		public void УстановитьЗначенияПеременныхРегламентныхНастроек(/**/)
		{
			if(true/*мРегламентноеЗадание = Неопределено*/)
			{
				//мРегламентноеЗадание = НайтиРегламентноеЗаданиеПоНастройке();
			}
		}
		//Функция определяет есть ли для данной настройки Автоматический обмен данными

		public object ЭтоНастройкаАвтоматическогоОбменаДанными(/**/)
		{
			return null;
		}
		//Функция по настройке определяет нужно ли для нее периодически определять необходимость обмена данными

		public object ОпределитьНеобходимостьПериодическогоОпределенияВыполненияОбменаДанными(/**/)
		{
			/*НужноПериодическиПроверятьНеобходимостьОбмена = Не ПустаяСтрока(КаталогПроверкиДоступности)
		ИЛИ НЕ ПустаяСтрока(ВыполнятьОбменПриПоявленииФайла);*/
			return null;
		}

		public void ПередЗаписью(/*Отказ*/)
		{
			/*// работа с регламентными заданиями
*/
			//УстановитьЗначенияПеременныхРегламентныхНастроек();
			if(true/*ЭтоНастройкаАвтоматическогоОбменаДанными()*/)
			{
				if(true/*НЕ ЗначениеЗаполнено(Ответственный)*/)
				{
					//ОбщегоНазначения.СообщитьОбОшибке("Не заполнено поле ""Пользователь"". Автоматический обмен по такой настройке невозможен.", Отказ);
				}
			}
			/*НужноОтключитьРегЗаданияОбмена =  ПометкаУдаления
		ИЛИ НЕ ИспользоватьРегламентныеЗадания;*/
			if(true/*НужноОтключитьРегЗаданияОбмена*/)
			{
				if(true/*мРегламентноеЗадание <> Неопределено*/)
				{
					//мРегламентноеЗадание.Использование = Ложь;
				}
			}
			//УстановитьПараметрыРегламентногоЗадания(РегламентноеЗадание, мРегламентноеЗадание);
		}

		public void ПриКопировании(/*ОбъектКопирования*/)
		{
			//РегламентноеЗадание = "";
			//мРегламентноеЗадание = Неопределено;
		}

		public void ПередУдалением(/*Отказ*/)
		{
			//УстановитьЗначенияПеременныхРегламентныхНастроек();
			if(true/*мРегламентноеЗадание <> Неопределено*/)
			{
				//мРегламентноеЗадание.Удалить();
			}
		}

		public void ОбработкаЗаполнения(/*Основание*/)
		{
			if(true/*ТипЗнч(Основание) = Тип("СправочникСсылка.НастройкиОбменаДанными")*/)
			{
				//Наименование = Основание.Наименование;
				//СтрокаТЧ = НастройкиОбмена.Добавить();
				//СтрокаТЧ.НастройкаОбмена = Основание;
				//СтрокаТЧ.ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ЗагрузкаДанных;
				//СтрокаТЧ = НастройкиОбмена.Добавить();
				//СтрокаТЧ.НастройкаОбмена = Основание;
				//СтрокаТЧ.ВыполняемоеДействие = Перечисления.ДействиеПриОбмене.ВыгрузкаДанных;
			}
		}
	}
}