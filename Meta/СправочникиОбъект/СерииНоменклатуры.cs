
using System;
using System.Data.SqlClient;
using V82;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	public partial class СерииНоменклатуры:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*9*/ Код;
		public string/*100*/ Наименование;
		///<summary>
		///(Общ)
		///</summary>
		public string/*(25)*/ СерийныйНомер;//Серийный номер
		///<summary>
		///(Общ)
		///</summary>
		public DateTime СрокГодности;//Срок годности
		///<summary>
		///(Регл) Номер ГТД по умолчанию
		///</summary>
		public V82.СправочникиСсылка.НомераГТД НомерГТД;//Номер ГТД
		///<summary>
		///(Регл)
		///</summary>
		public V82.СправочникиСсылка.КлассификаторСтранМира СтранаПроисхождения;//Страна происхождения
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ХранилищеДополнительнойИнформации ОсновноеИзображение;//Основное изображение
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий;
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference226(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Code
						,_Description
						,_Fld3401
						,_Fld3402
						,_Fld3403RRef
						,_Fld3404RRef
						,_Fld3405RRef
						,_Fld3406)
						Values (
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Код
						,@Наименование
						,@СерийныйНомер
						,@СрокГодности
						,@НомерГТД
						,@СтранаПроисхождения
						,@ОсновноеИзображение
						,@Комментарий)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference226
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_Code	= @Код
						,_Description	= @Наименование
						,_Fld3401	= @СерийныйНомер
						,_Fld3402	= @СрокГодности
						,_Fld3403RRef	= @НомерГТД
						,_Fld3404RRef	= @СтранаПроисхождения
						,_Fld3405RRef	= @ОсновноеИзображение
						,_Fld3406	= @Комментарий
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("СерийныйНомер", СерийныйНомер);
					Команда.Parameters.AddWithValue("СрокГодности", СрокГодности);
					Команда.Parameters.AddWithValue("НомерГТД", НомерГТД.Ссылка);
					Команда.Parameters.AddWithValue("СтранаПроисхождения", СтранаПроисхождения.Ссылка);
					Команда.Parameters.AddWithValue("ОсновноеИзображение", ОсновноеИзображение.Ссылка);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference226
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/
		////////////////////////////////////////////////////////////////////////////////
		// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
		// Функция устанавливает новое наименование серии по значениям реквизитов.
		//
		// Параметры:
		//  Нет.
		//
		// Возвращаемое значение:
		//  Строка - сформированное наименование.
		//

		public object СформироватьНаименование(/**/)
		{
			/*Строка = "";*/
			if(true/*ЗначениеЗаполнено(СерийныйНомер)*/)
			{
				/*Строка = Строка + СерийныйНомер + ", ";*/
			}
			if(true/*ЗначениеЗаполнено(СрокГодности)*/)
			{
				/*Строка = Строка + Формат(СрокГодности,"ДФ=""дд.ММ.гггг""") + ", ";*/
			}
			if(true/*ЗначениеЗаполнено(НомерГТД)*/)
			{
				/*Строка = Строка + СокрЛП(НомерГТД.Код) + ", ";*/
			}
			if(true/*ЗначениеЗаполнено(СтранаПроисхождения)*/)
			{
				/*Строка = Строка + СтранаПроисхождения.Наименование + ", ";*/
			}
			/*Строка = Лев(Строка, СтрДлина(Строка) - 2);*/
			if(true/*ПустаяСтрока(Строка)*/)
			{
				/*Строка = "<Свойства не назначены>";*/
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТЧИКИ СОБЫТИЙ

		public void ПриКопировании(/*ОбъектКопирования*/)
		{
			if(true/*Не ЭтоГруппа*/)
			{
				/*ОсновноеИзображение = Неопределено;*/
			}
		}
		// Процедура вызывается перед записью элемента справочника.
		//

		public void ПередЗаписью(/*Отказ*/)
		{
			/*// Проверим можно ли изменять реквизиты договора.
*/
			/*// Проверка осуществляется только если записывается уже существующий договор
*/
			if(true/*НЕ ОбменДанными.Загрузка И НЕ ЭтоНовый()*/)
			{
				/*// Проверим возможность смены способа ведения взаиморасчетов и валюты взаиморасчетов
*/
				if(true/*НомерГТД <> Ссылка.НомерГТД
		 ИЛИ СтранаПроисхождения <> Ссылка.СтранаПроисхождения*/)
				{
					if(true/*ПолныеПрава.СерииНоменклатуры_СуществуютСсылки(Ссылка)*/)
					{
						/*Сообщить("Существуют документы, проведенные по серии """ + Наименование + """.
						 |Реквизиты ""Номер ГТД"" и ""Страна происхождения"" не могут быть изменены, элемент не записан.", 
						 СтатусСообщения.Важное);*/
						/*Отказ = Истина;*/
					}
				}
			}
		}
	}
}
