
using System;
using System.Data.SqlClient;
using V82;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	///<summary>
	///Торговое оборудование, которое может быть подключено.
	///</summary>
	public partial class ТорговоеОборудование:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*9*/ Код;
		public string/*100*/ Наименование;
		///<summary>
		///Используемая обработка обслуживания торгового оборудования.
		///</summary>
		public V82.СправочникиСсылка.ОбработкиОбслуживанияТО ОбработкаОбслуживания;//Обработка обслуживания
		///<summary>
		///Модель торгового оборудования.
		///</summary>
		public string/*(256)*/ Модель;
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference272(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Code
						,_Description
						,_Fld3991RRef
						,_Fld3992)
						Values (
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Код
						,@Наименование
						,@ОбработкаОбслуживания
						,@Модель)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference272
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_Code	= @Код
						,_Description	= @Наименование
						,_Fld3991RRef	= @ОбработкаОбслуживания
						,_Fld3992	= @Модель
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ОбработкаОбслуживания", ОбработкаОбслуживания.Ссылка);
					Команда.Parameters.AddWithValue("Модель", Модель);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference272
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/
		///////////////////////////////////////////////////////////////////////////////
		//// ОБРАБОТЧИКИ СОБЫТИЙ
		// Процедура - обработчик события "Перед записью".
		//
		// Параметры:
		//  Отказ - <Булево>
		//        - Признак отказа от записи элемента. Если в теле
		//          процедуры-обработчика установить данному параметру
		//          значение Истина, запись элемента выполнена не будет.
		//          Значение по умолчанию: Ложь.
		//

		public void ПередЗаписью(/*Отказ*/)
		{
			if(true/*Не ОбменДанными.Загрузка*/)
			{
				/*Ошибки = "";*/
				if(true/*ПустаяСтрока(Модель)*/)
				{
					/*Ошибки = " - Не указана модель торгового оборудования.";*/
				}
				if(true/*НЕ ЗначениеЗаполнено(ОбработкаОбслуживания)*/)
				{
					/*Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки),
			                    "",
			                    "
			                    |")
			                + " - Не указана обработка обслуживания.";*/
				}
				if(true/*Не ЭтоНовый() И Ссылка.ОбработкаОбслуживания <> ОбработкаОбслуживания И ЕстьСсылкиНаЗаписьСправочника()*/)
				{
					/*Ошибки = Ошибки + ?(ПустаяСтрока(Ошибки),
			                    "",
			                    "
			                    |")
			                + " - Для данной модели уже существует подключенное торговое оборудование.
			                  |   Изменение обработки обслуживания невозможно.";*/
				}
				if(true/*Не ПустаяСтрока(Ошибки)*/)
				{
					/*ОбщегоНазначения.СообщитьОбОшибке("При попытке записи элемента с кодом """ + Код + """ были обнаружены ошибки:
			                 |" + Ошибки);*/
					/*Отказ = Истина;*/
				}
			}
		}
		// Функция проверяет, имеют ли в регистре сведений "Торговое оборудование" ссылки на данный элемент справочника, и возвращает ответ.
		//
		// Параметры
		//
		// Возвращаемое значение:
		//  <Булево>  - ответ на вопрос "Есть ли ссылки на текущую запись справочника?"
		//

		public object ЕстьСсылкиНаЗаписьСправочника(/**/)
		{
			/*Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	РегТО.Модель,
	|	РегТО.Вид
	|ИЗ
	|	РегистрСведений.ТорговоеОборудование КАК РегТО
	|ГДЕ
	|	РегТО.Модель = &СправочникТО
	|");*/
			/*Запрос.УстановитьПараметр("СправочникТО", Ссылка);*/
		}
	}
}
