
using System;
using System.Data.SqlClient;
using V82;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	public partial class КомпетенцииРаботников:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*100*/ Наименование;
		public string/*(0)*/ ОписаниеКомпетенции;//Описание компетенции
		public V82.СправочникиСсылка.ШкалыОценокКомпетенций ШкалаОценок;//Шкала оценок
		public V82.СправочникиСсылка.ТиповыеАнкеты ТиповаяАнкета;//Типовая анкета
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference126(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_ParentIDRRef
						,_Folder
						,_Description
						,_Fld2426
						,_Fld2427RRef
						,_Fld2428RRef)
						Values (
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Родитель
						,@ЭтоГруппа
						,@Наименование
						,@ОписаниеКомпетенции
						,@ШкалаОценок
						,@ТиповаяАнкета)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference126
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_ParentIDRRef	= @Родитель
						,_Folder	= @ЭтоГруппа
						,_Description	= @Наименование
						,_Fld2426	= @ОписаниеКомпетенции
						,_Fld2427RRef	= @ШкалаОценок
						,_Fld2428RRef	= @ТиповаяАнкета
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Родитель", Родитель);
					Команда.Parameters.AddWithValue("ЭтоГруппа", ЭтоГруппа?new byte[]{0}:new byte[]{1});
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ОписаниеКомпетенции", ОписаниеКомпетенции);
					Команда.Parameters.AddWithValue("ШкалаОценок", ШкалаОценок.Ссылка);
					Команда.Parameters.AddWithValue("ТиповаяАнкета", ТиповаяАнкета.Ссылка);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference126
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/
		////////////////////////////////////////////////////////////////////////////////
		// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
		// Процедура печати компетенции
		//
		// Параметры
		//  нет
		//

		public object Печать(/**/)
		{
			/*Линия = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);*/
			/*ТабДокумент = Новый ТабличныйДокумент;*/
			/*ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Компетенции";*/
			/*Макет = ПолучитьМакет("Макет");*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Шапка_Заголовок");*/
			/*ТабДокумент.Вывести(ОбластьМакета);*/
			/*ОбластьТабДокумента = ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,);*/
			/*ОбластьТабДокумента.ЦветФона		= ЦветаСтиля.ФонГруппировкиВерхнегоУровня;*/
			/*ОбластьТабДокумента.ГраницаСверху	= Линия;*/
			/*ОбластьТабДокумента.ГраницаСнизу	= Линия;*/
			/*ОбластьМакета = Макет.ПолучитьОбласть("Шапка_Компетенция");*/
			/*ОбластьМакета.Параметры.Компетенция		= Наименование;*/
			/*ТабДокумент.Вывести(ОбластьМакета);*/
			if(true/*Не ПустаяСтрока(ОписаниеКомпетенции)*/)
			{
				/*ОбластьМакета = Макет.ПолучитьОбласть("Шапка_ОписаниеКомпетенции");*/
				/*ОбластьМакета.Параметры.Описание	= ОписаниеКомпетенции;*/
				/*ТабДокумент.Вывести(ОбластьМакета);*/
			}
			if(true/*Не ШкалаОценок.Пустая()*/)
			{
				/*ОбластьМакета = Макет.ПолучитьОбласть("Шапка_Шкала");*/
				/*ОбластьМакета.Параметры.Шкала		= ШкалаОценок.Наименование;*/
				/*ТабДокумент.Вывести(ОбластьМакета);*/
				/*ОбластьМакета = Макет.ПолучитьОбласть("Оценка_Заголовок");*/
				/*ТабДокумент.Вывести(ОбластьМакета);*/
				/*ОбластьТабДокумента = ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,,ТабДокумент.ВысотаТаблицы,);*/
				/*ОбластьТабДокумента.ЦветФона		= ЦветаСтиля.ФонГруппировкиВерхнегоУровня;*/
				/*ОбластьТабДокумента.ГраницаСверху	= Линия;*/
				/*ОбластьТабДокумента.ГраницаСнизу	= Линия;*/
				/*ОбластьМакета = Макет.ПолучитьОбласть("Оценка_Данные");*/
				/*Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	КомпетенцииРаботниковОписаниеОценок.Оценка.Наименование КАК Оценка,
		|	КомпетенцииРаботниковОписаниеОценок.ОписаниеОценки КАК Описание
		|ИЗ
		|	Справочник.КомпетенцииРаботников.ОписаниеОценок КАК КомпетенцииРаботниковОписаниеОценок
		|
		|ГДЕ
		|	КомпетенцииРаботниковОписаниеОценок.Ссылка = &Ссылка И
		|	КомпетенцииРаботниковОписаниеОценок.Оценка <> &ПустаяОценка
		|
		|УПОРЯДОЧИТЬ ПО
		|	КомпетенцииРаботниковОписаниеОценок.НомерСтроки");*/
				/*Запрос.УстановитьПараметр("Ссылка",Ссылка);*/
				/*Запрос.УстановитьПараметр("ПустаяОценка",Справочники.СоставОценочныхШкалКомпетенций.ПустаяСсылка());*/
				/*Выборка = Запрос.Выполнить().Выбрать();*/
				while(true/*Выборка.Следующий()*/)
				{
					/*ОбластьМакета.Параметры.Заполнить(Выборка);*/
					/*ТабДокумент.Вывести(ОбластьМакета);*/
				}
				/*;;*/
			}
		}
		// Печать()
		// Процедура создает список оценок для ввода к ним описаний.
		//
		// Параметры:
		//  Нет.
		//
		// Возвращаемое значение:
		//  Нет.
		//

		public void ЗаполнитьОценки(/**/)
		{
			/*Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	СоставОценочныхШкалКомпетенций.Ссылка,
	|	СоставОценочныхШкалКомпетенций.ПриоритетОценки КАК ПриоритетОценки
	|ИЗ
	|	Справочник.СоставОценочныхШкалКомпетенций КАК СоставОценочныхШкалКомпетенций
	|
	|ГДЕ
	|	СоставОценочныхШкалКомпетенций.Владелец = &Владелец
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетОценки УБЫВ");*/
			/*Запрос.УстановитьПараметр("Владелец",ШкалаОценок);*/
			/*Выборка = Запрос.Выполнить().Выбрать();*/
			if(true/*Выборка.Количество() = 0*/)
			{
				/*ТекстСообщения = "В шкале оценок: """+ ШкалаОценок.Наименование +""" не введен список наименований оценок";*/
				/*Сообщить (ТекстСообщения);*/
			}
			if(true/*ОписаниеОценок.Количество() > 0*/)
			{
				/*// Перестройка шкалы оценок. 
*/
				/*// Найдем и удалим все строки таблицы, где не заполнено описание.
*/
				/*МассивСтрок = ОписаниеОценок.НайтиСтроки(Новый Структура("ОписаниеОценки",""));*/
				/*// "Обнулим" оставшиеся строки.
*/
				/*ТЗ = ОписаниеОценок.Выгрузить();*/
				/*ТЗ.ЗаполнитьЗначения(0,"ПриоритетОценки");*/
				/*ТЗ.ЗаполнитьЗначения(Справочники.ШкалыОценокКомпетенций.ПустаяСсылка(),"Оценка");*/
				/*ОписаниеОценок.Загрузить(ТЗ);*/
			}
			/*// Добавляем оценки в список.
*/
			while(true/*Выборка.Следующий()*/)
			{
				/*СтрокаТЧ = ОписаниеОценок.Добавить();*/
				/*СтрокаТЧ.Оценка 		 = Выборка.Ссылка;*/
				/*СтрокаТЧ.ПриоритетОценки = Выборка.ПриоритетОценки;*/
			}
			/*;;*/
		}
	}
}
