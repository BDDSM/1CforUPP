
using System;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	///<summary>
	///Каталоги на диске для хранения файлов
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class ТомаХраненияФайлов:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		[DataMember]
		[ProtoMember(3)]
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		[DataMember]
		[ProtoMember(4)]
		public bool ПометкаУдаления {get;set;}
		[DataMember]
		[ProtoMember(5)]
		public bool Предопределенный {get;set;}
		[DataMember]
		[ProtoMember(6)]
		public string/*9*/ Код {get;set;}
		[DataMember]
		[ProtoMember(7)]
		public string/*150*/ Наименование {get;set;}
		///<summary>
		///Описание тома
		///</summary>
		[DataMember]
		[ProtoMember(8)]
		public string/*(0)*/ Комментарий {get;set;}
		///<summary>
		///Максимальный размер файлов на томе, в Мб
		///</summary>
		[DataMember]
		[ProtoMember(9)]
		public decimal/*(10)*/ МаксимальныйРазмер {get;set;}//Максимальный размер
		///<summary>
		///Полный путь в Linux
		///</summary>
		[DataMember]
		[ProtoMember(10)]
		public string/*(0)*/ ПолныйПутьLinux {get;set;}//Полный путь linux
		///<summary>
		///Полный путь в UNC формате
		///</summary>
		[DataMember]
		[ProtoMember(11)]
		public string/*(0)*/ ПолныйПутьWindows {get;set;}//Полный путь windows
		///<summary>
		///Определяет порядок заполнения томов - начинаем с наименьшего
		///</summary>
		[DataMember]
		[ProtoMember(12)]
		public decimal/*(3)*/ ПорядокЗаполнения {get;set;}//Порядок заполнения
		public void Записать()
		{
			//Установка блокировки элемента на горизантально масштабированный кластер.
			//Опционально введение тайм аута на запись одного и того же объекта, не чаще раза в 5-секунд. Защита от спама. упращение алгоритма блокировки.
			//Выделение сервиса для блокировки элемента и генерации кода
			//Выполнение операций контроля без обращений к sql-серверу.
			//Контроль конфликта блокировок.
			//Контроль загрузки булкинсертом гетерогенной коллекции.
			//Контроль уникальности кода для справочников.
			//Контроль уникальности номера для документов, в границах префикса.
			//Контроль владельца, он не может быть группой.
			//Контроль владельца он должен быть задан.
			//Контроль родителя он должен быть группой.
			//Контроль количества уровней, должен соотвествовать метаданным.
			//Контроль версии, объект не должен был быть записан перед чтением текущей записи, алгоритм версионника.
			//Контроль уникальности ссылки
			//Контроль зацикливания
			//Опционально контроль битых ссылок.
			//Соблюдейние транзакционности. ПередЗаписью. Открытие транзации. Валидации. ПриЗаписи. Фиксация транзакции. Информирование о записи элемента.
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference271(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Code
						,_Description
						,_Fld3985
						,_Fld3986
						,_Fld3987
						,_Fld3988
						,_Fld3989)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Код
						,@Наименование
						,@Комментарий
						,@МаксимальныйРазмер
						,@ПолныйПутьLinux
						,@ПолныйПутьWindows
						,@ПорядокЗаполнения)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference271
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_Code	= @Код
						,_Description	= @Наименование
						,_Fld3985	= @Комментарий
						,_Fld3986	= @МаксимальныйРазмер
						,_Fld3987	= @ПолныйПутьLinux
						,_Fld3988	= @ПолныйПутьWindows
						,_Fld3989	= @ПорядокЗаполнения
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.Parameters.AddWithValue("МаксимальныйРазмер", МаксимальныйРазмер);
					Команда.Parameters.AddWithValue("ПолныйПутьLinux", ПолныйПутьLinux);
					Команда.Parameters.AddWithValue("ПолныйПутьWindows", ПолныйПутьWindows);
					Команда.Parameters.AddWithValue("ПорядокЗаполнения", ПорядокЗаполнения);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference271
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/

		public void ОбработкаПроверкиЗаполнения(/*Отказ, ПроверяемыеРеквизиты*/)
		{
			if(true/*Не НомерПорядкаУникален(ПорядокЗаполнения, Ссылка)*/)
			{
				//Отказ = Истина;
				//ТекстОшибки = НСтр("ru = 'Порядок заполнения не уникален - в системе уже есть том с таким порядком'");
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПорядокЗаполнения", "Объект");
			}
			if(true/*ПустаяСтрока(ПолныйПутьWindows) И ПустаяСтрока(ПолныйПутьLinux)*/)
			{
				//ТекстОшибки = НСтр("ru = 'Не заполнен полный путь'");
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПолныйПутьWindows", "Объект");
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПолныйПутьLinux", "Объект");
			}
			if(true/*Не ПустаяСтрока(ПолныйПутьWindows) И (Лев(ПолныйПутьWindows, 2) <> "\\" ИЛИ Найти(ПолныйПутьWindows, ":") <> 0)*/)
			{
				//Отказ = Истина;
				//ТекстОшибки = НСтр("ru = 'Путь к тому должен быть в формате UNC (\\servername\resource) '");
				//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "ПолныйПутьWindows", "Объект");
			}
			//ИмяПоляСПолнымПутем = "";
			if(true/*МаксимальныйРазмер <> 0*/)
			{
				//ТекущийРазмерВБайтах = 0;
				if(true/*Не Ссылка.Пустая()*/)
				{
					//ТекущийРазмерВБайтах = ФайловыеФункции.ПодсчитатьРазмерФайловНаТоме(Ссылка);
				}
				//ТекущийРазмер = ТекущийРазмерВБайтах / (1024 * 1024);
				if(true/*МаксимальныйРазмер < ТекущийРазмер*/)
				{
					//Отказ = Истина;
					//ТекстОшибки = НСтр("ru = 'Максимальный размер тома меньше, чем текущий размер'");
					//ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки, , "МаксимальныйРазмер", "Объект");
				}
			}
		}
		// Возвращает Ложь, если есть том с таким порядком

		public object НомерПорядкаУникален(/*ПорядокЗаполнения, СсылкаНаТом*/)
		{
			//Запрос = Новый Запрос;
			/*Запрос.Текст = "ВЫБРАТЬ
				   |	КОЛИЧЕСТВО(Тома.ПорядокЗаполнения) КАК Количество
				   |ИЗ
				   |	Справочник.ТомаХраненияФайлов КАК Тома
				   |ГДЕ
				   |	Тома.ПорядокЗаполнения = &ПорядокЗаполнения
				   |И   Тома.Ссылка <> &СсылкаНаТом";*/
			//Запрос.Параметры.Вставить("ПорядокЗаполнения", ПорядокЗаполнения);
			//Запрос.Параметры.Вставить("СсылкаНаТом", СсылкаНаТом);
			//Выборка = Запрос.Выполнить().Выбрать();
			if(true/*Выборка.Следующий()*/)
			{
				if(true/*Выборка.Количество = 0*/)
				{
				}
			}
			return null;
		}
		// НайтиМаксимальныйНомерВерсии
	}
}