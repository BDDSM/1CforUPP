
using System;
using System.Data.SqlClient;
using V82;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	public partial class СоглашенияОбИспользованииЭД:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*100*/ Наименование;
		public string/*(9)*/ Номер;
		public DateTime Дата;
		public V82.Перечисления/*Ссылка*/.СпособыОбменаЭД СпособОбменаЭД;//Способ обмена
		public V82.Перечисления/*Ссылка*/.СтатусыСоглашенийЭД СтатусСоглашения;//Статус соглашения
		public V82.СправочникиСсылка.Организации Организация;
		public V82.СправочникиСсылка.Контрагенты Контрагент;
		public string/*(10)*/ Партнер;
		public string/*(50)*/ ИдентификаторОрганизации;//Идентификатор
		public string/*(50)*/ ИдентификаторКонтрагента;//Идентификатор контрагента
		public V82.СправочникиСсылка.СертификатыЭЦП СертификатОрганизацииДляРасшифровки;//Сертификат расшифровки
		public ХранилищеЗначения СертификатКонтрагентаДляШифрования;//Сертификат для шифрования
		public object АдресРесурсаОрганизации;//Адрес ресурса организации
		public string/*(255)*/ АдресРесурсаКонтрагента;//Адрес ресурса контрагента
		public DateTime СрокДействия;//Срок действия
		public V82.СправочникиСсылка.Пользователи Ответственный;//Ответственный за обмен
		public string/*(0)*/ Комментарий;
		public V82.СправочникиСсылка.СоглашенияОбИспользованииЭД ТиповоеСоглашение;//Типовое соглашение
		public bool ПроверятьСертификатыПодписей;//Проверять сертификаты подписей
		public bool ЭтоТиповое;//Это типовое
		public bool ЭтоИнтеркампани;//Это обмен между организациями
		public V82.СправочникиСсылка.СертификатыЭЦП СертификатАбонента;//Сертификат
		public string/*(100)*/ ЛогинАбонента;//Логин абонента
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference232(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Description
						,_Fld3442
						,_Fld3443
						,_Fld3444RRef
						,_Fld3445RRef
						,_Fld3446RRef
						,_Fld3447RRef
						,_Fld3448
						,_Fld3449
						,_Fld3450
						,_Fld3451RRef
						,_Fld3452
						,_Fld3453
						,_Fld3454
						,_Fld3455
						,_Fld3456RRef
						,_Fld3457
						,_Fld3458RRef
						,_Fld3459
						,_Fld3460
						,_Fld3461
						,_Fld3462RRef
						,_Fld3463)
						Values (
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Наименование
						,@Номер
						,@Дата
						,@СпособОбменаЭД
						,@СтатусСоглашения
						,@Организация
						,@Контрагент
						,@Партнер
						,@ИдентификаторОрганизации
						,@ИдентификаторКонтрагента
						,@СертификатОрганизацииДляРасшифровки
						,@СертификатКонтрагентаДляШифрования
						,@АдресРесурсаОрганизации
						,@АдресРесурсаКонтрагента
						,@СрокДействия
						,@Ответственный
						,@Комментарий
						,@ТиповоеСоглашение
						,@ПроверятьСертификатыПодписей
						,@ЭтоТиповое
						,@ЭтоИнтеркампани
						,@СертификатАбонента
						,@ЛогинАбонента)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference232
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_Description	= @Наименование
						,_Fld3442	= @Номер
						,_Fld3443	= @Дата
						,_Fld3444RRef	= @СпособОбменаЭД
						,_Fld3445RRef	= @СтатусСоглашения
						,_Fld3446RRef	= @Организация
						,_Fld3447RRef	= @Контрагент
						,_Fld3448	= @Партнер
						,_Fld3449	= @ИдентификаторОрганизации
						,_Fld3450	= @ИдентификаторКонтрагента
						,_Fld3451RRef	= @СертификатОрганизацииДляРасшифровки
						,_Fld3452	= @СертификатКонтрагентаДляШифрования
						,_Fld3453	= @АдресРесурсаОрганизации
						,_Fld3454	= @АдресРесурсаКонтрагента
						,_Fld3455	= @СрокДействия
						,_Fld3456RRef	= @Ответственный
						,_Fld3457	= @Комментарий
						,_Fld3458RRef	= @ТиповоеСоглашение
						,_Fld3459	= @ПроверятьСертификатыПодписей
						,_Fld3460	= @ЭтоТиповое
						,_Fld3461	= @ЭтоИнтеркампани
						,_Fld3462RRef	= @СертификатАбонента
						,_Fld3463	= @ЛогинАбонента
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("Номер", Номер);
					Команда.Parameters.AddWithValue("Дата", Дата);
					Команда.Parameters.AddWithValue("СпособОбменаЭД", СпособОбменаЭД.Ключ());
					Команда.Parameters.AddWithValue("СтатусСоглашения", СтатусСоглашения.Ключ());
					Команда.Parameters.AddWithValue("Организация", Организация.Ссылка);
					Команда.Parameters.AddWithValue("Контрагент", Контрагент.Ссылка);
					Команда.Parameters.AddWithValue("Партнер", Партнер);
					Команда.Parameters.AddWithValue("ИдентификаторОрганизации", ИдентификаторОрганизации);
					Команда.Parameters.AddWithValue("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
					Команда.Parameters.AddWithValue("СертификатОрганизацииДляРасшифровки", СертификатОрганизацииДляРасшифровки.Ссылка);
					Команда.Parameters.AddWithValue("АдресРесурсаОрганизации", АдресРесурсаОрганизации);
					Команда.Parameters.AddWithValue("АдресРесурсаКонтрагента", АдресРесурсаКонтрагента);
					Команда.Parameters.AddWithValue("СрокДействия", СрокДействия);
					Команда.Parameters.AddWithValue("Ответственный", Ответственный.Ссылка);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.Parameters.AddWithValue("ТиповоеСоглашение", ТиповоеСоглашение.Ссылка);
					Команда.Parameters.AddWithValue("ПроверятьСертификатыПодписей", ПроверятьСертификатыПодписей);
					Команда.Parameters.AddWithValue("ЭтоТиповое", ЭтоТиповое);
					Команда.Parameters.AddWithValue("ЭтоИнтеркампани", ЭтоИнтеркампани);
					Команда.Parameters.AddWithValue("СертификатАбонента", СертификатАбонента.Ссылка);
					Команда.Parameters.AddWithValue("ЛогинАбонента", ЛогинАбонента);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference232
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/

		public void ОбработкаПроверкиЗаполнения(/*Отказ, ПроверяемыеРеквизиты*/)
		{
			/*МассивНепроверяемыхРеквизитов = Новый Массив;*/
			if(true/*СтатусСоглашения <> Перечисления.СтатусыСоглашенийЭД.Действует*/)
			{
				/*МассивНепроверяемыхРеквизитов.Добавить("Организация");*/
				/*МассивНепроверяемыхРеквизитов.Добавить("Контрагент");*/
				/*МассивНепроверяемыхРеквизитов.Добавить("ИдентификаторОрганизации");*/
				/*МассивНепроверяемыхРеквизитов.Добавить("ИдентификаторКонтрагента");*/
				/*МассивНепроверяемыхРеквизитов.Добавить("АдресРесурсаОрганизации");*/
				/*МассивНепроверяемыхРеквизитов.Добавить("АдресРесурсаКонтрагента");*/
				/*МассивНепроверяемыхРеквизитов.Добавить("СертификатАбонента");*/
				/*МассивНепроверяемыхРеквизитов.Добавить("Ответственный");*/
			}
			/*ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);*/
		}
	}
}
