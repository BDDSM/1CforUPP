
using System;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	[ProtoContract]
	[DataContract]
	public partial class СоглашенияОбИспользованииЭД:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		[DataMember]
		[ProtoMember(3)]
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		[DataMember]
		[ProtoMember(4)]
		public bool ПометкаУдаления {get;set;}
		[DataMember]
		[ProtoMember(5)]
		public bool Предопределенный {get;set;}
		[DataMember]
		[ProtoMember(6)]
		public string/*100*/ Наименование {get;set;}
		[DataMember]
		[ProtoMember(7)]
		public string/*(9)*/ Номер {get;set;}
		[DataMember]
		[ProtoMember(8)]
		public DateTime Дата {get;set;}
		[DataMember]
		[ProtoMember(9)]
		public V82.Перечисления/*Ссылка*/.СпособыОбменаЭД СпособОбменаЭД {get;set;}//Способ обмена
		[DataMember]
		[ProtoMember(10)]
		public V82.Перечисления/*Ссылка*/.СтатусыСоглашенийЭД СтатусСоглашения {get;set;}//Статус соглашения
		[DataMember]
		[ProtoMember(11)]
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		[DataMember]
		[ProtoMember(12)]
		public V82.СправочникиСсылка.Контрагенты Контрагент {get;set;}
		[DataMember]
		[ProtoMember(13)]
		public string/*(10)*/ Партнер {get;set;}
		[DataMember]
		[ProtoMember(14)]
		public string/*(50)*/ ИдентификаторОрганизации {get;set;}//Идентификатор
		[DataMember]
		[ProtoMember(15)]
		public string/*(50)*/ ИдентификаторКонтрагента {get;set;}//Идентификатор контрагента
		[DataMember]
		[ProtoMember(16)]
		public V82.СправочникиСсылка.СертификатыЭЦП СертификатОрганизацииДляРасшифровки {get;set;}//Сертификат расшифровки
		[DataMember]
		[ProtoMember(17)]
		public ХранилищеЗначения СертификатКонтрагентаДляШифрования {get;set;}//Сертификат для шифрования
		[DataMember]
		[ProtoMember(18)]
		public object АдресРесурсаОрганизации {get;set;}//Адрес ресурса организации
		[DataMember]
		[ProtoMember(19)]
		public string/*(255)*/ АдресРесурсаКонтрагента {get;set;}//Адрес ресурса контрагента
		[DataMember]
		[ProtoMember(20)]
		public DateTime СрокДействия {get;set;}//Срок действия
		[DataMember]
		[ProtoMember(21)]
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}//Ответственный за обмен
		[DataMember]
		[ProtoMember(22)]
		public string/*(0)*/ Комментарий {get;set;}
		[DataMember]
		[ProtoMember(23)]
		public V82.СправочникиСсылка.СоглашенияОбИспользованииЭД ТиповоеСоглашение {get;set;}//Типовое соглашение
		[DataMember]
		[ProtoMember(24)]
		public bool ПроверятьСертификатыПодписей {get;set;}//Проверять сертификаты подписей
		[DataMember]
		[ProtoMember(25)]
		public bool ЭтоТиповое {get;set;}//Это типовое
		[DataMember]
		[ProtoMember(26)]
		public bool ЭтоИнтеркампани {get;set;}//Это обмен между организациями
		[DataMember]
		[ProtoMember(27)]
		public V82.СправочникиСсылка.СертификатыЭЦП СертификатАбонента {get;set;}//Сертификат
		[DataMember]
		[ProtoMember(28)]
		public string/*(100)*/ ЛогинАбонента {get;set;}//Логин абонента
		public void Записать()
		{
			//Установка блокировки элемента на горизантально масштабированный кластер.
			//Опционально введение тайм аута на запись одного и того же объекта, не чаще раза в 5-секунд. Защита от спама. упращение алгоритма блокировки.
			//Выделение сервиса для блокировки элемента и генерации кода
			//Выполнение операций контроля без обращений к sql-серверу.
			//Контроль конфликта блокировок.
			//Контроль загрузки булкинсертом гетерогенной коллекции.
			//Контроль уникальности кода для справочников.
			//Контроль уникальности номера для документов, в границах префикса.
			//Контроль владельца, он не может быть группой.
			//Контроль владельца он должен быть задан.
			//Контроль родителя он должен быть группой.
			//Контроль количества уровней, должен соотвествовать метаданным.
			//Контроль версии, объект не должен был быть записан перед чтением текущей записи, алгоритм версионника.
			//Контроль уникальности ссылки
			//Контроль зацикливания
			//Опционально контроль битых ссылок.
			//Соблюдейние транзакционности. ПередЗаписью. Открытие транзации. Валидации. ПриЗаписи. Фиксация транзакции. Информирование о записи элемента.
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference23128(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Description
						,_Fld23769
						,_Fld23770
						,_Fld23771RRef
						,_Fld23772RRef
						,_Fld23773RRef
						,_Fld23774RRef
						,_Fld23775
						,_Fld23776
						,_Fld23777
						,_Fld23778RRef
						,_Fld23779
						,_Fld23781
						,_Fld23782
						,_Fld23783RRef
						,_Fld23784
						,_Fld23785RRef
						,_Fld23786
						,_Fld23787
						,_Fld23788
						,_Fld23789RRef
						,_Fld23790)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Наименование
						,@Номер
						,@Дата
						,@СпособОбменаЭД
						,@СтатусСоглашения
						,@Организация
						,@Контрагент
						,@Партнер
						,@ИдентификаторОрганизации
						,@ИдентификаторКонтрагента
						,@СертификатОрганизацииДляРасшифровки
						,@СертификатКонтрагентаДляШифрования
						,@АдресРесурсаКонтрагента
						,@СрокДействия
						,@Ответственный
						,@Комментарий
						,@ТиповоеСоглашение
						,@ПроверятьСертификатыПодписей
						,@ЭтоТиповое
						,@ЭтоИнтеркампани
						,@СертификатАбонента
						,@ЛогинАбонента)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference23128
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_Description	= @Наименование
						,_Fld23769	= @Номер
						,_Fld23770	= @Дата
						,_Fld23771RRef	= @СпособОбменаЭД
						,_Fld23772RRef	= @СтатусСоглашения
						,_Fld23773RRef	= @Организация
						,_Fld23774RRef	= @Контрагент
						,_Fld23775	= @Партнер
						,_Fld23776	= @ИдентификаторОрганизации
						,_Fld23777	= @ИдентификаторКонтрагента
						,_Fld23778RRef	= @СертификатОрганизацииДляРасшифровки
						,_Fld23779	= @СертификатКонтрагентаДляШифрования
						,_Fld23781	= @АдресРесурсаКонтрагента
						,_Fld23782	= @СрокДействия
						,_Fld23783RRef	= @Ответственный
						,_Fld23784	= @Комментарий
						,_Fld23785RRef	= @ТиповоеСоглашение
						,_Fld23786	= @ПроверятьСертификатыПодписей
						,_Fld23787	= @ЭтоТиповое
						,_Fld23788	= @ЭтоИнтеркампани
						,_Fld23789RRef	= @СертификатАбонента
						,_Fld23790	= @ЛогинАбонента
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("Номер", Номер);
					Команда.Parameters.AddWithValue("Дата", Дата);
					Команда.Parameters.AddWithValue("СпособОбменаЭД", СпособОбменаЭД.Ключ());
					Команда.Parameters.AddWithValue("СтатусСоглашения", СтатусСоглашения.Ключ());
					Команда.Parameters.AddWithValue("Организация", Организация.Ссылка);
					Команда.Parameters.AddWithValue("Контрагент", Контрагент.Ссылка);
					Команда.Parameters.AddWithValue("Партнер", Партнер);
					Команда.Parameters.AddWithValue("ИдентификаторОрганизации", ИдентификаторОрганизации);
					Команда.Parameters.AddWithValue("ИдентификаторКонтрагента", ИдентификаторКонтрагента);
					Команда.Parameters.AddWithValue("СертификатОрганизацииДляРасшифровки", СертификатОрганизацииДляРасшифровки.Ссылка);
					Команда.Parameters.AddWithValue("СертификатКонтрагентаДляШифрования",new byte[0]);
					Команда.Parameters.AddWithValue("АдресРесурсаКонтрагента", АдресРесурсаКонтрагента);
					Команда.Parameters.AddWithValue("СрокДействия", СрокДействия);
					Команда.Parameters.AddWithValue("Ответственный", Ответственный.Ссылка);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.Parameters.AddWithValue("ТиповоеСоглашение", ТиповоеСоглашение.Ссылка);
					Команда.Parameters.AddWithValue("ПроверятьСертификатыПодписей", ПроверятьСертификатыПодписей);
					Команда.Parameters.AddWithValue("ЭтоТиповое", ЭтоТиповое);
					Команда.Parameters.AddWithValue("ЭтоИнтеркампани", ЭтоИнтеркампани);
					Команда.Parameters.AddWithValue("СертификатАбонента", СертификатАбонента.Ссылка);
					Команда.Parameters.AddWithValue("ЛогинАбонента", ЛогинАбонента);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference23128
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/

		public void ОбработкаПроверкиЗаполнения(/*Отказ, ПроверяемыеРеквизиты*/)
		{
			//МассивНепроверяемыхРеквизитов = Новый Массив;
			if(true/*СтатусСоглашения <> Перечисления.СтатусыСоглашенийЭД.Действует*/)
			{
				//МассивНепроверяемыхРеквизитов.Добавить("Организация");
				//МассивНепроверяемыхРеквизитов.Добавить("Контрагент");
				//МассивНепроверяемыхРеквизитов.Добавить("ИдентификаторОрганизации");
				//МассивНепроверяемыхРеквизитов.Добавить("ИдентификаторКонтрагента");
				//МассивНепроверяемыхРеквизитов.Добавить("АдресРесурсаОрганизации");
				//МассивНепроверяемыхРеквизитов.Добавить("АдресРесурсаКонтрагента");
				//МассивНепроверяемыхРеквизитов.Добавить("СертификатАбонента");
				//МассивНепроверяемыхРеквизитов.Добавить("Ответственный");
			}
			//ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, МассивНепроверяемыхРеквизитов);
		}
	}
}