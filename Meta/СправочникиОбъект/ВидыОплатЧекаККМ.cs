
using System;
using System.Data.SqlClient;
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	///<summary>
	///(Общ)
	///</summary>
	public partial class ВидыОплатЧекаККМ:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*9*/ Код;
		public string/*50*/ Наименование;
		public V82.Перечисления/*Ссылка*/.ТипыОплатЧекаККМ ТипОплаты;//Тип оплаты
		public V82.СправочникиСсылка.Контрагенты БанкКредитор;//Банк-кредитор
		public V82.СправочникиСсылка.ДоговорыКонтрагентов ДоговорВзаиморасчетовБанкаКредитора;//Договор взаиморасчетов банка-кредитора
		public decimal/*(5.2)*/ ПроцентБанковскойКомиссии;//Процент банковской комиссии
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference59(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_ParentIDRRef
						,_Folder
						,_Code
						,_Description
						,_Fld1953RRef
						,_Fld1954RRef
						,_Fld1955RRef
						,_Fld1956)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Родитель
						,@ЭтоГруппа
						,@Код
						,@Наименование
						,@ТипОплаты
						,@БанкКредитор
						,@ДоговорВзаиморасчетовБанкаКредитора
						,@ПроцентБанковскойКомиссии)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference59
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_ParentIDRRef	= @Родитель
						,_Folder	= @ЭтоГруппа
						,_Code	= @Код
						,_Description	= @Наименование
						,_Fld1953RRef	= @ТипОплаты
						,_Fld1954RRef	= @БанкКредитор
						,_Fld1955RRef	= @ДоговорВзаиморасчетовБанкаКредитора
						,_Fld1956	= @ПроцентБанковскойКомиссии
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Родитель", Родитель);
					Команда.Parameters.AddWithValue("ЭтоГруппа", ЭтоГруппа?new byte[]{0}:new byte[]{1});
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ТипОплаты", ТипОплаты.Ключ());
					Команда.Parameters.AddWithValue("БанкКредитор", БанкКредитор.Ссылка);
					Команда.Parameters.AddWithValue("ДоговорВзаиморасчетовБанкаКредитора", ДоговорВзаиморасчетовБанкаКредитора.Ссылка);
					Команда.Parameters.AddWithValue("ПроцентБанковскойКомиссии", ПроцентБанковскойКомиссии);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference59
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/
		// Обработчик события "ПередЗаписью" объекта.
		//

		public void ПередЗаписью(/*Отказ*/)
		{
			if(true/*Не (ЭтоГруппа Или ОбменДанными.Загрузка)*/)
			{
				if(true/*НЕ ЗначениеЗаполнено(ТипОплаты)*/)
				{
					//СтрокаСообщения = "Не заполнено значение реквизита ""Тип оплаты""!";
					//ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, "Справочник: Виды оплат чека ККМ");
				}
				if(true/*ТипОплаты = Перечисления.ТипыОплатЧекаККМ.БанковскийКредит*/)
				{
					if(true/*НЕ ЗначениеЗаполнено(БанкКредитор)*/)
					{
						//СтрокаСообщения = "Не заполнено значение реквизита ""Банк-кредитор""!";
						//ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, "Справочник: Виды оплат чека ККМ");
					}
					if(true/*НЕ ЗначениеЗаполнено(ДоговорВзаиморасчетовБанкаКредитора)*/)
					{
						//СтрокаСообщения = "Не заполнено значение реквизита ""Договор взаиморасчетов""!";
						//ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, "Справочник: Виды оплат чека ККМ");
					}
					if(true/*НЕ ЗначениеЗаполнено(ПроцентБанковскойКомиссии)*/)
					{
						//СтрокаСообщения = "Не заполнено значение реквизита ""Процент банковской комиссии""!";
						//ОбщегоНазначения.СообщитьОбОшибке(СтрокаСообщения, Отказ, "Справочник: Виды оплат чека ККМ");
					}
				}
			}
		}
	}
}