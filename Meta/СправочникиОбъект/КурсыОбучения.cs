
using System;
using System.Data.SqlClient;
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	public partial class КурсыОбучения:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*150*/ Наименование;
		public string/*(0)*/ ОписаниеКурса;//Описание курса
		///<summary>
		///Длительность курса в часах
		///</summary>
		public decimal/*(8.2)*/ ДлительностьКурса;//Длительность курса
		///<summary>
		///Средний размер затрат на обучение одного сотрудника на данном курсе
		///</summary>
		public decimal/*(10.2)*/ ЗатратыНаОдногоОбучающегося;//Затраты на одного обучающегося
		///<summary>
		///Вид выдаваемого документа после обучения
		///</summary>
		public V82.СправочникиСсылка.ДокументыОбОбразовании ВидДокументаОбОбразовании;//Вид документа об образовании
		public V82.СправочникиСсылка.Валюты Валюта;
		public bool ОтражатьВРегУчете;//Отражать в рег учете
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference132(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_ParentIDRRef
						,_Folder
						,_Description
						,_Fld2505
						,_Fld2506
						,_Fld2507
						,_Fld2508RRef
						,_Fld2509RRef
						,_Fld2510)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Родитель
						,@ЭтоГруппа
						,@Наименование
						,@ОписаниеКурса
						,@ДлительностьКурса
						,@ЗатратыНаОдногоОбучающегося
						,@ВидДокументаОбОбразовании
						,@Валюта
						,@ОтражатьВРегУчете)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference132
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_ParentIDRRef	= @Родитель
						,_Folder	= @ЭтоГруппа
						,_Description	= @Наименование
						,_Fld2505	= @ОписаниеКурса
						,_Fld2506	= @ДлительностьКурса
						,_Fld2507	= @ЗатратыНаОдногоОбучающегося
						,_Fld2508RRef	= @ВидДокументаОбОбразовании
						,_Fld2509RRef	= @Валюта
						,_Fld2510	= @ОтражатьВРегУчете
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Родитель", Родитель);
					Команда.Parameters.AddWithValue("ЭтоГруппа", ЭтоГруппа?new byte[]{0}:new byte[]{1});
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ОписаниеКурса", ОписаниеКурса);
					Команда.Parameters.AddWithValue("ДлительностьКурса", ДлительностьКурса);
					Команда.Parameters.AddWithValue("ЗатратыНаОдногоОбучающегося", ЗатратыНаОдногоОбучающегося);
					Команда.Parameters.AddWithValue("ВидДокументаОбОбразовании", ВидДокументаОбОбразовании.Ссылка);
					Команда.Parameters.AddWithValue("Валюта", Валюта.Ссылка);
					Команда.Parameters.AddWithValue("ОтражатьВРегУчете", ОтражатьВРегУчете);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference132
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/
		////////////////////////////////////////////////////////////////////////////////
		// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА
		// Печать курса обучения
		//
		// Параметры
		//  Нет
		//

		public object Печать(/**/)
		{
			//ТабДокумент = Новый ТабличныйДокумент;
			//ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КурсОбучения";
			//Макет = ПолучитьМакет("Макет");
			//ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
			//ОбластьМакета.Параметры.Заполнить(ЭтотОбъект);
			if(true/*НЕ ЗначениеЗаполнено(ВидДокументаОбОбразовании)*/)
			{
				//ОбластьМакета.Параметры.ВидДокументаОбОбразовании = "документы не выдаются";
			}
			//ТабДокумент.Вывести(ОбластьМакета);
			/*// группа компетенций 
*/
			//ТабДокумент.НачатьГруппуСтрок("Компетенции",Истина);
			//ТабДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаСтрокКомпетенций"));
			//ОбластьМакета = Макет.ПолучитьОбласть("СтрокаКомпетенции");
			//ТабДокумент.ЗакончитьГруппуСтрок();
			/*// группа форм обучения
*/
			/*// Эти части имеет смысл выводить, если есть хотя бы одно занятие.
*/
			if(true/*ЗанятияКурса.Количество() > 0*/)
			{
				//ТабДокумент.Вывести(Макет.ПолучитьОбласть("СоставПоФормеОбучения"));
				//ТабДокумент.НачатьГруппуСтрок("Формы",Истина);
				//ТабДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаСоставПоФормеОбучения"));
				//Запрос = Новый Запрос();
				//Запрос.УстановитьПараметр("Ссылка",Ссылка);
				/*Запрос.Текст =  
		"ВЫБРАТЬ
		|	СУММА(КурсыОбученияЗанятияКурса.Занятие.ДлительностьЗанятия) КАК Длительность,
		|	ЕСТЬNULL(КурсыОбученияЗанятияКурса.Занятие.ВидЗанятия.Наименование, ""форма обучения не указана"") КАК ФормаОбучения
		|ИЗ
		|	Справочник.КурсыОбучения.ЗанятияКурса КАК КурсыОбученияЗанятияКурса
		|ГДЕ
		|	КурсыОбученияЗанятияКурса.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	КурсыОбученияЗанятияКурса.Занятие.ВидЗанятия";*/
				//ТабФормОбучения = Запрос.Выполнить().Выгрузить();
				//ОбластьМакета = Макет.ПолучитьОбласть("СтрокаФормыОбучения");
				//ТабДокумент.ЗакончитьГруппуСтрок();
				/*// занятия
*/
				//ТабДокумент.Вывести(Макет.ПолучитьОбласть("ШапкаЗанятия"));
				/*Запрос.Текст =  
		"ВЫБРАТЬ
		|	КурсыОбученияЗанятияКурса.Занятие.Наименование КАК Занятие,
		|	КурсыОбученияЗанятияКурса.Занятие.ДлительностьЗанятия КАК Длительность,
		|	ЕСТЬNULL(КурсыОбученияЗанятияКурса.Занятие.ВидЗанятия.Наименование, ""форма обучения не указана"") КАК ФормаОбучения
		|ИЗ
		|	Справочник.КурсыОбучения.ЗанятияКурса КАК КурсыОбученияЗанятияКурса
		|ГДЕ
		|	КурсыОбученияЗанятияКурса.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	КурсыОбученияЗанятияКурса.НомерСтроки";*/
				//ТабЗанятияКурса = Запрос.Выполнить().Выгрузить();
				//ОбластьМакета = Макет.ПолучитьОбласть("СтрокаЗанятия");
			}
			/*// Вывод если есть занятия
*/
			return null;
		}
	}
}