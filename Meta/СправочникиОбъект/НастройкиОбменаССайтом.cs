
using System;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	[ProtoContract]
	[DataContract]
	public partial class НастройкиОбменаССайтом:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		[DataMember]
		[ProtoMember(3)]
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		[DataMember]
		[ProtoMember(4)]
		public bool ПометкаУдаления {get;set;}
		[DataMember]
		[ProtoMember(5)]
		public bool Предопределенный {get;set;}
		[DataMember]
		[ProtoMember(6)]
		public string/*3*/ Код {get;set;}
		[DataMember]
		[ProtoMember(7)]
		public string/*50*/ Наименование {get;set;}
		[DataMember]
		[ProtoMember(8)]
		public bool ОбменТоварами {get;set;}//Обмен товарами
		[DataMember]
		[ProtoMember(9)]
		public bool ОбменЗаказами {get;set;}//Обмен заказами
		[DataMember]
		[ProtoMember(10)]
		public object УзелОбменаТоварами {get;set;}//Узел обмена товарами
		[DataMember]
		[ProtoMember(11)]
		public object УзелОбменаЗаказами {get;set;}//Узел обмена заказами
		[DataMember]
		[ProtoMember(12)]
		public bool ВыгружатьТолькоИзменения {get;set;}//Выгружать только изменения
		[DataMember]
		[ProtoMember(13)]
		public bool ВыгружатьНаСайт {get;set;}//Выгружать на сайт
		[DataMember]
		[ProtoMember(14)]
		public string/*(0)*/ КаталогВыгрузки {get;set;}//Каталог выгрузки
		[DataMember]
		[ProtoMember(15)]
		public string/*(255)*/ HTTPОбменАдресСайта {get;set;}//HTTP адрес раздела сайта для обмена
		[DataMember]
		[ProtoMember(16)]
		public string/*(255)*/ HTTPОбменИмяПользователя {get;set;}//HTTP обмен имя пользователя
		[DataMember]
		[ProtoMember(17)]
		public string/*(255)*/ HTTPОбменПароль {get;set;}//HTTP обмен пароль
		[DataMember]
		[ProtoMember(18)]
		public bool HTTPОбменПроксиИспользование {get;set;}//Использовать прокси-сервер
		[DataMember]
		[ProtoMember(19)]
		public string/*(255)*/ HTTPОбменПроксиСервер {get;set;}//Имя или адрес сервера
		[DataMember]
		[ProtoMember(20)]
		public decimal/*(5)*/ HTTPОбменПроксиПорт {get;set;}//Порт прокси-сервера
		[DataMember]
		[ProtoMember(21)]
		public string/*(255)*/ HTTPОбменПроксиИмяПользователя {get;set;}//Имя пользователя прокси
		[DataMember]
		[ProtoMember(22)]
		public string/*(255)*/ HTTPОбменПроксиПароль {get;set;}//Пароль пользователя прокси-сервера
		[DataMember]
		[ProtoMember(23)]
		public V82.СправочникиСсылка.Контрагенты ГруппаДляНовыхКонтрагентов {get;set;}//Группа для новых контрагентов
		[DataMember]
		[ProtoMember(24)]
		public V82.СправочникиСсылка.Номенклатура ГруппаДляНовойНоменклатуры {get;set;}//Группа для новой номенклатуры
		[DataMember]
		[ProtoMember(25)]
		public V82.СправочникиСсылка.Организации Организация {get;set;}
		[DataMember]
		[ProtoMember(26)]
		public V82.СправочникиСсылка.Пользователи Ответственный {get;set;}
		[DataMember]
		[ProtoMember(27)]
		public V82.СправочникиСсылка.Подразделения Подразделение {get;set;}
		[DataMember]
		[ProtoMember(28)]
		public bool ЗаписыватьДокументыТекущейДатой {get;set;}//Записывать документы текущей датой
		[DataMember]
		[ProtoMember(29)]
		public bool ПроводитьДокументы {get;set;}//Проводить документы
		[DataMember]
		[ProtoMember(30)]
		public bool ПроводитьДокументыОперативно {get;set;}//Проводить документы оперативно
		[DataMember]
		[ProtoMember(31)]
		public string/*(12)*/ СпособИдентификацииКонтрагентов {get;set;}//Способ идентификации контрагентов
		[DataMember]
		[ProtoMember(32)]
		public V82.СправочникиСсылка.КлассификаторЕдиницИзмерения ЕдиницаИзмеренияНовойНоменклатуры {get;set;}//Единица измерения новой номенклатуры
		[DataMember]
		[ProtoMember(33)]
		public ХранилищеЗначения СохраненныеНастройкиПостроителя {get;set;}
		[DataMember]
		[ProtoMember(34)]
		public bool ВыгружатьКартинки {get;set;}//Выгружать картинки
		[DataMember]
		[ProtoMember(35)]
		public string/*(0)*/ Комментарий {get;set;}
		[DataMember]
		[ProtoMember(36)]
		public string/*(40)*/ РегламентноеЗадание {get;set;}//Регламентное задание
		[DataMember]
		[ProtoMember(37)]
		public bool ИспользоватьРегламентныеЗадания {get;set;}//Использовать регламентные задания
		public void Записать()
		{
			//Установка блокировки элемента на горизантально масштабированный кластер.
			//Опционально введение тайм аута на запись одного и того же объекта, не чаще раза в 5-секунд. Защита от спама. упращение алгоритма блокировки.
			//Выделение сервиса для блокировки элемента и генерации кода
			//Выполнение операций контроля без обращений к sql-серверу.
			//Контроль конфликта блокировок.
			//Контроль загрузки булкинсертом гетерогенной коллекции.
			//Контроль уникальности кода для справочников.
			//Контроль уникальности номера для документов, в границах префикса.
			//Контроль владельца, он не может быть группой.
			//Контроль владельца он должен быть задан.
			//Контроль родителя он должен быть группой.
			//Контроль количества уровней, должен соотвествовать метаданным.
			//Контроль версии, объект не должен был быть записан перед чтением текущей записи, алгоритм версионника.
			//Контроль уникальности ссылки
			//Контроль зацикливания
			//Опционально контроль битых ссылок.
			//Соблюдейние транзакционности. ПередЗаписью. Открытие транзации. Валидации. ПриЗаписи. Фиксация транзакции. Информирование о записи элемента.
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference19645(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Code
						,_Description
						,_Fld19768
						,_Fld19769
						,_Fld19770RRef
						,_Fld19771RRef
						,_Fld19772
						,_Fld19773
						,_Fld19774
						,_Fld19775
						,_Fld19776
						,_Fld19777
						,_Fld19778
						,_Fld19779
						,_Fld19780
						,_Fld19781
						,_Fld19782
						,_Fld19783RRef
						,_Fld19784RRef
						,_Fld19785RRef
						,_Fld19786RRef
						,_Fld19787RRef
						,_Fld19788
						,_Fld19789
						,_Fld19790
						,_Fld19791
						,_Fld19792RRef
						,_Fld19793
						,_Fld19794
						,_Fld19795
						,_Fld19796
						,_Fld19797)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Код
						,@Наименование
						,@ОбменТоварами
						,@ОбменЗаказами
						,@УзелОбменаТоварами
						,@УзелОбменаЗаказами
						,@ВыгружатьТолькоИзменения
						,@ВыгружатьНаСайт
						,@КаталогВыгрузки
						,@HTTPОбменАдресСайта
						,@HTTPОбменИмяПользователя
						,@HTTPОбменПароль
						,@HTTPОбменПроксиИспользование
						,@HTTPОбменПроксиСервер
						,@HTTPОбменПроксиПорт
						,@HTTPОбменПроксиИмяПользователя
						,@HTTPОбменПроксиПароль
						,@ГруппаДляНовыхКонтрагентов
						,@ГруппаДляНовойНоменклатуры
						,@Организация
						,@Ответственный
						,@Подразделение
						,@ЗаписыватьДокументыТекущейДатой
						,@ПроводитьДокументы
						,@ПроводитьДокументыОперативно
						,@СпособИдентификацииКонтрагентов
						,@ЕдиницаИзмеренияНовойНоменклатуры
						,@СохраненныеНастройкиПостроителя
						,@ВыгружатьКартинки
						,@Комментарий
						,@РегламентноеЗадание
						,@ИспользоватьРегламентныеЗадания)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference19645
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_Code	= @Код
						,_Description	= @Наименование
						,_Fld19768	= @ОбменТоварами
						,_Fld19769	= @ОбменЗаказами
						,_Fld19770RRef	= @УзелОбменаТоварами
						,_Fld19771RRef	= @УзелОбменаЗаказами
						,_Fld19772	= @ВыгружатьТолькоИзменения
						,_Fld19773	= @ВыгружатьНаСайт
						,_Fld19774	= @КаталогВыгрузки
						,_Fld19775	= @HTTPОбменАдресСайта
						,_Fld19776	= @HTTPОбменИмяПользователя
						,_Fld19777	= @HTTPОбменПароль
						,_Fld19778	= @HTTPОбменПроксиИспользование
						,_Fld19779	= @HTTPОбменПроксиСервер
						,_Fld19780	= @HTTPОбменПроксиПорт
						,_Fld19781	= @HTTPОбменПроксиИмяПользователя
						,_Fld19782	= @HTTPОбменПроксиПароль
						,_Fld19783RRef	= @ГруппаДляНовыхКонтрагентов
						,_Fld19784RRef	= @ГруппаДляНовойНоменклатуры
						,_Fld19785RRef	= @Организация
						,_Fld19786RRef	= @Ответственный
						,_Fld19787RRef	= @Подразделение
						,_Fld19788	= @ЗаписыватьДокументыТекущейДатой
						,_Fld19789	= @ПроводитьДокументы
						,_Fld19790	= @ПроводитьДокументыОперативно
						,_Fld19791	= @СпособИдентификацииКонтрагентов
						,_Fld19792RRef	= @ЕдиницаИзмеренияНовойНоменклатуры
						,_Fld19793	= @СохраненныеНастройкиПостроителя
						,_Fld19794	= @ВыгружатьКартинки
						,_Fld19795	= @Комментарий
						,_Fld19796	= @РегламентноеЗадание
						,_Fld19797	= @ИспользоватьРегламентныеЗадания
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ОбменТоварами", ОбменТоварами);
					Команда.Parameters.AddWithValue("ОбменЗаказами", ОбменЗаказами);
					Команда.Parameters.AddWithValue("УзелОбменаТоварами", Guid.Empty);
					Команда.Parameters.AddWithValue("УзелОбменаЗаказами", Guid.Empty);
					Команда.Parameters.AddWithValue("ВыгружатьТолькоИзменения", ВыгружатьТолькоИзменения);
					Команда.Parameters.AddWithValue("ВыгружатьНаСайт", ВыгружатьНаСайт);
					Команда.Parameters.AddWithValue("КаталогВыгрузки", КаталогВыгрузки);
					Команда.Parameters.AddWithValue("HTTPОбменАдресСайта", HTTPОбменАдресСайта);
					Команда.Parameters.AddWithValue("HTTPОбменИмяПользователя", HTTPОбменИмяПользователя);
					Команда.Parameters.AddWithValue("HTTPОбменПароль", HTTPОбменПароль);
					Команда.Parameters.AddWithValue("HTTPОбменПроксиИспользование", HTTPОбменПроксиИспользование);
					Команда.Parameters.AddWithValue("HTTPОбменПроксиСервер", HTTPОбменПроксиСервер);
					Команда.Parameters.AddWithValue("HTTPОбменПроксиПорт", HTTPОбменПроксиПорт);
					Команда.Parameters.AddWithValue("HTTPОбменПроксиИмяПользователя", HTTPОбменПроксиИмяПользователя);
					Команда.Parameters.AddWithValue("HTTPОбменПроксиПароль", HTTPОбменПроксиПароль);
					Команда.Parameters.AddWithValue("ГруппаДляНовыхКонтрагентов", ГруппаДляНовыхКонтрагентов.Ссылка);
					Команда.Parameters.AddWithValue("ГруппаДляНовойНоменклатуры", ГруппаДляНовойНоменклатуры.Ссылка);
					Команда.Parameters.AddWithValue("Организация", Организация.Ссылка);
					Команда.Parameters.AddWithValue("Ответственный", Ответственный.Ссылка);
					Команда.Parameters.AddWithValue("Подразделение", Подразделение.Ссылка);
					Команда.Parameters.AddWithValue("ЗаписыватьДокументыТекущейДатой", ЗаписыватьДокументыТекущейДатой);
					Команда.Parameters.AddWithValue("ПроводитьДокументы", ПроводитьДокументы);
					Команда.Parameters.AddWithValue("ПроводитьДокументыОперативно", ПроводитьДокументыОперативно);
					Команда.Parameters.AddWithValue("СпособИдентификацииКонтрагентов", СпособИдентификацииКонтрагентов);
					Команда.Parameters.AddWithValue("ЕдиницаИзмеренияНовойНоменклатуры", ЕдиницаИзмеренияНовойНоменклатуры.Ссылка);
					Команда.Parameters.AddWithValue("СохраненныеНастройкиПостроителя",new byte[0]);
					Команда.Parameters.AddWithValue("ВыгружатьКартинки", ВыгружатьКартинки);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.Parameters.AddWithValue("РегламентноеЗадание", РегламентноеЗадание);
					Команда.Parameters.AddWithValue("ИспользоватьРегламентныеЗадания", ИспользоватьРегламентныеЗадания);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference19645
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/

		public void ПередЗаписью(/*Отказ*/)
		{
			if(true/*ОбменДанными.Загрузка*/)
			{
			}
			if(true/*НЕ ОбменТоварами 
		И НЕ ОбменЗаказами*/)
			{
				//ОбщегоНазначения.СообщитьОбОшибке("Должен быть выбран хотя бы один из режимов выгрузки: ""Выгрузка товаров"" или ""Обмен заказами""!", Отказ);
			}
			if(true/*ВыгружатьНаСайт*/)
			{
				if(true/*Не ЗначениеЗаполнено(HTTPОбменАдресСайта)*/)
				{
					//ОбщегоНазначения.СообщитьОбОшибке("Не указан WEB - сайт для обмена данными!", Отказ);
				}
			}
			if(true/*ВыгружатьТолькоИзменения*/)
			{
				if(true/*ОбменТоварами И НЕ ЗначениеЗаполнено(УзелОбменаТоварами)*/)
				{
					//ОбщегоНазначения.СообщитьОбОшибке("Узел плана обмена для контроля изменений товаров не указан!", Отказ);
				}
				if(true/*ОбменЗаказами И НЕ ЗначениеЗаполнено(УзелОбменаЗаказами)*/)
				{
					//ОбщегоНазначения.СообщитьОбОшибке("Узел плана обмена для контроля изменений заказов не указан!", Отказ);
				}
			}
			//УстановитьЗначенияПеременныхРегламентныхНастроек();
			if(true/*ПометкаУдаления
		ИЛИ НЕ ИспользоватьРегламентныеЗадания*/)
			{
				if(true/*мРегламентноеЗадание <> Неопределено*/)
				{
					//мРегламентноеЗадание.Использование = Ложь;
				}
			}
			if(true/*Отказ*/)
			{
			}
			if(true/*мРегламентноеЗадание <> Неопределено 
		И Не ПустаяСтрока(мРегламентноеЗадание.Ключ)*/)
			{
				//КлючРегламентногоЗадания = мРегламентноеЗадание.Ключ;
			}
			//УстановитьПараметрыРегламентногоЗадания(РегламентноеЗадание, мРегламентноеЗадание, КлючРегламентногоЗадания);
			if(true/*ВыгружатьНаСайт*/)
			{
				//КаталогВыгрузки = "";
			}
		}

		public void УстановитьПараметрыРегламентногоЗадания(/*РеквизитЗадания, ПараметрЗадания, КлючРегламентногоЗадания, Постфикс = ""*/)
		{
			if(true/*ПараметрЗадания = Неопределено*/)
			{
				//РеквизитЗадания = "";
			}
		}

		public void ПриКопировании(/*ОбъектКопирования*/)
		{
			//мРегламентноеЗадание = Неопределено;
			//РегламентноеЗадание = "";
		}

		public void ЗаполнитьПоУмолчанию(/**/)
		{
			//ПроцедурыОбменаДанными.ЗаполнитьНастройкуОбменаWEBЗначениямиПоУмолчанию(ЭтотОбъект);
		}

		public void УстановитьРежимРегламетныхЗадач(/**/)
		{
			//УстановитьЗначенияПеременныхРегламентныхНастроек();
			if(true/*мРегламентноеЗадание = Неопределено*/)
			{
			}
			if(true/*мРегламентноеЗадание.Использование = Истина*/)
			{
			}
			//мРегламентноеЗадание.Использование = Ложь;
			//мРегламентноеЗадание.Записать();
		}

		public object НайтиРеглЗаданиеПоПараметру(/*УникальныйНомерЗадания*/)
		{
			return null;
		}

		public object НайтиРегламентноеЗаданиеПоНастройке(/**/)
		{
			//ТекущееРегламентноеЗадание = НайтиРеглЗаданиеПоПараметру(РегламентноеЗадание);
			return null;
		}

		public object ПолучитьОбъектРегламентногоЗадания(/**/)
		{
			//Задание = НайтиРегламентноеЗаданиеПоНастройке();
			return null;
		}

		public void УстановитьЗначенияПеременныхРегламентныхНастроек(/**/)
		{
			if(true/*мРегламентноеЗадание = Неопределено*/)
			{
				//мРегламентноеЗадание = ПолучитьОбъектРегламентногоЗадания();
			}
		}

		public void ПередУдалением(/*Отказ*/)
		{
			//УстановитьЗначенияПеременныхРегламентныхНастроек();
			if(true/*мРегламентноеЗадание <> Неопределено*/)
			{
				//мРегламентноеЗадание.Удалить();
			}
		}
	}
}