
using System;
using System.Data.SqlClient;
using V82;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	public partial class НастройкиОбменаССайтом:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*3*/ Код;
		public string/*50*/ Наименование;
		public bool ОбменТоварами;//Обмен товарами
		public bool ОбменЗаказами;//Обмен заказами
		public object УзелОбменаТоварами;//Узел обмена товарами
		public object УзелОбменаЗаказами;//Узел обмена заказами
		public bool ВыгружатьТолькоИзменения;//Выгружать только изменения
		public bool ВыгружатьНаСайт;//Выгружать на сайт
		public string/*(0)*/ КаталогВыгрузки;//Каталог выгрузки
		public string/*(255)*/ HTTPОбменАдресСайта;//HTTP адрес раздела сайта для обмена
		public string/*(255)*/ HTTPОбменИмяПользователя;//HTTP обмен имя пользователя
		public string/*(255)*/ HTTPОбменПароль;//HTTP обмен пароль
		public bool HTTPОбменПроксиИспользование;//Использовать прокси-сервер
		public string/*(255)*/ HTTPОбменПроксиСервер;//Имя или адрес сервера
		public decimal/*(5)*/ HTTPОбменПроксиПорт;//Порт прокси-сервера
		public string/*(255)*/ HTTPОбменПроксиИмяПользователя;//Имя пользователя прокси
		public string/*(255)*/ HTTPОбменПроксиПароль;//Пароль пользователя прокси-сервера
		public V82.СправочникиСсылка.Контрагенты ГруппаДляНовыхКонтрагентов;//Группа для новых контрагентов
		public V82.СправочникиСсылка.Номенклатура ГруппаДляНовойНоменклатуры;//Группа для новой номенклатуры
		public V82.СправочникиСсылка.Организации Организация;
		public V82.СправочникиСсылка.Пользователи Ответственный;
		public V82.СправочникиСсылка.Подразделения Подразделение;
		public bool ЗаписыватьДокументыТекущейДатой;//Записывать документы текущей датой
		public bool ПроводитьДокументы;//Проводить документы
		public bool ПроводитьДокументыОперативно;//Проводить документы оперативно
		public string/*(12)*/ СпособИдентификацииКонтрагентов;//Способ идентификации контрагентов
		public V82.СправочникиСсылка.КлассификаторЕдиницИзмерения ЕдиницаИзмеренияНовойНоменклатуры;//Единица измерения новой номенклатуры
		public ХранилищеЗначения СохраненныеНастройкиПостроителя;
		public bool ВыгружатьКартинки;//Выгружать картинки
		public string/*(0)*/ Комментарий;
		public string/*(40)*/ РегламентноеЗадание;//Регламентное задание
		public bool ИспользоватьРегламентныеЗадания;//Использовать регламентные задания
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference154(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Code
						,_Description
						,_Fld2794
						,_Fld2795
						,_Fld2796RRef
						,_Fld2797RRef
						,_Fld2798
						,_Fld2799
						,_Fld2800
						,_Fld2801
						,_Fld2802
						,_Fld2803
						,_Fld2804
						,_Fld2805
						,_Fld2806
						,_Fld2807
						,_Fld2808
						,_Fld2809RRef
						,_Fld2810RRef
						,_Fld2811RRef
						,_Fld2812RRef
						,_Fld2813RRef
						,_Fld2814
						,_Fld2815
						,_Fld2816
						,_Fld2817
						,_Fld2818RRef
						,_Fld2819
						,_Fld2820
						,_Fld2821
						,_Fld2822
						,_Fld2823)
						Values (
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Код
						,@Наименование
						,@ОбменТоварами
						,@ОбменЗаказами
						,@УзелОбменаТоварами
						,@УзелОбменаЗаказами
						,@ВыгружатьТолькоИзменения
						,@ВыгружатьНаСайт
						,@КаталогВыгрузки
						,@HTTPОбменАдресСайта
						,@HTTPОбменИмяПользователя
						,@HTTPОбменПароль
						,@HTTPОбменПроксиИспользование
						,@HTTPОбменПроксиСервер
						,@HTTPОбменПроксиПорт
						,@HTTPОбменПроксиИмяПользователя
						,@HTTPОбменПроксиПароль
						,@ГруппаДляНовыхКонтрагентов
						,@ГруппаДляНовойНоменклатуры
						,@Организация
						,@Ответственный
						,@Подразделение
						,@ЗаписыватьДокументыТекущейДатой
						,@ПроводитьДокументы
						,@ПроводитьДокументыОперативно
						,@СпособИдентификацииКонтрагентов
						,@ЕдиницаИзмеренияНовойНоменклатуры
						,@СохраненныеНастройкиПостроителя
						,@ВыгружатьКартинки
						,@Комментарий
						,@РегламентноеЗадание
						,@ИспользоватьРегламентныеЗадания)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference154
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_Code	= @Код
						,_Description	= @Наименование
						,_Fld2794	= @ОбменТоварами
						,_Fld2795	= @ОбменЗаказами
						,_Fld2796RRef	= @УзелОбменаТоварами
						,_Fld2797RRef	= @УзелОбменаЗаказами
						,_Fld2798	= @ВыгружатьТолькоИзменения
						,_Fld2799	= @ВыгружатьНаСайт
						,_Fld2800	= @КаталогВыгрузки
						,_Fld2801	= @HTTPОбменАдресСайта
						,_Fld2802	= @HTTPОбменИмяПользователя
						,_Fld2803	= @HTTPОбменПароль
						,_Fld2804	= @HTTPОбменПроксиИспользование
						,_Fld2805	= @HTTPОбменПроксиСервер
						,_Fld2806	= @HTTPОбменПроксиПорт
						,_Fld2807	= @HTTPОбменПроксиИмяПользователя
						,_Fld2808	= @HTTPОбменПроксиПароль
						,_Fld2809RRef	= @ГруппаДляНовыхКонтрагентов
						,_Fld2810RRef	= @ГруппаДляНовойНоменклатуры
						,_Fld2811RRef	= @Организация
						,_Fld2812RRef	= @Ответственный
						,_Fld2813RRef	= @Подразделение
						,_Fld2814	= @ЗаписыватьДокументыТекущейДатой
						,_Fld2815	= @ПроводитьДокументы
						,_Fld2816	= @ПроводитьДокументыОперативно
						,_Fld2817	= @СпособИдентификацииКонтрагентов
						,_Fld2818RRef	= @ЕдиницаИзмеренияНовойНоменклатуры
						,_Fld2819	= @СохраненныеНастройкиПостроителя
						,_Fld2820	= @ВыгружатьКартинки
						,_Fld2821	= @Комментарий
						,_Fld2822	= @РегламентноеЗадание
						,_Fld2823	= @ИспользоватьРегламентныеЗадания
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ОбменТоварами", ОбменТоварами);
					Команда.Parameters.AddWithValue("ОбменЗаказами", ОбменЗаказами);
					Команда.Parameters.AddWithValue("ВыгружатьТолькоИзменения", ВыгружатьТолькоИзменения);
					Команда.Parameters.AddWithValue("ВыгружатьНаСайт", ВыгружатьНаСайт);
					Команда.Parameters.AddWithValue("КаталогВыгрузки", КаталогВыгрузки);
					Команда.Parameters.AddWithValue("HTTPОбменАдресСайта", HTTPОбменАдресСайта);
					Команда.Parameters.AddWithValue("HTTPОбменИмяПользователя", HTTPОбменИмяПользователя);
					Команда.Parameters.AddWithValue("HTTPОбменПароль", HTTPОбменПароль);
					Команда.Parameters.AddWithValue("HTTPОбменПроксиИспользование", HTTPОбменПроксиИспользование);
					Команда.Parameters.AddWithValue("HTTPОбменПроксиСервер", HTTPОбменПроксиСервер);
					Команда.Parameters.AddWithValue("HTTPОбменПроксиПорт", HTTPОбменПроксиПорт);
					Команда.Parameters.AddWithValue("HTTPОбменПроксиИмяПользователя", HTTPОбменПроксиИмяПользователя);
					Команда.Parameters.AddWithValue("HTTPОбменПроксиПароль", HTTPОбменПроксиПароль);
					Команда.Parameters.AddWithValue("ГруппаДляНовыхКонтрагентов", ГруппаДляНовыхКонтрагентов.Ссылка);
					Команда.Parameters.AddWithValue("ГруппаДляНовойНоменклатуры", ГруппаДляНовойНоменклатуры.Ссылка);
					Команда.Parameters.AddWithValue("Организация", Организация.Ссылка);
					Команда.Parameters.AddWithValue("Ответственный", Ответственный.Ссылка);
					Команда.Parameters.AddWithValue("Подразделение", Подразделение.Ссылка);
					Команда.Parameters.AddWithValue("ЗаписыватьДокументыТекущейДатой", ЗаписыватьДокументыТекущейДатой);
					Команда.Parameters.AddWithValue("ПроводитьДокументы", ПроводитьДокументы);
					Команда.Parameters.AddWithValue("ПроводитьДокументыОперативно", ПроводитьДокументыОперативно);
					Команда.Parameters.AddWithValue("СпособИдентификацииКонтрагентов", СпособИдентификацииКонтрагентов);
					Команда.Parameters.AddWithValue("ЕдиницаИзмеренияНовойНоменклатуры", ЕдиницаИзмеренияНовойНоменклатуры.Ссылка);
					Команда.Parameters.AddWithValue("ВыгружатьКартинки", ВыгружатьКартинки);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.Parameters.AddWithValue("РегламентноеЗадание", РегламентноеЗадание);
					Команда.Parameters.AddWithValue("ИспользоватьРегламентныеЗадания", ИспользоватьРегламентныеЗадания);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference154
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/

		public void ПередЗаписью(/*Отказ*/)
		{
			if(true/*ОбменДанными.Загрузка*/)
			{
			}
			if(true/*НЕ ОбменТоварами 
		И НЕ ОбменЗаказами*/)
			{
				/*ОбщегоНазначения.СообщитьОбОшибке("Должен быть выбран хотя бы один из режимов выгрузки: ""Выгрузка товаров"" или ""Обмен заказами""!", Отказ);*/
			}
			if(true/*ВыгружатьНаСайт*/)
			{
				if(true/*Не ЗначениеЗаполнено(HTTPОбменАдресСайта)*/)
				{
					/*ОбщегоНазначения.СообщитьОбОшибке("Не указан WEB - сайт для обмена данными!", Отказ);*/
				}
			}
			if(true/*ВыгружатьТолькоИзменения*/)
			{
				if(true/*ОбменТоварами И НЕ ЗначениеЗаполнено(УзелОбменаТоварами)*/)
				{
					/*ОбщегоНазначения.СообщитьОбОшибке("Узел плана обмена для контроля изменений товаров не указан!", Отказ);*/
				}
				if(true/*ОбменЗаказами И НЕ ЗначениеЗаполнено(УзелОбменаЗаказами)*/)
				{
					/*ОбщегоНазначения.СообщитьОбОшибке("Узел плана обмена для контроля изменений заказов не указан!", Отказ);*/
				}
			}
			/*УстановитьЗначенияПеременныхРегламентныхНастроек();*/
			if(true/*ПометкаУдаления
		ИЛИ НЕ ИспользоватьРегламентныеЗадания*/)
			{
				if(true/*мРегламентноеЗадание <> Неопределено*/)
				{
					/*мРегламентноеЗадание.Использование = Ложь;*/
				}
			}
			if(true/*Отказ*/)
			{
			}
			if(true/*мРегламентноеЗадание <> Неопределено 
		И Не ПустаяСтрока(мРегламентноеЗадание.Ключ)*/)
			{
				/*КлючРегламентногоЗадания = мРегламентноеЗадание.Ключ;*/
			}
			/*УстановитьПараметрыРегламентногоЗадания(РегламентноеЗадание, мРегламентноеЗадание, КлючРегламентногоЗадания);*/
			if(true/*ВыгружатьНаСайт*/)
			{
				/*КаталогВыгрузки = "";*/
			}
		}

		public void УстановитьПараметрыРегламентногоЗадания(/*РеквизитЗадания, ПараметрЗадания, КлючРегламентногоЗадания, Постфикс = ""*/)
		{
			if(true/*ПараметрЗадания = Неопределено*/)
			{
				/*РеквизитЗадания = "";*/
			}
		}

		public void ПриКопировании(/*ОбъектКопирования*/)
		{
			/*мРегламентноеЗадание = Неопределено;*/
			/*РегламентноеЗадание = "";*/
		}

		public void ЗаполнитьПоУмолчанию(/**/)
		{
			/*ПроцедурыОбменаДанными.ЗаполнитьНастройкуОбменаWEBЗначениямиПоУмолчанию(ЭтотОбъект);*/
		}

		public void УстановитьРежимРегламетныхЗадач(/**/)
		{
			/*УстановитьЗначенияПеременныхРегламентныхНастроек();*/
			if(true/*мРегламентноеЗадание = Неопределено*/)
			{
			}
			if(true/*мРегламентноеЗадание.Использование = Истина*/)
			{
			}
			/*мРегламентноеЗадание.Использование = Ложь;*/
			/*мРегламентноеЗадание.Записать();*/
		}

		public object НайтиРеглЗаданиеПоПараметру(/*УникальныйНомерЗадания*/)
		{
			if(true/*НЕ ПустаяСтрока(УникальныйНомерЗадания)*/)
			{
				/*УникальныйИдентификаторЗадания = Новый УникальныйИдентификатор(УникальныйНомерЗадания);*/
				/*ТекущееРегламентноеЗадание = РегламентныеЗадания.НайтиПоУникальномуИдентификатору(УникальныйИдентификаторЗадания);*/
			}
			/*Исключение
		
		ТекущееРегламентноеЗадание = Неопределено;*/
			/*КонецПопытки;*/
		}

		public object НайтиРегламентноеЗаданиеПоНастройке(/**/)
		{
			/*ТекущееРегламентноеЗадание = НайтиРеглЗаданиеПоПараметру(РегламентноеЗадание);*/
		}

		public object ПолучитьОбъектРегламентногоЗадания(/**/)
		{
			/*Задание = НайтиРегламентноеЗаданиеПоНастройке();*/
		}

		public void УстановитьЗначенияПеременныхРегламентныхНастроек(/**/)
		{
			if(true/*мРегламентноеЗадание = Неопределено*/)
			{
				/*мРегламентноеЗадание = ПолучитьОбъектРегламентногоЗадания();*/
			}
		}

		public void ПередУдалением(/*Отказ*/)
		{
			/*УстановитьЗначенияПеременныхРегламентныхНастроек();*/
			if(true/*мРегламентноеЗадание <> Неопределено*/)
			{
				/*мРегламентноеЗадание.Удалить();*/
			}
		}
	}
}
