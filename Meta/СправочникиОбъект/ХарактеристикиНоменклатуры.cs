
using System;
using System.Data.SqlClient;
using V82;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	public partial class ХарактеристикиНоменклатуры:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*100*/ Наименование;
		public V82.СправочникиСсылка.ОбщероссийскийКлассификаторПродукции ОКП;
		public bool Активная;
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference287(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_OwnerIDRRef
						,_Description
						,_Fld4212RRef
						,_Fld4213)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Владелец
						,@Наименование
						,@ОКП
						,@Активная)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference287
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_OwnerIDRRef	= @Владелец
						,_Description	= @Наименование
						,_Fld4212RRef	= @ОКП
						,_Fld4213	= @Активная
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Владелец", Владелец);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ОКП", ОКП.Ссылка);
					Команда.Parameters.AddWithValue("Активная", Активная);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference287
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/
		////////////////////////////////////////////////////////////////////////////////
		// ОБРАБОТЧИКИ СОБЫТИЙ
		// Обработчик события ПередЗаписью объекта.
		//

		public void ПередЗаписью(/*Отказ*/)
		{
			if(true/*НЕ ОбменДанными.Загрузка
	   И НЕ Владелец.ВестиУчетПоХарактеристикам*/)
			{
				/*ОбщегоНазначения.СообщитьОбОшибке(
		"Для номенклатуры """ + Владелец + """ не ведется учет по характеристикам.
		|Характеристика """ + Наименование + """ не может быть записана.", 
		Отказ);*/
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		// ЭКСПОРТИРУЕМЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ
		// Функция устанавливает новое наименование характеристики по значениям свойств.
		//
		// Параметры:
		//  КоллекцияЗначенийСвойств - коллекция значений, имеющая свойство Значение.
		//
		// Возвращаемое значение:
		//  Строка - сформированное наименование.
		//

		public object СформироватьНаименование(/*КоллекцияЗначенийСвойств*/)
		{
			//Строка = "";
			//Строка = Лев(Строка, СтрДлина(Строка) - 2);
			if(true/*ПустаяСтрока(Строка)*/)
			{
				//Строка = "<Свойства не назначены>";
			}
			return null;
		}
	}
}
