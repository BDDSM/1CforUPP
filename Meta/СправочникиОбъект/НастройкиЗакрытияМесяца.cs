
using System;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	///<summary>
	///Список настроек закрытия месяца
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class НастройкиЗакрытияМесяца:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		[DataMember]
		[ProtoMember(3)]
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		[DataMember]
		[ProtoMember(4)]
		public bool ПометкаУдаления {get;set;}
		[DataMember]
		[ProtoMember(5)]
		public bool Предопределенный {get;set;}
		[DataMember]
		[ProtoMember(6)]
		public V82.СправочникиСсылка.НастройкиЗакрытияМесяца Родитель {get;set;}
		[DataMember]
		[ProtoMember(7)]
		public bool ЭтоГруппа {get;set;}
		[DataMember]
		[ProtoMember(8)]
		public string/*70*/ Наименование {get;set;}
		[DataMember]
		[ProtoMember(9)]
		public DateTime ДатаНачалаДействияНастройки {get;set;}//Начало действия
		[DataMember]
		[ProtoMember(10)]
		public bool ОтражатьВУправленческомУчете {get;set;}//Отражать в управленческом учете
		[DataMember]
		[ProtoMember(11)]
		public bool ОтражатьВБухгалтерскомУчете {get;set;}//Отражать в бухгалтерском учете
		[DataMember]
		[ProtoMember(12)]
		public bool ОтражатьВНалоговомУчете {get;set;}//Отражать в налоговом учете
		[DataMember]
		[ProtoMember(13)]
		public decimal/*(1)*/ ВариантНастройки {get;set;}//Вариант настройки
		public void Записать()
		{
			//Установка блокировки элемента на горизантально масштабированный кластер.
			//Опционально введение тайм аута на запись одного и того же объекта, не чаще раза в 5-секунд. Защита от спама. упращение алгоритма блокировки.
			//Выделение сервиса для блокировки элемента и генерации кода
			//Выполнение операций контроля без обращений к sql-серверу.
			//Контроль конфликта блокировок.
			//Контроль загрузки булкинсертом гетерогенной коллекции.
			//Контроль уникальности кода для справочников.
			//Контроль уникальности номера для документов, в границах префикса.
			//Контроль владельца, он не может быть группой.
			//Контроль владельца он должен быть задан.
			//Контроль родителя он должен быть группой.
			//Контроль количества уровней, должен соотвествовать метаданным.
			//Контроль версии, объект не должен был быть записан перед чтением текущей записи, алгоритм версионника.
			//Контроль уникальности ссылки
			//Контроль зацикливания
			//Опционально контроль битых ссылок.
			//Соблюдейние транзакционности. ПередЗаписью. Открытие транзации. Валидации. ПриЗаписи. Фиксация транзакции. Информирование о записи элемента.
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference19543(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_ParentIDRRef
						,_Folder
						,_Description
						,_Fld19545
						,_Fld19546
						,_Fld19547
						,_Fld19548
						,_Fld26538)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Родитель
						,@ЭтоГруппа
						,@Наименование
						,@ДатаНачалаДействияНастройки
						,@ОтражатьВУправленческомУчете
						,@ОтражатьВБухгалтерскомУчете
						,@ОтражатьВНалоговомУчете
						,@ВариантНастройки)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference19543
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_ParentIDRRef	= @Родитель
						,_Folder	= @ЭтоГруппа
						,_Description	= @Наименование
						,_Fld19545	= @ДатаНачалаДействияНастройки
						,_Fld19546	= @ОтражатьВУправленческомУчете
						,_Fld19547	= @ОтражатьВБухгалтерскомУчете
						,_Fld19548	= @ОтражатьВНалоговомУчете
						,_Fld26538	= @ВариантНастройки
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Родитель", Родитель);
					Команда.Parameters.AddWithValue("ЭтоГруппа", ЭтоГруппа?new byte[]{0}:new byte[]{1});
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ДатаНачалаДействияНастройки", ДатаНачалаДействияНастройки);
					Команда.Parameters.AddWithValue("ОтражатьВУправленческомУчете", ОтражатьВУправленческомУчете);
					Команда.Parameters.AddWithValue("ОтражатьВБухгалтерскомУчете", ОтражатьВБухгалтерскомУчете);
					Команда.Parameters.AddWithValue("ОтражатьВНалоговомУчете", ОтражатьВНалоговомУчете);
					Команда.Parameters.AddWithValue("ВариантНастройки", ВариантНастройки);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference19543
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/
		//Процедура выполняет первоначальное заполнение настроек
		//- при вводе нового элемента справочника
		//- при изменении варианта настройки

		public void ЗаполнитьСписокРегламентныхОпераций(/*ОбъектКопирования = Неопределено, Использовать = Истина*/)
		{
			//ТаблицаРеглОпераций = РегламентныеОперации.Выгрузить();
			//ТаблицаРеглОпераций.Очистить();
			//ТаблицаРеглОпераций.Колонки.Добавить("Порядок");
			//ОбрабатываемыеБизнесПроцессы = Новый Массив();
			if(true/*БизнесПроцессЗакрытиеМесяца.ИспользоватьБизнесПроцессУСН(,ЭтотОбъект)*/)
			{
				//ОбрабатываемыеБизнесПроцессы.Добавить("ЗакрытиеМесяцаУСНДоходыМинусРасходы");
			}
			//ТочкиМаршрута = БизнесПроцессЗакрытиеМесяца.ПолучитьТочкиМаршрутаЗакрытияМесяцаИРасчетаНДС(ОбрабатываемыеБизнесПроцессы);
			//Макет = ПолучитьМакет("МакетНастроекПоУмолчанию");
			//ОбластьСписокНастроек = Макет.Области.Найти("Список");
			if(true/*ОбластьСписокНастроек <> Неопределено*/)
			{
				//ОбластьСписокНастроек = Макет.ПолучитьОбласть("Список");
				//ТаблицаРеглОпераций.Сортировать("Порядок");
				//РегламентныеОперации.Очистить();
				//РегламентныеОперации.Загрузить(ТаблицаРеглОпераций);
				//ОтключитьНедоступныеРегламентныеОперации();
			}
		}
		//Процедура отключает регламентные операции, которые являются недоступными
		//

		public void ОтключитьНедоступныеРегламентныеОперации(/*МассивНедоступныхРегламентныхОпераций = Неопределено*/)
		{
			if(true/*МассивНедоступныхРегламентныхОпераций = Неопределено*/)
			{
				//МассивНедоступныхРегламентныхОпераций = БизнесПроцессЗакрытиеМесяца.ЗаполнитьМассивНедоступныхРегламентныхОпераций(?(ЗначениеЗаполнено(ДатаНачалаДействияНастройки),ДатаНачалаДействияНастройки,ТекущаяДата()),,ВариантНастройки);
			}
			if(true/*МассивНедоступныхРегламентныхОпераций.Количество() = 0*/)
			{
			}
		}

		public void ПередЗаписью(/*Отказ*/)
		{
			if(true/*ОбменДанными.Загрузка ИЛИ ЭтоГруппа*/)
			{
			}
			if(true/*ДатаНачалаДействияНастройки = Дата('00010101000000')*/)
			{
				//ОбщегоНазначения.СообщитьОбОшибке("Не указана дата начала действия настройки", Отказ);
			}
			if(true/*НЕ (ОтражатьВУправленческомУчете ИЛИ ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете)*/)
			{
				//ОбщегоНазначения.СообщитьОбОшибке("Не установлены признаки отражения в учете", Отказ);
			}
			//Строка = РегламентныеОперации.Найти(Истина, "Использовать");
			if(true/*Строка = Неопределено*/)
			{
				//ОбщегоНазначения.СообщитьОбОшибке("Не включена ни одна регламентная операция", Отказ);
			}
		}
	}
}