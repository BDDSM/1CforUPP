
using System;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	///<summary>
	///(Упр)
	///</summary>
	[ProtoContract]
	[DataContract]
	public partial class Должности:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		[DataMember]
		[ProtoMember(3)]
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		[DataMember]
		[ProtoMember(4)]
		public bool ПометкаУдаления {get;set;}
		[DataMember]
		[ProtoMember(5)]
		public bool Предопределенный {get;set;}
		[DataMember]
		[ProtoMember(6)]
		public string/*9*/ Код {get;set;}
		[DataMember]
		[ProtoMember(7)]
		public string/*100*/ Наименование {get;set;}
		[DataMember]
		[ProtoMember(8)]
		public string/*(0)*/ Требования {get;set;}
		[DataMember]
		[ProtoMember(9)]
		public string/*(0)*/ Обязанности {get;set;}
		[DataMember]
		[ProtoMember(10)]
		public string/*(0)*/ Условия {get;set;}
		///<summary>
		///Название вакансии в средствах массовой информации
		///</summary>
		[DataMember]
		[ProtoMember(11)]
		public string/*(200)*/ УдалитьНазваниеВакансииВСМИ {get;set;}//Название вакансии в СМИ
		[DataMember]
		[ProtoMember(12)]
		public V82.СправочникиСсылка.ТиповыеАнкеты АнкетаРезюмеКандидата {get;set;}//Анкета резюме кандидата
		public void Записать()
		{
			//Установка блокировки элемента на горизантально масштабированный кластер.
			//Опционально введение тайм аута на запись одного и того же объекта, не чаще раза в 5-секунд. Защита от спама. упращение алгоритма блокировки.
			//Выделение сервиса для блокировки элемента и генерации кода
			//Выполнение операций контроля без обращений к sql-серверу.
			//Контроль конфликта блокировок.
			//Контроль загрузки булкинсертом гетерогенной коллекции.
			//Контроль уникальности кода для справочников.
			//Контроль уникальности номера для документов, в границах префикса.
			//Контроль владельца, он не может быть группой.
			//Контроль владельца он должен быть задан.
			//Контроль родителя он должен быть группой.
			//Контроль количества уровней, должен соотвествовать метаданным.
			//Контроль версии, объект не должен был быть записан перед чтением текущей записи, алгоритм версионника.
			//Контроль уникальности ссылки
			//Контроль зацикливания
			//Опционально контроль битых ссылок.
			//Соблюдейние транзакционности. ПередЗаписью. Открытие транзации. Валидации. ПриЗаписи. Фиксация транзакции. Информирование о записи элемента.
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference91(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Code
						,_Description
						,_Fld2270
						,_Fld2271
						,_Fld2272
						,_Fld2273
						,_Fld2274RRef)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Код
						,@Наименование
						,@Требования
						,@Обязанности
						,@Условия
						,@УдалитьНазваниеВакансииВСМИ
						,@АнкетаРезюмеКандидата)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference91
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_Code	= @Код
						,_Description	= @Наименование
						,_Fld2270	= @Требования
						,_Fld2271	= @Обязанности
						,_Fld2272	= @Условия
						,_Fld2273	= @УдалитьНазваниеВакансииВСМИ
						,_Fld2274RRef	= @АнкетаРезюмеКандидата
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("Требования", Требования);
					Команда.Parameters.AddWithValue("Обязанности", Обязанности);
					Команда.Parameters.AddWithValue("Условия", Условия);
					Команда.Parameters.AddWithValue("УдалитьНазваниеВакансииВСМИ", УдалитьНазваниеВакансииВСМИ);
					Команда.Parameters.AddWithValue("АнкетаРезюмеКандидата", АнкетаРезюмеКандидата.Ссылка);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference91
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/

		public object Печать(/*НазваниеОтчета = Неопределено ,Результат = Неопределено*/)
		{
			if(true/*Результат = Неопределено*/)
			{
				//Результат = Новый ТабличныйДокумент;
			}
			//Результат.ТолькоПросмотр  = Истина;
			//Результат.ОтображатьСетку = Ложь;
			//Результат.ОтображатьЗаголовки = Ложь;
			//СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
			/*// Получить настройки схемы компоновки данных
*/
			//Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
			//ТиповыеОтчеты.ДобавитьОтбор(Настройки.Отбор, "Должность", Ссылка);
			/*// очистим результирующий табличный документ
*/
			/*//Результат.АвтоМасштаб = Истина;
*/
			//Результат.Очистить();
			/*// получим макет компоновки данных
*/
			//КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			//МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, );
			/*// создадим и инициализируем процессор компоновки данных
*/
			//ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			//ПроцессорКомпоновки.Инициализировать(МакетКомпоновки, , );
			/*// выведем отчет в табличный документ "Результат"
*/
			//ВывестиРезультатВТабличныйДокумент(ПроцессорКомпоновки, Результат);
			return null;
		}

		public void ВывестиРезультатВТабличныйДокумент(/*ПроцессорКомпоновкиДанных, ТабличныйДокумент*/)
		{
			/*// Создадим и инициализируем процессор вывода результата
*/
			//ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
			//ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
			/*// Обозначим начало вывода
*/
			//ПроцессорВывода.НачатьВывод();
			//Состояние(НСТР("ru='Если Вы хотите прервать вывод отчета, нажмите Ctrl+Break'"));
			/*// Основной цикл вывода отчета
*/
			while(true/*Истина*/)
			{
				/*// Получим следующий элемент результата компоновки
*/
				//ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
				if(true/*ЭлементРезультата = Неопределено*/)
				{
					/*// Следующий элемент не получен - заканчиваем цикл вывода
*/
				}
				//ОбработкаПрерыванияПользователя();
			}
			/*;
	
	ПроцессорВывода.ЗакончитьВывод();*/
		}
	}
}