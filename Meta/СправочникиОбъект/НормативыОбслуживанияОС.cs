
using System;
using System.Data.SqlClient;
using V82;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	///<summary>
	///(Упр)
	///</summary>
	public partial class НормативыОбслуживанияОС:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*9*/ Код;
		public string/*50*/ Наименование;
		///<summary>
		///(Упр)
		///</summary>
		public string/*(0)*/ Комментарий;
		///<summary>
		///(Упр)
		///</summary>
		public V82.Перечисления/*Ссылка*/.СостоянияОбъектов Состояние;
		///<summary>
		///(Упр)
		///</summary>
		public DateTime ДатаУтверждения;//Дата утверждения
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.Номенклатура Услуга;
		///<summary>
		///(Упр)
		///</summary>
		public V82.Перечисления/*Ссылка*/.Периодичность ПериодичностьОбслуживания;//Периодичность обслуживания
		///<summary>
		///(Упр)
		///</summary>
		public decimal/*(10.2)*/ КоличествоПериодов;//Количество периодов
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.ПараметрыВыработкиОС ПараметрВыработки;//Параметр выработки
		///<summary>
		///(Упр)
		///</summary>
		public decimal/*(15.3)*/ ЗначениеПараметраВыработки;//Значение параметра выработки
		///<summary>
		///(Упр)
		///</summary>
		public decimal/*(15.3)*/ Количество;
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference167(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_ParentIDRRef
						,_Folder
						,_Code
						,_Description
						,_Fld2975
						,_Fld2976RRef
						,_Fld2977
						,_Fld2978RRef
						,_Fld2979RRef
						,_Fld2980
						,_Fld2981RRef
						,_Fld2982
						,_Fld2983)
						Values (
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Родитель
						,@ЭтоГруппа
						,@Код
						,@Наименование
						,@Комментарий
						,@Состояние
						,@ДатаУтверждения
						,@Услуга
						,@ПериодичностьОбслуживания
						,@КоличествоПериодов
						,@ПараметрВыработки
						,@ЗначениеПараметраВыработки
						,@Количество)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference167
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_ParentIDRRef	= @Родитель
						,_Folder	= @ЭтоГруппа
						,_Code	= @Код
						,_Description	= @Наименование
						,_Fld2975	= @Комментарий
						,_Fld2976RRef	= @Состояние
						,_Fld2977	= @ДатаУтверждения
						,_Fld2978RRef	= @Услуга
						,_Fld2979RRef	= @ПериодичностьОбслуживания
						,_Fld2980	= @КоличествоПериодов
						,_Fld2981RRef	= @ПараметрВыработки
						,_Fld2982	= @ЗначениеПараметраВыработки
						,_Fld2983	= @Количество
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Родитель", Родитель);
					Команда.Parameters.AddWithValue("ЭтоГруппа", ЭтоГруппа?new byte[]{0}:new byte[]{1});
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.Parameters.AddWithValue("Состояние", Состояние.Ключ());
					Команда.Parameters.AddWithValue("ДатаУтверждения", ДатаУтверждения);
					Команда.Parameters.AddWithValue("Услуга", Услуга.Ссылка);
					Команда.Parameters.AddWithValue("ПериодичностьОбслуживания", ПериодичностьОбслуживания.Ключ());
					Команда.Parameters.AddWithValue("КоличествоПериодов", КоличествоПериодов);
					Команда.Parameters.AddWithValue("ПараметрВыработки", ПараметрВыработки.Ссылка);
					Команда.Parameters.AddWithValue("ЗначениеПараметраВыработки", ЗначениеПараметраВыработки);
					Команда.Parameters.AddWithValue("Количество", Количество);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference167
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/

		public void ПередЗаписью(/*Отказ*/)
		{
			if(true/*НЕ ОбменДанными.Загрузка*/)
			{
				/*СтрокаОшибки = "Элемент справочника ""Нормативы обслуживания ОС"" не записан.";*/
				if(true/*ЗначениеЗаполнено(ПериодичностьОбслуживания) И КоличествоПериодов = 0*/)
				{
					/*ОбщегоНазначения.СообщитьОбОшибке("Количество периодов обслуживание должно быть больше нуля.",, СтрокаОшибки);*/
					/*Отказ = Истина;*/
				}
				if(true/*ЗначениеЗаполнено(ПараметрВыработки) И ЗначениеПараметраВыработки = 0*/)
				{
					/*ОбщегоНазначения.СообщитьОбОшибке("Количество параметра выработки должно быть больше нуля.",, СтрокаОшибки);*/
					/*Отказ = Истина;*/
				}
				if(true/*НЕ ЗначениеЗаполнено(ПериодичностьОбслуживания) И  НЕ ЗначениеЗаполнено(ПараметрВыработки)*/)
				{
					/*ОбщегоНазначения.СообщитьОбОшибке("Должен быть заполнен параметр выработки или периодичность обслуживания",, СтрокаОшибки);*/
					/*Отказ = Истина;*/
				}
			}
		}
	}
}
