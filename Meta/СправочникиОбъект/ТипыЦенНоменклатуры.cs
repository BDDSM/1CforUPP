
using System;
using System.Data.SqlClient;
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	///<summary>
	///(Упр)
	///</summary>
	public partial class ТипыЦенНоменклатуры:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*9*/ Код;
		public string/*25*/ Наименование;
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.Валюты ВалютаЦены;//Валюта цены по умолчанию
		///<summary>
		///(Общ) Тип цен, от которого рассчитываются цены данного типа, если не выбран, то цены задаются вручную
		///</summary>
		public V82.СправочникиСсылка.ТипыЦенНоменклатуры БазовыйТипЦен;//Базовый тип цен
		///<summary>
		///(Общ) Истина - цены автоматически рассчитываются (не хранятся) на основании цен базового типа
		///</summary>
		public bool Рассчитывается;
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(5.2)*/ ПроцентСкидкиНаценки;//Процент скидки или наценки по умолчанию
		///<summary>
		///(Общ) Истина - цена включает НДС, ложь - не включает
		///</summary>
		public bool ЦенаВключаетНДС;//Цена включает НДС
		///<summary>
		///(Общ)
		///</summary>
		public V82.Перечисления/*Ссылка*/.ПорядкиОкругления ПорядокОкругления;//Порядок округления
		///<summary>
		///(Общ) Истина, то при порядке округления "5" 0.01 будет округлена до 5, ложь - округление по арифметическим правилам
		///</summary>
		public bool ОкруглятьВБольшуюСторону;//Округлять в большую сторону
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий;
		public V82.Перечисления/*Ссылка*/.СпособыРасчетаЦены СпособРасчетаЦены;//Способ расчета цены
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference269(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Code
						,_Description
						,_Fld3965RRef
						,_Fld3966RRef
						,_Fld3967
						,_Fld3968
						,_Fld3969
						,_Fld3970RRef
						,_Fld3971
						,_Fld3972
						,_Fld3973RRef)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Код
						,@Наименование
						,@ВалютаЦены
						,@БазовыйТипЦен
						,@Рассчитывается
						,@ПроцентСкидкиНаценки
						,@ЦенаВключаетНДС
						,@ПорядокОкругления
						,@ОкруглятьВБольшуюСторону
						,@Комментарий
						,@СпособРасчетаЦены)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference269
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_Code	= @Код
						,_Description	= @Наименование
						,_Fld3965RRef	= @ВалютаЦены
						,_Fld3966RRef	= @БазовыйТипЦен
						,_Fld3967	= @Рассчитывается
						,_Fld3968	= @ПроцентСкидкиНаценки
						,_Fld3969	= @ЦенаВключаетНДС
						,_Fld3970RRef	= @ПорядокОкругления
						,_Fld3971	= @ОкруглятьВБольшуюСторону
						,_Fld3972	= @Комментарий
						,_Fld3973RRef	= @СпособРасчетаЦены
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ВалютаЦены", ВалютаЦены.Ссылка);
					Команда.Parameters.AddWithValue("БазовыйТипЦен", БазовыйТипЦен.Ссылка);
					Команда.Parameters.AddWithValue("Рассчитывается", Рассчитывается);
					Команда.Parameters.AddWithValue("ПроцентСкидкиНаценки", ПроцентСкидкиНаценки);
					Команда.Parameters.AddWithValue("ЦенаВключаетНДС", ЦенаВключаетНДС);
					Команда.Parameters.AddWithValue("ПорядокОкругления", ПорядокОкругления.Ключ());
					Команда.Parameters.AddWithValue("ОкруглятьВБольшуюСторону", ОкруглятьВБольшуюСторону);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.Parameters.AddWithValue("СпособРасчетаЦены", СпособРасчетаЦены.Ключ());
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference269
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/
		// Обработчик события ПередЗаписью объекта.
		//

		public void ПередЗаписью(/*Отказ*/)
		{
			if(true/*НЕ ОбменДанными.Загрузка И ЗначениеЗаполнено(БазовыйТипЦен)*/)
			{
				/*// Если цена расчетная и введена на основании расчетной- это неправильно - записывать нельзя
*/
				if(true/*БазовыйТипЦен.Рассчитывается*/)
				{
					//ОбщегоНазначения.СообщитьОбОшибке("Базовый тип цен не может быть динамическим!", Отказ);
				}
			}
			if(true/*НЕ ОбменДанными.Загрузка И Не ЭтоГруппа*/)
			{
				if(true/*Рассчитывается*/)
				{
					/*// Если цена расчетная и на основании её введена уже расчетная - это неправильно - записывать нельзя
*/
					//Запрос = Новый Запрос;
					//Запрос.УстановитьПараметр("ТекущийТипЦен", ЭтотОбъект.Ссылка);
					/*Запрос.Текст =
			"ВЫБРАТЬ
			|	ТипЦен.Рассчитывается КАК Рассчитывается,
			|	ТипЦен.БазовыйТипЦен КАК БазовыйТипЦен
			|ИЗ
			|	Справочник.ТипыЦенНоменклатуры КАК ТипЦен
			|
			|ГДЕ
			|	ТипЦен.БазовыйТипЦен = &ТекущийТипЦен
			| И ТипЦен.Рассчитывается = Истина";*/
					//ВыборкаЦен = Запрос.Выполнить().Выбрать();
					if(true/*ВыборкаЦен.Следующий()*/)
					{
						//ОбщегоНазначения.СообщитьОбОшибке("Этот тип цен уже используется как базовый, он уже не может быть динамическим!", Отказ);
					}
				}
			}
			if(true/*НЕ ОбменДанными.Загрузка*/)
			{
				//НастройкаПравДоступа.ПередЗаписьюНовогоОбъектаСПравамиДоступаПользователей(ЭтотОбъект, Отказ, Родитель);
			}
		}
	}
}