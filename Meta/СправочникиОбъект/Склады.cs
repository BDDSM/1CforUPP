
using System;
using System.Data.SqlClient;
using V82;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	///<summary>
	///(Общ)
	///</summary>
	public partial class Склады:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*9*/ Код;
		public string/*50*/ Наименование;
		///<summary>
		///(Общ) Любая дополнительная информация
		///</summary>
		public string/*(0)*/ Комментарий;
		///<summary>
		///(Общ)
		///</summary>
		public V82.СправочникиСсылка.ТипыЦенНоменклатуры ТипЦенРозничнойТорговли;//Тип цен розничной торговли
		///<summary>
		///(Упр)
		///</summary>
		public V82.СправочникиСсылка.Подразделения Подразделение;
		///<summary>
		///(Общ)
		///</summary>
		public V82.Перечисления/*Ссылка*/.ВидыСкладов ВидСклада;//Вид склада
		///<summary>
		///(Общ)
		///</summary>
		public decimal/*(1)*/ НомерСекции;//Номер секции
		public bool РасчетРозничныхЦенПоТорговойНаценке;//Расчет розничных цен по торговой наценке
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference229(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_ParentIDRRef
						,_Folder
						,_Code
						,_Description
						,_Fld3427
						,_Fld3428RRef
						,_Fld3429RRef
						,_Fld3430RRef
						,_Fld3431
						,_Fld3432)
						Values (
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Родитель
						,@ЭтоГруппа
						,@Код
						,@Наименование
						,@Комментарий
						,@ТипЦенРозничнойТорговли
						,@Подразделение
						,@ВидСклада
						,@НомерСекции
						,@РасчетРозничныхЦенПоТорговойНаценке)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference229
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_ParentIDRRef	= @Родитель
						,_Folder	= @ЭтоГруппа
						,_Code	= @Код
						,_Description	= @Наименование
						,_Fld3427	= @Комментарий
						,_Fld3428RRef	= @ТипЦенРозничнойТорговли
						,_Fld3429RRef	= @Подразделение
						,_Fld3430RRef	= @ВидСклада
						,_Fld3431	= @НомерСекции
						,_Fld3432	= @РасчетРозничныхЦенПоТорговойНаценке
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Родитель", Родитель);
					Команда.Parameters.AddWithValue("ЭтоГруппа", ЭтоГруппа?new byte[]{0}:new byte[]{1});
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.Parameters.AddWithValue("ТипЦенРозничнойТорговли", ТипЦенРозничнойТорговли.Ссылка);
					Команда.Parameters.AddWithValue("Подразделение", Подразделение.Ссылка);
					Команда.Parameters.AddWithValue("ВидСклада", ВидСклада.Ключ());
					Команда.Parameters.AddWithValue("НомерСекции", НомерСекции);
					Команда.Parameters.AddWithValue("РасчетРозничныхЦенПоТорговойНаценке", РасчетРозничныхЦенПоТорговойНаценке);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference229
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/

		public void ПередЗаписью(/*Отказ*/)
		{
			if(true/*Не ОбменДанными.Загрузка
	   И Не ЭтоГруппа
	   И Не ЭтоНовый()
	   И ВидСклада <> Ссылка.ВидСклада
	   И ПолныеПрава.Склад_СуществуютСсылки(Ссылка)*/)
			{
				/*ОбщегоНазначения.СообщитьОбОшибке("Существуют документы, в которых выбран склад """ + Наименование + """.
		                |Реквизит ""Вид склада"" не может быть изменен, элемент не записан.");*/
				/*Отказ = Истина;*/
			}
			/*// Не дадим записать розничный склад или НТТ без указания типа цен.
*/
			if(true/*Не ОбменДанными.Загрузка
	   И Не ЭтоГруппа
	   И (ВидСклада = Перечисления.ВидыСкладов.Розничный Или ВидСклада = Перечисления.ВидыСкладов.НТТ)
	   И НЕ ЗначениеЗаполнено(ТипЦенРозничнойТорговли)*/)
			{
				/*ОбщегоНазначения.СообщитьОбОшибке("Для склада вида """+ВидСклада+""" необходимо указать тип цен розничной торговли,
		                 |элемент не записан.");*/
				/*Отказ = Истина;*/
			}
			if(true/*НЕ ОбменДанными.Загрузка*/)
			{
				/*ПрошлыйИзмененныйРодительОбъектаДоступа = ?(Не ЭтоНовый() и Не Ссылка.Родитель = Родитель, Ссылка.Родитель, Неопределено);*/
				/*НастройкаПравДоступа.ПередЗаписьюНовогоОбъектаСПравамиДоступаПользователей(ЭтотОбъект, Отказ, Родитель);*/
			}
		}
		// ПередЗаписью()
		// Обработчик события ПриЗаписи.
		//

		public void ПриЗаписи(/*Отказ*/)
		{
			if(true/*НЕ ОбменДанными.Загрузка*/)
			{
				/*НастройкаПравДоступа.ОбновитьПраваДоступаКИерархическимОбъектамПриНеобходимости(Ссылка, ПрошлыйИзмененныйРодительОбъектаДоступа, Отказ);*/
			}
		}
		// ПриЗаписи()
		////////////////////////////////////////////////////////////////////////////////
	}
}
