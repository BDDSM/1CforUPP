
using System;
using System.Data.SqlClient;
using V82;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	public partial class ГруппыПользователей:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		public Guid Ссылка;
		public long Версия;
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		public bool ПометкаУдаления;
		public bool Предопределенный;
		public Guid Владелец;
		public bool ЭтоГруппа;
		public Guid Родитель;
		public string/*9*/ Код;
		public string/*100*/ Наименование;
		public void Записать()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference79(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_ParentIDRRef
						,_Folder
						,_Code
						,_Description)
						Values (
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Родитель
						,@ЭтоГруппа
						,@Код
						,@Наименование)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference79
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_ParentIDRRef	= @Родитель
						,_Folder	= @ЭтоГруппа
						,_Code	= @Код
						,_Description	= @Наименование
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Родитель", Родитель);
					Команда.Parameters.AddWithValue("ЭтоГруппа", ЭтоГруппа?new byte[]{0}:new byte[]{1});
					Команда.Parameters.AddWithValue("Код", Код);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference79
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/

		public void ЗаписатьУнаследованныеПраваДляВсехГрупп(/**/)
		{
			/*Запрос = Новый Запрос;*/
			/*Запрос.УстановитьПараметр("ТекущаяГруппа", Ссылка);*/
			/*Запрос.Текст = 
	"ВЫБРАТЬ
	|	НастройкиПравДоступаПользователей.ОбъектДоступа,
	|	&ТекущаяГруппа КАК Пользователь,
	|	НастройкиПравДоступаПользователей.ВидОбъектаДоступа,
	|	НастройкиПравДоступаПользователей.ОбластьДанных,
	|	НастройкиПравДоступаПользователей.ВладелецПравДоступа,
	|	ИСТИНА КАК НаследованаОтВсеПользователи,
	|	НастройкиПравДоступаПользователей.Чтение,
	|	НастройкиПравДоступаПользователей.Запись,
	|	НастройкиПравДоступаПользователей.ВидНаследованияПравДоступаИерархическихСправочников
	|ИЗ
	|	РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступаПользователей
	|ГДЕ
	|	НастройкиПравДоступаПользователей.Пользователь = ЗНАЧЕНИЕ(Справочник.ГруппыПользователей.ПустаяСсылка)";*/
			/*РезультатЗапроса = Запрос.Выполнить();*/
			if(true/*НЕ РезультатЗапроса.Пустой()*/)
			{
				/*Набор = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();*/
				/*Набор.Отбор.Пользователь.Установить(Ссылка);*/
				/*Выборка = РезультатЗапроса.Выбрать();*/
				while(true/*Выборка.Следующий()*/)
				{
					/*ЗаполнитьЗначенияСвойств(Набор.Добавить(), Выборка);*/
				}
				/*;
		Набор.Записать();*/
			}
		}
		////////////////////////////////////////////////////////////////////////////////
		// СОБЫТИЯ ОБЪЕКТА

		public void ПередЗаписью(/*Отказ*/)
		{
			if(true/*ОбменДанными.Загрузка*/)
			{
			}
			/*ПроверятьНаследуемыеПрава = ЭтоНовый();*/
			/*УдалитьПриНеобходимостиНастройкиПравДоступа();*/
		}

		public void УдалитьПриНеобходимостиНастройкиПравДоступа(/**/)
		{
			if(true/*ЭтоНовый()*/)
			{
			}
			if(true/*ПометкаУдаления*/)
			{
				/*Запрос = Новый Запрос;*/
				/*Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		               |	1 КАК Поле1
		               |ИЗ
		               |	Справочник.ГруппыПользователей КАК ГруппыПользователей
		               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.НастройкиПравДоступаПользователей КАК НастройкиПравДоступа
		               |		ПО НастройкиПравДоступа.Пользователь = ГруппыПользователей.Ссылка
		               |ГДЕ
		               |	ГруппыПользователей.Ссылка = &Ссылка
		               |	И (НЕ ГруппыПользователей.ПометкаУдаления)";*/
				/*Запрос.УстановитьПараметр("Ссылка", Ссылка);*/
				/*РезультатЗапроса = Запрос.Выполнить();*/
				if(true/*НЕ РезультатЗапроса.Пустой()*/)
				{
					if(true/*НЕ УдалятьНастройкиПравБезПредупреждений*/)
					{
						/*#Если Клиент Тогда
					ОтветНаВопрос = Вопрос("Удалить настройки прав доступа связанные с группой """ + Наименование + """ (без возможности их восстановления)?", РежимДиалогаВопрос.ДаНет);*/
						/*УдалятьЗаписиНастроек = (ОтветНаВопрос = КодВозвратаДиалога.Да);*/
						/*#Иначе
					УдалятьЗаписиНастроек = Истина;*/
						/*#КонецЕсли;*/
					}
					if(true/*УдалятьЗаписиНастроек*/)
					{
						/*Набор = РегистрыСведений.НастройкиПравДоступаПользователей.СоздатьНаборЗаписей();*/
						/*Набор.Отбор.Пользователь.Установить(Ссылка);*/
						/*Набор.Записать();*/
					}
				}
			}
		}

		public void ПриЗаписи(/*Отказ*/)
		{
			if(true/*ПроверятьНаследуемыеПрава*/)
			{
				/*ЗаписатьУнаследованныеПраваДляВсехГрупп();*/
			}
		}
	}
}
