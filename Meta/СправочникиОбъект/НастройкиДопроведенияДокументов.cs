
using System;
using System.Data.SqlClient;
using System.Globalization;
using System.Runtime.Serialization;
using ProtoBuf;/*https://github.com/ServiceStack/ServiceStack/tree/master/lib*/
using ServiceStack.Text;/*https://github.com/ServiceStack/ServiceStack.Text*/
using V82;
using V82.ОбщиеОбъекты;
using V82.СправочникиСсылка;
using V82.СправочникиОбъект;
using V82.ДокументыСсылка;
using V82.Перечисления;//Ссылка;
namespace V82.СправочникиОбъект
{
	[ProtoContract]
	[DataContract]
	public partial class НастройкиДопроведенияДокументов:СправочникОбъект
	{
		public bool _ЭтоНовый;
		public bool ЭтоНовый()
		{
			return _ЭтоНовый;
		}
		[DataMember]
		[ProtoMember(1)]
		public Guid Ссылка {get;set;}
		[DataMember]
		[ProtoMember(2)]
		public long Версия {get;set;}
		[DataMember]
		[ProtoMember(3)]
		public string ВерсияДанных {get;set;}
		/*static хэш сумма состава и порядка реквизитов*/
		/*версия класса восстановленного из пакета*/
		[DataMember]
		[ProtoMember(4)]
		public bool ПометкаУдаления {get;set;}
		[DataMember]
		[ProtoMember(5)]
		public bool Предопределенный {get;set;}
		[DataMember]
		[ProtoMember(6)]
		public string/*100*/ Наименование {get;set;}
		///<summary>
		///Запускать допроведение автоматически (регламентным заданием)
		///</summary>
		[DataMember]
		[ProtoMember(7)]
		public bool ФормироватьДокументыАвтоматически {get;set;}//Запускать допроведение автоматически
		///<summary>
		///Уникальный идентификатор регламентного задания
		///</summary>
		[DataMember]
		[ProtoMember(8)]
		public string/*(36)*/ РегламентноеЗадание {get;set;}//Регламентное задание
		[DataMember]
		[ProtoMember(9)]
		public string/*(0)*/ Комментарий {get;set;}
		[DataMember]
		[ProtoMember(10)]
		public bool ДопроводитьВсеДокументы {get;set;}//Допроводить все документы
		///<summary>
		///День месяца, заканчивая которым создается задача на допроведение документов
		///</summary>
		[DataMember]
		[ProtoMember(11)]
		public decimal/*(2)*/ НомерДняКонецЗапуска {get;set;}//Номер дня конец запуска
		///<summary>
		///День месяца, начиная с которого создается задача на допроведение документов
		///</summary>
		[DataMember]
		[ProtoMember(12)]
		public decimal/*(2)*/ НомерДняНачалоЗапуска {get;set;}//Номер дня начало запуска
		[DataMember]
		[ProtoMember(13)]
		public DateTime НачалоИнтервалаДопроведения {get;set;}//Начало интервала допроведения
		[DataMember]
		[ProtoMember(14)]
		public DateTime КонецИнтервалаДопроведения {get;set;}//Конец интервала допроведения
		///<summary>
		///Количество периодов, на которые отстают обрабатываемые документы относительно текущей даты
		///</summary>
		[DataMember]
		[ProtoMember(15)]
		public decimal/*(2)*/ КоличествоПериодовОтставанияКонецИнтервала {get;set;}//Количество периодов отставания конец интервала
		///<summary>
		///Количество периодов, на которые отстают обрабатываемые документы относительно текущей даты
		///</summary>
		[DataMember]
		[ProtoMember(16)]
		public decimal/*(2)*/ КоличествоПериодовОтставанияНачалоИнтервала {get;set;}//Количество периодов отставания начало интервала
		///<summary>
		///Период, на который отстают обрабатываемые документы по сравнению с текущим периодом
		///</summary>
		[DataMember]
		[ProtoMember(17)]
		public V82.Перечисления/*Ссылка*/.Периодичность ПериодичностьОтставанияКонецИнтервала {get;set;}//Периодичность отставания конец интервала
		///<summary>
		///Период, на который отстают обрабатываемые документы по сравнению с текущим периодом
		///</summary>
		[DataMember]
		[ProtoMember(18)]
		public V82.Перечисления/*Ссылка*/.Периодичность ПериодичностьОтставанияНачалоИнтервала {get;set;}//Периодичность отставания начало интервала
		[DataMember]
		[ProtoMember(19)]
		public bool РассчитыватьКонецИнтервала {get;set;}//Рассчитывать конец интервала
		[DataMember]
		[ProtoMember(20)]
		public bool РассчитыватьНачалоИнтервала {get;set;}//Рассчитывать начало интервала
		public void Записать()
		{
			//Установка блокировки элемента на горизантально масштабированный кластер.
			//Опционально введение тайм аута на запись одного и того же объекта, не чаще раза в 5-секунд. Защита от спама. упращение алгоритма блокировки.
			//Выделение сервиса для блокировки элемента и генерации кода
			//Выполнение операций контроля без обращений к sql-серверу.
			//Контроль конфликта блокировок.
			//Контроль загрузки булкинсертом гетерогенной коллекции.
			//Контроль уникальности кода для справочников.
			//Контроль уникальности номера для документов, в границах префикса.
			//Контроль владельца, он не может быть группой.
			//Контроль владельца он должен быть задан.
			//Контроль родителя он должен быть группой.
			//Контроль количества уровней, должен соотвествовать метаданным.
			//Контроль версии, объект не должен был быть записан перед чтением текущей записи, алгоритм версионника.
			//Контроль уникальности ссылки
			//Контроль зацикливания
			//Опционально контроль битых ссылок.
			//Соблюдейние транзакционности. ПередЗаписью. Открытие транзации. Валидации. ПриЗаписи. Фиксация транзакции. Информирование о записи элемента.
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					if(_ЭтоНовый)
					{
						Команда.CommandText = @"
						Insert Into _Reference150(
						_IDRRef
						/*,_Version*/
						,_Marked
						,_IsMetadata
						,_Description
						,_Fld2670
						,_Fld2671
						,_Fld2672
						,_Fld2673
						,_Fld2674
						,_Fld2675
						,_Fld2676
						,_Fld2677
						,_Fld2678
						,_Fld2679
						,_Fld2680RRef
						,_Fld2681RRef
						,_Fld2682
						,_Fld2683)
						Values(
						@Ссылка
						/*,@Версия*/
						,@ПометкаУдаления
						,@Предопределенный
						,@Наименование
						,@ФормироватьДокументыАвтоматически
						,@РегламентноеЗадание
						,@Комментарий
						,@ДопроводитьВсеДокументы
						,@НомерДняКонецЗапуска
						,@НомерДняНачалоЗапуска
						,@НачалоИнтервалаДопроведения
						,@КонецИнтервалаДопроведения
						,@КоличествоПериодовОтставанияКонецИнтервала
						,@КоличествоПериодовОтставанияНачалоИнтервала
						,@ПериодичностьОтставанияКонецИнтервала
						,@ПериодичностьОтставанияНачалоИнтервала
						,@РассчитыватьКонецИнтервала
						,@РассчитыватьНачалоИнтервала)";
					}
					else
					{
						Команда.CommandText = @"
						Update _Reference150
						Set
						/*_IDRRef	= @Ссылка*/
						/*,_Version	= @Версия*/
						_Marked	= @ПометкаУдаления
						,_IsMetadata	= @Предопределенный
						,_Description	= @Наименование
						,_Fld2670	= @ФормироватьДокументыАвтоматически
						,_Fld2671	= @РегламентноеЗадание
						,_Fld2672	= @Комментарий
						,_Fld2673	= @ДопроводитьВсеДокументы
						,_Fld2674	= @НомерДняКонецЗапуска
						,_Fld2675	= @НомерДняНачалоЗапуска
						,_Fld2676	= @НачалоИнтервалаДопроведения
						,_Fld2677	= @КонецИнтервалаДопроведения
						,_Fld2678	= @КоличествоПериодовОтставанияКонецИнтервала
						,_Fld2679	= @КоличествоПериодовОтставанияНачалоИнтервала
						,_Fld2680RRef	= @ПериодичностьОтставанияКонецИнтервала
						,_Fld2681RRef	= @ПериодичностьОтставанияНачалоИнтервала
						,_Fld2682	= @РассчитыватьКонецИнтервала
						,_Fld2683	= @РассчитыватьНачалоИнтервала
						Where _IDRRef = @Ссылка";
					}
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					/*Команда.Parameters.AddWithValue("Версия", Версия);*/
					Команда.Parameters.AddWithValue("ПометкаУдаления", ПометкаУдаления);
					Команда.Parameters.AddWithValue("Предопределенный", Предопределенный);
					Команда.Parameters.AddWithValue("Наименование", Наименование);
					Команда.Parameters.AddWithValue("ФормироватьДокументыАвтоматически", ФормироватьДокументыАвтоматически);
					Команда.Parameters.AddWithValue("РегламентноеЗадание", РегламентноеЗадание);
					Команда.Parameters.AddWithValue("Комментарий", Комментарий);
					Команда.Parameters.AddWithValue("ДопроводитьВсеДокументы", ДопроводитьВсеДокументы);
					Команда.Parameters.AddWithValue("НомерДняКонецЗапуска", НомерДняКонецЗапуска);
					Команда.Parameters.AddWithValue("НомерДняНачалоЗапуска", НомерДняНачалоЗапуска);
					Команда.Parameters.AddWithValue("НачалоИнтервалаДопроведения", НачалоИнтервалаДопроведения);
					Команда.Parameters.AddWithValue("КонецИнтервалаДопроведения", КонецИнтервалаДопроведения);
					Команда.Parameters.AddWithValue("КоличествоПериодовОтставанияКонецИнтервала", КоличествоПериодовОтставанияКонецИнтервала);
					Команда.Parameters.AddWithValue("КоличествоПериодовОтставанияНачалоИнтервала", КоличествоПериодовОтставанияНачалоИнтервала);
					Команда.Parameters.AddWithValue("ПериодичностьОтставанияКонецИнтервала", ПериодичностьОтставанияКонецИнтервала.Ключ());
					Команда.Parameters.AddWithValue("ПериодичностьОтставанияНачалоИнтервала", ПериодичностьОтставанияНачалоИнтервала.Ключ());
					Команда.Parameters.AddWithValue("РассчитыватьКонецИнтервала", РассчитыватьКонецИнтервала);
					Команда.Parameters.AddWithValue("РассчитыватьНачалоИнтервала", РассчитыватьНачалоИнтервала);
					Команда.ExecuteNonQuery();
				}
			}
		}
		public void Удалить()
		{
			using (var Подключение = new SqlConnection(СтрокаСоединения))
			{
				Подключение.Open();
				using (var Команда = Подключение.CreateCommand())
				{
					Команда.CommandText = @"Delete _Reference150
					Where _IDRRef=@Ссылка";
					Команда.Parameters.AddWithValue("Ссылка", Ссылка.ToByteArray());
					Команда.ExecuteNonQuery();
				}
			}
		}
		/*МодульОбъекта*/
		// Подготавливает заголовок сообщений об ошибках при записи
		//
		// Возвращаемое значение
		//  Строка, заголовок сообщений

		public object ЗаголовокПриЗаписи(/**/)
		{
			return null;
		}
		// Выполняет проверку заполненности реквизитов.
		//
		// Параметры
		//	Заголовок - заголовок сообщения об ошибке
		//
		// Возвращаемое значение
		//	Истина  - все проверяемые реквизиты заполнены
		//	Ложь	- не все проверяемые реквизиты заполнены

		public object РеквизитыЗаполнены(/*Знач Заголовок*/)
		{
			//Отказ = НЕ ЗначениеЗаполнено(Наименование);
			return null;
		}
		// Возвращает имя объекта метаданных для создания регл. задания
		//
		// Возвращаемое значение
		//	Строка  - имя объекта метаданных

		public object ИмяРегламентногоЗадания(/**/)
		{
			return null;
		}

		public void ПередЗаписью(/*Отказ*/)
		{
			if(true/*НЕ ЗначениеЗаполнено(Наименование)*/)
			{
				//ОбщегоНазначения.СообщитьОбОшибке("Не указано наименование", Отказ, ЗаголовокПриЗаписи());
			}
		}
	}
}