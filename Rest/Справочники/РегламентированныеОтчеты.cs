
using System;
using Rest;
using System.Globalization;
using System.Collections.Generic;
using ServiceStack.ServiceHost;
using ServiceStack.ServiceInterface;

namespace V82.Справочники
{
	//ReglamentirovannyeOtchety
	[Маршрут("Справочники/РегламентированныеОтчеты","")]
	public class РегламентированныеОтчетыЗапрос: V82.СправочникиСсылка.РегламентированныеОтчеты,IReturn<РегламентированныеОтчетыЗапрос>
	{
	}
	[Маршрут("Справочники/РегламентированныеОтчеты/НайтиПоСсылке","{Ссылка}")]
	[Маршрут("Справочники/РегламентированныеОтчеты/ПоСсылке","{Ссылка}")]
	public class РегламентированныеОтчетыНайтиПоСсылке: V82.СправочникиСсылка.РегламентированныеОтчеты,IReturn<РегламентированныеОтчетыНайтиПоСсылке>
	{
	}
	[Маршрут("Справочники/РегламентированныеОтчеты/НайтиПоКоду","{Код}")]
	[Маршрут("Справочники/РегламентированныеОтчеты/ПоКоду","{Код}")]
	public class РегламентированныеОтчетыНайтиПоКоду: V82.СправочникиСсылка.РегламентированныеОтчеты,IReturn<РегламентированныеОтчетыНайтиПоКоду>
	{
	}
	[Маршрут("Справочники/РегламентированныеОтчеты/НайтиПоНаименованию","{Наименование}")]
	[Маршрут("Справочники/РегламентированныеОтчеты/ПоНаименованию","{Наименование}")]
	public class РегламентированныеОтчетыНайтиПоНаименованию: V82.СправочникиСсылка.РегламентированныеОтчеты,IReturn<РегламентированныеОтчетыНайтиПоНаименованию>
	{
	}
	[Маршрут("Справочники/РегламентированныеОтчеты/ВыбратьПоСсылке","{___Первые}")]
	[Маршрут("Справочники/РегламентированныеОтчеты/ВыбратьПоСсылке","{___Первые}/{___Мин}")]
	[Маршрут("Справочники/РегламентированныеОтчеты/ВыбратьПоСсылке","{___Первые}/{___Мин}/{___Макс}")]
	public class РегламентированныеОтчетыВыбратьПоСсылке: V82.СправочникиСсылка.РегламентированныеОтчеты,IReturn<РегламентированныеОтчетыВыбратьПоСсылке>
	{
		public int ___Первые {get; set;}
		public Guid ___Мин {get; set;}
		public Guid ___Макс {get; set;}
	}
	[Маршрут("Справочники/РегламентированныеОтчеты/ВыбратьПоКоду","{___Первые}")]
	[Маршрут("Справочники/РегламентированныеОтчеты/ВыбратьПоКоду","{___Первые}/{___Мин}")]
	[Маршрут("Справочники/РегламентированныеОтчеты/ВыбратьПоКоду","{___Первые}/{___Мин}/{___Макс}")]
	public class РегламентированныеОтчетыВыбратьПоКоду: V82.СправочникиСсылка.РегламентированныеОтчеты,IReturn<РегламентированныеОтчетыВыбратьПоКоду>
	{
		public int ___Первые {get; set;}
		public string ___Мин {get; set;}
		public string ___Макс {get; set;}
	}
	[Маршрут("Справочники/РегламентированныеОтчеты/ВыбратьПоНаименованию","{___Первые}")]
	[Маршрут("Справочники/РегламентированныеОтчеты/ВыбратьПоНаименованию","{___Первые}/{___Мин}")]
	[Маршрут("Справочники/РегламентированныеОтчеты/ВыбратьПоНаименованию","{___Первые}/{___Мин}/{___Макс}")]
	public class РегламентированныеОтчетыВыбратьПоНаименованию: V82.СправочникиСсылка.РегламентированныеОтчеты,IReturn<РегламентированныеОтчетыВыбратьПоНаименованию>
	{
		public int ___Первые {get; set;}
		public string ___Мин {get; set;}
		public string ___Макс {get; set;}
	}
	[Маршрут("Справочники/РегламентированныеОтчеты/СтраницаПоСсылке","{___Размер}/{___Номер}")]
	public class РегламентированныеОтчетыСтраницаПоСсылке: V82.СправочникиСсылка.РегламентированныеОтчеты,IReturn<РегламентированныеОтчетыСтраницаПоСсылке>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}
	[Маршрут("Справочники/РегламентированныеОтчеты/СтраницаПоКоду","{___Размер}/{___Номер}")]
	public class РегламентированныеОтчетыСтраницаПоКоду: V82.СправочникиСсылка.РегламентированныеОтчеты,IReturn<РегламентированныеОтчетыСтраницаПоКоду>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}
	[Маршрут("Справочники/РегламентированныеОтчеты/СтраницаПоНаименованию","{___Размер}/{___Номер}")]
	public class РегламентированныеОтчетыСтраницаПоНаименованию: V82.СправочникиСсылка.РегламентированныеОтчеты,IReturn<РегламентированныеОтчетыСтраницаПоНаименованию>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}
	[Маршрут("Справочники/РегламентированныеОтчеты/ИерархияВыбратьПоСсылке","{___Родитель}/{___Режим}/{___Первые}")]
	[Маршрут("Справочники/РегламентированныеОтчеты/ИерархияВыбратьПоСсылке","{___Родитель}/{___Режим}/{___Первые}/{___Мин}")]
	[Маршрут("Справочники/РегламентированныеОтчеты/ИерархияВыбратьПоСсылке","{___Родитель}/{___Режим}/{___Первые}/{___Мин}/{___Макс}")]
	public class РегламентированныеОтчетыИерархияВыбратьПоСсылке: V82.СправочникиСсылка.РегламентированныеОтчеты,IReturn<РегламентированныеОтчетыИерархияВыбратьПоСсылке>
	{
		public Guid ___Родитель {get; set;}
		public int ___Режим {get; set;}
		public int ___Первые {get; set;}
		public Guid ___Мин {get; set;}
		public Guid ___Макс {get; set;}
	}
	[Маршрут("Справочники/РегламентированныеОтчеты/ИерархияСтраницаПоСсылке","{___Родитель}/{___Режим}/{___Размер}/{___Номер}")]
	public class РегламентированныеОтчетыИерархияСтраницаПоСсылке: V82.СправочникиСсылка.РегламентированныеОтчеты,IReturn<РегламентированныеОтчетыИерархияСтраницаПоСсылке>
	{
		public Guid ___Родитель {get; set;}
		public int ___Режим {get; set;}
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}

	public class РегламентированныеОтчетыОтвет
	{
		public string Ответ {get;set;}
	}

	public partial class РегламентированныеОтчетыСервис : Service
	{
		
		public object Get(РегламентированныеОтчетыЗапрос Запрос)
		{
			return null;
		}
		
		public object Get(РегламентированныеОтчетыНайтиПоСсылке Запрос)
		{
			if (Запрос.Ссылка == null)
			{
				return null;
			}
			var Ссылка = V82.Справочники.РегламентированныеОтчеты.НайтиПоСсылке(Запрос.Ссылка);
			if (Ссылка == null)
			{
				return new РегламентированныеОтчетыОтвет() { Ответ = "РегламентированныеОтчеты c ссылкой '" + Запрос.Ссылка + "' не найден." };
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(РегламентированныеОтчетыНайтиПоКоду Запрос)
		{
			if(Запрос.Код == null)
			{
				return null;
			}
			var СтрокаКод = System.Uri.UnescapeDataString(Запрос.Код);
			var Ссылка = V82.Справочники.РегламентированныеОтчеты.НайтиПоКоду(СтрокаКод);
			if (Ссылка == null)
			{
				return new РегламентированныеОтчетыОтвет() {Ответ = "РегламентированныеОтчеты c кодом '" + Запрос.Код + "' не найдено."};
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(РегламентированныеОтчетыНайтиПоНаименованию Запрос)
		{
			return null;
		}
		
		public object Get(РегламентированныеОтчетыВыбратьПоСсылке Запрос)
		{
			if (Запрос.___Макс == Guid.Empty)
			{
				Запрос.___Макс = Guid.Parse("ffffffff-ffff-ffff-ffff-ffffffffffff");
			}
			var Коллекция = new List<object>();
			foreach (var Ссылка in V82.Справочники.РегламентированныеОтчеты.ВыбратьПоСсылке(Запрос.___Первые, Запрос.___Мин, Запрос.___Макс))
			{
				Коллекция.Add(Ссылка.ПолучитьОбъект());
			}
			return Коллекция;
		}
		
		public object Get(РегламентированныеОтчетыВыбратьПоКоду Запрос)
		{
			return null;
		}
		
		public object Get(РегламентированныеОтчетыВыбратьПоНаименованию Запрос)
		{
			return null;
		}
		
		public object Get(РегламентированныеОтчетыСтраницаПоСсылке Запрос)
		{
			return null;
		}
		
		public object Get(РегламентированныеОтчетыСтраницаПоКоду Запрос)
		{
			return null;
		}
		
		public object Get(РегламентированныеОтчетыСтраницаПоНаименованию Запрос)
		{
			return null;
		}
		
		public object Get(РегламентированныеОтчетыИерархияВыбратьПоСсылке Запрос)
		{
			if (Запрос.___Макс == Guid.Empty)
			{
				Запрос.___Макс = Guid.Parse("ffffffff-ffff-ffff-ffff-ffffffffffff");
			}
			var Коллекция = new List<object>();
			foreach (var Ссылка in V82.Справочники.РегламентированныеОтчеты.ИерархияВыбратьПоСсылке(Запрос.___Родитель,Запрос.___Режим,Запрос.___Первые, Запрос.___Мин, Запрос.___Макс))
			{
				Коллекция.Add(Ссылка.ПолучитьОбъект());
			}
			return Коллекция;
		}
		
		public object Get(РегламентированныеОтчетыИерархияСтраницаПоСсылке Запрос)
		{
			return null;
		}

		public object Any(РегламентированныеОтчетыЗапрос Запрос)
		{
			return new РегламентированныеОтчетыОтвет {Ответ = "РегламентированныеОтчеты, "};
		}

		public object Post(РегламентированныеОтчетыЗапрос ЗапросРегламентированныеОтчеты)
		{
			var Ссылка = (СправочникиСсылка.РегламентированныеОтчеты)ЗапросРегламентированныеОтчеты;
			var Объект = Ссылка.ПолучитьОбъект();
			Объект.Записать();
			return null;
		}


	}
}