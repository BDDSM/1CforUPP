
using System;
using Rest;
using System.Globalization;
using System.Collections.Generic;
using ServiceStack.ServiceHost;
using ServiceStack.ServiceInterface;

namespace V82.Справочники
{
	//TerritorialnyeUsloviya
	[Маршрут("Справочники/ТерриториальныеУсловия","")]
	public class ТерриториальныеУсловияЗапрос: V82.СправочникиСсылка.ТерриториальныеУсловия,IReturn<ТерриториальныеУсловияЗапрос>
	{
	}
	[Маршрут("Справочники/ТерриториальныеУсловия/НайтиПоСсылке","{Ссылка}")]
	[Маршрут("Справочники/ТерриториальныеУсловия/ПоСсылке","{Ссылка}")]
	public class ТерриториальныеУсловияНайтиПоСсылке: V82.СправочникиСсылка.ТерриториальныеУсловия,IReturn<ТерриториальныеУсловияНайтиПоСсылке>
	{
	}
	[Маршрут("Справочники/ТерриториальныеУсловия/НайтиПоКоду","{Код}")]
	[Маршрут("Справочники/ТерриториальныеУсловия/ПоКоду","{Код}")]
	public class ТерриториальныеУсловияНайтиПоКоду: V82.СправочникиСсылка.ТерриториальныеУсловия,IReturn<ТерриториальныеУсловияНайтиПоКоду>
	{
	}
	[Маршрут("Справочники/ТерриториальныеУсловия/НайтиПоНаименованию","{Наименование}")]
	[Маршрут("Справочники/ТерриториальныеУсловия/ПоНаименованию","{Наименование}")]
	public class ТерриториальныеУсловияНайтиПоНаименованию: V82.СправочникиСсылка.ТерриториальныеУсловия,IReturn<ТерриториальныеУсловияНайтиПоНаименованию>
	{
	}
	[Маршрут("Справочники/ТерриториальныеУсловия/ВыбратьПоСсылке","{___Первые}/{___Мин}/{___Макс}")]
	public class ТерриториальныеУсловияВыбратьПоСсылке: V82.СправочникиСсылка.ТерриториальныеУсловия,IReturn<ТерриториальныеУсловияВыбратьПоСсылке>
	{
		public int ___Первые {get; set;}
		public Guid ___Мин {get; set;}
		public Guid ___Макс {get; set;}
	}
	[Маршрут("Справочники/ТерриториальныеУсловия/ВыбратьПоКоду","{___Первые}/{___Мин}/{___Макс}")]
	public class ТерриториальныеУсловияВыбратьПоКоду: V82.СправочникиСсылка.ТерриториальныеУсловия,IReturn<ТерриториальныеУсловияВыбратьПоКоду>
	{
		public int ___Первые {get; set;}
		public string ___Мин {get; set;}
		public string ___Макс {get; set;}
	}
	[Маршрут("Справочники/ТерриториальныеУсловия/ВыбратьПоНаименованию","{___Первые}/{___Мин}/{___Макс}")]
	public class ТерриториальныеУсловияВыбратьПоНаименованию: V82.СправочникиСсылка.ТерриториальныеУсловия,IReturn<ТерриториальныеУсловияВыбратьПоНаименованию>
	{
		public int ___Первые {get; set;}
		public string ___Мин {get; set;}
		public string ___Макс {get; set;}
	}

	public class ТерриториальныеУсловияОтвет
	{
		public string Ответ {get;set;}
	}

	public class ТерриториальныеУсловияСервис : Service
	{
		
		public object Get(ТерриториальныеУсловияНайтиПоСсылке Запрос)
		{
			return null;
		}
		
		public object Get(ТерриториальныеУсловияНайтиПоКоду Запрос)
		{
			if(Запрос.Код == null)
			{
				return null;
			}
			string СтрокаКод = System.Uri.UnescapeDataString(Запрос.Код);
			var Ссылка = V82.Справочники.ТерриториальныеУсловия.НайтиПоКоду(СтрокаКод);
			if (Ссылка == null)
			{
				return new ТерриториальныеУсловияОтвет() {Ответ = "ТерриториальныеУсловия c кодом '" + Запрос.Код+"' не найдено."};
			}
			return Ссылка;
		}
		
		public object Get(ТерриториальныеУсловияНайтиПоНаименованию Запрос)
		{
			return null;
		}
		
		public object Get(ТерриториальныеУсловияВыбратьПоСсылке Запрос)
		{
			return null;
		}
		
		public object Get(ТерриториальныеУсловияВыбратьПоКоду Запрос)
		{
			return null;
		}
		
		public object Get(ТерриториальныеУсловияВыбратьПоНаименованию Запрос)
		{
			return null;
		}

		public object Any(ТерриториальныеУсловияЗапрос Запрос)
		{
			return new ТерриториальныеУсловияОтвет {Ответ = "ТерриториальныеУсловия, "};
		}

		public object Post(ТерриториальныеУсловияЗапрос ЗапросТерриториальныеУсловия)
		{
			var Ссылка = (СправочникиСсылка.ТерриториальныеУсловия)ЗапросТерриториальныеУсловия;
			var Объект = Ссылка.ПолучитьОбъект();
			Объект.Записать();
			return null;
		}


	}
}