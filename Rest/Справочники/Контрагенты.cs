
using System;
using Rest;
using System.Globalization;
using System.Collections.Generic;
using ServiceStack.ServiceHost;
using ServiceStack.ServiceInterface;

namespace V82.Справочники
{
	//Kontragenty
	[Маршрут("Справочники/Контрагенты","")]
	public class КонтрагентыЗапрос: V82.СправочникиСсылка.Контрагенты,IReturn<КонтрагентыЗапрос>
	{
	}
	[Маршрут("Справочники/Контрагенты/НайтиПоСсылке","{Ссылка}")]
	[Маршрут("Справочники/Контрагенты/ПоСсылке","{Ссылка}")]
	public class КонтрагентыНайтиПоСсылке: V82.СправочникиСсылка.Контрагенты,IReturn<КонтрагентыНайтиПоСсылке>
	{
	}
	[Маршрут("Справочники/Контрагенты/НайтиПоКоду","{Код}")]
	[Маршрут("Справочники/Контрагенты/ПоКоду","{Код}")]
	public class КонтрагентыНайтиПоКоду: V82.СправочникиСсылка.Контрагенты,IReturn<КонтрагентыНайтиПоКоду>
	{
	}
	[Маршрут("Справочники/Контрагенты/НайтиПоНаименованию","{Наименование}")]
	[Маршрут("Справочники/Контрагенты/ПоНаименованию","{Наименование}")]
	public class КонтрагентыНайтиПоНаименованию: V82.СправочникиСсылка.Контрагенты,IReturn<КонтрагентыНайтиПоНаименованию>
	{
	}
	[Маршрут("Справочники/Контрагенты/ВыбратьПоСсылке","{___Первые}")]
	[Маршрут("Справочники/Контрагенты/ВыбратьПоСсылке","{___Первые}/{___Мин}")]
	[Маршрут("Справочники/Контрагенты/ВыбратьПоСсылке","{___Первые}/{___Мин}/{___Макс}")]
	public class КонтрагентыВыбратьПоСсылке: V82.СправочникиСсылка.Контрагенты,IReturn<КонтрагентыВыбратьПоСсылке>
	{
		public int ___Первые {get; set;}
		public Guid ___Мин {get; set;}
		public Guid ___Макс {get; set;}
	}
	[Маршрут("Справочники/Контрагенты/ВыбратьПоКоду","{___Первые}")]
	[Маршрут("Справочники/Контрагенты/ВыбратьПоКоду","{___Первые}/{___Мин}")]
	[Маршрут("Справочники/Контрагенты/ВыбратьПоКоду","{___Первые}/{___Мин}/{___Макс}")]
	public class КонтрагентыВыбратьПоКоду: V82.СправочникиСсылка.Контрагенты,IReturn<КонтрагентыВыбратьПоКоду>
	{
		public int ___Первые {get; set;}
		public string ___Мин {get; set;}
		public string ___Макс {get; set;}
	}
	[Маршрут("Справочники/Контрагенты/ВыбратьПоНаименованию","{___Первые}")]
	[Маршрут("Справочники/Контрагенты/ВыбратьПоНаименованию","{___Первые}/{___Мин}")]
	[Маршрут("Справочники/Контрагенты/ВыбратьПоНаименованию","{___Первые}/{___Мин}/{___Макс}")]
	public class КонтрагентыВыбратьПоНаименованию: V82.СправочникиСсылка.Контрагенты,IReturn<КонтрагентыВыбратьПоНаименованию>
	{
		public int ___Первые {get; set;}
		public string ___Мин {get; set;}
		public string ___Макс {get; set;}
	}
	[Маршрут("Справочники/Контрагенты/СтраницаПоСсылке","{___Размер}/{___Номер}")]
	public class КонтрагентыСтраницаПоСсылке: V82.СправочникиСсылка.Контрагенты,IReturn<КонтрагентыСтраницаПоСсылке>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}
	[Маршрут("Справочники/Контрагенты/СтраницаПоКоду","{___Размер}/{___Номер}")]
	public class КонтрагентыСтраницаПоКоду: V82.СправочникиСсылка.Контрагенты,IReturn<КонтрагентыСтраницаПоКоду>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}
	[Маршрут("Справочники/Контрагенты/СтраницаПоНаименованию","{___Размер}/{___Номер}")]
	public class КонтрагентыСтраницаПоНаименованию: V82.СправочникиСсылка.Контрагенты,IReturn<КонтрагентыСтраницаПоНаименованию>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}
	[Маршрут("Справочники/Контрагенты/ИерархияВыбратьПоСсылке","{___Родитель}/{___Режим}/{___Первые}")]
	[Маршрут("Справочники/Контрагенты/ИерархияВыбратьПоСсылке","{___Родитель}/{___Режим}/{___Первые}/{___Мин}")]
	[Маршрут("Справочники/Контрагенты/ИерархияВыбратьПоСсылке","{___Родитель}/{___Режим}/{___Первые}/{___Мин}/{___Макс}")]
	public class КонтрагентыИерархияВыбратьПоСсылке: V82.СправочникиСсылка.Контрагенты,IReturn<КонтрагентыИерархияВыбратьПоСсылке>
	{
		public Guid ___Родитель {get; set;}
		public int ___Режим {get; set;}
		public int ___Первые {get; set;}
		public Guid ___Мин {get; set;}
		public Guid ___Макс {get; set;}
	}
	[Маршрут("Справочники/Контрагенты/ИерархияСтраницаПоСсылке","{___Родитель}/{___Режим}/{___Размер}/{___Номер}")]
	public class КонтрагентыИерархияСтраницаПоСсылке: V82.СправочникиСсылка.Контрагенты,IReturn<КонтрагентыИерархияСтраницаПоСсылке>
	{
		public Guid ___Родитель {get; set;}
		public int ___Режим {get; set;}
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}

	public class КонтрагентыОтвет
	{
		public string Ответ {get;set;}
	}

	public partial class КонтрагентыСервис : Service
	{
		
		public object Get(КонтрагентыЗапрос Запрос)
		{
			return null;
		}
		
		public object Get(КонтрагентыНайтиПоСсылке Запрос)
		{
			if (Запрос.Ссылка == null)
			{
				return null;
			}
			var Ссылка = V82.Справочники.Контрагенты.НайтиПоСсылке(Запрос.Ссылка);
			if (Ссылка == null)
			{
				return new КонтрагентыОтвет() { Ответ = "Контрагенты c ссылкой '" + Запрос.Ссылка + "' не найден." };
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(КонтрагентыНайтиПоКоду Запрос)
		{
			if(Запрос.Код == null)
			{
				return null;
			}
			var СтрокаКод = System.Uri.UnescapeDataString(Запрос.Код);
			var Ссылка = V82.Справочники.Контрагенты.НайтиПоКоду(СтрокаКод);
			if (Ссылка == null)
			{
				return new КонтрагентыОтвет() {Ответ = "Контрагенты c кодом '" + Запрос.Код + "' не найдено."};
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(КонтрагентыНайтиПоНаименованию Запрос)
		{
			return null;
		}
		
		public object Get(КонтрагентыВыбратьПоСсылке Запрос)
		{
			if (Запрос.___Макс == Guid.Empty)
			{
				Запрос.___Макс = Guid.Parse("ffffffff-ffff-ffff-ffff-ffffffffffff");
			}
			var Коллекция = new List<object>();
			foreach (var Ссылка in V82.Справочники.Контрагенты.ВыбратьПоСсылке(Запрос.___Первые, Запрос.___Мин, Запрос.___Макс))
			{
				Коллекция.Add(Ссылка.ПолучитьОбъект());
			}
			return Коллекция;
		}
		
		public object Get(КонтрагентыВыбратьПоКоду Запрос)
		{
			return null;
		}
		
		public object Get(КонтрагентыВыбратьПоНаименованию Запрос)
		{
			return null;
		}
		
		public object Get(КонтрагентыСтраницаПоСсылке Запрос)
		{
			return null;
		}
		
		public object Get(КонтрагентыСтраницаПоКоду Запрос)
		{
			return null;
		}
		
		public object Get(КонтрагентыСтраницаПоНаименованию Запрос)
		{
			return null;
		}
		
		public object Get(КонтрагентыИерархияВыбратьПоСсылке Запрос)
		{
			if (Запрос.___Макс == Guid.Empty)
			{
				Запрос.___Макс = Guid.Parse("ffffffff-ffff-ffff-ffff-ffffffffffff");
			}
			var Коллекция = new List<object>();
			foreach (var Ссылка in V82.Справочники.Контрагенты.ИерархияВыбратьПоСсылке(Запрос.___Родитель,Запрос.___Режим,Запрос.___Первые, Запрос.___Мин, Запрос.___Макс))
			{
				Коллекция.Add(Ссылка.ПолучитьОбъект());
			}
			return Коллекция;
		}
		
		public object Get(КонтрагентыИерархияСтраницаПоСсылке Запрос)
		{
			return null;
		}

		public object Any(КонтрагентыЗапрос Запрос)
		{
			return new КонтрагентыОтвет {Ответ = "Контрагенты, "};
		}

		public object Post(КонтрагентыЗапрос ЗапросКонтрагенты)
		{
			var Ссылка = (СправочникиСсылка.Контрагенты)ЗапросКонтрагенты;
			var Объект = Ссылка.ПолучитьОбъект();
			Объект.Записать();
			return null;
		}


	}
}