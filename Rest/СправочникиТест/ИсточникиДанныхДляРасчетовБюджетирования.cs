
using System;
using System.Globalization;
using System.Collections.Generic;
using ServiceStack.ServiceHost;
using ServiceStack.ServiceInterface;
using ServiceStack.ServiceClient.Web;
using V82.Справочники;

namespace V82.Rest.СправочникиТест
{
	public class ИсточникиДанныхДляРасчетовБюджетирования:V82.Rest.СправочникиТест.СправочникТест
	{
		public static ИсточникиДанныхДляРасчетовБюджетированияЗапрос НайтиПоУникальномуИдентификатору(Guid УникальныйИдентификатор)//ПолучитьПоСсылке,Взять
		{
			var Урл = "http://localhost:1337/Catalogs/ИсточникиДанныхДляРасчетовБюджетирования/НайтиПоСсылке/"+УникальныйИдентификатор+"?format=json";
			var Клиент = new JsonServiceClient(Урл);
			ИсточникиДанныхДляРасчетовБюджетированияЗапрос ИсточникиДанныхДляРасчетовБюджетированияЗапрос = null;
			try
			{
				ИсточникиДанныхДляРасчетовБюджетированияЗапрос = Клиент.Get(new ИсточникиДанныхДляРасчетовБюджетированияЗапрос());
			}
			catch (Exception)
			{
				return null;
			}
			return ИсточникиДанныхДляРасчетовБюджетированияЗапрос;
		}
		public static ИсточникиДанныхДляРасчетовБюджетированияЗапрос НайтиПоКоду(string Код)
		{
			var Урл = "http://localhost:1337/Catalogs/ИсточникиДанныхДляРасчетовБюджетирования/НайтиПоКоду/"+Код+"?format=json";
			var Клиент = new JsonServiceClient(Урл);
			ИсточникиДанныхДляРасчетовБюджетированияЗапрос ИсточникиДанныхДляРасчетовБюджетированияЗапрос = null;
			try
			{
				ИсточникиДанныхДляРасчетовБюджетированияЗапрос = Клиент.Get(new ИсточникиДанныхДляРасчетовБюджетированияЗапрос());
			}
			catch (Exception)
			{
				return null;
			}
			return ИсточникиДанныхДляРасчетовБюджетированияЗапрос;
		}
		public static ИсточникиДанныхДляРасчетовБюджетированияЗапрос НайтиПоНаименованию(string Наименование)//ПолучитьПоНаименованию,Взять
		{
			var Урл = "http://localhost:1337/Catalogs/ИсточникиДанныхДляРасчетовБюджетирования/НайтиПоНаименованию/"+Наименование+"?format=json";
			var Клиент = new JsonServiceClient(Урл);
			ИсточникиДанныхДляРасчетовБюджетированияЗапрос ИсточникиДанныхДляРасчетовБюджетированияЗапрос = null;
			try
			{
				ИсточникиДанныхДляРасчетовБюджетированияЗапрос = Клиент.Get(new ИсточникиДанныхДляРасчетовБюджетированияЗапрос());
			}
			catch (Exception)
			{
				return null;
			}
			return ИсточникиДанныхДляРасчетовБюджетированияЗапрос;
		}
		public static void ЗаписатьНовый(ИсточникиДанныхДляРасчетовБюджетированияЗапрос ИсточникиДанныхДляРасчетовБюджетированияЗапрос)//Положить
		{
			var Урл = "http://localhost:1337/Catalogs/ИсточникиДанныхДляРасчетовБюджетирования?format=json";
			var Клиент = new JsonServiceClient(Урл);
			var ИсточникиДанныхДляРасчетовБюджетированияОтвет = Клиент.Post(ИсточникиДанныхДляРасчетовБюджетированияЗапрос);
		}
		public static void Записать(ИсточникиДанныхДляРасчетовБюджетированияЗапрос ИсточникиДанныхДляРасчетовБюджетированияЗапрос)//Обновить
		{
			var Урл = "http://localhost:1337/Catalogs/ИсточникиДанныхДляРасчетовБюджетирования?format=json";
			var Клиент = new JsonServiceClient(Урл);
			var ИсточникиДанныхДляРасчетовБюджетированияОтвет = Клиент.Put(ИсточникиДанныхДляРасчетовБюджетированияЗапрос);
		}
		public static void Удалить(ИсточникиДанныхДляРасчетовБюджетированияЗапрос ИсточникиДанныхДляРасчетовБюджетированияЗапрос)//
		{
			var Урл = "http://localhost:1337/Catalogs/ИсточникиДанныхДляРасчетовБюджетирования?format=json";
			var Клиент = new JsonServiceClient(Урл);
			var ИсточникиДанныхДляРасчетовБюджетированияОтвет = Клиент.Delete(ИсточникиДанныхДляРасчетовБюджетированияЗапрос);
		}
	}
}