
using System;
using Rest;
using System.Globalization;
using System.Collections.Generic;
using ServiceStack.ServiceHost;
using ServiceStack.ServiceInterface;

namespace V82.Документы
{
	//ZaprosVFSSOProverkeRabotodatelya
	[Маршрут("Документы/ЗапросВФССОПроверкеРаботодателя","")]
	public class ЗапросВФССОПроверкеРаботодателяЗапрос: V82.ДокументыСсылка.ЗапросВФССОПроверкеРаботодателя,IReturn<ЗапросВФССОПроверкеРаботодателяЗапрос>
	{
	}
	[Маршрут("Документы/ЗапросВФССОПроверкеРаботодателя/НайтиПоСсылке","{Ссылка}")]
	[Маршрут("Документы/ЗапросВФССОПроверкеРаботодателя/ПоСсылке","{Ссылка}")]
	public class ЗапросВФССОПроверкеРаботодателяНайтиПоСсылке: V82.ДокументыСсылка.ЗапросВФССОПроверкеРаботодателя,IReturn<ЗапросВФССОПроверкеРаботодателяНайтиПоСсылке>
	{
	}
	[Маршрут("Документы/ЗапросВФССОПроверкеРаботодателя/НайтиПоНомеру","{Номер}")]
	[Маршрут("Документы/ЗапросВФССОПроверкеРаботодателя/ПоНомеру","{Номер}")]
	public class ЗапросВФССОПроверкеРаботодателяНайтиПоНомеру: V82.ДокументыСсылка.ЗапросВФССОПроверкеРаботодателя,IReturn<ЗапросВФССОПроверкеРаботодателяНайтиПоНомеру>
	{
	}
	[Маршрут("Документы/ЗапросВФССОПроверкеРаботодателя/ВыбратьПоСсылке","{___Первые}")]
	[Маршрут("Документы/ЗапросВФССОПроверкеРаботодателя/ВыбратьПоСсылке","{___Первые}/{___Мин}")]
	[Маршрут("Документы/ЗапросВФССОПроверкеРаботодателя/ВыбратьПоСсылке","{___Первые}/{___Мин}/{___Макс}")]
	public class ЗапросВФССОПроверкеРаботодателяВыбратьПоСсылке: V82.ДокументыСсылка.ЗапросВФССОПроверкеРаботодателя,IReturn<ЗапросВФССОПроверкеРаботодателяВыбратьПоСсылке>
	{
		public int ___Первые {get; set;}
		public Guid ___Мин {get; set;}
		public Guid ___Макс {get; set;}
	}
	[Маршрут("Документы/ЗапросВФССОПроверкеРаботодателя/ВыбратьПоНомеру","{___Первые}")]
	[Маршрут("Документы/ЗапросВФССОПроверкеРаботодателя/ВыбратьПоНомеру","{___Первые}/{___Мин}")]
	[Маршрут("Документы/ЗапросВФССОПроверкеРаботодателя/ВыбратьПоНомеру","{___Первые}/{___Мин}/{___Макс}")]
	public class ЗапросВФССОПроверкеРаботодателяВыбратьПоНомеру: V82.ДокументыСсылка.ЗапросВФССОПроверкеРаботодателя,IReturn<ЗапросВФССОПроверкеРаботодателяВыбратьПоНомеру>
	{
		public int ___Первые {get; set;}
		public string ___Мин {get; set;}
		public string ___Макс {get; set;}
	}
	[Маршрут("Документы/ЗапросВФССОПроверкеРаботодателя/СтраницаПоСсылке","{___Размер}/{___Номер}")]
	public class ЗапросВФССОПроверкеРаботодателяСтраницаПоСсылке: V82.ДокументыСсылка.ЗапросВФССОПроверкеРаботодателя,IReturn<ЗапросВФССОПроверкеРаботодателяСтраницаПоСсылке>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}
	[Маршрут("Документы/ЗапросВФССОПроверкеРаботодателя/СтраницаПоНомеру","{___Размер}/{___Номер}")]
	public class ЗапросВФССОПроверкеРаботодателяСтраницаПоНомеру: V82.ДокументыСсылка.ЗапросВФССОПроверкеРаботодателя,IReturn<ЗапросВФССОПроверкеРаботодателяСтраницаПоНомеру>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}

	public class ЗапросВФССОПроверкеРаботодателяОтвет
	{
		public string Ответ {get;set;}
	}

	public partial class ЗапросВФССОПроверкеРаботодателяСервис : Service
	{
		
		public object Get(ЗапросВФССОПроверкеРаботодателяЗапрос Запрос)
		{
			return null;
		}
		
		public object Get(ЗапросВФССОПроверкеРаботодателяНайтиПоСсылке Запрос)
		{
			if (Запрос.Ссылка == null)
			{
				return null;
			}
			var Ссылка = V82.Документы.ЗапросВФССОПроверкеРаботодателя.НайтиПоСсылке(Запрос.Ссылка);
			if (Ссылка == null)
			{
				return new ЗапросВФССОПроверкеРаботодателяОтвет() { Ответ = "ЗапросВФССОПроверкеРаботодателя c ссылкой '" + Запрос.Ссылка + "' не найден." };
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(ЗапросВФССОПроверкеРаботодателяНайтиПоНомеру Запрос)
		{
			if(Запрос.Номер == null)
			{
				return null;
			}
			var СтрокаНомер = System.Uri.UnescapeDataString(Запрос.Номер);
			var Ссылка = V82.Документы.ЗапросВФССОПроверкеРаботодателя.НайтиПоНомеру(СтрокаНомер);
			if (Ссылка == null)
			{
				return new ЗапросВФССОПроверкеРаботодателяОтвет() {Ответ = "ЗапросВФССОПроверкеРаботодателя c номером '" + Запрос.Номер + "' не найдено."};
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(ЗапросВФССОПроверкеРаботодателяВыбратьПоСсылке Запрос)
		{
			if (Запрос.___Макс == Guid.Empty)
			{
				Запрос.___Макс = Guid.Parse("ffffffff-ffff-ffff-ffff-ffffffffffff");
			}
			var Коллекция = new List<object>();
			foreach (var Ссылка in V82.Документы.ЗапросВФССОПроверкеРаботодателя.ВыбратьПоСсылке(Запрос.___Первые, Запрос.___Мин, Запрос.___Макс))
			{
				Коллекция.Add(Ссылка.ПолучитьОбъект());
			}
			return Коллекция;
		}
		
		public object Get(ЗапросВФССОПроверкеРаботодателяВыбратьПоНомеру Запрос)
		{
			return null;
		}
		
		public object Get(ЗапросВФССОПроверкеРаботодателяСтраницаПоСсылке Запрос)
		{
			return null;
		}
		
		public object Get(ЗапросВФССОПроверкеРаботодателяСтраницаПоНомеру Запрос)
		{
			return null;
		}

		public object Any(ЗапросВФССОПроверкеРаботодателяЗапрос Запрос)
		{
			return new ЗапросВФССОПроверкеРаботодателяОтвет {Ответ = "ЗапросВФССОПроверкеРаботодателя, "};
		}

		public object Post(ЗапросВФССОПроверкеРаботодателяЗапрос ЗапросЗапросВФССОПроверкеРаботодателя)
		{
			var Ссылка = (ДокументыСсылка.ЗапросВФССОПроверкеРаботодателя)ЗапросЗапросВФССОПроверкеРаботодателя;
			var Объект = Ссылка.ПолучитьОбъект();
			Объект.Записать();
			return null;
		}


	}
}