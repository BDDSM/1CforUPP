
using System;
using Rest;
using System.Globalization;
using System.Collections.Generic;
using ServiceStack.ServiceHost;
using ServiceStack.ServiceInterface;

namespace V82.Документы
{
	//InkassovoePorucheniePoluchennoe
	[Маршрут("Документы/ИнкассовоеПоручениеПолученное","")]
	public class ИнкассовоеПоручениеПолученноеЗапрос: V82.ДокументыСсылка.ИнкассовоеПоручениеПолученное,IReturn<ИнкассовоеПоручениеПолученноеЗапрос>
	{
	}
	[Маршрут("Документы/ИнкассовоеПоручениеПолученное/НайтиПоСсылке","{Ссылка}")]
	[Маршрут("Документы/ИнкассовоеПоручениеПолученное/ПоСсылке","{Ссылка}")]
	public class ИнкассовоеПоручениеПолученноеНайтиПоСсылке: V82.ДокументыСсылка.ИнкассовоеПоручениеПолученное,IReturn<ИнкассовоеПоручениеПолученноеНайтиПоСсылке>
	{
	}
	[Маршрут("Документы/ИнкассовоеПоручениеПолученное/НайтиПоНомеру","{Номер}")]
	[Маршрут("Документы/ИнкассовоеПоручениеПолученное/ПоНомеру","{Номер}")]
	public class ИнкассовоеПоручениеПолученноеНайтиПоНомеру: V82.ДокументыСсылка.ИнкассовоеПоручениеПолученное,IReturn<ИнкассовоеПоручениеПолученноеНайтиПоНомеру>
	{
	}
	[Маршрут("Документы/ИнкассовоеПоручениеПолученное/ВыбратьПоСсылке","{___Первые}")]
	[Маршрут("Документы/ИнкассовоеПоручениеПолученное/ВыбратьПоСсылке","{___Первые}/{___Мин}")]
	[Маршрут("Документы/ИнкассовоеПоручениеПолученное/ВыбратьПоСсылке","{___Первые}/{___Мин}/{___Макс}")]
	public class ИнкассовоеПоручениеПолученноеВыбратьПоСсылке: V82.ДокументыСсылка.ИнкассовоеПоручениеПолученное,IReturn<ИнкассовоеПоручениеПолученноеВыбратьПоСсылке>
	{
		public int ___Первые {get; set;}
		public Guid ___Мин {get; set;}
		public Guid ___Макс {get; set;}
	}
	[Маршрут("Документы/ИнкассовоеПоручениеПолученное/ВыбратьПоНомеру","{___Первые}")]
	[Маршрут("Документы/ИнкассовоеПоручениеПолученное/ВыбратьПоНомеру","{___Первые}/{___Мин}")]
	[Маршрут("Документы/ИнкассовоеПоручениеПолученное/ВыбратьПоНомеру","{___Первые}/{___Мин}/{___Макс}")]
	public class ИнкассовоеПоручениеПолученноеВыбратьПоНомеру: V82.ДокументыСсылка.ИнкассовоеПоручениеПолученное,IReturn<ИнкассовоеПоручениеПолученноеВыбратьПоНомеру>
	{
		public int ___Первые {get; set;}
		public string ___Мин {get; set;}
		public string ___Макс {get; set;}
	}
	[Маршрут("Документы/ИнкассовоеПоручениеПолученное/СтраницаПоСсылке","{___Размер}/{___Номер}")]
	public class ИнкассовоеПоручениеПолученноеСтраницаПоСсылке: V82.ДокументыСсылка.ИнкассовоеПоручениеПолученное,IReturn<ИнкассовоеПоручениеПолученноеСтраницаПоСсылке>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}
	[Маршрут("Документы/ИнкассовоеПоручениеПолученное/СтраницаПоНомеру","{___Размер}/{___Номер}")]
	public class ИнкассовоеПоручениеПолученноеСтраницаПоНомеру: V82.ДокументыСсылка.ИнкассовоеПоручениеПолученное,IReturn<ИнкассовоеПоручениеПолученноеСтраницаПоНомеру>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}

	public class ИнкассовоеПоручениеПолученноеОтвет
	{
		public string Ответ {get;set;}
	}

	public partial class ИнкассовоеПоручениеПолученноеСервис : Service
	{
		
		public object Get(ИнкассовоеПоручениеПолученноеЗапрос Запрос)
		{
			return null;
		}
		
		public object Get(ИнкассовоеПоручениеПолученноеНайтиПоСсылке Запрос)
		{
			if (Запрос.Ссылка == null)
			{
				return null;
			}
			var Ссылка = V82.Документы.ИнкассовоеПоручениеПолученное.НайтиПоСсылке(Запрос.Ссылка);
			if (Ссылка == null)
			{
				return new ИнкассовоеПоручениеПолученноеОтвет() { Ответ = "ИнкассовоеПоручениеПолученное c ссылкой '" + Запрос.Ссылка + "' не найден." };
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(ИнкассовоеПоручениеПолученноеНайтиПоНомеру Запрос)
		{
			if(Запрос.Номер == null)
			{
				return null;
			}
			var СтрокаНомер = System.Uri.UnescapeDataString(Запрос.Номер);
			var Ссылка = V82.Документы.ИнкассовоеПоручениеПолученное.НайтиПоНомеру(СтрокаНомер);
			if (Ссылка == null)
			{
				return new ИнкассовоеПоручениеПолученноеОтвет() {Ответ = "ИнкассовоеПоручениеПолученное c номером '" + Запрос.Номер + "' не найдено."};
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(ИнкассовоеПоручениеПолученноеВыбратьПоСсылке Запрос)
		{
			if (Запрос.___Макс == Guid.Empty)
			{
				Запрос.___Макс = Guid.Parse("ffffffff-ffff-ffff-ffff-ffffffffffff");
			}
			var Коллекция = new List<object>();
			foreach (var Ссылка in V82.Документы.ИнкассовоеПоручениеПолученное.ВыбратьПоСсылке(Запрос.___Первые, Запрос.___Мин, Запрос.___Макс))
			{
				Коллекция.Add(Ссылка.ПолучитьОбъект());
			}
			return Коллекция;
		}
		
		public object Get(ИнкассовоеПоручениеПолученноеВыбратьПоНомеру Запрос)
		{
			return null;
		}
		
		public object Get(ИнкассовоеПоручениеПолученноеСтраницаПоСсылке Запрос)
		{
			return null;
		}
		
		public object Get(ИнкассовоеПоручениеПолученноеСтраницаПоНомеру Запрос)
		{
			return null;
		}

		public object Any(ИнкассовоеПоручениеПолученноеЗапрос Запрос)
		{
			return new ИнкассовоеПоручениеПолученноеОтвет {Ответ = "ИнкассовоеПоручениеПолученное, "};
		}

		public object Post(ИнкассовоеПоручениеПолученноеЗапрос ЗапросИнкассовоеПоручениеПолученное)
		{
			var Ссылка = (ДокументыСсылка.ИнкассовоеПоручениеПолученное)ЗапросИнкассовоеПоручениеПолученное;
			var Объект = Ссылка.ПолучитьОбъект();
			Объект.Записать();
			return null;
		}


	}
}