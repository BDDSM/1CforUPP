
using System;
using Rest;
using System.Globalization;
using System.Collections.Generic;
using ServiceStack.ServiceHost;
using ServiceStack.ServiceInterface;

namespace V82.Документы
{
	//ZayavkaNaOtkrytieSchetov
	[Маршрут("Документы/ЗаявкаНаОткрытиеСчетов","")]
	public class ЗаявкаНаОткрытиеСчетовЗапрос: V82.ДокументыСсылка.ЗаявкаНаОткрытиеСчетов,IReturn<ЗаявкаНаОткрытиеСчетовЗапрос>
	{
	}
	[Маршрут("Документы/ЗаявкаНаОткрытиеСчетов/НайтиПоСсылке","{Ссылка}")]
	[Маршрут("Документы/ЗаявкаНаОткрытиеСчетов/ПоСсылке","{Ссылка}")]
	public class ЗаявкаНаОткрытиеСчетовНайтиПоСсылке: V82.ДокументыСсылка.ЗаявкаНаОткрытиеСчетов,IReturn<ЗаявкаНаОткрытиеСчетовНайтиПоСсылке>
	{
	}
	[Маршрут("Документы/ЗаявкаНаОткрытиеСчетов/НайтиПоНомеру","{Номер}")]
	[Маршрут("Документы/ЗаявкаНаОткрытиеСчетов/ПоНомеру","{Номер}")]
	public class ЗаявкаНаОткрытиеСчетовНайтиПоНомеру: V82.ДокументыСсылка.ЗаявкаНаОткрытиеСчетов,IReturn<ЗаявкаНаОткрытиеСчетовНайтиПоНомеру>
	{
	}
	[Маршрут("Документы/ЗаявкаНаОткрытиеСчетов/ВыбратьПоСсылке","{___Первые}")]
	[Маршрут("Документы/ЗаявкаНаОткрытиеСчетов/ВыбратьПоСсылке","{___Первые}/{___Мин}")]
	[Маршрут("Документы/ЗаявкаНаОткрытиеСчетов/ВыбратьПоСсылке","{___Первые}/{___Мин}/{___Макс}")]
	public class ЗаявкаНаОткрытиеСчетовВыбратьПоСсылке: V82.ДокументыСсылка.ЗаявкаНаОткрытиеСчетов,IReturn<ЗаявкаНаОткрытиеСчетовВыбратьПоСсылке>
	{
		public int ___Первые {get; set;}
		public Guid ___Мин {get; set;}
		public Guid ___Макс {get; set;}
	}
	[Маршрут("Документы/ЗаявкаНаОткрытиеСчетов/ВыбратьПоНомеру","{___Первые}")]
	[Маршрут("Документы/ЗаявкаНаОткрытиеСчетов/ВыбратьПоНомеру","{___Первые}/{___Мин}")]
	[Маршрут("Документы/ЗаявкаНаОткрытиеСчетов/ВыбратьПоНомеру","{___Первые}/{___Мин}/{___Макс}")]
	public class ЗаявкаНаОткрытиеСчетовВыбратьПоНомеру: V82.ДокументыСсылка.ЗаявкаНаОткрытиеСчетов,IReturn<ЗаявкаНаОткрытиеСчетовВыбратьПоНомеру>
	{
		public int ___Первые {get; set;}
		public string ___Мин {get; set;}
		public string ___Макс {get; set;}
	}
	[Маршрут("Документы/ЗаявкаНаОткрытиеСчетов/СтраницаПоСсылке","{___Размер}/{___Номер}")]
	public class ЗаявкаНаОткрытиеСчетовСтраницаПоСсылке: V82.ДокументыСсылка.ЗаявкаНаОткрытиеСчетов,IReturn<ЗаявкаНаОткрытиеСчетовСтраницаПоСсылке>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}
	[Маршрут("Документы/ЗаявкаНаОткрытиеСчетов/СтраницаПоНомеру","{___Размер}/{___Номер}")]
	public class ЗаявкаНаОткрытиеСчетовСтраницаПоНомеру: V82.ДокументыСсылка.ЗаявкаНаОткрытиеСчетов,IReturn<ЗаявкаНаОткрытиеСчетовСтраницаПоНомеру>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}

	public class ЗаявкаНаОткрытиеСчетовОтвет
	{
		public string Ответ {get;set;}
	}

	public partial class ЗаявкаНаОткрытиеСчетовСервис : Service
	{
		
		public object Get(ЗаявкаНаОткрытиеСчетовЗапрос Запрос)
		{
			return null;
		}
		
		public object Get(ЗаявкаНаОткрытиеСчетовНайтиПоСсылке Запрос)
		{
			if (Запрос.Ссылка == null)
			{
				return null;
			}
			var Ссылка = V82.Документы.ЗаявкаНаОткрытиеСчетов.НайтиПоСсылке(Запрос.Ссылка);
			if (Ссылка == null)
			{
				return new ЗаявкаНаОткрытиеСчетовОтвет() { Ответ = "ЗаявкаНаОткрытиеСчетов c ссылкой '" + Запрос.Ссылка + "' не найден." };
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(ЗаявкаНаОткрытиеСчетовНайтиПоНомеру Запрос)
		{
			if(Запрос.Номер == null)
			{
				return null;
			}
			var СтрокаНомер = System.Uri.UnescapeDataString(Запрос.Номер);
			var Ссылка = V82.Документы.ЗаявкаНаОткрытиеСчетов.НайтиПоНомеру(СтрокаНомер);
			if (Ссылка == null)
			{
				return new ЗаявкаНаОткрытиеСчетовОтвет() {Ответ = "ЗаявкаНаОткрытиеСчетов c номером '" + Запрос.Номер + "' не найдено."};
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(ЗаявкаНаОткрытиеСчетовВыбратьПоСсылке Запрос)
		{
			if (Запрос.___Макс == Guid.Empty)
			{
				Запрос.___Макс = Guid.Parse("ffffffff-ffff-ffff-ffff-ffffffffffff");
			}
			var Коллекция = new List<object>();
			foreach (var Ссылка in V82.Документы.ЗаявкаНаОткрытиеСчетов.ВыбратьПоСсылке(Запрос.___Первые, Запрос.___Мин, Запрос.___Макс))
			{
				Коллекция.Add(Ссылка.ПолучитьОбъект());
			}
			return Коллекция;
		}
		
		public object Get(ЗаявкаНаОткрытиеСчетовВыбратьПоНомеру Запрос)
		{
			return null;
		}
		
		public object Get(ЗаявкаНаОткрытиеСчетовСтраницаПоСсылке Запрос)
		{
			return null;
		}
		
		public object Get(ЗаявкаНаОткрытиеСчетовСтраницаПоНомеру Запрос)
		{
			return null;
		}

		public object Any(ЗаявкаНаОткрытиеСчетовЗапрос Запрос)
		{
			return new ЗаявкаНаОткрытиеСчетовОтвет {Ответ = "ЗаявкаНаОткрытиеСчетов, "};
		}

		public object Post(ЗаявкаНаОткрытиеСчетовЗапрос ЗапросЗаявкаНаОткрытиеСчетов)
		{
			var Ссылка = (ДокументыСсылка.ЗаявкаНаОткрытиеСчетов)ЗапросЗаявкаНаОткрытиеСчетов;
			var Объект = Ссылка.ПолучитьОбъект();
			Объект.Записать();
			return null;
		}


	}
}