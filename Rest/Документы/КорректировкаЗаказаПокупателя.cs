
using System;
using Rest;
using System.Globalization;
using System.Collections.Generic;
using ServiceStack.ServiceHost;
using ServiceStack.ServiceInterface;

namespace V82.Документы
{
	//KorrektirovkaZakazaPokupatelya
	[Маршрут("Документы/КорректировкаЗаказаПокупателя","")]
	public class КорректировкаЗаказаПокупателяЗапрос: V82.ДокументыСсылка.КорректировкаЗаказаПокупателя,IReturn<КорректировкаЗаказаПокупателяЗапрос>
	{
	}
	[Маршрут("Документы/КорректировкаЗаказаПокупателя/НайтиПоСсылке","{Ссылка}")]
	[Маршрут("Документы/КорректировкаЗаказаПокупателя/ПоСсылке","{Ссылка}")]
	public class КорректировкаЗаказаПокупателяНайтиПоСсылке: V82.ДокументыСсылка.КорректировкаЗаказаПокупателя,IReturn<КорректировкаЗаказаПокупателяНайтиПоСсылке>
	{
	}
	[Маршрут("Документы/КорректировкаЗаказаПокупателя/НайтиПоНомеру","{Номер}")]
	[Маршрут("Документы/КорректировкаЗаказаПокупателя/ПоНомеру","{Номер}")]
	public class КорректировкаЗаказаПокупателяНайтиПоНомеру: V82.ДокументыСсылка.КорректировкаЗаказаПокупателя,IReturn<КорректировкаЗаказаПокупателяНайтиПоНомеру>
	{
	}
	[Маршрут("Документы/КорректировкаЗаказаПокупателя/ВыбратьПоСсылке","{___Первые}")]
	[Маршрут("Документы/КорректировкаЗаказаПокупателя/ВыбратьПоСсылке","{___Первые}/{___Мин}")]
	[Маршрут("Документы/КорректировкаЗаказаПокупателя/ВыбратьПоСсылке","{___Первые}/{___Мин}/{___Макс}")]
	public class КорректировкаЗаказаПокупателяВыбратьПоСсылке: V82.ДокументыСсылка.КорректировкаЗаказаПокупателя,IReturn<КорректировкаЗаказаПокупателяВыбратьПоСсылке>
	{
		public int ___Первые {get; set;}
		public Guid ___Мин {get; set;}
		public Guid ___Макс {get; set;}
	}
	[Маршрут("Документы/КорректировкаЗаказаПокупателя/ВыбратьПоНомеру","{___Первые}")]
	[Маршрут("Документы/КорректировкаЗаказаПокупателя/ВыбратьПоНомеру","{___Первые}/{___Мин}")]
	[Маршрут("Документы/КорректировкаЗаказаПокупателя/ВыбратьПоНомеру","{___Первые}/{___Мин}/{___Макс}")]
	public class КорректировкаЗаказаПокупателяВыбратьПоНомеру: V82.ДокументыСсылка.КорректировкаЗаказаПокупателя,IReturn<КорректировкаЗаказаПокупателяВыбратьПоНомеру>
	{
		public int ___Первые {get; set;}
		public string ___Мин {get; set;}
		public string ___Макс {get; set;}
	}
	[Маршрут("Документы/КорректировкаЗаказаПокупателя/СтраницаПоСсылке","{___Размер}/{___Номер}")]
	public class КорректировкаЗаказаПокупателяСтраницаПоСсылке: V82.ДокументыСсылка.КорректировкаЗаказаПокупателя,IReturn<КорректировкаЗаказаПокупателяСтраницаПоСсылке>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}
	[Маршрут("Документы/КорректировкаЗаказаПокупателя/СтраницаПоНомеру","{___Размер}/{___Номер}")]
	public class КорректировкаЗаказаПокупателяСтраницаПоНомеру: V82.ДокументыСсылка.КорректировкаЗаказаПокупателя,IReturn<КорректировкаЗаказаПокупателяСтраницаПоНомеру>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}

	public class КорректировкаЗаказаПокупателяОтвет
	{
		public string Ответ {get;set;}
	}

	public partial class КорректировкаЗаказаПокупателяСервис : Service
	{
		
		public object Get(КорректировкаЗаказаПокупателяЗапрос Запрос)
		{
			return null;
		}
		
		public object Get(КорректировкаЗаказаПокупателяНайтиПоСсылке Запрос)
		{
			if (Запрос.Ссылка == null)
			{
				return null;
			}
			var Ссылка = V82.Документы.КорректировкаЗаказаПокупателя.НайтиПоСсылке(Запрос.Ссылка);
			if (Ссылка == null)
			{
				return new КорректировкаЗаказаПокупателяОтвет() { Ответ = "КорректировкаЗаказаПокупателя c ссылкой '" + Запрос.Ссылка + "' не найден." };
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(КорректировкаЗаказаПокупателяНайтиПоНомеру Запрос)
		{
			if(Запрос.Номер == null)
			{
				return null;
			}
			var СтрокаНомер = System.Uri.UnescapeDataString(Запрос.Номер);
			var Ссылка = V82.Документы.КорректировкаЗаказаПокупателя.НайтиПоНомеру(СтрокаНомер);
			if (Ссылка == null)
			{
				return new КорректировкаЗаказаПокупателяОтвет() {Ответ = "КорректировкаЗаказаПокупателя c номером '" + Запрос.Номер + "' не найдено."};
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(КорректировкаЗаказаПокупателяВыбратьПоСсылке Запрос)
		{
			if (Запрос.___Макс == Guid.Empty)
			{
				Запрос.___Макс = Guid.Parse("ffffffff-ffff-ffff-ffff-ffffffffffff");
			}
			var Коллекция = new List<object>();
			foreach (var Ссылка in V82.Документы.КорректировкаЗаказаПокупателя.ВыбратьПоСсылке(Запрос.___Первые, Запрос.___Мин, Запрос.___Макс))
			{
				Коллекция.Add(Ссылка.ПолучитьОбъект());
			}
			return Коллекция;
		}
		
		public object Get(КорректировкаЗаказаПокупателяВыбратьПоНомеру Запрос)
		{
			return null;
		}
		
		public object Get(КорректировкаЗаказаПокупателяСтраницаПоСсылке Запрос)
		{
			return null;
		}
		
		public object Get(КорректировкаЗаказаПокупателяСтраницаПоНомеру Запрос)
		{
			return null;
		}

		public object Any(КорректировкаЗаказаПокупателяЗапрос Запрос)
		{
			return new КорректировкаЗаказаПокупателяОтвет {Ответ = "КорректировкаЗаказаПокупателя, "};
		}

		public object Post(КорректировкаЗаказаПокупателяЗапрос ЗапросКорректировкаЗаказаПокупателя)
		{
			var Ссылка = (ДокументыСсылка.КорректировкаЗаказаПокупателя)ЗапросКорректировкаЗаказаПокупателя;
			var Объект = Ссылка.ПолучитьОбъект();
			Объект.Записать();
			return null;
		}


	}
}