
using System;
using Rest;
using System.Globalization;
using System.Collections.Generic;
using ServiceStack.ServiceHost;
using ServiceStack.ServiceInterface;

namespace V82.Документы
{
	//SchetNaOplatuPostavshhika
	[Маршрут("Документы/СчетНаОплатуПоставщика","")]
	public class СчетНаОплатуПоставщикаЗапрос: V82.ДокументыСсылка.СчетНаОплатуПоставщика,IReturn<СчетНаОплатуПоставщикаЗапрос>
	{
	}
	[Маршрут("Документы/СчетНаОплатуПоставщика/НайтиПоСсылке","{Ссылка}")]
	[Маршрут("Документы/СчетНаОплатуПоставщика/ПоСсылке","{Ссылка}")]
	public class СчетНаОплатуПоставщикаНайтиПоСсылке: V82.ДокументыСсылка.СчетНаОплатуПоставщика,IReturn<СчетНаОплатуПоставщикаНайтиПоСсылке>
	{
	}
	[Маршрут("Документы/СчетНаОплатуПоставщика/НайтиПоНомеру","{Номер}")]
	[Маршрут("Документы/СчетНаОплатуПоставщика/ПоНомеру","{Номер}")]
	public class СчетНаОплатуПоставщикаНайтиПоНомеру: V82.ДокументыСсылка.СчетНаОплатуПоставщика,IReturn<СчетНаОплатуПоставщикаНайтиПоНомеру>
	{
	}
	[Маршрут("Документы/СчетНаОплатуПоставщика/ВыбратьПоСсылке","{___Первые}")]
	[Маршрут("Документы/СчетНаОплатуПоставщика/ВыбратьПоСсылке","{___Первые}/{___Мин}")]
	[Маршрут("Документы/СчетНаОплатуПоставщика/ВыбратьПоСсылке","{___Первые}/{___Мин}/{___Макс}")]
	public class СчетНаОплатуПоставщикаВыбратьПоСсылке: V82.ДокументыСсылка.СчетНаОплатуПоставщика,IReturn<СчетНаОплатуПоставщикаВыбратьПоСсылке>
	{
		public int ___Первые {get; set;}
		public Guid ___Мин {get; set;}
		public Guid ___Макс {get; set;}
	}
	[Маршрут("Документы/СчетНаОплатуПоставщика/ВыбратьПоНомеру","{___Первые}")]
	[Маршрут("Документы/СчетНаОплатуПоставщика/ВыбратьПоНомеру","{___Первые}/{___Мин}")]
	[Маршрут("Документы/СчетНаОплатуПоставщика/ВыбратьПоНомеру","{___Первые}/{___Мин}/{___Макс}")]
	public class СчетНаОплатуПоставщикаВыбратьПоНомеру: V82.ДокументыСсылка.СчетНаОплатуПоставщика,IReturn<СчетНаОплатуПоставщикаВыбратьПоНомеру>
	{
		public int ___Первые {get; set;}
		public string ___Мин {get; set;}
		public string ___Макс {get; set;}
	}
	[Маршрут("Документы/СчетНаОплатуПоставщика/СтраницаПоСсылке","{___Размер}/{___Номер}")]
	public class СчетНаОплатуПоставщикаСтраницаПоСсылке: V82.ДокументыСсылка.СчетНаОплатуПоставщика,IReturn<СчетНаОплатуПоставщикаСтраницаПоСсылке>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}
	[Маршрут("Документы/СчетНаОплатуПоставщика/СтраницаПоНомеру","{___Размер}/{___Номер}")]
	public class СчетНаОплатуПоставщикаСтраницаПоНомеру: V82.ДокументыСсылка.СчетНаОплатуПоставщика,IReturn<СчетНаОплатуПоставщикаСтраницаПоНомеру>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}

	public class СчетНаОплатуПоставщикаОтвет
	{
		public string Ответ {get;set;}
	}

	public partial class СчетНаОплатуПоставщикаСервис : Service
	{
		
		public object Get(СчетНаОплатуПоставщикаЗапрос Запрос)
		{
			return null;
		}
		
		public object Get(СчетНаОплатуПоставщикаНайтиПоСсылке Запрос)
		{
			if (Запрос.Ссылка == null)
			{
				return null;
			}
			var Ссылка = V82.Документы.СчетНаОплатуПоставщика.НайтиПоСсылке(Запрос.Ссылка);
			if (Ссылка == null)
			{
				return new СчетНаОплатуПоставщикаОтвет() { Ответ = "СчетНаОплатуПоставщика c ссылкой '" + Запрос.Ссылка + "' не найден." };
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(СчетНаОплатуПоставщикаНайтиПоНомеру Запрос)
		{
			if(Запрос.Номер == null)
			{
				return null;
			}
			var СтрокаНомер = System.Uri.UnescapeDataString(Запрос.Номер);
			var Ссылка = V82.Документы.СчетНаОплатуПоставщика.НайтиПоНомеру(СтрокаНомер);
			if (Ссылка == null)
			{
				return new СчетНаОплатуПоставщикаОтвет() {Ответ = "СчетНаОплатуПоставщика c номером '" + Запрос.Номер + "' не найдено."};
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(СчетНаОплатуПоставщикаВыбратьПоСсылке Запрос)
		{
			if (Запрос.___Макс == Guid.Empty)
			{
				Запрос.___Макс = Guid.Parse("ffffffff-ffff-ffff-ffff-ffffffffffff");
			}
			var Коллекция = new List<object>();
			foreach (var Ссылка in V82.Документы.СчетНаОплатуПоставщика.ВыбратьПоСсылке(Запрос.___Первые, Запрос.___Мин, Запрос.___Макс))
			{
				Коллекция.Add(Ссылка.ПолучитьОбъект());
			}
			return Коллекция;
		}
		
		public object Get(СчетНаОплатуПоставщикаВыбратьПоНомеру Запрос)
		{
			return null;
		}
		
		public object Get(СчетНаОплатуПоставщикаСтраницаПоСсылке Запрос)
		{
			return null;
		}
		
		public object Get(СчетНаОплатуПоставщикаСтраницаПоНомеру Запрос)
		{
			return null;
		}

		public object Any(СчетНаОплатуПоставщикаЗапрос Запрос)
		{
			return new СчетНаОплатуПоставщикаОтвет {Ответ = "СчетНаОплатуПоставщика, "};
		}

		public object Post(СчетНаОплатуПоставщикаЗапрос ЗапросСчетНаОплатуПоставщика)
		{
			var Ссылка = (ДокументыСсылка.СчетНаОплатуПоставщика)ЗапросСчетНаОплатуПоставщика;
			var Объект = Ссылка.ПолучитьОбъект();
			Объект.Записать();
			return null;
		}


	}
}