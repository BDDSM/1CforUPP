
using System;
using Rest;
using System.Globalization;
using System.Collections.Generic;
using ServiceStack.ServiceHost;
using ServiceStack.ServiceInterface;

namespace V82.Документы
{
	//DokumentRaschetovSKontragentom
	[Маршрут("Документы/ДокументРасчетовСКонтрагентом","")]
	public class ДокументРасчетовСКонтрагентомЗапрос: V82.ДокументыСсылка.ДокументРасчетовСКонтрагентом,IReturn<ДокументРасчетовСКонтрагентомЗапрос>
	{
	}
	[Маршрут("Документы/ДокументРасчетовСКонтрагентом/НайтиПоСсылке","{Ссылка}")]
	[Маршрут("Документы/ДокументРасчетовСКонтрагентом/ПоСсылке","{Ссылка}")]
	public class ДокументРасчетовСКонтрагентомНайтиПоСсылке: V82.ДокументыСсылка.ДокументРасчетовСКонтрагентом,IReturn<ДокументРасчетовСКонтрагентомНайтиПоСсылке>
	{
	}
	[Маршрут("Документы/ДокументРасчетовСКонтрагентом/НайтиПоНомеру","{Номер}")]
	[Маршрут("Документы/ДокументРасчетовСКонтрагентом/ПоНомеру","{Номер}")]
	public class ДокументРасчетовСКонтрагентомНайтиПоНомеру: V82.ДокументыСсылка.ДокументРасчетовСКонтрагентом,IReturn<ДокументРасчетовСКонтрагентомНайтиПоНомеру>
	{
	}
	[Маршрут("Документы/ДокументРасчетовСКонтрагентом/ВыбратьПоСсылке","{___Первые}")]
	[Маршрут("Документы/ДокументРасчетовСКонтрагентом/ВыбратьПоСсылке","{___Первые}/{___Мин}")]
	[Маршрут("Документы/ДокументРасчетовСКонтрагентом/ВыбратьПоСсылке","{___Первые}/{___Мин}/{___Макс}")]
	public class ДокументРасчетовСКонтрагентомВыбратьПоСсылке: V82.ДокументыСсылка.ДокументРасчетовСКонтрагентом,IReturn<ДокументРасчетовСКонтрагентомВыбратьПоСсылке>
	{
		public int ___Первые {get; set;}
		public Guid ___Мин {get; set;}
		public Guid ___Макс {get; set;}
	}
	[Маршрут("Документы/ДокументРасчетовСКонтрагентом/ВыбратьПоНомеру","{___Первые}")]
	[Маршрут("Документы/ДокументРасчетовСКонтрагентом/ВыбратьПоНомеру","{___Первые}/{___Мин}")]
	[Маршрут("Документы/ДокументРасчетовСКонтрагентом/ВыбратьПоНомеру","{___Первые}/{___Мин}/{___Макс}")]
	public class ДокументРасчетовСКонтрагентомВыбратьПоНомеру: V82.ДокументыСсылка.ДокументРасчетовСКонтрагентом,IReturn<ДокументРасчетовСКонтрагентомВыбратьПоНомеру>
	{
		public int ___Первые {get; set;}
		public string ___Мин {get; set;}
		public string ___Макс {get; set;}
	}
	[Маршрут("Документы/ДокументРасчетовСКонтрагентом/СтраницаПоСсылке","{___Размер}/{___Номер}")]
	public class ДокументРасчетовСКонтрагентомСтраницаПоСсылке: V82.ДокументыСсылка.ДокументРасчетовСКонтрагентом,IReturn<ДокументРасчетовСКонтрагентомСтраницаПоСсылке>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}
	[Маршрут("Документы/ДокументРасчетовСКонтрагентом/СтраницаПоНомеру","{___Размер}/{___Номер}")]
	public class ДокументРасчетовСКонтрагентомСтраницаПоНомеру: V82.ДокументыСсылка.ДокументРасчетовСКонтрагентом,IReturn<ДокументРасчетовСКонтрагентомСтраницаПоНомеру>
	{
		public int ___Размер {get; set;}
		public int ___Номер {get; set;}
	}

	public class ДокументРасчетовСКонтрагентомОтвет
	{
		public string Ответ {get;set;}
	}

	public partial class ДокументРасчетовСКонтрагентомСервис : Service
	{
		
		public object Get(ДокументРасчетовСКонтрагентомЗапрос Запрос)
		{
			return null;
		}
		
		public object Get(ДокументРасчетовСКонтрагентомНайтиПоСсылке Запрос)
		{
			if (Запрос.Ссылка == null)
			{
				return null;
			}
			var Ссылка = V82.Документы.ДокументРасчетовСКонтрагентом.НайтиПоСсылке(Запрос.Ссылка);
			if (Ссылка == null)
			{
				return new ДокументРасчетовСКонтрагентомОтвет() { Ответ = "ДокументРасчетовСКонтрагентом c ссылкой '" + Запрос.Ссылка + "' не найден." };
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(ДокументРасчетовСКонтрагентомНайтиПоНомеру Запрос)
		{
			if(Запрос.Номер == null)
			{
				return null;
			}
			var СтрокаНомер = System.Uri.UnescapeDataString(Запрос.Номер);
			var Ссылка = V82.Документы.ДокументРасчетовСКонтрагентом.НайтиПоНомеру(СтрокаНомер);
			if (Ссылка == null)
			{
				return new ДокументРасчетовСКонтрагентомОтвет() {Ответ = "ДокументРасчетовСКонтрагентом c номером '" + Запрос.Номер + "' не найдено."};
			}
			return Ссылка.ПолучитьОбъект();
		}
		
		public object Get(ДокументРасчетовСКонтрагентомВыбратьПоСсылке Запрос)
		{
			if (Запрос.___Макс == Guid.Empty)
			{
				Запрос.___Макс = Guid.Parse("ffffffff-ffff-ffff-ffff-ffffffffffff");
			}
			var Коллекция = new List<object>();
			foreach (var Ссылка in V82.Документы.ДокументРасчетовСКонтрагентом.ВыбратьПоСсылке(Запрос.___Первые, Запрос.___Мин, Запрос.___Макс))
			{
				Коллекция.Add(Ссылка.ПолучитьОбъект());
			}
			return Коллекция;
		}
		
		public object Get(ДокументРасчетовСКонтрагентомВыбратьПоНомеру Запрос)
		{
			return null;
		}
		
		public object Get(ДокументРасчетовСКонтрагентомСтраницаПоСсылке Запрос)
		{
			return null;
		}
		
		public object Get(ДокументРасчетовСКонтрагентомСтраницаПоНомеру Запрос)
		{
			return null;
		}

		public object Any(ДокументРасчетовСКонтрагентомЗапрос Запрос)
		{
			return new ДокументРасчетовСКонтрагентомОтвет {Ответ = "ДокументРасчетовСКонтрагентом, "};
		}

		public object Post(ДокументРасчетовСКонтрагентомЗапрос ЗапросДокументРасчетовСКонтрагентом)
		{
			var Ссылка = (ДокументыСсылка.ДокументРасчетовСКонтрагентом)ЗапросДокументРасчетовСКонтрагентом;
			var Объект = Ссылка.ПолучитьОбъект();
			Объект.Записать();
			return null;
		}


	}
}