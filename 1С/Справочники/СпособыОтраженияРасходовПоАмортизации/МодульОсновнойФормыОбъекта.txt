Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры
Процедура УстановитьВидимость()
	
	ЭлементыФормы.Способы.Колонки.Проект.Видимость = УправлениеПроектами.ИспользоватьРаспределениеЗатратПоПроектам();
	
КонецПроцедуры // УстановитьВидимость()

// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчета(ИзменениеСубконто = ЛОЖЬ)

	Если ИзменениеСубконто Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти = ЭлементыФормы.Способы.ТекущиеДанные;
	ВидЗатратНУ          = СтрокаТабличнойЧасти.СтатьяЗатрат.ВидРасходовНУ;

	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СтрокаТабличнойЧасти.СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СтрокаТабличнойЧасти.СчетЗатрат, ВидЗатратНУ));
	Иначе
		СтрокаТабличнойЧасти.СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаТабличнойЧасти.СчетЗатрат));
	КонецЕсли;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭлементыФормы.Способы.ТекущиеДанные.СчетЗатратНУ,
	                             ЭлементыФормы.Способы.ТекущиеДанные.СубконтоНУ1,
	                             ЭлементыФормы.Способы.Колонки.СубконтоНУ1,
	                             ЭлементыФормы.Способы.ТекущиеДанные.СубконтоНУ2,
	                             ЭлементыФормы.Способы.Колонки.СубконтоНУ2,
	                             ЭлементыФормы.Способы.ТекущиеДанные.СубконтоНУ3,
	                             ЭлементыФормы.Способы.Колонки.СубконтоНУ3);

КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()

// Процедура управляет доступностью колонок субконто в табличной части услуги
//
Процедура УстановитьДоступностьСубконто(СтрокаТЧ)

	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если НЕ СтрокаТЧ.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		Возврат;
	КонецЕсли;

	Колонки = ЭлементыФормы.Способы.Колонки;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭлементыФормы.Способы.ТекущиеДанные.СчетЗатрат,
	                         ЭлементыФормы.Способы.ТекущиеДанные.Субконто1,
	                         ЭлементыФормы.Способы.Колонки.Субконто1,
	                         ЭлементыФормы.Способы.ТекущиеДанные.Субконто2,
	                         ЭлементыФормы.Способы.Колонки.Субконто2,
	                         ЭлементыФормы.Способы.ТекущиеДанные.Субконто3,
	                         ЭлементыФормы.Способы.Колонки.Субконто3);

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭлементыФормы.Способы.ТекущиеДанные.СчетЗатратНУ,
	                         ЭлементыФормы.Способы.ТекущиеДанные.СубконтоНУ1,
	                         ЭлементыФормы.Способы.Колонки.СубконтоНУ1,
	                         ЭлементыФормы.Способы.ТекущиеДанные.СубконтоНУ2,
	                         ЭлементыФормы.Способы.Колонки.СубконтоНУ2,
	                         ЭлементыФормы.Способы.ТекущиеДанные.СубконтоНУ3,
	                         ЭлементыФормы.Способы.Колонки.СубконтоНУ3);

КонецПроцедуры // УстановитьДоступностьСубконто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	УстановитьВидимость();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
КонецПроцедуры // ПриОткрытии()

// Обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Для Каждого СтрокаТабличнойЧасти Из Способы Цикл
		Если СтрокаТабличнойЧасти.ПодразделениеОрганизации.Владелец <> Организация Тогда
			СтрокаТабличнойЧасти.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(Истина,
													 СтрокаТабличнойЧасти.ПодразделениеОрганизации,
													 СтрокаТабличнойЧасти.Подразделение,
													 Организация);
	КонецЦикла;
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ СПОСОБЫ

//Процедура - обработчик события "ПриИзменении" поля СчетЗатрат
// в табличной части "Способы"
//
Процедура СпособыСчетЗатратПриИзменении(Элемент)

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             ЭлементыФормы.Способы.ТекущиеДанные.Субконто1,
	                             ЭлементыФормы.Способы.Колонки.Субконто1,
	                             ЭлементыФормы.Способы.ТекущиеДанные.Субконто2,
	                             ЭлементыФормы.Способы.Колонки.Субконто2,
	                             ЭлементыФормы.Способы.ТекущиеДанные.Субконто3,
	                             ЭлементыФормы.Способы.Колонки.Субконто3);

	ЗаполнитьСчетНалоговогоУчета()

КонецПроцедуры // СпособыСчетЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля "Счет затрат".
// 
//  Проверяет возможность использования выбранного пользователем счета
// в проводках.
//
Процедура СпособыСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СпособыСчетЗатратОбработкаВыбора()

//Процедура - обработчик события "ПриИзменении" поля Субконто1
// в табличной части "Способы"
//
Процедура СпособыСубконто1ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Способы.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 1, СтрокаТЧ.Субконто1, СтрокаТЧ.СубконтоНУ1);

КонецПроцедуры // СпособыСубконто1ПриИзменении()

//Процедура - обработчик события "ПриИзменении" поля Субконто2
// в табличной части "Способы"
//
Процедура СпособыСубконто2ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Способы.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 2, СтрокаТЧ.Субконто2, СтрокаТЧ.СубконтоНУ2);

КонецПроцедуры // СпособыСубконто2ПриИзменении()

//Процедура - обработчик события "ПриИзменении" поля Субконто3
// в табличной части "Способы"
//
Процедура СпособыСубконто3ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Способы.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 3, СтрокаТЧ.Субконто3, СтрокаТЧ.СубконтоНУ3);

КонецПроцедуры // СпособыСубконто3ПриИзменении()

//Процедура - обработчик события "ПриИзменении" поля СчетЗатратНУ
// в табличной части "Способы"
//
Процедура СпособыСчетЗатратНУПриИзменении(Элемент)

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭлементыФормы.Способы.ТекущиеДанные.СчетЗатратНУ,
	                             ЭлементыФормы.Способы.ТекущиеДанные.СубконтоНУ1,
	                             ЭлементыФормы.Способы.Колонки.СубконтоНУ1,
	                             ЭлементыФормы.Способы.ТекущиеДанные.СубконтоНУ2,
	                             ЭлементыФормы.Способы.Колонки.СубконтоНУ2,
	                             ЭлементыФормы.Способы.ТекущиеДанные.СубконтоНУ3,
	                             ЭлементыФормы.Способы.Колонки.СубконтоНУ3);

КонецПроцедуры // СпособыСчетЗатратНУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля "Счет затрат (НУ)".
// 
//  Проверяет возможность использования выбранного пользователем счета
// в проводках.
//
Процедура СпособыСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СпособыСчетЗатратНУОбработкаВыбора()

//Процедура - обработчик события "ПриАктивизацииСтроки"
// табличной части "Способы"
//
Процедура СпособыПриАктивизацииСтроки(Элемент)

	СтрокаТЧ = ЭлементыФормы.Способы.ТекущиеДанные;
	УстановитьДоступностьСубконто(СтрокаТЧ);

КонецПроцедуры // СпособыПриАктивизацииСтроки()

// Процедура - обработчик события "ПриВыводеСтроки" списка справочника.
// Формирует данные в колонке "ХарактерЗатрат"
//
Процедура СпособыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	Если ЭлементыФормы.Способы.Колонки.ХарактерЗатрат.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.Текст = ХарактерЗатрат;
	КонецЕсли;
	УправлениеПроектами.УстановитьДоступностьПроектаВСтрокеТабЧасти(ХарактерЗатрат, ОформлениеСтроки, ЭлементыФормы.Способы);

	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(
		ХарактерЗатрат,
		ДанныеСтроки.Продукция,
		ДанныеСтроки.СчетЗатрат, ДанныеСтроки.СчетЗатратНУ, ОформлениеСтроки, Истина, Истина, Истина);
	
КонецПроцедуры // СпособыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля СтатьяЗатрат списка справочника.
//
Процедура СпособыСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Способы.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат, "СчетЗатрат", "СчетЗатратНУ");
	Если СтрокаТабличнойЧасти.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	КонецЕсли;
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатрат,
	                             СтрокаТабличнойЧасти.Субконто1,
	                             ЭлементыФормы.Способы.Колонки.Субконто1,
	                             СтрокаТабличнойЧасти.Субконто2,
	                             ЭлементыФормы.Способы.Колонки.Субконто2,
	                             СтрокаТабличнойЧасти.Субконто3,
	                             ЭлементыФормы.Способы.Колонки.Субконто3);

	ЗаполнитьСчетНалоговогоУчета();

	Если ЭлементыФормы.Способы.Колонки.Проект.Видимость Тогда
		УправлениеПроектами.УстановитьПроектПоУмолчанию(СтрокаТабличнойЧасти.Подразделение, СтрокаТабличнойЧасти.СтатьяЗатрат, СтрокаТабличнойЧасти.Проект);
	КонецЕсли;
	
КонецПроцедуры // СпособыСтатьяЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля СтатьяЗатрат.
//
Процедура СпособыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СформироватьТаблицуОтбораНематериальныхСтатейЗатрат();
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		ТаблицаОтбора, 
		Элемент, 
		СтандартнаяОбработка
	);
	
КонецПроцедуры // СпособыСтатьяЗатратНачалоВыбора()

Процедура СпособыПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // СпособыПроектНачалоВыбора()

// Обработчик события "ПриНачалеРедактирования" строки табличной части
// "Способы".
//
Процедура СпособыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.Коэффициент  = 1;
		
	КонецЕсли;
	
КонецПроцедуры // СпособыПриНачалеРедактирования()

// Обработчик события "ПриИзменении" поля "Подразделение" строки табличной части
// "Способы".
//
Процедура СпособыПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( Истина,
												   Элементыформы.Способы.ТекущиеДанные.ПодразделениеОрганизации,
												   Элементыформы.Способы.ТекущиеДанные.Подразделение,
												   Организация);
	
КонецПроцедуры // СпособыПодразделениеПриИзменении()

// Обработчик события "НачалоВыбораИзСписка" поля "Подразделение организации" строки табличной части
// "Способы".
//
Процедура СпособыПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( Истина,
											 Элемент,
											 Элементыформы.Способы.ТекущиеДанные.ПодразделениеОрганизации,
											 Элементыформы.Способы.ТекущиеДанные.Подразделение,
											 Организация,
											 ЭтаФорма);
	
КонецПроцедуры // СпособыПодразделениеОрганизацииНачалоВыбораИзСписка()