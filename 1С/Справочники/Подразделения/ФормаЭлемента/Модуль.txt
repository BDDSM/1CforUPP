////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Подразделения Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);

	Модифицированность = Истина;

КонецПроцедуры


// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Подразделения Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры


// Процедура читает данные о текущем ответственном лице.
//
Процедура ПрочитатьОтветственноеЛицо()

	Отбор = Новый Структура("СтруктурнаяЕдиница");
	Отбор.СтруктурнаяЕдиница = Ссылка;
	
	СрезПоследних   = РегистрыСведений.ОтветственныеЛица.СрезПоследних(ТекущаяДата(), Отбор);

	Если ЭтоНовый() ИЛИ СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы.НадписьРуководительТекст.Заголовок = "Не указан." + Символы.ПС + "Используется в отчетах, требующих подписи руководителя";
	ИначеЕсли ЗначениеЗаполнено(СрезПоследних[0].ФизическоеЛицо) Тогда
		ЭлементыФормы.НадписьРуководительТекст.Заголовок = СрезПоследних[0].ФизическоеЛицо.Наименование + ", с " + Формат(СрезПоследних[0].Период, "ДЛФ=DD");
	Иначе
		ЭлементыФормы.НадписьРуководительТекст.Заголовок = "Не указан с " + Формат(СрезПоследних[0].Период, "ДЛФ=DD") + Символы.ПС + "Используется в отчетах, требующих подписи руководителя";	
	КонецЕсли;

КонецПроцедуры // ПрочитатьОтветственноеЛицо()

Процедура ПрочитатьСоответствия(НаборЗаписей)
	
	Если ТипЗнч(НаборЗаписей) <> Тип("РегистрСведенийНаборЗаписей.СоответствиеПодразделенийИПодразделенийОрганизаций") Тогда
		НаборЗаписей = РегистрыСведений.СоответствиеПодразделенийИПодразделенийОрганизаций.СоздатьНаборЗаписей();
	Иначе
		НаборЗаписей.Очистить();
	КонецЕсли;
	
	НаборЗаписей.Отбор.Подразделение.Установить(Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение,
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.Организация,
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.ПодразделениеОрганизации
	|ИЗ
	|	РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций КАК СоответствиеПодразделенийИПодразделенийОрганизаций
	|ГДЕ
	|	СоответствиеПодразделенийИПодразделенийОрганизаций.Подразделение = &Подразделение";
	
	Запрос.УстановитьПараметр("Подразделение",	Ссылка);
	
	НаборЗаписей.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

Процедура ЗаписатьСоответствия(НаборЗаписей, Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Запись Из НаборЗаписей Цикл
		Запись.Подразделение	= Ссылка;
	КонецЦикла;
	
	ПервичныйНабор = НаборЗаписей.Выгрузить();
	
	НаборЗаписей.Отбор.Подразделение.Установить(Ссылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ * ИЗ РегистрСведений.СоответствиеПодразделенийИПодразделенийОрганизаций ГДЕ Подразделение = &Подразделение";
	Запрос.УстановитьПараметр("Подразделение", Ссылка);
	
	Если Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(Запрос.Выполнить().Выгрузить(), НаборЗаписей.Выгрузить()) Тогда
		
		Попытка
			НаборЗаписей.Записать();
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке(ОписаниеОшибки(),, ("Элемент """ + СокрЛП(Ссылка) + """ не записан. Не записано соответствие подразделениям организаций."));
			// возвратим обратно данные набора
			НаборЗаписей.Загрузить(ПервичныйНабор);
			Отказ = Истина;
			Возврат;
		КонецПопытки;
		
		ПрочитатьСоответствия(НаборЗаписей)
		
	Иначе
		НаборЗаписей.Загрузить(ПервичныйНабор);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.Права);
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.РазделительПрава);
	КонецЕсли;
	
	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Подразделения;
	ПрочитатьЗаполнитьСвойстваИЗначения();

	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Подразделения;
	ПрочитатьЗаполнитьКатегории();
	
	ПрочитатьОтветственноеЛицо();
	
	ДополнительныеДействия = Новый Действие("ДополнительныеДействия");
	
	УчетРасходовНаПерсоналПереопределяемый.ПередОткрытиемФормыПодразделенияДополнительно(ЭтаФорма, ДополнительныеДействия);
	РаботаСФайламиПереопределяемый.ПередОткрытиемФормыЭлементаДополнительно(ЭтаФорма, ДополнительныеДействия, Новый Структура("ПриВыводеСтроки", Новый Действие("ДополнительноеДействиеПриВыводеСтроки")));
	
	ИзменениеАктуальностиЭлементовПереопределяемый.ФормаЭлементаПередОткрытиемДополнительно(ЭтаФорма, ДополнительныеДействия);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(, ЭлементыФормы, "НадписьОсновнойПроект,ОсновнойПроект");
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);	
	
	Если Не ЭтоНовый() Тогда
		ПрочитатьСоответствия(СоответствиеПодразделениямОрганизаций);
	КонецЕсли;
	
	ИзменениеАктуальностиЭлементовПереопределяемый.ФормаЭлементаПриОткрытииДополнительно(ЭтаФорма);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	СписокНеЗаполненныхРеквизитов = Новый СписокЗначений;
	ОбнаруженыОшибки = Ложь;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если Не ЗначениеЗаполнено(Наименование)Тогда
		
		СписокНеЗаполненныхРеквизитов.Добавить(" Наименование");
		ОбнаруженыОшибки = Истина;
		
	КонецЕсли;	
	
	Если ОбнаруженыОшибки Тогда
		Если СписокНеЗаполненныхРеквизитов.Количество()>0 Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Не заполнены реквизиты: " + СписокНеЗаполненныхРеквизитов, Перечисления.ВидыСообщений.Ошибка);
			ОбработкаКомментариев.ДобавитьСообщение("Элемент не записан!", Перечисления.ВидыСообщений.ВажнаяИнформация);
		КонецЕсли;
		ОбработкаКомментариев.ПоказатьСообщения();
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		РаботаСФайламиПереопределяемый.ПередЗаписьюФормыЭлементаДополнительно(ЭтаФорма);
	КонецЕсли;
	
	Если Не Отказ Тогда
		ИзменениеАктуальностиЭлементовПереопределяемый.ФормаЭлементаПередЗаписьюДополнительно(ЭтаФорма, ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();
	
	ЗаписатьСоответствия(СоответствиеПодразделениямОрганизаций, Отказ);
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	ИзменениеАктуальностиЭлементовПереопределяемый.ФормаЭлементаПослеЗаписиДополнительно(ЭтаФорма);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьНадписьОтветственноеЛицоТекст" Тогда
		
		ПрочитатьОтветственноеЛицо();
		
	ИначеЕсли ИмяСобытия = "ОбновитьФорму" и (Источник = Ссылка или (ТипЗнч(Источник) = Тип("СправочникСсылка.Подразделения") и Источник.Пустая())) Тогда
		
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;
		РаботаСФайламиПереопределяемый.ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента, ЭтаФорма, Ссылка);
		
	Иначе
		
		УчетРасходовНаПерсоналПереопределяемый.ОбработатьОповещениеФормыПодразделения(ИмяСобытия, Параметр, Источник, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры


// Процедура - обработчик события "ОбработкаЗаписиНовогоОбъекта" формы
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

Процедура ДействияФормыПрава(Кнопка)
	
	Если РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		НастройкаПравДоступа.РедактироватьПраваДоступа(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура НадписьРуководительТекстНажатие(Элемент)
	
	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = "Перед назначением Руководителя необходимо записать подразделение. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Отказ = Не ЗаписатьВФорме();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент!");
				Отказ = Истина;
			КонецПопытки;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ФормаРегистра = РегистрыСведений.ОтветственныеЛица.ПолучитьФормуСписка("ФормаСпискаОтветственныеЛицаПодразделения" , ЭтаФорма, Элемент);
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.Установить(Ссылка);
		ФормаРегистра.Заголовок = "Руководители подразделения " +СОКРЛП(Наименование);
		ФормаРегистра.Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события "НачалоВыбора" реквизита "ОсновнойПроект".
//
Процедура ОсновнойПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ОсновнойПроектНачалоВыбора()

Процедура ДополнительныеДействия(Элемент)
	
	РаботаСФайламиПереопределяемый.ВыполнитьДополнительныеДействияФормыЭлемента(Элемент, ЭтаФорма);
	УчетРасходовНаПерсоналПереопределяемый.ВыполнитьДополнительныеДействияФормыПодразделения(Элемент, ЭтаФорма);
	
	ИзменениеАктуальностиЭлементовПереопределяемый.ВыполнитьДополнительныеДействияФормыЭлемента(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура ДополнительноеДействиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСФайламиПереопределяемый.ДополнительноеДействиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ СоответствиеПодразделениямОрганизаций

Процедура СоответствиеПодразделениямОрганизацийОрганизацияПриИзменении(Элемент)
	
	ЭлементыФормы.СоответствиеПодразделениямОрганизаций.ТекущиеДанные.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ