Перем ПредставленияПериодДетализации;       // Коллекция представлений реквизита ПериодДетализации

Перем НужноУдалитьРегламентноеЗадание; // Ответ пользователя на вопрос о необходимости удалять регл. задание (булево или неопределено)
Перем ПользовательРешилРедактироватьДатуНачала; // При начале редактирования даты предупреждаем пользователя

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает доступность элементов формы
//
Процедура УправлениеДоступностью()
	
	Если ТолькоПросмотр Тогда
		// Доступность регулируется настройками в диалоге
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ПредставлениеРасписания.Доступность 			   = ФормироватьДокументыАвтоматически;
	ЭлементыФормы.НеОбрабатыватьВсеДокументы.Доступность 		   = ФормироватьДокументыАвтоматически;
	ЭлементыФормы.НадписьЗадержка.Доступность					   = ФормироватьДокументыАвтоматически;
	ЭлементыФормы.НадписьПояснениеЗадержка.Видимость 			   = ФормироватьДокументыАвтоматически;
	ЭлементыФормы.Задержка.Доступность 							   = ФормироватьДокументыАвтоматически И НеОбрабатыватьВсеДокументы;
	
	ДоступностьСпособаВводаВремени = ПериодДетализации = Перечисления.Периодичность.Месяц;
	ЭлементыФормы.РамкаГруппыСпособВводаВремени.Доступность			= ДоступностьСпособаВводаВремени;
	ЭлементыФормы.ПереключательСпособОтраженияПоДням.Доступность	= ДоступностьСпособаВводаВремени;
	ЭлементыФормы.ПереключательСпособОтраженияСводно.Доступность	= ДоступностьСпособаВводаВремени;
	
КонецПроцедуры

// Устанавливает подпись к полю Задержка с учетом формы множественного числа
Процедура НастроитьНадписьЗадержка()
	
	Если НеОбрабатыватьВсеДокументы Тогда
	
		Если Задержка = 0 Тогда 
			ПояснениеЗадержка = "Не обрабатывать документы за сегодня";
		Иначе
			ПояснениеЗадержка = "";
		КонецЕсли;
		
	Иначе
		
		ПояснениеЗадержка = "Обрабатывать все введенные документы";
		
	КонецЕсли;
	
	Предыдущие 	= ОбщегоНазначения.ФормаМножественногоЧисла("предыдущий","предыдущие","предыдущие", Задержка);
	Дней 		= ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней", Задержка);
	
	ЭлементыФормы.НеОбрабатыватьВсеДокументы.Заголовок = "Не обрабатывать документы за " + Предыдущие + ":";
	ЭлементыФормы.НадписьЗадержка.Заголовок         = Дней;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии
// Настройка диалога.
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням
	КонецЕсли;  
		
	// В базе хранится дата, по которую обработаны документы.
	// В форме пользователю показывается дата, начиная с которой будут обработаны документы.
	ДатаНачалаОбработки = ?(ЗначениеЗаполнено(ГраницаОбработки), КонецДня(ГраницаОбработки) + 1, ГраницаОбработки);
	ПользовательРешилРедактироватьДатуНачала = Ложь;
	
	ПериодДетализацииПредставление 	     = РегламентноеФормированиеДокументов.ПолучитьПредставление(ПредставленияПериодДетализации, ПериодДетализации);
	УправлениеДоступностью();
	
	Расписание = РегламентныеПроцедуры.ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗадание);
	РегламентныеПроцедуры.НастроитьПредставлениеРасписания(ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередЗаписью
// Удалим регл. задание, если пользователь на это согласился при отключении 
// формирования документов по расписанию
Процедура ПередЗаписью(Отказ)
	
	// В форме пользователю показывается дата, начиная с которой будут обработаны документы.
	// В базе хранится дата, по которую обработаны документы.
	ГраницаОбработки = ?(ЗначениеЗаполнено(ДатаНачалаОбработки), НачалоДня(ДатаНачалаОбработки) - 1, ДатаНачалаОбработки);
	
	ЗаголовокСообщения 	= ЗаголовокПриЗаписи();
	
	Если НужноУдалитьРегламентноеЗадание = Истина Тогда
		РегламентныеПроцедуры.УдалитьРегламентноеЗаданиеПриЗаписиНастройки(ЭтотОбъект,ЗаголовокСообщения,Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗаписи
// Запись расписания
Процедура ПриЗаписи(Отказ)
	
	// Обрабатываем расписание регл. задания
	Если НЕ ФормироватьДокументыАвтоматически Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаголовокСообщения 	= ЗаголовокПриЗаписи();
	
	РегламентныеПроцедуры.ИзменитьРегламентноеЗаданиеПриЗаписиНастройки(
		ЭтотОбъект,
		Расписание,
		ЗаголовокСообщения,
		Отказ);
		
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

Процедура ДатаНачалаОбработкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ПользовательРешилРедактироватьДатуНачала Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Дата, начиная с которой обрабатываются данные, изменяется автоматически.
	|Изменение этой даты вручную может привести к ошибкам при формировании документов.
	|Вы действительно хотите изменить дату вручную?";
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Изменить дату вручную");
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПользовательРешилРедактироватьДатуНачала = Истина;
		
	Иначе
		//Восстановим предыдущую дату
		Элемент.Значение     = ДатаНачалаОбработки;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка поля ПериодДетализации
// Выбор из ограниченного списка
Процедура ПериодДетализацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // стандартная обработка не позволяет спозиционироваться на нужное значение
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(ПредставленияПериодДетализации.ВыгрузитьКолонку("Представление"));
	
	Значение = ВыбратьИзСписка(СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если Значение<>Неопределено Тогда
		Элемент.Значение 	= Значение.Значение;
		ПериодДетализации = РегламентноеФормированиеДокументов.ПолучитьЗначение(ПредставленияПериодДетализации, Значение.Значение);
	КонецЕсли;
	УправлениеДоступностью();
	
КонецПроцедуры

Процедура ПериодДетализацииОчистка(Элемент, СтандартнаяОбработка)
	
	// Очищать это поле нельзя
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события ПриИзменении флажка ФормироватьДокументыАвтоматически
// От флажка зависит работа с полем Задержка
Процедура ФормироватьДокументыАвтоматическиПриИзменении(Элемент)
	
	НужноУдалитьРегламентноеЗадание = РегламентныеПроцедуры.ПриИзмененииФлагаФормироватьДокументыАвтоматически(ЭтаФорма);
	
	Если НЕ ФормироватьДокументыАвтоматически Тогда
		НеОбрабатыватьВсеДокументы = Ложь;
		Задержка = 0;
	КонецЕсли;
	УправлениеДоступностью();
	
КонецПроцедуры

// Обработчик нажатия на гиперссылку ПредставлениеРасписания
Процедура ПредставлениеРасписанияНажатие(Элемент)
	
	РегламентныеПроцедуры.РедактироватьРасписаниеРегламентногоЗадания(ЭтаФорма);
	УправлениеДоступностью();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода Задержка
// От значения зависит подпись
Процедура ЗадержкаПриИзменении(Элемент)
	
	НастроитьНадписьЗадержка();
	
КонецПроцедуры

// Обработчик события ПриИзменении флага НеОбрабатыватьВсеДокументы
// От значения зависит работа с полем Задержка
Процедура НеОбрабатыватьВсеДокументыПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
	Если НеОбрабатыватьВсеДокументы Тогда
		ТекущийЭлемент = ЭлементыФормы.Задержка;
	КонецЕсли;
	
	НастроитьНадписьЗадержка();
	
КонецПроцедуры

// Описания представлений реквизита "ПериодДетализации" используются также в форме списка настроек
РегламентноеФормированиеДокументов.ДобавитьЭлементКоллекцииПредставлений(ПредставленияПериодДетализации, Перечисления.Периодичность.День,   "1 документ в день",	1);
РегламентноеФормированиеДокументов.ДобавитьЭлементКоллекцииПредставлений(ПредставленияПериодДетализации, Перечисления.Периодичность.Месяц,  "1 документ в месяц",	30);