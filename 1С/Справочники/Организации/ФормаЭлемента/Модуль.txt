Перем мОбработкаПоискаПоСтрокеВидаКИ;
Перем мТекстПоискаПоСтрокеВидаКИ;
Перем мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ;
Перем мКнопкаРедактироватьКИВДиалоге;
Перем мОбъектКИ;

Перем мОбработкаТайпинга;
Перем мТекстТайпинга;
Перем мПоследнееЗначениеЭлементаТайпинга;

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровТайпинга()

	ЮрФизЛица = Новый Массив;
	ЮрФизЛица.Добавить(Перечисления.ЮрФизЛицо.ЮрЛицо);
	ЮрФизЛица.Добавить(Перечисления.ЮрФизЛицо.ПустаяСсылка());
	
	СтруктураПараметров = Новый Структура("ГоловнаяОрганизация,ЮрФизЛицо", Справочники.Организации.ПустаяСсылка(),ЮрФизЛица);
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровТайпинга()()

Функция ПолучитьПредставлениеСпособаОтражения(СпособОтражения) Экспорт
	
	Если Не СпособОтражения.Предопределенный Тогда
		
		// для не предопределенных способов отражения возвращаем наименование способа,
		//как пользователь задал его в справочнике
		Возврат СпособОтражения.Наименование;
		
	Иначе
		
		//для предопределенных способов сформируем представление
		
		Если СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя 
			и (Не ЗначениеЗаполнено(СпособОтражения.СчетДт) или Не ЗначениеЗаполнено(СпособОтражения.СчетКт)) Тогда
			Возврат "Распределение по базовым начислениям";
		КонецЕсли;	
		
		ПредставлениеСпособаОтражения = "Дт" + СпособОтражения.СчетДт + " Кт" + СпособОтражения.СчетКт;
		
		Возврат ПредставлениеСпособаОтражения;
		
	КонецЕсли;

КонецФункции

// Процедура получает из регистра сведений текущее отражение в учете
Процедура ПрочитатьОтражениеВУчете() Экспорт

	НадписьОтражениеВБухучете = "";
	
	ПроверятьОтражение = Не ЭтоНовый();
	
	Если ПроверятьОтражение Тогда
		
		Отбор = Новый Структура;
		Отбор.Вставить("Организация", Ссылка);
		
		СрезПоследних   = РегистрыСведений.УчетОсновногоЗаработкаОрганизации.СрезПоследних(ТекущаяДата(), Отбор);
		
		ЕстьОтражение = СрезПоследних.Количество() <> 0;
	Иначе
		ЕстьОтражение = Ложь;
	КонецЕсли;
	
	Если ЕстьОтражение Тогда // зарегистированы данные в регистре
		
		Если ЗначениеЗаполнено(СрезПоследних[0].СпособОтраженияВБухучете) Тогда
			                                                                                 
			НадписьОтражениеВБухучете = "С " + Формат(СрезПоследних[0].Период, "ДЛФ=DD") + " зарплата сотрудников отражается как:" + Символы.ПС;
			//добавим представление способа отражения по умолчанию
			НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(СрезПоследних[0].СпособОтраженияВБухучете);
			
			Если СрезПоследних[0].ПодпадаетПодЕНВД Тогда
				НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ". Расходы полностью относятся к ЕНВД" + Символы.ПС;
			Иначе
				НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + Символы.ПС;
			КонецЕсли;
			
		Иначе // зарегистрирован пустой способ отражения
			
			НадписьОтражениеВБухучете = "С " + Формат(СрезПоследних[0].Период, "ДЛФ=DD") + " зарплата сотрудников отражается способом по умолчанию:" + Символы.ПС;
			//добавим представление способа отражения по умолчанию
			НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию) + Символы.ПС;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СрезПоследних[0].СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя) Тогда
			
			//добавим описание отражения в учете доли б/л за счет работодателя
			НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + Символы.ПС + "Доля больничных листов, оплачиваемая за счет работодателя, отражается способом по умолчанию:" + Символы.ПС;
			//добавим представление способа отражения доли б/л за счет работодателя
			НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(СрезПоследних[0].СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя) + Символы.ПС;
			
		Иначе //не зарегистрировано отражение в учетете доли б/л
			
			//добавим описание отражения в учете доли б/л за счет работодателя
			НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + Символы.ПС + "Доля больничных листов, оплачиваемая за счет работодателя, отражается способом по умолчанию: ";
			//добавим представление способа отражения доли б/л за счет работодателя
			НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(Справочники.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя) + Символы.ПС;
			
		КонецЕсли;
		
	Иначе 
		
		НадписьОтражениеВБухучете = "Зарплата сотрудников отражается способом по умолчанию:" + Символы.ПС;
		//добавим представление способа отражения по умолчанию
		НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию) + Символы.ПС;
		
		//добавим описание отражения в учете доли б/л за счет работодателя
		НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + Символы.ПС + "Доля больничных листов, оплачиваемая за счет работодателя, отражается способом по умолчанию:" + Символы.ПС;
		//добавим представление способа отражения доли б/л за счет работодателя
		НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(Справочники.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя) + Символы.ПС;
		
	КонецЕсли;
	
	ЭлементыФормы.НадписьОтражениеВБухучете.Заголовок = НадписьОтражениеВБухучете;

КонецПроцедуры // ПрочитатьОтражениеВУчете() 

Функция ОбновитьИННОбособленныхОрганизаций(ЭтаФорма)
	
	ТекстСообщения = "";
	ЗапросОрганизации = Новый Запрос;
	ЗапросОрганизации.УстановитьПараметр("ГоловнаяОрганизация", Ссылка);
	ЗапросОрганизации.УстановитьПараметр("ИНН", Ссылка.ИНН);
	
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ГоловнаяОрганизация И
	|	Организации.ИНН <> &ИНН";
	
	ЗапросОрганизации.Текст = ТекстЗапроса;
	
	ВыборкаЗапроса = ЗапросОрганизации.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ОбособленнаяОрганизация = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		
		Попытка
		    ОбособленнаяОрганизация.Заблокировать();
		Исключение
			
			ТекстСообщения = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:") + " " + ВыборкаЗапроса.Ссылка + " - объект заблокирован.";
			Возврат ТекстСообщения
		
		КонецПопытки;
		
	КонецЦикла;	    
	
	ВыборкаЗапроса.Сбросить(); 
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ОбособленнаяОрганизация = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		
		ОбособленнаяОрганизация.ИНН = Ссылка.ИНН;
		ОбособленнаяОрганизация.Записать()
		
	КонецЦикла; 

	Возврат ТекстСообщения

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// При необходимости удалим кнопку Права
	РаботаСДиалогами.УдалитьКнопкуПрава(ЭлементыФормы.ДействияФормы.Кнопки);
	
	ОбновитьКИ();
	ЭлементыФормы.ОсновнаяПанель.Страницы.БухучетЗарплаты.Видимость = НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл();
	
	// регулируем доступность кнопки настройки параметров отправки в ФСС
	ЭлементыФормы.КнопкаНастроитьПараметрыОтправки.Доступность = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.НастройкиОбменаФСС);
	
	// регулируем доступность гиперссылки открытия параметров отправки отчетности через ПК "Спринтер"
	ЭлементыФормы.НадписьПараметрыИнтеграции.Доступность = НЕ ТолькоПросмотр;
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	// Контактная информация
	мКнопкаРедактироватьКИВДиалоге = ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.РедактироватьВДиалоге;
	
	НажатиеКнопки = ВосстановитьЗначение("РедактироватьКИВДиалоге");
	Если ТипЗнч(НажатиеКнопки) = Тип("Булево") Тогда
		мКнопкаРедактироватьКИВДиалоге.Пометка = НажатиеКнопки;
	КонецЕсли; 
	
	Если ЭтоНовый() Тогда
		ОсновнойБанковскийСчет				= Неопределено;
		ВидСтавокЕСНиПФР					= Перечисления.ВидыСтавокЕСНиПФР.ДляНеСельскохозяйственныхПроизводителей;
		ЮрФизЛицо							= Перечисления.ЮрФизЛицо.ЮрЛицо;
		РайонныйКоэффициент					= 1;
		РайонныйКоэффициентРФ				= 1;
		ОтражатьВРегламентированномУчете	= Истина;
		Если НЕ ЗначениеЗаполнено(ЭтаФорма.ВидОбменаСКонтролирующимиОрганами) Тогда
			ЭтаФорма.ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменОтключен;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ЮрФизЛицо) Тогда
		ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо;
	КонецЕсли;
	
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	Если ЭлементыФормы.ОсновнаяПанель.Страницы.БухучетЗарплаты.Видимость Тогда
		ПрочитатьОтражениеВУчете();
	КонецЕсли;	
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
	
	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
	РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
	
КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
//
Процедура ПриЗакрытии()
	
	// Контактная информация
	СохранитьЗначение("РедактироватьКИВДиалоге", мКнопкаРедактироватьКИВДиалоге.Пометка);
	
КонецПроцедуры

// Обработчик события "ПриИзмененииДанных" формы.
//
Процедура ПриИзмененииДанных()

	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации;
	ПрочитатьЗаполнитьСвойстваИЗначения();
	
	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации;
	ПрочитатьЗаполнитьКатегории();

КонецПроцедуры // ПриИзмененииДанных()

// Обработчик события "ПослеЗаписи"
//
Процедура ПослеЗаписи()
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
	Оповестить("Изменение организации", Ссылка);
	
КонецПроцедуры

// Обработчик события ПриЗаписи формы.
//
Процедура ПриЗаписи(Отказ)
	
	// Если менялся ИНН, то необходимо изменить ИНН у обособленных организаций.  
	ТекстЗаписиИНН = ОбновитьИННОбособленныхОрганизаций(ЭтаФорма);

	Если НЕ ПустаяСтрока(ТекстЗаписиИНН) Тогда

		Сообщить(ТекстЗаписиИНН + Символы.ПС + "Элемент не записан!");
		Отказ = Истина;
		Возврат;

	КонецЕсли;
	
	Если ТипЗнч(мОбъектКИ) = Тип("СправочникСсылка.Организации") Тогда
		мОбъектКИ = Ссылка;
	КонецЕсли;
	
	Если мОбъектКИ <> Неопределено Тогда
		УправлениеКонтактнойИнформацией.ЗаписатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();

КонецПроцедуры

// Процедура - обработчик пришедшего оповещения.
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ОбновитьФорму" и (Источник = Ссылка или (ТипЗнч(Источник) = Тип("СправочникСсылка.Организации") и Источник.Пустая())) Тогда
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;
		
		Если Параметр.ИмяЭлемента = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
			СписокКнопокФайлов = Новый СписокЗначений;
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
			РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
		КонецЕсли;

	ИначеЕсли ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		// Контактная информация
		Если ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные <> Неопределено
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Вид = Параметр.Вид
		   И ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип = Параметр.Тип Тогда
		
			УправлениеКонтактнойИнформацией.УстановитьВозможностьРедактированияТекстаКИ(ЭлементыФормы.КонтактнаяИнформация);
			КонтактнаяИнформацияПриАктивизацииСтроки(ЭлементыФормы.КонтактнаяИнформация);
		
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "ОбновитьНадписьОтражениеВБухучете" И (Источник = ЭтаФорма) Тогда
		
		ПрочитатьОтражениеВУчете();
		
	ИначеЕсли ИмяСобытия = "Привязка учетной записи к организации" И ТипЗнч(Параметр) = Тип("Структура") Тогда
		
		Если НЕ ТолькоПросмотр И Параметр.Свойство("Организация") И Параметр.Свойство("УчетнаяЗапись") И Параметр.Организация = Ссылка Тогда
			ВидОбменаСНалоговымиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате;
			УчетнаяЗаписьОбмена = Параметр.УчетнаяЗапись;
			Параметр.Вставить("ОповещениеОтработано", Истина);
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры // ОбработкаЗаписиНовогоОбъекта()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Обработчик события "ПриИзменении" реквизита ГоловнаяОрганизация
Процедура ГоловнаяОрганизацияПриИзменении(Элемент)
	
	Если ГоловнаяОрганизация = Ссылка Тогда
		ГоловнаяОрганизация = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
		ИНН = ГоловнаяОрганизация.ИНН;
	Иначе
		ЦифровойИндексОбособленногоПодразделения = 0;
	КонецЕсли;
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
КонецПроцедуры

Процедура ГоловнаяОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &ПустаяОрганизация
	|	И Организации.ЮрФизЛицо <> &ФизЛицо
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование");

	Запрос.УстановитьПараметр("ПустаяОрганизация", Справочники.Организации.ПустаяСсылка());						  
	Запрос.УстановитьПараметр("ФизЛицо", Перечисления.ЮрФизЛицо.ФизЛицо);						  

	СписокВыбора = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокВыбора.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла; 
	
	// Исключим редактируемую организацию из списка головных
	НайдЭлемент = СписокВыбора.НайтиПоЗначению(Ссылка);
    Если НайдЭлемент <> Неопределено Тогда
		СписокВыбора.Удалить(НайдЭлемент);
	КонецЕсли;

	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		Если ЗначениеЗаполнено(ГоловнаяОрганизация) Тогда
			ИНН = ГоловнаяОрганизация.ИНН;
		КонецЕсли;
		УправлениеВидимостьюИДоступностьюЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

Процедура ГоловнаяОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры

Процедура ГоловнаяОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровТайпинга(), ЭтаФорма, Тип("СправочникСсылка.Организации"), мОбработкаТайпинга, мТекстТайпинга, мПоследнееЗначениеЭлементаТайпинга, Ложь);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы ОсновнойБанковскийСчет.
//
Процедура ОсновнойБанковскийСчетНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельФормыПрава(Кнопка)
	
	Если РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		НастройкаПравДоступа.РедактироватьПраваДоступа(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьОтражениеВБухучетеИзменитьНажатие(Элемент)
	
	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = "Перед заданием бухучета зарплаты необходимо записать организацию. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Отказ = Не ЗаписатьВФорме();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент!");
				Отказ = Истина;
			КонецПопытки;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		ФормаРегистра = РегистрыСведений.УчетОсновногоЗаработкаОрганизации.ПолучитьФормуСписка("ФормаСпискаОтборПоОрганизации", ЭтаФорма, Элемент);
		ФормаРегистра.РегистрСведенийСписок.Отбор.Организация.Установить(Ссылка);
		ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;
		ФормаРегистра.Заголовок = "Бухучет зарплаты сотрудников организации " +СОКРЛП(Наименование);
		ФормаРегистра.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура ИННПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьИННОформитьПолеВвода(ИНН, ЭлементыФормы.ИНН, Перечисления.ЮрФизЛицо.ЮрЛицо);
	
КонецПроцедуры

Процедура ОГРНПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьОГРНОформитьПолеВвода(ОГРН, ЮрФизЛицо, ЭлементыФормы.ОГРН); 
	
КонецПроцедуры

Процедура КПППриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьКППОрганизацииОформитьПолеВвода(КПП, ЮрФизЛицо, ЭлементыФормы.КПП);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриНачалеРедактированияОбщая(Элемент, НоваяСтрока, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Обработки.РедактированиеКонтактнойИнформации.Создать().РедактироватьЗапись(ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные,, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	УправлениеКонтактнойИнформацией.ОткрытьФормуВыбораВидаКИ(Истина, Элемент, ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(мОбъектКИ));
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		Элемент.Значение = Справочники.ВидыКонтактнойИнформации.ПустаяСсылка();
	КонецЕсли; 
	
	мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Элемент.Значение;
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(мОбъектКИ)), Тип("СправочникСсылка.ВидыКонтактнойИнформации"));
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Тип, ВидОбъектаКонтактнойИнформации", ЭлементыФормы.КонтактнаяИнформация.ТекущиеДанные.Тип, УправлениеКонтактнойИнформацией.ВидОбъектаКИ(мОбъектКИ)), ЭтаФорма, Тип("СправочникСсылка.ВидыКонтактнойИнформации"), мОбработкаПоискаПоСтрокеВидаКИ, мТекстПоискаПоСтрокеВидаКИ, мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередОкончаниемРедактированияОбщая(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, мТекстПоискаПоСтрокеВидаКИ, мОбработкаПоискаПоСтрокеВидаКИ);
	Если Не Отказ Тогда
		КонтактнаяИнформацияПриАктивизацииСтроки(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПредставлениеПриИзмененииОбщая(Элемент, ЭлементыФормы.КонтактнаяИнформация);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПриАктивизацииСтрокиТаблицы(Элемент, ЭлементыФормы.КоманднаяПанельКонтактнаяИнформация.Кнопки.УстановитьОсновным);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)

	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.УдалитьЗаписьКонтактнойИнформации(Элемент, Отказ);
	Если Отказ Тогда
		КонтактнаяИнформацияПриАктивизацииСтроки(Элемент);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломДобавленияОбщее(Элемент, Отказ, Копирование, мКнопкаРедактироватьКИВДиалоге, ЭлементыФормы.КонтактнаяИнформация, НаборКонтактнойИнформации);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеКонтактнойИнформацией.ПроизвестиПопыткуЗаблокироватьОбъект(ЭтотОбъект, ЭтаФорма);
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияПередНачаломИзмененияОбщее(Элемент, Отказ, мКнопкаРедактироватьКИВДиалоге);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	УправлениеКонтактнойИнформацией.КонтактнаяИнформацияТипПриИзмененииОбщее(Элемент, ЭлементыФормы.КонтактнаяИнформация);

КонецПроцедуры

// Обработчик нажатия на кнопку УстановитьОсновным командной панели КоманднаяПанельКонтактнаяИнформация.
//
Процедура КоманднаяПанельКонтактнаяИнформацияУстановитьОсновным(Кнопка)
	
	УправлениеКонтактнойИнформацией.УстановитьЗаписьОсновной(НаборКонтактнойИнформации, ЭлементыФормы.КонтактнаяИнформация, Кнопка);
	
КонецПроцедуры

// Процедура определяет текущий объект для отображения контактной информации
// и выводит контактную информацию для объекта в табличное поле КонтактнаяИнформация.
//
// Параметры:
//	Нет.
//
Процедура ОбновитьКИ()
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		Если НЕ ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
			ОбъектКИ = Неопределено;
		Иначе
			ОбъектКИ = ИндивидуальныйПредприниматель;
		КонецЕсли;
	Иначе
		Если ЭтоНовый() И ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ОбъектКИ = ПараметрОбъектКопирования;
		Иначе
			ОбъектКИ = Ссылка;
		КонецЕсли;
	Конецесли;
	
	Если ОбъектКИ = мОбъектКИ Тогда
		Возврат;
	Иначе
		мОбъектКИ = ОбъектКИ;
	КонецЕсли;
	
	Если ОбъектКИ = Неопределено Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.КонтактнаяИнформация.Видимость = Ложь;
	Иначе		
		ЭлементыФормы.ОсновнаяПанель.Страницы.КонтактнаяИнформация.Видимость = Истина;
		УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, мОбъектКИ);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Наименование.
//
Процедура НаименованиеПриИзменении(Элемент)
	
	Если ПустаяСтрока(НаименованиеПолное) Тогда
		НаименованиеПолное = Наименование;
	КонецЕсли;
	
	Если ПустаяСтрока(НаименованиеПлательщикаПриПеречисленииНалогов) Тогда
		НаименованиеПлательщикаПриПеречисленииНалогов = Наименование;
	КонецЕсли;
		
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИностраннаяОрганизация.
//
Процедура ИностраннаяОрганизацияПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
КонецПроцедуры

// Процедура управляет видимостью и доступностью элементов управления формы 
// в зависимости от значений реквизитов.
//
// Параметры:
//	Нет.
//
Процедура УправлениеВидимостьюИДоступностьюЭлементовФормы()

	ЭтоФизЛицо = (ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо);

	ЭлементыФормы.КПП.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.КПП.АвтоОтметкаНезаполненного = ЭлементыФормы.КПП.Доступность;
	ЭлементыФормы.КПП.ОтметкаНезаполненного = ЭлементыФормы.КПП.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(КПП);
	ЭлементыФормы.НадписьКПП.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.КодОКОНХ.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.НадписьКодОКОНХ.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.ГоловнаяОрганизация.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.НадписьГоловнаяОрганизация.Видимость = НЕ ЭтоФизЛицо;

	ЭлементыФормы.ДатаРегистрации.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.НадписьДатаРегистрации.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.РамкаГруппыОрганВыдавшийСвидетельство.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.НадписьСвидетельствоКодОргана.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.НадписьСвидетельствоНаименованиеОргана.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.СвидетельствоКодОргана.Видимость = НЕ ЭтоФизЛицо;
	ЭлементыФормы.СвидетельствоНаименованиеОргана.Видимость = НЕ ЭтоФизЛицо;

	ЭлементыФормы.ИндивидуальныйПредприниматель.Видимость = ЭтоФизЛицо;
	ЭлементыФормы.НадписьИндивидуальныйПредприниматель.Видимость = ЭтоФизЛицо;
	
	ЭлементыФормы.НадписьОГРН.Заголовок = ?(ЭтоФизЛицо, "ОГРНИП:", "ОГРН:");
	ЭлементыФормы.ОГРН.Маска = ?(ЭтоФизЛицо, "999999999999999", "9999999999999");
	ЭлементыФормы.РамкаГруппыСвидетельствоОПостановке.Заголовок = ?(ЭтоФизЛицо, "Свидетельство о государственной регистрации", "Свидетельство о постановке на учет в налоговом органе");

	Если ЭтоФизЛицо Тогда
		ЭлементыФормы.ИНН.Доступность = Истина;
		ЭлементыФормы.НадписьИНН.Доступность = Истина;
		ЭлементыФормы.ДополнительныйКодФСС.Доступность = Ложь;
		ЭлементыФормы.НадписьДополнительныйКодФСС.Доступность = Ложь;
		ЭлементыФормы.РамкаГруппыСчетаФактуры.Видимость = Ложь;
		ЭлементыФормы.НадписьЦифровойИндексОбособленногоПодразделения.Видимость = Ложь;
		ЭлементыФормы.ЦифровойИндексОбособленногоПодразделения.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ИНН.Доступность = НЕ ЗначениеЗаполнено(ГоловнаяОрганизация);
		ЭлементыФормы.НадписьИНН.Доступность = НЕ ЗначениеЗаполнено(ГоловнаяОрганизация);
		ЭлементыФормы.ДополнительныйКодФСС.Доступность = ЗначениеЗаполнено(ГоловнаяОрганизация);
		ЭлементыФормы.НадписьДополнительныйКодФСС.Доступность = ЗначениеЗаполнено(ГоловнаяОрганизация);
		ЭлементыФормы.РамкаГруппыСчетаФактуры.Видимость = ЗначениеЗаполнено(ГоловнаяОрганизация);
		ЭлементыФормы.НадписьЦифровойИндексОбособленногоПодразделения.Видимость = ЗначениеЗаполнено(ГоловнаяОрганизация);
		ЭлементыФормы.ЦифровойИндексОбособленногоПодразделения.Видимость = ЗначениеЗаполнено(ГоловнаяОрганизация);
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ИндивидуальныйПредприниматель.Видимость = ЭтоФизЛицо;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ИностраннаяОрганизация.Видимость = ИностраннаяОрганизация;
	
	ЭлементыФормы.ПанельОбменПоБесспецоператорнойСхеме.Доступность = (ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменВУниверсальномФормате);
	ЭлементыФормы.ПанельОбменЧерезСпринтер.Доступность = (ВидОбменаСКонтролирующимиОрганами = Перечисления.ВидыОбменаСКонтролирующимиОрганами.ОбменЧерезСпринтер);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ЮрФизЛицо.
//
Процедура ЮрФизЛицоПриИзменении(Элемент)
	
	Если ЮрФизЛицо = Перечисления.ЮрФизЛицо.ФизЛицо Тогда
		ГоловнаяОрганизация = Неопределено;
		ЦифровойИндексОбособленногоПодразделения = 0;
	КонецЕсли;
	
	ОбновитьКИ();
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы ИндивидуальныйПредприниматель.
//
Процедура ИндивидуальныйПредпринимательПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ИндивидуальныйПредприниматель) Тогда
		ИНН = ИндивидуальныйПредприниматель.ИНН;
	КонецЕсли;
	ОбновитьКИ();
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ИндивидуальныйПредприниматель.
//
Процедура ИндивидуальныйПредпринимательОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события Очистка элемента формы ЮрФизЛицо.
//
Процедура ЮрФизЛицоОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ИндивидуальныйПредпринимательОткрытие(Элемент, СтандартнаяОбработка)
	
	Если НЕ ИндивидуальныйПредприниматель.Пустая() Тогда
	
		СтандартнаяОбработка = Ложь;
		ФормаФизЛица = ИндивидуальныйПредприниматель.ПолучитьФорму(, ЭтаФорма);
		ФормаФизЛица.Открыть();	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры
Процедура ДействияФормыПеречитать(Кнопка)
	
	Если Модифицированность Тогда
		ОтветНаВопрос = Вопрос("Данные были изменены. Перечитать данные?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос <> КодВозвратаДиалога.Нет Тогда
			УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);
			ЭтотОбъект.Прочитать();
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ СВОЙСТВ И КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма, Элемент, Копирование);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);
	
	Модифицированность = Истина;
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры // ПрочитатьЗаполнитьСвойстваИЗначения()

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_Организации Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры // ПрочитатьЗаполнитьКатегории()

Процедура ПрефиксПриИзменении(Элемент)
	
	ПроцедурыОбменаДаннымиКлиент.ОбработатьИзменениеПрефиксаДляОбъектов(Элемент);
	
КонецПроцедуры

Процедура ДействияФормыФайлы(Кнопка)
	
	Если Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", Ссылка);
	
	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Строка") Тогда
		Если ЗначениеВыбора = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
			СписокКнопокФайлов = Новый СписокЗначений;
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.Файлы);
			РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////

Процедура НадписьПараметрыИнтеграцииНажатие(Элемент)
	
	РегламентированнаяОтчетность.роПолучитьОбщуюФорму("ФормаПараметрыИнтеграцииСоСпринтером", ЭтаФорма).ОткрытьМодально();
	
КонецПроцедуры

Процедура ПереключательВидОбменаПриИзменении(Элемент)
	
	УправлениеВидимостьюИДоступностьюЭлементовФормы();
	
КонецПроцедуры

Процедура КнопкаНастроитьПараметрыОтправкиНажатие(Элемент)
	Запись = РегистрыСведений.НастройкиОбменаФСС.СоздатьМенеджерЗаписи();
	Запись.Организация = Ссылка;
	Запись.Прочитать();
	Если НЕ ЗначениеЗаполнено(Запись.Организация) Тогда
		Запись.Организация = Ссылка;
	КонецЕсли;
	ФормаЗаписи = Запись.ПолучитьФорму();
	ФормаЗаписи.Открыть();
КонецПроцедуры

Процедура НадписьСписокЗаявленийНажатие(Элемент)
	
	Документы.ЗаявлениеАбонентаСпецоператораСвязи.ПолучитьФормуСписка().Открыть();
	
КонецПроцедуры

Процедура НадписьСформироватьЗаявлениеНаПодключениеКЭлектронномуДокументооборотуНажатие(Элемент)
	
	Если КонтекстЭДО <> Неопределено Тогда 
		ФормаМастера = КонтекстЭДО.ПолучитьФорму("Документ_ЗаявлениеАбонентаСпецоператораСвязи_ФормаМастера");
		Если НЕ ЭтоНовый() Тогда
			ФормаМастера.ОрганизацияПриВызовеИзСправочникаОрганизаций = ЭтотОбъект.Ссылка;
		КонецЕсли;
		ФормаМастера.Открыть();
	Иначе
		Предупреждение("Недостаточно прав для использования модуля документооборота !");
	КонецЕсли;
	
КонецПроцедуры

мОбработкаПоискаПоСтрокеВидаКИ                 = Ложь;
мТекстПоискаПоСтрокеВидаКИ                     = "";
мПоследнееЗначениеЭлементаПоискаПоСтрокеВидаКИ = Неопределено;