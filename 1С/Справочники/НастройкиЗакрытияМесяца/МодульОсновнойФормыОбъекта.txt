Перем мНачальноеЗначениеОтветственного;
Перем ТекущийПользователь, ГруппыТекущегоПользователя;
Перем МассивНедоступныхРегламентныхОпераций;

// Переменные механизма встроенной справки
Перем ОтображатьСправкуФормы;
Перем ВидимостьКолонок;
Перем СтруктураОбработчикиИзмененияДанныхСправки;

// Переменные механизма распределения затрат
Перем мСписокНаследуемыхПолей;

Перем мИспользоватьГибкуюНастройкуСпособовРаспределенияЗатрат;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Процедура входит в состав механизма интерактивной справки
Процедура ВыполнитьКомандуФормы(Команда, Значение) Экспорт
	
	Если Команда = "ОткрытьЗакладкуОтветственные" Тогда
		ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.Ответственные;
	ИначеЕсли Команда = "ОткрытьЗакладкуСхема" Тогда
		ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.КартаМаршрута;
	ИначеЕсли Команда = "ОткрытьЗакладкуСхемаНДС" Тогда
		ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.СхемаРасчетНДС;
	ИначеЕсли Команда = "ОткрытьЗакладкуРаспределениеЗатрат" Тогда
		ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница = ЭлементыФормы.ПанельЗакладок.Страницы.РаспределениеЗатрат;
	Иначе
		ОбщегоНазначения.Сообщение("Неизвестная команда: " + Команда);
		
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКомандуФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СПРАВКИ

//Процедура готовит контекстную справку по данным макета
Процедура ПодготовитьСправкуФормы()
	
	ЦветФонаСправки		= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки	= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки());
	
	ЭлементыФормы.ПанельСправкиФормы.ЦветРамки			= РаботаСДиалогами.ВстроеннаяСправка_ЦветРамки();
	ЭлементыФормы.НадписиЗакрытьСправкуФормы.ЦветФона	= РаботаСДиалогами.ВстроеннаяСправка_ЦветФона();
	ЭлементыФормы.НадписиЗакрытьСправкуФормы.ЦветТекста	= РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки();
	
	ТекстМакета = ПолучитьМакет("МакетВстроеннойСправки").ПолучитьТекст();
	
	ТекстМакета = СтрЗаменить(ТекстМакета,"#ОбщееОписание_Показывать",?(Истина, "inline", "none"));
	ТекстМакета = СтрЗаменить(ТекстМакета,"#СводныеНастройки_Показывать",?(ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница.Имя = "СводныеНастройки", "inline", "none"));
	ТекстМакета = СтрЗаменить(ТекстМакета,"#Схема_Показывать",?(ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница.Имя = "КартаМаршрута", "inline", "none"));
	ТекстМакета = СтрЗаменить(ТекстМакета,"#СхемаНДС_Показывать",?(ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница.Имя = "СхемаРасчетНДС", "inline", "none"));
	ТекстМакета = СтрЗаменить(ТекстМакета,"#РаспределениеЗатрат_Показывать",?(ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница.Имя = "РаспределениеЗатрат", "inline", "none"));
	ТекстМакета = СтрЗаменить(ТекстМакета,"#Ответственные_Показывать",?(ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница.Имя = "Ответственные", "inline", "none"));
	ТекстМакета = СтрЗаменить(ТекстМакета,"#КолонкиВидимы_Показывать",?(ПроверитьВидимостьколонок() И (ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница.Имя = "СводныеНастройки"), "inline", "none"));
		
	ТекстМакетаВстроеннойСправки =
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
	|	</HEAD>
	|
	|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto><FONT face=""MS Sans Serif"" size=1>
	|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭлементыФормы.ВстроеннаяСправка)+">
	|" + ТекстМакета + "
	|	</FONT></BODY>
	|</HTML>";
	
	ЭлементыФормы.ВстроеннаяСправка.УстановитьТекст(ТекстМакетаВстроеннойСправки);
	
КонецПроцедуры

//Процедура обновляет текст справки в соответствии с текущим состоянием формы
Процедура ОбновитьСправкуФормы()
	
	ДокHTML = ЭлементыФормы.ВстроеннаяСправка.Документ;
	ИмяТекущейСтраницы =  ЭлементыФормы.ПанельЗакладок.ТекущаяСтраница.Имя;
	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ОбщееОписание_Показывать", 	Истина);
	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СводныеНастройки_Показывать", 	ИмяТекущейСтраницы = "СводныеНастройки");
	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "Схема_Показывать", 			ИмяТекущейСтраницы = "КартаМаршрута");
	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "СхемаНДС_Показывать", 			ИмяТекущейСтраницы = "СхемаРасчетНДС");
	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "РаспределениеЗатрат_Показывать", 	ИмяТекущейСтраницы = "РаспределениеЗатрат");
	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "Ответственные_Показывать", 	ИмяТекущейСтраницы = "Ответственные");
	РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "КолонкиВидимы_Показывать", 	ВидимостьКолонок  И (ИмяТекущейСтраницы = "СводныеНастройки"));
	
КонецПроцедуры // ОбновитьСправкуФормы()

Процедура ВстроеннаяСправкаonclick(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnClick(Элемент, pEvtObj, ЭтаФорма);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseout(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseover(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj);
	
КонецПроцедуры

Процедура ПереключитьВидимостьСправкиФормы(Кнопка)
	
	ОтображатьСправкуФормы = НЕ ОтображатьСправкуФормы;
	РаботаСДиалогами.УстановитьВидимостьСправкиФормы(Истина, ОтображатьСправкуФормы, ЭтаФорма, "ПанельФормы", СтруктураОбработчикиИзмененияДанныхСправки);
	ОбновитьСправкуФормы();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	УстановитьКнопкиПечати();
	
КонецПроцедуры

//Процедура - обработчик события ПриОткрытии формы
Процедура ПриОткрытии()
	МассивНедоступныхРегламентныхОпераций = БизнесПроцессЗакрытиеМесяца.ЗаполнитьМассивНедоступныхРегламентныхОпераций(?(ЗначениеЗаполнено(ДатаНачалаДействияНастройки), ДатаНачалаДействияНастройки, ТекущаяДата()),,ВариантНастройки);
	Если ЭтоНовый() Тогда
		Если ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			ЗаполнитьСписокРегламентныхОпераций(ПараметрОбъектКопирования);
		Иначе	
			ОтражатьВУправленческомУчете 	= Истина;
			ОтражатьВБухгалтерскомУчете 	= Истина;
			ОтражатьВНалоговомУчете 		= Истина;
			ЗаполнитьСписокРегламентныхОпераций();
		КонецЕсли;
	КонецЕсли;

	ВывестиТабличнуюЧастьВДерево();

	УстановитьДоступность();
	
	// Работа со справкой формы
	ВидимостьКолонок = ПроверитьВидимостьколонок();
	ОтображатьСправкуФормы = ВосстановитьЗначение("Справочник.НастройкиЗакрытияМесяца.ОтображатьСправкуФормы");
	Если ОтображатьСправкуФормы = Неопределено Тогда
		ОтображатьСправкуФормы = Истина;
	КонецЕсли;
	
	РаботаСДиалогами.ДобавитьПанельСправкиФормы(ЭтаФорма, "ПанельФормы");
	ПодготовитьСправкуФормы();
	РаботаСДиалогами.УстановитьВидимостьСправкиФормы(Ложь, ОтображатьСправкуФормы, ЭтаФорма, "ПанельФормы", СтруктураОбработчикиИзмененияДанныхСправки);

	// Список полей по которым могут наследоваться способы распределения
	мСписокНаследуемыхПолей = Новый СписокЗначений;
	мСписокНаследуемыхПолей.Добавить("ХарактерЗатрат",      "<По всем характерам затрат>");
	мСписокНаследуемыхПолей.Добавить("ВидПодразделения",    "<По всем видам подразделений>");
	мСписокНаследуемыхПолей.Добавить("Подразделение",       "<По всем подразделениям>");
	мСписокНаследуемыхПолей.Добавить("СтатьяЗатрат",        "<По всем статьям затрат>");
	мСписокНаследуемыхПолей.Добавить("НоменклатурнаяГруппа","<По всем номенклатурным группам>");
	
	// Затраты не распределяются, если способ распределения не заполнен
	мСписокНаследуемыхПолей.Добавить("СпособРаспределения", "<Не распределять>");
	
	// Ограничим выбор характера затрат
	СписокВыбора = ЭлементыФормы.СпособыРаспределения.Колонки.ХарактерЗатрат.ЭлементУправления.СписокВыбора;
	СписокВыбора.Добавить(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	СписокВыбора.Добавить(Перечисления.ХарактерЗатрат.ОбщепроизводственныеРасходы);
	СписокВыбора.Добавить(Перечисления.ХарактерЗатрат.ОбщехозяйственныеРасходы	);
	СписокВыбора.Добавить(Перечисления.ХарактерЗатрат.БракВПроизводстве);
	СписокВыбора.Добавить(Перечисления.ХарактерЗатрат.КоммерческиеРасходы);
	
	мИспользоватьГибкуюНастройкуСпособовРаспределенияЗатрат = Константы.ИспользоватьГибкуюНастройкуСпособовРаспределенияЗатрат.Получить();
	
КонецПроцедуры

//Процедура - обработчик события ОбновлениеОтображения формы
Процедура ОбновлениеОтображения()
	ОбновитьКартуМаршрута();
КонецПроцедуры

//Процедура - обработчик события ПередЗаписью формы
Процедура ПередЗаписью(Отказ)

	РегламентныеОперации.Загрузить(ПолучитьТаблицуРегламентныхОперацийИзДерева());

КонецПроцедуры

//Процедура - обработчик события ПослеЗаписи формы
Процедура ПослеЗаписи()
	УстановитьДоступность();
КонецПроцедуры

//Процедура - обработчик события ПриЗакрытии формы
Процедура ПриЗакрытии()
	СохранитьЗначение("Справочник.НастройкиЗакрытияМесяца.ОтображатьСправкуФормы", ОтображатьСправкуФормы);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

//Процедура - обработчик события ПриПолученииДанных табличного поля РегламентныеОперации
Процедура РегламентныеОперацииПриПолученииДанных(Элемент, ОформленияСтрок)
	ТекущаяВидимостьКолонок = ПроверитьВидимостьколонок();
	Если ТекущаяВидимостьКолонок <> ВидимостьКолонок Тогда
		ВидимостьКолонок = ТекущаяВидимостьКолонок;
		ОбновитьСправкуФормы();
	КонецЕсли;	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		РеглОперация = ОформлениеСтроки.Ячейки.РегламентнаяОперация.Значение;
		ТолькоПросмотрСтроки = БизнесПроцессЗакрытиеМесяца.РегламентнаяОперацияНедоступна(РеглОперация, МассивНедоступныхРегламентныхОпераций);
		ОформлениеСтроки.Ячейки.РегламентнаяОперация.ТолькоПросмотр = ТолькоПросмотрСтроки;
		Если ТолькоПросмотрСтроки Тогда
			ЦветТекста = Новый Цвет(174, 174, 174);
		Иначе
			ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
		КонецЕсли; 
		Для Каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
			Ячейка.ЦветТекста = ЦветТекста;
		КонецЦикла;
		Если ОформлениеСтроки.ДанныеСтроки.Использовать И Не ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.Ответственный) Тогда
			ОформлениеСтроки.Ячейки.Ответственный.ОтметкаНезаполненного = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

//Процедура - обработчик события ПриОкончанииРедактирования табличного поля РегламентныеОперации
Процедура РегламентныеОперацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЭлементыФормы.ОтветственныеПоРегламентнымОперациям.ОбновитьСтроки();
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры

//Процедура - обработчик события ПриИзменении элемента формы ОтражатьВБухгалтерскомУчете
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		ПроверитьИспользованиеЭтапов(Ложь, "БУ");

		Если ОтражатьВНалоговомУчете Тогда
			ОтражатьВНалоговомУчете = Ложь;
			ПроверитьИспользованиеЭтапов(Ложь, "НУ");
		КонецЕсли;
	Иначе	
		ПроверитьИспользованиеЭтапов(Истина, "БУ");
	КонецЕсли;

	УстановитьДоступность();
КонецПроцедуры

//Процедура - обработчик события ПриИзменении элемента формы ОтражатьВУправленческомУчете
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	ПроверитьИспользованиеЭтапов(ОтражатьВУправленческомУчете, "УУ");

	УстановитьДоступность();

КонецПроцедуры

//Процедура - обработчик события ПриИзменении элемента формы ОтражатьВНалоговомУчете
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	ПроверитьИспользованиеЭтапов(ОтражатьВНалоговомУчете, "НУ");
КонецПроцедуры

//Процедура - обработчик события ПроверкаПеретаскивания табличного поля ОтветственныеПоРегламентнымОперациям
Процедура ОтветственныеПоРегламентнымОперациямПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если Строка <> Неопределено Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

//Процедура - обработчик события Перетаскивание табличного поля ОтветственныеПоРегламентнымОперациям
Процедура ОтветственныеПоРегламентнымОперациямПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	Если ПараметрыПеретаскивания.Значение.ЭтоГруппа Тогда
		Предупреждение("Нельзя перетаскивать группы справочников");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.Пользователи")
		ИЛИ ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("СправочникСсылка.ГруппыПользователей") Тогда

		Если Строка.Использовать Тогда
			Для Каждого ПодчиненнаяСтрока Из Строка.Строки Цикл
				Если ПодчиненнаяСтрока.Использовать Тогда
					ПодчиненнаяСтрока.Ответственный = ПараметрыПеретаскивания.Значение;
				КонецЕсли;
			КонецЦикла;
			
			Строка.Ответственный = ПараметрыПеретаскивания.Значение;
			ЭтаФорма.Модифицированность = Истина;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

//Процедура - обработчик события Выбор табличного поля СписокПользователей
Процедура СписокПользователейВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ОбработкаВыбораПользователяГруппыПользователей(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
КонецПроцедуры

//Процедура - обработчик события Выбор табличного поля СписокГруппыПользователей
Процедура СписокГруппыПользователейВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ОбработкаВыбораПользователяГруппыПользователей(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
КонецПроцедуры

//Процедура - обработчик события ПриСменеСтраницы
Процедура ПанельЗакладокПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ОбновитьКартуМаршрута();
	ОбновитьСправкуФормы();
КонецПроцедуры

//Процедура - обработчик события нажатия на кнопку "ДокументыРегламентныхОпераций" командной панели формы
Процедура ДействияФормыДокументыРегламентныхОпераций(Кнопка)
	РегистрыСведений.ДокументыРегламентныхОпераций.ПолучитьФормуСписка().Открыть();
КонецПроцедуры

//Процедура - обработчик события нажатия на кнопку "ОтчетыРегламентныхОпераций" командной панели формы
Процедура ДействияФормыОтчетыРегламентныхОпераций(Кнопка)
	РегистрыСведений.ОтчетыРегламентныхОпераций.ПолучитьФормуСписка().Открыть();
КонецПроцедуры

// Убирает флаги использования для недоступных операций в дереве операций.
// Вызывает сама себя рекурсивно для обхода дерева
Процедура ОтключитьИспользованиеНедоступныхОперацийВДереве(СтрокиДерева, МассивНедоступныхРегламентныхОпераций)
	
	//Обновим флажки в дереве значений
	Для Каждого СтрокаДерева ИЗ СтрокиДерева Цикл
		Если СтрокаДерева.Использовать И 
			БизнесПроцессЗакрытиеМесяца.РегламентнаяОперацияНедоступна(СтрокаДерева.РегламентнаяОперация, МассивНедоступныхРегламентныхОпераций) Тогда
			СтрокаДерева.Использовать = Ложь;
		КонецЕсли;
		ОтключитьИспользованиеНедоступныхОперацийВДереве(СтрокаДерева.Строки, МассивНедоступныхРегламентныхОпераций);
	КонецЦикла;
	
КонецПроцедуры

//Процедура - обработчик события ПриИзменении элемента формы ДатаНачалаДействияНастройки
Процедура ДатаНачалаДействияНастройкиПриИзменении(Элемент)
	МассивНедоступныхРегламентныхОпераций = БизнесПроцессЗакрытиеМесяца.ЗаполнитьМассивНедоступныхРегламентныхОпераций(?(ЗначениеЗаполнено(ДатаНачалаДействияНастройки),ДатаНачалаДействияНастройки,ТекущаяДата()),,ВариантНастройки);
	ОтключитьНедоступныеРегламентныеОперации(МассивНедоступныхРегламентныхОпераций);
	
	ОтключитьИспользованиеНедоступныхОперацийВДереве(РегламентныеОперацииДерево.Строки, МассивНедоступныхРегламентныхОпераций);
	
КонецПроцедуры

//Процедура - обработчик события ПриИзменении элемента формы ВариантНастройки
Процедура ВариантНастройкиПриИзменении(Элемент)
	МассивНедоступныхРегламентныхОпераций = БизнесПроцессЗакрытиеМесяца.ЗаполнитьМассивНедоступныхРегламентныхОпераций(?(ЗначениеЗаполнено(ДатаНачалаДействияНастройки),ДатаНачалаДействияНастройки,ТекущаяДата()),,ВариантНастройки);
	ЗаполнитьСписокРегламентныхОпераций(ЭтотОбъект);
	ВывестиТабличнуюЧастьВДерево();
	УстановитьДоступность();
	ОбновитьКартуМаршрута();
КонецПроцедуры

//Процедура - обработчик события ПриИзмененииФлажка табличной части РегламентныеОперации
Процедура РегламентныеОперацииПриИзмененииФлажка(Элемент, Колонка)
	ТекущаяСтрока = ЭлементыФормы.РегламентныеОперации.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено И Колонка = ЭлементыФормы.РегламентныеОперации.Колонки.РегламентнаяОперация Тогда
		ТекущаяСтрока.Использовать = ?(ТекущаяСтрока.Использовать = 2, 0, ТекущаяСтрока.Использовать);
		
		//Групповая обработка строк при нажатии на группировку
		Если ТекущаяСтрока.Строки.Количество() > 0 Тогда
			Для Каждого ПодчиненнаяСтрока Из ТекущаяСтрока.Строки Цикл
				ПодчиненнаяСтрока.Использовать = ТекущаяСтрока.Использовать;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСостоянияФлажковГруппировок();
КонецПроцедуры //РегламентныеОперацииПриИзмененииФлажка()

//Обработчик события ПриОкончанииРедактирования табличного поля ОтветственныеПоРегламентнымОперациям
Процедура ОтветственныеПоРегламентнымОперациямПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЭлементыФормы.РегламентныеОперации.ОбновитьСтроки();
КонецПроцедуры

//Обработчик нажатия на кнопку ИзменитьОтветственного командной панели КоманднаяПанельКартаМаршрутаРасчетНДС
Процедура КоманднаяПанельКартаМаршрутаРасчетНДСИзменитьОтветственногоРасчетНДС(Кнопка)
	ИзменитьОтветственного(ЭлементыФормы.КартаМаршрутаРасчетНДС);
КонецПроцедуры

//Обработчик события ПриПОлученииДанных табличного поля ОтветственныеПоРегламентнымОперациям
Процедура ОтветственныеПоРегламентнымОперациямПриПолученииДанных(Элемент, ОформленияСтрок)
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если ОформлениеСтроки.ДанныеСтроки.Использовать Тогда
			ЦветТекста = ЦветаСтиля.ЦветТекстаФормы;
			ОформлениеСтроки.Ячейки.Ответственный.ТолькоПросмотр = Ложь;
			Если Не ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки.Ответственный) Тогда
				ОформлениеСтроки.Ячейки.Ответственный.ОтметкаНезаполненного = Истина;
			КонецЕсли;
			
		Иначе
			ЦветТекста = Новый Цвет(174, 174, 174);
			ОформлениеСтроки.Ячейки.Ответственный.ТолькоПросмотр = Истина;
		КонецЕсли; 
		
		Для Каждого Ячейка Из ОформлениеСтроки.Ячейки Цикл
			Ячейка.ЦветТекста = ЦветТекста;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕЧАТИ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Процедура управляет доступностью элементов формы
Процедура УстановитьДоступность()
	Если НЕ ОтражатьВБухгалтерскомУчете И ОтражатьВНалоговомУчете Тогда
		ОтражатьВНалоговомУчете = Ложь;
	КонецЕсли;

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.ОтветственныеПоРегламентнымОперациям.РазрешитьПеретаскивание = НЕ ЭтаФорма.ТолькоПросмотр;
	ЭлементыФормы.СписокГруппыПользователей.РазрешитьНачалоПеретаскивания = НЕ ЭтаФорма.ТолькоПросмотр;
	ЭлементыФормы.СписокПользователей.РазрешитьНачалоПеретаскивания = НЕ ЭтаФорма.ТолькоПросмотр;
	ЭлементыФормы.ПанельЗакладок.Страницы.СхемаРасчетНДС.Видимость = (ВариантНастройки = 0);
КонецПроцедуры

//Процедура включает и выключает регламентные операции при изменении признаков отражения в УУ, БУ и НУ
//Параметры: ПризнакИспользования - булево: включен или выключен признак отражения в учете
//		Учет - строка: какой признак отражения в учете был изменен - УУ, БУ или НУ
Процедура ПроверитьИспользованиеЭтапов(ПризнакИспользования, учет)
	//формирование массива регламентных операций, использование которых необходимо изменить
	МассивИзменяемыеТочкиМаршрута = Новый Массив;
	Если Учет = "БУ" Тогда
		//Отбираем операции которые отражаются только в БУ, и признак использования которых не соответствует текущему признаку отражения в БУ
		СтруктураОтбор = Новый Структура("Использовать,ОтражатьВБухгалтерскомУчете,ОтражатьВУправленческомУчете",НЕ ПризнакИспользования, Истина, Ложь);
	ИначеЕсли Учет = "НУ" Тогда
		//Отбираем операции которые отражаются только в НУ, и признак использования которых не соответствует текущему признаку отражения в БУ
		СтруктураОтбор = Новый Структура("Использовать,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете",НЕ ПризнакИспользования, Ложь, Истина);
	Иначе //УУ
		//Отбираем операции которые отражаются только в УУ, и признак использования которых не соответствует текущему признаку отражения в БУ
		СтруктураОтбор = Новый Структура("Использовать,ОтражатьВБухгалтерскомУчете,ОтражатьВУправленческомУчете",НЕ ПризнакИспользования, Ложь, Истина);
	КонецЕсли;

	СтруктураОтбор.Использовать = ?(СтруктураОтбор.Использовать, 1, 0);
	МассивСтроки = РегламентныеОперацииДерево.Строки.НайтиСтроки(СтруктураОтбор, Истина);

	Для каждого Строка из МассивСтроки цикл
		Если БизнесПроцессЗакрытиеМесяца.РегламентнаяОперацияНедоступна(Строка.РегламентнаяОперация, МассивНедоступныхРегламентныхОпераций) Тогда
			Продолжить;
		КонецЕсли;
		МассивИзменяемыеТочкиМаршрута.Добавить(Строка.РегламентнаяОперация);
	КонецЦикла;
	
	Если МассивИзменяемыеТочкиМаршрута.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекстУчет = "упр. ";
	Если  Учет = "БУ" Тогда
		ТекстУчет = "бух. ";
	ИначеЕсли Учет = "НУ" Тогда
		ТекстУчет = "налог. ";
	КонецЕсли;
	
	ТекстВопроса = "Вы " + ?(ПризнакИспользования, "включили", "отключили") + " признак отражения в "+ ТекстУчет + "учете." + Символы.ПС +
		?(ПризнакИспользования, "Включить", "Отключить") + " использование операций:";
	Для каждого элемент из МассивИзменяемыеТочкиМаршрута цикл
		ТекстВопроса = ТекстВопроса + Символы.ПС + Символы.Таб + Элемент;
	КонецЦикла;
	ТекстВопроса = ТекстВопроса + Символы.ПС + "которые выполняются только по " + ТекстУчет + "учету?";
	Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого элемент из МассивИзменяемыеТочкиМаршрута цикл
		СтрокаТЧ = РегламентныеОперацииДерево.Строки.Найти(элемент, "РегламентнаяОперация", Истина);
		СтрокаТЧ.Использовать = ПризнакИспользования;
	КонецЦикла;	
	ОбновитьКартуМаршрута();
КонецПроцедуры

Функция ПроверитьВидимостьколонок()
	Возврат ЭлементыФормы.РегламентныеОперации.Колонки.ОтражатьВБухгалтерскомУчете.Видимость ИЛИ 
			ЭлементыФормы.РегламентныеОперации.Колонки.ОтражатьВНалоговомУчете.Видимость ИЛИ 
			ЭлементыФормы.РегламентныеОперации.Колонки.ОтражатьВУправленческомУчете.Видимость;
КонецФункции


////////////////////////////////////////////////////////////////////////////////
// РАБОТА СО СХЕМОЙ

//Процедура выполняет обновление схемы на форме
Процедура ОбновитьКартуМаршрута()
	//Обновление общей схемы
	КартаМаршрута = ЭлементыФормы.КартаМаршрута;
	Если БизнесПроцессЗакрытиеМесяца.ИспользоватьБизнесПроцессУСН(,ЭтотОбъект) Тогда
		КартаМаршрута.УстановитьСхему(БизнесПроцессы.ЗакрытиеМесяцаУСНДоходыМинусРасходы.ПолучитьКартуМаршрута());
	Иначе
		КартаМаршрута.УстановитьСхему(БизнесПроцессы.ЗакрытиеМесяца.ПолучитьКартуМаршрута());
	КонецЕсли;
	
	ТаблицаРегламентныхОпераций = ПолучитьТаблицуРегламентныхОперацийИзДерева();
	БизнесПроцессЗакрытиеМесяца.ОбновитьКартуМаршрута(КартаМаршрута, ТаблицаРегламентныхОпераций, МассивНедоступныхРегламентныхОпераций, ГруппыТекущегоПользователя, ТекущийПользователь);
	
	//Обновление схемы расчета НДС
	Если ВариантНастройки = 0 Тогда
		КартаМаршрута = ЭлементыФормы.КартаМаршрутаРасчетНДС;

		КартаМаршрута.УстановитьСхему(БизнесПроцессы.РасчетНДС.ПолучитьКартуМаршрута());
		БизнесПроцессЗакрытиеМесяца.ОбновитьКартуМаршрута(КартаМаршрута, ТаблицаРегламентныхОпераций, МассивНедоступныхРегламентныхОпераций, ГруппыТекущегоПользователя, ТекущийПользователь);
	КонецЕсли;
КонецПроцедуры

//Процедура - обработчик события Выбор элемента формы КартаМаршрута
//По данному событию выполняется включение либо отключение использования регламентной операции
Процедура КартаМаршрутаВыбор(Элемент)
	Если Элемент.ТекущийЭлемент = Неопределено ИЛИ ЭтаФорма.ТолькоПросмотр Тогда
		Возврат;
	КонецЕсли;

	Если (Элемент.ТекущийЭлемент.Имя <> "") И (ТипЗнч(Элемент.ТекущийЭлемент) = Тип("ЭлементГрафическойСхемыДействие")) Тогда
		СтрокаТЧ = РегламентныеОперацииДерево.Строки.Найти(Элемент.ТекущийЭлемент.Значение, "РегламентнаяОперация", Истина);
		
		Если СтрокаТЧ = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		//Определяем является ли этап недоступным
		Если БизнесПроцессЗакрытиеМесяца.РегламентнаяОперацияНедоступна(СтрокаТЧ.РегламентнаяОперация, МассивНедоступныхРегламентныхОпераций) Тогда
			Возврат;
		КонецЕсли;
		
		//Определяем отключен ли этап
		Если НЕ СтрокаТЧ.Использовать Тогда
			ЗапрашиваемоеДействие = "Включить";
		Иначе
			ЗапрашиваемоеДействие = "Отключить";
		КонецЕсли;
		
		ТекстВопроса = "Вы пытаетесь изменить настройку использования регламентной операции.
			|" + ?(СтрокаТЧ.Строки.Количество() > 0, "Настройка использования подчиненных операций также будет изменена" + Символы.ПС, "") 
			+ ЗапрашиваемоеДействие+" использование операции?";
		
		Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		СтрокаТЧ.Использовать = НЕ СтрокаТЧ.Использовать;

		Если СтрокаТЧ.Строки.Количество() > 0 Тогда
			Для Каждого ПодчиненнаяСтрока Из СтрокаТЧ.Строки Цикл
				ПодчиненнаяСтрока.Использовать = СтрокаТЧ.Использовать;
			КонецЦикла;
		КонецЕсли;
		ЭтаФорма.Модифицированность = Истина;

		ЭтаФорма.Обновить();
	КонецЕсли;	
КонецПроцедуры

//Процедура - обработчик события нажатия на кнопку ИзменитьОтветственного в командной панели схемы 
Процедура КоманднаяПанельКартаМаршрутаИзменитьОтветственного(Кнопка)
	ИзменитьОтветственного(ЭлементыФормы.КартаМаршрута);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ОТВЕТСТВЕННЫМИ

//Процедура меняет ответственного при нажатии кнопки контекстного меню на картах маршрута
Процедура ИзменитьОтветственного(КартаМаршрута)
	Элемент = КартаМаршрута.ТекущийЭлемент;
	Если Элемент = Неопределено ИЛИ ТипЗнч(Элемент)<>Тип("ЭлементГрафическойСхемыДействие") ИЛИ
		(ТипЗнч(Элемент.Значение) <> Тип("ТочкаМаршрутаБизнесПроцессаСсылка.ЗакрытиеМесяца") И
		ТипЗнч(Элемент.Значение) <> Тип("ТочкаМаршрутаБизнесПроцессаСсылка.РасчетНДС")) ИЛИ
		Элемент.Значение.Вид <> ВидТочкиМаршрутаБизнесПроцесса.Действие Тогда
		Предупреждение("Для изменения ответственного необходимо установить курсор на требуемой регламентной операции.");
		Возврат;
	КонецЕсли;
	ТекОперация = Элемент.Значение;

	СтрокаТЧ = РегламентныеОперацииДерево.Строки.Найти(ТекОперация, "РегламентнаяОперация", Истина);

	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	//Определяем является ли этап запрещенным
	Если БизнесПроцессЗакрытиеМесяца.РегламентнаяОперацияНедоступна(СтрокаТЧ.РегламентнаяОперация, МассивНедоступныхРегламентныхОпераций) Тогда
		Предупреждение("Регламентная операция не выполняется. Изменение ответственного запрещено");
		Возврат;
	КонецЕсли;

	//Проверяем вдруг операция отключена
	Если НЕ СтрокаТЧ.Использовать Тогда
		Предупреждение("Регламентная операция отключена. Изменение ответственного запрещено");
		Возврат;
	КонецЕсли;
	//Определяем текущего ответственного
	ТекОтветственный = СтрокаТЧ.Ответственный;
	
	ФормаИзмененияОтветственного = БизнесПроцессы.ЗакрытиеМесяца.ПолучитьФорму("ФормаИзмененияОтветственного");
	ФормаИзмененияОтветственного.Заголовок = "Изменение ответственного, операция: "+ТекОперация;
	ФормаИзмененияОтветственного.СтарыйОтветственный 	= ТекОтветственный;
	ФормаИзмененияОтветственного.НовыйОтветственный 	= Неопределено;
	Результат = ФормаИзмененияОтветственного.ОткрытьМодально();
	Если Результат = Неопределено Тогда
		Возврат;
	ИначеЕсли Результат = ТекОтветственный Тогда
		Возврат;
	Иначе
		СтрокаТЧ.Ответственный = Результат;
		Если СтрокаТЧ.Строки.Количество() > 0 Тогда
			Для Каждого ПодчиненнаяСтрока Из СтрокаТЧ.Строки Цикл
				ПодчиненнаяСтрока.Ответственный = СтрокаТЧ.Ответственный;
			КонецЦикла;
		КонецЕсли;
		ЭтаФорма.Модифицированность = Истина;
		ОбновитьКартуМаршрута();
	КонецЕсли;
КонецПроцедуры

//Процедура - обработчик нажатия на кнопку ПереместитьВлево: выполняет назначение ответственных
Процедура ПереместитьВлевоНажатие(Элемент)
	Если ЭлементыФормы.ОтветственныеПоРегламентнымОперациям.ТекущаяСтрока = Неопределено Тогда
		Предупреждение("Не отмечена регламентная операция для назначения ответственного");
		Возврат; 
	КонецЕсли;
	
	текПользователь = Неопределено;
	Если ЭлементыФормы.ПанельСписокПользователей.ТекущаяСтраница = ЭлементыФормы.ПанельСписокПользователей.Страницы.ГруппыПользователей Тогда
		Если ЭлементыФормы.СписокГруппыПользователей.ТекущаяСтрока <> Неопределено Тогда
			текПользователь = ЭлементыФормы.СписокГруппыПользователей.ТекущаяСтрока; 
		КонецЕсли;
	Иначе
		Если ЭлементыФормы.СписокПользователей.ТекущаяСтрока <> Неопределено Тогда
			текПользователь = ЭлементыФормы.СписокПользователей.ТекущаяСтрока; 
		КонецЕсли;
	КонецЕсли;
	
	Если текПользователь = Неопределено тогда
		Предупреждение("Не отмечен ответственный, которого необходимо назначить");
		Возврат;
	КонецЕсли;

	Если ЭлементыФормы.ОтветственныеПоРегламентнымОперациям.ВыделенныеСтроки.Количество() > 0 Тогда
		Для каждого Строка из ЭлементыФормы.ОтветственныеПоРегламентнымОперациям.ВыделенныеСтроки цикл
			Если Строка.Использовать Тогда
				Для Каждого ПодчиненнаяСтрока Из Строка.Строки Цикл
					Если ПодчиненнаяСтрока.Использовать Тогда
						ПодчиненнаяСтрока.Ответственный = текПользователь;
					КонецЕсли;
				КонецЦикла;
				
				Строка.Ответственный = текПользователь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

//Процедура - обработчик нажатия на кнопку ПереместитьВлево: выполняет очистку ответственных
Процедура ПереместитьВправоНажатие(Элемент)
	
	Если ЭлементыФормы.ОтветственныеПоРегламентнымОперациям.ТекущаяСтрока = Неопределено Тогда
		Предупреждение("Не отмечена регламентная операция для очистки значения ответственного");
		Возврат; 
	КонецЕсли;
	
	Если ЭлементыФормы.ОтветственныеПоРегламентнымОперациям.ВыделенныеСтроки.Количество() > 0 Тогда
		Для Каждого Строка из ЭлементыФормы.ОтветственныеПоРегламентнымОперациям.ВыделенныеСтроки цикл
			Если Строка.Использовать Тогда
				Для Каждого ПодчиненнаяСтрока Из Строка.Строки Цикл
					Если ПодчиненнаяСтрока.Использовать Тогда
						ПодчиненнаяСтрока.Ответственный = Неопределено;
					КонецЕсли;
				КонецЦикла;
				
				Строка.Ответственный = Неопределено;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

//Процедура устанавливает состояние флажков в группировках дерева значений
Процедура ОбновитьСостоянияФлажковГруппировок()
	ОтборСтрок = Новый Структура("Использовать", 1);
	Для Каждого СтрокаДерева Из РегламентныеОперацииДерево.Строки Цикл
		Если СтрокаДерева.Строки.Количество() > 0 Тогда
			МассивИспользуемыхОпераций = СтрокаДерева.Строки.НайтиСтроки(ОтборСтрок, Ложь);
			Если МассивИспользуемыхОпераций.Количество() = 0 Тогда
				СтрокаДерева.Использовать = 0;
			ИначеЕсли МассивИспользуемыхОпераций.Количество() < СтрокаДерева.Строки.Количество() Тогда
				СтрокаДерева.Использовать = 2;
			Иначе
				СтрокаДерева.Использовать = 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //ОбновитьСостоянияФлажковГруппировок()

//Процедура выводит табличную часть "РегламентныеОперации" в дерево значений на форме
Процедура ВывестиТабличнуюЧастьВДерево()
	РегламентныеОперацииДерево.Строки.Очистить();
	//Сгруппируем строки
	Для Каждого СтрокаТЧ Из РегламентныеОперации Цикл
		Если ТипЗнч(СтрокаТЧ.РегламентнаяОперация) = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.ЗакрытиеМесяца")
			ИЛИ ТипЗнч(СтрокаТЧ.РегламентнаяОперация) = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.ЗакрытиеМесяцаУСНДоходыМинусРасходы") Тогда
			НоваяСтрока = РегламентныеОперацииДерево.Строки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
		КонецЕсли;
	КонецЦикла;
	
	Если ВариантНастройки = 0 Тогда
		СтрокаГруппировкиНДС = РегламентныеОперацииДерево.Строки.Найти(БизнесПроцессы.ЗакрытиеМесяца.ТочкиМаршрута.РассчитатьНДС, "РегламентнаяОперация", Ложь);
		Если СтрокаГруппировкиНДС = Неопределено Тогда
			СтрокаГруппировкиНДС = РегламентныеОперацииДерево;
		КонецЕсли;
		
		Для Каждого СтрокаТЧ Из РегламентныеОперации Цикл
			Если ТипЗнч(СтрокаТЧ.РегламентнаяОперация) = Тип("ТочкаМаршрутаБизнесПроцессаСсылка.РасчетНДС") Тогда
				НоваяСтрока = СтрокаГруппировкиНДС.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЧ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьСостоянияФлажковГруппировок();
	ЭлементыФормы.ОтветственныеПоРегламентнымОперациям.ОбновитьСтроки();
КонецПроцедуры //ВывестиТабличнуюЧастьВДерево()

//Функция преобразует дерево значений, содержащее список регламентных операций, в таблицу значений
Функция ПолучитьТаблицуРегламентныхОперацийИзДерева()
	ТаблицаРегламентныхОпераций = РегламентныеОперации.Выгрузить().Скопировать();
	Для Каждого СтрокаРегламентныхОпераций Из ТаблицаРегламентныхОпераций Цикл
		СтрокаДерева = РегламентныеОперацииДерево.Строки.Найти(СтрокаРегламентныхОпераций.РегламентнаяОперация, "РегламентнаяОперация", Истина);
		
		Если СтрокаДерева <> Неопределено Тогда
			//Обновляем поля ТЧ по данным дерева, сохраняя их порядок
			ЗаполнитьЗначенияСвойств(СтрокаРегламентныхОпераций, СтрокаДерева,, "НомерСтроки");
		КонецЕсли;
	КонецЦикла;
	Возврат ТаблицаРегламентныхОпераций;
КонецФункции //ПолучитьТаблицуРегламентныхОперацийИзДерева()

//Процедура обрабатывает назначение ответственного с помощью выбора значения в списке пользователей или групп пользователей
Процедура ОбработкаВыбораПользователяГруппыПользователей(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если Элемент.ТекущаяСтрока.ЭтоГруппа Тогда 
		Возврат; 
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	Если ЭлементыФормы.ОтветственныеПоРегламентнымОперациям.ТекущаяСтрока = Неопределено Тогда
		Предупреждение("Не отмечена регламентная операция для назначения ответственного");
		Возврат; 
	КонецЕсли;

	Для Каждого ВыделеннаяСтрока Из ЭлементыФормы.ОтветственныеПоРегламентнымОперациям.ВыделенныеСтроки Цикл
		Если ВыделеннаяСтрока.Использовать Тогда
			Для Каждого ПодчиненнаяСтрока Из ВыделеннаяСтрока.Строки Цикл
				Если ПодчиненнаяСтрока.Использовать Тогда
					ПодчиненнаяСтрока.Ответственный = Элемент.ТекущаяСтрока;
				КонецЕсли;
			КонецЦикла;
			
			ВыделеннаяСтрока.Ответственный = Элемент.ТекущаяСтрока;
		КонецЕсли;
	КонецЦикла;
	
	ЭтаФорма.Модифицированность = Истина;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// РАСПРЕДЕЛЕНИЕ ЗАТРАТ

Процедура СпособыРаспределенияВидПодразделенияПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.СпособыРаспределения.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ВидПодразделения)
	 И ТекущиеДанные.ВидПодразделения <> ТекущиеДанные.Подразделение.ВидПодразделения Тогда
		ТекущиеДанные.Подразделение = Справочники.Подразделения.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура СпособыРаспределенияПодразделениеПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.СпособыРаспределения.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.Подразделение) Тогда
		ТекущиеДанные.ВидПодразделения = ТекущиеДанные.Подразделение.ВидПодразделения;
	КонецЕсли; 
	
КонецПроцедуры

Процедура СпособыРаспределенияСпособРаспределенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные 				= ЭлементыФормы.СпособыРаспределения.ТекущиеДанные;
	СтандартнаяОбработка 		= Ложь;
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура);
	
	Если НЕ мИспользоватьГибкуюНастройкуСпособовРаспределенияЗатрат Тогда
		
		// Отбор по способам распределения, применимым в данном контексте (определяется характером затрат в текущей строке настройки)
		ПараметрыФормы.Отбор.Вставить("Ссылка", Справочники.НастройкиЗакрытияМесяца.ПрименимыеБазы(ТекущиеДанные.ХарактерЗатрат));
		
		// Отбор по типам базы распределения
		ПараметрыФормы.Отбор.Вставить("ТипБазыРаспределения", Новый Массив);
		ПараметрыФормы.Отбор.ТипБазыРаспределения.Добавить(Перечисления.ТипыБазРаспределения.Предопределенный);
		ПараметрыФормы.Отбор.ТипБазыРаспределения.Добавить(Перечисления.ТипыБазРаспределения.СКД);
		ПараметрыФормы.Отбор.ТипБазыРаспределения.Добавить(Перечисления.ТипыБазРаспределения.Табличный);
		
	Иначе
		
		// Отбор по способам, не использующим упрощенный алгоритм распределения
		ПараметрыФормы.Отбор.Вставить("ИспользоватьПростоеРаспределение", Ложь);
		
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элемент.Значение);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("РежимВыбора", Истина);
	
	ОткрытьФорму("Справочник.СпособыРаспределенияЗатратНаВыпуск.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

Процедура СпособыРаспределенияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	КолонкиСписка = ЭлементыФормы.СпособыРаспределения.Колонки;
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		// Установим для наследуемых полей надпись "<По всем ...>"
		Для Каждого НаследуемоеПоле Из мСписокНаследуемыхПолей Цикл
			Если КолонкиСписка[НаследуемоеПоле.Значение].Видимость 
			 И НЕ ЗначениеЗаполнено(ОформлениеСтроки.ДанныеСтроки[НаследуемоеПоле.Значение]) Тогда
				ОформлениеСтроки.Ячейки[НаследуемоеПоле.Значение].УстановитьТекст(НаследуемоеПоле.Представление);
			КонецЕсли; 	
		КонецЦикла; 
		
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельСпособыРаспределенияПроверитьРаспределениеЗатрат(Кнопка)
	
	НастройкаВыполненаКорректно = Справочники.НастройкиЗакрытияМесяца.ПроверитьЗаполнениеСпособовРаспределения(СпособыРаспределения.Выгрузить());
	
	Если НастройкаВыполненаКорректно Тогда
		ОбщегоНазначения.ПредупреждениеОбОшибке("Ошибок в настройке распределения затрат не обнаружено");
	Иначе
		ОбщегоНазначения.ПредупреждениеОбОшибке("Настройка распределения затрат выполнена некорректно");
	КонецЕсли;
	
КонецПроцедуры

ТекущийПользователь 			= глЗначениеПеременной("глТекущийПользователь");
ГруппыТекущегоПользователя 		= УправлениеПользователями.ПолучитьСписокГруппПользователя(ТекущийПользователь);
СтруктураОбработчикиИзмененияДанныхСправки = Новый Структура; //Не заполняется, нужна передачи в процедуру общего модуля