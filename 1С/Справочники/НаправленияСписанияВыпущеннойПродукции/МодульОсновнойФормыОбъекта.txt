////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры
// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчета(ИзменениеСубконто = ЛОЖЬ)

	Если ИзменениеСубконто Тогда
		Возврат;
	КонецЕсли;

	СтрокаТабличнойЧасти = ЭлементыФормы.Направления.ТекущиеДанные;
	ВидЗатратНУ          = СтрокаТабличнойЧасти.СтатьяЗатрат.ВидРасходовНУ;

	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СтрокаТабличнойЧасти.СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СтрокаТабличнойЧасти.СчетЗатрат, ВидЗатратНУ));
	Иначе
		СтрокаТабличнойЧасти.СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаТабличнойЧасти.СчетЗатрат));
	КонецЕсли;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭлементыФормы.Направления.ТекущиеДанные.СчетЗатратНУ,
	                             ЭлементыФормы.Направления.ТекущиеДанные.СубконтоНУ1,
	                             ЭлементыФормы.Направления.Колонки.СубконтоНУ1,
	                             ЭлементыФормы.Направления.ТекущиеДанные.СубконтоНУ2,
	                             ЭлементыФормы.Направления.Колонки.СубконтоНУ2,
	                             ЭлементыФормы.Направления.ТекущиеДанные.СубконтоНУ3,
	                             ЭлементыФормы.Направления.Колонки.СубконтоНУ3);

КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()

// Процедура управляет доступностью колонок субконто в табличной части услуги
//
Процедура УстановитьДоступностьСубконто(СтрокаТЧ)

	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Колонки = ЭлементыФормы.Направления.Колонки;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭлементыФормы.Направления.ТекущиеДанные.СчетЗатрат,
	                         ЭлементыФормы.Направления.ТекущиеДанные.Субконто1,
	                         ЭлементыФормы.Направления.Колонки.Субконто1,
	                         ЭлементыФормы.Направления.ТекущиеДанные.Субконто2,
	                         ЭлементыФормы.Направления.Колонки.Субконто2,
	                         ЭлементыФормы.Направления.ТекущиеДанные.Субконто3,
	                         ЭлементыФормы.Направления.Колонки.Субконто3);

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭлементыФормы.Направления.ТекущиеДанные.СчетЗатратНУ,
	                         ЭлементыФормы.Направления.ТекущиеДанные.СубконтоНУ1,
	                         ЭлементыФормы.Направления.Колонки.СубконтоНУ1,
	                         ЭлементыФормы.Направления.ТекущиеДанные.СубконтоНУ2,
	                         ЭлементыФормы.Направления.Колонки.СубконтоНУ2,
	                         ЭлементыФормы.Направления.ТекущиеДанные.СубконтоНУ3,
	                         ЭлементыФормы.Направления.Колонки.СубконтоНУ3);

КонецПроцедуры // УстановитьДоступностьСубконто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
		КонецЕсли;
	КонецЕсли;
	
	ВедениеУчетаЗатратПоПроектам = УправлениеПроектами.ВедениеУчетаЗатратПоПроектам();
	РаботаСДиалогами.УстановитьВидимостьКолонкиПроект(ЭлементыФормы.Направления.Колонки, , ВедениеУчетаЗатратПоПроектам);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Для Каждого СтрокаТабличнойЧасти Из Направления Цикл
		Если СтрокаТабличнойЧасти.ПодразделениеОрганизации.Владелец <> Организация Тогда
			СтрокаТабличнойЧасти.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(Истина,
													 СтрокаТабличнойЧасти.ПодразделениеОрганизации,
													 СтрокаТабличнойЧасти.Подразделение,
													 Организация);
	КонецЦикла;
												 
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Установить счета бухгалтерского и налогового учета в соответствии со значениями по умолчанию?",
					РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета");
					
	Для Каждого СтрокаТабличнойЧасти Из Направления Цикл
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат, "СчетЗатрат", "СчетЗатратНУ");
	КонецЦикла;
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ НАПРАВЛЕНИЯ

//Процедура - обработчик события "ПриИзменении" поля СчетЗатрат
// в табличной части "Направления"
//
Процедура НаправленияСчетЗатратПриИзменении(Элемент)

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             ЭлементыФормы.Направления.ТекущиеДанные.Субконто1,
	                             ЭлементыФормы.Направления.Колонки.Субконто1,
	                             ЭлементыФормы.Направления.ТекущиеДанные.Субконто2,
	                             ЭлементыФормы.Направления.Колонки.Субконто2,
	                             ЭлементыФормы.Направления.ТекущиеДанные.Субконто3,
	                             ЭлементыФормы.Направления.Колонки.Субконто3);

	ЗаполнитьСчетНалоговогоУчета()

КонецПроцедуры // НаправленияСчетЗатратПриИзменении()

//Процедура - обработчик события "ПриИзменении" поля Субконто1
// в табличной части "Направления"
//
Процедура НаправленияСубконто1ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Направления.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 1, СтрокаТЧ.Субконто1, СтрокаТЧ.СубконтоНУ1);

КонецПроцедуры // НаправленияСубконто1ПриИзменении()

//Процедура - обработчик события "ПриИзменении" поля Субконто2
// в табличной части "Направления"
//
Процедура НаправленияСубконто2ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Направления.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 2, СтрокаТЧ.Субконто2, СтрокаТЧ.СубконтоНУ2);

КонецПроцедуры // НаправленияСубконто2ПриИзменении()

//Процедура - обработчик события "ПриИзменении" поля Субконто3
// в табличной части "Направления"
//
Процедура НаправленияСубконто3ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Направления.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 3, СтрокаТЧ.Субконто3, СтрокаТЧ.СубконтоНУ3);

КонецПроцедуры // НаправленияСубконто3ПриИзменении()

//Процедура - обработчик события "ПриИзменении" поля СчетЗатратНУ
// в табличной части "Направления"
//
Процедура НаправленияСчетЗатратНУПриИзменении(Элемент)

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             ЭлементыФормы.Направления.ТекущиеДанные.Субконто1,
	                             ЭлементыФормы.Направления.Колонки.Субконто1,
	                             ЭлементыФормы.Направления.ТекущиеДанные.Субконто2,
	                             ЭлементыФормы.Направления.Колонки.Субконто2,
	                             ЭлементыФормы.Направления.ТекущиеДанные.Субконто3,
	                             ЭлементыФормы.Направления.Колонки.Субконто3);

КонецПроцедуры // НаправленияСчетЗатратНУПриИзменении()

//Процедура - обработчик события "ПриАктивизацииСтроки"
// табличной части "Направления"
//
Процедура НаправленияПриАктивизацииСтроки(Элемент)

	СтрокаТЧ = ЭлементыФормы.Направления.ТекущиеДанные;
	УстановитьДоступностьСубконто(СтрокаТЧ);

КонецПроцедуры // НаправленияПриАктивизацииСтроки()

// Процедура - обработчик события "ПриВыводеСтроки" списка справочника.
// Формирует данные в колонке "ХарактерЗатрат"
//
Процедура НаправленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	Если ЭлементыФормы.Направления.Колонки.ХарактерЗатрат.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.Текст = ХарактерЗатрат;
	КонецЕсли;
	УправлениеПроектами.УстановитьДоступностьПроектаВСтрокеТабЧасти(ХарактерЗатрат, ОформлениеСтроки, ЭлементыФормы.Направления);
	
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(
		ХарактерЗатрат,
		ДанныеСтроки.Продукция,
		ДанныеСтроки.СчетЗатрат, ДанныеСтроки.СчетЗатратНУ, ОформлениеСтроки, Истина, Истина, Истина);
	
КонецПроцедуры // НаправленияПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля СтатьяЗатрат списка справочника.
//
Процедура НаправленияСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Направления.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат, "СчетЗатрат", "СчетЗатратНУ");
	Если СтрокаТабличнойЧасти.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = Справочники.НоменклатурныеГруппы.ПустаяСсылка();
	КонецЕсли;
	
	УправлениеПроектами.УстановитьПроектПоУмолчанию(СтрокаТабличнойЧасти.Подразделение, СтрокаТабличнойЧасти.СтатьяЗатрат, СтрокаТабличнойЧасти.Проект);

КонецПроцедуры // НаправленияСтатьяЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Проект"
//
Процедура НаправленияПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // НаправленияПроектНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "Направления".
//
Процедура НаправленияЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	 	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Направления",, "Заказ");
	
КонецПроцедуры // НаправленияЗаказНачалоВыбора()

// Процедура - обработчик события "При изменении" поля ввода Подразделения
// табличной части "Направления".
//
Процедура НаправленияПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( Истина,
												   Элементыформы.Направления.ТекущиеДанные.ПодразделениеОрганизации,
												   Элементыформы.Направления.ТекущиеДанные.Подразделение,
												   Организация);
												   
												   
	НаправленияПодразделениеОрганизацииПриИзменении(Элемент)
	
КонецПроцедуры // НаправленияПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода Подразделения организации
// табличной части "Направления".
//
Процедура НаправленияПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( Истина,
											 Элемент,
											 Элементыформы.Направления.ТекущиеДанные.ПодразделениеОрганизации,
											 Элементыформы.Направления.ТекущиеДанные.Подразделение,
											 Организация,
											 ЭтаФорма);
	
КонецПроцедуры // НаправленияПодразделениеОрганизацииНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода Подразделения организации
// табличной части "Направления".
//
Процедура НаправленияПодразделениеОрганизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Направления.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПодразделениеОрганизации) Тогда
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Установить счета бухгалтерского и налогового учета в соответствии со значениями по умолчанию?",
					РежимДиалогаВопрос.ДаНет, , , "Изменения счетов учета");

	Если Ответ = КодВозвратаДиалога.Да Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.Направления.ТекущиеДанные;
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат, "СчетЗатрат", "СчетЗатратНУ");
	КонецЕсли;
	
КонецПроцедуры // НаправленияПодразделениеОрганизацииПриИзменении()