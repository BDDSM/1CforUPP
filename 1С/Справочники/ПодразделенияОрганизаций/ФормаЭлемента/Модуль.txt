Перем мНастройкиБухучетаДоступны;
Перем мОрганизацияЭтоЮрЛицо;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура читает данные о текущем ответсвенном лице.
//
Процедура ПрочитатьОтветственноеЛицо()

	Отбор = Новый Структура;
	Отбор.Вставить("СтруктурнаяЕдиница", Ссылка);
	Отбор.Вставить("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
	
	СрезПоследних   = РегистрыСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(ТекущаяДата(), Отбор);
	
	Если ЭтоНовый() ИЛИ СрезПоследних.Количество() < 1 Тогда
		ЭлементыФормы.НадписьРуководительТекст.Заголовок = "Не указан." + Символы.ПС + "Используется в отчетах, требующих подписи руководителя";	
	ИначеЕсли ЗначениеЗаполнено(СрезПоследних[0].ФизическоеЛицо) Тогда
		Если ЗначениеЗаполнено(СрезПоследних[0].Должность) Тогда
			ДолжностьРуководителя = СрезПоследних[0].Должность.Наименование;
			Если ПустаяСтрока(ДолжностьРуководителя) Тогда
				ДолжностьРуководителя = "у должности руководителя не задано наименование";
				ЭлементыФормы.НадписьРуководительТекст.Заголовок = СрезПоследних[0].ФизическоеЛицо.Наименование + ", с " + Формат(СрезПоследних[0].Период, "ДЛФ=DD") + Символы.ПС + ДолжностьРуководителя ;
			Иначе
				Если СтрДлина(ДолжностьРуководителя) > 50 Тогда
					ДолжностьРуководителя = Лев(ДолжностьРуководителя, 50) + "...";
				КонецЕсли;
				ЭлементыФормы.НадписьРуководительТекст.Заголовок = СрезПоследних[0].ФизическоеЛицо.Наименование + Символы.ПС + ДолжностьРуководителя + ", с " + Формат(СрезПоследних[0].Период, "ДЛФ=DD");
			КонецЕсли;
		Иначе
			ДолжностьРуководителя = "должность руководителя не задана";
			ЭлементыФормы.НадписьРуководительТекст.Заголовок = СрезПоследних[0].ФизическоеЛицо.Наименование + ", с " + Формат(СрезПоследних[0].Период, "ДЛФ=DD") + Символы.ПС + ДолжностьРуководителя ;
		КонецЕсли;
	Иначе
		ЭлементыФормы.НадписьРуководительТекст.Заголовок = "Не указан с " + Формат(СрезПоследних[0].Период, "ДЛФ=DD") + Символы.ПС + "Используется в отчетах, требующих подписи руководителя";	
	КонецЕсли;

КонецПроцедуры // ПрочитатьОтветственноеЛицо()

// Процедура получает из регистра сведений текущее отражение в учете
Процедура ПрочитатьОтражениеВУчете()

	Отбор = Новый Структура;
	Отбор.Вставить("ПодразделениеОрганизации", Ссылка);
	Отбор.Вставить("Организация", Ссылка.Владелец);
	
	СрезПоследних   = РегистрыСведений.УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.СрезПоследних(ТекущаяДата(), Отбор);
	
	НадписьОтражениеВБухучете = "";
	
	Если ЭтоНовый() ИЛИ СрезПоследних.Количество() = 0 Тогда
		
		НадписьОтражениеВБухучете = "Зарплата сотрудников подразделения отражается как задано для предприятия в целом:" + Символы.ПС;
		//добавим представление способа отражения по умолчанию
		НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию) + Символы.ПС;
		
		//добавим описание отражения в учете доли б/л за счет работодателя
		НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + Символы.ПС + "Доля больничных листов, оплачиваемая за счет работодателя, отражается как задано для предприятия в целом:" + Символы.ПС;
		//добавим представление способа отражения доли б/л за счет работодателя
		НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(Справочники.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя) + Символы.ПС;
		
	Иначе // зарегистированы данные в регистре
		
		НадписьОтражениеВБухучете = "С " + Формат(СрезПоследних[0].Период, "ДЛФ=DD") + " зарплата сотрудников подразделения отражается как:" + Символы.ПС;
		//добавим представление способа отражения по умолчанию
		НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(СрезПоследних[0].СпособОтраженияВБухучете) + Символы.ПС;
		
		//добавим описание отражения в учете доли б/л за счет работодателя
		НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + Символы.ПС + "Доля больничных листов, оплачиваемая за счет работодателя, отражается как:" + Символы.ПС;
		//добавим представление способа отражения доли б/л за счет работодателя
		НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(СрезПоследних[0].СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя) + Символы.ПС;
		
				
		Если ЗначениеЗаполнено(СрезПоследних[0].СпособОтраженияВБухучете) Тогда
			                                                                                 
			НадписьОтражениеВБухучете = "С " + Формат(СрезПоследних[0].Период, "ДЛФ=DD") + " зарплата сотрудников подразделения отражается как:" + Символы.ПС;
			//добавим представление способа отражения по умолчанию
			НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(СрезПоследних[0].СпособОтраженияВБухучете);
			
			Если СрезПоследних[0].ПодпадаетПодЕНВД Тогда
				НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ". Расходы полностью относятся к ЕНВД" + Символы.ПС;
			Иначе
				НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + Символы.ПС;
			КонецЕсли;
			
		Иначе // зарегистрирован пустой способ отражения
			
			НадписьОтражениеВБухучете = "С " + Формат(СрезПоследних[0].Период, "ДЛФ=DD") + " зарплата сотрудников подразделения отражается как задано для предприятия в целом:" + Символы.ПС;
			//добавим представление способа отражения по умолчанию
			НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(Справочники.СпособыОтраженияЗарплатыВРеглУчете.ОтражениеНачисленийПоУмолчанию) + Символы.ПС;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СрезПоследних[0].СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя) Тогда
			
			//добавим описание отражения в учете доли б/л за счет работодателя
			НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + Символы.ПС + "Доля больничных листов, оплачиваемая за счет работодателя, отражается как:" + Символы.ПС;
			//добавим представление способа отражения доли б/л за счет работодателя
			НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(СрезПоследних[0].СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя) + Символы.ПС;
			
		Иначе //не зарегистрировано отражение в учетете доли б/л
			
			//добавим описание отражения в учете доли б/л за счет работодателя
			НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + Символы.ПС + "Доля больничных листов, оплачиваемая за счет работодателя, отражается как задано для предприятия в целом:";
			//добавим представление способа отражения доли б/л за счет работодателя
			НадписьОтражениеВБухучете = НадписьОтражениеВБухучете + ПолучитьПредставлениеСпособаОтражения(Справочники.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя) + Символы.ПС;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЭлементыФормы.НадписьОтражениеВБухучете.Заголовок = НадписьОтражениеВБухучете;

КонецПроцедуры // ПрочитатьОтражениеВУчете() 

Функция ПолучитьПредставлениеСпособаОтражения(СпособОтражения)
	
	Если Не СпособОтражения.Предопределенный Тогда
		
		// для не предопределенных способов отражения возвращаем наименование способа,
		//как пользователь задал его в справочнике
		Возврат СпособОтражения.Наименование;
		
	Иначе
		
		//для предопределенных способов сформируем представление
		
		Если СпособОтражения = Справочники.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя 
			и (Не ЗначениеЗаполнено(СпособОтражения.СчетДт) или Не ЗначениеЗаполнено(СпособОтражения.СчетКт)) Тогда
			Возврат "Распределение по базовым начислениям";
		КонецЕсли;	
		
		ПредставлениеСпособаОтражения = "Дт" + СпособОтражения.СчетДт + " Кт" + СпособОтражения.СчетКт;
		
		Возврат ПредставлениеСпособаОтражения;
		
	КонецЕсли;

КонецФункции

Процедура УстановитьДоступностьРеквизитовОбособленногоПодразделения()

	ЭлементыФормы.КодПоОКАТО.ТолькоПросмотр = Не ФлажокОбособленноеПодразделение;
	ЭлементыФормы.КодПоОКАТО.АвтоОтметкаНезаполненного = ФлажокОбособленноеПодразделение;
	ЭлементыФормы.КодПоОКАТО.ОтметкаНезаполненного = ФлажокОбособленноеПодразделение и Не ЗначениеЗаполнено(КодПоОКАТО);
	ЭлементыФормы.КПП.ТолькоПросмотр = Не (ФлажокОбособленноеПодразделение И мОрганизацияЭтоЮрЛицо);
	ЭлементыФормы.РайонныйКоэффициент.ТолькоПросмотр = Не ФлажокОбособленноеПодразделение;
	ЭлементыФормы.РайонныйКоэффициентРФ.ТолькоПросмотр = Не ФлажокОбособленноеПодразделение;
	ЭлементыФормы.ТерриториальныеУсловияПФР.ТолькоПросмотр = Не ФлажокОбособленноеПодразделение;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НЕ ПараметрыСеанса.ИспользоватьОграниченияПравДоступаНаУровнеЗаписей Тогда
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.Права);
		ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ЭлементыФормы.ДействияФормы.Кнопки.РазделительПрава);
	КонецЕсли;
	
	мНастройкиБухучетаДоступны = ПравоДоступа("Чтение", Метаданные.РегистрыСведений.УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации);
	ЭлементыФормы.ПанельПрочихДанных.Страницы.БухучетЗарплаты.Видимость = мНастройкиБухучетаДоступны;
	Если мНастройкиБухучетаДоступны Тогда
		ПрочитатьОтражениеВУчете();	
	КонецЕсли;
	
	ПрочитатьОтветственноеЛицо();
	
	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций;
	ПрочитатьЗаполнитьСвойстваИЗначения();

	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций;
	ПрочитатьЗаполнитьКатегории();
	
	ИзменениеАктуальностиЭлементовПереопределяемый.ФормаЭлементаПередОткрытиемДополнительно(ЭтаФорма, Новый Действие("ДополнительныеДействияПриИзменении"));
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		РайонныйКоэффициент = 1;
		РайонныйКоэффициентРФ = 1;
	КонецЕсли;	
	
	ЭлементыФормы.ПанельПрочихДанных.Страницы.СтраховыеВзносы.Видимость =ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудЧленовЭкипажейМорскихСудов"); 
	
	мОрганизацияЭтоЮрЛицо = ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Владелец);
	Если Не мОрганизацияЭтоЮрЛицо Тогда
		ЭлементыФормы.ФлажокОбособленноеПодразделение.Заголовок = "Подразделение соответствует месту регистрации индивидуального предпринимателя, отличному от его места жительства";
	КонецЕсли;
	
	ФлажокОбособленноеПодразделение = ЗначениеЗаполнено(КодПоОКАТО);
	
	УстановитьДоступностьРеквизитовОбособленногоПодразделения();
	
	ИзменениеАктуальностиЭлементовПереопределяемый.ФормаЭлементаПриОткрытииДополнительно(ЭтаФорма);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	СписокНеЗаполненныхРеквизитов = Новый СписокЗначений;
	ОбнаруженыОшибки = Ложь;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если Не ЗначениеЗаполнено(Наименование)Тогда
		
		СписокНеЗаполненныхРеквизитов.Добавить(" Наименование");
		ОбнаруженыОшибки = Истина;
		
	КонецЕсли;	
	
	//проверим заполнение реквизита КодПоОКАТО и значение флага ФлажокОбособленноеПодразделение
	Если ФлажокОбособленноеПодразделение и Не ЗначениеЗаполнено(КодПоОКАТО) Тогда

		//заполнены реквизиты обособленного подразделения, но не заполнен КодПоОКАТО, по которому
		//определяем "обособленность" подразделения
		
		СписокНеЗаполненныхРеквизитов.Добавить(" Код по ОКАТО");
		ОбнаруженыОшибки = Истина;	
		
	КонецЕсли;
	
	Если ОбнаруженыОшибки Тогда
		Если СписокНеЗаполненныхРеквизитов.Количество()>0 Тогда
			ОбработкаКомментариев.ДобавитьСообщение("Не заполнены реквизиты: " + СписокНеЗаполненныхРеквизитов, Перечисления.ВидыСообщений.Ошибка);
			ОбработкаКомментариев.ДобавитьСообщение("Элемент не записан!", Перечисления.ВидыСообщений.ВажнаяИнформация);
		КонецЕсли;
		ОбработкаКомментариев.ПоказатьСообщения();
		
		Если Не СписокНеЗаполненныхРеквизитов.НайтиПоЗначению(" Код по ОКАТО") = Неопределено Тогда
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КодПоОКАТО;
		Иначе
			ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.Наименование;
		КонецЕсли;	
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ИзменениеАктуальностиЭлементовПереопределяемый.ФормаЭлементаПередЗаписьюДополнительно(ЭтаФорма, ЭтотОбъект, Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();

	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();

		
КонецПроцедуры

Процедура ПослеЗаписи()
	
	ИзменениеАктуальностиЭлементовПереопределяемый.ФормаЭлементаПослеЗаписиДополнительно(ЭтаФорма);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьНадписьОтветственноеЛицоТекст" Тогда
		ПрочитатьОтветственноеЛицо();
	ИначеЕсли ИмяСобытия = "ОбновитьНадписьОтражениеВБухучете" и мНастройкиБухучетаДоступны Тогда
		ПрочитатьОтражениеВУчете();
    КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	ЭлементыФормы.НадписьМоряков.Заголовок = "Сотрудники этого подразделения " + ?(СоответствуетСудамПодФлагомРФ,"", "не ") + "являются членами экипажей судов, плавающих под Государственным флагом Российской Федерации. С оплаты труда таких сотрудников " + ?(СоответствуетСудамПодФлагомРФ,"в течение 2012 - 2027 годов страховые взносы во внебюджетные фонды не взимаются.", "страховые взносы во внебюджетные фонды взимаются по тарифу, указанному в настройках параметров учета.");
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура НадписьРуководительТекстНажатие(Элемент)
	
	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = "Перед назначением Руководителя необходимо записать подразделение. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Отказ = Не ЗаписатьВФорме();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент!");
				Отказ = Истина;
			КонецПопытки;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ФормаРегистра = РегистрыСведений.ОтветственныеЛицаОрганизаций.ПолучитьФормуСписка("ФормаСпискаОтветственныеЛицаПодразделенияОрганизации" , ЭтаФорма, Элемент);
		ФормаРегистра.РегистрСведенийСписок.Отбор.СтруктурнаяЕдиница.Установить(Ссылка);
		ФормаРегистра.РегистрСведенийСписок.Отбор.ОтветственноеЛицо.Установить(Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		ФормаРегистра.Заголовок = "Руководители подразделения " +СОКРЛП(Наименование);
		
		ФормаРегистра.Открыть();
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьОтражениеВБухучетеИзменитьНажатие(Элемент)
	
	Отказ = Ложь;

	Если ЭтоНовый() Тогда
		Вопрос = "Перед заданием бухучета зарплаты необходимо записать подразделение. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			Попытка
				Отказ = Не ЗаписатьВФорме();
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать элемент!");
				Отказ = Истина;
			КонецПопытки;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

	Если Не Отказ Тогда
		ФормаРегистра = РегистрыСведений.УчетОсновногоЗаработкаРаботниковПодразделенияОрганизации.ПолучитьФормуСписка("ФормаСпискаОтборПоПодразделению", ЭтаФорма, Элемент);
		ФормаРегистра.РегистрСведенийСписок.Отбор.ПодразделениеОрганизации.Установить(Ссылка);
		ФормаРегистра.РегистрСведенийСписок.Отбор.Организация.Установить(Ссылка.Владелец);
		ФормаРегистра.ЭлементыФормы.РегистрСведенийСписок.НачальноеОтображениеСписка = НачальноеОтображениеСписка.Конец;
		ФормаРегистра.Заголовок = "Бухучет зарплаты сотрудников подразделения " +СОКРЛП(Наименование);
		ФормаРегистра.Открыть();
	КонецЕсли;

	
КонецПроцедуры

Процедура ФлажокОбособленноеПодразделениеПриИзменении(Элемент)
	
	Если Не ФлажокОбособленноеПодразделение И  
		(ЗначениеЗаполнено(КодПоОКАТО) Или ЗначениеЗаполнено(ТерриториальныеУсловияПФР) Или ЗначениеЗаполнено(КПП) Или 
		(РайонныйКоэффициент <> 1 И РайонныйКоэффициент <> 0) Или (РайонныйКоэффициентРФ <> 1 И РайонныйКоэффициентРФ <> 0)) Тогда
		
		//снят флаг обособленного подразделения, необходимо очистить КодПоОКАТО и все реквизиты обосоленного подразделения
		
		ТекстВопроса = "";
		КоличествоРеквизитовДляОчистки = 0;
		Если ЗначениеЗаполнено(КодПоОКАТО) Тогда
			ТекстВопроса = " Код по ОКАТО,";
			КоличествоРеквизитовДляОчистки = 1;
		КонецЕсли;
		Если ЗначениеЗаполнено(КПП) И мОрганизацияЭтоЮрЛицо Тогда
			ТекстВопроса = ТекстВопроса + " КПП,";
			КоличествоРеквизитовДляОчистки = КоличествоРеквизитовДляОчистки +1;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТерриториальныеУсловияПФР) Тогда
			ТекстВопроса = ТекстВопроса + " Территориальные условия ПФР,";
			КоличествоРеквизитовДляОчистки = КоличествоРеквизитовДляОчистки +1;
		КонецЕсли;
		Если РайонныйКоэффициент <> 1 и РайонныйКоэффициент <> 0 Тогда
			ТекстВопроса = ТекстВопроса + " Районный коэффициент (местный),";
			КоличествоРеквизитовДляОчистки = КоличествоРеквизитовДляОчистки +1;
		КонецЕсли;
		Если РайонныйКоэффициентРФ <> 1 и РайонныйКоэффициентРФ <> 0 Тогда
			ТекстВопроса = ТекстВопроса + " Районный коэффициент (федеральный),";
			КоличествоРеквизитовДляОчистки = КоличествоРеквизитовДляОчистки +1;
		КонецЕсли;
		// заменим последнюю запятую в тексте на точку
		ТекстВопроса = Лев(ТекстВопроса, СтрДлина(ТекстВопроса)-1) + ".";
		ТекстВопроса = "Снят признак обособленного подразделения," + ?(КоличествоРеквизитовДляОчистки = 1," будет очищен реквизит:"," будут очищены реквизиты:") + ТекстВопроса;
		ТекстВопроса = ТекстВопроса + " Продолжить?";
		
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			КодПоОКАТО = "";
			КПП = "";
			ТерриториальныеУсловияПФР = "";
			РайонныйКоэффициент = 1;
			РайонныйКоэффициентРФ = 1;
		Иначе
			ФлажокОбособленноеПодразделение = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьДоступностьРеквизитовОбособленногоПодразделения();
	
КонецПроцедуры

Процедура ДополнительныеДействияПриИзменении(Элемент)
	
	ИзменениеАктуальностиЭлементовПереопределяемый.ВыполнитьДополнительныеДействияФормыЭлемента(Элемент, ЭтаФорма);
	
КонецПроцедуры // ДополнительныеДействияПриИзменении


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	Если ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций Тогда
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
		ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры


// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)
	
	Отказ = Истина
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);

КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);

	Модифицированность = Истина;

КонецПроцедуры


// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	Если ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ПодразделенияОрганизаций Тогда
		ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
		ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаписиНовогоОбъекта" формы
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыПрава(Кнопка)
	
	Если РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		НастройкаПравДоступа.РедактироватьПраваДоступа(Ссылка);
	КонецЕсли;
	
КонецПроцедуры