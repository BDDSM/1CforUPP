Перем мРазвернутыеХарактеристики; // СписокЗначений. Содержит Ссылки развернутых Характеристик в дереве.
Перем мТекущаяХарактеристика;     // СправочникСсылка.ХарактеристикиНоменклатуры, текущая характеристика в дереве.

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	
	Если РежимВыбора И НЕ ЗначениеЗаполнено(ПараметрВыборПоВладельцу) 
	  И ЭтаФорма.ВладелецФормы <> Неопределено
	  И ТипЗНЧ(ЭтаФорма.ВладелецФормы) = Тип("ПолеВвода")
	  И НЕ ЗначениеЗаполнено(ЭтаФорма.ВладелецФормы.ВыборПоВладельцу)
	  И ТипЗНЧ(ЭтаФорма.ВладелецФормы.ВыборПоВладельцу) = Тип("СправочникСсылка.Номенклатура") Тогда
		Предупреждение("Не выбрана номенклатура!");
		Отказ = Истина;
		Возврат;  
	Иначе
		Если РежимВыбора И НЕ ЗначениеЗаполнено(ПараметрВыборПоВладельцу) Тогда
			ФормаВыбораВладельца = Справочники.Номенклатура.ПолучитьФормуВыбора();
			ФормаВыбораВладельца.Заголовок = "Выберите элемент справочника Номенклатура, Характеристики которого Вы хотите выбирать.";
			ПараметрВыборПоВладельцу = ФормаВыбораВладельца.ОткрытьМодально();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрВыборПоВладельцу) И НЕ ПараметрВыборПоВладельцу.ЭтоГруппа Тогда
			Если НЕ ПараметрВыборПоВладельцу.ВестиУчетПоХарактеристикам Тогда
				Предупреждение("Для номенклатуры """ + ПараметрВыборПоВладельцу + """ не ведется учет по характеристикам!");
				Отказ = Истина;
			КонецЕсли;
		Иначе
			Предупреждение("Не выбрана номенклатура!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Восстановить настройку ОтображатьАктивныеХарактеристики
	ОтображатьАктивныеХарактеристики = ВосстановитьЗначение("ОтображатьАктивныеХарактеристики");
	
	Если ОтображатьАктивныеХарактеристики = Неопределено Тогда
		ОтображатьАктивныеХарактеристики = Истина;
	КонецЕсли;
	
	ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ОтображатьАктивные.Пометка = ОтображатьАктивныеХарактеристики;
	
	// Восстановить настройку РежимОтбораХарактеристик
	РежимОтбораХарактеристик = ВосстановитьЗначение("РежимОтбораХарактеристик");
	
	Если РежимОтбораХарактеристик = Неопределено Тогда
		РежимОтбораХарактеристик = "Равенство";
	КонецЕсли;
	
	Если РежимОтбораХарактеристик = "Равенство" Тогда
		ЭлементыФормы.КоманднаяПанельСвойстваИЗначения.Кнопки.РежимОтбора.Кнопки.РежимОтбораРавенство.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельСвойстваИЗначения.Кнопки.РежимОтбора.Текст = "Режим отбора: Равенство";
	Иначе
		ЭлементыФормы.КоманднаяПанельСвойстваИЗначения.Кнопки.РежимОтбора.Кнопки.РежимОтбораСодержит.Пометка = Истина;
		ЭлементыФормы.КоманднаяПанельСвойстваИЗначения.Кнопки.РежимОтбора.Текст = "Режим отбора: Содержание";
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()

	ЭтаФорма.Заголовок = "Выбор характеристики: " + ПараметрВыборПоВладельцу;

	// Настраивается отбор свойств.
	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств      = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = ПараметрВыборПоВладельцу;
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();

	// Перечитвываются свойства.
	ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();
	
	// Если у владельца формы установлена характеристика, попытаться найти ее по Наименованию
	ВыделеннаяХарактеристика = Неопределено;
	Если ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		Попытка
			НаименованиеХарактеристики = ЭтаФорма.ВладелецФормы.ВыделенныйТекст;
			ВыделеннаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.НайтиПоНаименованию(НаименованиеХарактеристики,,,ПараметрВыборПоВладельцу);
			
			Если НЕ ЗначениеЗаполнено(ВыделеннаяХарактеристика) Тогда
				ВыделеннаяХарактеристика = Неопределено;
			КонецЕсли;
			
		Исключение
			ВыделеннаяХарактеристика = Неопределено;
		КонецПопытки;
	КонецЕсли;
		
	// Заполняется список характеристик.
	ОтобратьХарактеристики(ВыделеннаяХарактеристика);
	
КонецПроцедуры

// Обработчик события ПриЗакрытии формы.
// Сохраняет настройку ОтображатьАктивныеХарактеристики.
// Сохраняет настройку РежимОтбораХарактеристик.
//
Процедура ПриЗакрытии()
	
	СохранитьЗначение("ОтображатьАктивныеХарактеристики", ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ОтображатьАктивные.Пометка);
	
	Если ЭлементыФормы.КоманднаяПанельСвойстваИЗначения.Кнопки.РежимОтбора.Кнопки.РежимОтбораРавенство.Пометка Тогда
		СохранитьЗначение("РежимОтбораХарактеристик", "Равенство");
	Иначе
		СохранитьЗначение("РежимОтбораХарактеристик", "Содержание");
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

// Обработчик события ОбновлениеОтображения формы.
//
Процедура ОбновлениеОтображения()

	Если ЭлементыФормы.Характеристики.ТекущаяСтрока <> Неопределено Тогда
		ЗаголовокКнопки = "Выбрать";
	Иначе
		ЗаголовокКнопки = "Ввести";
	КонецЕсли;

	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаВыбратьВвестиХарактеристику.Текст = ЗаголовокКнопки;

КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ОбработкаОповещения формы.
// Срабатывает при изменении сужествующей характеристики. Обновляет список характеристик.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ХарактеристикаИзменена" Тогда
		
		ОтобратьХарактеристики(Параметр.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ СВОЙСТВ И ЗНАЧЕНИЙ

// Обработчик события ДействиеПеречитать элемента КоманднаяПанель.СвойстваИЗначения.
//
Процедура КоманднаяПанельСвойстваИЗначенияДействиеПеречитать(Кнопка)

	// Перечитвываются свойства.
	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры;
	ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();

	// Обновляется список характеристик.
	ОтобратьХарактеристики();

КонецПроцедуры

// Обработчик действия РежимОтбораРавенство элемента КоманднаяПанельСвойстваИЗначения.
// Устанавливает режим отбора Равенство.
// Обновляет список характеристик
//
Процедура КоманднаяПанельСвойстваИЗначенияРежимОтбораРавенство(Кнопка)
	
	Кнопка.Пометка = Истина;
	ЭлементыФормы.КоманднаяПанельСвойстваИЗначения.Кнопки.РежимОтбора.Кнопки.РежимОтбораСодержит.Пометка = Ложь;
	ЭлементыФормы.КоманднаяПанельСвойстваИЗначения.Кнопки.РежимОтбора.Текст = "Режим отбора: Равенство";
	
	ОтобратьХарактеристики();
	
КонецПроцедуры // КоманднаяПанельСвойстваИЗначенияРежимОтбораРавенство()

// Обработчик действия РежимОтбораСодержит элемента КоманднаяПанельСвойстваИЗначения.
// Устанавливает режим отбора Содержание.
// Обновляет список характеристик
//
Процедура КоманднаяПанельСвойстваИЗначенияРежимОтбораСодержит(Кнопка)
	
	Кнопка.Пометка = Истина;
	ЭлементыФормы.КоманднаяПанельСвойстваИЗначения.Кнопки.РежимОтбора.Кнопки.РежимОтбораРавенство.Пометка = Ложь;
	ЭлементыФормы.КоманднаяПанельСвойстваИЗначения.Кнопки.РежимОтбора.Текст = "Режим отбора: Содержание";
	
	ОтобратьХарактеристики();
	
КонецПроцедуры // КоманднаяПанельСвойстваИЗначенияРежимОтбораСодержит()

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);
	
	Если Элемент.ТекущаяКолонка.Имя = "Свойство" Тогда
		Элемент.ТекущиеДанные.Свойство.ПолучитьФорму("ФормаЭлемента").Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПриОкончанииРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОтобратьХарактеристики();
	
КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, ЭлементыФормы.СвойстваИЗначения.Колонки.Значение.ЭлементУправления);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ХАРАКТЕРИСТИК

// Обработчик события ДействиеОбновить элемента КоманднаяПанель.Характеристики.
//
Процедура КоманднаяПанельХарактеристикиДействиеОбновить(Кнопка)
	
	ОтобратьХарактеристики();
	
КонецПроцедуры

// Обработчик события ДействиеВыбрать элемента КоманднаяПанель.Характеристики.
//
Процедура КоманднаяПанельХарактеристикиДействиеВыбрать(Кнопка)
	
	ТекущаяСтрока = ЭлементыФормы.Характеристики.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено И ЗначениеЗаполнено(ТекущаяСтрока.ХарактеристикаСсылка) Тогда
		ОповеститьОВыборе(ТекущаяСтрока.ХарактеристикаСсылка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик действия СвернутьВсе элемента КоманднаяПанельХарактеристики.
// Сворачивает все строки дерева характеристик
//
Процедура КоманднаяПанельХарактеристикиСвернутьВсе(Кнопка)
	
	Для Каждого СтрокаХарактеристики Из Характеристики.Строки Цикл
		
		ЭлементыФормы.Характеристики.Свернуть(СтрокаХарактеристики);
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельХарактеристикиСвернутьВсе()

// Обработчик действия РазвернутьВсе элемента КоманднаяПанельХарактеристики.
// Разворачивает все строки дерева характеристик
//
Процедура КоманднаяПанельХарактеристикиРазвернутьВсе(Кнопка)
	
	Для Каждого СтрокаХарактеристики Из Характеристики.Строки Цикл
		
		ЭлементыФормы.Характеристики.Развернуть(СтрокаХарактеристики, Истина);
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельХарактеристикиРазвернутьВсе()

// Обработчик действия ОтображатьАктивные элемента КоманднаяПанельХарактеристики.
// Устанавливает значение настройки ОтображатьАктивныеХарактеристики (пометку)
// Обновляет список характеристик
//
Процедура КоманднаяПанельХарактеристикиОтображатьАктивные(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ОтобратьХарактеристики();
	
КонецПроцедуры // КоманднаяПанельХарактеристикиОтображатьАктивные()

// Обработчик события Выбор элемента Характеристики.
// В случае когда текущая строка является характеристикой, выполняется оповещение о выборе.
// В случае когда текущая строка является свойством характеристики, при необходимости устанавливается отбор по
// выбранному свойству.
//
Процедура ХарактеристикиВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// Выполнить оповещение о выборе характеристики
	Если ЗначениеЗаполнено(ВыбраннаяСтрока.ХарактеристикаСсылка) Тогда
		
		ОповеститьОВыборе(ВыбраннаяСтрока.ХарактеристикаСсылка);
		
	// Запросить об установке отбора по свойству
	Иначе
		Ответ = Вопрос("Установить отбор по значению свойства " + ВыбраннаяСтрока.Характеристика + " ?", РежимДиалогаВопрос.ДаНет);
		
		// Установить отбор. Обновить список характеристик
		Если Ответ = КодВозвратаДиалога.Да Тогда
			
			СтрокаЗначенияСвойств = ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения.Найти(ВыбраннаяСтрока.Свойство, "Свойство");
			
			Если СтрокаЗначенияСвойств <> Неопределено Тогда
				СтрокаЗначенияСвойств.Значение = ВыбраннаяСтрока.Значение;
				
				ОтобратьХарактеристики();
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ХарактеристикиВыбор()

// Обработчик события ПередНачаломДобавления элемента Характеристики.
//
Процедура ХарактеристикиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	ВвестиНовуюХарактеристику();
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента Характеристики.
//
Процедура ХарактеристикиПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОбъектХарактеристика = Элемент.ТекущаяСтрока.ХарактеристикаСсылка.ПолучитьОбъект();
	
	Попытка
		ОбъектХарактеристика.УстановитьПометкуУдаления(НЕ Элемент.ТекущаяСтрока.ПометкаУдаления, Истина);
	Исключение
		Предупреждение("Не удалось изменить пометку удаления характеристики:
					   |" + ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	Элемент.ТекущаяСтрока.ПометкаУдаления = ОбъектХарактеристика.ПометкаУдаления;
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Характеристики.
// Устанавливает картинку строкам дерева Характеристик.
//
Процедура ХарактеристикиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ХарактеристикаСсылка) Тогда
		
		ОформлениеСтроки.Ячейки.Характеристика.ОтображатьКартинку = Истина;
		
		// Установить картинку, объект помечен на удаление
		Если ДанныеСтроки.ПометкаУдаления Тогда
			ОформлениеСтроки.Ячейки.Характеристика.ИндексКартинки = 1;
		// Установить нормальную картинку
		Иначе
			ОформлениеСтроки.Ячейки.Характеристика.ИндексКартинки = 0;
		КонецЕсли;
		
	Иначе
		ОформлениеСтроки.Ячейки.Характеристика.ОтображатьКартинку = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ХарактеристикиПриВыводеСтроки()

// Обработчик события ПередНачаломИзменения элемента Характеристики.
// Открывает форму редактируемой Характеристики.
//
Процедура ХарактеристикиПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = ЭлементыФормы.Характеристики.ТекущиеДанные;
	
	Характеристика = ТекущиеДанные.ХарактеристикаСсылка;
	
	мФормаЭлементаХарактеристика = Характеристика.ПолучитьФорму("ФормаЭлемента", ЭтаФорма);
	
	мФормаЭлементаХарактеристика.Открыть();
	
КонецПроцедуры // ХарактеристикиПередНачаломИзменения()

// Обработчик события ПриПолученииДанных элемента Характеристики.
// Устанавливает цвет фона строк свойств характеристик.
//
Процедура ХарактеристикиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого Строка из ОформленияСтрок Цикл
		
		Если Строка.ДанныеСтроки <> Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Строка.ДанныеСтроки.ХарактеристикаСсылка) Тогда
				Строка.ЦветФона = ЦветаСтиля.ФонГруппировкиВерхнегоУровня;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ХарактеристикиПриПолученииДанных()

// Обработчик события ПриАктивизацииСтроки элемента Характеристики.
// Устанавливает доступность кнопкам: Добавить, Выбрать, Изменить Характеристику.
// Устанавливает доступность кнопке: КнопкаВыбратьВвестиХарактеристику.
// Запоминает текущую характеристику.
//
Процедура ХарактеристикиПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	
	// Если список Характеристик пуст.
	Если ТекущиеДанные = Неопределено Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаВыбратьВвестиХарактеристику.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ДействиеДобавить.Доступность          = Истина;
		ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ДействиеВыбрать.Доступность           = Ложь;
		ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ДействиеИзменить.Доступность          = Ложь;
		ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ДействиеУдалить.Доступность           = Ложь;
		
		мТекущаяХарактеристика = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	// Если текущая строка является свойством характеристики
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ХарактеристикаСсылка) Тогда
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаВыбратьВвестиХарактеристику.Доступность = Ложь;
		ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ДействиеДобавить.Доступность          = Ложь;
		ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ДействиеВыбрать.Доступность           = Ложь;
		ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ДействиеИзменить.Доступность          = Ложь;
		ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ДействиеУдалить.Доступность           = Ложь;
		
		мТекущаяХарактеристика = ЭлементыФормы.Характеристики.ТекущаяСтрока.Родитель.ХарактеристикаСсылка;
		
	// Если текущая строка является характеристикой
	Иначе
		
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаВыбратьВвестиХарактеристику.Доступность = Истина;
		ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ДействиеДобавить.Доступность          = Истина;
		ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ДействиеВыбрать.Доступность           = Истина;
		ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ДействиеИзменить.Доступность          = Истина;
		ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ДействиеУдалить.Доступность           = Истина;
		
		мТекущаяХарактеристика = ТекущиеДанные.ХарактеристикаСсылка;
		
	КонецЕсли;
	
КонецПроцедуры // ХарактеристикиПриАктивизацииСтроки()

// Обработчик события ЗаписанНовыйОбъект элемента Характеристики.
// Обновляет список характеристик.
//
Процедура ХарактеристикиОбработкаЗаписиНовогоОбъекта(Элемент, Объект, СтандартнаяОбработка)
	
	Если ТипЗнч(Объект) = Тип("СправочникОбъект.ХарактеристикиНоменклатуры") Тогда
		ОтобратьХарактеристики(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры // ХарактеристикиОбработкаЗаписиНовогоОбъекта()

// Обработчик события Нажатие элемента КнопкаВыбратьВвестиХарактеристику.
//
Процедура ОсновныеДействияФормыКнопкаВыбратьВвестиХарактеристику(Кнопка)
	
	ЗаголовокКнопки = ЭлементыФормы.ОсновныеДействияФормы.Кнопки.КнопкаВыбратьВвестиХарактеристику.Текст;
	
	Если ЗаголовокКнопки = "Выбрать" Тогда
		
		Если ЭлементыФормы.Характеристики.ТекущаяСтрока <> Неопределено Тогда
			ОповеститьОВыборе(ЭлементыФормы.Характеристики.ТекущаяСтрока.ХарактеристикаСсылка);
		Иначе
			Предупреждение("Не выбрана характеристика номенклатуры!");
		КонецЕсли;
		
	ИначеЕсли ЗаголовокКнопки = "Ввести" Тогда 
		
		ВвестиНовуюХарактеристику();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

// Отбирает характеристики в соответствии с установленными значениями свойств.
// Запоминает развернутые узлы дерева, после обновления списка разворачивает.
// При необходимости устанавливает текущую строку дерева.
//
// Параметры:
//  ВыделеннаяХарактеристика - СправочникСсылка.ХарактеристикиНоменклатуры
//
Процедура ОтобратьХарактеристики(Знач ВыделеннаяХарактеристика = Неопределено)
	
	// Запомнить развернутые строки дерева характеристик
	мРазвернутыеХарактеристики.Очистить();
	Для Каждого СтрокаХарактеристики Из Характеристики.Строки Цикл
		
		Если ЭлементыФормы.Характеристики.Развернут(СтрокаХарактеристики) Тогда
			мРазвернутыеХарактеристики.Добавить(СтрокаХарактеристики.ХарактеристикаСсылка);
		КонецЕсли;
		
	КонецЦикла;
	
	// Сформировать запрос. Выбрать Характеристики, свойства и значения
	Характеристики.Строки.Очистить();
	
	ОграничениеПоСвойствамИЗначениям = "";
	ОграничениеПоСвойствамИЗначениямНаСодержание = "";
	
	Запрос = Новый Запрос;
	
	// Сформировать часть запроса для ограничения списка Характеристик.
	Для Каждого Строка Из ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения Цикл
		
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			Индекс = ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения.Индекс(Строка);
			
			// Ограничение на строгое равенство Свойств и Значений
			Если ЭлементыФормы.КоманднаяПанельСвойстваИЗначения.Кнопки.РежимОтбора.Кнопки.РежимОтбораРавенство.Пометка Тогда
				
				ОграничениеПоСвойствамИЗначениям = ОграничениеПоСвойствамИЗначениям +"
				|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов" + Индекс + "
				|	ПО ЗначенияСвойствОбъектов" + Индекс + ".Объект = ХарактеристикиНоменклатуры.Ссылка
				|	И ЗначенияСвойствОбъектов" + Индекс + ".Свойство = &Свойство" + Индекс + " И ЗначенияСвойствОбъектов" + Индекс + ".Значение = &Значение" + Индекс;
				
			// Ограничение на Содержание Свойств и Значений
			Иначе
				
				Если ОграничениеПоСвойствамИЗначениямНаСодержание = "" Тогда
					ОграничениеПоСвойствамИЗначениямНаСодержание = " И (";
				Иначе
					ОграничениеПоСвойствамИЗначениямНаСодержание = ОграничениеПоСвойствамИЗначениямНаСодержание + " ИЛИ ";
				КонецЕсли;
				
				ОграничениеПоСвойствамИЗначениямНаСодержание = ОграничениеПоСвойствамИЗначениямНаСодержание + "
				                                               | (ЗначенияСвойствОбъектов.Свойство = &Свойство" + Индекс + " И ЗначенияСвойствОбъектов.Значение = &Значение" + Индекс + ")";
				
			КонецЕсли;
			
			Запрос.УстановитьПараметр("Свойство" + Индекс, Строка.Свойство);
			Запрос.УстановитьПараметр("Значение" + Индекс, Строка.Значение);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Если ОграничениеПоСвойствамИЗначениямНаСодержание <> "" Тогда
		ОграничениеПоСвойствамИЗначениям = " ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
		                                   | ПО ЗначенияСвойствОбъектов.Объект = ХарактеристикиНоменклатуры.Ссылка";
		
		ОграничениеПоСвойствамИЗначениямНаСодержание = ОграничениеПоСвойствамИЗначениямНаСодержание + ")";
	КонецЕсли;
	
	ОграничениеПоАктивностиХарактеристик = "";
	Если ЭлементыФормы.КоманднаяПанельХарактеристики.Кнопки.ОтображатьАктивные.Пометка Тогда
		ОграничениеПоАктивностиХарактеристик = " И ХарактеристикиНоменклатуры.Активная";
	КонецЕсли;
	
	Запрос.Текст = "ВЫБРАТЬ  
					|ОграничениеХарактеристик.Активная, 
					|ОграничениеХарактеристик.Ссылка КАК Характеристика, 
					|ОграничениеХарактеристик.ПометкаУдаления КАК ПометкаУдаления, 
					|ЗначенияСвойствОбъектов.Свойство, 
					|ЗначенияСвойствОбъектов.Значение 
					|ИЗ 
					|	(ВЫБРАТЬ РАЗЛИЧНЫЕ 
					|	ХарактеристикиНоменклатуры.Ссылка КАК Ссылка, 
					|	ХарактеристикиНоменклатуры.Активная КАК Активная, 
					|	ХарактеристикиНоменклатуры.ПометкаУдаления КАК ПометкаУдаления 
					|	ИЗ 
					|		Справочник.ХарактеристикиНоменклатуры КАК ХарактеристикиНоменклатуры 
					|		" + ОграничениеПоСвойствамИЗначениям + " 
					|	ГДЕ 
					|		ХарактеристикиНоменклатуры.Владелец = &ВладелецХарактеристики 
					|		" + ОграничениеПоАктивностиХарактеристик + " 
					|		" + ОграничениеПоСвойствамИЗначениямНаСодержание + " 
					|		) КАК ОграничениеХарактеристик 
					|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗначенияСвойствОбъектов КАК ЗначенияСвойствОбъектов
					|	ПО ОграничениеХарактеристик.Ссылка = ЗначенияСвойствОбъектов.Объект 
					|ИТОГИ ПО 
					|	Характеристика"; 	
	Запрос.УстановитьПараметр("ВладелецХарактеристики", ПараметрВыборПоВладельцу);
	
	ВыборкаХарактеристики = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	// Заполнить дерево характеристик
	Пока ВыборкаХарактеристики.Следующий() Цикл
		
		СтрХарактеристика = Характеристики.Строки.Добавить();
		
		СтрХарактеристика.Характеристика       = Строка(ВыборкаХарактеристики.Характеристика);
		СтрХарактеристика.Активная             = ВыборкаХарактеристики.Активная;
		СтрХарактеристика.ПометкаУдаления      = ВыборкаХарактеристики.ПометкаУдаления;
		СтрХарактеристика.ХарактеристикаСсылка = ВыборкаХарактеристики.Характеристика;
		
		ВыборкаСвойства = ВыборкаХарактеристики.Выбрать();
		
		Пока ВыборкаСвойства.Следующий() Цикл
			
			Если ЗначениеЗаполнено(ВыборкаСвойства.Свойство) Тогда
				СтрСвойство = СтрХарактеристика.Строки.Добавить();
				СтрСвойство.Характеристика = Строка(ВыборкаСвойства.Свойство) + ": " + Строка(ВыборкаСвойства.Значение);
				СтрСвойство.Свойство = ВыборкаСвойства.Свойство;
				СтрСвойство.Значение = ВыборкаСвойства.Значение;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Развернуть строки дерева
	Для Каждого Характеристика Из мРазвернутыеХарактеристики Цикл
		
		СтрХарактеристика = Характеристики.Строки.Найти(Характеристика.Значение, "ХарактеристикаСсылка", Ложь);
		
		Если СтрХарактеристика <> Неопределено Тогда
			ЭлементыФормы.Характеристики.Развернуть(СтрХарактеристика, Истина);
		КонецЕсли;
		
	КонецЦикла;
	
	// Установить текущую строку дерева
	Если НЕ ЗначениеЗаполнено(ВыделеннаяХарактеристика) Тогда
		Если ЗначениеЗаполнено(мТекущаяХарактеристика) Тогда
			ВыделеннаяХарактеристика = мТекущаяХарактеристика;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыделеннаяХарактеристика) Тогда
		
		СтрХарактеристика = Характеристики.Строки.Найти(ВыделеннаяХарактеристика, "ХарактеристикаСсылка", Ложь);
		
		Если СтрХарактеристика <> Неопределено Тогда
			ЭлементыФормы.Характеристики.ТекущаяСтрока = СтрХарактеристика;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОтобратьХарактеристики()

// Вводит новую характеристику в соответствии с установленными значениями свойств.
//
// Параметры:
//  Нет.
//
Процедура ВвестиНовуюХарактеристику()
	
	// Создать Объект. Установить значение реквизитам.
	СправочникОбъектХарактеристика = Справочники.ХарактеристикиНоменклатуры.СоздатьЭлемент();
	
	СправочникОбъектХарактеристика.Владелец     = ПараметрВыборПоВладельцу;
	СправочникОбъектХарактеристика.Наименование = СправочникОбъектХарактеристика.СформироватьНаименование(ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения);
	
	// Открыть форму объекта
	ФормаХарактеристики = СправочникОбъектХарактеристика.ПолучитьФорму("ФормаЭлемента", ЭлементыФормы.Характеристики);
	ФормаХарактеристики.Открыть();
	
	// Установить значения свойств новой характеристики
	Для Каждого Строка Из ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения Цикл
		
		Если ЗначениеЗаполнено(Строка.Значение) Тогда
			
			СтрокаЗначенияСвойств = ФормаХарактеристики.ОбработкаОбъектЗначенияСвойств.СвойстваИЗначения.Найти(Строка.Свойство, "Свойство");
			
			Если СтрокаЗначенияСвойств <> Неопределено Тогда
				СтрокаЗначенияСвойств.Значение = Строка.Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ВвестиНовуюХарактеристику()


мРазвернутыеХарактеристики = Новый СписокЗначений;