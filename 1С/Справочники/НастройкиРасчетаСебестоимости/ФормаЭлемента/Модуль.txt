Перем НужноУдалитьРегламентноеЗадание Экспорт; // Ответ пользователя на вопрос о необходимости удалять регл. задание (булево или неопределено)
Перем Расписание Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает подпись к полю Задержка с учетом формы множественного числа
Процедура НастроитьНадписьЗадержка()
	
	Если РасчитыватьСебестоимостьЗаПредыдущийПериод Тогда
	
		ПояснениеЗадержка = "";
		
	Иначе
		
		ПояснениеЗадержка = "Расчет будет проводиться за текущий месяц";
		
	КонецЕсли;
	
	
	Дней = ОбщегоНазначения.ФормаМножественногоЧисла("месяц","месяца","месяцев", Задержка);
	
	ЭлементыФормы.НадписьЗадержка.Заголовок = Дней + " назад";
	
КонецПроцедуры


// Устанавливает доступность элементов формы
//
Процедура УправлениеДоступностью()
	
	Если ТолькоПросмотр Тогда
		// Доступность регулируется настройками в диалоге
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ПредставлениеРасписания.Доступность = ФормироватьДокументыАвтоматически;
	ЭлементыФормы.РасчитыватьСебестоимостьЗаПредыдущийПериод.Доступность = ФормироватьДокументыАвтоматически;
	ЭлементыФормы.Задержка.Доступность = ФормироватьДокументыАвтоматически И РасчитыватьСебестоимостьЗаПредыдущийПериод;
	ЭлементыФормы.НадписьЗадержка.Доступность = ФормироватьДокументыАвтоматически И РасчитыватьСебестоимостьЗаПредыдущийПериод;	
	ЭлементыФормы.Организация.Доступность = (ВидОтраженияВУчете <> Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
КонецПроцедуры

Процедура ЗаполнитьВыполняемыеДействия()

	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете ТОгда
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВНалоговомУчете = Ложь;
	Иначе
		ОтражатьВУправленческомУчете = Ложь;
		ОтражатьВНалоговомУчете = Истина;
	КонецЕсли;	
	
	МассивДействий = ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьМассивВыполняемыхДействий(ТекущаяДата(), Организация, ОтражатьВУправленческомУчете, ОтражатьВНалоговомУчете, Истина);
	
	ВыполняемыеДействия.Очистить();
	Для Каждого ТекущееДействие Из МассивДействий Цикл
		НоваяСтрока = ВыполняемыеДействия.Добавить();
		НоваяСтрока.ВыполняемоеДействие = ТекущееДействие;
	КонецЦикла;
	
КонецПроцедуры	

Процедура КоманднаяПанельСпискаВыполняемыхДействийЗаполнитьВыполняемыеДействия(Кнопка)
	Если ВыполняемыеДействия.Количество() > 0 Тогда
	 
		Ответ = Вопрос("В документе уже присутствуют строки." + Символы.ПС
					 + "При заполнении они будут удалены!" + Символы.ПС
					 + "Продолжить?", РежимДиалогаВопрос.ДаНет,,
					 КодВозвратаДиалога.Нет);
					 
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ВыполняемыеДействия.Очистить();
	КонецЕсли;
	
	ЗаполнитьВыполняемыеДействия();
	
КонецПроцедуры

Процедура ФормироватьДокументыАвтоматическиПриИзменении(Элемент)
	
	НужноУдалитьРегламентноеЗадание = РегламентныеПроцедуры.ПриИзмененииФлагаФормироватьДокументыАвтоматически(ЭтаФорма);
	УправлениеДоступностью();
	
КонецПроцедуры

Процедура ПредставлениеРасписанияНажатие(Элемент)
	РегламентныеПроцедуры.РедактироватьРасписаниеРегламентногоЗадания(ЭтаФорма);
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		Если НЕ ЗначениеЗаполнено(ВидОтраженияВУчете) Тогда
			ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Расписание = РегламентныеПроцедуры.ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗадание);
	РасчитыватьСебестоимостьЗаПредыдущийПериод = (Задержка <> 0);
	РегламентныеПроцедуры.НастроитьПредставлениеРасписания(ЭтаФорма);
    УправлениеДоступностью();
    НастроитьНадписьЗадержка();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	ЗаголовокСообщения 	= ЗаголовокПриЗаписи();
	
	Если НужноУдалитьРегламентноеЗадание = Истина Тогда
		РегламентныеПроцедуры.УдалитьРегламентноеЗаданиеПриЗаписиНастройки(ЭтотОбъект,ЗаголовокСообщения,Отказ);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Обрабатываем расписание регл. задания
	Если НЕ ФормироватьДокументыАвтоматически Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаголовокСообщения 	= ЗаголовокПриЗаписи();
	
	РегламентныеПроцедуры.ИзменитьРегламентноеЗаданиеПриЗаписиНастройки(ЭтотОбъект,Расписание,ЗаголовокСообщения,Отказ);
	
КонецПроцедуры


Процедура РасчитыватьСебестоимостьЗаПредыдущийПериодПриИзменении(Элемент)
	Если НЕ РасчитыватьСебестоимостьЗаПредыдущийПериод Тогда
		Задержка = 0;
	Иначе
		Задержка = 1;
	КонецЕсли;
	
	УправлениеДоступностью();
	НастроитьНадписьЗадержка();
КонецПроцедуры


Процедура ЗадержкаПриИзменении(Элемент)
	НастроитьНадписьЗадержка();
КонецПроцедуры


Процедура ПереключательУпрПриИзменении(Элемент)
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		Организация = "";
	КонецЕсли;
	УправлениеДоступностью();
КонецПроцедуры


Процедура ВыполняемыеДействияВыполняемоеДействиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьМассивВыполняемыхДействий(ТекущаяДата(), Организация, (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете), (ВидОтраженияВУчете <> Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете)));	
КонецПроцедуры


Процедура ВыполняемыеДействияВыполняемоеДействиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьМассивВыполняемыхДействий(ТекущаяДата(), Организация, (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете), (ВидОтраженияВУчете <> Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете)));	
	СтандартнаяОбработка = Ложь;
	РезультатВыбора = ЭтаФорма.ВыбратьИзСписка(Элемент.СписокВыбора,Элемент, Элемент.СписокВыбора.НайтиПоЗначению(ЭлементыФормы.ВыполняемыеДействия.ТекущиеДанные.ВыполняемоеДействие)); 
	Если РезультатВыбора <> Неопределено Тогда
		ЭлементыФормы.ВыполняемыеДействия.ТекущиеДанные.ВыполняемоеДействие = РезультатВыбора.Значение;
	КонецЕсли;	
КонецПроцедуры