Перем СписокПоиска;

Перем ОграничитьОбъектыПоиска;
Перем СписокМетаданных;
Перем ПрименитьНечеткийПоиск;
Перем Нечеткость;
Перем РазмерПорции;
Перем ПоказыватьОписания;

Функция ПроверитьДоступностьПоиска()
	
	Если ПолнотекстовыйПоиск.ПолучитьРежимПолнотекстовогоПоиска() = РежимПолнотекстовогоПоиска.Разрешить Тогда
		// поиск разрешен
		Возврат Истина;
	КонецЕсли;
	
	СтрОшибки = "В текущей информационной базе отключена возможность полнотекстового поиска." + Символы.ПС;
	
	// Проверим, есть ли права на включение поиска
	Если Не ПравоДоступа("Администрирование", Метаданные) Тогда
		Предупреждение(СтрОшибки + "Для включения поиска обратитесь к администратору.");
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим, работают ли другие пользователи в базе
	МассивСоединений = ПолучитьСоединенияИнформационнойБазы();
	ВсегоСоединений  = ?(МассивСоединений = Неопределено, 0, МассивСоединений.Количество());
	Если  ВсегоСоединений <> 1 Тогда
		// работают другие пользователи
		
		Сообщение = СтрОшибки + "Для включения полнотекстового поиска попросите пользователей выйти из программы и повторно запустите поиск.
		|
		|Текущие соединения:
		|";
		
		Для каждого Соединение Из МассивСоединений Цикл
			Если Не Соединение.НомерСоединения = НомерСоединенияИнформационнойБазы() Тогда
				Сообщение = Сообщение + Символы.ПС + " - " + Соединение;
			КонецЕсли;
		КонецЦикла; 
		
		Предупреждение(Сообщение);
		Возврат Ложь;
	КонецЕсли;
	
	// Спросим, нужно ли включать поиск
	СтрВопроса = СтрОшибки + "Включить полнотекстовый поиск?";
	Если Вопрос(СтрВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет  Тогда
		Возврат Ложь;
	КонецЕсли;
		
	// Пробуем включить полнотекстовый поиск
	МасОшибок = Новый Массив;
	Попытка
		ПолнотекстовыйПоиск.УстановитьРежимПолнотекстовогоПоиска(РежимПолнотекстовогоПоиска.Разрешить);
	Исключение
		Предупреждение("Ошибка при включении полнотекстового поиска:
		|" + ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;	
	
	// Если были ошибки, то выведем предупреждения
	Для Каждого Ошибка Из МасОшибок Цикл
		Предупреждение(Ошибка);
	КонецЦикла;
	
	Если МасОшибок.Количество() <> 0 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// Проверим, нужно ли индексировать
	Если Не ПолнотекстовыйПоиск.ИндексАктуален() Тогда
		СтрВопроса = "Индекс не актуален. Обновление индекса может занять длительное время.
		|Индекс можно обновить позднее в форме поиска данных.
		|Обновить индекс прямо сейчас?";
		Если Вопрос(СтрВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Попытка
				ПолнотекстовыйПоиск.ОбновитьИндекс(Истина, Ложь);
			Исключение
				Предупреждение("Ошибка при обновлении индекса:
				|" + ОписаниеОшибки());
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

Процедура ЗаполнениеДанныхПоУмолчанию()
	
	ОграничитьОбъектыПоиска = Истина;

	СписокМетаданных = Новый СписокЗначений;	
	СписокМетаданных.Добавить(Метаданные.Справочники.КодыОКПД);
	
	ПрименитьНечеткийПоиск = Ложь;
	
	Нечеткость = 0;
	
	РазмерПорции = 20;
	
	ПоказыватьОписания = Истина;
	
КонецПроцедуры

Процедура НачатьПоиск()

	Если ПолеВводаПоиска = "" Тогда 
		Возврат;
	КонецЕсли;
	
	Если ОграничитьОбъектыПоиска = Истина Тогда
		
		МассивМД = Новый Массив();
		Для Каждого МД Из СписокМетаданных Цикл
			МассивМД.Добавить(МД.Значение);
		КонецЦикла;	
		
		СписокПоиска.ОбластьПоиска = МассивМД;
		
	Иначе	
		
		МассивМД = Новый Массив();
		СписокПоиска.ОбластьПоиска = МассивМД;
		
	КонецЕсли;
	
	Если ПрименитьНечеткийПоиск = Истина Тогда
		СписокПоиска.ПорогНечеткости = Нечеткость;
	Иначе	
		СписокПоиска.ПорогНечеткости = 0;
	КонецЕсли;
	
	СписокПоиска.СтрокаПоиска = ПолеВводаПоиска;
	СписокПоиска.РазмерПорции = РазмерПорции;
	СписокПоиска.ПерваяЧасть();
	Колво = СписокПоиска.ПолноеКоличество();
	
	Если (Колво = 0) И (НЕ ПустаяСтрока(ПолеВводаПоиска)) Тогда
		
		ПолеВводаПоиска = СтрЗаменить(ПолеВводаПоиска, "&", "|");
		СписокПоиска.СтрокаПоиска = ПолеВводаПоиска;
		СписокПоиска.РазмерПорции = РазмерПорции;
		СписокПоиска.ПерваяЧасть();
		Колво = СписокПоиска.ПолноеКоличество();
		
	КонецЕсли; 
	
	ЗаполнитьСписокНайденных();
	
КонецПроцедуры

Процедура Поиск()
	
	Если ПравоДоступа("Администрирование", Метаданные) Тогда
		
		Если ПолнотекстовыйПоиск.ДатаАктуальности() = '00010101' Тогда
			ТекстВопроса = "Для поиска требуется выполнить индексирование справочника ОКПД." + Символы.ПС
			+ "Обновление индекса может занять продолжительное время." + Символы.ПС + Символы.ПС
			+ "Выполнить сейчас?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Внимание");
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ПолнотекстовыйПоиск.ОбновитьИндекс(Истина,Ложь);
				Предупреждение("Обновление индекса завершено!");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		ЭлементыФормы.НадписьИнформация.Видимость = Истина;
		ЭлементыФормы.НадписьИнформация.Заголовок = "Для использования полнотекстового поиска необходимо наличие у "
		+ "текущего пользователя права ""Администрирование"". Обратитесь к администратору для назначения этого права.";
		
	КонецЕсли;
	
	ЗаполнениеДанныхПоУмолчанию();
	
	НачатьПоиск();
	
КонецПроцедуры

Процедура ПолучитьТекстДатыИндекса()
	
	ЭлементыФормы.НадписьДатаАктуальностиИндекса.Заголовок = "Дата актуальности индекса " + ПолнотекстовыйПоиск.ДатаАктуальности() + Символы.ПС + ?(ПолнотекстовыйПоиск.ИндексАктуален(), "Индекс актуален", "Индекс не актуален");
	
Конецпроцедуры

Процедура ЗаполнитьСписокНайденных()
	
	Если СписокПоиска.ПолноеКоличество() = 0 Тогда
		
		ЭлементыФормы.Найдено.Значение = "Не найдено";
		ЭлементыФормы.КнопкаВперед.Видимость = Ложь;
		ЭлементыФормы.КнопкаНазад.Видимость = Ложь;
		ЭлементыФормы.HTMLОтображение.УстановитьТекст("");
		
		Если СписокПоиска.СлишкомМногоРезультатов() Тогда
			Предупреждение("Слишком много результатов, уточните запрос.");
		КонецЕсли;
	
		Возврат;
		
	КонецЕсли;
	
	Если ЭлементыФормы.ПолеВводаПоиска.СписокВыбора.НайтиПоЗначению(СписокПоиска.СтрокаПоиска) = Неопределено Тогда
		ЭлементыФормы.ПолеВводаПоиска.СписокВыбора.Вставить(0, СписокПоиска.СтрокаПоиска);
		СохранитьЗначение("Строки для полнотекстового поиска", ЭлементыФормы.ПолеВводаПоиска.СписокВыбора.ВыгрузитьЗначения());
	КонецЕсли;

	ЭлементыФормы.КнопкаВперед.Видимость = Истина;
	ЭлементыФормы.КнопкаНазад.Видимость = Истина;
		
	ЭлементыФормы.Найдено.Значение = 
		"Показаны " + 
		Строка(СписокПоиска.НачальнаяПозиция() + 1) + " - " +  
		Строка(СписокПоиска.НачальнаяПозиция() + СписокПоиска.Количество()) + 
		" из " + СписокПоиска.ПолноеКоличество();
		
	СтрHTML = СписокПоиска.ПолучитьОтображение(ВидОтображенияПолнотекстовогоПоиска.HTMLТекст);
	СтрHTML = СтрЗаменить(СтрHTML, "<td>", "<td><font face=""MS Sans Serif"" size=""1"">");
	СтрHTML = СтрЗаменить(СтрHTML, "<td valign=top width=1>", "<td valign=top width=1><font face=""MS Sans Serif"" size=""1"">");
	СтрHTML = СтрЗаменить(СтрHTML, "<body>", "<body><body topmargin=0 leftmargin=0>");
	СтрHTML = СтрЗаменить(СтрHTML, "</td>", "</font></td>");
	СтрHTML = СтрЗаменить(СтрHTML, "<b>", "");
	СтрHTML = СтрЗаменить(СтрHTML, "</b>", "");
	СтрHTML = СтрЗаменить(СтрHTML, "FFFF00", "FFFFC8");  
	
	ЭлементыФормы.HTMLОтображение.УстановитьТекст(СтрHTML);
	
	ДоступностьКнопок();	
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если Не ПроверитьДоступностьПоиска() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СписокПоиска = ПолнотекстовыйПоиск.СоздатьСписок("", 20);
	СписокПоиска.ПолучатьОписание = Истина;
	
КонецПроцедуры

Процедура ПриОткрытии()
	Попытка
		ПолеВводаПоиска = ЭтаФорма.ВладелецФормы.ТекущаяСтрокаПоиска;
	Исключение
		ПолеВводаПоиска = "";
	КонецПопытки;
	
	Массив = ВосстановитьЗначение("Строки для полнотекстового поиска");
	Если Массив <> Неопределено Тогда
		ЭлементыФормы.ПолеВводаПоиска.СписокВыбора.ЗагрузитьЗначения(Массив);
	КонецЕсли;	
	
	РазмерПорции = 20;
	Нечеткость = 25;
	ПоказыватьОписания = Истина;
	
	Если НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		ЭлементыФормы.ПанельОбновленияИндекса.Свертка = РежимСверткиЭлементаУправления.Низ;
	КонецЕсли;
	
	ЭлементыФормы.КнопкаВперед.Видимость = Ложь;
	ЭлементыФормы.КнопкаНазад.Видимость = Ложь;

	Поиск();
	
	ПолучитьТекстДатыИндекса();
	
КонецПроцедуры

Процедура ПриПовторномОткрытии(СтандартнаяОбработка)
	
	ТекущийЭлемент = ЭлементыФормы.ПолеВводаПоиска;
	
КонецПроцедуры

Процедура ДоступностьКнопок()
	
	Если (СписокПоиска.ПолноеКоличество() - СписокПоиска.НачальнаяПозиция()) > СписокПоиска.Количество() ИЛИ (СписокПоиска.НачальнаяПозиция() > 0) Тогда
		Видимость = Истина;
	Иначе	
		Видимость = Ложь;
	КонецЕсли;	
		
	ЭлементыФормы.КнопкаВперед.Видимость = Видимость;
	ЭлементыФормы.КнопкаНазад.Видимость = Видимость;

	ЭлементыФормы.КнопкаВперед.Доступность = (СписокПоиска.ПолноеКоличество() - СписокПоиска.НачальнаяПозиция()) > СписокПоиска.Количество();
	ЭлементыФормы.КнопкаНазад.Доступность = (СписокПоиска.НачальнаяПозиция() > 0);
	
КонецПроцедуры

Процедура КнопкаВпередНажатие(Элемент)
	
	СписокПоиска.СледующаяЧасть();
	ЗаполнитьСписокНайденных();
	
КонецПроцедуры

Процедура КнопкаНазадНажатие(Элемент)
	
	СписокПоиска.ПредыдущаяЧасть();
	ЗаполнитьСписокНайденных();
	
КонецПроцедуры

Процедура HTMLОтображениеonclick(Элемент, pEvtObj)
	
	htmlElement = pEvtObj.srcElement;
	
	Если (htmlElement.id = "FullTextSearchListItem") Тогда
		номерВСписке = Число(htmlElement.nameProp);
		
		ВыбраннаяСтрока = списокПоиска[номерВСписке];
		//ОткрытьЗначение(ВыбраннаяСтрока.Значение);
		ЭлементыФормы.СправочникДерево.ТекущаяСтрока = ВыбраннаяСтрока.Значение;
		//СправочникСписок.Колонки.Найт.Найти("01");
		
		pEvtObj.returnValue = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПоиск(Кнопка)
	
	ЗаполнениеДанныхПоУмолчанию();
	НачатьПоиск();
	
КонецПроцедуры

Процедура ОбновитьИндексНажатие(Элемент)
	
	ПолнотекстовыйПоиск.ОбновитьИндекс(Истина,Ложь);
	ПолучитьТекстДатыИндекса();
	
КонецПроцедуры

Процедура СправочникДеревоВыборЗначения(Элемент, СтандартнаяОбработка, Значение)
	
	СообщениеОбОшибке = ПроверитьОКПД(Значение);
	
	Если СообщениеОбОшибке <> "" Тогда
		Сообщить(СообщениеОбОшибке, СтатусСообщения.Внимание);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;

КонецПроцедуры

// Функция проверяет элемент ОКПД на возможность сопоставления элементу спр. "Номенклатура"
// Параметры:
//   ОКПД - элемент-ссылка справочника ОКПД
//
// Возвращаемое значение:
//   Если ОКПД подходит - возвращает пустую строку
//   Иначе возвращает текст ошибки
Функция ПроверитьОКПД(ОКПД)
	
	Ошибка = "";
	
	Если ОКПД = Справочники.КодыОКПД.ПустаяСсылка() Тогда
		Возврат "";
	КонецЕсли;
	
	КодОКПД = СокрП(ОКПД.Код);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ОКПД.Ссылка КАК Ссылка
	                      |ИЗ
	                      |	Справочник.КодыОКПД КАК ОКПД
	                      |ГДЕ
	                      |	ОКПД.Родитель = &ОКПДРодитель");
	Запрос.УстановитьПараметр("ОКПДРодитель", ОКПД);
	ВыборкаПотомков = Запрос.Выполнить().Выбрать();
	
	ЯвляетсяРодителем = ВыборкаПотомков.Количество() > 0;
	
	Если ЯвляетсяРодителем Тогда
		Ошибка = "Код ОКПД " + КодОКПД + " не является конечным. Пожалуйста выберите конечный элемент ОКПД";
	КонецЕсли;
	
	Возврат Ошибка;
	
КонецФункции