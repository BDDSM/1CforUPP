Перем КоличествоЭлементовВВыборке;
Перем КоличествоСтрок;
Перем ШагИндикатора;
Перем НомерСтроки;
Перем CSVМассив;
Перем Элемент;

Перем ЗагружаемыйФайл;

Процедура ПриОткрытии()
	
	Если ПутьКЗагружаемомуФайлу = Неопределено ИЛИ ПутьКЗагружаемомуФайлу = "" Тогда
		
		ПутьКЗагружаемомуФайлу = ВосстановитьЗначение("ПутьКФайлуФормыВыбора");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если НачальноеЗначениеВыбора = "ЗагрузитьИзМакета" Тогда
		
		ПутьКЗагружаемомуФайлу = ПолучитьПутьКФайлуИзМакетаКонфигурации();
		
		Если ПутьКЗагружаемомуФайлу = Неопределено Тогда
			
			Отказ = Истина;
			
			Предупреждение("Справочник ОКПД не загружен!");
			
		Иначе	
			
			ЭлементыФормы.ТекстПутьКФайлу.Доступность = Ложь;
			ЭлементыФормы.ПутьКФайлу.Доступность = Ложь;
			СтрокаИнфо = "Нажмите кнопку ""Выполнить"" для загрузки...";
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПутьКФайлуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	Диалог.Заголовок = "Выберите путь к загружаемому файлу";
	Диалог.Фильтр  = "txt файл (*.txt)|*.txt|Все файлы (*.*)|*.*";
	Диалог.ПолноеИмяФайла = ПутьКЗагружаемомуФайлу;
	
	Если Диалог.Выбрать() Тогда
		
		ПутьКЗагружаемомуФайлу = Диалог.ПолноеИмяФайла;
		Если ПутьКЗагружаемомуФайлу<>Неопределено Тогда
			СохранитьЗначение("ПутьКФайлуФормыВыбора",ПутьКЗагружаемомуФайлу);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаВыполнитьНажатие(Элемент = Неопределено)
	
	ФайлОтчета = Новый Файл(ПутьКЗагружаемомуФайлу);
	Если ФайлОтчета.Существует() <> Истина Тогда
		Предупреждение("Неверно указан путь к файлу! Файл не существует!");
		Возврат;
	КонецЕсли;
	
	КоличествоЭлементовВВыборке = 0;

	Если НЕ НачальноеЗначениеВыбора = "ЗагрузитьИзМакета" Тогда
		
		Если ФайлОтчета.ЭтоКаталог( ) Тогда
			Предупреждение("Неверно указан путь к файлу! Нужно указать реальный файл!");
			Возврат;
		КонецЕсли; 
		
		СохранитьЗначение("ПутьКФайлуФормыВыбора",ПутьКЗагружаемомуФайлу);
		
		Выборка = Справочники.КодыОКПД.Выбрать();
		Пока Выборка.Следующий() Цикл
			КоличествоЭлементовВВыборке = КоличествоЭлементовВВыборке + 1;
		КонецЦикла;
		
		Если КоличествоЭлементовВВыборке > 0 Тогда
			Если Вопрос("Очистить справочник кодов ОКПД перед загрузкой из файла?", РежимДиалогаВопрос.ДаНет, 30) = КодВозвратаДиалога.Да Тогда
				ОчиститьСправочникОКПД();
			КонецЕсли; 
		КонецЕсли; 
		
	КонецЕсли; 
	
	ФлагОК = Истина;
	
	ЗагружаемыйФайл = Новый ТекстовыйДокумент();
	ЗагружаемыйФайл.Прочитать(ПутьКЗагружаемомуФайлу, КодировкаТекста.ANSI);
	КоличествоСтрок = ЗагружаемыйФайл.КоличествоСтрок( );
	
	ЭлементыФормы.ИндикаторЗагрузки.Видимость = Истина;
	ЭлементыФормы.ИндикаторЗагрузки.МинимальноеЗначение = 0;
	ЭлементыФормы.ИндикаторЗагрузки.МаксимальноеЗначение = КоличествоСтрок;
	СтрокаИнфо = "";
	
	CSVМассив = Новый Массив(20);
	
	ДлинаПредыдущегоОКПД = 2;
	НомерСтроки = 0;
	ШагИндикатора = Цел(КоличествоСтрок / 100);
	
	НачатьТранзакцию();
	
	ИндикаторЗагрузки = 0;
	ОбработкаСтроки();
	ИндикаторЗагрузки = КоличествоСтрок;
	
	ЗафиксироватьТранзакцию();
	
	СтрокаИнфо = "";
	
	Если ФлагОК Тогда
		
		Предупреждение( "Справочник ОКПД успешно загружен." );
		Закрыть( );
		
	КонецЕсли; 
	
КонецПроцедуры

// Возвращает путь к текстовому файлу классификатора ОКПД
Функция ПолучитьПутьКФайлуИзМакетаКонфигурации()
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ИмяМакета = "АрхивСправочникаОКПДДляЗагрузки";
	
	Попытка
		МакетАрхива = Справочники.КодыОКПД.ПолучитьМакет(ИмяМакета);
	Исключение
		СтрокаСообщения = НСтр("ru = 'Ошибка получения макета конфигурации " + ИмяМакета + "'!");
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	МакетАрхива.Записать(ИмяВременногоФайла);
	
	ИмяВременногоФайлаЭлементаАрхива = ПолучитьИмяВременногоФайла("txt");
	
	Попытка
		Архив = Новый ЧтениеZipФайла(ИмяВременногоФайла);
		ЭлементАрхива = Архив.Элементы[0];
		ИмяФайлаИзАрхива = КаталогВременныхФайлов() + СокрЛП(ЭлементАрхива.Имя);
		Архив.Извлечь(ЭлементАрхива, КаталогВременныхФайлов(), РежимВосстановленияПутейФайловZIP.НеВосстанавливать);
		Архив.Закрыть();
		ПереместитьФайл(ИмяФайлаИзАрхива, ИмяВременногоФайлаЭлементаАрхива);
	Исключение
		УдалитьВременныйФайл(ИмяВременногоФайлаЭлементаАрхива);
		СтрокаСообщения = НСтр("ru = 'Ошибка чтения ZIP архива!'");
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецПопытки;
	
	УдалитьВременныйФайл(ИмяВременногоФайла);
	
	ФайлЗагрузки = Новый Файл(ИмяВременногоФайлаЭлементаАрхива);
	Если ФайлЗагрузки.Существует() <> Истина Тогда
		УдалитьВременныйФайл(ИмяВременногоФайлаЭлементаАрхива);
		СтрокаСообщения = НСтр("ru = 'Файл для загрузки не существует!'");
		Сообщить(СтрокаСообщения, СтатусСообщения.Важное);
		Возврат Неопределено;
	КонецЕсли;

	Возврат ИмяВременногоФайлаЭлементаАрхива;
	
КонецФункции

Процедура УдалитьВременныйФайл(ИмяФайла)
	
	Попытка
		УдалитьФайлы(ИмяФайла);
	Исключение
	КонецПопытки;
	
КонецПроцедуры

// Проверка количества кавычек в строке перед разделителем (считается последним знаком)
Функция ПроверкаКоличестваКавычек(Стр)
	
	Длина = СтрДлина(Стр);
	Символов = 0;
	
	Пока КодСимвола(Стр, Длина - Символов) = 34 Цикл
		Символов = Символов + 1;
	КонецЦикла;
	
	Возврат Символов;
	
КонецФункции

// CSV строка разбирается и значения раскладываются
// в элементы массива, пустые элементы CSV строки
// имеют значение Неопределено
// Возвращает количество значений в строке
Функция РазборCSVСтрокиВМассив(Знач CSVСтрока, CSVМассив, Разделитель = "	") Экспорт
	
	НачалоСтроки = "";
	// инициализировать массив
	ДлинаМассива = CSVМассив.Количество() - 1;
	Для Инд = 0 По ДлинаМассива Цикл
		CSVМассив[Инд] = Неопределено;
	КонецЦикла;
	
	ПоложениеРазделителя = Найти(CSVСтрока, Разделитель);
	ТекущийЭлементМассива = 0;
	
	Пока ПоложениеРазделителя Цикл
		Если ПоложениеРазделителя = 0 Тогда
			// Текущий Элемент Пустой
			CSVМассив[ТекущийЭлементМассива] = Неопределено;
			ТекущийЭлементМассива = ТекущийЭлементМассива + 1;
		Иначе
			ВременнаяСтрока = Лев(CSVСтрока, ПоложениеРазделителя - 1);
			// Условие что строка без " и без ;
			Если КодСимвола(CSVСтрока,1) <> 34 И НачалоСтроки = "" Тогда
				CSVМассив[ТекущийЭлементМассива] = ВременнаяСтрока;
				ТекущийЭлементМассива = ТекущийЭлементМассива + 1;
			Иначе
				КолвоКавычек = ПроверкаКоличестваКавычек(ВременнаяСтрока);
				Если КолвоКавычек % 2 = 0 Тогда
					НачалоСтроки = НачалоСтроки + ВременнаяСтрока;
				Иначе
					Если НачалоСтроки = "" тогда
						ВременнаяСтрока = ВременнаяСтрока;
					Иначе
						ВременнаяСтрока = НачалоСтроки + Разделитель + ВременнаяСтрока;
					КонецЕсли;
					CSVМассив[ТекущийЭлементМассива] = ВременнаяСтрока;
					ТекущийЭлементМассива = ТекущийЭлементМассива + 1;
					НачалоСтроки = "";
				КонецЕсли;
			КонецЕсли;
			CSVСтрока = Сред(CSVСтрока, ПоложениеРазделителя + 1);
		КонецЕсли;
		
		ПоложениеРазделителя = Найти(CSVСтрока, Разделитель);
	КонецЦикла;
	
	// обработка последнего элемента
	ВременнаяСтрока = СокрЛП(CSVСтрока);
	Если СтрДлина(ВременнаяСтрока) > 0 Тогда
		CSVМассив[ТекущийЭлементМассива] = ВременнаяСтрока;
	КонецЕсли;	
	
	// Убрать Кавычки (если есть)
	Для Инд = 0 По ТекущийЭлементМассива Цикл
		
		Строчка = CSVМассив[Инд];
		ДлинаСтрочки = СтрДлина(Строчка); 
		Если Лев(Строчка, 1) = """" Тогда
			ДлинаСтрочки = ДлинаСтрочки - 1;
			Строчка = Прав(Строчка, ДлинаСтрочки);
		КонецЕсли;
		Если Прав(Строчка, 1) = """" Тогда
			ДлинаСтрочки = ДлинаСтрочки - 1;
			Строчка = Лев(Строчка, ДлинаСтрочки);
		КонецЕсли;
		Строчка = СокрЛП(Строчка);
		
		Строчка = СтрЗаменить(Строчка, """""", """"); 
		
		CSVМассив[Инд] = Строчка;
		
	КонецЦикла;
	
	Возврат ТекущийЭлементМассива + 1;
	
КонецФункции

Функция ОбработкаСтроки(ЭлементРодитель = NULL, НовыйЭлемент = Истина)
	
	ОбработкаПрерыванияПользователя();
	
	Если НовыйЭлемент Тогда
		
		НомерСтроки = НомерСтроки + 1;
		
		Если НомерСтроки > КоличествоСтрок Тогда
			Возврат NULL;
		КонецЕсли;
		
		Если НомерСтроки % ШагИндикатора = 0 Тогда
			
			ЗафиксироватьТранзакцию();
			
			ИндикаторЗагрузки = НомерСтроки;
			СтрокаИнфо = "Загружено элементов справочника: " + НомерСтроки + "  из " + КоличествоСтрок;
			
			НачатьТранзакцию();
			
		КонецЕсли;
		
		РазборCSVСтрокиВМассив(ЗагружаемыйФайл.ПолучитьСтроку(НомерСтроки), CSVМассив);
		
		Если КоличествоЭлементовВВыборке > 0 Тогда
			ЭлементСсылка = Справочники.КодыОКПД.НайтиПоКоду(CSVМассив[0]);
			Если (ЭлементСсылка = Справочники.КодыОКПД.ПустаяСсылка()) ИЛИ (ЭлементСсылка = Неопределено) Тогда
				Элемент = Справочники.КодыОКПД.СоздатьЭлемент();
			Иначе
				Элемент = ЭлементСсылка.ПолучитьОбъект();
			КонецЕсли;
		Иначе
			Элемент = Справочники.КодыОКПД.СоздатьЭлемент();
		КонецЕсли;
	
		Элемент.Код = CSVМассив[0];
		Элемент.Имя = CSVМассив[1];
		
	КонецЕсли;
	
	Если ЭлементРодитель = NULL Тогда
		
		ДлинаРодителя = 0;
		
	Иначе
		
		ДлинаРодителя = СтрДлина(СокрП(ЭлементРодитель.Код));
		
	КонецЕсли;
	
	Если СтрДлина(СокрП(Элемент.Код)) = ДлинаРодителя Тогда
		
		ОбработкаПараметровСтроки(Элемент, ЭлементРодитель.Родитель);
		ОбработкаСтроки(Элемент.Ссылка);
		
	Иначе
		Если СтрДлина(СокрП(Элемент.Код)) > ДлинаРодителя Тогда
			
			ОбработкаПараметровСтроки(Элемент, ЭлементРодитель);
			ОбработкаСтроки(Элемент.Ссылка);
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтрДлина(СокрП(Элемент.Код)) < ДлинаРодителя Тогда
		Возврат NULL;
	КонецЕсли;
	
	Если НомерСтроки > КоличествоСтрок Тогда
		Возврат NULL;
	КонецЕсли;
	
	ОбработкаСтроки(ЭлементРодитель, Ложь);
	
КонецФункции

Функция ОбработкаПараметровСтроки(Элемент, Родитель)
	
	Если Родитель <> NULL Тогда
		Элемент.Родитель = Родитель;
	КонецЕсли;
	
	Элемент.ОбменДанными.Загрузка = Истина;

	Элемент.Записать();
	
	Возврат Элемент;
	
КонецФункции

Процедура ОчиститьСправочникОКПД()
	
	ЭлементыФормы.ИндикаторЗагрузки.Видимость = Истина;
	ЭлементыФормы.ИндикаторЗагрузки.МинимальноеЗначение = 0;
	ЭлементыФормы.ИндикаторЗагрузки.МаксимальноеЗначение = КоличествоЭлементовВВыборке;
	
	ШагИнд = Цел(КоличествоЭлементовВВыборке / 100);

	НомерЭлемента = 0;
	
	Пока Истина Цикл
		
		Выборка = Справочники.КодыОКПД.Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если НомерЭлемента % ШагИнд = 0 Тогда
				ИндикаторЗагрузки = НомерЭлемента;
				СтрокаИнфо = "Удаляется элемент справочника с кодом: " + СокрП(Выборка.Код);
			КонецЕсли;
			
			НомерЭлемента = НомерЭлемента + 1;
			
			Элемент = Выборка.ПолучитьОбъект();
			
			Элемент.ОбменДанными.Загрузка = Истина;
			Элемент.Удалить();
			
		Иначе
			
			Прервать;
			
		КонецЕсли;
		
		ОбработкаПрерыванияПользователя();
		
	КонецЦикла;
	
	ИндикаторЗагрузки = КоличествоЭлементовВВыборке;
	ЭлементыФормы.ИндикаторЗагрузки.Видимость = Ложь;
	
КонецПроцедуры