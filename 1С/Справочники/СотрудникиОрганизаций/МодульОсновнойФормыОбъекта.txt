////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов Экспорт;
// Хранит элемент управления подменю печати
Перем мПодменюПечати Экспорт;
// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию Экспорт;

Перем мВалютаРегламентированногоУчета Экспорт;
Перем мЭтоСотрудникКомпании; //запоминаем что сотрудник принят в компанию
Перем мСписокОбособленныхПодразделений Экспорт;
Перем мЭтоНовый Экспорт; 		//запоминаем перед записью, что элемент был новый
Перем мДатаДоговора Экспорт;	//для автонумерации трудовых договоров
Перем мСведенияОВидахРасчета Экспорт;
Перем мЕстьНачисления Экспорт;

Перем мНаборЗаписейФИО Экспорт;
Перем мНаборЗаписейГражданство Экспорт;
Перем мНаборЗаписейПринятыеПоДолгосрочнымДоговорам Экспорт;
Перем мНаборЗаписейИнвалидность Экспорт;
Перем мНаборЗаписейГражданствоПриОткрытии Экспорт;
Перем мНаборЗаписейПринятыеПоДолгосрочнымДоговорамПриОткрытии Экспорт;
Перем мНаборЗаписейИнвалидностьПриОткрытии Экспорт;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ Экспорт;
Перем мМассивЭУЕНВД;

// Переменные механизма встроенной справки
Перем ОтображатьСправкуФормы Экспорт;

Перем мОбработкаПодбораПоСтроке Экспорт;
Перем мТекстПодбораПоСтроке Экспорт;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке Экспорт;
Перем мОбработкаПодбораПоСтрокеОрганизация Экспорт;
Перем мТекстПодбораПоСтрокеОрганизация Экспорт;
Перем мПоследнееЗначениеЭлементаПодбораПоСтрокеОрганизация Экспорт;

Перем мСтруктураПараметровОтбораОсновныхВР Экспорт;

Перем мДоступнаРольРасчетчика Экспорт;
Перем мДоступнаРольКадровика Экспорт;
Перем мЕстьОграниченияПравДоступаНаУровнеЗаписей Экспорт;
Перем мДоступныРолиУпрУчета;

Перем мДлинаСуток;
Перем мДатаНачалаРеформыСоцСтрахования;

// Переменная соответствие названия действия - действию
// Для формирования динамического меню
Перем мСтруктураСоответствияДействий Экспорт;

Перем мМассивКнопокПодменю Экспорт;

Перем мДействиеОсновныеДействияФормыПечать Экспорт;
Перем мДействиеОсновныеДействияФормыУстановитьПечатьПоУмолчанию Экспорт;
Перем мДействиеОсновныеДействияФормыПечатьПоУмолчанию Экспорт;

Перем мИспользуетсяТрудРаботающихВСтудотряде Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ВВОДА НА ОСНОВАНИИ

Процедура РазблокироватьОбъекты()

	Если ЭтотОбъект.Заблокирован() Тогда
		ЭтотОбъект.Разблокировать();
	КонецЕсли;
	
	Если ФизлицоОбъект.Заблокирован() Тогда
		ФизлицоОбъект.Разблокировать();
	КонецЕсли;

КонецПроцедуры

Процедура ДействиеСоздатьДокументПоСотруднику(Кнопка)
	
	Если СотрудникиОрганизацийКлиент.ЗаписатьЭлементПередВыполнениемДействия(, ЭтаФорма) Тогда
		РазблокироватьОбъекты();
		СотрудникиОрганизацийКлиент.ОткрытьФормуНовогоДокументаНаОснованииДанныхСотрудника(Кнопка.Имя, Ссылка);
	КонецЕсли;
	
КонецПроцедуры // ДействиеСоздатьДокументПоСотруднику

Функция СформироватьСоответствиеДействий() Экспорт
	
	ДействиеСоздатьДокументПоСотруднику = Новый Действие("ДействиеСоздатьДокументПоСотруднику");
	
	СтруктураСоответствияДействий = Новый Структура;
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииДоговорНаВыполнениеРаботСФизЛицом", ДействиеСоздатьДокументПоСотруднику);
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииПриемНаРаботуВОрганизацию"        , ДействиеСоздатьДокументПоСотруднику);
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииКадровоеПеремещениеОрганизаций"   , ДействиеСоздатьДокументПоСотруднику);
	СтруктураСоответствияДействий.Вставить("ДействиеВводНаОснованииУвольнениеИзОрганизаций"          , ДействиеСоздатьДокументПоСотруднику);
	СтруктураСоответствияДействий.Вставить("ДействиеОтпуск"                                          , ДействиеСоздатьДокументПоСотруднику);
	СтруктураСоответствияДействий.Вставить("ДействиеБольничныйЛист"                                  , ДействиеСоздатьДокументПоСотруднику);
	
	СотрудникиОрганизацийПереопределяемый.ДополнитьСтруктуруСоответствияДействий(СтруктураСоответствияДействий, ДействиеСоздатьДокументПоСотруднику);
	
	Возврат СтруктураСоответствияДействий;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция возвращает список доступных видов договоров для выбора
Функция ПолучитьСписокДоступныхДоговоров()
	
	СписокЗначенийДляВыбора = Новый СписокЗначений;
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Подряда);
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.Авторский);
	
	ИспользоватьУправленческийУчетЗарплаты = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты");
	
	Если ИспользоватьУправленческийУчетЗарплаты Тогда
		СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	КонецЕсли;

    Возврат СписокЗначенийДляВыбора;
	
КонецФункции

// Процедура устанавиливает видимость панелей формы 
Процедура УстановитьВидимостьЭУ()

	ЭтоТрудовойДоговор = (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
	ЭтоДоговорГПХ = (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда) ИЛИ (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский);
	ЭтоПредварительноеСоглашение = (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "СтраницаНовыйСотрудник" Тогда
		
		//форма нового сотрудника
		ЭлементыФормы.Организация.ТолькоПросмотр  = Не (ЭтоТрудовойДоговор или ЭтоДоговорГПХ);	
		ЭлементыФормы.ВидЗанятости.ТолькоПросмотр = Не ЭтоТрудовойДоговор;
		ЭлементыФормы.ПанельДанныхНовыйСотрудник.Страницы.ТрудовойДоговор.Видимость = ЭтоТрудовойДоговор и (мДоступнаРольРасчетчика или мДоступнаРольКадровика);
		ЭлементыФормы.ПерейтиКВводуТрудовогоДоговора.Видимость = ЭтоТрудовойДоговор и (мДоступнаРольКадровика или мДоступнаРольРасчетчика);
	Иначе 
		
		ЭлементыФормы.ПанельДанныхСотрудник.Страницы.КадровыеДанные.Видимость 	   = (мДоступнаРольКадровика или мДоступнаРольРасчетчика) и ЭтоТрудовойДоговор;
		ЭлементыФормы.ПанельДанныхСотрудник.Страницы.НачисленияУдержания.Видимость = мДоступнаРольРасчетчика и ЭтоТрудовойДоговор;
		ЭлементыФормы.ПанельДанныхСотрудник.Страницы.ТрудовойДоговор.Видимость     = (мДоступнаРольКадровика или мДоступнаРольРасчетчика) и ЭтоТрудовойДоговор;
		ЭлементыФормы.ПанельДанныхСотрудник.Страницы.СписокДоговоров.Видимость 	   = (мДоступнаРольКадровика или мДоступнаРольРасчетчика) и ЭтоДоговорГПХ;
		ЭлементыФормы.ПанельДанныхСотрудник.Страницы.ОтражениеВУчете.Видимость     = мДоступнаРольРасчетчика и (ЭтоТрудовойДоговор или ЭтоДоговорГПХ);
		
		ЭлементыФормы.ПанельДанныхСотрудник.Страницы.КадровыеДанныеУпрУчет.Видимость = мДоступныРолиУпрУчета;
		
		Если Не мЕстьНачисления Тогда
			ЭлементыФормы.Организация1.ТолькоПросмотр  = Не (ЭтоТрудовойДоговор или ЭтоДоговорГПХ);	
			ЭлементыФормы.ВидЗанятости1.ТолькоПросмотр = Не ЭтоТрудовойДоговор;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьОтборыВСписках()

	Если Не мЭтоНовый Тогда
		
		ЭтоТрудовойДоговор = (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор);
		ЭтоДоговорГПХ = (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда) ИЛИ (ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский);
		
		КадровыеДокументы.Отбор.Организация.ВидСравнения  	= ВидСравнения.ВСписке;
		КадровыеДокументы.Отбор.Организация.Значение 		= мСписокОбособленныхПодразделений;
		КадровыеДокументы.Отбор.Организация.Использование 	= ЭтоТрудовойДоговор;
		КадровыеДокументы.Отбор.ДокументыПоСотрудникуОрганизации.Значение 		= Ссылка;
		КадровыеДокументы.Отбор.ДокументыПоСотрудникуОрганизации.Использование 	= ЭтоТрудовойДоговор;
		
		ОтражениеОсновныхНачислений.Отбор.Сотрудник.Значение = Ссылка;
		ОтражениеОсновныхНачислений.Отбор.Сотрудник.Использование = ЭтоТрудовойДоговор ИЛИ ЭтоДоговорГПХ;
		ОтражениеПлановыхНачислений.Отбор.Сотрудник.Значение = Ссылка;
		ОтражениеПлановыхНачислений.Отбор.Сотрудник.Использование = ЭтоТрудовойДоговор ИЛИ ЭтоДоговорГПХ;
		
		МестоРаботы.Отбор.Организация.Значение		= Организация;
		МестоРаботы.Отбор.Организация.Использование = ЭтоТрудовойДоговор;
		МестоРаботы.Отбор.Сотрудник.Значение 		= Ссылка;
		МестоРаботы.Отбор.Сотрудник.Использование 	= ЭтоТрудовойДоговор;
		МестоРаботы.Отбор.ПричинаИзмененияСостояния.Значение      = Перечисления.ПричиныИзмененияСостояния.Увольнение;
		МестоРаботы.Отбор.ПричинаИзмененияСостояния.ВидСравнения  = ВидСравнения.НеРавно;
		МестоРаботы.Отбор.ПричинаИзмененияСостояния.Использование = ЭтоТрудовойДоговор;
		
		СписокДоговоровГПХ.Отбор.Организация.ВидСравнения  = ВидСравнения.ВСписке;
		СписокДоговоровГПХ.Отбор.Организация.Значение      = мСписокОбособленныхПодразделений;
		СписокДоговоровГПХ.Отбор.Организация.Использование = ЭтоДоговорГПХ;
		СписокДоговоровГПХ.Отбор.Сотрудник.Значение 	   = Ссылка;
		СписокДоговоровГПХ.Отбор.Сотрудник.Использование   = ЭтоДоговорГПХ;
		
		//для упр учета
		ПоказываемУпрУчет = Истина;
		
		КадровыеДокументыУпрУчет.Отбор.ДокументыПоРаботнику.Значение 		= Ссылка.Физлицо;
		КадровыеДокументыУпрУчет.Отбор.ДокументыПоРаботнику.Использование 	= ПоказываемУпрУчет;
		
		МестоРаботыУпрУчет.Отбор.Физлицо.Значение 		= Ссылка.Физлицо;
		МестоРаботыУпрУчет.Отбор.Физлицо.Использование 	= ПоказываемУпрУчет;
		МестоРаботыУпрУчет.Отбор.ПричинаИзмененияСостояния.Значение      = Перечисления.ПричиныИзмененияСостояния.Увольнение;
		МестоРаботыУпрУчет.Отбор.ПричинаИзмененияСостояния.ВидСравнения  = ВидСравнения.НеРавно;
		МестоРаботыУпрУчет.Отбор.ПричинаИзмененияСостояния.Использование = ПоказываемУпрУчет;
		
	КонецЕсли; 	

КонецПроцедуры

// Процедура устанваливает видимость страниц панелей договоров
Процедура ОбработатьИзменениеВидаДоговора()
	
	УстановитьВидимостьЭУ();
	УстановитьОтборыВСписках();
	
	СотрудникиОрганизацийКлиент.ОбработатьПоказЭУЯвляетсяСтудентом(ЭтаФорма);
	
	мСтруктураПараметровОтбораОсновныхВР = РаботаСДиалогамиПереопределяемый.ПолучитьСтруктуруОтборовОсновногоНачисленияСотрудника(ВидДоговора);
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя = "СтраницаНовыйСотрудник" Тогда
		//форма нового сотрудника
		Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			
			СотрудникиОрганизацийКлиент.ПроверитьИУстановитьВидЗанятости(Ложь, ЭтаФорма);
			
			СотрудникиОрганизацийКлиент.СформироватьЗаголовокПерсональныхНадбавок(ЭтаФорма);
			ЭлементыФормы.ВидЗанятости.ТолькоПросмотр = Ложь;
			ЭлементыФормы.ВидЗанятости.ОтметкаНезаполненного = Не ЗначениеЗаполнено(ВидЗанятости);
			ЭлементыФормы.ВидЗанятости.АвтоОтметкаНезаполненного = Истина;
			
			ЭлементыФормы.Организация.ТолькоПросмотр = Ложь;
			Если Организация.Пустая() Тогда
				ОбособленноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
				Организация = ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение);
				ОбработатьИзменениеОрганизации();
			КонецЕсли;
			ЭлементыФормы.Организация.ОтметкаНезаполненного     = Не ЗначениеЗаполнено(Организация);
			ЭлементыФормы.Организация.АвтоОтметкаНезаполненного = Истина;
			
			Если ВалютаТарифнойСтавки.Пустая() Тогда
				ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
			КонецЕсли;

			СотрудникиОрганизацийКлиент.ОбработатьОтображениеОбособленногоПодразделения(,ЭтаФорма);
			
			ЭлементыФормы.ПерейтиКВводуТрудовогоДоговора.Видимость = мДоступнаРольКадровика или мДоступнаРольРасчетчика;
			ЭлементыФормы.ПанельДанныхНовыйСотрудник.Страницы.ТрудовойДоговор.Видимость = Истина;
			
			Если ЗанимаемыхСтавок = 0 Тогда
				ЗанимаемыхСтавок = 1;
			КонецЕсли;	
			
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
			
			ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
			ЭлементыФормы.ВидЗанятости.ТолькоПросмотр = Истина;
			ЭлементыФормы.ВидЗанятости.АвтоОтметкаНезаполненного = Ложь;
			ЭлементыФормы.ВидЗанятости.ОтметкаНезаполненного = Ложь;
			
			Организация = Справочники.Организации.ПустаяСсылка();
			ЭлементыФормы.Организация.ТолькоПросмотр = Истина;
			ЭлементыФормы.Организация.АвтоОтметкаНезаполненного  = Ложь;
			ЭлементыФормы.Организация.ОтметкаНезаполненного  = Ложь;
			ЭлементыФормы.ПерейтиКВводуТрудовогоДоговора.Видимость = Ложь;
			ЭлементыФормы.ПанельДанныхНовыйСотрудник.Страницы.ТрудовойДоговор.Видимость = Ложь;
			
		Иначе // авторский договор или договор подряда
			
			ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
			ЭлементыФормы.ВидЗанятости.ТолькоПросмотр = Истина;
			ЭлементыФормы.ВидЗанятости.АвтоОтметкаНезаполненного = Ложь;
			ЭлементыФормы.ВидЗанятости.ОтметкаНезаполненного = Ложь;
			
			ЭлементыФормы.Организация.ТолькоПросмотр = Ложь;
			Если Организация.Пустая() Тогда
				ОбособленноеПодразделение = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация");
				Организация = ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение);
				ОбработатьИзменениеОрганизации();
			КонецЕсли;
			ЭлементыФормы.Организация.ОтметкаНезаполненного     = Не ЗначениеЗаполнено(Организация);
			ЭлементыФормы.Организация.АвтоОтметкаНезаполненного = Истина;
			ЭлементыФормы.ПерейтиКВводуТрудовогоДоговора.Видимость = Ложь;
			ЭлементыФормы.ПанельДанныхНовыйСотрудник.Страницы.ТрудовойДоговор.Видимость = Ложь;
			
		КонецЕсли;
		
	Иначе //форма сотрудника

		Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			
			СотрудникиОрганизацийКлиент.СформироватьЗаголовокПерсональныхНадбавок(ЭтаФорма);
			ЭлементыФормы.ВидЗанятости1.ТолькоПросмотр = Ложь;
			ЭлементыФормы.ВидЗанятости1.ОтметкаНезаполненного     = Не ЗначениеЗаполнено(ВидЗанятости);
			ЭлементыФормы.ВидЗанятости1.АвтоОтметкаНезаполненного = Истина;
			
			ЭлементыФормы.Организация1.ТолькоПросмотр = Ложь;
			ЭлементыФормы.Организация1.ОтметкаНезаполненного      = Не ЗначениеЗаполнено(Организация);
			ЭлементыФормы.Организация1.АвтоОтметкаНезаполненного  = Истина;
			
			Если ВалютаТарифнойСтавки.Пустая() Тогда
				ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
			КонецЕсли;
			
			Если ЗанимаемыхСтавок = 0 Тогда
				ЗанимаемыхСтавок = 1;
			КонецЕсли;
			
			СотрудникиОрганизацийКлиент.ОбработатьОтображениеОбособленногоПодразделения(, ЭтаФорма);
			
		ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
			
			ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
			ЭлементыФормы.ВидЗанятости1.ТолькоПросмотр = Истина;
			ЭлементыФормы.ВидЗанятости1.ОтметкаНезаполненного = Ложь;
			
			Организация = Справочники.Организации.ПустаяСсылка();
			ЭлементыФормы.Организация1.ТолькоПросмотр = Истина;
			ЭлементыФормы.Организация1.АвтоОтметкаНезаполненного  = Ложь;
			ЭлементыФормы.Организация1.ОтметкаНезаполненного  	  = Ложь;
			
		Иначе // авторский договор или договор подряда
			
			ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
			ЭлементыФормы.ВидЗанятости1.ТолькоПросмотр = Истина;
			ЭлементыФормы.ВидЗанятости1.АвтоОтметкаНезаполненного = Ложь;
			ЭлементыФормы.ВидЗанятости1.ОтметкаНезаполненного = Ложь;
			
			ЭлементыФормы.Организация1.ТолькоПросмотр = Ложь;
			ЭлементыФормы.Организация1.ОтметкаНезаполненного      = Не ЗначениеЗаполнено(Организация);
			ЭлементыФормы.Организация1.АвтоОтметкаНезаполненного  = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Код = ПолучитьОчереднойТабельныйНомер();

КонецПроцедуры

// Процедура обрабатывает изменение организации
Процедура ОбработатьИзменениеОрганизации()

	//сформируем новый список обособленных подразделений
	СотрудникиОрганизацийКлиент.СформироватьСписокОбособленныхПодразделений(ЭтаФорма);
	
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(ТекущаяДата()), Организация);
	БухгалтерскийУчетДополнительный.УстановитьВидимостьРеквизитовЕНВД(мМассивЭУЕНВД, Организация, ТекущаяДата(), глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"));

	СотрудникиОрганизацийКлиент.УстановитьВидимостьЭУПоИспользованиюТарифногоРазряда(ЭтаФорма, ВидРасчета);
	УстановитьДоступныеЗначениеВидЗанятости(Истина);
	Код = ПолучитьОчереднойТабельныйНомер();
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
		
		СотрудникиОрганизацийКлиент.ПроверитьИУстановитьВидЗанятости(Ложь, ЭтаФорма);
		
		//получим новый номер трудового договора
		НомерДоговора = ПолучитьНомерТрудовогоДоговора();	
		
		// обработаем отображение обособленного подразделения в трудовом договоре
		СотрудникиОрганизацийКлиент.ОбработатьОтображениеОбособленногоПодразделения(, ЭтаФорма);
		// и проверим ПодразделениеОрганизации в трудовом договоре
		СотрудникиОрганизацийКлиент.ОбработкаРеквизитовТрудовогоДоговора(ЭтаФорма);
		// обработаем возможность выбора из списка ПодразделенияОрганизации и Должности по штатному расписанию
		СотрудникиОрганизацийКлиент.ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);
		
		Если ВалютаТарифнойСтавки.Пустая() Тогда
			ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
		КонецЕсли;
		
	Иначе
		
		ОбособленноеПодразделение = Организация;
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента, Параметр = Неопределено)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента, ЭтаФорма, Параметр);
	
КонецПроцедуры

// Процедура формирует список доступных видов занятости, в зависимости от учетной политики по персоналу организаций
Процедура УстановитьДоступныеЗначениеВидЗанятости(Редактировать = Ложь)

	СписокЗначенийДляВыбора = Новый СписокЗначений;
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы);
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыЗанятостиВОрганизации.Совместительство);
	СписокЗначенийДляВыбора.Добавить(Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		
	ЭлементыФормы.ВидЗанятости.ДоступныеЗначения 	= СписокЗначенийДляВыбора;
	ЭлементыФормы.ВидЗанятости1.ДоступныеЗначения 	= СписокЗначенийДляВыбора;
	
	Если ЗначениеЗаполнено(ВидЗанятости) и СписокЗначенийДляВыбора.НайтиПоЗначению(ВидЗанятости) = Неопределено и Редактировать Тогда
	
		ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ПустаяСсылка();
		ЭлементыФормы.ВидЗанятости1.ОтметкаНезаполненного 		= Истина;
		ЭлементыФормы.ВидЗанятости1.АвтоОтметкаНезаполненного 	= Истина;
		ЭлементыФормы.ВидЗанятости.ОтметкаНезаполненного 		= Истина;
		ЭлементыФормы.ВидЗанятости.АвтоОтметкаНезаполненного 	= Истина;
	
	КонецЕсли;
	
КонецПроцедуры // ПолучитьСписокВидовЗанятости()

// Функция проверяет что сотрудник работает или работал в компании
// Возвращаемое значение:
//   Булево
//
Функция ЭтоСотрудникКомпании()
	
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда 
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	Работники.ФизЛицо
		|ИЗ
		|	РегистрСведений.Работники КАК Работники
		|ГДЕ
		|	Работники.Физлицо = &парамФизлицо";
		
		Запрос.УстановитьПараметр("парамФизлицо", Ссылка.Физлицо);
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Возврат Истина;	
		КонецЕсли; 
	КонецЕсли; 
	
	Возврат Ложь;
	
КонецФункции // ЭтоСотрудникКомпании()

Функция ПолучитьСтруктуруПараметровПодбораПоСтроке()
	
	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);

	СтруктураПараметров = Новый Структура("ВидВремени", ВидыВремени);
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	СтруктураПечатныхФорм = ПолучитьСтруктуруПечатныхФорм();
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, СтруктураПечатныхФорм, мДействиеОсновныеДействияФормыПечать, мДействиеОсновныеДействияФормыУстановитьПечатьПоУмолчанию);

	УниверсальныеМеханизмы.УстановитьПодменюПечати(мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя, мДействиеОсновныеДействияФормыПечатьПоУмолчанию);

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати, Истина, Истина);
	КонецЕсли;

КонецПроцедуры // УстановитьКнопкиПечати


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ОбработкаОбъектЗначенияСвойств.НазначениеСвойств = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций;
	ПрочитатьЗаполнитьСвойстваИЗначения();

	ОбработкаОбъектКатегорииОбъекта.НазначениеКатегорий = ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_СотрудникиОрганизаций;
	ПрочитатьЗаполнитьКатегории();
	
	мЕстьОграниченияПравДоступаНаУровнеЗаписей = Ложь;
	
	мДоступнаРольРасчетчика = НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл();
	мДоступнаРольКадровика  = НастройкаПравДоступаПереопределяемый.ДоступнаРольКадровикаРегл();
	
	мДоступныРолиУпрУчета = РольДоступна("КадровикУправленческихДанных") или РольДоступна("РасчетчикУправленческойЗарплаты")
							или РольДоступна("УдалитьКадровикУправленческихДанныхБезОграниченияПрав") или РольДоступна("УдалитьРасчетчикУправленческойЗарплатыБезОграниченияПрав");
	мДоступныРолиУпрУчета = мДоступныРолиУпрУчета и НЕ (мДоступнаРольРасчетчика или мДоступнаРольКадровика);
	
	мЭтоНовый = ЭтоНовый();
	Если мЭтоНовый Тогда
		
		Если Не ЗначениеЗаполнено(ВидДоговора) ТОгда
			ВидДоговора  = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;	
		КонецЕсли;	
		Если ВидДоговора  = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор Тогда
			ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
			ЗанимаемыхСтавок = 1;
		КонецЕсли;
		
		Если ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
			СотрудникиОрганизацийКлиент.ПроверитьИПодобратьОрганизациюПередОткрытиемФормы(ЭтаФорма);	
		КонецЕсли;	
		
		ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
		
		Если Не Физлицо.Пустая() Тогда
			//если в форму передали физлицо
			ВыборФизлица  = Истина;
			ФизлицоОбъект = Физлицо.ПолучитьОбъект();
			Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
			СотрудникиОрганизацийКлиент.УстановитьЗаголовокВидимостьРедактироватьФизлицоОтдельно(ЭтаФорма);
			СотрудникиОрганизацийКлиент.ПрочитатьФИО(ЭтаФорма);
			СотрудникиОрганизацийКлиент.ПроверитьИУстановитьВидЗанятости(Ложь, ЭтаФорма);
		Иначе
			ФизлицоОбъект = Справочники.ФизическиеЛица.СоздатьЭлемент();
			ВыборФизлица  = Ложь;
			мЕстьОграниченияПравДоступаНаУровнеЗаписей = СотрудникиОрганизацийКлиент.ЕстьОграничениеПравДоступаНаУровнеЗаписейПоФизлицам();
			СотрудникиОрганизацийКлиент.УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа(ЭтаФорма);
		КонецЕсли;
		
		// заполним дату договора сегодняшней датой
		ДатаДоговора = ОбщегоНазначения.ПолучитьРабочуюДату();
		НомерДоговора = ПолучитьНомерТрудовогоДоговора();
		
	Иначе //открываем существующий элемент справочника
		
		Попытка
			ФизлицоОбъект = Физлицо.ПолучитьОбъект();
		Исключение
			ПоказатьИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()));
			Отказ = Истина;
		КонецПопытки;
		
		СотрудникиОрганизацийКлиент.ЗаполнитьНаборыПоФизлицу(ЭтаФорма);
		
		ОбновитьПредставлениеЭлемента("Гражданство");
		ОбновитьПредставлениеЭлемента("Инвалидность");
		ОбновитьПредставлениеЭлемента("СтандартныеВычеты");
		ОбновитьПредставлениеЭлемента("ИмущественныеВычеты");
		ОбновитьПредставлениеЭлемента("СтатусНалогоплательщика");
		
		// добавим команду изменения актуальности сотрудника
		Если Актуальность Тогда
			ЗаголовокКоманды = "Поместить в архив";
		Иначе
			ЗаголовокКоманды = "Извлечь из архива";
		КонецЕсли;
		КнопкаПодменю = ЭлементыФормы.ДействияФормы.Кнопки.Подменю;
		КнопкаПодменю.Кнопки.Добавить("Разделитель1", ТипКнопкиКоманднойПанели.Разделитель);
		КнопкаПодменю.Кнопки.Добавить("ИзменитьАктуальность", ТипКнопкиКоманднойПанели.Действие, ЗаголовокКоманды, Новый Действие("ДействияФормыИзменитьАктуальность"));
		
		Модифицированность = Ложь;
		
	КонецЕсли;
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Справка формы
	ОтображатьСправкуФормы = ВосстановитьЗначение("Справочник.СотрудникиОрганизаций.ОтображатьСправкуФормы");
	Если ОтображатьСправкуФормы = Неопределено Тогда
		ОтображатьСправкуФормы = Истина;
	КонецЕсли;
	
	НовыйЭлементЗаписан = Не мЭтоНовый;
	
	СотрудникиОрганизацийКлиент.ПодготовитьСправкуФормы(ЭтаФорма);
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	мИспользуетсяТрудРаботающихВСтудотряде = Ложь;//Константы.ИспользуетсяТрудРаботающихВСтудотряде.Получить();
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПриОткрытии(ЭтаФорма);
	
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации")[Организация]);
		
	мМассивЭУЕНВД = Новый Массив();
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.ОтражениеОсновныхНачислений.Колонки.ПодпадаетПодЕНВД);
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.ОтражениеПлановыхНачислений.Колонки.ОтнесениеРасходовКДеятельностиЕНВД);
	
	Если мЭтоНовый Тогда
		
		мЭтоСотрудникКомпании = Ложь;
		
		ЭлементыФормы.Организация.ОтметкаНезаполненного     = Не ЗначениеЗаполнено(Организация) и Не ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
		ЭлементыФормы.Организация.АвтоОтметкаНезаполненного = Не ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
				
	Иначе
		//продублируем стратегию нумерации для поля Код1
		ЭлементыФормы.Код1.ТолькоПросмотр = ЭлементыФормы.Код.ТолькоПросмотр;
		Если ЭлементыФормы.Код1.ТолькоПросмотр Тогда
			ЭлементыФормы.Код1.Подсказка = "Возможность редактирования Табельного № включается в меню ""Действия""";	
		Иначе
			ЭлементыФормы.Код1.Подсказка = "";
		КонецЕсли;
		
		мЭтоСотрудникКомпании = ЭтоСотрудникКомпании();
        ТекущийЭлемент = ЭлементыФормы.ПередставлениеНаименования1;
		
	КонецЕсли;
	
	УстановитьДоступныеЗначениеВидЗанятости();
	
	УстановитьВидимостьЭУ();
	УстановитьОтборыВСписках();
	
	СписокДоступныхВидовДоговоров = ПолучитьСписокДоступныхДоговоров();
	ЭлементыФормы.ВидДоговора.ДоступныеЗначения		= СписокДоступныхВидовДоговоров;
	ЭлементыФормы.ВидДоговора1.ДоступныеЗначения	= СписокДоступныхВидовДоговоров;

	СотрудникиОрганизацийКлиент.СформироватьЗаголовокПерсональныхНадбавок(ЭтаФорма);
	
	НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(ТекущаяДата()), Организация);
	БухгалтерскийУчетДополнительный.УстановитьВидимостьРеквизитовЕНВД(мМассивЭУЕНВД, Организация, ТекущаяДата(), глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"));
	
	ЭлементыФормы.НадписьАктуальностьСотрудника.Видимость = НЕ Актуальность;
	
	Если ОткрытьКакТрудовойДоговор Тогда
		ЭлементыФормы.ПанельДанныхСотрудник.ТекущаяСтраница = ЭлементыФормы.ПанельДанныхСотрудник.Страницы.ТрудовойДоговор;	
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПередЗаписью(Отказ, ЭтаФорма);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПриЗаписи(Отказ, ЭтаФорма);
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	СотрудникиОрганизацийКлиент.СформироватьЗаголовокПерсональныхНадбавок(ЭтаФорма);
		
	Если мЭтоНовый Тогда
		
		ЭлементыФормы.ВыборФизлица.Доступность = Ложь;
		ЭлементыФормы.ВыборФизлица1.Доступность = Ложь;
		ЭлементыФормы.ОткрытьСправочникФизлиц.Доступность = Ложь;
		мЭтоНовый = Ложь;
		СотрудникиОрганизацийКлиент.ПодготовитьСправкуФормы(ЭтаФорма);
		СотрудникиОрганизацийПереопределяемый.СформироватьПодменюВвестиДокумент(мМассивКнопокПодменю, мСтруктураСоответствияДействий, ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	// Устанавливаем новое значение реквизиту только, если новый элемент был записан в первый раз
	// Это позволит избежать обновление встроенной справки при каждой записи элемента
	Если мЭтоНовый И НЕ НовыйЭлементЗаписан Тогда
		НовыйЭлементЗаписан = Истина;
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗакрытии()
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПриЗакрытии(ЭтаФорма);
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаОбработкаВыбора(ЗначениеВыбора, Источник, ЭтаФорма);
	
КонецПроцедуры

Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаОбработкаЗаписиНовогоОбъекта(Объект, Источник, ЭтаФорма);
	
КонецПроцедуры // ОбработкаЗаписиНовогоОбъекта()

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" И (Источник = ЭтаФорма Или Источник = Физлицо) Тогда
		
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;
		ОбновитьПредставлениеЭлемента(ИмяОбновляемогоЭлемента, Параметр);

	ИначеЕсли ИмяСобытия = "ОбновитьПерсональныеНадбавки" Тогда	
		
		СотрудникиОрганизацийКлиент.СформироватьЗаголовокПерсональныхНадбавок(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ОбновитьДанныеОФизлице" Тогда
		
		Если НЕ Физлицо.Пустая() Тогда
			//пустое физлицо будет когда вводим нового сотрудника из из него открылиформу физлица
			БалаМодифицированность = Модифицированность;
			ФизлицоОбъект = Физлицо.ПолучитьОбъект();
			СотрудникиОрганизацийКлиент.ПрочитатьФИО(ЭтаФорма);
			СотрудникиОрганизацийКлиент.ЗаполнитьНаборыПоФизлицу(ЭтаФорма);
			ОбновитьПредставлениеЭлемента("Гражданство");
			ОбновитьПредставлениеЭлемента("Инвалидность");
			ОбновитьПредставлениеЭлемента("СтандартныеВычеты");
			ОбновитьПредставлениеЭлемента("ИмущественныеВычеты");
			ОбновитьПредставлениеЭлемента("СтатусНалогоплательщика");
			Модифицированность = БалаМодифицированность или Ложь;
		КонецЕсли;
		СотрудникиОрганизацийКлиент.УстановитьЗаголовокВидимостьПерейтиКВводуГруппыДоступа(ЭтаФорма);
		СотрудникиОрганизацийКлиент.ПроверитьНовыеЗначенияКодовФизлица(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ОбновитьПредставлениеИмущественныхВычетов" Тогда
		
		БалаМодифицированность = Модифицированность;
		ОбновитьПредставлениеЭлемента("ИмущественныеВычеты");
		Модифицированность = БалаМодифицированность или Ложь;
		
	ИначеЕсли ИмяСобытия = "ОбновитьДоступностьРеквизитовСотрудника" и не ЭтоНовый()
		и ТипЗнч(Параметр) = Тип("Массив") и Параметр.Найти(Ссылка) <> Неопределено Тогда
		
		мЕстьНачисления = СотрудникиОрганизацийКлиент.ЕстьНачисленияИлиПриемНаРаботу(ВидДоговора, Ссылка);
		ЭлементыФормы.Организация1.ТолькоПросмотр  = мЕстьНачисления;
		ЭлементыФормы.ВидДоговора1.ТолькоПросмотр  = мЕстьНачисления;
		ЭлементыФормы.ВидЗанятости1.ТолькоПросмотр = мЕстьНачисления;
		ЭлементыФормы.Организация.ТолькоПросмотр  = мЕстьНачисления;
		ЭлементыФормы.ВидДоговора.ТолькоПросмотр  = мЕстьНачисления;
		ЭлементыФормы.ВидЗанятости.ТолькоПросмотр = мЕстьНачисления;
		
	ИначеЕсли ИмяСобытия = "ОбновитьСписокПлановыхНачислений" и не ЭтоНовый()
		и ЭлементыФормы.ПанельДанныхСотрудник.ТекущаяСтраница = ЭлементыФормы.ПанельДанныхСотрудник.Страницы.НачисленияУдержания
		и ТипЗнч(Параметр) = Тип("Массив") и Параметр.Найти(Ссылка) <> Неопределено Тогда
		
		СотрудникиОрганизацийКлиент.ПолучитьСписокПлановыхНачислений(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ОбновитьСписокПлановыхУдержаний" и не ЭтоНовый()
		и ЭлементыФормы.ПанельДанныхСотрудник.ТекущаяСтраница = ЭлементыФормы.ПанельДанныхСотрудник.Страницы.НачисленияУдержания
		и ТипЗнч(Параметр) = Тип("Массив") и Параметр.Найти(Ссылка) <> Неопределено Тогда	 
		
		СотрудникиОрганизацийКлиент.ПолучитьСписокПлановыхУдержаний(ЭтаФорма);
		
	ИначеЕсли ИмяСобытия = "ПеречитатьСотрудников" и Не Модифицированность
		и ТипЗнч(Параметр) = Тип("Массив") и Параметр.Найти(Ссылка) <> Неопределено Тогда	
		
		ЭтотОбъект.Прочитать();
		ФизлицоОбъект.Прочитать();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ПереключитьВидимостьСправкиФормы(Кнопка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПереключитьВидимостьСправкиФормы(Кнопка, ЭтаФорма);
	
КонецПроцедуры

Процедура ПоказатьИсториюОтражениеОсновныхНачислений(Кнопка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПоказатьИсториюОтражениеОсновныхНачислений(Кнопка, ЭтаФорма);
	
КонецПроцедуры

Процедура ПоказатьИсториюОтражениеПлановыхНачислений(Кнопка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПоказатьИсториюОтражениеПлановыхНачислений(Кнопка, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, ЭтотОбъект.Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура УДФОткрыть(Кнопка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаУДФОткрыть(Кнопка, ЭтаФорма);
	
КонецПроцедуры // УДФОткрыть()

Процедура ДействияФормыИзменитьАктуальность(Кнопка)
	
	Форма = ПолучитьОбщуюФорму("ДиалогВопрос");
	
	Если Актуальность Тогда
		Форма.Заголовок	= "Перемещение сотрудника в архив";
		Форма.ЭлементыФормы.НадписьТекстВопроса.Заголовок =
		"Поместить сотрудника: " + Наименование + " в архив.
		|
		|Сотрудник, помещенный в архив, не будет показываться в списке.";
		Форма.ЭлементыФормы.КнопкаДействие1.Заголовок = "Поместить в архив";
	Иначе
		Форма.Заголовок	= "Извлечение сотрудника из архива";
		Форма.ЭлементыФормы.НадписьТекстВопроса.Заголовок	=
		"Извлечь сотрудника: " + Наименование + " из архива. 
		|
		|После извлечения из архива сотрудник будет показываться в списке.";
		Форма.ЭлементыФормы.КнопкаДействие1.Заголовок = "Извлечь из архива";
	КонецЕсли;
	
	Форма.ЭлементыФормы.КнопкаДействие2.Заголовок = "Отмена";
	Результат = Форма.ОткрытьМодально();
	
	Если ПустаяСтрока(Результат) или Результат = "2" Тогда
		// отказались от смены актуальности
		Возврат;
	Иначе
		Актуальность = Не Актуальность;
	КонецЕсли;
	
	Если Актуальность Тогда
		ТекстЗаголовкаКоманды = "Поместить сотрудника в архив";
	Иначе
		ТекстЗаголовкаКоманды = "Извлечь сотрудника из архива";
	КонецЕсли;

	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ИзменитьАктуальность.Текст = ТекстЗаголовкаКоманды;
	
	ЭлементыФормы.НадписьАктуальностьСотрудника.Видимость = Не Актуальность;
	
КонецПроцедуры

Процедура ДействияФормыПерейтиМедицинскиеСтраховыеПолисы(Кнопка)
	
	ФормаСписка = Справочники.МедицинскиеСтраховыеПолисы.ПолучитьФормуСписка(, ЭтаФорма, Ссылка);
	ФормаСписка.Отбор.Организация.Установить(Организация);
	ФормаСписка.Отбор.Физлицо.Установить(Физлицо);
	
	СправочникСписок	= ФормаСписка.ЭлементыФормы.СправочникСписок;
	Колонки				= СправочникСписок.Колонки;
	
	Колонки.Физлицо.Видимость			= Ложь;
	Колонки.Физлицо.ИзменятьВидимость	= Ложь;
	СправочникСписок.НастройкаОтбора.Физлицо.Доступность = Ложь;
	
	ФормаСписка.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура ПанельДанныхСотрудникПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	СотрудникиОрганизацийКлиент.ОбновитьДанныеНаСтраницах(ЭтаФорма);
	
КонецПроцедуры

Процедура ВыборФизлицаПриИзменении(Элемент)
	
	СотрудникиОрганизацийКлиент.ОбработатьВыборФизлицаПриИзменении(ЭтаФорма);
		
КонецПроцедуры

Процедура ОткрытьСправочникФизлицНажатие(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаОткрытьСправочникФизлицНажатие(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура НаименованиеФизлицаПриИзменении(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаНаименованиеФизлицаПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура РедактироватьФизлицоОтдельноНажатие(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаРедактироватьФизлицоОтдельноНажатие(Элемент, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ВидДоговора
Процедура ВидДоговораПриИзменении(Элемент)
	
	Если мЭтоСотрудникКомпании
		и ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор
		и ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий; 
		Стр = "Если сотрудник ранее работал без договора, то для него можно оформить только трудовой договор. Оформление договора гражданско-правового характера запрещено";
		Предупреждение (Стр, 10,);
	Иначе
		ОбработатьИзменениеВидаДоговора();
		УстановитьКнопкиПечати();
		СотрудникиОрганизацийКлиент.ПодобратьПостфиксНаименования(ЭтаФорма);
		Если Не ЭтоНовый() Тогда
			СотрудникиОрганизацийПереопределяемый.СформироватьПодменюВвестиДокумент(мМассивКнопокПодменю, мСтруктураСоответствияДействий, ЭтотОбъект, ЭтаФорма);
		КонецЕсли;
		//получим новый номер трудового договора
		НомерДоговора = ПолучитьНомерТрудовогоДоговора();
	КонецЕсли;
		
КонецПроцедуры // ВидДоговораПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода Организация
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	СотрудникиОрганизацийКлиент.ПодобратьПостфиксНаименования(ЭтаФорма);
	
КонецПроцедуры // ОрганизацияПриИзменении

// Процедура - обработчик события "НачалоВыбора" поля ввода Организация
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//установим список выбора головных организаций
	СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций();
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено и Элемент.Значение <> ЭлементСписка.Значение Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ОбработатьИзменениеОрганизации();
		СотрудникиОрганизацийКлиент.ПодобратьПостфиксНаименования(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияНачалоВыбора

Процедура ПостфиксНаименованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПостфиксНаименованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура ПостфиксНаименованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПостфиксНаименованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка, ЭтаФорма);

КонецПроцедуры

Процедура ПерейтиКВводуТрудовогоДоговораНажатие(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПерейтиКВводуТрудовогоДоговораНажатие(Элемент, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ДатаДоговора
Процедура ДатаДоговораПриИзменении(Элемент)
	
	ПроверитьНомерТрудовогоДоговора(мДатаДоговора);
	мДатаДоговора = ДатаДоговора;
	
КонецПроцедуры // ДатаДоговораПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода ОбособленноеПодразделение
Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
			
	СотрудникиОрганизацийКлиент.ОбработкаРеквизитовТрудовогоДоговора(ЭтаФорма);

	СотрудникиОрганизацийКлиент.ФормаЭлементаОбособленноеПодразделениеПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры // ОбособленноеПодразделениеПриИзменении

// Процедура - обработчик события "НачалоВыбора" поля ввода ОбособленноеПодразделение
Процедура ОбособленноеПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаОбособленноеПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры //ОбособленноеПодразделениеНачалоВыбора

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода Должности
Процедура ДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ПодразделениеДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, "Должность", ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода Подразделения
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ПодразделениеДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, "ПодразделениеОрганизации", ЭтаФорма);
	
КонецПроцедуры

Процедура ЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура НадбавкиПоТрудовомуДоговоруТекстНажатие(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаНадбавкиПоТрудовомуДоговоруТекстНажатие(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура ВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокВидовВремени = Новый СписокЗначений;
	СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора(,Элемент,Ссылка);
	
	ФормаВыбора.Отбор.ВидВремени.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.ВидВремени.Значение = СписокВидовВремени;
	ФормаВыбора.Отбор.ВидВремени.Использование = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ВидРасчетаПриИзменении(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаВидРасчетаПриИзменении(Элемент, ЭтаФорма);	
	
КонецПроцедуры

Процедура ВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));	
КонецПроцедуры 

Процедура ВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

Процедура ГражданствоНачалоВыбора(Элемент, СтандартнаяОбработка)

	СотрудникиОрганизацийКлиент.ФормаЭлементаГражданствоНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура ИнвалидностьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаИнвалидностьНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура СтандартныеВычетыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаСтандартныеВычетыНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура СтатусНалогоплательщикаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаСтатусНалогоплательщикаНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры


Процедура ИмущественныеВычетыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаИмущественныеВычетыНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);

КонецПроцедуры

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПодразделениеОрганизацииПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура ДолжностьПриИзменении(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаДолжностьПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура ФизлицоПриИзменении(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаФизлицоПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура ВидЗанятостиПриИзменении(Элемент)
	
	СотрудникиОрганизацийКлиент.ПроверитьИУстановитьВидЗанятости(Ложь, ЭтаФорма);

	СотрудникиОрганизацийКлиент.ФормаЭлементаВидЗанятостиПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура ДатаРожденияПриИзменении(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаДатаРожденияПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура ПерейтиКВводуГруппыДоступаНажатие(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПерейтиКВводуГруппыДоступаНажатие(Элемент, ЭтаФорма);	
	
КонецПроцедуры

Процедура ИННПриИзменении(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаИННПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура СтраховойНомерПФРПриИзменении(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаСтраховойНомерПФРПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура СменитьФИОНажатие(Элемент)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаСменитьФИОНажатие(Элемент, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ

Процедура ПлановыеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПлановыеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок, ЭтаФорма);
	
КонецПроцедуры

Процедура ПлановыеНачисленияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПлановыеНачисленияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура ПлановыеУдержанияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПлановыеУдержанияПриПолученииДанных(Элемент, ОформленияСтрок, ЭтаФорма);
	
КонецПроцедуры

Процедура ПлановыеУдержанияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаПлановыеУдержанияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура СписокДоговоровГПХПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаСписокДоговоровГПХПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма);
	
КонецПроцедуры

// Процедура обеспечивает ввод на основании кадрового документа
Процедура КадровыеДокументыДействиеДобавить(Кнопка) Экспорт
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаКадровыеДокументыДействиеДобавить(Кнопка, ЭтаФорма);
	
КонецПроцедуры

Процедура КадровыеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаКадровыеДокументыПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма);
	
КонецПроцедуры
 
Процедура МестоРаботыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого СтрокаСписка Из ОформленияСтрок Цикл
		
		ПоказыватьКолонкиЗавершения = ЗначениеЗаполнено(СтрокаСписка.ДанныеСтроки.ПериодЗавершения);
		
		СтрокаСписка.Ячейки.ДатаЗавершения.Видимость = ПоказыватьКолонкиЗавершения И ЭлементыФормы.МестоРаботы.Колонки.Период.Видимость;
		СтрокаСписка.Ячейки.ПодразделениеОрганизацииЗавершения.Видимость = ПоказыватьКолонкиЗавершения И ЭлементыФормы.МестоРаботы.Колонки.ПодразделениеОрганизации.Видимость;
		СтрокаСписка.Ячейки.ДолжностьЗавершения.Видимость = ПоказыватьКолонкиЗавершения И ЭлементыФормы.МестоРаботы.Колонки.Должность.Видимость;
		СтрокаСписка.Ячейки.ГрафикРаботыЗавершения.Видимость = ПоказыватьКолонкиЗавершения И ЭлементыФормы.МестоРаботы.Колонки.ГрафикРаботы.Видимость;
		СтрокаСписка.Ячейки.ЗанимаемыхСтавокЗавершения.Видимость = ПоказыватьКолонкиЗавершения И ЭлементыФормы.МестоРаботы.Колонки.ЗанимаемыхСтавок.Видимость;
		СтрокаСписка.Ячейки.ПричинаИзмененияСостоянияЗавершения.Видимость = ПоказыватьКолонкиЗавершения И ЭлементыФормы.МестоРаботы.Колонки.ПричинаИзмененияСостояния.Видимость;
		
	КонецЦикла;	
	
КонецПроцедуры

// Процедура обеспечивает ввод на основании кадрового документа
Процедура КадровыеДокументыУпрУчетДействиеДобавить(Кнопка)
	
	Если СотрудникиОрганизацийКлиент.ЗаписатьЭлементПередВыполнениемДействия("Перед выполнением действия необходимо записать элемент. Записать элемент?", ЭтаФорма) Тогда
		
		РазблокироватьОбъекты();
		
		СписокДокументов = Новый СписокЗначений;
		СписокДокументов.Добавить(Документы.ПриемНаРаботу, "Прием на работу");
		СписокДокументов.Добавить(Документы.КадровоеПеремещение, "Кадровое перемещение");
		СписокДокументов.Добавить(Документы.Увольнение, "Увольнение");
		
		ВыбранноеЗначение = СписокДокументов.ВыбратьЭлемент("Выбор вида документа");
		Если Не ВыбранноеЗначение = Неопределено Тогда
			ДокументОбъект = ВыбранноеЗначение.Значение.СоздатьДокумент();
			ДокументОбъект.Заполнить(Ссылка);
			ФормаДокумента = ДокументОбъект.ПолучитьФорму();
			ФормаДокумента.Открыть();
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура КадровыеДокументыУпрУчетПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Не Копирование Тогда
		Отказ = Истина;
		КадровыеДокументыУпрУчетДействиеДобавить(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтражениеОсновныхНачисленийПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если ДанныеСтроки.Период >= мДатаНачалаРеформыСоцСтрахования Тогда
			ОформлениеСтроки.Ячейки.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.Текст = "<не используется с 2011 года>";
		КонецЕсли; 
		
	КонецЦикла;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	СотрудникиОрганизацийКлиент.ФормаЭлементаПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "", ЭтаФорма);

КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	СотрудникиОрганизацийКлиент.ФормаЭлементаПрочитатьЗаполнитьКатегории(ИмяДанных = "", ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	СотрудникиОрганизацийКлиент.ФормаЭлементаСвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)

	СотрудникиОрганизацийКлиент.ФормаЭлементаСвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока, ЭтаФорма);

КонецПроцедуры

Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	СотрудникиОрганизацийКлиент.ФормаЭлементаСвойстваИЗначенияПередУдалением(Элемент, Отказ, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаСвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	СотрудникиОрганизацийКлиент.ФормаЭлементаСвойстваИЗначенияЗначениеПриИзменении(Элемент, ЭтаФорма);

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СотрудникиОрганизацийКлиент.ФормаЭлементаСвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка, ЭтаФорма);

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения1.Значение.
//
Процедура СвойстваИЗначения1ЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СотрудникиОрганизацийКлиент.ФормаЭлементаСвойстваИЗначения1ЗначениеОчистка(Элемент, СтандартнаяОбработка, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	СотрудникиОрганизацийКлиент.ФормаЭлементаКатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	СотрудникиОрганизацийКлиент.ФормаЭлементаКатегорииПередУдалением(Элемент, Отказ, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	СотрудникиОрганизацийКлиент.ФормаЭлементаКатегорииПриИзмененииФлажка(Элемент, НоваяСтрока, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	СотрудникиОрганизацийКлиент.ФормаЭлементаКатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма);

КонецПроцедуры


// Формирует список обособленных структурных подразделений организации
Функция ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация) Экспорт

	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка,
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	Организации.ГоловнаяОрганизация = &Организация");

	Запрос.УстановитьПараметр("Организация", Организация);

	СписокОрганизаций = Новый СписокЗначений;
	
	Выборка = Запрос.Выполнить().Выбрать(); 

	Пока Выборка.Следующий() Цикл
		СписокОрганизаций.Добавить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;

	Возврат СписокОрганизаций;
КонецФункции // ПолучитьСписокОбособленныхПодразделенийОрганизации()

Процедура ПлановыеНачисленияПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура ПлановыеНачисленияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ПлановыеНачисленияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ПлановыеУдержанияПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

Процедура ПлановыеУдержанияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры


Процедура ПлановыеУдержанияПередНачаломДобавления(Элемент, Отказ, Копирование)
	Отказ = Истина;
КонецПроцедуры

Процедура ПостфиксНаименованияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура ПостфиксНаименованияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
ОбщегоНазначения.ПолучитьСвязанныеДанныеФизлица(ФизЛицо, мНаборЗаписейФИО);

мСведенияОВидахРасчета = Новый Соответствие;
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мНаборЗаписейГражданство	= РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
мНаборЗаписейГражданствоПриОткрытии	= РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
мНаборЗаписейИнвалидность	= РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();
мНаборЗаписейИнвалидностьПриОткрытии	= РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();
мНаборЗаписейПринятыеПоДолгосрочнымДоговорам  = РегистрыСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.СоздатьНаборЗаписей();
мНаборЗаписейПринятыеПоДолгосрочнымДоговорамПриОткрытии  = РегистрыСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.СоздатьНаборЗаписей();

мОбработкаПодбораПоСтроке					= Ложь;
мТекстПодбораПоСтроке						= "";
мПоследнееЗначениеЭлементаПодбораПоСтроке	= Неопределено;
мОбработкаПодбораПоСтрокеОрганизация					= Ложь;
мТекстПодбораПоСтрокеОрганизация						= "";
мПоследнееЗначениеЭлементаПодбораПоСтрокеОрганизация	= Неопределено;

мДлинаСуток = 86400;

мСтруктураСоответствияДействий = СформироватьСоответствиеДействий();

мМассивКнопокПодменю = Новый Массив;
мМассивКнопокПодменю.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.ВвестиДокумент);

мДействиеОсновныеДействияФормыПечать 						= Новый Действие("ОсновныеДействияФормыПечать");
мДействиеОсновныеДействияФормыУстановитьПечатьПоУмолчанию 	= Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию");
мДействиеОсновныеДействияФормыПечатьПоУмолчанию 			= Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию");

мДатаНачалаРеформыСоцСтрахования = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();