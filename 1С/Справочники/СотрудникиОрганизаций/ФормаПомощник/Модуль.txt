////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяСтраница;
Перем мЕстьОграниченияПравДоступаНаУровнеЗаписей;
Перем мВалютаРегламентированногоУчета;
Перем мВалютаУправленческогоУчета;
Перем мБылаОрганизация;

Перем мСписокОбособленныхПодразделений Экспорт;

Перем мДатаДоговора Экспорт;

Перем мОбработкаПодбораПоСтрокеОрганизация;
Перем мТекстПодбораПоСтрокеОрганизация;
Перем мПоследнееЗначениеЭлементаПодбораПоСтрокеОрганизация;

Перем мПодразделениеДоговора;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

Перем мСтруктураПараметровОтбораОсновныхВР;
Перем мСтруктураПараметровОтбораНадбавок;

Перем мСписокНедоступныхРасчетов;

Перем мМассивЭУ;

Перем мСписокПредопределенныхВР; // список ненужных видов расчета
Перем мВалютаТарифнойСтавки;
Перем мСведенияОВидахРасчетаОснНачислений;
Перем мСведенияОВидахРасчетаУпр;

Перем мНаборЗаписейФИО Экспорт;
Перем мНаборЗаписейГражданство Экспорт;
Перем мНаборЗаписейИнвалидность Экспорт;
Перем мНаборЗаписейЛичныйВычет Экспорт;
Перем мНаборЗаписейВычетыНаДетей Экспорт;
Перем мНаборЗаписейПрименениеВычетов Экспорт;
Перем мНаборЗаписейВоинскоеЗвание Экспорт;
Перем мНаборЗаписейКлассныйЧин Экспорт;
Перем мНаборЗаписейДоходыПредыдущегоМестаРаботы Экспорт;
Перем мНаборЗаписейСтатусНалогоплательщика Экспорт;

Перем мДатаПредоставленияВычетов Экспорт;
Перем мПредоставлятьВычеты Экспорт;

Перем мНеСоздаватьДокумент;
Перем мЭтоТрудовойДоговор;
Перем мЭтоДоговорник;
Перем мЭтоСотрудникБезДоговора;

// картинки для ЭУ страницы Готово
Перем мКартинкаФизлицо;
Перем мКартинкаСотрудник;
Перем мКартинкаДоговораГПХ;
Перем мКартинкаПриказ;

Перем ОбработкаКомментариев;

Перем мДоступнаРольРасчетчикаРегл;
Перем мДоступныРолиРеглУчета;
Перем мПолныеПрава;
Перем мДоступныРолиУпрУчета;

Перем мПроверкаШтатногоРасписания;
Перем мСписокВыбораВычетов;
Перем мСписокАвторскихВознаграждений;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьНаборыПоФизлицу()

	мНаборЗаписейГражданство = РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
	мНаборЗаписейИнвалидность = РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ФизЛицо", ФизлицоОбъект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГражданствоФизЛицСрезПоследних.Период,
	|	ГражданствоФизЛицСрезПоследних.ФизЛицо,
	|	ГражданствоФизЛицСрезПоследних.Страна,
	|	ГражданствоФизЛицСрезПоследних.НеИмеетПравоНаПенсию
	|ИЗ
	|	РегистрСведений.ГражданствоФизЛиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК ГражданствоФизЛицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейГражданство.Добавить(), Выборка);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Период,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Физлицо,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.Инвалидность,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.СерияСправки,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.НомерСправки,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.ДатаВыдачи,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.ГруппаИнвалидности,
	|	СведенияОбИнвалидностиФизлицСрезПоследних.СрокДействияСправки
	|ИЗ
	|	РегистрСведений.СведенияОбИнвалидностиФизлиц.СрезПоследних(, ФизЛицо = &ФизЛицо) КАК СведенияОбИнвалидностиФизлицСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(мНаборЗаписейИнвалидность.Добавить(), Выборка);
	КонецЕсли;
	
	Если мДоступныРолиРеглУчета или мПолныеПрава Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДФЛСтандартныеВычетыФизлиц.Период,
		|	НДФЛСтандартныеВычетыФизлиц.Физлицо,
		|	НДФЛСтандартныеВычетыФизлиц.КодВычетаЛичный
		|ИЗ
		|	РегистрСведений.НДФЛСтандартныеВычетыФизлиц КАК НДФЛСтандартныеВычетыФизлиц
		|ГДЕ
		|	НДФЛСтандартныеВычетыФизлиц.Физлицо = &ФизЛицо";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(мНаборЗаписейЛичныйВычет.Добавить(), Выборка);
		КонецЦикла;
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	НДФЛСтандартныеВычетыНаДетей.Период,
		|	НДФЛСтандартныеВычетыНаДетей.Физлицо,
		|	НДФЛСтандартныеВычетыНаДетей.КодВычета,
		|	НДФЛСтандартныеВычетыНаДетей.КоличествоДетей,
		|	НДФЛСтандартныеВычетыНаДетей.ПериодЗавершения,
		|	НДФЛСтандартныеВычетыНаДетей.КоличествоДетейЗавершения
		|ИЗ
		|	РегистрСведений.НДФЛСтандартныеВычетыНаДетей КАК НДФЛСтандартныеВычетыНаДетей
		|ГДЕ
		|	НДФЛСтандартныеВычетыНаДетей.Физлицо = &ФизЛицо";
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(мНаборЗаписейВычетыНаДетей.Добавить(), Выборка);
		КонецЦикла;
		
		мНаборЗаписейПрименениеВычетов = РегистрыСведений.НДФЛПрименениеВычетов.СоздатьНаборЗаписей();
		мНаборЗаписейПрименениеВычетов.Отбор.Физлицо.Установить(ФизлицоОбъект.Ссылка);
		мНаборЗаписейПрименениеВычетов.Прочитать();
		
		// определим применение вычетов
		мПредоставлятьВычеты = Ложь;
		Для Каждого СтрокаНабора Из мНаборЗаписейПрименениеВычетов Цикл
			Если СтрокаНабора.Период > мДатаПредоставленияВычетов И (СтрокаНабора.Организация = Организация или не ЗначениеЗаполнено(СтрокаНабора.Организация)) Тогда
				мДатаПредоставленияВычетов = СтрокаНабора.Период;
				мПредоставлятьВычеты = ЗначениеЗаполнено(СтрокаНабора.Организация);
			КонецЕсли;
		КонецЦикла;
		
		мНаборЗаписейСтатусНалогоплательщика = РегистрыСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей();
		мНаборЗаписейСтатусНалогоплательщика.Отбор.Физлицо.Установить(ФизлицоОбъект.Ссылка);
		мНаборЗаписейСтатусНалогоплательщика.Прочитать();
	КонецЕсли;
		
	Если мДоступнаРольРасчетчикаРегл или мПолныеПрава Тогда
		мНаборЗаписейДоходыПредыдущегоМестаРаботы = РегистрыСведений.НДФЛДоходыПредыдущегоМестаРаботы.СоздатьНаборЗаписей();
		мНаборЗаписейДоходыПредыдущегоМестаРаботы.Отбор.Физлицо.Установить(ФизлицоОбъект.Ссылка);
		мНаборЗаписейДоходыПредыдущегоМестаРаботы.Отбор.Организация.Установить(Организация);
		мНаборЗаписейДоходыПредыдущегоМестаРаботы.Прочитать();
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьТекстИнформационнойНадписиГруппаДоступа()

	ТекстНадписи = "";
	Если ЗначениеЗаполнено(ФизлицоОбъект.ГруппаДоступаФизическогоЛица) Тогда
		ТекстНадписи = "";
	Иначе
		ТекстНадписи = "Данные по этому физлицу НЕДОСТУПНЫ для всех пользователей, которым установлено ограничение доступа по физлицам";	
	КонецЕсли;	
	ЭлементыФормы.НадписьИнформацияГруппаДоступа.Заголовок = ТекстНадписи;

КонецПроцедуры

// в процедуре проверяются дубли физлиц
Процедура ПроверитьФизлицо()

	Если Не ЗначениеЗаполнено(Имя) Тогда
		Возврат;
	КонецЕсли;
	
	Если ФизлицоОбработано Тогда
		// не ищем дубли физлиц, физлицо уже обработано
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ФизлицоОбъект.Наименование) Тогда
		Возврат;
	КонецЕсли;
	
	СписокФизлиц = Справочники.ФизическиеЛица.ПохожиеФизлица(Фамилия, Имя, Отчество, ФизлицоОбъект.ДатаРождения, ФизлицоОбъект.ИНН, ФизлицоОбъект.СтраховойНомерПФР);
	Если СписокФизлиц.Количество() = 0 Тогда
		// дубли физлиц не обнаружены
		Возврат;
	КонецЕсли;
	
	ФормаФЛ = Справочники.СотрудникиОрганизаций.ПолучитьФорму("ФормаВыбораФизлица", ЭтаФорма);
	ФормаФЛ.СписокФизлиц.Отбор.Ссылка.Использование = Истина;
	ФормаФЛ.СписокФизлиц.Отбор.Ссылка.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаФЛ.СписокФизлиц.Отбор.Ссылка.Значение 		= СписокФизлиц;
	ФормаФЛ.ОткрытьМодально();

КонецПроцедуры

Процедура ОбработатьВыборФизлица()

	НаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
	ОбщегоНазначения.ПолучитьСвязанныеДанныеФизлица(Физлицо,НаборЗаписейФИО);
	Если НаборЗаписейФИО.Количество() > 0 Тогда
		ФИОСрез = НаборЗаписейФИО[0];
		Фамилия  = ФИОСрез.Фамилия;
		Имя      = ФИОСрез.Имя;
		Отчество = ФИОСрез.Отчество;
		Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	КонецЕсли;
	
	ЭлементыФормы.Фамилия.ТолькоПросмотр		= ВыборФизлица;
	ЭлементыФормы.Имя.ТолькоПросмотр			= ВыборФизлица;
	ЭлементыФормы.Отчество.ТолькоПросмотр		= ВыборФизлица;

	ЭлементыФормы.ДатаРождения.ТолькоПросмотр		= ВыборФизлица;
	ЭлементыФормы.Пол.ТолькоПросмотр 				= ВыборФизлица;
	ЭлементыФормы.СтраховойНомерПФР.ТолькоПросмотр 	= ВыборФизлица;
	ЭлементыФормы.ИНН.ТолькоПросмотр 				= ВыборФизлица;
	ЭлементыФормы.ГруппаДоступа.ТолькоПросмотр 		= ВыборФизлица;
	
	СотрудникиОрганизацийКлиент.ПроверитьИУстановитьВидЗанятости(,ЭтаФорма);
	
	// заполним наборы записей данными физлица
	ЗаполнитьНаборыПоФизлицу();
	
	РаботаСДиалогамиЗК.ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(ФизлицоОбъект.СтраховойНомерПФР, ЭлементыФормы.СтраховойНомерПФР);
	РаботаСДиалогами.ПроверитьИННОформитьПолеВвода(ФизлицоОбъект.ИНН, ЭлементыФормы.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо);

КонецПроцедуры

// Процедура обрабатывает изменение организации
Процедура ОбработатьИзменениеОрганизации()

	//сформируем новый список обособленных подразделений
	СотрудникиОрганизацийКлиент.СформироватьСписокОбособленныхПодразделений(ЭтаФорма);
	
	СотрудникиОрганизацийКлиент.ПроверитьИУстановитьВидЗанятости(, ЭтаФорма);
	
	Код = ПолучитьОчереднойТабельныйНомер();
	
	Если Не ЗначениеЗаполнено(ОбособленноеПодразделение)
		или Организация <> ОбщегоНазначения.ГоловнаяОрганизация(ОбособленноеПодразделение) Тогда
		ОбособленноеПодразделение = Организация;
	КонецЕсли;

	
	Если мЭтоТрудовойДоговор Тогда
		
		//получим новый номер трудового договора
		НомерДоговора = ПолучитьНомерТрудовогоДоговора();	
		
		// и проверим ПодразделениеОрганизации в трудовом договоре
		СотрудникиОрганизацийКлиент.ОбработкаРеквизитовТрудовогоДоговора(ЭтаФорма);
		
		Если ВалютаТарифнойСтавки.Пустая() Тогда
			ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
		КонецЕсли;
		
	КонецЕсли;
	СотрудникиОрганизацийКлиент.ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// панель Обособленное подразделение
	РежимСверткиПанели = ?(мСписокОбособленныхПодразделений.Количество() > 1, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);		
	ЭлементыФормы.ПанельОбособленноеПодразделение.Свертка = РежимСверткиПанели;
	ЭлементыФормы.ПанельОбособленноеПодразделение1.Свертка = РежимСверткиПанели;
	
	мПроверкаШтатногоРасписания = Ложь;
	Если ЗначениеЗаполнено(Организация) Тогда
		УчетнаяПолитикаПоПерсоналуОрганизации	= глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации");
		мПроверкаШтатногоРасписания = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(УчетнаяПолитикаПоПерсоналуОрганизации, Организация, "КонтрольКоличестваСтавокШтатногоРасписания");
	КонецЕсли;
	
	мБылаОрганизация = Организация;
	
КонецПроцедуры


Процедура ОбработатьИзменениеВидаДоговора()

    мЭтоТрудовойДоговор = ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
	мЭтоСотрудникБезДоговора = ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий;
    мЭтоДоговорник = ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда или ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский;
	
	Если мЭтоСотрудникБезДоговора Тогда
		мБылаОрганизация = Организация;
		Организация = Справочники.Организации.ПустаяСсылка();
		ОбособленноеПодразделение = Справочники.Организации.ПустаяСсылка();
	ИначеЕсли Не ЗначениеЗаполнено(Организация) Тогда	
		Организация = мБылаОрганизация;
	КонецЕсли;	
	
	Код = ПолучитьОчереднойТабельныйНомер();
	СотрудникиОрганизацийКлиент.ПроверитьИУстановитьВидЗанятости(, ЭтаФорма);
	СотрудникиОрганизацийКлиент.ПодобратьПостфиксНаименования(ЭтаФорма);
	
	мСтруктураПараметровОтбораОсновныхВР = РаботаСДиалогамиПереопределяемый.ПолучитьСтруктуруОтборовОсновногоНачисленияСотрудника(ВидДоговора);
	мСтруктураПараметровОтбораНадбавок   = РаботаСДиалогамиПереопределяемый.ПолучитьСтруктуруОтборовНадбавокСотрудника(ВидДоговора);
	
	РежимСвертки = ?(мЭтоСотрудникБезДоговора, РежимСверткиЭлементаУправления.Верх, РежимСверткиЭлементаУправления.Нет); 
	ЭлементыФормы.ПанельОрганизация.Свертка = РежимСвертки;
	
КонецПроцедуры

// Процедура устанавливает видимость ЭУ в зависимости от использования тарифного разряда
Процедура ФормаПомощникУстановитьВидимостьЭУПоИспользованиюТарифногоРазряда()
		
	ИспользоватьТарифныйРазряд = ВидРасчета.ТребуетВводаТарифногоРазряда;
	Если ИспользоватьТарифныйРазряд Тогда
		ЭлементыФормы.ПанельРазмерОклада.ТекущаяСтраница = ЭлементыФормы.ПанельРазмерОклада.Страницы.ТарифныйРазряд;
	Иначе
		ЭлементыФормы.ПанельРазмерОклада.ТекущаяСтраница = ЭлементыФормы.ПанельРазмерОклада.Страницы.ВРублях;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьЭУПоИспользованиюТарифногоРазряда()

Функция СоздатьПриказОПриемеНаРаботу()

	ДокументОбъект = Документы.ПриемНаРаботуВОрганизацию.СоздатьДокумент();
	ДокументОбъект.Заполнить(Ссылка);
    ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));
    ДокументОбъект.Дата = РабочаяДата;
	
	ПриемНаРаботуВОрганизациюДополнительный.ЗаполнитьДополнительно(ДокументОбъект);
	
	Возврат ДокументОбъект;
    
КонецФункции 

Функция СоздатьПриказОПриемеНаРаботуВКомпанию()

	ДокументОбъект = Документы.ПриемНаРаботу.СоздатьДокумент();
    ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));
	ДокументОбъект.Дата = РабочаяДата;
	
	НоваяСтрока = ДокументОбъект.Работники.Добавить();
	НоваяСтрока.Сотрудник = Ссылка;
	НоваяСтрока.ФизЛицо	= Ссылка.ФизЛицо;
	НоваяСтрока.ДатаПриема = ДатаПриемаУпр;
	НоваяСтрока.ГрафикРаботы = ГрафикРаботыУпр;
	НоваяСтрока.Должность = ДолжностьУпр;
	НоваяСтрока.Подразделение = ПодразделениеУпр;
	НоваяСтрока.ЗанимаемыхСтавок = ЗанимаемыхСтавокУпр;
	НоваяСтрока.НапомнитьПоЗавершении = Истина;
	Если НоваяСтрока.ЗанимаемыхСтавок = 0 Тогда
		НоваяСтрока.ЗанимаемыхСтавок = 1;
	КонецЕсли;
	
	//начисления
	Для каждого СтрокаТЗ Из НачисленияУпр Цикл
		НоваяСтрока = ДокументОбъект.Начисления.Добавить();
		НоваяСтрока.Сотрудник = Ссылка;
		НоваяСтрока.ФизЛицо = Ссылка.ФизЛицо;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	КонецЦикла;
	
	//удержания
	Для каждого СтрокаТЗ Из УдержанияУпр Цикл
		НоваяСтрока = ДокументОбъект.Взыскания.Добавить();
		НоваяСтрока.ФизЛицо = Ссылка.ФизЛицо;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
	КонецЦикла;
	
	ПриемНаРаботуПереопределяемый.ЗаполнитьДополнительно(ДокументОбъект);
	
	Возврат ДокументОбъект;
    
КонецФункции

Функция СоздатьДоговорПодряда()

	ДокументОбъект = Документы.ДоговорНаВыполнениеРаботСФизЛицом.СоздатьДокумент();
	ДокументОбъект.Заполнить(Ссылка);
    ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ДокументОбъект, глЗначениеПеременной("глТекущийПользователь"));
    ДокументОбъект.Организация = Ссылка.ОбособленноеПодразделение;
	ДокументОбъект.ПодразделениеОрганизации = мПодразделениеДоговора;
    ДокументОбъект.Дата = РабочаяДата;
	ДокументОбъект.ВидРасчета = ВидРасчетаДоговорГПХ;
	ДокументОбъект.ДатаНачала = ДатаНачалаДоговораГПХ;
	ДокументОбъект.ДатаОкончания = ДатаОкончанияДоговораГПХ;
	ДокументОбъект.ХарактерОплаты = ХарактерОплаты;
	ДокументОбъект.СуммаЗаРаботу = СуммаЗаРаботу;
	ДокументОбъект.ВалютаДокумента = ВалютаДоговораГПХ;
	ДокументОбъект.КодВычета = КодВычета;
	Если ЗначениеЗаполнено(СпособОтраженияВБухучете) Тогда
		ДокументОбъект.СпособОтраженияВБухучете = СпособОтраженияВБухучете;
		ДокументОбъект.ОтнесениеРасходовКДеятельностиЕНВД = ОтнесениеРасходовКДеятельностиЕНВД;
	КонецЕсли;
	Если ВидДоговораГПХ = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
		ДокументОбъект.ВидАвторскогоДоговора = ВидАвторскогоДоговора;
	КонецЕсли;
	
	Возврат ДокументОбъект;

КонецФункции

Процедура ОбработатьИзменениеФлагаСоздатьДокумент()

    ОбновитьНадписиХодаВыполненияИЗаголовки();
    ОбновитьШрифтНадписиХодаВыполнения();
    
	РежимСверткиЭУ = ?(СоздатьДокумент, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	
	ЭлементыФормы.ПодразделениеОрганизации.АвтоОтметкаНезаполненного = СоздатьДокумент;
	ЭлементыФормы.Должность.АвтоОтметкаНезаполненного = СоздатьДокумент;
	ЭлементыФормы.ГрафикРаботы.АвтоОтметкаНезаполненного = СоздатьДокумент;
	ЭлементыФормы.ЗанимаемыхСтавок.АвтоОтметкаНезаполненного = СоздатьДокумент;
	ЭлементыФормы.ДатаНачала.АвтоОтметкаНезаполненного = СоздатьДокумент;
	
	ЭлементыФормы.ПодразделениеОрганизации.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(ПодразделениеОрганизации);
	ЭлементыФормы.Должность.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(Должность);
	ЭлементыФормы.ГрафикРаботы.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(ГрафикРаботы);
	ЭлементыФормы.ЗанимаемыхСтавок.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(ЗанимаемыхСтавок);
	ЭлементыФормы.ДатаНачала.ОтметкаНезаполненного = СоздатьДокумент и Не ЗначениеЗаполнено(ДатаНачала);
	
	ТекстСоздатьДоговорГПХ = "По окончании работы помощника будет создан документ ""Договор на выполнение работ""";
	Если Не СоздатьДокумент Тогда
		ТекстСоздатьДоговорГПХ = "Документ ""Договор на выполнение работ"" можно будет создать позже в разделе ""Расчет зарплаты"" - ""Договоры ГПХ""";
	КонецЕсли;	
	ЭлементыФормы.ПанельУсловияДоговораГПХ.Видимость = СоздатьДокумент;
	
	ЭлементыФормы.ПанельУсловияПриемаУпр.Видимость = СоздатьДокумент;

КонецПроцедуры

Процедура ЗаполнитьСписокКодовВычета()
	
	ПроведениеРасчетов.ЗаполнитьСпискиКодовДоходовВычетовПоДоговорам(мСписокВыбораВычетов,мСписокАвторскихВознаграждений,ВидДоговораГПХ,ВидАвторскогоДоговора);
	
	ЭлементыФормы.КодВычета.СписокВыбора = мСписокВыбораВычетов;
	
КонецПроцедуры // ЗаполнитьСписокКодовВычета()

Процедура ЗаполнитьДанныеДоговораГПХ()

	ЭтоАвторскийДоговор = ВидДоговораГПХ = Перечисления.ВидыДоговоровСФизЛицами.Авторский;
	ЭлементыФормы.ВидАвторскогоДоговора.Доступность = ЭтоАвторскийДоговор;
	
	Если ЭтоАвторскийДоговор Тогда
		ВидРасчетаДоговорГПХ = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.АвторскийДоговор;
		Если Не ЗначениеЗаполнено(ВидАвторскогоДоговора) Тогда
			ВидАвторскогоДоговора = Перечисления.ВидыАвторскогоДоговора.АвторскогоЗаказа;
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ВидАвторскогоДоговора) Тогда
			ВидАвторскогоДоговора = Перечисления.ВидыАвторскогоДоговора.ПустаяСсылка();
		КонецЕсли;
		Если ВидДоговораГПХ = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
			ВидРасчетаДоговорГПХ = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ДоговорПодряда;
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьСписокКодовВычета();
	КодВычета = Справочники.ВычетыНДФЛ.ПустаяСсылка();	
	
	Если Не ЗначениеЗаполнено(ХарактерОплаты) Тогда
		ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.ОднократноВКонцеСрока;
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьДанныеТрудовогоДоговора()

	//заполним поле График работы
	
	СохраненноеЗначениеГрафикРаботы = ВосстановитьЗначение("ГрафикРаботыДляПомощника");
	Если СохраненноеЗначениеГрафикРаботы <> Неопределено Тогда
		ГрафикРаботы = СохраненноеЗначениеГрафикРаботы;
	Иначе	
		Запрос = Новый Запрос;
		ТекстЗапроса = 
		"ВЫБРАТЬ ПЕРВЫЕ 1
		|	ГрафикиРаботы.Ссылка
		|ИЗ
		|	Справочник.ГрафикиРаботы КАК ГрафикиРаботы
		|ГДЕ
		|	ГрафикиРаботы.ВидГрафика = ЗНАЧЕНИЕ(Перечисление.ВидыРабочихГрафиков.Пятидневка)";
		Запрос.Текст = ТекстЗапроса;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ГрафикРаботы = Выборка.Ссылка;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Функция СохранитьДанные(ОписаниеОшибки = "")
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
    НачатьТранзакцию();
	
	Если мЭтоДоговорник Тогда
        ВидДоговора = ВидДоговораГПХ;
		мПодразделениеДоговора = ПодразделениеОрганизации;
    КонецЕсли;
	
	// очистим реквизиты, которые не используются
	СотрудникиОрганизацийКлиент.ОчиститьНеИспользуемыеРеквизиты(ЭтаФорма);
	
	//установим актуальность для нового сотрудника
	Актуальность  = Истина;
	
	Если СоздатьДокумент Тогда
		Если мЭтоТрудовойДоговор Тогда
			ТекущееОбособленноеПодразделение = ОбособленноеПодразделение;
			ТекущееПодразделениеОрганизации  = ПодразделениеОрганизации;
			ТекущаяДолжностьОрганизации      = Должность;
			ДатаПриемаНаРаботу               = ДатаНачала;
		ИначеЕсли мЭтоСотрудникБезДоговора Тогда
			ТекущееПодразделениеКомпании = ПодразделениеУпр;
			ТекущаяДолжностьКомпании 	 = ДолжностьУпр;
			ДатаПриемаНаРаботуВКомпанию  = ДатаПриемаУпр;
			Если Не ВыборФизлица Тогда
				ДополнительныеРеквизитыФизлица = ФизлицаВторичныеДанныеПереопределяемый.ДополнительныеРеквизитыФизлица();
				Для Каждого ДополнительныйРеквизит Из ДополнительныеРеквизитыФизлица Цикл
					ФизлицоОбъект[ДополнительныйРеквизит.Ключ] = ЭтотОбъект[ДополнительныйРеквизит.Значение];
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	
	//если создаем новое физлицо, проверим заполнение реквизитов
	// и запишем физлицо
	Если Не ВыборФизлица Тогда
		//необходимо создать новое физлицо, проверим реквизиты
		Если ПустаяСтрока(ФизлицоОбъект.Наименование) Тогда
			// заполним наименование
			ФизлицоОбъект.Наименование = Справочники.ФизическиеЛица.НаименованиеФизлица(Фамилия, Имя, Отчество);
		КонецЕсли;
		
		//попытка записать новое физлицо
		Попытка
			ФизлицоОбъект.Записать();
			Физлицо = ФизлицоОбъект.Ссылка;
		Исключение
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат Ложь;
		КонецПопытки;

	КонецЕсли; 
	
	// запишем наборы записей
	Попытка
		
		Если Не ВыборФизлица Тогда
			// запишем ФИО физлица, для вновь созданного физлица
			НаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
			ДатаЗаписиФИО = ?(ЗначениеЗаполнено(ФизлицоОбъект.ДатаРождения),ФизлицоОбъект.ДатаРождения,'19800101');
			ЗаписьНабора = НаборЗаписейФИО.Добавить();
			ЗаписьНабора.Период		= ДатаЗаписиФИО;
			ЗаписьНабора.Фамилия	= Фамилия;
			ЗаписьНабора.Имя		= Имя;
			ЗаписьНабора.Отчество	= Отчество;
			ЗаписьНабора.Физлицо 	= Физлицо;
			
			НаборЗаписейФИО.Отбор.Физлицо.Использование	= Истина;
			НаборЗаписейФИО.Отбор.Физлицо.Значение 		= Физлицо;
			НаборЗаписейФИО.Отбор.Период.Использование	= Истина;
			НаборЗаписейФИО.Отбор.Период.Значение		= ДатаЗаписиФИО;
			
			НаборЗаписейФИО.Записать(Истина);
			
		КонецЕсли;
		
		Если мДоступныРолиРеглУчета или мПолныеПрава Тогда
			
			Если мНаборЗаписейЛичныйВычет.Количество() > 0 Тогда
				
				Для каждого ЗаписьНабора Из мНаборЗаписейЛичныйВычет Цикл
					ЗаписьНабора.Физлицо = ФизлицоОбъект.Ссылка;
				КонецЦикла;
				
				мНаборЗаписейЛичныйВычет.Отбор.Физлицо.Использование = Истина;
				мНаборЗаписейЛичныйВычет.Отбор.Физлицо.Значение = ФизлицоОбъект.Ссылка;
				
				НаборЗаписей = РегистрыСведений.НДФЛСтандартныеВычетыФизлиц.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Физлицо.Установить(ФизлицоОбъект.Ссылка);
				НаборЗаписей.Прочитать();
				
				ТаблицаНаборЗаписей = НаборЗаписей.Выгрузить();
				УдалитьНеиспользуемыеКолонки(ТаблицаНаборЗаписей);
				ТаблицаНаборЗаписейТекущие = мНаборЗаписейЛичныйВычет.Выгрузить();
				УдалитьНеиспользуемыеКолонки(ТаблицаНаборЗаписейТекущие);
				
				НадоЗаписать = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(ТаблицаНаборЗаписей, ТаблицаНаборЗаписейТекущие);
				Если НадоЗаписать Тогда
					мНаборЗаписейЛичныйВычет.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
			Если мНаборЗаписейВычетыНаДетей.Количество() > 0 Тогда
				
				Для каждого ЗаписьНабора Из мНаборЗаписейВычетыНаДетей Цикл
					ЗаписьНабора.Физлицо = ФизлицоОбъект.Ссылка;
				КонецЦикла;
				
				мНаборЗаписейВычетыНаДетей.Отбор.Физлицо.Использование = Истина;
				мНаборЗаписейВычетыНаДетей.Отбор.Физлицо.Значение = ФизлицоОбъект.Ссылка;
				
				НаборЗаписей = РегистрыСведений.НДФЛСтандартныеВычетыНаДетей.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Физлицо.Установить(ФизлицоОбъект.Ссылка);
				НаборЗаписей.Прочитать();
				НадоЗаписать = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(НаборЗаписей.Выгрузить(), мНаборЗаписейВычетыНаДетей.Выгрузить());
				Если НадоЗаписать Тогда
					мНаборЗаписейВычетыНаДетей.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
			Если мПредоставлятьВычеты и ЗначениеЗаполнено(мДатаПредоставленияВычетов) Тогда
				
				НаборЗаписей = РегистрыСведений.НДФЛПрименениеВычетов.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Физлицо.Использование = Истина;
				НаборЗаписей.Отбор.Физлицо.Значение = ФизлицоОбъект.Ссылка;
				НаборЗаписей.Отбор.Период.Использование = Истина;
				НаборЗаписей.Отбор.Период.Значение = мДатаПредоставленияВычетов;
				НаборЗаписей.Прочитать();
				
				Если НаборЗаписей.Количество() = 0 Тогда;
					
					ЗаписьНабора = НаборЗаписей.Добавить();
					ЗаписьНабора.Период = мДатаПредоставленияВычетов;
					ЗаписьНабора.Физлицо = ФизлицоОбъект.Ссылка;
					ЗаписьНабора.Организация = Организация;
					НаборЗаписей.Записать();
					
				КонецЕсли;
				
			КонецЕсли;
			
			Если мНаборЗаписейСтатусНалогоплательщика.Количество() > 0 Тогда
				
				Для каждого ЗаписьНабора Из мНаборЗаписейСтатусНалогоплательщика Цикл
					ЗаписьНабора.Физлицо = ФизлицоОбъект.Ссылка;
				КонецЦикла;
				
				мНаборЗаписейСтатусНалогоплательщика.Отбор.Физлицо.Использование = Истина;
				мНаборЗаписейСтатусНалогоплательщика.Отбор.Физлицо.Значение = ФизлицоОбъект.Ссылка;
				
				НаборЗаписей = РегистрыСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Физлицо.Установить(ФизлицоОбъект.Ссылка);
				НаборЗаписей.Прочитать();
				НадоЗаписать = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(НаборЗаписей.Выгрузить(), мНаборЗаписейСтатусНалогоплательщика.Выгрузить());
				Если НадоЗаписать Тогда
					мНаборЗаписейСтатусНалогоплательщика.Записать();
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		Если мДоступнаРольРасчетчикаРегл или мПолныеПрава Тогда
			
			Если мНаборЗаписейДоходыПредыдущегоМестаРаботы.Количество() > 0 Тогда
				
				Для каждого ЗаписьНабора Из мНаборЗаписейДоходыПредыдущегоМестаРаботы Цикл
					ЗаписьНабора.Физлицо = ФизлицоОбъект.Ссылка;
					ЗаписьНабора.Организация = Организация;
				КонецЦикла;
				
				мНаборЗаписейДоходыПредыдущегоМестаРаботы.Отбор.Физлицо.Использование = Истина;
				мНаборЗаписейДоходыПредыдущегоМестаРаботы.Отбор.Физлицо.Значение = ФизлицоОбъект.Ссылка;
				мНаборЗаписейДоходыПредыдущегоМестаРаботы.Отбор.Организация.Использование = Истина;
				мНаборЗаписейДоходыПредыдущегоМестаРаботы.Отбор.Организация.Значение = Организация;
				
				НаборЗаписей = РегистрыСведений.НДФЛДоходыПредыдущегоМестаРаботы.СоздатьНаборЗаписей();
				НаборЗаписей.Отбор.Физлицо.Установить(ФизлицоОбъект.Ссылка);
				НаборЗаписей.Отбор.Организация.Установить(Организация);
				НаборЗаписей.Прочитать();
				НадоЗаписать = Не НастройкаПравДоступа.СравнитьТаблицыНаборовЗаписей(НаборЗаписей.Выгрузить(), мНаборЗаписейДоходыПредыдущегоМестаРаботы.Выгрузить());
				Если НадоЗаписать Тогда
					мНаборЗаписейДоходыПредыдущегоМестаРаботы.Записать();
				КонецЕсли;
				
			КонецЕсли;	
			
		КонецЕсли;
		
		Если мНаборЗаписейГражданство.Количество() > 0 И ЗначениеЗаполнено(мНаборЗаписейГражданство[0].Период) Тогда
			
			мНаборЗаписейГражданство[0].Физлицо = ФизлицоОбъект.Ссылка;
			мНаборЗаписейГражданство.Отбор.Физлицо.Использование	= Истина;
			мНаборЗаписейГражданство.Отбор.Физлицо.Значение			= мНаборЗаписейГражданство[0].Физлицо;
			мНаборЗаписейГражданство.Отбор.Период.Использование		= Истина;
			мНаборЗаписейГражданство.Отбор.Период.Значение			= мНаборЗаписейГражданство[0].Период;
			
			мНаборЗаписейГражданство.Записать(Истина);
			
		КонецЕсли;
		
		Если мНаборЗаписейИнвалидность.Количество() > 0 И ЗначениеЗаполнено(мНаборЗаписейИнвалидность[0].Период) Тогда
			
			мНаборЗаписейИнвалидность[0].Физлицо = ФизлицоОбъект.Ссылка;
			мНаборЗаписейИнвалидность.Отбор.Физлицо.Использование	= Истина;
			мНаборЗаписейИнвалидность.Отбор.Физлицо.Значение		= мНаборЗаписейИнвалидность[0].Физлицо;
			мНаборЗаписейИнвалидность.Отбор.Период.Использование	= Истина;
			мНаборЗаписейИнвалидность.Отбор.Период.Значение			= мНаборЗаписейИнвалидность[0].Период;
			мНаборЗаписейИнвалидность.Записать(Истина);
			
		КонецЕсли;
		
	Исключение
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
		Если ТранзакцияАктивна() Тогда
            ОтменитьТранзакцию();
		КонецЕсли;
		Возврат Ложь;
	КонецПопытки;
	
	// запишем сотрудника
		
    Попытка
        СправочникОбъект.ПолучитьКадровыеДанныеФизлица = Ложь;
		СправочникОбъект.Записать();
	Исключение
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
        Если ТранзакцияАктивна() Тогда
            ОтменитьТранзакцию();
		КонецЕсли;
        Возврат Ложь;
    КонецПопытки;
    
    Если СоздатьДокумент Тогда
        
		// в зависимости от вида договора создадим нужный документ
		Если мЭтоТрудовойДоговор Тогда 
			ДокументОбъект = СоздатьПриказОПриемеНаРаботу();
		ИначеЕсли мЭтоСотрудникБезДоговора Тогда
			ДокументОбъект = СоздатьПриказОПриемеНаРаботуВКомпанию();
		Иначе
			ДокументОбъект = СоздатьДоговорПодряда();
		КонецЕсли;
		
		// записываем документ без проведения
        Попытка
            ДокументОбъект.Записать(); 
        Исключение
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
            Если ТранзакцияАктивна() Тогда
                ОтменитьТранзакцию();
            КонецЕсли;
            Возврат Ложь;
        КонецПопытки;
		
		// записываем документ с проведением
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение); 
		Исключение
			ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПолучитьПричинуОшибки(ИнформацияОбОшибке()).Описание);
			Если ТранзакцияАктивна() Тогда
				ОтменитьТранзакцию();
			КонецЕсли;
			Возврат Ложь;
		КонецПопытки;    
        
    КонецЕсли;
    
    Если БольшеНеИспользоватьПомощника Тогда
        // сбросим в настройках пользователя использование помощника
        УправлениеПользователями.УстановитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьПомощникаПриемаНаРаботу", Ложь);
    КонецЕсли;
	
	//запомним график, который пользователь использовал
	Если мЭтоТрудовойДоговор Тогда
		СохранитьЗначение("ГрафикРаботыДляПомощника", Ссылка.ГрафикРаботы);
	КонецЕсли;
	
	
    ЗафиксироватьТранзакцию();
    
    Возврат Истина;
    
КонецФункции // СохранитьДанные()

Процедура УдалитьНеиспользуемыеКолонки(ТаблицаНаборЗаписей)

	ТаблицаНаборЗаписей.Колонки.Удалить("УдалитьКодВычетаНаДетей");
	ТаблицаНаборЗаписей.Колонки.Удалить("УдалитьКоличествоДетей");
	ТаблицаНаборЗаписей.Колонки.Удалить("УдалитьКодВычетаНаДетейИнвалидов");
	ТаблицаНаборЗаписей.Колонки.Удалить("УдалитьКоличествоДетейИнвалидов");

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНОВ ФОРМЫ 

Процедура ТрудовойДоговорПриИзменении(Элемент)
	// изменили вид договора
	ОбработатьИзменениеВидаДоговора();
	ОбновитьНадписиХодаВыполненияИЗаголовки();
	
КонецПроцедуры


Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбработатьИзменениеОрганизации();
	СотрудникиОрганизацийКлиент.ПодобратьПостфиксНаименования(ЭтаФорма);
	
КонецПроцедуры

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//установим список выбора головных организаций
	СписокВыбора = ПроцедурыУправленияПерсоналом.ПолучитьСписокГоловныхОрганизаций();
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено и Элемент.Значение <> ЭлементСписка.Значение Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ОбработатьИзменениеОрганизации();
		СотрудникиОрганизацийКлиент.ПодобратьПостфиксНаименования(ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОрганизацияАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, СотрудникиОрганизацийКлиент.ПолучитьСтруктуруПараметровПодбораПоСтрокеОрганизации(), Тип("СправочникСсылка.Организации"));
	
КонецПроцедуры

Процедура ОрганизацияОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, СотрудникиОрганизацийКлиент.ПолучитьСтруктуруПараметровПодбораПоСтрокеОрганизации(), ЭтаФорма, Тип("СправочникСсылка.Организации"), мОбработкаПодбораПоСтрокеОрганизация, мТекстПодбораПоСтрокеОрганизация, мПоследнееЗначениеЭлементаПодбораПоСтрокеОрганизация, Ложь);
	
КонецПроцедуры

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
    СотрудникиОрганизацийКлиент.ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);
    СотрудникиОрганизацийПереопределяемый.ЗаполнитьРеквизитыПоШтатномуРасписанию(ЭтаФорма);
	ОбработатьИзменениеВидаРасчета();
КонецПроцедуры

Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
    
    СотрудникиОрганизацийКлиент.ПодразделениеДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, "ПодразделениеОрганизации", ЭтаФорма);

КонецПроцедуры

Процедура ДолжностьПриИзменении(Элемент)
	СотрудникиОрганизацийКлиент.ОбработатьОтображениеВыбораИзСписковПоШтаномуРасписанию(ЭтаФорма);
    СотрудникиОрганизацийПереопределяемый.ЗаполнитьРеквизитыПоШтатномуРасписанию(ЭтаФорма);
	ОбработатьИзменениеВидаРасчета();
КонецПроцедуры

Процедура ДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
    
    СотрудникиОрганизацийКлиент.ПодразделениеДолжностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, "Должность", ЭтаФорма);
    
КонецПроцедуры

Процедура ВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОткрытьФормуВыбораОсновныеНачисленияОрганизаций(Элемент, Ссылка, мСтруктураПараметровОтбораОсновныхВР, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ОбработатьИзменениеВидаРасчета()
	
	ФормаПомощникУстановитьВидимостьЭУПоИспользованиюТарифногоРазряда();
	
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, ВидРасчета);
	ЭлементыФормы.ТарифнаяСтавка.Формат = "ЧДЦ=" + СведенияОВидеРасчета.Показатель1Точность;
	
КонецПроцедуры


Процедура ВидРасчетаПриИзменении(Элемент)
	
	ОбработатьИзменениеВидаРасчета();

КонецПроцедуры

Процедура ВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, мСтруктураПараметровОтбораОсновныхВР, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));	
	
КонецПроцедуры 

Процедура ВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, мСтруктураПараметровОтбораОсновныхВР, ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

Процедура НадбавкиНадбавкаПриИзменении(Элемент)
	
	Надбавка = ЭлементыФормы.ПерсональныеНадбавки.ТекущиеДанные.Надбавка;

	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, Надбавка);
	ДанныеСтроки = ЭлементыФормы.ПерсональныеНадбавки.ТекущиеДанные;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ПерсональныеНадбавки, мСведенияОВидахРасчетаОснНачислений, "Надбавка");
	
	Если СведенияОВидеРасчета.НеТребуетВалюты Тогда
		ДанныеСтроки.Валюта1			= Справочники.Валюты.ПустаяСсылка();
		
	Иначе
		ИспользуютсяНачисленияВВалюте = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
			
		Если Не ИспользуютсяНачисленияВВалюте И ДанныеСтроки.Валюта1.Пустая() Тогда
			ДанныеСтроки.Валюта1 = мВалютаТарифнойСтавки;
		КонецЕсли;
			
	КонецЕсли;
	
	Для СчПоказателей = 1 По 6 Цикл
		Если СчПоказателей = 1 Или СчПоказателей <= Надбавка.Показатели.Количество() Тогда
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки["Валюта" + СчПоказателей]) И 
				СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ДанныеСтроки["Валюта" + СчПоказателей] = мВалютаТарифнойСтавки;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ДанныеСтроки["Валюта" + СчПоказателей] = Справочники.Валюты.ПустаяСсылка();
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ДанныеСтроки["Показатель" + СчПоказателей] = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры

Процедура НадбавкиНадбавкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОткрытьФормуВыбораОсновныеНачисленияОрганизаций(Элемент, Ссылка, мСтруктураПараметровОтбораНадбавок, СтандартнаяОбработка, Элемент.Значение, мСписокПредопределенныхВР);

КонецПроцедуры

Процедура ПерсональныеНадбавкиНадбавкаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, мСтруктураПараметровОтбораНадбавок, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));	
	
КонецПроцедуры

Процедура ПерсональныеНадбавкиНадбавкаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, мСтруктураПараметровОтбораНадбавок, ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

Процедура НадбавкиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчетаОснНачислений, ОформленияСтрок, "Надбавка");
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ОформлениеСтроки.ДанныеСтроки, мСведенияОВидахРасчетаОснНачислений, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ФамилияПриИзменении(Элемент)
	
	ФизлицоОбъект.Наименование = Справочники.ФизическиеЛица.НаименованиеФизлица(Фамилия, Имя, Отчество);
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ИмяПриИзменении(Элемент)
	
	ФизлицоОбъект.Наименование = Справочники.ФизическиеЛица.НаименованиеФизлица(Фамилия, Имя, Отчество);
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ОтчествоПриИзменении(Элемент)
	
	ФизлицоОбъект.Наименование = Справочники.ФизическиеЛица.НаименованиеФизлица(Фамилия, Имя, Отчество);
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	Если ЗначениеЗаполнено(Отчество) И Не ЗначениеЗаполнено(ФизлицоОбъект.Пол) Тогда
		ФизлицоОбъект.Пол = ПроцедурыУправленияПерсоналом.ПолучитьПол(Отчество);
	КонецЕсли;
	
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ОтчествоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроверитьФизлицо();
	
КонецПроцедуры

Процедура ОтчествоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроверитьФизлицо();	
	
КонецПроцедуры

Процедура СтраховойНомерПФРПриИзменении(Элемент)
	
	РаботаСДиалогамиЗК.ПроверитьСтраховойНомерПФРФизлицаОформитьПолеВвода(ФизлицоОбъект.СтраховойНомерПФР, ЭлементыФормы.СтраховойНомерПФР);
	
КонецПроцедуры

Процедура ИННПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьИННОформитьПолеВвода(ФизлицоОбъект.ИНН, ЭлементыФормы.ИНН, Перечисления.ЮрФизЛицо.ФизЛицо);
	
КонецПроцедуры

Процедура ГруппаДоступаПриИзменении(Элемент)
	
	УстановитьТекстИнформационнойНадписиГруппаДоступа();
	
КонецПроцедуры

Процедура ДатаРожденияПриИзменении(Элемент)
	ПроверитьФизлицо();
КонецПроцедуры

Процедура НадписьГражданствоНажатие(Элемент)
	
	ФормаВвода	= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаЗаписиГражданство", ЭтаФорма);
	ФормаВвода.Физлицо = ФизлицоОбъект.Ссылка;
	ФормаВвода.НаборЗаписей = мНаборЗаписейГражданство;
	ФормаВвода.Открыть()
	
КонецПроцедуры

Процедура НадписьИнвалидностьНажатие(Элемент)
	
	ФормаВвода	= Справочники.ФизическиеЛица.ПолучитьФорму("ФормаЗаписиСведенияОбИнвалидности", ЭтаФорма);
	ФормаВвода.Физлицо = ФизлицоОбъект.Ссылка;
	ФормаВвода.НаборЗаписей = мНаборЗаписейИнвалидность;
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура НадписьСтандартныеНалоговыеВычетыНажатие(Элемент)
	
	ФормаВвода = СправочникОбъект.ПолучитьФорму("ФормаВводаДанныхНДФЛ", ЭтаФорма, Ссылка);
	ФормаВвода.ФизлицоОбъект				= ФизлицоОбъект;
	ФормаВвода.Организация					= Организация;
	ФормаВвода.ПараметрыОткрытия			= Новый Структура("Страницы, Заголовок", ?(мДоступнаРольРасчетчикаРегл Или мПолныеПрава,"Вычеты,Статус,Доходы","Вычеты,Статус"), ФизлицоОбъект.Наименование + ": Ввод данных для НДФЛ");
	ФормаВвода.НДФЛСтандартныеВычетыФизлиц	= мНаборЗаписейЛичныйВычет;
	ФормаВвода.НДФЛСтандартныеВычетыНаДетей	= мНаборЗаписейВычетыНаДетей;
	ФормаВвода.ПредоставлятьВычеты			= мПредоставлятьВычеты;
	ФормаВвода.ДатаПредоставленияВычетов	= ?(ЗначениеЗаполнено(мДатаПредоставленияВычетов), мДатаПредоставленияВычетов, НачалоГода(ОбщегоНазначения.ПолучитьРабочуюДату()));
	ФормаВвода.СтатусФизЛицКакНалогоплательщиковНДФЛ = мНаборЗаписейСтатусНалогоплательщика;
	Если мДоступнаРольРасчетчикаРегл Или мПолныеПрава Тогда
		ФормаВвода.НДФЛДоходыПредыдущегоМестаРаботы	= мНаборЗаписейДоходыПредыдущегоМестаРаботы;
	КонецЕсли;
	
	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура НадписьСтатусНалогоплательщикаНажатие(Элемент)
	
	ФормаВвода = СправочникОбъект.ПолучитьФорму("ФормаВводаДанныхНДФЛ", ЭтаФорма, Ссылка);
	ФормаВвода.ФизлицоОбъект = ФизлицоОбъект;
	ФормаВвода.ПараметрыОткрытия = Новый Структура("Страницы, Заголовок", "Статус", ФизлицоОбъект.Наименование + ": статус физического лица как налогоплательщика НДФЛ");
	ФормаВвода.СтатусФизЛицКакНалогоплательщиковНДФЛ = мНаборЗаписейСтатусНалогоплательщика;

	ФормаВвода.Открыть();
	
КонецПроцедуры

Процедура ПостфиксНаименованияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВозможныхЗначений = Новый СписокЗначений;
		
	Если мЭтоТрудовойДоговор Тогда
		Если ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			СписокВозможныхЗначений.Добавить("(вн. совм.)");
		ИначеЕсли ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы Тогда	
			СписокВозможныхЗначений.Добавить("(осн.)");
		Иначе
			СписокВозможныхЗначений.Добавить("(совм.)");			
		КонецЕсли; 
	ИначеЕсли мЭтоДоговорник Тогда	
		Если ВидДоговораГПХ = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
			СписокВозможныхЗначений.Добавить("(дог. подр.)");
			СписокВозможныхЗначений.Добавить("(дг.)");
		ИначеЕсли ВидДоговораГПХ = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
			СписокВозможныхЗначений.Добавить("(дог. авт.)");
			СписокВозможныхЗначений.Добавить("(дг.)");
		КонецЕсли;
	КонецЕсли;
	
	Элемент.СписокВыбора = СписокВозможныхЗначений;

КонецПроцедуры

Процедура ПостфиксНаименованияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПостфиксНаименования = " " + ВыбранноеЗначение;
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);

КонецПроцедуры

Процедура ПостфиксНаименованияПриИзменении(Элемент)
	
	ПостфиксНаименования = " " + СОКРЛП(ПостфиксНаименования);
	Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
	
КонецПроцедуры

Процедура ОбновитьНадписиХодаВыполненияИЗаголовки()

	// уточним надписи в зависимости от вида договора
	Если мЭтоТрудовойДоговор или мЭтоСотрудникБезДоговора Тогда
		
		ЭлементыФормы.НадписьМестоРаботы.Заголовок = "Место работы";
        
        ЭлементыФормы.НадписьХод2.Заголовок = "Место работы";
		ЭлементыФормы.НадписьХод3.Заголовок = "Оплата труда";
        ЭлементыФормы.НадписьХод4.Заголовок = "Доп. информация";
        ЭлементыФормы.НадписьХод5.Заголовок = "Завершение работы";
        
	ИначеЕсли мЭтоДоговорник Тогда		
                            
		ЭлементыФормы.НадписьМестоРаботы.Заголовок = "Вид договора";
        
        ЭлементыФормы.НадписьХод2.Заголовок = "Вид договора";
        ЭлементыФормы.НадписьХод3.Заголовок = "Доп. информация";
        ЭлементыФормы.НадписьХод4.Заголовок = "Завершение работы";
        ЭлементыФормы.НадписьХод5.Заголовок = "";
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьШрифтНадписиХодаВыполнения()

	ЖирныйШрифт  = Новый Шрифт(, 8, Истина, Ложь, Ложь, Ложь);
	ОбычныйШрифт = Новый Шрифт(, 8, Ложь, Ложь, Ложь, Ложь);
    
	Если мЭтоТрудовойДоговор Тогда
		
		ЭлементыФормы.НадписьХод1.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод2.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод3.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод4.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод5.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, ЖирныйШрифт, ОбычныйШрифт);
		
	ИначеЕсли мЭтоДоговорник Тогда
		
		ЭлементыФормы.НадписьХод1.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод2.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод3.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация, ЖирныйШрифт, ОбычныйШрифт);
		ЭлементыФормы.НадписьХод4.Шрифт = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, ЖирныйШрифт, ОбычныйШрифт);
		
	КонецЕсли;
    
КонецПроцедуры

Процедура СоздатьПриказОПриемеПриИзменении(Элемент)
	
	ОбработатьИзменениеФлагаСоздатьДокумент();
	
КонецПроцедуры

Процедура СоздатьДоговорПриИзменении(Элемент)
	
	ОбработатьИзменениеФлагаСоздатьДокумент();
	
КонецПроцедуры

Процедура ВидДоговораГПХПриИзменении(Элемент)
	
	ЗаполнитьДанныеДоговораГПХ();
	
КонецПроцедуры


Процедура ВидАвторскогоДоговораПриИзменении(Элемент)
	
	ПроведениеРасчетов.ЗаполнитьСпискиКодовДоходовВычетовПоДоговорам(мСписокВыбораВычетов,мСписокАвторскихВознаграждений,ВидДоговораГПХ,ВидАвторскогоДоговора);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеНачисленияОрганизаций.КодДоходаНДФЛ
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|ГДЕ
	|	ДополнительныеНачисленияОрганизаций.Ссылка = &Ссылка
	|	И ДополнительныеНачисленияОрганизаций.КодДоходаНДФЛ В(&СписокАвторскихВознаграждений)";
	Запрос.УстановитьПараметр("СписокАвторскихВознаграждений", мСписокАвторскихВознаграждений);
	Запрос.УстановитьПараметр("Ссылка", ВидРасчетаДоговорГПХ);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если ВидАвторскогоДоговора = Перечисления.ВидыАвторскогоДоговора.АвторскогоЗаказа Тогда
			ВидРасчетаДоговорГПХ = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.АвторскийДоговор;
			
		ИначеЕсли ВидАвторскогоДоговора = Перечисления.ВидыАвторскогоДоговора.Лицензионный Тогда
			ВидРасчетаДоговорГПХ = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ЛицензионныйДоговор;
			
		Иначе // ВидАвторскогоДоговора = Перечисления.ВидыАвторскогоДоговора.ОбОтчужденииИсключительныхПрав
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	ДополнительныеНачисленияОрганизаций.Ссылка
			|ИЗ
			|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
			|ГДЕ
			|	ДополнительныеНачисленияОрганизаций.КодДоходаНДФЛ.Код = ""1301""";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ВидРасчетаДоговорГПХ = Выборка.Ссылка;
			Иначе
				ВидРасчетаДоговорГПХ = "";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ВидРасчетаДоговорГПХНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", ЭтаФорма, "дляДокументаДоговорНаВыполнениеРаботСФизЛицом");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;

	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Значение = мСписокАвторскихВознаграждений;
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура ВидРасчетаДоговорГПХАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("КодДоходаНДФЛ, СпособРасчета",мСписокАвторскихВознаграждений, Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой), Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"));
КонецПроцедуры

Процедура ВидРасчетаДоговорГПХОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("КодДоходаНДФЛ, СпособРасчета",мСписокАвторскихВознаграждений, Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"), Ложь, Ложь, Неопределено, Ложь);
	
КонецПроцедуры

Процедура ДатаДоговораПриИзменении(Элемент)
	
	ПроверитьНомерТрудовогоДоговора(мДатаДоговора);
	мДатаДоговора = ДатаДоговора;
	
КонецПроцедуры

Процедура ОбособленноеПодразделениеПриИзменении(Элемент)
			
	СотрудникиОрганизацийКлиент.ОбработкаРеквизитовТрудовогоДоговора(ЭтаФорма);

	СотрудникиОрганизацийКлиент.ФормаЭлементаОбособленноеПодразделениеПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры // ОбособленноеПодразделениеПриИзменении

Процедура ОбособленноеПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаОбособленноеПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры //ОбособленноеПодразделениеНачалоВыбора

Процедура НачисленияУпрПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчетаУпр, Элемент.Данные = "НачисленияУпр");
	КонецЦикла;
	
КонецПроцедуры

Процедура НачисленияУпрВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("НачисленияУпр",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчетаУпр, мВалютаУправленческогоУчета);
	
КонецПроцедуры

Процедура НачисленияУпрВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УправленческиеНачисления.ПолучитьФормуВыбора("ФормаВыбора", ЭлементыФормы.НачисленияУпр, "дляДокументаПриемНаРаботу");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = мСписокНедоступныхРасчетов;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура НачисленияУпрВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УправленческиеНачисления", "Не (Ссылка В(&СпВидовРасчета))", Новый Структура("СпВидовРасчета", мСписокНедоступныхРасчетов), СтандартнаяОбработка);	
	
КонецПроцедуры

Процедура НачисленияУпрОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") Тогда
		Элемент.ТекущаяСтрока.ВидРасчета = ВыбранноеЗначение;
		РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("НачисленияУпр",ВыбранноеЗначение, ЭлементыФормы, мСведенияОВидахРасчетаУпр, мВалютаУправленческогоУчета);		
	КонецЕсли
	
КонецПроцедуры

Процедура УдержанияУпрВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("УдержанияУпр",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчетаУпр, мВалютаУправленческогоУчета);		
	
КонецПроцедуры

Процедура УдержанияУпрВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УправленческиеУдержания", "Не (Ссылка В(&СпВидовРасчета))", Новый Структура("СпВидовРасчета", мСписокНедоступныхРасчетов), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура УдержанияУпрПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчетаУпр, Элемент.Данные = "Начисления");
	КонецЦикла;

КонецПроцедуры

Процедура ЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СотрудникиОрганизацийКлиент.ФормаЭлементаЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// роль расчетчика реглучета
	мДоступнаРольРасчетчикаРегл = РольДоступна("РасчетчикРегламентированнойЗарплаты")
									или РольДоступна("УдалитьРасчетчикРегламентированнойЗарплатыБезОграниченияПрав");
	
	мДоступныРолиУпрУчета = РольДоступна("КадровикУправленческихДанных") или РольДоступна("РасчетчикУправленческойЗарплаты")
							или РольДоступна("УдалитьКадровикУправленческихДанныхБезОграниченияПрав") или РольДоступна("УдалитьРасчетчикУправленческойЗарплатыБезОграниченияПрав");
							
	мДоступныРолиРеглУчета = мДоступнаРольРасчетчикаРегл или РольДоступна("КадровикРегламентированныхДанных") или РольДоступна("УдалитьКадровикРегламентированныхДанныхБезОграниченияПрав");
							
	мПолныеПрава = РольДоступна("ПолныеПрава");						
		
	мЕстьОграниченияПравДоступаНаУровнеЗаписей = СотрудникиОрганизацийКлиент.ЕстьОграничениеПравДоступаНаУровнеЗаписейПоФизлицам();
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	Если Не ЗначениеЗаполнено(ВидДоговора) Тогда
		ВидДоговора  = Перечисления.ВидыДоговоровСФизЛицами.ТрудовойДоговор;
	КонецЕсли;
	
	мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
	мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);
	
	// заполним, но если реквизиты будут не нужны очистим их перед записью сотрудника
	ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы;
	ЗанимаемыхСтавок = 1;
	
	// предустановим вид договора ГПХ на форме помощника
	ВидДоговораГПХ = Перечисления.ВидыДоговоровСФизЛицами.Подряда;
	
	Если ВидДоговора <> Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий Тогда
		СотрудникиОрганизацийКлиент.ПроверитьИПодобратьОрганизациюПередОткрытиемФормы(ЭтаФорма);	
	КонецЕсли;
	
	ВалютаТарифнойСтавки =  мВалютаРегламентированногоУчета;
    
    ОбработатьИзменениеВидаДоговора();
	// заполним дату договора сегодняшней датой
	ДатаДоговора = ОбщегоНазначения.ПолучитьРабочуюДату();
	мДатаДоговора = ДатаДоговора; //для правильной автонумерации номера трудового договора
	
	мКартинкаФизлицо = БиблиотекаКартинок["ФизическиеЛица32"];
	мКартинкаСотрудник = БиблиотекаКартинок["Сотрудники32"];
	мКартинкаПриказ = БиблиотекаКартинок["ЖурналКоричневый32"];
	мКартинкаДоговораГПХ = Новый Картинка;
	
	мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;

	мСписокПредопределенныхВР = ПроведениеРасчетов.ПредопределенныеНачисленияОрганизации();

	мНаборЗаписейГражданство	= РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
	мНаборЗаписейИнвалидность	= РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();

	Если мДоступнаРольРасчетчикаРегл или мПолныеПрава Тогда
		мНаборЗаписейЛичныйВычет 	= РегистрыСведений.НДФЛСтандартныеВычетыФизлиц.СоздатьНаборЗаписей();
		мНаборЗаписейВычетыНаДетей 	= РегистрыСведений.НДФЛСтандартныеВычетыНаДетей.СоздатьНаборЗаписей();
		мНаборЗаписейДоходыПредыдущегоМестаРаботы = РегистрыСведений.НДФЛДоходыПредыдущегоМестаРаботы.СоздатьНаборЗаписей();
		мНаборЗаписейСтатусНалогоплательщика = РегистрыСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей();
	ИначеЕсли мДоступныРолиРеглУчета Тогда
		мНаборЗаписейЛичныйВычет 	= РегистрыСведений.НДФЛСтандартныеВычетыФизлиц.СоздатьНаборЗаписей();
		мНаборЗаписейВычетыНаДетей 	= РегистрыСведений.НДФЛСтандартныеВычетыНаДетей.СоздатьНаборЗаписей();
		мНаборЗаписейДоходыПредыдущегоМестаРаботы = Неопределено;
		мНаборЗаписейСтатусНалогоплательщика = РегистрыСведений.СтатусФизЛицКакНалогоплательщиковНДФЛ.СоздатьНаборЗаписей();
	Иначе
		мНаборЗаписейЛичныйВычет 	= Неопределено;
		мНаборЗаписейВычетыНаДетей 	= Неопределено;
		мНаборЗаписейДоходыПредыдущегоМестаРаботы = Неопределено;
		мНаборЗаписейСтатусНалогоплательщика = Неопределено;
	КонецЕсли;
	ЭлементыФормы.НадписьСтандартныеНалоговыеВычеты.Видимость = мДоступныРолиРеглУчета или мПолныеПрава;

	мПредоставлятьВычеты = Ложь; 
	
	СотрудникОбъект = Справочники.СотрудникиОрганизаций.СоздатьЭлемент();
	
	Если ПараметрыОткрытия <> Неопределено Тогда
		Физлицо = ПараметрыОткрытия.Физлицо;
		ФизлицоОбъект = Физлицо.ПолучитьОбъект();
		ВыборФизлица = Истина;
		ФизлицоОбработано = Истина;
		ОбработатьВыборФизлица();
	Иначе
		ФизлицоОбъект   = Справочники.ФизическиеЛица.СоздатьЭлемент();
	КонецЕсли;

КонецПроцедуры

Процедура ПриОткрытии()
	
	// установим видимость переключателя в зависимости от того, что передали в форму при открытии
	РежимСверткиЭУ = ?(СоздатьДокумент, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	ЭлементыФормы.ПанельСоздатьПриказ.Свертка = РежимСверткиЭУ;
	ЭлементыФормы.ПанельСоздатьПриказУправленческий.Свертка = РежимСверткиЭУ;
	ЭлементыФормы.СоздатьДоговор.Видимость = СоздатьДокумент;
	ЭлементыФормы.ПанельУсловияДоговораГПХ.Видимость = СоздатьДокумент;
	ЭлементыФормы.ПанельУсловияПриемаУпр.Видимость = СоздатьДокумент;
	
	ЭлементыФормы.БезДоговора.Видимость = глЗначениеПеременной("глИспользоватьУправленческийУчетЗарплаты") и (мПолныеПрава или мДоступныРолиУпрУчета или ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.ДоговорУправленческий);
	
	мНеСоздаватьДокумент = Не СоздатьДокумент;
	ОбработатьИзменениеФлагаСоздатьДокумент();
	
	ЭлементыФормы.КоманднаяПанельДополнительныеДействия.Кнопки.ШагНазад.Доступность = Ложь;
	
	ЭлементыФормы.ПанельГруппаДоступа.Видимость = мЕстьОграниченияПравДоступаНаУровнеЗаписей;
	УстановитьТекстИнформационнойНадписиГруппаДоступа();
	
	мМассивЭУ = Новый Массив();
	Для Сч = 1 По 6 Цикл
		мМассивЭУ.Добавить(ЭлементыФормы.ПерсональныеНадбавки.Колонки["Валюта"+Сч]);
		мМассивЭУ.Добавить(ЭлементыФормы.НачисленияУпр.Колонки["Валюта"+Сч]);
		мМассивЭУ.Добавить(ЭлементыФормы.УдержанияУпр.Колонки["Валюта"+Сч]);
	КонецЦикла;
	мМассивЭУ.Добавить(ЭлементыФормы.НадписьВалютаТарифнойСтавки);
	мМассивЭУ.Добавить(ЭлементыФормы.ВалютаТарифнойСтавки);
	мМассивЭУ.Добавить(ЭлементыФормы.ВалютаДоговораГПХ);
	мМассивЭУ.Добавить(ЭлементыФормы.НадписьВалютаДоговораГПХ);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	мМассивЭУЕНВД = Новый Массив();
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.ОтнесениеРасходовКДеятельностиЕНВД);
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.НадписьОтнесениеРасходовКДеятельностиЕНВД);
	НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(ДатаНачалаДоговораГПХ), Организация);
	БухгалтерскийУчетДополнительный.УстановитьВидимостьРеквизитовЕНВД(мМассивЭУЕНВД, Организация, ДатаНачалаДоговораГПХ, глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"));
	
	ТекущийЭлемент = ЭлементыФормы.Фамилия;
	
	мСтруктураПараметровОтбораОсновныхВР = РаботаСДиалогамиПереопределяемый.ПолучитьСтруктуруОтборовОсновногоНачисленияСотрудника(ВидДоговора);
	мСтруктураПараметровОтбораНадбавок   = РаботаСДиалогамиПереопределяемый.ПолучитьСтруктуруОтборовНадбавокСотрудника(ВидДоговора);
	
	ОбработатьИзменениеОрганизации();
	
	ОбновитьНадписиХодаВыполненияИЗаголовки();
	ЭлементыФормы.НадписьХод1.Шрифт = Новый Шрифт(, 8, Истина, Ложь, Ложь, Ложь);
	
	Модифицированность = Ложь;
	
	// запомним организацию
	мБылаОрганизация = Организация;
	
	ЭлементыФормы.ЯвляетсяСтудентомРаботающимВСтудотряде.Видимость = Константы.ИспользуетсяТрудРаботающихВСтудотряде.Получить();
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Отказ = Ложь;
	
	Если Модифицированность Тогда
		Ответ = Вопрос("При закрытии формы все введенные данные будут потеряны. Закрыть форму?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
		КонецЕсли; 
	КонецЕсли;	
	
КонецПроцедуры


Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытаФормаВыбораФизлиц" Тогда
		
		Если ЗначениеЗаполнено(Параметр) Тогда
			Физлицо = Параметр;
			ФизлицоОбъект = Параметр.ПолучитьОбъект();
			ВыборФизлица = Истина;
		КонецЕсли;
		
		ФизлицоОбработано = Истина;
		ОбработатьВыборФизлица();
		
	ИначеЕсли ИмяСобытия =  "ИзмененыВычетыНДФЛ" и Источник = ЭтаФорма Тогда	
		
		мПредоставлятьВычеты = Параметр.ПредоставлятьВычеты;
		мДатаПредоставленияВычетов = Параметр.ДатаПредоставленияВычетов;
		
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ ОТОБРАЖЕНИЯ ДАННЫХ НА СТРАНИЦАХ

// процедура вызывается всегда после смены страницы
// 
Процедура ОбработатьОтображениеНовойСтраницы()

	Если мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема Тогда	
			
		Если ПустаяСтрока(Код) Тогда
			// если табельный номер еще не присвоен, то получим очередной
			Код = ПолучитьОчереднойТабельныйНомер();
		КонецЕсли;
		
		Если ПустаяСтрока(Наименование) Тогда
			Наименование = ПроцедурыУправленияПерсоналом.УстановитьНаименованиеСотрудника(ФизлицоОбъект, ПостфиксНаименования);
		КонецЕсли;
		
		Если мЭтоДоговорник Тогда	
			
			ЭлементыФормы.ПанельУсловияПриема.ТекущаяСтраница = ЭлементыФормы.ПанельУсловияПриема.Страницы.ДоговорПодряда;
			ЭлементыФормы.НадписьМестоРаботы.Заголовок = "Вид договора";
			ТекущийЭлемент = ЭлементыФормы.ВидДоговораГПХ;
			
			ЗаполнитьДанныеДоговораГПХ();
			
		ИначеЕсли мЭтоТрудовойДоговор Тогда
			
			ЭлементыФормы.ПанельУсловияПриема.ТекущаяСтраница = ЭлементыФормы.ПанельУсловияПриема.Страницы.ТрудовойДоговор;
			
			ТекущийЭлемент = ЭлементыФормы.ПодразделениеОрганизации;
			
			ЗаполнитьДанныеТрудовогоДоговора();
			
		ИначеЕсли мЭтоСотрудникБезДоговора Тогда
			
			ЭлементыФормы.ПанельУсловияПриема.ТекущаяСтраница = ЭлементыФормы.ПанельУсловияПриема.Страницы.ДоговорУправленческий;
			Если Не ЗначениеЗаполнено(ЗанимаемыхСтавокУпр) Тогда
				ЗанимаемыхСтавокУпр = 1;
			КонецЕсли;
			
		КонецЕсли;	
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда Тогда
		
		Если мЭтоТрудовойДоговор Тогда
			ЭлементыФормы.ПанельОплатаТруда.ТекущаяСтраница = ЭлементыФормы.ПанельОплатаТруда.Страницы.ТрудовойДоговор;
		ИначеЕсли мЭтоСотрудникБезДоговора Тогда  
			ЭлементыФормы.ПанельОплатаТруда.ТекущаяСтраница = ЭлементыФормы.ПанельОплатаТруда.Страницы.ДоговорУправленческий;
		КонецЕсли;	
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация Тогда	
		
		Если мЭтоСотрудникБезДоговора Тогда
			ЭлементыФормы.ПанельИННПФР.Свертка = РежимСверткиЭлементаУправления.Верх;
			ЭлементыФормы.ПанельДопИнформация.Свертка = РежимСверткиЭлементаУправления.Верх;
		Иначе
			ЭлементыФормы.ПанельИННПФР.Свертка = РежимСверткиЭлементаУправления.Нет;
			ЭлементыФормы.ПанельДопИнформация.Свертка = РежимСверткиЭлементаУправления.Нет;
			Если мЭтоТрудовойДоговор Тогда
				ЭлементыФормы.ПанельДопИнформация.ТекущаяСтраница = ЭлементыФормы.ПанельДопИнформация.Страницы.ТрудовойДоговор;
			ИначеЕсли мЭтоДоговорник Тогда
				ЭлементыФормы.ПанельДопИнформация.ТекущаяСтраница = ЭлементыФормы.ПанельДопИнформация.Страницы.ДоговорПодряда;
			КонецЕсли;	
		КонецЕсли;
			
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово Тогда	
		
		ЭлементыФормы.НадписьИнформация1.Заголовок = "";
		ЭлементыФормы.НадписьИнформация2.Заголовок = "";
		ЭлементыФормы.НадписьИнформация3.Заголовок = "";
		ЭлементыФормы.НадписьИнформация4.Заголовок = "";
		ПустаяКартинка = Новый Картинка;
		ЭлементыФормы.НадписьИнформация1.Картинка = ПустаяКартинка;
		ЭлементыФормы.НадписьИнформация2.Картинка = ПустаяКартинка;
		ЭлементыФормы.НадписьИнформация3.Картинка = ПустаяКартинка;
		ЭлементыФормы.НадписьИнформация4.Картинка = ПустаяКартинка;
		
		СписокСообщений = Новый СписокЗначений;
		Если НЕ ВыборФизлица Тогда
			СписокСообщений.Добавить(мКартинкаФизлицо, " личные данные " + ФизлицоОбъект.Наименование);
		КонецЕсли;
		СписокСообщений.Добавить(мКартинкаСотрудник, " запись о сотруднике");
		Если СоздатьДокумент Тогда
			Если мЭтоДоговорник Тогда
				СписокСообщений.Добавить(мКартинкаДоговораГПХ, " договора на выполнение работ");
			Иначе
				СписокСообщений.Добавить(мКартинкаПриказ, " приказ о приеме на работу");	
			КонецЕсли;	
		КонецЕсли;
		
		Для Сч = 0 По СписокСообщений.Количество() - 1 Цикл
			СтрокаСообщения = СписокСообщений.Получить(Сч).Представление;
			Картинка = СписокСообщений.Получить(Сч).Значение;
			Если Сч = 0 Тогда
				ЭлементыФормы.НадписьИнформация1.Заголовок = СтрокаСообщения;
				ЭлементыФормы.НадписьИнформация1.Картинка = Картинка;
			ИначеЕсли Сч = 1 Тогда
				ЭлементыФормы.НадписьИнформация2.Заголовок = СтрокаСообщения;
				ЭлементыФормы.НадписьИнформация2.Картинка = Картинка;
			ИначеЕсли Сч = 2 Тогда
				ЭлементыФормы.НадписьИнформация3.Заголовок = СтрокаСообщения;
				ЭлементыФормы.НадписьИнформация3.Картинка = Картинка;
			ИначеЕсли Сч = 3 Тогда	
				ЭлементыФормы.НадписьИнформация4.Заголовок = СтрокаСообщения;
				ЭлементыФормы.НадписьИнформация4.Картинка = Картинка;
			КонецЕсли;	
		КонецЦикла;	
		
	КонецЕсли;
	
	ОбновитьШрифтНадписиХодаВыполнения();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНОЙ ПАНЕЛИ

Процедура ОсновныеДействияФормыШагВперед(Кнопка)
	
	ЗаписатьДанные = Ложь;
	
	// обработаем нажатие кнопки Шаг вперед
	Если мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные Тогда
		
		//проверим возможность перехода к следующему шагу
		
		СообщениеОбОшибке = "";
		Если Не ЗначениеЗаполнено(Фамилия) Тогда
			СообщениеОбОшибке = "Не указана Фамилия" + Символы.ПС;	
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Имя) Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + "Не указано Имя" + Символы.ПС;	
		КонецЕсли;
		
		Если Не мЭтоСотрудникБезДоговора и  Не ЗначениеЗаполнено(Организация) Тогда
			СообщениеОбОшибке = СообщениеОбОшибке + "Не указана организация" + Символы.ПС;	
		КонецЕсли;
		
		Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
			Предупреждение(СообщениеОбОшибке);
			Возврат;	
		КонецЕсли;	
		
		// при переходе со страницы ПерсональныеДанные проверим физлицо на дубли
		// и установим режим ввода физлица
		Если Не ФизлицоОбработано Тогда
			ПроверитьФизлицо();
		КонецЕсли;
		
		// определим текущую страницу
		Если мЭтоСотрудникБезДоговора Тогда
			Если ЭлементыФормы.ПанельСоздатьПриказУправленческий.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
				//при запуске помощника установлено не создавать документ
				Если  мЕстьОграниченияПравДоступаНаУровнеЗаписей Тогда
					мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация;
				Иначе
					мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово;
				КонецЕсли;
			Иначе
				мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
			КонецЕсли;
		Иначе	
			мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
		КонецЕсли;
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема Тогда
        
        //проверим возможность перехода к следующему шагу
        СообщениеОбОшибке = "";
		Если СоздатьДокумент Тогда
			Если мЭтоДоговорник Тогда
				Если Не ЗначениеЗаполнено(ДатаНачалаДоговораГПХ) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указана Дата начала договора" + Символы.ПС;
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(ДатаОкончанияДоговораГПХ) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указана Дата окончания договора" + Символы.ПС;
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(ВидРасчетаДоговорГПХ) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указано Начисление по договору" + Символы.ПС;
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(ХарактерОплаты) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указана Оплата по договору" + Символы.ПС;
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(СуммаЗаРаботу) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указана Стоимость" + Символы.ПС;
				КонецЕсли;
			ИначеЕсли мЭтоТрудовойДоговор Тогда	
				Если Не ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указано Подразделение" + Символы.ПС;
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(Должность) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указана Должность" + Символы.ПС;
				КонецЕсли;    
				Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указана Дата приема на работу" + Символы.ПС;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ГрафикРаботы) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указан График работы" + Символы.ПС;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЗанимаемыхСтавок) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указано Количество занимаемых ставок" + Символы.ПС;
				КонецЕсли;
			ИначеЕсли мЭтоСотрудникБезДоговора Тогда
				Если Не ЗначениеЗаполнено(ПодразделениеУпр) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указано Подразделение" + Символы.ПС;
				КонецЕсли;	
				Если Не ЗначениеЗаполнено(ДолжностьУпр) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указана Должность" + Символы.ПС;
				КонецЕсли;    
				Если Не ЗначениеЗаполнено(ДатаПриемаУпр) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указана Дата приема на работу" + Символы.ПС;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ГрафикРаботыУпр) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указан График работы" + Символы.ПС;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ЗанимаемыхСтавокУпр) Тогда
					СообщениеОбОшибке = СообщениеОбОшибке + "Не указано Количество занимаемых ставок" + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
        
        Если Не ПустаяСтрока(СообщениеОбОшибке) Тогда
			Предупреждение(СообщениеОбОшибке);
			Возврат;	
		КонецЕсли;
		
		Если СоздатьДокумент  и мПроверкаШтатногоРасписания и мЭтоТрудовойДоговор Тогда
			// все поля заполнены, теперь проверим соответсвие должности и подразделения штатному расписанию
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Число"));
			ПараметрыСтроки = Новый КвалификаторыЧисла(1);
			ОписаниеТипаНомерСтроки = Новый ОписаниеТипов(МассивТипов, , ПараметрыСтроки);			
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("Дата"));
			ОписаниеТипаДатыНачала = Новый ОписаниеТипов(МассивТипов);			
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
			ОписаниеТипаПодразделение = Новый ОписаниеТипов(МассивТипов);			
			
			МассивТипов = Новый Массив;
			МассивТипов.Добавить(Тип("СправочникСсылка.ДолжностиОрганизаций"));
			ОписаниеТипаДолжность = Новый ОписаниеТипов(МассивТипов);			
			
			ТаблицаСтрокШтатногоРасписания =  Новый ТаблицаЗначений;
			ТаблицаСтрокШтатногоРасписания.Колонки.Добавить("НомерСтроки", ОписаниеТипаНомерСтроки);
			ТаблицаСтрокШтатногоРасписания.Колонки.Добавить("ДатаНачала", ОписаниеТипаДатыНачала);
			ТаблицаСтрокШтатногоРасписания.Колонки.Добавить("ПодразделениеОрганизации", ОписаниеТипаПодразделение);
			ТаблицаСтрокШтатногоРасписания.Колонки.Добавить("Должность", ОписаниеТипаДолжность);
			
			СтрокаШтатногоРаписания = ТаблицаСтрокШтатногоРасписания.Добавить();
			СтрокаШтатногоРаписания.НомерСтроки              = 1;
			СтрокаШтатногоРаписания.ДатаНачала               = ДатаНачала;
			СтрокаШтатногоРаписания.ПодразделениеОрганизации = ПодразделениеОрганизации;
			СтрокаШтатногоРаписания.Должность                = Должность;
			
			ДанныеОСтавках = ПолныеПраваЗК.ВременноСвободныеСтавкиСтрокШтатногоРасписания(ТаблицаСтрокШтатногоРасписания, ОбщегоНазначения.ГоловнаяОрганизация(Организация));
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ДанныеОСтавках", ДанныеОСтавках);
			Запрос.УстановитьПараметр("ПодразделениеОрганизации", ПодразделениеОрганизации);
			Запрос.УстановитьПараметр("Должность", Должность);
			Запрос.УстановитьПараметр("ДатаПриема", ДатаНачала);
			Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			Запрос.Текст =
			"ВЫБРАТЬ
			|	СтрокиДокумента.ОсвобожденныеСтавки,
			|	СтрокиДокумента.НомерСтроки КАК НомерСтроки
			|ПОМЕСТИТЬ ОсвобожденныеСтавки
			|ИЗ
			|	&ДанныеОСтавках КАК СтрокиДокумента
			|
			|ИНДЕКСИРОВАТЬ ПО
			|	НомерСтроки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ЕСТЬNULL(ШтатноеРасписание.КоличествоСтавок, 0) - ЕСТЬNULL(Вакансии.КоличествоСтавок, 0) + ЕСТЬNULL(ОсвобожденныеСтавкиСотрудников.ОсвобожденныеСтавки, 0) КАК ОстатокСтавок
			|ИЗ
			|	РегистрСведений.ШтатноеРасписаниеОрганизаций.СрезПоследних(
			|			&ДатаПриема,
			|			ПодразделениеОрганизации = &ПодразделениеОрганизации
			|				И Должность = &Должность) КАК ШтатноеРасписание
			|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
			|			СУММА(ВЫБОР
			|					КОГДА Вакансии.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
			|						ТОГДА Вакансии.КоличествоСтавок
			|					ИНАЧЕ -Вакансии.КоличествоСтавок
			|				КОНЕЦ) КАК КоличествоСтавок
			|		ИЗ
			|			РегистрНакопления.ЗанятыеШтатныеЕдиницыОрганизаций КАК Вакансии
			|		ГДЕ
			|			Вакансии.ПодразделениеОрганизации = &ПодразделениеОрганизации
			|			И Вакансии.Должность = &Должность
			|			И Вакансии.Период <= &ДатаПриема) КАК Вакансии
			|		ПО (ИСТИНА)
			|		ЛЕВОЕ СОЕДИНЕНИЕ ОсвобожденныеСтавки КАК ОсвобожденныеСтавкиСотрудников
			|		ПО (ИСТИНА)";
			Выборка = Запрос.Выполнить().Выбрать();
			
			НетСвободныхСтавок = Истина;
			Если Выборка.Следующий() Тогда
				НетСвободныхСтавок = Не Выборка.ОстатокСтавок > 0;	
			КонецЕсли;	
			
			Если НетСвободныхСтавок Тогда
				
				ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
				ОбработкаКомментариев.УдалитьСообщения();
				
				Расшифровки = Новый Массив;
				// расшифровка сообщений представляет собой массив структур "Представление+Расшифровка"
				ОткрытьШтатноеРасписание = Новый Массив;
				ОткрытьШтатноеРасписание.Добавить("РаботаСДиалогамиЗК.ОткрытьФормуШтатноеРасписаниеОрганизаций");
				ОткрытьШтатноеРасписание.Добавить(Новый Структура("Организация, ПодразделениеОрганизации, Должность", Организация, ПодразделениеОрганизации, Должность));
				Расшифровки.Добавить(Новый Структура("Представление,Расшифровка", "штатном расписании", ОткрытьШтатноеРасписание));
				
				ОбщегоНазначения.ВывестиИнформациюОбОшибке(
				"В %% не предусмотрены ставки для приема сотрудника ! Подразделение: " + 
				ПодразделениеОрганизации + 
				", должность: " + Должность,
				 , "Внимание!", Перечисления.ВидыСообщений.Ошибка, Расшифровки);
				
				ОбработкаКомментариев.ПоказатьСообщения();
				Возврат;
			КонецЕсли;		
			
		КонецЕсли;	
        
        // определим текущую страницу
		Если мЭтоДоговорник Тогда
			мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация;
		ИначеЕсли мЭтоСотрудникБезДоговора и Не СоздатьДокумент Тогда
			Если  мЕстьОграниченияПравДоступаНаУровнеЗаписей Тогда
				мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация;
			Иначе
				мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово;
			КонецЕсли;
		Иначе
			мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда;
		КонецЕсли;	
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда Тогда
		
		Если мЕстьОграниченияПравДоступаНаУровнеЗаписей или Не мЭтоСотрудникБезДоговора Тогда
			мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация;
		Иначе
			мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово;
		КонецЕсли;
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация Тогда
		
		мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово;
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово Тогда
		
		ЗаписатьДанные = Истина;
		
	КонецЕсли;
	
	Если ЗаписатьДанные Тогда
        
        Если СохранитьДанные() Тогда
            Закрыть();
			Оповестить("ЗаписанСотрудник", Новый Структура("Сотрудник, Физлицо", Ссылка, Физлицо), ЭтаФорма);
		Иначе
			ОбработкаКомментариев.ПоказатьСообщения();
			// попытка завершения работы оказалась не удачной, заполним реквизиты, которые очищали
			Если мЭтоДоговорник Тогда
				ПодразделениеОрганизации = мПодразделениеДоговора;
				ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда;
			КонецЕсли;
			
			Если СоздатьДокумент Тогда
				Если мЭтоТрудовойДоговор Тогда
					ТекущееОбособленноеПодразделение = Справочники.Организации.ПустаяСсылка();
					ТекущееПодразделениеОрганизации  = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
					ТекущаяДолжностьОрганизации      = Справочники.ДолжностиОрганизаций.ПустаяСсылка();
					ДатаПриемаНаРаботу               = "";
				ИначеЕсли мЭтоСотрудникБезДоговора Тогда
					ТекущееПодразделениеКомпании = Справочники.Подразделения.ПустаяСсылка();
					ТекущаяДолжностьКомпании 	 = Справочники.ДолжностиОрганизаций.ПустаяСсылка();
					ДатаПриемаНаРаботуВКомпанию  = "";
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
				
		// установим нужную страницу
		ЭлементыФормы.ПанельДанные.ТекущаяСтраница = мТекущаяСтраница;
		
		ОбработатьОтображениеНовойСтраницы();
		
		ЭлементыФормы.КоманднаяПанельДополнительныеДействия.Кнопки.ШагНазад.Доступность = мТекущаяСтраница <> ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;
		
		ТекстКнопкиШагВперед = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, "Готово", "Далее");
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ШагВперед.Текст = ТекстКнопкиШагВперед;
		
		КартинкаКнопки = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, БиблиотекаКартинок.РаботаПоЗаявкеЗавершена, БиблиотекаКартинок.КартинкаСтрелкаВперед);
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ШагВперед.Картинка = КартинкаКнопки;
		
	КонецЕсли;	
		
КонецПроцедуры

Процедура ОсновныеДействияФормыШагНазад(Кнопка)
	
	Если мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово Тогда	
		
		Если мЭтоСотрудникБезДоговора и Не мЕстьОграниченияПравДоступаНаУровнеЗаписей Тогда
			Если ЭлементыФормы.ПанельСоздатьПриказУправленческий.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
				ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;
			ИначеЕсли НЕ СоздатьДокумент Тогда
				ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
			Иначе
				ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда;
			КонецЕсли;
		Иначе	
			ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация;
		КонецЕсли;

	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ДополнительнаяИнформация Тогда
		
		Если мЭтоДоговорник Тогда
			ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
		ИначеЕсли мЭтоСотрудникБезДоговора Тогда
			Если ЭлементыФормы.ПанельСоздатьПриказУправленческий.Свертка = РежимСверткиЭлементаУправления.Верх Тогда
				ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;
			ИначеЕсли НЕ СоздатьДокумент Тогда
				ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
			Иначе
				ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда;
			КонецЕсли;	
		Иначе
			ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда;
		КонецЕсли;
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ОплатаТруда Тогда
		
		ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема;
		
	ИначеЕсли мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.УсловияПриема Тогда
		
		ЭлементыФормы.ПанельДанные.ТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;
			
	КонецЕсли;
	
	мТекущаяСтраница = ЭлементыФормы.ПанельДанные.ТекущаяСтраница;
	
	ЭлементыФормы.КоманднаяПанельДополнительныеДействия.Кнопки.ШагНазад.Доступность = мТекущаяСтраница <> ЭлементыФормы.ПанельДанные.Страницы.ПерсональныеДанные;
	
	ТекстКнопкиШагВперед = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, "Готово", "Далее");
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ШагВперед.Текст = ТекстКнопкиШагВперед;
	
	КартинкаКнопки = ?(мТекущаяСтраница = ЭлементыФормы.ПанельДанные.Страницы.Готово, БиблиотекаКартинок.РаботаПоЗаявкеЗавершена, БиблиотекаКартинок.КартинкаСтрелкаВперед);
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ШагВперед.Картинка = КартинкаКнопки;
	
	ОбновитьШрифтНадписиХодаВыполнения();
	
КонецПроцедуры





////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
мСведенияОВидахРасчетаУпр = Новый Соответствие;
мСведенияОВидахРасчетаОснНачислений = Новый Соответствие;
мСтруктураПараметровОтбораОсновныхВР = Новый Структура;
мСтруктураПараметровОтбораНадбавок = Новый Структура;
	
мСписокНедоступныхРасчетов = Новый СписокЗначений;
мОбработкаПодбораПоСтрокеОрганизация					= Ложь;
мТекстПодбораПоСтрокеОрганизация						= "";
мПоследнееЗначениеЭлементаПодбораПоСтрокеОрганизация	= Неопределено;

мОбработкаПодбораПоСтроке								= Ложь;
мТекстПодбораПоСтроке									= "";
мПоследнееЗначениеЭлементаПодбораПоСтроке				= Неопределено;

мСписокВыбораВычетов = Новый СписокЗначений;
мСписокАвторскихВознаграждений = Новый СписокЗначений;

мДатаПредоставленияВычетов = Дата(1,1,1);