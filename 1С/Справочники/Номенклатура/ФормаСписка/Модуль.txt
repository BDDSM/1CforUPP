Перем мПустаяКартинка;
Перем тТипЦенДляПечати;

// Список значений строк - префиксов колонок с суммами.
Перем мСписокПрефиксовЦен;

// Соответсвие хранит структуры курсов валют.
Перем мСоответствиекурсовВалют;

// Количество колонок в табличном поле ТабличноеПолеОстаткиТоваров без учета колонок сумм.
Перем мКоличествоБазовыхКолонокОстаткиТоваров;

// объект для поиска данных
Перем мПоискОбъектовВСпискахДанных;


////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

//Процедура пересчитывает суммы номенклатуры по курсам
Процедура ПересчитатьВалютыОстатковНоменклатуры()
	
	Если НЕ ВВалютеЦены И ЗначениеЗаполнено(ВалютаЦены) Тогда
		СтруктураКурса = УправлениеЗапасами.ВернутьСтруктуруКурсВалюты(мСоответствиекурсовВалют, ВалютаЦены);
    КонецЕсли;

	УправлениеЗапасами.ПересчитатьОстаткиВВалюте(ОстаткиТоваров, мСписокПрефиксовЦен, СтруктураКурса, ВВалютеЦены, ВалютаЦены)

КонецПроцедуры

// Процедура обновляет таблицу остатков на складах, основываясь на текущей номенклатуре
Процедура ПоказатьОстаткиТоваров()

	Если ЭлементыФормы.ДействияФормы.Кнопки[0].Кнопки.ОстаткиТоваровНаСкладах.Пометка Тогда
		
		Если ЭлементыФормы.Список.ТекущиеДанные <> Неопределено
		   И НЕ ЭлементыФормы.Список.ТекущиеДанные.ЭтоГруппа Тогда
		   
			мСписокПрефиксовЦен = УправлениеЗапасами.ПолучитьСписокПрефиксовВыводимыхСумм(СписокЦенОстатков);
			УправлениеЗапасами.ПолучитьДеревоОстатковНоменклатуры(ОстаткиТоваров, ЭлементыФормы.Список.ТекущиеДанные.Ссылка, Истина, СписокЦенОстатков, , мСоответствиекурсовВалют);
			//Разворачиваем дерево
			Для Каждого СтрокаДереваОстатков Из ОстаткиТоваров.Строки Цикл
				ЭлементыФормы.ТабличноеПолеОстаткиТоваров.Развернуть(СтрокаДереваОстатков, Истина);
			КонецЦикла;
			РаботаСДиалогами.ОбновитьШапкиКолонокОстатков(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, ЭлементыФормы.Список.ТекущиеДанные.ЕдиницаХраненияОстатков);
			ПересчитатьВалютыОстатковНоменклатуры();
		Иначе
			ОстаткиТоваров.Строки.Очистить();
		КонецЕсли;
	
	КонецЕсли; 

КонецПроцедуры

Процедура УстановитьВидимостьОстатковНаСкладах()

	Если ЭлементыФормы.ДействияФормы.Кнопки[0].Кнопки.ОстаткиТоваровНаСкладах.Пометка Тогда
		
		ЭлементыФормы.РазделительОстатковНаСкладах.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		Если ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Высота = 0 Тогда
			ТекущийВерх = ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Верх;
			ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Верх = ТекущийВерх - 144;
			ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Высота = ТекущийВерх - ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Верх;
		КонецЕсли;
		
		ЭлементыФормы.РазделительОстатковНаСкладах.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.РазделительОстатковНаСкладах, ГраницаЭлементаУправления.Низ);
		
	Иначе
		
		ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельОстаткиТоваровНаСкладах, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.РазделительОстатковНаСкладах.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельОстаткиТоваровНаСкладах, ГраницаЭлементаУправления.Верх);
		
		ЭлементыФормы.ПанельОстаткиТоваровНаСкладах.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.РазделительОстатковНаСкладах.Свертка = РежимСверткиЭлементаУправления.Низ;
		
	КонецЕсли;
	
КонецПроцедуры

//Процедура полностью перестраивает дерево остатков
Процедура ПерестроитьДеревоОстатков()
	
	// структуры остатков надо восстановить
	ОстаткиТоваров = УправлениеЗапасами.СоздатьКолонкиДереваОстатков(СписокЦенОстатков);
	ПоказатьОстаткиТоваров();
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
	
КонецПроцедуры

// Процедура открывает необходимый отчет по текущий номенклатуре
//
Процедура ОткрытьОтчетПоТекущейНоменклатуре(НазваниеОтчета)
	
	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		// ничего нет
		Возврат;
	КонецЕсли;

	// получаем форму для построения отчета по остатку товара
	ТекущиеДанные = ЭлементыФормы.Список.ТекущиеДанные.Ссылка;
	ОтчетОстатки  = Отчеты[НазваниеОтчета].Создать();
	ФормаОтчета   = ОтчетОстатки.ПолучитьФорму(, ЭтаФорма, ЭтаФорма);
	
	ФормаОтчета.Открыть();
	ОтчетОстатки.УстановитьНачальныеНастройки();
	
	ТекОтбор = ОтчетОстатки.УниверсальныйОтчет.ПостроительОтчета.Отбор.Номенклатура;
	ТекОтбор.Использование =  Истина;
	ТекОтбор.Значение      = ТекущиеДанные;
	ТекОтбор.ВидСравнения  = ?(ТекущиеДанные.ЭтоГруппа, ВидСравнения.ВИерархии, ВидСравнения.Равно);
	
	ОтчетОстатки.УниверсальныйОтчет.ДатаКон = ТекущаяДата();
	ОтчетОстатки.СформироватьОтчет(ФормаОтчета.ЭлементыФормы.ПолеТабличногоДокументаРезультат);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ КОМАНДНОЙ ПАНЕЛИ

// Показывает/Скрывает табличное поле остатков товаров на складах
//
Процедура ДействияФормыОстаткиТоваровНаСкладах(Кнопка)
	
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	
	УстановитьВидимостьОстатковНаСкладах();
	
	Если Кнопка.Пометка Тогда
		ПоказатьОстаткиТоваров();
	КонецЕсли; 
	
КонецПроцедуры

// Обновляет содержимое картинки
//
Процедура ПоказатьОсновноеИзображение()

	Если ЭлементыФормы.ДействияФормы.Кнопки[0].Кнопки.Изображение.Пометка = Истина Тогда
		
		ТекущиеДанныеСписка = ЭлементыФормы.Список.ТекущиеДанные;
		
		Если НЕ ТекущиеДанныеСписка = Неопределено
		   И НЕ ТекущиеДанныеСписка.ЭтоГруппа
		   И НЕ ТекущиеДанныеСписка.ОсновноеИзображение.Пустая() Тогда
			ЭлементыФормы.ОсновноеИзображение.Картинка = ТекущиеДанныеСписка.ОсновноеИзображение.Хранилище.Получить();
		Иначе
			ЭлементыФормы.ОсновноеИзображение.Картинка = мПустаяКартинка;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Показывает или прячет панель основного изображения в зависимости от переменной мПоказыватьКартинку
//
Процедура ПоказатьСпрятатьПанельОсновногоИзображения()
	
	Если ЭлементыФормы.ДействияФормы.Кнопки[0].Кнопки.Изображение.Пометка Тогда
		
		ЭлементыФормы.РазделительКартинки.Свертка = РежимСверткиЭлементаУправления.Нет;
		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Нет;
		
		Если ЭлементыФормы.ПанельОсновногоИзображения.Высота = 0 Тогда
			ТекущийВерх = ЭлементыФормы.ПанельОсновногоИзображения.Верх;
			ЭлементыФормы.ПанельОсновногоИзображения.Верх = ТекущийВерх - 144;
			ЭлементыФормы.ПанельОсновногоИзображения.Высота = ТекущийВерх - ЭлементыФормы.ПанельОсновногоИзображения.Верх;
		КонецЕсли;
		
		ЭлементыФормы.РазделительКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельОсновногоИзображения.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.РазделительКартинки, ГраницаЭлементаУправления.Низ);
		
	Иначе
		
		// Картинка основного грида
		ЭлементыФормы.ПанельОсновногоИзображения.УстановитьПривязку(ГраницаЭлементаУправления.Верх, ЭлементыФормы.ПанельОсновногоИзображения, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.РазделительКартинки.УстановитьПривязку(ГраницаЭлементаУправления.Низ, ЭлементыФормы.ПанельОсновногоИзображения, ГраницаЭлементаУправления.Верх);
		
		ЭлементыФормы.ПанельОсновногоИзображения.Свертка = РежимСверткиЭлементаУправления.Низ;
		ЭлементыФормы.РазделительКартинки.Свертка = РежимСверткиЭлементаУправления.Низ;

	КонецЕсли;
		
	ПоказатьОсновноеИзображение();
	
КонецПроцедуры // ПоказатьСпрятатьПанельОсновногоИзображения()

// Обработчик события элемента КоманднаяПанельФормы.ДействиеСвойства.
//
Процедура ДействияФормыДействиеСвойства(Кнопка)

	Если ЭлементыФормы.Список.ТекущаяСтрока = неопределено Тогда
		Возврат;
	КонецЕсли;

	Форма = Обработки.ЗначенияСвойствОбъекта.ПолучитьФорму("ЗначенияСвойствОбъекта", ЭтаФорма, );

	Форма.ОбъектОтбораЗначений   = ЭлементыФормы.Список.ТекущаяСтрока;
	Форма.ОбъектОтбораНазначений = ЭлементыФормы.Список.ТекущаяСтрока;

	Форма.ПрочитатьЗаполнитьСвойстваИЗначения();
	Форма.Открыть();

КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.ДействиеКатегории.
//
Процедура ДействияФормыДействиеКатегории(Кнопка)

	Если ЭлементыФормы.Список.ТекущаяСтрока = неопределено Тогда
		Возврат;
	КонецЕсли;

	Форма = Обработки.КатегорииОбъекта.ПолучитьФорму("КатегорииОбъекта", ЭтаФорма, );

	Форма.ОбъектОтбораКатегорий = ЭлементыФормы.Список.ТекущаяСтрока;

	Форма.ПрочитатьЗаполнитьКатегорииОбъекта();
	Форма.Открыть();

КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.ДействиеОткрытьПрайсЛист.
//
Процедура ДействияФормыОткрытьПрайсЛист(Кнопка)

	ФормаПрайса = Обработки.ПечатьПрайсЛиста.ПолучитьФорму("ФормаЗаполнения");

	Если ЭлементыФормы.Список.ТекущаяСтрока<> Неопределено Тогда
		СписокНоменклатуры = Новый СписокЗначений;
		СписокНоменклатуры.Добавить(ЭлементыФормы.Список.ТекущаяСтрока.Ссылка);
		ФормаПрайса.мСписокНоменклатуры = СписокНоменклатуры;
	КонецЕсли;

	ФормаПрайса.Открыть();

КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.ДействиеЭтикетка.
//
Процедура НажатиеЭтикетка(Кнопка)

	Если ЭлементыФормы.Список.ТекущаяСтрока = Неопределено Тогда
		УправлениеРозничнойТорговлей.ПечатьЭтикеток();
	Иначе
		УправлениеРозничнойТорговлей.ПечатьЭтикеток(ЭлементыФормы.Список.ТекущаяСтрока.Ссылка);
	КонецЕсли;

КонецПроцедуры

// Обработчик события элемента КоманднаяПанельФормы.ДействиеЦенники.
//
Процедура ДействияФормыЦенники(Кнопка)

	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос("
	|ВЫБРАТЬ
	|	ИСТИНА КАК Печать,
	|	СпрНоменклатура.Ссылка КАК Номенклатура,
	|	&ПустаяХарактеристика КАК ХарактеристикаНоменклатуры,
	|	СпрНоменклатура.ЕдиницаХраненияОстатков КАК ЕдиницаИзмерения,
	|	0 КАК Цена,
	|	1 КАК Количество
	|ИЗ
	|	Справочник.Номенклатура КАК СпрНоменклатура
	|ГДЕ
	|	НЕ СпрНоменклатура.ЭтоГруппа
	|	И СпрНоменклатура.Ссылка В ИЕРАРХИИ (&Ссылка)
	|");

	Запрос.УстановитьПараметр("ПустаяХарактеристика", Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка());
	Запрос.УстановитьПараметр("Ссылка", ЭлементыФормы.Список.ТекущиеДанные.Ссылка);

	ОбработкаПечатьЦенников = Обработки.ПечатьЦенников.Создать();
	ОбработкаПечатьЦенников.Товары.Загрузить(Запрос.Выполнить().Выгрузить());

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ЗаполнитьЦены", Истина);

	ФормаПечатьЦенников = ОбработкаПечатьЦенников.ПолучитьФорму("Форма");
	ФормаПечатьЦенников.Параметр = СтруктураПараметров;
	ФормаПечатьЦенников.Открыть();

КонецПроцедуры // ДействияФормыЦенники()

// Обработчик события нажатия на кнопку Комплектующие.
//
Процедура ДействияФормыКомплектующие(Кнопка)

	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		// ничего нет
		Возврат;
	КонецЕсли;
	ТекущаяСтрокаСсылка = ЭлементыФормы.Список.ТекущаяСтрока;
	Если ТекущаяСтрокаСсылка = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Предупреждение("Не выбрана ни одна позиция (возможно фокус ввода находится на дереве групп)", , "Ошибка печати");
		Возврат;
	ИначеЕсли ТекущаяСтрокаСсылка.ЭтоГруппа Тогда
		возврат;
	КонецЕсли;

	МассивНоменклатуры = Новый Массив;
	МассивНоменклатуры.Добавить(ТекущаяСтрокаСсылка);
	ТабДокумент = РаботаСДиалогами.НапечататьКомплектующие(МассивНоменклатуры);

	Если ТабДокумент.ВысотаТаблицы > 0 Тогда
		УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, , , "Комплектующие", ТекущаяСтрокаСсылка);
	Иначе
		Предупреждение("Для "+СокрЛП(ТекущаяСтрокаСсылка)+" список комплектующих не задан!");
	КонецЕсли;

КонецПроцедуры // ДействияФормыКомплектующие()

// Обработчик события выбора пункта меню Доступности на складах.
//
Процедура ДействияФормыАнализДоступностиНаСкладах(Кнопка)
	
	ОткрытьОтчетПоТекущейНоменклатуре("АнализДоступностиТоваровНаСкладах");
	
КонецПроцедуры

// Обработчик события выбора пункта меню Резервы на складах.
//
Процедура ДействияФормыРезервыНаСкладах(Кнопка)
	
	ОткрытьОтчетПоТекущейНоменклатуре("ТоварыВРезервеНаСкладах");
	
КонецПроцедуры

// Обработчик события выбора пункта меню Ведомость на складах.
//
Процедура ДействияФормыВедомостьНаСкладах(Кнопка)
	
	ОткрытьОтчетПоТекущейНоменклатуре("ВедомостьТоварыНаСкладах");
	
КонецПроцедуры

// Обработчик события выбора пункта меню Продажи.
//
Процедура ДействияФормыПродажи(Кнопка)
	
	ОткрытьОтчетПоТекущейНоменклатуре("Продажи");
	
КонецПроцедуры

// Обработчик события выбора пункта меню Валовая прибыль.
//
Процедура ДействияФормыВаловаяПрибыль(Кнопка)
	
	ОткрытьОтчетПоТекущейНоменклатуре("ВаловаяПрибыль");
	
КонецПроцедуры

Процедура ДействияФормыПраваДоступаПользователейКТекущемуЭлементу(Кнопка)
	
	Если Не ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		Если ЭлементыФормы.Список.ТекущиеДанные.ЭтоГруппа Тогда
			НастройкаПравДоступа.РедактироватьПраваДоступа(ЭлементыФормы.Список.ТекущиеДанные.Ссылка);
		Иначе
			Предупреждение("Можно настраивать права доступа только для групп справочника Номенклатура");
		КонецЕсли;	
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыПраваДоступаПользователейКТекущемуЭлементу()

Процедура ДействияФормыПраваДоступаПользователейКоВсемуСправочнику(Кнопка)
	
	НастройкаПравДоступа.РедактироватьПраваДоступа(Справочники.Номенклатура.ПустаяСсылка());
	
КонецПроцедуры // ДействияФормыПраваДоступаПользователейКоВсемуСправочнику()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура ДействияФормыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура - обработчик события "ПриАктивизацииСтроки" элемента формы Список.
//
Процедура СписокПриАктивизацииСтроки(Элемент)

	ПоказатьОсновноеИзображение();
	ПоказатьОстаткиТоваров();
	ЭлементыФормы.Дерево.ТекущаяСтрока = ЭлементыФормы.Список.ТекущийРодитель;

КонецПроцедуры

Процедура ДействияФормыИзображение(Кнопка)

	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПоказатьСпрятатьПанельОсновногоИзображения();

КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ТипыЦенНоменклатуры") Тогда
		тТипЦенДляПечати = ЗначениеВыбора;
		
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ХранилищеДополнительнойИнформации") Тогда
		ПоказатьОсновноеИзображение();
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии()

	ПоказатьСпрятатьПанельОсновногоИзображения();
	УстановитьВидимостьОстатковНаСкладах();

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередОткрытием" формы.
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	мПоискОбъектовВСпискахДанных.ЗаполнитьСписокЗначенийОтборовДанных(ЭлементыФормы.ТипПоискаДанных.СписокВыбора);
	мПоискОбъектовВСпискахДанных.ВосстановитьНастройки(ЭлементыФормы.ТипПоискаДанных);
	мПоискОбъектовВСпискахДанных.ВосстановитьСписокОтбораДанных();
				
	мКоличествоБазовыхКолонокОстаткиТоваров = ЭлементыФормы.ТабличноеПолеОстаткиТоваров.Колонки.Количество();
	
	ПоказыватьКартинку = ВосстановитьЗначение("Справочники.Номенклатура.ФормаСписка.Изображение");
	ПоказыватьОстатки  = ВосстановитьЗначение("Справочники.Номенклатура.ФормаСписка.Остатки");

	// если сохраненного значения нет, будем картинку показывать
	Если ПоказыватьКартинку = Неопределено Тогда
		ПоказыватьКартинку = Истина;
	КонецЕсли;
	
	Если ПоказыватьОстатки = Неопределено Тогда
		ПоказыватьОстатки = Ложь;
	КонецЕсли;

	ЭлементыФормы.ДействияФормы.Кнопки[0].Кнопки.Изображение.Пометка = ПоказыватьКартинку;
	ЭлементыФормы.ДействияФормы.Кнопки[0].Кнопки.ОстаткиТоваровНаСкладах.Пометка = ПоказыватьОстатки;
	
	// восстановление параметров отображения остатков
	ВВалютеЦены = ВосстановитьЗначение("Справочники.Номенклатура.ФормаСписка.ВВалютеЦены");
	ВалютаЦены = ВосстановитьЗначение("Справочники.Номенклатура.ФормаСписка.ВалютаЦены");
	Если НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
		ВалютаЦены = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяВалютаВзаиморасчетов")
	КонецЕсли;
	
	Если (ВВалютеЦены = Неопределено) Или НЕ ЗначениеЗаполнено(ВалютаЦены) Тогда
			ВВалютеЦены = Истина;	
	КонецЕсли;
	ПроверитьДоступностьВалютуЦен();
	
	// восстанавливаем выделенные элементы у СписокЦенОстатков
	СписокПомеченныхЭлементовТиповЦен = ВосстановитьЗначение("Справочники.Номенклатура.ФормаСписка.СписокПомеченныхЭлементовТиповЦен");
	УправлениеЗапасами.ОбновитьСписокТиповЦен(СписокЦенОстатков, СписокПомеченныхЭлементовТиповЦен);
		
	ПорядокСледованияТиповЦен = ВосстановитьЗначение("Справочники.Номенклатура.ФормаСписка.ПрядокСледованияЭлементовТиповЦен");
	УправлениеЗапасами.УпорядочитьСписокТиповЦен(СписокЦенОстатков, ПорядокСледованияТиповЦен);
	
	ПерестроитьДеревоОстатков();
	
	// При необходимости удалим кнопку Права
	РаботаСДиалогами.УдалитьКнопкуПрава(ЭлементыФормы.ДействияФормы.Кнопки);
	
КонецПроцедуры

// Обработчик события ОбработкаОповещения формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗакрытиеФормыПоиска"
		И Источник = ЭтаФорма Тогда
		
		// обновляем выпадающий список настроек отбора данных
		мПоискОбъектовВСпискахДанных.ЗаполнитьСписокЗначенийОтборовДанных(ЭлементыФормы.ТипПоискаДанных.СписокВыбора);
	
	ИначеЕсли ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		ПоказатьОсновноеИзображение();
	Иначе
		Если (ИмяСобытия = "ОбновитьФорму" И Источник = ЭлементыФормы.Список.ТекущиеДанные.Ссылка)
		 ИЛИ (ИмяСобытия = "ЗаписанЭлементНоменклатуры" И Параметр = ЭлементыФормы.Список.ТекущиеДанные.Ссылка) Тогда
			Обновить();
			ПоказатьОсновноеИзображение();
		КонецЕсли;
	КонецЕсли;
    		
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	мПоискОбъектовВСпискахДанных.СохранитьНастройки();
		
	СохранитьЗначение("Справочники.Номенклатура.ФормаСписка.Изображение", ЭлементыФормы.ДействияФормы.Кнопки[0].Кнопки.Изображение.Пометка);
	СохранитьЗначение("Справочники.Номенклатура.ФормаСписка.Остатки", ЭлементыФормы.ДействияФормы.Кнопки[0].Кнопки.ОстаткиТоваровНаСкладах.Пометка);
	
	// сохранение параметров отображения остатков
	СохранитьЗначение("Справочники.Номенклатура.ФормаСписка.ВВалютеЦены", ВВалютеЦены);
	СохранитьЗначение("Справочники.Номенклатура.ФормаСписка.ВалютаЦены", ВалютаЦены);
	// список элементов СписокЦенОстатков помеченных галочками
	ПорядокСледованияТиповЦен = Новый Массив;
	ПорядокСледованияТиповЦен = СписокЦенОстатков.ВыгрузитьКолонку("Ссылка");
	СохранитьЗначение("Справочники.Номенклатура.ФормаСписка.ПрядокСледованияЭлементовТиповЦен", ПорядокСледованияТиповЦен);
	СохранитьЗначение("Справочники.Номенклатура.ФормаСписка.СписокПомеченныхЭлементовТиповЦен", мСписокПрефиксовЦен);

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события нажатие по кнопке Файлы командной панели ДействияФормы.
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЭлементыФормы.Список.ТекущиеДанные.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;

	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, ЭлементыФормы.Список.ТекущиеДанные.Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, ЭлементыФормы.Список.ТекущиеДанные.Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", ЭлементыФормы.Список.ТекущиеДанные.Ссылка);
	
	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры

Процедура ОсновноеИзображениеНажатие(Элемент)
	
	ТекущиеДанныеСписка = ЭлементыФормы.Список.ТекущиеДанные;
	
	Если ТекущиеДанныеСписка = Неопределено ИЛИ ТекущиеДанныеСписка.ЭтоГруппа Тогда
		Предупреждение("Укажите в списке элемент номенклатуры!");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанныеСписка.ОсновноеИзображение.Пустая() Тогда
		Предупреждение("Основное изображение номенклатуры не задано!");
		Возврат;
	КонецЕсли;
	
	РаботаСФайлами.ОткрытьФормуИзображения(ЭтаФорма, ТекущиеДанныеСписка.ОсновноеИзображение, ТекущиеДанныеСписка.Ссылка);
	
КонецПроцедуры

// Процедура устанавливает доступность элемента управления ВалютаЦены.
//
Процедура ПроверитьДоступностьВалютуЦен()
	
	ЭлементыФормы.ВалютаЦены.Доступность = НЕ ВВалютеЦены;
	ЭлементыФормы.НадписьВалютаЦены.Доступность = НЕ ВВалютеЦены;
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрихкода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	ОткрытьЗначение(Номенклатура);
	Возврат Истина;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрихкода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрихкод которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрихкода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Предупреждение("Обработка транспортных упаковок в данной форме не предусмотрена!");
	Возврат Истина;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрихкода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Обработка серийных номеров в данной форме не предусмотрена!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрихкода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Обработка информационных карт в данной форме не предусмотрена!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрихкода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрихкода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрихкода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ФОРМЫ

// Процедура - обработчик события Выбор элемента управления ТабличноеПолеОстаткиТоваров.
//
Процедура ТабличноеПолеОстаткиТоваровВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если ЭлементыФормы.Список.ТекущиеДанные <> Неопределено
	   И НЕ ЭлементыФормы.Список.ТекущиеДанные.ЭтоГруппа Тогда
		РаботаСДиалогами.ОбработатьВыборТаблицаОстатков(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка, ЭлементыФормы.Список.ТекущиеДанные.Ссылка);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события ПриВыводеСтроки элемента управления ТабличноеПолеОстаткиТоваров.
//
Процедура ТабличноеПолеОстаткиТоваровПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПриВыводеСтрокиБезЦены(Элемент, ОформлениеСтроки, ДанныеСтроки, Истина, ЭлементыФормы.Список.ТекущиеДанные);
	РаботаСДиалогами.ПриВыводеСуммОстатковНоменклатуры(ОформлениеСтроки, ДанныеСтроки, мСписокПрефиксовЦен, ВВалютеЦены);
	
КонецПроцедуры

// Процедура - обработчик "При изменении флажка" у табличного поля СписокЦенОстатков
Процедура СписокЦенОстатковПриИзмененииФлажка(Элемент, Колонка)
	
	КолонкаВДеревеОстатков = Неопределено;
	// если добавилась новая колонка
	Если Элемент.ТекущиеДанные.Пометка Тогда
		// а может колонка то есть в дереве, а в таблице она не отображается 
		КолонкаВДеревеОстатков = ОстаткиТоваров.Колонки.Найти(Элемент.ТекущиеДанные.Префикс + "Цена");
		
		Если КолонкаВДеревеОстатков = Неопределено Тогда
			// поля в дереве нет - надо все пересчитать
			ОстаткиТоваров = УправлениеЗапасами.СоздатьКолонкиДереваОстатков(СписокЦенОстатков);
		КонецЕсли;
		// обновляем суммы
		ПоказатьОстаткиТоваров();
		
	Иначе
		// обновляем список префиксов видымых цен
		мСписокПрефиксовЦен = УправлениеЗапасами.ПолучитьСписокПрефиксовВыводимыхСумм(СписокЦенОстатков);
	КонецЕсли;
	
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
	
КонецПроцедуры

// Процедура - обработчик  "При Изменении" поля ввода ВалютаЦены
Процедура ВалютаЦеныПриИзменении(Элемент)
	
	ПересчитатьВалютыОстатковНоменклатуры();
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
	
КонецПроцедуры

// Процедура - обработчик  "При Изменении" поля выбора ВыборТипаРасчетаВалюты
Процедура ВыборТипаРасчетаВалютыПриИзменении(Элемент)
	
	ПроверитьДоступностьВалютуЦен();
	ПересчитатьВалютыОстатковНоменклатуры();
	РаботаСДиалогами.ОбновитьКолонкиСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, ВВалютеЦены, ВалютаЦены, Истина, мКоличествоБазовыхКолонокОстаткиТоваров);
	
КонецПроцедуры

// Процедура - обработчик пункта выпадающего меню "Пометить все типы цен"
Процедура КоманднаяПанельТипыЦенДействие(Кнопка)
	
	РаботаСДиалогами.ОтметитьЭлементыСписка(СписокЦенОстатков, Истина);
	ПерестроитьДеревоОстатков();
	
КонецПроцедуры

// Процедура - обработчик пункта выпадающего меню "Отменить пометку всех типов цен"
Процедура КоманднаяПанельТипыЦенОтменитьВсе(Кнопка)
	
	РаботаСДиалогами.ОтметитьЭлементыСписка(СписокЦенОстатков, Ложь);
	ПерестроитьДеревоОстатков();
	
КонецПроцедуры

// Процедура - обработчик пункта меню "Обновить" у типов цен
Процедура КоманднаяПанельТипыЦенОбновить(Кнопка)
	
	УправлениеЗапасами.ОбновитьИУпорядочитьСписокТиповЦен(СписокЦенОстатков);	
	
КонецПроцедуры

// Процедура - обработчик пункта меню "Переместить вверх" у типов цен
Процедура КоманднаяПанельТипыЦенПереместитьВверх(Кнопка)

	РаботаСДиалогами.ПереместитьТипЦен(ЭлементыФормы.СписокЦенОстатков, ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, мКоличествоБазовыхКолонокОстаткиТоваров, Истина);
	
КонецПроцедуры

// Процедура - обработчик пункта меню "Переместить вниз" у типов цен
Процедура КоманднаяПанельТипыЦенПереместитьВниз(Кнопка)
	
	РаботаСДиалогами.ПереместитьТипЦен(ЭлементыФормы.СписокЦенОстатков, ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, мКоличествоБазовыхКолонокОстаткиТоваров, Ложь);
	
КонецПроцедуры

// Процедура - обработчик "Перед удалением" у типов цен
Процедура СписокЦенОстатковПередУдалением(Элемент, Отказ)
	// Удалять ничего нельзя
	Отказ = Истина; 
КонецПроцедуры

// Процедура - обработчик "Перед началом добавления" у типов цен
Процедура СписокЦенОстатковПередНачаломДобавления(Элемент, Отказ, Копирование)
	// Добавлять ничего нельзя
	Отказ = Истина;
КонецПроцедуры

// Процедура - обработчик "Окончание перетаскивания" у типов цен
Процедура СписокЦенОстатковОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	РаботаСДиалогами.УстановитьПорядокКолонокСуммТабПоле(ЭлементыФормы.ТабличноеПолеОстаткиТоваров, СписокЦенОстатков, мКоличествоБазовыхКолонокОстаткиТоваров) 
	
КонецПроцедуры

// Процедура представляет обработчик события "Нажатие" кнопки
// "ШтрихкодыТранспортныхУпаковок".
//
// Параметры
//  Кнопка - <КнопкаКоманднойПанели>
//         - Кнопка, с которой связано данное событие
//           (кнопка "ШтрихкодыТранспортныхУпаковок").
//
Процедура ДействияФормыШтрихкодыТранспортныхУпаковок(Кнопка)

	Обр   = Обработки.ТранспортныеУпаковки.Создать();
	Форма = Обр.ПолучитьФорму(, ЭтаФорма, );
	Если Форма.Открыта() Тогда
		Форма.Активизировать();
	Иначе
		Форма.ПервоначальноеЗаполнение(ЭлементыФормы.Список.ТекущаяСтрока.Ссылка);
		Форма.Открыть();
	КонецЕсли;

КонецПроцедуры // ДействияФормыШтрихкодыТранспортныхУпаковок()

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// синхронизация данных с Юнискан
Процедура ДействияФормыСинхронизацияСЮнискан(Кнопка)
	
	ОбработкаСинхронизации = Обработки.ОбменДаннымиСЮнискан.Создать();
	ФормаСинхронизации = ОбработкаСинхронизации.ПолучитьФорму("СинхронизацияНоменклатуры", ЭтаФорма);
	
	Если ЭлементыФормы.Список.ТекущиеДанные <> Неопределено Тогда
		
		// выбираем из регистра все штрих коды данной номенклатуры с типом EAN-13
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ Разрешенные Различные
		|	ШтрихКоды.Штрихкод КАК Код
		|ИЗ
		|	РегистрСведений.Штрихкоды КАК Штрихкоды
		|
		| ГДЕ 
		|	Штрихкоды.ТипШтрихкода = &ТипШтрихКода
		|   И Штрихкоды.Владелец = &Номенклатура
		|   И НЕ (ШтрихКоды.Штрихкод Подобно ""2%"")";
		
		Запрос.УстановитьПараметр("ТипШтрихКода", ПланыВидовХарактеристик.ТипыШтрихкодов.EAN13);
		Запрос.УстановитьПараметр("Номенклатура", ЭлементыФормы.Список.ТекущиеДанные.Ссылка);
		
		ТаблицаРезультатов = Запрос.Выполнить().Выгрузить();
		
		Для Каждого СтрокаТаблицыРезультатов Из ТаблицаРезультатов Цикл
			ФормаСинхронизации.ДобавитьШтрихКодДляПроверки(СтрокаТаблицыРезультатов.Код);						
		КонецЦикла;
			
	КонецЕсли;
	
	ФормаСинхронизации.Открыть();
	
КонецПроцедуры

// регистрация номенклатуры в Юнискан
Процедура ДействияФормыРегистрацияВЮнискан(Кнопка)
	
	ОбработкаРегистрации = Обработки.ОбменДаннымиСЮнискан.Создать();
	ФормаРегистрации = ОбработкаРегистрации.ПолучитьФорму("РегистрацияНоменклатуры", ЭтаФорма);
	
	Если ЭлементыФормы.Список.ТекущиеДанные <> Неопределено Тогда
		ФормаРегистрации.НоменклатураДляРегистрации = ЭлементыФормы.Список.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ФормаРегистрации.Открыть();
	
КонецПроцедуры


//УНИВЕРСАЛЬНЫЙ ПОИСК ОБЪЕКТОВ
///////////////////////////////////////////////////////////////////////////////

// Процедура - обработчик события ПриИзменении элемента управления ЗначениеОтбораСпискаНоменклатуры.
//
Процедура ЗначениеОтбораСпискаНоменклатурыПриИзменении(Элемент)
	
	мПоискОбъектовВСпискахДанных.ЗначениеОтбораПоискаданныхПриИзменении(Элемент, ЗначениеОтбораСпискаНоменклатуры);
				
КонецПроцедуры

// Процедура - обработчик события АвтоПодборТекста элемента управления ЗначениеОтбораСпискаНоменклатуры.
//
Процедура ЗначениеОтбораСпискаНоменклатурыАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	мПоискОбъектовВСпискахДанных.АвтоПодборТекстаПоиска(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
			
КонецПроцедуры

// при выводе строки списка
Процедура СписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	мПоискОбъектовВСпискахДанных.СписокПриВыводеСтрокиСпискаОтбораДанных(Элемент, ОформлениеСтроки, ДанныеСтроки);
			
КонецПроцедуры

Процедура ТипПоискаДанныхОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	// обработка выбора элемента из списка
	мПоискОбъектовВСпискахДанных.ОбработатьВыборТипаОграниченияИзСписка(ЭтаФорма, Элемент, ВыбранноеЗначение, 
		СтандартнаяОбработка, ЗначениеОтбораСпискаНоменклатуры);
	
КонецПроцедуры

// кнопка открытия настройки
Процедура ТипПоискаДанныхОткрытие(Элемент, СтандартнаяОбработка)
	
	мПоискОбъектовВСпискахДанных.НастройкаОтбораДанныхОткрытие(ЗначениеОтбораСпискаНоменклатуры, Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

мПустаяКартинка = Новый Картинка;

Список.Колонки.Добавить("ОсновноеИзображение");
Список.Колонки.Добавить("ВестиУчетПоХарактеристикам");
Список.Колонки.Добавить("ЕдиницаХраненияОстатков");

мСоответствиекурсовВалют = Новый Соответствие;

мПоискОбъектовВСпискахДанных = МодульПоискаВДанных.СоздатьОбъектПоискаДанныхДляНоменклатуры(ЭлементыФормы.ЗначениеОтбораСпискаНоменклатуры,
   ЭлементыФормы.Список, Список);