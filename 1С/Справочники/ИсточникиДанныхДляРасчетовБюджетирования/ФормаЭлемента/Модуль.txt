Перем мФормаВыбораПоляИсточника;
Перем мФормаВыбораПоляПоказателя;
Перем мФормаВыбораРегистра;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

// Устанавливает видимость и доступность элементов формы
Процедура УстановитьВидимость()
	
	Если ПроизвольныйЗапрос Тогда
		
		ЭлементыФормы.ГлавнаяПанель.Страницы["Настройка"].Видимость=Истина;
		ЭлементыФормы.ПредставлениеРегистра.Доступность=Ложь;
		ЭлементыФормы.Показатели.ИзменятьСоставСтрок=Истина;
		ЭлементыФормы.ДатыОтбораДанныхИсточника.ИзменятьСоставСтрок=Истина;
		ЭлементыФормы.ДатыОтбораДанныхИсточника.Колонки.ИмяДатаГраницы.Видимость=Истина;
		ЭлементыФормы.Показатели.Колонки.Представление.ЭлементУправления.КнопкаВыбора=Истина;		
		
	Иначе
		
		ЭлементыФормы.ГлавнаяПанель.Страницы["Настройка"].Видимость=Ложь;
		ЭлементыФормы.ПредставлениеРегистра.Доступность=Истина;
		ЭлементыФормы.Показатели.ИзменятьСоставСтрок=Ложь;
		ЭлементыФормы.ДатыОтбораДанныхИсточника.ИзменятьСоставСтрок=Ложь;
		ЭлементыФормы.ДатыОтбораДанныхИсточника.Колонки.ИмяДатаГраницы.Видимость=Ложь;
		ЭлементыФормы.Показатели.Колонки.Представление.ЭлементУправления.КнопкаВыбора=Ложь;
		
	КонецЕсли;
			
КонецПроцедуры // УстановитьВидимость()

// Процедура заполняет таблицу показателей источника
// Параметры
//  Регистр (строка) - имя регистра в метаданных
//  ТаблицаРегистра (строка) - тип таблицы регистра 
//
Процедура ДобавитьПоляРегистра(МассивОтбора)

    ВидРегистраПоМетаданным=Лев(ИмяРегистра,Найти(ИмяРегистра,".")-1);

	ТаблицаРегистра=СтрЗаменить(ИмяРегистра,ВидРегистраПоМетаданным+".","");
	
	Сч=Найти(ТаблицаРегистра,".");
	Периодический=Истина;

	Если Сч>0 Тогда	
		ИмяРегистраПоМетаданным=Лев(ТаблицаРегистра,Сч-1);
	ИначеЕсли Найти(ПредставлениеРегистра,"движения:")>0 Тогда
		ИмяРегистраПоМетаданным=ТаблицаРегистра;
	Иначе
		ИмяРегистраПоМетаданным=ТаблицаРегистра;
		Периодический=Ложь;  // Непериодический регистр сведений.
	КонецЕсли;

	МетаданныеРегистр=Метаданные[СтрЗаменить(ВидРегистраПоМетаданным,"Регистр","Регистры")][ИмяРегистраПоМетаданным];

    // Добавляются показатели источника
	Если Показатели.Количество()=0 Тогда

	Для каждого Ресурс Из МетаданныеРегистр.Ресурсы Цикл

		Если Найти(ИмяРегистра,"РегистрБухгалтерии")>0 Тогда

			Если Найти(ПредставлениеРегистра,": обороты с корреспонденцией")>0  Тогда
											
				Если НЕ Ресурс.ПризнакУчета=Неопределено Тогда
					
					НовыйПоказатель=Показатели.Добавить();
					НовыйПоказатель.Представление=Ресурс.Имя+": оборот Дт";
					НовыйПоказатель.Имя=Ресурс.Имя+"ОборотДт";
					НовыйПоказатель.Использование=Истина;
					
					НовыйПоказатель=Показатели.Добавить();
					НовыйПоказатель.Представление=Ресурс.Имя+": оборот Кт";
					НовыйПоказатель.Имя=Ресурс.Имя+"ОборотКт";
					НовыйПоказатель.Использование=Истина;
					
				Иначе
					
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот";
				НовыйПоказатель.Имя=Ресурс.Имя+"Оборот";
				НовыйПоказатель.Использование=Истина;
		
				КонецЕсли;

			ИначеЕсли Найти(ПредставлениеРегистра,": остатки и обороты")>0 Тогда

                НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": конечный остаток";
				НовыйПоказатель.Имя=Ресурс.Имя+"КонечныйОстаток";
				НовыйПоказатель.Использование=Истина;

                НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": конечный остаток Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"КонечныйОстатокДт";
				НовыйПоказатель.Использование=Истина;

                НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": конечный остаток Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"КонечныйОстатокКт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": конечный развернутый остаток Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"КонечныйРазвернутыйОстатокДт";
				НовыйПоказатель.Использование=Истина;

                НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": конечный развернутый остаток Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"КонечныйРазвернутыйОстатокКт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": начальный остаток";
				НовыйПоказатель.Имя=Ресурс.Имя+"НачальныйОстаток";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": начальный остаток Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"НачальныйОстатокДт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": начальный остаток Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"НачальныйОстатокКт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": начальный развернутый остаток Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"НачальныйРазвернутыйОстатокДт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": начальный развернутый остаток Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"НачальныйРазвернутыйОстатокКт";
				НовыйПоказатель.Использование=Истина;
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот";
				НовыйПоказатель.Имя=Ресурс.Имя+"Оборот";
				НовыйПоказатель.Использование=Истина;
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"ОборотДт";
				НовыйПоказатель.Использование=Истина;
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"ОборотКт";
				НовыйПоказатель.Использование=Истина;

			
			ИначеЕсли Найти(ПредставлениеРегистра,": остатки")>0 Тогда

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": остаток";
				НовыйПоказатель.Имя=Ресурс.Имя+"Остаток";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": остаток Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"ОстатокДт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": остаток Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"ОстатокКт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": развернутый остаток Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"РазвернутыйОстатокДт";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": развернутый остаток Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"РазвернутыйОстатокКт";
				НовыйПоказатель.Использование=Истина;
				
			ИначеЕсли Найти(ПредставлениеРегистра,": обороты")>0 Тогда
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот";
				НовыйПоказатель.Имя=Ресурс.Имя+"Оборот";
				НовыйПоказатель.Использование=Истина;
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот Дт";
				НовыйПоказатель.Имя=Ресурс.Имя+"ОборотДт";
				НовыйПоказатель.Использование=Истина;
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот Кт";
				НовыйПоказатель.Имя=Ресурс.Имя+"ОборотКт";
				НовыйПоказатель.Использование=Истина;
				
			ИначеЕсли Найти(ПредставлениеРегистра,": движения с субконто")>0 Тогда
				
				Если НЕ Ресурс.ПризнакУчета=Неопределено Тогда
					
					НовыйПоказатель=Показатели.Добавить();
					НовыйПоказатель.Представление=Ресурс.Имя+": Дт";
					НовыйПоказатель.Имя=Ресурс.Имя+"Дт";
					НовыйПоказатель.Использование=Истина;
					
					НовыйПоказатель=Показатели.Добавить();
					НовыйПоказатель.Представление=Ресурс.Имя+": Кт";
					НовыйПоказатель.Имя=Ресурс.Имя+"Кт";
					НовыйПоказатель.Использование=Истина;
					
				Иначе
					
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя;
				НовыйПоказатель.Имя=Ресурс.Имя;
				НовыйПоказатель.Использование=Истина;
		
				КонецЕсли;
				
			КонецЕсли;

		ИначеЕсли Найти(ИмяРегистра,"РегистрНакопления")>0 Тогда

			Если Найти(ПредставлениеРегистра,": обороты")  Тогда

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот";
				НовыйПоказатель.Имя=Ресурс.Имя+"Оборот";
				НовыйПоказатель.Использование=Истина;

			ИначеЕсли Найти(ПредставлениеРегистра,": остатки и обороты")>0 Тогда

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": начальный остаток";
				НовыйПоказатель.Имя=Ресурс.Имя+"НачальныйОстаток";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": приход";
				НовыйПоказатель.Имя=Ресурс.Имя+"Приход";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот";
				НовыйПоказатель.Имя=Ресурс.Имя+"Оборот";
				НовыйПоказатель.Использование=Истина;

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": расход";
				НовыйПоказатель.Имя=Ресурс.Имя+"Расход";
				НовыйПоказатель.Использование=Истина;


				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": конечный остаток";
				НовыйПоказатель.Имя=Ресурс.Имя+"КонечныйОстаток";
				НовыйПоказатель.Использование=Истина;

			ИначеЕсли Найти(ПредставлениеРегистра,": остатки")>0 Тогда

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": остаток";
				НовыйПоказатель.Имя=Ресурс.Имя+"Остаток";
				НовыйПоказатель.Использование=Истина;
				
			ИначеЕсли Найти(ПредставлениеРегистра,"движения: приход")>0 Тогда
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": приход";
				НовыйПоказатель.Имя=Ресурс.Имя;
				НовыйПоказатель.Использование=Истина;
				
			ИначеЕсли Найти(ПредставлениеРегистра,"движения: расход")>0 Тогда
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": расход";
				НовыйПоказатель.Имя=Ресурс.Имя;
				НовыйПоказатель.Использование=Истина;
				
			ИначеЕсли Найти(ПредставлениеРегистра,"движения: оборот")>0 Тогда
				
				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя+": оборот";
				НовыйПоказатель.Имя=Ресурс.Имя;
				НовыйПоказатель.Использование=Истина;
							
			КонецЕсли;

		ИначеЕсли Найти(ИмяРегистра,"РегистрСведений")>0 Тогда

			ТипыРесурса=Ресурс.Тип.Типы();

			Если ТипыРесурса.Количество() = 1 И ТипыРесурса[0]=Тип("Число") Тогда

				НовыйПоказатель=Показатели.Добавить();
				НовыйПоказатель.Представление=Ресурс.Имя;
				НовыйПоказатель.Имя=Ресурс.Имя;
				НовыйПоказатель.Использование=Истина;

			КонецЕсли;

		КонецЕсли;

	КонецЦикла;

	КонецЕсли;

    //Добавляются границы отбора данных

	Если ДатыОтбораДанныхИсточника.Количество()=0 И Периодический Тогда

		Если Найти(ПредставлениеРегистра,"обороты")>0 ИЛИ Найти(ПредставлениеРегистра,"движения:")>0 
			ИЛИ Найти(ПредставлениеРегистра,": движения с субконто")>0 Тогда

			НоваяГраницаОтбора=ДатыОтбораДанныхИсточника.Добавить();
			НоваяГраницаОтбора.ИмяДатаГраницы="НачалоПериода";
			НоваяГраницаОтбора.ПредставлениеДатыГраницы="Дата начала отбора данных";
			НоваяГраницаОтбора.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.НачалоПериода;

			НоваяГраницаОтбора=ДатыОтбораДанныхИсточника.Добавить();
			НоваяГраницаОтбора.ИмяДатаГраницы="КонецПериода";
			НоваяГраницаОтбора.ПредставлениеДатыГраницы="Дата конца отбора данных";
			НоваяГраницаОтбора.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.КонецПериода;

		Иначе

			НоваяГраницаОтбора=ДатыОтбораДанныхИсточника.Добавить();
			НоваяГраницаОтбора.ИмяДатаГраницы="МоментВремени";
			НоваяГраницаОтбора.ПредставлениеДатыГраницы="Дата значения";
			НоваяГраницаОтбора.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.НачалоПериода;

		КонецЕсли;

	КонецЕсли;

	// Добавляются поля источника
    СписокПолей=Новый СписокЗначений;

	Для Каждого Измерение Из МетаданныеРегистр.Измерения Цикл

		Если ((Найти(ИмяРегистра,"ОборотыДтКт")>0) ИЛИ (Найти(ИмяРегистра,"ДвиженияССубконто")>0)) 
			
			И(Не Измерение.ПризнакУчета=Неопределено) Тогда
			
		СписокПолей.Добавить(Измерение.Имя+"Дт",Измерение.Синоним+" Дт");
		МассивОтбора.Добавить(Измерение.Имя+"Дт");
		
		СписокПолей.Добавить(Измерение.Имя+"Кт",Измерение.Синоним+" Кт");
		МассивОтбора.Добавить(Измерение.Имя+"Кт");
	
		Иначе
		
		СписокПолей.Добавить(Измерение.Имя,Измерение.Синоним);
		МассивОтбора.Добавить(Измерение.Имя);
		
		КонецЕсли;

	КонецЦикла;
	
	Если Найти(ПредставлениеРегистра,"движения:")>0 Или Найти(ПредставлениеРегистра,": движения с субконто")>0 Тогда
		
		Для Каждого Реквизит Из МетаданныеРегистр.Реквизиты Цикл
			
			СписокПолей.Добавить(Реквизит.Имя,Реквизит.Синоним);
			МассивОтбора.Добавить(Реквизит.Имя);
			
		КонецЦикла;
		
		СписокПолей.Добавить("Регистратор","Регистратор");
		МассивОтбора.Добавить("Регистратор");
		
	КонецЕсли;	
	
	Если Найти(ИмяРегистра,"РегистрБухгалтерии")>0 Тогда
		
		Если (МетаданныеРегистр.Корреспонденция) 
			И ((Найти(ИмяРегистра,"ОборотыДтКт")>0) ИЛИ (Найти(ИмяРегистра,"ДвиженияССубконто")>0)) Тогда
			
			МассивОтбора.Добавить("СчетДт");
			МассивОтбора.Добавить("СчетКт");
			
			Для Индекс=1 по МетаданныеРегистр.ПланСчетов.МаксКоличествоСубконто Цикл
				
				МассивОтбора.Добавить("СубконтоДт"+Индекс);
				МассивОтбора.Добавить("СубконтоКт"+Индекс);
				
			КонецЦикла;
			
		Иначе
			
			МассивОтбора.Добавить("Счет");
			
			Для Индекс=1 по МетаданныеРегистр.ПланСчетов.МаксКоличествоСубконто Цикл
				
				МассивОтбора.Добавить("Субконто"+Индекс);
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ДобавитьПоляРегистра()

// Процедура заполняет настройки построителя и табличные части справочника в соответствии с
// выбранным источником
//
Процедура ЗаполнитьНастройкиПоИсточнику()

   	//Очистим отбор
		Сч=0;
		Пока Сч<ПостроительОтчета.Отбор.Количество() Цикл
			ПостроительОтчета.Отбор.Удалить(Сч);
			Сч=Сч+1;
		КонецЦикла;

		Сч=0;
		Пока Сч<ПостроительОтчета.ДоступныеПоля.Количество() Цикл

            Поле=ПостроительОтчета.ДоступныеПоля[Сч];
			ПостроительОтчета.ДоступныеПоля.Удалить(Поле);

		КонецЦикла;

		Если Найти(ИмяРегистра,"Запрос.")=0 Тогда

			МассивОтбора = Новый Массив;

			ДобавитьПоляРегистра(МассивОтбора);			

			ТекстПоказатели="";
			ТекстИзмерения="";

			Для каждого Показатель Из Показатели Цикл

				ТекстПоказатели=ТекстПоказатели+", 
				|СУММА("+Показатель.Имя+") КАК "+Показатель.Имя; 

			КонецЦикла; 
			
			Для Каждого Элемент Из МассивОтбора Цикл

				ТекстИзмерения=ТекстИзмерения+", 
				|"+Элемент+".* КАК "+Элемент;
				
			КонецЦикла;
			
			Если Найти(ИмяРегистра,"Обороты")>0 ИЛИ Найти(ПредставлениеРегистра,": движения с субконто")>0 Тогда
				ТекстИзмерения=ТекстИзмерения+",
				|Период";
			ИначеЕсли Найти(ПредставлениеРегистра,"движения:")>0 Тогда
				ТекстИзмерения=ТекстИзмерения+",
				|НачалоПериода(Период,День) КАК Период";
			ИначеЕсли Найти(ИмяРегистра,"&МоментВремени")>0 Тогда
				ТекстИзмерения=ТекстИзмерения+",
				|&МоментВремени КАК Период";
			КонецЕсли;

			ТекстЗапроса="ВЫБРАТЬ ";

			ТекстЗапроса=ТекстЗапроса+Сред(ТекстПоказатели,2);
			ТекстЗапроса=ТекстЗапроса+"
			|{ВЫБРАТЬ "+Сред(ТекстИзмерения,2)+"}
			|ИЗ
			|"+ИмяРегистра+" КАК ТаблицаРегистра";
			Если Найти(ПредставлениеРегистра,"движения:")>0 Тогда
				ТекстЗапроса=ТекстЗапроса+"
				|ГДЕ (ТаблицаРегистра.Период МЕЖДУ &НачалоПериода И &КонецПериода)
				|И (ТаблицаРегистра.Активность=Истина)";
				Если Найти(ПредставлениеРегистра,"движения: оборот")=0 Тогда
					ТекстЗапроса=ТекстЗапроса+"
					|И (ТаблицаРегистра.ВидДвижения=&ВидДвижения)";
				КонецЕсли;
			КонецЕсли;
		    ТекстЗапроса=ТекстЗапроса+"		
			|{ГДЕ "+Сред(ТекстИзмерения,2)+"}";

			ПостроительОтчета.Текст=ТекстЗапроса;
			
			Если Найти(ПредставлениеРегистра,"движения: приход")>0 Тогда
			
				 ПостроительОтчета.Параметры.Вставить("ВидДвижения",ВидДвиженияНакопления.Приход);
				 
			ИначеЕсли Найти(ПредставлениеРегистра,"движения: расход")>0 Тогда
			
				 ПостроительОтчета.Параметры.Вставить("ВидДвижения",ВидДвиженияНакопления.Расход);
			
			КонецЕсли; 
					
			Для Каждого Элемент Из МассивОтбора Цикл

				ПолеОтчета=ПостроительОтчета.ДоступныеПоля[Элемент];
				ПолеОтчета.Отбор=Истина;

			КонецЦикла;

		Иначе

			ВыборПроцедурыНастройки(ИмяРегистра);

	КонецЕсли;

КонецПроцедуры // ЗаполнитьНастройкиПоИсточнику()

// <Описание процедуры>
//
// Параметры
//  ИмяРегистра – имя выбранного раздела учета
//
Процедура ВыборПроцедурыНастройки(ИмяРегистра)

Если ИмяРегистра="Запрос.НДСПоПланамПродаж" Тогда

	НДСпоПланамПродаж();

Иначе

	

КонецЕсли; 	

КонецПроцедуры // ВыборПроцедурыНастройки()
 
///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ФОРМИРОВАНИЯ ПРЕДОПРЕДЕЛЕННЫХ НАСТРОЕК ОТБОРА

// Содержит настройки отбора сумм НДС, указанных в планах продаж
//
Процедура НДСпоПланамПродаж()

	ТекстЗапроса="ВЫБРАТЬ
	             |	СУММА(ПланПродажТовары.СуммаНДС) КАК СуммаНДС
				 |{ВЫБРАТЬ	
				 |ПланПродажТовары.Номенклатура.*,
				 |ПланПродаж.Подразделение.*,
				 |ПланПродаж.Сценарий.*}
	             |ИЗ
	             |	Документ.ПланПродаж КАК ПланПродаж
	             |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.ПланПродаж.СоставПлана КАК ПланПродажТовары
	             |		ПО ПланПродажТовары.Ссылка = ПланПродаж.Ссылка
	             |
	             |ГДЕ
	             |	ПланПродаж.Проведен И
	             |	ПланПродаж.УчитыватьНДС И
				 |	ПланПродаж.Сценарий.ДетализацияПланирования = &ДетализацияПланирования И
				 |	ПланПродаж.Дата МЕЖДУ &НачалоПериода И &КонецПериода
				 |{ГДЕ ПланПродажТовары.Номенклатура.*,
				 |ПланПродаж.Подразделение.*,
				 |ПланПродаж.Сценарий.*}";

	ПостроительОтчета.Текст=ТекстЗапроса;
	ПостроительОтчета.Параметры.Вставить("ДетализацияПланирования",Перечисления.ДетализацияПланирования.Номенклатура);

	ПостроительОтчета.ДоступныеПоля.Номенклатура.Отбор=Истина;
	ПостроительОтчета.ДоступныеПоля.Подразделение.Отбор=Истина;
	ПостроительОтчета.ДоступныеПоля.Сценарий.Отбор=Истина;

	Если Показатели.Количество()=0 Тогда

		НовыйПоказатель=Показатели.Добавить();
		НовыйПоказатель.Представление="Сумма НДС по плану";
		НовыйПоказатель.Имя="СуммаНДС";
		НовыйПоказатель.Использование=Истина;

		НоваяГраницаОтбора=ДатыОтбораДанныхИсточника.Добавить();
		НоваяГраницаОтбора.ИмяДатаГраницы="НачалоПериода";
		НоваяГраницаОтбора.ПредставлениеДатыГраницы="Дата начала отбора данных";
		НоваяГраницаОтбора.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.НачалоПериода;

		НоваяГраницаОтбора=ДатыОтбораДанныхИсточника.Добавить();
		НоваяГраницаОтбора.ИмяДатаГраницы="КонецПериода";
		НоваяГраницаОтбора.ПредставлениеДатыГраницы="Дата конца отбора данных";
		НоваяГраницаОтбора.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.КонецПериода;

	КонецЕсли;

КонецПроцедуры // НДСпоПланамПродаж()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "Перед открытием" формы отчета.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	ЗаполнитьДеревоРегистров();

	Если (Не ИмяРегистра="") ИЛИ ПроизвольныйЗапрос Тогда
		
		Если ПроизвольныйЗапрос Тогда
			
			ПостроительОтчета.Текст=ТекстЗапроса;
			ПостроительОтчета.ЗаполнитьНастройки();
			
		Иначе
			
			ЗаполнитьНастройкиПоИсточнику();
			
		КонецЕсли;
		
		СохраненнаяНастройка=НастройкиПостроителя.Получить();
		
		Если ТипЗнч(СохраненнаяНастройка)=Тип("Структура") И ТипЗнч(СохраненнаяНастройка.НастройкиПостроителя)=Тип("НастройкиПостроителяОтчета") Тогда
			
			ПостроительОтчета.УстановитьНастройки(СохраненнаяНастройка.НастройкиПостроителя,Истина,Ложь,Истина,Истина);
			
			Для Каждого Параметр Из СохраненнаяНастройка.ПараметрыПостроителя Цикл
				
				ПостроительОтчета.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
				
				Если ПроизвольныйЗапрос Тогда
					
					СтрокаПараметр=Параметры.Добавить();
					СтрокаПараметр.ИмяПараметра=Параметр.Ключ;
					СтрокаПараметр.ЗначениеПараметра=Параметр.Значение;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Если ПроизвольныйЗапрос Тогда
				
				ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ТекстЗапроса);
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура обрабатывает выбор таблицы регистра из отдельного окна.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если Источник=мФормаВыбораРегистра Тогда

		Для Каждого Строка Из ЗначениеВыбора Цикл 

			ИмяРегистра					 = Строка.Регистр;
			ПредставлениеРегистра		 = Строка.ПредставлениеПоля;

			Если Наименование="" Тогда
				Наименование=ПредставлениеРегистра;
			КонецЕсли;

			ДатыОтбораДанныхИсточника.Очистить();
			Показатели.Очистить();
			ИзмеренияИсточника.Очистить();

			ЗаполнитьНастройкиПоИсточнику();

		КонецЦикла;

	ИначеЕсли Источник=мФормаВыбораПоляПоказателя Тогда
		
		ЭлементыФормы.Показатели.ТекущаяСтрока.Имя=ЗначениеВыбора.Имя;
		ЭлементыФормы.Показатели.ТекущаяСтрока.Представление=ЗначениеВыбора.Имя;
		ЭлементыФормы.Показатели.ТекущаяСтрока.Использование=Истина;
		
	Иначе

		ЭлементыФормы.ИзмеренияИсточника.ТекущаяСтрока.ИмяПоляИсточника=ЗначениеВыбора.Имя;
        ЭлементыФормы.ИзмеренияИсточника.ТекущаяСтрока.ПутьКДанным=ЗначениеВыбора.ПутьКДанным;
	
	КонецЕсли;

	КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ДИАЛОГА

// Процедура - обработчик нажатия кнопки "Установить все" командной панели списка показателей
//
Процедура КоманднаяПанельПоказателиУстановитьВсе(Кнопка)
	
	Для каждого Строка Из  Показатели Цикл
		Строка.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Снять все" командной панели списка показателей
//
Процедура КоманднаяПанельПоказателиСнятьВсе(Кнопка)
	
	Для каждого Строка Из  Показатели Цикл
		Строка.Использование = Ложь;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик перед удалением строки отбора
//
Процедура ОтборПередУдалением(Элемент, Отказ)
	
	Если Не ПустаяСтрока(Элемент.ТекущаяСтрока.Имя) Тогда
		Отказ = Истина;
	КонецЕсли; 
	
КонецПроцедуры // ОтборПередУдалением()

Процедура ТаблицаРегистраНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Форма = ПолучитьФорму("ФормаВыбораТаблицыИсточника", ЭтаФорма, "дляФормаТаблицыИсточника");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция выбора данных не была завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДеревоЗначенийДляВыбора",мДеревоРегистров);

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораРегистра = Форма;

КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	
	//Проверка на изменение источника
	Если НЕ ЭтоНовый() Тогда
		
		// Проверка на то, что источник был использован в расчетах
		//
		Запрос=Новый Запрос;
		Запрос.Текст= "ВЫБРАТЬ
		|	""Элемент справочника " + """" + """" + "Статьи оборотов по бюджетам" + """" + """" + """ КАК ПредставлениеОбъекта,
		|	СтатьиОборотовПоБюджетам.Представление КАК Представление
		|ИЗ
		|	Справочник.СтатьиОборотовПоБюджетам КАК СтатьиОборотовПоБюджетам
		|
		|ГДЕ
		|	(СтатьиОборотовПоБюджетам.ИсточникДанныхДляЦены = &Ссылка ИЛИ СтатьиОборотовПоБюджетам.ИсточникДанныхДляФакта = &Ссылка)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Элемент справочника " + """" + """" + "Профили изменения планов по измерениям" + """" + """" + """ КАК ПредставлениеОбъекта,
		|	ПрофилиИзмененияПлановПоИзмерениям.Представление КАК Представление
		|ИЗ
		|	Справочник.ПрофилиИзмененияПлановПоИзмерениям КАК ПрофилиИзмененияПлановПоИзмерениям
		|
		|ГДЕ
		|	ПрофилиИзмененияПлановПоИзмерениям.ИсточникДанных = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Документ " + """" + """" + "Расчет по модели бюджетирования" + """" + """" + """ КАК ПредставлениеОбъекта,
		|	РасчетПоМоделиБюджетирования.Представление КАК Представление
		|ИЗ
		|	Документ.РасчетПоМоделиБюджетирования КАК РасчетПоМоделиБюджетирования
		|
		|ГДЕ
		|	РасчетПоМоделиБюджетирования.ОсновнойИсточникДанных = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Счет бюджетного плана счетов"" КАК ПредставлениеОбъекта,
		|	Бюджетирование.Представление КАК Представление
		|ИЗ
		|	ПланСчетов.Бюджетирование КАК Бюджетирование
		|
		|ГДЕ
		|	Бюджетирование.ИсточникДанныхДляФакта = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""Элемент справочника " + """" + """" + "Строки финансового расчета" + """" + """" + """ КАК ПредставлениеОбъекта,
		|	СтрокиФинансовогоРасчета.Представление КАК Представление
		|ИЗ
		|	Справочник.СтрокиФинансовогоРасчета КАК СтрокиФинансовогоРасчета
		|
		|ГДЕ
		|	СтрокиФинансовогоРасчета.Измерение = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка",Ссылка);
		Проверка=Запрос.Выполнить();
		Если НЕ Проверка.Пустой() Тогда
						
			ТекстВопроса="Попытка изменения источника данных, используемого в следующих объектах: ";
			
			Результат=Проверка.Выбрать();
			Пока Результат.Следующий() Цикл
				ТекстВопроса=ТекстВопроса+Символы.ПС+(СокрЛП("" + Результат.ПредставлениеОбъекта + ": " + Результат.Представление));
			КонецЦикла;
			
			ТекстВопроса=ТекстВопроса+"
			|Продолжить?";
			
			Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Нет Тогда
				
				Отказ=Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураНастройки=Новый Структура;
	СтруктураНастройки.Вставить("НастройкиПостроителя",ПостроительОтчета.ПолучитьНастройки(Истина,Ложь,Истина,Истина));
	
	Если ПроизвольныйЗапрос Тогда
		
		ПостроительОтчета.Параметры.Очистить();
		
		Для Каждого СтрокаПараметров Из Параметры Цикл
			
			ПостроительОтчета.Параметры.Вставить(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
			
		КонецЦикла;
		
	КонецЕсли;
		
	СтруктураНастройки.Вставить("ПараметрыПостроителя",ПостроительОтчета.Параметры);
	ХранилищеДанных  = Новый ХранилищеЗначения(СтруктураНастройки);
	НастройкиПостроителя=ХранилищеДанных;
	
КонецПроцедуры

Процедура ИзмеренияИсточникаИмяПоляИсточникаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
    Форма = ПолучитьФорму("ФормаВыбораПоляИсточника", ЭтаФорма, "дляФормаПоляИсточника");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция выбора поля источника не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	

    СтруктураПараметров=Новый Структура;
	СтруктураСуществующиеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;

	Для Каждого Строка Из ИзмеренияИсточника Цикл

		Если ПустаяСтрока(Строка.ИмяПоляИсточника) Тогда
			Продолжить;
		КонецЕсли;

		// Кроме этой строки
		Если ИзмеренияИсточника.Индекс(Строка) <> ИзмеренияИсточника.Индекс(ЭлементыФормы.ИзмеренияИсточника.ТекущаяСтрока) Тогда
			СтруктураНеиспользуемыеЗначения.Вставить(Строка.ИмяПоляИсточника);
		КонецЕсли;

	КонецЦикла;

	Если Не ПустаяСтрока(ЭлементыФормы.ИзмеренияИсточника.ТекущиеДанные.ИмяПоляИсточника) Тогда
		СтруктураСуществующиеЗначения.Вставить(ЭлементыФормы.ИзмеренияИсточника.ТекущиеДанные.ИмяПоляИсточника);
	КонецЕсли;

	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);
	мПостроительОтчета=ПостроительОтчета;  

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораПоляИсточника = Форма;
	
КонецПроцедуры

Процедура ИзмеренияИсточникаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не ОтменаРедактирования Тогда
		
		Если Элемент.ТекущиеДанные.ИмяПоляИсточника="" Тогда
			Сообщить("Не указано поле источника запроса");
			Отказ=Истина;
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.ИзмерениеБюджетирования.Пустая() Тогда
			Сообщить("Не указано измерение бюджетирования");
			Отказ=Истина;
		КонецЕсли;
		
		Для Каждого СтрокаСвязь ИЗ ИзмеренияИсточника Цикл
			Если СтрокаСвязь.ИзмерениеБюджетирования=Элемент.ТекущиеДанные.ИзмерениеБюджетирования И НЕ СтрокаСвязь=Элемент.ТекущиеДанные Тогда
				Сообщить("Повторяющееся измерение бюджетирования: "+Строка(Элемент.ТекущиеДанные.ИзмерениеБюджетирования));
				Отказ=Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыПроверить(Кнопка)
	
	ПостроительПроверка=Новый ПостроительОтчета;
	ПостроительПроверка.Текст=ПостроительОтчета.Текст;
	
	Если (НЕ ПроизвольныйЗапрос) И Найти(ВРЕГ(ПостроительПроверка.Текст),"НАЧАЛОПЕРИОДА(")=0 Тогда
		ПостроительПроверка.Текст=СтрЗаменить(ПостроительПроверка.Текст,"День","");
	КонецЕсли;

	ПостроительПроверка.УстановитьНастройки(ПостроительОтчета.ПолучитьНастройки());
	
	Если ПроизвольныйЗапрос Тогда
		
		Для Каждого СтрокаПараметров Из Параметры Цикл
			
			ПостроительПроверка.Параметры.Вставить(СтрокаПараметров.ИмяПараметра, СтрокаПараметров.ЗначениеПараметра);
			
		КонецЦикла;
		
	Иначе
		
		Для Каждого Параметр Из ПостроительОтчета.Параметры Цикл
			
			ПостроительПроверка.Параметры.Вставить(Параметр.Ключ,Параметр.Значение);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Для каждого Граница Из ДатыОтбораДанныхИсточника Цикл
		
		Если Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.ФиксированнаяДата Тогда
			НачальнаяДатаГраницы=Граница.ДатаНачальнойГраницыОтсчета;
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.НачалоПериода Тогда
			НачальнаяДатаГраницы=НачалоМесяца(РабочаяДата);
		ИначеЕсли Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
			НачальнаяДатаГраницы=КонецМесяца(РабочаяДата);
		КонецЕсли;
		
		Если НЕ Граница.СдвигВПериодах=0 Тогда
			
			Если Граница.НачальнаяГраницаОтсчета=Перечисления.ВидыГраницОтбораИсточникаПланирования.КонецПериода Тогда
				
				НачальнаяДатаГраницы=КонецДня(ОбщегоНазначения.ДобавитьИнтервал(НачальнаяДатаГраницы,Граница.ПериодСмещения,Граница.СдвигВПериодах));
				
			Иначе
				
				НачальнаяДатаГраницы=ОбщегоНазначения.ДобавитьИнтервал(НачальнаяДатаГраницы,Граница.ПериодСмещения,Граница.СдвигВПериодах);
				
			КонецЕсли;
			
		КонецЕсли;
		
		ПостроительПроверка.Параметры.Вставить(Граница.ИмяДатаГраницы,НачальнаяДатаГраницы);
		
	КонецЦикла;
	
	ПостроительПроверка.Выполнить(); 
	ПостроительПроверка.Вывести();
	
 КонецПроцедуры
 
Процедура КоманднаяПанельЗапросКонструкторЗапросов(Кнопка)
	КонструкторЗапроса = Новый КонструкторЗапроса;
	КонструкторЗапроса.АвтодобавлениеПредставлений = Ложь;
	Попытка
		ТекстЗапросаКонструктор = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		Если ТекстЗапросаКонструктор <> "" Тогда
			КонструкторЗапроса.Текст = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
		КонецЕсли;
		
		Если КонструкторЗапроса.ОткрытьМодально() Тогда
			ЭлементыФормы.ТекстЗапроса.УстановитьТекст(КонструкторЗапроса.Текст);
		КонецЕсли;
	Исключение
        Предупреждение(ОписаниеОшибки());
	КонецПопытки;
КонецПроцедуры

Процедура ЗакончитьНажатие(Элемент)
	
	ТекстКорректен=Истина;
	ПостроительПроверка=Новый ПостроительОтчета;
	
	Попытка
		
		ПостроительПроверка.Текст = ЭлементыФормы.ТекстЗапроса.ПолучитьТекст();
										
	Исключение
		
		Предупреждение(ОписаниеОшибки());
		ТекстКорректен=Ложь;
		
	КонецПопытки;
	
	Если ТекстКорректен Тогда
		
		ПостроительПроверка.ЗаполнитьНастройки();
		
		Если ПостроительПроверка.ИзмеренияСтроки.Количество()>0 Тогда
			Сообщить("В запросе, используемом для источника данных, нельзя использовать итоги.
			|Воспользуйтесь группировками.");
			
			Возврат;
			
		КонецЕсли;
			
		ПостроительОтчета.Текст=ПостроительПроверка.Текст;
		ТекстЗапроса=Построительпроверка.Текст;
		
		ПостроительОтчета.ЗаполнитьНастройки();
		
		Показатели.Очистить();
		ДатыОтбораДанныхИсточника.Очистить();
		ИзмеренияИсточника.Очистить();
		
		Для Каждого Поле ИЗ ПостроительОтчета.ДоступныеПоля Цикл
			
			Если Строка(Поле.ТипЗначения)="Число" Тогда
				
				Если НЕ ПостроительОтчета.ВыбранныеПоля.Найти(Поле.Имя)=Неопределено Тогда
					
					СтрокаПоказатель=Показатели.Добавить();
					СтрокаПоказатель.Имя=Поле.Имя;
					СтрокаПоказатель.Представление=Поле.Представление;
					СтрокаПоказатель.Использование=Истина;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыПроизвольныйЗапрос(Кнопка)
	
	Кнопка.Пометка=НЕ Кнопка.Пометка;
	ПроизвольныйЗапрос=Кнопка.Пометка;
	
	Если ПроизвольныйЗапрос Тогда
		
		ПредставлениеРегистра="";
		ИмяРегистра="";
		
		Если Не ПостроительОтчета.Текст="" Тогда
			
			ЭлементыФормы.ТекстЗапроса.УстановитьТекст(ПостроительОтчета.ПолучитьЗапрос().Текст);
			
		КонецЕсли;
				
	Иначе
		
		ТекстВопроса="При смене режима редактирования текущие настройки будут утеряны.
		|Продолжить?";
		
		Если Вопрос(ТекстВопроса,РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
			
			Показатели.Очистить();
			ИзмеренияИсточника.Очистить();
			ДатыОтбораДанныхИсточника.Очистить();
			
			ПостроительОтчета=Новый ПостроительОтчета;
			ЭлементыФормы.ТекстЗапроса.УстановитьТекст("");
			
		Иначе
			
			Кнопка.Пометка=Истина;
			ПроизвольныйЗапрос=Истина;
			
		КонецЕсли;
			
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	УстановитьВидимость();
	ЭлементыФормы.ДействияФормы.Кнопки.ПроизвольныйЗапрос.Пометка=ПроизвольныйЗапрос;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
	
КонецПроцедуры

Процедура ПоказателиПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Форма = ПолучитьФорму("ФормаВыбораПоляИсточника", ЭтаФорма, "дляФормаПоляПоказателя");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция выбора поля источника не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	

    СтруктураПараметров=Новый Структура;
	СтруктураСуществующиеЗначения = Новый Структура;
	СтруктураНеиспользуемыеЗначения = Новый Структура;

	Для Каждого Строка Из Показатели Цикл

		Если ПустаяСтрока(Строка.Имя) Тогда
			Продолжить;
		КонецЕсли;

		// Кроме этой строки
		Если Показатели.Индекс(Строка) <> Показатели.Индекс(ЭлементыФормы.Показатели.ТекущаяСтрока) Тогда
			СтруктураНеиспользуемыеЗначения.Вставить(Строка.Имя);
		КонецЕсли;

	КонецЦикла;

	Если Не ПустаяСтрока(ЭлементыФормы.Показатели.ТекущиеДанные.Имя) Тогда
		СтруктураСуществующиеЗначения.Вставить(ЭлементыФормы.Показатели.ТекущиеДанные.Имя);
	КонецЕсли;

	СтруктураПараметров.Вставить("СтруктураНеиспользуемыеЗначения", СтруктураНеиспользуемыеЗначения);
	СтруктураПараметров.Вставить("СтруктураСуществующиеЗначения", СтруктураСуществующиеЗначения);
	мПостроительОтчета=ПостроительОтчета;  

	// Передача параметров в форму
	Форма.НачальноеЗначениеВыбора = СтруктураПараметров;
	Форма.РежимВыбора = Истина;
	Форма.Открыть();
	мФормаВыбораПоляПоказателя=Форма;
		
КонецПроцедуры

Процедура ПослеЗаписи()
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
КонецПроцедуры