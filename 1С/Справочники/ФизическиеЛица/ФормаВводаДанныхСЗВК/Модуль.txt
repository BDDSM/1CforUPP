Перем ОрганизацияПоУмолчанию;
Перем ВидДеятельностиПоУмолчанию;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ

//Проверяет идентичность значений двух таблиц одинаковой структуры 
Функция ТаблицыИдентичны(Таблица1, Таблица2)
	Для К = 0 По Таблица1.Колонки.Количество()-1 цикл
		Если  НЕ ОбщегоНазначенияЗК.МассивыИдентичны(Таблица1.ВыгрузитьКолонку(К),Таблица2.ВыгрузитьКолонку(К)) тогда
			Возврат Ложь;
		КонецЕсли;	 
	КонецЦикла;	
	Возврат Истина;
КонецФункции	 

//Процедура устанавливает текущую строку таблицы "ПериодыДеятельности" в зависимости от выбранной строки стажа
Процедура УстановитьТекущийПериодДеятельности()
	Если ЭлементыФормы.ЗаписиОСтаже.ТекущаяСтрока <> Неопределено тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Организация",ЭлементыФормы.ЗаписиОСтаже.ТекущаяСтрока.Организация);
		СтруктураПоиска.Вставить("ВидДеятельности",ЭлементыФормы.ЗаписиОСтаже.ТекущаяСтрока.ВидДеятельности);
		НайдСтроки = ПериодыДеятельности.НайтиСтроки(СтруктураПоиска);
		Если НайдСтроки.Количество() > 0 тогда
			ЭлементыФормы.ПериодыДеятельности.ТекущаяСтрока = НайдСтроки[0];
		КонецЕсли;	 
	КонецЕсли;	
КонецПроцедуры

//Заполняет таблицу периодов деятельности на основе данных таблицы "ЗаписиОСтаже"
Процедура ОбновитьТаблицуПериодовДеятельности()
	//Заполним таблицу периодов деятельности 
	ПериодыДеятельности.Очистить();

	ПредыдущаяОрганизация = "";
	ПредыдущийВидДеятельности = Справочники.ВидыОбщественноПолезнойДеятельности.ПустаяСсылка();
    ЭтоПервыйПериод = Истина;
	НачДатаПериода = Дата('00010101');
	КонДатаПериода = Дата('00010101');

	Для Каждого Запись Из ЗаписиОСтаже цикл

		//Проверим, сменился ли период деятельности
		Если (Запись.Организация <> ПредыдущаяОрганизация) ИЛИ (Запись.ВидДеятельности <>ПредыдущийВидДеятельности) тогда
			Если ЭтоПервыйПериод тогда
				ЭтоПервыйПериод = Ложь;
			Иначе 
				НовыйПериод = ПериодыДеятельности.Добавить();
				НовыйПериод.Организация = ПредыдущаяОрганизация;
				НовыйПериод.ВидДеятельности = ПредыдущийВидДеятельности;
				НовыйПериод.Период = Формат(НачДатаПериода,"ДФ='ММММ гггг'") + " - "+Формат(КонДатаПериода,"ДФ='ММММ гггг'");
			КонецЕсли;	 
			НачДатаПериода = Запись.ДатаНачалаПериода;
		КонецЕсли;	 
		
		//Запомним для следующей итерации
		ПредыдущаяОрганизация = Запись.Организация;
		ПредыдущийВидДеятельности = Запись.ВидДеятельности;
		Если ЗначениеЗаполнено(Запись.ДатаОкончанияПериода) тогда
			КонДатаПериода = Запись.ДатаОкончанияПериода;
		КонецЕсли;	 
	КонецЦикла;	

	//Добавим последний период деятельности
	НовыйПериод = ПериодыДеятельности.Добавить();
	НовыйПериод.Организация = ПредыдущаяОрганизация;
	НовыйПериод.ВидДеятельности = ПредыдущийВидДеятельности;
	НовыйПериод.Период = Формат(НачДатаПериода,"ДФ='ММММ гггг'") + " - "+Формат(КонДатаПериода,"ДФ='ММММ гггг'");
	
	//Установим текущий период деятельности
	УстановитьТекущийПериодДеятельности();
КонецПроцедуры	 

//Выполняет нумерацию записей о стаже 
//(устанавливает значения измерений: НомерПериодаТрудовойДеятельности,НомерОсновнойЗаписи,НомерДополнительнойЗаписи)
Процедура ВыполнитьНумерациюЗаписейОСтаже(Отказ)

	//Нумерация записей стажа перед записью
	НомерПериода = 0;
	ТекущаяОрганизация = "";
	ТекущийВидДеятельности = "";

	НомерСтроки =0;
	Для Каждого СтрокаСтажа Из ЗаписиОСтаже цикл
		НомерСтроки = НомерСтроки +1;

		//Контролируем смену периода (организации или вида деятельности)
		Если (СтрокаСтажа.Организация <>ТекущаяОрганизация) ИЛИ (СтрокаСтажа.ВидДеятельности <>ТекущийВидДеятельности) тогда
			НомерПериода = НомерПериода + 1;
			НомерОсновнойЗаписи =0; 
			ТекущаяОрганизация = СтрокаСтажа.Организация;
			ТекущийВидДеятельности = СтрокаСтажа.ВидДеятельности;
		КонецЕсли;	 

		Если ЗначениеЗаполнено(СтрокаСтажа.ДатаНачалаПериода) тогда
			//Встретили основную запись
			НомерОсновнойЗаписи = НомерОсновнойЗаписи +1; 
			НомерДополнительнойЗаписи =0; 
		Иначе	
			Если НомерОсновнойЗаписи <> 0 тогда
				НомерДополнительнойЗаписи =НомерДополнительнойЗаписи + 1; 
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке(ПроцедурыПерсонифицированногоУчета.СЗВК_СформироватьЗаголовокОшибкиЗаписиОСтаже(СтрокаСтажа,СтрокаСтажа)+"Не указаны даты начала и окончания периода!");
				Возврат;
			КонецЕсли;	 
		КонецЕсли;	

		СтрокаСтажа.НомерПериодаТрудовойДеятельности = НомерПериода;
		СтрокаСтажа.НомерОсновнойЗаписи = НомерОсновнойЗаписи;
		СтрокаСтажа.НомерДополнительнойЗаписи = НомерДополнительнойЗаписи;
	КонецЦикла;	
	
КонецПроцедуры	 

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	ЗаписиОСтаже.Отбор.Физлицо.Значение		= Ссылка;
	ЗаписиОСтаже.Отбор.Физлицо.Использование= Истина;

	ИтоговыйСтаж.Отбор.Физлицо.Значение		= Ссылка;
	ИтоговыйСтаж.Отбор.Физлицо.Использование= Истина;

	ОбновитьТаблицуПериодовДеятельности();

	ТекущийЭлемент = ЭлементыФормы.ЗаписиОСтаже; 

    //Заполнение списка организаций предприятия
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	Организации.Наименование
	                      |ИЗ
	                      |	Справочник.Организации КАК Организации");

	СписокНаименованийОрганизаций = Новый СписокЗначений;
	СписокНаименованийОрганизаций.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Наименование"));
	ЭлементыФормы.ЗаписиОСтаже.Колонки.Организация.ЭлементУправления.СписокВыбора = СписокНаименованийОрганизаций;
	
	// запоним список доступных кодов особых условий труда
	СписокПредопределенныхКодов = Новый СписокЗначений;
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.ЗП12А,"ЗП12А");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.ЗП12Б,"ЗП12Б");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.ЗП12В,"ЗП12В");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.ЗП12Г,"ЗП12Г");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.ЗП12Д,"ЗП12Д");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.ЗП12Е,"ЗП12Е");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.ЗП12Ж,"ЗП12Ж");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.ЗП12З,"ЗП12З");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.ЗП12И,"ЗП12И");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.ЗП12К,"ЗП12К");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.ЗП12Л,"ЗП12Л");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.ЗП12М,"ЗП12М");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.ЗП12О,"ЗП12О");
	СписокПредопределенныхКодов.Добавить(Справочники.ОсобыеУсловияТруда.СЕВ26,"СЕВ26");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОсобыеУсловияТруда.Код КАК Код,
	               |	ОсобыеУсловияТруда.Ссылка
	               |ИЗ
	               |	Справочник.ОсобыеУсловияТруда КАК ОсобыеУсловияТруда
	               |
	               |ГДЕ
	               |	(НЕ(ОсобыеУсловияТруда.Предопределенный))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхКодов.Добавить(Выборка.Ссылка, Выборка.Код);
	КонецЦикла;  
	
	ЭлементыФормы.ЗаписиОСтаже.Колонки.ОсобыеУсловияТруда.ЭлементУправления.СписокВыбора = СписокПредопределенныхКодов;
	
	// запоним список доступных кодов выслуги лет
	СписокПредопределенныхКодов = Новый СписокЗначений;
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЗП78ГР,"ЗП78ГР");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЗП78ВП,"ЗП78ВП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЗП78ФЛ,"ЗП78ФЛ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЗП78СС,"ЗП78СС");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЗП80ПД,"ЗП80ПД");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЗП80РК,"ЗП80РК");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЗП81ГД,"ЗП81ГД");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЗП81СМ,"ЗП81СМ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ХИРУРГД,"ХИРУРГД");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ХИРУРСМ,"ХИРУРСМ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ТВОРЧ15,"ТВОРЧ15");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ТВОРЧ20,"ТВОРЧ20");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ТВОРЧ25,"ТВОРЧ25");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ТВОРЧ30,"ТВОРЧ30");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.САМОЛЕТ,"САМОЛЕТ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.СПЕЦАВ,"СПЕЦАВ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.СПАСАВ,"СПАСАВ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.УЧЛЕТ,"УЧЛЕТ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ВЫСШПИЛ,"ВЫСШПИЛ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.НОРМАПР,"НОРМАПР");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.НОРМСП,"НОРМСП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.РЕАКТИВН,"РЕАКТИВН");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЛЕТРАБ,"ЛЕТРАБ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ЛЕТИСП,"ЛЕТИСП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ОПЫТИСП,"ОПЫТИСП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ИСПКЛС1,"ИСПКЛС1");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ИТСИСП,"ИТСИСП");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ИТСМАВ,"ИТСМАВ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ИНСПЕКТ,"ИНСПЕКТ");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.УВД,"УВД");
	СписокПредопределенныхКодов.Добавить(Справочники.ОснованияВыслугиЛет.ИТС,"ИТС");
	
	Запрос.УстановитьПараметр("СписокПредопределенныхКодов", СписокПредопределенныхКодов);
	Запрос.Текст = "ВЫБРАТЬ
	               |	ОснованияВыслугиЛет.Код КАК Код,
	               |	ОснованияВыслугиЛет.Ссылка
	               |ИЗ
	               |	Справочник.ОснованияВыслугиЛет КАК ОснованияВыслугиЛет
	               |
	               |ГДЕ
	               |	(НЕ(ОснованияВыслугиЛет.Предопределенный))
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Код";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СписокПредопределенныхКодов.Добавить(Выборка.Ссылка, Выборка.Код);
	КонецЦикла;  
	
	ЭлементыФормы.ЗаписиОСтаже.Колонки.ОснованиеВыслугиЛет.ЭлементУправления.СписокВыбора = СписокПредопределенныхКодов;

	// Прочитает дополнительные сведения о физлице
	СведенияОФизЛице = РегистрыСведений.СведенияОФизлицеДляСЗВК.Получить(Новый Структура("ФизЛицо" , ФизЛицо.Ссылка));
	РайонныйКоэффициентДляСЗВКНа2001 = СведенияОФизЛице.РайонныйКоэффициентНа31_12_2001;
	ТерриториальныеУсловияДляСЗВКНа2001 = СведенияОФизЛице.ТерриториальныеУсловияНа31_12_2001;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" формы
Процедура ПриЗаписи(Отказ)
	Отказ = Ложь;

	Если ЗаписиОСтаже.Модифицированность() Тогда

		//перед записью строк стажа пронумеруем записи
		ВыполнитьНумерациюЗаписейОСтаже(Отказ);
		Если Отказ тогда // больше ничего делать не будем
			Возврат;
		КонецЕсли;	 

		НаборЗаписей = РегистрыСведений.ЗаписиОСтажеДляСЗВК.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ФизЛицо.Значение = ФизЛицо.Ссылка;
		НаборЗаписей.Отбор.ФизЛицо.Использование = Истина;
		НаборЗаписей.Прочитать();
		
		ЗаписиОСтаже.Записать();
		
		//Выполним проверку правильности ввода данных
		Таблица = ЗаписиОСтаже.Выгрузить();
		Таблица.Свернуть("ФизЛицо");
		МассивФизЛиц = Таблица.ВыгрузитьКолонку("ФизЛицо");
	
		Если НЕ ПроцедурыПерсонифицированногоУчета.СЗВК_ПроверитьНаборЗаписейОСтаже("НаборЗаписей",МассивФизЛиц) Тогда
		
			Текст = "При проверке введенных данных в записи о стаже обнаружены ошибки!"+Символы.ПС+"Записать с ошибками?";
			Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, );
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
				НаборЗаписей.Записать()
			КонецЕсли;
			
		КонецЕсли;

	Иначе//Если набор не модифициров, то проверим его явным вызовом процедуры проверки
		МассивФизЛиц = Новый Массив;
		МассивФизЛиц.Добавить(Ссылка);
		
		Если НЕ ПроцедурыПерсонифицированногоУчета.СЗВК_ПроверитьНаборЗаписейОСтаже("НаборЗаписей", МассивФизЛиц) тогда
			Текст = "При проверке введенных данных в записи о стаже обнаружены ошибки!"+Символы.ПС+"Записать с ошибками?";
			Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, );

			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;

	Если Отказ тогда // больше ничего делать не будем
		//Неявно установим сброшенный методом "Записать" признак модификации набора
		НоваяЗапись = ЗаписиОСтаже.Добавить();
		ЗаписиОСтаже.Удалить(НоваяЗапись);
		Возврат;
	КонецЕсли;	 

	//Проверка на изменение сведений о стаже
	ТаблицаРасчетаСтажа = ИтоговыйСтаж.Выгрузить();
	КопияТаблицыДоРасчета = ТаблицаРасчетаСтажа.Скопировать();
	ТаблицаРасчетаСтажа.Очистить();

	ВыполнитьРасчетИтоговСтажа(ЗаписиОСтаже,ТаблицаРасчетаСтажа);
	
    //Физлицо и номер строки для сравнения не нужны
	ТаблицаРасчетаСтажа.Колонки.Удалить("ФизЛицо");
	ТаблицаРасчетаСтажа.Колонки.Удалить("НомерЗаписи");
 	КопияТаблицыДоРасчета.Колонки.Удалить("ФизЛицо");
	КопияТаблицыДоРасчета.Колонки.Удалить("НомерЗаписи");

	Если НЕ ТаблицыИдентичны(ТаблицаРасчетаСтажа, КопияТаблицыДоРасчета) тогда
		Вопрос = "Выполнить автоматическое заполнение таблицы сведений для оценки пенсионных прав?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ИтоговыйСтаж.Загрузить(ТаблицаРасчетаСтажа);
		КонецЕсли;
	КонецЕсли;	 
	
	Если ИтоговыйСтаж.Модифицированность() тогда
		//Установка необходимых реквизитов набора сведений перед записью
		НомерЗаписи = 0;
		Для Каждого Запись из ИтоговыйСтаж цикл
			НомерЗаписи = НомерЗаписи + 1;
			Запись.ФизЛицо = Ссылка;
			Запись.НомерЗаписи = НомерЗаписи;
		КонецЦикла;	

		НаборЗаписейСведения = РегистрыСведений.СведенияДляОценкиПенсионныхПравСЗВК.СоздатьНаборЗаписей();
		НаборЗаписейСведения.Отбор.ФизЛицо.Значение = ФизЛицо.Ссылка;
		НаборЗаписейСведения.Отбор.ФизЛицо.Использование = Истина;
		НаборЗаписейСведения.Прочитать();
		
		ИтоговыйСтаж.Записать();
		
		//Выполним проверку правильности ввода данных
		Таблица = ИтоговыйСтаж.Выгрузить();
		Таблица.Свернуть("ФизЛицо");
		МассивФизЛиц = Таблица.ВыгрузитьКолонку("ФизЛицо");
	
		Если НЕ ПроцедурыПерсонифицированногоУчета.СЗВК_ПроверитьНаборСведенийДляОценкиПенсионныхПрав("НаборЗаписей",МассивФизЛиц) Тогда
		
			Текст = "При проверке сведений для оценки пенсионных прав СЗВ-К обнаружены ошибки!"+Символы.ПС+"Записать с ошибками?";
			Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, );
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
				НаборЗаписейСведения.Записать()
			КонецЕсли;
			
		КонецЕсли;

	Иначе
		МассивФизЛиц = Новый Массив;
		МассивФизЛиц.Добавить(Ссылка);

		Если НЕ ПроцедурыПерсонифицированногоУчета.СЗВК_ПроверитьНаборСведенийДляОценкиПенсионныхПрав("НаборЗаписей", МассивФизЛиц) тогда
			Текст = "При проверке сведений для оценки пенсионных прав СЗВ-К обнаружены ошибки!"+Символы.ПС+"Записать с ошибками?";
			Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, );

			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;	 
	КонецЕсли;

	Если Отказ Тогда
		//Неявно установим сброшенный методом "Записать" признак модификации набора
		НоваяЗапись = ЗаписиОСтаже.Добавить();
		ЗаписиОСтаже.Удалить(НоваяЗапись);
		НоваяЗапись = ИтоговыйСтаж.Добавить();
		ИтоговыйСтаж.Удалить(НоваяЗапись);
	КонецЕсли; 
		
	
	// Запишем дополнительные сведения о физлице
	НаборЗаписей = РегистрыСведений.СведенияОФизлицеДляСЗВК.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ФизЛицо.Значение = ФизЛицо.Ссылка;
	НаборЗаписей.Отбор.ФизЛицо.Использование = Истина;
	Запись = НаборЗаписей.Добавить();
	Запись.ФизЛицо = ФизЛицо.Ссылка; 
	Запись.РайонныйКоэффициентНа31_12_2001 = РайонныйКоэффициентДляСЗВКНа2001;
	Запись.ТерриториальныеУсловияНа31_12_2001 = ТерриториальныеУсловияДляСЗВКНа2001;
	НаборЗаписей.Записать();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ ДЕЙСТВИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

//Процедура автоматически располагает записи о стаже в календарном порядке
Процедура КоманднаяПанельОбщегоСтажаРасположить(Кнопка)
    Отказ = Ложь;

	ВыполнитьНумерациюЗаписейОСтаже(Отказ);

	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗаписейОСтаже = ЗаписиОСтаже.Выгрузить();

	//Дополнительным записям проставим даты начала и окончания периода
	ТекущаяОсновнаяЗапись = Неопределено;
	Для Каждого Запись из ТаблицаЗаписейОСтаже цикл

		Если Запись.НомерДополнительнойЗаписи = 0 тогда
			ТекущаяОсновнаяЗапись = Запись;
		Иначе
			Запись.ДатаНачалаПериода = ТекущаяОсновнаяЗапись.ДатаНачалаПериода;
			Запись.ДатаОкончанияПериода = ТекущаяОсновнаяЗапись.ДатаОкончанияПериода;
		КонецЕсли;	 
	КонецЦикла;

	//Отсортируем таблицу по датам и номерам записей	
	ТаблицаЗаписейОСтаже.Сортировать("ДатаНачалаПериода,НомерДополнительнойЗаписи");

	//Уберем даты у дополнительных записей
	Для Каждого Запись из ТаблицаЗаписейОСтаже цикл
		Если Запись.НомерДополнительнойЗаписи <> 0 тогда
			Запись.ДатаНачалаПериода = "";
			Запись.ДатаОкончанияПериода = "";
		КонецЕсли;	 
	КонецЦикла;

	//Выложим результат сортировки
	ЗаписиОСтаже.Загрузить(ТаблицаЗаписейОСтаже);
	
	Модифицированность = Истина;
КонецПроцедуры

//Процедура автоматического расчета итогов по видам стажа
Процедура КоманднаяПанельИтоговогоСтажаЗаполнить(Кнопка)

	Если ИтоговыйСтаж.Количество() <> 0 Тогда
		Если Вопрос("Существующие данные таблицы 'Сведения для оценки пенсионных прав' будут потеряны. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет тогда
			Возврат;
		КонецЕсли;
	    ИтоговыйСтаж.Очистить();
	КонецЕсли;
	
	ВыполнитьРасчетИтоговСтажа(ЗаписиОСтаже,ИтоговыйСтаж);

	Модифицированность = Истина;
КонецПроцедуры

//Процедура автоматического заполнения набора записей о стаже историей трудовой деяетльности 
Процедура КоманднаяПанельОбщегоСтажаЗаполнитьПоТрудовойДеятельности(Кнопка)
	
	Если ФизЛицо.ТрудоваяДеятельность.Количество() = 0 тогда
		Предупреждение("История трудовой деятельности отсутствует!");
		Возврат;
	КонецЕсли;	 

	Если ЗаписиОСтаже.Количество() > 0 тогда
		Вопрос = "Существующие записи о стаже будут удалены. Продолжить?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	

	ЗаписиОСтаже.Очистить();
    ЗаполнитьСЗВКПоТрудовойДеятельности(ЗаписиОСтаже);
	Если ЗаписиОСтаже.Количество() = 0 Тогда 
		Предупреждение("Записи о трудовой деятельности до 1 января 2002 года отсутствуют!");
	КонецЕсли;
	ОбновитьТаблицуПериодовДеятельности();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ

//Обработка события активизации строки табличного поля "ПериодыДеятельности"
//
Процедура ПериодыДеятельностиПриАктивизацииСтроки(Элемент)
    ПодключитьОбработчикОжидания("ОбработчикОжиданияПериодыДеятельностиПриАктивизацииСтроки", 0.1, Истина);			
КонецПроцедуры

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля ПериодыДеятельности
//
Процедура ОбработчикОжиданияПериодыДеятельностиПриАктивизацииСтроки()
    //Если текущая запись о стаже относится к другому периоду деятельности, то спозиционируемся на первой записи остаже текущего периода
	Элемент = ЭлементыФормы.ПериодыДеятельности;
	
	ТекущаяОрганизация = Элемент.ТекущаяСтрока.Организация;
	ТекущийВидДеятельности = Элемент.ТекущаяСтрока.ВидДеятельности;
	
	Если  ЭлементыФормы.ЗаписиОСтаже.ТекущаяСтрока <> Неопределено  тогда
		Если (ЭлементыФормы.ЗаписиОСтаже.ТекущаяСтрока.Организация = ТекущаяОрганизация)и(ЭлементыФормы.ЗаписиОСтаже.ТекущаяСтрока.ВидДеятельности = ТекущийВидДеятельности) тогда
			Возврат;// Уже стоим на нужной строке стажа
		КонецЕсли;	 
	КонецЕсли;	

	Для Каждого Запись из ЗаписиОСтаже цикл
		Если (Запись.Организация = ТекущаяОрганизация)и(Запись.ВидДеятельности = ТекущийВидДеятельности) тогда
			ЭлементыФормы.ЗаписиОСтаже.ТекущаяСтрока = Запись;
			Прервать;
		КонецЕсли;	 
	КонецЦикла;
КонецПроцедуры // ОбработчикОжиданияПериодыДеятельностиПриАктивизацииСтроки

// Процедура обеспечивает управление цветом строки 
//
// Параметры:
//  Элемент      - табличное поле, которое отображает строки стажа
//  
Процедура ПериодыДеятельностиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ЭлементыФормы.ЗаписиОСтаже.ТекущаяСтрока <> Неопределено тогда
		ТекущаяОрганизация = ЭлементыФормы.ЗаписиОСтаже.ТекущаяСтрока.Организация;
		ТекущийВидДеятельности = ЭлементыФормы.ЗаписиОСтаже.ТекущаяСтрока.ВидДеятельности;

		Если (ДанныеСтроки.Организация = ТекущаяОрганизация) и (ДанныеСтроки.ВидДеятельности = ТекущийВидДеятельности) тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(230,230,230);
		Иначе	
			ОформлениеСтроки.ЦветФона = Новый Цвет();
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

//Обработка события активизации строки табличной части "ЗаписиОСтаже"
//
Процедура ЗаписиОСтажеПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикОжиданияЗаписиОСтажеПриАктивизацииСтроки", 0.1, Истина);		
КонецПроцедуры

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля ЗаписиОСтаже
//
Процедура ОбработчикОжиданияЗаписиОСтажеПриАктивизацииСтроки()
	УстановитьТекущийПериодДеятельности();
КонецПроцедуры	// ОбработчикОжиданияЗаписиОСтажеПриАктивизацииСтроки

//Обработка события удаления строки стажа
//
Процедура ЗаписиОСтажеПослеУдаления(Элемент)
	ОбновитьТаблицуПериодовДеятельности();
	Модифицированность = Истина;
КонецПроцедуры

// Процедура обеспечивает управление видимостью "подстрок" одной строки 
//
// Параметры:
//  Элемент      - табличное поле, которое отображает строки стажа
//  
Процедура ЗаписиОСтажеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеЯчеек = ОформлениеСтроки.Ячейки;
    // не показываем первую "подстрочку"
	ОформлениеЯчеек.НевидимаяКолонка.Видимость = Ложь;
	ОформлениеЯчеек.НевидимаяКолонка1.Видимость = Ложь;
    ОформлениеЯчеек.НевидимаяКолонка2.Видимость = Ложь;
    ОформлениеЯчеек.НевидимаяКолонка3.Видимость = Ложь;
	ОформлениеЯчеек.НевидимаяКолонка4.Видимость = Ложь;
	
   // не показываем, если не нужно, третью "подстрочку"
    ПоказыватьСтрокуКодаПозицииСписка = ЗначениеЗаполнено(ДанныеСтроки.ОсобыеУсловияТруда);
	ОформлениеЯчеек.НевидимаяКолонка5.Видимость = ПоказыватьСтрокуКодаПозицииСписка;
    ОформлениеЯчеек.КодПозицииСписка.Видимость = ПоказыватьСтрокуКодаПозицииСписка;

    // в четвертой "подстрочке" выводим надпись
    ОформлениеЯчеек.ПодписьДолжности.Текст = "(профессия или должность)";
    ОформлениеЯчеек.ПодписьДолжности.ОтображатьТекст = Истина;

	Если ЭлементыФормы.ПериодыДеятельности.ТекущаяСтрока <> Неопределено тогда
		ТекущаяОрганизация = ЭлементыФормы.ПериодыДеятельности.ТекущаяСтрока.Организация;
		ТекущийВидДеятельности = ЭлементыФормы.ПериодыДеятельности.ТекущаяСтрока.ВидДеятельности;

		Если (ДанныеСтроки.Организация = ТекущаяОрганизация) и (ДанныеСтроки.ВидДеятельности = ТекущийВидДеятельности) тогда
			ОформлениеСтроки.ЦветФона = Новый Цвет(230,230,230);
		Иначе	
			ОформлениеСтроки.ЦветФона = Новый Цвет();
		КонецЕсли;	 
	КонецЕсли;	 
КонецПроцедуры

//Обработка события "Начало редактирования"
//
Процедура ЗаписиОСтажеПриНачалеРедактирования(Элемент, НоваяСтрока)
	
    Если НоваяСтрока тогда
		Элемент.ТекущаяСтрока.Организация		=	ОрганизацияПоУмолчанию;
		Элемент.ТекущаяСтрока.ВидДеятельности	=	ВидДеятельностиПоУмолчанию;
	КонецЕсли;
	
КонецПроцедуры

//Обработка события "Перед началом добавления"
//
Процедура ЗаписиОСтажеПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если	Элемент.ТекущаяСтрока	<>	Неопределено	тогда
		ОрганизацияПоУмолчанию		=	Элемент.ТекущаяСтрока.Организация;
		ВидДеятельностиПоУмолчанию	=	Элемент.ТекущаяСтрока.ВидДеятельности;
	Иначе
		ОрганизацияПоУмолчанию		=	"";
		ВидДеятельностиПоУмолчанию	=	"";
	КонецЕсли;
	
КонецПроцедуры

//Обработка события "Перед окончанием редактирования"
Процедура ЗаписиОСтажеПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Модифицированность = Истина;
КонецПроцедуры

// Процедура обеспечивает управление доступностью реквизитов одной строки 
//
// Параметры:
//  Элемент      - табличное поле, которое отображает строки стажа
//  
Процедура ИтоговыйСтажПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

   ОформлениеСтроки.Ячейки.КодСтажа.ТолькоПросмотр = (ДанныеСтроки.ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОбщийТрудовойСтаж) или НЕ ЗначениеЗаполнено(ДанныеСтроки.ВидСтажа) 
   
КонецПроцедуры

//Обработка события "Перед окончанием редактирования"
Процедура ИтоговыйСтажПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Модифицированность = Истина;
КонецПроцедуры

//Обработка события удаления строки сведений
Процедура ИтоговыйСтажПослеУдаления(Элемент)
	Модифицированность = Истина;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ УПРАВЛЕНИЯ ТАБЛИЧНЫХ ПОЛЕЙ

//Обработка события изменения значения реквизита Организация
//
Процедура ЗаписиОСтажеОрганизацияПриИзменении(Элемент)
	ОбновитьТаблицуПериодовДеятельности();
КонецПроцедуры

//Обработка события изменения значения реквизита  Вид деятельности
//
Процедура ЗаписиОСтажеВидДеятельностиПриИзменении(Элемент)
	ОбновитьТаблицуПериодовДеятельности();
КонецПроцедуры

//Обработка события очистки реквизита Особые условия труда 
//
Процедура ЗаписиОСтажеОсобыеУсловияТрудаОчистка(Элемент, СтандартнаяОбработка)
	ЭлементыФормы.ЗаписиОСтаже.ТекущаяСтрока.КодПозицииСписка = Справочники.СпискиПрофессийДолжностейЛьготногоПенсионногоОбеспечения.ПустаяСсылка();
КонецПроцедуры

//Обработка события "Начало выбора" реквизита Особые условия труда
//
Процедура ЗаписиОСтажеОсобыеУсловияТрудаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

//Обработка события "Начало выбора" реквизита Основание выслуги лет
//
Процедура ЗаписиОСтажеОснованиеВыслугиЛетНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

//Обработка события изменения значения реквизита Вид стажа
//
Процедура ИтоговыйСтажВидСтажаПриИзменении(Элемент)
	Если Элемент.Значение = Перечисления.ВидыТрудовогоСтажа.ОбщийТрудовойСтаж Тогда
		ЭлементыФормы.ИтоговыйСтаж.ТекущиеДанные.КодСтажа = Неопределено;
	КонецЕсли;
КонецПроцедуры

//Обработка события "Начало выбора" реквизита Код стажа
//
Процедура ИтоговыйСтажКодСтажаНачалоВыбора(Элемент, СтандартнаяОбработка)
    ВидСтажа = ЭлементыФормы.ИтоговыйСтаж.ТекущиеДанные.ВидСтажа;
    ТипКодаСтажа = ТипЗнч(Элемент.Значение);
	Если ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ОсобыеУсловияТруда 
		 и ТипКодаСтажа <> Тип("СправочникСсылка.ОсобыеУсловияТруда") Тогда
		Элемент.Значение = Справочники.ОсобыеУсловияТруда.ПустаяСсылка();
	ИначеЕсли ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ВыслугаЛет 
		 	  и ТипКодаСтажа <> Тип("СправочникСсылка.ОснованияВыслугиЛет") Тогда
		Элемент.Значение = Справочники.ОснованияВыслугиЛет.ПустаяСсылка()
	ИначеЕсли ВидСтажа = Перечисления.ВидыТрудовогоСтажа.ТерриториальныеУсловия 
		 	  и ТипКодаСтажа <> Тип("СправочникСсылка.ТерриториальныеУсловия") Тогда
		Элемент.Значение = Справочники.ТерриториальныеУсловия.ПустаяСсылка()
	КонецЕсли;
КонецПроцедуры

ПериодыДеятельности.Индексы.Добавить("Организация,ВидДеятельности");