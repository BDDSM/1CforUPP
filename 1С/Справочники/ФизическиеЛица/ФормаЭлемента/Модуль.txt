////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОбработкаПодбораПоСтрокеВидаКИ Экспорт;
Перем мТекстПодбораПоСтрокеВидаКИ Экспорт;
Перем мПоследнееЗначениеЭлементаПодбораПоСтрокеВидаКИ Экспорт;

Перем мФормаВводаМестаРождения Экспорт;

Перем мТекущееОсновноеИзображение Экспорт;
Перем мПустаяКартинка Экспорт;

Перем мКнопкаРедактироватьКИВДиалоге Экспорт;

Перем мЭтоНовый Экспорт;

Перем мНаборЗаписейДокументаУдостоверяющегоЛичность Экспорт;
Перем мНаборЗаписейГражданство Экспорт;
Перем мНаборЗаписейПринятыеПоДолгосрочнымДоговорам Экспорт;
Перем мНаборЗаписейВоинскийУчет Экспорт;
Перем мНаборЗаписейСемейноеПоложение Экспорт;
Перем мНаборЗаписейФИО Экспорт;
Перем мНаборЗаписейИнвалидность Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ОбновитьИННОрганизаций()
	
	ТекстСообщения = "";
	ЗапросОрганизации = Новый Запрос;
	
	ЗапросОрганизации.УстановитьПараметр("ИндивидуальныйПредприниматель", Ссылка);
	ЗапросОрганизации.УстановитьПараметр("ИНН", ИНН);
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|
	|ГДЕ
	|	Организации.ИндивидуальныйПредприниматель = &ИндивидуальныйПредприниматель И
	|	Организации.ИНН <> &ИНН";
	
	ЗапросОрганизации.Текст = ТекстЗапроса;
	
	ВыборкаЗапроса = ЗапросОрганизации.Выполнить().Выбрать();
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ЗависимаяОрганизация = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		Если ВладелецФормы <> Неопределено И ТипЗнч(ВладелецФормы) = Тип("Форма") И ВладелецФормы.ЭтотОбъект.Ссылка = ЗависимаяОрганизация.Ссылка Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
		    ЗависимаяОрганизация.Заблокировать();
		Исключение
			
			ТекстСообщения = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:") + " " + ВыборкаЗапроса.Ссылка + " - объект заблокирован.";
			Возврат ТекстСообщения
		
		КонецПопытки;
		
	КонецЦикла;	    
	
	ВыборкаЗапроса.Сбросить(); 
	
	Пока ВыборкаЗапроса.Следующий() Цикл
		
		ЗависимаяОрганизация = ВыборкаЗапроса.Ссылка.ПолучитьОбъект();
		
		Если ВладелецФормы <> Неопределено И ТипЗнч(ВладелецФормы) = Тип("Форма") И ВладелецФормы.ЭтотОбъект.Ссылка = ЗависимаяОрганизация.Ссылка Тогда
			ВладелецФормы.ИНН = ИНН;
			Продолжить;
		КонецЕсли;
		ЗависимаяОрганизация.ИНН = ИНН;
		ЗависимаяОрганизация.Записать();
		
	КонецЦикла; 

	Возврат ТекстСообщения;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА СВОЙСТВ И КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	ФизическиеЛицаКлиент.ФормаЭлементаСвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	ФизическиеЛицаКлиент.ФормаЭлементаСвойстваИЗначенияПередУдалением(Элемент, Отказ, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)

	ФизическиеЛицаКлиент.ФормаЭлементаСвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ФизическиеЛицаКлиент.ФормаЭлементаСвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	ФизическиеЛицаКлиент.ФормаЭлементаСвойстваИЗначенияЗначениеПриИзменении(Элемент, ЭтаФорма);

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	ФизическиеЛицаКлиент.ФормаЭлементаСвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка, ЭтаФорма);

КонецПроцедуры


// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	ФизическиеЛицаКлиент.ФормаЭлементаКатегорииПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	ФизическиеЛицаКлиент.ФормаЭлементаКатегорииПередУдалением(Элемент, Отказ, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	ФизическиеЛицаКлиент.ФормаЭлементаКатегорииПриИзмененииФлажка(Элемент, НоваяСтрока, ЭтаФорма);

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ФизическиеЛицаКлиент.ФормаЭлементаКатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ МЕХАНИЗМА КОНТАКТНОЙ ИНФОРМАЦИИ

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.РедактироватьВДиалоге.
//
Процедура КоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКоманднаяПанельКонтактнойИнформацииРедактироватьВДиалоге(Кнопка, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Нажатие элемента формы КоманднаяПанельКонтактнойИнформации.УстановитьОсновным.
//
Процедура КоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКоманднаяПанельКонтактнойИнформацииУстановитьОсновным(Кнопка, ЭтаФорма);
	
КонецПроцедуры


// Обработчик события ПриНачалеРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияПриНачалеРедактирования(Элемент, НоваяСтрока, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события Очистка элемента формы КонтактнаяИнформация,Тип.
//
Процедура КонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияТипОчистка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события НачалоВыбора элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияВидНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидПриИзменении(Элемент)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияВидПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияВидАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста элемента формы КонтактнаяИнформация.Вид.
//
Процедура КонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияВидОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередОкончаниемРедактирования элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Представление.
//
Процедура КонтактнаяИнформацияПредставлениеПриИзменении(Элемент)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияПредставлениеПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриАктивизацииСтроки(Элемент)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияПриАктивизацииСтроки(Элемент, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередУдалением элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередУдалением(Элемент, Отказ)

	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияПередУдалением(Элемент, Отказ, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередНачаломДобавления элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередНачаломИзменения элемента формы КонтактнаяИнформация.
//
Процедура КонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияПередНачаломИзменения(Элемент, Отказ, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы КонтактнаяИнформация.Тип.
//
Процедура КонтактнаяИнформацияТипПриИзменении(Элемент)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКонтактнаяИнформацияТипПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.ДействияФормы.Кнопки.Перейти.Кнопки.ПерейтиАвансыОрганизаций.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Перейти авансы организаций");
	ЭлементыФормы.ДействияФормы.Кнопки.Перейти.Кнопки.ПерейтиАвансыОрганизаций.Пояснение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Перейти авансы организаций");
	ЭлементыФормы.ДействияФормы.Кнопки.Перейти.Кнопки.ПерейтиАвансыОрганизаций.Текст = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Авансы сотрудникам организаций");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаПередОткрытием(Отказ, СтандартнаяОбработка, ЭтаФорма);
	
	ФизическиеЛицаДополнительный.ФормаФизическогоЛицаПередОткрытием(ЭтаФорма, Новый Действие("ДополнительныеДействия"));
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	ФизическиеЛицаКлиент.ФормаЭлементаПриОткрытии(ЭтаФорма);
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
	ФизическиеЛицаДополнительный.ФормаФизическогоЛицаПриОткрытии(ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()
	
	ФизическиеЛицаКлиент.ФормаЭлементаПриЗакрытии(ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы
//
Процедура ОбработкаВыбора(РезультатВыбора, ИсточникВыбора)

	ФизическиеЛицаКлиент.ФормаЭлементаОбработкаВыбора(РезультатВыбора, ИсточникВыбора, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаписиНовогоОбъекта" формы
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	ФизическиеЛицаКлиент.ФормаЭлементаОбработкаЗаписиНовогоОбъекта(Объект, Источник, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ФизическиеЛицаКлиент.ФормаЭлементаОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма);
	
	ФизическиеЛицаДополнительный.ФормаФизическогоЛицаОбработкаОповещения(ИмяСобытия, Параметр, Источник, ЭтаФорма, Новый Действие("ДополнительныеДействия"));
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзмененииДанных" формы
//
Процедура ПриИзмененииДанных()

	ФизическиеЛицаКлиент.ФормаЭлементаПриИзмененииДанных(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" формы
//
Процедура ПриЗаписи(Отказ)
	
	ФизическиеЛицаКлиент.ФормаЭлементаПриЗаписи(Отказ, ЭтаФорма);

	ОшибкаВИНН = Ложь;
	Если ЗначениеЗаполнено(ИНН) Тогда
		ОшибкаВИНН = НЕ РегламентированнаяОтчетность.ИННСоответствуетТребованиям(ИНН, Перечисления.ЮрФизЛицо.ФизЛицо);
		Если Не ОшибкаВИНН Тогда
			
			ТекстЗаписиИНН = ОбновитьИННОрганизаций();
			
			Если НЕ ПустаяСтрока(ТекстЗаписиИНН) Тогда
				
				Сообщить(ТекстЗаписиИНН + Символы.ПС + "Элемент не записан!");
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОшибкаВСтраховомНомере = Ложь;
	Если ЗначениеЗаполнено(СтрЗаменить(Лев(СтраховойНомерПФР,11),"-","")) Тогда
		ОшибкаВСтраховомНомере = Не РегламентированнаяОтчетность.СтраховойНомерПФРСоответствуетТребованиям(СтраховойНомерПФР)	
	КонецЕсли;	
	
	ТекстВопроса = "";
	Если ОшибкаВИНН и ОшибкаВСтраховомНомере Тогда
		ТекстВопроса = "ИНН и Страховой номер физического лица заданы неверно! Записать данные физического лица с ошибками?";
	ИначеЕсли ОшибкаВИНН Тогда
		ТекстВопроса = "ИНН физического лица задан неверно! Записать данные физического лица с ошибками?";
	ИначеЕсли ОшибкаВСтраховомНомере Тогда
		ТекстВопроса = "Страховой номер физического лица задан неверно! Записать данные физического лица с ошибками?";
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТекстВопроса) Тогда
		Отказ = (Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет) = КодВозвратаДиалога.Нет);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы
//
Процедура ПослеЗаписи()
	
	ФизическиеЛицаКлиент.ФормаЭлементаПослеЗаписи(ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ОсновныеДействияФормыДействиеПечать(Кнопка)

	ФизическиеЛицаКлиент.ФормаЭлементаОсновныеДействияФормыДействиеПечать(Кнопка, ЭтаФорма);	
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьКод(Кнопка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаДействияФормыРедактироватьКод(Кнопка, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыТруд(Кнопка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаДействияФормыТруд(Кнопка, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыНДФЛ(Кнопка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаДействияФормыНДФЛ(Кнопка, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыФайлы(Кнопка)

	ФизическиеЛицаКлиент.ФормаЭлементаДействияФормыФайлы(Кнопка, ЭтаФорма);

КонецПроцедуры

Процедура ДействияФормыПеречитать(Кнопка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаДействияФормыПеречитать(Кнопка, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

Процедура ДействияФормыПерейтиАвансы(Кнопка)
	
	ФормаСписка = РегистрыСведений.АвансыРаботникам.ПолучитьФормуСписка(,ЭтаФорма);
	ФормаСписка.Отбор.ФизЛицо.Значение		= Ссылка;
	ФормаСписка.Отбор.ФизЛицо.Использование	= Истина;
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыПерейтиАвансыОрганизаций(Кнопка)
	
	ФормаСписка = РегистрыСведений.АвансыРаботникамОрганизаций.ПолучитьФормуСписка(,ЭтаФорма);
	ФормаСписка.Отбор.ФизЛицо.Значение		= Ссылка;
	ФормаСписка.Отбор.ФизЛицо.Использование	= Истина;
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыПерейтиЛицевыеСчета(Кнопка)
	
	ФормаСписка = РегистрыСведений.ЛицевыеСчетаРаботниковОрганизации.ПолучитьФормуСписка(,ЭтаФорма);
	ФормаСписка.Отбор.ФизЛицо.Значение		= Ссылка;
	ФормаСписка.Отбор.ФизЛицо.Использование	= Истина;
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура ДействияФормыПерейтиМедицинскиеСтраховыеПолисы(Кнопка)
	
	ФормаСписка = Справочники.МедицинскиеСтраховыеПолисы.ПолучитьФормуСписка(, ЭтаФорма, Ссылка);
	ФормаСписка.Отбор.Физлицо.Установить(Ссылка);
	
	СправочникСписок	= ФормаСписка.ЭлементыФормы.СправочникСписок;
	Колонки				= СправочникСписок.Колонки;
	
	Колонки.Физлицо.Видимость			= Ложь;
	Колонки.Физлицо.ИзменятьВидимость	= Ложь;
	СправочникСписок.НастройкаОтбора.Физлицо.Доступность = Ложь;
	
	ФормаСписка.Открыть();
	
КонецПроцедуры

Процедура ДополнительныеДействия(Элемент)
	
	ФизическиеЛицаДополнительный.ФормаФизическогоЛицаДополнительныеДействия(Элемент, ЭтаФорма);
	
КонецПроцедуры // ДополнительныеДействия

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

Процедура НаименованиеПриИзменении(Элемент)
	
	ФизическиеЛицаКлиент.ФормаЭлементаНаименованиеПриИзменении(Элемент, ЭтаФорма);	
	
КонецПроцедуры

// Процедура формирует список вариантов для наименования элемента
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаНаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаВызоваДанныхФИОНажатие(Элемент)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКнопкаВызоваДанныхФИОНажатие(Элемент, ЭтаФорма);
	
КонецПроцедуры

// Процедура открывает основное изображение в отдельном окне.
Процедура ОсновноеИзображениеНажатие(Элемент)
	
	ФизическиеЛицаКлиент.ФормаЭлементаОсновноеИзображениеНажатие(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура КодИМНСПриИзменении(Элемент)
	
	ФизическиеЛицаКлиент.ФормаЭлементаКодИМНСПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

// Процедура записывает код ИФНС "по умолчанию" по первым 4 цифрам ИНН
Процедура ИННПриИзменении(Элемент)
	
	ФизическиеЛицаКлиент.ФормаЭлементаИННПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура СтраховойНомерПФРПриИзменении(Элемент)
	
	ФизическиеЛицаКлиент.ФормаЭлементаСтраховойНомерПФРПриИзменении(Элемент, ЭтаФорма);	
	
КонецПроцедуры

Процедура МестоРожденияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаМестоРожденияНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура УдостоверениеЛичностиНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФизическиеЛицаКлиент.ФормаЭлементаУдостоверениеЛичностиНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура ГражданствоНачалоВыбора(Элемент, СтандартнаяОбработка)

	ФизическиеЛицаКлиент.ФормаЭлементаГражданствоНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура ВоинскийУчетНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаВоинскийУчетНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);

КонецПроцедуры

Процедура ИнвалидностьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаИнвалидностьНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

Процедура СемейноеПоложениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФизическиеЛицаКлиент.ФормаЭлементаСемейноеПоложениеНачалоВыбора(Элемент, СтандартнаяОбработка, ЭтаФорма);

КонецПроцедуры

Процедура ДатаРожденияПриИзменении(Элемент)
	
	ФизическиеЛицаКлиент.ФормаЭлементаДатаРожденияПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура ЕстьЛьготаПриНачисленииПособийПриИзменении(Элемент)
	
	ФизическиеЛицаКлиент.ФормаЭлементаЕстьЛьготаПриНачисленииПособийПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Образование

Процедура ОбразованиеПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если Элемент.ТекущаяСтрока.Специальность = Неопределено Тогда
	    Элемент.ТекущаяСтрока.Специальность = Справочники.КлассификаторСпециальностейПоОбразованию.ПустаяСсылка()
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Заметки

Процедура ЗаметкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	ФизическиеЛицаКлиент.ФормаЭлементаЗаметкиПередНачаломДобавления(Элемент, Отказ, Копирование, ЭтаФорма);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

УправлениеКонтактнойИнформацией.ПрочитатьКонтактнуюИнформацию(НаборКонтактнойИнформации, Ссылка);

мПустаяКартинка = Новый Картинка;

мОбработкаПодбораПоСтрокеВидаКИ					= Ложь;
мТекстПодбораПоСтрокеВидаКИ						= "";
мПоследнееЗначениеЭлементаПодбораПоСтрокеВидаКИ	= Неопределено;

// Прочитать связанную информацию

мНаборЗаписейДокументаУдостоверяющегоЛичность = РегистрыСведений.ПаспортныеДанныеФизЛиц.СоздатьНаборЗаписей();
ОбщегоНазначения.ПолучитьСвязанныеДанныеФизлица(Ссылка, мНаборЗаписейДокументаУдостоверяющегоЛичность);
мНаборЗаписейГражданство = РегистрыСведений.ГражданствоФизЛиц.СоздатьНаборЗаписей();
ОбщегоНазначения.ПолучитьСвязанныеДанныеФизлица(Ссылка, мНаборЗаписейГражданство);
мНаборЗаписейВоинскийУчет = РегистрыСведений.ВоинскийУчет.СоздатьНаборЗаписей();
ОбщегоНазначения.ПолучитьСвязанныеДанныеФизлица(Ссылка, мНаборЗаписейВоинскийУчет);
мНаборЗаписейСемейноеПоложение = РегистрыСведений.СемейноеПоложениеФизЛиц.СоздатьНаборЗаписей();
ОбщегоНазначения.ПолучитьСвязанныеДанныеФизлица(Ссылка, мНаборЗаписейСемейноеПоложение);
мНаборЗаписейФИО = РегистрыСведений.ФИОФизЛиц.СоздатьНаборЗаписей();
ОбщегоНазначения.ПолучитьСвязанныеДанныеФизлица(Ссылка,мНаборЗаписейФИО );
мНаборЗаписейИнвалидность = РегистрыСведений.СведенияОбИнвалидностиФизлиц.СоздатьНаборЗаписей();
ОбщегоНазначения.ПолучитьСвязанныеДанныеФизлица(Ссылка,мНаборЗаписейИнвалидность );
мНаборЗаписейПринятыеПоДолгосрочнымДоговорам = РегистрыСведений.ВременноПребывающиеПринятыеПоДолгосрочнымДоговорам.СоздатьНаборЗаписей();
мНаборЗаписейПринятыеПоДолгосрочнымДоговорам.Отбор.ФизЛицо.Установить(Ссылка);
мНаборЗаписейПринятыеПоДолгосрочнымДоговорам.Прочитать();