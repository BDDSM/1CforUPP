////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мКолонкиМатериалы;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОтражатьВРегламентированномУчете;

Перем мПрименениеУСН;
Перем мВедениеУчетаЗатратПоПроектам;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Материалы,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчета(ФормаТабличнаяЧасть, КолонкаСчетБУ = "Счет", КолонкаСчетНУ = "СчетНУ")
	
	СтрокаТабличнойЧасти = ФормаТабличнаяЧасть.ТекущаяСтрока;
	
	СтруктураДанных = новый Структура("СчетБУ", СтрокаТабличнойЧасти[КолонкаСчетБУ]);
	
	// Счет затрат по налоговому учету определяем с учетом счета учета.
	Если КолонкаСчетБУ = "СчетЗатрат"
	   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет)
	Тогда
		СтруктураДанных.Вставить("СчетКоррБУ", СтрокаТабличнойЧасти.Счет);
	КонецЕсли;
	
	СтрокаТабличнойЧасти[КолонкаСчетНУ] = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(СтруктураДанных);
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Истина;
	ЕстьСерия = Истина;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиПроизводство","По остаткам в производстве");
	Если ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.ВозвратныеОтходы Тогда
		СписокЗапросов.Добавить( "Спецификации", "По спецификациям");
	КонецЕсли;

	ИмяТабличнойЧасти = "Материалы";

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , "ПодборВТабличнуюЧастьМатериалы");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                  , Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"        , Валюта);
	СтруктураПараметровПодбора.Вставить("Организация"            , Организация);
	СтруктураПараметровПодбора.Вставить("Подразделение"          , Подразделение);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества", Истина);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Качество"        , Качество);
	Качество = ?(ЗначениеЗаполнено(Качество), Качество, Справочники.Качество.Новый);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения"          , ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("Качество"                  , Качество);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
		СтрокаТабличнойЧасти.Количество                 = Количество;
		СтрокаТабличнойЧасти.Качество                   = Качество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

		СтрокаТабличнойЧасти.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная;
		СтрокаТабличнойЧасти.Цена = Цена;
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		СтрокаТабличнойЧасти.СуммаРегл = РасчетСуммыПоСтрокеРегл(СтрокаТабличнойЧасти);
		
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппаЗатрат;
		СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;

		Если СтрокаТабличнойЧасти.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			СтрокаТабличнойЧасти.СтатусВозврата = Перечисления.СтатусыПартийТоваров.ВПереработку;
		ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство
			  ИЛИ СтрокаТабличнойЧасти.Номенклатура.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка Тогда
			СтрокаТабличнойЧасти.СтатусВозврата = Перечисления.СтатусыПартийТоваров.Продукция;
		Иначе
			СтрокаТабличнойЧасти.СтатусВозврата = Перечисления.СтатусыПартийТоваров.Купленный;
		КонецЕсли;

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЕсли;

	ЭлементыФормы.Материалы.ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы.Материалы.ТекущаяКолонка = ЭлементыФормы.Материалы.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораПоСпецификации(ТабличнаяЧасть, ЗначениеВыбора)
	
	Перем Спецификация;
	Перем Количество;
	
	Если НЕ ЗначениеВыбора.Свойство( "Спецификация", Спецификация)
	 ИЛИ НЕ ЗначениеВыбора.Свойство( "Количество",   Количество) Тогда
		Возврат;
	КонецЕсли;
	
	ИсхДанные = Новый Структура;
	ИсхДанные.Вставить( "Спецификация", Спецификация);
	ИсхДанные.Вставить( "Количество",   Количество);
	
	Результат = Новый Структура;
	Результат.Вставить( "ВозвратныеОтходы");
		
	Параметры = Новый Структура;
	Параметры.Вставить( "КоличествоУровнейРазузлования", 1);
	Параметры.Вставить( "ДатаСпецификации", Дата);
	
	РазузлованиеНоменклатуры.РазузловатьНоменклатуру( ИсхДанные, Результат, Параметры);
	
	Если Результат.ВозвратныеОтходы.Количество() > 0 Тогда
		Для Каждого СтрокаСпец Из Результат.ВозвратныеОтходы Цикл
		
			НоваяСтрока = Материалы.Добавить();
			НоваяСтрока.Номенклатура = СтрокаСпец.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаСпец.ХарактеристикаНоменклатуры;
			НоваяСтрока.ЕдиницаИзмерения           = СтрокаСпец.ЕдиницаИзмерения;
			НоваяСтрока.Количество   = СтрокаСпец.Количество;
			НоваяСтрока.Коэффициент  = СтрокаСпец.ЕдиницаИзмерения.Коэффициент;
			НоваяСтрока.СтатьяЗатрат = СтрокаСпец.СтатьяЗатрат;
			НоваяСтрока.Сумма        = СтрокаСпец.Сумма;
			НоваяСтрока.СуммаРегл    = СтрокаСпец.СуммаРегл;
			НоваяСтрока.Качество     = Справочники.Качество.Новый;
			НоваяСтрока.НоменклатурнаяГруппа = СтрокаСпец.Номенклатура.НоменклатурнаяГруппаЗатрат;
			
			ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(НоваяСтрока, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Материалы");
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(НоваяСтрока, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
			ПриИзмененииНоменклатурыМатериалов(НоваяСтрока);
		
			Если НоваяСтрока.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
				НоваяСтрока.СтатусВозврата = Перечисления.СтатусыПартийТоваров.ВПереработку;
		    Иначе
				НоваяСтрока.СтатусВозврата = Перечисления.СтатусыПартийТоваров.Купленный;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ТипСтоимости) Тогда
				НоваяСтрока.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ОбработкаПодбораПоСпецификации()

// Функция расчета суммы регл.
//
Функция РасчетСуммыПоСтрокеРегл(СтрокаДок)
	
	Если ОтражатьВУправленческомУчете Тогда
		СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл( СтрокаДок.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	Иначе
		СуммаРегл = СтрокаДок.Цена * СтрокаДок.Количество;
	КонецЕсли;
	
	Возврат СуммаРегл;
	
КонецФункции // РасчетСуммыПоСтрокеРегл()

// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Материалы"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость реквизитов формы.
//
Процедура УстановитьВидимость()
	
	Если ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы Тогда
		ЭлементыФормы.Материалы.Колонки.ТипСтоимости.Видимость = Истина;
	Иначе
		ЭлементыФормы.Материалы.Колонки.ТипСтоимости.Видимость = Ложь;
	КонецЕсли;
	
	//Установка видимости, автоотметки незаполненного полей со счетами учета номенклатуры и затрат
	СтруктураТабличныхЧастей = Новый Структура();
	СтруктураТабличныхЧастей.Вставить("Материалы", 		мКолонкиМатериалы);
	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(Дата, Метаданные().Имя, Неопределено, СтруктураТабличныхЧастей, Истина, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	Флаг = ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы;
	ЭлементыФормы.Материалы.Колонки.Продукция              .Видимость = Флаг;
	ЭлементыФормы.Материалы.Колонки.СерияПродукции         .Видимость = Флаг;
	ЭлементыФормы.Материалы.Колонки.ХарактеристикаПродукции.Видимость = Флаг;
	
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоОстаткам.Доступность = Флаг;
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДобавитьИзТребованиюНакладной.Доступность = Флаг;
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);

		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Проект) Тогда
				Проект = Подразделение.ОсновнойПроект;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Материалы.Колонки, СтруктураКолонок);

	мПрименениеУСН 		 = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	мВедениеУчетаЗатратПоПроектам = УправлениеПроектами.ВедениеУчетаЗатратПоПроектам();

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиМатериалы);
	
	РаботаСДиалогами.УстановитьВидимостьКолонкиПроект(мКолонкиМатериалы, , мУказаниеПроектовВТабличнойЧастиДокументов И мВедениеУчетаЗатратПоПроектам);
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект", Истина);
	
	УстановитьВидимость();
	
	РаботаСДиалогами.УстановитьПараметрыКолонокСуммы( ЭлементыФормы.Материалы, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда, Спецификация;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		ЗначениеВыбора.Свойство("Спецификация", Спецификация);

		Если Спецификация <> Неопределено Тогда
			ОбработкаПодбораПоСпецификации(Материалы, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			ОбработкаПодбора(Материалы, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ПредопределенноеЗначение("Перечисление.КлючевыеОперации.ПроведениеДокументаОприходованиеМатериаловИзПроизводства"));
	// Конец ОценкаПроизводительности
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
// Обработчик уставливается динамически методом "Действие"
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления[ВидОперации.Метаданные().Имя][Кнопка.Имя];
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	УстановитьВидимость();
	
	Если ВидОперации  = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.ВозвратныеОтходы Тогда
		Для Каждого СтрокаТЧ Из Материалы Цикл
	    	Если Не СтрокаТЧ.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
				СтрокаТЧ.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Материалы
//
Процедура КоманднаяПанельТоварыПодбор(Кнопка)
	
	ДействиеПодбор(Материалы);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить по остаткам" командной панели
// табличного поля "Материалы
//
Процедура КоманднаяПанельТоварыЗаполнитьПоОстаткам(Кнопка)
	
	Если Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе");
		Возврат;
	КонецЕсли;
	Если ОтражатьВУправленческомУчете И НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Предупреждение("Не указано подразделение!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Предупреждение("Не указано подразделение организации!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена.
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Материалы.Очистить();
	
	УправлениеПроизводством.ЗаполнитьМатериалыПоОстаткамНЗП(ЭтотОбъект, Материалы, Истина, Истина, Истина, Ложь, Ложь, Истина);
	
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		СтрокаТабличнойЧасти.ТипСтоимости 			= Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная;
		СтрокаТабличнойЧасти.Качество 				= Справочники.Качество.Новый;
		
		Если СтрокаТабличнойЧасти.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			СтрокаТабличнойЧасти.СтатусВозврата = Перечисления.СтатусыПартийТоваров.ВПереработку;
		ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство
			  ИЛИ СтрокаТабличнойЧасти.Номенклатура.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка Тогда
			СтрокаТабличнойЧасти.СтатусВозврата = Перечисления.СтатусыПартийТоваров.Продукция;
		Иначе
			СтрокаТабличнойЧасти.СтатусВозврата = Перечисления.СтатусыПартийТоваров.Купленный;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
			Если СтрокаТабличнойЧасти.СтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Материальные 
				и СтрокаТабличнойЧасти.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
				
				СтрокаТабличнойЧасти.ЗаказРезерв = СтрокаТабличнойЧасти.Заказ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоОстаткам()

Процедура КнопкаЗаполнитьОстаткамиМатериаловВПроизводстве(Кнопка)
	
	Если РаботаСДиалогамиКлиент.ПользовательОтказалсяПерезаполнитьТабличнуюЧасть(Материалы) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОстаткамиМатериаловВПроизводстве();
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Добавить из требования-накладной" командной панели
// табличного поля "Материалы
//
Процедура КоманднаяПанельТоварыДобавитьИзТребованияНакладной(Кнопка)
	
	ФормаВыбора = Документы.ТребованиеНакладная.ПолучитьФормуВыбора(, ЭтаФорма, ЭтотОбъект);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокТН = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокТН) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из ДокТН.Материалы Цикл
		
		НоваяСтрока = Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТабличнойЧасти);
		
		НоваяСтрока.ТипСтоимости   		= Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается;
		НоваяСтрока.СтатусВозврата 		= Перечисления.СтатусыПартийТоваров.Купленный;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельТоварыДобавитьИзТребованияНакладной()

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Материалы", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельМатериалыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧасти      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧасти = ИзменениеТабличнойЧасти.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧасти.ДокументОбъект  = ЭтотОбъект;
	ФормаИзменениеТабличнойЧасти.мФормаДокумента = ЭтаФорма;
	ФормаИзменениеТабличнойЧасти.мЕстьНДС        = Ложь; 
	
	ФормаИзменениеТабличнойЧасти.мЕстьЦенаВРознице           = Ложь;
	ФормаИзменениеТабличнойЧасти.мСпособЗаполненияЦен        = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧасти.мИмяТабличнойЧастиДокумента = "Материалы";

	//Перенесем табличную часть
	ИзменениеТабличнойЧасти.Товары.Загрузить(Материалы.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧасти.Открыть();

КонецПроцедуры // КоманднаяПанельМатериалыДействиеИзменить()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	мПрименениеУСН 		 = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
	
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Материалы"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	// Заполнить значения счетов учета и счетов затрат.
	Если Материалы.Количество() > 0 Тогда
		
		// Заполним сумму в валюте регл. учета.
		Ответ = Вопрос(?(ОтражатьВБухгалтерскомУчете, "Заполнить", "Очистить") + 
						" сумму регл. учета?", 
						РежимДиалогаВопрос.ДаНет, , , "Изменения суммы регл. учета");

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТЧ Из Материалы Цикл
				Если СтрокаТЧ.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
					Если Элемент.Значение Тогда
						СтрокаТЧ.СуммаРегл = РасчетСуммыПоСтрокеРегл(СтрокаТЧ);
					Иначе
						СтрокаТЧ.СуммаРегл = 0;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	РаботаСДиалогами.УстановитьПараметрыКолонокСуммы( ЭлементыФормы.Материалы, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете);
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в упр. учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	РаботаСДиалогами.УстановитьЦеныПоТипуУчета( Материалы, ОтражатьВУправленческомУчете);
	РаботаСДиалогами.УстановитьПараметрыКолонокСуммы( ЭлементыФормы.Материалы, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете);
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	мПрименениеУСН 		 = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

    РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПодразделениеОрганизацииПриИзменении(Элемент);
	КонецЕсли;
												  
	Проект = Подразделение.ОсновнойПроект;

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Подразделения организации.
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.Равно, СтандартнаяОбработка, Перечисления.ВидыСкладов.Оптовый);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Проект.
//
Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ПроектНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Материалы

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Материалы". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы Тогда
		ФиксированнаяСтоимость = (ДанныеСтроки.ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная);
		
		ОформлениеСтроки.Ячейки.Цена.Видимость      = ФиксированнаяСтоимость;
		ОформлениеСтроки.Ячейки.Сумма.Видимость     = ФиксированнаяСтоимость И ОтражатьВУправленческомУчете;
		ОформлениеСтроки.Ячейки.СуммаРегл.Видимость = ФиксированнаяСтоимость И ОтражатьВБухгалтерскомУчете;
		
		ОформлениеСтроки.Ячейки.Цена.ТолькоПросмотр      = Не ФиксированнаяСтоимость;
		ОформлениеСтроки.Ячейки.Сумма.ТолькоПросмотр     = Не (ФиксированнаяСтоимость И ОтражатьВУправленческомУчете);
		ОформлениеСтроки.Ячейки.СуммаРегл.ТолькоПросмотр = Не (ФиксированнаяСтоимость И ОтражатьВБухгалтерскомУчете);
	Иначе
		ОформлениеСтроки.Ячейки.Цена .Видимость     = Истина;
		ОформлениеСтроки.Ячейки.Сумма.Видимость     = ОтражатьВУправленческомУчете;
		ОформлениеСтроки.Ячейки.СуммаРегл.Видимость = ОтражатьВБухгалтерскомУчете;
		
		ОформлениеСтроки.Ячейки.Цена .ТолькоПросмотр     = Ложь;
		ОформлениеСтроки.Ячейки.Сумма.ТолькоПросмотр     = Не ОтражатьВУправленческомУчете;
		ОформлениеСтроки.Ячейки.СуммаРегл.ТолькоПросмотр = Не ОтражатьВБухгалтерскомУчете;
	КонецЕсли;
	
	Если ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
	   И ДанныеСтроки.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
		ОформлениеСтроки.Ячейки.СчетНУ.ОтметкаНезаполненного 		= Ложь;
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.ОтметкаНезаполненного 	= Ложь;
		ОформлениеСтроки.Ячейки.СчетНУ.Видимость 					= Ложь;
		ОформлениеСтроки.Ячейки.СчетНУ.ТолькоПросмотр 				= Истина;
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.Видимость 				= Ложь;
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.ТолькоПросмотр 		= Истина;
	Иначе
		ОформлениеСтроки.Ячейки.СчетНУ.Видимость 					= Истина;
		ОформлениеСтроки.Ячейки.СчетНУ.ТолькоПросмотр 				= Ложь;
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.Видимость 				= Истина;
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.ТолькоПросмотр 		= Ложь;
	КонецЕсли;
	
	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	Если ЭлементыФормы.Материалы.Колонки.ХарактерЗатрат.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.Текст = ХарактерЗатрат;
	КонецЕсли;
	УправлениеПроектами.УстановитьДоступностьПроектаВСтрокеТабЧасти(ХарактерЗатрат, ОформлениеСтроки, ЭлементыФормы.Материалы);
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, ДанныеСтроки.Продукция, ДанныеСтроки.СчетЗатрат, ДанныеСтроки.СчетЗатратНУ, ОформлениеСтроки, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП);
	
	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент, Истина, Неопределено, Неопределено, ДанныеСтроки, ОформлениеСтроки);

КонецПроцедуры // МатериалыПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Материалы".
//
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Проект) Тогда
			Элемент.ТекущиеДанные.Проект = Проект;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // МатериалыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ПриИзмененииНоменклатурыМатериалов(СтрокаТабличнойЧасти);
	
	УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатусВозврата) Тогда
		Если СтрокаТабличнойЧасти.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			СтрокаТабличнойЧасти.СтатусВозврата = Перечисления.СтатусыПартийТоваров.ВПереработку;
		ИначеЕсли СтрокаТабличнойЧасти.Номенклатура.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство
			  ИЛИ СтрокаТабличнойЧасти.Номенклатура.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Переработка Тогда
			СтрокаТабличнойЧасти.СтатусВозврата = Перечисления.СтатусыПартийТоваров.Продукция;
		Иначе
			СтрокаТабличнойЧасти.СтатусВозврата = Перечисления.СтатусыПартийТоваров.Купленный;
		КонецЕсли;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ТипСтоимости) Тогда
		СтрокаТабличнойЧасти.ТипСтоимости   = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная;
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;

КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаМестПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	СтрокаТабличнойЧасти.СуммаРегл = РасчетСуммыПоСтрокеРегл(СтрокаТабличнойЧасти);
	
КонецПроцедуры // МатериалыЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	СтрокаТабличнойЧасти.СуммаРегл = РасчетСуммыПоСтрокеРегл(СтрокаТабличнойЧасти);

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количество
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	ТекСтрока = ЭлементыФормы.Материалы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( ТекСтрока, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти         ( ТекСтрока, ЭтотОбъект);
	ТекСтрока.СуммаРегл = РасчетСуммыПоСтрокеРегл( ТекСтрока);
	
КонецПроцедуры // МатериалыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура МатериалыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ТекСтрока = ЭлементыФормы.Материалы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ТекСтрока, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти     (ТекСтрока, ЭтотОбъект);
	ТекСтрока.СуммаРегл = РасчетСуммыПоСтрокеРегл( ТекСтрока);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Материалы".
//
Процедура МатериалыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = РасчетСуммыПоСтрокеРегл(СтрокаТабличнойЧасти);
	
КонецПроцедуры // МатериалыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода сумма
// в строке табличной части "Материалы".
//
Процедура МатериалыСуммаПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Суммы.
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Материалы");
	
	СтрокаТабличнойЧасти.СуммаРегл = РасчетСуммыПоСтрокеРегл(СтрокаТабличнойЧасти);
	
КонецПроцедуры // МатериалыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма (регл)"
// в строке табличной части "Материалы".
//
Процедура МатериалыСуммаРеглПриИзменении(Элемент)
	
	Если Не ОтражатьВУправленческомУчете Тогда
		
		СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
		Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
			СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.СуммаРегл / СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // МатериалыСуммаРеглПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// в строке табличной части "Материалы".
//
Процедура МатериалыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
		СтруктураОтбора.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.Переработка);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Материалы", ДопПараметры);

КонецПроцедуры // МатериалыЗаказНачалоВыбора()


// Процедура - обработчик события "ПриИзменении" поля Счет табличной части "Материалы".
//
Процедура МатериалыСчетПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчета(ЭлементыФормы.Материалы);
	
КонецПроцедуры // МатериалыСчетПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Счет табличной части "Материалы".
//
Процедура МатериалыСчетЗатратПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчета(ЭлементыФормы.Материалы, "СчетЗатрат", "СчетЗатратНУ");
	
КонецПроцедуры // МатериалыСчетЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода Счет
// в строке табличной части "Материалы".
//
Процедура МатериалыСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Статья затрат
// табличной части "Материалы".
//
Процедура МатериалыСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Ложь);
	
	Если СтрокаТабличнойЧасти.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
		СтрокаТабличнойЧасти.СтатусВозврата = Перечисления.СтатусыПартийТоваров.ВПереработку;
	КонецЕсли;
	
	Если НЕ СтрокаТабличнойЧасти.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве
	   И НЕ ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.Материалы Тогда
		СтрокаТабличнойЧасти.Продукция               = Неопределено;
		СтрокаТабличнойЧасти.СерияПродукции          = Неопределено;
		СтрокаТабличнойЧасти.ХарактеристикаПродукции = Неопределено;
	КонецЕсли;
	
	Если мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.УстановитьПроектПоУмолчанию(Подразделение, СтрокаТабличнойЧасти.СтатьяЗатрат, СтрокаТабличнойЧасти.Проект);
	КонецЕсли;
	
КонецПроцедуры // МатериалыСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура МатериалыСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // МатериалыСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Проект"
//
Процедура МатериалыПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // МатериалыПроектНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода статьи затрат
//
Процедура МатериалыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОперации = Перечисления.ВидыОперацийОприходованиеМатериаловИзПроизводства.ВозвратныеОтходы Тогда
		
		ТабОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
		
		ТекОтбор              = ТабОтбора.Добавить();
		ТекОтбор.Имя          = "СтатусМатериальныхЗатрат";
		ТекОтбор.ВидСравнения = ВидСравнения.Равно;
		ТекОтбор.Значение     = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы;
		
		РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(ТабОтбора, Элемент, СтандартнаяОбработка);
	Иначе
		ТабОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
		
		ТекОтбор              = ТабОтбора.Добавить();
		ТекОтбор.Имя          = "ХарактерЗатрат";
		ТекОтбор.ВидСравнения = ВидСравнения.НеРавно;
		ТекОтбор.Значение     = Перечисления.ХарактерЗатрат.Прочие;
		
		РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(ТабОтбора, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры // МатериалыСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода продукция
//
Процедура МатериалыПродукцияПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.Материалы.ТекущиеДанные;
	Если ТекСтрока.СерияПродукции.Владелец <> Элемент.Значение Тогда
		ТекСтрока.СерияПродукции = Неопределено
	КонецЕсли;
	Если ТекСтрока.ХарактеристикаПродукции.Владелец <> Элемент.Значение Тогда
		ТекСтрока.ХарактеристикаПродукции = Неопределено
	КонецЕсли;
	
КонецПроцедуры // МатериалыПродукцияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура МатериалыЗаказРезервНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Материалы", ДопПараметры);
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

ЭлементыФормы.Материалы.Колонки.СтатусВозврата.ЭлементУправления.СписокВыбора.Добавить( Перечисления.СтатусыПартийТоваров.Купленный);
ЭлементыФормы.Материалы.Колонки.СтатусВозврата.ЭлементУправления.СписокВыбора.Добавить( Перечисления.СтатусыПартийТоваров.Продукция);
ЭлементыФормы.Материалы.Колонки.СтатусВозврата.ЭлементУправления.СписокВыбора.Добавить( Перечисления.СтатусыПартийТоваров.ВПереработку);

мКолонкиМатериалы = ЭлементыФормы.Материалы.Колонки;