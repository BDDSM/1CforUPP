////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущийСотрудник;
Перем мВалютаРегламентированногоУчета;

// для синхронизации строк табличных полей
Перем мСинхронизируемыеТабличныеЧасти;

Перем мСведенияОВидахРасчетаОснНачислений;
Перем мСведенияОВидахРасчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Диалог настройки периода
Перем мНастройкаПериода;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

// Механизм исправлений
Перем мСтруктураМенюИсправление;
Перем мДокументыИсправление;
Перем мСотрудникиИсправление;

Перем РучныеИзмененияНачислений;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает механизму исправления информацию о том, заполнен документ правильно или с ошибками
//
Функция ДокументЗаполненСОшибками() Экспорт
	
	Возврат РаботникиОрганизации.НайтиСтроки(Новый Структура("ПодразделениеОрганизации",Дата(1,1,1))).Количество() > 0
		ИЛИ РаботникиОрганизации.НайтиСтроки(Новый Структура("Должность",Дата(1,1,1))).Количество() > 0
		ИЛИ РаботникиОрганизации.НайтиСтроки(Новый Структура("ДатаПриема",Дата(1,1,1))).Количество() > 0
		ИЛИ РаботникиОрганизации.НайтиСтроки(Новый Структура("ГрафикРаботы",Дата(1,1,1))).Количество() > 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьСтруктуруПараметровПодбораПоСтроке()
	
	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);

	СтруктураПараметров = Новый Структура("ВидВремени", ВидыВремени);
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанельОсновныеНачисления);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Заполняет "пустые" реквизиты ТЧ значениями по умолчанию
//
Процедура ДоЗаполнитьСтроку()

	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗанимаемыхСтавок) Тогда
		ДанныеСтроки.ЗанимаемыхСтавок  = 1;
	КонецЕсли;
		
КонецПроцедуры // ДоЗаполнитьСтроку()

// удаляет начисления по работнику, все или автоматически заполняемые
// Параметры:
//   Сотрудник  - СправочникСсылка.СотрудникиОрганизации
//   УдалятьВсе - булево, если Истина - удаляются все начисления по физлицу,
//				например, при его удалении из сиска.
//				Если Ложь - удалаются только те, которые вводятся "автоматически",
//				например, при редактировании данных по строке табличной части 
//				со списком работников
Процедура УдалитьНачисленияПоРаботнику(Сотрудник)
	
	СтруктураПоиска = Новый Структура("Сотрудник, Сторно", Сотрудник, Ложь);
	
	// удалять начисления будем в том случае, когда в т.ч. Работники эта строка с сотрудником - последняя
	Если РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Строки = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТабличнойЧасти из Строки Цикл
		ОсновныеНачисления.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	// Если были ручные изменения - их тоже удаляем
	РучныеИзмененияНачислений.Удалить(Сотрудник);
	
	ПриемНаРаботуВОрганизациюПереопределяемый.УдалитьДополнительноПоСтроке(ЭтаФорма, Сотрудник);
		
КонецПроцедуры // УдалитьНачисленияПоРаботнику()

Процедура ВнестиДанныеПоСотруднику(ИзменятьКадровыеДанные = Ложь)
		
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	// Нужно запросить пользователя - будем ли перезаполнять начисления при наличии ручных изменений
	ПерезаполнятьНачисления = Истина;
	Если РучныеИзмененияНачислений[мТекущийСотрудник] <> Неопределено 
		И ДанныеСтроки.Сотрудник = мТекущийСотрудник Тогда
		ТекстВопроса = "Начисления сотрудника изменялись вручную. Перезаполнить?";
		ПерезаполнятьНачисления = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да;
	КонецЕсли;
	
	Если ПерезаполнятьНачисления Тогда
		УдалитьНачисленияПоРаботнику(мТекущийСотрудник);
		РучныеИзмененияНачислений.Удалить(мТекущийСотрудник);
	КонецЕсли;
	
	Сотрудник = ДанныеСтроки.Сотрудник;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	|	СотрудникиОрганизаций.Должность КАК Должность,
	|	СотрудникиОрганизаций.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	СотрудникиОрганизаций.ЗанимаемыхСтавок КАК ЗанимаемыхСтавок,
	|	СотрудникиОрганизаций.ДатаНачала КАК ДатаПриема,
	|	СотрудникиОрганизаций.ДатаОкончания КАК ДатаУвольнения,
	|	СотрудникиОрганизаций.ИспытательныйСрок КАК ИспытательныйСрок,
	|	СотрудникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ИзменятьКадровыеДанные Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка);
	КонецЕсли;
	
	Если ПерезаполнятьНачисления Тогда
		ДобавитьНачисленияПоСтроке(ДанныеСтроки);
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.НадписьОрганизация.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	ПриемНаРаботуВОрганизациюПереопределяемый.ДополнитьКнопкиКоманднойПанели(ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить, Новый Действие("ДополнительныеДействия"));
	
	ПриемНаРаботуВОрганизациюПереопределяемый.ДополнитьСоставКолонок(ЭтаФорма);
	
	ПриемНаРаботуВОрганизациюПереопределяемый.ФормаДокументаПередОткрытиемДополнительно(ЭтаФорма, Новый Действие("ДополнительныеДействия"), Новый Структура("ПриИзменении", Новый Действие("ДополнительныйОбработчикПриИзменении")));
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПередОткрытием(ЭтотОбъект, ЭтаФорма, мДокументыИсправление, мСотрудникиИсправление);
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	СтруктураКолонок = Новый Структура();
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("Должность");
	СтруктураКолонок.Вставить("ДатаПриема");
	СтруктураКолонок.Вставить("ГрафикРаботы");
	
	// Установить ограничение - изменять видимость колонок для табличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента	= Дата;
	мТекущийСотрудник		= ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.СотрудникиОрганизаций");
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.РаботникиОрганизации.Колонки.ТабельныйНомерСтрока);
	Если глЗначениеПеременной("глЕстьВалютныеПоказателиОрганизаций") Тогда
		мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта1);
		мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта2);
		мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта3);
		мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта4);
		мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта5);
		мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта6);
	Иначе
		Для Сч = 1 По 6 Цикл
			ЭлементыФормы.ОсновныеНачисления.Колонки["Валюта"+Сч].Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	мНастройкаПериода.УстановитьПериод(НачалоМесяца(Дата), КонецМесяца(Дата));
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриОткрытии(ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление, мСотрудникиИсправление);
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			РаботникиОрганизации.Загрузить(ЗначениеВыбора.Данные.Выгрузить());
			РучныеИзмененияНачислений.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовОбработкаВыбора(ЗначениеВыбора, Источник, ЭтотОбъект, ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовОбработкаОповещения(
		ИмяСобытия, Параметр, Источник,
		ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление, мСотрудникиИсправление);
	
	Если ТипЗнч(Параметр) <> Тип("СправочникСсылка.СотрудникиОрганизаций") ИЛИ Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ПодборОтменаВыбора" Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", Параметр);
		НайденныеСтроки = Источник.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Источник.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ОбновитьОписаниеСостоянияКадровогоДокумента(ЭтотОбъект, ЭтаФорма, мДокументыИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы
//
Процедура ПослеЗаписи()
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПослеЗаписи(ЭтотОбъект);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	МассивСотрудников = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	Оповестить("ОбновитьДоступностьРеквизитовСотрудника", МассивСотрудников);
	Оповестить("ОбновитьСписокПлановыхНачислений", МассивСотрудников);
	Оповестить("ПеречитатьСотрудников", МассивСотрудников);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПередЗакрытием" формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()


// Процедура - обработчик нажатия кнопки "ЗаполнитьПоТрудовымДоговорам"
//
Процедура КоманднаяПанельРаботникиОрганизацииЗаполнитьСотрудниками(Кнопка)
	
	Если РаботникиОрганизации.Количество()>0 Тогда
		ТекстВопроса = "Имеющийся список сотрудников будет очищен. Продолжить?";
		Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если мНастройкаПериода.Редактировать() Тогда
		ЗаполнитьТабличнуюЧастьРаботникиСотрудниками(мНастройкаПериода.ПолучитьДатуНачала(), мНастройкаПериода.ПолучитьДатуОкончания());
		РучныеИзмененияНачислений.Очистить();
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииЗаполнитьПоТрудовымДоговорам()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 2, , РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"));
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииПодбор()


// Процедура - обработчик нажатия на кнопку "Строки текущего сотрудника"
//
Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиКадровоеИсправлениеТекущегоСотрудника(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Весь документ"
//
Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Список сотрудников"
//
Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиКадровоеИсправлениеСпискаСотрудников(ЭтотОбъект, ЭтаФорма, мСотрудникиИсправление);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Отменить исправление"
//
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьКадровоеИсправление(ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры

Процедура ДополнительныеДействия(Кнопка)
	
	ПриемНаРаботуВОрганизациюПереопределяемый.ВыполнитьДополнительныеДействия(Кнопка, ЭтотОбъект, мНастройкаПериода, ЭтаФорма);
	
КонецПроцедуры

Процедура ДополнительныйОбработчикПриИзменении(Элемент)
	
	ПриемНаРаботуВОрганизациюПереопределяемый.ОбработатьДополнительноПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()


// Процедура - обработчик события "Нажатие" надписи "Открыть исправление".
//
Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ПоказатьИсправления(ЭтаФорма, Ссылка, мДокументыИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" надписи "Открыть исходный".
//
Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ОткрытьИсходныйДокумент(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
//
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.РаботникиОрганизации, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтроки(Элемент, ЭлементыФормы.КоманднаяПанельРаботникиОрганизации, мСотрудникиИсправление, мТекущийСотрудник);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииСтроки()

// Процедура - обработчик ожидания события "ПриАктивизацииСтроки"
//
Процедура ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтрокиОбработчикОжидания(ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииЯчейки" строки ТЧ
//
Процедура РаботникиОрганизацииПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяКолонка = Элемент.ТекущаяКолонка;
	Если ТекущаяКолонка.Имя = "ПодразделениеОрганизации" Или ТекущаяКолонка.Имя = "Должность" Тогда
		
		ИмяВторойКолонки = ?(ТекущаяКолонка.Имя = "ПодразделениеОрганизации","Должность","ПодразделениеОрганизации");
		
		ДатаАктуальности = ?(ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДатаПриема),Элемент.ТекущиеДанные.ДатаПриема, Дата);
		СписокПодразделений = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации(ТекущаяКолонка.Имя, Организация, Элемент.ТекущиеДанные[ИмяВторойКолонки], ДатаАктуальности);
		КоличествоЗначений = СписокПодразделений.Количество();
		
		ПолеВвода = ТекущаяКолонка.ЭлементУправления;
		ПолеВвода.СписокВыбора = СписокПодразделений;
		ПолеВвода.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ПолеВвода.ВысотаСпискаВыбора = Мин(10, КоличествоЗначений);
		
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииЯчейки()

// Процедура - обработчик события "ПередНачаломДобавления" строки ТЧ
//
Процедура РаботникиОрганизацииПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		
		ДанныеСтроки = Элемент.ТекущиеДанные;
		
		НоваяСтрока = РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки,, "Сотрудник");
		
		Элемент.ТекущаяСтрока = НоваяСтрока;
		
		ДоЗаполнитьСтроку();
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПередНачаломДобавления()

// Процедура удаляет строки с работником из табличной части "ОсновныеНачисления".
//
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьНачисленияПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	
	Если Не Отказ Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповестить("ПодборОтменаВыбора", ДанныеСтроки.Сотрудник);
	КонецЕсли;	
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

Процедура РаботникиОрганизацииПослеУдаления(Элемент)
	
	ПриемНаРаботуВОрганизациюПереопределяемый.ФормаДокументаРаботникиПослеУдаленияСтрокиДополнительно(ЭтаФорма);
	
КонецПроцедуры

// Процедура обеспечивает начальное значение реквизитов "ЗанимаемыхСтавок" 
//  и "ИспытательныйСрок"
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  НоваяСтрока - булево, признак редактирования новой строки
//  
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	мТекущийСотрудник = Элемент.ТекущаяСтрока.Сотрудник;
	
	ПриемНаРаботуВОрганизациюПереопределяемый.РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока);
	
КонецПроцедуры // РаботникиОрганизацииПриНачалеРедактирования()

Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
	ПриемНаРаботуВОрганизациюПереопределяемый.РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок, РаботникиОрганизации);
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриПолученииДанных(ОформленияСтрок, мСотрудникиИсправление);
	
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		
		мТекущийСотрудник = ВыбранноеЗначение;
		
		СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
		ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = СтрокаТабличнойЧасти;
		
		ПриемНаРаботуВОрганизациюПереопределяемый.РаботникиОрганизацииПриНачалеРедактирования(Элемент, Истина);
		
		СтрокаТабличнойЧасти.Сотрудник						= ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Физлицо						= ВыбранноеЗначение.Физлицо;
		
		ВнестиДанныеПоСотруднику(Истина);
		ДоЗаполнитьСтроку();
		
	КонецЕсли;
	
КонецПроцедуры // ТабличнаяЧастьОбработкаВыбора()

Процедура РаботникиОрганизацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПодборВыбор", ДанныеСтроки.Сотрудник);
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования"
//
Процедура РаботникиОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		УдалитьНачисленияПоРаботнику(мТекущийСотрудник);
	КонецЕсли;
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриОкончанииРедактирования(ОтменаРедактирования, ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица.
//
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ВнестиДанныеПоСотруднику(Истина);
	
	ДоЗаполнитьСтроку();
	
	мТекущийСотрудник = Элемент.Значение;
	
КонецПроцедуры // РаботникиОрганизацииСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода трудового договора.
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 11, Текст, Организация, , , Ссылка);
	
КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 11, Текст, Организация, , , Ссылка);
	
КонецПроцедуры

// Процедура обеспечивает нестандартный шаг регулирования 
//
// Параметры:
//  Элемент - поле ввода т.ч., которое отображает занимаемые ставки
//  Направление - число, определяет, какая из кнопок регулирования была нажата
//  СтандартнаяОбработка - булево, признак выполнения системной обработки события
//  
Процедура РаботникиОрганизацииЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Направление = 1 Тогда // увеличиваем значение
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок + 0.5
		
	Иначе // = -1 - уменьшаем значение
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ЗанимаемыхСтавок - 0.5
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // РаботникиОрганизацииЗанимаемыхСтавокРегулирование()

Процедура РаботникиОрганизацииПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриемНаРаботуВОрганизациюПереопределяемый.ПриИзмененииПодразделенияДолжностиДополнительно(ЭтаФорма);

	ВнестиДанныеПоСотруднику(Ложь);

КонецПроцедуры // РаботникиОрганизацииПодразделениеОрганизацииПриИзменении()

Процедура РаботникиОрганизацииДолжностьПриИзменении(Элемент)
		
	ПриемНаРаботуВОрганизациюПереопределяемый.ПриИзмененииПодразделенияДолжностиДополнительно(ЭтаФорма);
	
	ВнестиДанныеПоСотруднику(Ложь);
	
КонецПроцедуры // РаботникиОрганизацииДолжностьПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля Начисления
//
Процедура ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки()
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.ОсновныеНачисления, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ОсновныеНачисления, мСведенияОВидахРасчетаОснНачислений);
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтрокиОбработчикОжидания(ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры // ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки

Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтроки(Элемент, ЭлементыФормы.КоманднаяПанельОсновныеНачисления, мСотрудникиИсправление, мТекущийСотрудник);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки", 0.05, Истина);
	
КонецПроцедуры // ОсновныеНачисленияПриАктивизацииСтроки()

Процедура ОсновныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока
		И РаботникиОрганизации.Количество() = 1
		И ЗначениеЗаполнено(ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.Сотрудник) Тогда
		  ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока.Сотрудник = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриПолученииДанных(ОформленияСтрок, мСотрудникиИсправление);
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчетаОснНачислений, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ОформлениеСтроки.ДанныеСтроки, мСведенияОВидахРасчетаОснНачислений);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсновныеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриОкончанииРедактирования(ОтменаРедактирования, ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
	Если Не ОтменаРедактирования И ЗначениеЗаполнено(мТекущийСотрудник) Тогда
		РучныеИзмененияНачислений.Вставить(мТекущийСотрудник, Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

Процедура ОсновныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, Элемент.Значение);
	ДанныеСтроки = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ОсновныеНачисления, мСведенияОВидахРасчетаОснНачислений);
	
	Если Не СведенияОВидеРасчета.РазмерТребуется Тогда
		ДанныеСтроки.Показатель1		= 0;
		ДанныеСтроки.ТарифныйРазряд1	= Справочники.ТарифныеРазряды.ПустаяСсылка();
	КонецЕсли;
	
	Если СведенияОВидеРасчета.НеТребуетВалюты Тогда
		ДанныеСтроки.Валюта1			= Справочники.Валюты.ПустаяСсылка();
		
	Иначе
		ИспользуютсяНачисленияВВалюте	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
			
		Если Не ИспользуютсяНачисленияВВалюте И ДанныеСтроки.Валюта1.Пустая() Тогда
			ДанныеСтроки.Валюта1 = мВалютаРегламентированногоУчета;
		КонецЕсли;
			
	КонецЕсли;
	
	Для СчПоказателей = 1 По 6 Цикл
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда			
			Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей]) И 
				СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей] = мВалютаРегламентированногоУчета;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				Если СчПоказателей <= СведенияОВидеРасчета.ФактКоличествоПоказателей Тогда
					ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей] = СведенияОВидеРасчета["ВалютаПоказателя" + СчПоказателей];
				КонецЕсли;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Показатель" + СчПоказателей] = 0;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["ТарифныйРазряд" + СчПоказателей] = Справочники.ТарифныеРазряды.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей]		= Справочники.Валюты.ПустаяСсылка();
			ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Показатель" + СчПоказателей]	= 0;
			ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["ТарифныйРазряд" + СчПоказателей]= Справочники.ТарифныеРазряды.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОсновныеНачисленияВидРасчетаПриИзменении()

Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо
КонецПроцедуры

Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 11, Текст, Организация, , , Ссылка);
	
КонецПроцедуры

Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 11, Текст, Организация, , , Ссылка);
	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокВидовВремени = Новый СписокЗначений;
	СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
	
	СписокНедопустимыхВР = Новый СписокЗначений;
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет);
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные);
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора(,Элемент,Ссылка);
	
	ФормаВыбора.Отбор.ВидВремени.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.ВидВремени.Значение = СписокВидовВремени;
	ФормаВыбора.Отбор.ВидВремени.Использование = Истина;
	
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение = СписокНедопустимыхВР;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]		= Ложь;
мСинхронизируемыеТабличныеЧасти["ОсновныеНачисления"]		= Ложь;

мСведенияОВидахРасчетаОснНачислений = Новый Соответствие;
мСведенияОВидахРасчета = Новый Соответствие;

мНастройкаПериода = Новый НастройкаПериода;

мДокументыИсправление	= Новый Массив;
мСотрудникиИсправление	= Новый Соответствие;

РучныеИзмененияНачислений = Новый Соответствие;