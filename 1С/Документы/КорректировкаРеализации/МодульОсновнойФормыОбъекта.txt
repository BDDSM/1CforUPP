////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мОбновлятьВладельца Экспорт;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит текущее значение учетной политики, организация является плательщиком ЕНВД
Перем мОрганизацияЯвляетсяПлательщикомЕНВД;

// Хранит текущее значение организации для контроля учетной политики, организация является плательщиком ЕНВД
Перем мТекущаяОрганизация;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

Перем мОписаниеТипаНоменклатуры;
Перем мИспользоватьХарактеристики;
Перем мИспользоватьСерии;

Перем мКолонкиТовары;
Перем мКолонкиУслуги;
Перем мКнопкиЗаполненияТЧ;

Перем мФормаСоставНабора;
Перем мТекущаяСтрокаНабор;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт
	
	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок =
		РаботаСДиалогами.ПолучитьТекстСчетаФактуры(УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный"));
	
КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия при изменении номенклатуры в ТЧ.
//
Процедура ПриИзмененииНоменклатурыТЧ(Элемент, ИмяТабличнойЧасти)

	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если ИмяТабличнойЧасти = "Товары" И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.Номенклатура = мОписаниеТипаНоменклатуры.ПривестиЗначение(СтрокаТабличнойЧасти.Номенклатура);
	КонецЕсли;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	// Заполняем реквизиты табличной части.
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
		Если ИмяТабличнойЧасти = "Товары" Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
		Иначе
			ОбработкаТабличныхЧастей.ЗаполнитьЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.Коэффициент = 1;
	КонецЕсли;

	// Рассчитать реквизиты табличной части.
	ПриИзмененииЦеныТЧ(Элемент, ИмяТабличнойЧасти);
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		СчетБУ = СтрокаТабличнойЧасти.СчетДоходовБУ;
		СчетНУ = СтрокаТабличнойЧасти.СчетДоходовНУ;
		
		мКолонкиТовары.СубконтоБУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
		мКолонкиТовары.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетНУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));
		
		УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		// Ввод состава набора
		Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
		
	Иначе
		
		ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНоменклатурыТЧ()

// Процедура выполняет необходимые действия при изменении количества в ТЧ.
//
Процедура ПриИзмененииКоличестваТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СуффиксИмениРеквизита)
	 И ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда // изменен реквизит Количество
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	
	// Рассчитать реквизиты табличной части.
	ПриИзмененииЦеныТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита);
	
КонецПроцедуры // ПриИзмененииКоличестваТЧ()

// Процедура выполняет необходимые действия при изменении цены в ТЧ.
//
Процедура ПриИзмененииЦеныТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита] = 
		СтрокаТабличнойЧасти["Цена" + СуффиксИмениРеквизита] * СтрокаТабличнойЧасти["Количество" + СуффиксИмениРеквизита];
	
	СтрокаТабличнойЧасти["СуммаНДС" + СуффиксИмениРеквизита] = 
		УчетНДС.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита],
			УчитыватьНДС,
			СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(
				ПолучитьСтавкуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуффиксИмениРеквизита)));
	
КонецПроцедуры // ПриИзмененииЦеныТЧ()

// Процедура выполняет необходимые действия при изменении ставки НДС в ТЧ.
//
Процедура ПриИзмененииСтавкиНДСТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СуффиксИмениРеквизита) Тогда // изменет реквизит СтавкаНДС
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Иначе
		СтрокаТабличнойЧасти.СуммаНДСДоИзменения =
			УчетНДС.РассчитатьСуммуНДС(
				СтрокаТабличнойЧасти.СуммаДоИзменения,
				УчитыватьНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(
					СтрокаТабличнойЧасти.СтавкаНДСДоИзменения));
		СтрокаТабличнойЧасти.СуммаНДСДоКорректировки =
			УчетНДС.РассчитатьСуммуНДС(
				СтрокаТабличнойЧасти.СуммаДоКорректировки,
				УчитыватьНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(
					СтрокаТабличнойЧасти.СтавкаНДСДоИзменения));
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСтавкиНДСТЧ()

// Процедура выполняет необходимые действия при изменении суммы в ТЧ.
//
Процедура ПриИзмененииСуммыТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	СтрокаТабличнойЧасти["Цена" + СуффиксИмениРеквизита] =
		?(СтрокаТабличнойЧасти["Количество" + СуффиксИмениРеквизита] = 0,
			0,
			СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита] /
			СтрокаТабличнойЧасти["Количество" + СуффиксИмениРеквизита]);
	
	СтрокаТабличнойЧасти["СуммаНДС" + СуффиксИмениРеквизита] = 
		УчетНДС.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита],
			УчитыватьНДС,
			СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(
				ПолучитьСтавкуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуффиксИмениРеквизита)));
	
КонецПроцедуры // ПриИзмененииСуммыТЧ()


// Процедура выполняет необходимые действия перед началом редактирования строки ТЧ.
//
Процедура ПриНачалеРедактированияСтрокиТЧ(Элемент, ИмяТабличнойЧасти, НоваяСтрока)
	
	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	СтрокаТабличнойЧасти.ЕстьВДокументеРеализации = Ложь;
	
	Если КорректироватьБУиНУ Тогда
		
		СтрокаТабличнойЧасти.КоличествоДоКорректировки 	= 0;
		СтрокаТабличнойЧасти.ЦенаДоКорректировки 		= 0;
		СтрокаТабличнойЧасти.СуммаДоКорректировки 		= 0;
		СтрокаТабличнойЧасти.СуммаНДСДоКорректировки 	= 0;
		
		СтрокаТабличнойЧасти.КоличествоДоИзменения 		= 0;
		СтрокаТабличнойЧасти.ЦенаДоИзменения 			= 0;
		СтрокаТабличнойЧасти.СуммаДоИзменения 			= 0;
		СтрокаТабличнойЧасти.СуммаНДСДоИзменения 		= 0;
		СтрокаТабличнойЧасти.СтавкаНДСДоИзменения 		= Перечисления.СтавкиНДС.ПустаяСсылка();
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
	 И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		СтрокаТабличнойЧасти.Номенклатура = мОписаниеТипаНоменклатуры.ПривестиЗначение(СтрокаТабличнойЧасти.Номенклатура);
		СтрокаТабличнойЧасти.Качество 	  = ПолучитьКачествоНоменклатуры(СтрокаТабличнойЧасти.Качество);
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Склад) Тогда
			СтрокаТабличнойЧасти.Склад    = Склад;
		КонецЕсли;
		
		Элемент.ТекущиеДанные.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
		Элемент.ТекущиеДанные.КлючСвязи  = 0;
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
		 И ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеРедактированияСтрокиТЧ()

// Процедура выполняет необходимые действия перед удалением строки ТЧ.
//
Процедура ПередУдалениемСтрокиТЧ(Элемент, ИмяТабличнойЧасти, Отказ)
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ЕстьВДокументеРеализации И КорректироватьБУиНУ Тогда
		Отказ = Истина;
		Сообщить("Для удаления строки исходного документа необходимо очистить все суммовые и количественные показатели.");
		Возврат;
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		Если Элемент.ТекущиеДанные = мТекущаяСтрокаНабор И мФормаСоставНабора.Открыта() Тогда
			мФормаСоставНабора.Закрыть();
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти.КлючСвязи <> 0 Тогда
			
			СтрокиСерийныхНомеров =
				СерийныеНомера.НайтиСтроки(
					Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи));
			
			Для Каждого СерийныйНомер Из СтрокиСерийныхНомеров Цикл
				СерийныеНомера.Удалить(СерийныйНомер);
			КонецЦикла;
			
		КонецЕсли;
		
		УправлениеЗапасами.ОчиститьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ПередУдалениемСтрокиТЧ()


// Процедура выполняет необходимые действия при получении данных строк ТЧ.
//
Процедура ПриПолученииДанныхСтрокиТЧ(Элемент, ИмяТабличнойЧасти, ОформленияСтрок)
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		мКолонки = мКолонкиТовары;
	Иначе
		мКолонки = мКолонкиУслуги;
	КонецЕсли;
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки 	   = ОформлениеСтроки.ДанныеСтроки;
		ЭтоТипНоменклатура = ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) И ТипЗнч(ДанныеСтроки.Номенклатура) = Тип("СправочникСсылка.Номенклатура");
		
		Если мКолонки.ВсегоДоКорректировки.Видимость Тогда
			ТекСумма = ДанныеСтроки.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДСДоКорректировки);
			ОформлениеСтроки.Ячейки.ВсегоДоКорректировки.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
		КонецЕсли;
		Если мКолонки.ВсегоДоИзменения.Видимость Тогда
			ТекСумма = ДанныеСтроки.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДСДоИзменения);
			ОформлениеСтроки.Ячейки.ВсегоДоИзменения.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
		КонецЕсли;
		Если мКолонки.Всего.Видимость Тогда
			ТекСумма = ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);
			ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
		КонецЕсли;
		
		УстановитьСвойствоЯчеекСтрокиТЧ(
			ОформлениеСтроки,
			"Номенклатура,Склад,ЗаказПокупателя,СпособСписанияОстаткаТоваров,Качество,
				|ПереданныеПринятыеБУ,ПереданныеПринятыеНУ,ПереданныеСобственныеБУ,ПереданныеСобственныеНУ,ПринятыеСчетУчетаБУ,ПринятыеСчетУчетаНУ,
				|СубконтоБУ,СубконтоНУ,СчетДоходовБУ,СчетДоходовНУ,СчетРасходовБУ,СчетРасходовНУ,СчетУчетаБУ,СчетУчетаНУ",
			"ТолькоПросмотр",
			ДанныеСтроки.ЕстьВДокументеРеализации И КорректироватьБУиНУ);
		УстановитьСвойствоЯчеекСтрокиТЧ(
			ОформлениеСтроки,
			"ХарактеристикаНоменклатуры,СерияНоменклатуры,Единица,ПринадлежностьНоменклатуры",
			"ТолькоПросмотр",
			ДанныеСтроки.ЕстьВДокументеРеализации И КорректироватьБУиНУ ИЛИ НЕ ЭтоТипНоменклатура);
		УстановитьСвойствоЯчеекСтрокиТЧ(
			ОформлениеСтроки,
			"СтавкаНДС",
			"ТолькоПросмотр",
			ДанныеСтроки.ЕстьВДокументеРеализации И КорректироватьБУиНУ И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
			
		УстановитьСвойствоЯчеекСтрокиТЧ(
			ОформлениеСтроки,
			"Количество",
			"ОтметкаНезаполненного",
			КорректироватьБУиНУ И НЕ ДанныеСтроки.ЕстьВДокументеРеализации И НЕ ЗначениеЗаполнено(ДанныеСтроки.Количество));
		УстановитьСвойствоЯчеекСтрокиТЧ(
			ОформлениеСтроки,
			"Сумма",
			"ОтметкаНезаполненного",
			КорректироватьБУиНУ И НЕ ДанныеСтроки.ЕстьВДокументеРеализации И НЕ ЗначениеЗаполнено(ДанныеСтроки.Сумма));
		
		Если ИмяТабличнойЧасти = "Товары" Тогда
			
			Если ЭтоТипНоменклатура Тогда
				РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
				РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
				Если мКолонкиТовары.НомерГТД.Видимость Тогда
					ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.НомерГТД);
				КонецЕсли;
				Если мКолонкиТовары.СтранаПроисхождения.Видимость Тогда
					ОформлениеСтроки.Ячейки.СтранаПроисхождения.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПриПолученииДанныхСтрокиТЧ()


Процедура ПроверитьЗаполнениеСчетаФактуры()
	
	СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный");
	Если СчетФактура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СчетФактура = СчетФактура.ПолучитьОбъект();	
	
	СообщениеПользователю = "";
	Если СчетФактура.ПроверитьДатуСчетаФактуры(СообщениеПользователю) Тогда
		
		ОтветНаВопрос = Вопрос(СообщениеПользователю + Символы.ПС + "Изменить дату счета-фактуры на дату документа?", 
								РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			СчетФактура.Дата = Дата;
			Попытка
				СчетФактура.Заблокировать();
				СчетФактура.Записать();
			Исключение
				Сообщить("Невозможно записать документ <" + СчетФактура + ">");
			КонецПопытки;
			ЗаполнитьТекстПроСчетФактуру();
		КонецЕсли;
		
	Иначе
		
		Если СообщениеПользователю <> "" Тогда
			
			ОтветНаВопрос = Вопрос(СообщениеПользователю + Символы.ПС + "
																		|Внесите изменения в счет-фактуру вручную
																		|Открыть форму счета-фактуры?", 
									РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
				РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")

	Если НЕ ЗначениеЗаполнено(РежимВызова) Тогда
		ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
			мОрганизацияЯвляетсяПлательщикомЕНВД = ПараметрыУчетнойПолитики.ОрганизацияЯвляетсяПлательщикомЕНВД;
		Иначе
			мОрганизацияЯвляетсяПлательщикомЕНВД = Ложь;
		КонецЕсли;	
		мТекущаяОрганизация = Организация;
	Иначе
		РаботаСДиалогами.ПриИзмененииОрганизацияЯвляетсяПлательщикомЕНВД(ЭтотОбъект, РежимВызова, Услуги,
		                                                мОрганизацияЯвляетсяПлательщикомЕНВД, мТекущаяОрганизация);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

// Функция получает качество для подстановки значения качества при построчном вводе в табличную часть "Товары"
// или при подборе номенклатуры с помощью обработки "Подбор номенклатуры" или обработки ввод серийных номеров
// Рассчитывает качество только для вида операции "Брак", для других случаев качество по умолчанию новое.
//
// Параметры:
// Качество                  - СправочникСсылка.Качество, необязательный параметр, если параметр заполнен он же возвращается,
//                             ситуация возможна при варианте подбора через обработку подбор номенклатуры или обработку ввода серийных номеров.
//
// Возвращаемое значение:
// СправочникСсылка.Качество - для вида операции "Брак" возвращается качество отличное от Нового и если количество таких элементов равное одному,
//                             в остальных случаях пустая ссылка справочника качество.
//                           - для остальных видов операций качество по умолчанию новое.
//
Функция ПолучитьКачествоНоменклатуры(Качество = Неопределено)
	
	Если ЗначениеЗаполнено(Качество) Тогда
		Возврат Качество;
	КонецЕсли;
	
	Возврат Справочники.Качество.Новый;
	
КонецФункции // ПолучитьКачествоНоменклатуры()

Функция ПолучитьСтавкуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	Возврат
		?(ЗначениеЗаполнено(СуффиксИмениРеквизита)
			И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки,
				СтрокаТабличнойЧасти.СтавкаНДСДоИзменения,
				СтрокаТабличнойЧасти.СтавкаНДС);
	
КонецФункции


// ПОДБОР В ТАБЛИЧНЫЕ ЧАСТИ

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)
	
	СписокЗапросов = Новый СписокЗначений;
	СписокЗапросов.Добавить(,"По справочнику");
	
	ПустойТипЦен = НЕ ЗначениеЗаполнено(ТипЦен);
	
	Если ТабличнаяЧасть = Товары Тогда
		
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
			СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
		КонецЕсли;
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		
		СписокЗапросов.Добавить("РасходУслуги",        "По услугам предприятия");
		
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
			СписокЗапросов.Добавить("РасходЦеныУслуг", "По ценам и услугам предприятия");
		КонецЕсли;
		
	КонецЕсли;
		
	Возврат СписокЗапросов;
	
КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	РазворачиватьДоКачества = Ложь;
	ЕстьЦена                = Истина;
	ЕстьСерия               = Истина;
	Валюта                  = ВалютаДокумента;
	СпособЗаполненияЦен     = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	Качество                = Справочники.Качество.Новый;
	ПодбиратьУслуги         = Ложь;
	СкрыватьХарактеристику  = Ложь;
	
	ЕстьСкладВТабличнойЧасти = ПолучитьСвойстваСкладаВТабличнойЧасти().ВидимостьСклада;

	Если ТабличнаяЧасть = Товары Тогда
		Команда                  = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти        = "Товары";
		РазворачиватьДоКачества  = Ложь;
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		Команда                  = "ПодборВТабличнуюЧастьУслуги";
		ЕстьСерия                = Ложь;
		ИмяТабличнойЧасти        = "Услуги";
		Качество                 = Неопределено;
		ЕстьСкладВТабличнойЧасти = Ложь;
		ПодбиратьУслуги          = Истина;
		СкрыватьХарактеристику   = Истина;
	КонецЕсли;

	СписокВидовПодбора 		= СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок   		= Метаданные().Представление();
	ВременнаяДатаРасчетов 	= ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

	СтруктураПараметровПодбора = Новый Структура;
	СтруктураПараметровПодбора.Вставить("Команда"                 , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"      , СписокВидовПодбора);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"            , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("КачествоПоУмолчанию"     , ПолучитьКачествоНоменклатуры());
	СтруктураПараметровПодбора.Вставить("Склад"                   , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"                  , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"      , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"              , Контрагент);
	СтруктураПараметровПодбора.Вставить("Сделка"                  , Сделка);
	СтруктураПараметровПодбора.Вставить("Организация"             , Организация);
	СтруктураПараметровПодбора.Вставить("Качество"                , Качество);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"     , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"                , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"               , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"         , Валюта);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества" , РазворачиватьДоКачества);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"         , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("СкрыватьХарактеристику"  , СкрыватьХарактеристику);
	СтруктураПараметровПодбора.Вставить("Заголовок"				  , "Подбор номенклатуры в документ " + ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");
	СтруктураПараметровПодбора.Вставить("УсловиеПродаж"           , УсловиеПродаж);
	СтруктураПараметровПодбора.Вставить("ЕстьСкладВТабличнойЧасти", ЕстьСкладВТабличнойЧасти);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены, ЕстьСкладВТабличнойЧасти;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	УправлениеЗапасами.ПолучитьПараметрыДокументаИзСтруктуры(ЗначениеВыбора, ТипЦен,
	                                      СпособЗаполненияЦен, Номенклатура, Количество, КоличествоМест, Характеристика,
	                                      ВалютаЦены, Цена, ЕдиницаИзмерения);

	ЗначениеВыбора.Свойство("Серия"   , Серия);
	ЗначениеВыбора.Свойство("Качество", Качество);

	ЕстьСкладВТабличнойЧасти = ПолучитьСвойстваСкладаВТабличнойЧасти().ВидимостьСклада;

	Если ТабличнаяЧасть = Услуги Тогда
		ЕстьСкладВТабличнойЧасти = Ложь;
	КонецЕсли;	 
	
	Если ТабличнаяЧасть = Товары И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		Качество = ПолучитьКачествоНоменклатуры(Качество);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения"			 , ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
		Если ЗначениеЗаполнено(Качество) Тогда
			СтруктураОтбора.Вставить("Качество"         	 , Качество);
		КонецЕсли;
		Если СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам Тогда
			СтруктураОтбора.Вставить("Цена"					 , Цена);
		КонецЕсли;
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	Если ЕстьСкладВТабличнойЧасти И ЗначениеЗаполнено(Склад) Тогда
		СтруктураОтбора.Вставить("Склад", Склад);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
			Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			СтрокаТабличнойЧасти.Склад = Склад;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			Если ЗначениеЗаполнено(Качество) Тогда
				СтрокаТабличнойЧасти.Качество          = Качество;
			КонецЕсли;
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

			// Заполняем реквизиты табличной части.
			Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
			КонецЕсли;

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			СтрокаТабличнойЧасти.Склад = Склад;
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Ввод состава набора
			СтрокаТабличнойЧасти.КлючСтроки = УправлениеЗапасами.ПолучитьНовыйКлючСтроки(ЭтотОбъект);
			Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");


			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Сделка;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

	ТабличнаяЧастьИмя = Метаданные.НайтиПоТипу(ТипЗнч(ТабличнаяЧасть)).Имя;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

	УчетСерийныхНомеров.ОбработкаПодбораНоменклатурыПоСерийномуНомеру(ЗначениеВыбора, СерийныеНомера,
	                                              ТабличнаяЧасть, СтрокаТабличнойЧасти,
	                                              мПараметрыСвязиСтрокТЧ,
	                                              ТабличнаяЧастьИмя,
	                                              ЭтотОбъект);

КонецПроцедуры // ОбработкаПодбора()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары, ЭлементыФормы.КоманднаяПанельТовары);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги, ЭлементыФормы.КоманднаяПанельУслуги);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	ЗаполнитьТекстПроСчетФактуру();
	ЗаполнитьТекстИсправляемыйДокументРеализации();
	
	// Свойства счетов в форме
	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(
		Дата,
		Метаданные().Имя,
		ЭлементыФормы,
		Новый Структура("Товары, Услуги", мКолонкиТовары, мКолонкиУслуги),
		Неопределено, // Не управляем видимостью
		ОтражатьВБухгалтерскомУчете,
		ОтражатьВНалоговомУчете И НЕ НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата),
		УчитыватьНДС);

	// Отображение страниц
	ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = ВозможнаКорректировкаТоваров();
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = ВозможнаКорректировкаУслуг();
	
	// Отображение реквизитов шапки документа
	ЭлементыФормы.КорректироватьБУиНУ.Доступность = ДоступнаКорректировкаБУиНУ();
	
	ЭлементыФормы.ОтчетностьПодписана.Доступность =
		ЗначениеЗаполнено(ДокументРеализации)
		И КорректироватьБУиНУ
		И Год(ДокументРеализации.Дата) < Год(Дата);
	
	// Отображение табличных частей
	
	мОписаниеТипаНоменклатуры = ПолучитьОписаниеТипаНоменклатурыПоОснованию();
	ДоступенТипНоменклатура	  = мОписаниеТипаНоменклатуры.СодержитТип(Тип("СправочникСсылка.Номенклатура"));
	СвойстваСклада 			  = ПолучитьСвойстваСкладаВТабличнойЧасти();
	СвойстваЗаказа 			  = ПолучитьСвойстваЗаказаВТабличнойЧасти();
	ИсправлениеКорректировки  =
		ЗначениеЗаполнено(ИсправляемыйДокументРеализации)
		И ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
		И ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение;
	
	// Колонка Номенклатуры и связанные с ней колонки
	ЭлементыФормы.Товары.Колонки.Номенклатура.ЭлементУправления.ОграничениеТипа = мОписаниеТипаНоменклатуры;
	
	УстановитьСвойствоКолонокТЧ(
		"ХарактеристикаНоменклатуры",
		"Видимость",
		мИспользоватьХарактеристики И ДоступенТипНоменклатура);
	УстановитьСвойствоКолонокТЧ(
		"СерияНоменклатуры",
		"Видимость",
		мИспользоватьСерии И ДоступенТипНоменклатура);
	УстановитьСвойствоКолонокТЧ(
		"Единица,Коэффициент",
		"Видимость",
		ДоступенТипНоменклатура);
	УстановитьСвойствоКолонокТЧ(
		"ПринадлежностьНоменклатуры",
		"Видимость",
		мИспользоватьРасширеннуюАналитику И мДатаНачалаИспользованияРасширеннойАналитики <= Дата
		И КорректироватьБУиНУ И ЭтоКорректировкаРТиУ() И ДоступенТипНоменклатура);
	
	УстановитьСвойствоКолонокТЧ(
		"Номенклатура",
		"АвтоотметкаНеЗаполненного",
		КорректироватьБУиНУ);
	УстановитьСвойствоКолонокТЧ(
		"Единица,Содержание",
		"АвтоотметкаНеЗаполненного",
		КорректироватьБУиНУ И ЭтоКорректировкаРТиУ());
	
	// Колонка Склад
	УстановитьСвойствоКолонокТЧ(
		"Склад",
		"Видимость",
		СвойстваСклада.ВидимостьСклада);
	УстановитьСвойствоКолонокТЧ(
		"Склад",
		"АвтоотметкаНеЗаполненного",
		СвойстваСклада.ОбязательноеЗаполнениеСклада);
		
	// Колонка ЗаказПокупателя и подчиненные колонки
	УстановитьСвойствоКолонокТЧ(
		"ЗаказПокупателя",
		"Видимость",
		СвойстваЗаказа.ВидимостьЗаказа);
	УстановитьСвойствоКолонокТЧ(
		"ЗаказПокупателя",
		"АвтоотметкаНеЗаполненного",
		СвойстваЗаказа.ОбязательноеЗаполнениеЗаказа);
	УстановитьСвойствоКолонокТЧ(
		"СпособСписанияОстаткаТоваров",
		"Видимость",
		СвойстваЗаказа.ВидимостьСпособаСписания);
	УстановитьСвойствоКолонокТЧ(
		"СпособСписанияОстаткаТоваров",
		"АвтоотметкаНеЗаполненного",
		СвойстваЗаказа.ОбязательноеЗаполнениеСпособаСписания);
	
	// Видимость колонок корректировки
	УстановитьСвойствоКолонокТЧ(
		"КоличествоДоКорректировки,ЦенаДоКорректировки,СуммаДоКорректировки,СуммаНДСДоКорректировки,ВсегоДоКорректировки",
		"Видимость",
		ИсправлениеКорректировки);
	УстановитьСвойствоКолонокТЧ(
		"СтавкаНДС,СуммаНДС,СуммаНДСДоИзменения",
		"Видимость",
		УчитыватьНДС);
	УстановитьСвойствоКолонокТЧ(
		"СтавкаНДСДоИзменения",
		"Видимость",
		УчитыватьНДС И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
	
	// Доступность колонок корректировки
	УстановитьСвойствоКолонокТЧ(
		"КоличествоДоИзменения,ЦенаДоИзменения,СуммаДоИзменения,СуммаНДСДоИзменения,СтавкаНДСДоИзменения,КоличествоДоКорректировки,ЦенаДоКорректировки,СуммаДоКорректировки,СуммаНДСДоКорректировки,СодержаниеДоИзменения",
		"ТолькоПросмотр",
		КорректироватьБУиНУ);
	
	// Положение колонок корректировки
	УстановитьСвойствоКолонокТЧ(
		"СтавкаНДС",
		"Положение",
		?(ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка));
	УстановитьСвойствоКолонокТЧ(
		"КоличествоДоИзменения,ЦенаДоИзменения,СуммаДоИзменения,СуммаНДСДоИзменения,ВсегоДоИзменения",
		"Положение",
		?(ИсправлениеКорректировки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка));
		
	// Отображение кнопок командных панелей
	ДоступностьКнопокПанелиТовары = мОписаниеТипаНоменклатуры.СодержитТип(Тип("СправочникСсылка.Номенклатура"));
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ДействиеПодбор.Доступность = ДоступностьКнопокПанелиТовары;
	Если ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Найти("СерийныеНомера") <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.СерийныеНомера.Доступность = ДоступностьКнопокПанелиТовары;
	КонецЕсли;
	Если ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Найти("СоставНабора") <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.СоставНабора.Доступность = ДоступностьКнопокПанелиТовары;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьСвойствоКолонокТЧ(ИменаКолонок, ИмяСвойства, ЗначениеСвойства)
	
	СтруктураКолонок = Новый Структура(ИменаКолонок);
	
	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
		Если мКолонкиТовары.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			мКолонкиТовары[КлючИЗначение.Ключ][ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
		Если мКолонкиУслуги.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			мКолонкиУслуги[КлючИЗначение.Ключ][ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки, ИменаЯчеек, ИмяСвойства, ЗначениеСвойства)
	
	СтруктураКолонок = Новый Структура(ИменаЯчеек);
	
	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
		Если ОформлениеСтроки.Ячейки.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ОформлениеСтроки.Ячейки[КлючИЗначение.Ключ][ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()
	
	УчитыватьУслуги = ВозможнаКорректировкаУслуг();
	УчитыватьТовары = ВозможнаКорректировкаТоваров();
	
	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    =
		ОбщегоНазначения.ФорматСумм(
			?(УчитыватьТовары, УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары"), 0)
			+ ?(УчитыватьУслуги, УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги"), 0));
	ЭлементыФормы.ВсегоНДС.Значение =
		ОбщегоНазначения.ФорматСумм(
			?(УчитыватьТовары, Товары.Итог("СуммаНДС"), 0)
			+ ?(УчитыватьУслуги, Услуги.Итог("СуммаНДС"), 0));

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Процедура заполняет текст про исправляемый документ
//
Процедура ЗаполнитьТекстИсправляемыйДокументРеализации()
	
	Если ЗначениеЗаполнено(ИсправляемыйДокументРеализации) Тогда
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументРеализации.Гиперссылка = Истина;
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументРеализации.Заголовок = Строка(ИсправляемыйДокументРеализации)
	Иначе
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументРеализации.Гиперссылка = Ложь;
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументРеализации.Заголовок = "Не указан";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(?(ЭтоНовый(),ТекущаяДата(),Дата));
    Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
// Параметры
//  Нет
//
Процедура ПриОткрытии()

	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	Иначе
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа", ПараметрОбъектКопирования); 
		
		Если ЗначениеЗаполнено(ДокументРеализации) Тогда
			ОтражатьВУправленческомУчете = ДокументРеализации.ОтражатьВУправленческомУчете;
			ОтражатьВБухгалтерскомУчете  = ДокументРеализации.ОтражатьВБухгалтерскомУчете;
			ОтражатьВНалоговомУчете      = ДокументРеализации.ОтражатьВНалоговомУчете;
		КонецЕсли;
		
	КонецЕсли;
	
	мДокументРеализацииСсылка = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	ПриИзмененииОблагаетсяЕНВД();

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Управление видимостью серийных номеров и наборов
	УчетСерийныхНомеров.УстановитьВидимостьКнопкиВводаСерийныхНомеров(ЭлементыФормы.КоманднаяПанельТовары);
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Удалить(
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.СоставНабора); // наборы пока не поддерживаются
	
	// Проверка и показ заметок
	УправлениеКонтактами.ПроверитьЗаметкиПоДокументу(ЭтотОбъект);
	
	// Редактрование номера документа
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	мФормаСоставНабора = Неопределено;

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);
	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                 КурсВзаиморасчетов,
	                                                                                 КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Товары.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ЭтаФорма.Модифицированность И ЭтаФорма.ВладелецФормы <> Неопределено Тогда
		мОбновлятьВладельца = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Проверка заполнения счета-фактуры, введенного на основании документа
	ПроверитьЗаполнениеСчетаФактуры();
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	Если мОбновлятьВладельца Тогда
		ОповеститьОЗаписиНовогоОбъекта(ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ И ТАБЛИЧНЫХ ЧАСТЕЙ

// КОМАНДНАЯ ПАНЕЛЬ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	ПредыдущийВидОперации = ВидОперации; // Сохраним пред. вид операции для его сравнения с новым
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации[Кнопка.Имя];
	КонецЕсли;
	
	// Если операция не поменялась, то ничего делать не надо
	Если ПредыдущийВидОперации = ВидОперации Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсправляемыйДокументРеализации)
	 И ТипЗнч(ИсправляемыйДокументРеализации) = Тип("ДокументСсылка.КорректировкаРеализации")
	 И ИсправляемыйДокументРеализации.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
	 И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		ВидОперации = ПредыдущийВидОперации;
		Предупреждение("Нельзя вводить документ на согласованную корректировку на основании другой согласованной корректировки!");
		Возврат;
		
	КонецЕсли;
	      	
	Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументРеализации, Истина);
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			Если СтрокаТЧ.ЕстьВДокументеРеализации И СтрокаТЧ.СтавкаНДС <> СтрокаТЧ.СтавкаНДСДоИзменения Тогда
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		Для Каждого СтрокаТЧ Из Услуги Цикл
			Если СтрокаТЧ.ЕстьВДокументеРеализации И СтрокаТЧ.СтавкаНДС <> СтрокаТЧ.СтавкаНДСДоИзменения Тогда
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		ИсправляемыйДокументРеализации = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументРеализации, Ложь);
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры


// КНОПКИ ПЕЧАТИ

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// КОМАНДНЫЕ ПАНЕЛИ ТАБЛИЧНЫХ ЧАСТЕЙ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено
	 ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
	 ИЛИ НЕ ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Предупреждение("Не выбрана номенклатура!");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("Качество", 					СтрокаТабличнойЧасти.Качество);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура вызывается при нажатии кнопки "СоставНабора" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСоставНабора(Кнопка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено
	 ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
	 ИЛИ НЕ ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		Предупреждение("Не выбрана номенклатура!");
		Возврат;
	ИначеЕсли НЕ СтрокаТабличнойЧасти.Номенклатура.Комплект Тогда
		Предупреждение("Номенклатура не является набором-комплектом!");
		Возврат;
	КонецЕсли;

	мТекущаяСтрокаНабор = СтрокаТабличнойЧасти;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура",      СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("Количество",        СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения",  СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект",    ЭтотОбъект);
	СтруктураПараметров.Вставить("ФормаДокумента",    ЭтаФорма);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", "Товары");
	СтруктураПараметров.Вставить("КлючСтроки",        СтрокаТабличнойЧасти.КлючСтроки);
	СтруктураПараметров.Вставить("ТолькоПросмотр",    Не СтрокаТабличнойЧасти.Номенклатура.Комплект);
	СтруктураПараметров.Вставить("ЗаголовокФормы",    "Состав набора-комплекта");

	// Открываем форму "Состав набора".
	мФормаСоставНабора = Обработки.СоставНабора.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаСоставНабора.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаСоставНабора.Открыть();

КонецПроцедуры


// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(
		мКнопкиЗаполненияТЧ.Строки.Найти(
			Кнопка.Имя,
			"Имя",
			Истина),
		ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	Если мИспользоватьРасширеннуюАналитику
	 И мДатаНачалаИспользованияРасширеннойАналитики <= мТекущаяДатаДокумента
	 И мДатаНачалаИспользованияРасширеннойАналитики > Дата Тогда
	 
		// Документ переносится из периода использования режима расширенной аналитики в период использования партионного учета
		Если КорректироватьБУиНУ Тогда
			
			Результат =
				Вопрос("В выбранном периоде доступна только корректировка НДС.
						|Продолжить?", РежимДиалогаВопрос.ДаНет,,, "Изменение даты документа");
			
			Если Результат <> КодВозвратаДиалога.Да Тогда
				// Возвращаем дату до изменения
				Дата = мТекущаяДатаДокумента;
				Возврат;
			КонецЕсли;
			
			КорректироватьБУиНУ = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
		
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");
	
	УстановитьВидимость();

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДокументРеализации) И Организация <> ДокументРеализации.Организация Тогда
		
	 	Если Вопрос("Организация не соответствует организации документа основания.
		 			|Основание будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
					
			Организация = мТекущаяОрганизация;
			Возврат;
			
		КонецЕсли;
		
		ДокументРеализации = Неопределено;
		
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

	ПриИзмененииОблагаетсяЕНВД("Организация");
	
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура КорректироватьБУиНУПриИзменении(Элемент)
	
	Если КорректироватьБУиНУ И ЗначениеЗаполнено(ДокументРеализации) Тогда
		
		Если Вопрос("Перезаполнить документ по основанию?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаполнитьСвойстваШапки();
			ЗаполнитьПоДокументу();
		Иначе
			КорректироватьБУиНУ = Ложь;
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры


Процедура ДокументРеализацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Отбор = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "");
	
КонецПроцедуры

Процедура ДокументРеализацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") И
		НЕ (ЗначениеЗаполнено(ВыбранноеЗначение) И
		ВыбранноеЗначение.Покупатели.Количество() = 1 И
		ВыбранноеЗначение.Контрагент = ВыбранноеЗначение.Покупатели[0].Покупатель) Тогда
		
		СтандартнаяОбработка = Ложь;
		Предупреждение("Указан покупатель, отличный от комиссионера. Выберите счет-фактуру покупателя!");
		Возврат;
		
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СчетФактураВыданный") И
		ЗначениеЗаполнено(ВыбранноеЗначение.ДокументОснование) И
		ТипЗнч(ВыбранноеЗначение.ДокументОснование) = Тип("ДокументСсылка.ОтчетКомиссионераОПродажах") Тогда
		
		Если ВыбранноеЗначение.ДокументОснование.Покупатели.Количество() = 1 И
			ВыбранноеЗначение.ДокументОснование.Контрагент = ВыбранноеЗначение.ДокументОснование.Покупатели[0].Покупатель Тогда
			
			ВыбранноеЗначение = ВыбранноеЗначение.ДокументОснование;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СчетФактураВыданный")
	 И (НЕ ЗначениеЗаполнено(ВыбранноеЗначение.ДокументОснование) 
		ИЛИ ТипЗнч(ВыбранноеЗначение.ДокументОснование) <> Тип("ДокументСсылка.АктОбОказанииПроизводственныхУслуг")) Тогда
		
		СтандартнаяОбработка = Ложь;
		Предупреждение("В качестве основания можно выбрать только счет-фактуру, введенный на основании документов 
						|""Акт об оказании производственных услуг"" или ""Отчет комиссионера о продажах""!");
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВыбранноеЗначение) И ВыбранноеЗначение = Ссылка Тогда
		
		СтандартнаяОбработка = Ложь;
		Предупреждение("Нельзя вводить документ корректировки на основании самого себя!");
		Возврат;
		
	КонецЕсли;
	
	ДокументСсылка = УчетНДС.ПолучитьИсправляемыйДокументРеализации(ВыбранноеЗначение, Ложь);
	//Проверим ввод корректировки на основании корректировки
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаРеализации")
	 И ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение
	 И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		СтандартнаяОбработка = Ложь;
		Предупреждение("Нельзя вводить документ на согласованную корректировку на основании другой согласованной корректировки!");
		
	КонецЕсли;
	
	ПоследнийДокумент = ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка);
	Если ВыбранноеЗначение <> ПоследнийДокумент Тогда
		Если Вопрос("Для указанного документа существуют более поздние корректировки.
					|Использовать последнюю введенную корректировку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ВыбранноеЗначение = ПоследнийДокумент;
		КонецЕсли;
	КонецЕсли;
	
	//Проверим валюту документа если договор в условных единицах
	Если ЗначениеЗаполнено(ВыбранноеЗначение.ВалютаДокумента) 
	 И ВыбранноеЗначение.ВалютаДокумента <> мВалютаРегламентированногоУчета 
	 И ЗначениеЗаполнено(ВыбранноеЗначение.ДоговорКонтрагента)
	 И ВыбранноеЗначение.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Тогда
		
		СтандартнаяОбработка = Ложь;
		Предупреждение("Для договоров в условных единицах, корректировка документов, оформленных в валюте, не поддерживается.
						|Корректируемый документ должен быть оформлен в рублях.");
		Возврат;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументРеализацииПриИзменении(Элемент)
	
	КорректироватьБУиНУ = ДоступнаКорректировкаБУиНУ();
	
	ЗаполнитьСвойстваШапки();
	
	Если КорректироватьБУиНУ И ЗначениеЗаполнено(ДокументРеализации) Тогда
		Если Вопрос("Перезаполнить табличные части документа по основанию?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаполнитьПоДокументу();
		Иначе
			КорректироватьБУиНУ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	УстановитьВидимость();
	
	Если НЕ ЭлементыФормы.ОтчетностьПодписана.Доступность И ОтчетностьПодписана Тогда
		ОтчетностьПодписана = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументРеализацииОчистка(Элемент, СтандартнаяОбработка)
	
	ДокументРеализацииПриИзменении(Элемент);
	
КонецПроцедуры


Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

Процедура ГиперссылкаИсправляемыйДокументРеализацииНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ИсправляемыйДокументРеализации) Тогда
		ИсправляемыйДокументРеализации.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры


Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ЗаполнениеДокументов.ВыбратьАдресДоставки(СтандартнаяОбработка, ЭтаФорма, ЭтотОбъект);
	
КонецПроцедуры

Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	
	АдресДоставки = "";
	ДополнениеКАдресуДоставки = "";
	
КонецПроцедуры

Процедура АдресДоставкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗаполнениеДокументов.РедактированиеАдресаДоставки(АдресДоставки, Элемент, ЭтотОбъект);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ПриНачалеРедактированияСтрокиТЧ(Элемент, "Товары", НоваяСтрока);
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПередУдалением" табличной части "Товары".
//
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	ПередУдалениемСтрокиТЧ(Элемент, "Товары", Отказ);
	
КонецПроцедуры // ТоварыПередУдалением()

// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)
	
	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;
	
КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриПолученииДанных" табличной части "Товары".
//
Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхСтрокиТЧ(Элемент, "Товары", ОформленияСтрок);
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Товары".
//
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СчетБУ  = СтрокаТабличнойЧасти.СчетДоходовБУ;
	СчетНУ  = СтрокаТабличнойЧасти.СчетДоходовНУ;

	мКолонкиТовары.СубконтоБУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
	мКолонкиТовары.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетНУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры // ТоварыПриАктивизацииСтроки()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Товары".
//
Процедура ТоварыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеКонтактами.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары");

КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" табличной части "Товары".
//
Процедура ТоварыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеКонтактами.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Товары", ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


// Процедура - обработчик события "НачалоВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСправочникаСоставногоТипа(ЭтотОбъект, 
		ЭтаФорма, 
		Элемент, 
		СтандартнаяОбработка,
		Новый Структура,
		"Товары",
		мОписаниеТипаНоменклатуры);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	ПриИзмененииНоменклатурыТЧ(Элемент, "Товары");

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары");
	
	// Состав набора зависит от его характеристики.
	УправлениеЗапасами.ДобавитьСоставНабора(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	// Рассчитать реквизиты табличной части.
	ПриИзмененииЦеныТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	ПриИзмененииКоличестваТЧ(Элемент, "Товары");

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыСуммаПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Товары", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Товары", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	// Рассчитать реквизиты табличной части.
	ПриИзмененииЦеныТЧ(Элемент, "Товары");
	
КонецПроцедуры


// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "Товары".
Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = УправлениеЗаказами.ПолучитьСтруктуруОтбораПоЗаказам(ЭтотОбъект);

	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "Приход", "ЗаказПокупателя" ,СтруктураОтбора);		
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Склад"
// в строке табличной части "Товары".
Процедура ТоварыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);
	
КонецПроцедуры


// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыПринятыеСчетУчетаБУПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные)

КонецПроцедуры // ТоварыПринятыеСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыПереданныеПринятыеБУПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные)
	
КонецПроцедуры // ТоварыПереданныеПринятыеБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетДоходовБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	СчетБУ   = СтрокаТЧ.СчетДоходовБУ;

	Если СчетБУ.ВидыСубконто.Количество() > 0 Тогда
		Если ТипЗнч(СтрокаТЧ.СубконтоБУ)<>СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] Тогда
			СтрокаТЧ.СубконтоБУ = Новый(СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
		
	Иначе
		СтрокаТЧ.СубконтоБУ = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		СтрокаТЧ.СчетДоходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));
	КонецЕсли;
	
	СчетНУ   = СтрокаТЧ.СчетДоходовНУ;
	Если СчетНУ.ВидыСубконто.Количество() > 0 Тогда
		Если ТипЗнч(СтрокаТЧ.СубконтоНУ)<>СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] Тогда
			СтрокаТЧ.СубконтоНУ = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
	Иначе
		СтрокаТЧ.СубконтоНУ = Неопределено;
	КонецЕсли;

	мКолонкиТовары.СубконтоБУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
	мКолонкиТовары.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетДоходовБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетДоходовНУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	СчетНУ   = СтрокаТЧ.СчетДоходовНУ;

	Если СчетНУ.ВидыСубконто.Количество() > 0 Тогда
		Если ТипЗнч(СтрокаТЧ.СубконтоНУ)<>СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] Тогда
			СтрокаТЧ.СубконтоНУ = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
	Иначе
		СтрокаТЧ.СубконтоНУ = Неопределено;
	КонецЕсли;

	мКолонкиТовары.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетНУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетДоходовНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыСубконтоБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетДоходовБУ, СтрокаТЧ.СчетДоходовНУ, 1, СтрокаТЧ.СубконтоБУ, СтрокаТЧ.СубконтоНУ);
	СтруктураСчетов = Новый Структура("СчетБУ,СчетДоходовБУ,СчетДоходовНУ,Субконто1,Субконто2,Субконто3",СтрокаТЧ.СчетДоходовБУ,СтрокаТЧ.СчетДоходовБУ,СтрокаТЧ.СчетДоходовНУ,СтрокаТЧ.СубконтоБУ,СтрокаТЧ.СубконтоНУ);
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтруктураСчетов, Истина,"СчетДоходовБУ","СчетДоходовНУ", Истина);
    СтрокаТЧ.СчетДоходовНУ = СтруктураСчетов.СчетДоходовНУ;
    
    СтруктураСчетов = Новый Структура("СчетБУ,СчетРасходовБУ,СчетРасходовНУ,Субконто1,Субконто2,Субконто3",СтрокаТЧ.СчетРасходовБУ,СтрокаТЧ.СчетРасходовБУ,СтрокаТЧ.СчетРасходовНУ,СтрокаТЧ.СубконтоБУ,СтрокаТЧ.СубконтоНУ);
    НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтруктураСчетов, Истина,"СчетРасходовБУ","СчетРасходовНУ", Истина);
    СтрокаТЧ.СчетРасходовНУ = СтруктураСчетов.СчетРасходовНУ;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыПринятыеСчетУчетаБУНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Истина);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыПереданныеСобственныеБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

 	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыПереданныеПринятыеБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Истина);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетДоходовБУНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.ВыборСчета(Элемент, СтандартнаяОбработка, Ложь);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетРасходовБУПриИзменении(Элемент)
	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
    Если ЗначениеЗаполнено(Элемент.Значение) Тогда
        
        СтруктураСчетов = Новый Структура("СчетБУ,СчетРасходовБУ,СчетРасходовНУ,Субконто1,Субконто2,Субконто3",СтрокаТЧ.СчетРасходовБУ,СтрокаТЧ.СчетРасходовБУ,СтрокаТЧ.СчетРасходовНУ,СтрокаТЧ.СубконтоБУ,СтрокаТЧ.СубконтоНУ);
        НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтруктураСчетов, Истина,"СчетРасходовБУ","СчетРасходовНУ", Истина);
        СтрокаТЧ.СчетРасходовНУ = СтруктураСчетов.СчетРасходовНУ;
        
    КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// в табличной части "Услуги".
//
Процедура УслугиПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СчетБУ  = СтрокаТабличнойЧасти.СчетДоходовБУ;
	СчетНУ  = СтрокаТабличнойЧасти.СчетДоходовНУ;

	мКолонкиУслуги.СубконтоБУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
	мКолонкиУслуги.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетНУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Услуги"
//
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ПриНачалеРедактированияСтрокиТЧ(Элемент, "Услуги", НоваяСтрока);
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных" поля табличной части "Услуги"
//
Процедура УслугиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхСтрокиТЧ(Элемент, "Услуги", ОформленияСтрок);
	
КонецПроцедуры

Процедура УслугиПередУдалением(Элемент, Отказ)
	
	ПередУдалениемСтрокиТЧ(Элемент, "Услуги", Отказ);
	
КонецПроцедуры

// Процедура - обработчик события "ПроверкаПеретаскивания" поля табличной части "Услуги"
//
Процедура УслугиПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеКонтактами.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги");
	
КонецПроцедуры

// Процедура - обработчик события "Перетаскивание" поля табличной части "Услуги"
//
Процедура УслугиПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеКонтактами.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Услуги", ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода номенклатура
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	ПриИзмененииНоменклатурыТЧ(Элемент, "Услуги");
	
КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Услуги");
	
КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Услуги");
	
КонецПроцедуры // УслугиЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Услуги");
	
КонецПроцедуры // УслугиСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Услуги");
	
КонецПроцедуры// УслугиСуммаПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Услуги", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Услуги", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Услуги", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры


// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПокупателя"
// в строке табличной части "Услуги".
Процедура УслугиЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = УправлениеЗаказами.ПолучитьСтруктуруОтбораПоЗаказам(ЭтотОбъект);

	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							 "Приход", "ЗаказПокупателя" ,СтруктураОтбора);		
	
	
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Услуги".
//
Процедура УслугиСчетДоходовБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	СчетБУ   = СтрокаТЧ.СчетДоходовБУ;

	Если СчетБУ.ВидыСубконто.Количество() > 0 Тогда
		Если ТипЗнч(СтрокаТЧ.СубконтоБУ)<>СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] Тогда
			СтрокаТЧ.СубконтоБУ = Новый(СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
	Иначе
		СтрокаТЧ.СубконтоБУ = Неопределено;
	КонецЕсли;
    Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		СтрокаТЧ.СчетДоходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));
	КонецЕсли;
	
	СчетНУ   = СтрокаТЧ.СчетДоходовНУ;
	Если СчетНУ.ВидыСубконто.Количество() > 0 Тогда
		Если ТипЗнч(СтрокаТЧ.СубконтоНУ)<>СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] Тогда
			СтрокаТЧ.СубконтоНУ = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
	Иначе
		СтрокаТЧ.СубконтоНУ = Неопределено;
	КонецЕсли;

	мКолонкиУслуги.СубконтоБУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
	мКолонкиУслуги.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Услуги".
//
Процедура УслугиСчетДоходовБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Услуги".
//
Процедура УслугиСчетДоходовНУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	СчетНУ   = СтрокаТЧ.СчетДоходовНУ;

	Если СчетНУ.ВидыСубконто.Количество() > 0 Тогда
		Если ТипЗнч(СтрокаТЧ.СубконтоНУ)<>СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] Тогда
			СтрокаТЧ.СубконтоНУ = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
		КонецЕсли;
	Иначе
		СтрокаТЧ.СубконтоНУ = Неопределено;
	КонецЕсли;

	мКолонкиУслуги.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетНУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Услуги".
//
Процедура УслугиСчетДоходовНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Услуги".
//
Процедура УслугиСубконтоБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;

	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетДоходовБУ, СтрокаТЧ.СчетДоходовНУ, 1, СтрокаТЧ.СубконтоБУ, СтрокаТЧ.СубконтоНУ);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Услуги".
//
Процедура УслугиСчетРасходовБУПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
    Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		СтрокаТЧ.СчетРасходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));
	КонецЕсли;
КонецПроцедуры


///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДокументРеализацииСсылка 	= УчетНДС.ПолучитьИсправляемыйДокументРеализации(ДокументРеализации, Истина);

мОбновлятьВладельца 		= Ложь;

мКолонкиТовары         		= ЭлементыФормы.Товары.Колонки;
мКолонкиУслуги         		= ЭлементыФормы.Услуги.Колонки;

мИспользоватьХарактеристики = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();
мИспользоватьСерии 			= Константы.ИспользоватьСерииНоменклатуры.Получить();