////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Устанавливается в значение "Истина", во время выполнения процедуры расчета суммовой
// скидки с целью избежать ее рекурсивного вызова
Перем мИдетРасчетСуммовойСкидки;

// Используется для определения необходимости установки суммовой скидки.
// При открытии устанавливается значение Истина, если порог скидки превышен.
Перем мСкидкаУстановлена Экспорт;

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

//Используется для определения необходимости заполнения счетов в документе
Перем мСклад;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;
Перем мОтражатьВРегламентированномУчете;

Перем мТерминалы;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура ПривестиТипЗаказа выполняет приведение типа реквизита Заказ в соответствие с видом операции
//
Процедура ПривестиТипЗаказа()
	
	ТипЗаказа = Новый ОписаниеТипов(?(ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку 
									  ИЛИ ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак,
		"ДокументСсылка.ЗаказПоставщику",
		"ДокументСсылка.ЗаказПокупателя"));
	ЭлементыФормы.Заказ.ВыбиратьТип = Ложь;
	Если ТипЗнч(Заказ) <> ТипЗаказа.Типы()[0] Тогда
		Заказ = ТипЗаказа.ПривестиЗначение(Заказ);
		ЗаказПриИзменении(ЭлементыФормы.Заказ);
	КонецЕсли;
	
КонецПроцедуры // ПривестиТипЗаказа()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	РазворачиватьДоКачества = Ложь;

	Если ТабличнаяЧасть = Товары Тогда

		Команда           = "ПодборВТабличнуюЧастьТовары";
		ЕстьСерия         = Истина;
		ИмяТабличнойЧасти = "Товары";
		РазворачиватьДоКачества = ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак;

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		
		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ЕстьСерия         = Ложь;
		ИмяТабличнойЧасти = "Тара";

	КонецЕсли;

	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(                      , "По справочнику");
	СписокВидовПодбора.Добавить( "ОстаткиНоменклатуры", "По остаткам номенклатуры");
	
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                  , Склад);
	СтруктураПараметровПодбора.Вставить("Организация"            , Организация);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , Ложь);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества", РазворачиватьДоКачества);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
										ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"		  , Качество);
	
	Если (ТабличнаяЧасть = ВозвратнаяТара) И (Номенклатура.Услуга) Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
		СтруктураОтбора.Вставить("Качество"                  , ?(ЗначениеЗаполнено(Качество), Качество, Справочники.Качество.Новый));
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения 	  = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      	  = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

			Если ЗначениеЗаполнено(Качество) Тогда
				СтрокаТабличнойЧасти.Качество         = Качество;
			Иначе
				СтрокаТабличнойЧасти.Качество         = Справочники.Качество.Новый;
			КонецЕсли;
			
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
			
			СтрокаТабличнойЧасти.Количество       = Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		КонецЕсли;
	КонецЕсли;

	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары", "ВозвратнаяТара");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	
КонецПроцедуры // ПриИзмененииНоменклатурыТоваров()

// Удаление из меню лишних пунктов.
//
Процедура ОбновитьМенюКнопкиЗаполнить()

	Если мТерминалы.Количество() = 0 Тогда
		КнопкиПанелиТовары = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки;
		КнопкаИзТерминалаСбораДанных = КнопкиПанелиТовары.Найти("ИзТерминалаСбораДанных");
		Если КнопкаИзТерминалаСбораДанных <> Неопределено Тогда
			ИндексКнопкиИзТерминалаСбораДанных = КнопкиПанелиТовары.Индекс(КнопкаИзТерминалаСбораДанных);
			КнопкиПанелиТовары.Удалить(ИндексКнопкиИзТерминалаСбораДанных);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбновитьМенюКнопкиЗаполнить()

// Процедура выполняет заполниение табличной части непереданных ТМЦ по заказу.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть)

	ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам;
	ПредставлениеЗаказПоставщику = Метаданные.Документы.ЗаказПоставщику.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	ИначеЕсли НЕ ЗначениеЗаполнено(Заказ) Тогда
		ТекстПредупреждения = "Не выбран заказ.
		                      |Заполнение невозможно.";
	
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, ,);
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		ЗаполнитьТоварыПоОстаткамУпр();
		ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
	   ИЛИ ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
		ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, Неопределено, "ВозвратнаяТара", мТекущийДоговорКонтрагента);
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, Неопределено, "ВозвратнаяТара", мТекущийДоговорКонтрагента);
	КонецЕсли;

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Заказ, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, Новый Структура("Товары,ВозвратнаяТара"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Производит заполнение документа переданными из формы заполнения данными.
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ТаблицаИсточник - таблица значений - источник для заполняемой табличной части.
//
Процедура ОбработкаЗаполнения(ТабличнаяЧасть, ТаблицаИсточник) Экспорт

	// Сформировать таблицу по ценам и скидкам
	ЕстьКолонкаЗаказ = Ложь; 

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Если ЕстьКолонкаЗаказ Тогда
		ТаблицаЗаказов = ТаблицаИсточник.Скопировать();
		ТаблицаЗаказов.Свернуть("ЗаказПокупателя");
		СписокЗаказов = Новый СписокЗначений;
		Для Каждого Строка Из ТаблицаЗаказов Цикл
			Если ЗначениеЗаполнено(Строка.ЗаказПокупателя) Тогда
				СписокЗаказов.Добавить(Строка.ЗаказПокупателя.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если НЕ СписокЗаказов.Количество() > 0 Тогда
			СписокЗаказов.Добавить(Заказ);
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокЗаказов",   СписокЗаказов);
	Иначе
		Запрос.УстановитьПараметр("ЗаказПокупателя", Заказ);
	КонецЕсли;
	Запрос.УстановитьПараметр("СтатусТары", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);

	ИмяРеквизитаКоличества = "Количество";

	Если ТабличнаяЧасть = Товары Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	ОстаткиЗаказ.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент         КАК Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки                 КАК ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок          КАК ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки          КАК УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки  КАК ЗначениеУсловияАвтоматическойСкидки,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента"
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПокупателя В (&СписокЗаказов)", "
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя") + "
		|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена,
		|	ОстаткиЗаказ.ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент,
		|	ОстаткиЗаказ.ПроцентСкидкиНаценки,
		|	ОстаткиЗаказ.ПроцентАвтоматическихСкидок,
		|	ОстаткиЗаказ.УсловиеАвтоматическойСкидки,
		|	ОстаткиЗаказ.ЗначениеУсловияАвтоматическойСкидки
		|";

		ИмяРеквизитаКоличества = "Количество";

		ТаблицаИсточник.Колонки.Добавить("Коэффициент");
		ТаблицаИсточник.Колонки.Добавить("ПроцентСкидкиНаценки");
		ТаблицаИсточник.Колонки.Добавить("ПроцентАвтоматическихСкидок");
		ТаблицаИсточник.Колонки.Добавить("УсловиеАвтоматическойСкидки");
		ТаблицаИсточник.Колонки.Добавить("ЗначениеУсловияАвтоматическойСкидки");

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя                      КАК ЗаказПокупателя,", "") + "
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента" 
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПокупателя В (&СписокЗаказов)", "
		|	                                              И ЗаказПокупателя = &ЗаказПокупателя") + "
		|	                                              И СтатусПартии = &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПокупателя,", "") + "
		|	ОстаткиЗаказ.Цена
		|";

	КонецЕсли;

	ТаблицаЦенСкидок = Запрос.Выполнить().Выгрузить();

	ТаблицаИсточник.Колонки.Добавить("Цена");

	НомерСтроки = 0;
	ТаблицаИсточникКоличество = ТаблицаИсточник.Количество();
	Пока НомерСтроки < ТаблицаИсточникКоличество Цикл

		СтрокаТаблицы = ТаблицаИсточник[НомерСтроки];

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура",                   СтрокаТаблицы.Номенклатура);
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		КонецЕсли;
		Если ЕстьКолонкаЗаказ Тогда
			СтруктураОтбора.Вставить("ЗаказПокупателя", СтрокаТаблицы.ЗаказПокупателя);
		КонецЕсли;

		ОтобранныеСтрокиТаблицыЦенСкидок = ТаблицаЦенСкидок.НайтиСтроки(СтруктураОтбора);
		Для Каждого СтрокаТаблицыЦенСкидок Из ОтобранныеСтрокиТаблицыЦенСкидок Цикл
			Если СтрокаТаблицыЦенСкидок.Количество > 0 Тогда
				Если СтрокаТаблицыЦенСкидок.Количество >= СтрокаТаблицы[ИмяРеквизитаКоличества] Тогда
					СтрокаТаблицы.Цена = СтрокаТаблицыЦенСкидок.Цена;
					Если ТабличнаяЧасть = Товары Тогда
						Если ТабличнаяЧасть = Товары Тогда

							СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент      = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);

						КонецЕсли;
					КонецЕсли;

					СтрокаТаблицыЦенСкидок.Количество = СтрокаТаблицыЦенСкидок.Количество - СтрокаТаблицы[ИмяРеквизитаКоличества];
				Иначе

					// Разобьем на две строки
					КопияСтроки = ТаблицаИсточник.Добавить();
                    КопияСтроки[ИмяРеквизитаКоличества] = СтрокаТаблицы[ИмяРеквизитаКоличества];

					СтрокаТаблицы[ИмяРеквизитаКоличества] = СтрокаТаблицыЦенСкидок.Количество;
					СтрокаТаблицы.Цена                    = СтрокаТаблицыЦенСкидок.Цена;

					Если ТабличнаяЧасть = Товары Тогда
						Если ТабличнаяЧасть = Товары Тогда
							СтрокаТаблицы.ЕдиницаИзмерения            = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
							СтрокаТаблицы.Коэффициент                 = СтрокаТаблицыЦенСкидок.Коэффициент;

							СтрокаТаблицы.Количество = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
							                             СтрокаТаблицы.Количество
							                             * СтрокаТаблицыЦенСкидок.КоэффициентЕдиницыХранения
							                             / СтрокаТаблицы.Коэффициент);
						КонецЕсли;
					КонецЕсли;
                    ЗаполнитьЗначенияСвойств(КопияСтроки,СтрокаТаблицы,,ИмяРеквизитаКоличества);
					КопияСтроки[ИмяРеквизитаКоличества] = КопияСтроки[ИмяРеквизитаКоличества] - СтрокаТаблицы[ИмяРеквизитаКоличества];

				КонецЕсли;
				Прервать;
			Иначе
				СтрокаТаблицы.Цена = СтрокаТаблицыЦенСкидок.Цена;
				Если ТабличнаяЧасть = Товары Тогда
					СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицыЦенСкидок.ЕдиницаИзмерения;
					СтрокаТаблицы.Коэффициент      = СтрокаТаблицыЦенСкидок.Коэффициент;
                КонецЕсли;
			КонецЕсли;
		КонецЦикла;

		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;

	// Загрузить в документ обработанную таблицу
	Если НЕ ЕстьКолонкаЗаказ Тогда
		ОрганизацияЗаказа                   = Заказ.Организация;
		ДатаЗаказа                          = Заказ.Дата;
		
		ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаЗаказа, ОрганизацияЗаказа, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
			ОрганизацияЯвляетсяПлательщикомЕНВД = ПараметрыУчетнойПолитики.ОрганизацияЯвляетсяПлательщикомЕНВД;
		Иначе
			ОрганизацияЯвляетсяПлательщикомЕНВД = Ложь;
		КонецЕсли;
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		СтрокаХарактеристика       = ", ХарактеристикаНоменклатуры";
		СтрокаЕдиницаИзмерения     = ", ЕдиницаИзмерения, Коэффициент";
	Иначе
		СтрокаХарактеристика       = "";
		СтрокаЕдиницаИзмерения     = "";
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары Тогда
		СтрокаСерия = ", СерияНоменклатуры";
	Иначе
		СтрокаСерия = "";
	КонецЕсли;

	
	Если ТабличнаяЧасть.Количество() > 0 Тогда
		ТаблицаПолучатель = ТабличнаяЧасть.Выгрузить();
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТаблицаИсточник, ТаблицаПолучатель);
		
		ТабличнаяЧасть.Загрузить(ТаблицаПолучатель);
	Иначе
		ТабличнаяЧасть.Загрузить(ТаблицаИсточник);
	КонецЕсли;
    ТабличнаяЧасть.Свернуть("Номенклатура" + СтрокаХарактеристика + СтрокаСерия +  СтрокаЕдиницаИзмерения + ", Цена", "Количество");
	ТабличнаяЧасть.Сортировать("Номенклатура" + СтрокаХарактеристика + СтрокаСерия +  СтрокаЕдиницаИзмерения + ", Цена");

	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ТабличнаяЧасть = Товары Тогда
			
			Если ЕстьКолонкаЗаказ Тогда
				ДокументЗаказ = СтрокаТабличнойЧасти.ЗаказПокупателя;
			Иначе
				ДокументЗаказ = Заказ;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент) Тогда
				СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			КонецЕсли;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Заполнение цены зависит от розничности операции.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
											ДокументЗаказ.ВалютаДокумента, ВалютаДокумента,
											ЗаполнениеДокументов.КурсДокумента(ДокументЗаказ, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
											ЗаполнениеДокументов.КратностьДокумента(ДокументЗаказ, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
											Ложь,
											Ложь,
											Ложь,
											0);

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Выполнить общие действия для всех документов при изменении возвратной тары.
			ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		КонецЕсли;
		
		Если ЕстьКолонкаЗаказ И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПокупателя) Тогда
			Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				СтрокаТабличнойЧасти.ЗаказПокупателя = Заказ;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбработкаЗаполнения()

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям()
	

	ТоварыТабличнойЧасти = Товары.Выгрузить();
	ТоварыТабличнойЧасти.Свернуть("Номенклатура");
	
	флЗаполнятьИзРезервов = ложь;
    Если ТипЗнч(Заказ)=Тип("ДокументСсылка.ЗаказПокупателя") И глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании") Тогда
		Если Заказ.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
			флЗаполнятьИзРезервов = истина;
		КонецЕсли;
	КонецЕсли;


	МассивНоменклатуры   = ТоварыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады         = Новый Массив;
	МассивСклады.Добавить(Склад);
	
	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий         = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям);
	
	ТоварыТабличнойЧасти = Товары.Выгрузить();
	Товары.Очистить();

	КолонкиТабЧасти = ТоварыТабличнойЧасти.Колонки;

	Для Каждого ИсходнаяСтрока ИЗ ТоварыТабличнойЧасти Цикл

		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		
		Если флЗаполнятьИзРезервов Тогда
			СтуктураПоиска.Вставить("ДокументРезерва",    Заказ);
            НайденныеСтроки = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;
		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
        СтрокаСПустойСерией = Неопределено;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Строка.Остаток <= 0 Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);

			НоваяСтрока = Товары.Добавить();

			ЗаполнитьЗначенияСвойств( НоваяСтрока, ИсходнаяСтрока);
			Если НЕ ЗначениеЗаполнено(ИсходнаяСтрока.СерияНоменклатуры) Тогда
				НоваяСтрока.СерияНоменклатуры               = Строка.СерияНоменклатуры;
			Иначе
				НоваяСтрока.СерияНоменклатуры               = ИсходнаяСтрока.СерияНоменклатуры;
			КонецЕсли;

			НоваяСтрока.Количество                          = СписанноеКоличество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток             = Строка.Остаток - СписанноеКоличество;

		КонецЦикла;

		Если КоличествоОсталосьПогасить > 0 Тогда

			Если СтрокаСПустойСерией = Неопределено Тогда

				НоваяСтрока = Товары.Добавить();

				ЗаполнитьЗначенияСвойств( НоваяСтрока, ИсходнаяСтрока);
				
				НоваяСтрока.СерияНоменклатуры                   = "";
				НоваяСтрока.Количество                          = КоличествоОсталосьПогасить;
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

			Иначе

				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры //ЗаполнитьПоСериям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки     = ЭлементыФормы.Товары.Колонки;
	КолонкиТары = ЭлементыФормы.ВозвратнаяТара.Колонки;

	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)));
	
	//Установка видимости, автоотметки незаполненного полей со счетами учета номенклатуры и затрат
	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(Дата, Метаданные().Имя, Неопределено, Новый Структура("Товары", 			Колонки), 		ПоказыватьВДокументахСчетаУчета И (ВидОперации <> Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП);
	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(Дата, Метаданные().Имя, Неопределено, Новый Структура("ВозвратнаяТара",	КолонкиТары), 	ПоказыватьВДокументахСчетаУчета, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП);
	
	// Установка видимости колонок если отражаем в рег. учете.
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеОтобратьИЗаполнитьПоЗаказам.Доступность = истина;

		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.Цена,                Ложь);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.Сумма,               Ложь);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку 
	   ИЛИ ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак Тогда
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеОтобратьИЗаполнитьПоЗаказам.Доступность = ложь;
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.Цена,                Истина);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.Сумма,               Истина);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.Качество, Истина);
	Иначе
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.Качество, Ложь);
	КонецЕсли;
	
	ЭлементыФормы.СчетУчетаДоходовПоТареБУ                .Видимость = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСчетУчетаДоходовПоТареБУ         .Видимость = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СчетУчетаРасходовПоТареБУ               .Видимость = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСчетУчетаРасходовПоТареБУ        .Видимость = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СтатьяПрочихДоходовРасходовПоТаре       .Видимость = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСтатьяПрочихДоходовРасходовПоТаре.Видимость = ОтражатьВБухгалтерскомУчете;
	
	ЭлементыФормы.СчетУчетаДоходовПоТареНУ        .Видимость = ОтражатьВНалоговомУчетеНП;
	ЭлементыФормы.НадписьСчетУчетаДоходовПоТареНУ .Видимость = ОтражатьВНалоговомУчетеНП;
	ЭлементыФормы.СчетУчетаРасходовПоТареНУ       .Видимость = ОтражатьВНалоговомУчетеНП;
	ЭлементыФормы.НадписьСчетУчетаРасходовПоТареНУ.Видимость = ОтражатьВНалоговомУчетеНП;
	
	ЭлементыФормы.Контрагент.ТолькоПросмотр 		= (ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);
	ЭлементыФормы.ДоговорКонтрагента.ТолькоПросмотр = (ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки);
	
	Флаг = ВозвратнаяТара.Количество() > 0 ИЛИ мИспользоватьТару;
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = Флаг И ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
	
	АвтоОтметка = Истина;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) 
	   И (ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку 
	   ИЛИ ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			АвтоОтметка = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если ЭлементыФормы.Заказ.АвтоотметкаНеЗаполненного <> АвтоОтметка Тогда
		ЭлементыФормы.Заказ.АвтоотметкаНеЗаполненного = АвтоОтметка;
	КонецЕсли;

	Если ЭлементыФормы.Заказ.ОтметкаНеЗаполненного <> АвтоОтметка И НЕ ЗначениеЗаполнено(Заказ) Тогда
		ЭлементыФормы.Заказ.ОтметкаНеЗаполненного = АвтоОтметка;
	КонецЕсли;
	
	ЭлементыФормы.СчетУчетаРасчетовПоТаре.АвтоОтметкаНезаполненного        = (ВозвратнаяТара.Количество() > 0);
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность меню "Проверить"
// командной панели "КоманднаяПанельТовары"
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьМенюПроверить()

	Перем Кнопка;

	УстановитьДоступностьКнопкиПроверитьШтрихКоды();

	Кнопка = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Проверить;
	Если Кнопка.Кнопки.Количество() = 0 Тогда
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Удалить(Кнопка);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьМенюПроверить()

// Процедура устанавливает доступность пункта "Штрих-коды" меню "Проверить"
// командной панели "КоманднаяПанельТовары"
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьКнопкиПроверитьШтрихКоды()

	КнопкаПроверить = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Проверить;
	Если ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.СканерШтрихКода,
	                                       Справочники.КассыККМ.ПустаяСсылка()).Количество() = 0 Тогда
		Кнопка = КнопкаПроверить.Кнопки.ШтрихКоды;
		КнопкаПроверить.Кнопки.Удалить(Кнопка);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьКнопкиПроверитьШтрихКоды()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПоставщику")
	   И Не ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		Предупреждение("Документ можно вводить только на основании заказа поставщику с видом операции ""Переработка"".");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		ПривестиТипЗаказа();
	КонецЕсли;

	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);
	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);
	ОбновитьМенюКнопкиЗаполнить();

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимость колонок для табличной части
	// "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	СтруктураКолонок.Вставить("Качество");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// КоманднаяПанельФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										  ВидОперации.Метаданные().ЗначенияПеречисления,
										  Новый Действие("КоманднаяПанельФормыДействиеУстановитьОперацию"));
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);

	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);

	// Обновить содержание информационных строк.
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Заказ, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;


	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();

	ЭлементыФормы.ВозвратнаяТара.Колонки.Цена .ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.ВозвратнаяТара.Колонки.Сумма.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	мСклад = Склад;

	УстановитьДоступностьМенюПроверить();

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "ВозвратнаяТара"),  
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;
	
	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                 КурсВзаиморасчетов,
	                                                                                 КратностьВзаиморасчетов,
	                                                                                 мВалютаРегламентированногоУчета,
	                                                                                 Истина);


	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку Тогда
		СтраницаПанели.Товары.Заголовок = "Материалы ("   + ДокументОбъект.Товары.Количество() + " поз.)";
	Иначе
		СтраницаПанели.Товары.Заголовок = "Продукция ("   + ДокументОбъект.Товары.Количество() + " поз.)";
	КонецЕсли;
	СтраницаПанели.Тара  .Заголовок = "Тара ("   + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
	ЭлементыФормы.АдресДоставки.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресДоставки);
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ЗаполнениеТабличныхЧастей" Тогда

			Если ЗначениеВыбора.ЗаполнятьТовары Тогда
				ОбработкаЗаполнения(Товары, ЗначениеВыбора.Товары);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	     Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, Ложь,
	                                                ТипЦен);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, Ложь,
	                                                ТипЦен);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПередачаТоваров[Кнопка.Имя];
	КонецЕсли;
	
	ПривестиТипЗаказа();

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	
	УстановитьВидимость();

	Если Не ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ИзПереработки Тогда
		СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Товары,ВозвратнаяТара"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельФормыДействиеУстановитьОперацию()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
//
Процедура КоманднаяПанельДействиеЦеныВалюта(Кнопка)
	
	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            , "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "ВозвратнаяТара", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры // КоманднаяПанельДействиеЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Заполнить по заказу" командной панели "Товары".
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказу(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоОстаткам(Товары);
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказу()

// Процедура - обработчик события "ПриНажатии" пункта меню "ШтрихКоды"
// "КоманднаяПанельТовары"
//
// Параметры
//  Кнопка – <КнопкаКоманднойПанели> 
//         – кнопка "ШтрихКоды"
//
Процедура КоманднаяПанельТоварыШтрихКоды(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПроверкиШтрихкодов(ЭтаФорма, ЭтотОбъект, Неопределено);

КонецПроцедуры // КоманднаяПанельТоварыШтрихКоды()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = Ложь; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мРассчитыватьАвтоматическиеСкидки = Ложь;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Товары".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельТоварыДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары       = Истина;
			Форма.ПоказыватьУслуги       = Ложь;
			Форма.ПоказыватьТару         = Ложь;
			Форма.ПоказыватьОборудование = Ложь;
			
			Форма.НеЗаполнятьУслуги       = Истина;
			Форма.НеЗаполнятьТару         = Истина;
			Форма.НеЗаполнятьОборудование = Истина;
			
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары       = Истина;
			Форма.ФлажокУслуги       = Ложь;
			Форма.ФлажокТара         = Ложь;
			Форма.ФлажокОборудование = Ложь;
			
			Форма.НеЗаполнятьУслуги       = Истина;
			Форма.НеЗаполнятьТару         = Истина;
			Форма.НеЗаполнятьОборудование = Истина;
			
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)

	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборТовары = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();
		
		НаборТовары = РегистрыНакопления.ТоварыКПередачеСоСкладов.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();

		НаборТовары = РегистрыНакопления.ТоварыКПередачеОрганизаций.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();

		НаборТовары = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьПоСериям();

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	Попытка
		Записать(РежимЗаписиДокумента.Проведение, РежимПроведенияДокумента.Оперативный);
	Исключение
		Предупреждение("Операция не выполнена!");
	КонецПопытки;

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бухгалтерском учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");

	Если НЕ Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;

	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, Новый Структура("Товары,ВозвратнаяТара"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВРегламентированномУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	Если НЕ Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;

	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, Новый Структура("Товары,ВозвратнаяТара"), Неопределено, ОтражатьВНалоговомУчете);
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	СтарыйДоговор = ДоговорКонтрагента;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	
	Если НЕ СтарыйДоговор = ДоговорКонтрагента Тогда
		ПриИзмененииДоговора();
	КонецЕсли;	
	
    УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Заказ".
//
Процедура ЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТабОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
	   ИЛИ ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак Тогда
		
		СписокОтбора = Новый СписокЗначений;
		СписокОтбора.Добавить( Перечисления.ВидыОперацийЗаказПоставщику.Переработка);
		
		ТекОтбор              = ТабОтбора.Добавить();
		ТекОтбор.Имя          = "ВидОперации";
		ТекОтбор.ВидСравнения = ВидСравнения.ВСписке;
		ТекОтбор.Значение     = СписокОтбора;
		ТекОтбор.НеИзменять   = Истина;
		
	Иначе
		
		ТекОтбор              = ТабОтбора.Добавить();
		ТекОтбор.Имя          = "ВидОперации";
		ТекОтбор.ВидСравнения = ВидСравнения.Равно;
		ТекОтбор.Значение     = Перечисления.ВидыОперацийЗаказПокупателя.Переработка;
		ТекОтбор.НеИзменять   = Истина;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекОтбор              = ТабОтбора.Добавить();
		ТекОтбор.Имя          = "Организация";
		ТекОтбор.ВидСравнения = ВидСравнения.Равно;
		ТекОтбор.Значение     = Организация;
		ТекОтбор.НеИзменять   = Истина;
	КонецЕсли;
	
	СписокТипов = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку
	   ИЛИ ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак Тогда

		Если ЗначениеЗаполнено(Контрагент) Тогда
			ТекОтбор              = ТабОтбора.Добавить();
			ТекОтбор.Имя          = "Контрагент";
			ТекОтбор.ВидСравнения = ВидСравнения.Равно;
			ТекОтбор.Значение     = Контрагент;
		КонецЕсли;
	   
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			ТекОтбор              = ТабОтбора.Добавить();
			ТекОтбор.Имя          = "ДоговорКонтрагента";
			ТекОтбор.ВидСравнения = ВидСравнения.Равно;
			ТекОтбор.Значение     = ДоговорКонтрагента;
		КонецЕсли;
		
		СписокТипов.Добавить( "ЗаказПоставщику", Метаданные.Документы["ЗаказПоставщику"].Представление());
	Иначе
		СписокТипов.Добавить( "ЗаказПокупателя", Метаданные.Документы["ЗаказПокупателя"].Представление());
	КонецЕсли;
	
	РаботаСДиалогами.ОткрытьФормуДокументаСОтбором(ЭтаФорма, Элемент, СписокТипов, ТабОтбора);
	
КонецПроцедуры // ЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Заказ
//
Процедура ЗаказПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Заказ) Тогда
		
		Если Не Заказ.Организация = Организация Тогда
			Организация = Заказ.Организация;
			ОрганизацияПриИзменении(ЭлементыФормы.Организация);
		КонецЕсли;
		
		Контрагент         = Заказ.Контрагент;
		ДоговорКонтрагента = Заказ.ДоговорКонтрагента;
		ПриИзмененииДоговора();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаказПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Контрагент
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	// Могли поменять договор.
	ПриИзмененииДоговора();
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		Если ЗначениеЗаполнено(Контрагент) И Заказ.Контрагент <> Контрагент Тогда
			Заказ = Неопределено;
		ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) И Заказ.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
			Заказ = Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить( Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СписокОтбора.Добавить( Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	
	СтруктОтбора = Новый Структура;
	СтруктОтбора.Вставить( "ЗначениеОтбора",     СписокОтбора);
	СтруктОтбора.Вставить( "ВидСравненияОтбора", ВидСравнения.ВСписке);
	
	СтруктДопПараметры = Новый Структура;
	СтруктДопПараметры.Вставить("ВедениеВзаиморасчетов", СтруктОтбора);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект,
		ЭтаФорма,
		Элемент,
		Контрагент,
		ДоговорКонтрагента,
		?(ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработку 
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийПередачаТоваров.ВПереработкуБрак,
				Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком,
				Перечисления.ВидыДоговоровКонтрагентов.СПокупателем),
		СтандартнаяОбработка,
		СтруктДопПараметры);
												
КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И Заказ.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
			Заказ = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерассчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерассчитатьДолгНажатие(Элемент)

	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Заказ, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерассчитатьАвансДоговораНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода "Склад"
//
Процедура СкладПриИзменении(Элемент)

	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;

	Если Товары.Количество() + ВозвратнаяТара.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если мСклад.ВидСклада = Элемент.Значение.ВидСклада Тогда
		Возврат;
	КонецЕсли;

	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Товары,ВозвратнаяТара"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	мСклад = Склад;

КонецПроцедуры // СкладПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.Равно, СтандартнаяОбработка, Перечисления.ВидыСкладов.Оптовый);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаДоходовПоТареБУ
//
Процедура СчетУчетаДоходовПоТареБУПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(СчетУчетаДоходовПоТареБУ)
	 ИЛИ СчетУчетаДоходовПоТареБУ.ВидыСубконто.Количество() = 0 Тогда
		СтатьяПрочихДоходовРасходовПоТаре = Неопределено;
	Иначе
		СтатьяПрочихДоходовРасходовПоТаре = СчетУчетаДоходовПоТареБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.ПривестиЗначение(СтатьяПрочихДоходовРасходовПоТаре);
	КонецЕсли;
	
	СчетУчетаДоходовПоТареНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаДоходовПоТареБУ));

КонецПроцедуры // СчетУчетаДоходовПоТареБУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаДоходовПоТареБУ
//
Процедура СчетУчетаДоходовПоТареБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетУчетаДоходовПоТареБУОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаРасходовПоТареБУ
//
Процедура СчетУчетаРасходовПоТареБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетУчетаРасходовПоТареБУОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаДоходовПоТареНУ
//
Процедура СчетУчетаДоходовПоТареНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетУчетаДоходовПоТареНУОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаРасходовПоТареНУ
//
Процедура СчетУчетаРасходовПоТареНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетУчетаРасходовПоТареНУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаРасходовПоТареБУ
//
Процедура СчетУчетаРасходовПоТареБУПриИзменении(Элемент)

	СчетУчетаРасходовПоТареНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаРасходовПоТареБУ));

КонецПроцедуры // СчетУчетаРасходовПоТареБУПриИзменении()

Процедура ГрузополучательПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(АдресДоставки) Тогда
		АдресДоставки = ЗаполнениеДокументов.ПолучитьАдресДоставкиСтрокой(Грузополучатель, ДополнениеКАдресуДоставки);
	КонецЕсли;  
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы АдресДоставки
//
Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	ЗаполнениеДокументов.ВыбратьАдресДоставки(СтандартнаяОбработка, ЭтаФорма, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "Открытие" элемента формы АдресДоставки
Процедура АдресДоставкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗаполнениеДокументов.РедактированиеАдресаДоставки(АдресДоставки, Элемент, ЭтотОбъект);
КонецПроцедуры

// Процедура - обработчик события "Обработка выбора" элемента формы АдресДоставки
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(ВыбранноеЗначение);
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента формы АдресДоставки
  Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	АдресДоставки = "";
	ДополнениеКАдресуДоставки = "";
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если ЭлементыФормы.Товары.Колонки.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если ЭлементыФормы.Товары.Колонки.СтранаПроисхождения.Видимость Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;
	
    РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ПриИзмененииНоменклатурыТоваров (СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
	
	// Рассчитываем реквизиты табличной части.
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Товары");
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
//
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	ЭлементыФормы.Товары.ТекущиеДанные.СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));
	
КонецПроцедуры // ТоварыСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетПередачиБУ
//
Процедура ТоварыСчетПередачиБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ТоварыСчетПередачиБУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетПередачиБУ
//
Процедура ТоварыСчетПередачиБУПриИзменении(Элемент)
	
	ЭлементыФормы.Товары.ТекущиеДанные.СчетПередачиНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));
	
КонецПроцедуры // ТоварыСчетПередачиБУПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиОтпуск(СтрокаТабличнойЧасти, ЭтотОбъект, , мВалютаРегламентированногоУчета);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
//
Процедура ВозвратнаяТараСчетУчетаБУПриИзменении(Элемент)

	ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные.СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));

КонецПроцедуры // ВозвратнаяТараСчетПередачиБУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ВозвратнаяТара.Колонки.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета учета тары
//
Процедура СчетУчетаРасчетовПоТареОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СчетУчетаРасчетовПоТареОбработкаВыбора()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

Процедура СтатьяПрочихДоходовРасходовПоТареПриИзменении(Элемент)
    
    Если Элемент = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	СчетУчетаДоходовПоТареНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ,ВидЗатратНУ", СчетУчетаДоходовПоТареБУ,СтатьяПрочихДоходовРасходовПоТаре.ВидПрочихДоходовИРасходов));
	
	Если Не ЗначениеЗаполнено(СчетУчетаДоходовПоТареНУ) Тогда
		СчетУчетаДоходовПоТареНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаДоходовПоТареБУ));
	КонецЕсли;
	
	
	СчетУчетаРасходовПоТареНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ,ВидЗатратНУ", СчетУчетаРасходовПоТареБУ,СтатьяПрочихДоходовРасходовПоТаре.ВидПрочихДоходовИРасходов));
	
	Если Не ЗначениеЗаполнено(СчетУчетаРасходовПоТареНУ) Тогда
		СчетУчетаРасходовПоТареНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаРасходовПоТареБУ));
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мИдетРасчетСуммовойСкидки  = Ложь;

мКолонкиТовары             = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара     = ЭлементыФормы.ВозвратнаяТара.Колонки;

мТерминалы = ПолучитьСерверТО().ПолучитьСписокУстройств(
                                 Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных,
                                 Справочники.КассыККМ.ПустаяСсылка());