Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные.Справочники.РасходыБудущихПериодов, ЭлементыФормы.СправочникСписок, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.СправочникСписок.Колонки.Код);
КонецПроцедуры

Процедура УстановитьДоступностьСубконтоБУ()
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	 
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Счет = ЭлементыФормы.СправочникСписок.ТекущиеДанные.СчетБУ;
	
	
	КоличествоСубконто = Счет.ВидыСубконто.Количество();
	
	Для Ном = 1 по 3 Цикл

		Если (Ном <= КоличествоСубконто) и (ЗначениеЗаполнено(Счет)) Тогда
			ЭлементыФормы.СправочникСписок.Колонки["Субконто"+Ном].Доступность = Истина;
			
		Иначе
			ЭлементыФормы.СправочникСписок.Колонки["Субконто"+Ном].Доступность = Ложь;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // УстановитьВидимостьСубконтоБУ()

Процедура УстановитьДоступностьСубконтоНУ()
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.СправочникСписок.ТекущиеДанные.ЭтоГруппа Тогда
		Возврат;
	КонецЕсли;
	
	Счет = ЭлементыФормы.СправочникСписок.ТекущиеДанные.СчетНУ;

	КоличествоСубконто = Счет.ВидыСубконто.Количество();
	
	Для Ном = 1 по 3 Цикл

		Если (Ном <= КоличествоСубконто) и (ЗначениеЗаполнено(Счет)) Тогда
			ЭлементыФормы.СправочникСписок.Колонки["СубконтоНУ"+Ном].Доступность = Истина;
			
		Иначе
			ЭлементыФормы.СправочникСписок.Колонки["СубконтоНУ"+Ном].Доступность = Ложь;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // УстановитьВидимостьСубконтоНУ()

// Процедура установки вида актива по счету списания РБП
//
Процедура УстановитьВидАктива(СчетСписания)
	
	СтрокаТЧ = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ВидАктива) Тогда
		СтрокаТЧ.ВидАктива = Справочники.РасходыБудущихПериодов.ОпределитьВидАктиваРБП(СчетСписания);
	КонецЕсли;
	
КонецПроцедуры

Процедура СправочникСписокПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьСубконтоБУ();
	УстановитьДоступностьСубконтоНУ();
	
КонецПроцедуры // СправочникСписокПриАктивизацииСтроки

Процедура СправочникСписокСчетБУПриИзменении(Элемент)
	
	УстановитьДоступностьСубконтоБУ();

	СтрокаТЧ = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	КоличествоСубконто = СтрокаТЧ.СчетБУ.ВидыСубконто.Количество();
	
	Если КоличествоСубконто > 0 Тогда
		СтрокаТЧ.СубконтоБУ1 = Новый(СтрокаТЧ.СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
		
	Иначе
		СтрокаТЧ.СубконтоБУ1 = Неопределено;
	КонецЕсли;

	Если КоличествоСубконто > 1 Тогда
		СтрокаТЧ.СубконтоБУ2 = Новый(СтрокаТЧ.СчетБУ.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
		
	Иначе
		СтрокаТЧ.СубконтоБУ2 = Неопределено;
	КонецЕсли;

	Если КоличествоСубконто > 2 Тогда
		СтрокаТЧ.СубконтоБУ3 = Новый(СтрокаТЧ.СчетБУ.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
		
	Иначе
		СтрокаТЧ.СубконтоБУ3 = Неопределено;
	КонецЕсли;
	
	СтрокаТЧ.СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаТЧ.СчетБУ));
	СправочникСписокСчетНУПриИзменении(Элемент);
	УстановитьВидАктива(СтрокаТЧ.СчетБУ);

КонецПроцедуры // СправочникСписокСчетБУПриИзменении()

Процедура СправочникСписокСчетНУПриИзменении(Элемент)
	
	УстановитьДоступностьСубконтоНУ();
	
	СтрокаТЧ = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	КоличествоСубконто = СтрокаТЧ.СчетНУ.ВидыСубконто.Количество();
	
	Если КоличествоСубконто > 0 Тогда
		СтрокаТЧ.СубконтоНУ1 = Новый(СтрокаТЧ.СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
		
	Иначе
		СтрокаТЧ.СубконтоНУ1 = Неопределено;
	КонецЕсли;

	Если КоличествоСубконто > 1 Тогда
		СтрокаТЧ.СубконтоНУ2 = Новый(СтрокаТЧ.СчетНУ.ВидыСубконто[1].ВидСубконто.ТипЗначения.Типы()[0]);
		
	Иначе
		СтрокаТЧ.СубконтоНУ2 = Неопределено;
	КонецЕсли;

	Если КоличествоСубконто > 2 Тогда
		СтрокаТЧ.СубконтоНУ3 = Новый(СтрокаТЧ.СчетНУ.ВидыСубконто[2].ВидСубконто.ТипЗначения.Типы()[0]);
		
	Иначе
		СтрокаТЧ.СубконтоНУ3 = Неопределено;
	КонецЕсли;
	
КонецПроцедуры //СправочникСписокСчетНУПриИзменении


Процедура СправочникСписокСубконтоБУ1ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетБУ, СтрокаТЧ.СчетНУ, 1, СтрокаТЧ.СубконтоБУ1, СтрокаТЧ.СубконтоНУ1);

КонецПроцедуры

Процедура СправочникСписокСубконтоБУ2ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетБУ, СтрокаТЧ.СчетНУ, 2, СтрокаТЧ.СубконтоБУ2, СтрокаТЧ.СубконтоНУ2);

КонецПроцедуры

Процедура СправочникСписокСубконтоБУ3ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетБУ, СтрокаТЧ.СчетНУ, 3, СтрокаТЧ.СубконтоБУ3, СтрокаТЧ.СубконтоНУ3);

КонецПроцедуры

Процедура СправочникСписокСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" списка справочника.
// Формирует данные в колонке "ХарактерЗатрат"
//
Процедура СправочникСписокПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.ЭтоГруппа Тогда
		ОформлениеСтроки.Ячейки.ВидРБП.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ДатаНачалаСписания.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ДатаОкончанияСписания.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.Сумма.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.Продукция.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СерияПродукции.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.Подразделение.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ОбъектСтроительства.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СпособСтроительства.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СтатьяЗатрат.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СчетБУ.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СчетНУ.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.Субконто1.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.Субконто2.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.Субконто3.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СубконтоНУ1.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СубконтоНУ2.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.СубконтоНУ3.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ВидСубконто1.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ВидСубконто2.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ВидСубконто3.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ВидСубконтоНУ1.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ВидСубконтоНУ2.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ВидСубконтоНУ3.Видимость = Ложь;
		Возврат;
	КонецЕсли;
		
	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	Если ЭлементыФормы.СправочникСписок.Колонки.ХарактерЗатрат.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.Текст = ХарактерЗатрат;
	КонецЕсли;
	
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(
		ХарактерЗатрат,
		ДанныеСтроки.Продукция,
		ДанныеСтроки.СчетБУ, ДанныеСтроки.СчетНУ, ОформлениеСтроки, Истина, Истина, Истина);
	
КонецПроцедуры // СправочникСписокПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля СтатьяЗатрат списка справочника.
//
Процедура СправочникСписокСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.СправочникСписок.ТекущиеДанные;
	СчетаУчета = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(СтрокаТабличнойЧасти.ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат);
	СтрокаТабличнойЧасти.СчетБУ = СчетаУчета.СчетУчетаБУ;
	СтрокаТабличнойЧасти.СчетНУ = СчетаУчета.СчетУчетаНУ;
	
КонецПроцедуры // СправочникСписокСтатьяЗатратПриИзменении()

// Для статей РПБ по договорам добровольного страхования предлагается автоматическая
// установка способа признания расходов по календарным дням соответственно статье 272 гл.25 НК
Процедура ПроверкаДобровольногоСтрахования(УказанныйСпособПризнанияРасходов, УказанныйВидРБП)
	
	Если УказанныйВидРБП = Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни Или
		УказанныйВидРБП = Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов Или
		УказанныйВидРБП = Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности Тогда
		Если УказанныйСпособПризнанияРасходов <> Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда
			Если Вопрос("Расходы по добровольному страхованию следует списывать
	             	|пропорционально количеству календарных дней действия договора
				 	|Изменить способ признания расходов?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
				
				ТекущийЭлемент.ТекущиеДанные.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Для статей РПБ по договорам добровольного страхования предлагается автоматическая
// установка способа признания расходов по календарным дням соответственно статье 272 гл.25 НК
Процедура СправочникСписокВидРБППриИзменении(Элемент)
	
	ПроверкаДобровольногоСтрахования(ТекущийЭлемент.ТекущиеДанные.СпособПризнанияРасходов, Элемент.Значение);

КонецПроцедуры

// Для статей РПБ по договорам добровольного страхования предлагается автоматическая
// установка способа признания расходов по календарным дням соответственно статье 272 гл.25 НК
Процедура СправочникСписокСпособПризнанияРасходовПриИзменении(Элемент)
	
	ПроверкаДобровольногоСтрахования(Элемент.Значение, ТекущийЭлемент.ТекущиеДанные.ВидРБП);

КонецПроцедуры

// Для статей РПБ по договорам добровольного страхования предлагается автоматическая
// установка способа признания расходов по календарным дням соответственно статье 272 гл.25 НК

Процедура СправочникСписокСпособПризнанияРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
		УказанныйСпособПризнанияРасходов = ВыбранноеЗначение; 
		УказанныйВидРБП = ТекущийЭлемент.ТекущиеДанные.ВидРБП;
		Если УказанныйВидРБП = Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни Или
			УказанныйВидРБП = Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов Или
			УказанныйВидРБП = Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности Тогда
			Если УказанныйСпособПризнанияРасходов <> Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда
				Если Вопрос("Расходы по добровольному страхованию следует списывать
					|пропорционально количеству календарных дней действия договора.
					|Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет) <> КодВозвратаДиалога.Да Тогда
					
					СтандартнаяОбработка = Ложь;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

КонецПроцедуры


Процедура СправочникСписокВидРБПОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
		УказанныйСпособПризнанияРасходов = ТекущийЭлемент.ТекущиеДанные.СпособПризнанияРасходов; 
		УказанныйВидРБП = ВыбранноеЗначение;
		
		Если УказанныйВидРБП = Перечисления.ВидыРБП.ДолгосрочноеСтрахованиеЖизни Или
			УказанныйВидРБП = Перечисления.ВидыРБП.СтрахованиеНаОплатуМедицинскихРасходов Или
			УказанныйВидРБП = Перечисления.ВидыРБП.СтрахованиеНаСлучайСмертиИУтратыРаботоспособности Тогда
			Если УказанныйСпособПризнанияРасходов <> Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням Тогда
				Если Вопрос("Расходы по добровольному страхованию следует списывать
					|пропорционально количеству календарных дней действия договора.
					|Изменить способ признания расходов?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да) <> КодВозвратаДиалога.Нет Тогда
					
					ТекущийЭлемент.ТекущиеДанные.СпособПризнанияРасходов = Перечисления.СпособыПризнанияРасходов.ПоКалендарнымДням;
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПриОткрытии Формы.
//
Процедура ПриОткрытии()

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные.Справочники.РасходыБудущихПериодов, ЭлементыФормы.СправочникСписок, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.СправочникСписок.Колонки.Код);
КонецПроцедуры //ПриОткрытии