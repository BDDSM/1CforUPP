Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мКолонкиТовары, мКолонкиЗанятостьРабочихЦентров, мКолонкиПотребностиПроизводства;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДанныеЗаказов,ЭлементыФормы.КоманднаяПанельЗаказов);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПланыПроизводства,ЭлементыФормы.КоманднаяПанельЗаказовПланов);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДоступныеСклады,ЭлементыФормы.КоманднаяПанельДоступныеСклады);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ЗанятостьРабочихЦентров,ЭлементыФормы.КоманднаяПанельЗанятостьРабочихЦентров);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПотребностиПроизводства,ЭлементыФормы.КоманднаяПанельПотребностиПроизводства);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Истина;
	ЕстьСерия = Ложь;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	ИмяТабличнойЧасти = "Товары";

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ВременнаяДатаРасчетов);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"        , Валюта);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"        , Истина);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Ложь);
	СтруктураПараметровПодбора.Вставить("Заголовок"              , "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем Номенклатура, ЕдиницаИзмерения, Количество, Характеристика;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура", Номенклатура);
	ЗначениеВыбора.Свойство("Характеристика", Характеристика);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество",       Количество);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	
	Если Номенклатура.Услуга Тогда
		
		СтруктураОтбора = Новый Структура("Номенклатура", Номенклатура);
		
	Иначе
		
		СтруктураОтбора = Новый Структура("ЕдиницаИзмерения, ХарактеристикаНоменклатуры", ЕдиницаИзмерения, Характеристика);
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.Количество = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	Иначе
		
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

	КонецЕсли;
	
	ЭлементыФормы.Товары.ТекущаяСтрока = СтрокаТабличнойЧасти;
	
	Попытка // На случай, если колонка не видима, отключена программно
		
		ЭлементыФормы.Товары.ТекущаяКолонка = мКолонкиТовары["Количество"];
		
	Исключение
		
	КонецПопытки;

КонецПроцедуры // ОбработкаПодбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если ЭтоНовый() Тогда

		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		МоментЗапасов = ТекущаяДата();
		АвтоСвертка = Истина;
		РазузловатьПриПолучении = Истина;

	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить видимость колонки "ХарактеристикаНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиЗанятостьРабочихЦентров);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиПотребностиПроизводства);
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект,ПланыПроизводства.Проект,ДанныеЗаказов.Проект,Товары.Проект,ЗанятостьРабочихЦентров.Проект,ПотребностиПроизводства.Проект");
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	//Считываем данные из табличной части ИсходныеДанныеДляПланирования в дерево значений ДеревоПланов
	ПрочитатьДеревоПланов(ДеревоПланов);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ПанельИсточников.Страницы Цикл

		Если СтраницаПанели.Имя = "ПланыПроизводства" Тогда
			СтраницаПанели.Заголовок = "Производство по планам (" + ДокументОбъект.ДанныеПлановПроизводства.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Заказы" Тогда
			СтраницаПанели.Заголовок = "Производство по заказам (" + ДокументОбъект.ДанныеЗаказов.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Индивидуальные выпуски (" + ДокументОбъект.Товары.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "ЗанятостьРабочихЦентров" Тогда
			СтраницаПанели.Заголовок = "Занятость рабочих центров (" + ДокументОбъект.ЗанятостьРабочихЦентров.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "ПотребностиПроизводства" Тогда
			СтраницаПанели.Заголовок = "Потребности производства (" + ДокументОбъект.ПотребностиПроизводства.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Сохраняем дерево планов в табличную часть ИсходныеДанныеДляПланирования
	СохранитьДеревоПланов(ДеревоПланов);
	
КонецПроцедуры // ПередЗаписью

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)
	
	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ДействияФормыВыполнитьПланирование(Кнопка)
	
	Если ЭтоНовый() или Модифицированность() Тогда
		
		Вопрос = "Перед заполнением необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			
			ЗаписатьВФорме();
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗанятостьРабочихЦентров.Количество() > 0 ИЛИ ПотребностиПроизводства.Количество() > 0 Тогда
		
		Ответ = Вопрос("Табличные части ""Занятость рабочих центров"" и ""Потребности производства"" уже содержат строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
					   
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
						   
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		ЗанятостьРабочихЦентров.Очистить();
		ПотребностиПроизводства.Очистить();
		
	КонецЕсли;
	
	мФормаПрогрессора = ПолучитьОбщуюФорму("ХодВыполненияОбработкиДанных");
	
	// Копируем реквизит формы ДеревоПланов в переменную мДеревоПланов модуля объекта
	мДеревоПланов = ДеревоПланов.Скопировать();

	ВыполнитьПланирование();
	
	Если мФормаПрогрессораОткрыта Тогда
		
		мФормаПрогрессора.Закрыть();
		
	КонецЕсли;

КонецПроцедуры // ДействияФормыВыполнитьПланирование()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПЛАНЫ

// Процедура - обработчик события "ПриИзменении" поля ввода сценария
// в строке табличной части "ПланыПроизводства".
//
Процедура ПланыПроизводстваСценарийПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ПланыПроизводства.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Сценарий.Периодичность) Тогда
		ЭтаФорма.ТекущийЭлемент.ТекущаяКолонка = ЭлементыФормы.ПланыПроизводства.Колонки.Сценарий;
	Иначе
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаНач) Тогда
			ТекДанные.ДатаНач = ТекущаяДата();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекДанные.ДатаКон) Тогда
			ТекДанные.ДатаКон = ТекущаяДата();
		КонецЕсли;
		УправлениеПланированием.ВыровнятьПериод(ТекДанные.ДатаНач, ТекДанные.ДатаКон, ТекДанные.Сценарий.Периодичность);
	КонецЕсли; 

КонецПроцедуры // ПланыПроизводстваСценарийПриИзменении()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "ПланыПроизводства".
//
Процедура ПланыПроизводстваПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВариантРаспределенияВыпусков) Тогда
			Элемент.ТекущиеДанные.ВариантРаспределенияВыпусков = Перечисления.ВариантыРаспределенияПоПериоду.ТочноКСроку;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПланыПроизводстваПриНачалеРедактирования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ДанныеЗаказов

// Процедура - обработчик события "ПриИзменении" поля ввода заказ
// в строке табличной части "ДанныеЗаказов".
//
Процедура ЗаказыЗаказПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДанныеЗаказов.ТекущиеДанные;
	
	Если ТипЗнч(ТекущиеДанные.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
		
		ТекущиеДанные.ДатаЗапуска = ТекущиеДанные.Заказ.Дата;
		ТекущиеДанные.ДатаВыпуска = ТекущиеДанные.Заказ.ДатаОтгрузки - 24 * 60 * 60;
		
	ИначеЕсли ТипЗнч(ТекущиеДанные.Заказ) = Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		
		ТекущиеДанные.ДатаЗапуска = ТекущиеДанные.Заказ.ДатаЗапуска;
		ТекущиеДанные.ДатаВыпуска = ТекущиеДанные.Заказ.ДатаИсполнения;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаказыЗаказПриИзменении(Элемент)

Процедура ЗаказыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "ДанныеЗаказов");
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "Заказы".
//
Процедура ДанныеЗаказовПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВариантРаспределенияВыпусков) Тогда
			Элемент.ТекущиеДанные.ВариантРаспределенияВыпусков = Перечисления.ВариантыРаспределенияПоПериоду.ТочноКСроку;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДанныеЗаказовПриНачалеРедактирования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ВариантРаспределенияВыпусков) Тогда
			
			Элемент.ТекущиеДанные.ВариантРаспределенияВыпусков = Перечисления.ВариантыРаспределенияПоПериоду.ТочноКСроку;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "НачалоВыбора" поля ввода спецификации
// в строке табличной части "Товары".
//
Процедура ТоварыСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ТоварыСпецификацияНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ДОСТУПНЫЕ СКЛАДЫ

// Процедура - обработчик события "НачалоВыбора" поля ввода клада
// в строке табличной части "ДоступныеСклады".
//
Процедура ДоступныеСкладыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Склад = ЭлементыФормы.ДоступныеСклады.ТекущиеДанные.Склад;
	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // ДоступныеСкладыСкладНачалоВыбора()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ПараметрыВыпуска" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыПараметрыВыпуска(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мТекущаяСтрокаПродукцияПараметры = СтрокаТабличнойЧасти;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	мФормаВводПараметровВыпуска = Обработки.ВводПараметровВыпускаПродукции.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаВводПараметровВыпуска.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаВводПараметровВыпуска.Открыть();
	
КонецПроцедуры // Процедура КоманднаяПанельТоварыПараметрыВыпуска()

Процедура ПотребностиПроизводстваЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "ПотребностиПроизводства");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ДЕДЕВО ПЛАНОВ

Процедура КоманднаяПанельИсходныеДанныеДляПланированияКнопкаСвернутьДерево(Кнопка)
	
	// Вызываем свертку всех строк дерева планов
	СвернутьДеревоВЭлементеФормы(ДеревоПланов, ЭлементыФормы.ДеревоПланов);
	
КонецПроцедуры // КоманднаяПанельИсходныеДанныеДляПланированияКнопкаСвернутьДерево

Процедура КоманднаяПанельИсходныеДанныеДляПланированияКнопкаРазвернутьДерево(Кнопка)
	
	// Вызываем процедуру раскрытия всех строк дерева
	РазвернутьДеревоВЭлементеФормы(ДеревоПланов, ЭлементыФормы.ДеревоПланов);
	
КонецПроцедуры // КоманднаяПанельИсходныеДанныеДляПланированияКнопкаРазвернутьДерево

// Процедура чтения данных для планирования из табличных частей Товары, ДанныеЗаказов и ДанныеПлановПроизводства 
// в дерево значений ДеревоПланов
//
Процедура КоманднаяПанельИсходныеДанныеДляПланированияКнопкаПолучитьДанные(Кнопка)
	
	Если ЭтоНовый() ИЛИ Модифицированность() Тогда
		
		Вопрос = "Перед получением данных необходимо записать документ. Записать?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			
			ЗаписатьВФорме();
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДеревоПланов.Строки.Количество() > 0 Тогда
		
		Если Вопрос("Табличная часть будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			
			ДеревоПланов.Строки.Очистить();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ДеревоПланов.Строки.Количество() = 0 Тогда
		
		// Считываем данные трех табличных частей в одну таблицу значений
		ТаблицаВыпусков = ПолучитьТаблицуВыпусков();
		
		Для каждого СтрокаТаблицы Из ТаблицаВыпусков Цикл
			
			Если РазузловатьПриПолучении Тогда
				
				// Если необходимо разузлование - разузловываем номенклатуру и добавляем в ДеревоПланов весь результат разузлования
				ТаблицаРазузлования = ПолучитьТаблицуРазузлования(СтрокаТаблицы);
				
				Спецификация = Неопределено;
				
				Для каждого СтрокаТаблицыРазузлования Из ТаблицаРазузлования Цикл
					
					НоваяСтрока = ДеревоПланов.Строки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРазузлования);
					НоваяСтрока.Заказ = СтрокаТаблицы.Заказ;
					НоваяСтрока.Проект = СтрокаТаблицы.Проект;
					НоваяСтрока.ДатаЗапуска = СтрокаТаблицы.ДатаЗапуска;
					НоваяСтрока.ДатаВыпуска = СтрокаТаблицы.ДатаВыпуска;
					НоваяСтрока.ВариантРаспределенияВыпусков = СтрокаТаблицы.ВариантРаспределенияВыпусков;
					НоваяСтрока.ВРамкахПлана = СтрокаТаблицы.ВРамкахПлана;
					НоваяСтрока.ПоДаннымПланов = СтрокаТаблицы.ПоДаннымПланов;
					НоваяСтрока.Количество = СтрокаТаблицыРазузлования.Количество 
						* СтрокаТаблицыРазузлования.Коэффициент
						/ СтрокаТаблицыРазузлования.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
					НоваяСтрока.КоличествоПоСпецификации = 0;
					
				КонецЦикла;
				
			Иначе
				
				НоваяСтрока = ДеревоПланов.Строки.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицы);
				НоваяСтрока.ВидВоспроизводства = СтрокаТаблицы.Номенклатура.ВидВоспроизводства;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если АвтоСвертка Тогда
		
		// При необходимости выполняем свертку дерева сразу при получении данных
		СвернутьДеревоПоКомплектующим(ДеревоПланов);
		
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельИсходныеДанныеДляПланированияКнопкаПолучитьДанные

Процедура КоманднаяПанельИсходныеДанныеДляПланированияКнопкаСвернуть(Кнопка)
	
	// Вызываем свертку дерева по комплектующим
	СвернутьДеревоПоКомплектующим(ДеревоПланов);
	
КонецПроцедуры // КоманднаяПанельИсходныеДанныеДляПланированияКнопкаСвернуть

Процедура ДеревоПлановПриПолученииДанных(Элемент, ОформленияСтрок)
	
	// Изменяем цвет строки табличного поля в зависимости от вида воспроизводства номенклатуры
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		Если ОформлениеСтроки.ДанныеСтроки.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Закупка Тогда
			
			ОформлениеСтроки.ЦветФона = ЭлементыФормы.ДеревоПланов.ЦветФонаЧередованияСтрок;
			
		Иначе
			
			ОформлениеСтроки.ЦветФона = ЭлементыФормы.ДеревоПланов.ЦветФона;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДеревоПлановПриПолученииДанных

// Процедура сворачивает все строки дерева в элементе формы
//
// Параметры
//  Дерево  – <ДеревоЗначений> - сворачиваемое дерево значений
//  ЭлементФормы  – <ТабличноеПоле> - элемент формы, в котором расположено дерево значений
//
Процедура СвернутьДеревоВЭлементеФормы(Дерево, ЭлементФормы) Экспорт
	
	Если НЕ ДеревоУжеСвернуто(Дерево) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого Строка Из Дерево.Строки Цикл
		
		ЭлементФормы.Свернуть(Строка);
		
	КонецЦикла;
	
КонецПроцедуры // СвернутьДеревоВЭлементеФормы

// Процедура раскрывает все строки дерева в элементе формы
//
// Параметры
//  Дерево  – <ДеревоЗначений> - раскрываемое дерево значений
//  ЭлементФормы  – <ТабличноеПоле> - элемент формы, в котором расположено дерево значений
//
Процедура РазвернутьДеревоВЭлементеФормы(Дерево, ЭлементФормы) Экспорт
	
	Если НЕ ДеревоУжеСвернуто(Дерево) Тогда
		
		Возврат;
		
	КонецЕсли;
	
	Для каждого Строка Из Дерево.Строки Цикл
		
		ЭлементФормы.Развернуть(Строка, Истина);
		
	КонецЦикла;
	
КонецПроцедуры // РазвернутьДеревоВЭлементеФормы

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;
мКолонкиЗанятостьРабочихЦентров = ЭлементыФормы.ЗанятостьРабочихЦентров.Колонки;
мКолонкиПотребностиПроизводства = ЭлементыФормы.ПотребностиПроизводства.Колонки;