////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Оптимизация работы события ПриПолученииДанных
Перем мКешОстатковОтпусков;
Перем мУдаляемыйСотрудник;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Работники,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура получает информацию об отпусках всех сотрудников или указанного сотрудника
Процедура ОбновитьКешОстатковОтпусков(Физлицо = Неопределено)
	
	Если (ЭлементыФормы.Работники.Колонки.Найти("Примечание") = Неопределено Или Не ЭлементыФормы.Работники.Колонки.Примечание.Видимость) Тогда
		Возврат;
	КонецЕсли;
	
	// Подготовить таблицу периодов для расчета остатков
	ТаблицаПериодов = Новый ТаблицаЗначений;
	ТаблицаПериодов.Колонки.Добавить("НомерСтроки",		Новый ОписаниеТипов("Число"));
	ТаблицаПериодов.Колонки.Добавить("Сотрудник",		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	ТаблицаПериодов.Колонки.Добавить("ДатаНачала",		Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("ДатаОкончания",	Новый ОписаниеТипов("Дата"));
	ТаблицаПериодов.Колонки.Добавить("План",			Новый ОписаниеТипов("Булево"));
	
	Если мКешОстатковОтпусков = Неопределено Тогда
		мКешОстатковОтпусков = Новый ТаблицаЗначений;
		мКешОстатковОтпусков.Колонки.Добавить("Физлицо",		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		мКешОстатковОтпусков.Колонки.Добавить("ДатаНачала",		Новый ОписаниеТипов("Дата"));
		мКешОстатковОтпусков.Колонки.Добавить("ДатаОкончания",	Новый ОписаниеТипов("Дата"));
		мКешОстатковОтпусков.Колонки.Добавить("Примечание",		Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	// Таблицу периодов надо заполнить всеми сотрудниками, которые попадают в видимую область
	// Это необходимо для того, что бы посчитать отпуск с учетом строк, указанных в самом документе
	МассивСотрудниковДляОтбора = Новый Массив;
	
	Если Физлицо = Неопределено Тогда
		СписокСтрокДокумента = Работники;
	Иначе
		СписокСтрокДокумента = Работники.НайтиСтроки(Новый Структура("Физлицо", Физлицо));
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из СписокСтрокДокумента Цикл
		Если МассивСотрудниковДляОтбора.Найти(СтрокаТабличнойЧасти.Сотрудник) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если СтрокаТабличнойЧасти.Сотрудник.Пустая()
			ИЛИ Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачала)
			ИЛИ Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончания) Тогда
			Продолжить;
		КонецЕсли;
		
		МассивСотрудниковДляОтбора.Добавить(СтрокаТабличнойЧасти.Сотрудник);
	КонецЦикла;
	
	Если МассивСотрудниковДляОтбора.Количество() > 0 Тогда
		Для Каждого СтрокаТабличнойЧасти Из СписокСтрокДокумента Цикл
			Если МассивСотрудниковДляОтбора.Найти(СтрокаТабличнойЧасти.Сотрудник) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			Строка = ТаблицаПериодов.Добавить();
			ЗаполнитьЗначенияСвойств(Строка, СтрокаТабличнойЧасти);
			Строка.Сотрудник	= СтрокаТабличнойЧасти.Физлицо;
			Строка.План			= Истина;
		КонецЦикла;
	КонецЕсли;
	
	// Получить остатки и подготовить примечание
	МассивПримечаний	= Новый Соответствие;
	Если ТаблицаПериодов.Количество() > 0 Тогда
		Выборка = ПроцедурыУправленияПерсоналомДополнительный.ПодготовитьДанныеПоУправленческимОтпускам(ТаблицаПериодов, Истина, Ссылка, Истина);
		Пока Выборка.Следующий() Цикл
			Примечание = ПроцедурыУправленияПерсоналомДополнительный.ВернутьОписаниеОтпуска(Выборка);
			
			МассивПримечаний.Вставить(Выборка.НомерСтроки, Примечание);
		КонецЦикла;
	КонецЕсли;
	
	Если Физлицо = Неопределено Тогда
		мКешОстатковОтпусков.Очистить();
		
	Иначе
		// Если получаем данные по сотруднику, то сначала удалим данные по всем отпускам сотрудника
		СтрокиКУдалению = мКешОстатковОтпусков.НайтиСтроки(Новый Структура("Физлицо", Физлицо));
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			мКешОстатковОтпусков.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
	КонецЕсли;
		
	Для Каждого СтрокаТабличнойЧасти Из СписокСтрокДокумента Цикл
		Примечание = МассивПримечаний.Получить(СтрокаТабличнойЧасти.НомерСтроки);
		
		Если Примечание = Неопределено Тогда
			Если СтрокаТабличнойЧасти.Сотрудник.Пустая() Тогда
				Примечание = "Не указан сотрудник";
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачала) ИЛИ Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончания) Тогда
				Примечание = "Не заполнен период отпуска";
			Иначе
				Примечание = "Не принят на работу";
			КонецЕсли;
		КонецЕсли;
		
		Строка = мКешОстатковОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаТабличнойЧасти);
		Строка.Физлицо		= СтрокаТабличнойЧасти.Физлицо;
		Строка.Примечание	= Примечание;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);

	КонецЕсли;
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.ПодменюДействия,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ДатаНачала");

	// Установить ограничение - изменять видимость колонок для табличной части 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Работники.Колонки, СтруктураКолонок);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Работники.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));
	
	// Получим информацию обо всех введенных в документе отпусках
	ОбновитьКешОстатковОтпусков();
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Работники;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.ПодменюДействия, ЭлементыФормы.Номер);
	
	Оповестить("ОбновитьПлановыйОтпуск");
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ТекстСообщения = "";
	ВажностьСообщения = "";
	Если Работники.Количество() = 0 Тогда
		ВажностьСообщения	= "СообщениеОПроблемах";
		ТекстСообщения		= "Документ не заполнен";
	ИначеЕсли СостояниеУтвержденияДокумента = Перечисления.СостоянияУтвержденияДокумента.УтвержденПолностьюПроведен Тогда
		ВажностьСообщения	= "Информация";
		ТекстСообщения		= "Документ утвержден полностью";
	ИначеЕсли СостояниеУтвержденияДокумента = Перечисления.СостоянияУтвержденияДокумента.УтвержденЧастичноПроведен Тогда
		ВажностьСообщения	= "ВажнаяИнформация";
		ТекстСообщения		= "Документ утвержден частично";
	ИначеЕсли СостояниеУтвержденияДокумента = Перечисления.СостоянияУтвержденияДокумента.НеУтвержденПроведен
		  ИЛИ СостояниеУтвержденияДокумента = Перечисления.СостоянияУтвержденияДокумента.НеУтвержденНеПроведен Тогда
		ВажностьСообщения	= "СообщениеОПроблемах";
		ТекстСообщения		= "Документ не утвержден";
	ИначеЕсли СостояниеУтвержденияДокумента = Перечисления.СостоянияУтвержденияДокумента.УтвержденПолностьюНеПроведен Тогда
		ВажностьСообщения	= "ВажнаяИнформация";
		ТекстСообщения		= "Документ утвержден полностью, все отпуска будут показаны в графике как неутвержденные";
	ИначеЕсли СостояниеУтвержденияДокумента = Перечисления.СостоянияУтвержденияДокумента.УтвержденЧастичноНеПроведен Тогда
		ВажностьСообщения	= "ВажнаяИнформация";
		ТекстСообщения		= "Документ утвержден частично, все отпуска будут показаны в графике как неутвержденные";
	КонецЕсли;
	
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ТекстСообщения, ВажностьСообщения);
	
КонецПроцедуры

Процедура ПриАктивизацииСтроки()
	
	ДанныеСтроки = ЭлементыФормы.Работники.ТекущиеДанные;
	ФИО = "";
	
	Если ДанныеСтроки <> Неопределено Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Физлицо", ДанныеСтроки.Физлицо);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.Пол
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &Физлицо";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Наименование);
		
		ПозицияПервогоПробела = Найти(ФИО+" "," ");
		Фамилия  = Лев(ФИО,ПозицияПервогоПробела-1);
		Инициалы = Сред(ФИО,ПозицияПервогоПробела+1);
		
		РезультатСклонения = "";
		Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"),Фамилия, 4, Выборка.Пол, РезультатСклонения) Тогда
			ФИО = " " + РезультатСклонения + " " + Инициалы;
		КонецЕсли;
	КонецЕсли;
	
	Текст = "Отсутствие на рабочем месте" + ФИО;
	
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВводНаОсновании.Кнопки.ОтсутствиеНаРабочемМесте.Текст							= Текст;
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюДействия.Кнопки.ПодменюВводНаОсновании.Кнопки.ОтсутствиеНаРабочемМесте.Текст	= Текст;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ГрафикОтпусковОрганизаций" меню "ВводНаОсновании"
//
Процедура ДействияФормыГрафикОтпусковОрганизацийВводНаОсновании(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналомДополнительный.ВводРегламентированногоКадровогоДокументаНаОсновании(Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыОтсутствиеНаРабочемМесте(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.Работники.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено ИЛИ ДанныеСтроки.СостояниеУтверждения <> Перечисления.СостоянияУтверждения.Утвержден Тогда
		Предупреждение("Зарегистрировать фактический отпуск можно только для запланированного утвержденного отпуска!");
		Возврат;
	КонецЕсли;
	
	Форма = Документы.ОтсутствияНаРабочемМесте.ПолучитьФормуНовогоДокумента();
	Форма.Физлицо			= ДанныеСтроки.Физлицо;
	Форма.ДатаНачала		= ДанныеСтроки.ДатаНачала;
	Форма.ДатаОкончания		= ДанныеСтроки.ДатаОкончания;
	Форма.ПричинаОтсутствия	= Справочники.ПричиныОтсутствияНаРаботе.ЕжегодныйОтпуск;
	
	Форма.Открыть();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.ПодменюДействия, ЭлементыФормы.Номер);
	
КонецПроцедуры


// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры


// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(ЭлементыФормы.Работники, Ссылка, Ложь, Дата);
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииУтвердитьВсе(Кнопка)
	
	Для Каждого Строка Из Работники Цикл
		Строка.СостояниеУтверждения = Перечисления.СостоянияУтверждения.Утвержден;
	КонецЦикла;
	
	Если Проведен Тогда
		СостояниеУтвержденияДокумента = Перечисления.СостоянияУтвержденияДокумента.УтвержденПолностьюПроведен;
	Иначе
		СостояниеУтвержденияДокумента = Перечисления.СостоянияУтвержденияДокумента.УтвержденПолностьюНеПроведен;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура выполняет алгоритм действий при изменении даты документа
//
// Параметры:
//  Элемент - элемент формы, который отображает дату документа
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.ПодменюДействия, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Работники

// Процедура - обработчик события "НачалоВыбора" поля ввода приказа  о приёме работника организации
Процедура РаботникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Работники.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		Строка = Работники.Добавить();
		Строка.Сотрудник			= ВыбранноеЗначение;
		Строка.Физлицо				= ВыбранноеЗначение.Физлицо;
		Строка.СостояниеУтверждения	= Перечисления.СостоянияУтверждения.НеУтвержден;
		ОбновитьКешОстатковОтпусков(ВыбранноеЗначение.Физлицо);
	КонецЕсли;
	
КонецПроцедуры  // ТабличнаяЧастьОбработкаВыбора

// Процедура - обработчик события "ПриПолученииДанных"
Процедура РаботникиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Работники, ОформленияСтрок);
	
	// Выводим примечание по остаткам отпусков
	Если (ЭлементыФормы.Работники.Колонки.Найти("Примечание") = Неопределено Или Не ЭлементыФормы.Работники.Колонки.Примечание.Видимость) Тогда
		мКешОстатковОтпусков = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если мКешОстатковОтпусков = Неопределено Тогда
		ОбновитьКешОстатковОтпусков();
	КонецЕсли;
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		СтрокиОтпуска = мКешОстатковОтпусков.НайтиСтроки(Новый Структура("Физлицо, ДатаНачала, ДатаОкончания", ОформлениеСтроки.ДанныеСтроки.Физлицо, ОформлениеСтроки.ДанныеСтроки.ДатаНачала, ОформлениеСтроки.ДанныеСтроки.ДатаОкончания));
		
		// Должна быть одна строка, но если пользователь введет несколько одинаковых строк, отобразим информацию во всех строках
		Для Каждого СтрокаОтпуска Из СтрокиОтпуска Цикл
			ОформлениеСтроки.Ячейки.Примечание.УстановитьТекст(СтрокаОтпуска.Примечание);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура РаботникиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Не НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.СостояниеУтверждения = Перечисления.СостоянияУтверждения.НеУтвержден;
	
КонецПроцедуры

Процедура РаботникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("СостояниеУтверждения", Перечисления.СостоянияУтверждения.Утвержден);
	УтвержденПолностью		= Работники.НайтиСтроки(СтруктураОтбора).Количество() = Работники.Количество();
	
	СтруктураОтбора.Вставить("СостояниеУтверждения", Перечисления.СостоянияУтверждения.НеУтвержден);
	НеУтвержденПолностью	= Работники.НайтиСтроки(СтруктураОтбора).Количество() = Работники.Количество();
		
	Если Проведен Тогда
		Если УтвержденПолностью Тогда
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.УтвержденПолностьюПроведен;
		ИначеЕсли НеУтвержденПолностью Тогда
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.НеУтвержденПроведен;
		Иначе
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.УтвержденЧастичноПроведен;
		КонецЕсли;
		
	Иначе
		Если УтвержденПолностью Тогда
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.УтвержденПолностьюНеПроведен;
		ИначеЕсли НеУтвержденПолностью Тогда
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.НеУтвержденНеПроведен;
		Иначе
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.УтвержденЧастичноНеПроведен;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаботникиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не Элемент.ТекущиеДанные.Физлицо.Пустая() Тогда
		ОбновитьКешОстатковОтпусков(Элемент.ТекущиеДанные.Физлицо);
	КонецЕсли;
	
КонецПроцедуры

Процедура РаботникиПередУдалением(Элемент, Отказ)
	
	мУдаляемыйСотрудник = Элемент.ТекущиеДанные.Физлицо;
	
КонецПроцедуры

Процедура РаботникиПослеУдаления(Элемент)
	
	Если мУдаляемыйСотрудник <> Неопределено И Не мУдаляемыйСотрудник.Пустая() Тогда
		ОбновитьКешОстатковОтпусков(мУдаляемыйСотрудник);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура;
	СтруктураОтбора.Вставить("СостояниеУтверждения", Перечисления.СостоянияУтверждения.Утвержден);
	УтвержденПолностью		= Работники.НайтиСтроки(СтруктураОтбора).Количество() = Работники.Количество();
	
	СтруктураОтбора.Вставить("СостояниеУтверждения", Перечисления.СостоянияУтверждения.НеУтвержден);
	НеУтвержденПолностью	= Работники.НайтиСтроки(СтруктураОтбора).Количество() = Работники.Количество();
		
	Если Проведен Тогда
		Если УтвержденПолностью Тогда
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.УтвержденПолностьюПроведен;
		ИначеЕсли НеУтвержденПолностью Тогда
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.НеУтвержденПроведен;
		Иначе
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.УтвержденЧастичноПроведен;
		КонецЕсли;
		
	Иначе
		Если УтвержденПолностью Тогда
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.УтвержденПолностьюНеПроведен;
		ИначеЕсли НеУтвержденПолностью Тогда
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.НеУтвержденНеПроведен;
		Иначе
			СостояниеУтвержденияДокумента	= Перечисления.СостоянияУтвержденияДокумента.УтвержденЧастичноНеПроведен;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаботникиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Работники

Процедура РаботникиСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.Работники.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура РаботникиСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение, , , Подразделение);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Сотрудники", Текст);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Сотрудники", Текст, Элемент.Значение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ