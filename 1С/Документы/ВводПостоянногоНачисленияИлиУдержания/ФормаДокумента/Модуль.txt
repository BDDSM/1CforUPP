////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСведенияОВидахРасчета;

Перем мСведенияОВидеРасчета;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Хранит имя табличного поля для заполнения списком сотрудников
Перем мИмяЗаполняемойТаблицы;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мБылВидРасчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


Процедура УстановитьВидимостьИНазваниеКолонокРазмера()
	
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета, "ПлановыеНачисления");
	
	ВидимостьТекущихЗначений = (Действие = 0 Или Действие = 2);
	
	Если ВидимостьТекущихЗначений Тогда
		ЭлементыФормы.НадписьПериод.Заголовок			= "Период";
	Иначе
		ЭлементыФормы.НадписьПериод.Заголовок			= "Прекратить";
	КонецЕсли;
	ЭлементыФормы.ДатаДействияКонец.Видимость			= ВидимостьТекущихЗначений;
	ЭлементыФормы.НадписьДатаДействияКонец.Видимость	= ВидимостьТекущихЗначений;
	
	Для СчПоказателей = 1 По 6 Цикл
		
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Или СчПоказателей = 1 Тогда


			Если СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
				
				ВидимостьПоказателя = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] И ВидимостьТекущихЗначений;
				
				ЭлементыФормы.Начисления.Колонки["НаименованиеПоказательТР" + СчПоказателей].ТекстШапки	= СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"];

				ЭлементыФормы.Начисления.Колонки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= ВидимостьПоказателя;
				ЭлементыФормы.Начисления.Колонки["ТарифныйРазряд" + СчПоказателей].Видимость			= ВидимостьПоказателя;
				
				ЭлементыФормы.Начисления.Колонки["НаименованиеПоказатель" + СчПоказателей].Видимость	= Ложь;
				ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].Видимость				= Ложь;
				ЭлементыФормы.Начисления.Колонки["Валюта" + СчПоказателей].Видимость					= Ложь;
				ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].Видимость				= Ложь;
				
			Иначе
				// размеры показателя будут доступны только для видимых показателей
				ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] И ВидимостьТекущихЗначений;
				ЭлементыФормы.Начисления.Колонки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				Если ВидимостьПоказателя Тогда
					ЭлементыФормы.Начисления.Колонки["НаименованиеПоказатель" + СчПоказателей].ТекстШапки = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
				КонецЕсли;
				
				ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].Видимость				= ВидимостьПоказателя;
				ЭлементыФормы.Начисления.Колонки["Валюта" + СчПоказателей].Видимость					= ВидимостьПоказателя И СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"];
			
				ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].ЭлементУправления.Формат = "ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"];
				ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].Формат = "ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"];
				
				ЭлементыФормы.Начисления.Колонки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= Ложь;
				ЭлементыФормы.Начисления.Колонки["ТарифныйРазряд" + СчПоказателей].Видимость			= Ложь;
				
			КонецЕсли;
			
		Иначе
			// настроим видимость ячеек
			ЭлементыФормы.Начисления.Колонки["НаименованиеПоказатель" + СчПоказателей].Видимость	= Ложь;
			ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].Видимость				= Ложь;
			ЭлементыФормы.Начисления.Колонки["Валюта" + СчПоказателей].Видимость					= Ложь;
			ЭлементыФормы.Начисления.Колонки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= Ложь;
			ЭлементыФормы.Начисления.Колонки["ТарифныйРазряд" + СчПоказателей].Видимость			= Ложь;
			
		КонецЕсли;
	
	КонецЦикла;
	
	ЭлементыФормы.Начисления.Колонки.ДокументОснование.Видимость = (Действие = 3);

КонецПроцедуры //УстановитьВидимостьИНазваниеКолонокРазмера


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя, "Имя", Истина), ЭтотОбъект);
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли; 
КонецПроцедуры

// Процедура устанавливает значение показателей начилсения для общих показателей в целом по компании и в целом по подразделению
//
Процедура ПриИзмененииПоказателяНачисления(Значение,парамПоказатель)
	
	мСведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
	КоличествоПоказателей = мСведенияОВидеРасчета["ФактКоличествоПоказателей"];
	
	Если КоличествоПоказателей > (парамПоказатель - 1) Тогда
		Показатель  = мСведенияОВидеРасчета["Показатель" + парамПоказатель];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Тогда
		Для каждого СтрокаНачисления Из Начисления Цикл
			ВидРасчета = СтрокаНачисления.ВидРасчета;
			КоличествоПоказателей = мСведенияОВидеРасчета["ФактКоличествоПоказателей"];
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				ПоказательВР = мСведенияОВидеРасчета["Показатель" + СчПоказателей];
				Если ПоказательВР.Предопределенный Тогда 
					Продолжить;
				КонецЕсли;
				Если ПоказательВР = Показатель Тогда
					СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры //ПриИзмененииПоказателяНачисления

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()



// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)
	
	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	
	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура КоманднаяПанельНачисленияСписокРаботников(Кнопка)
	
	Если Начисления.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	мИмяЗаполняемойТаблицы = "Начисления";
	
	Если ЗначениеЗаполнено(ВидРасчета) Тогда
		Если Начисления.Количество() > 0 Тогда
			
			ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата,"Работники",,Подразделение,Истина,,"ПостоянныеНачисления",Новый Структура("ВидРасчета, ЗаполнятьПоказателиАвтоматически, Показатель1, Показатель2, Показатель3, Показатель4, Показатель5, Показатель6, ТарифныйРазряд1, ТарифныйРазряд2, ТарифныйРазряд3, ТарифныйРазряд4, ТарифныйРазряд5, ТарифныйРазряд6, Валюта1, Валюта2, Валюта3, Валюта4, Валюта5, Валюта6",
			ВидРасчета, Истина, Начисления[0].Показатель1, Начисления[0].Показатель2, Начисления[0].Показатель3, Начисления[0].Показатель4, Начисления[0].Показатель5, Начисления[0].Показатель6, Начисления[0].ТарифныйРазряд1, Начисления[0].ТарифныйРазряд2, Начисления[0].ТарифныйРазряд3, Начисления[0].ТарифныйРазряд4, Начисления[0].ТарифныйРазряд5, Начисления[0].ТарифныйРазряд6,
			Начисления[0].Валюта1,Начисления[0].Валюта2,Начисления[0].Валюта3,Начисления[0].Валюта4,Начисления[0].Валюта5,Начисления[0].Валюта6));
		Иначе
			ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата,"Работники",,Подразделение, Истина,,"ПостоянныеНачисления", Новый Структура("ВидРасчета, ЗаполнятьПоказателиАвтоматически, Показатель1, Показатель2, Показатель3, Показатель4, Показатель5, Показатель6, ТарифныйРазряд1, ТарифныйРазряд2, ТарифныйРазряд3, ТарифныйРазряд4, ТарифныйРазряд5, ТарифныйРазряд6, Валюта1, Валюта2, Валюта3, Валюта4, Валюта5, Валюта6",
			ВидРасчета, Истина));
		КонецЕсли;
	Иначе
		Предупреждение("Перед заполнением табличной части необходимо выбрать вид расчета!");
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельНачисленияПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизацииСПоказателями(Метаданные().ТабличныеЧасти.Начисления.Реквизиты, ЭлементыФормы, Ссылка, Дата, , Начисления, "Начисления", Истина, "НаименованиеПоказатель");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Начисления

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура НачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ВидРасчета <> Неопределено Тогда
	
		мСведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
		
		Для СчПоказателей = 1 По 6 Цикл
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // НачисленияПриВыводеСтроки()

// Процедура - обработчик события "ОбработкаВыбора"
//
Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если Начисления.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			НоваяСтрока = Начисления.Добавить();
			НоваяСтрока.Сотрудник = ВыбранноеЗначение;
			НоваяСтрока.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
			
			Для СчПоказателя = 1 По 6 Цикл
				Если СчПоказателя <= мСведенияОВидеРасчета.ФактКоличествоПоказателей Тогда 
					Если мСведенияОВидеРасчета["Показатель" + СчПоказателя + "Видимость"] Тогда
						НоваяСтрока["Валюта"+СчПоказателя] = мСведенияОВидеРасчета["ВалютаПоказателя"+СчПоказателя];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ПроцедурыУправленияПерсоналом.ОбработкаВыбораТабличнойЧастиСЗаполнениемПоказателейРасчета(ВыбранноеЗначение, Начисления)
	КонецЕсли;
	
КонецПроцедуры //НачисленияОбработкаВыбора


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Начисления

// Процедура - обработчик события "ПриИзменении" поля ввода Сотрудник
//
Процедура НачисленияСотрудникПриИзменении(Элемент)
	
	ЭлементыФормы.Начисления.ТекущиеДанные.Физлицо = Неопределено;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение, , , Подразделение);
	
КонецПроцедуры // НачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура НачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст, );
	
КонецПроцедуры // НачисленияСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура НачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение, );
	
КонецПроцедуры // НачисленияСотрудникОкончаниеВводаТекста()


// Процедура - обработчик события "ПоказательПриИзменении"
//
Процедура НачисленияПоказатель1ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 1);
	
КонецПроцедуры //НачисленияПоказатель1ПриИзменении

// Процедура - обработчик события "Показатель2ПриИзменении"
//
Процедура НачисленияПоказатель2ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 2);
	
КонецПроцедуры //НачисленияПоказатель2ПриИзменении

// Процедура - обработчик события "Показатель3ПриИзменении"
//
Процедура НачисленияПоказатель3ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 3);
	
КонецПроцедуры //НачисленияПоказатель3ПриИзменении

// Процедура - обработчик события "Показатель4ПриИзменении"
//
Процедура НачисленияПоказатель4ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 4);
	
КонецПроцедуры //НачисленияПоказатель4ПриИзменении

// Процедура - обработчик события "Показатель5ПриИзменении"
//
Процедура НачисленияПоказатель5ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 5);
	
КонецПроцедуры

// Процедура - обработчик события "Показатель6ПриИзменении"
//
Процедура НачисленияПоказатель6ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 6);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры //ПередОткрытием

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
		мБылВидРасчета = ВидРасчета;
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Начисления;
	КонецЕсли;
	
	
	ВнестиИлиИзменитьНачислениеПриИзменении();
	мСведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);


КонецПроцедуры //ПриОткрытии

Процедура ПослеЗаписи()
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	// оповестим журналы о записи нового управленческого документа
	Оповестить("ЗаписанНовыйДокументУправленческогоУчета", Ответственный, Ссылка);
	
	Оповестить("ОбновитьСписокПлановыхНачисленийУдержанийКомпании", Начисления.ВыгрузитьКолонку("Физлицо"));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";  Реквизиты = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			мСведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
			ВременнаяТаблица = ЗначениеВыбора.Данные.Выгрузить();
			
			Если мИмяЗаполняемойТаблицы = "Начисления" Тогда
				Начисления.Загрузить(ВременнаяТаблица);
				Для Каждого СтрокаПоказателей Из Начисления Цикл
					Для Сч = 1 По Мин(мСведенияОВидеРасчета.КоличествоПоказателей, 6) Цикл
						Если Сч <=  мСведенияОВидеРасчета.КоличествоПоказателей Тогда
							СтрокаПоказателей["Показатель"+Сч] = ЗначениеВыбора.Реквизиты["Показатель"+Сч];
							СтрокаПоказателей["ТарифныйРазряд"+Сч] = ЗначениеВыбора.Реквизиты["ТарифныйРазряд"+Сч];
							СтрокаПоказателей["Валюта"+Сч] = ЗначениеВыбора.Реквизиты["Валюта"+Сч];
							Если Не ЗначениеЗаполнено(СтрокаПоказателей["Валюта"+Сч]) Тогда 
								СтрокаПоказателей["Валюта"+Сч] = мСведенияОВидеРасчета["ВалютаПоказателя"+Сч];
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
			мИмяЗаполняемойТаблицы = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

Процедура ДействиеПриИзменении()
	
	Если Действие = 1 Или Действие = 3 Тогда
		Для Каждого СтрокаОсновныеНачисления Из Начисления Цикл
			СтрокаОсновныеНачисления.Показатель1 = 0;
			СтрокаОсновныеНачисления.Показатель2 = 0;
			СтрокаОсновныеНачисления.Показатель3 = 0;
			СтрокаОсновныеНачисления.Показатель4 = 0;
			СтрокаОсновныеНачисления.Показатель5 = 0;
			СтрокаОсновныеНачисления.Показатель6 = 0;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры

Процедура УстановитьТипВидаРсчета()
	
	Если (Действие = 0 Или Действие = 1) И ТипЗнч(ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") Тогда
		ВидРасчета = ПланыВидовРасчета.УправленческиеНачисления.ПустаяСсылка();
	ИначеЕсли (Действие = 2 Или Действие = 3) И ТипЗнч(ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания") Тогда
		ВидРасчета = ПланыВидовРасчета.УправленческиеУдержания.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Процедура ВнестиИлиИзменитьНачислениеПриИзменении()
	
	УстановитьТипВидаРсчета();
	
	УстановитьВидимостьИНазваниеКолонокРазмера();
	
КонецПроцедуры //ВнестиИлиИзменитьНачислениеПриИзменении

Процедура ВнестиИлиИзменитьНачислениеПриИзмененииИзФормы()
	
	ВнестиИлиИзменитьНачислениеПриИзменении();
	
	ДействиеПриИзменении();
	
КонецПроцедуры //ВнестиИлиИзменитьНачислениеПриИзмененииИзФормы


Процедура ВидРасчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Начисления.Количество() > 0 Тогда
		

		Если мБылВидРасчета <> ВыбранноеЗначение Тогда
			
			Ответ = Вопрос("При смене вида расчета введенные ранее показатели будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,120);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				СтандартнаяОбработка = Ложь;
			Иначе
				мСведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВыбранноеЗначение);
				
				Для Каждого СтрокаПоказателей Из Начисления Цикл
					Для СчПоказателя = 1 По 6 Цикл
						СтрокаПоказателей["Показатель"+СчПоказателя] = 0;
						СтрокаПоказателей["ТарифныйРазряд"+СчПоказателя] = Справочники.ТарифныеРазряды.ПустаяСсылка();
						СтрокаПоказателей["Валюта"+СчПоказателя] = Справочники.Валюты.ПустаяСсылка();
					КонецЦикла;
				КонецЦикла;
				мБылВидРасчета = ВыбранноеЗначение;
				УстановитьВидимостьИНазваниеКолонокРазмера();
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		УстановитьВидимостьИНазваниеКолонокРазмера();
	КонецЕсли;
	
	АвтоВыборНезаполненного = Не ЗначениеЗаполнено(ВидРасчета);
	
	ЭлементыФормы.ВидРасчета.АвтоОтметкаНезаполненного = АвтоВыборНезаполненного;
	ЭлементыФормы.ВидРасчета.АвтоВыборНезаполненного = АвтоВыборНезаполненного;

КонецПроцедуры

Процедура ВидРасчетаПриИзменении(Элемент)
	УстановитьВидимостьИНазваниеКолонокРазмера();
	УстановитьТипВидаРсчета();
КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСведенияОВидахРасчета = Новый Соответствие;