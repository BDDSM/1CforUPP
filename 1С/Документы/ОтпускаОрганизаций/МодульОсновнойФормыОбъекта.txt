////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

// Диалог настройки периода
Перем мНастройкаПериода;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

// Механизм исправлений
Перем мСтруктураМенюИсправление;
Перем мДокументыИсправление;
Перем мСотрудникиИсправление;
Перем мТекущийСотрудник;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает механизму исправления информацию о том, заполнен документ правильно или с ошибками
//
Функция ДокументЗаполненСОшибками() Экспорт
	
	Возврат РаботникиОрганизации.НайтиСтроки(Новый Структура("ДатаНачала",Дата(1,1,1))).Количество() > 0
		ИЛИ РаботникиОрганизации.НайтиСтроки(Новый Структура("ПричинаОтсутствия",Дата(1,1,1))).Количество() > 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//	НЕТ
//
// Возвращаемое значение:
//	Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке()

	СтруктураПараметров = Новый Структура("ОбозначениеВТабелеУчетаРабочегоВремени", Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск);

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Процедура рассчитывает период работы, за который начисляется основной отпуск
//
Процедура ОпределитьРабочийГодОтпуска(ДанныеСтроки)
	
	Если ДанныеСтроки.Сотрудник.Пустая()
		ИЛИ Не ЗначениеЗаполнено(ДанныеСтроки.ДатаНачала)
		ИЛИ ДанныеСтроки.ПричинаОтсутствия <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный Тогда
		Возврат;
	КонецЕсли;
	
	ДатаОкончания = ?(ЗначениеЗаполнено(ДанныеСтроки.ДатаНачалаДоп), ДанныеСтроки.ДатаНачалаДоп - мДлинаСуток, ДанныеСтроки.ДатаОкончания);
	Если Не ЗначениеЗаполнено(ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	// Если документ еще не записан в ИБ и является исправлением, передаем ссылку на исходный документ
	// Ссылка необходима, чтобы исключить движения самого документа и всех других исправлений
	Если ЭтоНовый() И Не ИсправляемыйДокумент.Пустая() Тогда
		РегистраторОтпуска = ИсправляемыйДокумент;
	Иначе
		РегистраторОтпуска = Ссылка;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ДанныеСтроки, ОстаткиОтпусков.РабочийГодПериодаОтпуска(
		ДанныеСтроки.Сотрудник, ДанныеСтроки.ДатаНачала, ДанныеСтроки.ДатаОкончания, РегистраторОтпуска, Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням, ДанныеСтроки.ДатаНачала = ДанныеСтроки.ДатаНачалаДоп, ДанныеСтроки.ВидДополнительногоОтпуска));
	
КонецПроцедуры

Процедура ИзменитьДополнительныйОтпускПоОсновному(ДанныеСтроки)
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаНачалаДоп) И НЕ ЗначениеЗаполнено(ДанныеСтроки.КоличествоДнейДоп) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтроки.ДатаНачалаДоп > ДанныеСтроки.ДатаОкончания Тогда
		ДанныеСтроки.ДатаНачалаДоп = ДанныеСтроки.ДатаОкончания;
	КонецЕсли;
	Если ДанныеСтроки.ДатаНачалаДоп < ДанныеСтроки.ДатаНачала Тогда
		ДанныеСтроки.ДатаНачалаДоп = ДанныеСтроки.ДатаНачала;
	КонецЕсли;
	
	ЗаполнениеДокументовЗК.ЗаполнитьДатыОтпуска(ДанныеСтроки.ДатаНачалаДоп, ДанныеСтроки.ДатаОкончания, ДанныеСтроки.КоличествоДнейДоп, "ДатаОкончания", ДанныеСтроки.ПричинаОтсутствия, Ложь);	
		
КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.НадписьОрганизация.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПередОткрытием(ЭтотОбъект, ЭтаФорма, мДокументыИсправление, мСотрудникиИсправление);
	
	// Допишем дополнительные команды заполнения
	ОтпускаОрганизацийПереопределяемый.ДополнитьПодменюЗаполненияТЧ(ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить, Новый Действие("КоманднаяПанельРаботникиОрганизацииЗаполнитьДополнительно"));
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");
	СтруктураКолонок.Вставить("ПричинаОтсутствия");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// списки отпусков
	СписокОтпусков = ПроцедурыУправленияПерсоналом.ПолучитьСписокОтпусковОрганизации(); 
	ЭлементыФормы.РаботникиОрганизации.Колонки.ПричинаОтсутствия.ЭлементУправления.ДоступныеЗначения = СписокОтпусков;
	ЭлементыФормы.РаботникиОрганизации.Колонки.ПричинаОтсутствия.ЭлементУправления.ВысотаСпискаВыбора = СписокОтпусков.Количество();
	ЭлементыФормы.РаботникиОрганизации.Колонки.ПричинаОтсутствия.ЭлементУправления.ШиринаСпискаВыбора = 30;

	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ОсновныеНачисленияОрганизаций.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ОбозначениеВТабелеУчетаРабочегоВремени = ЗНАЧЕНИЕ(Справочник.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск)");

	Если Запрос.Выполнить().Пустой() Тогда // дополнительных отпусков не предоставляют - колонку показывать не будем
		ЭлементыФормы.РаботникиОрганизации.Колонки.ВидДополнительногоОтпуска.Видимость = Ложь;
		ЭлементыФормы.РаботникиОрганизации.Колонки.ДатаНачалаДоп.Видимость = Ложь;
		ЭлементыФормы.РаботникиОрганизации.Колонки.КоличествоДнейДоп.Видимость = Ложь;
	КонецЕсли;
	
	// чтобы перейти к документам-начислениям нужно иметь права на обработку Анализ неявок, 
	// остальным пользователям показывать кнопку не будем
	РаботаСДиалогамиЗК.УстановитьВидимостьКнопкиОткрытьНачисления(ЭлементыФормы.ДействияФормы.Кнопки,"ДокументыНачисления");

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.РаботникиОрганизации.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	мНастройкаПериода.УстановитьПериод(НачалоМесяца(Дата), КонецМесяца(Дата));
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриОткрытии(ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление, мСотрудникиИсправление);
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			РаботникиОрганизации.Загрузить(ЗначениеВыбора.Данные.Выгрузить())
		КонецЕсли;
	КонецЕсли;
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовОбработкаВыбора(ЗначениеВыбора, Источник, ЭтотОбъект, ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовОбработкаОповещения(
		ИмяСобытия, Параметр, Источник,
		ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление, мСотрудникиИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ОбновитьОписаниеСостоянияКадровогоДокумента(ЭтотОбъект, ЭтаФорма, мДокументыИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы
//
Процедура ПослеЗаписи()
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПослеЗаписи(ЭтотОбъект);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	Оповестить("ИзмененоСостояниеРаботниковОрганизации", РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"));
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПередЗакрытием" формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыДокументыНачисления(Кнопка)
	
	Если НЕ Проведен Тогда
		Предупреждение("Ввести документы-начисления можно только после проведения документа!");
		Возврат;
	КонецЕсли;
		
	Если Модифицированность() Тогда
		
		Ответ = Вопрос("Документ изменен. Для ввода документов-начислений его необходимо записать и провести.
						|Записать и провести?",
						РежимДиалогаВопрос.ОКОтмена, , 
						КодВозвратаДиалога.Отмена,
						"Документ изменен");
		
		Если Ответ = КодВозвратаДиалога.ОК Тогда
			
			Попытка
				ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
			Исключение
				Предупреждение("Операция не выполнена!");
				Возврат 
			КонецПопытки;
			
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Обработка = Обработки.АнализНеявок.Создать();
	Обработка.Организация = Организация;
	Обработка.ОтбиратьСобытияПоДокументу = Истина;
	Обработка.ТипДокумента = Метаданные().Синоним;
	Обработка.КадровыйДокументОтбора = Ссылка;
	Обработка.Автозаполнение();
	Обработка.ПолучитьФорму(, ЭтаФорма).Открыть();

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()


// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура КоманднаяПанельРаботникиОрганизацииЗаполнитьДополнительно(Кнопка)
	
	ОтпускаОрганизацийПереопределяемый.ОбработатьНажатиеНаКнопкуЗаполнения(Кнопка, ЭтотОбъект);
	
КонецПроцедуры

// Заполняет табличную часть запланированными в графике отпусков отпусками
// 
// Параметры:
//	Кнопка	- Элемент управления
//
Процедура КоманднаяПанельРаботникиОрганизацииЗаполнить(Кнопка)
	
	Если Организация.Пустая() Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Укажите организацию!"));
		Возврат
	КонецЕсли;
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если мНастройкаПериода.Редактировать() Тогда
		ДатаНачала		= мНастройкаПериода.ПолучитьДатуНачала();
		ДатаОкончания	= мНастройкаПериода.ПолучитьДатуОкончания();
		
		Если НЕ ЗначениеЗаполнено(ДатаНачала) или НЕ ЗначениеЗаполнено(ДатаОкончания) Тогда
			Предупреждение("Укажите границы периода просмотра графика отпусков!");
			Возврат;
		КонецЕсли;
		
		РаботникиОрганизации.Очистить();
		Автозаполнение(ДатаНачала, ДатаОкончания);
		
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииЗаполнить()

// Процедура - вызывается при нажатии на кнопку "Список работников"
//
Процедура КоманднаяПанельРаботникиОрганизацииСписокРаботников(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , Организация);

КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииСписокРаботников()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 5);
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииПодбор()


// Процедура - обработчик нажатия на кнопку "Строки текущего сотрудника"
//
Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиКадровоеИсправлениеТекущегоСотрудника(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Весь документ"
//
Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Список сотрудников"
//
Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиКадровоеИсправлениеСпискаСотрудников(ЭтотОбъект, ЭтаФорма, мСотрудникиИсправление);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Отменить исправление"
//
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьКадровоеИсправление(ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

КонецПроцедуры // ОрганизацияПриИзменении()


// Процедура - обработчик события "Нажатие" надписи "Открыть исправление".
//
Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ПоказатьИсправления(ЭтаФорма, Ссылка, мДокументыИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" надписи "Открыть исходный".
//
Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ОткрытьИсходныйДокумент(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура обеспечивает начальное значение реквизита "ПричинаОтсутствия"
// 
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  НоваяСтрока - булево, признак редактирования новой строки
//  
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		ВведеннаяСтрока = Элемент.ТекущаяСтрока;
		Если НЕ ЗначениеЗаполнено(ВведеннаяСтрока.ПричинаОтсутствия) Тогда
			ВведеннаяСтрока.ПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПриНачалеРедактирования()

// Процедура - обработчик события "ОбработкаВыбора" табличного поля РаботникиОрганизации
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
			
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		НоваяСтрока = РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник = ВыбранноеЗначение;
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
	КонецЕсли;
	
КонецПроцедуры // ТабличнаяЧастьОбработкаВыбора()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ЯвляетсяЕжегоднымОтпуском = ОформлениеСтроки.ДанныеСтроки.ПричинаОтсутствия = Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный;
		
		// вид дополнительного отпуска доступен только для ежегодного отпуска
		Если Элемент.Колонки.ВидДополнительногоОтпуска.Видимость Тогда
			ОформлениеСтроки.Ячейки.ВидДополнительногоОтпуска.ТолькоПросмотр = Не ЯвляетсяЕжегоднымОтпуском;
		КонецЕсли;
		Если Элемент.Колонки.ДатаНачалаДоп.Видимость Тогда
			ОформлениеСтроки.Ячейки.ДатаНачалаДоп.ТолькоПросмотр = Не ЯвляетсяЕжегоднымОтпуском;
			ОформлениеСтроки.Ячейки.КоличествоДнейДоп.ТолькоПросмотр = Не ЯвляетсяЕжегоднымОтпуском;
		КонецЕсли;
		
		// рабочий год, за который предоставляется отпуск, покажем для ежегодного и дополнительного отпусков
		Если Элемент.Колонки.РабочийГодС.Видимость Тогда
			ОформлениеСтроки.Ячейки.РабочийГодС.ТолькоПросмотр = Не ЯвляетсяЕжегоднымОтпуском;
		КонецЕсли;
		Если Элемент.Колонки.РабочийГодПо.Видимость Тогда
			ОформлениеСтроки.Ячейки.РабочийГодПо.ТолькоПросмотр = Не ЯвляетсяЕжегоднымОтпуском;
		КонецЕсли;
	КонецЦикла;
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриПолученииДанных(ОформленияСтрок, мСотрудникиИсправление);
	
КонецПроцедуры // РаботникиОрганизацииПриПолученииДанных()

// Процедура - обработчик события "ПриАктивизацииСтроки"
//
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтроки(Элемент, ЭлементыФормы.КоманднаяПанельРаботникиОрганизации, мСотрудникиИсправление, мТекущийСотрудник);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

// Процедура - обработчик ожидания события "ПриАктивизацииСтроки"
//
Процедура ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтрокиОбработчикОжидания(ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования"
//
Процедура РаботникиОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриОкончанииРедактирования(ОтменаРедактирования, ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПриИзменении" поля ввода сотрудника
//
// Параметры:
//	Элемент		- элемент формы, который отображает физическое лицо
//
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	
	ОпределитьРабочийГодОтпуска(ДанныеСтроки);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физического лица -  
// переопеределим выбор физлица на выбор из списка регистра сведений
//
// Параметры:
//	Элемент - элемент формы, который отображает физическое лицо
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 5, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода вида отпуска
//
// Параметры:
//	Элемент		- элемент формы, который отображает физическое лицо
//
Процедура РаботникиОрганизацииПричинаОтсутствияПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	Если Элемент.Значение <> Перечисления.ПричиныОтсутствияНаРаботеВОрганизации.ОтпускЕжегодный Тогда
		ДанныеСтроки.ВидДополнительногоОтпуска	= "";
		ДанныеСтроки.ДатаНачалаДоп				= "";
		ДанныеСтроки.КоличествоДнейДоп			= "";
		ДанныеСтроки.РабочийГодС				= "";
		ДанныеСтроки.РабочийГодПо				= "";
		
	Иначе
		ОпределитьРабочийГодОтпуска(ДанныеСтроки);
		
	КонецЕсли;
	
	ЗаполнениеДокументовЗК.ЗаполнитьДатыОтпуска(ДанныеСтроки.ДатаНачала, ДанныеСтроки.ДатаОкончания, ДанныеСтроки.КоличествоДней, "ДатаОкончания", ДанныеСтроки.ПричинаОтсутствия);
	
КонецПроцедуры // РаботникиОрганизацииПричинаОтсутствияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода дополнительного отпуска
//
// Параметры:
//	Элемент		- элемент формы, который отображает физическое лицо
//
Процедура РаботникиОрганизацииВидДополнительногоОтпускаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаОтпускаОрганизаций");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбораВидаРасчета.Отбор.ОбозначениеВТабелеУчетаРабочегоВремени.Установить(Справочники.КлассификаторИспользованияРабочегоВремени.ДополнительныйОтпуск);
	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры // РаботникиОрганизацииВидДополнительногоОтпускаНачалоВыбора()

Процедура РаботникиОрганизацииВидДополнительногоОтпускаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
КонецПроцедуры // РаботникиОрганизацииВидДополнительногоОтпускаАвтоПодборТекста()

Процедура РаботникиОрганизацииВидДополнительногоОтпускаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // РаботникиОрганизацииВидДополнительногоОтпускаОкончаниеВводаТекста()

Процедура РаботникиОрганизацииДатаСПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	ДатаОкончания = ДанныеСтроки.ДатаОкончания;
	ЗаполнениеДокументовЗК.ЗаполнитьДатыОтпуска(ДанныеСтроки.ДатаНачала, ДанныеСтроки.ДатаОкончания, ДанныеСтроки.КоличествоДней, , ДанныеСтроки.ПричинаОтсутствия);
	Если ДатаОкончания <> ДанныеСтроки.ДатаОкончания Тогда
		ИзменитьДополнительныйОтпускПоОсновному(ДанныеСтроки);
	КонецЕсли;
	
	ОпределитьРабочийГодОтпуска(ДанныеСтроки);
	
КонецПроцедуры

Процедура РаботникиОрганизацииДатаПоПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	ЗаполнениеДокументовЗК.ЗаполнитьДатыОтпуска(ДанныеСтроки.ДатаНачала, ДанныеСтроки.ДатаОкончания, ДанныеСтроки.КоличествоДней, "ДатаОкончания", ДанныеСтроки.ПричинаОтсутствия);	
	
	ИзменитьДополнительныйОтпускПоОсновному(ДанныеСтроки);
	
	ОпределитьРабочийГодОтпуска(ДанныеСтроки);
	
КонецПроцедуры

Процедура РаботникиОрганизацииДатаНачалаДопПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	Если ДанныеСтроки.ДатаНачалаДоп > ДанныеСтроки.ДатаОкончания Тогда
		ДатаОкончания = ДанныеСтроки.ДатаОкончания;
		ЗаполнениеДокументовЗК.ЗаполнитьДатыОтпуска(ДанныеСтроки.ДатаНачалаДоп, ДанныеСтроки.ДатаОкончания, ДанныеСтроки.КоличествоДнейДоп, , ДанныеСтроки.ПричинаОтсутствия);	
		Если ДатаОкончания <> ДанныеСтроки.ДатаОкончания Тогда
			// пересчитываем дополнительный отпуск, не запрашивая
			ЗаполнениеДокументовЗК.ЗаполнитьДатыОтпуска(ДанныеСтроки.ДатаНачала, ДанныеСтроки.ДатаОкончания, ДанныеСтроки.КоличествоДней, "ДатаОкончания", ДанныеСтроки.ПричинаОтсутствия, Ложь);	
		КонецЕсли;
	Иначе
		ЗаполнениеДокументовЗК.ЗаполнитьДатыОтпуска(ДанныеСтроки.ДатаНачалаДоп, ДанныеСтроки.ДатаОкончания, ДанныеСтроки.КоличествоДнейДоп, "ДатаОкончания", ДанныеСтроки.ПричинаОтсутствия);	
	КонецЕсли;
	
	ОпределитьРабочийГодОтпуска(ДанныеСтроки);
	
КонецПроцедуры

Процедура РаботникиОрганизацииКоличествоДнейПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	ДатаОкончания = ДанныеСтроки.ДатаОкончания;
	ЗаполнениеДокументовЗК.ЗаполнитьДатыОтпуска(ДанныеСтроки.ДатаНачала, ДанныеСтроки.ДатаОкончания, ДанныеСтроки.КоличествоДней, , ДанныеСтроки.ПричинаОтсутствия);	
	Если ДатаОкончания <> ДанныеСтроки.ДатаОкончания Тогда
		ИзменитьДополнительныйОтпускПоОсновному(ДанныеСтроки);
	КонецЕсли;
	
	ОпределитьРабочийГодОтпуска(ДанныеСтроки);
	
КонецПроцедуры

Процедура РаботникиОрганизацииКоличествоДнейДопПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	ЗаполнениеДокументовЗК.ЗаполнитьДатыОтпуска(ДанныеСтроки.ДатаНачалаДоп, ДанныеСтроки.ДатаОкончания, ДанныеСтроки.КоличествоДнейДоп, , ДанныеСтроки.ПричинаОтсутствия, Ложь, "ДатаНачала");	
	Если ЗначениеЗаполнено(ДанныеСтроки.ДатаНачалаДоп) И ДанныеСтроки.ДатаНачалаДоп < ДанныеСтроки.ДатаНачала Тогда
		ДанныеСтроки.ДатаНачала = ДанныеСтроки.ДатаНачалаДоп;
		// пересчитываем основной отпуск, не запрашивая
		ЗаполнениеДокументовЗК.ЗаполнитьДатыОтпуска(ДанныеСтроки.ДатаНачала, ДанныеСтроки.ДатаОкончания, ДанныеСтроки.КоличествоДней, "ДатаОкончания", ДанныеСтроки.ПричинаОтсутствия, Ложь);
	КонецЕсли;
	
	ОпределитьРабочийГодОтпуска(ДанныеСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНастройкаПериода = Новый НастройкаПериода;

мДокументыИсправление	= Новый Массив;
мСотрудникиИсправление	= Новый Соответствие;