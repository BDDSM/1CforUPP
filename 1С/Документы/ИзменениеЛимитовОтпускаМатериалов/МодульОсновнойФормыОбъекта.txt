////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОтражатьВРегламентированномУчете;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ЗАПОЛНЕНИЯ ТАБЛИЧНОЙ ЧАСТИ

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем СпособЗаполненияЦен;
	
	ЕстьЦена  = Ложь;
	ЕстьСерия = Ложь;

	СписокВидовПодбора = Новый СписокЗначений();
	СписокВидовПодбора.Добавить(,"По справочнику");
	
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Команда"              , "ПодборВТабличнуюЧастьЛимиты");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"   , СписокВидовПодбора);
	СтруктураПараметровПодбора.Вставить("Склад"                , Склад);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем Номенклатура, ЕдиницаИзмерения, Количество, Характеристика;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура", Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество", Количество);
	ЗначениеВыбора.Свойство("Характеристика", Характеристика);
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.ЛимитОтпуска = СтрокаТабличнойЧасти.ЛимитОтпуска + Количество;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.ЛимитОтпуска       = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.КонтролироватьЛимит = Истина;
		
	КонецЕсли;

	ЭлементыФормы.Лимиты.ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы.Лимиты.ТекущаяКолонка = ЭлементыФормы.Лимиты.Колонки["ЛимитОтпуска"];

КонецПроцедуры // ОбработкаПодбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Лимиты, ЭлементыФормы.КоманднаяПанельЛимиты.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Отказ = Не УправлениеПроизводством.ИспользоватьЛимитыОтпускаМатериалов(Истина);
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,"",мОтражатьВРегламентированномУчете);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента( "", ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры".
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.Лимиты.Колонки);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		ЗначениеВыбора.Свойство("Команда", Команда);
		Если Команда = "ПодборВТабличнуюЧастьЛимиты" Тогда
			
			ОбработкаПодбора(Лимиты, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельЛимитыДействиеПодбор(Кнопка)

	ДействиеПодбор(Лимиты);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Заполнить"
// командной панели распределение.
//
Процедура КоманднаяПанельРаспределениеЗаполнить(Кнопка)
	
	ФормаОбработки = Обработки.РасчетЛимитовОтпускаМатериалов.ПолучитьФорму(, ЭтаФорма);
	
	Если ФормаОбработки.Открыта() Тогда
		
		ФормаОбработки.Активизировать();
		
		Если Вопрос("Предыдущая операция заполнения лимитов отпуска материалов не завершена.
			|Завершить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Да Тогда
			
			ФормаОбработки.Закрыть();
			
		КонецЕсли;
		
	КонецЕсли;	
	
	ФормаОбработки.Подразделение = Подразделение;
	ФормаОбработки.Склад = Склад;
	ФормаОбработки.ДокументОбъект = ЭтотОбъект;
	
	ФормаОбработки.Открыть();

КонецПроцедуры // КоманднаяПанельРаспределениеЗаполнить()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,"",мОтражатьВРегламентированномУчете,истина);

	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
	
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ БАЗА РАСПРЕДЕЛЕНИЯ

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
// в строке табличной части "Лимиты".
//
Процедура ЛимитыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Лимиты.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
КонецПроцедуры // ЛимитыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ЕдиницаИзмерения"
// в строке табличной части "Лимиты".
//
Процедура ЛимитыЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Лимиты.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ЛимитыЕдиницаИзмеренияПриИзменении()