// Периодичность, с которой вводятся ограничения оборотов:
// равна периодичности контролирующего сценария (при динамическом ограничении)
// или периодичности сценария планирования

Перем ПериодичностьОграничения;

Перем ФорматПериод; // Хранит форматную строку для вывода периода;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;



// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ГраницыЗначений,ЭлементыФормы.КоманднаяПанельГраницыЗначений);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


// Проверяет даты начала и конца ограничения оборотов и корректирует при необходимости
//
Процедура ПроверкаИнтервала()

	Если (ДатаКонцаКонтролирующегоСценария='00010101') И (ДатаНачалаКонтролирующегоСценария<>'00010101') Тогда
		
		ДатаКонцаКонтролирующегоСценария=ОбщегоНазначения.ДатаКонцаПериода(ДатаНачалаКонтролирующегоСценария,ПериодичностьОграничения);
		
	ИначеЕсли (ДатаКонцаКонтролирующегоСценария<>'00010101') И (ДатаНачалаКонтролирующегоСценария='00010101') Тогда
		
		ДатаНачалаКонтролирующегоСценария=ОбщегоНазначения.ДатаНачалаПериода(ДатаКонцаКонтролирующегоСценария,ПериодичностьОграничения);
		
	ИначеЕсли ДатаКонцаКонтролирующегоСценария<ДатаНачалаКонтролирующегоСценария Тогда
		
		Если ЭтаФорма.ТекущийЭлемент.Имя="ДатаКонцаКонтролирующегоСценария" Тогда
			
			ДатаНачалаКонтролирующегоСценария=ОбщегоНазначения.ДатаНачалаПериода(ДатаКонцаКонтролирующегоСценария,ПериодичностьОграничения);
			
		Иначе
			
			ДатаКонцаКонтролирующегоСценария=ОбщегоНазначения.ДатаКонцаПериода(ДатаНачалаКонтролирующегоСценария,ПериодичностьОграничения);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ПроверкаИнтервала()

Процедура ФорматПериода()
	
	Периодичность=КонтролирующийСценарий.Периодичность;
	
	Если Периодичность = Перечисления.Периодичность.Год Тогда
		ФорматПериод = "ДФ = ""гггг """"г.""""""";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Квартал Тогда
		ФорматПериод = "ДФ = ""к"""" квартал"""" гггг """"г.""""""";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Месяц Тогда
		ФорматПериод = "ДФ = ""ММММ гггг """"г.""""""";
	ИначеЕсли Периодичность = Перечисления.Периодичность.Неделя Тогда
		ФорматПериод = "ДФ = """"""Неделя с"""" дд.ММ.гггг """"""";
	ИначеЕсли Периодичность = Перечисления.Периодичность.День Тогда
		ФорматПериод = "ДФ = ""дд.ММ.гггг """"г.""""""";
	Иначе
		ФорматПериод = "";
	КонецЕсли;
	
КонецПроцедуры //

// Производит первоначальное заполнение необходимых реквизитов
// для нового документа
//
Процедура ЗаполнениеПоУмолчанию()

	ВидОтклоненияКонтролируемыхЗначений=Перечисления.ВидыОтклоненийКонтролируемыхЗначенийБюджетов.Относительное;	

КонецПроцедуры // ЗаполнениеПоУмолчанию()
  

// Изменяет видимость и доступность реквизитов формы в зависимости от внесенных значений
//
Процедура УправлениеРеквизитами()

	Если ЭлементыФормы.ВидОграниченияОборотов.Значение=Перечисления.ВидыОграниченийОборотовБюджета.ПредварительныйБюджет Тогда
        
		ЭлементыФормы.КонтролирующийСценарий.Значение="";
		ЭлементыФормы.КонтролирующийСценарий.Доступность=Ложь;
		ЭлементыФормы.ГраницыЗначений.Колонки.Отклонение.Видимость=Ложь;
		ЭлементыФормы.ГраницыЗначений.Колонки.ВидОтклоненияКонтролируемыхЗначений.Видимость=Ложь;
        ЭлементыФормы.ГраницыЗначений.Колонки.Сумма.Видимость=Истина;
		
	Иначе

		ЭлементыФормы.КонтролирующийСценарий.Доступность=Истина;
		ЭлементыФормы.ГраницыЗначений.Колонки.ВидОтклоненияКонтролируемыхЗначений.Видимость=Истина;
		ЭлементыФормы.ГраницыЗначений.Колонки.Отклонение.Видимость=Истина;
        ЭлементыФормы.ГраницыЗначений.Колонки.Сумма.Видимость=Ложь;
		
	КонецЕсли;
	
	Если ВидОграниченияОборотов=Перечисления.ВидыОграниченийОборотовБюджета.ПредварительныйБюджет
		И Сценарий.Пустая() Тогда
		ЭлементыФормы.ГраницыЗначений.Доступность=Ложь;
	ИначеЕсли 	
		ВидОграниченияОборотов=Перечисления.ВидыОграниченийОборотовБюджета.КонтролирующийСценарийВыборочно
		И КонтролирующийСценарий.Пустая() Тогда
		ЭлементыФормы.ГраницыЗначений.Доступность=Ложь;
	ИначеЕсли (Сценарий.Пустая()) И (Сценарий.Пустая()) Тогда
		ЭлементыФормы.ГраницыЗначений.Доступность=Ложь;		
	Иначе
		ЭлементыФормы.ГраницыЗначений.Доступность=Истина;
	КонецЕсли;
	
	Если КонтролирующийСценарий.Пустая() Тогда
		ЭлементыФормы.ДатаНачалаКонтролирующегоСценария.Доступность=Ложь;
		ЭлементыФормы.ДатаКонцаКонтролирующегоСценария.Доступность=Ложь;
	Иначе
		ЭлементыФормы.ДатаНачалаКонтролирующегоСценария.Доступность=Истина;
		ЭлементыФормы.ДатаКонцаКонтролирующегоСценария.Доступность=Истина;
    КонецЕсли;
		
	Если ВидОграниченияОборотов = Перечисления.ВидыОграниченийОборотовБюджета.КонтролирующийСценарийПоВсем Тогда
		ЭлементыФормы.ПанельНастройкиГраниц.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиГраниц.Страницы["ПоВсем"];
	Иначе
		ЭлементыФормы.ПанельНастройкиГраниц.ТекущаяСтраница = ЭлементыФормы.ПанельНастройкиГраниц.Страницы["Выборочно"];
    КонецЕсли;
		
КонецПроцедуры // УправлениеРеквизитами()	

Процедура ГраницыЗначенийДатаНачалаПриИзменении(Элемент)
		
	Элемент.Значение=ОбщегоНазначения.ДатаНачалаПериода(Элемент.Значение,ПериодичностьОграничения);
	
КонецПроцедуры

Процедура ГраницыЗначенийДатаНачалаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	СтандартнаяОбработка=Ложь;

	Элемент.Значение=ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,ПериодичностьОграничения,Направление);

КонецПроцедуры

Процедура ВидОграниченияОборотовПриИзменении(Элемент)
	
	Если ВидОграниченияОборотов=Перечисления.ВидыОграниченийОборотовБюджета.ПредварительныйБюджет Тогда
		
		ПериодичностьОграничения=Сценарий.Периодичность;
		
	КонецЕсли;
	
	УправлениеРеквизитами();
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()


Процедура ПриОткрытии()
	
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	// Закладки в конфигураторе показываются только для удобства редактирования.
	ЭлементыФормы.ПанельНастройкиГраниц.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	
	Если Не ЭтоНовый() И ВидОграниченияОборотов=Перечисления.ВидыОграниченийОборотовБюджета.ПредварительныйБюджет Тогда
		ПериодичностьОграничения=Сценарий.Периодичность;
	Иначе
		ПериодичностьОграничения=КонтролирующийСценарий.Периодичность;
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ЗаполнениеПоУмолчанию();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Состояние) Тогда
		Состояние=Перечисления.СостоянияОбъектов.Подготовлен;
	КонецЕсли;
	
	УправлениеРеквизитами();
	ФорматПериода();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект,ЭтаФорма);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДатаНачалаКонтролирующегоСценарияПриИзменении(Элемент)
	
	Элемент.Значение=ОбщегоНазначения.ДатаНачалаПериода(Элемент.Значение,ПериодичностьОграничения);
	ПроверкаИнтервала();
		
КонецПроцедуры

Процедура СценарийПриИзменении(Элемент)
	
	УправлениеРеквизитами();
	
	Если ВидОграниченияОборотов=Перечисления.ВидыОграниченийОборотовБюджета.ПредварительныйБюджет Тогда
		
		ПериодичностьОграничения=Сценарий.Периодичность;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КонтролирующийСценарийПриИзменении(Элемент)
	
	УправлениеРеквизитами();
	
	ПериодичностьОграничения=КонтролирующийСценарий.Периодичность;
	
	Если ВидОграниченияОборотов=Перечисления.ВидыОграниченийОборотовБюджета.КонтролирующийСценарийПоВсем Тогда
		
		ДатаНачалаКонтролирующегоСценария=ОбщегоНазначения.ДатаНачалаПериода(ДатаНачалаКонтролирующегоСценария,ПериодичностьОграничения);
		ДатаКонцаКонтролирующегоСценария=ОбщегоНазначения.ДатаКонцаПериода(ДатаКонцаКонтролирующегоСценария,ПериодичностьОграничения);
		
	ИначеЕсли ВидОграниченияОборотов=Перечисления.ВидыОграниченийОборотовБюджета.КонтролирующийСценарийВыборочно Тогда
		
		Для Каждого Строка Из ГраницыЗначений Цикл
			
			Строка.Период=ОбщегоНазначения.ДатаНачалаПериода(Строка.Период,ПериодичностьОграничения);
			
		КонецЦикла;
		
	КонецЕсли;
	
	ФорматПериода();
	
КонецПроцедуры

Процедура ДатаНачалаКонтролирующегоСценарияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Элемент.Значение=ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,ПериодичностьОграничения,Направление);
	
	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ДатаКонцаКонтролирующегоСценарияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,ПериодичностьОграничения,Направление),ПериодичностьОграничения);
	
	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ДатаКонцаКонтролирующегоСценарияПриИзменении(Элемент)
	
	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(Элемент.Значение,ПериодичностьОграничения);
	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ВидОтклоненияКонтролируемыхЗначенийПриИзменении(Элемент)
	
	Если Элемент.Значение=Перечисления.ВидыОтклоненийКонтролируемыхЗначенийБюджетов.Абсолютное Тогда
		ЭлементыФормы.НадписьОтклонение.Заголовок="Отклонение, абс.";
	Иначе
		ЭлементыФормы.НадписьОтклонение.Заголовок="Отклонение, %.";
	КонецЕсли;
		
	
КонецПроцедуры

Процедура ГраницыЗначенийПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока И ВидОграниченияОборотов=Перечисления.ВидыОграниченийОборотовБюджета.КонтролирующийСценарийВыборочно Тогда
		
		Элемент.ТекущаяСтрока.ВидОтклоненияКонтролируемыхЗначений=Перечисления.ВидыОтклоненийКонтролируемыхЗначенийБюджетов.Относительное;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Ответственный.Пустая() Тогда
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ГраницыЗначенийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.Период.Текст=Формат(ДанныеСтроки.Период,ФорматПериод);
	ОформлениеСтроки.Ячейки.Период.ОтображатьТекст=Истина;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры
// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры