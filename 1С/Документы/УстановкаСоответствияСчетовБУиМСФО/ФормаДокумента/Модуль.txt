// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.СоответствиеСчетовБУиМСФО,ЭлементыФормы.КоманднаяПанельСоответствиеСчетов.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ИсключениеПроводок,ЭлементыФормы.КоманднаяПанельИсключениеПроводок.Кнопки.Заполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Обработчик события ПриОткрытии формы.
//
Процедура ПриОткрытии()
	
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда 
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	КонецЕсли;

	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии

// Процедура - обработчик события ПослеЗаписи формы.
Процедура ПослеЗаписи()
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет Табличную часть "СоответствиеСчетовБУиМСФО"
// из РегистрСведений.СоответствиеСчетовБУиМСФО
// по состоянию на дату документа
//
Процедура ЗаполнитьСоответствиеСчетовБУиМСФОпоСостояниюНаДату()
	
	Если СоответствиеСчетовБУиМСФО.Количество() > 0 Тогда
		Ответ = Вопрос("Таблица будет очищена. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК  Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	СоответствиеСчетовБУиМСФО.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ *
	|ИЗ
	|	РегистрСведений.СоответствиеСчетовБУиМСФО.СрезПоследних(&ДатаСреза) КАК СоответствиеСчетовБУиМСФО";
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	
	СоответствиеСчетовБУиМСФО.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Процедура заполняет Табличную часть "ИсключениеПроводок"
// из РегистрСведений.ИсключениеПроводок
// по состоянию на дату документа
//
Процедура ЗаполнитьИсключениеПроводокПоСостояниюНаДату()
	
	Если ИсключениеПроводок.Количество() > 0 Тогда
		Ответ = Вопрос("Таблица будет очищена. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Если Ответ <> КодВозвратаДиалога.ОК  Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли; 
	
	ИсключениеПроводок.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ *
	|ИЗ
	|	РегистрСведений.ИсключениеПроводок.СрезПоследних(&ДатаСреза) КАК ИсключениеПроводок";
	
	Запрос.УстановитьПараметр("ДатаСреза", Дата);
	
	ИсключениеПроводок.Загрузить(Запрос.Выполнить().Выгрузить());
	
КонецПроцедуры

// Процедура установки типа и доступности субконто в зависимости от  выбранного счета
//
// Параметры:
//      Счет - выбранный счет
//      ТабличнаяЧасть - табличная часть на которой расположены счет и субконто
//      ИмяСубконто - префекс наименования субконто. 
//
Процедура СчетПриИзменении(Счет,ТабличнаяЧасть,ИмяСубконто)
	ТекущиеДанные = ТабличнаяЧасть.ТекущиеДанные;
	ТабКол        = ТабличнаяЧасть.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле( Счет,
		ТекущиеДанные[ИмяСубконто+"1"], ТабКол[ИмяСубконто+"1"],
		ТекущиеДанные[ИмяСубконто+"2"], ТабКол[ИмяСубконто+"2"],
		ТекущиеДанные[ИмяСубконто+"3"], ТабКол[ИмяСубконто+"3"])
КонецПроцедуры // () 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура установливет все флажки (реквизит "Учитывается")
// Табличной части "СоответствиеСчетовБУиМСФО"
// 
Процедура КоманднаяПанельСоответствиеСчетовУстановитьФлажки(Кнопка)
	Для каждого Строка Из СоответствиеСчетовБУиМСФО Цикл
		Строка.Учитывается = Истина;
	КонецЦикла; 
КонецПроцедуры

// Процедура снимает все флажки (реквизит "Учитывается")
// Табличной части "СоответствиеСчетовБУиМСФО"
// 
Процедура КоманднаяПанельСоответствиеСчетовСнятьФлажки(Кнопка)
	Для каждого Строка Из СоответствиеСчетовБУиМСФО Цикл
		Строка.Учитывается = Ложь;
	КонецЦикла; 
КонецПроцедуры

// Процедура установливет все флажки (реквизит "Учитывается")
// Табличной части  "ИсключениеПроводок"
// 
Процедура КоманднаяПанельИсключениеПроводокУстановитьФлажки(Кнопка)
	Для каждого Строка Из ИсключениеПроводок Цикл
		Строка.Учитывается = Истина;
	КонецЦикла; 
КонецПроцедуры

// Процедура снимает все флажки (реквизит "Учитывается")
// Табличной части  "ИсключениеПроводок"
// 
Процедура КоманднаяПанельИсключениеПроводокСнятьФлажки(Кнопка)
	Для каждого Строка Из ИсключениеПроводок Цикл
		Строка.Учитывается = Ложь;
	КонецЦикла; 
КонецПроцедуры

// Процедура открывает модальную "ФормаИмпорт"
// для импорта в Табличную часть "СоответствиеСчетовБУиМСФО" из файла 
//
Процедура КоманднаяПанельСоответствиеСчетовИмпорт(Кнопка)
	ФормаИмпорт = ЭтотОбъект.ПолучитьФорму("ФормаИмпорт");
	ФормаИмпорт.ФлажокСоответствиеСчетовБУиМСФО = Истина;
	ФормаИмпорт.ФлажокИсключениеПроводок = Ложь;
	ФормаИмпорт.ДокументОбъект = ЭтотОбъект;
	ФормаИмпорт.ОткрытьМодально();
КонецПроцедуры

// Процедура вызывает заполнение Табличной части "СоответствиеСчетовБУиМСФО"
// из РегистрСведений.СоответствиеСчетовБУиМСФО
// по состоянию на дату документа
//
Процедура КоманднаяПанельСоответствиеСчетовПоТекущемуСоответствию(Кнопка)
	
	ЗаполнитьСоответствиеСчетовБУиМСФОпоСостояниюНаДату();
	
КонецПроцедуры

// Процедура открывает модальную "ФормаИмпорт"
// для импорта в Табличную часть "ИсключениеПроводок" из файла 
//
Процедура КоманднаяПанельИсключениеПроводокИмпорт(Кнопка)
	ФормаИмпорт = ЭтотОбъект.ПолучитьФорму("ФормаИмпорт");
	ФормаИмпорт.ФлажокСоответствиеСчетовБУиМСФО = Ложь;
	ФормаИмпорт.ФлажокИсключениеПроводок = Истина;
	ФормаИмпорт.ДокументОбъект = ЭтотОбъект;
	ФормаИмпорт.ОткрытьМодально();
КонецПроцедуры

// Процедура вызывает заполнение Табличной части "ИсключениеПроводок"
// из РегистрСведений.ИсключениеПроводок
// по состоянию на дату документа
//
Процедура КоманднаяПанельИсключениеПроводокПоТекущемуСоответствию(Кнопка)
	
	ЗаполнитьИсключениеПроводокПоСостояниюНаДату();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТЧ 

// Процедура - обработчик события "ПриНачалеРедактирования" 
// Табличных частей "СоответствиеСчетовБУиМСФО", "ИсключениеПроводок"
// Устанавливает реквизит "Учитывается" для новой строки
//
Процедура ПриНачалеРедактирования(Элемент, НоваяСтрока)
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.Учитывается = Истина;
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// Табличной части "ИсключениеПроводок"
//  для установки типа и доступности субконто
Процедура ИсключениеПроводокПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = ЭлементыФормы.ИсключениеПроводок.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СчетПриИзменении(ТекущиеДанные.СчетДт,ЭлементыФормы.ИсключениеПроводок,"СубконтоДт");
		СчетПриИзменении(ТекущиеДанные.СчетКт,ЭлементыФормы.ИсключениеПроводок,"СубконтоКт");
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// Табличной части "СоответствиеСчетовБУиМСФО"
//  для установки типа и доступности субконто
Процедура СоответствиеСчетовБУиМСФОПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = ЭлементыФормы.СоответствиеСчетовБУиМСФО.ТекущиеДанные;
	
	Если ТекущиеДанные <> Неопределено Тогда
		ТекМодифицированность = Модифицированность;
		СчетПриИзменении(ТекущиеДанные.СчетХозрасчетный,ЭлементыФормы.СоответствиеСчетовБУиМСФО,"СубконтоХозр");
		СчетПриИзменении(ТекущиеДанные.СчетМеждународный,ЭлементыФормы.СоответствиеСчетовБУиМСФО,"СубконтоМежд");
		Модифицированность = ТекМодифицированность;
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ 

// Процедура - обработчик события "ПриИзменении" 
// Реквизита "СчетМеждународный" в табличной части "СоответствиеСчетовБУиМСФО"
// 
Процедура СоответствиеСчетовБУиМСФОСчетМеждународныйПриИзменении(Элемент)
	СчетПриИзменении(Элемент.Значение,ЭлементыФормы.СоответствиеСчетовБУиМСФО,"СубконтоМежд");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// Реквизита "СчетХозрасчетный" в табличной части "СоответствиеСчетовБУиМСФО"
// 
Процедура СоответствиеСчетовБУиМСФОСчетХозрасчетныйПриИзменении(Элемент)
	СчетПриИзменении(Элемент.Значение,ЭлементыФормы.СоответствиеСчетовБУиМСФО,"СубконтоХозр");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// Реквизита "СчетДт" в табличной части "ИсключениеПроводок"
// 
Процедура ИсключениеПроводокСчетДтПриИзменении(Элемент)
	СчетПриИзменении(Элемент.Значение,ЭлементыФормы.ИсключениеПроводок,"СубконтоДт");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// Реквизита "СчетКт" в табличной части "ИсключениеПроводок"
// 
Процедура ИсключениеПроводокСчетКтПриИзменении(Элемент)
	СчетПриИзменении(Элемент.Значение,ЭлементыФормы.ИсключениеПроводок,"СубконтоКт");
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" и "НачалоВыбораИзСписка"
// Реквизита "РеквизитПредставление" в табличной части "СоответствиеСчетовБУиМСФО"
// 
Процедура СоответствиеСчетовБУиМСФОРеквизитПредставлениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = ЭлементыФормы.СоответствиеСчетовБУиМСФО.ТекущиеДанные;
	СчетХозрасчетный = ТекущиеДанные.СчетХозрасчетный;
	СЗ = Новый СписокЗначений();
	Для Ном = 1 по 3 Цикл
		Если (Ном <= СчетХозрасчетный.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(СчетХозрасчетный)) Тогда
			МетаТип = Метаданные.НайтиПоТипу(СчетХозрасчетный.ВидыСубконто[Ном-1].ВидСубконто.ТипЗначения.Типы()[0]);
			Попытка
				Если МетаТип.Реквизиты.Количество() > 0 Тогда
					СЗ.Добавить(Ном-1, СчетХозрасчетный.ВидыСубконто[Ном-1].ВидСубконто.Наименование,,);
				КонецЕсли;
			Исключение
			КонецПопытки; 
		КонецЕсли;
	КонецЦикла;
	
	НомерСубконто = Неопределено;
	Если СЗ.Количество() = 0 Тогда
		Возврат;
	Иначе
		НомерСубконто = ВыбратьИзСписка(СЗ, Элемент,);
	КонецЕсли;
	
	// Выбор реквизита субконто
	СЗ = Новый СписокЗначений();
	Если НомерСубконто <> Неопределено Тогда
		МетаТип = Метаданные.НайтиПоТипу(СчетХозрасчетный.ВидыСубконто[НомерСубконто.Значение].ВидСубконто.ТипЗначения.Типы()[0]);
		Для каждого Рекв Из МетаТип.Реквизиты Цикл
			СЗ.Добавить(Рекв.Имя, Рекв.Синоним);
		КонецЦикла;
	КонецЕсли;

	Рекв = СЗ.ВыбратьЭлемент("Выбор реквизита",);
	
	Если Рекв <> Неопределено Тогда
		ТекущиеДанные.Реквизит = "Субконто" + (НомерСубконто.Значение+1) + "." + Рекв.Значение;
		ТекущиеДанные.РеквизитПредставление = НомерСубконто.Представление + "/" + Рекв.Представление;
		ТекущиеДанные.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(МетаТип.Реквизиты[Рекв.Значение].Тип.Типы()[0]);
		Элемент.Значение = ТекущиеДанные.РеквизитПредставление;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "Очистка" 
// Реквизита "РеквизитПредставление" в табличной части "СоответствиеСчетовБУиМСФО"
// 
Процедура СоответствиеСчетовБУиМСФОРеквизитПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.СоответствиеСчетовБУиМСФО.ТекущиеДанные;
	ТекущиеДанные.Значение = "";
	ТекущиеДанные.Реквизит = "";
	ТекущиеДанные.РеквизитПредставление = "";
КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры