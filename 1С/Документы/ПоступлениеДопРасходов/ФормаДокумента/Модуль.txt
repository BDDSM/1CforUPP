////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит текущее значение валюты документа.
Перем мТекущаяВалютаДокумента;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

Перем мКолонкиТовары, мКолонкиОборудование, мКолонкиДокументы;


Перем мПоДокументамРасчетов;
Перем мОтражатьВРегламентированномУчете;
Перем мРасчетыВУЕ;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

// Хранит курс редактируемой строки табличной части "Предоплата"
Перем мКурсСтрокиДокументаРасчетов;

Перем мПрименениеУСН;
Перем мПрименениеУСНДоходы;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Оборудование,ЭлементыФормы.КоманднаяПанельОборудование.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыРасчетовСКонтрагентом,ЭлементыФормы.КоманднаяПанельДокументыРасчетовСКонтрагентом.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	Если ЗначениеЗаполнено(ДоговорКонтрагента)
		И ДоговорКонтрагента.УчетАгентскогоНДС
		И ДоговорКонтрагента.НалоговыйАгентПоОплате Тогда
		ЭлементыФормы.ГиперссылкаСчетФактура.Гиперссылка = Ложь;
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = "не требуется";
	Иначе
		ЭлементыФормы.ГиперссылкаСчетФактура.Гиперссылка = Истина;
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
		                                                 УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный"));
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура рассчитывает сумму документа и сумму НДС 
// 
Процедура РассчитатьСуммыДокумента()

	СуммаНДС       = УчетНДС.РассчитатьСуммуНДС(Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	СуммаДокумента = Товары.Итог("Сумма") + Оборудование.Итог("Сумма") + Сумма
	                 + ?(СуммаВключаетНДС, 0, (Товары.Итог("СуммаНДС") + Оборудование.Итог("СуммаНДС") + СуммаНДС));

КонецПроцедуры

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ПриходНоменклатураКонтрагента", "По номенклатуре контрагента");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет информационную надпись.
//
Процедура ОбновитьИнфНадписьТовары()

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ЭтотОбъект.ВалютаДокумента))
	   И (ЭтотОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда
	
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
			СтруктураКурсаВалюты  = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);

			ВременнаяСтрока = ВременнаяСтрока + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента,
			                                    СтруктураКурсаВалюты.Курс,
			                                    СтруктураКурсаВалюты.Кратность,
			                                    мВалютаРегламентированногоУчета)
		Иначе
			ВременнаяСтрока = ВременнаяСтрока + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, 
			                                    ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			                                    ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
			                                    мВалютаРегламентированногоУчета);
		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

КонецПроцедуры // ОбновитьИнфНадписьТовары()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Ложь;
	ЕстьСерия = Истина;

	Если ТабличнаяЧасть = Оборудование Тогда
		Команда = "ПодборВТабличнуюЧастьОборудование";
		Валюта  = ВалютаДокумента;
		ИмяТабличнойЧасти = "Оборудование";
	Иначе
		Команда = "ПодборВТабличнуюЧастьТовары";
		Валюта  = ВалютаДокумента;
		ИмяТабличнойЧасти = "Товары";
	КонецЕсли;
	
	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);
	
	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов",       ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Контрагент",         Контрагент);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Организация",        Организация);
	СтруктураПараметровПодбора.Вставить("ТипЦен",             Неопределено);
	СтруктураПараметровПодбора.Вставить("Склад",              Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена" ,          ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия",          ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента",    Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);

	Если ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = Оборудование Тогда
		СтруктураОтбора.Вставить( "ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить( "СерияНоменклатуры"         , Серия);
	КонецЕсли;
	ИмяТабЧасти = ?(ТабличнаяЧасть = Товары, "Товары", "Оборудование");

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

		// Рассчитываем реквизиты табличной части.
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, ИмяТабЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЕсли;

	ЭлементыФормы[ИмяТабЧасти].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ИмяТабЧасти].ТекущаяКолонка = ЭлементыФормы[ИмяТабЧасти].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Пересчитывает суммы в шапке и табличной части документа из одной валюты в другую.
//
// Параметры:
// СтараяВалютаДокумента - старая валюта всех сумм
// НоваяВалютаДокумента - валюта, в которую надо пересчитать суммы
//
Процедура ПересчетСуммДокумента(СтараяВалютаДокумента, НоваяВалютаДокумента, СтарыйКурс = 0, СтараяКратность = 0)

	Если СтараяВалютаДокумента = НоваяВалютаДокумента Тогда
		Возврат;
	КонецЕсли;

	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(НоваяВалютаДокумента, Дата);
	НовыйКурсДокумента      = СтруктураКурсаДокумента.Курс;
	НовыйКратностьДокумента = СтруктураКурсаДокумента.Кратность;

	СтарыйКурс      = ?(СтарыйКурс = 0,      ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),      СтарыйКурс);
	СтараяКратность = ?(СтараяКратность = 0, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), СтараяКратность);
	
	Для каждого СтрокаТабличнойЧасти Из Товары Цикл

		СтрокаТабличнойЧасти.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
												СтараяВалютаДокумента,
												НоваяВалютаДокумента,
												СтарыйКурс,
												НовыйКурсДокумента,
												СтараяКратность,
												НовыйКратностьДокумента);
												
		СтрокаТабличнойЧасти.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаНДС,
												СтараяВалютаДокумента,
												НоваяВалютаДокумента,
												СтарыйКурс,
												НовыйКурсДокумента,
												СтараяКратность,
												НовыйКратностьДокумента);

	КонецЦикла;
												  
	Для каждого СтрокаТабличнойЧасти Из Оборудование Цикл

		СтрокаТабличнойЧасти.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
												СтараяВалютаДокумента,
												НоваяВалютаДокумента,
												СтарыйКурс,
												НовыйКурсДокумента,
												СтараяКратность,
												НовыйКратностьДокумента);

		СтрокаТабличнойЧасти.СуммаНДС = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаНДС,
												СтараяВалютаДокумента,
												НоваяВалютаДокумента,
												СтарыйКурс,
												НовыйКурсДокумента,
												СтараяКратность,
												НовыйКратностьДокумента);

	КонецЦикла;


	Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма,
					   СтараяВалютаДокумента,
					   НоваяВалютаДокумента,
					   СтарыйКурс,
					   НовыйКурсДокумента,
					   СтараяКратность,
					   НовыйКратностьДокумента);

	РассчитатьСуммыДокумента();

КонецПроцедуры // ПересчетСуммДокумента()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	ЭтотОбъект.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда

		ЗаполнитьТекстПроСчетФактуру();
		КурсВзаиморасчетов      = 0;
		КратностьВзаиморасчетов = 0;

		Возврат;

	КонецЕсли;

	Если Контрагент <> ДоговорКонтрагента.Владелец Тогда
		Контрагент = ДоговорКонтрагента.Владелец;
	КонецЕсли;

	Если НЕ ((Товары.Итог("Сумма") = 0) И (Товары.Итог("СуммаТовара") = 0) И (Сумма = 0)) Тогда

		// Валюта документа
		Если ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда

			НоваяВалютаДокумента = ДоговорКонтрагента.ВалютаВзаиморасчетов;

			Если ВалютаДокумента <> НоваяВалютаДокумента Тогда
				ТекстВопроса = "Договор с контрагентом предусматривает параметры взаиморасчетов,
				               |отличные от установленных в документе.
				               |Валюта документа: """ +
				               ?(НЕ ЗначениеЗаполнено(ВалютаДокумента), "не задана",СокрЛП(ВалютаДокумента)) +
				               """, договора: """ +  СокрЛП(НоваяВалютаДокумента) + """.
				               |Пересчитать документ в соответствии с договором?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

				Если Ответ = КодВозвратаДиалога.Да Тогда
					ПересчетСуммДокумента(ВалютаДокумента, НоваяВалютаДокумента);
				КонецЕсли;
			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

	ВалютаДокумента              = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтруктураКурсаНовый          = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсВзаиморасчетов           = СтруктураКурсаНовый.Курс;
	КратностьВзаиморасчетов      = СтруктураКурсаНовый.Кратность;
	КурсДокумента                = СтруктураКурсаНовый.Курс;
	КратностьДокумента           = СтруктураКурсаНовый.Кратность;
	мТекущаяВалютаДокумента      = ВалютаДокумента;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, , Истина);
	УстановитьЗаголовкиПоДоговору();
	ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Ложь);

	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	мРасчетыВУЕ           = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;

	ЗаполнитьТекстПроСчетФактуру();
	УстановитьВидимость();
	ОбновитьИнфНадписьТовары();
	УстановитьАвтоотметку();

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
	
КонецПроцедуры // ПриИзмененииДоговора()

// Процедура выполняет копирование табличной части заказа поставщику в документ.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧастьПоПоступлению(ТабЧасть, СпособЗаполнения)

	ФормаПоступления = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора();
	ФормаПоступления.Заголовок   = "Выберите документ поступления для заполнения поступления доп. расходов";
	ФормаПоступления.РежимВыбора = Истина;

	ФормаПоступления.ДокументСписок.Отбор.Организация.Использование = Истина;
	ФормаПоступления.ДокументСписок.Отбор.Организация.Значение      = Организация;

	Если ТабЧасть = Оборудование Тогда
		
		ФормаПоступления.ДокументСписок.Отбор.ВидОперации.Использование = Истина;
		ФормаПоступления.ДокументСписок.Отбор.ВидОперации.Значение      = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
		
	ИначеЕсли ТабЧасть = Товары Тогда
		
		ФормаПоступления.ДокументСписок.Отбор.ВидОперации.Использование = Истина;
		ФормаПоступления.ДокументСписок.Отбор.ВидОперации.ВидСравнения  = ВидСравнения.НеРавно;
		ФормаПоступления.ДокументСписок.Отбор.ВидОперации.Значение      = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;
		
	КонецЕсли;

	Поступление = ФормаПоступления.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(Поступление) Тогда
		Возврат;
	Иначе
		Если Поступление.ДоговорКонтрагента.ВидДоговора  = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			Предупреждение("Нельзя использовать документ приема товаров на комиссию!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если ТабЧасть.Количество() > 0 И СпособЗаполнения = "Заполнить" Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		ТабЧасть.Очистить();
	КонецЕсли;

	ЗаполнитьТоварыПоПоступлениюТоваров(Поступление, ТабЧасть);

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоПоступлению()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

КонецПроцедуры

// Процедура показывает на закладке "Предоплата" итоговые суммы 
// в валюте взаиморасчетов и в валюте регл.учета - всего по документу, предоплата, осталось оплатить
//
Процедура ПересчетСуммВзаиморасчетов()

	СуммаВзаиморасчетов = Сумма + Товары.Итог("Сумма") + Оборудование.Итог("Сумма")
	                 + ?(СуммаВключаетНДС, 0, (Товары.Итог("СуммаНДС")+ Оборудование.Итог("СуммаНДС") + СуммаНДС));
	СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетов, ВалютаДокумента,
	                                                 ДоговорКонтрагента.ВалютаВзаиморасчетов,
	                                                 ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
	                                                 ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);

	РаботаСДиалогами.ЗаполнитьНадписиРасчетовСКонтрагентом(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, СуммаВзаиморасчетов);

КонецПроцедуры

// Процедура распределяем сумму расходов и сумму НДС расходов из шапки документа
// по строкам табличной части по способу распределения, указанному в шапке документа.
//
Процедура РаспределитьСуммуРасходаПоТабличнойЧасти(ТабличнаяЧасть)
	
	Если Сумма = 0 Тогда
		ОбщегоНазначения.Сообщение("Не указана сумма расходов для распределения по табличной части", СтатусСообщения.Внимание);
		Возврат;
	ИначеЕсли ТабличнаяЧасть.Количество() = 0 Тогда
		ОбщегоНазначения.Сообщение("Табличная часть не содержит ни одной строки", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	// Получим массив коэффициентов для распределения суммы расходов
	Если СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоВесу Тогда
		
		МассивКоэффициентов = Новый Массив;
		СуммаКоэффициентов  = 0;
		
		Для Каждого Строка Из ТабличнаяЧасть Цикл
			КоэффициентСтроки  = Окр(Строка.Количество * Строка.ЕдиницаИзмерения.Вес, 3);
			СуммаКоэффициентов = СуммаКоэффициентов + КоэффициентСтроки;
			
			МассивКоэффициентов.Добавить(КоэффициентСтроки);
		КонецЦикла;
		
	ИначеЕсли СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоКоличеству Тогда
		
		МассивКоэффициентов = ТабличнаяЧасть.ВыгрузитьКолонку("Количество");
		СуммаКоэффициентов  = ТабличнаяЧасть.Итог("Количество");
		
	ИначеЕсли СпособРаспределения = Перечисления.СпособыРаспределенияДопРасходов.ПоСумме Тогда
		
		МассивКоэффициентов = ТабличнаяЧасть.ВыгрузитьКолонку("СуммаТовара");
		СуммаКоэффициентов  = ТабличнаяЧасть.Итог("СуммаТовара");
		
	Иначе
		
		ОбщегоНазначения.Сообщение("Не указан способ распределения", СтатусСообщения.Внимание);
		Возврат;
		
	КонецЕсли;
	
	Если СуммаКоэффициентов = 0 Тогда
		ОбщегоНазначения.Сообщение("В табличной части не указаны коэффициенты распределения", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	// Распределим сумму расходов из шапки документа пропорционально коэффициентам.
	// Сумму расходов в шапке документа обнулим.
	РезультатРаспределения = ОбщегоНазначения.РаспределитьПропорционально(Сумма, МассивКоэффициентов);
	
	Для НомерСтроки = 0 По РезультатРаспределения.Количество() - 1 Цикл
		ТабличнаяЧасть[НомерСтроки].Сумма = ТабличнаяЧасть[НомерСтроки].Сумма + РезультатРаспределения[НомерСтроки];
	КонецЦикла;
	
	Сумма = 0;
	
	Если УчитыватьНДС И СуммаНДС > 0 Тогда
		
		// Аналогично распределим сумму НДС расходов из шапки документа.
		РезультатРаспределения = ОбщегоНазначения.РаспределитьПропорционально(СуммаНДС, МассивКоэффициентов);
		
		Для НомерСтроки = 0 По РезультатРаспределения.Количество() - 1 Цикл
			ТабличнаяЧасть[НомерСтроки].СуммаНДС = ТабличнаяЧасть[НомерСтроки].СуммаНДС + РезультатРаспределения[НомерСтроки];
		КонецЦикла;
		
		СуммаНДС = 0;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ДоступностьКонтрагента = НЕ(ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход);

	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость = мПоДокументамРасчетов;
	
	Если НЕ (ДоступностьКонтрагента = ЭлементыФормы.Контрагент.Доступность) Тогда
		ЭлементыФормы.Контрагент.Доступность        = ДоступностьКонтрагента;
		ЭлементыФормы.НадписьКонтрагент.Доступность = ДоступностьКонтрагента;
	КонецЕсли;

	Если НЕ (ДоступностьКонтрагента = ЭлементыФормы.ДоговорКонтрагента.Доступность) Тогда
		ЭлементыФормы.ДоговорКонтрагента.Доступность = ДоступностьКонтрагента;
		ЭлементыФормы.НадписьДоговор.Доступность     = ДоступностьКонтрагента;
	КонецЕсли;

	Если НЕ (ДоступностьКонтрагента = ЭлементыФормы.Сделка.Доступность) Тогда
		ЭлементыФормы.Сделка.Доступность        = ДоступностьКонтрагента;
		ЭлементыФормы.НадписьСделка.Доступность = ДоступностьКонтрагента;
	КонецЕсли;

	ОтражатьВНалоговомУчетеУСН = (мПрименениеУСН И ОтражатьВНалоговомУчете И (НЕ мПрименениеУСНДоходы));
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	
	ЭлементыФормы.ГиперссылкаСчетФактура.Видимость = ДоступностьКонтрагента;
	ЭлементыФормы.НадписьСчетФактура.Видимость     = ДоступностьКонтрагента;

	//Установка видимости, автоотметки незаполненного полей со счетами учета номенклатуры и затрат
	СтруктураТабличныхЧастей = Новый Структура();
	СтруктураТабличныхЧастей.Вставить("Товары", 		мКолонкиТовары);
	СтруктураТабличныхЧастей.Вставить("Оборудование", 	мКолонкиОборудование);
	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(Дата, Метаданные().Имя, ЭлементыФормы, СтруктураТабличныхЧастей, ПоказыватьВДокументахСчетаУчета, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП, УчитыватьНДС и НЕ НДСВключенВСтоимость);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ОтражениеВУСН,  ОтражатьВНалоговомУчетеУСН);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтатьяЗатратНУ, ОтражатьВНалоговомУчетеНП);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиОборудование.СтатьяЗатратНУ, ОтражатьВНалоговомУчетеНП);

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность     = Ложь;
		ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = Ложь;
		ЭлементыФормы.НадписьВсегоНДС.Видимость               = Ложь;
		ЭлементыФормы.ВсегоНДС.Видимость                      = Ложь;
		ЭлементыФормы.НадписьСтавкаНДС.Видимость              = Ложь;
		ЭлементыФормы.СтавкаНДС.Видимость                     = Ложь;
		ЭлементыФормы.НадписьСуммаНДС.Видимость               = Ложь;
		ЭлементыФормы.СуммаНДС.Видимость                      = Ложь;
		ЭлементыФормы.ИнфНадписьДолга.Видимость               = Ложь;
		ЭлементыФормы.КнопкаПерерассчитатьДолг.Видимость       = Ложь;

		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС,       Ложь);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиОборудование.СуммаНДС, Ложь);
	Иначе
		ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = мОтражатьВРегламентированномУчете;
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность     = ОтражатьВБухгалтерскомУчете
		                                                        И (ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		ЭлементыФормы.ИнфНадписьДолга.Видимость               = Истина;
		ЭлементыФормы.КнопкаПерерассчитатьДолг.Видимость       = Истина;
		ЭлементыФормы.НадписьСтавкаНДС.Видимость              = УчитыватьНДС;
		ЭлементыФормы.СтавкаНДС.Видимость                     = УчитыватьНДС;
		ЭлементыФормы.НадписьСуммаНДС.Видимость               = УчитыватьНДС;
		ЭлементыФормы.СуммаНДС.Видимость                      = УчитыватьНДС;
		ЭлементыФормы.НадписьВсегоНДС.Видимость               = УчитыватьНДС;
		ЭлементыФормы.ВсегоНДС.Видимость                      = УчитыватьНДС;

		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС,       УчитыватьНДС);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиОборудование.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;

	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Дополнительно.Видимость                  = Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ДополнительноБезВзаиморасчетов.Видимость = Истина;
		Если ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Дополнительно Тогда
			ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ДополнительноБезВзаиморасчетов;
		КонецЕсли;

	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.Дополнительно.Видимость                  = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ДополнительноБезВзаиморасчетов.Видимость = Ложь;
		Если ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ДополнительноБезВзаиморасчетов Тогда
			ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Дополнительно;
		КонецЕсли;

	КонецЕсли;

	// Видимость колонок таблицы документов расчетов
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.СуммаРегл,  мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.ДатаОплаты, мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает автоотметку незаполненного для тех колонок в табличной части 
// "Товары", обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	// Сделка должна заполняться, если ведение взаиморасчетов - по заказам
	Автоотметка = Ложь;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			АвтоОтметка = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		ЭлементыФормы.Контрагент.АвтоОтметкаНезаполненного         = Ложь;
		ЭлементыФормы.Контрагент.ОтметкаНезаполненного             = Ложь;
		ЭлементыФормы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.ДоговорКонтрагента.ОтметкаНезаполненного     = Ложь;
		ЭлементыФормы.СтавкаНДС.АвтоОтметкаНезаполненного		   = Ложь;
		ЭлементыФормы.СтавкаНДС.ОтметкаНезаполненного			   = Ложь;
	Иначе
		ЭлементыФормы.Контрагент.АвтоОтметкаНезаполненного         = Истина;
		ЭлементыФормы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = Истина;
		ЭлементыФормы.СтавкаНДС.АвтоОтметкаНезаполненного		   = УчитыватьНДС;
	КонецЕсли;
	
	Если ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.Сделка.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(Сделка) Тогда
		ЭлементыФормы.Сделка.ОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотментку()

// Процедура устанавливает заголовки по выбранному договору для:
// - колонок табличной части "Возвратная тара";
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	РаботаСДиалогами.УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма, Ложь);
	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	НДСДокумента      = Товары.Итог("СуммаНДС") + Оборудование.Итог("СуммаНДС") + СуммаНДС;
	ПромежуточныйИтог = Товары.Итог("Сумма") + Оборудование.Итог("Сумма") + Сумма + ?(СуммаВключаетНДС, 0, НДСДокумента);

	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(ПромежуточныйИтог);
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(НДСДокумента);

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если ЗначениеЗаполнено(ПараметрОснование) Тогда

		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И
			ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			Предупреждение("Поступление доп. расходов не должно вводиться на основании документа поступление товаров в переработку!");
			Отказ = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		 ИЛИ ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслугВНТТ") Тогда
		 Если ПараметрОснование.ДоговорКонтрагента.ВидДоговора  = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
				Предупреждение("Поступление доп. расходов не должно вводиться на основании документа приема товаров на комиссию!");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка", ПараметрОбъектКопирования);
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
	КонецЕсли;
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		Если ОтражатьВБухгалтерскомУчете Тогда
			ОтражатьВБухгалтерскомУчете = Ложь;
		КонецЕсли;	
		Если ОтражатьВНалоговомУчете Тогда
			ОтражатьВНалоговомУчете     = Ложь;
		КонецЕсли;	
	КонецЕсли;		
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Определить счет-фактуру, введенный на основании этого документа, если такой 
	// счет-фактура существует.
	ЗаполнитьТекстПроСчетФактуру();

	// Обновить содержание информационных строк.
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, , Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента             = Дата;
	мТекущаяВалютаДокумента           = ВалютаДокумента;
	мТекущаяВалютаВзаиморасчетов      = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мПрименениеУСН 		 = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);
	
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиОборудование);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиОборудование);
	
	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	мРасчетыВУЕ           = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить автоотметку незаполненного
	УстановитьАвтоотметку();

	ОбновитьИнфНадписьТовары();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма + Товары.Итог("Сумма"),  
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                               КурсВзаиморасчетов,
	                                                                               КратностьВзаиморасчетов,
	                                                                               мВалютаРегламентированногоУчета,
	                                                                               Истина);

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	СтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницыПанели.Товары      .Заголовок = "Товары ("       + ЭтотОбъект.Товары      .Количество() + " поз.)";
	СтраницыПанели.Оборудование.Заголовок = "Оборудование (" + ЭтотОбъект.Оборудование.Количество() + " поз.)";
	СтраницыПанели.ДокументыРасчетовСКонтрагентом.Заголовок = "Предоплата (" + ЭтотОбъект.ДокументыРасчетовСКонтрагентом.Количество() + " поз.)";

	ВременнаяСтрока = "Сумма" + Символы.ПС + "расхода (";

	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьСуммаРасхода.Заголовок = ВременнаяСтрока + "<>):";
	Иначе
		ЭлементыФормы.НадписьСуммаРасхода.Заголовок = ВременнаяСтрока + СокрЛП(ЭтотОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если Сумма = 0 Тогда
		ЭлементыФормы.СпособРаспределения.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.СпособРаспределения.ОтметкаНезаполненного     = Ложь;
	Иначе
		ЭлементыФормы.СпособРаспределения.АвтоОтметкаНезаполненного = Истина;
	КонецЕсли;
	
	ПересчетСуммВзаиморасчетов();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьОборудование" Тогда
			ОбработкаПодбора(Оборудование, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Оборудование" Тогда
		ОбработкаПодбора(Оборудование, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Оборудование" Тогда
		ОбработкаПодбора(Оборудование, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоПоступлению(Кнопка)

	ЗаполнитьТабличнуюЧастьПоПоступлению( Товары, "Заполнить");

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеДобавитьИзПоступления(Кнопка)

	ЗаполнитьТабличнуюЧастьПоПоступлению( Товары, "Добавить");

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при выборе пункта меню "Распределить сумму расхода по товарам" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыРаспределитьСуммуРасходаПоТоварам(Кнопка)
	
	РаспределитьСуммуРасходаПоТабличнойЧасти(Товары);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");
	СтруктураЗапрещенных = Новый Структура();
	СтруктураЗапрещенных.Вставить("УсловиеПродаж");
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		СтруктураРеквизитовДокумента.Вставить("БезКонтроляВалютыВзаиморасчетов");
		СтруктураЗапрещенных.Вставить("НДСВключенВСтоимость");
		СтруктураЗапрещенных.Вставить("УчитыватьНДС");
		СтруктураЗапрещенных.Вставить("СуммаВключаетНДС");
		СтруктураЗапрещенных.Вставить("КурсВзаиморасчетов");
	КонецЕсли;

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект,
	                                            СтруктураРеквизитовДокумента,
	                                            мВалютаРегламентированногоУчета,
	                                            СтруктураЗапрещенных,
	                                            "Товары");

	Если СтруктураЗначений <> Неопределено Тогда
		ПересчитатьСуммы = СтруктураЗначений.ПересчитатьЦеныПоВалюте;
		СтруктураЗначений.ПересчитатьЦеныПоВалюте = Ложь;
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, СтруктураЗапрещенных, "Товары", мВалютаРегламентированногоУчета,, СтруктураЗначений);

		Если СтруктураЗначений.НовыйВалютаДокумента <> СтруктураЗначений.ТекущийВалютаДокумента Тогда
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
				СтруктураКурсаВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(СтруктураЗначений.НовыйВалютаДокумента, Дата);
				КурсВзаиморасчетов      = СтруктураКурсаВалюты.Курс;
				КратностьВзаиморасчетов = СтруктураКурсаВалюты.Кратность;
			КонецЕсли;
		КонецЕсли;

		Для каждого СтрокаТабличнойЧасти Из Товары Цикл
			РассчитатьСуммуНДСТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЦикла;

		Если ПересчитатьСуммы Тогда
			ПересчетСуммДокумента(СтруктураЗначений.ТекущийВалютаДокумента, СтруктураЗначений.НовыйВалютаДокумента,
								СтруктураЗначений.ТекущийКурсДокумента, СтруктураЗначений.ТекущийКратностьДокумента);
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимость();
	УстановитьАвтоотметку();
	ОбновитьИнфНадписьТовары();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" кнопки "Заполнить"
// командной панели табличного поля "Оборудование",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельОборудованиеЗаполнитьПоПоступлению(Кнопка)

	ЗаполнитьТабличнуюЧастьПоПоступлению( Оборудование, "Заполнить");

КонецПроцедуры // КоманднаяПанельОборудованиеЗаполнитьПоПоступлению()

// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Оборудование",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельОборудованиеДобавитьИзПоступления(Кнопка)

	ЗаполнитьТабличнуюЧастьПоПоступлению( Оборудование, "Добавить");

КонецПроцедуры // КоманднаяПанельОборудованиеДобавитьИзПоступления()

// Процедура вызывается при выборе пункта меню "Распределить сумму расхода по оборудованию" кнопки "Заполнить"
// командной панели табличного поля "Оборудование",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельОборудованиеРаспределитьСуммуРасходаПоОборудованию(Кнопка)
	
	РаспределитьСуммуРасходаПоТабличнойЧасти(Оборудование);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Оборудование", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Оборудование".
//
Процедура КоманднаяПанельОборудованиеДействиеПодбор(Кнопка)

	ДействиеПодбор(Оборудование);

КонецПроцедуры // КоманднаяПанельОборудованиеДействиеПодбор()

// Процедура вызывается при выборе пункта меню "Заполнить по заказам документа" 
// кнопки "Заполнить" командной панели табличного поля "Документы расчетов с контрагентом",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельДокументыРасчетовСКонтрагентомЗаполнитьТолькоПоЗаказу(Кнопка)
	
	УправлениеВзаиморасчетами.ЗаполнитьПредоплату(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	//проверка наличия счета-фактуры на основании документа
	СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный");
	Если СчетФактура <> неопределено Тогда
		Сообщить("На основании данного документа введен документ ""Счет-фактура полученный"". Запрещено изменять вид операции документа.", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов[Кнопка.Имя];
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		Контрагент                  = Неопределено;
		ДоговорКонтрагента          = Неопределено;
		мПоДокументамРасчетов		= Ложь;
		Сделка                      = Неопределено;
		КратностьВзаиморасчетов     = 0;
		КурсВзаиморасчетов          = 0;
		ОтражатьВБухгалтерскомУчете = Ложь;
		ОтражатьВНалоговомУчете     = Ложь;

		УчитыватьНДС                = Ложь;
		СуммаВключаетНДС            = Ложь;
		НДСВключенВСтоимость        = Ложь;
		СтавкаНДС                   = Неопределено;
		СуммаНДС                    = 0;

		Для каждого СтрокаТабличнойЧасти Из Товары Цикл
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		КонецЦикла;
		Для каждого СтрокаТабличнойЧасти Из Оборудование Цикл
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		КонецЦикла;

		СтруктураКурсаВалюты    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсВзаиморасчетов      = СтруктураКурсаВалюты.Курс;
		КратностьВзаиморасчетов = СтруктураКурсаВалюты.Кратность;

	Иначе
		ОтражатьВБухгалтерскомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВБухгалтерскомУчете");
		
		Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
		КонецЕсли;

		
		СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, Новый Структура("Товары,Оборудование"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

	ОбновитьИнфНадписьТовары();

	// Установить автоотметку незаполненного
	УстановитьАвтоотметку();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	мПрименениеУСН 		 = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	КонецЕсли;

	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, Новый Структура("Товары,Оборудование"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Товары,Оборудование"), Неопределено, ОтражатьВНалоговомУчете);

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	мПрименениеУСН 		 = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	СтарыйДоговор = ДоговорКонтрагента;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,Истина);
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход Тогда
		ОтражатьВБухгалтерскомУчете = Ложь;
		ОтражатьВНалоговомУчете     = Ложь;
	КонецЕсли;	

	
	Если НЕ СтарыйДоговор = ДоговорКонтрагента Тогда
		ПриИзмененииДоговора();
	КонецЕсли;	
	
	УстановитьВидимость();
	
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;
	
	СписокВидовДоговоров = Новый СписокЗначений;
	СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        СписокВидовДоговоров, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Данный документ выполняет расход по регистру взаиморасчетов.
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, 
	                     "Расход", "ЗаказПоставщику");

КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Сумма
//
Процедура СуммаПриИзменении(Элемент)

	РассчитатьСуммыДокумента();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкаНДС
//
Процедура СтавкаНДСПриИзменении(Элемент)

	Для каждого СтрокаТабличнойЧасти Из Товары Цикл
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из Оборудование Цикл
		СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	КонецЦикла;

	РассчитатьСуммыДокумента();

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерассчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерассчитатьДолгНажатие(Элемент)

	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерассчитатьАвансДоговораНажатие()

Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Вес".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Вес.Видимость Тогда
		ОбщийВесТовара = ДанныеСтроки.ЕдиницаИзмерения.Вес * ДанныеСтроки.Количество; 
		ОформлениеСтроки.Ячейки.Вес.УстановитьТекст(Формат(ОбщийВесТовара, "ЧДЦ=3"));
	КонецЕсли;

	// Установим автоотметку незаполненого для документа партии
	// Она должна быть установлена, если вид операции - внутренний расход.
	Автоотметка = Ложь;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход
	  ИЛИ ОтражатьВБухгалтерскомУчете Тогда
		Автоотметка = Истина;
	КонецЕсли;

	Если ОформлениеСтроки.Ячейки.ДокументПартии.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(ДанныеСтроки.ДокументПартии) Тогда
		ОформлениеСтроки.Ячейки.ДокументПартии.ОтметкаНезаполненного = Автоотметка 
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТЧ.Коэффициент      = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент; 

	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);
	ПриИзмененииНоменклатурыТоваров(СтрокаТЧ);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	ТоварыПриАктивизацииСтроки(Элемент);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Сумма
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти          = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	РассчитатьСуммыДокумента();

КонецПроцедуры

Процедура ТоварыСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура ТоварыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(СтрокаТЧ);

	ТоварыСчетУчетаНУПриИзменении(ЭлементыФормы.Товары.ТекущаяСтрока.СчетУчетаНУ);
	
	СтрокаТЧ.ПодразделениеОрганизации = Неопределено;

	ТоварыПриАктивизацииСтроки(Элемент);

КонецПроцедуры

Процедура ТоварыДокументПартииНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "Товары");
КонецПроцедуры

Процедура ТоварыПриАктивизацииСтроки(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	Если СтрокаТЧ = Неопределено Тогда
		ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
		ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
		Возврат;
	КонецЕсли;

	Если СтрокаТЧ.СчетУчетаНУ.ВидыСубконто.Количество() = 0 Тогда
		ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
		Возврат;
	КонецЕсли;

	Если СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Истина;
	Иначе
		ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
	КонецЕсли;
	
	Если ЭлементыФормы.Товары.Колонки.СтатьяЗатратНУ.Доступность Тогда
		ЭлементыФормы.Товары.Колонки.ПодразделениеОрганизации.Доступность = Истина;
	Иначе
		ЭлементыФормы.Товары.Колонки.ПодразделениеОрганизации.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыСчетУчетаНУПриИзменении(Элемент)

	ТоварыПриАктивизацииСтроки(Элемент);

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
		СтрокаТЧ.СтатьяЗатратНУ = Неопределено;
		Возврат;
	КонецЕсли;

	Если СтрокаТЧ.СчетУчетаНУ.ВидыСубконто.Количество() = 0 Тогда
		СтрокаТЧ.СтатьяЗатратНУ = Неопределено;
		Возврат;
	КонецЕсли;

	Если НЕ (СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.СтатьиЗатрат")) И НЕ СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		СтрокаТЧ.СтатьяЗатратНУ = Неопределено;
		СтрокаТЧ.ПодразделениеОрганизации = Неопределено;
	Иначе
		СтрокаТЧ.СтатьяЗатратНУ = Новый(СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ОБОРУДОВАНИЕ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Оборудование". Формирует данные в колонке "Вес".
//
Процедура ОборудованиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Оборудование.Колонки.Вес.Видимость Тогда
		ОбщийВесТовара = ДанныеСтроки.ЕдиницаИзмерения.Вес * ДанныеСтроки.Количество; 
		ОформлениеСтроки.Ячейки.Вес.УстановитьТекст(Формат(ОбщийВесТовара, "ЧДЦ=3"));
	КонецЕсли;
	
	// Установим автоотметку незаполненого для документа партии
	// Она должна быть установлена, если вид операции - внутренний расход.
	Автоотметка = Ложь;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеДопРасходов.ВнутреннийРасход
	  ИЛИ ОтражатьВБухгалтерскомУчете Тогда	
		Автоотметка = Истина;
	КонецЕсли;

	Если ОформлениеСтроки.Ячейки.ДокументПартии.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(ДанныеСтроки.ДокументПартии) Тогда
		ОформлениеСтроки.Ячейки.ДокументПартии.ОтметкаНезаполненного = Автоотметка 
	КонецЕсли;

КонецПроцедуры // ОборудованиеПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Оборудование.ТекущиеДанные;

	СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТЧ.Коэффициент      = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент; 

	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);
	ПриИзмененииНоменклатурыТоваров(СтрокаТЧ);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Оборудование", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	ТоварыПриАктивизацииСтроки(Элемент);

КонецПроцедуры // ОборудованиеНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ОборудованиеЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Сумма
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти          = ЭлементыФормы.Оборудование.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма, УчитыватьНДС, СуммаВключаетНДС, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	РассчитатьСуммыДокумента();

КонецПроцедуры // ОборудованиеСуммаПриИзменении(Элемент)

Процедура ОборудованиеСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // ОборудованиеСчетУчетаНДСОбработкаВыбора()

Процедура ОборудованиеСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // ОборудованиеСчетУчетаБУОбработкаВыбора()

Процедура ОборудованиеСчетУчетаБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Оборудование.ТекущиеДанные;

	ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(СтрокаТЧ);

	ОборудованиеСчетУчетаНУПриИзменении(ЭлементыФормы.Оборудование.ТекущаяСтрока.СчетУчетаНУ);

	ОборудованиеПриАктивизацииСтроки(Элемент);

КонецПроцедуры // ОборудованиеСчетУчетаБУПриИзменении()

Процедура ОборудованиеДокументПартииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(
		ЭтотОбъект,	ЭтаФорма, Элемент,
		СтандартнаяОбработка,
		Новый Структура("ВидОперации", Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование),
		"Оборудование");
	
КонецПроцедуры // ОборудованиеДокументПартииНачалоВыбора()

Процедура ОборудованиеПриАктивизацииСтроки(Элемент)

	СтрокаТЧ = ЭлементыФормы.Оборудование.ТекущиеДанные;

	Если СтрокаТЧ = Неопределено Тогда
		ЭлементыФормы.Оборудование.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
		ЭлементыФормы.Оборудование.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
		Возврат;
	КонецЕсли;

	Если СтрокаТЧ.СчетУчетаНУ.ВидыСубконто.Количество() = 0 Тогда
		ЭлементыФормы.Оборудование.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
		Возврат;
	КонецЕсли;

	Если СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.СтатьиЗатрат") ИЛИ СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ПрочиеДоходыИРасходы") Тогда
		ЭлементыФормы.Оборудование.Колонки.СтатьяЗатратНУ.Доступность = Истина;
	Иначе
		ЭлементыФормы.Оборудование.Колонки.СтатьяЗатратНУ.Доступность = Ложь;
	КонецЕсли;
	
	Если ЭлементыФормы.Оборудование.Колонки.СтатьяЗатратНУ.Доступность Тогда
		ЭлементыФормы.Оборудование.Колонки.ПодразделениеОрганизации.Доступность = Истина;
	Иначе
		ЭлементыФормы.Оборудование.Колонки.ПодразделениеОрганизации.Доступность = Ложь;
	КонецЕсли;

КонецПроцедуры // ОборудованиеПриАктивизацииСтроки()

Процедура ОборудованиеСчетУчетаНУПриИзменении(Элемент)

	ОборудованиеПриАктивизацииСтроки(Элемент);

	СтрокаТЧ = ЭлементыФормы.Оборудование.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетУчетаНУ) Тогда
		Возврат;
	КонецЕсли;

	Если СтрокаТЧ.СчетУчетаНУ.ВидыСубконто.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если (НЕ (СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.СтатьиЗатрат"))) И (НЕ (СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0] = Тип("СправочникСсылка.ПрочиеДоходыИРасходы"))) Тогда
		СтрокаТЧ.СтатьяЗатратНУ = Неопределено;
		СтрокаТЧ.ПодразделениеОрганизации = Неопределено;
	Иначе
		СтрокаТЧ.СтатьяЗатратНУ = Новый(СтрокаТЧ.СчетУчетаНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
	КонецЕсли;

КонецПроцедуры

Процедура ОборудованиеДокументПартииПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) И ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") И
		 НЕ Элемент.Значение.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		Сообщить("Выберите документ с видом операции ""Оборудование""!", СтатусСообщения.Важное);
		Элемент.Значение = Документы.ПоступлениеТоваровУслуг.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ОборудованиеДокументПартииПриИзменении()


// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура ОборудованиеСтатьяЗатратНУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ОборудованиеСтатьяЗатратНУОчистка()

Процедура ТоварыСтатьяЗатратНУОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ТоварыСтатьяЗатратНУОчистка()

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЧ ДокументыРасчетовСКонтрагентом

// Процедура рассчитывает суммы в строке табличной части ДокументыРасчетовСКонтрагентом
// 
// Параметры:
// ТекДанные                       - <Текущие данные строки табличной части>
// РассчитыватьСуммуВзаиморасчетов - <Булево> Если Истина - рассчитывается и сумма взаиморасчетов, и сумма регл.учета
//                                   Если Ложь - рассчитывается только сумма регл.учета
//
Процедура РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, РассчитыватьСуммуВзаиморасчетов = Истина)

	мСтруктураПараметровВзаиморасчетов.Вставить("КурсСтрокиДокументаРасчетов", мКурсСтрокиДокументаРасчетов);
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ТекДанные, мСтруктураПараметровВзаиморасчетов, РассчитыватьСуммуВзаиморасчетов);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента,
														Сделка, СтандартнаяОбработка, "Расход");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	УправлениеВзаиморасчетами.ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(ТекДанные);
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СуммаВзаиморасчетов
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ "ДокументыРасчетовСКонтрагентом".
//
Процедура ДокументыРасчетовСКонтрагентомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	мКурсСтрокиДокументаРасчетов = ?(ТекДанные.СуммаВзаиморасчетов = 0, 0, ТекДанные.СуммаРегл / ТекДанные.СуммаВзаиморасчетов);
КонецПроцедуры

// Расчет суммы НДС в табличной части, исходя из ставки, заданной в шапке документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСТабличнойЧасти(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
    	                                               УчитыватьНДС, 
													   СуммаВключаетНДС,
            	                                       УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));

КонецПроцедуры // РассчитатьСуммуНДСТабличнойЧасти()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары       = ЭлементыФормы.Товары.Колонки;
мКолонкиОборудование = ЭлементыФормы.Оборудование.Колонки;
мКолонкиДокументы    = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.Колонки;