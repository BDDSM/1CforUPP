// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;
// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;
// Хранит элемент управления подменю печати
Перем мПодменюПечати;
// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;
// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// Хранит значение поля иная полезная информация для автозаполнения
Перем мИнаяПолезнаяИнформация;

// Указывает возможность автозаполнения поля иная полезнаяинформация
Перем мАвтозаполнениеИнаяПолезнаяИнформацияВозможно;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьАдресаСотрудникаВФорме()

	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	НетОтображаемыхСтрок = ТекущаяСтрока = Неопределено;
	
	Если Не НетОтображаемыхСтрок Тогда
	
		АдресРегистрацииВФорме 	= УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(ТекущаяСтрока.АдресРегистрации);
		АдресПочтовыйВФорме 	= УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(ТекущаяСтрока.АдресПочтовый);
		АдресЛПУВФорме			= УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(ТекущаяСтрока.АдресЛПУ);
		
	КонецЕсли;

	ЭлементыФормы.ОбновитьДанныеЗЛ.Доступность = Не ТолькоПросмотр И Не НетОтображаемыхСтрок;
	ЭлементыФормы.АдресРегистрацииВФорме.ТолькоПросмотр = ТолькоПросмотр Или НетОтображаемыхСтрок;
	ЭлементыФормы.АдресПочтовыйВФорме.ТолькоПросмотр = ТолькоПросмотр Или НетОтображаемыхСтрок;
	ЭлементыФормы.АдресЛПУВФорме.ТолькоПросмотр = ТолькоПросмотр Или НетОтображаемыхСтрок;
	ЭлементыФормы.ОписаниеДокументаНаПроживание.ТолькоПросмотр = ТолькоПросмотр Или НетОтображаемыхСтрок;
	
КонецПроцедуры // УстановитьАдресаСотрудникаВФорме()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	УниверсальныеМеханизмы.УстановитьПодменюПечати(мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя, Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации, ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить);
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
КонецПроцедуры

Функция АвтоЗаполнениеИнаяПолезнаяИнформацияВозможно(ТекущаяСтрока)

	Возврат УдалитьНезначащиеСимволы(ТекущаяСтрока.ИнаяПолезнаяИнформация) = УдалитьНезначащиеСимволы(СформироватьИнаяПолезнаяИнформация(ТекущаяСтрока));

КонецФункции // АвтоЗаполнениеИнаяПолезнаяИнформацияВозможно()

Функция УдалитьНезначащиеСимволы(Знач ОбрабатываемаяСтрока)

	ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, " ", "");
	ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, ",", "");
	ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, ".", "");
	ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, ";", "");
	ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, ":", "");
	ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, Символы.ПС, "");
	
	Возврат ОбрабатываемаяСтрока;

КонецФункции // УдалитьНезначащиеСимволы()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати(); // Универсальный механизм печати документов
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ(); // Универсальный механизм подключения процедур заполнения табличных частей
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		Если Не ЗначениеЗаполнено(РегистрационныйНомерФСС) И РаботникиОрганизации.Количество() = 0 И ЗначениеЗаполнено(Организация) Тогда
			ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеОрганизации(ЭтотОбъект);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ТелефонСоставителя) Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбменСведениямиОПособияхСФСС.ДанныеСоставителяРеестра(Ответственный));
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	ЭлементыФормы.КПП.АвтоОтметкаНезаполненного = ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Организация);
	ЭлементыФормы.КПП.ОтметкаНезаполненного = ЭлементыФормы.КПП.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(КПП);
	
	ПереченьПособий = Новый СписокЗначений;
	ПереченьПособий.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность);
	ПереченьПособий.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды);
	ПереченьПособий.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности);
	ЭлементыФормы.ВидПособия.ДоступныеЗначения = ПереченьПособий;
	
	ЭлементыФормы.СтатусНалогоплательщика.ДоступныеЗначения = ПроцедурыУправленияПерсоналом.ПолучитьСписокСтатусовФизлиц();
	
	ДоступныеЗначения = Новый СписокЗначений;
	ДоступныеЗначения.Добавить(Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.Чернобыль);
	ДоступныеЗначения.Добавить(Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.Маяк);
	ДоступныеЗначения.Добавить(Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.Семипалатинск);
	ДоступныеЗначения.Добавить(Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.ПодразделенияОсобогоРиска);
	ЭлементыФормы.ВыплатаЗаСчетФедеральногоБюджета.ДоступныеЗначения = ДоступныеЗначения;
	
	УстановитьАдресаСотрудникаВФорме();
	УстановитьЗаголовкиОрганизацийВФорме();
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

Процедура ОбновлениеОтображения()
    ОписаниеДокументаНаПроживание = ОбменСведениямиОПособияхСФСС.ОписаниеДокументаНаПроживание(ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта( ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеОрганизации(ЭтотОбъект);
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	ЭлементыФормы.КПП.АвтоОтметкаНезаполненного = ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Организация);
	ЭлементыФормы.КПП.ОтметкаНезаполненного = ЭлементыФормы.КПП.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(КПП);
	
КонецПроцедуры

Процедура ОтветственныйПриИзменении(Элемент)
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбменСведениямиОПособияхСФСС.ДанныеСоставителяРеестра(Ответственный));
КонецПроцедуры

Процедура ОтчествоПриИзменении(Элемент)
	Если ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Пол = ПроцедурыУправленияПерсоналом.ПолучитьПол(Элемент.Значение)
	КонецЕсли;
КонецПроцедуры

Процедура ДатаРожденияПриИзменении(Элемент)
	ФизическиеЛицаКлиент.ФормаЭлементаДатаРожденияПриИзменении(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ОписаниеДокументаНаПроживаниеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбменСведениямиОПособияхСФСС.ОткрытьФормуРедактированияДокументаНаПроживание(ЭтаФорма, ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока)
	
КонецПроцедуры

Процедура ОписаниеДокументаНаПроживаниеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь
КонецПроцедуры

Процедура БанкПриИзменении(Элемент)
	
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеБанка(Элемент.Значение, ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока);
	
КонецПроцедуры

Процедура АдресПочтовыйВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда
		СтруктураАдреса = Новый Структура("Значение", ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресПочтовый);
		УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресПочтовый = СтруктураАдреса.Значение;
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресПочтовыйКодПоКЛАДР = ОбменСведениямиОПособияхСФСС.КодАдресаПоКЛАДРдляФСС(СтруктураАдреса.Значение);
		Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура АдресРегистрацииВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда
		СтруктураАдреса = Новый Структура("Значение", ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресРегистрации);
		УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресРегистрации = СтруктураАдреса.Значение;
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресРегистрацииКодПоКЛАДР = ОбменСведениямиОПособияхСФСС.КодАдресаПоКЛАДРдляФСС(СтруктураАдреса.Значение);
		Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура АдресЛПУНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда
		СтруктураАдреса = Новый Структура("Значение", ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресЛПУ);
		УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресЛПУ = СтруктураАдреса.Значение;
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресЛПУКодПоКЛАДР = ОбменСведениямиОПособияхСФСС.КодАдресаПоКЛАДРдляФСС(СтруктураАдреса.Значение);
		Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура КодПричиныНетрудоспособностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("01", "01 - заболевание");
	СписокВыбора.Добавить("02", "02 - травма");
	СписокВыбора.Добавить("03", "03 - карантин");
	СписокВыбора.Добавить("04", "04 - несчастный случай на производстве или его последствия");
	СписокВыбора.Добавить("05", "05 - отпуск по беременности и родам");
	СписокВыбора.Добавить("06", "06 - протезирование в стационаре");
	СписокВыбора.Добавить("07", "07 - профессиональное заболевание или его обострение");
	СписокВыбора.Добавить("08", "08 - долечивание в санатории");
	СписокВыбора.Добавить("09", "09 - уход за больным членом семьи");
	СписокВыбора.Добавить("10", "10 - иное состояние (отравление, проведение манипуляций и др.)");
	СписокВыбора.Добавить("11", "11 - заболевание туберкулезом");
	СписокВыбора.Добавить("12", "12 - в случае заболевания ребенка, включенного в перечень заболеваний определяемых Минздравсоцразвития России");
	СписокВыбора.Добавить("13", "13 - ребенок-инвалид");
	СписокВыбора.Добавить("14", "14 - поствакцинальное осложнение или злокачественное новообразование у ребенка");
	СписокВыбора.Добавить("15", "15 - ВИЧ-инфицированный ребенок");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ДополнительныйКодПричиныНетрудоспособностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("017", "017 - лечение в специализированном санатории");
	СписокВыбора.Добавить("018", "018 - санаторно-курортное лечение в связи с несчастным случаем на производстве в период временной нетрудоспособности (до направления на МСЭ)");
	СписокВыбора.Добавить("019", "019 - лечение в клинике научно-исследовательского учреждения (института) курортологии, физиотерапии и реабилитации");
	СписокВыбора.Добавить("020", "020 - дополнительный отпуск по беременности и родам");
	СписокВыбора.Добавить("021", "021 - заболевание или травма, наступившей вследствие алкогольного, наркотического, токсического опьянения или действий, связанных с таким опьянением");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура УходЗаРодственникомРодственнаяСвязьНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("38", "38 - мать");
	СписокВыбора.Добавить("39", "39 - отец");
	СписокВыбора.Добавить("40", "40 - опекун");
	СписокВыбора.Добавить("41", "41 - попечитель");
	СписокВыбора.Добавить("42", "42 - иной родственник, фактически осуществляющий уход за ребенком");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура КодНарушенияРежимаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("23", "23 - несоблюдение предписанного режима, самовольный уход из стационара, выезд на лечение в другой административный район без разрешения лечащего врача");
	СписокВыбора.Добавить("24", "24 - несвоевременная явка на прием к врачу");
	СписокВыбора.Добавить("25", "25 - выход на работу без выписки");
	СписокВыбора.Добавить("26", "26 - отказ от направления в учреждение медико-социальной экспертизы");
	СписокВыбора.Добавить("27", "27 - несвоевременная явка в учреждение медико-социальной экспертизы");
	СписокВыбора.Добавить("28", "28 - другие нарушения");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ГруппаИнвалидностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("1","1 группа");
	СписокВыбора.Добавить("2","2 группа");
	СписокВыбора.Добавить("3","3 группа");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура НовыйСтатусНетрудопособногоНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("31", "31 - продолжает болеть");
	СписокВыбора.Добавить("32", "32 - установлена инвалидность");
	СписокВыбора.Добавить("33", "33 - изменена группа инвалидности");
	СписокВыбора.Добавить("34", "34 - умер");
	СписокВыбора.Добавить("35", "35 - отказ от проведения медико-социальной экспертизы");
	СписокВыбора.Добавить("36", "36 - явился трудоспособным");
	СписокВыбора.Добавить("37", "37 - долечивание");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура УсловияИсчисленияКодНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("43", "43 - лицо, относящееся к категории лиц, подвергшихся воздействию радиации");
	СписокВыбора.Добавить("44", "44 - лицо, приступившее к работе в районах Крайнего Севера и приравненных к ним местностях до 2007 года и продолжающее работать в этих местностях");
	СписокВыбора.Добавить("45", "45 - лицо, имеющее инвалидность");
	СписокВыбора.Добавить("46", "46 - трудовой договор менее 6 месяцев (не заполняется в случае заболевания туберкулезом)");
	СписокВыбора.Добавить("47", "47 - заболевание (травма) наступили в течение 30 календарных дней со дня прекращения работы (не  заполняется в случае заболевания туберкулезом)");
	СписокВыбора.Добавить("48", "48 - уважительная причина нарушения режима");
	СписокВыбора.Добавить("49", "49 - продолжительность заболевания превышает 4 месяца подряд (для лиц, имеющих инвалидность, за исключением заболевания туберкулезом)");
	СписокВыбора.Добавить("50", "50 - продолжительность заболевания превышает 5 месяцев в календарном году (для лиц, имеющих инвалидность, за исключением заболевания туберкулезом)");
	СписокВыбора.Добавить("51", "51 - неполное рабочее время");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьДанныеЗЛНажатие(Элемент)
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		Автозаполнение("ДанныеБольничного", ТекущаяСтрока);
		Автозаполнение("ДанныеСотрудника", ТекущаяСтрока);
		УстановитьАдресаСотрудникаВФорме();
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьДанныеСтрахователяНажатие(Элемент)
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеОрганизации(ЭтотОбъект);
КонецПроцедуры

Процедура КнопкаЗаполнитьИнаяПолезнаяИнформацияВозможноНажатие(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ПустаяСтрока(ТекущаяСтрока.ИнаяПолезнаяИнформация) Тогда
	
		ТекстВопроса = НСтр("ru='При заполнении поле ""Иная полезная информация"" будет очищено.
			|
			|Продолжить?'");
			
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет, "Заполнить") <> КодВозвратаДиалога.Да Тогда
		
			Возврат;
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	мИнаяПолезнаяИнформация = СформироватьИнаяПолезнаяИнформация(ТекущаяСтрока);
	
	ТекущаяСтрока.ИнаяПолезнаяИнформация = мИнаяПолезнаяИнформация;
	
	мАвтозаполнениеИнаяПолезнаяИнформацияВозможно = Истина;
	
	ЭлементыФормы.КнопкаЗаполнитьИнаяПолезнаяИнформацияВозможно.Доступность = Ложь;
	
КонецПроцедуры

Процедура РеквизитыДляИнаяПолезнаяИнформацияПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	Если мАвтозаполнениеИнаяПолезнаяИнформацияВозможно Тогда
	
		мИнаяПолезнаяИнформация = СформироватьИнаяПолезнаяИнформация(ТекущаяСтрока);
		
		ТекущаяСтрока.ИнаяПолезнаяИнформация = мИнаяПолезнаяИнформация;
		
	Иначе
		
		мАвтозаполнениеИнаяПолезнаяИнформацияВозможно = АвтозаполнениеИнаяПолезнаяИнформацияВозможно(ТекущаяСтрока);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИнаяПолезнаяИнформацияПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	мАвтозаполнениеИнаяПолезнаяИнформацияВозможно = АвтозаполнениеИнаяПолезнаяИнформацияВозможно(ТекущаяСтрока);
	
	ЭлементыФормы.КнопкаЗаполнитьИнаяПолезнаяИнформацияВозможно.Доступность = НЕ мАвтозаполнениеИнаяПолезнаяИнформацияВозможно;
	
КонецПроцедуры

Процедура КодПричиныПерерасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("01", "01 - представлены дополнительные сведения о выплатах в расчетном периоде");
	СписокВыбора.Добавить("02", "02 - заявление о замене одного года или двух лет расчетного периода предшествующими годами");
	СписокВыбора.Добавить("03", "03 - заявление о применении норм законодательства при исчислении среднего заработка, действовавшего до 01.01.2011г.");
	СписокВыбора.Добавить("04", "04 - по результатам документальной выездной (камеральной) проверки");
	СписокВыбора.Добавить("05", "05 - перерасчет пособия при признании несчастного случая на производстве страховым");
	СписокВыбора.Добавить("06", "06 - перерасчет пособия в случае ошибки в расчете работодателя");
	СписокВыбора.Добавить("07", "07 - иное (указать на обороте справки)");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ЛПУПриИзменении(Элемент)
	
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеЛПУ(Элемент.Значение, ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные, АдресЛПУВФорме);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ 

Процедура КоманднаяПанельРаботникиОрганизацииПоЛисткамНетрудоспособности(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличнaя часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		РаботникиОрганизации.Очистить();
	КонецЕсли;
	
	Автозаполнение();
	
	Если РаботникиОрганизации.Количество() = 0 Тогда
		Сообщить("Не обнаружены данные для записи в документ.", СтатусСообщения.Важное )
	Иначе
		ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = РаботникиОрганизации[0]
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСотрудникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, ОбщегоНазначения.ГоловнаяОрганизация(Организация), 2);

КонецПроцедуры

// формирует файл сведений
//
Процедура ОсновныеДействияФормыФайл(Кнопка)
	
	ПроцедурыПерсонифицированногоУчета.ПоказатьФайлДокумента(ЭтотОбъект,"Файл реестра сведений по пособиям по нетрудоспособности");
	                
КонецПроцедуры      

// копирует файл-пачку в указанное пользователем место
Процедура ОсновныеДействияФормыНаДискетку(Кнопка)
	
	ПроцедурыПерсонифицированногоУчета.ЗаписатьФайлДокументаНаДискету(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), ОбменСведениямиОПособияхСФСС.ИмяФайла(ЭтотОбъект) + ".xml", КодировкаТекста.ANSI,,"Файл реестра записан под именем: ");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации
 
// Процедура - обработчик ожидания события "ПриАктивизацииСтроки"
//
Процедура ОбработчикОжиданияСотрудникиОрганизацииПриАктивизацииСтроки()
	
	УстановитьАдресаСотрудникаВФорме();
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		мИнаяПолезнаяИнформация = ТекущаяСтрока.ИнаяПолезнаяИнформация;
		мАвтозаполнениеИнаяПолезнаяИнформацияВозможно = АвтоЗаполнениеИнаяПолезнаяИнформацияВозможно(ТекущаяСтрока);
		ЭлементыФормы.КнопкаЗаполнитьИнаяПолезнаяИнформацияВозможно.Доступность = НЕ мАвтозаполнениеИнаяПолезнаяИнформацияВозможно;
	Иначе
		ЭлементыФормы.КнопкаЗаполнитьИнаяПолезнаяИнформацияВозможно.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСотрудникиОрганизацииПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
		СтрокаТабличнойЧасти.Сотрудник = ВыбранноеЗначение;
		Автозаполнение("ДанныеСотрудника", СтрокаТабличнойЧасти);
		Если ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = Неопределено Тогда
			ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = СтрокаТабличнойЧасти
		КонецЕсли;
		УстановитьАдресаСотрудникаВФорме()
	КонецЕсли;

КонецПроцедуры

Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	ТекущийБольничный = ТекущаяСтрока.ЛистокНетрудоспособности;
	Автозаполнение("ДанныеСотрудника", ТекущаяСтрока);
	УстановитьАдресаСотрудникаВФорме();
	Если ОбщегоНазначения.ПолучитьЗначениеРеквизита(ТекущийБольничный, "Сотрудник") <> Элемент.Значение Тогда
		ТекущаяСтрока.ЛистокНетрудоспособности = "";
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // СотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникОкончаниеВводаТекста()

Процедура РаботникиОрганизацииЛистокНетрудоспособностиПриИзменении(Элемент)
	Автозаполнение("ДанныеБольничного", ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока);
КонецПроцедуры

Процедура РаботникиОрганизацииЛистокНетрудоспособностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	ФормаВыбораБольничногоЛиста = Документы.НачислениеПоБольничномуЛисту.ПолучитьФормуВыбора(, Элемент, ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Сотрудник) Тогда
		ФормаВыбораБольничногоЛиста.Отбор.Сотрудник.Установить(ТекущаяСтрока.Сотрудник);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбораБольничногоЛиста.Отбор.Организация.Установить(Организация);
	КонецЕсли;
	
	ФормаВыбораБольничногоЛиста.Отбор.Проведен.Установить(Истина);
	
	ФормаВыбораБольничногоЛиста.Отбор.ПричинаНетрудоспособности.ВидСравнения = ВидСравнения.НеРавно;
	ФормаВыбораБольничногоЛиста.Отбор.ПричинаНетрудоспособности.Значение = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве;
	ФормаВыбораБольничногоЛиста.Отбор.ПричинаНетрудоспособности.Использование = Истина;
	
	ФормаВыбораБольничногоЛиста.Отбор.ПериодРегистрации.ВидСравнения = ВидСравнения.БольшеИлиРавно;
	ФормаВыбораБольничногоЛиста.Отбор.ПериодРегистрации.Значение = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ДатаПередачиФССВыплатыПособий");
	ФормаВыбораБольничногоЛиста.Отбор.ПериодРегистрации.Использование = Истина;
	
	ФормаВыбораБольничногоЛиста.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбораБольничногоЛиста.Порядок.Установить("Дата Убыв");
	ФормаВыбораБольничногоЛиста.Открыть();
	
КонецПроцедуры


///////////////////////////////////////////////////
// Универсальные механизмы

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)
	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя, "Имя", Истина), ЭтотОбъект);
КонецПроцедуры