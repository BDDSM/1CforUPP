////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

//Хранит текущую строку списка ведомостей на выплату ЗП
Перем СтрокаВыплата;

Перем мСчетБУ;
Перем мСчетНУ;

Перем ИнвертироватьСуммы;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

Перем СпецифическиеСоответствияСчетовБУиНУдляДокумента;

Перем мОтражатьВРегламентированномУчете;

Перем мПлатежныеВедомости;

Перем мПрименениеУСН;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасшифровкаПлатежа,ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПеречислениеЗаработнойПлаты,ЭлементыФормы.КоманднаяПанельПеречисление);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура выполняет необходимые действия формирования текста назначения платежа
//
Процедура СформироватьНазначениеПлатежа()

	АдресСуммы = Найти(НазначениеПлатежа, "Сумма");
	
	Если АдресСуммы > 0 Тогда
		ТекстНазначение = Лев(НазначениеПлатежа, АдресСуммы - 2);
	Иначе
		ТекстНазначение = НазначениеПлатежа;
	КонецЕсли;
	
	Если ТекстНазначение = "" И НЕ СчетКонтрагента.Пустая() Тогда
		ТекстНазначение = СчетКонтрагента.ТекстНазначения;
	КонецЕсли;
	Если ТекстНазначение = ""
		И РасшифровкаПлатежа.Количество() = 1
		И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		
		ТекстНазначение = ТекстНазначение
			+ ?(ПустаяСтрока(ТекстНазначение), "По ", " по ")
			+ Строка(СтрокаПлатеж.ДоговорКонтрагента);
	КонецЕсли;

	ТекстСумма = "Сумма " + Формат(СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		ТекстНДС = "";
	
		ТабНДС=РасшифровкаПлатежа.Выгрузить();
		ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
		
		Для Каждого СтрокаНДС ИЗ ТабНДС Цикл
			ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), "", ", ");
			Если НЕ ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС) ИЛИ СтрокаНДС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
				ТекстНДС = ТекстНДС + "Без налога (НДС)";
			Иначе
				ТекстНДС = ТекстНДС + "НДС(" + СтрокаНДС.СтавкаНДС + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
			КонецЕсли;
		
		КонецЦикла;
		
		Если ТабНДС.Итог("СуммаНДС") > 0 Тогда
			ТекстНДС = "В т.ч. " + ТекстНДС;
		КонецЕсли;
		
		ТекстСумма = ТекстСумма + Символы.ПС + ТекстНДС;
		
	КонецЕсли;
	
	НазначениеПлатежа = ТекстНазначение + Символы.ПС + ТекстСумма;

КонецПроцедуры // СформироватьНазначениеПлатежа()

Процедура УстановитьВидимостьСубконто()

	Для Ном = 1 по 3 Цикл

		Если (Ном <= СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)) Тогда
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Заголовок = СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Видимость = Истина;
			ЭлементыФормы["СубконтоДт"+Ном].Видимость        = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Видимость = Ложь;
			ЭлементыФормы["СубконтоДт"+Ном].Видимость        = Ложь;
		КонецЕсли;

	КонецЦикла;
	
	УстановитьВидимостьСубконтоНУ();

КонецПроцедуры

Процедура УстановитьВидимостьСубконтоНУ()
	
	Если ОтражатьВНалоговомУчете И НЕ мПрименениеУСН Тогда
		
		Для Ном = 1 по 3 Цикл
			
			Если ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ) И (Ном <= СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто.Количество()) Тогда
				ЭлементыФормы["НадписьСубконтоНУДт"+Ном].Заголовок = Строка(СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто[Ном-1].ВидСубконто);
				ЭлементыФормы["НадписьСубконтоНУДт"+Ном].Видимость = Истина;
				ЭлементыФормы["СубконтоНУДт"+Ном].Видимость        = Истина;
			Иначе
				ЭлементыФормы["НадписьСубконтоНУДт"+Ном].Видимость = Ложь;
				ЭлементыФормы["СубконтоНУДт"+Ном].Видимость        = Ложь;
			КонецЕсли;
		
		КонецЦикла;
		
	Иначе
		
		Для Ном = 1 по 3 Цикл
			ЭлементыФормы["НадписьСубконтоНУДт"+Ном].Видимость = Ложь;
			ЭлементыФормы["СубконтоНУДт"+Ном].Видимость        = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()

	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда

		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж;

	КонецЕсли;

КонецПроцедуры // УстановитьФокус()

// Процедура устанавливает видимость (доступность) элементов формы
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	ВозможноПеречислениеВБюджет = 
		(ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет)
		И (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП)
		И (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками)
		И (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику);
	
	ЭлементыФормы.Панель1.Страницы.СтраницаПеречислениеВБюджет.Видимость = ВозможноПеречислениеВБюджет;
	
	Если ВозможноПеречислениеВБюджет Тогда
	
		ЭлементыФормы.ПеречислениеВБюджет.Доступность =
			(ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога);
		
		ЭлементыФормы.ВидПеречисленияВБюджет.Доступность = ПеречислениеВБюджет И ЭлементыФормы.ПеречислениеВБюджет.Доступность;
		ЭлементыФормы.ВидПеречисленияВБюджет.АвтоОтметкаНезаполненного = ПеречислениеВБюджет;
		Если НЕ ПеречислениеВБюджет Тогда
			ЭлементыФормы.ВидПеречисленияВБюджет.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
		ЭлементыФормы.НадписьСтатусСоставителя.Доступность = ПеречислениеВБюджет;
		ЭлементыФормы.СтатусСоставителя.Доступность        = ПеречислениеВБюджет;
		ЭлементыФормы.НадписьКодБК.Доступность             = ПеречислениеВБюджет;
		ЭлементыФормы.КодБК.Доступность                    = ПеречислениеВБюджет;
		ЭлементыФормы.НадписьКодОКАТО.Доступность          = ПеречислениеВБюджет;
		ЭлементыФормы.КодОКАТО.Доступность                 = ПеречислениеВБюджет;
		ЭлементыФормы.ПанельПлатежейВБюджет.Доступность    = ПеречислениеВБюджет;
	
		УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
	КонецЕсли;
	
	ЭлементыФормы.НадписьПолучатель.Видимость = Истина;
	ЭлементыФормы.Контрагент.Видимость        = Истина;
	
	ЭлементыФормы.ПанельПлатежи.ОтображениеЗакладок = ?(ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП, ОтображениеЗакладок.Сверху,ОтображениеЗакладок.НеИспользовать);
	
	Если ЕстьРасчетыСКонтрагентами Тогда
		
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок = "Расшифровка платежа";
		Если Список Тогда
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
		Иначе
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;
		
		ДоступностьДокументаРасчетов = ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) 
			И СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументРасчетовСКонтрагентом.Доступность = ДоступностьДокументаРасчетов;
		ЭлементыФормы.ДокументРасчетовСКонтрагентом.Доступность                            = ДоступностьДокументаРасчетов;
		
		ЭлементыФормы.Сделка.Доступность = (ВидОперации <> Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВыдачаПодотчетнику", ЭлементыФормы.ПанельПлатежи);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств Тогда
		
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок = "Счет учета";
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);

		// Возможные изменения после переключения с закладки ПеречислениеЗП
		ЭлементыФормы.ДокументПланированияПлатежаПрочие.Видимость		= Истина;
		ЭлементыФормы.НадписьЗаявкаПрочие.Видимость						= Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок = "Счет учета";
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПереводНаДругойСчет", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.НадписьПолучатель.Видимость = Ложь;
		ЭлементыФормы.Контрагент.Видимость        = Ложь;
		
		// Возможные изменения после переключения с закладки ПеречислениеЗП
		ЭлементыФормы.ДокументПланированияПлатежаПрочие.Видимость		= Истина;
		ЭлементыФормы.НадписьЗаявкаПрочие.Видимость						= Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
		
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок = "Счет учета";
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		
		// Возможные изменения после переключения с закладки ПеречислениеЗП
		ЭлементыФормы.ДокументПланированияПлатежаПрочие.Видимость		= Истина;
		ЭлементыФормы.НадписьЗаявкаПрочие.Видимость						= Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПеречислениеЗП", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.ПанельПлатежи.Страницы.ПлатежПрочие.Видимость = Истина;
		ЭлементыФормы.ПанельПлатежи.Страницы.ПлатежПрочие.Заголовок = "Счета затрат на компенсацию за задержку зарплаты";
		
		ЭлементыФормы.Панель1.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.Панель1.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		ЭлементыФормы.ПанельПлатежи.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельПлатежи.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		ЭлементыФормы.ПеречислениеЗаработнойПлаты.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
	
		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность                  = Ложь;
		
		УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
		
		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = УСН И ОтражатьВНалоговомУчете;
		ЭлементыФормы.ДокументПланированияПлатежаПрочие.Видимость = Ложь;
		ЭлементыФормы.НадписьЗаявкаПрочие.Видимость = Ложь;
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ.Видимость = Истина;
		ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентомНУ.Видимость = Истина;
		
		УстановитьВидимостьСубконто();
		УстановитьВидимостьСубконтоНУ();
		
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда
		
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок = "Расшифровка платежа";
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
	 	
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.НадписьСчетРасчетов.Видимость            = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		
		ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость     = Ложь;
		ЭлементыФормы.НадписьСчетАвансов.Видимость             = Ложь;
		
		ЭлементыФормы.Сделка.Доступность = Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок = "Реквизиты договора займа";
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПеречислениеЗаймаРаботнику", ЭлементыФормы.ПанельПлатежи);
		
	КонецЕсли;
	
	МожноРедактироватьСписком = ЕстьРасчетыСКонтрагентами И НЕ ЧастичнаяОплата;
	ЭлементыФормы.НадписьРедактировать.Видимость = МожноРедактироватьСписком;
	ЭлементыФормы.Список.Видимость               = МожноРедактироватьСписком;
	ЭлементыФормы.Список1.Видимость              = МожноРедактироватьСписком;
	
	Если ЧастичнаяОплата Тогда
		ЭлементыФормы.ПанельОплата.ТекущаяСтраница = ЭлементыФормы.ПанельОплата.Страницы.СтраницаЧастичнаяОплата;
	Иначе
		ЭлементыФормы.ПанельОплата.ТекущаяСтраница = ЭлементыФормы.ПанельОплата.Страницы.СтраницаОплата;
	КонецЕсли;
	Если ЧастичнаяОплата Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Доступность = НЕ ЧастичнаяОплата;
	ЭлементыФормы.КнопкаПодборДоговор.Доступность                      = НЕ ЧастичнаяОплата;
	ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.Подбор.Доступность     = НЕ ЧастичнаяОплата;
	ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить.Кнопки.Заполнить.Доступность = НЕ ЧастичнаяОплата;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику
		И ВалютаДокумента <> ВалютаВзаиморасчетовРаботника Тогда
		
		ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = Ложь;
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность     = Ложь;
		
	Иначе
		ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = мОтражатьВРегламентированномУчете;
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность     = ОтражатьВБухгалтерскомУчете;
	КонецЕсли;
	
	ВидимостьРеквизитовПланирования = ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа);
	
	ЭлементыФормы.КурсВзаиморасчетовПланПодотчетник.Видимость        = ВидимостьРеквизитовПланирования;
	ЭлементыФормы.СуммаПлатежаПланПодотчетник.Видимость              = ВидимостьРеквизитовПланирования;
	ЭлементыФормы.НадписьКурсВзаиморасчетовПланПодотчетник.Видимость = ВидимостьРеквизитовПланирования;
	ЭлементыФормы.НадписьСуммаПлатежаПланПодотчетник.Видимость       = ВидимостьРеквизитовПланирования;
	ЭлементыФормы.ИнфНадписьКурсаЗаявкиПодотчетник.Видимость         = ВидимостьРеквизитовПланирования;
	
	ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость        = ВидимостьРеквизитовПланирования;
	ЭлементыФормы.СуммаПлатежаПлан.Видимость              = ВидимостьРеквизитовПланирования;
	ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость = ВидимостьРеквизитовПланирования;
	ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость       = ВидимостьРеквизитовПланирования;
	ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость         = ВидимостьРеквизитовПланирования;
	
	ЭлементыФормы.КурсВзаиморасчетовПланРаботник.Видимость        = ВидимостьРеквизитовПланирования;
	ЭлементыФормы.СуммаПлатежаПланРаботник.Видимость              = ВидимостьРеквизитовПланирования;
	ЭлементыФормы.НадписьКурсВзаиморасчетовПланРаботник.Видимость = ВидимостьРеквизитовПланирования;
	ЭлементыФормы.НадписьСуммаПлатежаПланРаботник.Видимость       = ВидимостьРеквизитовПланирования;
	ЭлементыФормы.ИнфНадписьКурсаЗаявкиРаботник.Видимость         = ВидимостьРеквизитовПланирования;
	
	УстановитьДанныеДляРеквизитов();
	
	ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = НалоговыйУчетУСН.ВидимостьКнопкиКУДиР(ЭтотОбъект);
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, 
		"НадписьПроект,Проект,НадписьПроектПрочие,ПроектПрочие,НадписьПроектРаботник,ПроектРаботник,НадписьПроектПодотчетник,ПроектПодотчетник,РасшифровкаПлатежа.Проект,ПеречислениеЗаработнойПлаты.Проект");
			
	УказаниеКППплательщикаОбязательно = ПеречислениеВБюджет;
	
	ЭлементыФормы.КПППлательщика.АвтоОтметкаНезаполненного = УказаниеКППплательщикаОбязательно;
	Если НЕ УказаниеКППплательщикаОбязательно Тогда
		ЭлементыФормы.КПППлательщика.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	УказаниеКППполучателяОбязательно = ПеречислениеВБюджет;
	
	ЭлементыФормы.КПППолучателя.АвтоОтметкаНезаполненного = УказаниеКППполучателяОбязательно;
	Если НЕ УказаниеКППполучателяОбязательно Тогда
		ЭлементыФормы.КПППолучателя.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	// Определим, допустимо ли управление видимостью счетов учета в зависимости от вида операции.
	ДопустимоУправлениеВидимостьюСчетовУчета = НЕ ((ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет)
	                                               ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП)
	                                               ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога)
	                                               ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств)
	                                               ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику)
												   ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами)
												   ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСКонтрагентами)
												   ИЛИ (ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками));
										  
	// Видимость счета авансов контрагента
	ВидимостьСчетаАвансов = НЕ ((ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочиеРасчетыСКонтрагентами)
	                            ИЛИ (ЕстьРасчетыПоКредитам));
												   
	// Если вид операции допускает управление видимостью счетов учета, настроим ее.
	Если ДопустимоУправлениеВидимостьюСчетовУчета Тогда
	
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СчетУчетаРасчетовПоАвансам.Видимость     = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		
		ЭлементыФормы.НадписьСчетРасчетов.Видимость            = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.НадписьСчетАвансов.Видимость             = ПоказыватьВДокументахСчетаУчета И ВидимостьСчетаАвансов И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость     = ПоказыватьВДокументахСчетаУчета И ВидимостьСчетаАвансов И ОтражатьВБухгалтерскомУчете;
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СчетУчетаРасчетовСКонтрагентом.Видимость = ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СчетУчетаРасчетовПоАвансам.Видимость     = ОтражатьВБухгалтерскомУчете;
		
		ЭлементыФормы.НадписьСчетРасчетов.Видимость            = ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость = ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.НадписьСчетАвансов.Видимость             = ВидимостьСчетаАвансов И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость     = ВидимостьСчетаАвансов И ОтражатьВБухгалтерскомУчете;
		
	КонецЕсли;
	
	УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
	
КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьВидимостьРеквизитовПлатежаВБюджет()
	
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("НалоговыйПлатеж", ЭлементыФормы.ПанельПлатежейВБюджет);
	ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ТаможенныйПлатеж", ЭлементыФормы.ПанельПлатежейВБюджет);
	Иначе
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ИнойПлатеж", ЭлементыФормы.ПанельПлатежейВБюджет);
	КонецЕсли;
	
	Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
			
		Если ПустаяСтрока(ПериодичностьУплаты) ИЛИ (ПериодичностьУплаты = "0") Тогда
			ЭлементыФормы.ПанельПоказателяПериода.Видимость = Ложь;
		Иначе
			ЭлементыФормы.ПанельПоказателяПериода.Видимость = Истина;
			Если ПериодичностьУплаты = "-" Тогда
				ЭлементыФормы.ПанельПоказателяПериода.ТекущаяСтраница = ЭлементыФормы.ПанельПоказателяПериода.Страницы.ПлатежПоКонкретнойДате;
			Иначе
				ЭлементыФормы.ПанельПоказателяПериода.ТекущаяСтраница = ЭлементыФормы.ПанельПоказателяПериода.Страницы.ПлатежПоПериоду;
				ЭлементыФормы.НадписьПериодПлатежа.Видимость = НЕ ПериодичностьУплаты = "ГД";
				ЭлементыФормы.ПериодПлатежа.Видимость        = НЕ ПериодичностьУплаты = "ГД";
				Если ПериодичностьУплаты = "МС" Тогда
					ЭлементыФормы.ПериодПлатежа.МаксимальноеЗначение = 12;
					ЭлементыФормы.НадписьПериодПлатежа.Заголовок     = "Месяц:";
				ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
					ЭлементыФормы.ПериодПлатежа.МаксимальноеЗначение = 4;
					ЭлементыФормы.НадписьПериодПлатежа.Заголовок     = "Квартал:";
				ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
					ЭлементыФормы.ПериодПлатежа.МаксимальноеЗначение = 2;
					ЭлементыФормы.НадписьПериодПлатежа.Заголовок     = "Полугодие:";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

Процедура УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях()

	ФлагБУ = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СчетУчета.Видимость   = ФлагБУ;
	ЭлементыФормы.НадписьСчет.Видимость = ФлагБУ;
	ВсегоСубконто = ?(НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом), 0, СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество());
	Для К = 1 По 3 Цикл
		Флаг = ФлагБУ И К <= ВсегоСубконто;
		ЭлементыФормы["СубконтоДт"        + К].Видимость = Флаг;
		ЭлементыФормы["НадписьСубконтоДт" + К].Видимость = Флаг;
	КонецЦикла;
	
	ФлагНУ = ОтражатьВНалоговомУчете И НЕ мПрименениеУСН;
	ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ.Видимость        = ФлагНУ;
	ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентомНУ.Видимость = ФлагНУ;
	ВсегоСубконто = ?(НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ), 0, СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто.Количество());
	Для К = 1 По 3 Цикл
		Флаг = ФлагНУ И К <= ВсегоСубконто;
		ЭлементыФормы["СубконтоНУДт"        + К].Видимость = Флаг;
		ЭлементыФормы["НадписьСубконтоНУДт" + К].Видимость = Флаг;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях()

// Процедура переопределяет источники данных для реквизитов "СуммаДокумента" и "СуммаВзаиморасчетов".
// В режиме расчетов с контрагентами без разбиения они меняются местами.
//
Процедура УстановитьДанныеДляРеквизитов()
	
	Если ((ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И НЕ Список) 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		
		Если НЕ ЭлементыФормы.СуммаДокумента.Данные = "ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов" Тогда 
			ЭлементыФормы.СуммаДокумента.Данные="ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов";
		КонецЕсли;
		ЭлементыФормы.НадписьСуммаДокумент.Данные     = "НадписьСуммаВзаиморасчетов";
		ЭлементыФормы.НадписьВалютаДокумент.Данные    = "";
		ЭлементыФормы.НадписьВалютаДокумент.Заголовок = "";
		ЭлементыФормы.НадписьВалютаВзаиморасчетов.Данные            = "НадписьВалютаДокумент";
				
		ИнвертироватьСуммы = Истина;
		
	Иначе
		
		Если НЕ ЭлементыФормы.СуммаДокумента.Данные = "СуммаДокумента" Тогда 
			ЭлементыФормы.СуммаДокумента.Данные="СуммаДокумента";
		КонецЕсли;
		ЭлементыФормы.НадписьВалютаДокумент.Данные   = "НадписьВалютаДокумент";
		ЭлементыФормы.НадписьСуммаДокумент.Данные    = "";
		ЭлементыФормы.НадписьСуммаДокумент.Заголовок = "Сумма: ";
		
		ИнвертироватьСуммы = Ложь;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьДанныеДляРеквизитов()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют()

	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);

КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Организация = СтрокаПлатеж.ДоговорКонтрагента.Организация;
		
		ПриИзмененииОрганизации();
		
	КонецЕсли;

	Если Контрагент.Пустая() Тогда
		Контрагент=СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
	
	СтрокаПлатеж.ДокументПланированияПлатежа=Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка();
	СтрокаПлатеж.Сделка=Неопределено;
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Неопределено; 
	
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	

	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(мТекущаяВалютаВзаиморасчетов, ?(СтрокаПлатеж.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, Дата, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты))));

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов();
	
	УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Истина);
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаПлатеж.Проект=СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	УправлениеДенежнымиСредствами.ПриИзмененииКонтрагентаВПлатежномДокументе(ДокументОбъект, СтрокаПлатеж);
	
	ИННПолучателя = Контрагент.ИНН;
	КПППолучателя = Контрагент.КПП;

КонецПроцедуры // ПриИзмененииКонтрагента

Процедура ПриИзмененииОрганизации(УстанавливатьСчетОрганизации = Истина)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	Если УстанавливатьСчетОрганизации Тогда
		Если ЗначениеЗаполнено(Организация) Тогда
			СчетОрганизации = Организация.ОсновнойБанковскийСчет;
		Иначе
			СчетОрганизации = Неопределено;
		КонецЕсли;
		ПриИзмененииСчетаОрганизации();
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		СчетКонтрагента = Неопределено;
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.ПолучитьПризнакиОтраженияВРеглУчете(Организация, 
		ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, мОтражатьВРегламентированномУчете);
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		Если НЕ УправлениеДенежнымиСредствами.ПроверитьЗначениеРеквизитаДокумента(
			РасчетныйДокументРаботника, "Организация", Организация, "АвансовыйОтчет") 
			Тогда
			РасчетныйДокументРаботника = Документы.АвансовыйОтчет.ПустаяСсылка();
		КонецЕсли;
		Если ВалютаДокумента <> ВалютаВзаиморасчетовРаботника Тогда
			ОтражатьВБухгалтерскомУчете  = Ложь;
			ОтражатьВНалоговомУчете      = Ложь;
		КонецЕсли;
	
	КонецЕсли;
	
	Если ПеречислениеВБюджет Тогда
		КодОКАТО = Организация.КодПоОКАТО;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииОрганизации()

// Процедура выполняет действия, необходимые при выборе счета организации
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаОрганизации()
	
	Если СчетОрганизации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		
		Организация = СчетОрганизации.Владелец;
		ПриИзмененииОрганизации(Ложь);
		
		АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
			
		УстановитьРеквизитыПлательщика();
		
	КонецЕсли;
	
	ПересчитыватьСумму=Истина;
	РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(
		ВалютаДокумента, КурсДокумента, КратностьДокумента, 
		?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)), 
		СуммаДокумента, СчетОрганизации.ВалютаДенежныхСредств,ПересчитыватьСумму);
	
	Если ПересчитыватьСумму Тогда
		// Пересчитаем суммы платежей при изменении валюты
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
			
			Для Каждого Строка Из РасшифровкаПлатежа Цикл
				
				ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				
				Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
					Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
					
				ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
					Строка.СуммаПлатежа=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
					ВалютаДокумента,
					Строка.КурсВзаиморасчетов,КурсДокумента,
					Строка.КратностьВзаиморасчетов,КратностьДокумента);	
				Иначе
					Строка.СуммаПлатежа = 0;
				КонецЕсли;
				
				УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(Строка);
				
				Если ЗначениеЗаполнено(Строка.ДокументПланированияПлатежа) Тогда
					
					ВалютаПлатежаПлан=Строка.ДокументПланированияПлатежа.ВалютаДокумента;
					Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
						Строка.ДокументПланированияПлатежа="";
						Строка.КурсВзаиморасчетовПлан=0;
						Строка.СуммаПлатежаПлан=0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;	
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			СформироватьНазначениеПлатежа();
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			ВалютаВзаиморасчетов = ВалютаВзаиморасчетовРаботника;
			
			Если ВалютаВзаиморасчетов = ВалютаДокумента Тогда
				СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
				
			ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
				СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
					ВалютаВзаиморасчетов, ВалютаДокумента,
					СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
					СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);	
			Иначе
				СтрокаПлатеж.СуммаПлатежа = 0;
			КонецЕсли;
			
			СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
			СформироватьНазначениеПлатежа();
			
			Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
				
				ВалютаПлатежаПлан = СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;	
				Если НЕ (ВалютаПлатежаПлан = Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан = ВалютаДокумента) Тогда
					СтрокаПлатеж.ДокументПланированияПлатежа = "";
					СтрокаПлатеж.КурсВзаиморасчетовПлан      = 0;
					СтрокаПлатеж.СуммаПлатежаПлан            = 0;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
				
				ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;
				Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
					СтрокаПлатеж.ДокументПланированияПлатежа="";
					СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
					СтрокаПлатеж.СуммаПлатежаПлан=0;
				КонецЕсли;
				
			КонецЕсли;
			
			СуммаДокументаПриИзменении();
			
		КонецЕсли;
		
	Иначе
		
		// Пересчитаем суммы взаиморасчетов
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
			
			Для Каждого Строка Из РасшифровкаПлатежа Цикл
				
				ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				
				Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
					Строка.СуммаВзаиморасчетов=Строка.СуммаПлатежа;
					
				ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
					Строка.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа, ВалютаДокумента,
					ВалютаВзаиморасчетов,
					КурсДокумента,Строка.КурсВзаиморасчетов,
					КратностьДокумента,Строка.КратностьВзаиморасчетов);	
				Иначе
					Строка.СуммаВзаиморасчетов = 0;
				КонецЕсли;
								
				Если ЗначениеЗаполнено(Строка.ДокументПланированияПлатежа) Тогда
					
					ВалютаПлатежаПлан=Строка.ДокументПланированияПлатежа.ВалютаДокумента;
					Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
						Строка.ДокументПланированияПлатежа="";
						Строка.КурсВзаиморасчетовПлан=0;
						Строка.СуммаПлатежаПлан=0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;	
			
			СформироватьНазначениеПлатежа();
			
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
				
				ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;
				Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
					СтрокаПлатеж.ДокументПланированияПлатежа="";
					СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
					СтрокаПлатеж.СуммаПлатежаПлан=0;
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику
		И ВалютаДокумента <> ВалютаВзаиморасчетовРаботника Тогда
		ОтражатьВБухгалтерскомУчете = Ложь;
		ОтражатьВНалоговомУчете     = Ложь;
	КонецЕсли;
	
	УстановитьФокус();
	УстановитьВидимость();	
	
	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетКонтрагента="";
	КонецЕсли;	
	
	НадписьВалютаДокумент=СчетОрганизации.ВалютаДенежныхСредств.Наименование;
	
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()
	
	ПроверкаКурсовВалют();
			
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		мТекущаяВалютаВзаиморасчетов = ВалютаВзаиморасчетовРаботника;
	Иначе
		мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
			
	СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаПлатеж.СуммаПлатежа, 
		ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
									
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан > 0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Процедура рассчитывает сумму платежа по заявке.
//
Процедура РассчитатьСуммуПлатежаПлан()
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКурсовВалют();
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетовПлан <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетовПлан,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан = 0;
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуПлатежаПлан()

// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют();
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		ВалютаВзаиморасчетов = ВалютаВзаиморасчетовРаботника;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
			ВалютаВзаиморасчетов, ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 1 Тогда
		СуммаДокумента = СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();

КонецПроцедуры // РассчитатьСуммуПлатежа()

//Процедура рассчитывает курс взаиморасчетов по заявке
//
Процедура РассчитатьКурсВзаиморасчетовПлан()
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтрокаПлатеж.СуммаПлатежаПлан * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

//Процедура рассчитывает курс взаиморасчетов документа
//
Процедура РассчитатьКурсВзаиморасчетов()
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

// Процедура выполняет действия, необходимые при выборе счета контрагента
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаКонтрагента()

	Если СчетКонтрагента.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		Если Организация.Пустая() Тогда
			
			Организация=СчетКонтрагента.Владелец;
			Если Не ПустаяСтрока(Номер) Тогда
				МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			КонецЕсли;
			
			ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = НалоговыйУчетУСН.ВидимостьКнопкиКУДиР(ЭтотОбъект);
			
		КонецЕсли;
		
	Иначе
		
		
		Если Контрагент.Пустая() Тогда
			Контрагент=СчетКонтрагента.Владелец;
			ПриИзмененииКонтрагента();
			ПриИзмененииДоговора();
			УстановитьФокус();
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ (СчетКонтрагента.Пустая() ИЛИ СчетОрганизации.Пустая() ИЛИ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств) Тогда
		
		Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			ТекстСообщения="Несоответствие валют выбранных счетов организации!";
		Иначе
			ТекстСообщения="Валюта счета контрагента не соответствует валюте счета организации!";
		КонецЕсли;
		
		Сообщить(ТекстСообщения);
		СчетКонтрагента = "";
		
		Возврат;
		
	КонецЕсли;	
	
	СформироватьНазначениеПлатежа();

КонецПроцедуры // ПриИзмененииСчетаКонтрагента()

Процедура ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию()

	Если ПеречислениеВБюджет Тогда
	
		КодОКАТО = Организация.КодПоОКАТО;
		
		Если ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж Тогда
		
			СтатусСоставителя   = ?(Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "01", "09");
			ПоказательОснования = ЭлементыФормы.ПоказательОснования.СписокВыбора[0].Значение;
			ПоказательТипа      = ЭлементыФормы.ПоказательТипа.СписокВыбора[0].Значение;
			ПоказательПериода   = "МС." + Формат(Месяц(Дата), "ЧЦ=2; ЧВН=") + "." + Формат(Год(Дата), "ЧГ=");
			
			УстановитьРеквизитыПоказателяПериода();
			
		ИначеЕсли ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ТаможенныйПлатеж Тогда
			
			СтатусСоставителя   = ?(Организация.ЮрФизЛицо = Перечисления.ЮрФизЛицо.ЮрЛицо, "06", "17");
			ПоказательОснования = ЭлементыФормы.ПоказательОснованияТаможня.СписокВыбора[0].Значение;
			ПоказательТипа      = ЭлементыФормы.ПоказательТипаТаможня.СписокВыбора[0].Значение;
			ПоказательПериода   = "";
			ПоказательНомера    = "0";
			
		Иначе
			
			СтатусСоставителя   = "08";
			ПоказательОснования = "0";
			ПоказательТипа      = "0";
			ПоказательПериода   = "0";
			ПоказательНомера    = "0";
			
		КонецЕсли;
	
	Иначе
		
		КодБК               = "";
		КодОКАТО            = "";
		СтатусСоставителя   = "";
		ПоказательОснования = "";
		ПоказательТипа      = "";
		ПоказательПериода   = "";
		ПоказательНомера    = "";
		ПоказательДаты      = "";
		
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнениеСписковРеквизитовПлатежейВБюджет()

	СписокКодовБК 	 = ВосстановитьЗначение("СписокСохраненныхКодовБК");
	Если ТипЗнч(СписокКодовБК) <> Тип("СписокЗначений") Тогда
		СписокКодовБК	 = Новый СписокЗначений;
	КонецЕсли;
	
	СписокКодовОКАТО = ВосстановитьЗначение("СписокСохраненныхКодовОКАТО");
	Если ТипЗнч(СписокКодовОКАТО) <> Тип("СписокЗначений") Тогда
		СписокКодовОКАТО = Новый СписокЗначений;
	КонецЕсли;

	ЭлементыФормы.СтатусСоставителя.СписокВыбора   = ПолучитьСписокСтатусовОтправителя();
	
	ЭлементыФормы.ПоказательОснования.СписокВыбора = ПолучитьСписокОснованийНалоговогоПлатежа();
	ЭлементыФормы.ПоказательТипа.СписокВыбора      = ПолучитьСписокПоказателейТипаНалоговогоПлатежа();
	
	ЭлементыФормы.ПоказательОснованияТаможня.СписокВыбора = ПолучитьСписокОснованийТаможенногоПлатежа();
	ЭлементыФормы.ПоказательТипаТаможня.СписокВыбора      = ПолучитьСписокПоказателейТипаТаможенногоПлатежа();

	СписокПериодичностьУплаты = Новый СписокЗначений;
	СписокПериодичностьУплаты.Добавить("МС", "МС - месячный платеж");
	СписокПериодичностьУплаты.Добавить("КВ", "КВ - квартальный платеж");
	СписокПериодичностьУплаты.Добавить("ПЛ", "ПЛ - полугодовой платеж");
	СписокПериодичностьУплаты.Добавить("ГД", "ГД - годовой платеж"); 
	СписокПериодичностьУплаты.Добавить("-",  "Платеж по конкретной дате");
	СписокПериодичностьУплаты.Добавить("0",  "0 - значение не указывается");
	ЭлементыФормы.ПериодичностьУплаты.СписокВыбора = СписокПериодичностьУплаты;
	
КонецПроцедуры // ЗаполнениеСписковРеквизитовПлатежейВБюджет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;

	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа,,ПараметрОбъектКопирования);
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
						
			УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
			
			Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
				ПеречислениеВБюджет = Истина;
				УстановитьВидПлатежаВБюджет();
				ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
			КонецЕсли;
			
			АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
				Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
									 
			УстановитьРеквизитыПлательщика();
			УстановитьРеквизитыПолучателя();
			
			Если НЕ ЗначениеЗаполнено(ВидПлатежа) Тогда	
				ВидПлатежа         = ВосстановитьЗначение("ПлатежноеПоручениеИсходящееВидПлатежа");
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ОчередностьПлатежа) Тогда	
				ОчередностьПлатежа         = 6;
			КонецЕсли;
			
			СформироватьНазначениеПлатежа();
			
		Иначе
			
			УстановитьКурсДокумента();
			ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
			ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
			
		КонецЕсли;
		
		
	Иначе

		УстановитьКурсДокумента();
		ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	КонецЕсли;
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мОтражатьВРегламентированномУчете = ЗначениеЗаполнено(Организация) И Организация.ОтражатьВРегламентированномУчете;
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	УстановитьВидимостьСубконто();
	
		
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										ВидОперации.Метаданные().ЗначенияПеречисления, 
										Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	Список = РасшифровкаПлатежа.Количество() > 1;

	Если ЧастичнаяОплата Тогда
		ЭлементыФормы.НадписьЧастичнаяОплата.Заголовок = УправлениеДенежнымиСредствами.СформироватьТекстЧастичнаяОплата(Ссылка,"ДенежныеСредстваКСписанию","ДокументСписания");
	КонецЕсли;

	//Установка меню Клиент-Банк
	РаботаСДиалогами.УстановкаПодменюКлиентБанк(ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Подменю1.Кнопки.КлиентБанк, ЭтотОбъект);
	
	ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного = Оплачено;
	Если НЕ Оплачено Тогда
		ЭлементыФормы.ДатаОплаты.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	Если ПеречислениеВБюджет И (ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж) Тогда
		УстановитьРеквизитыПоказателяПериода();
	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьВидимостьСубконто();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП  Тогда
		
		// Оповестим оплачиваемые документы выплаты зарплаты
		Если Проведен Тогда
			Для каждого СтрокаТЧ Из ПеречислениеЗаработнойПлаты Цикл
				Если мПлатежныеВедомости[СтрокаТЧ.Ведомость] <> Неопределено Тогда
					мПлатежныеВедомости.Удалить(СтрокаТЧ.Ведомость);
				КонецЕсли;
				Оповестить("ОбновитьФорму", ,СтрокаТЧ.Ведомость);
			КонецЦикла;
		КонецЕсли;
		
		Для каждого Ведомость Из мПлатежныеВедомости Цикл
			Оповестить("ОбновитьФорму", Ведомость.Ключ);
		КонецЦикла;
		
	КонецЕсли;
	
	СохранитьЗначение("ПлатежноеПоручениеИсходящееВидПлатежа", ВидПлатежа);
	
КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	СтарыйВидОперации=ВидОперации;
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции

		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		
		ВидОперации = Перечисления.ВидыОперацийППИсходящее[Кнопка.Имя];
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
			ПеречислениеВБюджет = Истина;
			УстановитьВидПлатежаВБюджет();
			ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.РасчетыПоКредитамИЗаймамСРаботниками
			ИЛИ ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			ПеречислениеВБюджет = Ложь;
			УстановитьВидПлатежаВБюджет();
			ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
		КонецЕсли;
		
		РасшифровкаПлатежа.Очистить();
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		Список = Ложь;
		
		УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
		
		УстановитьФокус();
		СформироватьНазначениеПлатежа();
		
		ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
		
		УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Истина);
	
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
			ОписаниеТипаПрочихРасходов = Новый ОписаниеТипов("СправочникСсылка.ПрочиеДоходыИРасходы");
			СубконтоДт1 = ОписаниеТипаПрочихРасходов.ПривестиЗначение(СубконтоДт1);
		КонецЕсли;
	
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			
			Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
				ВалютаВзаиморасчетовРаботника = ВалютаДокумента;
			КонецЕсли;
			
			ПриИзмененииВалютыВзаиморасчетовРаботника();
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			
			Контрагент      = Справочники.Контрагенты.ПустаяСсылка();
			СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
			ЭлементыФормы.СчетКонтрагента.ВыборПоВладельцу = Организация;
			
		ИначеЕсли СтарыйВидОперации = Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
			
			СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
			ЭлементыФормы.СчетКонтрагента.ВыборПоВладельцу = Контрагент;
			
		КонецЕсли;
		
		АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
			Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
		
		УстановитьРеквизитыПлательщика();
		УстановитьРеквизитыПолучателя();

	КонецЕсли;
		
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	Если мПрименениеУСН Тогда
		НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, Истина);
	КонецЕсли;

	УстановитьВидимость();
		
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура заполняет реквизиты документа по созданному в режиме обработки "Клиент банк" контрагенту
//
Процедура ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
	
	Если Контрагент.Пустая() Тогда
		
		Контрагент            			=НовыйКонтрагент;
		СчетКонтрагента					=НовыйКонтрагент.ОсновнойБанковскийСчет;
		СтрокаПлатеж.ДоговорКонтрагента =НовыйКонтрагент.ОсновнойДоговорКонтрагента;
		
		ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, ?(ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, Дата, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты))));
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
		ВалютаДокумента, 
		ВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
		РеквизитыКонтрагента.Очистить();
		
		//Установка меню Клиент-Банк
		РаботаСДиалогами.УстановкаПодменюКлиентБанк(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1.Кнопки.КлиентБанк, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыПоКонтрагенту()

//Процедура вызывается при выборе пункта подменю "Клиент-Банк" командной панели
//
Процедура ОсновныеДействияФормыКнопкиКонтрагента(Кнопка)
	
	Если РеквизитыКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Обработка =Обработки.КлиентБанк.Создать();
	Обработка.Организация =Организация;
	ТипКонтрагента=Лев(РеквизитыКонтрагента[0].Реквизит,10);
	
	СтрокаИНН=РеквизитыКонтрагента.Найти(ТипКонтрагента+"ИНН","Реквизит");
	
	Если НЕ СтрокаИНН=Неопределено Тогда
		
		ИННКраткий=СтрокаИНН.Значение;
		НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
		
		Если НЕ НовыйКонтрагент.Пустая() Тогда
			
			ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
			Предупреждение("Контрагент с ИНН "+ИННКраткий+" уже был создан ранее.")
			
		Иначе                         
			
			Если РеквизитыКонтрагента.Количество()>0 Тогда
				                            
				ФормаКонтрагентов =Обработка.ПолучитьФорму("ФормаКонтрагентов",ЭтаФорма);
				ФормаКонтрагентов.СформироватьИЗагрузитьДеревоПоТаблицеЗначений(РеквизитыКонтрагента);
				ФормаКонтрагентов.ОткрытьМодально();
				
				//Проверяем, не был ли создан контрагент в сеансе работы с обработкой
				НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
				
				Если НЕ НовыйКонтрагент.Пустая() Тогда
					
					ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;		
	
	УстановитьВидимость();
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);

	УстановитьКурсДокумента();
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ?(ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, Дата, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты))));
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Обработчик события "ПриИзменении" реквизита "Организация"
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизации();
	
    УстановитьВидимость();

	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
	
	УстановитьРеквизитыПлательщика();

	УстановитьВидимость();
	УстановитьФокус();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетКонтрагента"
//
Процедура СчетКонтрагентаПриИзменении(Элемент)

	ПриИзмененииСчетаКонтрагента();
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
	
	УстановитьРеквизитыПолучателя();

КонецПроцедуры // СчетКонтрагентаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииПриИзменении(Элемент)

	ПриИзмененииСчетаОрганизации();
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
	
	УстановитьРеквизитыПлательщика();

	УстановитьВидимость();
	УстановитьФокус();
	
КонецПроцедуры // СчетОрганизацииПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Обработчик события "ПриИзменении" реквизита "СтавкаНДС"
//
Процедура СтавкаНДСПриИзменении(Элемент)

	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	СформироватьНазначениеПлатежа();

КонецПроцедуры // СтавкаНДСПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СуммаНДС"
//
Процедура СуммаНДСПриИзменении(Элемент)

	СформироватьНазначениеПлатежа();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

Процедура СуммаДокументаРасчетыПриИзменении(Элемент)

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
		РассчитатьСуммуВзаиморасчетов();
	Иначе			
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
			
КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуПлатежа();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();

	Если ЗначениеЗаполнено(Контрагент) Тогда
		СчетКонтрагента=Контрагент.ОсновнойБанковскийСчет;
	Иначе
		СчетКонтрагента=Неопределено;
	КонецЕсли;

	ПриИзмененииСчетаКонтрагента();

	ПриИзмененииДоговора();
	УстановитьФокус();

	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
	
	УстановитьРеквизитыПолучателя();

КонецПроцедуры

Процедура ОбновлениеОтображения()

	Если СтрокаПлатеж <> Неопределено Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
			ВалютаВзаиморасчетов = ВалютаВзаиморасчетовРаботника;
		Иначе
			ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли;
		
		ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(
			ВалютаВзаиморасчетов, СтрокаПлатеж.КурсВзаиморасчетов, СтрокаПлатеж.КратностьВзаиморасчетов,
			мВалютаРегламентированногоУчета, Истина);
		
		НадписьВалютаДокумент = Строка(СчетОрганизации.ВалютаДенежныхСредств);
		
		// Надпись НадписьСуммаВзаиморасчетов
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
			НадписьСуммаВзаиморасчетов = "Сумма <нет валюты>:";
		Иначе
			НадписьСуммаВзаиморасчетов = "Сумма " + СокрЛП(ВалютаВзаиморасчетов) + ":";
		КонецЕсли;
		
		ЭлементыФормы.НадписьИтогоСписок.Заголовок = "Итого платежей по списку: "
			+ Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"), "ЧЦ=15; ЧДЦ=2; ЧН=Ноль")
			+ " " + СокрЛП(ВалютаДокумента);
										
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ТекстКурсаЗаявки = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(
				ВалютаВзаиморасчетов, СтрокаПлатеж.КурсВзаиморасчетовПлан, СтрокаПлатеж.КратностьВзаиморасчетов,
				мВалютаРегламентированногоУчета, Истина);
			
			ЭлементыФормы.ИнфНадписьКурсаЗаявки.Заголовок            = ТекстКурсаЗаявки;
			ЭлементыФормы.ИнфНадписьКурсаЗаявкиРаботник.Заголовок    = ТекстКурсаЗаявки;
			ЭлементыФормы.ИнфНадписьКурсаЗаявкиПодотчетник.Заголовок = ТекстКурсаЗаявки;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Истина);

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	УправлениеДенежнымиСредствами.ПроверкаРасшифровкиПлатежногоДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	Если Ответственный.Пустая() Тогда
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		
		ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;
		Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом) Тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом=СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
		
		Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств.Пустая() Тогда
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
				
	Иначе
		
		ДоговорКонтрагента=Новый(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		
		мПлатежныеВедомости = Новый Соответствие;
		Если Проведен Тогда
			Для каждого СтрокаТЧ Из Ссылка.ПеречислениеЗаработнойПлаты Цикл
				мПлатежныеВедомости.Вставить(СтрокаТЧ.Ведомость)
			КонецЦикла; 
		КонецЕсли;
		
	Иначе
		Если ПеречислениеЗаработнойПлаты.Количество() <> 0 Тогда
			ПеречислениеЗаработнойПлаты.Очистить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетУчетаПриИзменении(Элемент)

	Если Элемент.Значение = мСчетБУ тогда
		Возврат;
	КонецЕсли;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СубконтоДт1, ЭлементыФормы.СубконтоДт1,
		СубконтоДт2, ЭлементыФормы.СубконтоДт2,
		СубконтоДт3, ЭлементыФормы.СубконтоДт3);

	мСчетБУ = Элемент.Значение;
	
    Если ОтражатьВНалоговомУчете  И НЕ мПрименениеУСН Тогда
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПрочееСписаниеБезналичныхДенежныхСредств тогда
			Если СпецифическиеСоответствияСчетовБУиНУдляДокумента.Получить(Элемент.Значение)= Неопределено тогда
				СчетУчетаРасчетовСКонтрагентомНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",  Элемент.Значение), , Дата);
			Иначе
				СчетУчетаРасчетовСКонтрагентомНУ = СпецифическиеСоответствияСчетовБУиНУдляДокумента.Получить(Элемент.Значение);
			КонецЕсли;
			СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);
		КонецЕсли;
	Иначе
		СчетУчетаРасчетовСКонтрагентомНУ = Неопределено;
	КонецЕсли;

	УстановитьВидимостьСубконто();
	
	СтруктураЗатрат = Новый Структура("Счет,Субконто1,Субконто2,Субконто3,СчетНУ","СчетУчетаРасчетовСКонтрагентом","СубконтоДт1","СубконтоДт2","СубконтоДт3","СчетУчетаРасчетовСКонтрагентомНУ");
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВДокументе(ЭтаФорма, Истина, СтруктураЗатрат, Дата)	

КонецПроцедуры // СчетУчетаПриИзменении()

Процедура СубконтоДт1НачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоДт"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоДт"+н]);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
	
КонецПроцедуры

Процедура СубконтоДт1ПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ мПрименениеУСН Тогда
		
		БухгалтерскийУчет.ЗаменитьСубконтоНУ(СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовСКонтрагентомНУ, 1, СубконтоДт1, СубконтоНУДт1);
	
		СчетУчетаРасчетовСКонтрагентомНУ = НалоговыйУчет.ОпределитьСчетНУВШапке(Организация, Дата, СчетУчетаРасчетовСКонтрагентом, СубконтоДт1,СубконтоДт2,СубконтоДт3);
		СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);
		
	Иначе
		СчетУчетаРасчетовСКонтрагентомНУ = Неопределено;
		СубконтоНУДт1 = Неопределено;
	КонецЕсли;	
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДт2");
	СписокСубконто.Добавить("СубконтоДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

Процедура СубконтоДт2ПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ мПрименениеУСН Тогда
		
		БухгалтерскийУчет.ЗаменитьСубконтоНУ(СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовСКонтрагентомНУ, 2, СубконтоДт2, СубконтоНУДт2);
	
		СчетУчетаРасчетовСКонтрагентомНУ = НалоговыйУчет.ОпределитьСчетНУВШапке(Организация, Дата, СчетУчетаРасчетовСКонтрагентом, СубконтоДт1,СубконтоДт2,СубконтоДт3);
		СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);
		
	Иначе
		СчетУчетаРасчетовСКонтрагентомНУ = Неопределено;
		СубконтоНУДт2 = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

Процедура СубконтоДт3ПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ мПрименениеУСН Тогда
		
		БухгалтерскийУчет.ЗаменитьСубконтоНУ(СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовСКонтрагентомНУ, 3, СубконтоДт3, СубконтоНУДт3);
	
		СчетУчетаРасчетовСКонтрагентомНУ = НалоговыйУчет.ОпределитьСчетНУВШапке(Организация, Дата, СчетУчетаРасчетовСКонтрагентом, СубконтоДт1,СубконтоДт2,СубконтоДт3);
		СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);
		
	Иначе
		СчетУчетаРасчетовСКонтрагентомНУ = Неопределено;
		СубконтоНУДт3 = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	ДоговорСтрокаПлатеж = СтрокаПлатеж.ДоговорКонтрагента;
	Если НЕ ДоговорСтрокаПлатеж.РасчетыВУсловныхЕдиницах
		И ДоговорСтрокаПлатеж.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
	Иначе
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();

	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;					
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении()
	
	Если ИнвертироватьСуммы Тогда
		
		РассчитатьСуммуПлатежа();
		
		Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
			РассчитатьСуммуПлатежаПлан();
		КонецЕсли;
		
	Иначе	
		
		Если РасшифровкаПлатежа.Количество()=1 Тогда
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				
				УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
				
				Если СтрокаПлатеж.СуммаВзаиморасчетов = 0 Тогда
					РассчитатьСуммуВзаиморасчетов();
				Иначе			
					РассчитатьКурсВзаиморасчетов();
				КонецЕсли;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
				
				Если СтрокаПлатеж.СуммаВзаиморасчетов = 0 Тогда
					РассчитатьСуммуВзаиморасчетов();
				Иначе			
					РассчитатьКурсВзаиморасчетов();
				КонецЕсли;
				
			Иначе
				
				СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;

				Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
					
					СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
										
				КонецЕсли;
				
			КонецЕсли;
			
			СформироватьНазначениеПлатежа();
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если мПрименениеУСН И НЕ ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПослеУдаления(Элемент)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьЧастичнаяОплатаНажатие(Элемент)
	
	ФормаДокументОплаты=Документы.ПлатежныйОрдерСписаниеДенежныхСредств.ПолучитьФормуСписка();
	
	ФормаДокументОплаты.Отбор.РасчетныйДокумент.Установить(Ссылка);
	
	ФормаДокументОплаты.ЭлементыФормы.ДокументСписок.НастройкаОтбора.РасчетныйДокумент.Доступность=Ложь;
	
	ФормаДокументОплаты.Открыть();
	
КонецПроцедуры

// Заполняет ИНН плательщика при нажатии на кнопку
//
Процедура ЗаполнитьИННПлательщикаНажатие(Элемент)

	Если НЕ Организация.Пустая() Тогда
		ИННПлательщика  = Организация.ИНН;
	КонецЕсли;

КонецПроцедуры

// Заполняет КПП плательщика при нажатии на кнопку
//
Процедура ЗаполнитьКПППлательщикаНажатие(Элемент)

	Если НЕ Организация.Пустая() Тогда
			КПППлательщика = Организация.КПП;
	КонецЕсли;

КонецПроцедуры

// Заполняет ИНН получателя при нажатии на кнопку
//
Процедура ЗаполнитьИННПолучателяНажатие(Элемент)

	Если НЕ Контрагент.Пустая() Тогда
		ИННПолучателя = Контрагент.ИНН;
	КонецЕсли;

КонецПроцедуры

// Заполняет КПП получателя при нажатии на кнопку
//
Процедура ЗаполнитьКПППолучателяНажатие(Элемент)

	Если НЕ Контрагент.Пустая() Тогда
		КПППолучателя = Контрагент.КПП;
	КонецЕсли;

КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаНДСПриИзменении(Элемент)
	
	СформироватьНазначениеПлатежа();
	
КонецПроцедуры

Процедура УстановитьЗначениеПриВыборе(ИсходноеЗначение,ЗначениеВыбора)
	
	Если НЕ ЗначениеЗаполнено(ИсходноеЗначение) Тогда
		ИсходноеЗначение=ЗначениеВыбора;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеПриВыборе() 

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();			
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
						
			УстановитьФокус();
			
			УстановитьВидимость();

			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
			
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПеречислениеЗП Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаВыплата.Проект) Тогда
			СтрокаВыплата.Проект=ЗначениеВыбора.Проект;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаВыплата.СтатьяДвиженияДенежныхСредств) Тогда
			СтрокаВыплата.СтатьяДвиженияДенежныхСредств=ЗначениеВыбора.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		СтрокаВыплата.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
	ИначеЕсли Источник.КлючУникальности="ФормаПодбораПланируемыхПлатежей" Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда	
				
				НДСПоУмолчанию=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
				
				СтрокаПлатеж.ДоговорКонтрагента=ЗначениеВыбора.ДоговорКонтрагента;
				ПриИзмененииДоговора();
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетов;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Сделка,ЗначениеВыбора.Сделка);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КурсВзаиморасчетов,ЗначениеВыбора.КурсВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КратностьВзаиморасчетов,ЗначениеВыбора.КратностьВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаВзаиморасчетов,ЗначениеВыбора.СуммаВзаиморасчетов);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
			Если СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа 
				ИЛИ СтрокаПлатеж.СуммаПлатежа=0 Тогда
				
				СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа;
				СтрокаПлатеж.СуммаПлатежаПлан=ЗначениеВыбора.СуммаПлатежаПлан;
				
			ИначеЕсли СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
				
				РассчитатьСуммуПлатежаПлан();
				
			КонецЕсли;
			
			УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРеглУчета(ЭтотОбъект,СтрокаПлатеж, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
		Иначе
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаПлатежа,ЗначениеВыбора.СуммаПлатежа);
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан = ?(ЗначениеВыбора.СуммаВзаиморасчетов<>0, ЗначениеВыбора.СуммаПлатежа / ЗначениеВыбора.СуммаВзаиморасчетов, 0);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;	
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
					
		КонецЕсли;
						
	Иначе
		
		НДСПоУмолчанию=?(НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС),УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС"),
						СтрокаПлатеж.СтавкаНДС);
		
		УправлениеДенежнымиСредствами.ОбработкаПодбораЗадолженностей(ЭтотОбъект,СтрокаПлатеж,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
	КонецЕсли;
	
	СформироватьНазначениеПлатежа();
	
	УстановитьФокус();
	
	УстановитьВидимость();
				
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодбор(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
 	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,"<0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("СсылкаНаДокумент"				,?(Проведен, Ссылка, ЭтотОбъект));
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"	,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СформироватьНазначениеПлатежа();
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
	УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Ложь);
	
КонецПроцедуры

Процедура ДоговорЗаймаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДоговорЗайма) Тогда
		
		Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
			ФизЛицо  = ДоговорЗайма.ФизЛицо;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
			
			ВалютаВзаиморасчетовРаботника = ДоговорЗайма.ВалютаДокумента;
			
			СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, ?(ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, Дата, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты))));
			СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
			РассчитатьСуммуПлатежа();
			УстановитьВидимость();
			
		КонецЕсли;	
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КурсВзаиморасчетовРаботникПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовРаботникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	Если ВалютаВзаиморасчетовРаботника.Пустая() Тогда
		Сообщить("Не указана валюта взаиморасчетов");
		Возврат;
	КонецЕсли;
							   
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаВзаиморасчетовРаботника;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   				   
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура ПриИзмененииВалютыВзаиморасчетовРаботника()
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		
		Если НЕ УправлениеДенежнымиСредствами.ПроверитьЗначениеРеквизитаДокумента(РасчетныйДокументРаботника, "ВалютаДокумента", ВалютаВзаиморасчетовРаботника, "АвансовыйОтчет") Тогда
			РасчетныйДокументРаботника = Документы.АвансовыйОтчет.ПустаяСсылка();
		КонецЕсли;
		
		Если ВалютаДокумента <> ВалютаВзаиморасчетовРаботника Тогда
			ОтражатьВБухгалтерскомУчете = Ложь;
			ОтражатьВНалоговомУчете     = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, ?(ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, Дата, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты))));
	СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура ВалютаВзаиморасчетовРаботникаПриИзменении(Элемент)
	
	ПриИзмененииВалютыВзаиморасчетовРаботника();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СуммаВзаиморасчетовРаботникПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
	Если Не СтрокаПлатеж.ДокументПланированияПлатежа.Пустая() Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДоговорЗаймаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Документы.ДоговорЗаймаСРаботником.ПолучитьФормуВыбора(,Элемент,);
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
		
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Значение = ВалютаВзаиморасчетовРаботника;
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВалютаДокумента.Доступность=Ложь;		
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Значение = ФизЛицо;
		ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ФизЛицо.Доступность=Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		
		ФормаВыбора.ПараметрТекущаяСтрока=Элемент.Значение;
		
	КонецЕсли;
	
	ФормаВыбора.Открыть();
		
КонецПроцедуры

Процедура ФизЛицоПриИзменении(Элемент)
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику 
		И НЕ УправлениеДенежнымиСредствами.ПроверитьЗначениеРеквизитаДокумента(РасчетныйДокументРаботника, "ФизЛицо", ФизЛицо, "АвансовыйОтчет") Тогда
		
		РасчетныйДокументРаботника = Документы.АвансовыйОтчет.ПустаяСсылка();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		ДоговорЗайма = Документы.ДоговорЗаймаСРаботником.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументРаботникаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.АвансовыйОтчет.ПолучитьФормуВыбора(, Элемент);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбора.ДокументСписок.Отбор.Организация.Установить(Организация);
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Установить(ВалютаВзаиморасчетовРаботника);
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВалютаДокумента.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ФизЛицо) Тогда
		ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Установить(ФизЛицо);
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ФизЛицо.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументРаботникаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(РасчетныйДокументРаботника) Тогда
		
		Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
			ФизЛицо = РасчетныйДокументРаботника.ФизЛицо;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
			ВалютаВзаиморасчетовРаботника = РасчетныйДокументРаботника.ВалютаДокумента;
			СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, ?(ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, Дата, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты))));
			СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность; 
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = РасчетныйДокументРаботника.Организация;
		КонецЕсли;
		
		ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
		
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		РассчитатьСуммуПлатежа();
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
		
	СформироватьНазначениеПлатежа();
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику 
		И НЕ ЗначениеЗаполнено(ФизЛицо) 
		Тогда
		Сообщить("Не указан подотчетник.");
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				, ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					, Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				, ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				, КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			, КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						, Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					, "ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			, Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	, Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				, СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					, УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			, СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					, Организация);
	СтруктураПараметров.Вставить("Проект"						, СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств", СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
    	СтруктураПараметров.Вставить("Контрагент"				, ФизЛицо);
	Иначе
    	СтруктураПараметров.Вставить("Контрагент"				, Контрагент);
	КонецЕсли;
	
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			, СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						, СтрокаПлатеж.Сделка);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

 Процедура РасшифровкаПлатежаДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
			
КонецПроцедуры

Процедура ДокументПланированияПлатежаПрочиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Сделка"						,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
										
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыПриАктивизацииСтроки(Элемент)
	
	СтрокаВыплата=ЭлементыФормы.ПеречислениеЗаработнойПлаты.ТекущиеДанные;
	
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
		
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаВыплата.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаВыплата.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаВыплата.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Справочники.Контрагенты.ПустаяСсылка());
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Сделка"						,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);	
										
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	Если Не Элемент.Значение.Пустая() Тогда
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СУММА(ЗарплатаКВыплатеОрганизацийЗарплата.Сумма + ЗарплатаКВыплатеОрганизацийЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Итог
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеОрганизацийЗарплата
		|ГДЕ
		|	ЗарплатаКВыплатеОрганизацийЗарплата.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка",Элемент.Значение);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		СуммаДляЗаполнения = Выборка.Итог;
		ЭлементыФормы.ПеречислениеЗаработнойПлаты.ТекущиеДанные.СуммаПлатежа = СуммаДляЗаполнения;
		Если РасшифровкаПлатежа.Количество()=1 Тогда
			
			СтрокаПлатеж.СуммаПлатежа = СуммаДляЗаполнения;
			СтрокаПлатеж.СуммаВзаиморасчетов = СуммаДляЗаполнения;
			
		КонецЕсли;	
		
		СформироватьНазначениеПлатежа();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыВедомостьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомДополнительный.ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, Организация, Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк, Контрагент) 
	
КонецПроцедуры

Процедура СуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
			Предупреждение("Для выбора курса взаиморасчетов нужно выбрать валюту взаиморасчетов."); 
			Возврат;
		КонецЕсли;
		ВалютаВзаиморасчетов = ВалютаВзаиморасчетовРаботника;
	Иначе
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
			Возврат;
		КонецЕсли;
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты));

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты));

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура ОплаченоПриИзменении(Элемент)
	
	Если Оплачено Тогда
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Истина;
	Иначе
		ЭлементыФормы.ДатаОплаты.АвтоОтметкаНезаполненного=Ложь;
		ЭлементыФормы.ДатаОплаты.ОтметкаНезаполненного=Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура ыыполняет настройку платежа УСН
//
Процедура ДействияФормыНастройкаУСН(Кнопка)

	ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиПлатежаУСН");

	ФормаНастройки.Графа4       = Графа4_УСН;
	ФормаНастройки.Графа5       = Графа5_УСН;
	ФормаНастройки.Графа6       = Графа6_УСН;
	ФормаНастройки.Графа7       = Графа7_УСН;
	ФормаНастройки.НДС          = НДС_УСН;
	ФормаНастройки.ДоходЕНВД    = ДоходыЕНВД_УСН;
	ФормаНастройки.РасходЕНВД   = РасходыЕНВД_УСН;
	ФормаНастройки.Содержание   = Содержание_УСН;
	ФормаНастройки.ТолькоДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);

	СруктураПараметров = ФормаНастройки.ОткрытьМодально();

	Если СруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Графа4_УСН      <> СруктураПараметров.Графа4
	 ИЛИ Графа5_УСН      <> СруктураПараметров.Графа5
	 ИЛИ Графа6_УСН      <> СруктураПараметров.Графа6
	 ИЛИ Графа7_УСН      <> СруктураПараметров.Графа7
	 ИЛИ НДС_УСН         <> СруктураПараметров.НДС
	 ИЛИ ДоходыЕНВД_УСН  <> СруктураПараметров.ДоходыЕНВД
	 ИЛИ РасходыЕНВД_УСН <> СруктураПараметров.РасходыЕНВД
	 ИЛИ Содержание_УСН  <> СруктураПараметров.Содержание Тогда

		РучнаяНастройка_УСН = Истина;

	КонецЕсли;

	Графа4_УСН      = СруктураПараметров.Графа4;
	Графа5_УСН      = СруктураПараметров.Графа5;
	Графа6_УСН      = СруктураПараметров.Графа6;
	Графа7_УСН      = СруктураПараметров.Графа7;
	НДС_УСН         = СруктураПараметров.НДС;
	ДоходыЕНВД_УСН  = СруктураПараметров.ДоходыЕНВД;
	РасходыЕНВД_УСН = СруктураПараметров.РасходыЕНВД;
	Содержание_УСН  = СруктураПараметров.Содержание;

КонецПроцедуры // ДействияФормыНастройкаУСН()

Процедура ПеречислениеЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СуммаДокумента = ПеречислениеЗаработнойПлаты.Итог("СуммаПлатежа");
	РасшифровкаПлатежа[0].СуммаПлатежа = СуммаДокумента;
	СформироватьНазначениеПлатежа();
	
	Если НЕ ЗначениеЗаполнено(Организация) И НЕ ОтменаРедактирования Тогда
		Организация=Элемент.ТекущиеДанные.Ведомость.Организация;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;

КонецПроцедуры

Процедура СчетКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)	
	
	Если ВидОперации=Перечисления.ВидыОперацийППИсходящее.ПереводНаДругойСчет Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаСчета = Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент);
			
		ФормаСчета.Отбор.Владелец.ВидСравнения  = ВидСравнения.Равно;
		ФормаСчета.Отбор.Владелец.Значение      = Организация;
		ФормаСчета.Отбор.Владелец.Использование = Истина;
		
		Если Не СчетОрганизации.Пустая() Тогда
			
			ФормаСчета.Отбор.ВалютаДенежныхСредств.ВидСравнения  = ВидСравнения.Равно;
			ФормаСчета.Отбор.ВалютаДенежныхСредств.Значение      = СчетОрганизации.ВалютаДенежныхСредств;
			ФормаСчета.Отбор.ВалютаДенежныхСредств.Использование = Истина;
			
		КонецЕсли;
		
		ФормаСчета.РежимВыбора = Истина;
		
		ФормаСчета.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура РасшифровкаПлатежаПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура Проект1НачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура Проект2НачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПриИзмененииСтатьиДДС(Строка)
	
	Если НЕ ЗначениеЗаполнено(Строка.Проект) Тогда
		
		ВидРаспределения=УправлениеПроектами.ПолучитьВидРаспределенияДляСтатьиДДС(Строка.СтатьяДвиженияДенежныхСредств, ?(Оплачено,ДатаОплаты,Дата));
		
		Если НЕ ВидРаспределения=Неопределено Тогда
			Строка.Проект=ВидРаспределения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСтатьиДДС()

Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПрочиеПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредств1ПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура ПеречислениеЗаработнойПлатыСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(СтрокаВыплата);

КонецПроцедуры

Процедура ДатаОплатыПриИзменении(Элемент)
	
	// Если валюта договора совпадает с валютой документа, то перезаполним курсы взаиморачетов
	Для каждого СтрокаРасшифровкиПлатежа Из РасшифровкаПлатежа Цикл
		
			СтруктураКурсаВалютаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаРасшифровкиПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов, ?(ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах, Дата, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты))));
			СтрокаРасшифровкиПлатежа.КурсВзаиморасчетов        = СтруктураКурсаВалютаВзаиморасчетов.Курс;
			СтрокаРасшифровкиПлатежа.КратностьВзаиморасчетов   = СтруктураКурсаВалютаВзаиморасчетов.Кратность;
		
	КонецЦикла;
	
	
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомНУПриИзменении(Элемент)

	Если Элемент.Значение = мСчетНУ тогда
		Возврат;
	КонецЕсли;

	УстановитьВидимостьСубконтоНУ();

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СубконтоНУДт1, ЭлементыФормы.СубконтоНУДт1,
		СубконтоНУДт2, ЭлементыФормы.СубконтоНУДт2,
		СубконтоНУДт3, ЭлементыФормы.СубконтоНУДт3);

	мСчетНУ = Элемент.Значение;

КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СубконтоНУДт1НачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоНУДт"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоНУДт"+н]);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоНУДт1".
//
Процедура СубконтоНУДт1ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоНУДт2");
	СписокСубконто.Добавить("СубконтоНУДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

Процедура ДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента,
														СтрокаПлатеж.Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

Процедура ДокументПланированияПлатежаРаботникиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,ФизЛицо);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Сделка"						,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);

	
КонецПроцедуры

Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();

КонецПроцедуры

Процедура СуммаДокументаПодотчетникПриИзменении(Элемент)

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
		РассчитатьСуммуВзаиморасчетов();
	Иначе			
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;

КонецПроцедуры

Процедура УстановитьРеквизитыПлательщика()

	ТекстПлательщика = АвтоЗначенияРеквизитов.ТекстПлательщика;
	ИННПлательщика   = АвтоЗначенияРеквизитов.ИННПлательщика;
	КПППлательщика   = АвтоЗначенияРеквизитов.КПППлательщика;

КонецПроцедуры

Процедура УстановитьРеквизитыПолучателя()

	ТекстПолучателя = АвтоЗначенияРеквизитов.ТекстПолучателя;
	ИННПолучателя   = АвтоЗначенияРеквизитов.ИННПолучателя;
	КПППолучателя   = АвтоЗначенияРеквизитов.КПППолучателя;

КонецПроцедуры

Процедура ИННПлательщикаПриИзменении(Элемент)
		
	Если ПустаяСтрока(ИННПлательщика) Тогда
		ИННПлательщика = АвтоЗначенияРеквизитов.ИННПлательщика;
	КонецЕсли;

КонецПроцедуры

Процедура КПППлательщикаПриИзменении(Элемент)
		
	Если ПустаяСтрока(КПППлательщика) Тогда
		КПППлательщика = АвтоЗначенияРеквизитов.КПППлательщика;
	КонецЕсли;

КонецПроцедуры

Процедура ТекстПлательщикаПриИзменении(Элемент)
		
	Если ПустаяСтрока(ТекстПлательщика) Тогда
		ТекстПлательщика = АвтоЗначенияРеквизитов.ТекстПлательщика;
	КонецЕсли;

КонецПроцедуры

Процедура ИННПолучателяПриИзменении(Элемент)
	
	Если ПустаяСтрока(ИННПолучателя) Тогда
		ИННПолучателя = АвтоЗначенияРеквизитов.ИННПолучателя;
	КонецЕсли;
	
КонецПроцедуры

Процедура ТекстПолучателяПриИзменении(Элемент)
	
	Если ПустаяСтрока(ТекстПолучателя) Тогда
		ТекстПолучателя = АвтоЗначенияРеквизитов.ТекстПолучателя;
	КонецЕсли;
	
КонецПроцедуры

Процедура КПППолучателяПриИзменении(Элемент)
	
	Если ПустаяСтрока(КПППолучателя) Тогда
		КПППолучателя = АвтоЗначенияРеквизитов.КПППолучателя;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидПеречисленияВБюджетПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ВидПеречисленияВБюджет) Тогда
		ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
	КонецЕсли;
	
	ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
	УстановитьВидимость();
	
КонецПроцедуры

Процедура УстановитьВидПлатежаВБюджет()

	Если ПеречислениеВБюджет Тогда
		Если ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеНалога Тогда
			ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.НалоговыйПлатеж;
		Иначе
			ВидПеречисленияВБюджет = Перечисления.ВидыПеречисленийВБюджет.ИнойПлатеж;
		КонецЕсли;
	Иначе
		ВидПеречисленияВБюджет = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПеречислениеВБюджетПриИзменении(Элемент)
	
	АвтоЗначенияРеквизитов = ФормированиеПечатныхФорм.СформироватьАвтоЗначенияРеквизитовПлательщикаПолучателя(
		Организация, СчетОрганизации, Контрагент, СчетКонтрагента, ВидОперации, ПеречислениеВБюджет);
		
	УстановитьРеквизитыПлательщика();
	УстановитьРеквизитыПолучателя();
	
	УстановитьВидПлатежаВБюджет();
	ЗаполнитьРеквизитыПлатежаВБюджетПоУмолчанию();
	
	Если НЕ ПеречислениеВБюджет Тогда
		ПериодичностьУплаты = "";
		ГодПлатежа    = 0;
		ПериодПлатежа = 0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура УстановитьРеквизитыПоказателяПериода()

	Если ПоказательПериода = "0" ИЛИ ПустаяСтрока(ПоказательПериода) ИЛИ ПустаяСтрока(СтрЗаменить(ПоказательПериода, ".", "")) Тогда
		ПериодичностьУплаты = "0";
	Иначе
		
		СтрокаВидаПериода = Лев(ПоказательПериода, 2);
		СтрокаПериода     = Сред(ПоказательПериода, 4, 2);
		СтрокаГода        = Сред(ПоказательПериода, 7);
		
		Если СтрокаВидаПериода = "ГД" Тогда
			ПериодичностьУплаты = "ГД";
		ИначеЕсли СтрокаВидаПериода = "ПЛ" Тогда
			ПериодичностьУплаты = "ПЛ";
		ИначеЕсли СтрокаВидаПериода = "КВ" Тогда
			ПериодичностьУплаты = "КВ";
		ИначеЕсли СтрокаВидаПериода = "МС" Тогда
			ПериодичностьУплаты = "МС";
		Иначе
			ПериодичностьУплаты = "-";
		КонецЕсли;
		
		Попытка
			
			ГодЧислом    = Число(СтрокаГода);
			ПериодЧислом = Число(СтрокаПериода);
			Если ПериодичностьУплаты = "-" Тогда
				ДеньЧислом  = Число(СтрокаВидаПериода);
				ДатаПлатежа = Дата(ГодЧислом, ПериодЧислом, ДеньЧислом);
			Иначе
				ГодПлатежа    = ГодЧислом;
				ПериодПлатежа = ПериодЧислом;
			КонецЕсли;
			
		Исключение
			
			ПоказательПериода   = "0";
			ПериодичностьУплаты = "0";
			
		КонецПопытки;
		
	КонецЕсли;
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();

КонецПроцедуры

Процедура УстановитьПоказательПериода()

	Если ПериодичностьУплаты = "0" Тогда
	
		ПоказательПериода = "0";
	
	ИначеЕсли ПериодичностьУплаты = "-" Тогда
	
		ПоказательПериода = Формат(ДатаПлатежа, "ДФ=dd.MM.yyyy");
		
	Иначе
		
		ПоказательПериода = ПериодичностьУплаты + "." + Формат(ПериодПлатежа, "ЧЦ=2; ЧН=; ЧВН=") + "." + Формат(ГодПлатежа, "ЧЦ=4; ЧГ=");
	
	КонецЕсли;

КонецПроцедуры

Процедура ПериодичностьУплатыПриИзменении(Элемент)
	
	Если ПустаяСтрока(ПериодичностьУплаты) Тогда
		ПериодичностьУплаты = "0";
	КонецЕсли;
	
	Если ПериодичностьУплаты <> "0" И ПериодичностьУплаты <> "-" Тогда
		
		Если ГодПлатежа = 0 Тогда
			ГодПлатежа = Год(РабочаяДата);
		КонецЕсли;
		
		Если ПериодичностьУплаты = "ГД" Тогда
			ПериодПлатежа = 0;
		Иначе
			Если ПериодичностьУплаты = "МС" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 12);
			ИначеЕсли ПериодичностьУплаты = "КВ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 4);
			ИначеЕсли ПериодичностьУплаты = "ПЛ" Тогда
				ПериодПлатежа = Мин(ПериодПлатежа, 2);
			КонецЕсли;
			ПериодПлатежа = Макс(1, ПериодПлатежа);
		КонецЕсли;
		
	Иначе
		
		ГодПлатежа = 0;
	
	КонецЕсли;
	
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

Процедура ГодПлатежаПриИзменении(Элемент)
	
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

Процедура ПериодПлатежаПриИзменении(Элемент)
	
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

Процедура ДатаПлатежаПриИзменении(Элемент)
	
	УстановитьПоказательПериода();
	
	УстановитьВидимостьРеквизитовПлатежаВБюджет();
	
КонецПроцедуры

Процедура СтатусСоставителяПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтатусСоставителя) Тогда
		СтатусСоставителя = "08";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказательОснованияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ПоказательОснования) Тогда
		ПоказательОснования = "0";
	КонецЕсли;
	
КонецПроцедуры

Процедура ПоказательТипаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ПоказательТипа) Тогда
		ПоказательТипа = "0";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ

ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Почтой");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Телеграфом");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Электронно");
ЭлементыФормы.ВидПлатежа.СписокВыбора.Добавить("Срочно");

ЗаполнениеСписковРеквизитовПлатежейВБюджет();

СпецифическиеСоответствияСчетовБУиНУдляДокумента = Новый Соответствие();
СпецифическиеСоответствияСчетовБУиНУдляДокумента.Вставить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы,ПланыСчетов.Налоговый.ВнереализационныеРасходы);
СпецифическиеСоответствияСчетовБУиНУдляДокумента.Вставить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы,ПланыСчетов.Налоговый.ВнереализационныеДоходы);