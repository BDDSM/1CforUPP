Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

Перем мКолонкиПродукция, мКолонкиМатериалы;
Перем мФормаВводПараметровВыпуска, мТекущаяСтрокаПродукцияПараметры;

Перем мЧас;
Перем мМинута;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мИспользоватьТолькоСборочныеСпецификации Экспорт;

Перем мПодразделение;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Продукция,ЭлементыФормы.КоманднаяПанельПродукция.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Материалы,ЭлементыФормы.КоманднаяПанельМатериалы.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура изменяет доступность элемента формы .ВремяНапоминания
//
Процедура ДоступностьНапоминаний()

	ЭлементыФормы.ВремяНапоминания.Доступность = НапомнитьОСобытии;
	
КонецПроцедуры // ДоступностьНапоминаний()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	Если ТабличнаяЧасть = Материалы Тогда
		СписокЗапросов.Добавить("ОстаткиНоменклатуры", 	"По остаткам номенклатуры");
		СписокЗапросов.Добавить("Спецификации", 		"По спецификациям");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьСерия               = Ложь;
	ОтборУслугПоСправочнику = Ложь;
	ПодбиратьУслуги         = Истина;

	Если ТабличнаяЧасть = Продукция Тогда
		Команда                 = "ПодборВТабличнуюЧастьПродукция";
		ИмяТабличнойЧасти       = "Продукция";
	ИначеЕсли ТабличнаяЧасть = Материалы Тогда
		Команда           = "ПодборВТабличнуюЧастьМатериалы";
		ИмяТабличнойЧасти = "Материалы";
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                  , Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация"            , Организация);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , Ложь);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"        , мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"        , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", ОтборУслугПоСправочнику);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;
	Перем Спецификация, текПродукция, ХарактеристикаПродукции, КоличествоПродукции, ВидВоспроизводства;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Спецификация"    , Спецификация);
	ЗначениеВыбора.Свойство("Продукция"       , текПродукция);
	ЗначениеВыбора.Свойство("ХарактеристикаПродукции"  , ХарактеристикаПродукции);
    ЗначениеВыбора.Свойство("КоличествоПродукции"  , КоличествоПродукции);
    ЗначениеВыбора.Свойство("ВидВоспроизводства"  , ВидВоспроизводства);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	Если  ТабличнаяЧасть = Материалы и ЗначениеЗаполнено(Спецификация) Тогда
		СтруктураОтбора.Вставить("ХарактеристикаПродукции", ХарактеристикаПродукции);
		СтруктураОтбора.Вставить("Продукция", Продукция);
        СтруктураОтбора.Вставить("Спецификация", Спецификация);
		СтруктураОтбора.Вставить("ВидВоспроизводства", ВидВоспроизводства);
	КонецЕсли;
	

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;

		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		
		Если ТабличнаяЧасть = Продукция Тогда
			СтрокаТабличнойЧасти.Спецификация 		= УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
		КонецЕсли;
		Если ТабличнаяЧасть = Материалы и ЗначениеЗаполнено(Спецификация) Тогда 
			  СтрокаТабличнойЧасти.Спецификация = Спецификация;
			  СтрокаТабличнойЧасти.Продукция = текПродукция;
			  СтрокаТабличнойЧасти.ХарактеристикаПродукции = ХарактеристикаПродукции;
			  СтрокаТабличнойЧасти.ВидВоспроизводства = ВидВоспроизводства;
			  //Если такой продукции нет в ТЧ Продукция - добавим
			  СтруктураОтбораПродукция = новый Структура("Номенклатура, ХарактеристикаНоменклатуры, Спецификация",текПродукция,ХарактеристикаПродукции,Спецификация);
			  Если Продукция.НайтиСтроки(СтруктураОтбораПродукция).Количество()=0 и ЗначениеЗаполнено(текПродукция) Тогда
				  СтрокаТабЧастиПродукция = Продукция.Добавить();
				  СтрокаТабЧастиПродукция.Номенклатура = текПродукция;
				  СтрокаТабЧастиПродукция.ХарактеристикаНоменклатуры = ХарактеристикаПродукции;
				  СтрокаТабЧастиПродукция.Спецификация = Спецификация;
				  СтрокаТабЧастиПродукция.Коэффициент = 1;
				  СтрокаТабЧастиПродукция.ЕдиницаИзмерения = текПродукция.ЕдиницаХраненияОстатков;
				  СтрокаТабЧастиПродукция.Количество = КоличествоПродукции;
				  УстановитьВидВоспроизводстваПоУмолчанию(СтрокаТабЧастиПродукция, Продукция);
			  КонецЕсли;
			  
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидВоспроизводства) Тогда
			УстановитьВидВоспроизводстваПоУмолчанию(СтрокаТабличнойЧасти, ТабличнаяЧасть);
		КонецЕсли;	
	КонецЕсли;

	Если ТабличнаяЧасть = Продукция Тогда
		ИмяТабличнойЧасти = "Продукция";
	ИначеЕсли ТабличнаяЧасть = Материалы Тогда
		ИмяТабличнойЧасти = "Материалы";
		УстановитьДоступностьКнопкиЗаполнитьИПровести();
	КонецЕсли;
	
	ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяКолонка = ЭлементыФормы[ИмяТабличнойЧасти].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Процедура - обработчик события "ОбработкаВыбора" поля Исполнитель
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура ИсполнительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	Иначе
		Элемент.Значение = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры
 
// Процедура - обработчик события "ПриИзменении" поля ввода Исполнитель 
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура ИсполнительНачалоВыбора(Элемент, СтандартнаяОбработка)
	// переопеределим выбор физлица на выбор из списка сотрудников
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Исполнитель
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнительАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода Исполнитель
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнительОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение, , Истина);
	
КонецПроцедуры

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть документа.
//	ЗаказПокупателя - заказ по которому производится заполнение
// 	Очистить		- очистить предварительно ТЧ или добавить в конец
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю(ТабличнаяЧасть, ЗаказПокупателя = Неопределено, Очистить = Истина, ТипДокумента = Неопределено)

	Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
	
		ФормаЗаказы = Документы[ТипДокумента].ПолучитьФормуВыбора();
		ФормаЗаказы.Заголовок = "Выберите заказ покупателя для заполнения заказа на производство";
		ФормаЗаказы.РежимВыбора = Истина;
		
		ЗаказПокупателя = ФормаЗаказы.ОткрытьМодально();
		
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Возврат;
	КонецЕсли;

	Если Очистить И ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Табличная часть ""Продукция"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены! Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	ЗаполнитьПродукциюПоЗаказуПокупателю(ЗаказПокупателя);

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть документа.
//	ЗаказПокупателя - заказ по которому производится заполнение
// 	Очистить		- очистить предварительно ТЧ или добавить в конец
//
Процедура ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказу(ТабличнаяЧасть, ВнутреннийЗаказ = Неопределено, Очистить = Истина, ТипДокумента = Неопределено)

	Если НЕ ЗначениеЗаполнено(ВнутреннийЗаказ) Тогда
		ФормаЗаказы = Документы[ТипДокумента].ПолучитьФормуВыбора();
		ФормаЗаказы.Заголовок = "Выберите внутренний заказ для заполнения заказа на производство";
		ФормаЗаказы.РежимВыбора = Истина;
		ВнутреннийЗаказ = ФормаЗаказы.ОткрытьМодально();
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(ВнутреннийЗаказ) Тогда
		Возврат;
	КонецЕсли;

	Если Очистить И ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Табличная часть ""Продукция"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены! Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоОстаткамВнутреннийЗаказ(ТабличнаяЧасть, ВнутреннийЗаказ);

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть документа.
//	ЗаказНаПроизводство - заказ по которому производится заполнение
// 	Очистить		- очистить предварительно ТЧ или добавить в конец
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуНаПроизводство(ТабличнаяЧасть, ЗаказНаПроизводство = Неопределено, Очистить = Истина, ТипДокумента = Неопределено)

	Если НЕ ЗначениеЗаполнено(ЗаказНаПроизводство) Тогда
		ФормаЗаказы = Документы[ТипДокумента].ПолучитьФормуВыбора();
		ФормаЗаказы.Заголовок = "Выберите заказ на производство для заполнения заказа на производство";
		ФормаЗаказы.РежимВыбора = Истина;
		ЗаказНаПроизводство = ФормаЗаказы.ОткрытьМодально();
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(ЗаказНаПроизводство) Тогда
		Возврат;
	КонецЕсли;

	Если Очистить И ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Табличная часть ""Продукция"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены! Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	ЗаполнитьПродукциюПоЗаказуНаПроизводство(ЗаказНаПроизводство);

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю()

Процедура УстановитьВидВоспроизводстваПоУмолчанию(СтрокаТабличнойЧасти, ТабличнаяЧасть)
		
	Если ТабличнаяЧасть = Продукция Тогда
		СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;
	Иначе
		СтрокаТабличнойЧасти.ВидВоспроизводства = СтрокаТабличнойЧасти.Номенклатура.ВидВоспроизводства;
	КонецЕсли;	
КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораПоСпецификации(ТабличнаяЧасть, ЗначениеВыбора)
	
	Перем Спецификация, Количество;
	
	ЗначениеВыбора.Свойство("Спецификация", Спецификация);
	ЗначениеВыбора.Свойство("Количество", 	Количество);
	
	Если ТипЗнч(Спецификация) <> Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
		
	Отбор = Новый Структура();
	
	ИсходныеКомплектующие = УправлениеПроизводством.ПолучитьМатериалыПоСпецификации(Спецификация, Количество, Отбор, Дата, мИспользоватьТолькоСборочныеСпецификации);
	
	Если ИсходныеКомплектующие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ИсходныеКомплектующие Цикл
	
		СтруктураПодбора = Новый Структура();
		СтруктураПодбора.Вставить("Номенклатура",       Строка.Номенклатура);
		СтруктураПодбора.Вставить("ЕдиницаИзмерения",   Строка.ЕдиницаИзмерения);
		СтруктураПодбора.Вставить("Характеристика",     Строка.ХарактеристикаНоменклатуры);
		СтруктураПодбора.Вставить("Серия",     			Справочники.СерииНоменклатуры.ПустаяСсылка());
		СтруктураПодбора.Вставить("Количество",     	Строка.Количество);
		СтруктураПодбора.Вставить("СтатьяЗатрат",     	Строка.СтатьяЗатрат);
		СтруктураПодбора.Вставить("ВидВоспроизводства", Строка.ВидВоспроизводства);

		СтруктураПодбора.Вставить("Спецификация",       Спецификация);
		СтруктураПодбора.Вставить("КоличествоПродукции", Количество);
		
		Если ЗначениеЗаполнено(Спецификация)
	   		И Спецификация.ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная Тогда
        	СтруктураПодбора.Вставить("Продукция", 					Спецификация.ВыходныеИзделия[0].Номенклатура);
			СтруктураПодбора.Вставить("ХарактеристикаПродукции", 	Спецификация.ВыходныеИзделия[0].ХарактеристикаНоменклатуры);
        КонецЕсли;

		ОбработкаПодбора(ТабличнаяЧасть, СтруктураПодбора);
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПодбораПоСпецификации()

// Процедура очищает колонку "Размещение" табличной части.
//
Процедура ОчиститьРазмещениеВТабличнойЧасти()

	Материалы.Свернуть(
		// Поля (исключаем Размещение)
		"ВидВоспроизводства,
		|ЕдиницаИзмерения,
		|ЕдиницаИзмеренияМест,
		|Заказ,
		|Коэффициент,
		|Номенклатура,
		|НомерПередела,
		|Подразделение,
		|Продукция,
		|Спецификация,
		|ХарактеристикаНоменклатуры,
		|ХарактеристикаПродукции",
		// Количество
		"Количество,
		|КоличествоМест");

КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура - обработчик события "Файлы".
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если Ссылка.Пустая() Тогда
		Предупреждение("Сначала запишите документ.");
		Возврат;
	КонецЕсли;

	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
	
	ФормаФайлов.Изображения.Отбор.Объект.Использование                               = Истина;
	ФормаФайлов.Изображения.Отбор.Объект.Значение                                    = Ссылка;
	ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность         = Ложь;
	ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость                   = Ложь;

	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;

	ОбязательныеОтборы = Новый Структура;
	ОбязательныеОтборы.Вставить("Объект",Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();
	
КонецПроцедуры

Процедура ПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
    НастроитьОтборПодразделений(Элемент, СтандартнаяОбработка)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Колонки      = ЭлементыФормы.Продукция.Колонки;
	КолонкиМатериалы = ЭлементыФормы.Материалы.Колонки;
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
	// Управление доступностью элементов формы в зависимости от вида операции
	КнопкиКоманднойПанели = ЭлементыФормы.ДействияФормы.Кнопки;

	КнопкиКоманднойПанели.ДействиеАнализ.Доступность = Истина;
	КолонкиМатериалы.Размещение.ИзменятьВидимость         = Истина;

	ЭлементыФормы.Материалы.Колонки.Продукция              .Видимость = мИспользоватьПотребностиЗаказовНаПроизводство;
	ЭлементыФормы.Материалы.Колонки.ХарактеристикаПродукции.Видимость = мИспользоватьПотребностиЗаказовНаПроизводство;

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
		НачалоДня(Дата) = НачалоДня(ТекущаяДата())
		И Материалы.Количество() > 0;

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Отказ = Не УправлениеЗаказами.ИспользоватьЗаказыНаПроизводство(Истина);
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	ДоступностьНапоминаний();

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
        Если ПараметрОбъектКопирования<>неопределено Тогда
			ДатаЗапуска = РабочаяДата;
			ДатаИсполнения = РабочаяДата;
		Иначе
			Если НЕ ЗначениеЗаполнено(ДатаИсполнения) Тогда
				ДатаИсполнения = РабочаяДата;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ДатаЗапуска) Тогда
				ДатаЗапуска = РабочаяДата;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Продукция.Колонки, 	СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Материалы.Колонки, 	СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиПродукция);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,новый Структура("Дата,Организация,Подразделение,ДатаЗапуска,ДатаИсполнения"));
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	СтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	
	СтраницыПанели.Продукция.Заголовок 		= "Продукция и услуги (" + ДокументОбъект.Продукция .Количество() + " поз.)";
	СтраницыПанели.Материалы.Заголовок 		= "Материалы (" + ДокументОбъект.Материалы.Количество() + " поз.)";
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда, Спецификация;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьПродукция" Тогда
			ОбработкаПодбора(Продукция, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
		
			ЗначениеВыбора.Свойство("Спецификация", Спецификация);
			Если Спецификация <> Неопределено Тогда
				ОбработкаПодбораПоСпецификации(Материалы, ЗначениеВыбора);
			Иначе
				ОбработкаПодбора(Материалы, ЗначениеВыбора);
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	Если мПодразделение<>Подразделение Тогда   //изменилось значение подразделения - надо поменять подразделение в корректировках
		ИзменитьПодразделениеВКорректировкахЗаказаНаПроизводство();
	КонецЕсли;
	
КонецПроцедуры // ПослеЗаписи()

Процедура ИзменитьПодразделениеВКорректировкахЗаказаНаПроизводство()
	Запрос = новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ Ссылка,
	|Проведен
	|ИЗ Документ.КорректировкаЗаказаНаПроизводство
	|ГДЕ ЗаказНаПроизводство=&Заказ И Подразделение<>&Подразделение";
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	Запрос.УстановитьПараметр("Подразделение", Подразделение);
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Возврат;
	КонецЕсли;

	Выборка = Результат.Выбрать();
	Пока Выборка.Следующий() цикл
		ДокОбъект = Выборка.ссылка.ПолучитьОбъект();
		Попытка
			ДокОбъект.Заблокировать();
			ДокОбъект.Подразделение = Подразделение;
			ДокОбъект.Записать(?(Выборка.Проведен,РежимЗаписиДокумента.Проведение,РежимЗаписиДокумента.Запись));
		Исключение
			ОбщегоНазначения.Сообщение("Не удалось автоматически изменить подразделение в документе "+Выборка.Ссылка,СтатусСообщения.Важное);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры


// Процедура - обработчик события "ПриЗакрытии" формы.
//
Процедура ПриЗакрытии()
	
	мФормаВводПараметровВыпуска = неопределено;
	Оповестить("ГрафикЗаказов_ЗакрытаФормаЗаказа",ЭтотОбъект.Ссылка);
КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НапомнитьОСобытии Тогда
	
		Если Ответственный.Пустая() Тогда

			Предупреждение("Для использования напоминаний необходимо указать ответственное лицо.");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;

		Если НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(Ответственный,"ИспользоватьНапоминания") Тогда

			Предупреждение("Для ответственного лица, которое вы выбрали, недоступна система напоминаний.
			               |Для пользователя " + СокрЛП(Ответственный) + " необходимо установить флажок использования напоминаний.");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли; 
	
	КонецЕсли; 
	
	мПодразделение = Ссылка.Подразделение;
КонецПроцедуры // ПередЗаписью()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Продукция", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Продукция".
//
Процедура КоманднаяПанельПродукцияДействиеПодбор(Кнопка)

	ДействиеПодбор(Продукция);

КонецПроцедуры // КоманднаяПанельПродукцияДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Материалы", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Материалы".
//
Процедура КоманднаяПанельМатериалыДействиеПодбор(Кнопка)
	
	ДействиеПодбор(Материалы);
	
КонецПроцедуры // КоманднаяПанельМатериалыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		Возврат;
	КонецЕсли; 

	// Заполнение документа
	Форма = ПолучитьОбщуюФорму("ФормаВыбораПараметровАвторезервирования", ЭтаФорма, );

	//Установим реквизиты и переменные формы.
	Форма.ФормаДокумента = ЭтаФорма;
	Провести = Форма.ОткрытьМодально();
	//если форму закрыли просто крестом, 
	Если Провести=неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ОчищатьРазмещениеПередЗаполнением Тогда
		ОчиститьРазмещениеВТабличнойЧасти();
		Записать(РежимЗаписиДокумента.Запись); // Иначе не сможем корректно заплнить таб. часть "Материалы"
	КонецЕсли;
	
	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();	
		НаборОстаткиТоваров = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборОстаткиТоваров.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваров.Записать();
			
		НаборРазмещениеЗаказов  = РегистрыНакопления.РазмещениеЗаказовПокупателей.СоздатьНаборЗаписей();
		НаборРазмещениеЗаказов.Отбор.Регистратор.Установить(Ссылка);
		НаборРазмещениеЗаказов.Записать();
			
	КонецЕсли;

		// Заполнение документа
	СтруктПараметров = Новый Структура;
	СтруктПараметров.Вставить("ЗаказНаПроизводство", Ссылка);
	СтруктПараметров.Вставить("Авторезервирование",  Авторезервирование);
	СтруктПараметров.Вставить("Авторазмещение",      Авторазмещение);
	СтруктПараметров.Вставить("СтратегияАвторезервированияПоЗаказам", СтратегияАвторезервированияПоЗаказам);
		
	ЗаполнитьТабличныеЧастиПередПроведениемУпр(СтруктПараметров);
	
	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеЗаполнитьИПровести()

// Процедура вызывается при нажатии кнопки "Анализ" командной панели формы,
// вызывает анализ текущего состояния заказа.
//
Процедура ДействияФормыДействиеАнализ(Кнопка)
	ЗаказыНаПроизводствоИПереработку.СформироватьОтчетАнализЗаказаНаПроизводство(Ссылка,истина, истина);
КонецПроцедуры // ДействияФормыДействиеАнализ()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели 
// табличного поля "Продукция", вызывает сервисный механизм для изменения табличной части.
//
Процедура КоманднаяПанельПродукцияДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧасти      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧасти = ИзменениеТабличнойЧасти.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧасти.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧасти.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧасти.мЕстьНДС                   = Ложь; 
	ФормаИзменениеТабличнойЧасти.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧасти.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧасти.мИмяТабличнойЧастиДокумента = "Продукция";

	//Перенесем табличную часть
	ИзменениеТабличнойЧасти.Товары.Загрузить(Продукция.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧасти.Открыть();

КонецПроцедуры // КоманднаяПанельПродукцияДействиеИзменить()

// Процедура вызывается при нажатии кнопки "Заполнить по заказу покупателя" командной панели 
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияЗаполнитьПоЗаказуПокупателя(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю(Продукция,,, "ЗаказПокупателя");
		
КонецПроцедуры // КоманднаяПанельПродукцияЗаполнитьПоЗаказуПокупателя()

// Процедура вызывается при нажатии кнопки "Добавить по заказу покупателя" командной панели 
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияДобавитьПоЗаказуПокупателя(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю(Продукция,,Ложь, "ЗаказПокупателя");
	
КонецПроцедуры // КоманднаяПанельПродукцияДобавитьПоЗаказуПокупателя()

// Процедура вызывается при нажатии кнопки "Заполнить по внутреннему заказу" командной панели 
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияЗаполнитьПоВнутреннемуЗаказу(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказу(Продукция, , , "ВнутреннийЗаказ");
	
КонецПроцедуры // КоманднаяПанельПродукцияЗаполнитьПоВнутреннемуЗаказу()

// Процедура вызывается при нажатии кнопки "Добавить по внутреннему заказу" командной панели 
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияДобавитьПоВнутреннемуЗаказу(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоВнутреннемуЗаказу(Продукция, , Ложь, "ВнутреннийЗаказ");
	
КонецПроцедуры // КоманднаяПанельПродукцияДобавитьПоВнутреннемуЗаказу()

// Процедура вызывается при нажатии кнопки "Заполнить по заказу на производство" командной панели 
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияЗаполнитьПоЗаказуНаПроизводство(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуНаПроизводство(Продукция, , , "ЗаказНаПроизводство");
	
КонецПроцедуры // КоманднаяПанельПродукцияЗаполнитьПоЗаказуНаПроизводство()

// Процедура вызывается при нажатии кнопки "Добавить по заказу на производство" командной панели 
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияДобавитьПоЗаказуНаПроизводство(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуНаПроизводство(Продукция, , Ложь, "ЗаказНаПроизводство");
	
КонецПроцедуры // КоманднаяПанельПродукцияДобавитьПоЗаказуНаПроизводство()

// Процедура вызывается при нажатии кнопки "Заполнить по спецификации" командной панели 
// табличного поля "Материалы", вызывает сервисный механизм для изменения табличной части.
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоСпецификации(Кнопка)
	
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос("Табличная часть ""Материалы"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены! Продолжить?" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Материалы.Очистить();
	КонецЕсли;
	
	ЗаполнитьМатериалыПоСпецификации(Материалы, "Материалы");
	УстановитьДоступностьКнопкиЗаполнитьИПровести();

КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоСпецификации()

// Процедура вызывается при нажатии кнопки "Параметры" командной панели 
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияПараметрыВыпуска(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мТекущаяСтрокаПродукцияПараметры = СтрокаТабличнойЧасти;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Продукция");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	мФормаВводПараметровВыпуска = Обработки.ВводПараметровВыпускаПродукции.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	мФормаВводПараметровВыпуска.СтруктураИсходныхПараметров = СтруктураПараметров;
	мФормаВводПараметровВыпуска.Открыть();
	
КонецПроцедуры // КоманднаяПанельПродукцияПараметрыВыпуска()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПРОДУКЦИЯ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Продукция".
//
Процедура ПродукцияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиПродукция, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиПродукция, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры // ПродукцияПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "Продукция".
//
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти.КлючСвязи = 0;
		СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;
	КонецЕсли;
	
КонецПроцедуры // ПродукцияПриНачалеРедактирования()

// Процедура - обработчик события "ПередУдалением" табличной части Продукция.
//
Процедура ПродукцияПередУдалением(Элемент, Отказ)
	текДанные = Элемент.ТекущиеДанные;
	Если текДанные = мТекущаяСтрокаПродукцияПараметры И мФормаВводПараметровВыпуска.Открыта() Тогда
		мФормаВводПараметровВыпуска.Закрыть();
	КонецЕсли;
	//удаление строк на закладке Материалы, связанных с продукцией
	струОтбор = новый Структура("Продукция, ХарактеристикаПродукции, Спецификация", текДанные.Номенклатура, текДанные.ХарактеристикаНоменклатуры, текДанные.Спецификация);
	масСтроки = Материалы.НайтиСтроки(струОтбор);
	Если масСтроки.Количество()>0 Тогда
		Ответ = Вопрос("На закладке Материалы содержатся строки, связанные с удаляемой строкой. Удалить эти строки с закладки Материалы автоматически?",РежимДиалогаВопрос.ДаНетОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = истина;
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого элемент из МасСтроки цикл
				Материалы.Удалить(элемент);
			КонецЦикла;
			
        КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПродукцияПередУдалением()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Продукция".
//
Процедура ПродукцияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеКонтактами.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Продукция");
	
КонецПроцедуры // ПродукцияПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Продукция".
//
Процедура ПродукцияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеКонтактами.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Продукция", ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПродукцияПеретаскивание()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Продукция".
//
Процедура ПродукцияНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
	
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;

КонецПроцедуры // ПродукцияНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Продукция".
//
Процедура ПродукцияХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);

КонецПроцедуры // ПродукцияХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Продукция".
//
Процедура ПродукцияЕдиницаПриИзменении(Элемент)

	// Сохраняем текущее значение коэффициента
	СтароеЗначениеКоэффициента = ЭлементыФормы.Продукция.ТекущиеДанные.Коэффициент;

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПродукцияЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Продукция".
//
Процедура ПродукцияЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПродукцияЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Продукция".
//
Процедура ПродукцияКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // ПродукцияКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Продукция".
//
Процедура ПродукцияКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПродукцияКоличествоМестПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации
// в табличной части "Продукция".
//
Процедура ПродукцияСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ЭлементыФормы.Продукция.ТекущиеДанные.Номенклатура) Тогда
		РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.Продукция.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры // ПродукцияСпецификацияНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказа
// в табличной части "Продукция".
//
Процедура ПродукцияЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Продукция", ДопПараметры);
	
КонецПроцедуры // ПродукцияЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ МАТЕРИАЛЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Материалы".
//
Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры // МатериалыПриВыводеСтроки()

// Процедура - обработчик события "ПроверкаПеретаскивания" табличной части "Материалы".
//
Процедура МатериалыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеКонтактами.ПроверкаПеретаскиванияВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Материалы");
	
КонецПроцедуры // МатериалыПроверкаПеретаскивания()

// Процедура - обработчик события "Перетаскивание" табличной части "Материалы".
//
Процедура МатериалыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Колонка)
	
	УправлениеКонтактами.ПеретаскиваниеВЗаказ(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, "Материалы", ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // МатериалыПеретаскивание()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
	
	УстановитьВидВоспроизводстваПоУмолчанию(СтрокаТабличнойЧасти, Материалы);

КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);
	
КонецПроцедуры // МатериалыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаПриИзменении(Элемент)

	// Сохраняем текущее значение коэффициента
	СтароеЗначениеКоэффициента = ЭлементыФормы.Материалы.ТекущиеДанные.Коэффициент;

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // МатериалыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Вид воспроизводства
// в строке табличной части "Материалы".
//
Процедура МатериалыВидВоспроизводстваПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Закупка
	 ИЛИ СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.ПринятыеВПереработку Тогда
		СтрокаТабличнойЧасти.Спецификация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // МатериалыВидВоспроизводстваПриИзменении()

// Процедура - обработчик события "ПриНачалеВыбора" поля ввода размещения
// в строке табличной части "Материалы"
//
Процедура МатериалыРазмещениеНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора,ИспользоватьЗаказыНаПроизводство",
			МассивДоступныеПоляОтбора, Истина);
			
	РаботаСДиалогами.НачалоВыбораЗначенияРазмещения(ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, ДопПараметры);
	
КонецПроцедуры // МатериалыРазмещениеНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ
// УПРАВЛЕНИЕ ОТНОШЕНИЯМИ С КЛИЕНТАМИ

// Процедура - обработчик события "НачалоВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбора(Элемент, СтандартнаяОбработка)

	мЧас = Час(Элемент.Значение);
	мМинута = Минута(Элемент.Значение);
	
КонецПроцедуры // ВремяНапоминанияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас*60*60 + мМинута*60;
	мЧас = 0;
	мМинута = 0;
	
КонецПроцедуры // ВремяНапоминанияОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" элемента формы (Флажка) НапомнитьОСобытии 
//
Процедура НапомнитьОСобытииПриИзменении(Элемент)

	Если НапомнитьОСобытии Тогда
		Если ВремяНапоминания = Дата("00010101000000") Тогда
			ВремяНапоминания = ТекущаяДата();
		КонецЕсли; 
	Иначе
		ВремяНапоминания = Дата("00010101000000");
	КонецЕсли; 
	
	ДоступностьНапоминаний();
	
КонецПроцедуры // НапомнитьОСобытииПриИзменении()

// Процедура - обработчик события "Нажатие" элемента формы НадписьСобытия 
//
Процедура НадписьСобытияНажатие(Элемент)

	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ФормаСобытий = Документы.Событие.ПолучитьФормуСписка(, , Ссылка);
	ФормаСобытий.ДокументСписок.Отбор.Основание.Значение = Ссылка;
	ФормаСобытий.ДокументСписок.Отбор.Основание.Использование = Истина;
	ФормаСобытий.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Основание.Доступность = Ложь;
	ФормаСобытий.Открыть();
	
КонецПроцедуры // КнопкаСобытийНажатие()

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента формы ВремяНапоминания 
//
Процедура ВремяНапоминанияНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактами.ВыбратьВремяИзСписка(Элемент, ЭтаФорма, Ответственный, СтандартнаяОбработка);
	
КонецПроцедуры // ВремяНапоминанияНачалоВыбораИзСписка()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры


// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации
// в табличной части "Материалы".
//
Процедура МатериалыСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ЭлементыФормы.Материалы.ТекущиеДанные.Продукция) Тогда
		РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.Материалы.ТекущиеДанные.Продукция, Элемент, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры // МатериалыСпецификацияНачалоВыбора()

Процедура ПродукцияСпецификацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекДанные = ЭлементыФормы.Продукция.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		Если ВыбранноеЗначение.ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная
			И ВыбранноеЗначение.ВыходныеИзделия.Количество() > 0 Тогда
			ТекДанные.Номенклатура = ВыбранноеЗначение.ВыходныеИзделия[0].Номенклатура;
			ТекДанные.ХарактеристикаНоменклатуры = ВыбранноеЗначение.ВыходныеИзделия[0].ХарактеристикаНоменклатуры;
			ТекДанные.ЕдиницаИзмерения = ТекДанные.Номенклатура.ЕдиницаХраненияОстатков;
			ТекДанные.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Производство;
			ТекДанные.Коэффициент = 1;
        КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура МатериалыСпецификацияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекДанные = ЭлементыФормы.Материалы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекДанные.Продукция) Тогда
		Если ВыбранноеЗначение.ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная
			И ВыбранноеЗначение.ВыходныеИзделия.Количество() > 0 Тогда
			ТекДанные.Продукция = ВыбранноеЗначение.ВыходныеИзделия[0].Номенклатура;
			ТекДанные.ХарактеристикаПродукции = ВыбранноеЗначение.ВыходныеИзделия[0].ХарактеристикаНоменклатуры;
        КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура МатериалыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НоваяСтрока Тогда // Чтобы установить доступность кнопки "Заполнить и провести".
		УстановитьДоступностьКнопкиЗаполнитьИПровести();
	КонецЕсли;
	
КонецПроцедуры // МатериалыПриОкончанииРедактирования()

Процедура МатериалыПослеУдаления(Элемент)

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры // МатериалыПослеУдаления()

Процедура НастроитьОтборПодразделений(Элемент, СтандартнаяОбработка)
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	РаботаСДиалогами.НачалоВыбораПодразделения(ТаблицаОтбора, Элемент, СтандартнаяОбработка);	
КонецПроцедуры


Процедура МатериалыПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	НастроитьОтборПодразделений(Элемент, СтандартнаяОбработка)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 

мЧас    = 0;
мМинута = 0;

мКолонкиПродукция 		= ЭлементыФормы.Продукция.Колонки;
мКолонкиМатериалы 		= ЭлементыФормы.Материалы.Колонки;

мИспользоватьТолькоСборочныеСпецификации = глЗначениеПеременной("ИспользоватьТолькоСборочныеСпецификации");