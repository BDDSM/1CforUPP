////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиУслуги, мКолонкиМатериалы, мКолонкиРаспределениеМатериалов, мКолонкиДокументы;
Перем мКолонкиПрочиеЗатраты, мКолонкиРаспределениеПрочихЗатрат;

Перем мПоДокументамРасчетов;
Перем мОтражатьВРегламентированномУчете;
Перем мРасчетыВУЕ;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

// Хранит курс редактируемой строки табличной части "Предоплата"
Перем мКурсСтрокиДокументаРасчетов;

Перем мПересчитыватьСкидку;
Перем мОрганизацияЯвляетсяПлательщикомЕНВД;
// Хранит текущее значение организации для контроля учетной политики, организация является плательщиком ЕНВД
Перем мТекущаяОрганизация;

// Содержит значение функциональной опции "ИспользоватьОбменЭД"
Перем мИспользоватьОбменЭД;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Материалы,ЭлементыФормы.КоманднаяПанельМатериалы.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПрочиеЗатраты,ЭлементыФормы.КоманднаяПанельПрочиеЗатраты.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаспределениеМатериалов,ЭлементыФормы.КоманднаяПанельРаспределениеМатериалов.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаспределениеПрочихЗатрат,ЭлементыФормы.КоманднаяПанельРаспределениеПрочихЗатрат.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыРасчетовСКонтрагентом,ЭлементыФормы.КоманднаяПанельДокументыРасчетовСКонтрагентом.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Услуги", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();
	ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Истина);

	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;

	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	мРасчетыВУЕ           = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
		Проект=ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;
	
	ДоступностьВидимостьЭлементовФормы();
	УстановитьАвтоотметку();

КонецПроцедуры // ПриИзмененииДоговора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  УслугиНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыУслуги(СтрокаТабличнойЧасти)

	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");

	// Заполнение цены зависит от розничности операции.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;
	КонецЕсли;
	
	СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, Неопределено);
	Если ОтражатьВБухгалтерскомУчете Тогда
		СтрокаТабличнойЧасти.СчетЗатрат = СчетаУчетаЗатрат.СчетУчетаБУ;
	Иначе
		СтрокаТабличнойЧасти.СчетЗатрат = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
	Если ОтражатьВНалоговомУчете Тогда
		СтрокаТабличнойЧасти.СчетЗатратНУ = СчетаУчетаЗатрат.СчетУчетаНУ;
	Иначе
		СтрокаТабличнойЧасти.СчетЗатратНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // ПриИзмененииНоменклатурыУслуги()

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатурыМатериалов(СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "")

	СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      		= СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	СтрокаТабличнойЧасти.СтатьяЗатрат         	= СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;

	Если ИмяТабличнойЧасти = "Материалы" Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест 	= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииНоменклатурыМатериалов()

// Процедура выполняет заполнение табличной части.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧасть(ТабличнаяЧасть)

	ПредставлениеЗаказПокупателя = Метаданные.Документы.ЗаказПокупателя.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	ИначеЕсли НЕ ЗначениеЗаполнено(Сделка)
		  или (Не ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		          И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю")) Тогда
		ТекстПредупреждения = "Не выбран заказ покупателя (счет на оплату).
							  |Заполнение невозможно.";
	
	ИначеЕсли Не Сделка.Проведен И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		ТекстПредупреждения = ПредставлениеЗаказПокупателя + " не проведен.
							  |Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, ,);
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;
	
	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
		Если ТабличнаяЧасть = Услуги Тогда
			СкопироватьУслуги();
		КонецЕсли;
	Иначе
		Если ТабличнаяЧасть = Услуги Тогда
            ЗаполнитьУслугиПоОстаткам();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧасть()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьСерия               = Ложь;
	ПодбиратьУслуги         = Ложь;
	ОтборУслугПоСправочнику = Ложь;
	СкрыватьХарактеристику  = Ложь;

	СтруктураПараметровПодбора = Новый Структура();

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("Спецификации", "По спецификациям");

	Если ТабличнаяЧасть = Услуги Тогда
		Команда                 = "ПодборВТабличнуюЧастьУслуги";
		Валюта                  = ВалютаДокумента;
		ИмяТабличнойЧасти       = "Услуги";
		ЕстьЦена                = мМожноМенятьЦенуВДокументе;
		ПодбиратьУслуги         = Истина;
		ОтборУслугПоСправочнику = Истина;
		СкрыватьХарактеристику  = Истина;

		СписокЗапросов.Добавить("РасходУслуги"   , "По услугам предприятия");
		СписокЗапросов.Добавить("РасходЦеныУслуг", "По ценам и услугам предприятия");
	ИначеЕсли ТабличнаяЧасть = Материалы Тогда
		Команда                 = "ПодборВТабличнуюЧастьМатериалы";
		Валюта                  = ВалютаДокумента;
		ИмяТабличнойЧасти       = "Материалы";
		ЕстьЦена                = Ложь;
		ПодбиратьУслуги         = Истина;
		ОтборУслугПоСправочнику = Ложь;
		ЕстьСерия               = Истина;

		СписокЗапросов.Добавить("РасходЦеныНоменклатуры"        , "По ценам номенклатуры");
		СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
		СписокЗапросов.Добавить("ОстаткиПроизводство"           ,"По остаткам в производстве");
		СтруктураПараметровПодбора.Вставить("Подразделение", Подразделение);
	КонецЕсли;

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                  , Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация"            , Неопределено);
	СтруктураПараметровПодбора.Вставить("ТипЦен"                 , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"     , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"             , Контрагент);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"        , Валюта);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"        , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", ОтборУслугПоСправочнику);
	СтруктураПараметровПодбора.Вставить("СкрыватьХарактеристику" , СкрыватьХарактеристику);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, СтатьяЗатрат, Спецификация;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("ВалютаЦены", 		ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура", 	Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество", 		Количество);
	ЗначениеВыбора.Свойство("Цена", 			Цена);
	ЗначениеВыбора.Свойство("Характеристика", 	Характеристика);
	ЗначениеВыбора.Свойство("Серия",			Серия);
	ЗначениеВыбора.Свойство("СтатьяЗатрат", 	СтатьяЗатрат);
	ЗначениеВыбора.Свойство("Спецификация", 	Спецификация);

	Если ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	Если ТабличнаяЧасть = Материалы Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения"          , ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
		Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			СтруктураОтбора.Вставить("СтатьяЗатрат", СтатьяЗатрат);
		КонецЕсли;
		Если ЗначениеЗаполнено(Спецификация) Тогда
			СтруктураОтбора.Вставить("Спецификация", Спецификация);
		КонецЕсли;
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Материалы Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);			

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения     = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент          = ЕдиницаИзмерения.Коэффициент;
		Если ТабличнаяЧасть <> Материалы Тогда
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
		КонецЕсли; 

		Если ТабличнаяЧасть = Материалы Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры = Серия;
			СтрокаТабличнойЧасти.СтатьяЗатрат      = ?(СтатьяЗатрат <> Неопределено, СтатьяЗатрат, Номенклатура.СтатьяЗатрат);
			СтрокаТабличнойЧасти.Спецификация      = Спецификация;

			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Пересчитаем цену в валюту документа.
			СтрокаТабличнойЧасти.Количество = Количество;
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
           	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
           	СтруктКурсДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты( ВалютаДокумента, Дата);
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены,
			     ВалютаДокумента, СтруктКурсДокумента.Курс, СтруктКурсДокумента.Кратность, Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     СуммаВключаетНДС,
			                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, Неопределено);
			УправлениеПроизводством.УстановитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Спецификация, Дата, Подразделение);
			
		КонецЕсли;
		
	КонецЕсли;

	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Материалы, "Материалы", "Услуги");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораПоСпецификации(ТабличнаяЧасть, ЗначениеВыбора)
	
	Перем Спецификация, Количество;
	
	ЗначениеВыбора.Свойство("Спецификация", Спецификация);
	ЗначениеВыбора.Свойство("Количество", 	Количество);
	
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	
	ИсходныеКомплектующие = УправлениеПроизводством.ПолучитьМатериалыПоСпецификации(Спецификация, Количество, Отбор, Дата, мИспользоватьТолькоСборочныеСпецификации);
	
	Если ИсходныеКомплектующие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ИсходныеКомплектующие Цикл
	
		СтруктураПодбора = Новый Структура();
		СтруктураПодбора.Вставить("Номенклатура",       Строка.Номенклатура);
		СтруктураПодбора.Вставить("ЕдиницаИзмерения",   Строка.ЕдиницаИзмерения);
		СтруктураПодбора.Вставить("Характеристика",     Строка.ХарактеристикаНоменклатуры);
		СтруктураПодбора.Вставить("Серия",     			Справочники.СерииНоменклатуры.ПустаяСсылка());
		СтруктураПодбора.Вставить("Количество",     	Строка.Количество);
		СтруктураПодбора.Вставить("СтатьяЗатрат",     	Строка.СтатьяЗатрат);
		СтруктураПодбора.Вставить("Спецификация",     	Спецификация);

		ОбработкаПодбора(ТабличнаяЧасть, СтруктураПодбора);
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПодбораПоСпецификации()

// Процедура обработка подбора прочих затрат
//
Процедура ОбработкаПодбораПрочихЗатрат( ТабЧасть, СтруктВыбора)
	
	НоваяСтрока = ТабЧасть.Найти( СтруктВыбора["СтатьяЗатрат"], "СтатьяЗатрат");
	
	Если НоваяСтрока = Неопределено Тогда
		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.СтатьяЗатрат = СтруктВыбора["СтатьяЗатрат"];
	КонецЕсли;
	
	НоваяСтрока.Сумма     = НоваяСтрока.Сумма     + СтруктВыбора.СуммаУпр;
	НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаРегл + СтруктВыбора.СуммаРегл;
	
КонецПроцедуры // ОбработкаПодбораПрочихЗатрат()

// Процедура подбора прочих затрат по остаткам в НЗП
//
Процедура ПодборПоПрочимЗатратам()
	
	СтруктПараметры = Новый Структура;
	СтруктПараметры.Вставить( "Подразделение",            Подразделение);
	СтруктПараметры.Вставить( "ПодразделениеОрганизации", ПодразделениеОрганизации);
	СтруктПараметры.Вставить( "ФлагУпрУчета",             ОтражатьВУправленческомУчете);
	СтруктПараметры.Вставить( "ФлагРеглУчета",            ОтражатьВБухгалтерскомУчете);
	СтруктПараметры.Вставить( "ВидЗатрат",                "НематериальныеЗатраты");
	СтруктПараметры.Вставить( "ДатаОстатков",             Дата);
	СтруктПараметры.Вставить( "Организация",              Организация);
	СтруктПараметры.Вставить( "Команда",                  "ПодборПрочихЗатрат");
	
	ОбработкаТабличныхЧастей.ОткрытьПодборСтатейЗатрат( ЭтаФорма, СтруктПараметры);
	
КонецПроцедуры // ПодборПоПрочимЗатратам()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть документа.
//	ЗаказНаПроизводство - заказ по которому производится заполнение
// 	Очистить		- очистить предварительно ТЧ или добавить в конец
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуНаПроизводство(ТабличнаяЧасть, ЗаказНаПроизводство = Неопределено, Очистить = Истина, ТипДокумента = Неопределено)

	Если НЕ ЗначениеЗаполнено(ЗаказНаПроизводство) Тогда
		ФормаЗаказы = Документы[ТипДокумента].ПолучитьФормуВыбора();
		ФормаЗаказы.Заголовок = "Выберите заказ на производство для заполнения заказа на производство";
		ФормаЗаказы.РежимВыбора = Истина;
		ЗаказНаПроизводство = ФормаЗаказы.ОткрытьМодально();
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(ЗаказНаПроизводство) Тогда
		Возврат;
	КонецЕсли;

	Если Очистить И ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоОстаткамЗаказНаПроизводство(ТабличнаяЧасть, ЗаказНаПроизводство);

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю()

// Процедура показывает на закладке "Предоплата" итоговые суммы 
// в валюте взаиморасчетов и в валюте регл.учета - всего по документу, предоплата, осталось оплатить
//
Процедура ПересчетСуммВзаиморасчетов()
	
	СуммаВзаиморасчетов = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетов, ВалютаДокумента,
	                                                 ДоговорКонтрагента.ВалютаВзаиморасчетов,
	                                                 ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
	                                                 ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);

	РаботаСДиалогами.ЗаполнитьНадписиРасчетовСКонтрагентом(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, СуммаВзаиморасчетов);

КонецПроцедуры

// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	
	Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)) Тогда
						
		Если Услуги.Количество() > 0 Тогда
			Для Каждого СтрокаТабЧасти Из Услуги Цикл
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры	

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")
	
	Если НЕ ЗначениеЗаполнено(РежимВызова) Тогда
		УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
		Если ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			мОрганизацияЯвляетсяПлательщикомЕНВД =УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД 
		Иначе
			мОрганизацияЯвляетсяПлательщикомЕНВД = Ложь;
		КонецЕсли;
		мТекущаяОрганизация = Организация;
	Иначе
		РаботаСДиалогами.ПриИзмененииОрганизацияЯвляетсяПлательщикомЕНВД(ЭтотОбъект, РежимВызова, Услуги,
		                                                мОрганизацияЯвляетсяПлательщикомЕНВД, мТекущаяОрганизация);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управления доступностью/видимостью элементов формы
//
Процедура ДоступностьВидимостьЭлементовФормы()
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость = мПоДокументамРасчетов;
	ЭлементыФормы.Услуги.Колонки.ВесовойКоэффициент.Видимость = НЕ РаспределятьПропорциональноКоличеству;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Материалы.Видимость                 = ИспользоватьМатериалы;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Распределение.Видимость             = Не АвтораспределениеМатериалов И ИспользоватьМатериалы;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ПрочиеЗатраты.Видимость             = ИспользоватьПрочиеЗатраты;
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеПрочихЗатрат.Видимость = Не АвтораспределениеПрочихЗатрат И ИспользоватьПрочиеЗатраты;
	
	ЭлементыФормы.РаспределятьПропорциональноКоличеству.Видимость = ИспользоватьМатериалы ИЛИ ИспользоватьПрочиеЗатраты;
		
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансам.Видимость     = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость            = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость        = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.РамкаСчетаРасчетов.Видимость                    = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СчетЗатрат, ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СчетЗатратНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СчетДоходовБУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СубконтоБУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СчетРасходовБУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СчетДоходовНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СубконтоНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СчетРасходовНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиУслуги.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиУслуги.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СуммаНДС, УчитыватьНДС);
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	
	// Видимость колонок таблицы документов расчетов
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.СуммаРегл,  мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.ДатаОплаты, мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);
	
	СтруктураКолонок = Новый Структура("ЗаказВыпуска");                                 
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиУслуги,                  СтруктураКолонок, ИспользоватьЗаказы);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиМатериалы,               СтруктураКолонок, ИспользоватьЗаказы);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеМатериалов, СтруктураКолонок, ИспользоватьЗаказы);
	
	СтруктураКолонок = Новый Структура("Заказ");                                 
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиПрочиеЗатраты,             СтруктураКолонок, ИспользоватьЗаказы);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеПрочихЗатрат, СтруктураКолонок, ИспользоватьЗаказы);
	
	Если ИспользоватьЗаказы Тогда
		мКолонкиУслуги                   .ЗаказВыпуска.Видимость = Истина;
		мКолонкиМатериалы                .ЗаказВыпуска.Видимость = Истина;
		мКолонкиРаспределениеМатериалов  .ЗаказВыпуска.Видимость = Истина;
		мКолонкиПрочиеЗатраты            .Заказ       .Видимость = Истина;
		мКолонкиРаспределениеПрочихЗатрат.Заказ       .Видимость = Истина;
	КонецЕсли;

КонецПроцедуры // ДоступностьВидимостьЭлементовФормы()

// Процедура устанавливает автоотметку незаполненного для тех колонок в табличной части 
// "Услуги", обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	Автоотметка = Ложь;

	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			АвтоОтметка = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.Сделка.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(Сделка) Тогда
		ЭлементыФормы.Сделка.ОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотментку()

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	РаботаСДиалогами.УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма, Истина);

	// Надпись НадписьСуммаВзаиморасчетов
	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги"));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(Услуги.Итог("СуммаНДС"));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + " " +  ДокументОбъект.ВалютаДокумента
		                + " = " + ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
													 УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный"));

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

Процедура УстановитьИсполнителя()
	
	Организация = ЭтотОбъект.Организация;
	Если Организация = Справочники.Организации.ПустаяСсылка() Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеУполномоченногоЛица = ОбщегоНазначения.ПолучитьДанныеУполномоченногоЛица(Организация, Ответственный);
	ОтветственныеЛица = ОбщегоНазначения.ОтветственныеЛица(Организация, Дата);
	
	Если ДанныеУполномоченногоЛица = Неопределено Тогда 
		Исполнитель = ОтветственныеЛица.Руководитель;
		ИсполнительПоПриказу = "";
	Иначе
		Исполнитель = ?(ДанныеУполномоченногоЛица.Руководитель=Неопределено,ОтветственныеЛица.Руководитель,ДанныеУполномоченногоЛица.Руководитель);
		ИсполнительПоПриказу = ?(ДанныеУполномоченногоЛица.Руководитель=Неопределено,"",ДанныеУполномоченногоЛица.ПриказРуководитель);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	// ЭлектронныеДокументы
	РаботаСДиалогами.УдалитьКнопкуЭД(ЭлементыФормы.ДействияФормы.Кнопки, мИспользоватьОбменЭД);
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
    мПересчитыватьСкидку = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПриИзмененииСуммыПересчитыватьСкидку");
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа", ПараметрОбъектКопирования);
		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		КонецЕсли;

		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		
		УстановитьИсполнителя();

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");

	// Установить ограничение - изменять видимоть колонок для ТЧ продукция
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Услуги.Колонки, СтруктураКолонок);

	// Установить ограничение - изменять видимоть колонок для ТЧ материалы
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Материалы.Колонки, СтруктураКолонок);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента             = Дата;
	мТекущаяВалютаВзаиморасчетов      = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мПоДокументамРасчетов             = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	мРасчетыВУЕ                       = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	ПриИзмененииОблагаетсяЕНВД();

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиМатериалы);
	
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиРаспределениеМатериалов);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиРаспределениеМатериалов);
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	ИзмененоИспользоватьЗаказы = Ложь;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	ДоступностьВидимостьЭлементовФормы();
	ЗаполнитьТекстПроСчетФактуру();
	УстановитьАвтоотметку();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();
	
	ЭлементыФормы.Услуги.Колонки.Цена                .ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Услуги.Колонки.Сумма               .ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Услуги.Колонки.ПроцентСкидкиНаценки.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Услуги.Колонки.СуммаНДС            .ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	// ЭлектронныеДокументы
	ЭлементыФормы.РамкаЭлектронныеДокументы.Видимость 	= мИспользоватьОбменЭД;
	ЭлементыФормы.НадписьСостояниеЭД.Видимость 			= мИспользоватьОбменЭД;
	ЭлементыФормы.ТекстСостоянияЭД.Видимость 			= мИспользоватьОбменЭД;
	
	Если мИспользоватьОбменЭД Тогда
		ТекстСостоянияЭД = ЭлектронныеДокументыКлиент.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	КонецЕсли;
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	// ЭлектронныеДокументы
	Если мИспользоватьОбменЭД Тогда
		ТекстСостоянияЭД = ЭлектронныеДокументыКлиент.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	КонецЕсли;
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги"),  
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = "   ( " + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                           КурсВзаиморасчетов,
	                                                                                           КратностьВзаиморасчетов,
	                                                                                           мВалютаРегламентированногоУчета) + " )";
	ОбновитьПодвал();

	ЭлементыФормы.ОсновнаяПанель.Страницы.Материалы    .Заголовок = "Материалы (" + Материалы.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги       .Заголовок = "Услуги (" + Услуги.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.ПрочиеЗатраты.Заголовок = "Прочие затраты (" + ПрочиеЗатраты.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.Распределение.Заголовок = "Распределение материалов (" + РаспределениеМатериалов.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеПрочихЗатрат.Заголовок = "Распределение прочих затрат (" + РаспределениеПрочихЗатрат.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Заголовок = "Предоплата ("+ДокументыРасчетовСКонтрагентом.Количество() + " поз.)";
	
	ПересчетСуммВзаиморасчетов();
	
	ЭлементыФормы.АдресДоставки.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресДоставки);
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда, Спецификация, Количество;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		ЗначениеВыбора.Свойство("Спецификация", Спецификация);

		Если Спецификация <> Неопределено Тогда
			Если Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
				ОбработкаПодбораПоСпецификации(Материалы, ЗначениеВыбора);
			Иначе
				ЗначениеВыбора.Свойство("Количество", 	Количество);
				
				УправлениеПроизводством.ЗаполнитьПоСпецификации(ЭтотОбъект, мПараметрыСвязиСтрокТЧ, Спецификация, Количество);
				ЗаполнитьРаспределениеМатериалов(Ложь);
			КонецЕсли;
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			ОбработкаПодбора(Материалы, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборПрочихЗатрат" Тогда
			ОбработкаПодбораПрочихЗатрат( ПрочиеЗатраты, ЗначениеВыбора);	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронныеДокументы
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ТекстСостоянияЭД = ЭлектронныеДокументыКлиент.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	КонецЕсли;
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для изменения
// общих для всей табличной части "Услуги" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	СтруктураНередактируемыхРеквизитов = Новый Структура;
	СтруктураНередактируемыхРеквизитов.Вставить("УсловиеПродаж");

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураНередактируемыхРеквизитов, "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента,, "Услуги", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	ДоступностьВидимостьЭлементовФормы();
	
КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги"
//
Процедура КоманднаяПанельУслугиПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельПродукцияПодбор()

// Процедура вызывается при нажатии кнопки "Заполнить по спецификациям" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоСпецификации(Кнопка)
	
	ЗаполнитьМатериалыПоСпецификации();
		
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоСпецификации()

// Процедура вызывается при нажатии кнопки "ЗаполнитьСЗаменой" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьСЗаменой(Кнопка)
	
	ПодборМатериаловИАналогов = Обработки.ПодборМатериаловИАналогов.Создать();
	
	ФормаПодбораМатериаловИАналогов = ПодборМатериаловИАналогов.ПолучитьФорму(, ЭтаФорма);
	
	//Установим реквизиты и переменые формы.
	ФормаПодбораМатериаловИАналогов.ДокументОбъект = ЭтотОбъект;
	
	// Открываем форму обработки
	ФормаПодбораМатериаловИАналогов.Открыть();
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьСЗаменой()

// Процедура вызывается при выборе пункта подменю "Заполнить"
//
Процедура КоманднаяПанельМатериалыЗаполнить(Кнопка)
	
	Если Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе");
		Возврат;
	КонецЕсли;
	Если ОтражатьВУправленческомУчете И НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Предупреждение("Не указано подразделение!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Предупреждение("Не указано подразделение организации!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена.
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Материалы.Очистить();
	
	УправлениеПроизводством.ЗаполнитьМатериалыПоОстаткамНЗП(ЭтотОбъект, Материалы,, Истина);
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыПодбор(Кнопка)

	ДействиеПодбор(Материалы);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "ПрочиеЗатраты"
//
Процедура КоманднаяПанельПрочиеЗатратыПодбор(Кнопка)
	
	ПодборПоПрочимЗатратам();
	
КонецПроцедуры // КоманднаяПанельПрочиеЗатратыПодбор()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "РаспределениеМатериалов"
//
Процедура КоманднаяПанельРаспределениеМатериаловДействиеЗаполнитьРаспределениеМатериалов(Кнопка)
	
	Если РаспределениеМатериалов.Количество() > 0 Тогда
		Ответ = Вопрос("При заполнении табличная часть будет очищена!" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРаспределениеМатериалов(Истина);
	
КонецПроцедуры // КоманднаяПанельРаспределениеМатериаловДействиеЗаполнитьРаспределениеМатериалов()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "РаспределениеПрочихЗатрат"
//
Процедура КоманднаяПанельРаспределениеПрочихЗатратДействиеЗаполнитьРаспределениеПрочихЗатрат(Кнопка)
	
	Если РаспределениеПрочихЗатрат.Количество() > 0 Тогда
		Ответ = Вопрос("При заполнении табличная часть будет очищена!" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРаспределениеПрочихЗатрат();
	
КонецПроцедуры // КоманднаяПанельРаспределениеПрочихЗатратДействиеЗаполнитьРаспределениеПрочихЗатрат()

// Процедура вызывается при выборе пункта подменю "Заполнить" командной панели
// табличной части "Услуги".
//
Процедура КоманднаяПанельУслугиЗаполнитьПоЗаказуПокупателя(Кнопка)
	
	ЗаполнитьТабличнуюЧасть(Услуги);
	
КонецПроцедуры // КоманднаяПанельУслугиЗаполнитьПоЗаказуПокупателя()

// Процедура вызывается при выборе пункта меню "Заполнить по заказам документа" 
// кнопки "Заполнить" командной панели табличного поля "Документы расчетов с контрагентом",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельДокументыРасчетовСКонтрагентомЗаполнитьТолькоПоЗаказу(Кнопка)
	
	УправлениеВзаиморасчетами.ЗаполнитьПредоплату(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при нажатии кнопки "Настройка" командной панели формы.
//
Процедура ДействияФормыНастройка(Кнопка)
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	ФормаНастройки.ОткрытьМодально();
	ДоступностьВидимостьЭлементовФормы();
	
КонецПроцедуры // ДействияФормыНастройка()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Материалы", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельМатериалыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧасти      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧасти = ИзменениеТабличнойЧасти.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧасти.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧасти.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧасти.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧасти.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧасти.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧасти.мИмяТабличнойЧастиДокумента = "Материалы";

	//Перенесем табличную часть
	ИзменениеТабличнойЧасти.Товары.Загрузить(Материалы.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧасти.Открыть();

КонецПроцедуры // КоманднаяПанельМатериалыДействиеИзменить()

// Процедура обработчик события нажатие кнопки командной панели.
// Процедура выполняет заполнение табличной части затраты
//
Процедура КоманднаяПанельЗатратыЗаполнить(Кнопка)
	
	Если Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе");
		Возврат;
	КонецЕсли;
	
	Если ПрочиеЗатраты.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена!
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПрочиеЗатратыПоОстаткам();
	
КонецПроцедуры // КоманднаяПанельЗатратыЗаполнить(Кнопка)

// Процедура обработчик события нажатие кнопки командной панели.
//
Процедура КоманднаяПанельПродукцияДобавитьИзЗаказаПокупателя(Кнопка)
	
	ДобавитьИзЗаказаПокупателя();
	
КонецПроцедуры // КоманднаяПанельПродукцияДобавитьИзЗаказаПокупателя()

// Процедура обработчик события нажатие кнопки командной панели.
//
Процедура КоманднаяПанельМатериалыДобавитьИзТребованиеНакладная(Кнопка)
	
	ДобавитьИзТребованиеНакладной();
	
КонецПроцедуры // КоманднаяПанельМатериалыДобавитьИзТребованиеНакладная()

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Процедура открывает список ЭД по текущему документу
//
Процедура ДействияФормыСписокЭлектронныхДокументов(Кнопка)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", 	Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", 		ЭтаФорма);
	
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

Процедура ДействияФормыПодписатьИОтправить(Кнопка)
	
	Если НЕ ЭлектронныеДокументыКлиент.ОбъектМодифицирован(ЭтотОбъект, ЭтаФорма) Тогда
		ЭлектронныеДокументыКлиент.СформироватьПодписатьОтправитьЭД(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыСформироватьНовый(Кнопка)
	
	Если НЕ ЭлектронныеДокументыКлиент.ОбъектМодифицирован(ЭтотОбъект, ЭтаФорма) Тогда
		ЭлектронныеДокументыКлиент.СформироватьНовыйЭД(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыОткрытьАктуальныйЭД(Кнопка)
	
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Ссылка, ЭтаФорма);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить по заказу на производство" командной панели 
// табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиЗаполнитьПоЗаказуНаПроизводство(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуНаПроизводство(Услуги, , , "ЗаказНаПроизводство");
	
КонецПроцедуры // КоманднаяПанельУслугиЗаполнитьПоЗаказуНаПроизводство()

// Процедура вызывается при нажатии кнопки "Добавить по заказу на производство" командной панели 
// табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиДобавитьПоЗаказуНаПроизводство(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуНаПроизводство(Услуги, , Ложь, "ЗаказНаПроизводство");
	
КонецПроцедуры // КоманднаяПанельУслугиДобавитьПоЗаказуНаПроизводство()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	ДоступностьВидимостьЭлементовФормы();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при нажатии кнопки "ПараметрыВыпуска" командной панели
// табличного поля "Услуги".
//
Процедура КоманднаяПанельУслугиПараметрыВыпуска(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Услуги");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводПараметровВыпуска = Обработки.ВводПараметровВыпускаПродукции.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводПараметровВыпуска.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводПараметровВыпуска.Открыть();
	
КонецПроцедуры // КоманднаяПанельУслугиПараметрыВыпуска()

// Процедура вызывается при нажатии кнопки "Заполнить по потребностям" командной панели 
// табличного поля "Материалы".
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоПотребностям(Кнопка)

	МассивЗаказов = Новый Массив;
	Для Каждого СтрокаТЧ Из Услуги Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ЗаказВыпуска) Тогда
			МассивЗаказов.Добавить(СтрокаТЧ.ЗаказВыпуска);
		КонецЕсли;
	КонецЦикла;
	Если МассивЗаказов.Количество() = 0 Тогда
		Предупреждение("В табличной части ""Услуги"" не обнаружены заказы на производство." + Символы.ПС + "Заполнение невозможно");
		Возврат;
	КонецЕсли;
	
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос("В табличной части уже присутствую строки. При заполнении они будут удалены!" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Материалы.Очистить();
	КонецЕсли;
	
	ЗаполнитьПотребностямиПоЗаказамНаПроизводство(Материалы, МассивЗаказов);
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоПотребностям()

// Процедура вызывается при нажатии кнопки "Заполнить по потребностям" командной панели 
// табличного поля "Распределение материалов".
//
Процедура КоманднаяПанельРаспределениеМатериаловЗаполнитьПоПотребностям(Кнопка)

	МассивЗаказов = Новый Массив;
	Для Каждого СтрокаТЧ Из Услуги Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ЗаказВыпуска) Тогда
			МассивЗаказов.Добавить(СтрокаТЧ.ЗаказВыпуска);
		КонецЕсли;
	КонецЦикла;
	Если МассивЗаказов.Количество() = 0 Тогда
		Предупреждение("В табличной части ""Услуги"" не обнаружены заказы на производство." + Символы.ПС + "Заполнение невозможно");
		Возврат;
	КонецЕсли;
	
	Если РаспределениеМатериалов.Количество() > 0 Тогда
		Ответ = Вопрос("В табличной части уже присутствую строки. При заполнении они будут удалены!" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		РаспределениеМатериалов.Очистить();
	КонецЕсли;
	
	ЗаполнитьПотребностямиПоЗаказамНаПроизводство(РаспределениеМатериалов, МассивЗаказов);
	
КонецПроцедуры // КоманднаяПанельРаспределениеМатериаловЗаполнитьПоПотребностям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
    ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
    УстановитьИсполнителя();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = Элемент.Значение;
	
	ДоступностьВидимостьЭлементовФормы();
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
											   	  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

	Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете, НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)) Тогда
						
		Если Услуги.Количество() > 0 Тогда
			Для Каждого СтрокаТабЧасти Из Услуги Цикл
				ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			КонецЦикла;
		КонецЕсли;
		
		Если Элемент.Значение Тогда
			СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
			СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		Иначе
			СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в упр. учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	ДоступностьВидимостьЭлементовФормы();

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	Если Не ОтражатьВБухгалтерскомУчете
	   И Не ОтражатьВНалоговомУчете
	   И Не ОтражатьВУправленческомУчете Тогда
		ОтражатьВУправленческомУчете = Истина;
	КонецЕсли;
	
	Если Услуги.Количество() > 0 
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(,ОтражатьВНалоговомУчете) Тогда
		
		Для Каждого СтрокаТабЧасти Из Услуги Цикл
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабЧасти, "Услуги", неопределено, ОтражатьВНалоговомУчете);
		КонецЦикла;
		
	КонецЕсли;

	ДоступностьВидимостьЭлементовФормы();

КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении Организация.
	СтарыйДоговор = ДоговорКонтрагента;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
    ПриИзмененииОблагаетсяЕНВД("Организация");

	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
											   	  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Если НЕ СтарыйДоговор = ДоговорКонтрагента Тогда
		ПриИзмененииДоговора();
	КонецЕсли;	
												  
	ДоступностьВидимостьЭлементовФормы();
	УстановитьИсполнителя();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага РаспределятьПропорциональноКоличеству
//
Процедура РаспределятьПропорциональноКоличествуПриИзменении(Элемент)

	ДоступностьВидимостьЭлементовФормы();

КонецПроцедуры // РаспределятьПропорциональноКоличествуПриИзменении()

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        Перечисления.ВидыДоговоровКонтрагентов.СПокупателем , СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерассчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерассчитатьДолгНажатие(Элемент)

	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерассчитатьАвансДоговораНажатие()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, 
		                       "Приход", "ЗаказПокупателя");
	
КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Подразделение
//
Процедура ПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	РаботаСДиалогами.НачалоВыбораПодразделения(ТаблицаОтбора, Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	РаботаСДиалогами.НачалоВыбораПодразделенияОрганизации(ТаблицаОтбора, Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "При изменении" поля ввода Подразделения организации.
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделения
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												   ПодразделениеОрганизации,
												   Подразделение,
												   Организация);
												   
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПодразделениеОрганизацииПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры // ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Проект".
//
Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ПроектНачалоВыбора()

// Процедура - обработчик события "При изменении" поля ввода Грузополучатель
// 
Процедура ГрузополучательПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(АдресДоставки) Тогда
		АдресДоставки = ЗаполнениеДокументов.ПолучитьАдресДоставкиСтрокой(Грузополучатель, ДополнениеКАдресуДоставки);
	КонецЕсли;  

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы АдресДоставки
//
Процедура АдресДоставкиНачалоВыбора(Элемент, СтандартнаяОбработка)

	ЗаполнениеДокументов.ВыбратьАдресДоставки(СтандартнаяОбработка, ЭтаФорма, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "Открытие" элемента формы АдресДоставки
Процедура АдресДоставкиОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗаполнениеДокументов.РедактированиеАдресаДоставки(АдресДоставки, Элемент, ЭтотОбъект);
КонецПроцедуры

// Процедура - обработчик события "Обработка выбора" элемента формы АдресДоставки
Процедура АдресДоставкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	АдресДоставки = УправлениеКонтактнойИнформацией.ПолучитьПолныйАдрес(ВыбранноеЗначение);
КонецПроцедуры

// Процедура - обработчик события "Очистка" элемента формы АдресДоставки
Процедура АдресДоставкиОчистка(Элемент, СтандартнаяОбработка)
	АдресДоставки = "";
	ДополнениеКАдресуДоставки = "";
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы ТекстСостоянияЭД 
Процедура ТекстСостоянияЭДНажатие(Элемент)
	
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура ОтветственныйПриИзменении(Элемент)
	
	УстановитьИсполнителя();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ МАТЕРИАЛЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Материалы". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // МатериалыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ПриИзмененииНоменклатурыМатериалов(СтрокаТабличнойЧасти, "Материалы");

КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаЗначенияНоменклатуры(Элемент, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // МатериалыНоменклатураНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаМестПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // МатериалыЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // МатериалыКоличествоПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СтатьяЗатрат
// в строке табличной части "Материалы".
//
Процедура МатериалыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, 
		Элемент, 
		СтандартнаяОбработка, 
		Перечисления.ВидыЗатрат.Материальные
	);
	
КонецПроцедуры // МатериалыСтатьяЗатратНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Услуги".
//
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
	КонецЕсли;
	
КонецПроцедуры // УслугиПриНачалеРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Услуги". Формирует данные в колонке "ЕдиницаИзмерения".
//
Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Услуги.Колонки.Всего.Видимость	Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(
			ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиУслуги, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // УслугиПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
  	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	ПриИзмененииНоменклатурыУслуги(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	УправлениеПроизводством.УстановитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Спецификация, Дата, Подразделение);
	

	СчетБУ = СтрокаТабличнойЧасти.СчетДоходовБУ;
	СчетНУ = СтрокаТабличнойЧасти.СчетДоходовНУ;

	ЭлементыФормы.Услуги.Колонки.СубконтоБУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
	ЭлементыФормы.Услуги.Колонки.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетНУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Услуги".
//
Процедура УслугиЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Услуги".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля процента скидки-наценки
// в строке табличной части "Услуги".
//
Процедура УслугиПроцентСкидкиНаценкиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // УслугиПроцентСкидкиНаценкиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,истина,мПересчитыватьСкидку,ложь,"Услуги");
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // УслугиСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Услуги".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // УслугиЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "Услуги".
//
Процедура УслугиСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // УслугиСчетЗатратПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации
// в табличной части "Услуги".
//
Процедура УслугиСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.Услуги.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // УслугиСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
// в строке табличной части "Услуги".
//
Процедура УслугиСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // УслугиСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДоходовБУ
// в строке табличной части "Услуги".
//
Процедура УслугиСчетДоходовБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	СчетБУ   = СтрокаТабличнойЧасти.СчетДоходовБУ;

	Если СчетБУ.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.СубконтоБУ = Новый(СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		СтрокаТабличнойЧасти.СубконтоБУ = Неопределено;
	КонецЕсли;

	СтрокаТабличнойЧасти.СчетДоходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));
	СчетНУ   = СтрокаТабличнойЧасти.СчетДоходовНУ;
	Если СчетНУ.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.СубконтоНУ = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		СтрокаТабличнойЧасти.СубконтоНУ = Неопределено;
	КонецЕсли;

	ЭлементыФормы.Услуги.Колонки.СубконтоБУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
	ЭлементыФормы.Услуги.Колонки.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));
	
КонецПроцедуры // УслугиСчетДоходовБУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетДоходовБУ
// в строке табличной части "Услуги".
//
Процедура УслугиСчетДоходовБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // УслугиСчетДоходовБУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоБУ
// в строке табличной части "Услуги".
//
Процедура УслугиСубконтоБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТабличнойЧасти.СчетДоходовБУ, СтрокаТабличнойЧасти.СчетДоходовНУ, 1, СтрокаТабличнойЧасти.СубконтоБУ, СтрокаТабличнойЧасти.СубконтоНУ);
	
КонецПроцедуры // УслугиСубконтоБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДоходовНУ
// в строке табличной части "Услуги".
//
Процедура УслугиСчетДоходовНУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	СчетНУ   = СтрокаТабличнойЧасти.СчетДоходовНУ;

	Если СчетНУ.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТабличнойЧасти.СубконтоНУ = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		СтрокаТабличнойЧасти.СубконтоНУ = Неопределено;
	КонецЕсли;

	ЭлементыФормы.Услуги.Колонки.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетНУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));
	
КонецПроцедуры // УслугиСчетДоходовНУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетДоходовНУ
// в строке табличной части "Услуги".
//
Процедура УслугиСчетДоходовНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // УслугиСчетДоходовНУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетРасходовБУ
// в строке табличной части "Услуги".
//
Процедура УслугиСчетРасходовБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	СтрокаТабличнойЧасти.СчетРасходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));	
	
КонецПроцедуры // УслугиСчетРасходовБУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетРасходовБУ
// в строке табличной части "Услуги".
//
Процедура УслугиСчетРасходовБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // УслугиСчетРасходовБУОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетРасходовНУ
// в строке табличной части "Услуги".
//
Процедура УслугиСчетРасходовНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // УслугиСчетРасходовНУОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ РАСПРЕДЕЛЕНИЕ МАТЕРИАЛОВ

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "Распределение материалов".
//
Процедура РаспределениеМатериаловСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РаспределениеМатериаловСчетЗатратПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации
// в табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные.Продукция, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // РаспределениеМатериаловСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
// в строке табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // РаспределениеМатериаловСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Продукция
//
Процедура РаспределениеМатериаловПродукцияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущаяСтрока;
	УправлениеПроизводством.УстановитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.Спецификация, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеМатериаловПродукцияПриИзменении()

// Процедура - обработчик события "ПриИзменении" табличной части "Материалы".
//
Процедура РаспределениеМатериаловЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Распределение материалов".
//
Процедура РаспределениеМатериаловНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыМатериалов(СтрокаТабличнойЧасти);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "РаспределениеМатериалов", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // РаспределениеМатериаловНоменклатураПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода СтатьяЗатрат
// в табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, 
		Элемент, 
		СтандартнаяОбработка, 
		Перечисления.ВидыЗатрат.Материальные
	);
	
КонецПроцедуры // РаспределениеМатериаловСтатьяЗатратНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПРОЧИХ ЗАТРАТ

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "Распределение прочих затрат".
//
Процедура РаспределениеПрочихЗатратСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РаспределениеПрочихЗатратСчетЗатратПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации
// в табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // РаспределениеПрочихЗатратСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
// в строке табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // РаспределениеПрочихЗатратСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Продукция
//
Процедура РаспределениеПрочихЗатратНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущаяСтрока;
	УправлениеПроизводством.УстановитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.Спецификация, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеПрочихЗатратНоменклатураПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПРОЧИЕ ЗАТРАТЫ

// Процедура - обработчик события "ПриИзменении" поля ввода сумма
// в строке табличной части "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // ПрочиеЗатратыСуммаПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода СтатьяЗатрат
// в табличной части "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СформироватьТаблицуОтбораНематериальныхПроизводственныхСтатейЗатрат();
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		ТаблицаОтбора, 
		Элемент, 
		СтандартнаяОбработка
	);
	
КонецПроцедуры // ПрочиеЗатратыСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "ПрочиеЗатраты"
//
Процедура РаспределениеПрочихЗатратЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СтруктураОтбора.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтруктураОтбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
	 	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеПрочихЗатрат", ДопПараметры);
	
КонецПроцедуры // РаспределениеПрочихЗатратЗаказНачалоВыбора()

// Процедура - обработчик события НачалоВыбора поля ввода СтатьяЗатрат
// в табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СформироватьТаблицуОтбораНематериальныхПроизводственныхСтатейЗатрат();
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		ТаблицаОтбора, 
		Элемент, 
		СтандартнаяОбработка
	);
	
КонецПроцедуры // РаспределениеПрочихЗатратСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода сумма
// в строке табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // РаспределениеПрочихЗатратСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "ПрочиеЗатраты"
//
Процедура ПрочиеЗатратыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СтруктураОтбора.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		СтруктураОтбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	КонецЕсли;
	 	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ПрочиеЗатраты", ДопПараметры);
	
КонецПроцедуры // ПрочиеЗатратыЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЧ ДокументыРасчетовСКонтрагентом

// Процедура рассчитывает суммы в строке табличной части ДокументыРасчетовСКонтрагентом
// 
// Параметры:
// ТекДанные                       - <Текущие данные строки табличной части>
// РассчитыватьСуммуВзаиморасчетов - <Булево> Если Истина - рассчитывается и сумма взаиморасчетов, и сумма регл.учета
//                                   Если Ложь - рассчитывается только сумма регл.учета
//
Процедура РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, РассчитыватьСуммуВзаиморасчетов = Истина)

	мСтруктураПараметровВзаиморасчетов.Вставить("КурсСтрокиДокументаРасчетов", мКурсСтрокиДокументаРасчетов);
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ТекДанные, мСтруктураПараметровВзаиморасчетов, РассчитыватьСуммуВзаиморасчетов);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента,
														Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	УправлениеВзаиморасчетами.ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(ТекДанные);
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СуммаВзаиморасчетов
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ "ДокументыРасчетовСКонтрагентом".
//
Процедура ДокументыРасчетовСКонтрагентомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	мКурсСтрокиДокументаРасчетов = ?(ТекДанные.СуммаВзаиморасчетов = 0, 0, ТекДанные.СуммаРегл / ТекДанные.СуммаВзаиморасчетов);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

мКолонкиУслуги                  = ЭлементыФормы.Услуги.Колонки;
мКолонкиМатериалы               = ЭлементыФормы.Материалы.Колонки;
мКолонкиРаспределениеМатериалов = ЭлементыФормы.РаспределениеМатериалов.Колонки;
мКолонкиДокументы               = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.Колонки;
мКолонкиПрочиеЗатраты			= ЭлементыФормы.ПрочиеЗатраты.Колонки;
мКолонкиРаспределениеПрочихЗатрат = ЭлементыФормы.РаспределениеПрочихЗатрат.Колонки;