////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;
Перем мРассчитываемыеТаблицы;
Перем мСведенияОВидахРасчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

// Диалог настройки периода
Перем мНастройкаПериода;

Перем мДополнительныеСвойства Экспорт;

// Текущий период - для проверки перехода документа в другой период расчета отчислений на соцстрах
Перем мТекущийПериод Экспорт; 

// Механизм исправлений
Перем мДокументИсправление;
Перем мДокументСторнирование;
Перем мКнопкаИсправление;
Перем мКнопкаОтменаИсправление;

Перем мУдержаниеЗаОтпускУменьшаетНалоги;

Перем мОкруглятьДниОтпускаПриКомпенсации;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке(ИмяТЧ = "РасчетСреднего")

	СтруктураПараметров = Новый Структура("Ссылка", ЭлементыФормы[ИмяТЧ].Колонки.ВидРасчета.ЭлементУправления.СписокВыбора);
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднего,ЭлементыФормы.КоманднаяПанельРасчетСреднего);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднегоДляОтпуска,ЭлементыФормы.КоманднаяПанельРасчетСреднегоДляОтпуска);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднего1,ЭлементыФормы.КоманднаяПанельРасчетСреднего1);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднегоДляОтпуска1,ЭлементыФормы.КоманднаяПанельРасчетСреднегоДляОтпуска1);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Управляет видимостью и доступностью элементов формы
//
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	ТолькоПросмотр = ДокументИсправлен Или ДокументСторнирован;
	РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	
	ЭлементыФормы.Сотрудник.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
		
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,"Открыть сторно-документ","Открыть исправление");
	
	РаботаСДиалогамиЗК.УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрации, ДокументИсправлен, ДокументСторнирован, ЭлементыФормы.ДополнительныеДействия.Кнопки, мКнопкаИсправление, мКнопкаОтменаИсправление);
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

// Определяет флажки-описатели состояния документа, формирует и показывает строку-описание
//
Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Сотрудник) Или Не ЗначениеЗаполнено(ДатаУвольнения);
	НеЗаполнен = НеЗаполнен Или (ДнейЧасовВыходногоПособия = 0 И ДнейЧасовСохраненияСреднегоЗаработка = 0 И ДнейЧасовКомпенсацииУдержанияОтпуска = 0);
	
	ЗаполненСОшибками = ДнейЧасовКомпенсацииУдержанияОтпуска <> 0 И Не ЗначениеЗаполнено(ПорядокРасчетаОтпуска);
	
	Рассчитан = (Начисления.Количество() > 0);
	
	ОписаниеСостоянияДокумента = РаботаСДиалогамиЗК.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Рассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура ОбновитьИнформационнуюНадписьРазмерНачислено()

	НачисленияУдержанияДокумента = Новый Соответствие;
	НачисленияУдержанияДокумента.Вставить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни,"");	
	НачисленияУдержанияДокумента.Вставить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка,"");	
	УдержанияДокумента = Новый Соответствие;
	УдержанияДокумента.Вставить(ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни,"");	
	УдержанияДокумента.Вставить(ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка,"");	
	
	СуммаНачислено = 0;
	СуммаУдержано = 0;
	ОплаченоДней = 0;
	ИнформационнаяНадпись = "";
	
	Если Начисления.Количество() = 0 и РасчетСреднего.Количество() = 0 и РасчетСреднегоДляОтпуска.Количество() = 0 Тогда
		ИнформационнаяНадпись = "";
	ИначеЕсли Начисления.Количество() = 0 Тогда	
		ИнформационнаяНадпись = "Сумма начислений (удержаний) не рассчитана"
	Иначе
		// табличные части не пустые, получим суммы 
		Для каждого СтрокаНачислений Из Начисления Цикл
			Если НачисленияУдержанияДокумента[СтрокаНачислений.ВидРасчета] <> Неопределено Тогда
				СуммаУдержано = СуммаУдержано - СтрокаНачислений.Результат;
				Продолжить;
			КонецЕсли;
			Если УдержанияДокумента[СтрокаНачислений.ВидРасчета] <> Неопределено Тогда
				СуммаУдержано = СуммаУдержано + СтрокаНачислений.Результат;
				Продолжить;
			КонецЕсли;
			СуммаНачислено = СуммаНачислено + СтрокаНачислений.Результат;
			ОплаченоДней = ОплаченоДней + СтрокаНачислений.ОплаченоДнейЧасов;
		КонецЦикла;
	КонецЕсли;	
	
	// информационная надпись на лицевой стороне
	ЭлементыФормы.ЗначениеРазмер.Заголовок = Формат(СуммаНачислено, "ЧЦ=12; ЧДЦ=2; ЧН=");
	ЭлементыФормы.ЗначениеРазмер1.Заголовок = Формат(СуммаУдержано, "ЧЦ=12; ЧДЦ=2; ЧН=");
	ЭлементыФормы.ИнформационнаяНадписьРазмер.Заголовок = ""+ ИнформационнаяНадпись;
	
	СтрокаРазмер = ?(СуммаНачислено = 0,"","Начислено: " + Формат(СуммаНачислено, "ЧЦ=12; ЧДЦ=2; ЧН=") + " руб."); 
	СтрокаРазмер = СтрокаРазмер + ?(ОплаченоДней = 0,""," Оплачено " + ОплаченоДней + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ОплаченоДней));
	СтрокаРазмер = СтрокаРазмер + ?(ЗначениеЗаполнено(СтрокаРазмер), Символы.ПС, "");
	СтрокаРазмер = СтрокаРазмер + ?(СуммаУдержано = 0,"","Удержано: " + Формат(СуммаУдержано, "ЧЦ=12; ЧДЦ=2; ЧН=") + " руб.");
	ЭлементыФормы.НадписьОплата.Заголовок = СтрокаРазмер;

КонецПроцедуры

Процедура ОбновитьИнформационнуюНадписьСреднийЗаработок()
	
	Если РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ИспользуетсяСреднеЧасовойЗаработок(ЭтотОбъект) Тогда
		НадписьСреднийЗаработокТекст = "Средний часовой заработок:";
	Иначе
		НадписьСреднийЗаработокТекст = "Средний дневной заработок:";
	КонецЕсли;
	
	// данные среднего заработка
	
	Если ЗначениеЗаполнено(ДатаУвольнения) Тогда
		
		ПериодРасчетаСреднегоЗаработкаТекст = "Расчетный период " + Символы.ПС + " с " + Формат(ПериодРасчетаСреднегоЗаработкаНачало,"ДФ=dd.MM.yyyy") +" по "+ Формат(ПериодРасчетаСреднегоЗаработкаОкончание,"ДФ=dd.MM.yyyy");
		ПериодРасчетаСреднегоЗаработкаТекст1 = "Расчетный период с " + Формат(ПериодРасчетаСреднегоЗаработкаНачало,"ДФ=dd.MM.yyyy") +" по "+ Формат(ПериодРасчетаСреднегоЗаработкаОкончание,"ДФ=dd.MM.yyyy");
		
		ВариантРасчетаДокумента = ОсновнойВариантРасчетаДокумента();
		ВидРасчета = ВариантРасчетаДокумента.ВидРасчета;
		
		Если ЗначениеЗаполнено(ВидРасчета) Тогда
			
			СведениеОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ВидРасчета);
			МесяцевРасчетногоПериода = 0;
			ОбщегоНазначения.РазобратьРазностьДат(НачалоМесяца(ПериодРасчетаСреднегоЗаработкаОкончание), НачалоМесяца(ПериодРасчетаСреднегоЗаработкаНачало), , МесяцевРасчетногоПериода);
			Если ЗначениеЗаполнено(МесяцевРасчетногоПериода) Тогда
				МесяцевРасчетногоПериода = МесяцевРасчетногоПериода + 1;
			Иначе 
				МесяцевРасчетногоПериода = ?(СведениеОВидеРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору,СведениеОВидеРасчета.ПериодРасчетаСреднегоЗаработка,РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.КоличествоМесяцевРасчетаПоЗакону(ЭтотОбъект));
			КонецЕсли;
			СреднедневнойЗаработок = Формат(РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.РасчетСреднегоЗаработка(ЭтотОбъект, СведениеОВидеРасчета.СпособРасчета, МесяцевРасчетногоПериода, ПериодРасчетаСреднегоЗаработкаНачало, ПериодРасчетаСреднегоЗаработкаОкончание),  "ЧЦ=12; ЧДЦ=2; ЧН=");
			
		Иначе
			
			СреднедневнойЗаработок = "";
			
		КонецЕсли;
	Иначе
		ПериодРасчетаСреднегоЗаработкаТекст = ""; 
		ПериодРасчетаСреднегоЗаработкаТекст1 = ""; 
		СреднедневнойЗаработок = "";
	КонецЕсли;
	
	ЭлементыФормы.НадписьСреднийЗаработок.Заголовок = НадписьСреднийЗаработокТекст;
	ЭлементыФормы.ЗначениеСреднийЗаработок.Заголовок = СреднедневнойЗаработок;
	ЭлементыФормы.ИнформационнаяНадписьСреднийЗаработок.Заголовок = ПериодРасчетаСреднегоЗаработкаТекст;
	ЭлементыФормы.НадписьРасчетСреднегоЗаработка.Заголовок = НадписьСреднийЗаработокТекст + " " + СреднедневнойЗаработок + " руб." + Символы.ПС + ПериодРасчетаСреднегоЗаработкаТекст1;
	
КонецПроцедуры

Процедура ОчиститьНачисления()
	
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
	КонецЕсли;
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ВыполнитьДополнительныеДействияПриУдаленииНачислений(ЭтотОбъект, ЭтаФорма);
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ОчиститьВсеРасчеты()

	ОчиститьНачисления();
	
	Если РасчетСреднего.Количество() > 0 Тогда
		РасчетСреднего.Очистить();
	КонецЕсли;
	Если РасчетСреднегоДляОтпуска.Количество() > 0 Тогда
		РасчетСреднегоДляОтпуска.Очистить();
	КонецЕсли;

	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	
КонецПроцедуры

Процедура ПриИзмененииПериодаРегистрации()
	
	РаботаСДиалогамиЗК.УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрации, ЗначениеЗаполнено(мДокументИсправление), ЗначениеЗаполнено(мДокументСторнирование), ЭлементыФормы.ДополнительныеДействия.Кнопки, мКнопкаИсправление, мКнопкаОтменаИсправление);
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ВыполнитьДополнительныеДействияПриИзмененииПериодаРегистрации(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ПриИзмененииДатыНачалаСобытия(РассчитыватьДни = Истина)
	
	// Список видов записей расчета среднего
	// и видимость колонок
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.НастроитьСпискиВыбораЭлементовУправления(ЭтотОбъект, ЭтаФорма);
	
	Если РассчитыватьДни Тогда
		РассчитатьКоличествоДнейОтпуска();
	КонецЕсли;
	
	ОпределитьРасчетныйПериод();
	ОчиститьВсеРасчеты();
	
КонецПроцедуры

// Процедура рассчитывает количество дней отпуска, которые необходимо компенсировать или удержать
//
Процедура РассчитатьКоличествоДнейОтпуска()
	
	Если Сотрудник.Пустая() ИЛИ Не ЗначениеЗаполнено(ДатаУвольнения) ИЛИ ПорядокРасчетаОтпуска.Пустая() ИЛИ ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = ОстаткиОтпусков.ОстатокОтпускаСотрудникаНаДату(Сотрудник, ДатаУвольнения, Истина, ПорядокРасчетаОтпуска);
	РабочийГодС								= Результат.РабочийГодС;
	РабочийГодПо							= Результат.РабочийГодПо;
	ДнейЧасовКомпенсацииУдержанияОтпуска	= Результат.ОстатокНаДату * ?(Результат.ОстатокНаДату >= 0, 1, -1);
	ПризнакКомпенсацииОтпуска				= Результат.ОстатокНаДату >= 0;
	
КонецПроцедуры

Процедура РассчитатьНачисления()

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	МассивТаблиц = РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ПолучитьМассивТабличныхЧастей(ЭтотОбъект, "РасчетНачислений");
	ТекстВопроса1 = "Рассчитать документ можно только после отмены его проведения. Продолжить?";
	ТекстВопроса2 = "Перед расчетом таблица ""Оплата"" будет очищена. Продолжить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	Для каждого ТабличнаяЧасть Из МассивТаблиц Цикл
		ТабличнаяЧасть.Очистить();
	КонецЦикла;
		
	мРассчитываемыеТаблицы.Начисления = Истина;
	мРассчитываемыеТаблицы.РасчетСреднего = Ложь;
	
	Рассчитать(мРассчитываемыеТаблицы);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.НадписьОрганизация.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

// заполняет список доступных в.р.
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	СписокЗначений	- список доступных в.р.
//
Функция СписокНачислений()

	Список = Новый СписокЗначений;
	
	Список.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ВыходноеПособие);
	Список.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.СохраняемыйЗаработокНаВремяТрудоустройства);
	
	Если ПорядокРасчетаОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням Тогда
		Список.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДни);
		Если мУдержаниеЗаОтпускУменьшаетНалоги Тогда
			Список.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни);
		Иначе
			Список.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускКалендарныеДни);
		КонецЕсли;
	Иначе
		Список.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневка);
		Если мУдержаниеЗаОтпускУменьшаетНалоги Тогда
			Список.Добавить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка);
		Иначе
			Список.Добавить(ПланыВидовРасчета.УдержанияОрганизаций.УдержаниеЗаНеотработанныйОтпускШестидневка);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Список;
	
КонецФункции // СписокНачислений()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"ТаблицаДокумента");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
	Иначе	
		РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, "Документ не заполнен", "СообщениеОПроблемах");
	КонецЕсли;
	
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ДополнитьКолонкиТабличногоПоля(ЭлементыФормы.РасчетСреднегоДляОтпуска);
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ДополнитьКолонкиТабличногоПоля(ЭлементыФормы.РасчетСреднегоДляОтпуска1);
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если НЕ ЗначениеЗаполнено(ПорядокРасчетаОтпуска) Тогда
			ПорядокРасчетаОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням;
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();

	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("Размер");
	СтруктураКолонок.Вставить("Результат");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();

	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("БазовыйПериодНачало");
	СтруктураКолонок.Вставить("БазовыйПериодКонец");
	СтруктураКолонок.Вставить("КоэффициентИндексации");
	СтруктураКолонок.Вставить("Результат");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетСреднего.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетСреднегоДляОтпуска.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетСреднего1.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетСреднегоДляОтпуска1.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента				= Дата;
	// Запомнить текущий расчетный период
	мТекущийПериод = ПериодРегистрации;

	// Список видов начислений
	мУдержаниеЗаОтпускУменьшаетНалоги = РегистрыСведений.ВариантыВстроенныхАлгоритмовРасчетаЗарплаты.Получить().УдержаниеЗаОтпускУменьшаетНалоги;
	Если Не ЗначениеЗаполнено(мУдержаниеЗаОтпускУменьшаетНалоги) И мУдержаниеЗаОтпускУменьшаетНалоги <> Ложь Тогда
		мУдержаниеЗаОтпускУменьшаетНалоги = Ложь
	КонецЕсли;
	ЭлементыФормы.Начисления.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора = СписокНачислений();
	
	// Список видов записей расчета среднего
	// и видимость колонок
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.НастроитьСпискиВыбораЭлементовУправления(ЭтотОбъект, ЭтаФорма);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Исправление документов
	мКнопкаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	ОбновитьДоступностьЭлементовФормы();
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ВыполнитьДополнительныеДействияПриОткрытииФормы(ЭтотОбъект, ЭтаФорма);
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.ДатаУвольнения;
	КонецЕсли;
	
	УстановитьЗаголовкиОрганизацийВФорме();
	ЭлементыФормы.НадписьВремяВыходногоПособия.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейЧасовВыходногоПособия);
	ЭлементыФормы.НадписьВремяСохраненияСреднегоЗаработка.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейЧасовСохраненияСреднегоЗаработка);
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода = Новый НастройкаПериода;
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументИсправление <> Источник Тогда
						мДокументИсправление = Источник;
						ОбновитьДоступностьЭлементовФормы();
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура ввода документа-исправления
Процедура ДополнительныеДействияИсправить(Кнопка)

	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура отмены исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"ТаблицаДокумента");
	ОбновитьДоступностьЭлементовФормы();
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода.
//
Процедура ВыбПериодНажатие(Элемент)
	
	мНастройкаПериода.УстановитьПериод(ПериодРасчетаСреднегоЗаработкаНачало, КонецДня(ПериодРасчетаСреднегоЗаработкаОкончание));
	
	Если мНастройкаПериода.Редактировать() Тогда
		ПериодРасчетаСреднегоЗаработкаНачало	= мНастройкаПериода.ПолучитьДатуНачала();
		ПериодРасчетаСреднегоЗаработкаОкончание	= мНастройкаПериода.ПолучитьДатуОкончания();
		ОчиститьВсеРасчеты();
	КонецЕсли;
	
КонецПроцедуры // ВыбПериодНажатие()

Процедура КнопкаРассчитатьВсеНажатие(Элемент)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	МассивТаблиц = РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ПолучитьМассивТабличныхЧастей(ЭтотОбъект, "РасчетСреднего");
	ТекстВопроса1 = "Рассчитать документ можно только после отмены его проведения. Продолжить?";
	ТекстВопроса2 = "Перед расчетом все таблицы документа будут очищены. Продолжить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	Для каждого ТабличнаяЧасть Из МассивТаблиц Цикл
		ТабличнаяЧасть.Очистить();
	КонецЦикла;
	
	мРассчитываемыеТаблицы.Начисления = Истина;
	мРассчитываемыеТаблицы.РасчетСреднего = Истина;
	
	Рассчитать(мРассчитываемыеТаблицы);
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаРассчитатьНачисленияНажатие(Элемент)
	РассчитатьНачисления();
КонецПроцедуры

Процедура КоманднаяПанельНачисленияРассчитатьНачисления(Кнопка)
	РассчитатьНачисления()
КонецПроцедуры

Процедура КоманднаяПанельРасчетСреднегоРассчитатьСреднийЗаработок(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	МассивТаблиц = РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ПолучитьМассивТабличныхЧастей(ЭтотОбъект, "РасчетСреднего");
	ТекстВопроса1 = "Рассчитать документ можно только после отмены его проведения. Продолжить?";
	ТекстВопроса2 = "Перед расчетом все таблицы документа будут очищены. Продолжить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	Для каждого ТабличнаяЧасть Из МассивТаблиц Цикл
		ТабличнаяЧасть.Очистить();
	КонецЦикла;
	
	мРассчитываемыеТаблицы.Начисления = Ложь;
	мРассчитываемыеТаблицы.РасчетСреднего = Истина;
	
	Рассчитать(мРассчитываемыеТаблицы);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	ПриИзмененииПериодаРегистрации();	
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	ПриИзмененииПериодаРегистрации();	
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	ПриИзмененииПериодаРегистрации();	
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

Процедура СотрудникПриИзменении(Элемент)
	
	Физлицо = Сотрудник.Физлицо;
	ОчиститьВсеРасчеты();
	РассчитатьКоличествоДнейОтпуска();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // СотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" документа - основания увольнения
Процедура ДокументОснованиеПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("ДокСсылка",	ДокументОснование);
	Запрос.УстановитьПараметр("Сотрудник",	Сотрудник);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УвольнениеИзОрганизацииРаботники.ДатаУвольнения,
	|	УвольнениеИзОрганизацииРаботники.ПризнакКомпенсацииОтпуска,
	|	УвольнениеИзОрганизацииРаботники.ПорядокРасчетаОтпуска,
	|	УвольнениеИзОрганизацииРаботники.РабочийГодС,
	|	УвольнениеИзОрганизацииРаботники.РабочийГодПо,
	|	УвольнениеИзОрганизацииРаботники.ДнейЧасовКомпенсацииУдержанияОтпуска
	|ИЗ
	|	Документ.УвольнениеИзОрганизаций.РаботникиОрганизации КАК УвольнениеИзОрганизацииРаботники
	|ГДЕ
	|	УвольнениеИзОрганизацииРаботники.Сотрудник = &Сотрудник
	|	И УвольнениеИзОрганизацииРаботники.Ссылка = &ДокСсылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
		ПриИзмененииДатыНачалаСобытия(Ложь);
	Иначе
		Предупреждение("В выбранном документе-основании не найдено строки для указанного сотрудника!");
		
	КонецЕсли;
	
КонецПроцедуры // ДокументОснованиеПриИзменении()

// Процедура - обработчик события "ПриИзменении" количества оплачиваемых дней
// слоняем подпись по правилам русского языка
Процедура ДнейЧасовВыходногоПособияПриИзменении(Элемент)
	ЭлементыФормы.НадписьВремяВыходногоПособия.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейЧасовВыходногоПособия);
	ОчиститьНачисления();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" количества оплачиваемых дней
// слоняем подпись по правилам русского языка
Процедура ДнейЧасовСохраненияСреднегоЗаработкаПриИзменении(Элемент)
	ЭлементыФормы.НадписьВремяСохраненияСреднегоЗаработка.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейЧасовСохраненияСреднегоЗаработка);
	ОчиститьНачисления();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" порядка расчета компенсации отпуска
//
Процедура ПорядокРасчетаОтпускаПриИзменении(Элемент)
	
	ЭлементыФормы.Начисления.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора = СписокНачислений();
	Если ДнейЧасовКомпенсацииУдержанияОтпуска <> 0 Тогда
		ОпределитьРасчетныйПериод();
		ОчиститьВсеРасчеты();
	КонецЕсли;
	
	РассчитатьКоличествоДнейОтпуска();
	
КонецПроцедуры // ПорядокРасчетаОтпускаПриИзменении()

// Процедура - обработчик события "ПриИзменении" количечества дней/часов компенсации отпуска
//
Процедура ДнейЧасовКомпенсацииУдержанияОтпускаПриИзменении(Элемент)
	
	ЕстьДни = Элемент.Значение <> 0;
	ЭлементыФормы.ПорядокРасчетаОтпуска.АвтоОтметкаНезаполненного = ЕстьДни;
	Если Не ЕстьДни и НЕ ЗначениеЗаполнено(ПорядокРасчетаОтпуска) Тогда
		ЭлементыФормы.ПорядокРасчетаОтпуска.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	ОчиститьНачисления();
	
КонецПроцедуры // ДнейЧасовКомпенсацииУдержанияОтпускаПриИзменении()

Процедура ДнейЧасовКомпенсацииУдержанияОтпускаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТабДокумент = ОстаткиОтпусков.СправкаПоОтпускамСотрудника(Сотрудник, ДатаУвольнения, Истина, ПорядокРасчетаОтпуска);
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Ложь, "Справка по отпуску сотрудника");
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ДокументОснование"
//
Процедура ДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Не Организация.Пустая() Тогда
		
		СтандартнаяОбработка = Ложь;
		
		ФормаВыбора = Документы.УвольнениеИзОрганизаций.ПолучитьФормуВыбора(, Элемент);
		
		ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;

		ФормаВыбора.Отбор.Организация.Установить(Организация);
		Если Не Сотрудник.Пустая() Тогда
			ФормаВыбора.Отбор.ДокументыПоСотрудникуОрганизации.Установить(Сотрудник);
		КонецЕсли;
		
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ДокументОснованиеНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" даты увольнения
Процедура ДатаУвольненияПриИзменении(Элемент)
	
	ПриИзмененииДатыНачалаСобытия()

КонецПроцедуры

Процедура ПериодРасчетаСреднегоЗаработкаНачалоПриИзменении(Элемент)
    ОчиститьВсеРасчеты();
КонецПроцедуры

Процедура ПериодРасчетаСреднегоЗаработкаОкончаниеПриИзменении(Элемент)
    ОчиститьВсеРасчеты();
КонецПроцедуры

Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ЭлементыФормы.Панель.Страницы[ТекущаяСтраница] = ЭлементыФормы.Панель.Страницы.РасчетСреднего Тогда
		
		ОсновнойСпособРасчета = ОсновнойВариантРасчетаДокумента().СпособРасчета;
		ОдинРасчет = Истина;
		Если ЗначениеЗаполнено(ДнейЧасовКомпенсацииУдержанияОтпуска) Тогда
			ОдинРасчет = ОсновнойСпособРасчета = ?(ПорядокРасчетаОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
		КонецЕсли;
		Если ОдинРасчет И (ЗначениеЗаполнено(ДнейЧасовВыходногоПособия) Или ЗначениеЗаполнено(ДнейЧасовСохраненияСреднегоЗаработка)) Тогда
			ОдинРасчет = ОсновнойСпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку
		КонецЕсли;
		Если Не ОдинРасчет Тогда
			ЭлементыФормы.ПанельРасчетСреднего.ТекущаяСтраница = ЭлементыФормы.ПанельРасчетСреднего.Страницы.ОбаРасчетаСреднего;
			ТекущийЭлемент = ЭлементыФормы.РасчетСреднегоДляОтпуска1;
		ИначеЕсли ОсновнойСпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработку Тогда
			ЭлементыФормы.ПанельРасчетСреднего.ТекущаяСтраница = ЭлементыФормы.ПанельРасчетСреднего.Страницы.РасчетСреднего;
			ТекущийЭлемент = ЭлементыФормы.РасчетСреднего;
		Иначе
			ЭлементыФормы.ПанельРасчетСреднего.ТекущаяСтраница = ЭлементыФормы.ПанельРасчетСреднего.Страницы.РасчетСреднегоДляОтпуска;
			ТекущийЭлемент = ЭлементыФормы.РасчетСреднегоДляОтпуска;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры


Процедура НадписьРазмерНажатие(Элемент)
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Оплата;
	ТекущийЭлемент = ЭлементыФормы.Начисления;

КонецПроцедуры

Процедура НадписьСреднийЗаработокНажатие(Элемент)
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.РасчетСреднего;
	
КонецПроцедуры

Процедура ЗаголовокДополнительнойИнформационнойНадписиНажатие(Элемент)
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ПоказатьДополнительнуюФорму(ЭтотОбъект, ЭтаФорма)
КонецПроцедуры


Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	Если ЗначениеЗаполнено(мДокументИсправление) Тогда
		мДокументИсправление.ПолучитьФорму(, ЭтаФорма).Открыть();
	ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
		мДокументСторнирование.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Начисления

Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияНачисленияПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

Процедура ОбработчикОжиданияНачисленияПриАктивизацииСтроки()
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущаяСтрока;
	
	МожноРедактироватьСтроку = ДанныеСтроки = Неопределено Или Не ДанныеСтроки.Сторно Или Не ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	
КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		Отказ = Элемент.ТекущиеДанные.Сторно И ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Элемент.ТекущиеДанные.Сторно И ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
КонецПроцедуры

Процедура НачисленияПередУдалением(Элемент, Отказ)
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ВыполнитьДействияПередУдалениемНачисления(Элемент, ЭтотОбъект, Отказ)
КонецПроцедуры

Процедура НачисленияПослеУдаления(Элемент)
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" таблицы
//
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
	КонецЕсли;

	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ВыполнитьДействияПриНачалеРедактированияНачисления(ЭтаФорма, Элемент, НоваяСтрока)
	
КонецПроцедуры // НачисленияПриНачалеРедактирования()

Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		// сторно запись - красным
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		КонецЕсли;
		
		ЯчейкаСКартинкой = Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);	
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки.Сторно Тогда
		Возврат;
	КонецЕсли;
	
	// Рассчитаем период расчета среднего заработка
	Если Не ЗначениеЗаполнено(ДанныеСтроки.ПериодРасчетаСреднегоЗаработкаНачало) Тогда
		ДанныеСтроки.ПериодРасчетаСреднегоЗаработкаНачало = ПериодРасчетаСреднегоЗаработкаНачало;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДанныеСтроки.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
		ДанныеСтроки.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднегоЗаработкаОкончание;
	КонецЕсли;
	
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ВыполнитьДействияПослеРедактированияНачисления(ЭтаФорма, ДанныеСтроки);
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	РасчетПриУвольненииРаботникаОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ВидРасчета"
//
Процедура НачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // НачисленияВидРасчетаНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РасчетСреднего

Процедура РасчетСреднегоПослеУдаления(Элемент)
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
КонецПроцедуры

Процедура РасчетСреднегоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ОбновитьИнформационнуюНадписьСреднийЗаработок();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" строки таблицы
//
Процедура РасчетСреднегоПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КоэффициентИндексации = 1;
	КонецЕсли;
	
КонецПроцедуры // РасчетСреднегоПриНачалеРедактирования()

Процедура РасчетСреднегоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если Элемент.Колонки.КоэффициентИндексации.Видимость Тогда
		СсылкаВР = ДанныеСтроки.ВидРасчета;
		ОформлениеСтроки.Ячейки.КоэффициентИндексации.ТолькоПросмотр = (СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые);
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоВидРасчетаПриИзменении(Элемент)
	СсылкаВР = Элемент.Значение;
	Если СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые Тогда
		ЭлементыФормы.РасчетСреднего.ТекущиеДанные.КоэффициентИндексации = 1;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднего1ВидРасчетаПриИзменении(Элемент)
	СсылкаВР = Элемент.Значение;
	Если СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые Тогда
		ЭлементыФормы.РасчетСреднего1.ТекущиеДанные.КоэффициентИндексации = 1;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Элемент.СписокВыбора;
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("РасчетСреднего"), Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"));
	
КонецПроцедуры

Процедура РасчетСреднегоВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("РасчетСреднего"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РасчетСреднегоДляОтпуска

// Процедура - обработчик события "ПриНачалеРедактирования" строки таблицы
Процедура РасчетСреднегоДляОтпускаПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КоэффициентИндексации = 1;
	КонецЕсли;
	
КонецПроцедуры // РасчетСреднегоДляОтпускаПриНачалеРедактирования()

Процедура РасчетСреднегоДляОтпускаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если Элемент.Колонки.КоэффициентИндексации.Видимость Тогда
		СсылкаВР = ДанныеСтроки.ВидРасчета;
		ОформлениеСтроки.Ячейки.КоэффициентИндексации.ТолькоПросмотр = (СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые);
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоДляОтпускаВидРасчетаПриИзменении(Элемент)
	СсылкаВР = Элемент.Значение;
	Если СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые Тогда
		ЭлементыФормы.РасчетСреднегоДляОтпуска.ТекущиеДанные.КоэффициентИндексации = 1;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоДляОтпуска1ВидРасчетаПриИзменении(Элемент)
	СсылкаВР = Элемент.Значение;
	Если СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые Тогда
		ЭлементыФормы.РасчетСреднегоДляОтпуска1.ТекущиеДанные.КоэффициентИндексации = 1;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоДляОтпускаВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Элемент.СписокВыбора;
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоДляОтпускаВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("РасчетСреднегоДляОтпуска"), Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"));
	
КонецПроцедуры

Процедура РасчетСреднегоДляОтпускаВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("РасчетСреднегоДляОтпуска"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400; // в секундах
мРассчитываемыеТаблицы = Новый Структура("Начисления,РасчетСреднего");
мСведенияОВидахРасчета = Новый Соответствие;

мОбработкаПодбораПоСтроке = Ложь;
мТекстПодбораПоСтроке = "";
мПоследнееЗначениеЭлементаПодбораПоСтроке = Неопределено;

мОкруглятьДниОтпускаПриКомпенсации = Константы.ОкруглятьДниОтпускаПриКомпенсации.Получить();