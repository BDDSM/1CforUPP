////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

//Хранит список числовых колонок документа (Структура)
Перем ЧисловыеКолонки;

Перем СтараяСуммаБезНДС, СтараяСуммаНДС;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОграничениеТипаВНАдляСМР;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДанныеПоСФ,                  ЭлементыФормы.КоманднаяПанельПоОстаткам.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДополнительныеСведения,      ЭлементыФормы.КоманднаяПанельПоОстаткам1.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетыСКонтрагентами,       ЭлементыФормы.КоманднаяПанельРасчетыСКонтрагентами.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетыСКонтрагентамиАвансы, ЭлементыФормы.КоманднаяПанельРасчетыСКонтрагентамиАвансы.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()


// Рассчитывает сумму взаиморасчетов в строке ТЧ "Данные по СФ".
//
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаТабличнойЧасти = Неопределено)

	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма, 
									мВалютаРегламентированногоУчета,
	                                СтрокаТабличнойЧасти.ВалютаВзаиморасчетов, 
	                                1, СтрокаТабличнойЧасти.КурсВзаиморасчетов,
	                                1,СтрокаТабличнойЧасти.КратностьВзаиморасчетов);

КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Рассчитывает сумму расчетов в валюте регламентированного учета в строке ТЧ "Данные по СФ".
Процедура РассчитатьРубСуммуРасчетов(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.СуммаБезНДС+СтрокаТабличнойЧасти.НДС 
			- ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным,0,СтрокаТабличнойЧасти.СуммаБезНДСОплата+СтрокаТабличнойЧасти.НДСОплата);

КонецПроцедуры

// Выполняет необходимые действия при изменении договора в строке ТЧ "Оплата поставщикам".
//
Процедура ПриИзмененииДоговора(СтрокаТабличнойЧасти = Неопределено, ИзменятьКурс = Истина)

	Если СтрокаТабличнойЧасти = Неопределено тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти = Неопределено тогда
	 	Возврат;
	КонецЕсли;
	
	ДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорКонтрагента;
	
	Если ВидОперации = перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда 
		Если ДоговорКонтрагента.РасчетыВУсловныхЕдиницах Или НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
			ВалютаАванса = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаАванса = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЕсли; 
		
		Если ВалютаАванса = мВалютаРегламентированногоУчета Тогда
			СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = 0;
			//Зачищаем валютную сумму в строках расшифровки
			СтрокиРасшифровки = ДополнительныеСведения.НайтиСтроки(Новый структура("КлючСтроки",СтрокаТабличнойЧасти.КлючСтроки));
			Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
				СтрокаРасшифровки.ВалютнаяСуммаСНДС = СтрокаРасшифровки.СуммаБезНДС+СтрокаРасшифровки.НДС;
				СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС + СтрокаРасшифровки.ВалютнаяСуммаСНДС;
			КонецЦикла;
			
		ИначеЕсли не СтрокаТабличнойЧасти.ВалютаАванса = ВалютаАванса Тогда
			СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = 0;
			//Зачищаем валютныую сумму в строках расшифровки
			СтрокиРасшифровки = ДополнительныеСведения.НайтиСтроки(Новый структура("КлючСтроки",СтрокаТабличнойЧасти.КлючСтроки));
			Для каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
				СтрокаРасшифровки.ВалютнаяСуммаСНДС = 0;
			КонецЦикла; 
		КонецЕсли; 
		СтрокаТабличнойЧасти.ВалютаАванса = ВалютаАванса;
		ЭлементыФормы.ДополнительныеСведения.Колонки.ВалютнаяСуммаСНДС.ТолькоПросмотр = (СтрокаТабличнойЧасти.ВалютаАванса=мВалютаРегламентированногоУчета);
	Иначе
		СтрокаТабличнойЧасти.ВалютаАванса = Справочники.Валюты.ПустаяСсылка();
		//СтрокаТабличнойЧасти.ВалютнаяСуммаСНДС = 0;
	КонецЕсли; 
	
	//Если не ОтразитьРасчетыСКонтрагентами Тогда
	//	Возврат;
	//КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Строка "+СтрокаТабличнойЧасти.НомерСтроки+": не заполнена валюта взаиморасчетов в договоре """+строка(ДоговорКонтрагента)+"""!");
	КонецЕсли; 
	
	Если ИзменятьКурс или НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) или не СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаТабличнойЧасти.КурсВзаиморасчетов      = ?(НЕ ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс),1,СтруктураКурсаВзаиморасчетов.Курс);
		СтрокаТабличнойЧасти.КратностьВзаиморасчетов      = ?(НЕ ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Кратность),1,СтруктураКурсаВзаиморасчетов.Кратность);
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	РассчитатьРубСуммуРасчетов(СтрокаТабличнойЧасти);
	РассчитатьСуммуВзаиморасчетов(СтрокаТабличнойЧасти);

	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаТабличнойЧасти.Контрагент, ДоговорКонтрагента);

	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетАвансовПокупателя;
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда	
		СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	КонецЕсли; 
	
КонецПроцедуры // ПриИзмененииДоговора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Функция МассивКолонокПоВидуОперации()
	
	МассивКолонок = Новый Массив;
	МассивКолонок.Добавить("НомерСтроки");
	МассивКолонок.Добавить("Контрагент");
	МассивКолонок.Добавить("ДоговорКонтрагента");
	МассивКолонок.Добавить("ДатаСФ");
	МассивКолонок.Добавить("НомерСФ");
	МассивКолонок.Добавить("ДатаПлатежноРасчетногоДокумента");
	МассивКолонок.Добавить("НомерПлатежноРасчетногоДокумента");
	МассивКолонок.Добавить("СчетФактура");
	МассивКолонок.Добавить("СуммаБезНДС");
	МассивКолонок.Добавить("НДС");
	МассивКолонок.Добавить("СуммаБезНДСОплата");
	МассивКолонок.Добавить("НДСОплата");
	
	МассивКолонок.Добавить("ВидЦенности");
	МассивКолонок.Добавить("СтавкаНДС");
	
	МассивКолонок.Добавить("Исправление");
	МассивКолонок.Добавить("НомерИсправления");
	МассивКолонок.Добавить("ДатаИсправления");
	МассивКолонок.Добавить("КорректировочныйСчетФактура");
	МассивКолонок.Добавить("НомерИсходногоДокумента");
	МассивКолонок.Добавить("ДатаИсходногоДокумента");
	МассивКолонок.Добавить("НомерИсправленияИсходногоДокумента");
	МассивКолонок.Добавить("ДатаИсправленияИсходногоДокумента");
	МассивКолонок.Добавить("УчитыватьИсправлениеИсходногоДокумента");		
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		
		МассивКолонок.Добавить("ПредъявленСФ");
		МассивКолонок.Добавить("СуммаБезНДСПредъявлено");
		МассивКолонок.Добавить("НДСПредъявлено");
		МассивКолонок.Добавить("СуммаБезНДССтроительство");
		МассивКолонок.Добавить("НДССтроительство");
		МассивКолонок.Добавить("СуммаБезНДСВведеноВЭксплуатацию");
		МассивКолонок.Добавить("НДСВведеноВЭксплуатацию");
		МассивКолонок.Добавить("СуммаБезНДСВключеноВСтоимость");
		МассивКолонок.Добавить("НДСВключеноВСтоимость");
		МассивКолонок.Добавить("СуммаБезНДССтавка0");
		МассивКолонок.Добавить("НДССтавка0");
		МассивКолонок.Добавить("СуммаБезНДСПредъявлено0");
		МассивКолонок.Добавить("НДСПредъявлено0");
		МассивКолонок.Добавить("СуммаБезНДСПредъявленоНеПодтверждено0");
		МассивКолонок.Добавить("НДСПредъявленоНеПодтверждено0");
		МассивКолонок.Добавить("СуммаБезНДСНеПодтверждено0");
		МассивКолонок.Добавить("НДСНеПодтверждено0");
		МассивКолонок.Добавить("СуммаБезНДСПодтверждено0");
		МассивКолонок.Добавить("НДСПодтверждено0");
		
		МассивКолонок.Добавить("Номенклатура");
		МассивКолонок.Добавить("СчетЗатрат");
		МассивКолонок.Добавить("Субконто1");
		МассивКолонок.Добавить("Субконто2");
		МассивКолонок.Добавить("Субконто3");
		МассивКолонок.Добавить("ДокументОплаты");
		МассивКолонок.Добавить("ДокументОтгрузки");
		МассивКолонок.Добавить("СчетУчетаНДС");
		МассивКолонок.Добавить("ВидВнеоборотногоАктива");
		МассивКолонок.Добавить("ОбъектСтроительства");
		МассивКолонок.Добавить("НеВлияетНаВычет");
		МассивКолонок.Добавить("СтранаПроисхождения");
		МассивКолонок.Добавить("НомерГТД");
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		
		МассивКолонок.Добавить("СуммаБезНДСНеПодтверждено0");
		МассивКолонок.Добавить("НДСНеПодтверждено0");
		МассивКолонок.Добавить("СуммаБезНДСПодтверждено0");
		МассивКолонок.Добавить("НДСПодтверждено0");
		МассивКолонок.Добавить("СтавкаНДСНеПодтверждена0");
		
		МассивКолонок.Добавить("Номенклатура");
		МассивКолонок.Добавить("ДокументОплаты");
		МассивКолонок.Добавить("СтранаПроисхождения");
		МассивКолонок.Добавить("НомерГТД");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным  Тогда
		
		МассивКолонок.Добавить("ВалютаАванса");
		МассивКолонок.Добавить("ВалютнаяСуммаСНДС");
		МассивКолонок.Добавить("Контрагент");
		МассивКолонок.Добавить("ДоговорКонтрагента");
		МассивКолонок.Добавить("СуммаБезНДСПредъявлено0");
		МассивКолонок.Добавить("НДСПредъявлено0");
		МассивКолонок.Добавить("СуммаБезНДСПредъявленоНеПодтверждено0");
		МассивКолонок.Добавить("НДСПредъявленоНеПодтверждено0");
		МассивКолонок.Добавить("СуммаБезНДСНеПодтверждено0");
		МассивКолонок.Добавить("НДСНеПодтверждено0");
		МассивКолонок.Добавить("СуммаБезНДСПодтверждено0");
		МассивКолонок.Добавить("НДСПодтверждено0");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным  Тогда
		
		МассивКолонок.Добавить("СуммаБезНДСПредъявлено");
		МассивКолонок.Добавить("НДСПредъявлено");
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления  Тогда
		МассивКолонок.Добавить("СуммаБезНДСПредъявлено");
		МассивКолонок.Добавить("НДСПредъявлено");
		МассивКолонок.Добавить("СуммаБезНДСВведеноВЭксплуатацию");
		МассивКолонок.Добавить("НДСВведеноВЭксплуатацию");
		
		МассивКолонок.Добавить("Номенклатура");
		МассивКолонок.Добавить("ОбъектСтроительства");
		МассивКолонок.Добавить("НеВлияетНаВычет");
		МассивКолонок.Добавить("СтранаПроисхождения");
		МассивКолонок.Добавить("НомерГТД");
		
	КонецЕсли;
	
	Возврат МассивКолонок;
	
КонецФункции

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭтоВводОстатковПоАвансам 			= ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным;
	ЭтоВводОстатковПоАвансамВыданным 	= ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным;
	ЭтоВводОстатковПоНДСПокупателей 	= ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей;
	ЭтоВводОстатковПоПоставщикам 		= ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям;
	ЭтоВводОстатковПоСМР				= ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления;
	
	Колонки     = ЭлементыФормы.ДанныеПоСФ.Колонки;

	//Название колонок даты и номера документа по видам операции
	Если ЭтоВводОстатковПоПоставщикам Тогда
		Колонки.ДатаПлатежноРасчетногоДокумента.ТекстШапки = "Дата документа поступления";
		Колонки.НомерПлатежноРасчетногоДокумента.ТекстШапки = "Номер документа поступления";
	ИначеЕсли ЭтоВводОстатковПоНДСПокупателей тогда
		Колонки.ДатаПлатежноРасчетногоДокумента.ТекстШапки = "Дата документа реализации";
		Колонки.НомерПлатежноРасчетногоДокумента.ТекстШапки = "Номер документа реализации";
	ИначеЕсли ЭтоВводОстатковПоСМР Тогда
		Колонки.ДатаПлатежноРасчетногоДокумента.ТекстШапки = "Дата документа начисления НДС";
		Колонки.НомерПлатежноРасчетногоДокумента.ТекстШапки = "Номер документа начисления НДС";
	Иначе	
		Колонки.ДатаПлатежноРасчетногоДокумента.ТекстШапки = "Дата расчетного документа";
		Колонки.НомерПлатежноРасчетногоДокумента.ТекстШапки = "Номер расч. документа";
	КонецЕсли; 
	
	// Доступность колонки счет-фактура для редактирования
	Колонки.СчетФактура.ЭлементУправления.ТолькоПросмотр = Истина;
	
	МассивКолонок = МассивКолонокПоВидуОперации();
	
	//Видимость колонок табличной части "Данные по СФ".
	
	Для Каждого Колонка Из Колонки Цикл
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонка, МассивКолонок.Найти(Колонка.Имя) <> Неопределено);
	КонецЦикла;
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	
	ВидимостьИсправления = ВерсияПостановления = 2;	
	ВидимостьКорректировки = Дата >= '20111001' И (ЭтоВводОстатковПоПоставщикам ИЛИ ЭтоВводОстатковПоНДСПокупателей);
	ВидимостьИсправленияКорректировки = ВерсияПостановления = 2 И ВидимостьКорректировки;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.Исправление,				            ВидимостьИсправления);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НомерИсправления,			            ВидимостьИсправления);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ДатаИсправления,			            ВидимостьИсправления);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.КорректировочныйСчетФактура,            ВидимостьКорректировки);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НомерИсходногоДокумента,	            ВидимостьКорректировки);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ДатаИсходногоДокумента,		            ВидимостьКорректировки);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.НомерИсправленияИсходногоДокумента,     ВидимостьИсправленияКорректировки);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ДатаИсправленияИсходногоДокумента,	    ВидимостьИсправленияКорректировки);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.УчитыватьИсправлениеИсходногоДокумента, ВидимостьИсправленияКорректировки);

	//Видимость колонок табличной части "Дополнительные сведения".
	Колонки     = ЭлементыФормы.ДополнительныеСведения.Колонки;
	
	Для Каждого Колонка Из Колонки Цикл
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонка, МассивКолонок.Найти(Колонка.Имя) <> Неопределено);
	КонецЦикла;
	
	Колонки.СуммаБезНДСВведеноВЭксплуатацию.Положение 	= ?(ЭтоВводОстатковПоСМР, ПоложениеКолонки.НоваяКолонка, ПоложениеКолонки.ВТойЖеКолонке);
	Колонки.НДСВведеноВЭксплуатацию.Положение			= ?(ЭтоВводОстатковПоСМР, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.ВТойЖеКолонке);
		
	// Доступность колонок ТЧ "Дополнительные сведения"
	Колонки.ВидЦенности.Доступность = Не (ЭтоВводОстатковПоСМР Или ЭтоВводОстатковПоАвансамВыданным);
	
	Если ЭтоВводОстатковПоПоставщикам Тогда
		ОтобразитьДополнительныеСведения();
	КонецЕсли; 
	
	Колонки = ЭлементыФормы.РасчетыСКонтрагентами.Колонки;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.Контрагент,				Не ЭтоВводОстатковПоСМР);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ДоговорКонтрагента,		Не ЭтоВводОстатковПоСМР);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.Сделка,					Не ЭтоВводОстатковПоСМР);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ВалютаВзаиморасчетов,	Не ЭтоВводОстатковПоСМР);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.КурсВзаиморасчетов,		Не ЭтоВводОстатковПоСМР);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ВалютнаяСуммаВзаиморасчетов,	Не ЭтоВводОстатковПоСМР);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.РасчетыСБюджетом, 		ЭтоВводОстатковПоПоставщикам Или ЭтоВводОстатковПоСМР);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СчетУчетаРасчетовСКонтрагентом, ОтразитьРасчетыСКонтрагентами);
	Колонки.СчетУчетаРасчетовСКонтрагентом.АвтоОтметкаНезаполненного = ОтразитьРасчетыСКонтрагентами;
	
	// Доступность колонок ТЧ "РасчетыСКонтрагентами"
	Колонки.РасчетыСБюджетом.Доступность							 = Не ЭтоВводОстатковПоСМР;
	
	Колонки = ЭлементыФормы.РасчетыСКонтрагентамиАвансы.Колонки;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СчетУчетаРасчетовСКонтрагентом, ОтразитьРасчетыСКонтрагентами);
	Колонки.СчетУчетаРасчетовСКонтрагентом.АвтоОтметкаНезаполненного = ОтразитьРасчетыСКонтрагентами;
	
	ЭлементыФормы.Панель.Страницы.РасчетыСКонтрагентами.Видимость = Не (ЭтоВводОстатковПоАвансам Или ЭтоВводОстатковПоАвансамВыданным);
	ЭлементыФормы.Панель.Страницы.Авансы.Видимость = Не (ЭтоВводОстатковПоНДСПокупателей Или ЭтоВводОстатковПоСМР Или ЭтоВводОстатковПоАвансамВыданным);
	ЭлементыФормы.КоманднаяПанельПоОстаткам.Кнопки.ПодменюЗаполнить.Кнопки.СформироватьСФРасчеты.Доступность = Не ЭтоВводОстатковПоАвансамВыданным;
	ЭлементыФормы.КоманднаяПанельРасчетыСКонтрагентамиАвансы.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоОсновнымДанным.Доступность = ЭтоВводОстатковПоАвансам;
	ЭлементыФормы.КоманднаяПанельРасчетыСКонтрагентамиАвансы.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьСФ.Доступность = ЭтоВводОстатковПоАвансам;
	
	ЭлементыФормы.ОтразитьРасчетыСКонтрагентами.Доступность = (Дата < '20070101');
	ЭлементыФормы.ОтразитьРасчетыСКонтрагентами.Видимость	= Не ЭтоВводОстатковПоСМР;
	
КонецПроцедуры //УстановитьВидимость()

// Процедура вызывается по кнопке при изменении активной строки в таблице косвенных 
// расходов, а также при переходе на закладку "Косвенные расходы".
Процедура ОтобразитьДополнительныеСведения(ТекСтрокаОстатков = Неопределено)

	Если ТекСтрокаОстатков = Неопределено и не ЭлементыФормы.ДанныеПоСФ.ТекущаяСтрока = Неопределено Тогда
		ТекСтрокаОстатков = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	КонецЕсли; 
	
	
	// Включаем отбор тех дополнительных сведений, которые относятся к текущей строке,
	// выбранной в табличной части "ДанныеПоСФ"
	Если ТекСтрокаОстатков <> Неопределено Тогда
		// Включаем отбор ключу из текущей строки табличной части "ДополнительныеСведения"
		ЭлементыФормы.ДополнительныеСведения.ТолькоПросмотр = Ложь;
		ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Значение = ТекСтрокаОстатков.КлючСтроки;
 		ЭлементыФормы.ДополнительныеСведения.Колонки.ВалютнаяСуммаСНДС.ТолькоПросмотр = (ТекСтрокаОстатков.ВалютаАванса=мВалютаРегламентированногоУчета);

	Иначе
		// Текущая строка в таблице косвенных расходов не установлена
		ЭлементыФормы.ДополнительныеСведения.ТолькоПросмотр = Истина;
		Если ДанныеПоСФ.Количество() = 0 Тогда
			ДополнительныеСведения.Очистить();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОтобразитьДополнительныеСведения()

// Функция анализирует таблицу ДополнительныеСведения и рассчитывает сумму 
// без НДС или сумму НДС по определенному событию.
Функция РассчитатьСуммуСобытия(КлючСтроки, Параметр = "СуммаБезНДС") //, ТекСобытие

	СтруктураПоиска   = Новый Структура("КлючСтроки", КлючСтроки);//,УдалитьСобытие, ТекСобытие
	Строки            = ДополнительныеСведения.НайтиСтроки(СтруктураПоиска);

	Счетчик = 0;
	
	Если Строки.Количество() > 0 Тогда
		Для Каждого Строка Из Строки Цикл
			Счетчик = Счетчик + Строка[Параметр];
		КонецЦикла;
	КонецЕсли;
	
	Возврат Счетчик;
	
КонецФункции // РассчитатьСуммуСобытия()

Процедура ОбновлениеОтображения()
	
	СтраницаПанели  = ЭлементыФормы.Панель.Страницы;
	
	СтраницаПанели.ДанныеПоНДС.Заголовок = ВидОперации;
	ЭтоАванс = ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным
				Или ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным;
	
	ЭлементыФормы.ДанныеПоСФ.Колонки.СуммаБезНДСОплата.ТекстШапки 	= ?(ЭтоАванс, "Сумма без НДС зачтено", "Сумма без НДС оплачено");
	ЭлементыФормы.ДанныеПоСФ.Колонки.НДСОплата.ТекстШапки 			= ?(ЭтоАванс, "НДС зачтено", "НДС оплачено");
	
	ЭлементыФормы.ДополнительныеСведения.Колонки.ОбъектСтроительства.ТекстШапки = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления, "Основное средство", "Объект Вн.А.");
	ЭлементыФормы.ДополнительныеСведения.Колонки.СуммаБезНДСВведеноВЭксплуатацию.ТекстШапки = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления, "Сумма без НДС по ОС, введенному в эксплуатацию", "Сумма без НДС по Вн.А. принятому к учету");
	ЭлементыФормы.ДополнительныеСведения.Колонки.НДСВведеноВЭксплуатацию.ТекстШапки = ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления, "НДС по ОС, введенному в эксплуатацию", "НДС по Вн.А. принятому к учету");
	ЭлементыФормы.ДополнительныеСведения.Колонки.СуммаБезНДСОплата.ТекстШапки 	= ?(ЭтоАванс, "Сумма без НДС зачтено", "Сумма без НДС оплачено");
	ЭлементыФормы.ДополнительныеСведения.Колонки.НДСОплата.ТекстШапки 			= ?(ЭтоАванс, "НДС зачтено", "НДС оплачено");

КонецПроцедуры

Процедура УстановитьВыборВидаЦенности(Элемент)
	
	Элемент.СписокВыбора.Очистить();
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.АвансыПолученные0);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.АвансыВыданные);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Материалы);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НМА);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Оборудование);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ОС);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Товары);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Товары);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Материалы);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ОС);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.СМРПодрядные);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.КомандировочныеРасходы);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПредставительскиеРасходы);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НМА);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Оборудование);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
		Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации <> Перечисления.ВидыОперацийВводНачОстатковНДС[Кнопка.Имя] Тогда
			
			Если (ДанныеПоСФ.Количество() > 0) Или (РасчетыСКонтрагентами.Количество() > 0) Тогда
				// При смене вида операции табличная часть документа должна быть очищена
				Если Вопрос("При изменении вида операции табличные части будут очищены. Продолжить?", РежимДиалогаВопрос.ОКОтмена, 60, КодВозвратаДиалога.Отмена, "Изменение вида операции") = КодВозвратаДиалога.ОК Тогда
					ДанныеПоСФ.Очистить();
					РасчетыСКонтрагентами.Очистить();
					ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС[Кнопка.Имя];
					Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
						ОтразитьРасчетыСКонтрагентами = Ложь;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС[Кнопка.Имя];
				Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
					ОтразитьРасчетыСКонтрагентами = Ложь;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КоманднаяПанельПоОстаткамСформироватьСФ(Кнопка)
	
	Если РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		
		СформироватьСчетаФактуры();
	
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельПоОстаткамСформироватьСФРасчеты(Кнопка)
	
	Если РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
	
		ЭтоАвансы = (ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным);
		
		Если ЭтоАвансы Тогда
			СтрокиТЧ = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", Истина));
		Иначе
			СтрокиТЧ = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", Ложь));
		КонецЕсли;
		
		Если СтрокиТЧ <> Неопределено Тогда
			Если СтрокиТЧ.Количество() > 0 Тогда
				ОтветНаВопрос = Вопрос("Табличное поле " + ?(ЭтоАвансы, "авансов", "расчетов с контрагентами") + " будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
				Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
					Возврат;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СформироватьСчетаФактуры();
		
		ЗаполнитьРасчетыСКонтрагентами();	

	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельРасчетыСКонтрагентамиЗаполнитьПоОсновнымДанным(Кнопка)
	
	Если ЭтоНовый() Тогда
		Ответ = Вопрос("Перед заполнением расчетов рекомендуется записать документ. Записать?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
			ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;
	
	ЭтоАванс = (ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным);
	
	СтрокиТЧ = РасчетыСКонтрагентами.НайтиСтроки(Новый Структура("Аванс", ЭтоАванс));
	
	Если СтрокиТЧ <> Неопределено Тогда
		Если СтрокиТЧ.Количество() > 0 Тогда
			ОтветНаВопрос = Вопрос("Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнениеСФ() Тогда
		ОтветНаВопрос = Вопрос("В табличной части ""Данные по остаткам"" найдены строки с незаполненным " + ?(ЭтоАванс, "документом оплаты", "счетом-фактурой")+ ". Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРасчетыСКонтрагентами();
	
КонецПроцедуры

Процедура КоманднаяПанельРасчетыСКонтрагентамиЗаполнитьСФ(Кнопка)

	ЗаполнитьСФРасчетыСКонтрагентами();	
	
КонецПроцедуры

Функция ПроверитьЗаполнениеСФ()
	
	Результат = Истина;
	
	Для Каждого СтрокаТЧ Из ДанныеПоСФ Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетФактура) Тогда
			
			Результат = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		Если Дата >= '20070101' Тогда
			ОтразитьРасчетыСКонтрагентами = Ложь;
		КонецЕсли; 
	Иначе
		Если Дата >= '20070101' и ОтразитьРасчетыСКонтрагентами Тогда
			ОтразитьРасчетыСКонтрагентами = Ложь;
			ОбщегоНазначения.СообщитьОбОшибке("Документ «Ввод начальных остатков по НДС» начиная с 2007 не поддерживает отражение расчетов с контрагентами в бухгалтерском учете.
			|Для документа снят признак отражения расчетов с контрагентами.
			|Расчеты с контрагентами должны отражаться документом «Ввод начальных остатков по взаиморасчетам» (ввести на основании текущего документа).",,Строка(Ссылка));
		КонецЕсли; 
	КонецЕсли;

	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
										  
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	// Предполагается использовать отбор по таблице "ДополнительныеСведения"
	ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Использование = Истина;
	ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Значение = 0;
	
	// Требуется установить отбор по авансам в ТЧ "Расчеты с контрагентами"
	ЭлементыФормы.РасчетыСКонтрагентами.ОтборСтрок.Аванс.Использование = Истина;
	ЭлементыФормы.РасчетыСКонтрагентами.ОтборСтрок.Аванс.Значение = Ложь;
	ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ОтборСтрок.Аванс.Использование = Истина;
	ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ОтборСтрок.Аванс.Значение = Истина;
	
	// Вывод флажка перехода на ред. 1.5.
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Для каждого СтрокаРасшифровки Из ДополнительныеСведения Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДокументОплаты) и не СтрокаРасшифровки.ДокументОплаты = Неопределено Тогда
			СтрокаРасшифровки.ДокументОплаты = Неопределено;
		КонецЕсли; 
		Если НЕ ЗначениеЗаполнено(СтрокаРасшифровки.ДокументОтгрузки) и не СтрокаРасшифровки.ДокументОтгрузки = Неопределено Тогда
			СтрокаРасшифровки.ДокументОтгрузки = Неопределено;
		КонецЕсли; 
	
	КонецЦикла; 

	СформироватьСчетаФактуры(Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);
	
	Если Дата >= '20070101' и ОтразитьРасчетыСКонтрагентами Тогда
		ОтразитьРасчетыСКонтрагентами = Ложь;
	КонецЕсли; 
	
	УстановитьВидимость();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	Для Каждого СтрокаДополнительныеСведения Из ДополнительныеСведения Цикл
		
		РаботаСДиалогами.ПроверитьВладельцаСубконтоПодразделение(СтрокаДополнительныеСведения, 
		                                        глЗначениеПеременной("глТекущийПользователь"),
		                                        Организация, 
		                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
		                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
		                                                        "Субконто1", "Субконто2", "Субконто3", 
		                                                        СтрокаДополнительныеСведения.Субконто1, СтрокаДополнительныеСведения.Субконто2, СтрокаДополнительныеСведения.Субконто3));
	
	КонецЦикла;
															
КонецПроцедуры // ОрганизацияПриИзменении()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "ДанныеПоСФ".
//
Процедура ДополнительныеСведенияСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
	ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	
	Для каждого Колонка Из ЧисловыеКолонки Цикл
	    Если Найти(Колонка.Ключ,"СуммаБезНДС")>0 Тогда
			КолонкаНДС = СтрЗаменить(Колонка.Ключ,"СуммаБезНДС","НДС");
			Если не ЭлементыФормы.ДополнительныеСведения.Колонки.Найти(КолонкаНДС)= Неопределено Тогда
				СуммаНДС   = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные[Колонка.Ключ],
								Истина,
								Ложь,
								УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
			    ТекущиеДанные[КолонкаНДС] = СуммаНДС;
				Если ЧисловыеКолонки.Свойство(КолонкаНДС) тогда
					ТекСтрокаСФ[КолонкаНДС] = РассчитатьСуммуСобытия(ТекСтрокаСФ.КлючСтроки, КолонкаНДС);
				КонецЕсли;				
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла; 

КонецПроцедуры // ДанныеПоСФСтавкаНДСПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля договора
// в строке табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФДоговорНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям 
		Или ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Иначе
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;	
		
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.Контрагент, ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.ДоговорКонтрагента,
	                                        мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПриАктивизацииСтроки(Элемент)
	
	ОтобразитьДополнительныеСведения();
	//Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным И
	//	ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные <> Неопределено тогда
	//	ЭлементыФормы.ДополнительныеСведения.Колонки.ВалютнаяСуммаСНДС.ТолькоПросмотр = (ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.ВалютаАванса = мВалютаРегламентированногоУчета или НЕ ЗначениеЗаполнено(ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.ВалютаАванса));
	//КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачалоИзменения" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПередНачаломИзменения(Элемент, Отказ)
	
	Если ЧисловыеКолонки.Свойство(Элемент.ТекущаяКолонка.Имя) Тогда
		Предупреждение("Значение данного реквизита следует редактировать в таблице ""Дополнительные сведения"".");
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактированияСтроки" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда

		// Инициализируем значение "КлючСтроки" для установки связи данной таблицы с таблицей 
		// "ДанныеПоСФ".
		// Значение должно быть уникальным в пределах таблицы ДополнительныеСведения
		НеУстановлено = Истина;
		Кандидат = ДанныеПоСФ.Количество();

		Пока НеУстановлено Цикл
			Если ДанныеПоСФ.Найти(Кандидат, "КлючСтроки") = Неопределено Тогда
				// Уникальное значение ключа
				ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.КлючСтроки = Кандидат;
				НеУстановлено = Ложь;

			Иначе
				// Такое значение ключа уже использовано
				Кандидат = Кандидат + 1;

			КонецЕсли;

		КонецЦикла;
		
		ТекущаяСтрока = Элемент.ТекущиеДанные;
	    Для каждого Колонка Из ЧисловыеКолонки Цикл
			ТекущаяСтрока[Колонка.Ключ] = 0;
		КонецЦикла; 
		Если не Элемент.Колонки.Найти("СчетФактура")=Неопределено Тогда
			ТекущаяСтрока.СчетФактура = Неопределено;
		КонецЕсли; 
		Если не Элемент.Колонки.Найти("Сумма")=Неопределено Тогда
			ТекущаяСтрока.Сумма = Неопределено;
		КонецЕсли; 
		Если не Элемент.Колонки.Найти("СуммаВзаиморасчетов")=Неопределено Тогда
			ТекущаяСтрока.СуммаВзаиморасчетов = Неопределено;
		КонецЕсли; 

		ОтобразитьДополнительныеСведения();

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" 
// строки табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПередУдалением(Элемент, Отказ)
	
	// Необходимо очистить дополнительные сведения
	КлючПоиска = Новый Структура("КлючСтроки" , ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Значение);
	
	НайденныеСтроки = ДополнительныеСведения.НайтиСтроки(КлючПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		ДополнительныеСведения.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоСФПослеУдаления(Элемент)
	
	ОтобразитьДополнительныеСведения();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля счета затрат
// в строке табличной части "Дополнительные сведения".
//
Процедура ДополнительныеСведенияСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка =  БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // ДополнительныеСведенияСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля счета затрат
// в строке табличной части "Дополнительные сведения".
//
Процедура ДополнительныеСведенияСчетЗатратПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
								ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.Субконто1,
								ЭлементыФормы.ДополнительныеСведения.Колонки.Субконто1,
								ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.Субконто2,
								ЭлементыФормы.ДополнительныеСведения.Колонки.Субконто2,
								ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.Субконто3,
								ЭлементыФормы.ДополнительныеСведения.Колонки.Субконто3);
							
	РаботаСДиалогами.ПроверитьВладельцаСубконтоПодразделение(ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные, 
											глЗначениеПеременной("глТекущийПользователь"),
											Организация, 
											Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
															|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
															"Субконто1", "Субконто2", "Субконто3", 
															ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.Субконто1, ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.Субконто2, ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.Субконто3));
								
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля счета учета НДС
Процедура ДополнительныеСведенияСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка =  БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СуммаБезНДС
// в строке табличной части "Дополнительные сведения".
//
Процедура ДополнительныеСведенияСумма_ПриИзменении(ИзменяемаяКолонка)
	
	ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	
	Если ЧисловыеКолонки.Свойство(ИзменяемаяКолонка) Тогда
		ТекСтрокаСФ[ИзменяемаяКолонка] = РассчитатьСуммуСобытия(ТекСтрокаСФ.КлючСтроки, ИзменяемаяКолонка); 
	КонецЕсли; 
	
	Если не Найти(ИзменяемаяКолонка,"СуммаБезНДС") = 0 Тогда
		КолонкаНДС = СтрЗаменить(ИзменяемаяКолонка, "СуммаБезНДС", "НДС");
		
		Если Не ЭлементыФормы.ДополнительныеСведения.Колонки.Найти(КолонкаНДС) = Неопределено Тогда
		
			СуммаНДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные[ИзменяемаяКолонка],
								Истина,
								Ложь,
								УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.СтавкаНДС));
		
			ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные[КолонкаНДС] = СуммаНДС;
			
			Если ЧисловыеКолонки.Свойство(ИзменяемаяКолонка) Тогда
				//ТекСтрокаСФ[КолонкаНДС] = СуммаНДС;
				ДополнительныеСведенияСумма_ПриИзменении(КолонкаНДС);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования"
// строки табличной части "Дополнительные сведения".
//
Процедура ДополнительныеСведенияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.КлючСтроки = ЭлементыФормы.ДополнительныеСведения.ОтборСтрок.КлючСтроки.Значение;
		Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
			ТекущаяСтрока = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
			ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.СМРСобственнымиСилами;
			ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			ТекущаяСтрока.СчетУчетаНДС = ПланыСчетов.Хозрасчетный.НДСприСтроительствеОсновныхСредств;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоАвансамВыданным Тогда
			ТекущаяСтрока = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
			ТекущаяСтрока.ВидЦенности = Перечисления.ВидыЦенностей.АвансыВыданные;
			ТекущаяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
		КонецЕсли;
	КонецЕсли; 
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным тогда
		СтараяСуммаБезНДС = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.СуммаБезНДС;
		СтараяСуммаНДС = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные.НДС;
	КонецЕсли;
	
	УстановитьВыборВидаЦенности(Элемент.Колонки.ВидЦенности.ЭлементУправления);
	
КонецПроцедуры

Процедура ДанныеПоСФПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОтобразитьДополнительныеСведения(Элемент.ТекущиеДанные);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСПриИзменении(Элемент)
	
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
	
	//Определение валютной суммы
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ТД = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
		ТДСФ = ДанныеПоСФ.Найти(ТД.КлючСтроки, "КлючСтроки");
		Если ТДСФ.ВалютаАванса = мВалютаРегламентированногоУчета Тогда
			ТД.ВалютнаяСуммаСНДС = ТД.СуммаБезНДС + ТД.НДС;
		ИначеЕсли Не (НЕ ЗначениеЗаполнено(ТД.ВалютнаяСуммаСНДС) или (СтараяСуммаБезНДС+СтараяСуммаНДС)=0) Тогда
			ТД.ВалютнаяСуммаСНДС = ТД.ВалютнаяСуммаСНДС*(ТД.СуммаБезНДС + ТД.НДС)/(СтараяСуммаБезНДС+СтараяСуммаНДС);
		КонецЕсли;
		СтараяСуммаБезНДС = ТД.СуммаБезНДС;
		СтараяСуммаНДС = 	ТД.НДС;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДополнительныеСведенияНДСПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
	
	//Определение валютной суммы
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным тогда
		ТД = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
		Если не (НЕ ЗначениеЗаполнено(ТД.ВалютнаяСуммаСНДС) или (СтараяСуммаБезНДС+СтараяСуммаНДС)=0)Тогда
			ТД.ВалютнаяСуммаСНДС = ТД.ВалютнаяСуммаСНДС*(ТД.СуммаБезНДС + ТД.НДС)/(СтараяСуммаБезНДС+СтараяСуммаНДС);
		КонецЕсли;
		СтараяСуммаБезНДС = ТД.СуммаБезНДС;
		СтараяСуммаНДС = 	ТД.НДС;
	КонецЕсли; 

КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСОплатаПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДСОплатаПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДССтроительствоПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДССтроительствоПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСВведеноВЭксплуатациюПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДСВведеноВЭксплуатациюПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСВключеноВСтоимостьПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДСВключеноВСтоимостьПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДССтавка0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДССтавка0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСПредъявленоПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДСПредъявленоПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСПредъявлено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДСПредъявлено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСПодтверждено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСНеПодтверждено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДСПодтверждено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияНДСНеПодтверждено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияПослеУдаления(Элемент)
	ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	Для каждого Колонка Из ЧисловыеКолонки Цикл
	    ТекСтрокаСФ[Колонка.Ключ] = РассчитатьСуммуСобытия(ТекСтрокаСФ.КлючСтроки, Колонка.Ключ);
	КонецЦикла; 
КонецПроцедуры


Процедура ДополнительныеСведенияПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если НоваяСтрока и ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		СтруктураПоиска   = Новый Структура("КлючСтроки", ТекущаяСтрока.КлючСтроки);//,УдалитьСобытие, ТекСобытие
		Строки            = ДополнительныеСведения.НайтиСтроки(СтруктураПоиска);
		
		Если Строки.Количество() > 0 Тогда
			Для Каждого Строка Из Строки Цикл
				Если не (Строка.СтавкаНДС = ТекущаяСтрока.СтавкаНДС и
					Строка.ВидЦенности = ТекущаяСтрока.ВидЦенности)
					Тогда
					ОбщегоНазначения.СообщитьОбОшибке("При расшифровке записей по авансам ставка НДС и вид ценности во всех строках расшифровки должны совпадать!", Отказ,);	
					Прервать;
				КонецЕсли; 
			КонецЦикла;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

Процедура ДополнительныеСведенияСуммаБезНДСПредъявленоНеПодтверждено0ПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Функция ПараметрыНеобходимыеДляВыбораСубконто(Элемент)

	// Если тип выбираемого субконто - Партия, то создадим 
	// структуру дополнительных параметров.

	СписокПараметров = Новый Структура();
	ДанныеТекущейСтроки = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
	ДанныеТекущейСтрокиСФ 		= ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;

	СписокПараметров.Вставить("Дата", Дата);
	СписокПараметров.Вставить("Контрагент",   ДанныеТекущейСтрокиСФ.Контрагент);
	СписокПараметров.Вставить("ДоговорКонтрагента",   ДанныеТекущейСтрокиСФ.ДоговорКонтрагента);
		
	Возврат СписокПараметров;

КонецФункции // ПараметрыНеобходимыеДляВыбораСубконто()

// Процедура - обработчик события "НачалоВыбора" поля ввода Субконто
Процедура ДополнительныеСведенияСубконто1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент);
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

Процедура ДополнительныеСведенияСубконто2НачалоВыбора(Элемент, СтандартнаяОбработка)
	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент);
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

Процедура ДополнительныеСведенияСубконто3НачалоВыбора(Элемент, СтандартнаяОбработка)
	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент);
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
КонецПроцедуры

Процедура ДополнительныеСведенияДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;

	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента,КонецПериода,НачалоПериода", Организация, ТекущаяСтрокаСФ.Контрагент, ТекущаяСтрокаСФ.ДоговорКонтрагента,Дата,'00010101');
	
  	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков",ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета", ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям,0,1));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Элемент.ТипЗначения);

КонецПроцедуры

Процедура ДополнительныеСведенияДокументОтгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущаяСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	Отбор = Новый Структура("Организация", Организация);

	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ДополнительныеСведения");

КонецПроцедуры

Процедура ДанныеПоСФДоговорКонтрагентаПриИзменении(Элемент)
	ПриИзмененииДоговора();
КонецПроцедуры

Процедура ДанныеПоСФСуммаПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетов();
КонецПроцедуры

Процедура ДанныеПоСФКурсВзаиморасчетовПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетов();
КонецПроцедуры

Процедура ДанныеПоСФСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;

	Отбор = Новый Структура("Организация, Контрагент, ДокументыПоДоговоруКонтрагента", Организация, ТекущиеДанные.Контрагент, ТекущиеДанные.ДоговорКонтрагента);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ДанныеПоСФ");
	
КонецПроцедуры

Процедура ОтразитьРасчетыСКонтрагентамиПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

Процедура ДополнительныеСведенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекСтрокаСФ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	Для каждого Колонка Из ЧисловыеКолонки Цикл
	    ТекСтрокаСФ[Колонка.Ключ] = РассчитатьСуммуСобытия(ТекСтрокаСФ.КлючСтроки, Колонка.Ключ);
	КонецЦикла; 
	
КонецПроцедуры

Процедура ДополнительныеСведенияВалютнаяСуммаСНДСПриИзменении(Элемент)
	ДополнительныеСведенияСумма_ПриИзменении(ЭлементыФормы.ДополнительныеСведения.ТекущаяКолонка.Имя);
КонецПроцедуры

Процедура ДополнительныеСведенияСтавкаНДСНеПодтверждена0ПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
	
	СуммаНеПодтверждено = ТекущиеДанные.СуммаБезНДСНеПодтверждено0 + ТекущиеДанные.НДСНеПодтверждено0;
	
	Если СуммаНеПодтверждено = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.НДСНеПодтверждено0 = УчетНДС.РассчитатьСуммуНДС(СуммаНеПодтверждено, Истина, Истина, УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДСНеПодтверждена0));
	ТекущиеДанные.СуммаБезНДСНеПодтверждено0 = СуммаНеПодтверждено - ТекущиеДанные.НДСНеПодтверждено0;
	
КонецПроцедуры

Процедура ДополнительныеСведенияНоменклатураПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		ВидДокумента = "Приобретение";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		ВидДокумента = "Реализация";
	Иначе
		ВидДокумента = "";
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект, ВидДокумента); 
	
КонецПроцедуры

Процедура ДополнительныеСведенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ОбъектСтроительства) Тогда
		Если ТипЗнч(ДанныеСтроки.ОбъектСтроительства) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
			Текст = "Объект незавершенного строительства";
		ИначеЕсли ТипЗнч(ДанныеСтроки.ОбъектСтроительства) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			Текст = "Основное средство";
		ИначеЕсли ТипЗнч(ДанныеСтроки.ОбъектСтроительства) = Тип("СправочникСсылка.Номенклатура") Тогда
			Текст = "Оборудование";
		ИначеЕсли ТипЗнч(ДанныеСтроки.ОбъектСтроительства) = Тип("СправочникСсылка.НематериальныеАктивы") Тогда
			Текст = "Нематериальный актив";
		КонецЕсли;
	Иначе
		Текст = "Не выбран объект Вн.А.";
	КонецЕсли;
	ОформлениеСтроки.Ячейки.ВидВнеоборотногоАктива.УстановитьТекст(Текст);
	
КонецПроцедуры

Процедура ДополнительныеСведенияОбъектСтроительстваНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
		Элемент.ОграничениеТипа = мОграничениеТипаВНАдляСМР;
		//ТекущаяСтрока = ЭлементыФормы.ДополнительныеСведения.ТекущиеДанные;
		//Если ТипЗнч(ТекущаяСтрока.ОбъектСтроительства) <> Тип("СправочникСсылка.ОсновныеСредства") Тогда
		//	ТекущаяСтрока.ОбъектСтроительства = Справочники.ОсновныеСредства.ПустаяСсылка();
		//КонецЕсли;
	Иначе
		Элемент.ОграничениеТипа.Типы().Очистить();
		//НачалоВыбораЗначенияСправочникаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Неопределено, "ДополнительныеСведения");
	КонецЕсли;
	
КонецПроцедуры


// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "Расчеты с контрагентами"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоСМРдляСобственногоПотребления Тогда
			ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные.РасчетыСБюджетом 					= Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Элемент.ТекущиеДанные.Аванс = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "Контрагент"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиКонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаРасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "ДоговорКонтрагента"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговораРасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" колонки "ДоговорКонтрагента"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Иначе
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	КонецЕсли;	
		
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные.Контрагент, 
											ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные.ДоговорКонтрагента,
											мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "КурсВзаиморасчетов"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиКурсВзаиморасчетовПриИзменении(Элемент)
	
	ПересчитатьВалютнуюСуммуВзаиморасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "СуммаВзаиморасчетов"
// табличного поля "Расчеты с контрагентами"
//
Процедура РасчетыСКонтрагентамиСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПересчитатьВалютнуюСуммуВзаиморасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля "РасчетыСКонтрагентамиАвансы"
//
Процедура РасчетыСКонтрагентамиАвансыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Элемент.ТекущиеДанные.Аванс = Истина;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "Контрагент"
// табличного поля "РасчетыСКонтрагентамиАвансы"
//
Процедура РасчетыСКонтрагентамиАвансыКонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаРасчетов(ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "ДоговорКонтрагента"
// табличного поля "РасчетыСКонтрагентамиАвансы"
//
Процедура РасчетыСКонтрагентамиАвансыДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговораРасчетов(ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" колонки "ДоговорКонтрагента"
// табличного поля "РасчетыСКонтрагентамиАвансы"
//
Процедура РасчетыСКонтрагентамиАвансыДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Иначе
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	КонецЕсли;	
		
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные.Контрагент, 
											ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные.ДоговорКонтрагента,
											мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "КурсВзаиморасчетов"
// табличного поля "РасчетыСКонтрагентамиАвансы"
//
Процедура РасчетыСКонтрагентамиАвансыКурсВзаиморасчетовПриИзменении(Элемент)
	
	ПересчитатьВалютнуюСуммуВзаиморасчетов(ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "СуммаВзаиморасчетов"
// табличного поля "РасчетыСКонтрагентамиАвансы"
//
Процедура РасчетыСКонтрагентамиАвансыСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПересчитатьВалютнуюСуммуВзаиморасчетов(ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" колонки "ДокументОплаты"
// табличного поля "РасчетыСКонтрагентамиАвансы"
//
Процедура РасчетыСКонтрагентамиАвансыДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;

	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, ТекущаяСтрока.Контрагент, ТекущаяСтрока.ДоговорКонтрагента, Дата, '00010101');
	
  	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета", ?(ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям, 0, 1));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Элемент.ТипЗначения);
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ТекущиеДанные.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = ТекущиеДанные.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = ТекущиеДанные.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		
		ТекущиеДанные.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		
		РасчетыСКонтрагентамиКурсВзаиморасчетовПриИзменении(Элемент);
		
	КонецЕсли;

КонецПроцедуры

Процедура РасчетыСКонтрагентамиАвансыКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ТекущиеДанные.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = ТекущиеДанные.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = ТекущиеДанные.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		
		ТекущиеДанные.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		
		РасчетыСКонтрагентамиКурсВзаиморасчетовПриИзменении(Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииКонтрагентаРасчетов(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Контрагент <> СтрокаТабличнойЧасти.ДоговорКонтрагента.Владелец Тогда
		
		СтрокаТабличнойЧасти.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииДоговораРасчетов(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДоговорКонтрагента = СтрокаТабличнойЧасти.ДоговорКонтрагента;

	Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(ДоговорКонтрагента.ВалютаВзаиморасчетов) Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Строка "+СтрокаТабличнойЧасти.НомерСтроки+": не заполнена валюта взаиморасчетов в договоре """+строка(ДоговорКонтрагента)+"""!");
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.КурсВзаиморасчетов) или не СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		СтруктураКурсаВзаиморасчетов 				= МодульВалютногоУчета.ПолучитьКурсВалюты(ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);
		СтрокаТабличнойЧасти.КурсВзаиморасчетов     = ?(НЕ ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Курс), 1, СтруктураКурсаВзаиморасчетов.Курс);
		СтрокаТабличнойЧасти.КратностьВзаиморасчетов= ?(НЕ ЗначениеЗаполнено(СтруктураКурсаВзаиморасчетов.Кратность), 1, СтруктураКурсаВзаиморасчетов.Кратность);
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	ПересчитатьВалютнуюСуммуВзаиморасчетов(ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные);
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, СтрокаТабличнойЧасти.Контрагент, ДоговорКонтрагента);

	Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
		Если СтрокаТабличнойЧасти.Аванс Тогда
		    СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетАвансов;
		Иначе	
			СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетов;
		КонецЕсли; 
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
		СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетАвансовПокупателя;
	ИначеЕсли  ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда	
		СтрокаТабличнойЧасти.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПересчитатьВалютнуюСуммуВзаиморасчетов(СтрокаТабличнойЧасти);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ВалютнаяСуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаВзаиморасчетов, 
									мВалютаРегламентированногоУчета,
	                                СтрокаТабличнойЧасти.ВалютаВзаиморасчетов, 
	                                1, СтрокаТабличнойЧасти.КурсВзаиморасчетов,
	                                1, СтрокаТабличнойЧасти.КратностьВзаиморасчетов);

КонецПроцедуры

Процедура ДанныеПоСФКонтрагентПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	
	Если СтрокаТЧ.ДоговорКонтрагента.Владелец <> СтрокаТЧ.Контрагент Тогда
		СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиАвансыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные.Аванс = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РасчетыСКонтрагентамиСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РасчетыСКонтрагентами.ТекущиеДанные;
	ПараметрыВыбора = УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки();
	Попытка
		Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.ДоговорКонтрагента, СтрокаТабличнойЧасти.Сделка, СтандартнаяОбработка, 
			                     "Приход", "ЗаказПоставщику");
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСНеПолученныйОтПокупателей Тогда
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.ДоговорКонтрагента, СтрокаТабличнойЧасти.Сделка, СтандартнаяОбработка, 
			                     "Расход", "ЗаказПокупателя");
		Иначе
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.ДоговорКонтрагента, СтрокаТабличнойЧасти.Сделка, СтандартнаяОбработка, 
			                     "Приход", "ЗаказПокупателя");
		КонецЕсли;
	Исключение
	КонецПопытки;
						 
КонецПроцедуры

Процедура РасчетыСКонтрагентамиАвансыСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РасчетыСКонтрагентамиАвансы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбора = УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки();
	Попытка
		Если ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСПоПриобретеннымЦенностям Тогда
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.ДоговорКонтрагента, СтрокаТабличнойЧасти.Сделка, СтандартнаяОбработка, 
			                     "Расход", "ЗаказПоставщику");
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачОстатковНДС.НДСпоАвансамПолученным Тогда
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.ДоговорКонтрагента, СтрокаТабличнойЧасти.Сделка, СтандартнаяОбработка, 
			                     "Приход", "ЗаказПокупателя");
		Иначе
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.ДоговорКонтрагента, СтрокаТабличнойЧасти.Сделка, СтандартнаяОбработка, 
			                     "Расход", "ЗаказПокупателя");
		КонецЕсли;
	Исключение
	КонецПопытки;

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры


ЧисловыеКолонки = новый Структура();

Для каждого Колонка из ЭлементыФормы.ДанныеПоСФ.Колонки Цикл
	Если Колонка.Имя = "КлючСтроки" или Колонка.Имя = "НомерСтроки" Тогда
		Продолжить;
	ИначеЕсли не ЭлементыФормы.ДополнительныеСведения.Колонки.Найти(Колонка.Имя)= Неопределено Тогда	
		Если ЭлементыФормы.ДополнительныеСведения.Колонки[Колонка.Имя].ЭлементУправления.ТипЗначения.Типы()[0] = Тип("Число")  Тогда
			ЧисловыеКолонки.Вставить(Колонка.Имя);
		КонецЕсли;
	КонецЕсли;
КонецЦикла; 

СтараяСуммаБезНДС = 0;
СтараяСуммаНДС 	  = 0;

мОграничениеТипаВНАдляСМР = Новый ОписаниеТипов("СправочникСсылка.ОсновныеСредства, СправочникСсылка.ОбъектыСтроительства")