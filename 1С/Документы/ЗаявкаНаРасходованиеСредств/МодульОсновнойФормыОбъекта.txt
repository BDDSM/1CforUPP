////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

Перем мТекущееРасширениеФайла;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем СтараяВалютаДокумента;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасшифровкаПлатежа,ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РазмещениеЗаявки,ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Определение необходимости устанавливать отметку незаполненного для сделки
//
// Параметры
//  ТекущаяСтрокаПлатежа  – СтрокаТабличнойЧасти – Строка табличной части, для которой определяется
//                                                 необходимость отметки незаполненного значения
//
// Возвращаемое значение:
//   Булево   – Истина = отмечать, Ложь = не отмечать
//
Функция ПолучитьОтметкуНезаполненногоДляСделки(ТекущаяСтрокаПлатежа)

	Отметка = Ложь;

	ДоговорКонтрагента = ТекущаяСтрокаПлатежа.ДоговорКонтрагента;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			Отметка = НЕ ЗначениеЗаполнено(ТекущаяСтрокаПлатежа.Сделка);
		КонецЕсли;
	КонецЕсли;

	Возврат Отметка;

КонецФункции // ПолучитьОтметкуНезаполненногоДляСделки()

// Процедура устанавливает автоотметку незаполненного для тех реквизитов,
// обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	Автоотметка = ПолучитьОтметкуНезаполненногоДляСделки(СтрокаПлатеж);
	
	Если ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.Сделка.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(СтрокаПлатеж.Сделка) Тогда
		ЭлементыФормы.Сделка.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотментку()

Процедура УправлениеДоступностьюНоменклатуры()

	Если НЕ ЗначениеЗаполнено(СтатьяОборотов) Тогда
		ЭлементыФормы.Номенклатура.Доступность = Ложь;
	Иначе
		Если СтатьяОборотов.РазделениеПоНоменклатуре Тогда
			ЭлементыФормы.Номенклатура.Доступность = Истина;
		Иначе
			ЭлементыФормы.Номенклатура.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли; 

КонецПроцедуры

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СтрокаПлатеж.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Неопределено; 

	// Надо поменять валюту и курс взаиморасчетов
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(мТекущаяВалютаВзаиморасчетов, Дата);
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов();
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаПлатеж.Проект=СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;
	
	УстановитьАвтоотметку();
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	// Запомним предыдущую статью ДДС
	Если СтрокаПлатеж <> Неопределено Тогда
		ПредыдущаяСтатьяДДС = СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
	Иначе
		ПредыдущаяСтатьяДДС = Неопределено;
	КонецЕсли;

	РасшифровкаПлатежа.Очистить();
	
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	
	РеквизитыДоговора = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Контрагент.ОсновнойДоговорКонтрагента, "ВидДоговора,Организация");
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.Контрагент) Тогда 
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
	ИначеЕсли УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ВидОперации).НайтиПоЗначению(РеквизитыДоговора.ВидДоговора) <> Неопределено Тогда
		Если Организация.Пустая() Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			Организация = РеквизитыДоговора.Организация;
		ИначеЕсли РеквизитыДоговора.Организация.Пустая()
			ИЛИ РеквизитыДоговора.Организация = Организация Тогда
			СтрокаПлатеж.ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
		КонецЕсли;
	КонецЕсли;

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	// Восстановим статью ДДС, если в договоре выбрана по умолчанию своя, то в ПриИзмененииДоговора()
	// будет она заменит текущую.
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = ПредыдущаяСтатьяДДС;
		
КонецПроцедуры // ПриИзмененииКонтрагента

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=СтрокаПлатеж;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику
		ИЛИ ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		ВалютаВзаиморасчетов=ВалютаВзаиморасчетовПодотчетника;
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		СуммаДокумента=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры // РассчитатьСуммуПлатежа()

//Процедура рассчитывает курс взаиморасчетов
//
Процедура РассчитатьКурсВзаиморасчетов()
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()
	
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		ВалютаВзаиморасчетов=ВалютаВзаиморасчетовПодотчетника;
	ИначеЕсли ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
			
	ИначеЕсли (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (КратностьДокумента <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
			                                                  ВалютаВзаиморасчетов,
			                                                  КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
															  КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");


КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Очищает реквизиты, относящиеся к платежам: при очистке валюты документа они становятся неопределенными.
//
Процедура ПриОчисткеВалютыДокумента()
	
		СуммаДокумента=0;
		КурсДокумента=0;
		КратностьДокумента=0;
		СтараяВалютаДокумента=Справочники.Валюты.ПустаяСсылка();
		
		Для Каждого Платеж Из РасшифровкаПлатежа Цикл
			Платеж.СуммаПлатежа=0;
		КонецЦикла;
		
		БанковскийСчетКасса=Неопределено;
		ВключатьВПлатежныйКалендарь=Ложь;
		
		РазмещениеЗаявки.Очистить();

		УстановитьВидимость();
	
КонецПроцедуры // ПриОчисткеВалютыДокумента()

Процедура ЗаполнитьРазмещение(Отказ)
	
	ТекстУсловия="";
	
	Если ВалютаДокумента.Пустая() Тогда
		Сообщить("Не указана валюта заявки.");
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Если ФормаОплаты.Пустая() Тогда
		Сообщить("Не указана форма оплаты.");
		Отказ=Истина;
		Возврат;
	КонецЕсли;
	
	Запрос=Новый Запрос;
	
	ТекстУсловияОстатки="ВидДенежныхСредств=&ФормаОплаты И БанковскийСчетКасса.ВалютаДенежныхСредств=&ВалютаДокумента";
	ТекстУсловияПоступления="ДокументПланирования.ФормаОплаты=&ФормаОплаты И ДокументПланирования.ВалютаДокумента=&ВалютаДокумента";
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные И Не Организация.Пустая() Тогда
		ТекстУсловияОстатки=ТекстУсловияОстатки+" И БанковскийСчетКасса.Владелец=&Организация";
		ТекстУсловияПоступления=ТекстУсловияПоступления+" И  ДокументПланирования.Организация=&Организация";
		Запрос.УстановитьПараметр("Организация",Организация);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ФормаОплаты",ФормаОплаты );
	Запрос.УстановитьПараметр("ВалютаДокумента",ВалютаДокумента);
	Запрос.УстановитьПараметр("ДатаРасхода",КонецДня(ДатаРасхода));
	Запрос.УстановитьПараметр("ТекущаяЗаявка",Ссылка);
	
	Запрос.УстановитьПараметр("ПредпочтительноеРазмещение",БанковскийСчетКасса);
	
	ТекстЗапросаОстатки="ВЫБРАТЬ
	|	ДенежныеСредстваОстатки.СуммаОстаток 
	|	- ВЫБОР КОГДА НЕ((ДенежныеСредстваВРезервеОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|		ТОГДА ДенежныеСредстваВРезервеОстатки.СуммаОстаток 
	|		ИНАЧЕ 0 КОНЕЦ 
	|	- ВЫБОР КОГДА НЕ((ДенежныеСредстваКСписаниюОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|		ТОГДА ДенежныеСредстваКСписаниюОстатки.СуммаОстаток 
	|		ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток,
	|	ДенежныеСредстваОстатки.БанковскийСчетКасса КАК МестоРазмещения,
	|	0                                                КАК СортировкаРазмещение,
	|	ВЫБОР
	|		КОГДА ДенежныеСредстваОстатки.БанковскийСчетКасса = &ПредпочтительноеРазмещение ТОГДА
	|			0
	|		ИНАЧЕ
	|			1
	|	КОНЕЦ                                            КАК СортировкаРезерв,
	|	NULL                                             КАК ДатаПоступления
	|	ИЗ
	|	РегистрНакопления.ДенежныеСредства.Остатки(&ДатаРасхода, "+ТекстУсловияОстатки+") КАК ДенежныеСредстваОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваВРезерве.Остатки(&ДатаРасхода, "+ТекстУсловияОстатки+" И НЕ(ДокументРезервирования = &ТекущаяЗаявка)) КАК ДенежныеСредстваВРезервеОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваВРезервеОстатки.БанковскийСчетКасса
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ДенежныеСредстваКСписанию.Остатки(&ДатаРасхода, "+ТекстУсловияОстатки+") КАК ДенежныеСредстваКСписаниюОстатки
	|		ПО ДенежныеСредстваОстатки.БанковскийСчетКасса = ДенежныеСредстваКСписаниюОстатки.БанковскийСчетКасса";
	
	ТекстЗапросаРазмещение="ВЫБРАТЬ
	|	ПланируемыеПоступленияДенежныхСредствОстатки.СуммаОстаток 
	|	- ВЫБОР КОГДА НЕ((РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток) ЕСТЬ NULL ) 
	|		ТОГДА РазмещениеЗаявокНаРасходованиеСредствОстатки.СуммаОстаток 
	|		ИНАЧЕ 0 КОНЕЦ КАК СвободныйОстаток,
	|	ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования КАК МестоРазмещения,
	|	1                                                        КАК СортировкаРазмещение,
	|	1                                                        КАК СортировкаРезерв,
	|	ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования.ДатаПоступления КАК ДатаПоступления
	|ИЗ
	|	РегистрНакопления.ПланируемыеПоступленияДенежныхСредств.Остатки(&ДатаРасхода,"+ТекстУсловияПоступления+") КАК ПланируемыеПоступленияДенежныхСредствОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.РазмещениеЗаявокНаРасходованиеСредств.Остатки(, НЕ ДокументРезервирования=&ТекущаяЗаявка) КАК РазмещениеЗаявокНаРасходованиеСредствОстатки
	|		ПО ПланируемыеПоступленияДенежныхСредствОстатки.ДокументПланирования = РазмещениеЗаявокНаРасходованиеСредствОстатки.ДокументПланирования";
			
	Если АвтоРазмещениеПоЗаявке И АвтоРезервированиеПоЗаявке Тогда 
		ТекстЗапроса=ТекстЗапросаОстатки+"
		|ОБЪЕДИНИТЬ ВСЕ
		|"+ТекстЗапросаРазмещение+"
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаРазмещение,       // Сначала на местах хранения, потом в планируемых поступлениях
		|	СортировкаРезерв,            // Сначала предпочтительное место хранения, затем остальные
		|	ДатаПоступления УБЫВ        // В порядке убывания даты поступления	";

	ИначеЕсли АвтоРазмещениеПоЗаявке Тогда
		ТекстЗапроса=ТекстЗапросаРазмещение+"
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	ДатаПоступления УБЫВ        // В порядке убывания даты поступления	";
	ИначеЕсли АвтоРезервированиеПоЗаявке Тогда
		ТекстЗапроса=ТекстЗапросаОстатки+"
		|УПОРЯДОЧИТЬ ПО                 // Определяет стратегию авторезервирования и авторазмещения
		|	СортировкаРезерв             // Сначала предпочтительное место хранения, затем остальные";
		
	КонецЕсли;
	
	Запрос.Текст=ТекстЗапроса;
	
	Таблица=Запрос.Выполнить().Выгрузить();
	
	РазмещеноВручную=РазмещениеЗаявки.Итог("СуммаПлатежа");
	
	ОсталосьРазместить=СуммаДокумента-РазмещеноВручную;
	
	Для Каждого Строка Из Таблица Цикл
		
		Если Строка.СвободныйОстаток<=0 Тогда
			Продолжить;	
		ИначеЕсли Строка.СвободныйОстаток>=ОсталосьРазместить Тогда
			
			Размещение=РазмещениеЗаявки.Добавить();
			Размещение.МестоРазмещения=Строка.МестоРазмещения;
			Размещение.СуммаПлатежа=ОсталосьРазместить;
			
			Прервать;
			
		Иначе
			
			Размещение=РазмещениеЗаявки.Добавить();
			Размещение.МестоРазмещения=Строка.МестоРазмещения;
			Размещение.СуммаПлатежа=Строка.СвободныйОстаток;
			
			ОсталосьРазместить=ОсталосьРазместить-Размещение.СуммаПлатежа;
			
		КонецЕсли;
		
	КонецЦикла;
		

КонецПроцедуры // ЗаполнитьРазмещение()

Процедура НачалоВыбораРазмещенияЗаявки(ФормаДокумента, ЭлементФормы, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Документы.ПланируемоеПоступлениеДенежныхСредств.Имя, Метаданные.Документы.ПланируемоеПоступлениеДенежныхСредств.Синоним);
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		СписокТипов.Добавить(Метаданные.Справочники.БанковскиеСчета.Имя, Метаданные.Справочники.БанковскиеСчета. Синоним);
	Иначе
		СписокТипов.Добавить(Метаданные.Справочники.Кассы.Имя, Метаданные.Справочники.Кассы. Синоним);
	КонецЕсли;

	ВыбранныйЭлемент = ФормаДокумента.ВыбратьИзСписка(СписокТипов,ЭлементФормы);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = Метаданные.Документы.ПланируемоеПоступлениеДенежныхСредств.Имя Тогда
		
		СтандартнаяОбработка=Ложь;
				
		СтруктураПараметров=Новый Структура;
		СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
		СтруктураПараметров.Вставить("ФормаОплаты"					,ФормаОплаты);
		СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
		СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
		СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
		СтруктураПараметров.Вставить("ДатаДок"						,ДатаРасхода);
		СтруктураПараметров.Вставить("ИмяРегистра"					,"ПланируемыеПоступленияДенежныхСредств");
		СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
		СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
		СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
		СтруктураПараметров.Вставить("ВидОперации"					,);
		СтруктураПараметров.Вставить("БанковскийСчетКасса"			,БанковскийСчетКасса);
		СтруктураПараметров.Вставить("Организация"					,Организация);
		СтруктураПараметров.Вставить("Проект"						,);
		СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",);
		СтруктураПараметров.Вставить("Контрагент"					,);
		СтруктураПараметров.Вставить("ДоговорКонтрагента"			,);
		СтруктураПараметров.Вставить("Сделка"						,);
		
		УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
		
	Иначе

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Справочники[ВыбранныйЭлемент.Значение].ПолучитьФормуВыбора(,ЭлементФормы,);
		
		ФормаВыбора.Отбор.ВалютаДенежныхСредств.Значение=ВалютаДокумента;
		ФормаВыбора.Отбор.ВалютаДенежныхСредств.Использование=Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаДенежныхСредств.Доступность=Ложь;
		
		Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные И ЗначениеЗаполнено(Организация)Тогда
			
			ФормаВыбора.Отбор.Владелец.Значение=Организация;
			ФормаВыбора.Отбор.Владелец.Использование=Истина;
		    ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность=Ложь;
			
		КонецЕсли;
			
			ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
		
		Если ЗначениеЗаполнено(ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.МестоРазмещения)
			И ТипЗнч(ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.МестоРазмещения)=Тип("СправочникСсылка."+ВыбранныйЭлемент.Значение) Тогда
			
			ФормаВыбора.ПараметрТекущаяСтрока=ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.МестоРазмещения;
			
		КонецЕсли;
		
		ФормаВыбора.Открыть();
		
	КонецЕсли;
		
КонецПроцедуры // НачалоВыбораРазмещенияЗаявки()

Процедура РассчитатьСуммуПлатежаТаблица()
	
	Для Каждого Строка Из РасшифровкаПлатежа Цикл
		
		Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			ВалютаВзаиморасчетов=ВалютаВзаиморасчетовПодотчетника;
		ИначеЕсли ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами Тогда
			ВалютаВзаиморасчетов= Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Иначе
			Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
			Продолжить;
		КонецЕсли;
		
		Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
	
		ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
			Строка.СуммаПлатежа=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
			ВалютаДокумента,
			Строка.КурсВзаиморасчетов,КурсДокумента,
			Строка.КратностьВзаиморасчетов,КратностьДокумента);	
		Иначе
			Строка.СуммаПлатежа = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	СтрокаПлатеж=РасшифровкаПлатежа[0];
	
КонецПроцедуры // РассчитатьСуммуПлатежаТаблица()


Процедура РасшифровкаПлатежаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Отметка = ПолучитьОтметкуНезаполненногоДляСделки(ДанныеСтроки);

	Если ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного <> Отметка Тогда
		ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = Отметка;
	КонецЕсли;

КонецПроцедуры

Процедура РасшифровкаПлатежаПередНачаломДобавления(Элемент, Отказ, Копирование)

	ЭлементыФормы.РасшифровкаПлатежа.Колонки.Сделка.ЭлементУправления.АвтоВыборНезаполненного = ПолучитьОтметкуНезаполненногоДляСделки(ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные);

КонецПроцедуры

Процедура РасшифровкаПлатежаПередНачаломИзменения(Элемент, Отказ)

	ЭлементыФормы.РасшифровкаПлатежа.Колонки.Сделка.ЭлементУправления.АвтоВыборНезаполненного = ПолучитьОтметкуНезаполненногоДляСделки(ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные);

КонецПроцедуры


Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)
	
	Если РазмещениеЗаявки.Итог("СуммаПлатежа")=СуммаДокумента Тогда
		Сообщить("Заявка размещена полностью.");
		Возврат;
	КонецЕсли;
	
	Если АвтоРазмещениеПоЗаявке ИЛИ АвтоРезервированиеПоЗаявке Тогда
				
		Если НЕ ЭтоНовый() Тогда
			
			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;

		Отказ = Ложь;

		// Очистим записи документа по размещению, если он был ранее проведен
		Если Проведен Тогда
			НачатьТранзакцию();

			НаборОстаткиРезерв = РегистрыНакопления.ДенежныеСредстваВРезерве.СоздатьНаборЗаписей();
			НаборОстаткиРезерв.Отбор.Регистратор.Установить(Ссылка);
			НаборОстаткиРезерв.Записать();
			НаборПланируемоеПоступление  = РегистрыНакопления.РазмещениеЗаявокНаРасходованиеСредств.СоздатьНаборЗаписей();
			НаборПланируемоеПоступление.Отбор.Регистратор.Установить(Ссылка);
			НаборПланируемоеПоступление.Записать();
		КонецЕсли;

		ЗаполнитьРазмещение(Отказ);

		Если Проведен Тогда
			ОтменитьТранзакцию();
		КонецЕсли;

		// Если заполнить удалось, то запись документа с проведением.
		Если Не Отказ Тогда
			РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);
		КонецЕсли;

	Иначе
		Предупреждение("Для режима заполнения с проведением требуется установка флагов ""Авторазмещение"" или ""Авторезервирование""");
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеЗаполнитьИПровести()

// Процедура - обработчик события "Файлы".
//
Процедура ДействияФормыФайлы(Кнопка)
	
	Если Ссылка.Пустая() Тогда
		Предупреждение("Сначала запишите документ.");
		Возврат;
	КонецЕсли;

	ФормаФайлов = Справочники.ХранилищеДополнительнойИнформации.ПолучитьФорму("ФормаСпискаФайловИИзображений", ЭтаФорма);
	
	ФормаФайлов.Изображения.Отбор.Объект.Использование                               = Истина;
	ФормаФайлов.Изображения.Отбор.Объект.Значение                                    = Ссылка;
	ФормаФайлов.ЭлементыФормы.Изображения.НастройкаОтбора.Объект.Доступность         = Ложь;
	ФормаФайлов.ЭлементыФормы.Изображения.Колонки.Объект.Видимость                   = Ложь;

	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Использование                       = Истина;
	ФормаФайлов.ДополнительныеФайлы.Отбор.Объект.Значение                            = Ссылка;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.НастройкаОтбора.Объект.Доступность = Ложь;
	ФормаФайлов.ЭлементыФормы.ДополнительныеФайлы.Колонки.Объект.Видимость           = Ложь;

	ОбязательныеОтборы = Новый Структура;
	ОбязательныеОтборы.Вставить("Объект",Ссылка);

	ФормаФайлов.ОбязательныеОтборы = ОбязательныеОтборы;
	
	ФормаФайлов.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость ренквизитов формы
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Для Индекс=1 по ЭлементыФормы.ОсновнаяПанель.Страницы.Количество() Цикл
		
		ЭлементыФормы.ОсновнаяПанель.Страницы[Индекс-1].Видимость=Истина;
		
	КонецЦикла;
	
		//Доступность поля "Док. расчетов:"
	Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументРасчетовСКонтрагентом.Доступность = Истина;
		ЭлементыФормы.ДокументРасчетовСКонтрагентом.Доступность                            = Истина;
	Иначе
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументРасчетовСКонтрагентом.Доступность = Ложь;
		ЭлементыФормы.ДокументРасчетовСКонтрагентом.Доступность                            = Ложь;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаПодотчетнику"];
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Заголовок="Выдача подотчетнику";
		ЭлементыФормы.НадписьФизЛицо.Заголовок="Подотчетник";
		ЭлементыФормы.НадписьДокумент.Заголовок="Авансовый отчет";
	
		ЭлементыФормы.ОсновнаяПанель.Страницы["Расчеты"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаКассеККМ"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Прочие"].Видимость=Ложь;
		
		ЭлементыФормы.КонтрагентОперации.Доступность=Истина;
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаКассеККМ"];
		
		ЭлементыФормы.ОсновнаяПанель.Страницы["Расчеты"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаПодотчетнику"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Прочие"].Видимость=Ложь;
		
		ЭлементыФормы.КонтрагентОперации.Доступность=Истина;
        ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["Расчеты"];
		
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаКассеККМ"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаПодотчетнику"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Прочие"].Видимость=Ложь;
		
		ЭлементыФормы.КонтрагентОперации.Доступность=Ложь;
				
		Если Список Тогда
			ЭлементыФормы.ПанельПлатежи.ТекущаяСтраница=ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"];
		Иначе
			ЭлементыФормы.ПанельПлатежи.ТекущаяСтраница=ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоОднойСделке"];
		КонецЕсли;
				
		ЭлементыФормы.Сделка.Доступность=Истина;
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Истина;
		ЭлементыФормы.Список.Видимость = Истина;
		ЭлементыФормы.Список1.Видимость = Истина;
		
		Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами Тогда
			ЭлементыФормы.Сделка.Доступность=Ложь;
		Иначе
			ЭлементыФормы.Сделка.Доступность=Истина;
		КонецЕсли;
		
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["Расчеты"];
		
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаКассеККМ"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаПодотчетнику"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Прочие"].Видимость=Ложь;
		
		ЭлементыФормы.КонтрагентОперации.Доступность=Ложь;
			
		ЭлементыФормы.ПанельПлатежи.ТекущаяСтраница=ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоОднойСделке"];
				 		
		ЭлементыФормы.Сделка.Доступность=Ложь;
		
   		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
				
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаПодотчетнику"];
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Заголовок="Выдача займа работнику";
		ЭлементыФормы.НадписьФизЛицо.Заголовок="Работник";
		ЭлементыФормы.НадписьДокумент.Заголовок="Документ займа";
	
		ЭлементыФормы.ОсновнаяПанель.Страницы["Расчеты"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаКассеККМ"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Прочие"].Видимость=Ложь;
		
		ЭлементыФормы.КонтрагентОперации.Доступность=Истина;
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП
			ИЛИ ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога
			ИЛИ ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств Тогда
			
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы["Прочие"];
		
		ЭлементыФормы.ОсновнаяПанель.Страницы["Расчеты"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаПодотчетнику"].Видимость=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["ВыдачаКассеККМ"].Видимость=Ложь;

		ЭлементыФормы.КонтрагентОперации.Доступность=Ложь;
        ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
			
	КонецЕсли;
	
	Если НЕ БанковскийСчетКасса=Неопределено И НЕ БанковскийСчетКасса.Пустая() Тогда
		ЭлементыФормы.ВалютаДокумента.Доступность=Ложь;
	Иначе
		ЭлементыФормы.ВалютаДокумента.Доступность=Истина;
	КонецЕсли;
	
	Если Список Тогда
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоОднойСделке"].Видимость=Ложь;
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"].Видимость=Истина;
		ЭлементыФормы.ПанельПлатежи.ТекущаяСтраница=ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"];
		ЭлементыФормы.РасшифровкаПлатежа.Ширина=ЭлементыФормы.ПанельПлатежи.Ширина;
		ЭлементыФормы.РасшифровкаПлатежа.Высота=ЭлементыФормы.ПанельПлатежи.Высота;
	Иначе
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоОднойСделке"].Видимость=Истина;
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"].Видимость=Ложь;
	КонецЕсли;
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
	Если ВалютаДокумента.Пустая() Тогда
		
		ЭлементыФормы.КурсДокумента.Доступность=Ложь;
		ЭлементыФормы.БанковскийСчетКасса.Доступность=Ложь;
		ЭлементыФормы.ВключатьВПлатежныйКалендарь.Доступность=Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Размещение"].Видимость=Ложь;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СуммаПлатежа.Доступность=Ложь;
		ЭлементыФормы.СуммаПлатежа.Доступность=Ложь;
		ЭлементыФормы.СуммаПлатежаПодотчет.Доступность=Ложь;
		
	Иначе
		
		ЭлементыФормы.КурсДокумента.Доступность=Истина;
		ЭлементыФормы.БанковскийСчетКасса.Доступность=Истина;
		ЭлементыФормы.ВключатьВПлатежныйКалендарь.Доступность=Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы["Размещение"].Видимость=Истина;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СуммаПлатежа.Доступность=Истина;
		ЭлементыФормы.СуммаПлатежа.Доступность=Истина;
		ЭлементыФормы.СуммаПлатежаПодотчет.Доступность=Истина;
		
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект,НадписьПроект1,Проект1,НадписьПроект2,Проект2,НадписьПроект3,Проект3,РасшифровкаПлатежа.Проект");
		
КонецПроцедуры // УстановитьВидимость()

// Устанавливает тип поля "Получатель" в зависимости от вида операции.
//
// Параметры:
//  Нет.
//
Процедура УстановитьТипПолучатель()
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеЗП
		ИЛИ ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств Тогда
		Возврат;
	КонецЕсли;
	
	ИмяСправочника = "Контрагенты";
	ИмяРасчетногоДокумента="АвансовыйОтчет";

	Если ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ Тогда
		
		Если ВидВыдачиДенежныхСредств=Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
			
			ИмяСправочника = "КассыККМ";
			
		ИначеЕсли ВидВыдачиДенежныхСредств=Перечисления.ВидВыдачиДенежныхСредств.НТТ Тогда
			
			ИмяСправочника = "Склады";
			
		КонецЕсли;
			
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		ИмяСправочника = "ФизическиеЛица";
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		ИмяСправочника = "ФизическиеЛица";
		ИмяРасчетногоДокумента="ДоговорЗаймаСРаботником";
		
	КонецЕсли;
	
	Если ТипЗнч(Получатель) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
		Получатель = Справочники[ИмяСправочника].ПустаяСсылка();
	КонецЕсли; 
	
	Если ТипЗнч(РасчетныйДокумент) <> Тип("ДокументСсылка." + ИмяРасчетногоДокумента) Тогда
		РасчетныйДокумент = Документы[ИмяРасчетногоДокумента].ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры // УстановитьТипПолучатель()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
		НачалоДня(Дата) = НачалоДня(ТекущаяДата()) И (АвтоРезервированиеПоЗаявке ИЛИ АвтоРазмещениеПоЗаявке);

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если НЕ ЭтоНовый() Тогда
		//Если используется функционал согласования заявок - проверим можно ли редактировать заявку
		Если НЕ ЭтаФорма.ТолькоПросмотр Тогда
			ЭтаФорма.ТолькоПросмотр = НЕ УправлениеДенежнымиСредствами.РазрешеноИзменениеЗаявки(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить тип поля Получатель.
	УстановитьТипПолучатель();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	Если РасшифровкаПлатежа.Количество() > 1 Тогда
		Список = Истина;
	Иначе
		Список = Ложь;
	КонецЕсли;	
			
	СтараяВалютаДокумента=ВалютаДокумента;	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	//Установить автоотметку незаполненного для сделки
	УстановитьАвтоотметку();
	
	УправлениеДоступностьюНоменклатуры();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетовПоДоговору, 
																					СтрокаПлатеж.КурсВзаиморасчетов,
																					СтрокаПлатеж.КратностьВзаиморасчетов,
																					мВалютаРегламентированногоУчета,
																					Истина);
	
	// Установим заголовки по значению поля "Получатель" 
	// (это или контрагент или подотчетник или КассаККМ).
	Если ЕстьРасчетыПоКредитам ИЛИ ЕстьРасчетыСКонтрагентами Тогда

		// Надпись НадписьСуммаВзаиморасчетов
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
		Иначе	
			ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;	

	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику
			ИЛИ ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками Тогда

		// Надпись НадписьСуммаВзаиморасчетов
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
			ЭлементыФормы.НадписьСуммаВзаиморасчетовПодотчетник.Заголовок = "Сумма <нет валюты>:";
		Иначе	
			ЭлементыФормы.НадписьСуммаВзаиморасчетовПодотчетник.Заголовок = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПодотчетника) + ":";
		КонецЕсли;
		
		ЭлементыФормы.ИнфНадписьКурса1.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетовПодотчетника, 
																					СтрокаПлатеж.КурсВзаиморасчетов,
																					СтрокаПлатеж.КратностьВзаиморасчетов,
																					мВалютаРегламентированногоУчета,
																					Истина);

	КонецЕсли;
	
	ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
									Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента);
									
	ЭлементыФормы.НадписьИтогоРазмещено.Заголовок="Итого размещено: "+
									Формат(РазмещениеЗаявки.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента);
									
	Если ВалютаДокумента.Пустая() Тогда
		
		ЭлементыФормы.НадписьСуммаДокумента.Заголовок="Не указана валюта расхода денежных средств!";
		ЭлементыФормы.НадписьСуммаДокумента.ЦветТекста=ЦветаСтиля.ТекстПредупреждающейНадписи;
		
	Иначе
		
		ЭлементыФормы.НадписьСуммаДокумента.Заголовок="Всего по заявке: "+
									Формат(СуммаДокумента,"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента);
									
		ЭлементыФормы.НадписьСуммаДокумента.ЦветТекста=ЦветаСтиля.ТекстИнформационнойНадписи;
		
	КонецЕсли;
	
	ТекстВалюта = Строка(ВалютаДокумента);
	
	ЭлементыФормы.НадписьВалютаДокумент.Заголовок=ТекстВалюта;
	ЭлементыФормы.НадписьВалютаДокумент1.Заголовок=ТекстВалюта;
	ЭлементыФормы.НадписьВалютаДокумент2.Заголовок=ТекстВалюта;
	ЭлементыФормы.НадписьВалютаДокумент3.Заголовок=ТекстВалюта;
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийЗаявкиНаРасходование[Кнопка.Имя];
	КонецЕсли;
	
	РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	Список = Ложь;
		
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
	
	УстановитьФокус();

	//Надо определить тип поля "Получатель"
	УстановитьТипПолучатель();	
		
	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	Если НЕ ЗначениеЗаполнено(ДатаРасхода) И НЕ ВалютаДокумента.Пустая() Тогда
		
		УстановитьКурсДокумента(Дата);
		РассчитатьСуммуПлатежаТаблица();
		
	КонецЕсли;
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
			
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента(ДатаКурса)
	
	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ДатаКурса);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();	
	
	ПриИзмененииДоговора();
	
	УстановитьФокус();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаДокумента".
//
Процедура СуммаПлатежаПриИзменении(Элемент)

	РассчитатьКурсВзаиморасчетов();
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");

КонецПроцедуры // СуммаДокументаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсДокумента".
//
Процедура КурсДокументаПриИзменении(Элемент)

	РассчитатьСуммуПлатежаТаблица();

КонецПроцедуры // КурсДокументаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсВзаиморасчетов".
// Процедура выполняет пересчет реквизитов при изменении курса взаиморасчетов
// с подотчетником
//
Процедура КурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовПодотчетникПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаВзаиморасчетовПодотчетника".
//
Процедура ВалютаВзаиморасчетовПодотчетникаПриИзменении(Элемент)

	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, Дата);
	СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
	РассчитатьСуммуПлатежа();

КонецПроцедуры // ВалютаВзаиморасчетовПодотчетникаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода"БанковскийСчетКассаКасса". 
// Процедура устанавливает валюту документа, и предлагает пересчитать сумму документа.
//
Процедура БанковскийСчетКассаПриИзменении(Элемент)

	Если (НЕ БанковскийСчетКасса=Неопределено) И (НЕ БанковскийСчетКасса.Пустая()) Тогда
		РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ДатаРасхода, СуммаДокумента, БанковскийСчетКасса.ВалютаДенежныхСредств);
		ЭлементыФормы.ВалютаДокумента.Доступность=Ложь;
		
		РазмещениеЗаявки.Очистить();
		СуммаДокументаПриИзменении();
		
		Если Организация.Пустая() Тогда
			
			Организация=БанковскийСчетКасса.Владелец;
			
			Если Не ПустаяСтрока(Номер) Тогда
				МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.ВалютаДокумента.Доступность=Истина;
	КонецЕсли;
	
	РассчитатьСуммуПлатежаТаблица();
	
	УстановитьВидимость();
	СтараяВалютаДокумента = ВалютаДокумента;
	
КонецПроцедуры // БанковскийСчетКассаПриИзменении()

Процедура СуммаДокументаПриИзменении()
			 
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		РассчитатьКурсВзаиморасчетов();
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствКассеККМ
		ИЛИ ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПеречислениеНалога Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		СтрокаПлатеж.СуммаВзаиморасчетов=СуммаДокумента;
		
	ИначеЕсли РасшифровкаПлатежа.Количество()=1 Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		РассчитатьКурсВзаиморасчетов();
		
	КонецЕсли;
			 
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
		ФормаВыбора = Документы.АвансовыйОтчет.ПолучитьФормуВыбора(,Элемент,);
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		ФормаВыбора = Документы.ДоговорЗаймаСРаботником.ПолучитьФормуВыбора(,Элемент,);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Значение = ВалютаВзаиморасчетовПодотчетника;
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВалютаДокумента.Доступность=Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Получатель) Тогда
						
			ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Значение = Получатель;
			ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ФизЛицо.Доступность=Ложь;
					
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		
		ФормаВыбора.ПараметрТекущаяСтрока=Элемент.Значение;
		
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументПриИзменении(Элемент)

	Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		
		Получатель                       = РасчетныйДокумент.ФизЛицо;
		ВалютаВзаиморасчетовПодотчетника = РасчетныйДокумент.ВалютаДокумента;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПодотчетника, ДатаРасхода);
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность; 
		
		Если ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицом(СтрокаПлатеж);
			
		Иначе
			
			СтрокаПлатеж.СуммаВзаиморасчетов=РасчетныйДокумент.СуммаЗайма;
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, 
			ВалютаВзаиморасчетовПодотчетника, ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
		КонецЕсли;		
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура СуммаВзаиморасчетовПриИзменении(Элемент)
		
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура ФормаОплатыПриИзменении(Элемент)
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		БанковскийСчетКасса=Новый(Тип("СправочникСсылка.БанковскиеСчета"));
	ИначеЕсли ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные Тогда
		БанковскийСчетКасса=Новый(Тип("СправочникСсылка.Кассы"));
   	Иначе
		БанковскийСчетКасса=Неопределено;
	КонецЕсли;
	
	РазмещениеЗаявки.Очистить();
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		
		БанковскийСчетКасса=Новый(Тип("СправочникСсылка.БанковскиеСчета"));
	ИначеЕсли ФормаОплаты=Перечисления.ВидыДенежныхСредств.Наличные Тогда
	    БанковскийСчетКасса=Новый(Тип("СправочникСсылка.Кассы"));

	КонецЕсли;
	ЭлементыФормы.БанковскийСчетКасса.ВыборПоВладельцу=Организация;
	
	КонтрагентПриИзменении(Неопределено);
	
	РазмещениеЗаявки.Очистить();

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа")= СуммаДокумента Тогда
		
		Если Вопрос("Не совпадают сумма документа и ее расшифровка. Пересчитать сумму документа?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
		Иначе
			
			Отказ = Истина;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если Ответственный.Пустая() Тогда
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	КонецЕсли;
	
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		РассчитатьСуммуПлатежа();
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(
		ДокументОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетов();
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
КонецПроцедуры

Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПодотчетникаПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПодотчетникаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПодотчетника) Тогда
		Предупреждение("Не выбрана валюта взаиморасчетов подотчетника."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаВзаиморасчетовПодотчетника;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура СуммаВзаиморасчетовПодотчетникаПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры


Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ЗначениеВыбора.Свойство("ДокументПланирования") Тогда
		
		ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.МестоРазмещения=ЗначениеВыбора.ДокументПланирования;
		СуммаКРазмещению=СуммаДокумента-РазмещениеЗаявки.Итог("СуммаПлатежа");
		СуммаПлатежа=?(ЗначениеВыбора.СуммаПлатежа<=СуммаКРазмещению,ЗначениеВыбора.СуммаПлатежа,СуммаКРазмещению);
		
		ЭлементыФормы.РазмещениеЗаявки.ТекущиеДанные.СуммаПлатежа=СуммаПлатежа;


	Иначе
	
		УправлениеДенежнымиСредствами.ОбработкаПодбораЗадолженностей(ЭтотОбъект,СтрокаПлатеж,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента);
											
		СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	КонецЕсли;
	
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
	КонецЕсли;
				
	УстановитьФокус();
				
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,);
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,);
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,);
	СтруктураПараметров.Вставить("Проект"							,);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодбор(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,);
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,);
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,);
	СтруктураПараметров.Вставить("Проект"							,);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"	,Неопределено);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,"<0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,);
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,);
	
	УправлениеДенежнымиСредствами.ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура КурсДокументаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Предупреждение("Не выбрана валюта расхода денежных средств."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаДокумента;
	ФормаВводаКурсаИКратности.КратностьВалюты = КратностьДокумента;
	ФормаВводаКурсаИКратности.КурсВалюты      = КурсДокумента;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаРасхода='00010101',Дата,ДатаРасхода);

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		КурсДокумента = СтруктураКурсаИКратности.КурсВалюты;
		КратностьДокумента = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаТаблица();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РазмещениеЗаявкиМестоРазмещенияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	НачалоВыбораРазмещенияЗаявки(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РазмещениеЗаявкиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ВалютаДокумента.Пустая() Тогда
		Сообщить("Не указана валюта заявки.");
		Отказ=Истина;
	КонецЕсли;
	
	Если ФормаОплаты.Пустая() Тогда
		Сообщить("Не указана форма оплаты.");
		Отказ=Истина;
	КонецЕсли;
		
КонецПроцедуры


Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если ВалютаДокумента.Пустая() Тогда
		
		ПриОчисткеВалютыДокумента();
		
	ИначеЕсли НЕ ВалютаДокумента=СтараяВалютаДокумента Тогда
		
		РазмещениеЗаявки.Очистить();	
		
		СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,?(ДатаРасхода='00010101',Дата,ДатаРасхода));
		
		КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
		КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;

		РассчитатьСуммуПлатежаТаблица();	
		УстановитьВидимость();
		
	КонецЕсли;
	
	СтараяВалютаДокумента=ВалютаДокумента;
	
КонецПроцедуры

Процедура БанковскийСчетКассаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если ФормаОплаты=Перечисления.ВидыДенежныхСредств.Безналичные Тогда
		БанковскийСчетКасса=Справочники.БанковскиеСчета.ПустаяСсылка();
	Иначе
		БанковскийСчетКасса=Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура АвтоРезервированиеПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры

Процедура АвтоРазмещениеПриИзменении(Элемент)
	
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры

Процедура ВалютаДокументаОчистка(Элемент, СтандартнаяОбработка)
	
	ПриОчисткеВалютыДокумента();
	
КонецПроцедуры

Процедура СуммаПлатежаПодотчетПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетов();
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

Процедура СуммаВзаиморасчетовККМПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура СуммаВзаиморасчетовПрочиеПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура ДатаРасходаПриИзменении(Элемент)
	
	Если НЕ(НЕ ЗначениеЗаполнено(ДатаРасхода) ИЛИ ВалютаДокумента.Пустая()) Тогда
		
		УстановитьКурсДокумента(ДатаРасхода);
		РассчитатьСуммуПлатежаТаблица();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ФормаОплатыОчистка(Элемент, СтандартнаяОбработка)
	
	БанковскийСчетКасса=Неопределено;
	
КонецПроцедуры

// Процедура обработчик события "ПриИзменении" поля ввода вида выдачи денежных средств
//
Процедура ВидВыдачиДенежныхСредствПриИзменении(Элемент)
	
	Если ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
		Если ТипЗнч(Получатель)<>Тип("СправочникСсылка.КассыККМ") Тогда
			Получатель = Справочники["КассыККМ"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо кассу ККМ, которой выдаются денежные средства.";
	Иначе
		Если ТипЗнч(Получатель)<>Тип("СправочникСсылка.Склады") Тогда
			Получатель = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо указать НТТ, которой выдаются денежные средства.";
	КонецЕсли;
 
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура РасшифровкаПлатежаПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура Проект1НачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура Проект2НачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура Проект3НачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПриИзмененииСтатьиДДС(Строка)
	
	Если НЕ ЗначениеЗаполнено(Строка.Проект) Тогда
		
		ВидРаспределения=УправлениеПроектами.ПолучитьВидРаспределенияДляСтатьиДДС(Строка.СтатьяДвиженияДенежныхСредств, ДатаРасхода);
		
		Если НЕ ВидРаспределения=Неопределено Тогда
			Строка.Проект=ВидРаспределения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСтатьиДДС()

Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредств1ПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредств2ПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредств3ПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяОборотовПриИзменении(Элемент)
	
	УправлениеДоступностьюНоменклатуры();
	
КонецПроцедуры

Процедура НоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.НоменклатурныеГруппы Тогда
		ФормаВыбора=Справочники.НоменклатурныеГруппы.ПолучитьФормуВыбора(,Элемент,);
		Если ЗначениеЗаполнено(Элемент.Значение) И ТипЗнч(Элемент.Значение)=Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
			ФормаВыбора.ПараметрТекущаяСтрока=Элемент.Значение;
		КонецЕсли;
	Иначе
		ФормаВыбора=Справочники.Номенклатура.ПолучитьФормуВыбора(,Элемент,);
		Если ЗначениеЗаполнено(Элемент.Значение) И ТипЗнч(Элемент.Значение)=Тип("СправочникСсылка.Номенклатура") Тогда
			ФормаВыбора.ПараметрТекущаяСтрока=Элемент.Значение;
		КонецЕсли;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора=Истина;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура СценарийПриИзменении(Элемент)
	
	Если Сценарий.ДетализацияПланирования=Перечисления.ДетализацияПланирования.НоменклатурныеГруппы 
		И НЕ ТипЗнч(Номенклатура)=Тип("СправочникСсылка.НоменклатурныеГруппы") Тогда
		Номенклатура=Новый(Тип("СправочникСсылка.НоменклатурныеГруппы"));
	ИначеЕсли НЕ ТипЗнч(Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
		Номенклатура=Новый(Тип("СправочникСсылка.Номенклатура"));
	КонецЕсли;
	
КонецПроцедуры

Процедура КассаККМПриИзменении(Элемент)
	
	Если ТипЗнч(Получатель)=Тип("СправочникСсылка.КассыККМ") И Организация.Пустая() Тогда
		Организация=Получатель.Владелец;
	КонецЕсли;
	
КонецПроцедуры

Процедура КассаККМНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.НТТ Тогда
		РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Получатель, ВидСравнения.Равно, СтандартнаяОбработка);
	ИначеЕсли ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
		
		СтандартнаяОбработка=Ложь;
		ФормаВыбора=Справочники.КассыККМ.ПолучитьФормуВыбора(,Элемент,);
		
		ФормаВыбора.Отбор.Владелец.ВидСравнения=ВидСравнения.Равно;
		ФормаВыбора.Отбор.Владелец.Значение      = Организация;
		ФормаВыбора.Отбор.Владелец.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность=Ложь;
		
		Если ЗначениеЗаполнено(Получатель) Тогда
			
			ФормаВыбора.ПараметрТекущаяСтрока=Получатель;
			
		КонецЕсли;
		
		ФормаВыбора.Открыть();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(
		ДокументОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры