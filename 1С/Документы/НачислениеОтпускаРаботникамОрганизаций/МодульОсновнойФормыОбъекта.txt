////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
// Текущий период
Перем мТекущийПериод Экспорт; 
Перем мДлинаСуток;
Перем мРассчитываемыеТаблицы;
Перем мСведенияОВидахРасчета Экспорт;
Перем мСведенияОВидахРасчетаПоказатели;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// Механизм исправлений
Перем мДокументИсправление;
Перем мДокументСторнирование;
Перем мКнопкаИсправление;
Перем мКнопкаОтменаИсправление;

// Диалог настройки периода
Перем мНастройкаПериода;

// Дополнительные свойства формы
Перем мДополнительныеСвойства Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//	Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке(ИмяЭУ = "ВидРасчетаДополнительногоОтпуска")

	Если ИмяЭУ = "ВидРасчетаДополнительногоОтпуска" Тогда
		МассивСпособовРасчета = Новый Массив;
		МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
		МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
		СтруктураПараметров = Новый Структура("СпособРасчета, Предопределенный", МассивСпособовРасчета, Ложь);
	ИначеЕсли ИмяЭУ = "РасчетСреднего" Тогда
		СтруктураПараметров = Новый Структура("Ссылка", ЭлементыФормы.РасчетСреднегоПоКалендарным.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора);
	КонецЕсли;

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднегоПоКалендарным,ЭлементыФормы.КоманднаяПанельРасчетСреднегоПоКалендарным);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднегоПоШестидневке,ЭлементыФормы.КоманднаяПанельРасчетСреднегоПоШестидневке);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднегоПоКалендарным1,ЭлементыФормы.КоманднаяПанельРасчетСреднегоПоКалендарным1);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднегоПоШестидневке1,ЭлементыФормы.КоманднаяПанельРасчетСреднегоПоШестидневке1);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Выполняет авторасчет реквизитов таблицы начислений
//
Процедура ВыполнитьАвторасчетРеквизитовСтрокиНачислений(ТекущаяСтрока)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудник",			Сотрудник);
	Запрос.УстановитьПараметр("ДатаАктуальности",	ДатаНачалаСобытия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
	|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних";
	
	// подразделение
	ПрежниеДанные = Запрос.Выполнить().Выбрать();
	Если ПрежниеДанные.Следующий() тогда
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПодразделениеОрганизации) Тогда
			ТекущаяСтрока.ПодразделениеОрганизации =  ПрежниеДанные.ПодразделениеОрганизации; 
		КонецЕсли;
	КонецЕсли;

	// Рассчитаем период расчета среднего заработка
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПериодРасчетаСреднегоЗаработкаНачало) Тогда
		ТекущаяСтрока.ПериодРасчетаСреднегоЗаработкаНачало = ПериодРасчетаСреднегоЗаработкаНачало;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
		ТекущаяСтрока.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднегоЗаработкаОкончание; 
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьАвторасчетРеквизитовСтрокиНачислений()

Процедура НастроитьПоказДанныхПилотногоПроектаФСС()

	Если ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ЗаявлениеНаВыплатуПособия Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Страница1;
		ТекущийЭлемент = ЭлементыФормы.Сотрудник;
	КонецЕсли;
	
	ЭлементыФормы.Панель.Страницы.ЗаявлениеНаВыплатуПособия.Видимость = ПроведениеРасчетов.ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(ПериодРегистрации, Организация) И ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВидРасчетаДополнительногоОтпуска,"ВидПособияСоциальногоСтрахования"));
	
КонецПроцедуры

// Управляет видимостью и доступностью элементов формы
//
Процедура ОбновитьДоступностьПериодовОтпусков()
	
	ЭлементыФормы.ДатаНачалаОсновногоОтпуска.ТолькоПросмотр = Не ОсновнойОтпуск;
	ЭлементыФормы.ДатаОкончанияОсновногоОтпуска.ТолькоПросмотр = Не ОсновнойОтпуск;
	ЭлементыФормы.ДнейОтпуска.ТолькоПросмотр = Не ОсновнойОтпуск;
	ЭлементыФормы.РабочийГодС.ТолькоПросмотр = Не ОсновнойОтпуск;
	ЭлементыФормы.РабочийГодПо.ТолькоПросмотр = Не ОсновнойОтпуск;
	ЭлементыФормы.ПорядокРасчетаОсновногоОтпуска.ТолькоПросмотр = Не ОсновнойОтпуск;
	
	ЭлементыФормы.ДатаНачалаОсновногоОтпуска.АвтоОтметкаНезаполненного = ОсновнойОтпуск;
	ЭлементыФормы.ДатаОкончанияОсновногоОтпуска.АвтоОтметкаНезаполненного = ОсновнойОтпуск;
	ЭлементыФормы.ПорядокРасчетаОсновногоОтпуска.АвтоОтметкаНезаполненного = ОсновнойОтпуск;
	ЭлементыФормы.ДатаНачалаОсновногоОтпуска.ОтметкаНезаполненного = ОсновнойОтпуск И Не ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска);
	ЭлементыФормы.ДатаОкончанияОсновногоОтпуска.ОтметкаНезаполненного = ОсновнойОтпуск И Не ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска);
	ЭлементыФормы.ПорядокРасчетаОсновногоОтпуска.ОтметкаНезаполненного = ОсновнойОтпуск И Не ЗначениеЗаполнено(ПорядокРасчетаОсновногоОтпуска);
	
	ЭлементыФормы.ДатаНачалаДополнительногоОтпуска.ТолькоПросмотр = Не ДополнительныйОтпуск;
	ЭлементыФормы.ДатаОкончанияДополнительногоОтпуска.ТолькоПросмотр = Не ДополнительныйОтпуск;
	ЭлементыФормы.ДнейДопОтпуска.ТолькоПросмотр = Не ДополнительныйОтпуск;
	ЭлементыФормы.ВидРасчетаДополнительногоОтпуска.ТолькоПросмотр = Не ДополнительныйОтпуск;
	ЭлементыФормы.ПроцентОплаты.ТолькоПросмотр = Не ДополнительныйОтпуск;
	
	ЭлементыФормы.ДатаНачалаДополнительногоОтпуска.АвтоОтметкаНезаполненного = ДополнительныйОтпуск;
	ЭлементыФормы.ДатаОкончанияДополнительногоОтпуска.АвтоОтметкаНезаполненного = ДополнительныйОтпуск;
	ЭлементыФормы.ВидРасчетаДополнительногоОтпуска.АвтоОтметкаНезаполненного = ДополнительныйОтпуск;
	ЭлементыФормы.ДатаНачалаДополнительногоОтпуска.ОтметкаНезаполненного = ДополнительныйОтпуск И Не ЗначениеЗаполнено(ДатаНачалаДополнительногоОтпуска);
	ЭлементыФормы.ДатаОкончанияДополнительногоОтпуска.ОтметкаНезаполненного = ДополнительныйОтпуск И Не ЗначениеЗаполнено(ДатаОкончанияДополнительногоОтпуска);
	ЭлементыФормы.ВидРасчетаДополнительногоОтпуска.ОтметкаНезаполненного = ДополнительныйОтпуск И Не ЗначениеЗаполнено(ВидРасчетаДополнительногоОтпуска);
	
	ЭлементыФормы.ДнейЧасовКомпенсацииОтпуска.ТолькоПросмотр = Не КомпенсацияОтпуска;
	ЭлементыФормы.ПорядокРасчетаКомпенсацииОтпуска.ТолькоПросмотр = Не КомпенсацияОтпуска;
	
	ЭлементыФормы.ДнейЧасовКомпенсацииОтпуска.АвтоОтметкаНезаполненного = КомпенсацияОтпуска;
	ЭлементыФормы.ДнейЧасовКомпенсацииОтпуска.ОтметкаНезаполненного = КомпенсацияОтпуска И Не ЗначениеЗаполнено(ДнейЧасовКомпенсацииОтпуска);
	ЭлементыФормы.ПорядокРасчетаКомпенсацииОтпуска.АвтоОтметкаНезаполненного = КомпенсацияОтпуска;
	ЭлементыФормы.ПорядокРасчетаКомпенсацииОтпуска.ОтметкаНезаполненного = КомпенсацияОтпуска И Не ЗначениеЗаполнено(ПорядокРасчетаКомпенсацииОтпуска);
	
КонецПроцедуры // ОбновитьДоступностьПериодовОтпусков()

Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	ТолькоПросмотр = ДокументИсправлен Или ДокументСторнирован;
	РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	
	ЭлементыФормы.Сотрудник.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,"Открыть сторно-документ","Открыть исправление");
	
	РаботаСДиалогамиЗК.УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрации, ДокументИсправлен, ДокументСторнирован, ЭлементыФормы.ДополнительныеДействия.Кнопки, мКнопкаИсправление, мКнопкаОтменаИсправление);
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

// Определяет флажки-описатели состояния документа, формирует и показывает строку-описание
//
Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Сотрудник);
	НеЗаполнен = НеЗаполнен Или (Не ЗначениеЗаполнено(ДатаНачалаСобытия) И Не ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) И Не ЗначениеЗаполнено(ДатаНачалаДополнительногоОтпуска) И ДнейЧасовКомпенсацииОтпуска = 0);
	
	ЗаполненСОшибками = ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) И ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска) И ДатаНачалаОсновногоОтпуска > ДатаОкончанияОсновногоОтпуска;
	ЗаполненСОшибками = ЗаполненСОшибками Или (ЗначениеЗаполнено(ДатаНачалаДополнительногоОтпуска) И ЗначениеЗаполнено(ДатаОкончанияДополнительногоОтпуска) И ДатаНачалаДополнительногоОтпуска > ДатаОкончанияДополнительногоОтпуска);
	ЗаполненСОшибками = ЗаполненСОшибками Или (ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) И ЗначениеЗаполнено(ДатаНачалаСобытия) И ДатаНачалаСобытия > ДатаНачалаОсновногоОтпуска);
	ЗаполненСОшибками = ЗаполненСОшибками Или (ЗначениеЗаполнено(ДатаНачалаДополнительногоОтпуска) И ЗначениеЗаполнено(ДатаНачалаСобытия) И ДатаНачалаСобытия > ДатаНачалаДополнительногоОтпуска);
	ЗаполненСОшибками = ЗаполненСОшибками Или (ОсновнойОтпуск И Не ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска));
	ЗаполненСОшибками = ЗаполненСОшибками Или (ДополнительныйОтпуск И Не ЗначениеЗаполнено(ДатаНачалаДополнительногоОтпуска));
	ЗаполненСОшибками = ЗаполненСОшибками Или (КомпенсацияОтпуска И Не ЗначениеЗаполнено(ДнейЧасовКомпенсацииОтпуска));
	ЗаполненСОшибками = ЗаполненСОшибками Или (ОсновнойОтпуск И Не ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска));
	ЗаполненСОшибками = ЗаполненСОшибками Или (ДополнительныйОтпуск И Не ЗначениеЗаполнено(ДатаОкончанияДополнительногоОтпуска));
	ЗаполненСОшибками = ЗаполненСОшибками Или (ДополнительныйОтпуск И Не ЗначениеЗаполнено(ВидРасчетаДополнительногоОтпуска));
	
	Рассчитан = (Начисления.Количество() > 0);
	
	ОписаниеСостоянияДокумента = РаботаСДиалогамиЗК.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Рассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура ОбновитьИнформационнуюНадписьРазмерНачислено()

	НачисленияДокумента = Новый Соответствие;
	Если ОсновнойОтпуск Тогда
		Если ПорядокРасчетаОсновногоОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням Тогда
			НачисленияДокумента.Вставить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни,"")	
		Иначе
			НачисленияДокумента.Вставить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка,"")	
		КонецЕсли;
	КонецЕсли;
	Если ДополнительныйОтпуск Тогда
		НачисленияДокумента.Вставить(ВидРасчетаДополнительногоОтпуска,"")	
	КонецЕсли;
	Если КомпенсацияОтпуска Тогда
		Если ПорядокРасчетаКомпенсацииОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням Тогда
			НачисленияДокумента.Вставить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения,"")	
		Иначе
			НачисленияДокумента.Вставить(ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения,"")	
		КонецЕсли;
	КонецЕсли;

	СуммаОтпускных = 0;
	СуммаСторно  = 0;
	СуммаДоначислено = 0;
	ОплаченоДней = 0;
	ИнформационнаяНадпись = "";
	ИнформационнаяНадписьСторно = "";
	ИнформационнаяНадписьДоначислено = "";
	
	Если Начисления.Количество() = 0 и РасчетСреднегоПоКалендарным.Количество() = 0 и РасчетСреднегоПоШестидневке.Количество() = 0 Тогда
		ИнформационнаяНадпись = "";
	ИначеЕсли Начисления.Количество() = 0 Тогда	
		ИнформационнаяНадпись = "Сумма отпускных не рассчитана"
	Иначе
		// табличные части не пустые, получим сумму отпускных и проверим наличие сторнирования
		// начислений прошлых преиодов
		Для каждого СтрокаНачислений Из Начисления Цикл
			Если СтрокаНачислений.Сторно Тогда
				ИнформационнаяНадписьСторно = "Сторнированы начисления прошлых периодов";
				СуммаСторно = СуммаСторно + СтрокаНачислений.Результат;
				Продолжить;
			КонецЕсли;
			Если НачисленияДокумента[СтрокаНачислений.ВидРасчета] = Неопределено Тогда
				ИнформационнаяНадписьДоначислено = "Начисления прошлых периодов";
				СуммаДоначислено = СуммаДоначислено + СтрокаНачислений.Результат;
				Продолжить;
			КонецЕсли;
			СуммаОтпускных = СуммаОтпускных + СтрокаНачислений.Результат;
			ОплаченоДней = ОплаченоДней + СтрокаНачислений.ОплаченоДнейЧасов;
		КонецЦикла;
	КонецЕсли;	
	
	// информационная надпись на лицевой стороне
	ЭлементыФормы.ЗначениеРазмерОтпускных.Заголовок = Формат(СуммаОтпускных, "ЧЦ=12; ЧДЦ=2; ЧН=");
	ЭлементыФормы.ИнформационнаяНадписьРазмерОтпускных.Заголовок = ""+ ИнформационнаяНадпись + ИнформационнаяНадписьСторно;
	
	СтрокаРазмер = "Сумма отпускных: " + Формат(СуммаОтпускных, "ЧЦ=12; ЧДЦ=2; ЧН=") + " руб."; 
	СтрокаРазмер = СтрокаРазмер + " Оплачено " + ОплаченоДней + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ОплаченоДней);
	СтрокаРазмер = СтрокаРазмер + Символы.ПС + ИнформационнаяНадписьСторно + ?(ПустаяСтрока(ИнформационнаяНадписьСторно),"", ": " + Формат(СуммаСторно, "ЧЦ=12; ЧДЦ=2; ЧН=") + " руб.");
	СтрокаРазмер = СтрокаРазмер + " " + ИнформационнаяНадписьДоначислено + ?(ПустаяСтрока(ИнформационнаяНадписьДоначислено),"", ": " + Формат(СуммаДоначислено, "ЧЦ=12; ЧДЦ=2; ЧН=") + " руб.");
	ЭлементыФормы.НадписьОплата.Заголовок = СтрокаРазмер;

КонецПроцедуры

Процедура ОбновитьИнформационнуюНадписьСреднийЗаработок()
	
	Если НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ИспользуетсяСреднеЧасовойЗаработок(ЭтотОбъект) Тогда
		НадписьСреднийЗаработокТекст = "Средний часовой заработок:";
	Иначе
		НадписьСреднийЗаработокТекст = "Средний дневной заработок:";
	КонецЕсли;
	
	// данные среднего заработка
	
	Если ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
		
		ПериодРасчетаСреднегоЗаработкаТекст = "Расчетный период " + Символы.ПС + " с " + Формат(ПериодРасчетаСреднегоЗаработкаНачало,"ДФ=dd.MM.yyyy") +" по "+ Формат(ПериодРасчетаСреднегоЗаработкаОкончание,"ДФ=dd.MM.yyyy");
		ПериодРасчетаСреднегоЗаработкаТекст1 = "Расчетный период с " + Формат(ПериодРасчетаСреднегоЗаработкаНачало,"ДФ=dd.MM.yyyy") +" по "+ Формат(ПериодРасчетаСреднегоЗаработкаОкончание,"ДФ=dd.MM.yyyy");
		
		ВариантРасчетаДокумента = ОсновнойВариантРасчетаДокумента();
		ВидРасчета = ВариантРасчетаДокумента.ВидРасчета;
		
		Если ЗначениеЗаполнено(ВидРасчета) Тогда
			
			СведениеОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ВидРасчета);
			МесяцевРасчетногоПериода = 0;
			ОбщегоНазначения.РазобратьРазностьДат(НачалоМесяца(ПериодРасчетаСреднегоЗаработкаОкончание), НачалоМесяца(ПериодРасчетаСреднегоЗаработкаНачало), , МесяцевРасчетногоПериода);
			Если ЗначениеЗаполнено(МесяцевРасчетногоПериода) Тогда
				МесяцевРасчетногоПериода = МесяцевРасчетногоПериода + 1;
			Иначе 
				МесяцевРасчетногоПериода = ?(СведениеОВидеРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору,СведениеОВидеРасчета.ПериодРасчетаСреднегоЗаработка,НачислениеОтпускаРаботникамОрганизацийПереопределяемый.КоличествоМесяцевРасчетаПоЗакону(ЭтотОбъект));
			КонецЕсли;
			СреднедневнойЗаработок = Формат(НачислениеОтпускаРаботникамОрганизацийПереопределяемый.РасчетСреднегоЗаработка(ЭтотОбъект, СведениеОВидеРасчета.СпособРасчета, МесяцевРасчетногоПериода, ПериодРасчетаСреднегоЗаработкаНачало, ПериодРасчетаСреднегоЗаработкаОкончание),  "ЧЦ=12; ЧДЦ=2; ЧН=");
			
		Иначе
			
			СреднедневнойЗаработок = "";
			
		КонецЕсли;
	Иначе
		ПериодРасчетаСреднегоЗаработкаТекст = ""; 
		ПериодРасчетаСреднегоЗаработкаТекст1 = ""; 
		СреднедневнойЗаработок = "";
	КонецЕсли;
	
	ЭлементыФормы.НадписьСреднийЗаработок.Заголовок = НадписьСреднийЗаработокТекст;
	ЭлементыФормы.ЗначениеСреднийЗаработок.Заголовок = СреднедневнойЗаработок;
	ЭлементыФормы.ИнформационнаяНадписьСреднийЗаработок.Заголовок = ПериодРасчетаСреднегоЗаработкаТекст;
	ЭлементыФормы.НадписьРасчетСреднегоЗаработка.Заголовок = НадписьСреднийЗаработокТекст + " " + СреднедневнойЗаработок + " руб." + Символы.ПС + ПериодРасчетаСреднегоЗаработкаТекст1;
	
КонецПроцедуры

// Процедура рассчитывает период работы, за который начисляется основной отпуск
//
Процедура ОпределитьРабочийГодОтпуска()
	
	Если Сотрудник.Пустая() ИЛИ Не ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) ИЛИ Не ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска) ИЛИ ПорядокРасчетаОсновногоОтпуска <> Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОстаткиОтпусков.РабочийГодПериодаОтпуска(
		Сотрудник, ДатаНачалаОсновногоОтпуска, ?(ДополнительныйОтпуск, ДатаОкончанияДополнительногоОтпуска, ДатаОкончанияОсновногоОтпуска), Ссылка, ПорядокРасчетаОсновногоОтпуска, Не ОсновнойОтпуск, ВидРасчетаДополнительногоОтпуска));
	
КонецПроцедуры

Процедура ОчиститьНачисления()
	
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
	КонецЕсли;
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ВыполнитьДополнительныеДействияПриУдаленииНачислений(ЭтотОбъект, ЭтаФорма);
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ОчиститьВсеРасчеты()

	ОчиститьНачисления();
	
	Если РасчетСреднегоПоКалендарным.Количество() > 0 Тогда
		РасчетСреднегоПоКалендарным.Очистить();
	КонецЕсли;
	Если РасчетСреднегоПоШестидневке.Количество() > 0 Тогда
		РасчетСреднегоПоШестидневке.Очистить();
	КонецЕсли;

	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	
КонецПроцедуры

// Процедура - обработчик событий изменений параметров отпуска
// Параметры
//  Изменено - в зависимости от того ,что изменяем, по-разному будет выполняться замена
Процедура ПриИзмененииПараметровОтпуска(Элемент, Изменено)
	
	ОчиститьНачисления();
	
	// определяем какие реквизиты нам нужны - основного или дополнительного отпуска:
	Если ОсновнойОтпуск И Найти(Изменено, "Основного") > 0 Тогда
		ЗаполнениеДокументовЗК.ЗаполнитьДатыОтпуска(ДатаНачалаОсновногоОтпуска, ДатаОкончанияОсновногоОтпуска, КоличествоДнейОсновногоОтпуска, Изменено);
	ИначеЕсли ДополнительныйОтпуск Тогда
		ЗаполнениеДокументовЗК.ЗаполнитьДатыОтпуска(ДатаНачалаДополнительногоОтпуска, ДатаОкончанияДополнительногоОтпуска, КоличествоДнейДополнительногоОтпуска, Изменено, ВидРасчетаДополнительногоОтпуска);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииКомпенсации()

	ОчиститьНачисления();
	ЭлементыФормы.НадписьДнейКомпенсации.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день.","дня.","дней.",ДнейЧасовКомпенсацииОтпуска)

КонецПроцедуры

Процедура ПриИзмененииПериодаРегистрации()
	
	РаботаСДиалогамиЗК.УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрации, ЗначениеЗаполнено(мДокументИсправление), ЗначениеЗаполнено(мДокументСторнирование), ЭлементыФормы.ДополнительныеДействия.Кнопки, мКнопкаИсправление, мКнопкаОтменаИсправление);
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ВыполнитьДополнительныеДействияПриИзмененииПериодаРегистрации(ЭтотОбъект, ЭтаФорма);
	ПоказывалосьДоИзменения = ЭлементыФормы.Панель.Страницы.ЗаявлениеНаВыплатуПособия.Видимость;
	НастроитьПоказДанныхПилотногоПроектаФСС();
	Если Не ПоказывалосьДоИзменения И ЭлементыФормы.Панель.Страницы.ЗаявлениеНаВыплатуПособия.Видимость Тогда
		Автозаполнение();
		АдресПочтовыйВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресПочтовый);
		АдресРегистрацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРегистрации);
	КонецЕсли;
	
КонецПроцедуры

Процедура РассчитатьНачисления()
	
	Если Не ПроверкаУчастияВПилотномПроектеФСС() Тогда
		Возврат
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	МассивТаблиц = НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьМассивТабличныхЧастей(ЭтотОбъект, "РасчетНачислений");
	ТекстВопроса1 = "Рассчитать документ можно только после отмены его проведения. Продолжить?";
	ТекстВопроса2 = "Перед расчетом таблица ""Оплата"" будет очищена. Продолжить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	Для каждого ТабличнаяЧасть Из МассивТаблиц Цикл
		ТабличнаяЧасть.Очистить();
	КонецЦикла;
	
	мРассчитываемыеТаблицы.Начисления = Истина;
	мРассчитываемыеТаблицы.РасчетСреднего = Ложь;
	
	Рассчитать(мРассчитываемыеТаблицы);
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	ЭлементыФормы.Начисления.Колонки.ПодразделениеОрганизации.ТекстШапки = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Подразделение организации");
	
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ВыполнитьДействияПередОткрытиемФормы(ЭтаФорма);
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"ТаблицаДокумента");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
	Иначе	
		РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, "Документ не заполнен", "СообщениеОПроблемах");
	КонецЕсли;
	
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ДополнитьКолонкиТабличногоПоля(ЭлементыФормы.РасчетСреднегоПоКалендарным);
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ДополнитьКолонкиТабличногоПоля(ЭлементыФормы.РасчетСреднегоПоШестидневке);
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ДополнитьКолонкиТабличногоПоля(ЭлементыФормы.РасчетСреднегоПоКалендарным1);
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ДополнитьКолонкиТабличногоПоля(ЭлементыФормы.РасчетСреднегоПоШестидневке1);
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		Если НЕ ЗначениеЗаполнено(ПорядокРасчетаОсновногоОтпуска) Тогда
			ОсновнойОтпуск = Истина;
			ПорядокРасчетаОсновногоОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням;
			ПорядокРасчетаКомпенсацииОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням;
			ПроцентОплатыДополнительногоОтпуска = 100;
			Если ЗначениеЗаполнено(Организация) И ПроведениеРасчетов.ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(ПериодРегистрации, Организация) Тогда
				Автозаполнение("ДанныеСтрахователя");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();

	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");
	СтруктураКолонок.Вставить("Результат");
	СтруктураКолонок.Вставить("НаименованиеПоказатель1");
	СтруктураКолонок.Вставить("НаименованиеПоказатель2");
	СтруктураКолонок.Вставить("НаименованиеПоказатель3");
	СтруктураКолонок.Вставить("НаименованиеПоказатель4");
	СтруктураКолонок.Вставить("НаименованиеПоказатель5");
	СтруктураКолонок.Вставить("НаименованиеПоказатель6");
	СтруктураКолонок.Вставить("Показатель1");
	СтруктураКолонок.Вставить("Показатель2");
	СтруктураКолонок.Вставить("Показатель3");
	СтруктураКолонок.Вставить("Показатель4");
	СтруктураКолонок.Вставить("Показатель5");
	СтруктураКолонок.Вставить("Показатель6");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();

	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("БазовыйПериодНачало");
	СтруктураКолонок.Вставить("БазовыйПериодКонец");
	СтруктураКолонок.Вставить("КоэффициентИндексации");
	СтруктураКолонок.Вставить("Результат");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетСреднегоПоКалендарным.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетСреднегоПоШестидневке.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетСреднегоПоКалендарным1.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетСреднегоПоШестидневке1.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	// Запомнить текущий расчетный период
	мТекущийПериод = ПериодРегистрации;
	
	
	// Список видов записей расчета среднего
	// и видимость колонок
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.НастроитьСпискиВыбораЭлементовУправления(ЭтотОбъект, ЭтаФорма);
	
	// Исправление документов
	мКнопкаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	// Установим доступность элементов формы 
	ОбновитьДоступностьЭлементовФормы();
	ОбновитьДоступностьПериодовОтпусков();
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ВыполнитьДополнительныеДействияПриОткрытииФормы(ЭтотОбъект, ЭтаФорма);
	НастроитьПоказДанныхПилотногоПроектаФСС();
	АдресПочтовыйВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресПочтовый);
	АдресРегистрацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРегистрации);
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.ДатаНачалаОсновногоОтпуска;
	КонецЕсли;
	
	УстановитьЗаголовкиОрганизацийВФорме();
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
	ЭлементыФормы.НадписьДнейОсновногоОтпуска.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("календарный день","календарных дня","календарных дней",КоличествоДнейОсновногоОтпуска);
	ЭлементыФормы.НадписьДнейДополнительногоОтпуска.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("календарный день","календарных дня","календарных дней",КоличествоДнейДополнительногоОтпуска);
	ЭлементыФормы.НадписьДнейКомпенсации.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейЧасовКомпенсацииОтпуска);
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода = Новый НастройкаПериода;
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументИсправление <> Источник Тогда
						мДокументИсправление = Источник;
						ОбновитьДоступностьЭлементовФормы();
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры // ОбновлениеОтображения()

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура ввода документа-исправления
Процедура ДополнительныеДействияИсправить(Кнопка)

	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура отмены исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"ТаблицаДокумента");
	ОбновитьДоступностьЭлементовФормы();
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода.
//
Процедура ВыбПериодНажатие(Элемент)
	
	мНастройкаПериода.УстановитьПериод(ПериодРасчетаСреднегоЗаработкаНачало, КонецДня(ПериодРасчетаСреднегоЗаработкаОкончание));
	
	Если мНастройкаПериода.Редактировать() Тогда
		ПериодРасчетаСреднегоЗаработкаНачало	= мНастройкаПериода.ПолучитьДатуНачала();
		ПериодРасчетаСреднегоЗаработкаОкончание	= мНастройкаПериода.ПолучитьДатуОкончания();
		ОчиститьВсеРасчеты();
	КонецЕсли;
	
КонецПроцедуры // ВыбПериодНажатие()

Функция ПроверкаУчастияВПилотномПроектеФСС()
	
	Если ДополнительныйОтпуск Тогда
		Если ЗначениеЗаполнено(ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВидРасчетаДополнительногоОтпуска, "ВидПособияСоциальногоСтрахования")) Тогда
			Возврат ОбменСведениямиОПособияхСФСС.ПроверкаУчастияВПилотномПроектеИОтказОтДействия(Организация, ПериодРегистрации, "Расчет отпуска", "Провести расчет")
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина
	
КонецФункции 
	
Процедура КнопкаРассчитатьВсеНажатие(Элемент)
	
	Если Не ПроверкаУчастияВПилотномПроектеФСС() Тогда
		Возврат
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	МассивТаблиц = НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьМассивТабличныхЧастей(ЭтотОбъект, "ПолныйРасчет");
	ТекстВопроса1 = "Рассчитать документ можно только после отмены его проведения. Продолжить?";
	ТекстВопроса2 = "Перед расчетом все таблицы документа будут очищены. Продолжить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	Для каждого ТабличнаяЧасть Из МассивТаблиц Цикл
		ТабличнаяЧасть.Очистить();
	КонецЦикла;
	
	мРассчитываемыеТаблицы.Начисления = Истина;
	мРассчитываемыеТаблицы.РасчетСреднего = Истина;
	
	Рассчитать(мРассчитываемыеТаблицы);
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаРассчитатьНачисленияНажатие(Элемент)
	РассчитатьНачисления();
КонецПроцедуры

Процедура КоманднаяПанельНачисленияРассчитатьНачисления(Кнопка)
	РассчитатьНачисления()
КонецПроцедуры

Процедура КоманднаяПанельРасчетСреднегоРассчитатьСреднийЗаработок(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	МассивТаблиц = НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПолучитьМассивТабличныхЧастей(ЭтотОбъект, "РасчетСреднего");
	ТекстВопроса1 = "Рассчитать документ можно только после отмены его проведения. Продолжить?";
	ТекстВопроса2 = "Перед расчетом все таблицы документа будут очищены. Продолжить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	Для каждого ТабличнаяЧасть Из МассивТаблиц Цикл
		ТабличнаяЧасть.Очистить();
	КонецЦикла;
	
	мРассчитываемыеТаблицы.Начисления = Ложь;
	мРассчитываемыеТаблицы.РасчетСреднего = Истина;
	Рассчитать(мРассчитываемыеТаблицы);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мГоловнаяОрганизация) Тогда 	// Обновим ссылку на головную организацию
		мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	КонецЕсли;
	
	НастроитьПоказДанныхПилотногоПроектаФСС();
	Если ЭлементыФормы.Панель.Страницы.ЗаявлениеНаВыплатуПособия.Видимость Тогда
		Автозаполнение("ДанныеСтрахователя");
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	ПриИзмененииПериодаРегистрации();
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	ПриИзмененииПериодаРегистрации();
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	ПриИзмененииПериодаРегистрации();
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

Процедура СотрудникПриИзменении(Элемент)
	
	Физлицо = Элемент.Значение.Физлицо;
    ОчиститьВсеРасчеты();
	ОпределитьРабочийГодОтпуска();
	Если ЭлементыФормы.Панель.Страницы.ЗаявлениеНаВыплатуПособия.Видимость Тогда
		Автозаполнение("ДанныеСотрудника");
	КонецЕсли;
	АдресПочтовыйВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресПочтовый);
	АдресРегистрацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРегистрации);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(мГоловнаяОрганизация) Тогда
		мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ФизлицоНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // ФизЛицоАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // ФизЛицоОкончаниеВводаТекста()

Процедура ДатаНачалаСобытияПриИзменении(Элемент)
	
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.НастроитьСпискиВыбораЭлементовУправления(ЭтотОбъект, ЭтаФорма);
	
	Если ОсновнойОтпуск Тогда
		Если Не ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) Тогда 
			ДатаНачалаОсновногоОтпуска = ДатаНачалаСобытия;
		ИначеЕсли ДатаНачалаОсновногоОтпуска < ДатаНачалаСобытия Тогда
			ДатаНачалаОсновногоОтпуска = ДатаНачалаСобытия;
			ПриИзмененииПараметровОтпуска(Элемент, "ДатаНачалаОсновногоОтпуска");
			ОпределитьРабочийГодОтпуска();
			Если ДополнительныйОтпуск И ЗначениеЗаполнено(ДатаОкончанияОсновногоОтпуска) И ЗначениеЗаполнено(ДатаНачалаДополнительногоОтпуска) И ДатаНачалаДополнительногоОтпуска <= ДатаОкончанияОсновногоОтпуска Тогда
				ДатаНачалаДополнительногоОтпуска =  КонецДня(ДатаОкончанияОсновногоОтпуска) + 1;
				ПриИзмененииПараметровОтпуска(Элемент, "ДатаНачалаДополнительногоОтпуска");
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ДополнительныйОтпуск Тогда
		Если Не ЗначениеЗаполнено(ДатаНачалаДополнительногоОтпуска) Тогда 
			ДатаНачалаДополнительногоОтпуска = ДатаНачалаСобытия;
		ИначеЕсли ДатаНачалаОсновногоОтпуска < ДатаНачалаСобытия Тогда
			ДатаНачалаДополнительногоОтпуска = ДатаНачалаСобытия;
			ПриИзмененииПараметровОтпуска(Элемент, "ДатаНачалаДополнительногоОтпуска");
		КонецЕсли;
	КонецЕсли;
	
	ОпределитьРасчетныйПериод();
	ОчиститьВсеРасчеты();
	
КонецПроцедуры

Процедура ДатаНачалаОсновногоОтпускаПриИзменении(Элемент)
	
	ПриИзмененииПараметровОтпуска(Элемент, "ДатаНачалаОсновногоОтпуска");
	ОпределитьРабочийГодОтпуска();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода даты окончания основного отпуска
//
//	при изменении даты окончания отпуска будем только проверять заполнено ли количество дней отпуска - если не заполнено,
//  то молча заполняем (без вопросов), если заполнено и неправильное - сообщаем и предлагаем пересчитать количество дней отпуска 
Процедура ДатаОкончанияОсновногоОтпускаПриИзменении(Элемент)
	
	ОчиститьНачисления();
	
	ПриИзмененииПараметровОтпуска(Элемент, "ДатаОкончанияОсновногоОтпуска");
	
	ЭлементыФормы.НадписьДнейОсновногоОтпуска.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("календарный день","календарных дня","календарных дней",КоличествоДнейОсновногоОтпуска);
	
	ОпределитьРабочийГодОтпуска();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода порядка расчета основного отпуска
//
Процедура ПорядокРасчетаОсновногоОтпускаПриИзменении(Элемент)
	
	ОчиститьНачисления();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	ОпределитьРабочийГодОтпуска();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода дней основного отпуска
//
Процедура ДнейОтпускаПриИзменении(Элемент)
	ПриИзмененииПараметровОтпуска(Элемент, "КоличествоДнейОсновногоОтпуска")	
КонецПроцедуры

Процедура ДатаНачалаДополнительногоОтпускаПриИзменении(Элемент)
	ПриИзмененииПараметровОтпуска(Элемент, "ДатаНачалаДополнительногоОтпуска");
КонецПроцедуры

Процедура ДнейЧасовВыходногоПособияПриИзменении(Элемент)
	
	ПриИзмененииКомпенсации();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода даты окончания дополнительного отпуска
Процедура ДатаОкончанияДополнительногоОтпускаПриИзменении(Элемент)
	
	ОчиститьНачисления();
	ПриИзмененииПараметровОтпуска(Элемент, "ДатаОкончанияДополнительногоОтпуска");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода дней дополнительного отпуска
//
Процедура ДнейДопОтпускаПриИзменении(Элемент)
	ПриИзмененииПараметровОтпуска(Элемент, "КоличествоДнейДополнительногоОтпуска")	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода вида доп.отпуска
//
Процедура ВидРасчетаДополнительногоОтпускаПриИзменении(Элемент)
	
	ОчиститьНачисления();
	
	Если Не ОсновнойОтпуск Тогда
		ОпределитьРасчетныйПериод();
	КонецЕсли;
		
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	
	Если ПроцентОплатыДополнительногоОтпуска = 0 И Не Элемент.Значение.Пустая() Тогда
		ПроцентОплатыДополнительногоОтпуска = 100
	КонецЕсли;
	
	// необходимо пересчитать количество календарных дней отпуска
	// т.к. для учебного и дополнительного отпусков расчет разный
	ПриИзмененииПараметровОтпуска(Элемент, "ДатаОкончанияДополнительногоОтпуска");
	НастроитьПоказДанныхПилотногоПроектаФСС();
	
КонецПроцедуры // ВидРасчетаДополнительногоОтпускаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода вида доп.отпуска
//
Процедура ВидРасчетаДополнительногоОтпускаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаНачислениеОтпускаОрганизаций");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	МассивСпособовРасчета = Новый СписокЗначений;
	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням);
	МассивСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке);
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = МассивСпособовРасчета;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;

	МассивВидовРасчета = Новый СписокЗначений;
	МассивВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка);
	МассивВидовРасчета.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни);
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = МассивВидовРасчета;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры // ВидРасчетаДополнительногоОтпускаНачалоВыбора()

Процедура ВидРасчетаДополнительногоОтпускаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
КонецПроцедуры // ВидРасчетаДополнительногоОтпускаАвтоПодборТекста()

Процедура ВидРасчетаДополнительногоОтпускаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // ВидРасчетаДополнительногоОтпускаОкончаниеВводаТекста()

// Процедура - обработчик события "Регулирование" поля ввода процента оплаты допотпуска
//
Процедура ПроцентОплатыРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Направление = 1 Тогда // увеличиваем значение
		Элемент.Значение = Элемент.Значение + 50;
		
	Иначе // = -1 - уменьшаем значение
		Если Элемент.Значение > 50 Тогда
			Элемент.Значение = Элемент.Значение - 50;
			
		Иначе
			Предупреждение("Документом регистрируются только оплачиваемые начисления!");
			
		КонецЕсли;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПроцентОплатыРегулирование()

Процедура ПорядокРасчетаКомпенсацииОтпускаПриИзменении(Элемент)
	ОчиститьНачисления();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
КонецПроцедуры


Процедура ФлажокОсновнойОтпускПриИзменении(Элемент)
	
	Если ОсновнойОтпуск Тогда
		Если Не ЗначениеЗаполнено(ДатаНачалаОсновногоОтпуска) Тогда
			ДатаНачалаОсновногоОтпуска = ДатаНачалаСобытия;
		КонецЕсли;
	Иначе	
		ДатаНачалаОсновногоОтпуска = "";
		ДатаОкончанияОсновногоОтпуска = "";
		КоличествоДнейОсновногоОтпуска = 0;
		ПриИзмененииПараметровОтпуска(Элемент, "ДатаНачалаОсновногоОтпуска");
		ОпределитьРабочийГодОтпуска();
		Если ДополнительныйОтпуск и НЕ ЗначениеЗаполнено(ДатаНачалаДополнительногоОтпуска) Тогда
			ДатаНачалаДополнительногоОтпуска = ДатаНачалаСобытия;
		КонецЕсли;
	КонецЕсли;
	ОпределитьРасчетныйПериод();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	ОбновитьДоступностьПериодовОтпусков();
	
КонецПроцедуры

Процедура ФлажокДополнительныйОтпускПриИзменении(Элемент)
	
	Если Не ДополнительныйОтпуск Тогда
		ДатаНачалаДополнительногоОтпуска = "";
		ДатаОкончанияДополнительногоОтпуска = "";
		КоличествоДнейДополнительногоОтпуска = 0;
		ВидРасчетаДополнительногоОтпуска = "";
		ПриИзмененииПараметровОтпуска(Элемент, "ДатаНачалаДополнительногоОтпуска");
	КонецЕсли;
	Если Не ОсновнойОтпуск Тогда
		ОпределитьРасчетныйПериод();
		Если ДополнительныйОтпуск и НЕ ЗначениеЗаполнено(ДатаНачалаДополнительногоОтпуска) Тогда
			ДатаНачалаДополнительногоОтпуска = ДатаНачалаСобытия;
		КонецЕсли;
	КонецЕсли;
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	ОбновитьДоступностьПериодовОтпусков();
	
КонецПроцедуры

Процедура ФлажокКомпенсацииПриИзменении(Элемент)
	Если Не КомпенсацияОтпуска Тогда
		ДнейЧасовКомпенсацииОтпуска = 0;
		ПриИзмененииКомпенсации();
	КонецЕсли;
	Если Не ОсновнойОтпуск И Не ДополнительныйОтпуск Тогда
		ОпределитьРасчетныйПериод();
	КонецЕсли;
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	ОбновитьДоступностьПериодовОтпусков();
КонецПроцедуры


Процедура НадписьРазмерОтпускныхНажатие(Элемент)
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Начисления;
	ТекущийЭлемент = ЭлементыФормы.Начисления;

КонецПроцедуры

Процедура НадписьСреднийЗаработокНажатие(Элемент)
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.РасчетСреднего;
	
КонецПроцедуры

Процедура ЗаголовокДополнительнойИнформационнойНадписиНажатие(Элемент)
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ПоказатьДополнительнуюФорму(ЭтотОбъект, ЭтаФорма)
КонецПроцедуры


Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	Если ЗначениеЗаполнено(мДокументИсправление) Тогда
		мДокументИсправление.ПолучитьФорму(, ЭтаФорма).Открыть();
	ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
		мДокументСторнирование.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ПериодРасчетаСреднегоЗаработкаНачалоПриИзменении(Элемент)
    ОчиститьВсеРасчеты();
КонецПроцедуры

Процедура ПериодРасчетаСреднегоЗаработкаОкончаниеПриИзменении(Элемент)
    ОчиститьВсеРасчеты();
КонецПроцедуры

Процедура ПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если ЭлементыФормы.Панель.Страницы[ТекущаяСтраница] = ЭлементыФормы.Панель.Страницы.РасчетСреднего Тогда
		
		ОсновнойСпособРасчета = ОсновнойВариантРасчетаДокумента().СпособРасчета;
		ОдинРасчет = Истина;
		Если ОсновнойОтпуск Тогда
			ОдинРасчет = ОсновнойСпособРасчета = ?(ПорядокРасчетаОсновногоОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
		КонецЕсли;
		Если ОдинРасчет И ДополнительныйОтпуск Тогда
			ОдинРасчет = ОсновнойСпособРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ВидРасчетаДополнительногоОтпуска).СпособРасчета
		КонецЕсли;
		Если ОдинРасчет И КомпенсацияОтпуска Тогда
			ОдинРасчет = ОсновнойСпособРасчета = ?(ПорядокРасчетаКомпенсацииОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням,Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоШестидневке)
		КонецЕсли;
		Если Не ОдинРасчет Тогда
			ЭлементыФормы.ПанельРасчетСреднего.ТекущаяСтраница = ЭлементыФормы.ПанельРасчетСреднего.Страницы.ОбаРасчетаСреднего;
			ТекущийЭлемент = ЭлементыФормы.РасчетСреднегоПоКалендарным1;
		ИначеЕсли ОсновнойСпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуДляОтпускаПоКалендарнымДням Тогда
			ЭлементыФормы.ПанельРасчетСреднего.ТекущаяСтраница = ЭлементыФормы.ПанельРасчетСреднего.Страницы.РасчетСреднегоПоКалендарным;
			ТекущийЭлемент = ЭлементыФормы.РасчетСреднегоПоКалендарным;
		Иначе
			ЭлементыФормы.ПанельРасчетСреднего.ТекущаяСтраница = ЭлементыФормы.ПанельРасчетСреднего.Страницы.РасчетСреднегоПоШестидневке;
			ТекущийЭлемент = ЭлементыФормы.РасчетСреднегоПоШестидневке;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры


Процедура АдресРегистрацииВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтруктураАдреса = Новый Структура("Значение", АдресРегистрации);
	УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
	АдресРегистрации = СтруктураАдреса.Значение;
	Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
КонецПроцедуры

Процедура АдресПочтовыйВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтруктураАдреса = Новый Структура("Значение", АдресПочтовый);
	УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
	АдресПочтовый = СтруктураАдреса.Значение;
	Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
КонецПроцедуры

Процедура БанкПриИзменении(Элемент)
	
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеБанка(Элемент.Значение, ЭтотОбъект);
	
КонецПроцедуры

Процедура КнопкаОбновитьДанныеСотрудникаНажатие(Элемент)
	Автозаполнение("ДанныеСотрудника");
	АдресПочтовыйВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресПочтовый);
	АдресРегистрацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРегистрации);
КонецПроцедуры

Процедура ПечатьЗаявлениеНажатие(Элемент)
	Печать("ЗаявлениеНаПособие")
КонецПроцедуры

Процедура ПечатьБланкЗаявленияНажатие(Элемент)
	Печать("ЗаявлениеЧистыйБланк")
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Начисления

Процедура ОбработчикОжиданияНачисленияПриАктивизацииСтроки()
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ДанныеСтроки <> Неопределено Тогда
		ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
		Если ДанныеСтрокиВидРасчета = Неопределено Тогда
			ДанныеСтрокиВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Начисления, мСведенияОВидахРасчетаПоказатели, , Истина);
	
	МожноРедактироватьСтроку = ДанныеСтроки = Неопределено Или Не ДанныеСтроки.Сторно Или ДанныеСтроки.СторнируемыйДокумент <> ПерерассчитываемыйДокумент Или Не ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	
КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияНачисленияПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Отказ = ДанныеСтроки.Сторно И ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент И ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломИзменения(Элемент, Отказ)
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Отказ = ДанныеСтроки.Сторно И ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент И ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
КонецПроцедуры

Процедура НачисленияПередУдалением(Элемент, Отказ)
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ВыполнитьДействияПередУдалениемНачисления(Элемент, ЭтотОбъект, Отказ)
КонецПроцедуры

Процедура НачисленияПослеУдаления(Элемент)
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" строки таблицы
//
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.Сторно = Ложь;
		ТекущаяСтрока.Показатель1 = 100;
		
		ИндексСтроки = Начисления.Индекс(ТекущаяСтрока);
		Если ИндексСтроки > 0  Тогда
			ТекущаяСтрока.ДатаНачала = Начисления[ИндексСтроки-1].ДатаОкончания + мДлинаСуток;
		КонецЕсли;
		
		Если ТекущаяСтрока.ДатаНачала < ДатаОкончанияОсновногоОтпуска или НЕ ЗначениеЗаполнено(ДатаНачалаДополнительногоОтпуска) Тогда
			Если ПорядокРасчетаОсновногоОтпуска = Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням Тогда
				ТекущаяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни;
				
			Иначе
				ТекущаяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка;
				
			КонецЕсли;
			
		Иначе
			ТекущаяСтрока.ВидРасчета = ВидРасчетаДополнительногоОтпуска;
			
		КонецЕсли;
		
		ТекущаяСтрока.Авторасчет = Истина;
		
	КонецЕсли;
	
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ВыполнитьДействияПриНачалеРедактированияНачисления(ЭтаФорма, Элемент, НоваяСтрока)
	
КонецПроцедуры // НачисленияПриНачалеРедактирования()

Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ОбработатьОтображениеПоказателейДляРасчета(Элемент, ОформленияСтрок, мСведенияОВидахРасчетаПоказатели);
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		// сторно запись - красным
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		Иначе 	
			Ячейки.СторнируемыйДокумент.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеСтроки.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") Тогда
			
			// проставим отметки незаполненного
			СпособРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ДанныеСтроки.ВидРасчета).СпособРасчета;
			
			ТребуетсяБазовыйПериод = СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом 
									Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
									Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом;
		
			Если Элемент.Колонки.ДатаНачала.Видимость Тогда
				Ячейки.ДатаНачала.Видимость = ТребуетсяБазовыйПериод;
				Ячейки.ДатаНачала.ТолькоПросмотр = Не ТребуетсяБазовыйПериод;
				Ячейки.ДатаНачала.ОтметкаНезаполненного = ТребуетсяБазовыйПериод и НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаНачала)
			КонецЕсли;
			Если Элемент.Колонки.ДатаОкончания.Видимость Тогда
				Ячейки.ДатаОкончания.Видимость = ТребуетсяБазовыйПериод;
				Ячейки.ДатаОкончания.ТолькоПросмотр = Не ТребуетсяБазовыйПериод;
				Ячейки.ДатаОкончания.ОтметкаНезаполненного = ТребуетсяБазовыйПериод и НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончания)
			КонецЕсли;
			
			Если ДанныеСтроки.ВидРасчета <> ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаШестидневкаБезУвольнения 
				И ДанныеСтроки.ВидРасчета <> ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.КомпенсацияОтпускаКалендарныеДниБезУвольнения Тогда
				Ячейки.ДатаНачалаСобытия.ТолькоПросмотр = Истина;
				Ячейки.ДатаНачалаСобытия.ОтметкаНезаполненного = Ложь;
			КонецЕсли;

		Иначе
			Ячейки.ЧислоМесяцев.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		ЯчейкаСКартинкой = Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);	
		
	КонецЦикла;	
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" строки таблицы
//
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	ЭтоОтпуск = НЕ ТекущаяСтрока.Сторно 
		И (ТекущаяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни
			ИЛИ ТекущаяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка
			ИЛИ ТекущаяСтрока.ВидРасчета = ВидРасчетаДополнительногоОтпуска); 
			
	// Авторасчет незаполненных реквизитов строки
	Если ЭтоОтпуск Тогда
		ВыполнитьАвторасчетРеквизитовСтрокиНачислений(ТекущаяСтрока);
	КонецЕсли;
	
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ВыполнитьДействияПослеРедактированияНачисления(ЭтаФорма, ТекущаяСтрока);
	
		// Разбивка строк на помесячные
	Если ЭтоОтпуск Тогда
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаНачала) И ЗначениеЗаполнено(ТекущаяСтрока.ДатаОкончания) Тогда
			РазницаВМесяцах = (Год(ТекущаяСтрока.ДатаОкончания)*12 + Месяц(ТекущаяСтрока.ДатаОкончания)) - (Год(ТекущаяСтрока.ДатаНачала)*12 + Месяц(ТекущаяСтрока.ДатаНачала));
			Если РазницаВМесяцах > 0 Тогда
				
				ТекстВопроса = "Разбить строку начислений на помесячные записи?";
				Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ПроведениеРасчетов.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(ТекущаяСтрока, Начисления);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	НачислениеОтпускаРаботникамОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // НачисленияПриОкончанииРедактирования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Начисления

// Процедура - обработчик события "ПриИзменении" поля ввода даты начала
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	
	ВидРасчета = ЭлементыФормы.Начисления.ТекущиеДанные.ВидРасчета;
	Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") 
		Или ВидРасчета = ВидРасчетаДополнительногоОтпуска
		Или ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпКалендарныеДни
		Или ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОплатаПоСреднемуОтпШестидневка Тогда
		Возврат;
	КонецЕсли;

	ЭлементыФормы.Начисления.ТекущиеДанные.ДатаНачалаСобытия = Элемент.Значение;
	
КонецПроцедуры // НачисленияДатаНачалаПриИзменении()

Процедура НачисленияСторнируемыйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	Если Организация.Пустая() Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не выбрана организация!"));
		Возврат;
	КонецЕсли;
		
	РаботаСДиалогамиЗК.ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, ЭтаФорма, Ссылка, Организация, СтандартнаяОбработка, Истина);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РасчетСреднегоПоКалендарным

// Процедура - обработчик события "ПриНачалеРедактирования" строки таблицы
//
Процедура РасчетСреднегоПоКалендарнымПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущаяСтрока.КоэффициентИндексации = 1;
	КонецЕсли;
	
КонецПроцедуры // РасчетСреднегоПоКалендарнымПриНачалеРедактирования()

Процедура РасчетСреднегоПоКалендарнымПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если Элемент.Колонки.КоэффициентИндексации.Видимость Тогда
		СсылкаВР = ДанныеСтроки.ВидРасчета;
		ОформлениеСтроки.Ячейки.КоэффициентИндексации.ТолькоПросмотр = ТолькоПросмотр 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоПоКалендарнымПослеУдаления(Элемент)
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
КонецПроцедуры

Процедура РасчетСреднегоПоКалендарнымПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ОбновитьИнформационнуюНадписьСреднийЗаработок();
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоПоКалендарнымВидРасчетаПриИзменении(Элемент)
	СсылкаВР = Элемент.Значение;
	Если СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые Тогда
		ЭлементыФормы.РасчетСреднегоПоКалендарным.ТекущиеДанные.КоэффициентИндексации = 1;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоПоКалендарным1ВидРасчетаПриИзменении(Элемент)
	СсылкаВР = Элемент.Значение;
	Если СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые Тогда
		ЭлементыФормы.РасчетСреднегоПоКалендарным1.ТекущиеДанные.КоэффициентИндексации = 1;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля выбора вида заработка
//
Процедура РасчетСреднегоПоКалендарнымВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Элемент.СписокВыбора;
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
	
КонецПроцедуры // РасчетСреднегоПоКалендарнымВидРасчетаНачалоВыбора()

Процедура РасчетСреднегоПоКалендарнымВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("РасчетСреднего"), Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"));
	
КонецПроцедуры

Процедура РасчетСреднегоПоКалендарнымВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("РасчетСреднего"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РасчетСреднегоПоШестидневке

// Процедура - обработчик события "ПриНачалеРедактирования" строки таблицы
//
Процедура РасчетСреднегоПоШестидневкеПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущаяСтрока.КоэффициентИндексации = 1;
	КонецЕсли;
	
КонецПроцедуры // РасчетСреднегоПоШестидневкеПриНачалеРедактирования()

Процедура РасчетСреднегоПоШестидневкеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если Элемент.Колонки.КоэффициентИндексации.Видимость Тогда
		СсылкаВР = ДанныеСтроки.ВидРасчета;
		ОформлениеСтроки.Ячейки.КоэффициентИндексации.ТолькоПросмотр = ТолькоПросмотр
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоПоШестидневкеПослеУдаления(Элемент)
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
КонецПроцедуры

Процедура РасчетСреднегоПоШестидневкеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ОбновитьИнформационнуюНадписьСреднийЗаработок();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля выбора вида заработка
//
Процедура РасчетСреднегоПоШестидневкеВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Элемент.СписокВыбора;
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
	
КонецПроцедуры // РасчетСреднегоПоШестидневкеВидРасчетаНачалоВыбора()

Процедура РасчетСреднегоПоШестидневкеВидРасчетаПриИзменении(Элемент)
	СсылкаВР = Элемент.Значение;
	Если СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые Тогда
		ЭлементыФормы.РасчетСреднегоПоШестидневке.ТекущиеДанные.КоэффициентИндексации = 1;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоПоШестидневке1ВидРасчетаПриИзменении(Элемент)
	СсылкаВР = Элемент.Значение;
	Если СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые Тогда
		ЭлементыФормы.РасчетСреднегоПоШестидневке.ТекущиеДанные.КоэффициентИндексации = 1;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоПоШестидневкеВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("РасчетСреднего"), Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"));
	
КонецПроцедуры

Процедура РасчетСреднегоПоШестидневкеВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("РасчетСреднего"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400; // в секундах
мРассчитываемыеТаблицы = Новый Структура("Начисления,РасчетСреднего");
мСведенияОВидахРасчета = Новый Соответствие;
мСведенияОВидахРасчетаПоказатели = Новый Соответствие;

мДокументИсправление = Документы.НачислениеОтпускаРаботникамОрганизаций.ПустаяСсылка();
мДокументСторнирование = Документы.Сторнирование.ПустаяСсылка();

мДополнительныеСвойства = Новый Структура()