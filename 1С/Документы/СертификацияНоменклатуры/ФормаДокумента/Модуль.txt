////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ДокументВводитсяНаОснованииПотоком;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Анализы,ЭлементыФормы.КоманднаяПанельАнализы.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Устанавливает внешний вид экранной формы в зависимости от Вида операции
//
Процедура УстановитьВидимость()

	ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Доступность = ДоступностьВидаОперации;
	Для Каждого КнопкаМеню Из ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Кнопки Цикл
		КнопкаМеню.Доступность = ДоступностьВидаОперации;
	КонецЦикла;
	
	Флаг = РезультатСертификации = Перечисления.РезультатыСертификацииНоменклатуры.Сертификат;
	ЭлементыФормы.НомерСертификата       .Доступность = Флаг;
	ЭлементыФормы.ДатаСертификата        .Доступность = Флаг;
	ЭлементыФормы.СрокГодностиСертификата.Доступность = Флаг;
	
КонецПроцедуры // УстановитьВидимость()

// Очистка значений реквизита в щзависимости от итогов сертификации
// 
Процедура ОчиститьДанныеСертификата()

	Если РезультатСертификации = Перечисления.РезультатыСертификацииНоменклатуры.ОтказаноВСертификации Тогда
		НомерСертификата        = "";
		ДатаСертификата         = '00010101';
		СрокГодностиСертификата = '00010101';
	Иначе
		ЗаполнитьДатуСертификата();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ОчиститьДанныеСертификата()

// Установка даты сертификации по умолчанию
// 
Процедура ЗаполнитьДатуСертификата()

	Если ДатаСертификата = '00010101' Тогда
		ДатаСертификата = Дата;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьДатуСертификата()

// Процедура устанавливает тип поля ЗначениеПоказателя
//
Процедура УстановитьТипЗначенияПоказателяВСтроке(ТекДанные)
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекДанные.ПоказательАнализа) Тогда
		Если НЕ ТекДанные.ЗначениеПоказателя = Неопределено Тогда
			ТекДанные.ЗначениеПоказателя = Неопределено;
		КонецЕсли;
	Иначе
		ЗначТип = ТекДанные.ПоказательАнализа.ВидРезультатаАнализа.ТипЗначения.ПривестиЗначение(ТекДанные.ЗначениеПоказателя);
		Если НЕ ТекДанные.ЗначениеПоказателя = ЗначТип Тогда
			ТекДанные.ЗначениеПоказателя = ЗначТип;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УстановитьТипЗначенияПоказателяВСтроке()

// Процедура устанавливает флаг соответствия результата нормативному значению.
//
Процедура УстановитьФлагСоответствияНормативу()
	
	ТекДанные = ЭлементыФормы.Анализы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Показатель = ТекДанные.ПоказательАнализа;
	ВидПоказателя = Показатель.ВидРезультатаАнализа;
	
	Флаг = Ложь;
	Если НЕ ЗначениеЗаполнено(Показатель) ИЛИ НЕ ЗначениеЗаполнено(ВидПоказателя) Тогда
		
		// Значение Ложь.
		
	ИначеЕсли ВидПоказателя = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.ЧислоВИнтервале Тогда
		
		Флаг = ТекДанные.ЗначениеПоказателя >= Показатель.МинЗначение И ТекДанные.ЗначениеПоказателя <= Показатель.МаксЗначение;
		
	ИначеЕсли ВидПоказателя = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.Погрешность Тогда
		
		Флаг = ТекДанные.ЗначениеПоказателя >= Показатель.МинЗначение - Показатель.МаксЗначение
		     И ТекДанные.ЗначениеПоказателя <= Показатель.МинЗначение + Показатель.МаксЗначение;
		
	ИначеЕсли ВидПоказателя = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.Поддиапазон Тогда
		
		Флаг = (ТекДанные.ЗначениеПоказателя     >= Показатель.МинЗначение И ТекДанные.ЗначениеПоказателя     <= Показатель.МаксЗначение)
		     И (ТекДанные.МаксЗначениеПоказателя >= Показатель.МинЗначение И ТекДанные.МаксЗначениеПоказателя <= Показатель.МаксЗначение);
		
	ИначеЕсли ВидПоказателя = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.ЗначениеИзСписка Тогда
		
		Флаг = НЕ Показатель.ДопустимыеЗначенияПоказателей.Найти( ТекДанные.ЗначениеПоказателя, "ЗначениеПоказателя") = Неопределено;
		
	КонецЕсли;
	
	ТекДанные.СоответствуетНормативу = Флаг;
	
КонецПроцедуры // УстановитьФлагСоответствияНормативу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
 
// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Отказ = Не УправлениеСертификациейНоменклатуры.ИспользоватьСертификациюНоменклатуры(Истина);

	ДокументВводитсяНаОснованииПотоком = ложь;
	Если ЗначениеЗаполнено(ПараметрОснование) и ЭтоНовый() Тогда
		
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ТабличнаяЧастьОснования = ДокументОснование.Товары;
			НужнаВнутренняяСертификация = ложь;
			НужнаВнешняяСертификация = истина;
			
			Если не УправлениеСертификациейНоменклатуры.ВыбратьСериюИзДокументаОснования(ТабличнаяЧастьОснования, НужнаВнешняяСертификация, НужнаВнутренняяСертификация, Номенклатура, СерияНоменклатуры, "Сертификация") Тогда
				Отказ = истина;
				Возврат;
			КонецЕсли;
			
			ДокументВводитсяНаОснованииПотоком = истина;
		КонецЕсли;
		
	ИначеЕсли ЭтоНовый() Тогда
		
		ВидОперации = Перечисления.ВидыОперацийСертификацияНоменклатуры.внешняя;
		
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");

		Если (ЗначениеЗаполнено(ПараметрОснование)
			И ЗначениеЗаполнено(ПараметрОбъектКопирования))
			ИЛИ ТипЗнч(ПараметрОснование) = Тип("СправочникСсылка.СерииНоменклатуры") Тогда
			
			// Заполнить реквизиты значениями по умолчанию.
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
			ЗаполнитьДатуСертификата();
			Если ЗначениеЗаполнено(ДокументОснование) Тогда
				ЭлементУправления = ЭлементыФормы.Найти("НомерСертификата");
				Если ЭлементУправления <> Неопределено Тогда // есть такой
					ТекущийЭлемент = ЭлементУправления;
				КонецЕсли;
			КонецЕсли;	
			Если ПараметрОснование = Неопределено Тогда
				РезультатСертификации = Перечисления.РезультатыСертификацииНоменклатуры.Сертификат;
			КонецЕсли;
			ОрганПоСертификации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОрганСертификации");
		КонецЕсли;
	КонецЕсли;
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										ВидОперации.Метаданные().ЗначенияПеречисления,
										Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
										
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	УстановитьВидимость();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()	

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка.Имя = "внешняя" Тогда
		Если Анализы.Количество() > 0 Тогда
			Если Вопрос("Таблица анализов будет очищена. Продолжить?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да) = КодВозвратаДиалога.Нет Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		Анализы.Очистить();
	КонецЕсли;
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийСертификацияНоменклатуры[Кнопка.Имя];
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	ОчиститьДанныеСертификата();
	
	Если ВидОперации = Перечисления.ВидыОперацийСертификацияНоменклатуры.внешняя Тогда
		НормативныйДокумент = Справочники.НормативныеДокументыСертификацииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю из меню "Перейти".
// командной панели формы.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)

	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура заполнения таб. части показателями по типовому анализу
//
Процедура ЗаполнитьПоТиповомуАнализу(Очистить)
	
	Форма = Справочники.ТиповыеАнализыНоменклатуры.ПолучитьФормуВыбора(, ЭтаФорма, ЭтаФорма);
	Форма.ЗакрыватьПриВыборе = Истина;
	Форма.МножественныйВыбор = Ложь;
	Форма.РежимВыбора = Истина;
	Форма.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
	ТиповойАнализ = Форма.ОткрытьМодально();
	Если ТиповойАнализ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Очистить Тогда
		Анализы.Очистить();
	КонецЕсли;
	
	Для Каждого ТекПоказатель Из ТиповойАнализ.ПоказателиАнализа Цикл
		
		НоваяСтрока = Анализы.Добавить();
		НоваяСтрока.ПоказательАнализа = ТекПоказатель.ПоказательАнализа;
		УстановитьТипЗначенияПоказателяВСтроке(НоваяСтрока);
		НоваяСтрока.ЕдиницаИзмерения =
			?(  НоваяСтрока.ПоказательАнализа.ВидРезультатаАнализа = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.ЧислоВИнтервале
			ИЛИ НоваяСтрока.ПоказательАнализа.ВидРезультатаАнализа = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.Погрешность
			ИЛИ НоваяСтрока.ПоказательАнализа.ВидРезультатаАнализа = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.Поддиапазон,
			НоваяСтрока.ПоказательАнализа.ЕдиницаИзмерения,
			Неопределено);
			
	КонецЦикла;

КонецПроцедуры // ЗаполнитьПоТиповомуАнализу()

// Процедура вызывается при выборе пункта подменю из меню "Заполнить".
//
Процедура КоманднаяПанельАнализыЗаполнитьПоТиповомуАнализу(Кнопка)
	
	Если Анализы.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

	КонецЕсли;
	
	ЗаполнитьПоТиповомуАнализу(Истина);
	
КонецПроцедуры // КоманднаяПанельАнализыЗаполнитьПоТиповомуАнализу()

// Процедура вызывается при выборе пункта подменю из меню "Заполнить".
//
Процедура КоманднаяПанельАнализыДобавитьИзТиповогоАнализа(Кнопка)
	
	ЗаполнитьПоТиповомуАнализу(Ложь);
	
КонецПроцедуры // КоманднаяПанельАнализыДобавитьИзТиповогоАнализа()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

Процедура РезультатСертификацииПриИзменении(Элемент)

	ОчиститьДанныеСертификата();
	
КонецПроцедуры // РезультатСертификацииПриИзменении()

Процедура НоменклатураПриИзменении(Элемент)

	СерияНоменклатуры   = Справочники.СерииНоменклатуры.ПустаяСсылка();
	НормативныйДокумент = УправлениеСертификациейНоменклатуры.ПолучитьНормативныйДокумент(Элемент.Значение);
	УстановитьВидимость();
	
КонецПроцедуры // НоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СерияНоменклатуры".
//
Процедура СерияНоменклатурыПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		Номенклатура = СерияНоменклатуры.Владелец;
	КонецЕсли;
	НормативныйДокумент = УправлениеСертификациейНоменклатуры.ПолучитьНормативныйДокумент(Номенклатура, СерияНоменклатуры);
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	ОчиститьДанныеСертификата();	

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля
//
Процедура АнализыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Ячейки = ОформлениеСтроки.Ячейки;
	Ячейки.МаксЗначениеПоказателя.ТолькоПросмотр = Ложь;
	Если ДанныеСтроки.ПоказательАнализа.ВидРезультатаАнализа = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.Поддиапазон Тогда
		Ячейки.ЗначениеПоказателя    .Видимость = Ложь;
		Ячейки.МинЗначениеПоказателя .Видимость = Истина;
		Ячейки.МаксЗначениеПоказателя.Видимость = Истина;
		Ячейки.ЕдиницаИзмерения      .Видимость = Истина;
	ИначеЕсли ДанныеСтроки.ПоказательАнализа.ВидРезультатаАнализа = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.ЧислоВИнтервале
	      ИЛИ ДанныеСтроки.ПоказательАнализа.ВидРезультатаАнализа = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.Погрешность Тогда
		Ячейки.ЗначениеПоказателя    .Видимость = Ложь;
		Ячейки.МинЗначениеПоказателя .Видимость = Истина;
		Ячейки.МаксЗначениеПоказателя.Видимость = Ложь;
		Ячейки.ЕдиницаИзмерения      .Видимость = Истина;
		Ячейки.МаксЗначениеПоказателя.ТолькоПросмотр = Истина;
	Иначе
		Ячейки.ЗначениеПоказателя    .Видимость = Истина;
		Ячейки.МинЗначениеПоказателя .Видимость = Ложь;
		Ячейки.МаксЗначениеПоказателя.Видимость = Ложь;
		Ячейки.ЕдиницаИзмерения      .Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // АнализыПриВыводеСтроки()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля
//
Процедура АнализыПриАктивизацииСтроки(Элемент)
	
	ТекДанные = ЭлементыФормы.Анализы.ТекущиеДанные;
	УстановитьТипЗначенияПоказателяВСтроке(ТекДанные);
	
КонецПроцедуры // АнализыПриАктивизацииСтроки()

// Процедура - обработчик события "ПриИзменении" поля "ПоказательАнализа" табличного поля "Анализы"
//
Процедура АнализыПоказательАнализаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.Анализы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьТипЗначенияПоказателяВСтроке(ТекДанные);
	УстановитьФлагСоответствияНормативу();
	
	ТекДанные.ЕдиницаИзмерения =
		?(  ТекДанные.ПоказательАнализа.ВидРезультатаАнализа = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.ЧислоВИнтервале
		ИЛИ ТекДанные.ПоказательАнализа.ВидРезультатаАнализа = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.Погрешность
		ИЛИ ТекДанные.ПоказательАнализа.ВидРезультатаАнализа = ПланыВидовХарактеристик.ВидыРезультатовАнализаНоменклатуры.Поддиапазон,
		ТекДанные.ПоказательАнализа.ЕдиницаИзмерения,
		Неопределено);
	
КонецПроцедуры // АнализыПоказательАнализаПриИзменении()

Процедура АнализыЗначениеПоказателяПриИзменении(Элемент)
	
	УстановитьФлагСоответствияНормативу();
	
КонецПроцедуры // АнализыЗначениеПоказателяПриИзменении()

Процедура АнализыМинЗначениеПоказателяПриИзменении(Элемент)
	
	УстановитьФлагСоответствияНормативу();
	
КонецПроцедуры // АнализыМинЗначениеПоказателяПриИзменении()

Процедура АнализыМаксЗначениеПоказателяПриИзменении(Элемент)
	
	УстановитьФлагСоответствияНормативу();
	
КонецПроцедуры // АнализыМаксЗначениеПоказателяПриИзменении()

ДоступностьВидаОперации = Истина;