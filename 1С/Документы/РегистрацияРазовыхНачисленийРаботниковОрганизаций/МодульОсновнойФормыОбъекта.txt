////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Список доступных для начисления способов расчета
Перем мСписокДоступныхСпособовРасчета;

Перем мСведенияОВидахРасчетаОснНачислений;
Перем мСведенияОВидахРасчетаДопНачислений;

Перем мСписокКодовВычетов;
Перем мКодВычетаПоМатпомощиПриРожденииРебенка;
Перем мСоответствиеДоходовИВычетов;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит "Результат" текущей строки
Перем мСтарыйРезультат;
// Хранит "ОтработаноДней" текущей строки
Перем мБылоОтработаноДней;
// Хранит "ОтработаноЧасов" текущей строки
Перем мБылоОтработаноЧасов;
// Хранит "ОтработаноДнейПоПятидневке" текущей строки
Перем мБылоОтработаноДнейПоПятидневке;
// Хранит "ОтработаноЧасовПоПятидневке" текущей строки
Перем мБылоОтработаноЧасовПоПятидневке;
// Хранит "НормаДней" текущей строки
Перем мБылоНормаДней;
// Хранит "НормаЧасов" текущей строки
Перем мБылоНормаЧасов;
// Хранит "НормаДнейПоПятидневке" текущей строки
Перем мБылоНормаДнейПоПятидневке;
// Хранит "НормаЧасовПоПятидневке" текущей строки
Перем мБылоНормаЧасовПоПятидневке;
// Хранит "Результат" текущей строки ТЧ "ДополнительныеНачисления"
Перем мСтарыйРезультатТЧДополнительныеНачисления;
// Хранит "ОплаченоДнейЧасов" текущей строки
Перем мБылоОплаченоДнейЧасов;
// Хранит "ОплаченоДнейЧасов" текущей строки ТЧ "ДополнительныеНачисления"
Перем мБылоОплаченоДнейЧасовТЧДополнительныеНачисления;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

// Хранит имя табличного поля для заполнения списком сотрудников
Перем мИмяЗаполняемойТаблицы;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

// Механизм исправлений
Перем мДокументыИсправление;
Перем мДокументСторнирование;
Перем мСотрудникиИсправление;
Перем мМенюИсправление;
Перем мКнопкаИсправлениеТекущийСотрудник;
Перем мКнопкаИсправлениеВесьДокумент;
Перем мКнопкаИсправлениеСписокСотрудников;
Перем мКнопкаОтменаИсправление;
Перем мТекущийСотрудник;

// Механизм дополнительных колонок в табличных полях документа
Перем мВидимостьДополнительныхКолонок;
Перем мДополнительныеКолонки;
Перем мТабличныеПоляСДополнительнымиКолонками;

Перем мРежимЗаписи;

Перем РучноеИзменениеПоказателей;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти()
			
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(ОсновныеНачисления);
	ТабличныеЧасти.Добавить(ДополнительныеНачисления);
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти(мСведенияОВидахРасчетаОснНачислений, ТабличныеЧасти, "РазовыеНачисленияИУдержания");
	
КонецПроцедуры // ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти

// Процедура определяет параметры для формы подбора сотрудников и открывает ее
//
Процедура ОткрытьФормуПодбораСотрудниковТабличнойЧасти(ИмяТабличнойЧасти)
	
	ПараметрыПодбора = ЗаполнениеДокументовЗК.ПараметрыПодбораСотрудниковТабличнойЧасти(ЭтотОбъект, ИмяТабличнойЧасти, мСведенияОВидахРасчетаОснНачислений);
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы[ИмяТабличнойЧасти], Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1, , ЭтотОбъект[ИмяТабличнойЧасти].ВыгрузитьКолонку("Сотрудник"), , , ПараметрыПодбора);
	
КонецПроцедуры // ОткрытьФормуПодбораСотрудниковТабличнойЧасти

Процедура ОбработкаВыбораТабличнойЧасти(ИмяТабличнойЧасти, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ЭтотОбъект[ИмяТабличнойЧасти].НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			СтрокаТабличнойЧасти = ЭтотОбъект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Сотрудник	= ВыбранноеЗначение;
			СтрокаТабличнойЧасти.Авторасчет	= Истина;
			
			ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяСтрока = СтрокаТабличнойЧасти;
			ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(ВыбранноеЗначение, Дата, ЭлементыФормы[ИмяТабличнойЧасти]);
		КонецЕсли;
	
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
		СтандартнаяОбработка = Ложь;
		
		ДобавленныеСтроки = ЗаполнениеДокументовЗК.ОбработатьПодборСотрудниковТабличнойЧасти(ДокументОбъект, ИмяТабличнойЧасти, ВыбранноеЗначение);
		
		Для Каждого ДобавленнаяСтрока Из ДобавленныеСтроки Цикл
			
			Если ИмяТабличнойЧасти = "ОсновныеНачисления" Тогда
				Если ЗначениеЗаполнено(ДобавленнаяСтрока.ДатаНачала) Тогда
					ДобавленнаяСтрока.ДатаНачалаСобытия = ДобавленнаяСтрока.ДатаНачала;
				КонецЕсли;
			КонецЕсли;
			
			Если ИмяТабличнойЧасти = "ДополнительныеНачисления" Тогда
				СведенияОВР = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчетаДопНачислений, ДобавленнаяСтрока.ВидРасчета);
				КодВычета = мСоответствиеДоходовИВычетов[СведенияОВР.КодДоходаНДФЛ];
				ДобавленнаяСтрока.КодВычета = КодВычета;
				Если КодВычета = мКодВычетаПоМатпомощиПриРожденииРебенка Тогда
					ДобавленнаяСтрока.СуммаВычета = 1
				КонецЕсли;
			КонецЕсли;
			
			ЭлементыФормы[ИмяТабличнойЧасти].ТекущаяСтрока = ДобавленнаяСтрока;
			ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(ДобавленнаяСтрока.Сотрудник, ?(ЗначениеЗаполнено(ДобавленнаяСтрока.ДатаНачала), ДобавленнаяСтрока.ДатаНачала, Дата), ЭлементыФормы[ИмяТабличнойЧасти]);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбораТабличнойЧасти

// Устанавливает значение показателей начисления для общих показателей в целом по компании и в целом по подразделению
//
Процедура ПоказательПриИзменении(Значение, парамПоказатель,ТабличнаяЧасть)
	
	ТекущаяСтрока = ЭлементыФормы[ТабличнаяЧасть].ТекущаяСтрока;
	ВидРасчета = ТекущаяСтрока.ВидРасчета;
	
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, ВидРасчета);
	Если ТабличнаяЧасть = "ОсновныеНачисления" Тогда
		ТЧ = ОсновныеНачисления;
	Иначе
		ТЧ = ДополнительныеНачисления;
	КонецЕсли;
	
	// "запоминаем" ручное изменение показателя
	ЗаполнениеДокументовЗК.ЗапомнитьРучноеИзменениеПоказателя(РучноеИзменениеПоказателей, ТекущаяСтрока, парамПоказатель);
	
	КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
	
	Если КоличествоПоказателей > (парамПоказатель - 1) Тогда
		Показатель  = СведенияОВидеРасчета["Показатель" + парамПоказатель];
	Иначе
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.ВидРасчета.ПроизвольнаяФормулаРасчета Тогда
		Если ТабличнаяЧасть <> "Удержания" Тогда
			СтрПодразделение= ТекущаяСтрока.ПодразделениеОрганизации;
		КонецЕсли;
		Если Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Тогда
			
			ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти();			
			
			Для Каждого СтрокаНачисления Из ТЧ Цикл
				
				ВидРасчета = СтрокаНачисления.ВидРасчета;
				СведенияОВидеРасчета = мСведенияОВидахРасчетаОснНачислений[ВидРасчета];

				КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
					Если ПоказательВР.Предопределенный Тогда 
						Продолжить;
					КонецЕсли;
					Если ПоказательВР = Показатель Тогда
						СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;

		ИначеЕсли Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
			Если ТабличнаяЧасть <> "Удержания" Тогда
				
				ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти();
				
				Для Каждого СтрокаНачисления Из ТЧ Цикл
					ВидРасчета = СтрокаНачисления.ВидРасчета;
					
					СведенияОВидеРасчета = мСведенияОВидахРасчетаОснНачислений[ВидРасчета];

					КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
					Если СтрокаНачисления.ПодразделениеОрганизации = СтрПодразделение Тогда
						Для СчПоказателей = 1 По КоличествоПоказателей Цикл
							ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
							Если ПоказательВР.Предопределенный Тогда 
								Продолжить;
							КонецЕсли;
							Если ПоказательВР = Показатель Тогда
								СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПоказательПриИзменении

// Для "целодневных" документов не берем "часовые" виды времени и наоборот
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   массив ссылок типа ПеречисленияСсылка.ВидыВремени
//
Функция ПолучитьРазрешенныеВидыВремениНачислений()
	
	МассивВидовВремени = Новый СписокЗначений;
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеСверхНормы);
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ПустаяСсылка());
	Иначе
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеНеотработанное);
		МассивВидовВремени.Добавить(Перечисления.ВидыВремени.ЧасовоеОтработанноеВПределахНормы);
	КонецЕсли;
	
	Возврат МассивВидовВремени
	
КонецФункции // ПолучитьРазрешенныеВидыВремениНачислений()

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры:
//	Нет.
//
// Возвращаемое значение:
//	Структура имен и значений параметров.
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке(ИмяЭУ)
	
	Если ИмяЭУ = "КодВычета" Тогда
		
		СтруктураПараметров = Новый Структура("Ссылка", мСписокКодовВычетов);
		
	ИначеЕсли ИмяЭУ = "ДополнительныеНачисления" Тогда
		
		СтруктураПараметров = Новый Структура("КодДоходаНДФЛ", ПроведениеРасчетов.ПолучитьСписокКодовДоходаДополнительныхНачислений());
		
	ИначеЕсли ИмяЭУ = "ОсновныеНачисления" Тогда
		
		СтруктураПараметров = Новый Структура("КодДоходаНДФЛ, ВидВремени, СпособРасчета", ПроведениеРасчетов.ПолучитьСписокКодовДоходаОсновныхНачислений(), ПолучитьРазрешенныеВидыВремениНачислений(), мСписокДоступныхСпособовРасчета);

	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанельОсновныеНачисления);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДополнительныеНачисления,ЭлементыФормы.КоманднаяПанельДополнительныеНачисления);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью элементов формы, зависящих от способа регистрации времени
Процедура ОбновитьВидимостьПоСпособуРегистрацииВремени()
	ЭтоЦелосменноеНачисление = СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
	ЭлементыФормы.ОсновныеНачисления.Колонки.ДатаОкончания.Видимость = ЭтоЦелосменноеНачисление;
	ЭлементыФормы.ОсновныеНачисления.Колонки.ДатаОкончания.ИзменятьВидимость = ЭтоЦелосменноеНачисление;
	ЭлементыФормы.ОсновныеНачисления.Колонки.ОплачиватьЧасов.Видимость = Не ЭтоЦелосменноеНачисление;
	ЭлементыФормы.ОсновныеНачисления.Колонки.ОплачиватьЧасов.ИзменятьВидимость = Не ЭтоЦелосменноеНачисление;
	ЭлементыФормы.ОсновныеНачисления.Колонки.ДатаНачала.ТекстШапки = ?(ЭтоЦелосменноеНачисление, "Дата начала", "Дата");
	ЭлементыФормы.ОсновныеНачисления.Колонки.ОплаченоДнейЧасов.Видимость = ЭтоЦелосменноеНачисление;
КонецПроцедуры // ОбновитьВидимостьПоСпособуРегистрацииВремени

Процедура ПриИзмененииКодаВычета(Значение)
	ТабличноеПоле = ЭлементыФормы.ДополнительныеНачисления;
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	ЭлементУправления = ТабличноеПоле.Колонки.СуммаВычета.ЭлементУправления;
	Если Значение = мКодВычетаПоМатпомощиПриРожденииРебенка Тогда
		ТочностьСуммыВычета = 0;
		МаксимальноеЗначение = 99;
		МинимальноеЗначение = 1;
		Если ТекущиеДанные.СуммаВычета >= 100 или ТекущиеДанные.СуммаВычета <= 0 Тогда
			ТекущиеДанные.СуммаВычета = 1
		КонецЕсли;
	Иначе
		ТочностьСуммыВычета = 2;
		МаксимальноеЗначение = Неопределено;
		МинимальноеЗначение = Неопределено;
	КонецЕсли;
	ЭлементУправления.МаксимальноеЗначение = МаксимальноеЗначение;
	ЭлементУправления.МинимальноеЗначение = МинимальноеЗначение;
	ЭлементУправления.Формат = "ЧДЦ=" + ТочностьСуммыВычета
КонецПроцедуры

Процедура ПолучитьСотрудниковСИсправлениями()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазовыеНачисления.Сотрудник
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК РазовыеНачисления
	|ГДЕ
	|	РазовыеНачисления.Ссылка В(&Исправления)
	|	И РазовыеНачисления.Сторно
	|	И РазовыеНачисления.СторнируемыйДокумент = РазовыеНачисления.Ссылка.ПерерассчитываемыйДокумент
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазовыеНачисления.Сотрудник
	|ИЗ
	|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК РазовыеНачисления
	|ГДЕ
	|	РазовыеНачисления.Ссылка В(&Исправления)
	|	И РазовыеНачисления.Сторно
	|	И РазовыеНачисления.СторнируемыйДокумент = РазовыеНачисления.Ссылка.ПерерассчитываемыйДокумент";

	мСотрудникиИсправление = ПроведениеРасчетов.СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса, мДокументыИсправление);
	
КонецПроцедуры

Процедура ОбновитьТекущегоСотрудника()

	ТекущаяСтраница = ЭлементыФормы.ПанельНачислений.ТекущаяСтраница;
	Если ТекущаяСтраница = ЭлементыФормы.ПанельНачислений.Страницы.Начисления Тогда
		ТекущиеДанные	= ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	ИначеЕсли ТекущаяСтраница = ЭлементыФормы.ПанельНачислений.Страницы.ДополнительныеНачисления Тогда
		ТекущиеДанные	= ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные;
	Иначе 
		Возврат
	КонецЕсли;
	
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущийСотрудник = ТекущиеДанные.Сотрудник;
	Иначе
		ТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	// Установим имя и доступность кнопки ТекущийСотрудник механизма исправлений
	Если ЭлементыФормы.ДополнительныеДействия.Кнопки.Найти("Исправить") <> Неопределено И мТекущийСотрудник <> ТекущийСотрудник Тогда
		РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(ТекущийСотрудник),ТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник)
	КонецЕсли;
	
	мТекущийСотрудник = ТекущийСотрудник;

КонецПроцедуры

Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или (ОсновныеНачисления.Количество() = 0 И ДополнительныеНачисления.Количество() = 0);
	
	ЗаполненСОшибками = ОсновныеНачисления.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ДополнительныеНачисления.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ОсновныеНачисления.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ДополнительныеНачисления.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка())).Количество() > 0;
	
	СтруктураРезультата = Новый Структура("Результат, Сторно",0,Ложь);
	СтруктураНовыхЗаписей = Новый Структура("Сторно",Ложь);
	НеРассчитан = ОсновныеНачисления.НайтиСтроки(СтруктураРезультата).Количество() = ОсновныеНачисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() И ОсновныеНачисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() > 0;
	НеРассчитан = НеРассчитан Или ДополнительныеНачисления.НайтиСтроки(СтруктураРезультата).Количество() = ДополнительныеНачисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() И ДополнительныеНачисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() > 0;
	
	ОписаниеСостоянияДокумента = РаботаСДиалогамиЗК.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Не НеРассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован,Ложь,Ложь); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура УстановитьКнопкиИсправленияДокумента(ДокументИсправлен = Неопределено, ИсправленВесьДокумент = Неопределено, ДокументСторнирован = Неопределено)
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	КонецЕсли;
	Если ДокументСторнирован = Неопределено Тогда
		ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для каждого СтрокаТЧ Из ОсновныеНачисления Цикл
				ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		Если ИсправленВесьДокумент Тогда
			Для каждого СтрокаТЧ Из ДополнительныеНачисления Цикл
				ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументСторнирован Или ПериодРегистрации >= НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
		ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	Иначе 
		
		Кнопки = ЭлементыФормы.ДополнительныеДействия.Кнопки;
		Если Кнопки.Количество() = 0 Тогда
			МенюИсправить = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Подменю);
			ЗаполнитьЗначенияСвойств(МенюИсправить, мМенюИсправление);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеТекущийСотрудник.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеТекущийСотрудник);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеВесьДокумент.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеВесьДокумент);
			МенюИсправить.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеСписокСотрудников.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеСписокСотрудников);
		КонецЕсли;
		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность = Не ИсправленВесьДокумент;
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность = Не ДокументИсправлен;
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность = Не ИсправленВесьДокумент;
			
		Если Кнопки.Количество() = 1 И ДокументИсправлен Тогда
			Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаОтменаИсправление);
		ИначеЕсли Кнопки.Количество() > 1 И Не ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			Кнопки.Удалить(Кнопки.Разделитель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из ОсновныеНачисления Цикл
			ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	Если ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из ДополнительныеНачисления Цикл
			ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	ТолькоПросмотр = ДокументИсправлен Или ДокументСторнирован;
	РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	
	УстановитьКнопкиИсправленияДокумента(ДокументИсправлен, ИсправленВесьДокумент, ДокументСторнирован);
	
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,"Открыть сторно-документ","Открыть исправления");
	
	Если Не ТолькоПросмотр Тогда
		МожноЗаполнять = Не ЭтоИсправление;
		СоставМенюЗаполнить = ЭлементыФормы.ДействияФормы.Кнопки.ПодменюЗаполнить.Кнопки;
		Для каждого Кнопка Из СоставМенюЗаполнить Цикл
			Если Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Разделитель Тогда
				Кнопка.Доступность = МожноЗаполнять
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.НадписьОрганизация.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
		Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
			ПолучитьСотрудниковСИсправлениями();
		КонецЕсли;
	Иначе
		РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, "Документ не заполнен", "СообщениеОПроблемах");
	КонецЕсли;
	
	мВидимостьДополнительныхКолонок = РаботаСДиалогамиЗК.ВидимостьДополнительныхКолонок("РегистрацияРазовыхНачисленийРаботниковОрганизаций", мТабличныеПоляСДополнительнымиКолонками);
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если СпособРегистрацииВремени.Пустая() Тогда
			СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");
	СтруктураКолонок.Вставить("Показатель1");
	СтруктураКолонок.Вставить("Показатель2");
	СтруктураКолонок.Вставить("Показатель3");
	СтруктураКолонок.Вставить("Показатель4");
	СтруктураКолонок.Вставить("Показатель5");
	СтруктураКолонок.Вставить("Показатель6");	


	// Установить ограничение - изменять видимость колонок для табличной части ОсновныеНачисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОсновныеНачисления.Колонки, СтруктураКолонок);
	
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");
	СтруктураКолонок.Вставить("Показатель1");
	СтруктураКолонок.Вставить("Показатель2");
	СтруктураКолонок.Вставить("Показатель3");
	СтруктураКолонок.Вставить("Показатель4");
	СтруктураКолонок.Вставить("Показатель5");
	СтруктураКолонок.Вставить("Показатель6");	

	// Установить ограничение - изменять видимость колонок для табличной части ДополнительныеНачисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ДополнительныеНачисления.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Исправление документов
	мМенюИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаИсправлениеТекущийСотрудник = мМенюИсправление.Кнопки.ТекущийСотрудник;
	мКнопкаИсправлениеВесьДокумент = мМенюИсправление.Кнопки.ВесьДокумент;
	мКнопкаИсправлениеСписокСотрудников = мМенюИсправление.Кнопки.СписокСотрудников;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормы();
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ТабельныйНомерСтрока);
	мМассивЭУ.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

	// Ограничим возможности выбора кодов вычета
	мСписокКодовВычетов = ПроведениеРасчетов.ПолучитьСписокВычетовКДоходам();
	ЭлементыФормы.ДополнительныеНачисления.Колонки.КодВычета.ЭлементУправления.ВысотаСпискаВыбора = мСписокКодовВычетов.Количество();
	ЭлементыФормы.ДополнительныеНачисления.Колонки.КодВычета.ЭлементУправления.ШиринаСпискаВыбора = 40;
	
	мКодВычетаПоМатпомощиПриРожденииРебенка = Справочники.ВычетыНДФЛ.МатпомощьПриРожденииРебенка;
	
	// Устанавливаем соответствие доходов и положенных по ним вычетов для целей исчисления НДФЛ
	мСоответствиеДоходовИВычетов = ПроведениеРасчетов.ПолучитьСоответствиеДоходовИВычетов();
	
	// Установим видимость в зависимости от значения способа регистрации времени
	ОбновитьВидимостьПоСпособуРегистрацииВремени();
	
	СписокНеДоступныхСпособовРасчета = ПроведениеРасчетов.ПолучитьСписокНачисленийПоСреднемуЗаработку();
	СписокНеДоступныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	СписокНеДоступныхСпособовРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПособиеПоУходуЗаРебенкомДо3Лет);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СпособыРасчетаОплатыТруда.Ссылка
	|ИЗ
	|	Перечисление.СпособыРасчетаОплатыТруда КАК СпособыРасчетаОплатыТруда
	|ГДЕ
	|	(НЕ СпособыРасчетаОплатыТруда.Ссылка В (&Ссылка))";
	Запрос.УстановитьПараметр("Ссылка", СписокНеДоступныхСпособовРасчета);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		мСписокДоступныхСпособовРасчета.Добавить(Выборка.Ссылка);
	КонецЦикла;

	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		Если ОсновныеНачисления.Количество() > 0 Тогда
			ТекущийЭлемент = ЭлементыФормы.ОсновныеНачисления;
		ИначеЕсли ДополнительныеНачисления.Количество() > 0 Тогда
			ТекущийЭлемент = ЭлементыФормы.ДополнительныеНачисления;
		Иначе 	
			ТекущийЭлемент = ЭлементыФормы.ОсновныеНачисления;
		КонецЕсли;
		
	КонецЕсли;
	УстановитьЗаголовкиОрганизацийВФорме();
	
	мДополнительныеКолонки = РаботаСДиалогамиЗК.ДополнительныеКолонкиТабличныхПолейДокумента(ЭлементыФормы, мТабличныеПоляСДополнительнымиКолонками); 
	
	РаботаСДиалогамиЗК.ПоказатьСкрытьДополнительныеКолонки(мДополнительныеКолонки, мВидимостьДополнительныхКолонок, мТабличныеПоляСДополнительнымиКолонками);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";  Реквизиты = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			Автозаполнение(мИмяЗаполняемойТаблицы, ЗначениеВыбора.Данные.Выгрузить(), ЗначениеВыбора.Реквизиты, мГоловнаяОрганизация);
			мИмяЗаполняемойТаблицы = "";
		ИначеЕсли ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьДокументИсправление" Тогда
			РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора.ВыбранныеСотрудники);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьПоказателя" И Источник = ЭтаФорма Тогда
		
		КурсыВалют = Новый Соответствие;
		
		Для Каждого СтрокаПоказателей Из Параметр Цикл
			
			Валюта = СтрокаПоказателей.Валюта;
			Если КурсыВалют[Валюта] = Неопределено Тогда
				Курс = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ПериодРегистрации).Курс;
				Курс = ?(Курс = 0,1,Курс);
				Кратность = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ПериодРегистрации).Кратность;
				Кратность = ?(Кратность = 0,1,Кратность);
				КурсыВалют.Вставить(Валюта,Новый Структура("Курс,Кратность",Курс,Кратность));
			Иначе
				Курс = КурсыВалют[Валюта].Курс;
				Кратность = КурсыВалют[Валюта].Кратность;
			КонецЕсли;
			
			ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти();
			
			// По начислениям
			Для Каждого СтрокаДокумента Из ОсновныеНачисления Цикл
				СведенияОВидеРасчета = мСведенияОВидахРасчетаОснНачислений[СтрокаДокумента.ВидРасчета];
				
				Для СчПоказателей = 1 По Мин(СведенияОВидеРасчета["ФактКоличествоПоказателей"],6) Цикл
					Если СведенияОВидеРасчета["Показатель"+СчПоказателей] = СтрокаПоказателей.Показатель  И НачалоМесяца(СтрокаДокумента.ДатаОкончания) = СтрокаПоказателей.ПериодДействия Тогда
						ЗначениеПоказателя = Окр(СтрокаПоказателей.Значение * Курс / Кратность, 2);
						Если СтрокаДокумента["Показатель"+СчПоказателей] <> ЗначениеПоказателя Тогда
							ВидПоказателя = СведенияОВидеРасчета["Показатель"+СчПоказателей].ВидПоказателя;
							Если ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий
							Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ДляВсехОрганизаций Тогда
								СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
								// Раз уж перезаполнили показатели, то и результат придется пересчитывать
								Если СтрокаДокумента.Авторасчет Тогда
									СтрокаДокумента.Результат = 0;
								КонецЕсли;
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
								Если СтрокаПоказателей.Подразделение = СтрокаДокумента.ПодразделениеОрганизации Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
									// Раз уж перезаполнили показатели, то и результат придется пересчитывать
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный Тогда
								Если СтрокаПоказателей.Сотрудник = СтрокаДокумента.Сотрудник Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
									// Раз уж перезаполнили показатели, то и результат придется пересчитывать
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
			
			// По дополнительным начислениям
			Для Каждого СтрокаДокумента Из ДополнительныеНачисления Цикл
				СведенияОВидеРасчета = мСведенияОВидахРасчетаОснНачислений[СтрокаДокумента.ВидРасчета];
				Для СчПоказателей = 1 По Мин(СведенияОВидеРасчета["ФактКоличествоПоказателей"],6) Цикл
					Если СведенияОВидеРасчета["Показатель"+СчПоказателей] = СтрокаПоказателей.Показатель  И НачалоМесяца(СтрокаДокумента.ДатаОкончания) = СтрокаПоказателей.ПериодДействия Тогда
						ЗначениеПоказателя = Окр(СтрокаПоказателей.Значение * Курс / Кратность, 2);
						Если СтрокаДокумента["Показатель"+СчПоказателей] <> СтрокаПоказателей.Значение Тогда
							Если СведенияОВидеРасчета["Показатель"+СчПоказателей].ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Тогда
								СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
								// Раз уж перезаполнили показатели, то и результат придется пересчитывать
								Если СтрокаДокумента.Авторасчет Тогда
									СтрокаДокумента.Результат = 0;
								КонецЕсли;
							ИначеЕсли СведенияОВидеРасчета["Показатель"+СчПоказателей].ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
								Если СтрокаПоказателей.Подразделение = СтрокаДокумента.ПодразделениеОрганизации Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
									// Раз уж перезаполнили показатели, то и результат придется пересчитывать
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
							ИначеЕсли СведенияОВидеРасчета["Показатель"+СчПоказателей].ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный Тогда
								Если СтрокаПоказателей.Сотрудник = СтрокаДокумента.Сотрудник Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
									// Раз уж перезаполнили показатели, то и результат придется пересчитывать
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументыИсправление.Найти(Источник) = Неопределено Тогда 
						мДокументыИсправление.Добавить(Источник);
						ПолучитьСотрудниковСИсправлениями();
						ОбновитьДоступностьЭлементовФормы();
						РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ДанныеДокумента = ДополнительныеНачисления.Выгрузить(,"Сотрудник,ВидРасчета");
		ДанныеДокумента.Свернуть("Сотрудник,ВидРасчета");
		ДанныеДокумента.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
		ДанныеДокумента.ЗаполнитьЗначения(ПериодРегистрации, "ДатаНачала");
		РаботаСДиалогамиЗК.ПроверитьДанныеОПериодическихВыплатах(Ссылка, Отказ, ПерерассчитываемыйДокумент, ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ЭтаФорма);
	
	РаботаСДиалогамиЗК.СохранитьСтруктуруВидимостиДополнительныхКолонок("РегистрацияРазовыхНачисленийРаботниковОрганизаций", мВидимостьДополнительныхКолонок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если ОсновныеНачисления.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	мИмяЗаполняемойТаблицы = "ОсновныеНачисления";
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
		Если ОсновныеНачисления.Количество() > 0 Тогда
			ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации), , Организация, , , ,"РазовыеРасчеты", Новый Структура("ВидРасчета,Показатель1,ДатаНачала,ДатаОкончания,ЗаполнятьПоказателиАвтоматически,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6",ОсновныеНачисления[0].ВидРасчета,ОсновныеНачисления[0].Показатель1,Дата(1,1,1),Дата(1,1,1),Истина, ОсновныеНачисления[0].Показатель2, ОсновныеНачисления[0].Показатель3, ОсновныеНачисления[0].Показатель4, ОсновныеНачисления[0].Показатель5, ОсновныеНачисления[0].Показатель6), ПериодРегистрации, Истина, , , Истина);
		Иначе
			ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации), , Организация, , , ,"РазовыеРасчеты", Новый Структура("ВидРасчета,Показатель1,ДатаНачала,ДатаОкончания,ЗаполнятьПоказателиАвтоматически,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка(),0,Дата(1,1,1),Дата(1,1,1),Истина), ПериодРегистрации, Истина, , , Истина);
		КонецЕсли;
	Иначе
		ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации), , Организация, , , ,"РазовыеРасчетыДляЧастиСмены", Новый Структура("ВидРасчета,Показатель1,ДатаНачала,ОплачиватьЧасов,ДатаОкончания,ЗаполнятьПоказателиАвтоматически,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка(),0,Дата(1,1,1),0), ПериодРегистрации, Истина, , , Истина);
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыЗаполнить()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыДопНачисленияСписокРаботников(Кнопка)

	Если ДополнительныеНачисления.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

	мИмяЗаполняемойТаблицы = "ДополнительныеНачисления";
	Если ДополнительныеНачисления.Количество() > 0 Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации),, Организация,,Истина,,"РазовыеДополнительныеНачисления",Новый Структура("ВидРасчета,Показатель1,ДатаНачала,ДатаОкончания,КодВычета,ЗаполнятьПоказателиАвтоматически,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6",ДополнительныеНачисления[0].ВидРасчета,ДополнительныеНачисления[0].Показатель1,Дата(1,1,1),Дата(1,1,1),,Истина, ДополнительныеНачисления[0].Показатель2, ДополнительныеНачисления[0].Показатель3, ДополнительныеНачисления[0].Показатель4, ДополнительныеНачисления[0].Показатель5, ДополнительныеНачисления[0].Показатель6), ПериодРегистрации, Истина, , , Истина);
	Иначе
		ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации), , Организация, , , ,"РазовыеДополнительныеНачисления", Новый Структура("ВидРасчета,Показатель1,ДатаНачала,ДатаОкончания,КодВычета,ЗаполнятьПоказателиАвтоматически,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6",ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПустаяСсылка(),0,Дата(1,1,1),Дата(1,1,1),,Истина), ПериодРегистрации, Истина, , , Истина);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДопНачисленияСписокРаботников()

// Процедура - вызывается при нажатии на кнопку "ВвестиПоказателиДляРасчета"
//
Процедура ДействияФормыВвестиПоказателиДляРасчета(Кнопка)
	
	Если ЭлементыФормы.ПанельНачислений.ТекущаяСтраница.Имя = "Начисления" Тогда
		Если ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные = Неопределено Тогда
			ТекущийСотрудник	= Неопределено;
		Иначе
			ТекущийСотрудник	= ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Сотрудник;
		КонецЕсли;
	Иначе
		Если ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные = Неопределено Тогда
			ТекущийСотрудник	= Неопределено;
		Иначе
			ТекущийСотрудник	= ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные.Сотрудник;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗаполнитьПоказатели(ТекущийСотрудник, ЭтаФорма) Тогда
		Предупреждение("Для расчета сотрудников этого документа ввода показателей не требуется");
	КонецЕсли;

КонецПроцедуры

// Процедура-обработчик события нажатия кнопки "Рассчитать"
//
Процедура ДействияФормыРассчитать(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;   
	
	РассчитатьНачисления();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ДанныеСтроки = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		мСтарыйРезультат				= ДанныеСтроки.Результат;
		мБылоОтработаноДней				= ДанныеСтроки.ОтработаноДней;
		мБылоОтработаноЧасов			= ДанныеСтроки.ОтработаноЧасов;
		мБылоОтработаноДнейПоПятидневке	= ДанныеСтроки.ОтработаноДнейПоПятидневке;
		мБылоНормаДней					= ДанныеСтроки.НормаДней;
		мБылоНормаЧасов					= ДанныеСтроки.НормаЧасов;
		мБылоНормаДнейПоПятидневке		= ДанныеСтроки.НормаДнейПоПятидневке;
		мБылоОплаченоДнейЧасов			= ДанныеСтроки.ОплаченоДнейЧасов;
	КонецЕсли;
	
	ДанныеСтроки = ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		мСтарыйРезультатТЧДополнительныеНачисления			= ДанныеСтроки.Результат;
		мБылоОплаченоДнейЧасовТЧДополнительныеНачисления	= ДанныеСтроки.ОплаченоДнейЧасов;
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыРассчитать()

Процедура ДействиеСоздатьЗарплатаКВыплате(Кнопка)
	
	ЗарплатаКВыплатеОрганизацийСервис.СоздатьНаОсновании(ЭтаФорма, Ссылка, Ложь);
	
КонецПроцедуры // ДействияФормыСНалогами()

Процедура ДействиеСоздатьЗарплатаКВыплатеВычеты(Кнопка)

	ЗарплатаКВыплатеОрганизацийСервис.СоздатьНаОсновании(ЭтаФорма, Ссылка, Истина);
	
КонецПроцедуры // ДействияФормыБезНалогов()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	Если Не ЗначениеЗаполнено(мТекущийСотрудник) Тогда
		Предупреждение("Не выбран сотрудник для исправления расчетов!");
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);

КонецПроцедуры

Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	Если Проведен Тогда
		
		ТекстВопроса = "Для исправления необходимо записать документ. Продолжить?";
		Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
			Возврат;
		КонецЕсли;
		
		СписокСотрудников = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ОсновныеНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Начисления.Сотрудник,
		|	Начисления.Сотрудник.Наименование
		|ИЗ
		|	Документ.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ДополнительныеНачисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		Запрос.УстановитьПараметр("Ссылка",Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если мСотрудникиИсправление[Выборка.Сотрудник] = Неопределено Тогда
				СписокСотрудников.Добавить(Выборка.Сотрудник,Выборка.Наименование)
			КонецЕсли;
		КонецЦикла;
		
		Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, Ссылка);
		Форма.СписокСотрудников = СписокСотрудников;
		Форма.Заголовок = "Сотрудники документа Разовые начисления №" + Номер + " от " + Формат(Дата,"ДФ=dd.MM.yyyy");
		Форма.Открыть();
		
	Иначе
		Предупреждение("Исправить можно только проведенный документ!")
	КонецЕсли;
	
КонецПроцедуры

// Процедура отмены документов-исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
	ПолучитьСотрудниковСИсправлениями();
	ОбновитьДоступностьЭлементовФормы();
	РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
	Обновить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ табличных полей

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельОсновныеНачисленияПодбор(Кнопка)
	
	ОткрытьФормуПодбораСотрудниковТабличнойЧасти("ОсновныеНачисления");
	
КонецПроцедуры // КоманднаяПанельОсновныеНачисленияПодбор()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельДополнительныеНачисленияПодбор(Кнопка)
	
	ОткрытьФормуПодбораСотрудниковТабличнойЧасти("ДополнительныеНачисления");
	
КонецПроцедуры

Процедура КоманднаяПанельДополнительныеНачисленияРассчитатьВычет(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	ТекстВопроса1 = "Автоматически рассчитать вычеты можно только после отмены проведения документа. Выполнить отмену проведения документа?";
	ТекстВопроса2 = "Для перерасчета вычетов документ необходимо записать. Записать?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, , ТекстВопроса1, ТекстВопроса2) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	РассчитатьВычеты();

КонецПроцедуры // КоманднаяПанельДополнительныеНачисленияРассчитатьВычет()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

// Процедура вызывается при смене закладки
//
Процедура ПанельНачисленийПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьТекущегоСотрудника();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" пееречисления СпособРегистрацииВремени
//
Процедура СпособРегистрацииВремениПриИзменении(Элемент)
	
	ОбновитьВидимостьПоСпособуРегистрацииВремени();
	
КонецПроцедуры

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ПоказатьИсправления(ЭтаФорма, Ссылка, мДокументыИсправление, мДокументСторнирование);
	
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Отказ = ДанныеСтроки.Сторно И ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент Или мСотрудникиИсправление[мТекущийСотрудник] <> Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломИзменения(Элемент, Отказ)
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Отказ = ДанныеСтроки.Сторно И ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент Или мСотрудникиИсправление[ДанныеСтроки.Сотрудник] <> Неопределено	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

// Процедура - обработчик события "ПриАктивизацииСтроки"
//
Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	
    ПодключитьОбработчикОжидания("ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки", 0.1, Истина);	 	
	
КонецПроцедуры // ОсновныеНачисленияПриАктивизацииСтроки()

Процедура ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки()
	
	ДанныеСтроки = ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока;
	Если ДанныеСтроки <> Неопределено Тогда
		мСтарыйРезультат				= ДанныеСтроки.Результат;
		мБылоОтработаноДней				= ДанныеСтроки.ОтработаноДней;
		мБылоОтработаноЧасов			= ДанныеСтроки.ОтработаноЧасов;
		мБылоОтработаноДнейПоПятидневке	= ДанныеСтроки.ОтработаноДнейПоПятидневке;
		мБылоНормаДней					= ДанныеСтроки.НормаДней;
		мБылоНормаЧасов					= ДанныеСтроки.НормаЧасов;
		мБылоНормаДнейПоПятидневке		= ДанныеСтроки.НормаДнейПоПятидневке;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ОсновныеНачисления, мСведенияОВидахРасчетаОснНачислений, , Истина);
	
	ОбновитьТекущегоСотрудника();
	МожноРедактироватьСтроку = (ДанныеСтроки = Неопределено Или Не ДанныеСтроки.Сторно Или ДанныеСтроки.СторнируемыйДокумент <> ПерерассчитываемыйДокумент) И мСотрудникиИсправление[мТекущийСотрудник] = Неопределено;
	ЭлементыФормы.КоманднаяПанельОсновныеНачисления.Кнопки.Действие10.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КоманднаяПанельОсновныеНачисления.Кнопки.Действие11.Доступность = ЭлементыФормы.ОсновныеНачисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюОсновныеНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюОсновныеНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.ОсновныеНачисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	
КонецПроцедуры // ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура ОсновныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияПриНачалеРедактирования()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура ОсновныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ОсновныеНачисления, ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ОбработатьОтображениеПоказателейДляРасчета(Элемент, ОформленияСтрок, мСведенияОВидахРасчетаОснНачислений, "РазовыеНачисленияИУдержания");
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Ячейки.Авторасчет.ТолькоПросмотр = ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент;
		Иначе
			Ячейки.СторнируемыйДокумент.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если мСотрудникиИсправление[ДанныеСтроки.Сотрудник] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			Ячейки.Авторасчет.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			Ячейки.Авторасчет.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		ЯчейкаСКартинкой = Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
		
	КонецЦикла;	
	
КонецПроцедуры // ОсновныеНачисленияПриПолученииДанных()

// Процедура - обработчик события "ПриОкончанииРедактирования" строки таблицы
//
Процедура ОсновныеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Или СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьТекущегоСотрудника();
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ТекущаяСтрока.Сторно Или НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаОкончания) Тогда
		Возврат;
	КонецЕсли;
	
	РазницаВМесяцах = (Год(ТекущаяСтрока.ДатаОкончания)*12 + Месяц(ТекущаяСтрока.ДатаОкончания)) - (Год(ТекущаяСтрока.ДатаНачала)*12 + Месяц(ТекущаяСтрока.ДатаНачала));
	Если РазницаВМесяцах > 0 Тогда
		
		ТекстВопроса = "Разбить строку начислений на помесячные записи?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		ПроведениеРасчетов.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(ТекущаяСтрока, ОсновныеНачисления);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой подбора из спр-ка Сотрудники
//
Процедура ОсновныеНачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораТабличнойЧасти("ОсновныеНачисления", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // ОсновныеНачисленияОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//	Элемент - элемент формы, который отображает физическое лицо
//
Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	ДатаСобытия = ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала), ТекущиеДанные.ДатаНачала, Дата);
	
	ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(Элемент.Значение, ДатаСобытия, ЭлементыФормы.ОсновныеНачисления);
	ТекущиеДанные.ФизЛицо		= Неопределено;
	ТекущиеДанные.Авторасчет	= Истина;
		
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Сотрудник, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), ТекущиеДанные.ПодразделениеОрганизации, мГоловнаяОрганизация, "ОсновныеНачисления", ДатаСобытия);
	
	РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникАвтоПодборТекста()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета 
//
Процедура ОсновныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	
	РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, ТекущиеДанные.ВидРасчета, "РазовыеНачисленияИУдержания");
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ОсновныеНачисления, мСведенияОВидахРасчетаОснНачислений, , Истина);
	
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Сотрудник, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), ТекущиеДанные.ПодразделениеОрганизации, мГоловнаяОрганизация, "ОсновныеНачисления", ТекущиеДанные.ДатаНачала);
	
	РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода вида расчета
Процедура ОсновныеНачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаРегистрацияРазовыхНачислений");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.ВидВремени.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.ВидВремени.Значение = ПолучитьРазрешенныеВидыВремениНачислений();
	ФормаВыбораВидаРасчета.Отбор.ВидВремени.Использование = Истина;
	
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = мСписокДоступныхСпособовРасчета;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;

	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Значение = ПроведениеРасчетов.ПолучитьСписокКодовДоходаОсновныхНачислений();
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры // ОсновныеНачисленияВидРасчетаНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода вида расчета
Процедура ОсновныеНачисленияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ОсновныеНачисления"), Элемент.ТипЗначения.Типы()[0]);
	
КонецПроцедуры // ОсновныеНачисленияВидРасчетаАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода вида расчета
//
Процедура ОсновныеНачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ОсновныеНачисления"), ЭтаФорма, Элемент.ТипЗначения.Типы()[0], мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // ОсновныеНачисленияВидРасчетаОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода даты начала
//
Процедура ОсновныеНачисленияДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	ТекущиеДанные.ДатаНачалаСобытия = Элемент.Значение;
	
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Сотрудник, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), ТекущиеДанные.ПодразделениеОрганизации, мГоловнаяОрганизация, "ОсновныеНачисления", ТекущиеДанные.ДатаНачала, РучноеИзменениеПоказателей[ТекущиеДанные]);
	
КонецПроцедуры // ОсновныеНачисленияДатаНачалаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "Результат"
//
Процедура ОсновныеНачисленияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультат Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мСтарыйРезультат = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияРезультатПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОтработаноДней"
//
Процедура ОсновныеНачисленияОтработаноДнейПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноДней Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоОтработаноДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияОтработаноДнейПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОтработаноЧасов"
//
Процедура ОсновныеНачисленияОтработаноЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноЧасов Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоОтработаноЧасов = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры // ОсновныеНачисленияОтработаноЧасовПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОтработаноДнейПоПятидневке"
//
Процедура ОсновныеНачисленияОтработаноДнейПоПятидневкеПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноДнейПоПятидневке Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоОтработаноДнейПоПятидневке = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияОтработаноДнейПоПятидневкеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОтработаноЧасовПоПятидневке"
//
Процедура ОсновныеНачисленияОтработаноЧасовПоПятидневкеПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноЧасовПоПятидневке Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоОтработаноЧасовПоПятидневке = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияОтработаноДнейПоПятидневкеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОплаченоДнейЧасов"
//
Процедура ОсновныеНачисленияОплаченоДнейЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОплаченоДнейЧасов Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоОплаченоДнейЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "НормаДней"
//
Процедура ОсновныеНачисленияНормаДнейПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоНормаДней Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоНормаДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияНормаДнейПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "НормаЧасов"
//
Процедура ОсновныеНачисленияНормаЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоНормаЧасов Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоНормаЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияНормаЧасовПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "НормаДнейПоПятидневке"
//
Процедура ОсновныеНачисленияНормаДнейПоПятидневкеПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоНормаДнейПоПятидневке Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоНормаДнейПоПятидневке = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияНормаДнейПоПятидневкеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "НормаЧасовПоПятидневке"
//
Процедура ОсновныеНачисленияНормаЧасовПоПятидневкеПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоНормаЧасовПоПятидневке Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоНормаЧасовПоПятидневке = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияНормаДнейПоПятидневкеПриИзменении()

Процедура ОсновныеНачисленияСторнируемыйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
				
	Если Организация.Пустая() Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не выбрана организация!"), 10);
		Возврат;
	КонецЕсли;
		
	РаботаСДиалогамиЗК.ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, ЭтаФорма, Ссылка, Организация, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "Показатель1ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель1ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 1,"ОсновныеНачисления");
	
КонецПроцедуры

// Процедура - обработчик события "Показатель2ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель2ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 2,"ОсновныеНачисления");
	
КонецПроцедуры

// Процедура - обработчик события "Показатель3ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель3ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 3,"ОсновныеНачисления");
	
КонецПроцедуры

// Процедура - обработчик события "Показатель4ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель4ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 4,"ОсновныеНачисления");
	
КонецПроцедуры

// Процедура - обработчик события "Показатель5ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель5ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 5,"ОсновныеНачисления");
	
КонецПроцедуры

// Процедура - обработчик события "Показатель6ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель6ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 6,"ОсновныеНачисления");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ДополнительныеНачисления

// Процедура - обработчик события "ПриАктивизацииСтроки"
//
Процедура ДополнительныеНачисленияПриАктивизацииСтроки(Элемент)
	
    ПодключитьОбработчикОжидания("ОбработчикОжиданияДополнительныеНачисленияПриАктивизацииСтроки", 0.1, Истина);	 	
	
КонецПроцедуры // ДополнительныеНачисленияПриАктивизацииСтроки()

Процедура ОбработчикОжиданияДополнительныеНачисленияПриАктивизацииСтроки()
	
	ДанныеСтроки = ЭлементыФормы.ДополнительныеНачисления.ТекущаяСтрока;
	Если ДанныеСтроки <> Неопределено Тогда
		мСтарыйРезультатТЧДополнительныеНачисления = ДанныеСтроки.Результат;
		Если ДанныеСтроки.КодВычета = мКодВычетаПоМатпомощиПриРожденииРебенка Тогда
			ТочностьСуммыВычета = 0;
			МаксимальноеЗначение = 99;
		Иначе
			ТочностьСуммыВычета = 2;
			МаксимальноеЗначение = 0;
		КонецЕсли;
		ЭлементыФормы.ДополнительныеНачисления.Колонки.СуммаВычета.ЭлементУправления.МаксимальноеЗначение = МаксимальноеЗначение;
		ЭлементыФормы.ДополнительныеНачисления.Колонки.СуммаВычета.ЭлементУправления.Формат = "ЧДЦ=" + ТочностьСуммыВычета;
		
	КонецЕсли;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ДополнительныеНачисления, мСведенияОВидахРасчетаОснНачислений, , Истина);
	
	ОбновитьТекущегоСотрудника();
	МожноРедактироватьСтроку = (ДанныеСтроки = Неопределено Или Не ДанныеСтроки.Сторно Или ДанныеСтроки.СторнируемыйДокумент <> ПерерассчитываемыйДокумент) И мСотрудникиИсправление[мТекущийСотрудник] = Неопределено;
	ЭлементыФормы.КоманднаяПанельДополнительныеНачисления.Кнопки.Действие10.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КоманднаяПанельДополнительныеНачисления.Кнопки.Действие11.Доступность = ЭлементыФормы.ДополнительныеНачисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюДополнительныеНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюДополнительныеНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.ДополнительныеНачисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	
КонецПроцедуры // ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура ДополнительныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
	КонецЕсли;
	
КонецПроцедуры // ДополнительныеНачисленияПриНачалеРедактирования()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура ДополнительныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ДополнительныеНачисления, ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ОбработатьОтображениеПоказателейДляРасчета(Элемент, ОформленияСтрок, мСведенияОВидахРасчетаОснНачислений, "РазовыеНачисленияИУдержания");
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Ячейки.Авторасчет.ТолькоПросмотр = ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент;
		Иначе
			Ячейки.СторнируемыйДокумент.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если мСотрудникиИсправление[ДанныеСтроки.Сотрудник] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			Ячейки.Авторасчет.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			Ячейки.Авторасчет.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		// проставим отметки незаполненного
		СпособРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчетаДопНачислений, ДанныеСтроки.ВидРасчета).СпособРасчета;
		
		ТребуетсяБазовыйПериод = СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом 
								Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
								Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом;
		
		Если Элемент.Колонки.ДатаНачала.Видимость Тогда
			Ячейки.ДатаНачала.ОтметкаНезаполненного = ТребуетсяБазовыйПериод и НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаНачала)
		КонецЕсли;
		Если Элемент.Колонки.ДатаОкончания.Видимость Тогда
			Ячейки.ДатаОкончания.ОтметкаНезаполненного = ТребуетсяБазовыйПериод и НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончания)
		КонецЕсли;
		
		Ячейки.ДокументОснование.Видимость = СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой;
			
		ЯчейкаСКартинкой = Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
		
		// вычет к доходу не всегда сумма. для матпомощи - это количество детей
		ТочностьСуммыВычета = ?(ДанныеСтроки.КодВычета = мКодВычетаПоМатпомощиПриРожденииРебенка,0,2);
		Ячейки.СуммаВычета.УстановитьТекст(Формат(ДанныеСтроки.СуммаВычета,"ЧДЦ=" + ТочностьСуммыВычета));
		
	КонецЦикла;	
	
КонецПроцедуры // ДополнительныеНачисленияПриПолученииДанных()

Процедура ДополнительныеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьТекущегоСотрудника();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура ДополнительныеНачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораТабличнойЧасти("ДополнительныеНачисления", ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // ДополнительныеНачисленияОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ДополнительныеНачисления

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//	Элемент - элемент формы, который отображает физическое лицо
//
Процедура ДополнительныеНачисленияСотрудникПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные;
	ДатаСобытия = ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала), ТекущиеДанные.ДатаНачала, Дата);
	ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(Элемент.Значение, ДатаСобытия, ЭлементыФормы.ДополнительныеНачисления);
	
	ТекущиеДанные.ФизЛицо 		= Неопределено;
	ТекущиеДанные.Авторасчет	= Истина;
	
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Сотрудник, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), ТекущиеДанные.ПодразделениеОрганизации, мГоловнаяОрганизация, "ДополнительныеНачисления", ДатаСобытия);
	
	РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);
	
КонецПроцедуры // ДополнительныеНачисленияСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ДополнительныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ДополнительныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ДополнительныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // ДополнительныеНачисленияСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ДополнительныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // ДополнительныеНачисленияСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода вида начисления 
//
Процедура ДополнительныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные;
	
	СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчетаДопНачислений, Элемент.Значение);
	
	КодВычета = мСоответствиеДоходовИВычетов[СведенияОВидеРасчета.КодДоходаНДФЛ];
	ТекущиеДанные.КодВычета = КодВычета;
	ПриИзмененииКодаВычета(КодВычета);
	
	ТекущиеДанные.ДокументОснование = ?(СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой,ТекущиеДанные.ДокументОснование,Неопределено);

	ДатаСобытия = ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала), ТекущиеДанные.ДатаНачала, Дата);
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ДополнительныеНачисления, мСведенияОВидахРасчетаОснНачислений, , Истина);
	
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Сотрудник, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), ТекущиеДанные.ПодразделениеОрганизации, мГоловнаяОрганизация, "ДополнительныеНачисления", ДатаСобытия);
	
	РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);
	
КонецПроцедуры // ДополнительныеНачисленияВидРасчетаПриИзменении()

Процедура ДополнительныеНачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаРегистрацияРазовыхНачислений");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Значение = ПроведениеРасчетов.ПолучитьСписокКодовДоходаДополнительныхНачислений();
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();

КонецПроцедуры // ДополнительныеНачисленияВидРасчетаНачалоВыбора()

Процедура ДополнительныеНачисленияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ДополнительныеНачисления"), Элемент.ТипЗначения.Типы()[0]);
	
КонецПроцедуры // ДополнительныеНачисленияВидРасчетаАвтоПодборТекста()

Процедура ДополнительныеНачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ДополнительныеНачисления"), ЭтаФорма, Элемент.ТипЗначения.Типы()[0], мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // ДополнительныеНачисленияВидРасчетаОкончаниеВводаТекста()

Процедура ДополнительныеНачисленияДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные;

	ДатаСобытия = ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала), ТекущиеДанные.ДатаНачала, Дата);
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Сотрудник, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), ТекущиеДанные.ПодразделениеОрганизации, мГоловнаяОрганизация, "ДополнительныеНачисления", ДатаСобытия, РучноеИзменениеПоказателей[ТекущиеДанные]);

КонецПроцедуры

Процедура ДополнительныеНачисленияДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка  = Ложь;
	
	ФормаВыбора = Документы.ДоговорНаВыполнениеРаботСФизЛицом.ПолучитьФормуВыбора(, Элемент);
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;	
	
	ФормаВыбора.Отбор.Организация.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.Организация.Значение		= Организация;
	ФормаВыбора.Отбор.Организация.Использование	= Истина;
	
	ФормаВыбора.Отбор.Сотрудник.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.Сотрудник.Значение		= ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные.Сотрудник;
	ФормаВыбора.Отбор.Сотрудник.Использование	= Истина;
	
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура ДополнительныеНачисленияКодВычетаПриИзменении(Элемент)
	ПриИзмененииКодаВычета(Элемент.Значение)
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода кода вычета по НДФЛ к доходу
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ДополнительныеНачисленияКодВычетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = ВыбратьИзСписка(мСписокКодовВычетов,Элемент,мСписокКодовВычетов.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ПриИзмененииКодаВычета(ЭлементСписка.Значение);
	КонецЕсли;
	
КонецПроцедуры // ДополнительныеНачисленияКодВычетаНачалоВыбора()

Процедура ДополнительныеНачисленияКодВычетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("КодВычета"), Тип("СправочникСсылка.ВычетыНДФЛ"));
	
КонецПроцедуры // ДополнительныеНачисленияКодВычетаАвтоПодборТекста()

Процедура ДополнительныеНачисленияКодВычетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("КодВычета"), ЭтаФорма, Тип("СправочникСсылка.ВычетыНДФЛ"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // ДополнительныеНачисленияКодВычетаОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля "Результат"
//
Процедура ДополнительныеНачисленияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультатТЧДополнительныеНачисления Тогда
		
		ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мСтарыйРезультатТЧДополнительныеНачисления = Элемент.Значение;
		
	КонецЕсли;
	
КонецПроцедуры // ДополнительныеНачисленияРезультатПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОплаченоДнейЧасов"
//
Процедура ДополнительныеНачисленияОплаченоДнейЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОплаченоДнейЧасовТЧДополнительныеНачисления Тогда
		ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоОплаченоДнейЧасовТЧДополнительныеНачисления = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеНачисленияСторнируемыйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
				
	Если Организация.Пустая() Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не выбрана организация!"), 10);
		Возврат;
	КонецЕсли;
		
	РаботаСДиалогамиЗК.ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, ЭтаФорма, Ссылка, Организация, СтандартнаяОбработка, Ложь, Документы.РегистрацияРазовыхНачисленийРаботниковОрганизаций);
	
КонецПроцедуры

// Процедура - обработчик события "Показатель1ПриИзменении"
//
Процедура ДополнительныеНачисленияПоказатель1ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 1,"ДополнительныеНачисления");
	
КонецПроцедуры

// Процедура - обработчик события "Показатель2ПриИзменении"
//
Процедура ДополнительныеНачисленияПоказатель2ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 2,"ДополнительныеНачисления");
	
КонецПроцедуры

// Процедура - обработчик события "Показатель3ПриИзменении"
//
Процедура ДополнительныеНачисленияПоказатель3ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 3,"ДополнительныеНачисления");
	
КонецПроцедуры

// Процедура - обработчик события "Показатель4ПриИзменении"
//
Процедура ДополнительныеНачисленияПоказатель4ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 4,"ДополнительныеНачисления");
	
КонецПроцедуры

// Процедура - обработчик события "Показатель5ПриИзменении"
//
Процедура ДополнительныеНачисленияПоказатель5ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 5,"ДополнительныеНачисления");
	
КонецПроцедуры

// Процедура - обработчик события "Показатель6ПриИзменении"
//
Процедура ДополнительныеНачисленияПоказатель6ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 6,"ДополнительныеНачисления");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ Кнопки Дополнительно

Процедура ОбработатьНажатиеНаКнопкуДополнительно(Кнопка, ТабличноеПоле)
	
	мВидимостьДополнительныхКолонок[ТабличноеПоле] = НЕ мВидимостьДополнительныхКолонок[ТабличноеПоле];
	РаботаСДиалогамиЗК.ПоказатьСкрытьДополнительныеКолонки(мДополнительныеКолонки, мВидимостьДополнительныхКолонок, мТабличныеПоляСДополнительнымиКолонками, ТабличноеПоле);
	
КонецПроцедуры

Процедура КоманднаяПанельОсновныеНачисленияДополнительно(Кнопка)
	
	ОбработатьНажатиеНаКнопкуДополнительно(Кнопка, "ОсновныеНачисления");
	
КонецПроцедуры

Процедура КоманднаяПанельДополнительныеНачисленияДополнительно(Кнопка)
	
	ОбработатьНажатиеНаКнопкуДополнительно(Кнопка, "ДополнительныеНачисления");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСведенияОВидахРасчетаОснНачислений = Новый Соответствие;
мСведенияОВидахРасчетаДопНачислений = Новый Соответствие;
мСписокДоступныхСпособовРасчета = Новый СписокЗначений;

мДокументыИсправление = Новый Массив;
мСотрудникиИсправление = Новый Соответствие;

мТабличныеПоляСДополнительнымиКолонками = Новый Соответствие;
	
мТабличныеПоляСДополнительнымиКолонками.Вставить("ОсновныеНачисления", 			ЭлементыФормы.КоманднаяПанельОсновныеНачисления);
мТабличныеПоляСДополнительнымиКолонками.Вставить("ДополнительныеНачисления", 	ЭлементыФормы.КоманднаяПанельДополнительныеНачисления);

РучноеИзменениеПоказателей = Новый Соответствие;