////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики налоговому учету
Перем мМассивЭУЕНВД;

// список способов отражения в бухучете, которые нельзя выбирать, для предустановки отбора
Перем мСписокНедоступныхСпособовБухучета;

Перем мДатаНачалаРеформыСоцСтрахования;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

//Функция очищает табличную часть ОсновныеНачисления, задав вопрос пользователю
// Возвращает Истина если табличная часть очищена
Функция ОчиститьРаботникиОрганизацииПередВыполнениемДействия()

	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением таблица документа будет очищена. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Истина;

КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	ЭлементыФормы.ОтражаемыйДокумент.КнопкаОткрытия = ЗначениеЗаполнено(ОтражаемыйДокумент);
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ДатаИзменения");
	СтруктураКолонок.Вставить("СпособОтраженияВБухучете");

	// Установить ограничение - изменять видимость колонок для табличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.РаботникиОрганизации.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	мМассивЭУЕНВД = Новый Массив();
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.РаботникиОрганизации.Колонки.ПодпадаетПодЕНВД);
	НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(Дата), Организация);
	БухгалтерскийУчетДополнительный.УстановитьВидимостьРеквизитовЕНВД(мМассивЭУЕНВД, Организация, Дата, глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"));
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = ""; Реквизиты = "";
		
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			ВременнаяТаблица = ЗначениеВыбора.Данные.Выгрузить();
			Если ЗначениеВыбора.Свойство("Реквизиты",Реквизиты) Тогда
				РеквизитыТЧ = ЭтотОбъект.Метаданные().ТабличныеЧасти.РаботникиОрганизации.Реквизиты;
				
				Для Каждого Значение Из Реквизиты Цикл
					Если РеквизитыТЧ.Найти(Значение.Ключ) <> Неопределено Тогда
						ВременнаяТаблица.Колонки.Добавить(Значение.Ключ);
						ВременнаяТаблица.ЗаполнитьЗначения(Значение.Значение,Значение.Ключ);
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			РаботникиОрганизации.Загрузить(ВременнаяТаблица);
		КонецЕсли;
		
	Иначе
		
		Если ОчиститьРаботникиОрганизацииПередВыполнениемДействия() Тогда
			РаботникиОрганизации.Очистить();
			ЗаполнитьДокумент(ЗначениеВыбора);
			ЭлементыФормы.ОтражаемыйДокумент.КнопкаОткрытия = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	Оповестить("ИзмененоОтражениеОсновногоЗаработка", РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"));
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(Дата), Организация);
	БухгалтерскийУчетДополнительный.УстановитьВидимостьРеквизитовЕНВД(мМассивЭУЕНВД, Организация, Дата, глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"));

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОтражаемыйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Организация.Пустая() Тогда
		
		СписокДляВыбора = Новый СписокЗначений;
		СписокДляВыбора.Добавить(Документы.ПриемНаРаботуВОрганизацию,"Прием на работу в организацию");
		СписокДляВыбора.Добавить(Документы.КадровоеПеремещениеОрганизаций,"Кадровое перемещение организаций");
		
		ЭлементСписка = ВыбратьИзСписка(СписокДляВыбора,Элемент,);
		                                        
		Если Не ЭлементСписка = Неопределено Тогда
			ФормаВыбора = ЭлементСписка.Значение.ПолучитьФормуВыбора( , ЭтаФорма, Ссылка);
			ФормаВыбора.Отбор.Организация.Установить(Организация);
			ФормаВыбора.ПараметрТекущаяСтрока	= ?(ТипЗнч(ЭлементСписка.Значение.ПустаяСсылка()) = ТипЗнч(Элемент.Значение), Элемент.Значение, Неопределено);
			ФормаВыбора.Открыть();
		КонецЕсли;	
		
	Иначе
		
		Предупреждение("Не выбрана организация!", 10);
		ТекущийЭлемент = ЭлементыФормы.Организация;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтражаемыйДокументОчистка(Элемент, СтандартнаяОбработка)
	
	Если Не Элемент.Значение = Неопределено и РаботникиОрганизации.Количество()>0 Тогда
		ТекстВопроса = "Удаляется документ основание. Очистить табличную часть?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		РаботникиОрганизации.Очистить();
	
	КонецЕсли;
	
	Элемент.КнопкаОткрытия = Ложь;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыОчистить(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		
		ТекстВопроса = "Табличная часть будет очищена. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		РаботникиОрганизации.Очистить();
		
	КонецЕсли;
	
		
КонецПроцедуры // ДействияФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()


// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура КоманднаяПанельРаботникиОрганизацииЗаполнить(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , Организация, , , ,"ВводСпособаОтраженияВРеглУчете",
	Новый Структура("СпособОтраженияВБухучете,СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя,ДатаИзменения",Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка(),Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка(),Дата,0));
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииЗаполнить()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации,Ссылка, Ложь, Дата, мГоловнаяОрганизация, 2);
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		НоваяСтрока = РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник = ВыбранноеЗначение;
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииОбработкаВыбора()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если ЗначениеЗаполнено(ДанныеСтроки.ДатаИзменения) и ДанныеСтроки.ДатаИзменения < мДатаНачалаРеформыСоцСтрахования Тогда
			ОформлениеСтроки.Ячейки.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.ТолькоПросмотр = Ложь;
		Иначе
			ОформлениеСтроки.Ячейки.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.Текст = "<не используется с 2011 года>";
			ОформлениеСтроки.Ячейки.СпособОтраженияВБухучетеБольничногоЗаСчетРаботодателя.ТолькоПросмотр = Истина;
		КонецЕсли;
		
	КонецЦикла;
		
КонецПроцедуры // РаботникиОрганизацииПриПолученииДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина,Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура РаботникиОрганизацииСпособОтраженияВБухучетеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПолучитьФормуВыбора(,Элемент,Ссылка);
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение =  мСписокНедоступныхСпособовБухучета;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура РаботникиОрганизацииСпособОтраженияВБухучетеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.ПодпадаетПодЕНВД = Ложь;
		Возврат;	
	КонецЕсли;	
	
	//проверим способ отражения, нельзя выбирать способ отражения с незаполненными счетами	
	ВыборкаСпособаОтражения = БухгалтерскийУчетДополнительный.ПолучитьХарактеристикуСпособаОтражения(Элемент.Значение);
	
	Если ВыборкаСпособаОтражения = Неопределено Тогда
		//способ отражения не задан
		Возврат;
	КонецЕсли;
	
	ХорошийСпособОтражени = Истина;
	Если ВыборкаСпособаОтражения.Следующий() и Не ВыборкаСпособаОтражения.СчетВыбран Тогда
		СтрокаСообщения = "В способе отражения не задан счет дебета и/или кредита!";
		ХорошийСпособОтражени = Ложь;
	КонецЕсли;
	
	Если Не ХорошийСпособОтражени Тогда
		Предупреждение(СтрокаСообщения,5,);
		Элемент.Значение = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	КонецЕсли;	
	
КонецПроцедуры

Процедура РаботникиОрганизацииСпособОтраженияВБухучетеБольничногоЗаСчетРаботодателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПолучитьФормуВыбора(,Элемент,Ссылка);
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение =  мСписокНедоступныхСпособовБухучета;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура РаботникиОрганизацииСпособОтраженияВБухучетеБольничногоЗаСчетРаботодателяПриИзменении(Элемент)
	
	//проверим способ отражения, нельзя выбирать способ отражения с незаполненными счетами	
	ВыборкаСпособаОтражения = БухгалтерскийУчетДополнительный.ПолучитьХарактеристикуСпособаОтражения(Элемент.Значение);
	
	Если ВыборкаСпособаОтражения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ХорошийСпособОтражени = Истина;
	Если ВыборкаСпособаОтражения.Следующий() и Не ВыборкаСпособаОтражения.СчетВыбран Тогда
		СтрокаСообщения = "В способе отражения не задан счет дебета и/или кредита!";
		ХорошийСпособОтражени = Ложь;
	КонецЕсли;
	
	Если Не ХорошийСпособОтражени Тогда
		Предупреждение(СтрокаСообщения,5,);
		Элемент.Значение = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСписокНедоступныхСпособовБухучета = Новый СписокЗначений;
мСписокНедоступныхСпособовБухучета.Добавить(Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям);
мСписокНедоступныхСпособовБухучета.Добавить(Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете);
мСписокНедоступныхСпособовБухучета.Добавить(Справочники.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя);
мДатаНачалаРеформыСоцСтрахования = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();