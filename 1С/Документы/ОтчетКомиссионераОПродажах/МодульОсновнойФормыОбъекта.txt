////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

Перем мКолонкиТовары, мКолонкиДокументы;

Перем мПоДокументамРасчетов;
Перем мОтражатьВРегламентированномУчете;
Перем мРасчетыВУЕ;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

// Хранит курс редактируемой строки табличной части "Предоплата"
Перем мКурсСтрокиДокументаРасчетов;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДенежныеСредства,ЭлементыФормы.КоманднаяПанельДенежныеСредства);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыРасчетовСКонтрагентом,ЭлементыФормы.КоманднаяПанельДокументыРасчетовСКонтрагентом.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	ЭлементыФормы.ГиперссылкаСчетФактураПолученный.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
	                                                 УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный"));

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

// Процедура производит проверку ссылок подчиненных счетов-фактур,
// сгенерированных при записи документа. Вызывается через обработчик ожидания формы.
//
Процедура ОбработчикОжиданияЗаписиДокумента() 

	Если ТранзакцияАктивна() Тогда
		// Запись еще не завершилась. Дождемся ее окончания.
		Возврат;
	КонецЕсли;

	Если Модифицированность() Тогда
		// Запись не удалась, документ остался модифицированным, проверим ссылки счетов-фактур.
		// Т.к. могут быть из-за отмены транзакции ссылки на фактически несозданные в базе документы.
		ТаблицаСчетовФактурДляПроверки = Покупатели.Выгрузить(, "СчетФактура");
		Инд = ТаблицаСчетовФактурДляПроверки.Количество() - 1;
		Пока Инд >= 0 Цикл
			Если НЕ ЗначениеЗаполнено(ТаблицаСчетовФактурДляПроверки[Инд].СчетФактура) Тогда
				ТаблицаСчетовФактурДляПроверки.Удалить(Инд);
			КонецЕсли;
			Инд = Инд - 1;
		КонецЦикла;
		
		Если ТаблицаСчетовФактурДляПроверки.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТаблицаСФ", ТаблицаСчетовФактурДляПроверки);
		
		Запрос.Текст = "
		|ВЫБРАТЬ
		|	СчетФактура
		|ПОМЕСТИТЬ ВТ_СчетаФактуры
		|ИЗ
		|	&ТаблицаСФ КАК ТаблицаСФ
		|;
		|
		|ВЫБРАТЬ
		|	ВТ_СчетаФактуры.СчетФактура
		|
		|ИЗ
		|	ВТ_СчетаФактуры
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ Документ.СчетФактураВыданный КАК СчетФактураВыданный
		|		ПО ВТ_СчетаФактуры.СчетФактура = СчетФактураВыданный.Ссылка
		|ГДЕ
		|	СчетФактураВыданный.Ссылка ЕСТЬ NULL
		|";
		
		Выборка = Запрос.Выполнить().Выбрать();
		СтруктураПоиска =  Новый Структура("СчетФактура");
		Пока Выборка.Следующий() Цикл
			ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
			
			НайденныеСтроки = Покупатели.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.СчетФактура = Неопределено;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("ОбработчикОжиданияЗаписиДокумента");

КонецПроцедуры // ОбработчикОжиданияЗаписиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура рассчитывает сумму передачи
// Параметры:
//  СтрокаТабличнойЧасти - Строка табличной части Товары
//
Процедура РассчитатьСуммуПередачи(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи 
	                                   * СтрокаТабличнойЧасти.Количество;

	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры //РассчитатьСуммуПередачи()

// Рассчитываем сумму документа со всеми налогами
//
// Параметры: 
//  Нет
//
// Возвращаемое значение:
//  Сумма документа со всеми налогами.
//
Функция РассчитатьСуммуДокумента()

	СуммаДок = ДокументОбъект.Товары.Итог("Сумма");

	Если (УчитыватьНДС) И ( НЕ СуммаВключаетНДС) Тогда
		СуммаДок = СуммаДок + ДокументОбъект.Товары.Итог("СуммаНДС");
	КонецЕсли; 

	Возврат СуммаДок;

КонецФункции // РассчитатьСуммуДокумента()

// Процедура выполняет заполение и расчет реквизитов, связанных с комиссионным вознаграждением.
//
Процедура ЗаполнитьИРассчитатьСпособРасчетаКомиссионногоВознаграждения(РежимРаботы = "ПриИзмененииДоговора")

	// при необходимости поменяем способ расчета и процент
	ЧтоИзменилось = "";
	Если РежимРаботы = "ПриИзмененииДоговора" Тогда
		Если СпособРасчетаКомиссионногоВознаграждения <> ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения Тогда
			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ЧтоИзменилось = "способ расчета";
		КонецЕсли;
		Если ПроцентКомиссионногоВознаграждения <> ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения Тогда
			ПроцентКомиссионногоВознаграждения = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			ЧтоИзменилось = ЧтоИзменилось + ?(ЧтоИзменилось = "", "", " и")+" процент вознаграждения";
		КонецЕсли;
	Иначе
		Если НЕ ЗначениеЗаполнено(СпособРасчетаКомиссионногоВознаграждения) Тогда
			СпособРасчетаКомиссионногоВознаграждения = ДоговорКонтрагента.СпособРасчетаКомиссионногоВознаграждения;
			ПроцентКомиссионногоВознаграждения       = ДоговорКонтрагента.ПроцентКомиссионногоВознаграждения;
			ЧтоИзменилось = "начальное заполнение";
		КонецЕсли;
	КонецЕсли;

	// Если в табличной части отсутствуют строки - пересчитывать ничего не нужно.
	Если Товары.Количество() > 0 И ЧтоИзменилось <> ""Тогда

		// Надо предложить пересчитать комиссионное вознаграждение.
		
		Если РежимРаботы = "ПриИзмененииДоговора" Тогда
			Ответ = Вопрос("Изменился "+ЧтоИзменилось+". Пересчитать комиссионное вознаграждение?",
		                   РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Иначе
			Ответ = КодВозвратаДиалога.Да
		КонецЕсли;

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТабличнойЧасти Из Товары Цикл
				РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьИРассчитатьСпособРасчетаКомиссионногоВознаграждения()

// Рассчитывает комиссионное вознаграждение в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//
Процедура РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти)

	Если СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
		                                       * СтрокаТабличнойЧасти.Сумма / 100;

	ИначеЕсли СпособРасчетаКомиссионногоВознаграждения
		 = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли Тогда

		СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения 
		      * (СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаПередачи) / 100;

	Иначе
		СтрокаТабличнойЧасти.СуммаВознаграждения = 0;
	КонецЕсли;

	СтрокаТабличнойЧасти.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.СуммаВознаграждения,
	                                              УчитыватьНДС, СуммаВключаетНДС,
	                                              УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));


КонецПроцедуры // РассчитатьКомиссионноеВознаграждение()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Продажа", "Товары", мТекущийДоговорКонтрагента);

	ЗаполнитьИРассчитатьСпособРасчетаКомиссионногоВознаграждения();

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();
	ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Истина);

	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	мРасчетыВУЕ           = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
		Проект=ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
	
	УстановитьВидимость();
	УстановитьАвтоотметку();

КонецПроцедуры // ПриИзмененииДоговора()

// Производит выбор документа реализации и заполнение на его основании
//
// СпособЗаполнения - "Заполнить" - заполнить с предварительной очисткой
//					  "Добавить"  - добавить строки к уже имеющимся.
//
Процедура ЗаполнитьПоРеализации(СпособЗаполнения = "Заполнить")

	ЗаполнятьТабличнуюЧасть = Ложь;

	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;

	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, ,);
		Возврат;
	КонецЕсли;

	// Если заполняем, то почистим ТЧ
	Если СпособЗаполнения = "Заполнить"
	   И Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Покупатели.Очистить();
		Товары.Очистить();

	КонецЕсли;

	ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите документ передачи на комиссию для заполнения отчета комиссионера";
	ФормаВыбора.РежимВыбора = Истина;

	// По умолчанию поставим отбор по договору
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	Реализация = ФормаВыбора.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(Реализация) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыУпр(Реализация);

КонецПроцедуры //ЗаполнитьПоРеализации()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект); 
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 
	
КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПродажиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета); 

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

// Процедура изменяет счет затрат 
//
Процедура ИзменитьСчетЗатрат()

	ЗаполнитьСчетаУчетаВШапке(Ложь);//заполняем только счет затрат 
	СчетУчетаЗатратПриИзменении(ЭлементыФормы.СчетУчетаЗатрат);//СчетЗатратНУ будет замещен

	УстановитьВидимость();

КонецПроцедуры

// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчета(ИзменениеСубконто = ЛОЖЬ)
	
	Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = Субконто1.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = Субконто2.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = Субконто3.ВидРасходовНУ;
	ИначеЕсли ИзменениеСубконто Тогда
		Возврат;
	Иначе
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СчетУчетаЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СчетУчетаЗатрат, ВидЗатратНУ));
	Иначе
		СчетУчетаЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетУчетаЗатрат));
	КонецЕсли;
	Если СтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетУчетаЗатратНУ, ЭлементыФормы.СубконтоНУ1, ЭлементыФормы.НадписьСубконтоНУ1,
		                         ЭлементыФормы.СубконтоНУ2, ЭлементыФормы.НадписьСубконтоНУ2,
		                         ЭлементыФормы.СубконтоНУ3, ЭлементыФормы.НадписьСубконтоНУ3);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()

// Процедура показывает на закладке "Предоплата" итоговые суммы 
// в валюте взаиморасчетов и в валюте регл.учета - всего по документу, предоплата, осталось оплатить
//
Процедура ПересчетСуммВзаиморасчетов()

	СуммаВзаиморасчетов = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары");
	СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетов, ВалютаДокумента,
	                                                 ДоговорКонтрагента.ВалютаВзаиморасчетов,
	                                                 ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
	                                                 ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);

	РаботаСДиалогами.ЗаполнитьНадписиРасчетовСКонтрагентом(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, СуммаВзаиморасчетов);

КонецПроцедуры

// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	
	ИзменитьСчетЗатрат();
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость = мПоДокументамРасчетов;

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	Колонки = ЭлементыФормы.Товары.Колонки;

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> Колонки.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> Колонки.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> Колонки.СуммаНДСВознаграждения.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаНДСВознаграждения, УчитыватьНДС);
	КонецЕсли;

	Колонки = ЭлементыФормы.Товары.Колонки;

	ДоступностьПроцента     = Истина;

	Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

		ДоступностьПроцента = Ложь;
		Если ПроцентКомиссионногоВознаграждения <> 0 Тогда
			ПроцентКомиссионногоВознаграждения = 0;
		КонецЕсли;

	КонецЕсли;
	
	ВерсияПостановления = УчетНДС.ПолучитьВерсиюПостановления(Дата);
	ЭлементыФормы.ДенежныеСредства.Колонки.ДатаСобытия.АвтоОтметкаНезаполненного 	= (ВерсияПостановления = 2);
	ЭлементыФормы.ДенежныеСредства.Колонки.Покупатель.АвтоОтметкаНезаполненного 	= (ВерсияПостановления = 2);
	
	ЭлементыФормы.ПроцентКомиссионногоВознаграждения.Доступность = ДоступностьПроцента;
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность            = ОтражатьВБухгалтерскомУчете;

	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)));
	
	//Установка видимости, автоотметки незаполненного полей со счетами учета номенклатуры и затрат
	СтруктураТабличныхЧастей = Новый Структура();
	СтруктураТабличныхЧастей.Вставить("Товары", 		Колонки);
	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(Дата, Метаданные().Имя, ЭлементыФормы, СтруктураТабличныхЧастей, ПоказыватьВДокументахСчетаУчета, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП, УчитыватьНДС);
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаРасчетов.Видимость     = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;

	ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(СтатьяЗатрат);
	
	ЭлементыФормы.НадписьСчетУчетаЗатрат.Видимость   = ЭлементыФормы.СчетУчетаЗатрат.Видимость;
	ЭлементыФормы.НадписьСчетУчетаЗатратНУ.Видимость = ЭлементыФормы.СчетУчетаЗатратНУ.Видимость;
	ЭлементыФормы.НадписьСчетУчетаНДС.Видимость 	 = ЭлементыФормы.СчетУчетаНДС.Видимость;

	ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетУчетаЗатрат);
	ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетУчетаЗатратНУ, "Налоговый");
	
	Если Не ПроизводственныеРасходы И ОтражатьВБухгалтерскомУчете Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетУчетаЗатрат, ЭлементыФормы.Субконто1, ЭлементыФормы.НадписьСубконто1,
		                       ЭлементыФормы.Субконто2, ЭлементыФормы.НадписьСубконто2,
		                       ЭлементыФормы.Субконто3, ЭлементыФормы.НадписьСубконто3);
	Иначе
		ЭлементыФормы.Субконто1       .Видимость = Ложь;
		ЭлементыФормы.Субконто2       .Видимость = Ложь;
		ЭлементыФормы.Субконто3       .Видимость = Ложь;
		ЭлементыФормы.НадписьСубконто1.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконто2.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконто3.Видимость = Ложь;
	КонецЕсли;

	Если Не ПроизводственныеРасходыНУ И ОтражатьВНалоговомУчетеНП Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетУчетаЗатратНУ, ЭлементыФормы.СубконтоНУ1, ЭлементыФормы.НадписьСубконтоНУ1,
		                         ЭлементыФормы.СубконтоНУ2, ЭлементыФормы.НадписьСубконтоНУ2,
		                         ЭлементыФормы.СубконтоНУ3, ЭлементыФормы.НадписьСубконтоНУ3);
	Иначе
		ЭлементыФормы.СубконтоНУ1       .Видимость = Ложь;
		ЭлементыФормы.СубконтоНУ2       .Видимость = Ложь;
		ЭлементыФормы.СубконтоНУ3       .Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоНУ1.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоНУ2.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоНУ3.Видимость = Ложь;
	КонецЕсли;

	ЭлементыФормы.ПодразделениеОрганизации.Видимость        = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьПодразделениеОрганизации.Видимость = ОтражатьВБухгалтерскомУчете;
	
	// Установка видимости реквизита "Проект".
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	
	// Видимость колонок таблицы документов расчетов
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.СуммаРегл,  мОтражатьВРегламентированномУчете И мРасчетыВУЕ);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.ДатаОплаты, мОтражатьВРегламентированномУчете И мРасчетыВУЕ);

	АвтоотметкаУУ = Ложь;
	АвтоотметкаБУ = Ложь;
	АвтоотметкаНУ = Ложь;
	Если ОтражатьВУправленческомУчете Тогда
		Если НЕ СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается
	 	   ИЛИ Товары.Итог("СуммаВознаграждения") <> 0 Тогда
		    АвтоотметкаУУ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Если НЕ СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается
	 	   ИЛИ Товары.Итог("СуммаВознаграждения") <> 0 Тогда
		    АвтоотметкаБУ = Истина;
			Если ОтражатьВНалоговомУчете Тогда
				АвтоотметкаНУ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.СтатьяЗатрат.АвтоОтметкаНезаполненного 			 = АвтоотметкаУУ ИЛИ АвтоотметкаБУ;
	ЭлементыФормы.Подразделение.АвтоОтметкаНезаполненного 			 = АвтоотметкаУУ;
	ЭлементыФормы.ПодразделениеОрганизации.АвтоОтметкаНезаполненного = АвтоотметкаБУ;
	
	Если НЕ ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		ЭлементыФормы.СтатьяЗатрат.ОтметкаНезаполненного = АвтоотметкаУУ ИЛИ АвтоотметкаБУ;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
		ЭлементыФормы.Подразделение.ОтметкаНезаполненного = АвтоотметкаУУ;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		ЭлементыФормы.ПодразделениеОрганизации.ОтметкаНезаполненного = АвтоотметкаБУ;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если дата дата документа совпадает с текущей.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
								(НачалоДня(Дата) = НачалоДня(ТекущаяДата()));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает автоотметку незаполненного для тех колонок в табличной части 
// "Товары", обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	// Сделка
	Автоотметка = Ложь;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам
		 ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			АвтоОтметка = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.Сделка.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.Сделка.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(Сделка) Тогда
		ЭлементыФормы.Сделка.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

	// Процент и ставка НДС с комиссионного вознаграждения
	Автоотметка = Ложь;
	Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтПрибыли
	 ИЛИ СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
		Автоотметка = Истина;
	КонецЕсли;

	Если ЭлементыФормы.ПроцентКомиссионногоВознаграждения.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.ПроцентКомиссионногоВознаграждения.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.ПроцентКомиссионногоВознаграждения.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(ПроцентКомиссионногоВознаграждения) Тогда
		ЭлементыФормы.ПроцентКомиссионногоВознаграждения.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.СтавкаНДСВознаграждения.АвтоОтметкаНезаполненного <> Автоотметка Тогда
		ЭлементыФормы.СтавкаНДСВознаграждения.АвтоОтметкаНезаполненного = Автоотметка;
	КонецЕсли;

	Если ЭлементыФормы.СтавкаНДСВознаграждения.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(СтавкаНДСВознаграждения) Тогда
		ЭлементыФормы.СтавкаНДСВознаграждения.ОтметкаНезаполненного     = Автоотметка;
	КонецЕсли;
	
КонецПроцедуры // УстановитьАвтоотментку()

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	РаботаСДиалогами.УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = РассчитатьСуммуДокумента();
	ЭлементыФормы.ВсегоНДС.Значение = Товары.Итог("СуммаНДС");

	ЭлементыФормы.ВсегоВознаграждения.Значение    = Товары.Итог("СуммаВознаграждения");
	ЭлементыФормы.СуммаНДСВознаграждения.Значение = Товары.Итог("СуммаНДСВознаграждения");

	Если УчитыватьНДС И Не СуммаВключаетНДС Тогда
		ЭлементыФормы.ВсегоВознаграждения.Значение = ЭлементыФормы.ВсегоВознаграждения.Значение 
		                                           + ЭлементыФормы.СуммаНДСВознаграждения.Значение;
	КонецЕсли; 

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + ЗаполнениеДокументов.КратностьДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                                  + " " +  ДокументОбъект.ВалютаДокумента
		                                  + " = " + ЗаполнениеДокументов.КурсДокумента(ДокументОбъект, мВалютаРегламентированногоУчета)
		                                  + мВалютаРегламентированногоУчета + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "ПродажаКомиссия", ПараметрОбъектКопирования);

		Если НЕ ЗначениеЗаполнено(ПараметрОбъектКопирования) Тогда
			СтавкаНДСВознаграждения = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");
		КонецЕсли;

		ЗаполнитьИРассчитатьСпособРасчетаКомиссионногоВознаграждения("НачальноеЗаполнение");

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента             = Дата;
	мТекущаяВалютаВзаиморасчетов      = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мПоДокументамРасчетов             = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	мРасчетыВУЕ                       = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьПринадлежностиНоменклатуры(мКолонкиТовары, Дата);

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	ПокупателиПриАктивизацииСтроки();
	ЗаполнитьТекстПроСчетФактуру(); 

	УстановитьАвтоотметку();

	// установим доступность колонки "ЦенаПередачи" и "СуммаПередачи" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();

	ЭлементыФормы.Товары.Колонки.ЦенаПередачи.ЭлементУправления.ТолькоПросмотр  = НЕ мМожноМенятьЦенуВДокументе;
	ЭлементыФормы.Товары.Колонки.СуммаПередачи.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;
	
	УчетСерийныхНомеров.УстановитьВидимостьКнопкиВводаСерийныхНомеров(ЭлементыФормы.КоманднаяПанельТовары);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(РассчитатьСуммуДокумента(),  
		                                                        ВалютаДокумента, 
		                                                        мТекущаяВалютаВзаиморасчетов,
		                                                        ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                                        КурсВзаиморасчетов,
		                                                        ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), 
		                                                        КратностьВзаиморасчетов);
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                               КурсВзаиморасчетов,
	                                                                               КратностьВзаиморасчетов,
	                                                                               мВалютаРегламентированногоУчета,
	                                                                               Истина);

	ОбновитьПодвал();
	ОбновитьСуммыПокупателей();
	
	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "ДенежныеСредства" Тогда
			СтраницаПанели.Заголовок = "Денежные средства (" + ДокументОбъект.ДенежныеСредства.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "ДокументыРасчетовСКонтрагентом" Тогда
			Страницапанели.Заголовок = "Предоплата (" + ДокументОбъект.ДокументыРасчетовСКонтрагентом.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;
	
	ПересчетСуммВзаиморасчетов();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Если документ новый, то у него еще нет ссылки и записывать 
	// подчиненные ему счета-фактуры необходимо в той же транзакции, что и сам документ,
	// т.к. может быть вызван откат транзакции и счета-фактуры окажутся с некорректным документом-основанием.
	Если ЭтоНовый() Тогда
		ДополнительныеСвойства.Вставить("НеобходимоСформироватьСчетаФактурыВыданныеДляСтрокДокумента", Истина);
		ПодключитьОбработчикОжидания("ОбработчикОжиданияЗаписиДокумента", 1, Ложь);
	Иначе
		// Если документ уже имеет ссылку, то обработаем счета-фактуры сразу.
		ДополнительныеСвойства.Вставить("НеобходимоСформироватьСчетаФактурыВыданныеДляСтрокДокумента", Ложь);
		СформироватьСчетаФактурыВыданныеДляСтрокДокумента();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	ОбновитьСсылкиСчетовФактур();
	ОбработкаПодчиненныхДокументовСчетФактура(Проведен);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПриСменеСтраницы" основной панели
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ПокупателиПриАктивизацииСтроки();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, Ложь,
	                                                ТипЦен);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, Ложь,
	                                                ТипЦен);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                ВалютаДокумента, Номер,
	                                                Ложь, ТипЦен);

	Если ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта меню "Заполнить по инвентаризации" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоИнвентаризации(Кнопка)

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, ,);
		Возврат;
	КонецЕсли;

	// Если заполняем, то почистим ТЧ
	Если Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Покупатели.Очистить();
		Товары.Очистить();
	КонецЕсли;
	
	ФормаВыбора = Документы.ИнвентаризацияТоваровОтданныхНаКомиссию.ПолучитьФормуВыбора();
	ФормаВыбора.Заголовок = "Выберите документ инвентаризации для заполнения отчета комиссионера";
	ФормаВыбора.РежимВыбора = Истина;

	// По умолчанию поставим отбор по договору
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;

	Инвентаризация = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(Инвентаризация) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоИнвентаризацииОтданныхУпр(Инвентаризация);

	ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоИнвентаризации()

// Процедура вызывается при выборе пункта меню "Заполнить по договору" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоДоговору(Кнопка)
 
	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, ,);
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Покупатели.Очистить();
		Товары.Очистить();
	КонецЕсли;

	ЗаполнитьТоварыУпр();
	ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоДоговору()

// Процедура вызывается при выборе пункта меню "Заполнить по реализации" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоРеализации(Кнопка)

	ЗаполнитьПоРеализации();
	ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при выборе пункта меню "Добавить из реализации" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеДобавитьИзРеализации(Кнопка)

	ЗаполнитьПоРеализации("Добавить");
    ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	Если ЭлементыФормы.ПокупателиТовары.ТекущиеДанные = Неопределено Тогда
		Предупреждение("Не выбран покупатель!");
		Возврат;
	КонецЕсли;
	
	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС                   = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен       = Неопределено;
	ФормаИзменениеТабличнойЧастиТовары.мМожноМенятьЦенуВДокументе = мМожноМенятьЦенуВДокументе;

	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить(Товары.НайтиСтроки(Новый Структура("КлючСтроки", ЭлементыФормы.ПокупателиТовары.ТекущиеДанные.КлючСтроки))));

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");

	СтруктураНередактируемыхРеквизитов = Новый Структура;
	СтруктураНередактируемыхРеквизитов.Вставить("УсловиеПродаж");

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураНередактируемыхРеквизитов, "Товары");
	Если СтруктураЗначений <> Неопределено Тогда

		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);

		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.Товары Цикл
			РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
		КонецЦикла;

		// В денежных средствах надо посчитать сумму НДС
		Для каждого СтрокаТабличнойЧасти Из ДокументОбъект.ДенежныеСредства Цикл
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти_ДенежныеСредства(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЦикла;

	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборТоварыОрганизаций = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборТоварыОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыОрганизаций.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьПоСериям();

	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	УправлениеВзаиморасчетами.ЗаполнитьТаблицуДокументовРасчетовСКонтрагентом(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура вызывается при выборе пункта меню "Заполнить по заказам документа" 
// кнопки "Заполнить" командной панели табличного поля "Документы расчетов с контрагентом",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельДокументыРасчетовСКонтрагентомЗаполнитьТолькоПоЗаказу(Кнопка)
	
	УправлениеВзаиморасчетами.ЗаполнитьПредоплату(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	УстановитьВидимость();
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");

	ЗаполняемыеОбъекты = Новый Соответствие();
	ЗаполняемыеОбъекты.Вставить("");		//шапка документа
	ЗаполняемыеОбъекты.Вставить("Товары");
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, ЗаполняемыеОбъекты, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	УстановитьВидимость();
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, Новый Структура("Товары"), Неопределено, ОтражатьВНалоговомУчете);

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	СтарыйДоговор = ДоговорКонтрагента;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	
	УстановитьВидимость();
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
	
	Если НЕ СтарыйДоговор = ДоговорКонтрагента Тогда
		ПриИзмененииДоговора();
	КонецЕсли;	
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода способа
// расчета комиссионного вознаграждения.
//
Процедура СпособРасчетаКомиссионногоВознагражденияПриИзменении(Элемент)

	Если СпособРасчетаКомиссионногоВознаграждения
		<> Перечисления.СпособыРасчетаКомиссионногоВознаграждения.НеРассчитывается Тогда

		// Если в табличной части отсутствуют строки - пересчитывать ничего не нужно.
		Если Товары.Количество() > 0 Тогда

			// Надо предложить пересчитать комиссионное вознаграждение.
			Ответ = Вопрос("Изменился способ расчета. Пересчитать комиссионное вознаграждение?", 
			               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				Для каждого СтрокаТабличнойЧасти Из Товары Цикл
					РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
				КонецЦикла;
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимость();
	УстановитьАвтоотметку();

КонецПроцедуры // СпособРасчетаКомиссионногоВознагражденияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода процента
// комиссионного вознаграждения.
//
Процедура ПроцентКомиссионногоВознагражденияПриИзменении(Элемент)

	// Если в табличной части отсутствуют строки - пересчитывать ничего не нужно.
	Если Товары.Количество() > 0 Тогда

		// Надо предложить пересчитать комиссионное вознаграждение.
		Ответ = Вопрос("Изменился процент вознаграждения. Пересчитать комиссионное вознаграждение", 
		               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТабличнойЧасти Из Товары Цикл
				РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
			КонецЦикла;
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ПроцентКомиссионногоВознагражденияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

	// Договор меняется.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером , СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Данный документ выполняет Приход по регистру взаиморасчетов.
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, 
	                     "Приход", "ЗаказПокупателя");

КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерассчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерассчитатьДолгНажатие(Элемент)

	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерассчитатьАвансДоговораНажатие()

Процедура ГиперссылкаСчетФактураПолученныйНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора".
//
Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора".
//
Процедура СчетУчетаРасчетовПоАвансамПолученнымОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора".
//
Процедура СчетУчетаРасчетовЗаПосредническиеУслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора".
//
Процедура СчетУчетаРасчетовПоАвансамВыданнымОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора".
//
Процедура СчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаЗатрат
//
Процедура СчетУчетаЗатратПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчета();

	УстановитьВидимость();

КонецПроцедуры // СчетУчетаЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаЗатрат
//
Процедура СчетУчетаЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетУчетаЗатратОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Субконто1
//
Процедура Субконто1НачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры // Субконто1НачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Субконто1
//
Процедура Субконто1ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчета(Истина);
	Если ЗначениеЗаполнено(СчетУчетаЗатратНУ) Тогда
		Если ТипЗнч(СубконтоНУ1) = ТипЗнч(Субконто1) Тогда
			СубконтоНУ1 = Субконто1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Субконто1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Субконто2
//
Процедура Субконто2ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчета(Истина);
	Если ЗначениеЗаполнено(СчетУчетаЗатратНУ) Тогда
		Если ТипЗнч(СубконтоНУ2) = ТипЗнч(Субконто2) Тогда
			СубконтоНУ2 = Субконто2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Субконто2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Субконто3
//
Процедура Субконто3ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчета(Истина);
	Если ЗначениеЗаполнено(СчетУчетаЗатратНУ) Тогда
		Если ТипЗнч(СубконтоНУ3) = ТипЗнч(Субконто3) Тогда
			СубконтоНУ3 = Субконто3;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // Субконто3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаЗатратНУ
//
Процедура СчетУчетаЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетУчетаЗатратНУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаЗатрат.
//
Процедура СчетУчетаЗатратНУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СчетУчетаЗатратНУПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СубконтоНУ1
//
Процедура СубконтоНУ1НачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры // СубконтоНУ1НачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкаНДСВознаграждения
//
Процедура СтавкаНДСВознагражденияПриИзменении(Элемент)

	// Нужно спросить об обновлении сумм НДС вознаграждения в ТЧ
	Если Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Ответ = Вопрос("Пересчитать суммы НДС вознаграждения?", 
	               РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);

	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;

	Для каждого СтрокаТЧ Из Товары Цикл
		СтрокаТЧ.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.СуммаВознаграждения,
		                                                     УчитыватьНДС, СуммаВключаетНДС,
		                                                     УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделениеОрганизации
//
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)

	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатрат
//
Процедура СтатьяЗатратПриИзменении(Элемент)

	ИзменитьСчетЗатрат();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТЧ);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТЧ, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТЧ, ЭтотОбъект);
	РассчитатьКомиссионноеВознаграждение(СтрокаТЧ);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТЧ, ЭтотОбъект);

	ТоварыПриАктивизацииСтроки(Элемент);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьСуммуПередачи(СтрокаТабличнойЧасти);
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Товары");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

Процедура ТоварыЦенаПередачиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	РассчитатьСуммуПередачи(СтрокаТабличнойЧасти);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

КонецПроцедуры

Процедура ТоварыСуммаПередачиПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.ЦенаПередачи = 0;
	Иначе
		СтрокаТабличнойЧасти.ЦенаПередачи = СтрокаТабличнойЧасти.СуммаПередачи / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;

	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	РассчитатьКомиссионноеВознаграждение(ЭлементыФормы.Товары.ТекущиеДанные);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода ПереданныеПринятыеБУ
// в строке табличной части "Товары".
//
Процедура ТоварыПереданныеПринятыеБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры // Процедура ТоварыПереданныеПринятыеБУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода ПереданныеПринятыеБУ
// в строке табличной части "Товары".
//
Процедура ТоварыПереданныеПринятыеБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТЧ.ПереданныеПринятыеНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));

КонецПроцедуры // ТоварыПереданныеПринятыеБУПриИзменении()

// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиУКомиссионеров", "По остаткам номенклатуры у комиссионера");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Если ЭлементыФормы.ПокупателиТовары.ТекущиеДанные = Неопределено Тогда
		Предупреждение("Не выбран покупатель!");
		Возврат;
	КонецЕсли;

	ЕстьЦена  = мМожноМенятьЦенуВДокументе;
	ЕстьСерия = Истина;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"           , "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("ТипЦен"               , ТипЦен);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Контрагент"           , Контрагент);
	СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
	СтруктураПараметровПодбора.Вставить("Склад"                , Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("Заголовок"            , "Подбор номенклатуры в документ " + 
	                                                             ПредставлениеДок + " № " + Номер);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, Количество, КоличествоМест, Цена, Характеристика, Серия, ЕдиницаИзмерения;
	
	Покупатель = ЭлементыФормы.ПокупателиТовары.ТекущиеДанные;
	
	Если Покупатель = Неопределено Тогда
		Предупреждение("Не выбран покупатель!");
		Возврат;
	КонецЕсли;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения"          , ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	СтруктураОтбора.Вставить("ЦенаПередачи"              , Цена);
	СтруктураОтбора.Вставить("КлючСтроки"                , Покупатель.КлючСтроки);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи * СтрокаТабличнойЧасти.Количество;

		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		РассчитатьКомиссионноеВознаграждение(СтрокаТабличнойЧасти);

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		
		СтрокаТабличнойЧасти.КлючСтроки       = Покупатель.КлючСтроки;
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

		Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Цена * Количество,
		                   ВалютаЦены, ВалютаДокумента, КурсВзаиморасчетов, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
		                   КратностьВзаиморасчетов, ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета));

		СтрокаТабличнойЧасти.Сумма = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Сумма, Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры, 
		                                                                        Истина, УчитыватьНДС, СуммаВключаетНДС,
																				УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
		ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Товары");

		СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.Сумма;
		СтрокаТабличнойЧасти.ЦенаПередачи  = СтрокаТабличнойЧасти.Цена;

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСПередачиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Если СпособРасчетаКомиссионногоВознаграждения = Перечисления.СпособыРасчетаКомиссионногоВознаграждения.ПроцентОтСуммыПродажи Тогда
			СтрокаТабличнойЧасти.СуммаВознаграждения = ПроцентКомиссионногоВознаграждения / 100 * СтрокаТабличнойЧасти.Сумма;
		КонецЕсли;

		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	КонецЕсли;

	ТабличнаяЧастьИмя = "Товары";
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

	УчетСерийныхНомеров.ОбработкаПодбораНоменклатурыПоСерийномуНомеру(ЗначениеВыбора, СерийныеНомера,
	                                              ТабличнаяЧасть, СтрокаТабличнойЧасти,
	                                              мПараметрыСвязиСтрокТЧ,
	                                              ТабличнаяЧастьИмя,
	                                              ЭтотОбъект);

КонецПроцедуры // ТоварыОбработкаПодбора()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если ЭлементыФормы.Товары.Колонки.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если ЭлементыФормы.Товары.Колонки.СтранаПроисхождения.Видимость	Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
	КонецЕсли;
	
	Если ЭлементыФормы.ПокупателиТовары.ТекущиеДанные <> Неопределено И НоваяСтрока Тогда
		ЭлементыФормы.Товары.ТекущиеДанные.КлючСтроки = ЭлементыФормы.ПокупателиТовары.ТекущиеДанные.КлючСтроки;
	КонецЕсли;
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ПередНачаломДобавления" табличной части "Товары".
//
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если ЭлементыФормы.ПокупателиТовары.ТекущиеДанные = Неопределено Тогда
		Отказ = Истина;
		Предупреждение("Не выбран покупатель!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)
	
	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;
	
КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки" 
// строки табличной части "Товары".
//
Процедура ТоварыПриАктивизацииСтроки(Элемент)

	Если ЭлементыФормы.Товары.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	СчетБУ  = ЭлементыФормы.Товары.ТекущиеДанные.СчетДоходовБУ;
	СчетНУ  = ЭлементыФормы.Товары.ТекущиеДанные.СчетДоходовНУ;

	ЭлементыФормы.Товары.Колонки.СубконтоБУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
	ЭлементыФормы.Товары.Колонки.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетНУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыВознаграждениеПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	СтрокаТЧ.СуммаНДСВознаграждения = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.СуммаВознаграждения,
	                                                     УчитыватьНДС, СуммаВключаетНДС,
	                                                     УчетНДС.ПолучитьСтавкуНДС(СтавкаНДСВознаграждения));

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетДоходовБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	СчетБУ   = СтрокаТЧ.СчетДоходовБУ;

	Если СчетБУ.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТЧ.СубконтоБУ = Новый(СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		СтрокаТЧ.СубконтоБУ = Неопределено;
	КонецЕсли;

	СтрокаТЧ.СчетДоходовНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));
	СчетНУ = СтрокаТЧ.СчетДоходовНУ;

	Если СчетНУ.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТЧ.СубконтоНУ = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0]);
		СтрокаТЧ.СубконтоНУ = СтрокаТЧ.СубконтоБУ;
	Иначе
		СтрокаТЧ.СубконтоНУ = Неопределено;
	КонецЕсли;

	ЭлементыФормы.Товары.Колонки.СубконтоБУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
	ЭлементыФормы.Товары.Колонки.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетДоходовБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетРасходовБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
    Если ЗначениеЗаполнено(Элемент.Значение) Тогда
        СтруктураСчетов = Новый Структура("СчетБУ,СчетРасходовБУ,СчетРасходовНУ,Субконто1,Субконто2,Субконто3",СтрокаТЧ.СчетРасходовБУ,СтрокаТЧ.СчетРасходовБУ,СтрокаТЧ.СчетРасходовНУ,СтрокаТЧ.СубконтоБУ,СтрокаТЧ.СубконтоНУ);
        НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтруктураСчетов, Истина,"СчетРасходовБУ","СчетРасходовНУ", Истина);
        СтрокаТЧ.СчетРасходовНУ = СтруктураСчетов.СчетРасходовНУ;
        
    КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетДоходовНУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	СчетНУ   = СтрокаТЧ.СчетДоходовНУ;

	Если СчетНУ.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТЧ.СубконтоНУ = Новый(СчетНУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		СтрокаТЧ.СубконтоНУ = Неопределено;
	КонецЕсли;

	ЭлементыФормы.Товары.Колонки.СубконтоНУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетНУ) ИЛИ (СчетНУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" 
// в строке табличной части "Товары".
//
Процедура ТоварыСчетДоходовНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" 
// в строке табличной части "Товары".
//
Процедура ТоварыСубконтоБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;

	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетДоходовБУ, СтрокаТЧ.СчетДоходовНУ, 1, СтрокаТЧ.СубконтоБУ, СтрокаТЧ.СубконтоНУ);
	СтруктураСчетов = Новый Структура("СчетБУ,СчетДоходовБУ,СчетДоходовНУ,Субконто1,Субконто2,Субконто3",СтрокаТЧ.СчетДоходовБУ,СтрокаТЧ.СчетДоходовБУ,СтрокаТЧ.СчетДоходовНУ,СтрокаТЧ.СубконтоБУ,СтрокаТЧ.СубконтоНУ);
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтруктураСчетов, Истина,"СчетДоходовБУ","СчетДоходовНУ", Истина);
    СтрокаТЧ.СчетДоходовНУ = СтруктураСчетов.СчетДоходовНУ;
    
    СтруктураСчетов = Новый Структура("СчетБУ,СчетРасходовБУ,СчетРасходовНУ,Субконто1,Субконто2,Субконто3",СтрокаТЧ.СчетРасходовБУ,СтрокаТЧ.СчетРасходовБУ,СтрокаТЧ.СчетРасходовНУ,СтрокаТЧ.СубконтоБУ,СтрокаТЧ.СубконтоНУ);
    НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтруктураСчетов, Истина,"СчетРасходовБУ","СчетРасходовНУ", Истина);
    СтрокаТЧ.СчетРасходовНУ = СтруктураСчетов.СчетРасходовНУ;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ДЕНЕЖНЫЕ СРЕДСТВА

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма" 
// в строке табличной части "Денежные средства".
//
Процедура ДенежныеСредстваСуммаПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти_ДенежныеСредства(ЭлементыФормы.ДенежныеСредства.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ДенежныеСредстваСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СтавкаНДС" 
// в строке табличной части "Денежные средства".
//
Процедура ДенежныеСредстваСтавкаНДСПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти_ДенежныеСредства(ЭлементыФормы.ДенежныеСредства.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ДенежныеСредстваСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидОтчетаПоПлатежам"
Процедура ДенежныеСредстваВидОтчетаПоПлатежамПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.ДенежныеСредства.ТекущиеДанные;
	Если ТекДанные.ВидОтчетаПоПлатежам = Перечисления.ВидыОтчетовПоПлатежамКомиссия.Оплата Тогда
		ТекДанные.СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
	Иначе
		ТекДанные.СтавкаНДС = Перечисления.СтавкиНДС.НДС18_118;
	КонецЕсли;
	ДенежныеСредстваСтавкаНДСПриИзменении("");
	
КонецПроцедуры



// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЧ ДокументыРасчетовСКонтрагентом

// Процедура рассчитывает суммы в строке табличной части ДокументыРасчетовСКонтрагентом
// 
// Параметры:
// ТекДанные                       - <Текущие данные строки табличной части>
// РассчитыватьСуммуВзаиморасчетов - <Булево> Если Истина - рассчитывается и сумма взаиморасчетов, и сумма регл.учета
//                                   Если Ложь - рассчитывается только сумма регл.учета
//
Процедура РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, РассчитыватьСуммуВзаиморасчетов = Истина)

	мСтруктураПараметровДляДокументовРасчетов.Вставить("КурсСтрокиДокументаРасчетов", мКурсСтрокиДокументаРасчетов);
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровДляДокументовРасчетов);
	УправлениеВзаиморасчетами.РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ТекДанные, мСтруктураПараметровДляДокументовРасчетов, РассчитыватьСуммуВзаиморасчетов);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента,
														Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	УправлениеВзаиморасчетами.ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(ТекДанные);
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СуммаВзаиморасчетов
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ "ДокументыРасчетовСКонтрагентом".
//
Процедура ДокументыРасчетовСКонтрагентомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	мКурсСтрокиДокументаРасчетов = ?(ТекДанные.СуммаВзаиморасчетов = 0, 0, ТекДанные.СуммаРегл / ТекДанные.СуммаВзаиморасчетов);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "ПараметрыЭлектронногоОбменаДокументами".
//
Процедура ДействияФормыПараметрыЭлектронногоОбменаДокументами(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПараметрыЭлектронногоОбменаДокументами(ЭтотОбъект);

КонецПроцедуры // ДействияФормыПараметрыЭлектронногоОбменаДокументами()

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЧ Покупатели

Процедура ПокупателиПриАктивизацииСтроки(Элемент = Неопределено)
	
	ОтборТовары = ЭлементыФормы.Товары.ОтборСтрок.КлючСтроки;
	
	Если ЭлементыФормы.ПокупателиТовары.ТекущиеДанные <> Неопределено Тогда
		ОтборТовары.Значение = ЭлементыФормы.ПокупателиТовары.ТекущиеДанные.КлючСтроки;
		ОтборТовары.Использование = Истина;
	Иначе
		ОтборТовары.Значение = 0;
		ОтборТовары.Использование = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПокупателиТоварыПередУдалением(Элемент, Отказ)
	// Необходимо очистить дополнительные сведения
	КлючПоиска = Новый Структура("КлючСтроки" , ЭлементыФормы.ПокупателиТовары.ТекущиеДанные.КлючСтроки);
	
	УдалитьСвязанныеЗаписи(КлючПоиска, Отказ);
	
КонецПроцедуры

Процедура ПокупателиТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.ПокупателиТовары.Колонки.Всего.Видимость Тогда
		
		Всего = 0;
		НайденныеСтрокиТовары = Товары.НайтиСтроки(Новый Структура("КлючСтроки" , ДанныеСтроки.КлючСтроки));
		Для Каждого Строка Из НайденныеСтрокиТовары Цикл
			Всего = Всего + Строка.Сумма + ?(СуммаВключаетНДС, 0, Строка.СуммаНДС);
		КонецЦикла;
			
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(Всего));
		
		Если ОформлениеСтроки.Ячейки.ВыставленСФ.ЗначениеФлажка
			И НЕ ЗначениеЗаполнено(ОформлениеСтроки.Ячейки.ДатаСФ.Значение) Тогда
			ОформлениеСтроки.Ячейки.ДатаСФ.ОтметкаНезаполненного = Истина;
		Иначе
			ОформлениеСтроки.Ячейки.ДатаСФ.ОтметкаНезаполненного = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПокупателиТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанныеТовары = ЭлементыФормы.ПокупателиТовары.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекДанныеТовары.КлючСтроки = ПолучитьНовыйКлючСтроки();
		
		Если Копирование Тогда
			ТекДанныеТовары.ВыставленСФ = Ложь;
			ТекДанныеТовары.СчетФактура = Документы.СчетФактураВыданный.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдалитьСвязанныеЗаписи(КлючПоиска, Отказ)
	
	НайденныеСтрокиТовары = Товары.НайтиСтроки(КлючПоиска);
	
	Если НайденныеСтрокиТовары.Количество() > 0 Тогда
		Если Вопрос("При удалении покупателя будут очищены связанные с ним строки по товарам. Продолжить?", РежимДиалогаВопрос.ДаНет) <> КодВозвратаДиалога.Да Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Для Каждого Строка Из НайденныеСтрокиТовары Цикл
			Товары.Удалить(Строка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьСуммыПокупателей()
	
	ЭлементыФормы.ПокупателиТовары.ОбновитьСтроки();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мМожноМенятьЦенуВДокументе = Истина;
мКолонкиТовары             = ЭлементыФормы.Товары.Колонки;
мКолонкиДокументы          = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.Колонки;