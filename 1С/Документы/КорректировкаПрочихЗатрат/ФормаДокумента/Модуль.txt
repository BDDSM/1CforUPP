////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мКолонкиЗатраты, мКолонкиПолучатели;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОтражатьВРегламентированномУчете;
Перем мВедениеУчетаЗатратПоПроектам;

Перем мПрименениеУСН;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить( ЭлементыФормы.Затраты,    ЭлементыФормы.КоманднаяПанельЗатраты   .Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить( ЭлементыФормы.Получатели, ЭлементыФормы.КоманднаяПанельПолучатели.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура управляет доступностью колонок субконто в табличной части затраты
//
Процедура УстановитьДоступностьСубконто(СтрокаТабличнойЧасти)

	КолонкиЗатраты = ЭлементыФормы.Затраты.Колонки;

	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТабличнойЧасти.СчетЗатрат, Неопределено);
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатрат,
									 СтрокаТабличнойЧасти.Субконто1,
									 КолонкиЗатраты.Субконто1,
									 СтрокаТабличнойЧасти.Субконто2,
									 КолонкиЗатраты.Субконто2,
									 СтрокаТабличнойЧасти.Субконто3,
									 КолонкиЗатраты.Субконто3);
	КонецЕсли;
	
	ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТабличнойЧасти.СчетЗатратНУ, Неопределено, "Налоговый");
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратНУ,
									 СтрокаТабличнойЧасти.СубконтоНУ1,
									 КолонкиЗатраты.СубконтоНУ1,
									 СтрокаТабличнойЧасти.СубконтоНУ2,
									 КолонкиЗатраты.СубконтоНУ2,
									 СтрокаТабличнойЧасти.СубконтоНУ3,
									 КолонкиЗатраты.СубконтоНУ3);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьСубконто()

// Процедура управляет доступностью колонок субконто в табличной части получатели
//
Процедура УстановитьДоступностьСубконтоПолучатели(СтрокаТабличнойЧасти)

	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТабличнойЧасти.СчетЗатратПолучатель, Неопределено);
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратПолучатель,
									 СтрокаТабличнойЧасти.СубконтоПолучатель1,
									 мКолонкиПолучатели.Субконто1,
									 СтрокаТабличнойЧасти.СубконтоПолучатель2,
									 мКолонкиПолучатели.Субконто2,
									 СтрокаТабличнойЧасти.СубконтоПолучатель3,
									 мКолонкиПолучатели.Субконто3);
	КонецЕсли;
	
	ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТабличнойЧасти.СчетЗатратПолучательНУ, Неопределено, "Налоговый");
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратПолучательНУ,
									 СтрокаТабличнойЧасти.СубконтоПолучательНУ1,
									 мКолонкиПолучатели.СубконтоНУ1,
									 СтрокаТабличнойЧасти.СубконтоПолучательНУ2,
									 мКолонкиПолучатели.СубконтоНУ2,
									 СтрокаТабличнойЧасти.СубконтоПолучательНУ3,
									 мКолонкиПолучатели.СубконтоНУ3);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьСубконтоПолучатели()

// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчета(ИзменениеСубконто = ЛОЖЬ)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	ХарактерЗатрат = СтрокаТабличнойЧасти.СтатьяЗатрат.ХарактерЗатрат;
	
	Если ХарактерЗатрат <> Перечисления.ХарактерЗатрат.Прочие Тогда
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СтрокаТабличнойЧасти.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто2.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто3.ВидРасходовНУ;
	ИначеЕсли ИзменениеСубконто Тогда
		Возврат;
	Иначе
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СтрокаТабличнойЧасти.СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СтрокаТабличнойЧасти.СчетЗатрат, ВидЗатратНУ));
	Иначе
		СтрокаТабличнойЧасти.СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаТабличнойЧасти.СчетЗатрат));
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭлементыФормы.Затраты.ТекущиеДанные.СчетЗатратНУ,
	                             ЭлементыФормы.Затраты.ТекущиеДанные.СубконтоНУ1,
	                             ЭлементыФормы.Затраты.Колонки.СубконтоНУ1,
	                             ЭлементыФормы.Затраты.ТекущиеДанные.СубконтоНУ2,
	                             ЭлементыФормы.Затраты.Колонки.СубконтоНУ2,
	                             ЭлементыФормы.Затраты.ТекущиеДанные.СубконтоНУ3,
	                             ЭлементыФормы.Затраты.Колонки.СубконтоНУ3);
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()
							 
// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
// на закладке Получатели
Процедура ЗаполнитьСчетНалоговогоУчетаПолучатели(ИзменениеСубконто = ЛОЖЬ)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Получатели.ТекущиеДанные;
	ХарактерЗатрат = СтрокаТабличнойЧасти.СтатьяЗатратПолучатель.ХарактерЗатрат;
	
	Если ХарактерЗатрат <> Перечисления.ХарактерЗатрат.Прочие Тогда
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.СубконтоПолучатель1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СтрокаТабличнойЧасти.СубконтоПолучатель1.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.СубконтоПолучатель2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СтрокаТабличнойЧасти.СубконтоПолучатель2.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.СубконтоПолучатель3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СтрокаТабличнойЧасти.СубконтоПолучатель3.ВидРасходовНУ;
	ИначеЕсли ИзменениеСубконто Тогда
		Возврат;
	Иначе
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СтрокаТабличнойЧасти.СчетЗатратПолучательНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СтрокаТабличнойЧасти.СчетЗатратПолучатель, ВидЗатратНУ));
	Иначе
		СтрокаТабличнойЧасти.СчетЗатратПолучательНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаТабличнойЧасти.СчетЗатратПолучатель));
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭлементыФормы.Получатели.ТекущиеДанные.СчетЗатратПолучательНУ,
	                             ЭлементыФормы.Получатели.ТекущиеДанные.СубконтоПолучательНУ1,
	                             ЭлементыФормы.Получатели.Колонки.СубконтоНУ1,
	                             ЭлементыФормы.Получатели.ТекущиеДанные.СубконтоПолучательНУ2,
	                             ЭлементыФормы.Получатели.Колонки.СубконтоНУ2,
	                             ЭлементыФормы.Получатели.ТекущиеДанные.СубконтоПолучательНУ3,
	                             ЭлементыФормы.Получатели.Колонки.СубконтоНУ3);
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()


// Процедура обработка подбора прочих затрат
//
Процедура ОбработкаПодбораПрочихЗатрат( ТабЧасть, СтруктВыбора)
	
	НоваяСтрока = ТабЧасть.Найти( СтруктВыбора["СтатьяЗатрат"], "СтатьяЗатрат");
	
	Если НоваяСтрока = Неопределено Тогда
		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.СтатьяЗатрат = СтруктВыбора["СтатьяЗатрат"];
		
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля( НоваяСтрока, ПодразделениеОрганизации, НоваяСтрока.СтатьяЗатрат);
	КонецЕсли;
	
	НоваяСтрока.Сумма     = НоваяСтрока.Сумма     + СтруктВыбора.СуммаУпр;
	НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаРегл + СтруктВыбора.СуммаРегл;
	НоваяСтрока.СуммаНал  = НоваяСтрока.СуммаНал  + СтруктВыбора.СуммаРегл;
	
КонецПроцедуры // ОбработкаПодбораПрочихЗатрат()

// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	
	Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,мПрименениеУСН) Тогда
						
		Для Каждого СтрокаТЧ Из Затраты Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, СтрокаТЧ.ПодразделениеОрганизацииПолучатель, СтрокаТЧ.СтатьяЗатратПолучатель, "СчетЗатратПолучатель", "СчетЗатратПолучательНУ");
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьВидимостьДоступность()

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
КонецПроцедуры // УстановитьВидимостьДоступность()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		
		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Проект) Тогда
				Проект = Подразделение.ОсновнойПроект;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтатьяЗатрат");
	СтруктураКолонок.Вставить("Сумма");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Затраты.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мПрименениеУСН 		 = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	УстановитьВидимостьДоступность();
	
	мВедениеУчетаЗатратПоПроектам = УправлениеПроектами.ВедениеУчетаЗатратПоПроектам();
	РаботаСДиалогами.УстановитьВидимостьКолонкиПроект(ЭлементыФормы.Затраты.Колонки, , мУказаниеПроектовВТабличнойЧастиДокументов И мВедениеУчетаЗатратПоПроектам);
	РаботаСДиалогами.УстановитьВидимостьКолонкиПроект(ЭлементыФормы.Получатели.Колонки, , мУказаниеПроектовВТабличнойЧастиДокументов И мВедениеУчетаЗатратПоПроектам);
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект", Истина);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы.Затраты;
	СтраницаПанели.Заголовок = "Затраты (" + Затраты.Количество() + " поз.)";

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборПрочихЗатрат" Тогда
			ОбработкаПодбораПрочихЗатрат( Затраты, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Затраты"
//
Процедура КоманднаяПанельЗатратыЗаполнитьПоОстаткам(Кнопка)
	
	Если ОтражатьВУправленческомУчете И НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Предупреждение("Не указано подразделение!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Предупреждение("Не указано подразделение организации!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если Затраты.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена.
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Выбрать характер затрат для заполнения
	СписВыбора = Новый СписокЗначений;
	Для Каждого МетаЗначение Из Метаданные.Перечисления.ХарактерЗатрат.ЗначенияПеречисления Цикл
		СписВыбора.Добавить( Перечисления.ХарактерЗатрат[МетаЗначение.Имя], МетаЗначение.Синоним);
	КонецЦикла;
	
	СписВыбора.Удалить(СписВыбора.НайтиПоЗначению(Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы));
	СписВыбора.Удалить(СписВыбора.НайтиПоЗначению(Перечисления.ХарактерЗатрат.ЗаготовлениеИПриобретениеМЦ));
	СписВыбора.СортироватьПоПредставлению();
	СписВыбора.Вставить( 0, "<Все>", "<Все>");
	
	Выбор = СписВыбора.ВыбратьЭлемент("Выберите характер затрат для отбора...", СписВыбора[0].Значение);
	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Затраты.Очистить();
	ТабЗатраты = Затраты.Выгрузить();
	
	Если НЕ Выбор.Значение = "<Все>" Тогда
		ДопПараметры = Новый Структура;
		Параметры = Новый Массив;
		Параметры.Добавить( Выбор.Значение);
		ДопПараметры.Вставить( "ХарЗатрат", Параметры);
		
		УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамНЗП   ( ЭтотОбъект, ТабЗатраты, ДопПараметры);
		УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамЗатрат( ЭтотОбъект, ТабЗатраты, ДопПараметры);
	Иначе
		УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамНЗП   ( ЭтотОбъект, ТабЗатраты);
		УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамЗатрат( ЭтотОбъект, ТабЗатраты);
	КонецЕсли;
	
	Затраты.Загрузить(ТабЗатраты);
	
КонецПроцедуры // КоманднаяПанельЗатратыЗаполнить()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Получатели"
//
Процедура КоманднаяПанельПолучателиЗаполнитьПоДаннымОЗатратах(Кнопка)
	
	Для Каждого СтрокаТЧ Из Затраты Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ЗаказПолучатель) Тогда
			СтрокаТЧ.ЗаказПолучатель = СтрокаТЧ.Заказ;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.НоменклатурнаяГруппаПолучатель) Тогда
			СтрокаТЧ.НоменклатурнаяГруппаПолучатель = СтрокаТЧ.НоменклатурнаяГруппа;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПодразделениеОрганизацииПолучатель) Тогда
			СтрокаТЧ.ПодразделениеОрганизацииПолучатель = ПодразделениеОрганизации;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПодразделениеПолучатель) Тогда
			СтрокаТЧ.ПодразделениеПолучатель = Подразделение;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СтатьяЗатратПолучатель) Тогда
			СтрокаТЧ.СтатьяЗатратПолучатель = СтрокаТЧ.СтатьяЗатрат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетЗатратПолучатель) Тогда
			СтрокаТЧ.СчетЗатратПолучатель = СтрокаТЧ.СчетЗатрат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетЗатратПолучательНУ) Тогда
			СтрокаТЧ.СчетЗатратПолучательНУ = СтрокаТЧ.СчетЗатратНУ;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПроектПолучатель) Тогда
			СтрокаТЧ.ПроектПолучатель = СтрокаТЧ.Проект;
		КонецЕсли;
		
		// Бух.учет
		Если СтрокаТЧ.СтатьяЗатратПолучатель.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие
		   И СтрокаТЧ.СтатьяЗатрат          .ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие
		   И СтрокаТЧ.СчетЗатратПолучатель = СтрокаТЧ.СчетЗатрат Тогда
		   
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СубконтоПолучатель1) Тогда
				СтрокаТЧ.СубконтоПолучатель1 = СтрокаТЧ.Субконто1;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СубконтоПолучатель2) Тогда
				СтрокаТЧ.СубконтоПолучатель2 = СтрокаТЧ.Субконто2;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СубконтоПолучатель3) Тогда
				СтрокаТЧ.СубконтоПолучатель3 = СтрокаТЧ.Субконто3;
			КонецЕсли;
			
		КонецЕсли;
		
		// Нал. учет
		Если СтрокаТЧ.СтатьяЗатратПолучатель.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие
		   И СтрокаТЧ.СтатьяЗатрат          .ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие
		   И СтрокаТЧ.СчетЗатратПолучательНУ = СтрокаТЧ.СчетЗатратНУ Тогда
		   
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СубконтоПолучательНУ1) Тогда
				СтрокаТЧ.СубконтоПолучательНУ1 = СтрокаТЧ.СубконтоНУ1;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СубконтоПолучательНУ2) Тогда
				СтрокаТЧ.СубконтоПолучательНУ2 = СтрокаТЧ.СубконтоНУ2;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СубконтоПолучательНУ3) Тогда
				СтрокаТЧ.СубконтоПолучательНУ3 = СтрокаТЧ.СубконтоНУ3;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельПолучателиЗаполнитьПоДаннымОЗатратах()

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Затраты".
//
Процедура КоманднаяПанельЗатратыПодбор(Кнопка)
	
	СтруктПараметры = Новый Структура;
	СтруктПараметры.Вставить( "Подразделение",            Подразделение);
	СтруктПараметры.Вставить( "ПодразделениеОрганизации", ПодразделениеОрганизации);
	СтруктПараметры.Вставить( "ФлагУпрУчета",             ОтражатьВУправленческомУчете);
	СтруктПараметры.Вставить( "ФлагРеглУчета",            ОтражатьВБухгалтерскомУчете);
	СтруктПараметры.Вставить( "ВидЗатрат",                "НематериальныеЗатраты");
	СтруктПараметры.Вставить( "ДатаОстатков",             Дата);
	СтруктПараметры.Вставить( "Организация",              Организация);
	СтруктПараметры.Вставить( "Команда",                  "ПодборПрочихЗатрат");
	
	ОбработкаТабличныхЧастей.ОткрытьПодборСтатейЗатрат( ЭтаФорма, СтруктПараметры);
	
КонецПроцедуры // КоманднаяПанельЗатратыПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	мПрименениеУСН 		 = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
	
	// Заполнить значения счетов учета и счетов затрат.
	Если Затраты.Количество() > 0 
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете) Тогда
		
		Для каждого СтрокаТЧ Из Затраты Цикл
			Если Элемент.Значение Тогда
					УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
					РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
												  СтрокаТЧ.ПодразделениеОрганизацииПолучатель,
												  СтрокаТЧ.ПодразделениеПолучатель,
												  Организация);
					УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, СтрокаТЧ.ПодразделениеОрганизацииПолучатель, СтрокаТЧ.СтатьяЗатратПолучатель, "СчетЗатратПолучатель", "СчетЗатратПолучательНУ");
				Иначе
					СтрокаТЧ.СчетЗатрат             = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					СтрокаТЧ.СчетЗатратНУ           = ПланыСчетов.Налоговый.ПустаяСсылка();
					СтрокаТЧ.СчетЗатратПолучатель   = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					СтрокаТЧ.СчетЗатратПолучательНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
				КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;

	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	мПрименениеУСН 		 = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
    РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Для Каждого СтрокаТабличнойЧасти Из Затраты Цикл
		Если СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель.Владелец <> Организация Тогда
			СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
													 СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель,
													 СтрокаТабличнойЧасти.ПодразделениеПолучатель,
													 Организация);
	КонецЦикла;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПодразделениеОрганизацииПриИзменении(Элемент);
	КонецЕсли;
	
	Проект = Подразделение.ОсновнойПроект;

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Подразделения организации.
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Проект.
//
Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ПроектНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Затраты

// Процедура - обработчик события "ПриИзменении" поля ввода сумма
// в строке табличной части "Затраты".
//
Процедура ЗатратыСуммаПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Суммы.
	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	СтрокаТабличнойЧасти.СуммаНал = СтрокаТабличнойЧасти.СуммаРегл;
	
КонецПроцедуры // ЗатратыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Сумма (регл.)
// в строке табличной части "Затраты".
//
Процедура ЗатратыСуммаРеглПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаНал = СтрокаТабличнойЧасти.СуммаРегл;
	
КонецПроцедуры // ЗатратыСуммаРеглПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// в строке табличной части "Затраты".
//
Процедура ЗатратыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Затраты", ДопПараметры);

КонецПроцедуры // ЗатратыЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Статья затрат
// в строке табличной части "Затраты".
//
Процедура ЗатратыСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат);
	
	УстановитьДоступностьСубконто(СтрокаТабличнойЧасти);
	
	Если мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.УстановитьПроектПоУмолчанию(Подразделение, СтрокаТабличнойЧасти.СтатьяЗатрат, СтрокаТабличнойЧасти.Проект);
	КонецЕсли;
	
КонецПроцедуры // ЗатратыСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Счет затрат
// в строке табличной части "Затраты".
//
Процедура ЗатратыСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
	Колонки = ЭлементыФормы.Затраты.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле( Элемент.Значение,
		СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
		СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
		СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3);
	
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		СтрокаТабличнойЧасти.СтатьяЗатрат,
		СтрокаТабличнойЧасти.СчетЗатрат,
		СтрокаТабличнойЧасти.Субконто1,
		СтрокаТабличнойЧасти.Субконто2,
		СтрокаТабличнойЧасти.Субконто3);
		
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		СтрокаТабличнойЧасти.СтатьяЗатрат,
		СтрокаТабличнойЧасти.СчетЗатратНУ,
		СтрокаТабличнойЧасти.СубконтоНУ1,
		СтрокаТабличнойЧасти.СубконтоНУ2,
		СтрокаТабличнойЧасти.СубконтоНУ3);

КонецПроцедуры // ЗатратыСчетЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура ЗатратыСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ЗатратыСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "Затраты"
//
Процедура ЗатратыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	Если ЭлементыФормы.Затраты.Колонки.ХарактерЗатрат.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.УстановитьТекст(ХарактерЗатрат);
	КонецЕсли;
	
	УправлениеПроектами.УстановитьДоступностьПроектаВСтрокеТабЧасти(ХарактерЗатрат, ОформлениеСтроки, ЭлементыФормы.Затраты);
	
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, ДанныеСтроки.Продукция, ДанныеСтроки.СчетЗатрат, ДанныеСтроки.СчетЗатратНУ, ОформлениеСтроки, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП);
	
КонецПроцедуры // ЗатратыПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "Затраты".
//
Процедура ЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Проект) Тогда
			Элемент.ТекущиеДанные.Проект = Проект;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ЗатратыПриНачалеРедактирования()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Затраты".
//
Процедура ЗатратыПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	УстановитьДоступностьСубконто(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗатратыПриАктивизацииСтроки()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Затраты".
//
Процедура ЗатратыСубконто1ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчета(Истина);
	СтрокаТЧ = ЭлементыФормы.Затраты.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 1, СтрокаТЧ.Субконто1, СтрокаТЧ.СубконтоНУ1);

КонецПроцедуры // ЗатратыСубконто1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Затраты".
//
Процедура ЗатратыСубконто2ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчета(Истина);
	СтрокаТЧ = ЭлементыФормы.Затраты.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 2, СтрокаТЧ.Субконто2, СтрокаТЧ.СубконтоНУ2);

КонецПроцедуры // ЗатратыСубконто2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Затраты".
//
Процедура ЗатратыСубконто3ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчета(Истина);
	СтрокаТЧ = ЭлементыФормы.Затраты.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 3, СтрокаТЧ.Субконто3, СтрокаТЧ.СубконтоНУ3);

КонецПроцедуры // ЗатратыСубконто3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Счет затрат (НУ) табличной части "Затраты".
//
Процедура ЗатратыСчетЗатратНУПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Затраты.ТекущиеДанные;
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             ЭлементыФормы.Затраты.ТекущиеДанные.Субконто1,
	                             ЭлементыФормы.Затраты.Колонки.Субконто1,
	                             ЭлементыФормы.Затраты.ТекущиеДанные.Субконто2,
	                             ЭлементыФормы.Затраты.Колонки.Субконто2,
	                             ЭлементыФормы.Затраты.ТекущиеДанные.Субконто3,
	                             ЭлементыФормы.Затраты.Колонки.Субконто3);
		
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		ТекущиеДанные.СтатьяЗатрат,
		ТекущиеДанные.СчетЗатратНУ,
		ТекущиеДанные.СубконтоНУ1,
		ТекущиеДанные.СубконтоНУ2,
		ТекущиеДанные.СубконтоНУ3);
								 
КонецПроцедуры // ЗатратыСчетЗатратНУПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Статья затрат
// в строке табличной части "Затраты".
//
Процедура ЗатратыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СформироватьТаблицуОтбораНематериальныхСтатейЗатрат();
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		ТаблицаОтбора, 
		Элемент, 
		СтандартнаяОбработка
	);
	
КонецПроцедуры // ЗатратыСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Проект"
//
Процедура ЗатратыПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ЗатратыПроектНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПОЛУЧАТЕЛИ

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "Получатели"
//
Процедура ПолучателиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатратПолучатель.ХарактерЗатрат;
	Если ЭлементыФормы.Затраты.Колонки.ХарактерЗатрат.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.УстановитьТекст(ХарактерЗатрат);
	КонецЕсли;
	
	УправлениеПроектами.УстановитьДоступностьПроектаВСтрокеТабЧасти(ХарактерЗатрат, ОформлениеСтроки, ЭлементыФормы.Получатели);
	
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, ДанныеСтроки.ПродукцияПолучатель, ДанныеСтроки.СчетЗатратПолучатель, ДанныеСтроки.СчетЗатратПолучательНУ, ОформлениеСтроки, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП);
	
КонецПроцедуры // ПолучателиПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Получатели".
//
Процедура ПолучателиСубконто1ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчетаПолучатели(Истина);
	СтрокаТЧ = ЭлементыФормы.Получатели.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатратПолучатель, СтрокаТЧ.СчетЗатратПолучательНУ, 1, СтрокаТЧ.СубконтоПолучатель1, СтрокаТЧ.СубконтоПолучательНУ1);

КонецПроцедуры // ПолучателиСубконто1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Получатели".
//
Процедура ПолучателиСубконто2ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчетаПолучатели(Истина);
	СтрокаТЧ = ЭлементыФормы.Получатели.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатратПолучатель, СтрокаТЧ.СчетЗатратПолучательНУ, 2, СтрокаТЧ.СубконтоПолучатель2, СтрокаТЧ.СубконтоПолучательНУ2);

КонецПроцедуры // ПолучателиСубконто2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Получатели".
//
Процедура ПолучателиСубконто3ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчетаПолучатели(Истина);
	СтрокаТЧ = ЭлементыФормы.Получатели.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатратПолучатель, СтрокаТЧ.СчетЗатратПолучательНУ, 3, СтрокаТЧ.СубконтоПолучатель3, СтрокаТЧ.СубконтоПолучательНУ3);

КонецПроцедуры // ПолучателиСубконто3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Счет затрат (НУ) табличной части "Получатели".
//
Процедура ПолучателиСчетЗатратНУПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Получатели.ТекущиеДанные;
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             ЭлементыФормы.Получатели.ТекущиеДанные.СубконтоПолучательНУ1,
	                             ЭлементыФормы.Получатели.Колонки.СубконтоНУ1,
	                             ЭлементыФормы.Получатели.ТекущиеДанные.СубконтоПолучательНУ2,
	                             ЭлементыФормы.Получатели.Колонки.СубконтоНУ2,
	                             ЭлементыФормы.Получатели.ТекущиеДанные.СубконтоПолучательНУ3,
	                             ЭлементыФормы.Получатели.Колонки.СубконтоНУ3);
		
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		ТекущиеДанные.СтатьяЗатратПолучатель,
		ТекущиеДанные.СчетЗатратПолучательНУ,
		ТекущиеДанные.СубконтоПолучательНУ1,
		ТекущиеДанные.СубконтоПолучательНУ2,
		ТекущиеДанные.СубконтоПолучательНУ3);
								 
КонецПроцедуры // ПолучателиСчетЗатратНУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Счет затрат табличной части "Получатели".
//
Процедура ПолучателиСчетЗатратПолучательПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Получатели.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, Ложь, "СчетЗатратПолучатель", "СчетЗатратПолучательНУ", ложь);
	
	Колонки = ЭлементыФормы.Получатели.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле( Элемент.Значение,
		СтрокаТабличнойЧасти.СубконтоПолучатель1, Колонки.Субконто1,
		СтрокаТабличнойЧасти.СубконтоПолучатель2, Колонки.Субконто2,
		СтрокаТабличнойЧасти.СубконтоПолучатель3, Колонки.Субконто3);
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(
		СтрокаТабличнойЧасти.СчетЗатратПолучательНУ,
		СтрокаТабличнойЧасти.СубконтоПолучательНУ1, Колонки.СубконтоНУ1,
		СтрокаТабличнойЧасти.СубконтоПолучательНУ2, Колонки.СубконтоНУ2,
		СтрокаТабличнойЧасти.СубконтоПолучательНУ3, Колонки.СубконтоНУ3);
								 
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		СтрокаТабличнойЧасти.СтатьяЗатратПолучатель,
		СтрокаТабличнойЧасти.СчетЗатратПолучатель,
		СтрокаТабличнойЧасти.СубконтоПолучатель1,
		СтрокаТабличнойЧасти.СубконтоПолучатель2,
		СтрокаТабличнойЧасти.СубконтоПолучатель3);
		
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		СтрокаТабличнойЧасти.СтатьяЗатратПолучатель,
		СтрокаТабличнойЧасти.СчетЗатратПолучательНУ,
		СтрокаТабличнойЧасти.СубконтоПолучательНУ1,
		СтрокаТабличнойЧасти.СубконтоПолучательНУ2,
		СтрокаТабличнойЧасти.СубконтоПолучательНУ3);
	
КонецПроцедуры // ПолучателиСчетЗатратПолучательПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Статья затрат табличной части "Получатели".
//
Процедура ПолучателиСтатьяЗатратПолучательПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Получатели.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля( СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель, СтрокаТабличнойЧасти.СтатьяЗатратПолучатель, "СчетЗатратПолучатель", "СчетЗатратПолучательНУ");
	
	УстановитьДоступностьСубконтоПолучатели(СтрокаТабличнойЧасти);
	
	Если мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.УстановитьПроектПоУмолчанию(Подразделение, СтрокаТабличнойЧасти.СтатьяЗатратПолучатель, СтрокаТабличнойЧасти.ПроектПолучатель);
	КонецЕсли;
	
КонецПроцедуры // ПолучателиСтатьяЗатратПолучательПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура ПолучателиСчетЗатратПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ПолучателиСчетЗатратПолучательОбработкаВыбора()

// Процедура - обработчик события "При изменении" поля ввода Подразделения
// табличной части "Получатели"
Процедура ПолучателиПодразделениеПолучательПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(
		ОтражатьВБухгалтерскомУчете,
		Элементыформы.Получатели.ТекущиеДанные.ПодразделениеОрганизацииПолучатель,
		Элементыформы.Получатели.ТекущиеДанные.ПодразделениеПолучатель,
		Организация);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
// табличной части "Получатели"
Процедура ПолучателиПодразделениеОрганизацииПолучательНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 Элементыформы.Получатели.ТекущиеДанные.ПодразделениеОрганизацииПолучатель,
											 Элементыформы.Получатели.ТекущиеДанные.ПодразделениеПолучатель,
											 Организация,
											 ЭтаФорма);
											 
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля Статья затрат табличной части "Получатели".
//
Процедура ПолучателиСтатьяЗатратПолучательНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СформироватьТаблицуОтбораНематериальныхСтатейЗатрат();
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		ТаблицаОтбора, 
		Элемент, 
		СтандартнаяОбработка
	);
	
КонецПроцедуры // ПолучателиСтатьяЗатратПолучательНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля Заказ табличной части "Получатели".
//
Процедура ПолучателиЗаказПолучательНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Затраты", ДопПараметры, "ЗаказПолучатель");
	
КонецПроцедуры // ПолучателиЗаказПолучательНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Проект"
//
Процедура ПолучателиПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ЗатратыПроектНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиЗатраты = ЭлементыФормы.Затраты.Колонки;
мКолонкиПолучатели = ЭлементыФормы.Получатели.Колонки;