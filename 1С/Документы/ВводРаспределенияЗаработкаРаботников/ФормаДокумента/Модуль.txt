////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента;			// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущийСотрудник;				// Ссылка на текущего работника формы
Перем мСинхронизируемыеТабличныеЧасти;	// для синхронизации строк табличных полей
Перем мДеревоМакетов;					// Хранит дерево макетов печатных форм
Перем мПодменюПечати;					// Хранит элемент управления подменю печати
Перем мПечатьПоУмолчанию;				// Хранит элемент управления кнопку печать по умолчанию
Перем мКнопкиЗаполненияТЧ;				// Хранит дерево кнопок подменю заполнение ТЧ

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

// Переменные обработки ввода
Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Удаляет строки РаспределениеНачислений по Работники
//
Процедура УдалитьСтрокиПоРаботнику(Сотрудник)
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	МассивСтрок = РаспределениеНачислений.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТабличнойЧасти Из МассивСтрок Цикл
		РаспределениеНачислений.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры // УдалитьСтрокиПоРаботнику()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаспределениеНачислений,ЭлементыФормы.КоманднаяПанельРаспределениеНачислений);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Обновляет значение отбора строк т.п. РаспределениеНачислений
Процедура УстановитьОтборРаботника(Сотрудник)
	
	ЭлементыФормы.РаспределениеНачислений.ОтборСтрок.Сотрудник.Значение = Сотрудник;
	
КонецПроцедуры // УстановитьОтборРаботника()

// Процедура формирует таблицу работников на основе данных табличных частей документа 
//
// Параметры
//
Процедура ЗаполнитьТаблицуРаботников()
	
	Работники.Очистить();
	
	ТЗ = РаспределениеНачислений.Выгрузить();
	ТЗ.Свернуть("Сотрудник,Физлицо");
	Для Каждого СтрокаТабличнойЧасти Из ТЗ Цикл
		ЗаполнитьЗначенияСвойств(Работники.Добавить(), СтрокаТабличнойЧасти);
	КонецЦикла;

	Работники.Сортировать("Сотрудник");
	
КонецПроцедуры // ЗаполнитьТаблицуРаботников()

Процедура ПриИзмененииРаботника(Значение)

	// если работник изменился, то по предыдущему работнику удалим строки
	Если Значение <> мТекущийСотрудник Тогда
		
		УдалитьСтрокиПоРаботнику(мТекущийСотрудник);
		// запомним текущего работника
		мТекущийСотрудник = Значение;
		
		УстановитьОтборРаботника(мТекущийСотрудник);

	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииРаботника()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

		Если НЕ ЗначениеЗаполнено(Период) Тогда
			// реквизит Период - месяц для которого вводим распределение
			Период = НачалоМесяца(РабочаяДата);
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("СпособОтраженияВУпручете");
	СтруктураКолонок.Вставить("ДоляСпособаОтражения");

	// Установить ограничение - изменять видимость колонок для табличной части Удержания
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаспределениеНачислений.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Кнопки "По сотруднику" командной панели установим в отключенное состояние
	ЭлементыФормы.КоманднаяПанельРаспределениеНачислений.Кнопки.ВсеРаботники.Пометка  = Ложь;
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(Период);
	
	// Заполним таблицу работников
	ЗаполнитьТаблицуРаботников();
	Работники.Индексы.Добавить("Сотрудник");
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Работники.Колонки.ТабельныйНомерСтрока);
	мМассивЭУ.Добавить(ЭлементыФормы.РаспределениеНачислений.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));

	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Работники;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Реквизиты = "";
		ТаблицаРаспределения = "";
		
		ТаблицаРаспределенияПустая = Истина;
		Если ЗначениеВыбора.Свойство("Реквизиты",Реквизиты) И Реквизиты.Свойство("РаспределениеУпрНачислений",ТаблицаРаспределения) Тогда
			ТаблицаРаспределенияПустая = ТаблицаРаспределения.Количество() = 0;
		КонецЕсли;
		
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			Работники.Очистить();
			РаспределениеНачислений.Очистить();
			
			Для Каждого СтрокаТЗ Из ЗначениеВыбора.Данные.Выгрузить() Цикл
				ЗаполнитьЗначенияСвойств(Работники.Добавить(), СтрокаТЗ);
			КонецЦикла;
			
			Работники.Свернуть("Сотрудник,Физлицо");
			
			Если НЕ ТаблицаРаспределенияПустая Тогда
				//заполним таблицу распределения начислений
				Для каждого СтрокаТЗ Из Работники Цикл
					Для каждого СтрокаТаблицыРаспределения Из ТаблицаРаспределения Цикл
						НоваяСтрока = РаспределениеНачислений.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТЗ);
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыРаспределения);
					КонецЦикла;
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура - обработчик события нажатия кнопки "ВсеРаботники"
//
Процедура КоманднаяПанельРаспределениеНачисленийВсеРаботники(Кнопка)
	
	Если ЭлементыФормы.Работники.ТекущаяСтрока <> Неопределено Тогда
		
		Если ЭлементыФормы.РаспределениеНачислений.ОтборСтрок.Сотрудник.Использование Тогда
			// отключим отбор
			ЭлементыФормы.РаспределениеНачислений.Колонки.ДоляСпособаОтражения.ОтображатьИтогиВПодвале = Ложь;
			ЭлементыФормы.РаспределениеНачислений.Колонки.ДоляСпособаОтражения.ТекстПодвала = "";
			ЭлементыФормы.РаспределениеНачислений.ОтборСтрок.Сотрудник.Использование = Ложь;
			ЭлементыФормы.КоманднаяПанельРаспределениеНачислений.Кнопки.ВсеРаботники.Пометка = Ложь;
			
		Иначе
			// установим отбор
			ЭлементыФормы.РаспределениеНачислений.ОтборСтрок.Сотрудник.Установить(ЭлементыФормы.Работники.ТекущиеДанные.Сотрудник);
			ЭлементыФормы.КоманднаяПанельРаспределениеНачислений.Кнопки.ВсеРаботники.Пометка = Истина;
			ЭлементыФормы.РаспределениеНачислений.Колонки.ДоляСпособаОтражения.ОтображатьИтогиВПодвале = Истина;
		КонецЕсли;
		
	Иначе
		Сообщить("В таблице сотрудников не выбрана строка!") 
		
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельУдержанияВсеРаботники()

 // Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

Процедура КоманднаяПанельРаботникиЗаполнить(Кнопка)
	
	Если Работники.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаРаспределения = Новый ТаблицаЗначений;
	ТаблицаРаспределения.Колонки.Добавить("СпособОтраженияВУпручете");
	ТаблицаРаспределения.Колонки.Добавить("ДоляСпособаОтражения");
	ТаблицаРаспределения.Колонки.Добавить("Подразделение");
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(Период), "Работники", , , , ,"ВводРаспределенияЗаработка",Новый Структура("РаспределениеУпрНачислений", ТаблицаРаспределения), Период, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(ЭлементыФормы.Работники, Ссылка, Ложь, Дата, 1);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, Период);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(Период);
	
КонецПроцедуры // ПериодПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Период = ДобавитьМесяц(Период, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(Период);
	
КонецПроцедуры // ПериодРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегулирование()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Период, ЭтаФорма);
	
КонецПроцедуры // ПериодНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодОкончаниеВводаТекста()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Работники

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля
//
Процедура РаботникиПриАктивизацииСтроки(Элемент)
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.Работники, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
    ДанныеСтроки = ЭлементыФормы.Работники.ТекущиеДанные;
    
    Если ДанныеСтроки = Неопределено Тогда
    	мТекущийСотрудник = Неопределено;
    	Возврат;
    КонецЕсли;
    
    // запомним текущего работника
   мТекущийСотрудник = ДанныеСтроки.Сотрудник;
   УстановитьОтборРаботника(мТекущийСотрудник);
 	
КонецПроцедуры // РаботникиПриАктивизацииСтроки()
  
// Процедура - обработчик события "ОбработкаВыбора" табличного поля
//
Процедура РаботникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Работники.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		Работники.Добавить().Сотрудник = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры // РаботникиОбработкаВыбора()

// Процедура - обработчик события "Перед удалением" строки табличного поля
//
Процедура РаботникиПередУдалением(Элемент, Отказ)
	
	УдалитьСтрокиПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	
КонецПроцедуры // РаботникиПередУдалением()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Работники

Процедура РаботникиСотрудникПриИзменении(Элемент)
	
	ПриИзмененииРаботника(Элемент.Значение);
	
КонецПроцедуры

Процедура РаботникиСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура РаботникиСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = Работники.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 И Элемент.Значение <> ВыбранноеЗначение Тогда
		Предупреждение("В данном документе по одному сотруднику можно вводить только одну строку!");
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбранноеЗначение;
	ПриИзмененииРаботника(ВыбранноеЗначение);

КонецПроцедуры

Процедура РаботникиСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст);
	
КонецПроцедуры

Процедура РаботникиСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение);
	
КонецПроцедуры

Процедура РаботникиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Работники, ОформленияСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаспределениеНачислений

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
//
Процедура РаспределениеНачисленийПриАктивизацииСтроки(Элемент)
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.РаспределениеНачислений, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
КонецПроцедуры // РаспределениеНачисленийПриАктивизацииСтроки()

// Процедура - обработчик события "ПослеУдаления" строки ТЧ
//
Процедура РаспределениеНачисленийПослеУдаления(Элемент)
	
	ЗаполнитьТаблицуРаботников();
	
КонецПроцедуры // РаспределениеНачисленийПослеУдаления()

// Процедура - обработчик события "ПриНачалеРедактирования" строки ТЧ
//
Процедура РаспределениеНачисленийПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ДанныеСтрокиТЧРаботники = ЭлементыФормы.Работники.ТекущиеДанные;
		
		Если ДанныеСтрокиТЧРаботники <> Неопределено Тогда
			ДанныеСтроки.Сотрудник = ДанныеСтрокиТЧРаботники.Сотрудник;
		КонецЕсли;

		Если ЭлементыФормы.РаспределениеНачислений.ОтборСтрок.Сотрудник.Использование Тогда
			ДанныеСтроки.Сотрудник = ЭлементыФормы.РаспределениеНачислений.ОтборСтрок.Сотрудник.Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РаспределениеНачисленийПриНачалеРедактирования()

// Процедура - обработчик события "ПриПолученииДанных" табличного поля
Процедура РаспределениеНачисленийПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Работники, ОформленияСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаспределениеНачислений

Процедура РаспределениеНачисленийСотрудникПриИзменении(Элемент)
	ЭлементыФормы.РаспределениеНачислений.ТекущиеДанные.Физлицо = Элемент.Значение.Физлицо
КонецПроцедуры

Процедура РаспределениеНачисленийСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура РаспределениеНачисленийСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст);
	
КонецПроцедуры

Процедура РаспределениеНачисленийСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ <Наименование>

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["РаспределениеНачислений"]	= Ложь;
мСинхронизируемыеТабличныеЧасти["Работники"]		= Ложь;

мОбработкаПодбораПоСтроке					= Ложь;
мТекстПодбораПоСтроке						= "";
мПоследнееЗначениеЭлементаПодбораПоСтроке	= Неопределено;