////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

Перем мОтражатьВРегламентированномУчете;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает видимость/доступность элементов формы
//
Процедура УстановитьВидимостьДоступность()

	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	КолЗатраты = ЭлементыФормы.ЗатратыПоБракуВПроизводстве.Колонки;
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолЗатраты.СчетЗатрат,   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолЗатраты.СчетЗатратНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	
КонецПроцедуры // УстановитьВидимостьДоступность()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ЗатратыПоБракуВПроизводстве,ЭлементыФормы.КоманднаяПанель.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	
	Если ЗатратыПоБракуВПроизводстве.Количество() > 0
	 И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)) Тогда
						
		Для Каждого СтрокаТЧ Из ЗатратыПоБракуВПроизводстве Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	// Проверить объект на то, что он еще не внесен в ИБ.
	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
	КонецЕсли;
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,, мОтражатьВРегламентированномУчете);
	
	СтруктураКолонок = Новый Структура("Номенклатура, Сумма");
	
	// Установить ограничение - изменять видимоть колонок для ТЧ материалы
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ЗатратыПоБракуВПроизводстве.Колонки, СтруктураКолонок);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимостьДоступность();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(
		Метаданные(),
		ЭтаФорма,
		ЭлементыФормы.ДействияФормы.Кнопки.Подменю,
		ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(
		ЭтотОбъект.Метаданные(),
		ЭлементыФормы.ДействияФормы.Кнопки.Подменю,
		ЭлементыФормы.Номер);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура заполнения документа по нормативам
//
Процедура КоманднаяПанельЗаполнитьПоОстаткам(Кнопка)
	
	Если ОтражатьВУправленческомУчете Тогда
		
		Если НЕ ЗначениеЗаполнено(Подразделение) Тогда
			Предупреждение("Не указано подразделение!
				|Заполнение невозможно!");
			Возврат;
		КонецЕсли;
		
		Подр      = Подразделение;
		Суффикс   = "";
		ТекстСчет = "";
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			Предупреждение("Не указано подразделение организации!
				|Заполнение невозможно!");
			Возврат;
		КонецЕсли;
		
		Подр      = ПодразделениеОрганизации;
		Суффикс   = "БухгалтерскийУчет";
		ТекстСчет = "БракВПроизводстве.СчетУчета КАК СчетЗатрат,";
		
	КонецЕсли;
	
	Если ЗатратыПоБракуВПроизводстве.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена.
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗатратыПоБракуВПроизводстве.Очистить();
	
	ДопПараметры = Новый Структура("ХарЗатрат", Новый Массив);
	ДопПараметры.ХарЗатрат.Добавить(Перечисления.ХарактерЗатрат.БракВПроизводстве);
	
	УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамЗатрат(ЭтотОбъект, ЗатратыПоБракуВПроизводстве, ДопПараметры);
	
КонецПроцедуры // ДействияФормыПоНормативам()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(
		ЭтотОбъект.Метаданные(),
		ЭтаФорма,
		ЭлементыФормы.ДействияФормы.Кнопки.Подменю,
		ЭлементыФормы.Номер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(
		ЭтотОбъект.Метаданные(),
		ЭлементыФормы.ДействияФормы.Кнопки.Подменю,
		ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если НЕ ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(
			ЭтотОбъект,
			"Номер",
			ЭлементыФормы.ДействияФормы.Кнопки.Подменю,
			ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,, мОтражатьВРегламентированномУчете, Истина);
	УстановитьВидимостьДоступность();
    
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в упр. учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете
		И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

	УстановитьВидимостьДоступность();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Подразделения.
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(
		ОтражатьВБухгалтерскомУчете,
		ПодразделениеОрганизации,
		Подразделение,
		Организация);
												 
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПодразделениеОрганизацииПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры // ПодразделениеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Подразделения организации.
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка(
		ОтражатьВБухгалтерскомУчете,
		Элемент,
		ПодразделениеОрганизации,
		Подразделение,
		Организация,
		ЭтаФорма);
	
КонецПроцедуры // ПодразделениеОрганизацииНачалоВыбораИзСписка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ "ЗатратыПоБракуВПроизводстве"

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатрат
//
Процедура ЗатратыПоБракуВПроизводствеСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ЗатратыПоБракуВПроизводстве.ТекущиеДанные;
	
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(
		СтрокаТабличнойЧасти,
		ПодразделениеОрганизации,
		СтрокаТабличнойЧасти.СтатьяЗатрат);
	
КонецПроцедуры // ЗатратыПоБракуВПроизводствеСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "ЗатратыПоБракуВПроизводстве".
//
Процедура ЗатратыПоБракуВПроизводствеНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ЗатратыПоБракуВПроизводстве.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.СерияПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.СерияПродукции = Неопределено;
	КонецЕсли; 
	
	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.ХарактеристикаПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаПродукции = Неопределено;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Продукция.НоменклатурнаяГруппа;
	
КонецПроцедуры // ЗатратыПоБракуВПроизводствеНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// в строке табличной части "ЗатратыПоБракуВПроизводстве".
//
Процедура ЗатратыПоБракуВПроизводствеЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", Новый Массив);
	ДопПараметры.ДоступныеПоляОтбора.Добавить("Организация");
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(
		ЭтотОбъект,
		ЭтаФорма,
		Элемент,
		СтандартнаяОбработка,
		СтруктураОтбора,
		"ЗатратыПоБракуВПроизводстве",
		ДопПараметры);
	
КонецПроцедуры // ЗатратыПоБракуВПроизводствеЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Сумма
//
Процедура ЗатратыПоБракуВПроизводствеСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ЗатратыПоБракуВПроизводстве.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(
		СтрокаТабличнойЧасти.Сумма,
		мВалютаРегламентированногоУчета,
		мВалютаУправленческогоУчета,
		Дата);
	СтрокаТабличнойЧасти.СуммаНал  = СтрокаТабличнойЧасти.СуммаРегл

КонецПроцедуры // ЗатратыПоБракуВПроизводствеСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СуммаРегл
//
Процедура ЗатратыПоБракуВПроизводствеСуммаРеглПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ЗатратыПоБракуВПроизводстве.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СуммаНал  = СтрокаТабличнойЧасти.СуммаРегл
	
КонецПроцедуры // ЗатратыПоБракуВПроизводствеСуммаРеглПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ ЗАПОЛНЕНИЯ

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(
		мКнопкиЗаполненияТЧ.Строки.Найти(
			Кнопка.Имя,
			"Имя",
			Истина),
		ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕЧАТИ

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры