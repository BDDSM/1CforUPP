////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мКолонкиКомплектующие;

// Используется для определения необходимости отображения действий над НДС в документе.
Перем мСложныйУчетНДС;

// Используется для определения необходимости изменения параметра включения НДС в стоимость
Перем мЕстьЕНВД;

// Используется для определения необходимости указания счета списания НДС на расходы.
Перем мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;

Перем мОтражатьВРегламентированномУчете;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Заполняет отображаемые из серии, выбранной для комплекта, значения номера ГТД и Страны происхождения.
//
// Параметры
//  Нет
//
Процедура ЗаполнитьЗначенияНомераГТДиСтраныПроисхождения()

	Если ЗначениеЗаполнено(СерияНоменклатуры) Тогда
		ЭлементыФормы.НомерГТД.Значение            = СерияНоменклатуры.НомерГТД;
		ЭлементыФормы.СтранаПроисхождения.Значение = СерияНоменклатуры.СтранаПроисхождения;
	Иначе
		ЭлементыФормы.НомерГТД.Значение            = Справочники.НомераГТД.ПустаяСсылка();
		ЭлементыФормы.СтранаПроисхождения.Значение = Справочники.КлассификаторСтранМира.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Комплектующие,ЭлементыФормы.КоманднаяПанельКомплектующие.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  Нет
//
Процедура ДействиеПодбор()

	Перем Команда;

	ЕстьЦена  = Ложь;
	ЕстьСерия = Истина;

	Команда = "ПодборВТабличнуюЧастьТовары";
	ИмяТабличнойЧасти = "Комплектующие";

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов" , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"       , Склад);
	СтруктураПараметровПодбора.Вставить("Организация" , Организация);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем Номенклатура, ЕдиницаИзмерения, Количество, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);

	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры" , Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"          , Серия);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура                = Номенклатура;
		СтрокаТабличнойЧасти.Количество                  = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения            = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент                 = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры  = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры           = Серия;
		ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);
		
		ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Комплектующие", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;

	ЭлементыФормы.Комплектующие.ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы.Комплектующие.ТекущаяКолонка = ЭлементыФормы.Комплектующие.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	ОбработкаТабличныхЧастей.ЗаполнитьСпособСписанияОстаткаТоваровТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Определяет параметры учетной политики (сложный учет НДС по организации).
//
Процедура ОпределитьСложныйУчетНДС()
	
	ПараметрыНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если НЕ ЗначениеЗаполнено(ПараметрыНУ) Тогда
		мСложныйУчетНДС = Ложь;
		мЕстьЕНВД = Ложь;
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
	Иначе
		мСложныйУчетНДС = ПараметрыНУ.СложныйУчетНДС и Не ПараметрыНУ.УСН;
		мЕстьЕНВД = ПараметрыНУ.ОрганизацияЯвляетсяПлательщикомЕНВД и ПараметрыНУ.РозничнаяТорговляОблагаетсяЕНВД;
		
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = ПараметрыНУ.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;
		Если НЕ ЗначениеЗаполнено(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость) Тогда
			мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ОпределитьСложныйУчетНДС()

// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчетаВШапке(ИзменениеСубконто = ЛОЖЬ)
	
	Если ТипЗнч(СубконтоСписанияНДС1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоСписанияНДС1.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СубконтоСписанияНДС2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоСписанияНДС2.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СубконтоСписанияНДС3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоСписанияНДС3.ВидРасходовНУ;
	ИначеЕсли ИзменениеСубконто Тогда
		Возврат;
	Иначе
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СчетСписанияНДСНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СчетСписанияНДС, ВидЗатратНУ));
	Иначе
		СчетСписанияНДСНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетСписанияНДС));
	КонецЕсли;
	Если СтатьяЗатратСписанияНДС.ВидЗатрат = Перечисления.ВидыЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДСНУ, 	ЭлементыФормы.СубконтоСписанияНДСНУ1, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1,
		                         			ЭлементыФормы.СубконтоСписанияНДСНУ2, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2,
		                         			ЭлементыФормы.СубконтоСписанияНДСНУ3, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчетаВШапке()

// Процедура для заполнения счетов списания НДС значениями по умолчанию
//
// Параметры
//  ВыводитьВопрос  – <Булево> – задавать вопрос перед заполнением счетов
//  ТолькоНУ		– <Булево> – заполнять только счета налогвоого учета
//
Процедура ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(ВыводитьВопрос = Ложь, ТолькоНУ = Ложь)
	Если ВыводитьВопрос Тогда
		Ответ = Вопрос("Установить счета и аналитику для списания НДС
					|в соответствии со значениями по умолчанию?", 
					РежимДиалогаВопрос.ДаНет, , , "Изменения счетов списания НДС");
	Иначе
		Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
				
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЕстьСкладЕНВД = (Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ 
					ИЛИ Склад.ВидСклада = Перечисления.ВидыСкладов.Розничный) И мЕстьЕНВД;
					
		Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		КонецЕсли;
					
		СтатьяЗатратСписанияНДС = Справочники.СтатьиЗатрат.СписаниеНДСНаРасходы;

		Если Не ТолькоНУ Тогда
			СчетСписанияНДС = ?(ЕстьСкладЕНВД, ПланыСчетов.Хозрасчетный.ИздержкиОбращенияОблагаемыеЕНВД, ПланыСчетов.Хозрасчетный.ИздержкиОбращенияНеОблагаемыеЕНВД);
		КонецЕсли; 
		
		СчетСписанияНДСНУ = ?(ЕстьСкладЕНВД, ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД, ПланыСчетов.Налоговый.ИздержкиОбращенияНеОблагаемыеЕНВД);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если его дата совпадает с текущей и вид операции документа = Комплектация.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
			((НачалоДня(Дата) = НачалоДня(ТекущаяДата())) 
			И (ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры));

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает видимость для тех колонок, видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	КолонкиКомплектующие    	      = ЭлементыФормы.Комплектующие.Колонки;
	ВидКомплектацииРазборка     	  = (ВидКомплектации = Перечисления.ВидыКомплектации.Разборка);
	ВидимостьСпособаСписанияКомплекта = (ВидКомплектацииРазборка И ЗначениеЗаполнено(ЗаказРезерв));

	ВидОперацииВыпускПродукции 			  = (ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции);
	ВидОперацииПоступлениеОтПереработчика = (ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика);
	ВидОперацииКомплектацияНоменклатуры   = (ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры);
	
	УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И Не УСН);
	
	ЭлементыФормы.НадписьКонтрагент.Видимость  = ВидОперацииПоступлениеОтПереработчика;
	ЭлементыФормы.Контрагент.Видимость 		   = ВидОперацииПоступлениеОтПереработчика;
	ЭлементыФормы.НадписьДоговор.Видимость 	   = ВидОперацииПоступлениеОтПереработчика;
	ЭлементыФормы.ДоговорКонтрагента.Видимость = ВидОперацииПоступлениеОтПереработчика;
	
	ЭлементыФормы.НадписьСпецификация.Видимость = ВидОперацииВыпускПродукции ИЛИ ВидОперацииПоступлениеОтПереработчика;
	ЭлементыФормы.Спецификация.Видимость 		= ВидОперацииВыпускПродукции ИЛИ ВидОперацииПоступлениеОтПереработчика;
	ЭлементыФормы.НадписьЗаказВыпуска.Видимость = ВидОперацииВыпускПродукции ИЛИ ВидОперацииПоступлениеОтПереработчика;
	ЭлементыФормы.ЗаказВыпуска.Видимость 		= ВидОперацииВыпускПродукции ИЛИ ВидОперацииПоступлениеОтПереработчика;
	
	Элементыформы.ОсновнаяПанель.Страницы.УчетЗатрат.Видимость = ВидОперацииВыпускПродукции ИЛИ ВидОперацииПоступлениеОтПереработчика ;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.СтатьяЗатрат, НЕ ВидКомплектацииРазборка И НЕ ВидОперацииКомплектацияНоменклатуры);
	ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = ВидКомплектацииРазборка И НЕ ВидОперацииКомплектацияНоменклатуры;
	ЭлементыФормы.СтатьяЗатрат.Видимость 		= ВидКомплектацииРазборка И НЕ ВидОперацииКомплектацияНоменклатуры ;
	
	ЭлементыФормы.НадписьПодразделение1.Видимость = ВидОперацииКомплектацияНоменклатуры;
	ЭлементыФормы.Подразделение1.Видимость 		  = ВидОперацииКомплектацияНоменклатуры;
	ЭлементыФормы.НадписьПодразделение.Видимость  = ОтражатьВУправленческомУчете;
	ЭлементыФормы.Подразделение.Видимость 		  = ОтражатьВУправленческомУчете;
	ЭлементыФормы.НадписьПодразделениеОрганизации1.Видимость = ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете;
	ЭлементыФормы.ПодразделениеОрганизации1.Видимость 		 = ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете;
	
	ЭлементыФормы.НадписьСчетЗатрат.Видимость 	= ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СчетЗатрат.Видимость   	  	= ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСчетЗатратНУ.Видимость = ОтражатьВНалоговомУчете;
	ЭлементыФормы.СчетЗатратНУ.Видимость 		= ОтражатьВНалоговомУчете;
	
	Если ВидКомплектацииРазборка Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Комплект.Заголовок = "Исходная номенклатура";
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.Комплект.Заголовок = "Выходное изделие";
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.ЦенаПередачи, ВидОперацииПоступлениеОтПереработчика И НЕ ВидКомплектацииРазборка);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.СуммаПередачи, ВидОперацииПоступлениеОтПереработчика И Не ВидКомплектацииРазборка);
	ЭлементыФормы.НадписьЦенаПередачи.Видимость 	= ВидОперацииПоступлениеОтПереработчика И ВидКомплектацииРазборка;
	ЭлементыФормы.НадписьСуммаПередачи.Видимость 	= ВидОперацииПоступлениеОтПереработчика И ВидКомплектацииРазборка;
	ЭлементыФормы.ЦенаПередачи.Видимость 			= ВидОперацииПоступлениеОтПереработчика И ВидКомплектацииРазборка;
	ЭлементыФормы.СуммаПередачи.Видимость 			= ВидОперацииПоступлениеОтПереработчика И ВидКомплектацииРазборка;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.СчетУчетаБУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.СчетУчетаНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчетеНП);

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.ДоляСтоимости,  ВидКомплектацииРазборка);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.СпособСписанияОстаткаТоваров, НЕ ВидКомплектацииРазборка И ЗначениеЗаполнено(ЗаказРезерв));
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.СтатусПартии,  ВидКомплектацииРазборка);

	КолонкиКомплектующие.ДоляСтоимости.АвтоОтметкаНезаполненного = ВидКомплектацииРазборка;
	КолонкиКомплектующие.СтатусПартии .АвтоОтметкаНезаполненного = ВидКомплектацииРазборка;
	
	ЭлементыФормы.НадписьСтатусПартии.Видимость					 = НЕ ВидКомплектацииРазборка;
	ЭлементыФормы.СтатусПартии.Видимость						 = НЕ ВидКомплектацииРазборка;
	ЭлементыФормы.НадписьСпособСписания.Видимость                = ВидимостьСпособаСписанияКомплекта;
	ЭлементыФормы.СпособСписанияОстаткаТоваров.Видимость         = ВидимостьСпособаСписанияКомплекта;
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность            = ОтражатьВБухгалтерскомУчете;

	ЭлементыФормы.СчетУчетаБУ                .Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СчетУчетаНУ                .Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчетеНП;
	ЭлементыФормы.НадписьСчетУчетаКомплектаБУ.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСчетУчетаКомплектаНУ.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчетеНП;
	
	// Видимость серии исходных комплектующих при операции "поступление от переработчика".
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика Тогда
		Если ВидКомплектацииРазборка Тогда
			ЭлементыФормы.СерияНоменклатуры.Доступность = Ложь;
			ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.СерияНоменклатуры, Истина);
		Иначе
			ЭлементыФормы.СерияНоменклатуры.Доступность = Истина;
			ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.СерияНоменклатуры, Ложь);
		КонецЕсли;
	Иначе
		ЭлементыФормы.СерияНоменклатуры.Доступность = Истина;
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиКомплектующие.СерияНоменклатуры, Истина);
	КонецЕсли;
	
	// Видимость реквизитов на закладке "НДС".
	Если мСложныйУчетНДС И ОтражатьВБухгалтерскомУчете И Не УСН Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.НДС.Видимость = Истина;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.НДС.Видимость = Ложь;
	КонецЕсли;
	
	ВидимостьСчетИАналитикаСписанияНДС = НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость;
	
	ВидимостьСчетовСписанияБУ = (НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость
			И ОтражатьВБухгалтерскомУчете
			И ?(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ, Дата >= '20060101', мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.СписыватьНаРасходы));
			
	ВидимостьСчетовСписанияНУ = (Дата >= '20060101'
			И НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость
			И ОтражатьВНалоговомУчете
			И Не УСН);
	
	ЭлементыФормы.РамкаГруппыСчетСписанияНДС.Видимость 	= ВидимостьСчетИАналитикаСписанияНДС;		
	ЭлементыФормы.ПанельСчетСписанияБУ.Видимость 		= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.ПанельСчетСписанияНУ.Видимость 		= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.ПодразделениеОрганизации.Видимость 	= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НадписьПодразделениеОрганизации.Видимость = ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.СтатьяЗатратСписанияНДС.Видимость 	= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НадписьСтатьяЗатратСписанияНДС.Видимость = ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НоменклатурнаяГруппа.Видимость 		= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НадписьНоменклатурнаяГруппа.Видимость = ВидимостьСчетИАналитикаСписанияНДС;
	
	ЭлементыФормы.ПодразделениеОрганизации.Доступность 	= ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НадписьПодразделениеОрганизации.Доступность = ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.СтатьяЗатратСписанияНДС.Доступность 	= ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НадписьСтатьяЗатратСписанияНДС.Доступность = ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НоменклатурнаяГруппа.Доступность 		= ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НадписьНоменклатурнаяГруппа.Доступность = ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	
	Если ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ Тогда
		ЭлементыФормы.ПодразделениеОрганизации.ОтметкаНезаполненного 	= НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) И СтатьяЗатратСписанияНДС.ХарактерЗатрат <> Перечисления.ХарактерЗатрат.Прочие;
		ЭлементыФормы.СтатьяЗатратСписанияНДС.ОтметкаНезаполненного 	= НЕ ЗначениеЗаполнено(СтатьяЗатратСписанияНДС);
	Иначе
		ЭлементыФормы.ПодразделениеОрганизации.ОтметкаНезаполненного 	= Ложь;
		ЭлементыФормы.СтатьяЗатратСписанияНДС.ОтметкаНезаполненного 	= Ложь;
	КонецЕсли;
	
	Если ВидимостьСчетовСписанияБУ Тогда
		ЭлементыФормы.ПанельСчетСписанияБУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияБУ.Страницы.Счет;
	Иначе
		ЭлементыФормы.ПанельСчетСписанияБУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияБУ.Страницы.Надпись;
	КонецЕсли;
	
	Если ВидимостьСчетовСписанияНУ Тогда
		ЭлементыФормы.ПанельСчетСписанияНУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияНУ.Страницы.Счет;
	Иначе
		ЭлементыФормы.ПанельСчетСписанияНУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияНУ.Страницы.Надпись;
	КонецЕсли;
	
	ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетСписанияНДС, Неопределено);
	ХарактерЗатратНУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетСписанияНДСНУ, Неопределено, "Налоговый");
	
	Если ВидимостьСчетовСписанияБУ И ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДС, ЭлементыФормы.СубконтоСписанияНДС1, ЭлементыФормы.НадписьСубконтоСписанияНДС1,
							   			ЭлементыФормы.СубконтоСписанияНДС2, ЭлементыФормы.НадписьСубконтоСписанияНДС2,
						       			ЭлементыФормы.СубконтоСписанияНДС3, ЭлементыФормы.НадписьСубконтоСписанияНДС3);
	Иначе
		ЭлементыФормы.СубконтоСписанияНДС1.Видимость 		= Ложь;
		ЭлементыФормы.СубконтоСписанияНДС2.Видимость 		= Ложь;
		ЭлементыФормы.СубконтоСписанияНДС3.Видимость 		= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДС1.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДС2.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДС3.Видимость = Ложь;					   
							   
	КонецЕсли;

	Если ВидимостьСчетовСписанияНУ И ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДСНУ, ЭлементыФормы.СубконтоСписанияНДСНУ1, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ2, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ3, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3);
	Иначе
		ЭлементыФормы.СубконтоСписанияНДСНУ1.Видимость 			= Ложь;
		ЭлементыФормы.СубконтоСписанияНДСНУ2.Видимость 			= Ложь;
		ЭлементыФормы.СубконтоСписанияНДСНУ3.Видимость 			= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1.Видимость 	= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2.Видимость 	= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3.Видимость 	= Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность для тех элементов формы, доступность которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьДоступность()

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
КонецПроцедуры // УстановитьДоступность()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	

	// быть может, это ввод на основании заказа покупателя
	Если ЭтоНовый() и ЗначениеЗаполнено(ПараметрОснование) Тогда
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
		 ИЛИ ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВнутреннийЗаказ")
		 ИЛИ ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда

			// определим, сколько в нем комплектов
			Запрос = новый Запрос;
			Запрос.УстановитьПараметр("Ссылка", ПараметрОснование);
			Запрос.УстановитьПараметр("Товар", Перечисления.ТоварТара.Товар);

			Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЗаказыПокупателей.Номенклатура,
				|	ЗаказыПокупателей.ХарактеристикаНоменклатуры,
				|	ЗаказыПокупателей.КоличествоОстаток
				|	- ВЫБОР КОГДА Резервы.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Резервы.КоличествоОстаток КОНЕЦ
				|	- ВЫБОР КОГДА Размещения.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Размещения.КоличествоОстаток КОНЕЦ
				|	КАК КоличествоОстаток
				|
				|ИЗ
				|	РегистрНакопления.ЗаказыПокупателей.Остатки(, ЗаказПокупателя = &Ссылка) КАК ЗаказыПокупателей
				|
				|СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
				|ПО
				|	КомплектующиеНоменклатуры.Номенклатура               = ЗаказыПокупателей.Номенклатура
				| И КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ // Остатки зарезервированного товара
				|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &Ссылка) КАК Резервы
				|ПО
				|	Резервы.Номенклатура                = ЗаказыПокупателей.Номенклатура
				| И Резервы.ХарактеристикаНоменклатуры  = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ // Остатки размещенного товара
				|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя  = &Ссылка И ТоварТара = &Товар) КАК Размещения
				|ПО
				|	Размещения.Номенклатура                = ЗаказыПокупателей.Номенклатура
				| И Размещения.ХарактеристикаНоменклатуры  = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|ИТОГИ СУММА(КоличествоОстаток) ПО ЗаказыПокупателей.Номенклатура, ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|";
			ИначеЕсли ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
				Запрос.Текст = "
				|ВЫБРАТЬ РАЗЛИЧНЫЕ
				|	ЗаказыПокупателей.Номенклатура,
				|	ЗаказыПокупателей.ХарактеристикаНоменклатуры,
				|	ЗаказыПокупателей.КоличествоОстаток
				|	- ВЫБОР КОГДА Резервы.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Резервы.КоличествоОстаток КОНЕЦ
				|	- ВЫБОР КОГДА Размещения.КоличествоОстаток ЕСТЬ NULL ТОГДА 0 ИНАЧЕ Размещения.КоличествоОстаток КОНЕЦ
				|	КАК КоличествоОстаток
				|
				|ИЗ
				|	РегистрНакопления.ВнутренниеЗаказы.Остатки(, ВнутреннийЗаказ = &Ссылка) КАК ЗаказыПокупателей
				|
				|СОЕДИНЕНИЕ РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
				|ПО
				|	КомплектующиеНоменклатуры.Номенклатура               = ЗаказыПокупателей.Номенклатура
				| И КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ // Остатки зарезервированного товара
				|	РегистрНакопления.ТоварыВРезервеНаСкладах.Остатки(, ДокументРезерва = &Ссылка) КАК Резервы
				|ПО
				|	Резервы.Номенклатура                = ЗаказыПокупателей.Номенклатура
				| И Резервы.ХарактеристикаНоменклатуры  = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|
				|ЛЕВОЕ СОЕДИНЕНИЕ // Остатки размещенного товара
				|	РегистрНакопления.РазмещениеЗаказовПокупателей.Остатки(, ЗаказПокупателя  = &Ссылка И ТоварТара = &Товар) КАК Размещения
				|ПО
				|	Размещения.Номенклатура                = ЗаказыПокупателей.Номенклатура
				| И Размещения.ХарактеристикаНоменклатуры  = ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|ИТОГИ СУММА(КоличествоОстаток) ПО ЗаказыПокупателей.Номенклатура, ЗаказыПокупателей.ХарактеристикаНоменклатуры
				|";
			ИначеЕсли ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.СчетНаОплатуПокупателю") Тогда
				Запрос.Текст = "
				|ВЫБРАТЬ
				|	СчетНаОплатуПокупателюТовары.Номенклатура,
				|	СчетНаОплатуПокупателюТовары.ХарактеристикаНоменклатуры,
				|	МАКСИМУМ(СчетНаОплатуПокупателюТовары.Количество) КАК КоличествоОстаток
				|ИЗ
				|	Документ.СчетНаОплатуПокупателю.Товары КАК СчетНаОплатуПокупателюТовары
				|
				|ВНУТРЕННЕЕ СОЕДИНЕНИЕ
				|	РегистрСведений.КомплектующиеНоменклатуры КАК КомплектующиеНоменклатуры
				|
				|ПО
				|	КомплектующиеНоменклатуры.Номенклатура = СчетНаОплатуПокупателюТовары.Номенклатура
				|	И
				|	КомплектующиеНоменклатуры.ХарактеристикаНоменклатуры = СчетНаОплатуПокупателюТовары.ХарактеристикаНоменклатуры
				|
				|ГДЕ
				|	СчетНаОплатуПокупателюТовары.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|
				|	СчетНаОплатуПокупателюТовары.Номенклатура,
				|	СчетНаОплатуПокупателюТовары.ХарактеристикаНоменклатуры
				|
				|ИТОГИ СУММА(КоличествоОстаток) ПО СчетНаОплатуПокупателюТовары.Номенклатура, СчетНаОплатуПокупателюТовары.ХарактеристикаНоменклатуры
				|";
			КонецЕсли;

			ТаблицаКомплектов = Новый ТаблицаЗначений;
			ТаблицаКомплектов.Колонки.Добавить("Номенклатура",,,10);
			ТаблицаКомплектов.Колонки.Добавить("ХарактеристикаНоменклатуры",,"Характеристика номенклатуры",10);
			ТаблицаКомплектов.Колонки.Добавить("Количество",,,5);
			ВыборкаПоНоменклатуре = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоНоменклатуре.Следующий() Цикл
				ВыборкаПоХарактеристикам = ВыборкаПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ВыборкаПоХарактеристикам.Следующий() Цикл
					Если ВыборкаПоХарактеристикам.КоличествоОстаток>0 Тогда
						НоваяСтрока = ТаблицаКомплектов.Добавить();
						НоваяСтрока.Номенклатура               = ВыборкаПоХарактеристикам.Номенклатура;
						НоваяСтрока.ХарактеристикаНоменклатуры = ВыборкаПоХарактеристикам.ХарактеристикаНоменклатуры;
						НоваяСтрока.Количество                 = ВыборкаПоХарактеристикам.КоличествоОстаток;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Если ТаблицаКомплектов.Количество() = 0 Тогда
				ОбщегоНазначения.СообщитьОбОшибке("В документе "+СокрЛП(ПараметрОснование)+" комплекты отсутствуют!");
				Возврат;
			ИначеЕсли ТаблицаКомплектов.Количество() = 1 Тогда
				ВыбраннаяСтрока = ТаблицаКомплектов[0];
			Иначе
				ВыбраннаяСтрока = ТаблицаКомплектов.ВыбратьСтроку();
			КонецЕсли;
			Если ВыбраннаяСтрока <> Неопределено Тогда
				Заказ			             = ПараметрОснование;
				ВидОперации                  = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры;
				ВидКомплектации				 = Перечисления.ВидыКомплектации.Сборка;
				Номенклатура                 = ВыбраннаяСтрока.Номенклатура;
				ХарактеристикаНоменклатуры   = ВыбраннаяСтрока.ХарактеристикаНоменклатуры;
				Количество                   = ВыбраннаяСтрока.Количество;
				ЕдиницаИзмерения             = Номенклатура.ЕдиницаХраненияОстатков;
				Коэффициент                  = ЕдиницаИзмерения.Коэффициент;
				Если ТипЗнч(Заказ) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
					Склад                        = ПараметрОснование.СкладГруппа;
				ИначеЕсли ТипЗнч(Заказ) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
					Если ТипЗнч(Заказ.Заказчик) = Тип("СправочникСсылка.Склады") Тогда
						Склад                        = ПараметрОснование.Заказчик;
					КонецЕсли;
				КонецЕсли;

				ЗаполнитьКомплектующие();

				// Заполнение документа
				ЗаполнитьТабличныеЧастиПередПроведением();

			КонецЕсли;

		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);

		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			Склад = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СпособСписанияОстаткаТоваров) Тогда
			СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(НДСвСтоимостиТоваров) Тогда
			НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВидКомплектации) Тогда
			ВидКомплектации = Перечисления.ВидыКомплектации.Сборка;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СтатусПартии) Тогда
			Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
				СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
			Иначе
				СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ДоляСтоимости");
	СтруктураКолонок.Вставить("СпособСписанияОстаткаТоваров");

	// Установить ограничение - изменять видимость колонок для табличной части
	// "Комплектующие".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Комплектующие.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(СокрЛП(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента             = Дата;
	
	// Определеим параметры сложного учета НДС.
	ОпределитьСложныйУчетНДС();

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиКомплектующие);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиКомплектующие);

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установить видимость/доступность реквизитов и заголовков колонок.
	УстановитьВидимость();
	УстановитьДоступность();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Комплектующие" Тогда
			Если ВидКомплектации = Перечисления.ВидыКомплектации.Разборка Тогда
				ЗаголовокЗакладки = "Выходные изделия";
			Иначе
				ЗаголовокЗакладки = "Исходные комплектующие";
			КонецЕсли;
			СтраницаПанели.Заголовок = ЗаголовокЗакладки + " (" + ДокументОбъект.Комплектующие.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ОбработкаПодбора(Комплектующие, ЗначениеВыбора);
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(СокрЛП(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ПредопределенноеЗначение("Перечисление.КлючевыеОперации.ПроведениеДокументаКомплектацияНоменклатуры"));
	// Конец ОценкаПроизводительности

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
// Обработчик уставливается динамически методом "Действие"
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры[Кнопка.Имя];
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(СокрЛП(ВидОперации), ЭтотОбъект, ЭтаФорма);

	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции
	   И ТипЗнч(ЗаказВыпуска) <> Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
	   
	    ЗаказВыпуска = Документы.ЗаказНаПроизводство.ПустаяСсылка();
		СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика
	   И ТипЗнч(ЗаказВыпуска) <> Тип("ДокументСсылка.ЗаказПоставщику") Тогда
	   
	    ЗаказВыпуска = Документы.ЗаказПоставщику.ПустаяСсылка();
		СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика
	   И ВидКомплектации = Перечисления.ВидыКомплектации.Разборка
	   И ЗначениеЗаполнено(СерияНоменклатуры)
	Тогда
		СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	// Установить видимость/доступность реквизитов по виду операции.
	УстановитьВидимость();
	УстановитьДоступность();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Комплектующие", вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельКомплектующиеЗаполнить(Кнопка)

	Если Количество = 0 Тогда
		Предупреждение("Количество "+СокрЛП(Номенклатура)+" равно нулю! Заполнение невозможно.");
		Возврат;
	КонецЕсли;

	ЗаполнитьКомплектующие();

КонецПроцедуры // КоманднаяПанельТоварыЗаполнить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Комплектующие", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Комплектующие".
//
Процедура КоманднаяПанельКомплектующиеДействиеПодбор(Кнопка)

	ДействиеПодбор();

КонецПроцедуры // КоманднаяПанельКомплектующиеДействиеПодбор()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельКомплектующиеПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	// Очистим записи документа, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборОстаткиТоваровКомпании = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборОстаткиТоваровКомпании.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваровКомпании.Записать();
		НаборОстаткиТоваровОрганизаций = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборОстаткиТоваровОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваровОрганизаций.Записать();
		НаборОстаткиТоваровОрганизаций = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборОстаткиТоваровОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваровОрганизаций.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьТабличныеЧастиПередПроведением();

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеЗаполнитьИПровести()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
	// Определеим параметры сложного учета НДС.
	ОпределитьСложныйУчетНДС();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = Элемент.Значение И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");

	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Если НЕ Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;

	Если Комплектующие.Количество() > 0 
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете) Тогда

		ЗаполнитьСчетаУчетаВТабЧасти(Комплектующие, "Комплектующие", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВШапке(ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЕсли;

	Если Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	Если НЕ Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;

	Если Комплектующие.Количество() > 0
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(,ОтражатьВНалоговомУчете) Тогда

		ЗаполнитьСчетаУчетаВТабЧасти(Комплектующие, "Комплектующие", Неопределено, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВШапке(Неопределено, ОтражатьВНалоговомУчете);

	КонецЕсли;

	Если Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;

КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(
		ОтражатьВБухгалтерскомУчете,
		ПодразделениеОрганизации,
		Подразделение,
		Организация);
	
	ОпределитьСложныйУчетНДС();
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода заказа покупателя.
//
Процедура ЗаказПокупателяПриИзменении(Элемент)

	УстановитьВидимость();
	Если ЗначениеЗаполнено(ЗаказРезерв) Тогда
		СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.ИзРезерва;
	Иначе
		СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	КонецЕсли;

КонецПроцедуры // ЗаказПокупателяПриИзменении()

// Процедура - обработчик события "Очистка" поля ввода заказа покупателя.
//
Процедура ЗаказПокупателяОчистка(Элемент, СтандартнаяОбработка)

	УстановитьВидимость();
	Для каждого СтрокаКомплектующие из Комплектующие цикл
		СтрокаКомплектующие.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада;
	Конеццикла;
	
КонецПроцедуры // ЗаказПокупателяОчистка()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры.
//
Процедура НоменклатураПриИзменении(Элемент)

	// При изменении номенклатуры очистим ссылки на подчиненные справочники
	Если Номенклатура <> ЕдиницаИзмерения.Владелец Тогда
		ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
		Коэффициент      = ЕдиницаИзмерения.Коэффициент;
	КонецЕсли; 

	Если Номенклатура <> СерияНоменклатуры.Владелец Тогда
		СерияНоменклатуры = Неопределено;
	КонецЕсли; 

	Если Номенклатура <> ХарактеристикаНоменклатуры.Владелец Тогда
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли; 

	ЗаполнитьСчетаУчетаВШапке(ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры, Дата, Подразделение);
	НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
	СтатьяЗатрат = Номенклатура.СтатьяЗатрат;
	
	СуммаПередачи = ЦенаПередачи * Количество;

КонецПроцедуры // НоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количество комплектов.
//
Процедура КоличествоПриИзменении(Элемент)

	Если Количество <> 0 Тогда
		Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.КомплектацияНоменклатуры Тогда
			ТекстВопроса = "Заполнить табличную часть комплектующих?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗаполнитьКомплектующие();
			КонецЕсли; 
		Иначе
			ТекстВопроса = "Заполнить табличную часть по спецификации?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗаполнитьМатериалыПоСпецификации();
			КонецЕсли; 
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля едницы измерения.
//
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)

	// Установить коэффициент
	Коэффициент = ЕдиницаИзмерения.Коэффициент; 

	Если Количество <> 0 Тогда
		ТекстВопроса = "Заполнить табличную часть комплектующих?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЗаполнитьКомплектующие();
		КонецЕсли; 
	КонецЕсли;

КонецПроцедуры // ЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля СкладКомпании.
//
Процедура СкладКомпанииНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладКомпанииНачалоВыбора()

Процедура ЗаполнитьСписокВыбораСтатусПартии(Элемент = Неопределено)
	
	Если Элемент = Неопределено тогда
		Элемент = ЭлементыФормы.СтатусПартии;
	КонецЕсли;
	
	Список = Новый СписокЗначений();
	Список.Добавить(Перечисления.СтатусыПартийТоваров.Купленный);
	Список.Добавить(Перечисления.СтатусыПартийТоваров.Продукция);
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент, Список)
	
	
КонецПроцедуры

Процедура СтатусПартииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораСтатусПартии(Элемент);
	
КонецПроцедуры

Процедура КомплектующиеСтатусПартииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораСтатусПартии(Элемент);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ.
//
Процедура СчетУчетаБУПриИзменении(Элемент)
	
	СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетУчетаБУ));
	
КонецПроцедуры // СчетУчетаБУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ.
//
Процедура СчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СчетУчетаБУОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНУ.
//
Процедура СчетУчетаНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СчетУчетаНУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода НДСвСтоимостиТоваров.
//
Процедура НДСвСтоимостиТоваровПриИзменении(Элемент)
	
	Если НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость Тогда
		ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(Истина);
	КонецЕслИ;
	
	УстановитьВидимость();
	
КонецПроцедуры // НДСвСтоимостиТоваровПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатратСписанияНДС.
//
Процедура СтатьяЗатратСписанияНДСПриИзменении(Элемент)
	
	СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, СтатьяЗатратСписанияНДС);
	СчетСписанияНДС = СчетаУчетаЗатрат.СчетУчетаБУ;
	СчетСписанияНДСНУ = СчетаУчетаЗатрат.СчетУчетаНУ;
	Если СтатьяЗатратСписанияНДС.ВидЗатрат = Перечисления.ВидыЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДС, ЭлементыФормы.СубконтоСписанияНДС1, ЭлементыФормы.НадписьСубконтоСписанияНДС1,
							   			ЭлементыФормы.СубконтоСписанияНДС2, ЭлементыФормы.НадписьСубконтоСписанияНДС2,
						       			ЭлементыФормы.СубконтоСписанияНДС3, ЭлементыФормы.НадписьСубконтоСписанияНДС3);
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДСНУ, ЭлементыФормы.СубконтоСписанияНДСНУ1, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ2, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ3, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3);
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры // СтатьяЗатратСписанияНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетСписанияНДС
//
Процедура СчетСписанияНДСПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке();
	
	УстановитьВидимость();
	
КонецПроцедуры // СчетСписанияНДСПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетСписанияНДС
//
Процедура СчетСписанияНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетСписанияНДСОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода СубконтоСписанияНДС1
//
Процедура СубконтоСписанияНДС1НачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры // СубконтоСписанияНДС1НачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоСписанияНДС1
//
Процедура СубконтоСписанияНДС1ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке(Истина);
	Если ЗначениеЗаполнено(СчетСписанияНДСНУ) Тогда
		Если ТипЗнч(СубконтоСписанияНДСНУ1) = ТипЗнч(СубконтоСписанияНДС1) Тогда
			СубконтоСписанияНДСНУ1 = СубконтоСписанияНДС1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоСписанияНДС1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоСписанияНДС2
//
Процедура СубконтоСписанияНДС2ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке(Истина);
	Если ЗначениеЗаполнено(СчетСписанияНДСНУ) Тогда
		Если ТипЗнч(СубконтоСписанияНДСНУ2) = ТипЗнч(СубконтоСписанияНДС2) Тогда
			СубконтоСписанияНДСНУ2 = СубконтоСписанияНДС2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоСписанияНДС2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоСписанияНДС3
//
Процедура СубконтоСписанияНДС3ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке(Истина);
	Если ЗначениеЗаполнено(СчетСписанияНДСНУ) Тогда
		Если ТипЗнч(СубконтоСписанияНДСНУ3) = ТипЗнч(СубконтоСписанияНДС3) Тогда
			СубконтоСписанияНДСНУ3 = СубконтоСписанияНДС3;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоСписанияНДС3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетСписанияНДСНУ.
//
Процедура СчетСписанияНДСНУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СчетСписанияНДСНУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетСписанияНДСНУ
//
Процедура СчетСписанияНДСНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СчетСписанияНДСНУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидКомплектации".
//
Процедура ВидКомплектацииПриИзменении(Элемент)
	
	Если ВидОперации = Перечисления.ВидыОперацийКомплектацияНоменклатуры.ПоступлениеОтПереработчика
	   И ВидКомплектации = Перечисления.ВидыКомплектации.Разборка
	   И ЗначениеЗаполнено(СерияНоменклатуры)
	Тогда
		СерияНоменклатуры = Справочники.СерииНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Спецификация
//
Процедура СпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(Номенклатура, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ЗаказВыпускаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "", ДопПараметры);
	
КонецПроцедуры

Процедура ЗаказРезервНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "", ДопПараметры);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода ХарактеристикаНоменклатуры
//
Процедура ХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Номенклатура, ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры

// Процедура - обработчик события ПриИзменении поля ввода СерияНоменклатуры
//
Процедура СерияНоменклатурыПриИзменении(Элемент)

	ЗаполнитьЗначенияНомераГТДиСтраныПроисхождения();

КонецПроцедуры

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
	Если ОтражатьВБухгалтерскомУчете Тогда											  
		ПриИзмененииПодразделенияОрганизации();											  
	КонецЕсли;
													  
КонецПроцедуры

Процедура ЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "", ДопПараметры);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизации1НачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Контрагент
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	Если ЗначениеЗаполнено(ЗаказВыпуска) Тогда
		Если ЗначениеЗаполнено(Контрагент) И ЗаказВыпуска.Контрагент <> Контрагент Тогда
			ЗаказВыпуска = Неопределено;
		ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) И ЗаказВыпуска.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
			ЗаказВыпуска = Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить( Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СписокОтбора.Добавить( Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	
	СтруктОтбора = Новый Структура;
	СтруктОтбора.Вставить( "ЗначениеОтбора",     СписокОтбора);
	СтруктОтбора.Вставить( "ВидСравненияОтбора", ВидСравнения.ВСписке);
	
	СтруктДопПараметры = Новый Структура;
	СтруктДопПараметры.Вставить("ВедениеВзаиморасчетов", СтруктОтбора);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект,
		ЭтаФорма,
		Элемент,
		Контрагент,
		ДоговорКонтрагента,
		Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком,
		СтандартнаяОбработка,
		СтруктДопПараметры);
												
КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". 
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	Если ЗначениеЗаполнено(ЗаказВыпуска) Тогда
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И ЗаказВыпуска.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
			ЗаказВыпуска = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ЦенаПередачи". 
//
Процедура ЦенаПередачиПриИзменении(Элемент)
	
	СуммаПередачи = ЦенаПередачи * Количество;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетЗатрат". 
//
Процедура СчетЗатратПриИзменении(Элемент)
	
	СчетЗатратНУ = УправлениеЗатратами.ПолучитьСчетПрямыхРасходовНУ(СчетЗатрат);
	
КонецПроцедуры // СчетЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ПодразделенияОрганизации". 
//
Процедура ПриИзмененииПодразделенияОрганизации()
	
	Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)) Тогда
	
		СчетаУчета = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, Неопределено);

		СчетЗатрат   = СчетаУчета.СчетУчетаБУ;
		СчетЗатратНУ = СчетаУчета.СчетУчетаНУ;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ПодразделениеОрганизации". 
//
Процедура ПодразделениеОрганизации1ПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "СтатьяЗатрат". 
//
Процедура СтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.Материальные);
	
КонецПроцедуры // СтатьяЗатратНачалоВыбора()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Комплектующие" Тогда
		ОбработкаПодбора(Комплектующие, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Комплектующие" Тогда
		ОбработкаПодбора(Комплектующие, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ КОМПЛЕКТУЮЩИЕ

// Процедура - обработчик события "ПриПолученииДанных" табличной части
// "Комплектующие".
//
Процедура КомплектующиеПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
	
		Если ДанныеСтроки.СтатьяЗатрат.СтатусМатериальныхЗатрат 
			= Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку
		Тогда
			ОформлениеСтроки.Ячейки.СчетУчетаНУ.ОтметкаНезаполненного = Ложь;
			ОформлениеСтроки.Ячейки.СчетУчетаНУ.Видимость = Ложь;
			ОформлениеСтроки.Ячейки.СчетУчетаНУ.ТолькоПросмотр = Истина;
		Иначе
			ОформлениеСтроки.Ячейки.СчетУчетаНУ.Видимость = Истина;
			ОформлениеСтроки.Ячейки.СчетУчетаНУ.ТолькоПросмотр = Ложь;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры // КомплектующиеПриПолученииДанных()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Комплектующие".
//
Процедура КомплектующиеНоменклатураПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Комплектующие.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);

	СтрокаТЧ.ЕдиницаИзмерения = СтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТЧ.Коэффициент      = СтрокаТЧ.ЕдиницаИзмерения.Коэффициент;

	ПриИзмененииНоменклатурыТоваров(СтрокаТЧ);

	УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТЧ,, Ложь);
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Комплектующие", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // КомплектующиеНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Комплектующие".
//
Процедура КомплектующиеЕдиницаИзмеренияПриИзменении(Элемент)

	// Установить коэффициент
	СтрокаТабличнойЧасти = ЭлементыФормы.Комплектующие.ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент; 

КонецПроцедуры // КомплектующиеЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Комплектующие".
//
Процедура КомплектующиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиКомплектующие, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если ЭлементыФормы.Комплектующие.Колонки.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если ЭлементыФормы.Комплектующие.Колонки.СтранаПроисхождения.Видимость	Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура КомплектующиеСчетУчетаБУПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(ЭлементыФормы.Комплектующие.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "СтатьяЗатрат" табличной части.
//
Процедура КомплектующиеСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Комплектующие.ТекущиеДанные;
	
	ЗаполнитьСчетаУчета = Ложь;
	Если ОтражатьВБухгалтерскомУчете Тогда
		Если СтрокаТабличнойЧасти.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
			Если Не СтрокаТабличнойЧасти.СчетУчетаБУ.Забалансовый Тогда
				ЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
		Иначе
			Если СтрокаТабличнойЧасти.СчетУчетаБУ.Забалансовый Тогда
				ЗаполнитьСчетаУчета = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаполнитьСчетаУчета Тогда
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Комплектующие", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;
	
КонецПроцедуры // КомплектующиеСтатьяЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля "СтатьяЗатрат" табличной части.
//
Процедура КомплектующиеСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.Материальные);
	
КонецПроцедуры // КомплектующиеСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "ЦенаПередачи".
//
Процедура КомплектующиеЦенаПередачиПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Комплектующие.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаПередачи = СтрокаТабличнойЧасти.ЦенаПередачи 
	                                   * СтрокаТабличнойЧасти.Количество;
									   
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Комплектующие"
//
Процедура КоманднаяПанельКомплектующиеЗаполнитьПоСпецификации(Кнопка)
	
	ЗаполнитьМатериалыПоСпецификации();
	
КонецПроцедуры

//Процедура вызывается при смене или перечитывании объекта.
Процедура ПриИзмененииДанных()
	
	ЗаполнитьЗначенияНомераГТДиСтраныПроисхождения();
	
КонецПроцедуры

Процедура КоманднаяПанельКомплектующиеЗаполнитьПоПотребностям(Кнопка)
	Если ВидОперации <> Перечисления.ВидыОперацийКомплектацияНоменклатуры.ВыпускПродукции Тогда
		Предупреждение("Заполнение возможно только для документов с видом операции 'Выпуск продукции'");
		Возврат;
	КонецЕсли;
	Если ВидКомплектации <> Перечисления.ВидыКомплектации.Сборка Тогда
		Предупреждение("Заполнение возможно только для документов с видом комплектации 'Сборка'");
		Возврат;
	КонецЕсли;

	Если не ЗначениеЗаполнено(ЗаказВыпуска) Тогда
		Предупреждение("Не указан заказ-выпуск");
		Возврат;
	КонецЕсли;
	Если ТипЗнч(ЗаказВыпуска)<>Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
		Предупреждение("Заказ-выпуск должен быть заказом на производство");
		Возврат;
	КонецЕсли;
	Если Комплектующие.Количество() > 0 Тогда
		Ответ = Вопрос("В табличной части уже присутствую строки. При заполнении они будут удалены!" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Комплектующие.Очистить();
	КонецЕсли;

    МассивЗаказов = Новый Массив;
    МассивЗаказов.Добавить(ЗаказВыпуска);
	ЗаказыНаПроизводствоИПереработку.ЗаполнитьТабличнуюЧастьПоПотребностямЗаказаНаПроизводство(Комплектующие, МассивЗаказов, новый Структура("ОтборНоменклатураХарактеристика",новый Структура("Продукция,ХарактеристикаПродукции",Номенклатура,ХарактеристикаНоменклатуры)));
	
	Для Каждого СтрокаТЧ Из Комплектующие Цикл
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТЧ, ЭтотОбъект);
		ПриИзмененииНоменклатурыТоваров(СтрокаТЧ);
		УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТЧ,, Ложь);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТЧ, "Комплектующие", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		Если не ЗначениеЗаполнено(СтрокаТЧ.СпособСписанияОстаткаТоваров) Тогда
			СтрокаТЧ.СпособСписанияОстаткаТоваров = Перечисления.СпособыСписанияОстаткаТоваров.СоСклада
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиКомплектующие = ЭлементыФормы.Комплектующие.Колонки;

ЗаполнитьСписокВыбораСтатусПартии();