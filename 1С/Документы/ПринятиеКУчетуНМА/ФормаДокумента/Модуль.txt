////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОтражатьВРегламентированномУчете;



////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


// Функция возвращает список значений доступных способов амортизации для бух. учета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
Функция ПолучитьСписокСпособовАмортизацииБУ() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.Линейный);
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка);
	КонецЕсли;
	
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции);
	
	Возврат СписокПеречисления;

КонецФункции // ПолучитьСписокСпособовАмортизацииБУ()

Процедура ЗаполнитьСчетаУчета(БезВопросов = Истина)

	Если НематериальныйАктив.ВидОбъектаУчета <> ВидОбъектаУчета Тогда
		НематериальныйАктив = Неопределено;
	КонецЕсли; 
	
	Если не БезВопросов Тогда
		Текст = "Установить значения счетов учета, используемые по умолчанию?";
		Ответ = Вопрос(Текст, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		СчетНачисленияАмортизацииБУ = ПланыСчетов.Хозрасчетный.АмортизацияНематериальныхАктивов;
		СчетНачисленияАмортизацииНУ = ПланыСчетов.Налоговый.АмортизацияНематериальныхАктивов;
		СчетУчетаБУ = ПланыСчетов.Хозрасчетный.НематериальныеАктивыОрганизации;
		СчетУчетаБУВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ПриобретениеНематериальныхАктивов;
		СчетУчетаНУ = ПланыСчетов.Налоговый.НематериальныеАктивыОрганизации;
		СчетУчетаНУВнеоборотногоАктива = ПланыСчетов.Налоговый.ПриобретениеНематериальныхАктивов;
		
	Иначе
		СчетНачисленияАмортизацииБУ = Неопределено;
		СчетНачисленияАмортизацииНУ = Неопределено;
		СчетУчетаБУ = ПланыСчетов.Хозрасчетный.РасходыНаНИОКР;
		СчетУчетаБУВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ВыполнениеНИОКР;
		СчетУчетаНУ = ПланыСчетов.Налоговый.РасходыНаНИОКР;
		СчетУчетаНУВнеоборотногоАктива = ПланыСчетов.Налоговый.ВыполнениеНИОКР;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает видимость элементов формы в зависимости от вида операции и 
// взведенных флагов
//
Процедура УстановитьВидимость()

	ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
		ПрименениеПБУ18 = ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18;
	Иначе
		ПрименениеПБУ18 = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	ЭтоУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	До2009 = (Год(Дата) < 2009);
	
	// зависимость объема работ от способа амортизации
	Если ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОбщиеСведения.Заголовок = "Нематериальный актив";
		ЭлементыФормы.НадписьНематериальныйАктив.Заголовок = "Нематериальный актив:";
		ЭлементыФормы.РамкаГруппы3.Заголовок = "Параметры амортизации";
		ЭлементыФормы.НадписьСпособОтраженияРасходов.Заголовок = "Способ отражения расходов по амортизации:";
		ЭлементыФормы.НадписьСпособПоступления.Видимость = Истина;
		ЭлементыФормы.СпособПоступления.Видимость = Истина;
		ЭлементыФормы.РамкаГруппы5.Заголовок = "Параметры амортизации";
		ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Заголовок = "Способ начисления амортизации:";
		ЭлементыФормы.РамкаГруппы7.Заголовок = "Параметры амортизации";
		ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Заголовок = "Срок полезного использования, мес.:";
		ЭлементыФормы.НачислятьАмортизациюБУ.Заголовок = "Начислять амортизацию";
		
		ЭлементыФормы.ПанельПараметровАмортизации.ТекущаяСтраница =
			ЭлементыФормы.ПанельПараметровАмортизации.Страницы[?(НачислятьАмортизациюНУ, "НМА", "Пустая")];
		ЭлементыФормы.НадписьСпециальныйКоэффициентНУ.Видимость = НЕ ЭтоУСН;
		ЭлементыФормы.СпециальныйКоэффициентНУ.Видимость = НЕ ЭтоУСН;
		ЭлементыФормы.НадписьСчетНачисленияАмортизацииНУ.Видимость = НЕ ЭтоУСН И НЕ НачислятьАмортизациюБУ;
		ЭлементыФормы.СчетНачисленияАмортизацииНУ.Видимость = НЕ ЭтоУСН И НЕ НачислятьАмортизациюБУ;
		
		ЭлементыФормы.НачислятьАмортизациюНУ.Заголовок = "Начислять амортизацию";
		
		Если НачислятьАмортизациюНУ Тогда
			ЭлементыФормы.НадписьСчетНачисленияАмортизацииНУ.Видимость = Истина;
			ЭлементыФормы.СчетНачисленияАмортизацииНУ.Видимость = Истина;
			
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииНУ.Видимость = Истина;
			ЭлементыФормы.СпособНачисленияАмортизацииНУ.Видимость = Истина;
			ЭлементыФормы.НадписьСрокПолезногоИспользованияНУ.Видимость = Истина;
			ЭлементыФормы.СрокПолезногоИспользованияНУ.Видимость = Истина;
			ЭлементыФормы.НадписьСпециальныйКоэффициентНУ.Видимость = Истина;
			ЭлементыФормы.СпециальныйКоэффициентНУ.Видимость = Истина;
			ЭлементыФормы.РамкаГруппы7.Видимость = Истина;
		Иначе
			ЭлементыФормы.НадписьСчетНачисленияАмортизацииНУ.Видимость = Ложь;
			ЭлементыФормы.СчетНачисленияАмортизацииНУ.Видимость = Ложь;
			
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииНУ.Видимость = Ложь;
			ЭлементыФормы.СпособНачисленияАмортизацииНУ.Видимость = Ложь;
			ЭлементыФормы.НадписьСрокПолезногоИспользованияНУ.Видимость = Ложь;
			ЭлементыФормы.СрокПолезногоИспользованияНУ.Видимость = Ложь;
			ЭлементыФормы.НадписьСпециальныйКоэффициентНУ.Видимость = Ложь;
			ЭлементыФормы.СпециальныйКоэффициентНУ.Видимость = Ложь;
			ЭлементыФормы.РамкаГруппы7.Видимость = Ложь;
		КонецЕсли;
		
		ЭлементыФормы.ПанельМетодНачисленияАмортизацииНУ.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.ПанельМетодНачисленияАмортизацииНУ.Свертка = ?(До2009, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
		
		Если НачислятьАмортизациюБУ Тогда
			ЭлементыФормы.РамкаГруппы5.Видимость = Истина;
			ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Видимость = Истина;
			ЭлементыФормы.СрокПолезногоИспользованияБУ.Видимость = Истина;
			ЭлементыФормы.НадписьСчетНачисленияАмортизацииБУ.Видимость = Истина;
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Видимость = Истина;
			ЭлементыФормы.СчетНачисленияАмортизацииБУ.Видимость = Истина;
			ЭлементыФормы.СпособНачисленияАмортизацииБУ.Видимость = Истина;
			
			ЭлементыФормы.ПанельПараметрыАмортизацииБУ.Видимость = НЕ СпособНачисленияАмортизацииБУ.Пустая();
			Если НЕ СпособНачисленияАмортизацииБУ.Пустая() Тогда
			    ЭлементыФормы.ПанельПараметрыАмортизацииБУ.ТекущаяСтраница =
					ЭлементыФормы.ПанельПараметрыАмортизацииБУ.Страницы[
						СпособНачисленияАмортизацииБУ.Метаданные().ЗначенияПеречисления[Перечисления.СпособыНачисленияАмортизацииНМА.Индекс(СпособНачисленияАмортизацииБУ)].Имя];
			КонецЕсли;
		Иначе
			ЭлементыФормы.РамкаГруппы5.Видимость = Ложь;
			ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Видимость = Ложь;
			ЭлементыФормы.СрокПолезногоИспользованияБУ.Видимость = Ложь;
			ЭлементыФормы.НадписьСчетНачисленияАмортизацииБУ.Видимость = Ложь;
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Видимость = Ложь;
			ЭлементыФормы.СчетНачисленияАмортизацииБУ.Видимость = Ложь;
			ЭлементыФормы.СпособНачисленияАмортизацииБУ.Видимость = Ложь;
			ЭлементыФормы.ПанельПараметрыАмортизацииБУ.Видимость = Ложь;
		КонецЕсли;
		
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОбщиеСведения.Заголовок = "Расходы на НИОКР";
		ЭлементыФормы.НадписьНематериальныйАктив.Заголовок = "НИОКР:";
		ЭлементыФормы.РамкаГруппы3.Заголовок = "Параметры списания расходов";
		ЭлементыФормы.НадписьСпособОтраженияРасходов.Заголовок = "Способ отражения расходов в учете:";
		ЭлементыФормы.НадписьСпособПоступления.Видимость = Ложь;
		ЭлементыФормы.СпособПоступления.Видимость = Ложь;
		ЭлементыФормы.РамкаГруппы5.Заголовок = "Параметры списания расходов";
		ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Заголовок = "Способ списания расходов:";
		ЭлементыФормы.НадписьСчетНачисленияАмортизацииБУ.Видимость = Ложь;
		ЭлементыФормы.СчетНачисленияАмортизацииБУ.Видимость = Ложь;
		ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Заголовок = "Срок списания, мес.:";
		ЭлементыФормы.НачислятьАмортизациюБУ.Заголовок = "Списывать расходы";
		
		ЭлементыФормы.ПанельПараметровАмортизации.ТекущаяСтраница = ЭлементыФормы.ПанельПараметровАмортизации.Страницы["НИОКР"];
		ЭлементыФормы.НадписьСрокСписания.Видимость = Истина;
		ЭлементыФормы.СрокПолезногоИспользованияНУНИОКР.Видимость = Истина;
		ЭлементыФормы.ПанельМетодНачисленияАмортизацииНУ.Видимость = Ложь;
		
		Если НачислятьАмортизациюБУ Тогда
			ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Видимость  = Истина;
			ЭлементыФормы.СрокПолезногоИспользованияБУ.Видимость         = Истина;
			ЭлементыФормы.РамкаГруппы5.Видимость                         = Истина;
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Видимость = Истина;
			ЭлементыФормы.СпособНачисленияАмортизацииБУ.Видимость        = Истина;
			ЭлементыФормы.ПанельПараметрыАмортизацииБУ.Видимость = НЕ СпособНачисленияАмортизацииБУ.Пустая();
			Если НЕ СпособНачисленияАмортизацииБУ.Пустая() Тогда
			    ЭлементыФормы.ПанельПараметрыАмортизацииБУ.ТекущаяСтраница =
					ЭлементыФормы.ПанельПараметрыАмортизацииБУ.Страницы[
						СпособНачисленияАмортизацииБУ.Метаданные().ЗначенияПеречисления[Перечисления.СпособыНачисленияАмортизацииНМА.Индекс(СпособНачисленияАмортизацииБУ)].Имя];
			КонецЕсли;
		Иначе
			ЭлементыФормы.НадписьСрокПолезногоИспользованияБУ.Видимость  = Ложь;
			ЭлементыФормы.СрокПолезногоИспользованияБУ.Видимость         = Ложь;
			ЭлементыФормы.РамкаГруппы5.Видимость                         = Ложь;
			ЭлементыФормы.НадписьСпособНачисленияАмортизацииБУ.Видимость = Ложь;
			ЭлементыФормы.СпособНачисленияАмортизацииБУ.Видимость        = Ложь;
			ЭлементыФормы.ПанельПараметрыАмортизацииБУ.Видимость         = Ложь;
		КонецЕсли;
		
		ЭлементыФормы.НадписьСпециальныйКоэффициентНУ.Видимость = Ложь;
		ЭлементыФормы.СпециальныйКоэффициентНУ.Видимость        = Ложь;
	КонецЕсли;
	
	Если ЭтоУСН Тогда
		ЭтоРасходыУСН = НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	Иначе
		ЭтоРасходыУСН = Ложь;
	КонецЕсли;
	
	Если ЭтоРасходыУСН Тогда
		ЭлементыФормы.РамкаГруппы10.Видимость 		= НЕ (Дата < Дата("20060101"));
		ЭлементыФормы.КоманднаяПанель1.Видимость 	= НЕ (Дата < Дата("20060101"));
		ЭлементыФормы.ОплатаНМА.Видимость 			= НЕ (Дата < Дата("20060101"));
		ЭлементыФормы.НадписьПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 	= НЕ (Дата < Дата("20060101"));
		ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 		= НЕ (Дата < Дата("20060101"));
	КонецЕсли;
	
	ПоказыватьПорядокСписанияНИОКРНаРасходыНУ =
		НЕ ЭтоУСН И (ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР);
	Если ПоказыватьПорядокСписанияНИОКРНаРасходыНУ Тогда
		ПорядокСписанияНИОКРНУРавномерно =
			ПорядокСписанияНИОКРНаРасходыНУ = Перечисления.ПорядокСписанияНИОКРНУ.Равномерно;
		ЭлементыФормы.НадписьСрокСписания.Доступность = ПорядокСписанияНИОКРНУРавномерно;
		ЭлементыФормы.СрокПолезногоИспользованияНУНИОКР.Доступность = ПорядокСписанияНИОКРНУРавномерно;
	Иначе
		ЭлементыФормы.НадписьСрокСписания.Видимость = НачислятьАмортизациюНУ;
		ЭлементыФормы.СрокПолезногоИспользованияНУНИОКР.Видимость = НачислятьАмортизациюНУ;
	КонецЕсли;
	
	ЭлементыФормы.НачислятьАмортизациюНУ.Видимость            = НЕ ПоказыватьПорядокСписанияНИОКРНаРасходыНУ;
	ЭлементыФормы.НачислятьАмортизациюНУ.Доступность          = НЕ ПоказыватьПорядокСписанияНИОКРНаРасходыНУ;
	ЭлементыФормы.ПорядокСписанияНИОКРНаРасходыНУ.Видимость   = ПоказыватьПорядокСписанияНИОКРНаРасходыНУ;
	ЭлементыФормы.ПорядокСписанияНИОКРНаРасходыНУ.Доступность = ПоказыватьПорядокСписанияНИОКРНаРасходыНУ;
	ЭлементыФормы.НадписьНачислятьАмортизациюНУ.Заголовок     =
		?(ПоказыватьПорядокСписанияНИОКРНаРасходыНУ, "Порядок списания на расходы:","Начислять амортизацию:");
	ЭлементыФормы.ИнфоНадписьРасходыНаНИОКР.Заголовок         =
		?(ПоказыватьПорядокСписанияНИОКРНаРасходыНУ,
		"Для расходов, включаемых в состав прочих расходов НУ с коэффициентом 1.5, в способе отражения расходов указывается статья затрат с видом ""НИОКР по перечню Правительства РФ"".
		|Для прочих расходов указывается статья затрат с видом ""НИОКР"".", "");
	ЭлементыФормы.ИнфоНадписьРавномерноеСписание.Заголовок    =
		?(ПоказыватьПорядокСписанияНИОКРНаРасходыНУ, "Заполняется только для равномерного списания стоимости НИОКР на расходы", "");
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.БухУчет.Видимость = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалУчет.Видимость = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.ОсновнаяПанель.Страницы.УСНУчет.Видимость = ОтражатьВНалоговомУчете И ЭтоРасходыУСН;
	
	ЭлементыФормы.СчетУчетаБУВнеоборотногоАктива.Видимость = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СчетУчетаНУВнеоборотногоАктива.Видимость = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.НадписьСчетУчетаБУВнеоборотногоАктива.Видимость = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСчетУчетаНУВнеоборотногоАктива.Видимость = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	
	ЭлементыФормы.НадписьСтоимостьПР.Видимость = ОтражатьВНалоговомУчете И НЕ ЭтоУСН И ПрименениеПБУ18;
	ЭлементыФормы.НадписьСтоимостьВР.Видимость = ОтражатьВНалоговомУчете И НЕ ЭтоУСН И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьПР.Видимость        = ОтражатьВНалоговомУчете И НЕ ЭтоУСН И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьВР.Видимость        = ОтражатьВНалоговомУчете И НЕ ЭтоУСН И ПрименениеПБУ18;
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			НачислятьАмортизациюБУ = Истина;
			ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)));
			НачислятьАмортизациюНУ = ОтражатьВНалоговомУчетеНП;
			ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив;
			СпециальныйКоэффициентНУ = 1;
			
			ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставАмортизируемогоИмущества;
			ПорядокСписанияНИОКРНаРасходыНУ = ?(Дата < '20120101', Перечисления.ПорядокСписанияНИОКРНУ.Равномерно, Перечисления.ПорядокСписанияНИОКРНУ.ПриПринятииКУчету);
			
			ЗаполнитьСчетаУчета();
		КонецЕсли;
				
	КонецЕсли;
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(ВидОбъектаУчета, ЭтотОбъект, ЭтаФорма);
	УстановитьВидимость();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(ВидОбъектаУчета, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	
КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ДействияФормыПринятиеКУчетуНематериальногоАктива(Кнопка)
	
	ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив;
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(ВидОбъектаУчета, ЭтотОбъект, ЭтаФорма);
	ЗаполнитьСчетаУчета(Ложь);
	УстановитьВидимость();
	
	ПорядокСписанияНИОКРНаРасходыНУ =
		?(НачислятьАмортизациюНУ, Перечисления.ПорядокСписанияНИОКРНУ.Равномерно, Перечисления.ПорядокСписанияНИОКРНУ.ПриПринятииКУчету);
	
КонецПроцедуры

Процедура ДействияФормыПринятиеКУчетуРезультатовНИОКР(Кнопка)
	
	ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.РасходыНаНИОКР;
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(ВидОбъектаУчета, ЭтотОбъект, ЭтаФорма);
	ЗаполнитьСчетаУчета(Ложь);
	УстановитьВидимость();
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	УстановитьВидимость();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Организация 
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	Если НЕ ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(Организация) Тогда
		ОтражатьВБухгалтерскомУчете = Истина;
	КонецЕсли;
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

    ОтражатьВНалоговомУчетеНП = (НачислятьАмортизациюНУ И ОтражатьВНалоговомУчете И (НЕ НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)));
	НачислятьАмортизациюНУ = ОтражатьВНалоговомУчетеНП;
	УстановитьВидимость();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВБухгалтерскомУчете 
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВНалоговомУчете 
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СпособНачисленияАмортизацииБУ
//
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)
	
	УстановитьВидимость();
	Если СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииНМА.ПропорциональноОбъемуПродукции Тогда
		ПредполагаемыйОбъемПродукцииБУ = 0;
	КонецЕсли;
	
	Если СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииНМА.УменьшаемогоОстатка Тогда
		КоэффициентБУ = 0;
	Иначе
		КоэффициентБУ = 1;
	КонецЕсли;
	
КонецПроцедуры // СпособНачисленияАмортизацииБУПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетУчетаБУ
//
Процедура СчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетНачисленияАмортизации
//
Процедура СчетНачисленияАмортизацииБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетУчетаНУ
//
Процедура СчетУчетаНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетНачисленияАмортизацииНУ
//
Процедура СчетНачисленияАмортизацииНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
//
Процедура СчетУчетаБУВнеоборотногоАктиваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
//
Процедура СчетУчетаБУВнеоборотногоАктиваПриИзменении(Элемент)
	
	СчетУчетаНУВнеоборотногоАктива = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУВнеоборотногоАктива));

КонецПроцедуры // ТоварыСчетУчетаБУПриИзменении()

Процедура СпособНачисленияАмортизацииБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
		РаботаСДиалогами.УстановитьСписокПоляВыбора(ЭлементыФормы.СпособНачисленияАмортизацииБУ, ПолучитьСписокСпособовАмортизацииБУ());
КонецПроцедуры

Процедура НематериальныйАктивНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеВнеоборотнымиАктивами.ОткрытьФормуВыбораНМА(ВидОбъектаУчета, СтандартнаяОбработка, Элемент, "ПринятиеКУчетуНМА");
	
КонецПроцедуры

Процедура НематериальныйАктивПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(НематериальныйАктив.ВидОбъектаУчета)
			И НематериальныйАктив.ВидОбъектаУчета <> ВидОбъектаУчета Тогда
		Сообщить("Вид выбранного объекта учета не совпадает с видом операции, указанным в документе: " + ВидОбъектаУчета, СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(НематериальныйАктив.ВидОбъектаУчета)
	     	И НематериальныйАктив.ВидОбъектаУчета = Перечисления.ВидыОбъектовУчетаНМА.НематериальныйАктив Тогда
         ПорядокСписанияНИОКРНаРасходыНУ =
		 	?(НачислятьАмортизациюНУ, Перечисления.ПорядокСписанияНИОКРНУ.Равномерно, Перечисления.ПорядокСписанияНИОКРНУ.ПриПринятииКУчету);
    КонецЕсли;
	
КонецПроцедуры

Процедура НачислятьАмортизациюНУПриИзменении(Элемент)
	
	ПорядокСписанияНИОКРНаРасходыНУ =
		?(НачислятьАмортизациюНУ, Перечисления.ПорядокСписанияНИОКРНУ.Равномерно, Перечисления.ПорядокСписанияНИОКРНУ.ПриПринятииКУчету); 
	УстановитьВидимость();
	
КонецПроцедуры

Процедура НачислятьАмортизациюБУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события Нажатие кнопки КнопкаРассчитатьБух
// Рассчитывает стоимость НМА по данным бух. учета (по счету 08.05/08.08)
//
Процедура КнопкаРассчитатьБухНажатие(Элемент)
	
	// Проверка возможности расчета стоимости
	ФлагОшибки = Ложь;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ФлагОшибки = Истина;
		Сообщить("Не указана организация!", СтатусСообщения.Внимание);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ФлагОшибки = Истина;
		Сообщить("Не указана дата документа!", СтатусСообщения.Внимание);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СчетУчетаБУВнеоборотногоАктива) Тогда
		ФлагОшибки = Истина;
		Сообщить("Не указан счет учета внеоборотного актива (БУ)!", СтатусСообщения.Внимание);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НематериальныйАктив) Тогда
		ФлагОшибки = Истина;
		Сообщить("Не указан нематериальный актив!", СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если ФлагОшибки Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет стоимости
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ХозрасчетныйОстатки.СуммаОстаток КАК СумОст
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный.Остатки(&КонДата, Счет = &Счет08_05, , Организация = &Орг И Субконто1 = &НМА) КАК ХозрасчетныйОстатки
	|";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата",   Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр( "Орг",       Организация);
	Запрос.УстановитьПараметр( "Счет08_05", СчетУчетаБУВнеоборотногоАктива);
	Запрос.УстановитьПараметр( "НМА",       НематериальныйАктив);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	РезультатЗапроса.Следующий();
	
	СтоимостьБУ = РезультатЗапроса.СумОст;
	
КонецПроцедуры // КнопкаРассчитатьБухНажатие()

// Процедура - обработчик события Нажатие кнопки КнопкаРассчитатьНал
// Рассчитывает стоимость НМА по данным нал. учета (по счету Н08.5/Н08.08)
//
Процедура КнопкаРассчитатьНалНажатие(Элемент)
	
	// Проверка возможности расчета стоимости
	ФлагОшибки = Ложь;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ФлагОшибки = Истина;
		Сообщить("Не указана организация!", СтатусСообщения.Внимание);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Дата) Тогда
		ФлагОшибки = Истина;
		Сообщить("Не указана дата документа!", СтатусСообщения.Внимание);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СчетУчетаНУВнеоборотногоАктива) Тогда
		ФлагОшибки = Истина;
		Сообщить("Не указан счет учета внеоборотного актива (НУ)!", СтатусСообщения.Внимание);
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(НематериальныйАктив) Тогда
		ФлагОшибки = Истина;
		Сообщить("Не указан нематериальный актив!", СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если ФлагОшибки Тогда
		Возврат;
	КонецЕсли;
	
	// Расчет стоимости
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НМА",         НематериальныйАктив);
	Запрос.УстановитьПараметр("Счет",        СчетУчетаНУВнеоборотногоАктива);
	Запрос.УстановитьПараметр("Дата",        Новый Граница(КонецМесяца(Дата), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ВидУчетаНУ",  Перечисления.ВидыУчетаПоПБУ18.НУ);
	Запрос.УстановитьПараметр("ВидУчетаПР",  Перечисления.ВидыУчетаПоПБУ18.ПР);
	Запрос.УстановитьПараметр("ВидУчетаВР",  Перечисления.ВидыУчетаПоПБУ18.ВР);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НалоговыйОстаткиНУ.СуммаОстатокДт КАК СтоимостьНУ,
	|	НалоговыйОстаткиПР.СуммаОстатокДт КАК СтоимостьПР,
	|	НалоговыйОстаткиВР.СуммаОстатокДт КАК СтоимостьВР
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(&Дата,	Счет = &Счет, ,	Организация = &Организация И Субконто1 = &НМА И ВидУчета = &ВидУчетаНУ) КАК НалоговыйОстаткиНУ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&Дата, Счет = &Счет, , Организация = &Организация И Субконто1 = &НМА И ВидУчета = &ВидУчетаПР) КАК НалоговыйОстаткиПР
	|		ПО НалоговыйОстаткиНУ.Субконто1 = НалоговыйОстаткиПР.Субконто1
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(&Дата, Счет = &Счет, , Организация = &Организация И Субконто1 = &НМА И ВидУчета = &ВидУчетаВР) КАК НалоговыйОстаткиВР
	|		ПО НалоговыйОстаткиНУ.Субконто1 = НалоговыйОстаткиВР.Субконто1";
				   
	ТЗ = Запрос.Выполнить().Выгрузить();
	
	Если ТЗ.Количество() > 0 Тогда

		СтоимостьНУ = ТЗ.Итог("СтоимостьНУ");
		СтоимостьПР = ТЗ.Итог("СтоимостьПР");
		СтоимостьВР = ТЗ.Итог("СтоимостьВР");

	КонецЕсли;
	
КонецПроцедуры // КнопкаРассчитатьНалНажатие()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры
 
// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

Процедура СчетУчетаНУВнеоборотногоАктиваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры

// Обработчик события "Начало выбора" поля "Способ отражения расходов по амортизации".
//
Процедура СпособОтраженияРасходовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(Элемент, Организация, СтандартнаяОбработка);

КонецПроцедуры // СпособОтраженияРасходовНачалоВыбора()

// Процедура - обработчик выбора реквизита "ПорядокСписанияНИОКРНаРасходыНУ"
//
Процедура ПорядокСписанияНИОКРНаРасходыНУПриИзменении(Элемент)
	
	НачислятьАмортизациюНУ = (ПорядокСписанияНИОКРНаРасходыНУ = Перечисления.ПорядокСписанияНИОКРНУ.Равномерно);
    УстановитьВидимость();
	
КонецПроцедуры