////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит текущее значение вида операции, для осуществления отката при изменении вида операции
Перем мТекущийВидОперации;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мТерминалы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	Если НЕ СтрокаТабличнойЧасти.ЕдиницаИзмерения.Владелец = СтрокаТабличнойЧасти.Номенклатура ТОгда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
    КонецЕсли;
КонецПроцедуры

// Процедура устанавливает доступные для ввода типы документа передачи
//
// Параметры:
//  НадоПриводитьЗначения.- Булево, признак необходимости привести к типу значение поля
//
Процедура УстановитьОграничениеТиповДокументаПередачи(НадоПриводитьЗначения)

	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		ЭлементыФормы.ДокументПередачи.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ПриходныйОрдерНаТовары");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной Тогда
		ЭлементыФормы.ДокументПередачи.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику Тогда
		ЭлементыФормы.ДокументПередачи.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ВозвратТоваровПоставщику");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВПереработку
		  ИЛИ ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ИзПереработки Тогда
		ЭлементыФормы.ДокументПередачи.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ПередачаТоваров");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		ЭлементыФормы.ДокументПередачи.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ПеремещениеТоваров");
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.НеОпределен Тогда
		ЭлементыФормы.ДокументПередачи.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
	Иначе
		Возврат;
	КонецЕсли; 
	Если НадоПриводитьЗначения Тогда
		ЭлементыФормы.ДокументПередачи.Значение = ЭлементыФормы.ДокументПередачи.ОграничениеТипа.ПривестиЗначение(ДокументПередачи);
	КонецЕсли;

КонецПроцедуры // УстановитьОграничениеТиповДокументаПередачи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает доступность меню "Проверить"
// командной панели "КоманднаяПанельТовары"
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьМенюПроверить()

	Перем Кнопка;

	УстановитьДоступностьКнопкиПроверитьШтрихКоды();

	Кнопка = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Проверить;
	Если Кнопка.Кнопки.Количество() = 0 Тогда
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Удалить(Кнопка);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьМенюПроверить()

// Процедура устанавливает доступность пункта "Штрих-коды" меню "Проверить"
// командной панели "КоманднаяПанельТовары"
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьКнопкиПроверитьШтрихКоды()

	КнопкаПроверить = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Проверить;
	Если ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.СканерШтрихКода,
	                                                Справочники.КассыККМ.ПустаяСсылка()).Количество() = 0 Тогда
		Кнопка = КнопкаПроверить.Кнопки.ШтрихКоды;
		КнопкаПроверить.Кнопки.Удалить(Кнопка);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьКнопкиПроверитьШтрихКоды()

// Процедура устанавливает видимость и доступность некоторых элементов формы
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимостьДоступность()
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		ЭлементыФормы.Контрагент.Видимость        = Ложь;
		ЭлементыФормы.НадписьКонтрагент.Видимость = Ложь;
		
		ЭлементыФормы.Товары.Колонки.ДокументРезерва.Видимость         = Истина;
		ЭлементыФормы.Товары.Колонки.ДокументРезерва.ИзменятьВидимость = Истина;
		
		ЭлементыФормы.ВозвратнаяТара.Колонки.ДокументРезерва.Видимость         = Истина;
		ЭлементыФормы.ВозвратнаяТара.Колонки.ДокументРезерва.ИзменятьВидимость = Истина;
	Иначе
		ЭлементыФормы.Контрагент.Видимость        = Истина;
		ЭлементыФормы.НадписьКонтрагент.Видимость = Истина;
		
		ЭлементыФормы.Товары.Колонки.ДокументРезерва.Видимость         = Ложь;
		ЭлементыФормы.Товары.Колонки.ДокументРезерва.ИзменятьВидимость = Ложь;
		
		ЭлементыФормы.ВозвратнаяТара.Колонки.ДокументРезерва.Видимость         = Ложь;
		ЭлементыФормы.ВозвратнаяТара.Колонки.ДокументРезерва.ИзменятьВидимость = Ложь;
	КонецЕсли;
	//Отметка незаполненного, видимость колонки "Серия указана"
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.НеОпределен Тогда
		ЭлементыФормы.Товары.Колонки.СерияУказываетсяПриОтпускеСоСклада.Видимость = Ложь;
		ЭлементыФормы.Товары.Колонки.СерияУказываетсяПриОтпускеСоСклада.ИзменятьВидимость = Ложь;
		ЭлементыФормы.Организация.АвтоОтметкаНезаполненного 		= Ложь;
		ЭлементыФормы.ДокументПередачи.АвтоОтметкаНезаполненного 	= Ложь;
		ЭлементыФормы.Организация.ОтметкаНезаполненного 			= Ложь;
		ЭлементыФормы.ДокументПередачи.ОтметкаНезаполненного 		= Ложь;
	Иначе
		ЭлементыФормы.Товары.Колонки.СерияУказываетсяПриОтпускеСоСклада.Видимость = Истина;
		ЭлементыФормы.Товары.Колонки.СерияУказываетсяПриОтпускеСоСклада.ИзменятьВидимость = Истина;
		ЭлементыФормы.Организация.АвтоОтметкаНезаполненного 		= Истина;
		ЭлементыФормы.ДокументПередачи.АвтоОтметкаНезаполненного 	= Истина;
	КонецЕсли;
КонецПроцедуры // УстановитьВидимостьДоступность()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка");
		
		Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
			Контрагент = Неопределено;
		КонецЕсли;

	КонецЕсли;

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ДокументРезерва");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	СтруктураКолонок.Вставить("ЕдиницаИзмерения");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущийВидОперации          = ВидОперации;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары, Новый Структура("СерияНоменклатуры, СерияУказываетсяПриОтпускеСоСклада"));

	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);

	// Установить видимость и доступность реквизитов
	УстановитьВидимостьДоступность();

	// Установить ограничения на тип документа передачи
	УстановитьОграничениеТиповДокументаПередачи(ЭтоНовый());

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	УстановитьДоступностьМенюПроверить();

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);

	РаботаСДиалогами.УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных(ЭтаФорма, мТерминалы);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ПредопределенноеЗначение("Перечисление.КлючевыеОперации.ПроведениеДокументаРасходныйОрдерНаТовары"));
	// Конец ОценкаПроизводительности
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельТоварыЗаполнитьПоДокументуПередачи(Кнопка)

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДокументПередачи) Тогда
		ТекстПредупреждения = "Не выбран документ передачи.
		                       |Заполнение невозможно.";

	ИначеЕсли Не ДокументПередачи.Проведен Тогда

		ПредставлениеДокументПередачи = СокрЛП(ДокументПередачи.Метаданные().Представление());

		ТекстПредупреждения = """"+ ПредставлениеДокументПередачи + """ не проведен.
		                      |Заполнение невозможно.";
	Иначе

		ЗаполнятьТабличнуюЧасть = Истина;

	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Товары.Очистить();

	КонецЕсли;

	ЗаполнитьТовары(); // заполним табличную часть по документу передачи

КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоДокументуПередачи()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер[Кнопка.Имя];
	КонецЕсли;

	мТекущийВидОперации = ВидОперации;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость и доступность реквизитов по виду операции.
	УстановитьВидимостьДоступность();

	// Установить ограничения на тип документа передачи
	УстановитьОграничениеТиповДокументаПередачи(Истина);
	
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		Контрагент = Неопределено;
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик события "ПриНажатии" пункта меню "ШтрихКоды"
// "КоманднаяПанельТовары"
//
// Параметры
//  Кнопка – <КнопкаКоманднойПанели> 
//         – кнопка "ШтрихКоды"
//
Процедура КоманднаяПанельТоварыШтрихКоды(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПроверкиШтрихкодов(ЭтаФорма, ЭтотОбъект, Неопределено);

КонецПроцедуры // КоманднаяПанельТоварыШтрихКоды()

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Склад.
//
Процедура СкладПриИзменении(Элемент)

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость и доступность реквизитов
	УстановитьВидимостьДоступность();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода склада компании
// в строке табличной части "Товары".
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ДокументПередачи".
//
Процедура ДокументПередачиПриИзменении(Элемент)

	Если ЗначениеЗаполнено(ДокументПередачи) Тогда
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = ДокументПередачи.Организация ;
		КонецЕсли;
		Если ТипЗнч(ДокументПередачи) = Тип("ДокументСсылка.ЗаказПокупателя") Тогда
			Контрагент = ДокументПередачи.Контрагент;
			Возврат;
		КонецЕсли;

		Если ВидОперации <> Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				Склад = ДокументПередачи.Склад;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
				Контрагент = ДокументПередачи.Контрагент;
			КонецЕсли;
		Иначе
			
			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				Склад = ДокументПередачи.СкладОтправитель;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ДокументПередачиПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДокументПередачи".
//
Процедура ДокументПередачиНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоПриходномуОрдеру Тогда
		ФормаВыбора = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора(,Элемент,);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.РасходПоНакладной Тогда
		ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора(,Элемент,);
		ОтборПоОрдеру = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВозвратПоставщику Тогда
		ФормаВыбора = Документы.ВозвратТоваровПоставщику.ПолучитьФормуВыбора(,Элемент,);
		ОтборПоОрдеру = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
		ФормаВыбора = Документы.ПеремещениеТоваров.ПолучитьФормуВыбора(,Элемент,);
		ОтборПоОрдеру = Ложь;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ВПереработку Тогда
		ФормаВыбора = Документы.ПередачаТоваров.ПолучитьФормуВыбора(,Элемент,);
		ОтборПоОрдеру = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.ИзПереработки Тогда
		ФормаВыбора = Документы.ПередачаТоваров.ПолучитьФормуВыбора(,Элемент,);
		ОтборПоОрдеру = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.НеОпределен Тогда
		ФормаВыбора = Документы.ЗаказПокупателя.ПолучитьФормуВыбора(,Элемент,);
		ОтборПоОрдеру = Ложь;
	КонецЕсли;

	Если ЗначениеЗаполнено(Контрагент) Тогда
		// отберем по контрагенту
		ФормаВыбора.ДокументСписок.Отбор.Контрагент.Значение      = Контрагент;
		ФормаВыбора.ДокументСписок.Отбор.Контрагент.Использование = Истина;
		ФормаВыбора.ДокументСписок.Отбор.Контрагент.ВидСравнения  = ВидСравнения.Равно;
	КонецЕсли;
	Если ОтборПоОрдеру = Истина Тогда
		// отберем по виду передачи
		ФормаВыбора.ДокументСписок.Отбор.ВидПередачи.Значение      = Перечисления.ВидыПередачиТоваров.ПоОрдеру;
		ФормаВыбора.ДокументСписок.Отбор.ВидПередачи.Использование = Истина;
		ФормаВыбора.ДокументСписок.Отбор.ВидПередачи.ВидСравнения  = ВидСравнения.Равно;
	Иначе
		Если ВидОперации = Перечисления.ВидыОперацийРасходныйОрдер.Перемещение Тогда
			ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Значение      = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукцияПоОрдерам;
			ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Использование = Истина;
			ФормаВыбора.ДокументСписок.Отбор.ВидОперации.ВидСравнения  = ВидСравнения.Равно;
		КонецЕсли;			
	КонецЕсли; 

	Если ЗначениеЗаполнено(ДокументПередачи) Тогда
		Попытка
			ФормаВыбора.ЭлементыФормы.ДокументСписок.ТекущаяСтрока = ДокументПередачи;
		Исключение
			// Или тип документа не совпадает, или такого документа там нету, короче что бы не падало.
		КонецПопытки;
	КОнецЕсли;

	ФормаВыбора.Открыть();

КонецПроцедуры // ДокументПередачиНачалоВыбораИзСписка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если ЭлементыФормы.Товары.Колонки.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если ЭлементыФормы.Товары.Колонки.СтранаПроисхождения.Видимость Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.СерияУказываетсяПриОтпускеСоСклада.ОтображатьТекст = Истина;
	Если ДанныеСтроки.СерияУказываетсяПриОтпускеСоСклада Тогда
		ОформлениеСтроки.Ячейки.СерияУказываетсяПриОтпускеСоСклада.Текст = "при отпуске со склада";
		ОформлениеСтроки.Ячейки.СерияНоменклатуры.ТолькоПросмотр = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.СерияУказываетсяПриОтпускеСоСклада.Текст = "в расходном документе";
		ОформлениеСтроки.Ячейки.СерияНоменклатуры.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//Услуг в этом документе быть не должно.
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.Услуга Тогда
			Предупреждение("Услуг в этом документе быть не должно."); 
			СтандартнаяОбработка = Ложь;  // Отказ от выбора.
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ТоварыНоменклатураОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) ТОгда
		Если СтрокаТабличнойЧасти.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
			СтрокаТабличнойЧасти.СерияУказываетсяПриОтпускеСоСклада = Ложь;
		КонецЕсли;
	КонецЕсли;	
			
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары".
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если НоваяСтрока 
	   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Качество) Тогда
		СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
	КонецЕсли;
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Функция формирует список запросов для передачи в форму подбора.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	ЕстьСерия               = Истина;
	РазворачиватьДоКачества = Истина;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок = Метаданные().Представление();
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);

	СтруктураПараметровПодбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураПараметровПодбора.Вставить("Команда" , "ПодборВТабличнуюЧастьТовары");
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		СтруктураПараметровПодбора.Вставить("Команда" , "ПодборВТабличнуюЧастьВозвратнаяТара");
		РазворачиватьДоКачества = Ложь;
	КонецЕсли;

	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"     , СписокВидовПодбора);
	СтруктураПараметровПодбора.Вставить("Склад"                  , Склад);
	СтруктураПараметровПодбора.Вставить("Организация"            , Организация);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества", РазворачиватьДоКачества);
	СтруктураПараметровПодбора.Вставить("Заголовок"              , "Подбор номенклатуры в документ " + 
	                                                             ПредставлениеДок + " № " + Номер);

	Если ТипЗнч(ДокументПередачи) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
		СтруктураПараметровПодбора.Вставить("ВременныеТаблицы"   , ОбработкаТабличныхЧастей.СтруктураДляРасчетаРезерваПриПодбореНоменклатуры(ЭтаФорма, Ложь, "ДокументПередачи"));
	ИначеЕсли ТипЗнч(ДокументПередачи) = Тип("ДокументСсылка.РеализацияТоваровУслуг")
			ИЛИ ТипЗнч(ДокументПередачи) = Тип("ДокументСсылка.ВозвратТоваровПоставщику")
			ИЛИ ТипЗнч(ДокументПередачи) = Тип("ДокументСсылка.ПеремещениеТоваров") Тогда
		СтруктураПараметровПодбора.Вставить("ВременныеТаблицы"   , ОбработкаТабличныхЧастей.СтруктураДляРасчетаРезерваПриПодбореНоменклатуры(ЭтаФорма, Ложь, "ДокументПередачи", "ТоварыКПередачеСоСкладов"));
	КонецЕсли;

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения"          , ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
		Если НЕ ЗначениеЗаполнено(Качество) Тогда
			Качество = Справочники.Качество.Новый;
		КонецЕсли;
		СтруктураОтбора.Вставить("Качество"         , Качество);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество       = СтрокаТабличнойЧасти.Количество + Количество;

		КонецЕсли;

	Иначе

		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			СтрокаТабличнойЧасти.Качество                   = Качество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			Если НЕ ЗначениеЗаполнено(Качество) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

		Иначе

			СтрокаТабличнойЧасти.Количество                 = Количество;

		КонецЕсли;

	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		ТабличнаяЧастьИмя = "Товары";
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		ТабличнаяЧастьИмя = "ВозвратнаяТара";
	КонецЕсли;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ТоварыОбработкаПодбора()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "ВозвратнаяТара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" табличной части
// "Товары".
//
Процедура ТоварыДокументРезерваНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Товары", ДопПараметры);

КонецПроцедуры // ТоварыДокументРезерваНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ВозвратнаяТара.Колонки.ЕдиницаХранения.Видимость Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

Процедура ТоварыСерияУказываетсяПриОтпускеСоСкладаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Ложь, "в расходном документе");
	
	Если ЗначениеЗаполнено(ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура) Тогда
		Если НЕ ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура.ВестиПартионныйУчетПоСериям Тогда
			СписокВыбора.Добавить(Истина, "при отпуске со склада");
		КонецЕсли;
	Иначе
		СписокВыбора.Добавить(Истина, "при отпуске со склада");
	КонецЕсли;	
	
	Элемент.СписокВыбора = СписокВыбора;
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" табличной части
// "ВозвратнаяТара".
//
Процедура ВозвратнаяТараДокументРезерваНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ВозвратнаяТара", ДопПараметры);

КонецПроцедуры // ВозвратнаяТараДокументРезерваНачалоВыбора()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Обработчик события "Нажатие" кнопки "ОткрытьФормуНастройкиАдресногоСклада" в подменю "Действия".
//
Процедура ДействияФормыОткрытьФормуНастройкиБланкаТоварногоНаполнения(Кнопка)

	РаботаСДиалогами.ОткрытьФормуНастройкиБланкаТоварногоНаполнения(ЭтотОбъект);

КонецПроцедуры // ДействияФормыОткрытьФормуНастройкиАдресногоСклада()

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)

	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;

мТерминалы             = ПолучитьСерверТО().ПолучитьСписокУстройств(
   Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);