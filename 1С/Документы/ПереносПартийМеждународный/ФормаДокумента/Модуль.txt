////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета;
Перем мВалютаМеждународногоУчета;

Перем мКолонкиПартииТоваровНаСкладах;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;




////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПартииТоваровНаСкладах,ЭлементыФормы.КоманднаяПанельПартииТоваровНаСкладах);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация. Операция не записана.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.Организация;
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПериодНачало) Тогда
		Предупреждение("Не указана дата начала переноса. Операция не записана.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.ПериодНачало;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПериодКонец) Тогда
		Предупреждение("Не указана дата окончания переноса. Операция не записана.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.ПериодКонец;
		Возврат;
	КонецЕсли;
	
	Для каждого Строка из ПартииТоваровНаСкладах Цикл
		Если НЕ ЗначениеЗаполнено(Строка.Период) Тогда
			Предупреждение("В строке № " + Строка.НомерСтроки + " не указан период. Операция не записана.",,"Партии товаров на складах");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УправлениеДоступностьюЭлементовФормы()
	
	Если НЕ Проведен Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		//ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
		
	Иначе
		// Запрет редактирования
		ЭлементыФормы.ПериодНачало.ТолькоПросмотр = Истина;
		ЭлементыФормы.ПериодКонец.ТолькоПросмотр = Истина;
		ЭлементыФормы.Организация.ТолькоПросмотр = Истина;
		ЭлементыФормы.КнопкаВыбораПериода.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УправлениеДоступностьюЭлементовФормы()

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	Иначе
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
	КонецЕсли;
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиПартииТоваровНаСкладах);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиПартииТоваровНаСкладах);

	УправлениеДоступностьюЭлементовФормы();

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ПериодНачало, ?(ПериодКонец='0001-01-01', ПериодКонец, КонецДня(ПериодКонец)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	ПериодНачало = НастройкаПериода.ПолучитьДатуНачала();
	ПериодКонец = НастройкаПериода.ПолучитьДатуОкончания();
КонецПроцедуры

Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	УправлениеДоступностьюЭлементовФормы();
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


Процедура ВыполнитьПереносПартий(Кнопка)
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация. Перенос проводок не выполнен.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.Организация;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПериодНачало) Тогда
		Предупреждение("Не указана дата начала переноса. Перенос проводок не выполнен.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.ПериодНачало;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПериодКонец) Тогда
		Предупреждение("Не указана дата окончания переноса. Перенос проводок не выполнен.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.ПериодКонец;
		Возврат;
	КонецЕсли;
	Если ПериодНачало > ПериодКонец Тогда
		Предупреждение("Дата начала переноса больше даты окончания. Перенос проводок не выполнен.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.ПериодНачало;
		Возврат;
	КонецЕсли;
	
	//Проверка операция переноса за выбранный период
	Запрос = Новый Запрос;
	Запрос.Текст = 
		//Проверка операция переноса за выбранный период
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПереносПартийМеждународный.Ссылка
	               |ИЗ
	               |	Документ.ПереносПартийМеждународный КАК ПереносПартийМеждународный
	               |
	               |ГДЕ
	               |	(ПереносПартийМеждународный.ПериодНачало МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ ПереносПартийМеждународный.ПериодКонец МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ ПереносПартийМеждународный.ПериодНачало < &ДатаНачала И ПереносПартийМеждународный.ПериодКонец > &ДатаНачала ИЛИ ПереносПартийМеждународный.ПериодНачало < &ДатаОкончания И ПереносПартийМеждународный.ПериодКонец > &ДатаОкончания) И
	               |	ПереносПартийМеждународный.Организация = &Организация И
	               |	ПереносПартийМеждународный.Ссылка <> &Ссылка";
				   
	Запрос.УстановитьПараметр("ДатаНачала", ПериодНачало);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодКонец);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Сообщить(Выборка.Ссылка);
	КонецЦикла;
	
	Если Выборка.Количество() > 0 Тогда
		Предупреждение("По выбранной организации и периоду уже имеются перенесенные партии. Перенос не выполнен.");
		Возврат;
	КонецЕсли;
	
	// Начало переноса
	
	//Партии товаров на складах:
	// Поступление за период по организации,
	// кроме поступления, сформированного процедурой списания партий
	
	ПартииТоваровНаСкладах.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ПартииБух.Период КАК Период,
	|	ПартииБух.Номенклатура,
	|	ПартииБух.СчетУчета,
	|	ПартииБух.Организация,
	|	ПартииБух.Склад,
	|	ПартииБух.ДокументОприходования,
	|	ПартииБух.ХарактеристикаНоменклатуры,
	|	ПартииБух.СерияНоменклатуры,
	|	ПартииБух.Заказ,
	|	ПартииБух.Качество,
	|	СУММА(ПартииБух.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА ПартииБух.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ВыпускПоОперацииСтоимость)
	|				ТОГДА 0
	|			ИНАЧЕ ПартииБух.Стоимость
	|		КОНЕЦ) КАК Стоимость
	|ИЗ
	|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет КАК ПартииБух
	|ГДЕ
	|	ПартииБух.Организация = &Организация
	|	И ПартииБух.Период МЕЖДУ &ПериодНачало И &ПериодКонец
	|	И ПартииБух.Активность
	|	И ПартииБух.ВидДвижения = &ВидДвижения
	|	И ((НЕ ПартииБух.СписаниеПартий)
	|			ИЛИ ПартииБух.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ВыпускПоОперацииСтоимость)
	|			ИЛИ ПартииБух.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ВыпускПродукцииФиксНаСклад))
	|	И ((НЕ ПартииБух.Количество = 0)
	|	  ИЛИ (НЕ ПартииБух.КодОперации = ЗНАЧЕНИЕ(Перечисление.КодыОперацийПартииТоваров.ВыпускПоОперацииСтоимость)))
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииБух.Период,
	|	ПартииБух.Номенклатура,
	|	ПартииБух.СчетУчета,
	|	ПартииБух.Организация,
	|	ПартииБух.Склад,
	|	ПартииБух.ДокументОприходования,
	|	ПартииБух.ХарактеристикаНоменклатуры,
	|	ПартииБух.СерияНоменклатуры,
	|	ПартииБух.Заказ,
	|	ПартииБух.Качество
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период";
	
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ПериодНачало", ПериодНачало);
	Запрос.УстановитьПараметр("ПериодКонец", ПериодКонец);
	Запрос.УстановитьПараметр("Активность", Истина);
	Запрос.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	ВидДБ = Перечисления.ВидыДвиженийБухгалтерии.Дебет;
	СчетаМСФО = Новый Соответствие;
	
	Пока Выборка.Следующий() Цикл
				
		Если НЕ (ТипЗнч(Выборка.ДокументОприходования)=Тип("ДокументСсылка.ВозвратПереданныхТоваров") ИЛИ
			ТипЗнч(Выборка.ДокументОприходования)=Тип("ДокументСсылка.ВозвратТоваровОтПокупателя")) Тогда
			
			СчетМУ = СчетаМСФО[Выборка.СчетУчета];
			ЕСли СчетМУ = Неопределено Тогда
				СтруктураСчетов = МеждународныйУчет.ПреобразоватьСчетаБУвСчетМСФО(Выборка.СчетУчета, Неопределено, Неопределено, Неопределено, Дата);	            
				СчетаМСФО[Выборка.СчетУчета] = СтруктураСчетов.Счет;
				СчетМУ = СтруктураСчетов.Счет;
			КонецЕсли;
						
			Если НЕ ЗначениеЗаполнено(СчетМУ) Тогда 
				Продолжить;
			КонецЕсли;
			СтрокаТП = ПартииТоваровНаСкладах.Добавить();
			СтрокаТП.Период = Выборка.Период;
			СтрокаТП.ВидДвижения = Перечисления.ВидыДвиженийПартий.Поступление;
			СтрокаТП.Номенклатура = Выборка.Номенклатура;
			СтрокаТП.Склад = Выборка.Склад;
			СтрокаТП.ДокументОприходования = Выборка.ДокументОприходования;
			СтрокаТП.ХарактеристикаНоменклатуры = Выборка.ХарактеристикаНоменклатуры;
			СтрокаТП.СерияНоменклатуры = Выборка.СерияНоменклатуры;
			СтрокаТП.Заказ = Выборка.Заказ;
			СтрокаТП.Качество = Выборка.Качество;
			СтрокаТП.СчетУчета = СчетМУ;
			СтрокаТП.Количество = Выборка.Количество;
			СтрокаТП.Стоимость = ПересчитатьСумму(Выборка.Стоимость, Выборка.Период);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПересчитатьСумму(Сумма, Период)
	Если мВалютаМеждународногоУчета = мВалютаРегламентированногоУчета Тогда
		Возврат Сумма;
	Иначе
		Возврат МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Сумма, мВалютаРегламентированногоУчета, мВалютаМеждународногоУчета, МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Период).Курс, МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаМеждународногоУчета, Период).Курс, МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Период).Кратность, МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаМеждународногоУчета, Период).Кратность);
	КонецЕсли;
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если (ПартииТоваровНаСкладах.Количество()>0) Тогда
		Если Вопрос("При смене организации необходимо отменить выполненный ранее перенос партий. Отменить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ПартииТоваровНаСкладах.Очистить();
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад т.ч. "ПартииТоваровНаСкладах"
//
Процедура ПартииТоваровНаСкладахСкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	Склад = ЭлементыФормы.ПартииТоваровНаСкладах.ТекущиеДанные.Склад;
	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры
 


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаМеждународногоУчета      = глЗначениеПеременной("ВалютаМеждународногоУчета");

мКолонкиПартииТоваровНаСкладах  = ЭлементыФормы.ПартииТоваровНаСкладах.Колонки;