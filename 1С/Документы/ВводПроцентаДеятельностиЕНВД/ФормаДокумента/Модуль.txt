////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента;     // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

Перем мГоловнаяОрганизация;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

Перем мСведенияОСчетах;  // для получения сведений о счетах на время работы формы
Перем мСведенияОСтатьяхЗатрат;  // для получения сведений о статьях затрат на время работы формы

// Переменные обработки ввода
Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//Процедура управляет отображением колонки "Месяц регистрации" и реквизита "Период"
Процедура ОбработатьИзменениеВариантаВводаДанных(ИзменятьПериод = Истина)

	ЭлементыФормы.РаботникиОрганизации.Колонки.МесяцРегистрации.Видимость = ВводДанныхПоПериодам;	
	ЭлементыФормы.Период.ТолькоПросмотр = ВводДанныхПоПериодам;
	
	Если ВводДанныхПоПериодам Тогда
		МесяцСтрока = "";
		Если ИзменятьПериод Тогда
			Период = Дата('00010101');
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Период) Тогда
			Период = НачалоМесяца(РабочаяДата);
		КонецЕсли;	
		МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(Период);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзменениеВариантаВводаДанных()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанеьДоляЕНВД);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

		Если НЕ ЗначениеЗаполнено(Период) Тогда
	 		// реквизит Период - месяц для которого вводим ЕНВД-проценты по работникам
	 		Период = НачалоМесяца(РабочаяДата);
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Заполним реквизит формы МесяцСтрока.
	Если Не ВводДанныхПоПериодам Тогда
	    МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(Период);
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("МесяцРегистрации");

	// Установить ограничение - изменять видимость колонок 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	ОбработатьИзменениеВариантаВводаДанных(Ложь);
	
	// Активизируем табличную часть
	ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.РаботникиОрганизации.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);	
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = ""; Реквизиты = "";
		
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			ВременнаяТаблица = ЗначениеВыбора.Данные.Выгрузить();
			
			Если ЗначениеВыбора.Свойство("Реквизиты",Реквизиты) Тогда
				РеквизитыТЧ = ЭтотОбъект.Метаданные().ТабличныеЧасти.РаботникиОрганизации.Реквизиты;
				
				Для Каждого Значение Из Реквизиты Цикл
					Если РеквизитыТЧ.Найти(Значение.Ключ) <> Неопределено Тогда
						ВременнаяТаблица.Колонки.Добавить(Значение.Ключ);
						ВременнаяТаблица.ЗаполнитьЗначения(Значение.Значение,Значение.Ключ);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			РаботникиОрганизации.Загрузить(ВременнаяТаблица);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(Период), , Организация, , , ,"ВводПроцентаДеятельностиЕНВД", Новый Структура("СчетДТ,Субконто1,Субконто2,Субконто3,СпособРаспределенияЗатрат,ПодпадаетПодЕНВД",ПланыСчетов.Хозрасчетный.ПустаяСсылка(),ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка(),ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка(),ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.ПустаяСсылка(),Справочники.СпособыРаспределенияЗатратНаВыпуск.ПустаяСсылка(),0), Период, Истина)
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ "КоманднаяПанеьДоляЕНВД"

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанеьДоляЕНВДПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Установим видимость реквизита "Приказ"
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, Период);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(Период);
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Период = ДобавитьМесяц(Период, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(Период);
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, Период, ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка ВводДанныхПоПериодам
//
Процедура ВводДанныхПоПериодамПриИзменении(Элемент)
	
	Если РаботникиОрганизации.Количество() > 0 и НЕ ВводДанныхПоПериодам Тогда
		
		//Проверим есть ли строки с разными периодами
		ПериодСтроки = "";
		НадоОчищатьТаблицуРаботников = Ложь;
		Для каждого СтрокаТЧ Из РаботникиОрганизации Цикл
			ПериодСтроки = ?(ПустаяСтрока(ПериодСтроки),СтрокаТЧ.МесяцРегистрации,ПериодСтроки);
			НадоОчищатьТаблицуРаботников = ПериодСтроки <> СтрокаТЧ.МесяцРегистрации;
			Если НадоОчищатьТаблицуРаботников Тогда
				Прервать;	
			КонецЕсли;
		КонецЦикла;
		
		Если НадоОчищатьТаблицуРаботников Тогда
			//
			ТекстВопроса = "В табличной части есть строки с разными месяцами регистрации доли ЕНВД. 
			|Перед изменением варианта ввода данных табличная часть будет очищена. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				ВводДанныхПоПериодам = Не ВводДанныхПоПериодам;
				Возврат;
			КонецЕсли;
			РаботникиОрганизации.Очистить();
			Период = НачалоМесяца(РабочаяДата);
		Иначе 
			Период = ?(ПустаяСтрока(ПериодСтроки),Период,ПериодСтроки);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработатьИзменениеВариантаВводаДанных();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Не ВводДанныхПоПериодам Тогда
		//проверяем дубли строк только при вводе данных за один период
		Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			НоваяСтрока = РаботникиОрганизации.Добавить();
			НоваяСтрока.Сотрудник = ВыбранноеЗначение;
			НоваяСтрока.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
		КонецЕсли;
	Иначе
		НоваяСтрока = РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник = ВыбранноеЗначение;
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
	КонецЕсли;

КонецПроцедуры // ТабличнаяЧастьОбработкаВыбора()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
	Для каждого Строка Из ОформленияСтрок Цикл
		
		ДанныеСтроки = Строка.ДанныеСтроки;
		
		СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетДт);
		СведенияОСтатьеЗатрат = БухгалтерскийУчет.ПолучитьСведенияОСтатьеЗатратПоСтроке(мСведенияОСтатьяхЗатрат, "", ДанныеСтроки);
		БухгалтерскийУчет.НазначитьВидимостьСубконто(Строка, "", СведенияОСчете, ?(СведенияОСтатьеЗатрат = Неопределено,Новый Структура("ХарактерЗатрат",Неопределено),СведенияОСтатьеЗатрат));
		
		СубконтоПодразделения = ДанныеСтроки.СчетДт.ВидыСубконто.Найти( ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Подразделения);
		Если СубконтоПодразделения <> Неопределено Тогда
			НомерСубконтоПодразделения = СубконтоПодразделения.НомерСтроки;
			Если Не ЗначениеЗаполнено(ДанныеСтроки["Субконто" + НомерСубконтоПодразделения]) Тогда
				Строка.Ячейки["Субконто" + НомерСубконтоПодразделения].Текст = "<подбирается автоматически>";	
			КонецЕсли;	
		КонецЕсли;
		
		СубконтоСтатьиЗатрат = ДанныеСтроки.СчетДт.ВидыСубконто.Найти(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.СтатьиЗатрат);
		Если (СубконтоСтатьиЗатрат <> Неопределено) и (СубконтоСтатьиЗатрат.НомерСтроки = 1) и (НЕ ЗначениеЗаполнено(ДанныеСтроки.Субконто1)) Тогда
			Строка.Ячейки.Субконто1.ОтметкаНезаполненного = Истина
		Иначе
			Строка.Ячейки.Субконто1.ОтметкаНезаполненного = Ложь
		КонецЕсли;	
		
	КонецЦикла;
	
КонецПроцедуры // РаботникиОрганизацииПриПолученииДанных()

Процедура РаботникиОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока и Не ВводДанныхПоПериодам и Не ОтменаРедактирования Тогда
		Элемент.ТекущиеДанные.МесяцРегистрации = Период;
	КонецЕсли;  
		
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ РаботникиОрганизации

Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиСотрудникНачалоВыбора()

Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ВводДанныхПоПериодам Тогда
		//проверяем дубли сторк только при вводе данных за один период
		СтрокиРаботников = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
		Если СтрокиРаботников.Количество() > 0 И Элемент.Значение <> ВыбранноеЗначение Тогда
			Предупреждение("В данном документе по одному сотруднику можно вводить только одну строку!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
		
	Элемент.Значение = ВыбранноеЗначение;
	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 1, Текст, Организация);
	
КонецПроцедуры // РаботникиСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 1, Текст, Организация);
	
КонецПроцедуры // РаботникиСотрудникОкончаниеВводаТекста()

Процедура РаботникиОрганизацииМесяцРегистрацииПриИзменении(Элемент)
	
	Элемент.Значение = НачалоМесяца(Элемент.Значение);
	
КонецПроцедуры


Процедура РаботникиОрганизацииСчетДтПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.РаботникиОрганизации, "", СведенияОСчете);
	
КонецПроцедуры

Процедура РаботникиОрганизацииСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
КонецПроцедуры

Процедура РаботникиОрганизацииСубконто1ПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.СчетДт);
		БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.РаботникиОрганизации, "", СведенияОСчете);
	КонецЕсли;

КонецПроцедуры

Процедура РаботникиОрганизацииСубконто2ПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.СчетДт);
		БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.РаботникиОрганизации, "", СведенияОСчете);
	КонецЕсли;

КонецПроцедуры

Процедура РаботникиОрганизацииСубконто3ПриИзменении(Элемент)
	
	Если Элемент.Значение = Неопределено Тогда
		СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.СчетДт);
		БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.РаботникиОрганизации, "", СведенияОСчете);
	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

 
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСведенияОСчетах = Новый Соответствие;
мСведенияОСтатьяхЗатрат = Новый Соответствие;

мОбработкаПодбораПоСтроке					= Ложь;
мТекстПодбораПоСтроке						= "";
мПоследнееЗначениеЭлементаПодбораПоСтроке	= Неопределено;