////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

Перем мТекущаяОрганизация;
Перем мТекущаяВалютаВзаиморасчетов;

// Хранит текущее значение учетной политики розничная торговля облагается ЕНВД
Перем мРозничнаяТорговляОблагаетсяЕНВД;

// Хранит текущее значение склада для контроля учетной политики розничная торговля облагается ЕНВД
Перем мТекущийСклад;

// Переменные для кэширования коллекций колонок табличных полей.
Перем мКолонкиТовары, мКолонкиУслуги;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Флаги наличия реквизитов и табличных частей
Перем мВедениеУчетаЗатратПоПроектам;

Перем мПрименениеУСН;
Перем мПрименениеУСНДоходы;

Перем мКорректировкаПоступленияДопРасходов;
Перем мОписаниеТипаНоменклатуры;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуги);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	Если ЗначениеЗаполнено(ДоговорКонтрагента)
		И ДоговорКонтрагента.УчетАгентскогоНДС
		И ДоговорКонтрагента.НалоговыйАгентПоОплате Тогда
		ЭлементыФормы.ГиперссылкаСчетФактура.Гиперссылка = Ложь;
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = "не требуется";
	Иначе
		ЭлементыФормы.ГиперссылкаСчетФактура.Гиперссылка = Истина;
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
		                                                 УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный"));
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	
	ПустойТипЦен = НЕ ЗначениеЗаполнено(ТипЦен);
	
	Если ТабличнаяЧасть = Товары Тогда
		
		Если ЗначениеЗаполнено(Контрагент) Тогда
			СписокЗапросов.Добавить("ПриходНоменклатураКонтрагента", "По номенклатуре контрагента");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			СписокЗапросов.Добавить("ПриходЦеныКонтрагента", "По ценам контрагента");
		КонецЕсли;
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СписокЗапросов.Добавить("РасходУслуги", "По услугам предприятия");
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
			СписокЗапросов.Добавить("ПриходЦеныУслуг", "По ценам и услугам контрагента");
		КонецЕсли;
	КонецЕсли;
	
	Возврат СписокЗапросов;
	
КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена               = Истина;
	ЕстьСерия              = Истина;
	Валюта                 = ВалютаДокумента;
	СпособЗаполненияЦен    = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	ПодбиратьУслуги        = Ложь;
	СкрыватьХарактеристику = Ложь;

	Если ТабличнаяЧасть = Товары Тогда
		Команда                = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти      = "Товары";
		
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		Команда                = "ПодборВТабличнуюЧастьУслуги";
		ЕстьСерия              = Ложь;
		ИмяТабличнойЧасти      = "Услуги";
		ПодбиратьУслуги        = Истина;
		СкрыватьХарактеристику = Истина;
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"              , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"   , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"          , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                 , Склад);
	СтруктураПараметровПодбора.Вставить("ТипЦен"                , ТипЦен);
	СтруктураПараметровПодбора.Вставить("Контрагент"            , Контрагент);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"    , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Организация"           , Организация);
	СтруктураПараметровПодбора.Вставить("Сделка"                , Сделка);

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"   , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"              , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"             , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"       , Валюта);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"       , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("СкрыватьХарактеристику", СкрыватьХарактеристику);
	СтруктураПараметровПодбора.Вставить("Заголовок"             , "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены, ЕстьСкладВТабличнойЧасти;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	
	Если мКорректировкаПоступленияДопРасходов Тогда
		// В этом случае изменять количество не следует
		Количество = 0;
	КонецЕсли;
	
	ЕстьСкладВТабличнойЧасти = ?(ТабличнаяЧасть = Услуги, Ложь, Истина);
	
	Если ТабличнаяЧасть = Товары И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И НЕ Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	Если ЕстьСкладВТабличнойЧасти
	   И ТабличнаяЧасть <> Услуги
	   И ЗначениеЗаполнено(Склад) Тогда
		СтруктураОтбора.Вставить("Склад", Склад);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		КонецЕсли;
		
	Иначе
		
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда
			
			СтрокаТабличнойЧасти.Количество       = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			СтрокаТабличнойЧасти.ОтражениеВУСН              = Перечисления.ОтражениеВУСН.Принимаются;
			
			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;
			
			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");
			
			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);
			
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			 
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			 
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			
			СтрокаТабличнойЧасти.Количество    = Количество;
			СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			
			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
			
		КонецЕсли;
		
	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	Если ТабличнаяЧасть <> Услуги Тогда
		ЗаполнитьСкладВСтрокеТабличнойЧастиТовары(СтрокаТабличнойЧасти);
	КонецЕсли;

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	ТабличнаяЧастьИмя = "Товары";
	// Установим текущую строку
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	// Установим текущую колонку
	Если ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"].Видимость Тогда
		ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];
	Иначе
		ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Сумма"];
	КонецЕсли;
	
	УчетСерийныхНомеров.ОбработкаПодбораНоменклатурыПоСерийномуНомеру(ЗначениеВыбора, СерийныеНомера,
	                                              ТабличнаяЧасть, СтрокаТабличнойЧасти,
	                                              мПараметрыСвязиСтрокТЧ,
	                                              ТабличнаяЧастьИмя,
	                                              ЭтотОбъект);
	
КонецПроцедуры // ОбработкаПодбора()

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")

	Если НЕ ЗначениеЗаполнено(РежимВызова) Тогда
		ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
			мРозничнаяТорговляОблагаетсяЕНВД = ПараметрыУчетнойПолитики.РозничнаяТорговляОблагаетсяЕНВД;
		Иначе
			мРозничнаяТорговляОблагаетсяЕНВД = Ложь;
		КонецЕсли;
		
		мТекущийСклад = Склад;
		
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
		
		ЗаполнениеДокументов.ПриИзмененииРозничнаяТорговляОблагаетсяЕНВД(ЭтотОбъект, 
			мВалютаРегламентированногоУчета,
			СпособЗаполненияЦен,
			"Покупка",
			РежимВызова,
			"Товары",
			мРозничнаяТорговляОблагаетсяЕНВД,
			мТекущийСклад);
			
		УстановитьВидимость();
		
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

// Процедура установливает доступность полей продукция таб. поля "Услуги"
//
Процедура УстановитьДоступностьПродукции(ТекСтрока)
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Флаг = Истина;
	Если Не ТекСтрока.СтатьяЗатрат.Пустая()
		  И ТекСтрока.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		Флаг = Ложь;
	Иначе
		Если ЗначениеЗаполнено(ТекСтрока.Продукция)
		 ИЛИ ЗначениеЗаполнено(ТекСтрока.ХарактеристикаПродукции)
		 ИЛИ ЗначениеЗаполнено(ТекСтрока.СерияПродукции) Тогда
		 	ТекСтрока.Продукция               = "";
		 	ТекСтрока.ХарактеристикаПродукции = "";
			ТекСтрока.СерияПродукции          = "";
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.Услуги.Колонки.Продукция              .ТолькоПросмотр = Флаг;
	ЭлементыФормы.Услуги.Колонки.ХарактеристикаПродукции.ТолькоПросмотр = Флаг;
	ЭлементыФормы.Услуги.Колонки.СерияПродукции         .ТолькоПросмотр = Флаг;
	
КонецПроцедуры // УстановитьДоступностьПродукции()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	
	ЗаполнитьТекстИсправляемыйДокументПоступления();
	
	ОтражатьВНалоговомУчетеУСН = (мПрименениеУСН И ОтражатьВНалоговомУчете И (НЕ мПрименениеУСНДоходы));
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	
	ЭтоКомиссия = (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	ИсправлениеКорректировки = ЗначениеЗаполнено(ИсправляемыйДокументПоступления) 
								И (ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")) 
								И (ИсправляемыйДокументПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
	
	СвойстваСклада = ПолучитьСвойстваСкладаВТабличнойЧасти();
	СвойстваЗаказа = ПолучитьСвойстваЗаказаПоставщикуВТабличнойЧасти();
	
	// Отображение реквизитов шапки документа
	ЭлементыФормы.КорректироватьБУиНУ.Доступность = ДоступнаКорректировкаБУиНУ();
	
	УстановитьСвойствоКолонокТЧ(
		"СтавкаНДС, СуммаНДС, Всего, СуммаНДСДоИзменения, ВсегоДоИзменения",
		"Видимость",
		УчитыватьНДС);
		
	УстановитьСвойствоКолонокТЧ(
		"Подразделение",
		"Видимость",
		КорректироватьБУиНУ И ОтражатьВУправленческомУчете);
		
	УстановитьСвойствоКолонокТЧ(
		"ПодразделениеОрганизации",
		"Видимость",
		КорректироватьБУиНУ И ОтражатьВБухгалтерскомУчете);
		
	УстановитьСвойствоКолонокТЧ(
		"Субконто1, Субконто2, Субконто3",
		"Видимость",
		КорректироватьБУиНУ И ОтражатьВБухгалтерскомУчете);
		
	УстановитьСвойствоКолонокТЧ(
		"СубконтоНУ1, СубконтоНУ2, СубконтоНУ3",
		"Видимость",
		КорректироватьБУиНУ И ОтражатьВНалоговомУчетеНП);
		
	УстановитьСвойствоКолонокТЧ(
		"КоличествоДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ЦенаДоКорректировки, ВсегоДоКорректировки",
		"Видимость",
		ИсправлениеКорректировки);
		
	УстановитьСвойствоКолонокТЧ(
		"СтавкаНДСДоИзменения",
		"Видимость",
		УчитыватьНДС И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки);
		
	УстановитьСвойствоКолонокТЧ(
		"ОтражениеВУСН",
		"Видимость",
		ОтражатьВНалоговомУчетеУСН);
		
	УстановитьСвойствоКолонокТЧ(
		"Склад",
		"Видимость",
		СвойстваСклада.ВидимостьСклада);
		
	УстановитьСвойствоКолонокТЧ(
		"ЗаказПоставщику",
		"Видимость",
		СвойстваЗаказа.ВидимостьЗаказа);
		
	УстановитьСвойствоКолонокТЧ(
		"Проект",
		"Видимость",
		КорректироватьБУиНУ И мУказаниеПроектовВТабличнойЧастиДокументов И мВедениеУчетаЗатратПоПроектам);
		
	УстановитьСвойствоКолонокТЧ(
		"Заказ, СтатьяЗатрат, ХарактерЗатрат, ВидАналитики, Аналитика, ВидАналитикиДоп",
		"Видимость",
		КорректироватьБУиНУ);
	
	УстановитьСвойствоКолонокТЧ(
		"ДокументПартии",
		"Видимость",
		мКорректировкаПоступленияДопРасходов);
		
	Если КорректироватьБУиНУ И мКорректировкаПоступленияДопРасходов Тогда
		
		УстановитьСвойствоКолонокТЧ(
			"Количество, КоличествоДоИзменения, КоличествоДоКорректировки, Цена, ЦенаДоизменения, ЦенаДоКорректировки",
			"Видимость",
			Ложь);
	Иначе
		
		УстановитьСвойствоКолонокТЧ(
			"Количество, КоличествоДоИзменения, Цена, ЦенаДоизменения",
			"Видимость",
			Истина);
			
	КонецЕсли;
	
	// Установим доступность колонок табличных частей
	УстановитьСвойствоКолонокТЧ(
		"КоличествоДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, СтавкаНДСДоИзменения, ЦенаДоИзменения, СодержаниеДоИзменения,
		|КоличествоДоКорректировки, СуммаДоКорректировки, СуммаНДСДоКорректировки, ЦенаДоКорректировки",
		"ТолькоПросмотр",
		КорректироватьБУиНУ);
		
	// Установим положение колонок табличных частей
	УстановитьСвойствоКолонокТЧ(
		"КоличествоДоИзменения, СуммаДоИзменения, СуммаНДСДоИзменения, ЦенаДоИзменения, ВсегоДоИзменения",
		"Положение",
		?(ИсправлениеКорректировки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка));
		
	УстановитьСвойствоКолонокТЧ(
		"СтавкаНДС",
		"Положение",
		?(ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка));
		
	// Установим АвтоОтметкуНезаполненного колонок табличных частей 
	УстановитьСвойствоКолонокТЧ(
		"Номенклатура, Содержание",
		"АвтоОтметкаНезаполненного",
		КорректироватьБУиНУ);
		
	УстановитьСвойствоКолонокТЧ(
		"Склад",
		"АвтоотметкаНеЗаполненного",
		СвойстваСклада.ОбязательноеЗаполнениеСклада);
		
	УстановитьСвойствоКолонокТЧ(
		"ЗаказПоставщику",
		"АвтоотметкаНеЗаполненного",
		СвойстваЗаказа.ОбязательноеЗаполнениеЗаказа);
		
	// Установим видимость ТЧ "Услуги"
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = ВозможнаКорректировкаУслуг();
	
	// Установим видимость счетов
	Если ЭтоКомиссия Тогда
		ВидимостьСчетов = Ложь;
	Иначе
		ВидимостьСчетов = Истина;
	КонецЕсли;
	
	ОписаниеТабличныхЧастей = Новый Структура();
	ОписаниеТабличныхЧастей.Вставить("Товары", мКолонкиТовары);
	ОписаниеТабличныхЧастей.Вставить("Услуги", мКолонкиУслуги);
	
	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(Дата, Метаданные().Имя, 
		ЭлементыФормы, 
		ОписаниеТабличныхЧастей, 
		Неопределено, // Не управляем видимостью
		ОтражатьВБухгалтерскомУчете, 
		ОтражатьВНалоговомУчетеНП, 
		ВидимостьСчетов И УчитыватьНДС И (НЕ НДСВключенВСтоимость));
	
	// Отображение кнопок командных панелей
	ДоступностьКнопокПанелиТовары = мОписаниеТипаНоменклатуры.СодержитТип(Тип("СправочникСсылка.Номенклатура"));
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ДействиеПодбор.Доступность = ДоступностьКнопокПанелиТовары;
	Если ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Найти("СерийныеНомера") <> Неопределено Тогда
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.СерийныеНомера.Доступность = ДоступностьКнопокПанелиТовары;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьНДСДокумента(ЭтотОбъект));
	
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Процедура управляет доступностью колонок субконто в табличной части услуги
Процедура УстановитьДоступностьСубконто(СтрокаТЧ)

	Колонки = ЭлементыФормы.Услуги.Колонки;
	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;

	Если СтрокаТЧ = неопределено Тогда
		Возврат;
	КонецЕсли;

	ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(СтрокаТЧ.СтатьяЗатрат);

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетЗатрат,
							 ТекущиеДанные.Субконто1,
							 Колонки.Субконто1,
							 ТекущиеДанные.Субконто2,
							 Колонки.Субконто2,
							 ТекущиеДанные.Субконто3,
							 Колонки.Субконто3,
							 Колонки.СчетЗатрат,
							 Ложь);
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетЗатратНУ,
							 ТекущиеДанные.СубконтоНУ1,
							 Колонки.СубконтоНУ1,
							 ТекущиеДанные.СубконтоНУ2,
							 Колонки.СубконтоНУ2,
							 ТекущиеДанные.СубконтоНУ3,
							 Колонки.СубконтоНУ3,
							 Колонки.СчетЗатратНУ,
							 Ложь);

КонецПроцедуры // УстановитьДоступностьСубконто()

// Процедура выполняет необходимые действия при изменении количества в ТЧ.
//
Процедура ПриИзмененииКоличестваТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если КорректироватьБУиНУ И НЕ ЗначениеЗаполнено(СуффиксИмениРеквизита) Тогда // изменен реквизит Количество
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	
	// Рассчитать реквизиты табличной части.
	ПриИзмененииЦеныТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита);
	
КонецПроцедуры // ПриИзмененииКоличестваТЧ()

// Процедура выполняет необходимые действия при изменении цены в ТЧ.
//
Процедура ПриИзмененииЦеныТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита] = 
		СтрокаТабличнойЧасти["Цена" + СуффиксИмениРеквизита] * СтрокаТабличнойЧасти["Количество" + СуффиксИмениРеквизита];
	
	СтрокаТабличнойЧасти["СуммаНДС" + СуффиксИмениРеквизита] = 
		УчетНДС.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита],
			УчитыватьНДС,
			СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(
				ПолучитьСтавкуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуффиксИмениРеквизита)));
	
КонецПроцедуры // ПриИзмененииЦеныТЧ()

// Процедура выполняет необходимые действия при изменении ставки НДС в ТЧ.
//
Процедура ПриИзмененииСтавкиНДСТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(СуффиксИмениРеквизита) Тогда // изменет реквизит СтавкаНДС
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	Иначе
		СтрокаТабличнойЧасти.СуммаНДСДоИзменения =
			УчетНДС.РассчитатьСуммуНДС(
				СтрокаТабличнойЧасти.СуммаДоИзменения,
				УчитыватьНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(
					СтрокаТабличнойЧасти.СтавкаНДСДоИзменения));
		СтрокаТабличнойЧасти.СуммаНДСДоКорректировки =
			УчетНДС.РассчитатьСуммуНДС(
				СтрокаТабличнойЧасти.СуммаДоКорректировки,
				УчитыватьНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(
					СтрокаТабличнойЧасти.СтавкаНДСДоИзменения));
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСтавкиНДСТЧ()

// Процедура выполняет необходимые действия при изменении суммы в ТЧ.
//
Процедура ПриИзмененииСуммыТЧ(Элемент, ИмяТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	СтрокаТабличнойЧасти["Цена" + СуффиксИмениРеквизита] =
		?(СтрокаТабличнойЧасти["Количество" + СуффиксИмениРеквизита] = 0,
			0,
			СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита] /
			СтрокаТабличнойЧасти["Количество" + СуффиксИмениРеквизита]);
	
	СтрокаТабличнойЧасти["СуммаНДС" + СуффиксИмениРеквизита] = 
		УчетНДС.РассчитатьСуммуНДС(
			СтрокаТабличнойЧасти["Сумма" + СуффиксИмениРеквизита],
			УчитыватьНДС,
			СуммаВключаетНДС,
			УчетНДС.ПолучитьСтавкуНДС(
				ПолучитьСтавкуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуффиксИмениРеквизита)));
	
КонецПроцедуры // ПриИзмененииСуммыТЧ()

// Процедура выполняет необходимые действия перед началом редактирования строки ТЧ.
//
Процедура ПриНачалеРедактированияСтрокиТЧ(Элемент, ИмяТабличнойЧасти, НоваяСтрока)
	
	Если НЕ НоваяСтрока Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ЭлементыФормы[ИмяТабличнойЧасти].ТекущиеДанные;
	
	СтрокаТабличнойЧасти.ЕстьВДокументеПоступления = Ложь;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
		И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		
		СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
		
	КонецЕсли;
	
	Если КорректироватьБУиНУ Тогда
		
		Если СтрокаТабличнойЧасти.Номенклатура = Неопределено Тогда
			СтрокаТабличнойЧасти.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
		КонецЕсли;
		
		СтрокаТабличнойЧасти.КоличествоДоКорректировки 	= 0;
		СтрокаТабличнойЧасти.ЦенаДоКорректировки 		= 0;
		СтрокаТабличнойЧасти.СуммаДоКорректировки 		= 0;
		СтрокаТабличнойЧасти.СуммаНДСДоКорректировки 	= 0;
		
		СтрокаТабличнойЧасти.КоличествоДоИзменения 		= 0;
		СтрокаТабличнойЧасти.ЦенаДоИзменения 			= 0;
		СтрокаТабличнойЧасти.СуммаДоИзменения 			= 0;
		СтрокаТабличнойЧасти.СуммаНДСДоИзменения 		= 0;
		СтрокаТабличнойЧасти.СтавкаНДСДоИзменения 		= Перечисления.СтавкиНДС.ПустаяСсылка();
		
	КонецЕсли;
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		
		СтрокаТабличнойЧасти.Номенклатура = мОписаниеТипаНоменклатуры.ПривестиЗначение(СтрокаТабличнойЧасти.Номенклатура);
		
		ЗаполнитьСкладВСтрокеТабличнойЧастиТовары(СтрокаТабличнойЧасти);
		
		Элемент.ТекущиеДанные.КлючСвязи  = 0;
		
	КонецЕсли;
	
КонецПроцедуры // ПриНачалеРедактированияСтрокиТЧ()

// Функция возвращает поле строки ТЧ, содержащее ставку НДС
//
Функция ПолучитьСтавкуНДССтрокиТабличнойЧасти(СтрокаТабличнойЧасти, СуффиксИмениРеквизита = "")
	
	Возврат
		?(ЗначениеЗаполнено(СуффиксИмениРеквизита)
			И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.ИсправлениеОшибки,
				СтрокаТабличнойЧасти.СтавкаНДСДоИзменения,
				СтрокаТабличнойЧасти.СтавкаНДС);
	
КонецФункции

// Процедура выполняет действия, связанные с изменением организации
//
Процедура ПриИзмененииОрганизации()
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ПриИзмененииОблагаетсяЕНВД("Организация");
	
	мТекущаяОрганизация = Организация;
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура устанавливает свойство ячеек оформления строки табличного поля
//
Процедура УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки, ИменаЯчеек, ИмяСвойства, ЗначениеСвойства)
	
	СтруктураКолонок = Новый Структура(ИменаЯчеек);
	
	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
		Если ОформлениеСтроки.Ячейки.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			ОформлениеСтроки.Ячейки[КлючИЗначение.Ключ][ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает свойство колонок табличного поля
// 
Процедура УстановитьСвойствоКолонокТЧ(ИменаКолонок, ИмяСвойства, ЗначениеСвойства)
	
	СтруктураКолонок = Новый Структура(ИменаКолонок);
	
	Для Каждого КлючИЗначение Из СтруктураКолонок Цикл
		Если мКолонкиТовары.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			мКолонкиТовары[КлючИЗначение.Ключ][ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
		Если мКолонкиУслуги.Найти(КлючИЗначение.Ключ) <> Неопределено Тогда
			мКолонкиУслуги[КлючИЗначение.Ключ][ИмяСвойства] = ЗначениеСвойства;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет необходимые действия при получении данных строк ТЧ.
//
Процедура ПриПолученииДанныхСтрокиТЧ(Элемент, ИмяТабличнойЧасти, ОформленияСтрок)
	
	Если ИмяТабличнойЧасти = "Товары" Тогда
		мКолонки = мКолонкиТовары;
	Иначе
		мКолонки = мКолонкиУслуги;
	КонецЕсли;
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если мКолонки.ВсегоДоКорректировки.Видимость Тогда
			ТекСумма = ДанныеСтроки.СуммаДоКорректировки + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДСДоКорректировки);
			ОформлениеСтроки.Ячейки.ВсегоДоКорректировки.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
		КонецЕсли;
		Если мКолонки.ВсегоДоИзменения.Видимость Тогда
			ТекСумма = ДанныеСтроки.СуммаДоИзменения + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДСДоИзменения);
			ОформлениеСтроки.Ячейки.ВсегоДоИзменения.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
		КонецЕсли;
		Если мКолонки.Всего.Видимость Тогда
			ТекСумма = ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);
			ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
		КонецЕсли;
		
		ЭтоНоменклатура = (ТипЗнч(ДанныеСтроки.Номенклатура) = Тип("СправочникСсылка.Номенклатура"));
		
		УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки,
			"Номенклатура, СчетУчетаБУ, СчетУчетаНУ, СчетУчетаНДС, ОтражениеВУСН, Склад, Заказ, ЗаказПоставщику,
			|СчетЗатрат, Субконто1, Субконто2, Субконто3, СчетЗатратНУ, СубконтоНУ1, СубконтоНУ2, СубконтоНУ3,
			|НоменклатурнаяГруппа, Подразделение, ПодразделениеОрганизации, СтатьяЗатрат, ХарактерЗатрат, ОбъектСтроительства,
			|СпособРаспределенияЗатратНаВыпуск, СпособСтроительства, Проект, Продукция, ХарактеристикаПродукции, СерияПродукции,
			|Заказ, ЗаказПоставщику, ДокументПартии",
			"ТолькоПросмотр",
			ДанныеСтроки.ЕстьВДокументеПоступления И КорректироватьБУиНУ);
			
		УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки,
			"ХарактеристикаНоменклатуры,СерияНоменклатуры,Единица,ЕдиницаМест,КоличествоМест",
			"ТолькоПросмотр",
			(ДанныеСтроки.ЕстьВДокументеПоступления И КорректироватьБУиНУ) ИЛИ (НЕ ЭтоНоменклатура));
			
		УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки,
			"СтавкаНДС",
			"ТолькоПросмотр",
			(ДанныеСтроки.ЕстьВДокументеПоступления И КорректироватьБУиНУ) 
				И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение);
				
		УстановитьСвойствоЯчеекСтрокиТЧ(
			ОформлениеСтроки,
			"Количество",
			"ОтметкаНезаполненного",
			КорректироватьБУиНУ И НЕ ДанныеСтроки.ЕстьВДокументеПоступления И НЕ ЗначениеЗаполнено(ДанныеСтроки.Количество));
			
		УстановитьСвойствоЯчеекСтрокиТЧ(
			ОформлениеСтроки,
			"Сумма",
			"ОтметкаНезаполненного",
			КорректироватьБУиНУ И НЕ ДанныеСтроки.ЕстьВДокументеПоступления И НЕ ЗначениеЗаполнено(ДанныеСтроки.Сумма));
			
		Если ИмяТабличнойЧасти = "Товары" Тогда
			
			Если ЭтоНоменклатура Тогда
				РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
				РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
				Если мКолонкиТовары.НомерГТД.Видимость Тогда
					ОформлениеСтроки.Ячейки.НомерГТД.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.НомерГТД);
				КонецЕсли;
				Если мКолонкиТовары.СтранаПроисхождения.Видимость Тогда
					ОформлениеСтроки.Ячейки.СтранаПроисхождения.УстановитьТекст(ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения);
				КонецЕсли;
			КонецЕсли;
			
			УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки,
				"Единица, Коэффициент",
				"ОтметкаНезаполненного",
				ЭтоНоменклатура И НЕ ЗначениеЗаполнено(ДанныеСтроки.ЕдиницаИзмерения));
				
			УстановитьСвойствоЯчеекСтрокиТЧ(ОформлениеСтроки,
				"Количество, Цена",
				"ТолькоПросмотр",
				КорректироватьБУиНУ И мКорректировкаПоступленияДопРасходов);
				
		Иначе
			
			Если ЭлементыФормы.Услуги.Колонки.ХарактерЗатрат.Видимость Тогда
				ОформлениеСтроки.Ячейки.ХарактерЗатрат.ОтображатьТекст = Истина;
				ОформлениеСтроки.Ячейки.ХарактерЗатрат.Текст = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
			КонецЕсли;
			
			// Выполним настройку ячеек с аналитикой
			УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(
				?(КорректироватьБУиНУ, ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат, Перечисления.ХарактерЗатрат.ПустаяСсылка()), 
				?(КорректироватьБУиНУ, ДанныеСтроки.Продукция, Справочники.Номенклатура.ПустаяСсылка()), 
				?(КорректироватьБУиНУ, ДанныеСтроки.СчетЗатрат, Неопределено), 
				?(КорректироватьБУиНУ, ДанныеСтроки.СчетЗатратНУ, Неопределено), 
				ОформлениеСтроки, 
				КорректироватьБУиНУ И ОтражатьВУправленческомУчете, 
				КорректироватьБУиНУ И ОтражатьВБухгалтерскомУчете, 
				КорректироватьБУиНУ И ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПриПолученииДанныхСтрокиТЧ()

// Процедура заполняет текст про исправляемый документ
//
Процедура ЗаполнитьТекстИсправляемыйДокументПоступления()
	
	Если ЗначениеЗаполнено(ИсправляемыйДокументПоступления) Тогда
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументПоступления.Гиперссылка = Истина;
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументПоступления.Заголовок = Строка(ИсправляемыйДокументПоступления)
	Иначе
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументПоступления.Гиперссылка = Ложь;
		ЭлементыФормы.ГиперссылкаИсправляемыйДокументПоступления.Заголовок = "Не указан";
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка", ПараметрОбъектКопирования); 
		
		Если ЗначениеЗаполнено(ДокументПоступления) Тогда
			ОтражатьВУправленческомУчете = ДокументПоступления.ОтражатьВУправленческомУчете;
			ОтражатьВБухгалтерскомУчете  = ДокументПоступления.ОтражатьВБухгалтерскомУчете;
			ОтражатьВНалоговомУчете      = ДокументПоступления.ОтражатьВНалоговомУчете;
		КонецЕсли;
		
	КонецЕсли;
	
	мДокументПоступленияСсылка = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
	мКорректировкаПоступленияДопРасходов = (ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	мОписаниеТипаНоменклатуры = ПолучитьОписаниеТипаНоменклатурыПоОснованию();
	
	СтруктураКолонок = Новый Структура();
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
		ВидОперации.Метаданные().ЗначенияПеречисления,
		Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	// Определить счет-фактуру, введенный на основании этого документа, если такой 
	// счет-фактура существует.
	ЗаполнитьТекстПроСчетФактуру();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента	= Дата;
	мТекущаяОрганизация		= Организация; 
	мПрименениеУСН			= НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы	= НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	ПриИзмененииОблагаетсяЕНВД();
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	УчетСерийныхНомеров.УстановитьВидимостьКнопкиВводаСерийныхНомеров(ЭлементыФормы.КоманднаяПанельТовары);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	
	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);
	ЭлементыФормы.ИнфНадписьКурса.Заголовок = "   ( " + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                           КурсВзаиморасчетов,
	                                                                                           КратностьВзаиморасчетов,
	                                                                                           мВалютаРегламентированногоУчета) + " )";
	
	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Товары.Заголовок = "Товары (" + ДокументОбъект.Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Перем Команда;
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		
		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
// Обработчик уставливается динамически методом "Действие"
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)
	
	ПредыдущийВидОперации = ВидОперации; //Сохраним пред. вид операции для его сравнения с новым
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации[Кнопка.Имя];
	КонецЕсли;
	
	// Если операция не поменялась то выходим
	Если ПредыдущийВидОперации = ВидОперации Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИсправляемыйДокументПоступления) И (ТипЗнч(ИсправляемыйДокументПоступления) = Тип("ДокументСсылка.КорректировкаПоступления")) 
		И (ИсправляемыйДокументПоступления.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение)
		И ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		ВидОперации = ПредыдущийВидОперации;
		Предупреждение("Нельзя вводить документ на согласованную корректировку на основании другой согласованной корректировки!");
		
		Возврат;
	КонецЕсли;
		
    Если ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		ИсправляемыйДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Истина);
		
		Для Каждого СтрокаТЧ из Товары Цикл
			Если СтрокаТЧ.ЕстьВДокументеПоступления И СтрокаТЧ.СтавкаНДС <> СтрокаТЧ.СтавкаНДСДоИзменения Тогда
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.СтавкаНДСДоИзменения;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого СтрокаТЧ из Услуги Цикл
			
			Если СтрокаТЧ.ЕстьВДокументеПоступления И СтрокаТЧ.СтавкаНДС <> СтрокаТЧ.СтавкаНДСДоИзменения Тогда
				СтрокаТЧ.СтавкаНДС = СтрокаТЧ.СтавкаНДСДоИзменения;
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		ИсправляемыйДокументПоступления = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ДокументПоступления, Ложь);
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)
	
	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);
	
КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)
	
	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)
	
	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	Если мИспользоватьРасширеннуюАналитику
		И мДатаНачалаИспользованияРасширеннойАналитики <= мТекущаяДатаДокумента
		И мДатаНачалаИспользованияРасширеннойАналитики > Дата Тогда
		 
		// Документ переносится из периода использования режима расширенной аналитики в период использования партионного учета
		Если КорректироватьБУиНУ Тогда
			
			Результат = Вопрос("В выбранном периоде доступна только корректировка НДС.
				|Продолжить?", РежимДиалогаВопрос.ДаНет,,, "Изменение даты документа");
			
			Если Результат <> КодВозвратаДиалога.Да Тогда
				// Возвращаем дату до изменения
				Дата = мТекущаяДатаДокумента;
				Возврат;
			КонецЕсли;
			
			КорректироватьБУиНУ = Ложь;
			
		КонецЕсли;
		
		УстановитьВидимость();
		
	ИначеЕсли мИспользоватьРасширеннуюАналитику
		И мДатаНачалаИспользованияРасширеннойАналитики > мТекущаяДатаДокумента
		И мДатаНачалаИспользованияРасширеннойАналитики <= Дата Тогда
		 
		// Документ переносится из периода использования режима партионного учета в период использования расширенной аналитики
		УстановитьВидимость();
		
	КонецЕсли;

	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	мПрименениеУСН 		  = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы  = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДокументПоступления)
		И ЗначениеЗаполнено(Организация)
		И Организация <> ДокументПоступления.Организация Тогда
		
		Если Вопрос("Организация не соответствует организации основания. Основание будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Организация = мТекущаяОрганизация;
			Возврат;
		КонецЕсли;
		
		ДокументПоступления = Неопределено;
		
	КонецЕсли;
	
	ПриИзмененииОрганизации();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ДокументПоступления.
//
Процедура ДокументПоступленияПриИзменении(Элемент)
	
	КорректироватьБУиНУ = ДоступнаКорректировкаБУиНУ();
	ЗаполнитьСвойстваШапки();
	
	Если КорректироватьБУиНУ И ЗначениеЗаполнено(ДокументПоступления) Тогда
		Если Вопрос("Перезаполнить документ по указанному основанию?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаполнитьПоДокументу();
		Иначе
			КорректироватьБУиНУ = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	мКорректировкаПоступленияДопРасходов = (ТипЗнч(мДокументПоступленияСсылка) = Тип("ДокументСсылка.ПоступлениеДопРасходов"));
	мОписаниеТипаНоменклатуры = ПолучитьОписаниеТипаНоменклатурыПоОснованию();
	
	ПриИзмененииОрганизации();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ДокументПоступления.
//
Процедура ДокументПоступленияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Отбор = Новый Структура();
	
	Если ЗначениеЗаполнено(Организация) Тогда 
		Отбор.Вставить("Организация", Организация);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "");
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода ДокументПоступления.
//
Процедура ДокументПоступленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.СчетФактураПолученный") И
		(НЕ ЗначениеЗаполнено(ВыбранноеЗначение.ДокументОснование) 
		ИЛИ ТипЗнч(ВыбранноеЗначение.ДокументОснование) <> Тип("ДокументСсылка.АвансовыйОтчет")
		ИЛИ ВыбранноеЗначение.ВидСчетаФактуры = Перечисления.ВидСчетаФактурыПолученного.НаАванс) Тогда
		
		СтандартнаяОбработка = Ложь;
		Предупреждение("В качестве основания можно выбрать только счет-фактуру по поступлению, введенный на основании документа ""Авансовый отчет""!");
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = УчетНДС.ПолучитьИсправляемыйДокументПоступления(ВыбранноеЗначение, Ложь);
	
	//Проверим ввод корректировки на основании корректировки
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КорректировкаПоступления") И
		ДокументСсылка.ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение И
		ВидОперации = Перечисления.ВидыОперацийИсправленияПоступленияРеализации.СогласованноеИзменение Тогда
		
		СтандартнаяОбработка = Ложь;
		Предупреждение("Нельзя вводить документ на согласованную корректировку на основании другой согласованной корректировки!");
		Возврат;
	КонецЕсли;
	
	ПоследнийДокумент = ПолучитьПоследнийКорректирующийДокумент(ДокументСсылка);
	Если ВыбранноеЗначение <> ПоследнийДокумент Тогда
		Если Вопрос("Для указанного документа существуют более поздние корректировки.
					|Использовать последнюю введенную корректировку?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ВыбранноеЗначение = ПоследнийДокумент;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ИсправляемыйДокументПоступленияНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ИсправляемыйДокументПоступления) Тогда
		ИсправляемыйДокументПоступления.ПолучитьФорму().Открыть();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)
	
	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");
	
КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура - обработчик события "ПриИзменении" переключателя КорректироватьБУиНУ
Процедура КорректироватьБУиНУПриИзменении(Элемент)
	
	Если КорректироватьБУиНУ И ЗначениеЗаполнено(ДокументПоступления) Тогда
		Если Вопрос("Перезаполнить документ по основанию?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			ЗаполнитьСвойстваШапки();
			ЗаполнитьПоДокументу();
		Иначе
			КорректироватьБУиНУ = Ложь;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	мОписаниеТипаНоменклатуры = ПолучитьОписаниеТипаНоменклатурыПоОснованию();
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриПолученииДанных" табличной части "Товары".
//
Процедура ТоварыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхСтрокиТЧ(Элемент, "Товары", ОформленияСтрок);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ПриНачалеРедактированияСтрокиТЧ(Элемент, "Товары", НоваяСтрока);
	
КонецПроцедуры // ТоварыПриНачалеРедактирования

// Процедура - обработчик события "ПередУдалением" табличной части "Товары"
//
Процедура ТоварыПередУдалением(Элемент, Отказ)
	
	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТЧ.ЕстьВДокументеПоступления И КорректироватьБУиНУ Тогда
		Отказ = Истина;
		Сообщить("Для удаления строки исходного документа необходимо очистить все суммовые и количественные показатели.");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСправочникаСоставногоТипа(ЭтотОбъект, 
		ЭтаФорма, 
		Элемент, 
		СтандартнаяОбработка,
		Новый Структура(),
		"Товары",
		мОписаниеТипаНоменклатуры);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		// Заполняем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 
		
		СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 
		
		
		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	
	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.Номенклатура = Элемент.Значение.Владелец;
	КонецЕсли;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Товары");
	
КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ЗаказПокупателя
// в строке табличной части "Товары".
//
Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Товары", ДопПараметры);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные)
	
КонецПроцедуры // ТоварыСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" поля табличной части "Товары"
//
Процедура ТоварыПослеУдаления(Элемент)
	
	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;
	
КонецПроцедуры //ТоварыПослеУдаления()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Склад"
// в строке табличной части "Товары".
Процедура ТоварыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПоставщику"
// в строке табличной части "Товары".
Процедура ТоварыЗаказПоставщикуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = УправлениеЗаказами.ПолучитьСтруктуруОтбораПоЗаказам(ЭтотОбъект);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							   "Расход", "ЗаказПоставщику",СтруктураОтбора);	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" табличной части "Товары"
//
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлементыФормы.Товары.ТекущаяСтрока.СерияНоменклатуры = ВыбранноеЗначение;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЗаказПоставщику
//
Процедура ТоварыЗаказПоставщикуПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	ЗаполнитьСкладВСтрокеТабличнойЧастиТовары(СтрокаТабличнойЧасти);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода КоличествоДоКорректировки
//
Процедура ТоварыКоличествоДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Товары", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода КоличествоДоИзменения
//
Процедура ТоварыКоличествоДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЦенаДоКорректировки
//
Процедура ТоварыЦенаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЦенаДоИзменения
//
Процедура ТоварыЦенаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СуммаДоКорректировки
//
Процедура ТоварыСуммаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Товары", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СуммаДоИзменения
//
Процедура ТоварыСуммаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкаНДСДоИзменения
//
Процедура ТоварыСтавкаНДСДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Товары", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ДокументПартии
//
Процедура ТоварыДокументПартииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Новый Структура(), "Товары");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриПолученииДанных" поля табличной части "Услуги"
//
Процедура УслугиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхСтрокиТЧ(Элемент, "Услуги", ОформленияСтрок);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиКоличествоПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Услуги");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиЦенаПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Услуги");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Услуги");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Услуги");
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Заказ"
// в строке табличной части "Услуги".
//
Процедура УслугиЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Услуги", ДопПараметры);
	
КонецПроцедуры // УслугиЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
		СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) Тогда
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
	КонецЕсли;
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПередУдалением" табличной части "Услуги".
//
Процедура УслугиПередУдалением(Элемент, Отказ)
	
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	Если СтрокаТЧ.ЕстьВДокументеПоступления И КорректироватьБУиНУ Тогда
		Отказ = Истина;
		Сообщить("Для удаления строки исходного документа необходимо очистить все суммовые и количественные показатели.");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" табличной части
// "Услуги". Формирует данные в колонке "СчетУчетаНУ".
//
Процедура УслугиСчетУчетаБУПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки = ЭлементыФормы.Услуги.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             ТекущиеДанные.Субконто1,
	                             Колонки.Субконто1,
	                             ТекущиеДанные.Субконто2,
	                             Колонки.Субконто2,
	                             ТекущиеДанные.Субконто3,
	                             Колонки.Субконто3);
	
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		ТекущиеДанные.СтатьяЗатрат,
		ТекущиеДанные.СчетЗатрат,
		ТекущиеДанные.Субконто1,
		ТекущиеДанные.Субконто2,
		ТекущиеДанные.Субконто3);
	
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(
		ТекущиеДанные, 
		Истина, // УчитыватьЗначенияСубконто
		, 
		, 
		Ложь); // ЗаполнятьТолькоЕслиСчетЗависитОтСубконто
	
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		ТекущиеДанные.СтатьяЗатрат,
		ТекущиеДанные.СчетЗатратНУ,
		ТекущиеДанные.СубконтоНУ1,
		ТекущиеДанные.СубконтоНУ2,
		ТекущиеДанные.СубконтоНУ3);
		
		УслугиСчетУчетаНУПриИзменении(Элемент);
	
КонецПроцедуры // УслугиСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Услуги".
//
Процедура УслугиСубконто1ПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, Истина);
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 1, СтрокаТЧ.Субконто1, СтрокаТЧ.СубконтоНУ1);
	
КонецПроцедуры // УслугиСубконто1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Услуги".
//
Процедура УслугиСубконто2ПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, Истина);
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 2, СтрокаТЧ.Субконто2, СтрокаТЧ.СубконтоНУ2);
	
КонецПроцедуры // УслугиСубконто2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Услуги".
//
Процедура УслугиСубконто3ПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, Истина);
	
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 3, СтрокаТЧ.Субконто3, СтрокаТЧ.СубконтоНУ3);
	
КонецПроцедуры // УслугиСубконто3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" табличной части
// "Услуги". Формирует данные в колонке "УслугиСтатьяЗатрат".
//
Процедура УслугиСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	УстановитьДоступностьСубконто (СтрокаТабличнойЧасти);
	УстановитьДоступностьПродукции(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	
	Если мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.УстановитьПроектПоУмолчанию(СтрокаТабличнойЧасти.Подразделение, СтрокаТабличнойЧасти.СтатьяЗатрат, СтрокаТабличнойЧасти.Проект);
	КонецЕсли;
	
КонецПроцедуры // УслугиСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаНУ
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаНУПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки = ЭлементыФормы.Услуги.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетЗатратНУ,
	                             ТекущиеДанные.СубконтоНУ1,
	                             Колонки.СубконтоНУ1,
	                             ТекущиеДанные.СубконтоНУ2,
	                             Колонки.СубконтоНУ2,
	                             ТекущиеДанные.СубконтоНУ3,
	                             Колонки.СубконтоНУ3);
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		ТекущиеДанные.СтатьяЗатрат,
		ТекущиеДанные.СчетЗатратНУ,
		ТекущиеДанные.СубконтоНУ1,
		ТекущиеДанные.СубконтоНУ2,
		ТекущиеДанные.СубконтоНУ3);
	
КонецПроцедуры // УслугиСчетУчетаНУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделениеОрганизации
// в строке табличной части "Услуги".
//
Процедура УслугиПодразделениеОрганизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	УстановитьДоступностьСубконто(ЭлементыФормы.Услуги.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ПодразделениеОрганизаци
// в строке табличной части "Услуги".
//
Процедура УслугиПодразделениеОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	БухгалтерскийУчет.ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизации" табличной части "Услуги".
//
Процедура УслугиПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьСубконто (Элемент.ТекущиеДанные);
	УстановитьДоступностьПродукции(Элемент.ТекущиеДанные);
	
КонецПроцедуры // УслугиПриАктивизацииСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода Продукция
// в строке табличной части "Услуги".
//
Процедура УслугиПродукцияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.СерияПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.СерияПродукции = 0;
	КонецЕсли; 
	
	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.ХарактеристикаПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаПродукции = 0;
	КонецЕсли; 
	
КонецПроцедуры // УслугиПродукцияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// в строке табличной части "Услуги".
// 
Процедура УслугиПодразделениеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементыформы.Услуги.ТекущиеДанные;
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизации,
												  СтрокаТабличнойЧасти.Подразделение,
												  Организация);
	
КонецПроцедуры // УслугиПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
// в строке табличной части "Услуги".
//
Процедура УслугиПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка(ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 Элементыформы.Услуги.ТекущиеДанные.ПодразделениеОрганизации,
											 Элементыформы.Услуги.ТекущиеДанные.Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПоставщику"
// в строке табличной части "Услуги".
Процедура УслугиЗаказПоставщикуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = УправлениеЗаказами.ПолучитьСтруктуруОтбораПоЗаказам(ЭтотОбъект);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							   "Расход", "ЗаказПоставщику",СтруктураОтбора);	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Проект".
//
Процедура УслугиПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // УслугиПроектНачалоВыбора()

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Услуги"
//
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ПриНачалеРедактированияСтрокиТЧ(Элемент, "Услуги", НоваяСтрока)
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода КоличествоДоКорректировки
//
Процедура УслугиКоличествоДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииКоличестваТЧ(Элемент, "Услуги", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода КоличествоДоИзменения
//
Процедура УслугиКоличествоДоИзмененияПриИзменении(Элемент)
	
	
	ПриИзмененииКоличестваТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЦенаДоКорректировки
//
Процедура УслугиЦенаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Услуги", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЦенаДоИзменения
//
Процедура УслугиЦенаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииЦеныТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СуммаДоКорректировки
//
Процедура УслугиСуммаДоКорректировкиПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Услуги", "ДоКорректировки");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СуммаДоИзменения
//
Процедура УслугиСуммаДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСуммыТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкаНДСДоИзменения
//
Процедура УслугиСтавкаНДСДоИзмененияПриИзменении(Элемент)
	
	ПриИзмененииСтавкиНДСТЧ(Элемент, "Услуги", "ДоИзменения");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары			= ЭлементыФормы.Товары.Колонки;
мКолонкиУслуги			= ЭлементыФормы.Услуги.Колонки;
мВедениеУчетаЗатратПоПроектам = УправлениеПроектами.ВедениеУчетаЗатратПоПроектам();