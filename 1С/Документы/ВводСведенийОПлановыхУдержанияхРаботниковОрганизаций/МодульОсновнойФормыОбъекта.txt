////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента;			// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущееФизлицо;				// Ссылка на текущего работника формы: физлицо
Перем мСинхронизируемыеТабличныеЧасти;	// для синхронизации строк табличных полей

Перем мДеревоМакетов;					// Хранит дерево макетов печатных форм
Перем мПодменюПечати;					// Хранит элемент управления подменю печати
Перем мПечатьПоУмолчанию;				// Хранит элемент управления кнопку печать по умолчанию
Перем мКнопкиЗаполненияТЧ;				// Хранит дерево кнопок подменю заполнение ТЧ

Перем мВалютаРегламентированногоУчета;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

Перем мСведенияОВидахРасчета;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура формирует таблицу работников на основе данных табличных частей документа 
//
// Параметры
//
Процедура ЗаполнитьТаблицуРаботников()
	
	РаботникиОрганизации.Очистить();
	
	ТЗ = Удержания.Выгрузить();
	ТЗ.Свернуть("Физлицо");
	ТЗ.Сортировать("Физлицо");
	Для Каждого СтрокаТабличнойЧасти Из ТЗ Цикл
		РаботникиОрганизации.Добавить().Физлицо = СтрокаТабличнойЧасти.Физлицо;
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицуРаботников()

Процедура ПриИзмененииРаботника(Значение)

	// если работник изменился, то по предыдущему работнику удалим строки, а по новому добавим
	Если Значение <> мТекущееФизлицо Тогда
		
		УдалитьСтрокиНачисленийПоРаботнику(мТекущееФизлицо);
		// запомним текущего работника
		мТекущееФизлицо = Значение;
		// добавим строки начислений
		ДобавитьСтрокиНачисленийПоРаботнику(мТекущееФизлицо, мГоловнаяОрганизация);
		
		УстановитьОтборРаботника(мТекущееФизлицо);

	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииРаботника()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Удержания,ЭлементыФормы.КоманднаяПанельУдержания);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Обновляет значение отбора строк т.п. начислений и удержаний
//
// Параметры
//  ФизЛицо - СправочникСсылка.ФизическиеЛица - текущий работник
//
Процедура УстановитьОтборРаботника(Физлицо)
	
	ЭлементыФормы.Удержания.ОтборСтрок.Физлицо.Значение = Физлицо;
	
КонецПроцедуры // УстановитьОтборРаботника()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Ввод сведений о плановых удержаниях сотрудников организации");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

Функция ПолучитьСтруктуруПараметровПодбораПоСтроке()
	
	СтруктураПараметров = Новый Структура("СпособРасчета", ПроведениеРасчетов.ПолучитьСписокВариантовУдержанийОрганизации());
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Физлицо");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("Действие");
	СтруктураКолонок.Вставить("ДатаДействия");

	// Установить ограничение - изменять видимость колонок для табличной части Удержания
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Удержания.Колонки, СтруктураКолонок);

	// Активизируем табличное поле
	ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Кнопки "По сотруднику" командной панели установим в оключенное состояние
	ЭлементыФормы.КоманднаяПанельУдержания.Кнопки.ВсеРаботники.Пометка  = Ложь;
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	РаботникиОрганизации.Индексы.Добавить("ФизЛицо");
	
	Если Не ЗначениеЗаполнено(мМассивРасчетовПоИсполнительнымЛистам) Тогда
		мМассивРасчетовПоИсполнительнымЛистам = ПроведениеРасчетов.МассивРасчетовПоИсполнительнымЛистам();
	КонецЕсли;
	
	// Заполним таблицу работников
	ЗаполнитьТаблицуРаботников();
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	Если глЗначениеПеременной("глЕстьВалютныеПоказателиОрганизаций") Тогда
		
		мМассивЭУ.Добавить(ЭлементыФормы.Удержания.Колонки.Валюта1);
		мМассивЭУ.Добавить(ЭлементыФормы.Удержания.Колонки.Валюта2);
		мМассивЭУ.Добавить(ЭлементыФормы.Удержания.Колонки.Валюта3);
		мМассивЭУ.Добавить(ЭлементыФормы.Удержания.Колонки.Валюта4);	
		мМассивЭУ.Добавить(ЭлементыФормы.Удержания.Колонки.Валюта5);
		мМассивЭУ.Добавить(ЭлементыФормы.Удержания.Колонки.Валюта6);
		
		РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
		
	Иначе
		Для Сч = 1 По 6 Цикл
			ЭлементыФормы.Удержания.Колонки["Валюта"+Сч].Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;
	УстановитьЗаголовкиОрганизацийВФорме();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			РаботникиОрганизации.Очистить();
			Удержания.Очистить();
			
			Для Каждого СтрокаТЗ Из ЗначениеВыбора.Данные.Выгрузить() Цикл
				ЗаполнитьЗначенияСвойств(РаботникиОрганизации.Добавить(), СтрокаТЗ);
			КонецЦикла;
			
			РаботникиОрганизации.Свернуть("Физлицо");
			
			ДобавитьСтрокиНачисленийПоРаботнику(РаботникиОрганизации.ВыгрузитьКолонку("Физлицо"), мГоловнаяОрганизация);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура - обработчик события нажатия кнопки "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация);
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииПодбор()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура КоманднаяПанельРаботникиОрганизацииЗаполнить(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , Организация, )
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииЗаполнить()

// Процедура - обработчик события нажатия кнопки "ВсеРаботники"
//
Процедура КоманднаяПанельУдержанияВсеРаботники(Кнопка)
	
	Если ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока <> Неопределено Тогда
		
		Если ЭлементыФормы.Удержания.ОтборСтрок.Физлицо.Использование Тогда
			// отключим отбор
			ЭлементыФормы.Удержания.ОтборСтрок.Физлицо.Использование = Ложь;
			ЭлементыФормы.КоманднаяПанельУдержания.Кнопки.ВсеРаботники.Пометка = Ложь;
			
		Иначе
			// установим отбор
			ЭлементыФормы.Удержания.ОтборСтрок.Физлицо.Установить(ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Физлицо);
			ЭлементыФормы.КоманднаяПанельУдержания.Кнопки.ВсеРаботники.Пометка = Истина;
			
		КонецЕсли;
		
	Иначе
		Сообщить("В таблице сотрудников не выбрана строка!") 
		
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельУдержанияВсеРаботники()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	Если глЗначениеПеременной("глЕстьВалютныеПоказателиОрганизаций") Тогда
		РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля
//
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
    ПодключитьОбработчикОжидания("ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки", 0.1, Истина);	 	
    
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииСтроки()

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля РаботникиОрганизации
//
Процедура ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки()
    
    Элемент = ЭлементыФормы.РаботникиОрганизации;
    
   	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Физлицо");
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		мТекущееФизлицо = Неопределено;
		Возврат;
	КонецЕсли;
	
	// запомним текущего работника
	мТекущееФизлицо = ДанныеСтроки.Физлицо;
	УстановитьОтборРаботника(мТекущееФизлицо);

КонецПроцедуры // ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки

 
// Процедура - обработчик события "ОбработкаВыбора" табличного поля
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Физлицо = ВыбранноеЗначение.Физлицо;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Физлицо", Физлицо)).Количество() = 0 Тогда
		РаботникиОрганизации.Добавить().Физлицо = Физлицо;
		
		ДобавитьСтрокиНачисленийПоРаботнику(Физлицо, мГоловнаяОрганизация);
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииОбработкаВыбора()

// Процедура - обработчик события "Перед удалением" строки табличного поля
//
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьСтрокиНачисленийПоРаботнику(Элемент.ТекущиеДанные.Физлицо);
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

Процедура РаботникиОрганизацииФизЛицоПриИзменении(Элемент)
	
	ПриИзмененииРаботника(Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииФизЛицоПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода физического лица
//
Процедура РаботникиОрганизацииФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииФизЛицоНачалоВыбора()

Процедура РаботникиОрганизацииФизлицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, мГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РаботникиОрганизацииФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Физлицо = ВыбранноеЗначение.Физлицо;
	Иначе
		Физлицо = ВыбранноеЗначение;
	КонецЕсли;

	СтрокиРаботников = РаботникиОрганизации.НайтиСтроки(Новый Структура("Физлицо", Физлицо));
	Если СтрокиРаботников.Количество() > 0 И Элемент.Значение <> Физлицо Тогда
		Предупреждение("В данном документе по одному сотруднику можно вводить только одну строку!");
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = Физлицо;
	ПриИзмененииРаботника(Физлицо);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 0, Текст, Организация, Истина);
	
КонецПроцедуры // РаботникиОрганизацииФизЛицоАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 0, Текст, Организация, Истина);
	
КонецПроцедуры // РаботникиОрганизацииФизЛицоОкончаниеВводаТекста()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Удержания

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
//
Процедура УдержанияПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияУдержанияПриАктивизацииСтроки", 0.1, Истина);	 	
	
КонецПроцедуры // УдержанияПриАктивизацииСтроки()

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля Удержания 
//
Процедура ОбработчикОжиданияУдержанияПриАктивизацииСтроки()
    
    ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.Удержания, мСинхронизируемыеТабличныеЧасти, "Физлицо");    
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Удержания, мСведенияОВидахРасчета);
    
КонецПроцедуры // ОбработчикОжиданияУдержанияПриАктивизацииСтроки
 
// Процедура - обработчик события "ПослеУдаления" строки ТЧ
//
Процедура УдержанияПослеУдаления(Элемент)
	
	ЗаполнитьТаблицуРаботников();
	
КонецПроцедуры // УдержанияПослеУдаления()

// Процедура - обработчик события "ПриНачалеРедактирования" строки ТЧ
//
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ДанныеСтроки.ДатаДействия = Дата;
		ДанныеСтрокиТЧРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
		
		Если ДанныеСтрокиТЧРаботники <> Неопределено Тогда
			ДанныеСтроки.Физлицо = ДанныеСтрокиТЧРаботники.Физлицо;
		КонецЕсли;

		Если ЭлементыФормы.Удержания.ОтборСтрок.Физлицо.Использование Тогда
			ДанныеСтроки.Физлицо = ЭлементыФормы.Удержания.ОтборСтрок.Физлицо.Значение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // УдержанияПриНачалеРедактирования()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура УдержанияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета, Ложь);
		
		Если ЭлементыФормы.Удержания.ТекущиеДанные <> Неопределено Тогда
			
			СведенияОВидеРасчета = мСведенияОВидахРасчета[ЭлементыФормы.Удержания.ТекущиеДанные.ВидРасчета];
			
			КоличествоПоказателей = СведенияОВидеРасчета["КоличествоПоказателей"];
			Если ДанныеСтроки.Действие = Перечисления.ВидыДействияСНачислением.Начать ИЛИ
				ДанныеСтроки.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
				
				Для СчПоказателей = 1 По 6 Цикл
					Если СчПоказателей = 1 Или СчПоказателей <= КоличествоПоказателей Тогда
						ОформлениеСтроки.Ячейки["Показатель"+СчПоказателей].ТолькоПросмотр = НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для СчПоказателей = 1 По 6 Цикл
					Если СчПоказателей = 1 Или СчПоказателей <= КоличествоПоказателей Тогда
						ОформлениеСтроки.Ячейки["Показатель"+СчПоказателей].ТолькоПросмотр = Истина;
					КонецЕсли;;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.ДатаДействияКонец.ТолькоПросмотр = ДанныеСтроки.Действие <> Перечисления.ВидыДействияСНачислением.Начать;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" ТЧ
//
Процедура УдержанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Элемент.ТекущиеДанные.Показатель1 = 0;
		Элемент.ТекущиеДанные.Показатель2 = 0;
		Элемент.ТекущиеДанные.Показатель3 = 0;
		Элемент.ТекущиеДанные.Показатель4 = 0;
		Элемент.ТекущиеДанные.Показатель5 = 0;
		Элемент.ТекущиеДанные.Показатель6 = 0;
	КонецЕсли;
		
КонецПроцедуры // УдержанияПриОкончанииРедактирования()

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура УдержанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
			
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущиеДанные.Физлицо = ВыбранноеЗначение.Физлицо;
	СтандартнаяОбработка = Ложь;
			
КонецПроцедуры // УдержанияОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Удержания

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура УдержанияФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // УдержанияФизЛицоНачалоВыбора()

Процедура УдержанияФизЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, мГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура УдержанияФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
		Если РаботникиОрганизации.Найти(Элемент.Значение,"Физлицо") = Неопределено Тогда
			ЗаполнитьТаблицуРаботников();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура УдержанияФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 0, Текст, Организация, Истина);
	
КонецПроцедуры // УдержанияФизЛицоАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура УдержанияФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 0, Текст, Организация, Истина);
	
КонецПроцедуры // УдержанияФизЛицоОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода вида удержания
//
Процедура УдержанияВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Удержания",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаРегламентированногоУчета);
	
	Если мМассивРасчетовПоИсполнительнымЛистам.Найти(Элемент.Значение) <> Неопределено Тогда
		Тип = Тип("ДокументСсылка.ИсполнительныйЛист");
	Иначе
		Тип = Тип("ДокументСсылка.ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций");
	КонецЕсли;
	
	Если ТипЗнч(ЭлементыФормы.Удержания.ТекущиеДанные.ДокументОснование) <> Тип Тогда
		ЭлементыФормы.Удержания.ТекущиеДанные.ДокументОснование = ОбщегоНазначения.ПустоеЗначениеТипа(Тип);
	КонецЕсли;
	
КонецПроцедуры // УдержанияВидРасчетаПриИзменении()

Процедура УдержанияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаВводПостоянногоНачисленияИлиУдержанияСотрудникамОрганизации");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = ПроведениеРасчетов.ПолучитьСписокВариантовУдержанийОрганизации();
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммой;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();

КонецПроцедуры

Процедура УдержанияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"));
КонецПроцедуры

Процедура УдержанияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

Процедура УдержанияДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	Если мМассивРасчетовПоИсполнительнымЛистам.Найти(ЭлементыФормы.Удержания.ТекущиеДанные.ВидРасчета) <> Неопределено Тогда
		Тип = Тип("ДокументСсылка.ИсполнительныйЛист");
	Иначе
		Тип = Тип("ДокументСсылка.ВводСведенийОПлановыхУдержанияхРаботниковОрганизаций");
	КонецЕсли;
	
	Элемент.Значение = ОбщегоНазначения.ПустоеЗначениеТипа(Тип);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // УдержанияДокументОснованиеОчистка()


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["Удержания"]			= Ложь;
мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]	= Ложь;

мСведенияОВидахРасчета = Новый Соответствие;

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();