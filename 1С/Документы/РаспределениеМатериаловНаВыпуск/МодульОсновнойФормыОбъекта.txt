////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ
Перем мОписаниеТипаКолво; // Описания типа число для хранения количество

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мКолонкиПродукция, мКолонкиМатериалы, мКолонкиРаспределениеМатериалов;
Перем мКолонкиВозвратныеОтходы, мКолонкиРаспределениеВозвратныхОтходов;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

Перем мОтражатьВРегламентированномУчете;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Материалы,ЭлементыФормы.КоманднаяПанельМатериалы.Кнопки.Заполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаспределениеМатериалов,ЭлементыФормы.КоманднаяПанельРаспределениеМатериалов.Кнопки.Заполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Продукция,ЭлементыФормы.КоманднаяПанельПродукция.Кнопки.Заполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратныеОтходы,ЭлементыФормы.КоманднаяПанельВозвратныеОтходы.Кнопки.Заполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаспределениеВозвратныхОтходов,ЭлементыФормы.КоманднаяПанельРаспределениеВозвратныеОтходы.Кнопки.Заполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Ложь;
	ЕстьСерия = Истина;

	СтруктураПараметровПодбора = Новый Структура();
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Материалы Тогда

		Команда           = "ПодборВТабличнуюЧастьМатериалы";
		ИмяТабличнойЧасти = "Материалы";
		
		Если ОтражатьВУправленческомУчете Тогда
			СписокЗапросов.Добавить( "ОстаткиПроизводство", "По остаткам в производстве");

			СтруктураПараметровПодбора.Вставить( "Организация",   Организация);
			СтруктураПараметровПодбора.Вставить( "Подразделение", Подразделение);
		КонецЕсли;
		
	ИначеЕсли ТабличнаяЧасть = РаспределениеМатериалов Тогда

		Команда           = "ПодборВТабличнуюЧастьРаспределениеМатериалов";
		ИмяТабличнойЧасти = "Распределение материалов";
		
		Если ОтражатьВУправленческомУчете Тогда
			СписокЗапросов.Добавить( "ОстаткиПроизводство", "По остаткам в производстве");

			СтруктураПараметровПодбора.Вставить( "Организация",   Организация);
			СтруктураПараметровПодбора.Вставить( "Подразделение", Подразделение);
		КонецЕсли;
		
	ИначеЕсли ТабличнаяЧасть = Продукция Тогда

		Команда           = "ПодборВТабличнуюЧастьПродукция";
		ИмяТабличнойЧасти = "Продукция";
		
	ИначеЕсли ТабличнаяЧасть = ВозвратныеОтходы Тогда

		Команда           = "ПодборВТабличнуюЧастьВозвратныеОтходы";
		ИмяТабличнойЧасти = "Возвратные отходы";
		
	ИначеЕсли ТабличнаяЧасть = РаспределениеВозвратныхОтходов Тогда

		Команда           = "ПодборВТабличнуюЧастьРаспределениеВозвратныхОтходов";
		ИмяТабличнойЧасти = "Распределение возвратных отходов";
		
	КонецЕсли;

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                , Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура"				 , Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения"			 , ЕдиницаИзмерения);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Рассчитать реквизиты табличной части.
		Если ТабличнаяЧасть <> РаспределениеМатериалов 
		   И ТабличнаяЧасть <> РаспределениеВозвратныхОтходов Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
		СтрокаТабличнойЧасти.ВидВыпуска                 = Перечисления.ВидыВыпуска.Выпуск;
		
		СтрокаТабличнойЧасти.Количество       			= Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения  = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент       = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		
		Если ТабличнаяЧасть = Продукция Тогда
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа 	= СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;
			СтрокаТабличнойЧасти.Спецификация 			= УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Номенклатура, Характеристика, Дата, Подразделение);
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, Неопределено);
		Иначе
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа 	= СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
			СтрокаТабличнойЧасти.СтатьяЗатрат 			= СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат);
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	КонецЕсли;

	Если ТабличнаяЧасть = Материалы Тогда
		ТабличнаяЧастьИмя = "Материалы";

	ИначеЕсли ТабличнаяЧасть = РаспределениеМатериалов Тогда
		ТабличнаяЧастьИмя = "РаспределениеМатериалов";
		
	ИначеЕсли ТабличнаяЧасть = Продукция Тогда
		ТабличнаяЧастьИмя = "Продукция";
		
	ИначеЕсли ТабличнаяЧасть = ВозвратныеОтходы Тогда
		ТабличнаяЧастьИмя = "ВозвратныеОтходы";
		
	ИначеЕсли ТабличнаяЧасть = РаспределениеВозвратныхОтходов Тогда
		ТабличнаяЧастьИмя = "РаспределениеВозвратныхОтходов";
		
	КонецЕсли;
	
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "")

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Если ИмяТабличнойЧасти <> "Продукция" Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
				СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
			КонецЕсли;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;
		
	КонецЕсли;

КонецПроцедуры // ПриИзмененииНоменклатурыМатериаловИПродукции()

// Процедура устанавливает видимость/доступность элементов формы
//
Процедура УстановитьВидимость()

	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	КолонкиПродукция 						= ЭлементыФормы.Продукция.Колонки;
	КолонкиМатериалы 						= ЭлементыФормы.Материалы.Колонки;
	КолонкиРаспределениеМатериалов 			= ЭлементыФормы.РаспределениеМатериалов.Колонки;
	КолонкиВозвратныеОтходы   				= ЭлементыФормы.ВозвратныеОтходы.Колонки;
	КолонкиРаспределениеВозвратныхОтходов 	= ЭлементыФормы.РаспределениеВозвратныхОтходов.Колонки;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиПродукция.СчетЗатрат,					ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиПродукция.СчетЗатратНУ,				ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиМатериалы.СчетЗатрат,					ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиМатериалы.СчетЗатратНУ,				ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиРаспределениеМатериалов.СчетЗатрат,   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиРаспределениеМатериалов.СчетЗатратНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиВозвратныеОтходы.СчетЗатрат,   		ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиВозвратныеОтходы.СчетЗатратНУ, 		ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиРаспределениеВозвратныхОтходов.СчетЗатрат,   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиРаспределениеВозвратныхОтходов.СчетЗатратНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	
	СтруктураКолонок = Новый Структура("ПодразделениеНЗП, ПодразделениеОрганизацииНЗП");
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиМатериалы, 						СтруктураКолонок, ИспользоватьПодразделенияНЗП);
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиРаспределениеМатериалов, 			СтруктураКолонок, ИспользоватьПодразделенияНЗП);
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиВозвратныеОтходы, 				СтруктураКолонок, ИспользоватьПодразделенияНЗП);
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиРаспределениеВозвратныхОтходов, 	СтруктураКолонок, ИспользоватьПодразделенияНЗП);
	
	// Доступность колонок Подразделение НЗП.
	Если ИспользоватьПодразделенияНЗП Тогда
		КолонкиМатериалы.ПодразделениеНЗП.Видимость 							= ИспользоватьПодразделенияНЗП И ОтражатьВУправленческомУчете;
		КолонкиРаспределениеМатериалов.ПодразделениеНЗП.Видимость 				= ИспользоватьПодразделенияНЗП И ОтражатьВУправленческомУчете;
		КолонкиВозвратныеОтходы.ПодразделениеНЗП.Видимость 						= ИспользоватьПодразделенияНЗП И ОтражатьВУправленческомУчете;
		КолонкиРаспределениеВозвратныхОтходов.ПодразделениеНЗП.Видимость 		= ИспользоватьПодразделенияНЗП И ОтражатьВУправленческомУчете;
		
		КолонкиМатериалы.ПодразделениеОрганизацииНЗП.Видимость 					= ИспользоватьПодразделенияНЗП И ОтражатьВБухгалтерскомУчете;
		КолонкиРаспределениеМатериалов.ПодразделениеОрганизацииНЗП.Видимость 	= ИспользоватьПодразделенияНЗП И ОтражатьВБухгалтерскомУчете;
		КолонкиВозвратныеОтходы.ПодразделениеОрганизацииНЗП.Видимость 			= ИспользоватьПодразделенияНЗП И ОтражатьВБухгалтерскомУчете;
		КолонкиРаспределениеВозвратныхОтходов.ПодразделениеОрганизацииНЗП.Видимость = ИспользоватьПодразделенияНЗП И ОтражатьВБухгалтерскомУчете;
	КонецЕсли;
	
	// Доступность колонок вид выпуска
	СтруктураКолонок = Новый Структура("ВидВыпуска");
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиПродукция, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиМатериалы, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиРаспределениеМатериалов, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиВозвратныеОтходы, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиРаспределениеВозвратныхОтходов, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	
	Если ИспользоватьНаработку Тогда
		КолонкиПродукция.ВидВыпуска.Видимость 						= ИспользоватьНаработку;
		КолонкиМатериалы.ВидВыпуска.Видимость 						= ИспользоватьНаработку;
		КолонкиРаспределениеМатериалов.ВидВыпуска.Видимость 		= ИспользоватьНаработку;
		КолонкиВозвратныеОтходы.ВидВыпуска.Видимость 				= ИспользоватьНаработку;
		КолонкиРаспределениеВозвратныхОтходов.ВидВыпуска.Видимость 	= ИспользоватьНаработку;
	КонецЕсли;
	
	
КонецПроцедуры // УстановитьВидимость()

// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	
	Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)) Тогда
						
		Для Каждого СтрокаТЧ Из Продукция Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, Неопределено);
		КонецЦикла;
		Для Каждого СтрокаТЧ Из Материалы Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
		КонецЦикла;
		Для Каждого СтрокаТЧ Из РаспределениеМатериалов Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
		КонецЦикла;
		Для Каждого СтрокаТЧ Из ВозвратныеОтходы Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
		КонецЦикла;
		Для Каждого СтрокаТЧ Из РаспределениеВозвратныхОтходов Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	// Проверить объект на то, что он еще не внесен в ИБ.
	Если ЭтоНовый() Тогда
	
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
			Если Не мИспользоватьНаработку Тогда
				ИспользоватьНаработку = мИспользоватьНаработку;
			КонецЕсли;
		КонецЕсли;

		ДатаНачалаПериода            = НачалоМесяца(Дата);

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура;
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Материалы.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаспределениеМатериалов.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиПродукция);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиПродукция);
	
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиМатериалы);
	
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиВозвратныеОтходы);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиВозвратныеОтходы);
	
	СтруктураКолонок = Новый Структура("ХарактеристикаНоменклатуры, ХарактеристикаПродукции");
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиРаспределениеМатериалов, СтруктураКолонок);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиРаспределениеВозвратныхОтходов, СтруктураКолонок);
	
	СтруктураКолонок = Новый Структура("СерияНоменклатуры, СерияПродукции");
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиРаспределениеМатериалов, СтруктураКолонок);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиРаспределениеВозвратныхОтходов, СтруктураКолонок);

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Продукция.Заголовок = "Продукция (" + Продукция.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.Материалы.Заголовок = "Материалы (" + Материалы.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.Распределение                 .Заголовок = "Распределение материалов (" + РаспределениеМатериалов.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.ВозвратныеОтходы              .Заголовок = "Возвратные отходы (" + ВозвратныеОтходы.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеВозвратныхОтходов.Заголовок = "Распределение возвратных отходов (" + РаспределениеВозвратныхОтходов.Количество() + " поз.)";
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			ОбработкаПодбора(Материалы, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьРаспределениеМатериалов" Тогда
			ОбработкаПодбора(РаспределениеМатериалов, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьПродукция" Тогда
			ОбработкаПодбора(Продукция, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратныеОтходы" Тогда
			ОбработкаПодбора(ВозвратныеОтходы, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьРаспределениеВозвратныхОтходов" Тогда
			ОбработкаПодбора(РаспределениеВозвратныхОтходов, ЗначениеВыбора);	
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при нажатии кнопки "Настройка" командной панели формы.
//
Процедура ДействияФормыНастройка(Кнопка)
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	ФормаНастройки.ОткрытьМодально();
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыНастройка()

// Процедура вызывается при выборе пункта подменю "Заполнить" командной панели формы.
//
Процедура ДействияФормыЗаполнитьПоНормативам(Кнопка)
	
	Если Продукция.Количество() > 0 ИЛИ Материалы.Количество() > 0 ИЛИ РаспределениеМатериалов.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки. При заполнении они будут удалены!" + Символы.ПС + "Продолжить?",
			РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Продукция.Очистить();
		Материалы.Очистить();
		РаспределениеМатериалов.Очистить();
		ВозвратныеОтходы.Очистить();
		РаспределениеВозвратныхОтходов.Очистить();
		
	КонецЕсли;
	
	ТаблицаПродукция = Продукция.Выгрузить();
	УправлениеПроизводством.ЗаполнитьПродукциюПоВыпуску(ЭтотОбъект, ТаблицаПродукция);
	
	ТаблицаПродукция.ЗаполнитьЗначения(Перечисления.ВидыВыпуска.Выпуск,"ВидВыпуска");
	
	Продукция.Загрузить(ТаблицаПродукция);
	ТабПродукция = ТаблицаПродукция.Скопировать();
	
	Если ТабПродукция.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти из Продукция Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	
	НормативныйСостав = Новый Структура;
	НормативныйСостав.Вставить( "Потребности");
	НормативныйСостав.Вставить( "ВозвратныеОтходы");
						
	СтруктПараметры = Новый Структура;
	СтруктПараметры.Вставить( "ДатаСпецификации", Дата);
	СтруктПараметры.Вставить( "ПараметрыВыпуска", Неопределено);
							
	РазузлованиеНоменклатуры.ПолучитьПотребность(ТабПродукция, НормативныйСостав, СтруктПараметры);
						
	ТабПотребностей = НормативныйСостав.Потребности;
	ТабВозвратныхОтходов = НормативныйСостав.ВозвратныеОтходы;
				
	ТабПотребностей.Колонки.Номенклатура.Имя = "Продукция";
	ТабПотребностей.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаПродукции";
	ТабПотребностей.Колонки.Материал.Имя = "Номенклатура";
	ТабПотребностей.Колонки.ХарактеристикаМатериала.Имя = "ХарактеристикаНоменклатуры";
	ТабПотребностей.ЗаполнитьЗначения(0, "Количество");
	
	ТабВозвратныхОтходов.Колонки.Номенклатура.Имя = "Продукция";
	ТабВозвратныхОтходов.Колонки.ХарактеристикаНоменклатуры.Имя = "ХарактеристикаПродукции";
	ТабВозвратныхОтходов.Колонки.Материал.Имя = "Номенклатура";
	ТабВозвратныхОтходов.Колонки.ХарактеристикаМатериала.Имя = "ХарактеристикаНоменклатуры";
	ТабВозвратныхОтходов.ЗаполнитьЗначения(0, "Количество");
	
	Для Каждого Строка Из ТабПотребностей Цикл
		КоэффициентЕдОст = Строка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		КоэффициентЕдОст = ?(КоэффициентЕдОст <> 0, КоэффициентЕдОст, 1);
		Коэффициент = ?(Строка.ЕдиницаИзмеренияМатериала.Коэффициент <> 0, Строка.ЕдиницаИзмеренияМатериала.Коэффициент, КоэффициентЕдОст);
		Строка.КоличествоМатериала = Строка.КоличествоМатериала * Коэффициент / КоэффициентЕдОст;
	КонецЦикла;
	
	Для Каждого Строка Из ТабВозвратныхОтходов Цикл
		КоэффициентЕдОст = Строка.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент;
		КоэффициентЕдОст = ?(КоэффициентЕдОст <> 0, КоэффициентЕдОст, 1);
		Коэффициент = ?(Строка.ЕдиницаИзмеренияМатериала.Коэффициент <> 0, Строка.ЕдиницаИзмеренияМатериала.Коэффициент, КоэффициентЕдОст);
		Строка.КоличествоМатериала = Строка.КоличествоМатериала * Коэффициент / КоэффициентЕдОст;
	КонецЦикла;
	
	ТаблицаЗатратНаВыпуск = РаспределениеМатериалов.Выгрузить();
	УправлениеПроизводством.ЗаполнитьМатериалыПоЗатратамНаВыпуск(ЭтотОбъект, ТаблицаЗатратНаВыпуск);
	
	ТаблицаЗатратНаВыпуск.Колонки.Добавить("КоличествоМатериала", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаЗатратНаВыпускОтходы = ТаблицаЗатратНаВыпуск.Скопировать();
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабПотребностей, ТаблицаЗатратНаВыпуск);
	ТаблицаЗатратНаВыпуск.Свернуть("Продукция, ХарактеристикаПродукции, Спецификация, Номенклатура, ХарактеристикаНоменклатуры, СтатьяЗатрат", "Количество, КоличествоМатериала");
	
	ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(ТабВозвратныхОтходов, ТаблицаЗатратНаВыпускОтходы);
	ТаблицаЗатратНаВыпускОтходы.Свернуть("Продукция, ХарактеристикаПродукции, Спецификация, Номенклатура, ХарактеристикаНоменклатуры, СтатьяЗатрат", "Количество, КоличествоМатериала");
	
	СтруктПоиска = Новый Структура;
	МассивКоэф   = Новый Массив;
	Для Каждого Строка Из ТаблицаЗатратНаВыпуск Цикл
		
		Количество = Строка.КоличествоМатериала - Строка.Количество;
		
		Если Количество <= 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктПоиска.Вставить("Номенклатура",               Строка.Продукция);
		СтруктПоиска.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаПродукции);
		СтруктПоиска.Вставить("Спецификация",               Строка.Спецификация);
		
		НаборСтрокВыпуска = ТаблицаПродукция.НайтиСтроки(СтруктПоиска);
		
		МассивКоэф.Очистить();
		Для Каждого СтрокаВыпуска Из НаборСтрокВыпуска Цикл
			МассивКоэф.Добавить(СтрокаВыпуска.Количество);
		КонецЦикла;
		
		МассивРаспр = ОбщегоНазначения.РаспределитьПропорционально(Количество, МассивКоэф, 3);
		Если МассивРаспр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для К = 0 По НаборСтрокВыпуска.ВГраница() Цикл
			
			НоваяСтрока = РаспределениеМатериалов.Добавить();
			НоваяСтрока.Номенклатура               = Строка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			НоваяСтрока.СтатьяЗатрат               = Строка.СтатьяЗатрат;
			НоваяСтрока.Продукция                  = НаборСтрокВыпуска[К].Номенклатура;
			НоваяСтрока.ХарактеристикаПродукции    = НаборСтрокВыпуска[К].ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияПродукции             = НаборСтрокВыпуска[К].СерияНоменклатуры;
			НоваяСтрока.ВидВыпуска				   = Перечисления.ВидыВыпуска.Выпуск;
			НоваяСтрока.Спецификация               = НаборСтрокВыпуска[К].Спецификация;
			НоваяСтрока.Заказ               	   = НаборСтрокВыпуска[К].Заказ;
			НоваяСтрока.ЗаказНЗП               	   = НаборСтрокВыпуска[К].Заказ;
			НоваяСтрока.НоменклатурнаяГруппа       = НаборСтрокВыпуска[К].НоменклатурнаяГруппа;
			НоваяСтрока.НоменклатурнаяГруппаНЗП    = НаборСтрокВыпуска[К].НоменклатурнаяГруппа;
			
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			НоваяСтрока.Количество = МассивРаспр[К];
			
			Если ОтражатьВБухгалтерскомУчете Тогда
				НоваяСтрока.СчетЗатрат  = НаборСтрокВыпуска[К].СчетЗатрат;
			КонецЕсли;
			Если ОтражатьВНалоговомУчете Тогда
				НоваяСтрока.СчетЗатратНУ        = НаборСтрокВыпуска[К].СчетЗатратНУ;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для Каждого Строка Из ТаблицаЗатратНаВыпускОтходы Цикл
		
		Количество = Строка.КоличествоМатериала - Строка.Количество;
		
		Если Количество <= 0 ИЛИ Строка.КоличествоМатериала = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктПоиска.Вставить("Номенклатура",               Строка.Продукция);
		СтруктПоиска.Вставить("ХарактеристикаНоменклатуры", Строка.ХарактеристикаПродукции);
		СтруктПоиска.Вставить("Спецификация",               Строка.Спецификация);
		
		НаборСтрокВыпуска = ТаблицаПродукция.НайтиСтроки(СтруктПоиска);
		
		МассивКоэф.Очистить();
		Для Каждого СтрокаВыпуска Из НаборСтрокВыпуска Цикл
			МассивКоэф.Добавить(СтрокаВыпуска.Количество);
		КонецЦикла;
		
		МассивРаспр = ОбщегоНазначения.РаспределитьПропорционально(Количество, МассивКоэф, 3);
		Если МассивРаспр = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для К = 0 По НаборСтрокВыпуска.ВГраница() Цикл
			
			НоваяСтрока = РаспределениеВозвратныхОтходов.Добавить();
			НоваяСтрока.Номенклатура               = Строка.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаНоменклатуры;
			НоваяСтрока.СтатьяЗатрат               = Строка.СтатьяЗатрат;
			НоваяСтрока.Продукция                  = НаборСтрокВыпуска[К].Номенклатура;
			НоваяСтрока.ХарактеристикаПродукции    = НаборСтрокВыпуска[К].ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияПродукции             = НаборСтрокВыпуска[К].СерияНоменклатуры;
			НоваяСтрока.ВидВыпуска				   = Перечисления.ВидыВыпуска.Выпуск;
			НоваяСтрока.Спецификация               = НаборСтрокВыпуска[К].Спецификация;
			НоваяСтрока.Заказ               	   = НаборСтрокВыпуска[К].Заказ;
			НоваяСтрока.ЗаказНЗП               	   = НаборСтрокВыпуска[К].Заказ;
			НоваяСтрока.НоменклатурнаяГруппа       = НаборСтрокВыпуска[К].НоменклатурнаяГруппа;
			НоваяСтрока.НоменклатурнаяГруппаНЗП    = НаборСтрокВыпуска[К].НоменклатурнаяГруппа;
			
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			
			НоваяСтрока.Количество = МассивРаспр[К];
			
			Если ОтражатьВБухгалтерскомУчете Тогда
				НоваяСтрока.СчетЗатрат  = НаборСтрокВыпуска[К].СчетЗатрат;
			КонецЕсли;
			Если ОтражатьВНалоговомУчете Тогда
				НоваяСтрока.СчетЗатратНУ        = НаборСтрокВыпуска[К].СчетЗатратНУ;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;

	ТабТемп = РаспределениеМатериалов.Выгрузить();
	ТабТемп.Свернуть("
		|Номенклатура, 
		|ХарактеристикаНоменклатуры, 
		|СерияНоменклатуры, 
		|НоменклатурнаяГруппа, 
		|СтатьяЗатрат, 
		|Заказ, 
		|СчетЗатрат, 
		|СчетЗатратНУ, 
		|ЕдиницаИзмерения,
		|Коэффициент
		|", 
		"Количество");
	ТабТемп.Колонки.Добавить("ВидВыпуска");
	ТабТемп.ЗаполнитьЗначения(Перечисления.ВидыВыпуска.Выпуск,"ВидВыпуска");
	Материалы.Загрузить(ТабТемп);
	
	Для каждого СтрокаТабличнойЧасти из Материалы Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	
	ТабТемп = РаспределениеВозвратныхОтходов.Выгрузить();
	ТабТемп.Свернуть("
		|Номенклатура, 
		|ХарактеристикаНоменклатуры, 
		|СерияНоменклатуры, 
		|НоменклатурнаяГруппа, 
		|СтатьяЗатрат, 
		|Заказ, 
		|СчетЗатрат, 
		|СчетЗатратНУ, 
		|ЕдиницаИзмерения,
		|Коэффициент
		|", 
		"Количество");
	ТабТемп.Колонки.Добавить("ВидВыпуска");
	ТабТемп.ЗаполнитьЗначения(Перечисления.ВидыВыпуска.Выпуск,"ВидВыпуска");
	ВозвратныеОтходы.Загрузить(ТабТемп);
	
	Для каждого СтрокаТабличнойЧасти из ВозвратныеОтходы Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	
КонецПроцедуры // ДействияФормыЗаполнитьПоНормативам()

// Процедура вызывается при выборе пункта подменю "Заполнить" командной панели формы.
//
Процедура ДействияФормыЗаполнитьПоРасчетнымДанным(Кнопка)
	
	Если Материалы.Количество() > 0 ИЛИ РаспределениеМатериалов.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки. При заполнении они будут удалены!" + Символы.ПС + "Продолжить?",
			РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Материалы.Очистить();
		РаспределениеМатериалов.Очистить();
	КонецЕсли;
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
		
	Если ИспользоватьРасширеннуюАналитику Тогда
		Предупреждение("Заполнение по расчетным данным не поддерживается при использовании расширенной аналитики учета затрат!");
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоРасчетнымДанным();
	
	Для каждого СтрокаТабличнойЧасти из Продукция Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти из Материалы Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	
КонецПроцедуры // ДействияФормыЗаполнитьПоРасчетнымДанным()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Продукция"
//
Процедура КоманднаяПанельПродукцияПодбор(Кнопка)
	
	ДействиеПодбор(Продукция);
	
КонецПроцедуры // КоманднаяПанельПродукцияПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыПодбор(Кнопка)
	
	ДействиеПодбор(Материалы);
	
КонецПроцедуры // КоманднаяПанельМатериалыПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Распределение материалов"
//
Процедура КоманднаяПанельРаспределениеМатериаловПодбор(Кнопка)
	
	ДействиеПодбор(РаспределениеМатериалов);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратные отходы".
//
Процедура КоманднаяПанельВозвратныеОтходыПодбор(Кнопка)
	
	ДействиеПодбор(ВозвратныеОтходы);
	
КонецПроцедуры // КоманднаяПанельВозвратныеОтходыПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Распределение возвратных отходов".
//
Процедура КоманднаяПанельРаспределениеВозвратныеОтходыПодбор(Кнопка)
	
	ДействиеПодбор(РаспределениеВозвратныхОтходов);
	
КонецПроцедуры // КоманднаяПанельРаспределениеВозвратныеОтходыПодбор()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "Заполнить"
//
Процедура КоманднаяПанельПродукцияЗаполнить(Кнопка)
	
	Если Продукция.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении будет очищена табличная часть ""Продукция""
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Продукция.Очистить();
	КонецЕсли;
	
	ТаблицаПродукция = Продукция.Выгрузить();
	УправлениеПроизводством.ЗаполнитьПродукциюПоВыпуску(ЭтотОбъект, ТаблицаПродукция);
	
	ТаблицаПродукция.ЗаполнитьЗначения(Перечисления.ВидыВыпуска.Выпуск,"ВидВыпуска");
	Продукция.Загрузить(ТаблицаПродукция);
	
	Для каждого СтрокаТабличнойЧасти из Продукция Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельПродукцияЗаполнить()

// Процедура вызывается при выборе пункта подменю "Заполнить"
//
Процедура КоманднаяПанельПродукцияЗаполнитьПоВыпускуНаработка(Кнопка)
	
	Если Продукция.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении будет очищена табличная часть ""Продукция""
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Продукция.Очистить();
	КонецЕсли;
	
	ТаблицаПродукция = Продукция.Выгрузить();
	УправлениеПроизводством.ЗаполнитьПродукциюПоВыпускуНаработка(ЭтотОбъект, ТаблицаПродукция);
	
	ТаблицаПродукция.ЗаполнитьЗначения(Перечисления.ВидыВыпуска.Наработка,"ВидВыпуска");
	Продукция.Загрузить(ТаблицаПродукция);
	
	Для каждого СтрокаТабличнойЧасти из Продукция Цикл
		СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
		ЗаполнитьСчетаЗатратРегл(СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Заполнить"
//
Процедура КоманднаяПанельРаспределениеМатериаловДействиеЗаполнить(Кнопка)
	
	ЗаполнитьТаблицуРаспределенияМатериалов();
	
КонецПроцедуры // КоманднаяПанельРаспределениеМатериаловДействиеЗаполнить()

// Процедура вызывается при выборе пункта подменю "Заполнить"
//
Процедура КоманднаяПанельМатериалыЗаполнить(Кнопка)
	
	Если Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе");
		Возврат;
	КонецЕсли;
	Если ОтражатьВУправленческомУчете И НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Предупреждение("Не указано подразделение!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Предупреждение("Не указано подразделение организации!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена.
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Материалы.Очистить();
	
	УправлениеПроизводством.ЗаполнитьМатериалыПоОстаткамНЗП(ЭтотОбъект, Материалы,,Истина,,,,,,Истина);
	
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		СтрокаТабличнойЧасти.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнить()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоСпецификации(Кнопка)
	
	ЗаполнитьМатериалыПоСпецификации();
	
	Для каждого СтрокаТабличнойЧасти из Материалы Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнить()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Возвратные отходы".
//
Процедура КоманднаяПанельВозвратныеОтходыЗаполнитьПоСпецификации(Кнопка)
	
	ЗаполнитьВозвратныеОтходыПоСпецификации();
	
	Для каждого СтрокаТабличнойЧасти из ВозвратныеОтходы Цикл
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельВозвратныеОтходыЗаполнитьПоСпецификации()

// Процедура вызывается при выборе пункта подменю "Заполнить"
//
Процедура КоманднаяПанельВозвратныеОтходыЗаполнить(Кнопка)
	
	Если Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе");
		Возврат;
	КонецЕсли;
	
	Если ВозвратныеОтходы.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена.
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ВозвратныеОтходы.Очистить();
	
	УправлениеПроизводством.ЗаполнитьМатериалыПоОстаткамНЗП(ЭтотОбъект, ВозвратныеОтходы,,Истина,,Истина,,Истина,Истина);
	
	Для Каждого СтрокаТабличнойЧасти Из ВозвратныеОтходы Цикл
		СтрокаТабличнойЧасти.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельВозвратныеОтходыЗаполнить()

// Процедура вызывается при выборе пункта подменю "Заполнить"
//
Процедура КоманднаяПанельРаспределениеВозвратныеОтходыЗаполнить(Кнопка)
	
	ЗаполнитьТаблицуРаспределенияВозвратныхОтходов();
	
КонецПроцедуры // КоманднаяПанельРаспределениеВозвратныеОтходыЗаполнить()

// Процедура обработчик события нажатие кнопки командной панели.
//
Процедура КоманднаяПанельМатериалыДобавитьИзТребованиеНакладная(Кнопка)
	
	ДобавитьИзТребованиеНакладной();
	
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		СтрокаТабличнойЧасти.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельМатериалыДобавитьИзТребованиеНакладная()

// Процедура обработчик события нажатие кнопки командной панели.
//
Процедура КоманднаяПанельМатериалыДобавитьИзДокументовВыпуска(Кнопка)
	
	ДобавитьМатериалыИзДокументаВыпуска();
	
КонецПроцедуры // КоманднаяПанельМатериалыДобавитьИзДокументовВыпуска()

// Процедура обработчик события нажатие кнопки командной панели.
//
Процедура КоманднаяПанельПродукцияДобавитьИзДокументовВыпуска(Кнопка)
	
	ДобавитьПродукциюИзДокументаВыпуска();
	
КонецПроцедуры // КоманднаяПанельПродукцияДобавитьИзДокументовВыпуска()

// Процедура вызывается при нажатии кнопки "Заполнить по инвентаризации"
// командной панели табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоИнвентаризации(Кнопка)
	
	Если ДокИнвентаризация.Пустая() Тогда
		Предупреждение("Не указан документ инвентаризации!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена.
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Материалы.Очистить();
	КонецЕсли;
	
	УправлениеПроизводством.ЗаполнитьМатериалыПоИнвентаризацииНЗП(
		ЭтотОбъект, 
		Материалы, 
		ДокИнвентаризация,
		Ложь, // ТолькоОтрицательныеОстатки
		Ложь // ЕстьСумма
	);
	
	Для Каждого СтрокаТабличнойЧасти Из Материалы Цикл
		СтрокаТабличнойЧасти.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоИнвентаризации()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	Если ДатаНачалаПериода > Дата Тогда
		ДатаНачалаПериода = Дата;
	КонецЕсли;
	Если ДатаОкончанияПериода < ДатаНачалаПериода Тогда
		ДатаОкончанияПериода = ДатаНачалаПериода;
	КонецЕсли;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
	
	Если Продукция.Количество() > 0 
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете) Тогда

		ЗаполнитьСчетаЗатратВТабЧастиРегл(Продукция, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаЗатратВТабЧастиРегл(Материалы, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаЗатратВТабЧастиРегл(РаспределениеМатериалов, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаЗатратВТабЧастиРегл(ВозвратныеОтходы, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаЗатратВТабЧастиРегл(РаспределениеВозвратныхОтходов, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в упр. учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	Если Продукция.Количество() > 0 
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(,ОтражатьВНалоговомУчете) Тогда
		
		ЗаполнитьСчетаЗатратВТабЧастиРегл(Продукция, Неопределено, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаЗатратВТабЧастиРегл(Материалы, Неопределено, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаЗатратВТабЧастиРегл(РаспределениеМатериалов, Неопределено, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаЗатратВТабЧастиРегл(ВозвратныеОтходы, Неопределено, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаЗатратВТабЧастиРегл(РаспределениеВозвратныхОтходов, Неопределено, ОтражатьВНалоговомУчете);
		
	КонецЕсли;
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
//
Процедура ЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "", ДопПараметры);
	
КонецПроцедуры // ЗаказНачалоВыбора()

// Процедура - обработчик события "При изменении" поля ввода Подразделение.
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПодразделениеОрганизацииПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры // ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Подразделение
//
Процедура ПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	РаботаСДиалогами.НачалоВыбораПодразделения(ТаблицаОтбора, Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	РаботаСДиалогами.НачалоВыбораПодразделенияОрганизации(ТаблицаОтбора, Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизации.
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
	
КонецПроцедуры // ПодразделениеОрганизацииНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода Подразделения организации.
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ МАТЕРИАЛЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части 
// "Материалы".
//
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
		Элемент.ТекущаяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЕсли;

КонецПроцедуры // МатериалыПриНачалеРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Материалы". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // МатериалыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	
	УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат);
	
КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" табличной части "Материалы".
//
Процедура МатериалыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // МатериалыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатрат
// в строке табличной части "Материалы".
//
Процедура МатериалыСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат);
	
КонецПроцедуры // МатериалыСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетЗатрат
// в строке табличной части "Материалы".
//
Процедура МатериалыСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // МатериалыСчетЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат
//
Процедура МатериалыСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // МатериалыСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат НУ.
//
Процедура МатериалыСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // МатериалыСчетЗатратНУОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ.
//
Процедура МатериалыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Материалы", ДопПараметры);
	
КонецПроцедуры // МатериалыЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделениеНЗП
// в строке табличной части "Материалы".
//
Процедура МатериалыПодразделениеНЗППриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
												  СтрокаТабличнойЧасти.ПодразделениеНЗП,
												  Организация);
	
КонецПроцедуры // МатериалыПодразделениеНЗППриИзменении()
											  
// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "Материалы".
//
Процедура МатериалыПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);
	
КонецПроцедуры // МатериалыПодразделениеОрганизацииНЗПНачалоВыбораИзСписка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ МАТЕРИАЛЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
		Элемент.ТекущаяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЕсли;

КонецПроцедуры // РаспределениеМатериаловПриНачалеРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "РаспределениеМатериалов". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура РаспределениеМатериаловПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиРаспределениеМатериалов, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры // РаспределениеМатериаловПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" табличной части
// "РаспределениеМатериалов" поля ввода Номенклатура
//
Процедура РаспределениеМатериаловНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
	УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат);
	
КонецПроцедуры // РаспределениеМатериаловНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" табличной части "Материалы".
//
Процедура РаспределениеМатериаловЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатрат
// в строке табличной части "Распределение материалов".
//
Процедура РаспределениеМатериаловСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат);	
	
КонецПроцедуры // РаспределениеМатериаловСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" табличной части
// "РаспределениеМатериалов" поля ввода Продукция
//
Процедура РаспределениеМатериаловПродукцияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.СерияПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.СерияПродукции = Неопределено;
	КонецЕсли; 

	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.ХарактеристикаПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаПродукции = Неопределено;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеМатериаловПродукцияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристика продукции табличной части
// "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловХарактеристикаПродукцииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеМатериаловХарактеристикаПродукцииПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации
// в табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные.Продукция, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // РаспределениеМатериаловСпецификацияНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетЗатрат
// в строке табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РаспределениеМатериаловСчетЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат
//
Процедура РаспределениеМатериаловСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // РаспределениеМатериаловСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат НУ.
//
Процедура РаспределениеМатериаловСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // РаспределениеМатериаловСчетЗатратНУОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ.
//
Процедура РаспределениеМатериаловЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеМатериалов", ДопПараметры);
	
КонецПроцедуры // РаспределениеМатериаловЗаказНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ НЗП.
//
Процедура РаспределениеМатериаловЗаказНЗПНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеМатериалов", ДопПараметры, "ЗаказНЗП");
	
КонецПроцедуры // РаспределениеМатериаловЗаказНЗПНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделениеНЗП
// в строке табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловПодразделениеНЗППриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
												  СтрокаТабличнойЧасти.ПодразделениеНЗП,
												  Организация);
	
КонецПроцедуры // РаспределениеМатериаловПодразделениеНЗППриИзменении()
											  
// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);
	
КонецПроцедуры // РаспределениеМатериаловПодразделениеОрганизацииНЗПНачалоВыбораИзСписка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПРОДУКЦИЯ

// Процедура - обработчик события ПриНачалеРедактирования 
//
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
			Элемент.ТекущиеДанные.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Продукция".
//
Процедура ПродукцияНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;
	КонецЕсли;
	ЗаполнитьСчетаЗатратРегл( СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
КонецПроцедуры // ПродукцияНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Продукция".
//
Процедура ПродукцияКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ЕдиницаМест табличной части Продукция
//
Процедура ПродукцияЕдиницаМестИзмеренияПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПродукцияЕдиницаМестИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Продукция".
//
Процедура ПродукцияКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПродукцияКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Единица табличной части Продукция
//
Процедура ПродукцияЕдиницаПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ПродукцияЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристика номенклатуры
// в строке табличной части "Продукция".
//
Процедура ПродукцияХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры // ПродукцияХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
//
Процедура ПродукцияЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Продукция", ДопПараметры);
	
КонецПроцедуры // ПродукцияЗаказНачалоВыбора()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Продукция".
//
Процедура ПродукцияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиПродукция, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиПродукция, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации
// в табличной части "Продукция".
//
Процедура ПродукцияСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.Продукция.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ПродукцияСпецификацияНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "Продукция".
//
Процедура ПродукцияСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ПродукцияСчетЗатратПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНЫЕ ОТХОДЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
			Элемент.ТекущаяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВозвратныеОтходыПриНачалеРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиВозвратныеОтходы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратныеОтходы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры // ВозвратныеОтходыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	
	ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти);
	
	СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, Неопределено);
	СтрокаТабличнойЧасти.СчетЗатрат = СчетаУчетаЗатрат.СчетУчетаБУ;
	СтрокаТабличнойЧасти.СчетЗатратНУ = СчетаУчетаЗатрат.СчетУчетаНУ;
	
КонецПроцедуры // ВозвратныеОтходыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ВозвратныеОтходыЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыЕдиницаМестПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыКоличествоМестПриИзменении(Элемент)
	
	// Рассчитать новое количество
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ВозвратныеОтходыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ВозвратныеОтходыСчетЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат
//
Процедура ВозвратныеОтходыСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ВозвратныеОтходыСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат НУ.
//
Процедура ВозвратныеОтходыСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // ВозвратныеОтходыСчетЗатратНУОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ.
//
Процедура ВозвратныеОтходыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ВозвратныеОтходы", ДопПараметры);
	
КонецПроцедуры // ВозвратныеОтходыЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделениеНЗП
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыПодразделениеНЗППриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
												  СтрокаТабличнойЧасти.ПодразделениеНЗП,
												  Организация);
	
КонецПроцедуры // ВозвратныеОтходыПодразделениеНЗППриИзменении()
											  
// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);
	
КонецПроцедуры // ВозвратныеОтходыПодразделениеОрганизацииНЗПНачалоВыбораИзСписка()

Процедура ВозвратныеОтходыКоличествоПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные, ДокументОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ РАСПРЕДЕЛЕНИЕ ВОЗВРАТНЫХ ОТХОДОВ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
		Элемент.ТекущаяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЕсли;

КонецПроцедуры // РаспределениеВозвратныхОтходовПриНачалеРедактирования()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиРаспределениеВозвратныхОтходов, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
	ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти);
	
	СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, Неопределено);
	СтрокаТабличнойЧасти.СчетЗатрат = СчетаУчетаЗатрат.СчетУчетаБУ;
	СтрокаТабличнойЧасти.СчетЗатратНУ = СчетаУчетаЗатрат.СчетУчетаНУ;
	
КонецПроцедуры // РаспределениеВозвратныхОтходовНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Единица измерения
// в строке табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "ВозвратныеОтходы".
//
Процедура РаспределениеВозвратныхОтходовСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовСчетЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода продукции
// в строке табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовПродукцияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.СерияПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.СерияПродукции = Неопределено;
	КонецЕсли; 
	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.ХарактеристикаПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаПродукции = Неопределено;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовПродукцияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристика продукции
// в строке табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовХарактеристикаПродукцииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовХарактеристикаПродукцииПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации
// в табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные.Продукция, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат
//
Процедура РаспределениеВозвратныхОтходовСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат НУ.
//
Процедура РаспределениеВозвратныхОтходовСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // РаспределениеВозвратныхОтходовСчетЗатратНУОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ.
//
Процедура РаспределениеВозвратныхОтходовЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеВозвратныхОтходов", ДопПараметры);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовЗаказНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ НЗП.
//
Процедура РаспределениеВозвратныхОтходовЗаказНЗПНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеВозвратныхОтходов", ДопПараметры, "ЗаказНЗП");
	
КонецПроцедуры // РаспределениеВозвратныхОтходовЗаказНЗПНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделениеНЗП
// в строке табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовПодразделениеНЗППриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
												  СтрокаТабличнойЧасти.ПодразделениеНЗП,
												  Организация);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовПодразделениеНЗППриИзменении()
											  
// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовПодразделениеОрганизацииНЗПНачалоВыбораИзСписка()


// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура ПродукцияСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ПродукцияСчетЗатратОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиПродукция 				= ЭлементыФормы.Продукция.Колонки;
мКолонкиМатериалы 				= ЭлементыФормы.Материалы.Колонки;
мКолонкиРаспределениеМатериалов = ЭлементыФормы.РаспределениеМатериалов.Колонки;
мКолонкиВозвратныеОтходы 				= ЭлементыФормы.ВозвратныеОтходы.Колонки;
мКолонкиРаспределениеВозвратныхОтходов 	= ЭлементыФормы.РаспределениеВозвратныхОтходов.Колонки;