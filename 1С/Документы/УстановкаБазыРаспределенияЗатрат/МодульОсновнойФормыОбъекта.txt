////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОтражатьВРегламентированномУчете;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.БазаРаспределения, ЭлементыФормы.КоманднаяПанельРаспределение.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "База распределения", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета, мСтрокаРеквизитыМеждУчета);
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента( "", ЭтотОбъект, ЭтаФорма);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();

	// Обновить содержание информационных строк.
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры".
	КолонкиБазаРаспределения = ЭлементыФормы.БазаРаспределения.Колонки;
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(КолонкиБазаРаспределения);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(КолонкиБазаРаспределения);
	
	// Установить видимость и доступность элементов формы.
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	Для Каждого СтрокаТабличнойЧасти Из БазаРаспределения Цикл
		
		// Попробуем заполнить подразделение организации.
		РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизации,
												  СтрокаТабличнойЧасти.Подразделение,
												  Организация);
	КонецЦикла;
											  
	Если БазаРаспределения.Количество() > 0 
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете) Тогда

		Для Каждого СтрокаТабличнойЧасти Из БазаРаспределения Цикл
			Если ОтражатьВБухгалтерскомУчете Тогда
				УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.ПодразделениеОрганизации, Неопределено);
			Иначе
				СтрокаТабличнойЧасти.СчетЗатрат   = Неопределено;
				СтрокаТабличнойЧасти.СчетЗатратНУ = Неопределено;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в упр. учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в международном учете.
//
Процедура ОтражатьВМеждународномУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВМеждународномУчетеПриИзменении()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры
 
// Процедура - обработчик нажатия на кнопку "Заполнить по шаблону".
//
Процедура КоманднаяПанельРаспределениеЗаполнитьПоШаблону(Кнопка)
	
	ЗаполнитьПоСпособуРаспределенияЗатрат();
	
КонецПроцедуры // КоманднаяПанельРаспределениеЗаполнитьПоШаблону()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	// Попробуем заполнить подразделение организации.
	Для Каждого СтрокаТабличнойЧасти Из БазаРаспределения Цикл
		Если СтрокаТабличнойЧасти.ПодразделениеОрганизации.Владелец <> Организация Тогда
			СтрокаТабличнойЧасти.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
													 СтрокаТабличнойЧасти.ПодразделениеОрганизации,
													 СтрокаТабличнойЧасти.Подразделение,
													 Организация);
	КонецЦикла;
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ БАЗА РАСПРЕДЕЛЕНИЯ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "БазаРаспределения".
//
Процедура БазаРаспределенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
			Элемент.ТекущиеДанные.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВариантВыпускаПродукции) Тогда
			Элемент.ТекущиеДанные.ВариантВыпускаПродукции = Перечисления.ВариантыВыпускаПродукции.СобственнаяПродукция;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // БазаРаспределенияПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода "Продукция"
// в строке табличной части "БазаРаспределения".
//
Процедура БазаРаспределенияПродукцияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.БазаРаспределения.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.СерияПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.СерияПродукции = Неопределено;
	КонецЕсли;

	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.ХарактеристикаПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаПродукции = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // БазаРаспределенияПродукцияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Спецификация"
// в строке табличной части "БазаРаспределения".
//
Процедура БазаРаспределенияСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.БазаРаспределения.ТекущиеДанные.Продукция, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // БазаРаспределенияСпецификацияНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетЗатрат"
// в строке табличной части "БазаРаспределения".
//
Процедура БазаРаспределенияСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.БазаРаспределения.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // БазаРаспределенияСчетЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетЗатрат"
// в строке табличной части "БазаРаспределения".
//
Процедура БазаРаспределенияСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // БазаРаспределенияСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетЗатратНУ"
// в строке табличной части "БазаРаспределения".
//
Процедура БазаРаспределенияСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // БазаРаспределенияСчетЗатратНУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Подразделение"
// в строке табличной части "БазаРаспределения".
//
Процедура БазаРаспределенияПодразделениеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.БазаРаспределения.ТекущиеДанные;
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизации,
												  СтрокаТабличнойЧасти.Подразделение,
												  Организация);
	
КонецПроцедуры // БазаРаспределенияПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода "ПодразделениеОрганизации"
// в строке табличной части "БазаРаспределения".
//
Процедура БазаРаспределенияПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.БазаРаспределения.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизации,
											 СтрокаТабличнойЧасти.Подразделение,
											 Организация,
											 ЭтаФорма);
	
КонецПроцедуры // БазаРаспределенияПодразделениеОрганизацииНачалоВыбораИзСписка()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Заказ"
// в строке табличной части "БазаРаспределения".
//
Процедура БазаРаспределенияЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	МассивДоступныеПоляОтбора = Новый Массив;
	СтруктураОтбора           = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
		МассивДоступныеПоляОтбора.Добавить("Организация");
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);	
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "БазаРаспределения", ДопПараметры);
	
КонецПроцедуры // БазаРаспределенияЗаказНачалоВыбора()

Процедура СпособРаспределенияЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиКомпоновки  = Новый НастройкиКомпоновкиДанных;
	
	ГруппаОтбораИЛИ = НастройкиКомпоновки.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИЛИ.Использование 	= Истина;
	ГруппаОтбораИЛИ.ТипГруппы 		= ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ТипБазыРаспределения");
	ЭлементОтбора.ПравоеЗначение 	= Перечисления.ТипыБазРаспределения.СКД;
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	
	ЭлементОтбора = ГруппаОтбораИЛИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.Использование 	= Истина;
	ЭлементОтбора.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("БазаРаспределенияЗатрат");
	ЭлементОтбора.ПравоеЗначение 	= Перечисления.БазыРаспределенияЗатрат.Вручную;
	ЭлементОтбора.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ОтборКомпоновкиДанных", НастройкиКомпоновки.Отбор);
	ПараметрыФормы.Вставить("РежимВыбора", 			 Истина);
	
	ОткрытьФорму("Справочник.СпособыРаспределенияЗатратНаВыпуск.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры