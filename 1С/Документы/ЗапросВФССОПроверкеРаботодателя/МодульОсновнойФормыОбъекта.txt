// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	ЭлементыФормы.ПанельДанных.Страницы.ДанныеОрганизации.Заголовок = "Данные " + ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("организации");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Страхователи, ЭлементыФормы.КоманднаяПанельСтрахователи);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

Процедура ОбновитьДоступностьЭлементовФормы()
	ЭлементыФормы.ДолжностьРуководителя.ТолькоПросмотр = Не ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Организация)	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		Если Не ЗначениеЗаполнено(ВидПособия) Тогда
			ВидПособия = Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность;
			Если ЗначениеЗаполнено(Организация) Тогда
				Автозаполнение("ДанныеСтрахователя");
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	АдресВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Адрес);
	АдресОрганизацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресОрганизации);
	ОбновитьДоступностьЭлементовФормы();
	
	ДоступныеЗначения = Новый СписокЗначений;
	ДоступныеЗначения.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность); 
	ДоступныеЗначения.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды); 
	ДоступныеЗначения.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет); 
	ЭлементыФормы.ВидПособия.ДоступныеЗначения = ДоступныеЗначения;
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Страхователи;
	КонецЕсли;
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

Процедура КнопкаОбновитьДанныеСтрахователяНажатие(Элемент)
	Автозаполнение("ДанныеСтрахователя");
	АдресОрганизацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресОрганизации);
КонецПроцедуры

Процедура КнопкаОбновитьДанныеСотрудникаНажатие(Элемент)
	Автозаполнение("ДанныеСотрудника");
	АдресВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Адрес);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	Если ЗначениеЗаполнено(Организация) Тогда
		Автозаполнение("ДанныеСтрахователя");
		АдресОрганизацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресОрганизации);
	КонецЕсли;
	
	ОбновитьДоступностьЭлементовФормы();
	Если ЭлементыФормы.ДолжностьРуководителя.ТолькоПросмотр Тогда
		ДолжностьРуководителя = ""
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура СотрудникПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		Автозаполнение("ДанныеСотрудника");
		АдресВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Адрес);
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // СотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникОкончаниеВводаТекста()

Процедура АдресНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтруктураАдреса = Новый Структура("Значение", Адрес);
	УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
	Адрес = СтруктураАдреса.Значение;
	Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(Адрес);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ табличного поля Страхователи

Процедура СтрахователиПриПолученииДанных(Элемент, ОформленияСтрок)
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если ЗначениеЗаполнено(ДанныеСтроки.Справка) и ЗначениеЗаполнено(ДанныеСтроки.Страхователь) Тогда
			ОформлениеСтроки.Ячейки.Страхователь.ТолькоПросмотр = Истина
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура СтрахователиСправкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.СправкаДругогоСтрахователяОЗаработке.ПолучитьФормуВыбора(, Элемент, Ссылка);
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ФормаВыбора.Отбор.Сотрудник.Установить(Сотрудник);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбора.Отбор.Организация.Установить(Организация);
	КонецЕсли;
	ФормаВыбора.Отбор.Страхователь.Использование = Истина;
	ФормаВыбора.Отбор.Страхователь.Значение = Справочники.Работодатели.ПустаяСсылка();
	ФормаВыбора.Отбор.Страхователь.ВидСравнения = ВидСравнения.НеРавно;
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура СтрахователиСправкаПриИзменении(Элемент)
	ТекущаяСтрока = ЭлементыФормы.Страхователи.ТекущаяСтрока;
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Элемент.Значение,"Страхователь,ПериодРаботыС,ПериодРаботыПо"));
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ДанныеДругогоСтрахователя(ТекущаяСтрока.Страхователь));
КонецПроцедуры

Процедура СтрахователиСтраховательПриИзменении(Элемент)
	ЗаполнитьЗначенияСвойств(ЭлементыФормы.Страхователи.ТекущаяСтрока, ДанныеДругогоСтрахователя(Элемент.Значение));
КонецПроцедуры