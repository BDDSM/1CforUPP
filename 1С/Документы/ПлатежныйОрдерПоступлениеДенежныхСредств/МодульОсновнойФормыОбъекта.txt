////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

Перем мСчетБУ;
Перем мСчетНУ;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

Перем СпецифическиеСоответствияСчетовБУиНУдляДокумента;

Перем мОтражатьВРегламентированномУчете;
Перем мПрименениеУСН;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасшифровкаПлатежа,ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

Процедура УстановитьВидимостьСубконто()
	
	Флаг = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И мОтражатьВРегламентированномУчете;
	
	Если ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам Тогда
		ТекстЗатраты = "Затраты";
		ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетУчетаРасчетовСКонтрагентом);
		ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетУчетаРасчетовСКонтрагентомНУ, "Налоговый");
	Иначе
		ТекстЗатраты = "";
		ПроизводственныеРасходы = Ложь;
		ПроизводственныеРасходыНУ = Ложь;
	КонецЕсли;
	
	Для Ном = 1 по 3 Цикл
		
		Если (Ном <= СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом)) Тогда
			ЭлементыФормы["НадписьСубконтоКт"+ТекстЗатраты+Ном].Заголовок = СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
			ЭлементыФормы["НадписьСубконтоКт"+ТекстЗатраты+Ном].Видимость = Флаг;
			ЭлементыФормы["СубконтоКт"+ТекстЗатраты+Ном].Видимость        = Флаг;
			ЭлементыФормы["НадписьСубконтоКт"+ТекстЗатраты+Ном].Доступность = НЕ ПроизводственныеРасходы;
			ЭлементыФормы["СубконтоКт"+ТекстЗатраты+Ном].Доступность      = НЕ ПроизводственныеРасходы;
		Иначе
			ЭлементыФормы["НадписьСубконтоКт"+ТекстЗатраты+Ном].Видимость = Ложь;
			ЭлементыФормы["СубконтоКт"+ТекстЗатраты+Ном].Видимость        = Ложь;
		КонецЕсли;
		
		Если НЕ мПрименениеУСН И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ) И (Ном <= СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто.Количество()) Тогда
			ЭлементыФормы["НадписьСубконтоНУКт"+ТекстЗатраты+Ном].Заголовок = СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
			ЭлементыФормы["НадписьСубконтоНУКт"+ТекстЗатраты+Ном].Видимость = Флаг;
			ЭлементыФормы["СубконтоНУКт"+ТекстЗатраты+Ном].Видимость        = Флаг;
			ЭлементыФормы["НадписьСубконтоНУКт"+ТекстЗатраты+Ном].Доступность = НЕ ПроизводственныеРасходыНУ;
			ЭлементыФормы["СубконтоНУКт"+ТекстЗатраты+Ном].Доступность      = НЕ ПроизводственныеРасходыНУ;
		Иначе
			ЭлементыФормы["НадписьСубконтоНУКт"+ТекстЗатраты+Ном].Видимость = Ложь;
			ЭлементыФормы["СубконтоНУКт"+ТекстЗатраты+Ном].Видимость        = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура устанавливает видимость закладок. 
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
		//Доступность поля "Док. расчетов:"
	Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументРасчетовСКонтрагентом.Доступность = Истина;
		ЭлементыФормы.ДокументРасчетовСКонтрагентом.Доступность                            = Истина;
	Иначе
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументРасчетовСКонтрагентом.Доступность = Ложь;
		ЭлементыФормы.ДокументРасчетовСКонтрагентом.Доступность                            = Ложь;
	КонецЕсли;

	Если ЕстьРасчетыСКонтрагентами Тогда
		
		Если Список Тогда
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
			ЭлементыФормы.РасшифровкаПлатежа.Ширина=ЭлементыФормы.ПанельПлатежи.Ширина;
			ЭлементыФормы.РасшифровкаПлатежа.Высота=ЭлементыФормы.ПанельПлатежи.Высота;
		Иначе
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;
		
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Расшифровка платежа";
		ЭлементыФормы.Сделка.Доступность=Истина;
				
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.НадписьСчетРасчетов.Видимость            = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость     = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И (ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
		ЭлементыФормы.НадписьСчетАвансов.Видимость             = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И (ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
		
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СчетУчетаРасчетовПоАвансам.Видимость     = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И (ВидОперации <> Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами);
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Истина;
		ЭлементыФормы.Список.Видимость = Истина;
		ЭлементыФормы.Список1.Видимость = Истина;
		
		Если ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочиеРасчетыСКонтрагентами Тогда
			ЭлементыФормы.Сделка.Доступность=Ложь;
		Иначе
			ЭлементыФормы.Сделка.Доступность=Истина;
		КонецЕсли;
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПрочие", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
		УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
		ИЛИ ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("КупляПродажаВалюты", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
		Если ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
			ЭлементыФормы.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов.Видимость = Ложь;
			ЭлементыФормы.НадписьКурсЦБ.Заголовок = "Курс ЦБ на дату продажи:";
		Иначе
			ЭлементыФормы.ОтражатьРазницуВКурсеВСоставеОперационныхРасходов.Видимость = Истина;
			ЭлементыФормы.НадписьКурсЦБ.Заголовок = "Курс ЦБ на дату приобретения:";
		КонецЕсли;
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам
		ИЛИ ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоБанковскимКредитам Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ОплатаПоПлатежнымКартам", ЭлементыФормы.ПанельПлатежи);
		ЭлементыФормы.ПанельПлатежи.Страницы.УчетЗатрат.Видимость = Истина;
		АвтоотметкаСчетаУчетаЗатрат();
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
	ИначеЕсли ЕстьРасчетыПоКредитам Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		
		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Расшифровка платежа";
		
		ЭлементыФормы.Сделка.Доступность=Ложь;
		
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.НадписьСчетРасчетов.Видимость            = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость     = Ложь;
		ЭлементыФормы.НадписьСчетАвансов.Видимость             = Ложь;
		
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СчетУчетаРасчетовПоАвансам.Видимость     = Ложь;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		
		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам Тогда
		ЭлементыФормы.ПанельПлатежи.ОтображениеЗакладок = ОтображениеЗакладок.Сверху;
	Иначе
		ЭлементыФормы.ПанельПлатежи.ОтображениеЗакладок = ОтображениеЗакладок.НеИспользовать;
	КонецЕсли;
	
	Если Не РасчетныйДокумент=Неопределено И Не РасчетныйДокумент.Пустая() Тогда
		ЭлементыФормы.Организация.Доступность=Ложь;
		ЭлементыФормы.СчетОрганизации.Доступность=Ложь;
		ЭлементыФормы.Контрагент.Доступность=Ложь;
		ЭлементыФормы.СчетКонтрагента.Доступность=Ложь;
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Доступность=Ложь;
		ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить.Кнопки.Заполнить.Доступность = Ложь;
	Иначе
		ЭлементыФормы.Организация.Доступность=Истина;
		ЭлементыФормы.СчетОрганизации.Доступность=Истина;
		ЭлементыФормы.Контрагент.Доступность=Истина;
		ЭлементыФормы.СчетКонтрагента.Доступность=Истина;
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации.Доступность=Истина;
		ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить.Кнопки.Заполнить.Доступность = Истина;
	КонецЕсли;
	
	Если Не РасчетныйДокумент=Неопределено Тогда
		ЭлементыФормы.ДокументПланированияПлатежа.Доступность=Ложь;
		ЭлементыФормы.ДокументПланированияПлатежаПрочие.Доступность=Ложь;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументПланированияПлатежа.Видимость=Ложь;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.КурсВзаиморасчетовПлан.Видимость=Ложь;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СуммаПлатежаПлан.Видимость=Ложь;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументПланированияПлатежа.ИзменятьВидимость=Ложь;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.КурсВзаиморасчетовПлан.ИзменятьВидимость=Ложь;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СуммаПлатежаПлан.ИзменятьВидимость=Ложь;
	Иначе
		ЭлементыФормы.ДокументПланированияПлатежа.Доступность=Истина;
		ЭлементыФормы.ДокументПланированияПлатежаПрочие.Доступность=Истина;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументПланированияПлатежа.Видимость=Истина;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.КурсВзаиморасчетовПлан.Видимость=Истина;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СуммаПлатежаПлан.Видимость=Истина;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность=Истина;
	Иначе
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность=Ложь;
	КонецЕсли;
	
	Если Не Список И НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Ложь;
		ЭлементыФормы.СуммаПлатежаПлан.Видимость=Ложь;
		ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Ложь;
		ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Ложь;
		ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Ложь;
		
	Иначе
		ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Истина;
		ЭлементыФормы.СуммаПлатежаПлан.Видимость=Истина;
		ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Истина;
		ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Истина;
		ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Истина;
		
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект,НадписьПроект1,Проект1,РасшифровкаПлатежа.Проект");
	ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = НалоговыйУчетУСН.ВидимостьКнопкиКУДиР(ЭтотОбъект);
	
КонецПроцедуры // УстановитьВидимость()

Процедура УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях()

	Флаг0 = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И мОтражатьВРегламентированномУчете;
	ЭлементыФормы.СчетУчета  .Видимость = Флаг0;
	ЭлементыФормы.НадписьСчет.Видимость = Флаг0;
	ВсегоСубконто = ?(НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом), 0, СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество());
	Для К = 1 По 3 Цикл
		Флаг = К <= ВсегоСубконто И Флаг0;
		ЭлементыФормы["СубконтоКт"        + К].Видимость = Флаг;
		ЭлементыФормы["НадписьСубконтоКт" + К].Видимость = Флаг;
	КонецЦикла;
	
	Флаг0 = ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете И мОтражатьВРегламентированномУчете И НЕ мПрименениеУСН;
	ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ       .Видимость = Флаг0;
	ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентомНУ.Видимость = Флаг0;
	ВсегоСубконто = ?(НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ), 0, СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто.Количество());
	Для К = 1 По 3 Цикл
		Флаг = К <= ВсегоСубконто И Флаг0;
		ЭлементыФормы["СубконтоНУКт"        + К].Видимость = Флаг;
		ЭлементыФормы["НадписьСубконтоНУКт" + К].Видимость = Флаг;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
Процедура ПроверкаКурсовВалют()
	
	КурсДокумента=?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента=?(КратностьДокумента=0,1, КратностьДокумента);
	СтрокаПлатеж.КурсВзаиморасчетов=?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
	СтрокаПлатеж.КратностьВзаиморасчетов=?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);
	
КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Организация = СтрокаПлатеж.ДоговорКонтрагента.Организация;
		
		ПриИзмененииОрганизации();
		
	КонецЕсли;
	
	Если Контрагент.Пустая() Тогда
		Контрагент=СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
	
	СтрокаПлатеж.ДокументПланированияПлатежа=Документы.ПланируемоеПоступлениеДенежныхСредств.ПустаяСсылка();
	СтрокаПлатеж.Сделка=Неопределено;
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Неопределено; 
	
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(мТекущаяВалютаВзаиморасчетов, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	РассчитатьСуммуВзаиморасчетов();
	
	Если ОтражатьВБухгалтерскомУчете
		И НЕ(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты) Тогда
		
		УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Истина);
	Иначе
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаПлатеж.Проект=СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	УправлениеДенежнымиСредствами.ПриИзмененииКонтрагентаВПлатежномДокументе(ДокументОбъект, СтрокаПлатеж);
	
	ИННПолучателя = Контрагент.ИНН;
	КПППолучателя = Контрагент.КПП;
	
КонецПроцедуры // ПриИзмененииКонтрагента

Процедура ПриИзмененииОрганизации()
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	НачальноеЗаполнениеПриВыбореОрганизации();
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СчетОрганизации=Организация.ОсновнойБанковскийСчет;
	Иначе
		СчетОрганизации=Неопределено;
	КонецЕсли;
	
	ПриИзмененииСчетаОрганизации();
	
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
	ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = НалоговыйУчетУСН.ВидимостьКнопкиКУДиР(ЭтотОбъект);
	
КонецПроцедуры // ПриИзмененииОрганизации()


// Процедура выполняет действия, необходимые при выборе счета организации
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаОрганизации()
	
	Если СчетОрганизации.Пустая() Тогда
		ТекстПлательщика = "";
		Возврат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Организация=СчетОрганизации.Владелец;
	КонецЕсли;
	
	СтараяСуммаДокумента=СуммаДокумента;
	
	ПересчитыватьСумму=Истина;
	РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)), СуммаДокумента, СчетОрганизации.ВалютаДенежныхСредств, ПересчитыватьСумму);
	
	КоэффициентПересчета=?(СтараяСуммаДокумента=0,0,СуммаДокумента/СтараяСуммаДокумента);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		Для Каждого Строка Из РасшифровкаПлатежа Цикл
			
			Если ПересчитыватьСумму Тогда
				Строка.СуммаПлатежа=Строка.СуммаПлатежа*КоэффициентПересчета;
				УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(Строка);
			КонецЕсли;
			
			мТекущаяВалютаВзаиморасчетов = Строка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			Если ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов) Тогда
				
				Строка.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа, ВалютаДокумента,
				мТекущаяВалютаВзаиморасчетов,
				КурсДокумента, Строка.КурсВзаиморасчетов,
				КратностьДокумента, Строка.КратностьВзаиморасчетов);
				
				Если ЗначениеЗаполнено(Строка.ДокументПланированияПлатежа) Тогда
					
					ВалютаПлатежаПлан=Строка.ДокументПланированияПлатежа.ВалютаДокумента;
					Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
						Строка.ДокументПланированияПлатежа="";
						Строка.КурсВзаиморасчетовПлан=0;
						Строка.СуммаПлатежаПлан=0;
					ИначеЕсли Строка.КурсВзаиморасчетовПлан>0 Тогда
						
						Если мТекущаяВалютаВзаиморасчетов=ВалютаДокумента Тогда
							Строка.СуммаПлатежаПлан=Строка.СуммаВзаиморасчетов;
							
						ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетовПлан <> 0) Тогда
							Строка.СуммаПлатежаПлан=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, мТекущаяВалютаВзаиморасчетов,
							ВалютаДокумента,
							Строка.КурсВзаиморасчетовПлан,КурсДокумента,
							Строка.КратностьВзаиморасчетов,КратностьДокумента);	
						Иначе
							Строка.СуммаПлатежаПлан = 0;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;
			
			Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
				СтрокаПлатеж.ДокументПланированияПлатежа="";
				СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
				СтрокаПлатеж.СуммаПлатежаПлан=0;
			КонецЕсли
			
		КонецЕсли;	
		
		СуммаДокументаПриИзменении();
		
	КонецЕсли;
	
	УстановитьФокус();
	УстановитьВидимость();
	
	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетКонтрагента="";
	КонецЕсли;	
	
	ЭлементыФормы.НадписьВалютаДокумент.Заголовок=СчетОрганизации.ВалютаДенежныхСредств.Наименование;
	
	Если НЕ СчетОрганизации.Пустая() Тогда
		ТекстПлательщика  = СчетОрганизации.ТекстКорреспондента;
	Иначе	
		ТекстПлательщика  = "";
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура рассчитывает сумму взаиморасчетов.
//
Процедура РассчитатьСуммуВзаиморасчетов()
	
	ПроверкаКурсовВалют();
	
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		
		КурсНаДатуПриобретенияРеализацииВалюты = ?(КурсНаДатуПриобретенияРеализацииВалюты      = 0, 1, КурсНаДатуПриобретенияРеализацииВалюты);
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
		мТекущаяВалютаВзаиморасчетов,
		СтрокаПлатеж.КурсВзаиморасчетов, 1,
		СтрокаПлатеж.КратностьВзаиморасчетов, 1);
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		
		КурсНаДатуПриобретенияРеализацииВалюты = ?(КурсНаДатуПриобретенияРеализацииВалюты      = 0, 1, КурсНаДатуПриобретенияРеализацииВалюты);
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
		мТекущаяВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	Иначе
		
		СтрокаПлатеж.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
		мТекущаяВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	КонецЕсли;
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

// Процедура рассчитывает сумму платежа по заявке.
//
Процедура РассчитатьСуммуПлатежаПлан()
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКурсовВалют();
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			
			СтрокаПлатеж.СуммаПлатежаПлан=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаДокумента,
			ВалютаДокумента,
			КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетовПлан,
			КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
			
			ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			СтрокаПлатеж.СуммаПлатежаПлан=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
			ВалютаДокумента,
			СтрокаПлатеж.КурсВзаиморасчетовПлан,КурсДокумента,
			СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
			
		Иначе
			
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
			
		КонецЕсли;
		
		Возврат;
		
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
		
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетовПлан <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
		ВалютаДокумента,
		СтрокаПлатеж.КурсВзаиморасчетовПлан,КурсДокумента,
		СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан = 0;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуПлатежаПлан()

// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют();
	
	Если ЕстьРасчетыСКонтрагентами 
	   ИЛИ ЕстьРасчетыПоКредитам
 	   ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
	   ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
	   
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
		
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
		ВалютаДокумента,
		СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
		СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуПлатежа()

//Процедура рассчитывает курс взаиморасчетов по заявке
//
Процедура РассчитатьКурсВзаиморасчетовПлан()
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтрокаПлатеж.СуммаПлатежаПлан * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
		/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

// Процедура выполняет действия, необходимые при выборе счета контрагента
//
// Параметры:
//  Нет.
//
Процедура ПриИзмененииСчетаКонтрагента()
	
	Если СчетКонтрагента.Пустая() Тогда
		ТекстПолучателя = "";
		Возврат;
	КонецЕсли;
	
	Если Контрагент.Пустая() Тогда
		Контрагент=СчетКонтрагента.Владелец;
		ПриИзмененииКонтрагента();
		ПриИзмененииДоговора();
		УстановитьФокус();
	КонецЕсли;
	
	Если НЕ СчетКонтрагента.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=СчетКонтрагента.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта счета контрагента не соответствует валюте счета организации!");
		СчетКонтрагента="";
		Возврат;
	КонецЕсли;	
	
	Если НЕ СчетКонтрагента.Пустая() Тогда
		ТекстПолучателя   = СчетКонтрагента.ТекстКорреспондента;
	Иначе	
		ТекстПолучателя   = "";
	КонецЕсли;	
	
КонецПроцедуры // ПриИзмененииСчетаКонтрагента()

Процедура НачальноеЗаполнениеПриВыбореКонтрагента()
	
	Если НЕ Контрагент.Пустая() Тогда
		
		ИННПолучателя = Контрагент.ИНН;
		КПППолучателя = Контрагент.КПП;
		
		Если НЕ СчетКонтрагента.Пустая() Тогда
			ТекстПолучателя   = СчетКонтрагента.ТекстКорреспондента;
		Иначе	
			ТекстПолучателя   = "";
		КонецЕсли;
		
	Иначе
		
		ИННПолучателя = "";
		КПППолучателя = "";
		СчетКонтрагента = Справочники.БанковскиеСчета.ПустаяСсылка();
		
	КонецЕсли;
	
	
КонецПроцедуры

// Процедура выполняет действия, необходимые при выборе организации
//
// Параметры:
//  Нет.
//
Процедура НачальноеЗаполнениеПриВыбореОрганизации()
	
	Если НЕ Организация.Пустая() Тогда
		
		ИННПлательщика  = Организация.ИНН; 
		КПППлательщика  = Организация.КПП; 
		
		Если НЕ СчетОрганизации.Пустая() Тогда
			ТекстПлательщика  = СчетОрганизации.ТекстКорреспондента;
		Иначе	
			ТекстПлательщика  = "";
		КонецЕсли;
		
	Иначе	
		
		ИННПлательщика  = Организация.ИНН; 
		КПППлательщика  = Организация.КПП; 
		СчетОрганизации = Справочники.БанковскиеСчета.ПустаяСсылка();
		
	КонецЕсли;	
	
КонецПроцедуры	// НачальноеЗаполнениеПриВыбореОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока = РасшифровкаПлатежа[0];
	СтрокаПлатеж = ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа,,ПараметрОбъектКопирования);
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
			
			НачальноеЗаполнениеПриВыбореОрганизации();
			НачальноеЗаполнениеПриВыбореКонтрагента();		
			УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
			
		Иначе
			
			УстановитьКурсДокумента();
			ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
			ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
			
		КонецЕсли;
		
	Иначе
		
		УстановитьКурсДокумента();
		ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
		
	КонецЕсли;
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	ВидОперации.Метаданные().ЗначенияПеречисления, 
	Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
	
	Если РасшифровкаПлатежа.Количество()>1 Тогда
		Список = Истина;
	Иначе
		Список = Ложь;
	КонецЕсли;
	
	//Установка меню Клиент-Банк
	РаботаСДиалогами.УстановкаПодменюКлиентБанк(ЭтаФорма.ЭлементыФормы.ДействияФормы.Кнопки.Подменю1.Кнопки.КлиентБанк, ЭтотОбъект);
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	УстановитьВидимостьСубконто();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)
	
	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств[Кнопка.Имя] Тогда
			Возврат;
		КонецЕсли; 
		
		ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств[Кнопка.Имя];
		
		РасшифровкаПлатежа.Очистить();
		СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		Список = Ложь;
		
		УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
		
		Если ОтражатьВБухгалтерскомУчете
			И НЕ(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты) Тогда
			
			УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Истина);
		Иначе
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
		УстановитьФокус();
		
		ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
		
		Если ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты
			И СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			
			Сообщить("Выбранный счет является валютным и не может использоваться в данной ситуации.");
			СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			
		ИначеЕсли
			
			ВидОперации=Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
			И НЕ СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом.Валютный Тогда
			
			Сообщить("Выбранный счет не является валютным и не может использоваться в данной ситуации.");
			СчетУчетаРасчетовСКонтрагентом=ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			
		КонецЕсли;
		
		УстановитьВидимость();
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	Если мПрименениеУСН Тогда
		НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура заполняет реквизиты документа по созданному в режиме обработки "Клиент банк" контрагенту
//
Процедура ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
	
	Если Контрагент.Пустая() Тогда
		
		Контрагент            			=НовыйКонтрагент;
		СчетКонтрагента					=НовыйКонтрагент.ОсновнойБанковскийСчет;
		СтрокаПлатеж.ДоговорКонтрагента =НовыйКонтрагент.ОсновнойДоговорКонтрагента;
		
		ВалютаВзаиморасчетов=СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		СтруктураКурсаВзаиморасчетов         = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, КонецДня(ДатаОплаты));
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		
		СтрокаПлатеж.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа,
		ВалютаДокумента, 
		ВалютаВзаиморасчетов,
		КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
		КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);
		
		РеквизитыКонтрагента.Очистить();
		
		//Установка меню Клиент-Банк
		РаботаСДиалогами.УстановкаПодменюКлиентБанк(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1.Кнопки.КлиентБанк, ЭтотОбъект);
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьРеквизитыПоКонтрагенту()

//Процедура вызывается при выборе пункта подменю "Клиент-Банк" командной панели
//
Процедура ОсновныеДействияФормыКнопкиКонтрагента(Кнопка)
	
	Если РеквизитыКонтрагента.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Обработка =Обработки.КлиентБанк.Создать();
	Обработка.Организация =Организация;
	ТипКонтрагента=Лев(РеквизитыКонтрагента[0].Реквизит,10);
	
	СтрокаИНН=РеквизитыКонтрагента.Найти(ТипКонтрагента+"ИНН","Реквизит");
	
	Если НЕ СтрокаИНН=Неопределено Тогда
		
		ИННКраткий=СтрокаИНН.Значение;
		НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
		
		Если НЕ НовыйКонтрагент.Пустая() Тогда
			
			ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
			Предупреждение("Контрагент с ИНН "+ИННКраткий+" уже был создан ранее.")
			
		Иначе                         
			
			Если РеквизитыКонтрагента.Количество()>0 Тогда
				                            
				ФормаКонтрагентов =Обработка.ПолучитьФорму("ФормаКонтрагентов",ЭтаФорма);
				ФормаКонтрагентов.СформироватьИЗагрузитьДеревоПоТаблицеЗначений(РеквизитыКонтрагента);
				ФормаКонтрагентов.ОткрытьМодально();
				
				//Проверяем, не был ли создан контрагент в сеансе работы с обработкой
				НовыйКонтрагент =Справочники.Контрагенты.НайтиПоРеквизиту("ИНН",ИННКраткий);
				
				Если НЕ НовыйКонтрагент.Пустая() Тогда
					
					ЗаполнитьРеквизитыПоКонтрагенту(НовыйКонтрагент);
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;		
	
	УстановитьВидимость();
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)
	
	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	
	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
	УстановитьКурсДокумента();
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты)));
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Обработчик события "ПриИзменении" реквизита "Организация"
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизации();
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
    УстановитьВидимость();

КонецПроцедуры // ОрганизацияПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетКонтрагента"
//
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииСчетаКонтрагента();
	
КонецПроцедуры // СчетКонтрагентаПриИзменении()

// Обработчик события "ПриИзменении" реквизита "СчетОрганизации"
//
Процедура СчетОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииСчетаОрганизации();
	
КонецПроцедуры // СчетОрганизацииПриИзменении()

// Обработчик события "ПриИзменении" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
	УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
	
КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Обработчик события "ПриИзменении" реквизита "СтавкаНДС"
//
Процедура СтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры // СтавкаНДСПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		
		ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
		ФормаВводаКурсаИКратности.Валюта          = ВалютаДокумента;
		ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
		ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
		ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
		
		СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
		
		Если СтруктураКурсаИКратности <> неопределено Тогда
			
			СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
			
		КонецЕсли;
		
	Иначе
		
		// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
			Возврат;
		КонецЕсли;
		
		ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
		ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
		ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
		ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
		
		СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
		
		Если СтруктураКурсаИКратности <> неопределено Тогда
			
			СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
			СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
			
		КонецЕсли;
		
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

Процедура СуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПроверкаКурсовВалют();
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
			
			СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
			/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			
			СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаВзаиморасчетов * КратностьДокумента
			/ СтрокаПлатеж.СуммаПлатежа * СтрокаПлатеж.КратностьВзаиморасчетов;
		Иначе
			
			СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
			/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
			
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Контрагент".
//
Процедура КонтрагентПриИзменении(Элемент)
	
	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СчетКонтрагента=Контрагент.ОсновнойБанковскийСчет;
	Иначе
		СчетКонтрагента=Неопределено;
	КонецЕсли;
	
	ПриИзмененииСчетаКонтрагента();
	
	ПриИзмененииДоговора();
	УстановитьФокус();
	
КонецПроцедуры

Процедура РасчетныйДокументПриИзменении(Элемент)
	
	РасшифровкаПлатежа.Очистить();
	
	Если НЕ РасчетныйДокумент=Неопределено Тогда
		
		Если РасчетныйДокумент.Оплачено Тогда
			Сообщить("Платежный ордер не вводится на основании документов, уже исполненных банком.");
			РасчетныйДокумент=Неопределено;
			СтрокаПлатеж=РасшифровкаПлатежа.Добавить();
		Иначе
			
			ЗаполнитьПоРасчетномуДокументуУпр();
			
			// Отобразить в заголовке формы вид операции.
			РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;	
	
	СтруктураКурсаДокумента           = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента,Дата);
	КурсДокумента      = СтруктураКурсаДокумента.Курс;
	КратностьДокумента = СтруктураКурсаДокумента.Кратность;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	СписокТипов=Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеВходящее"].Имя,        	Метаданные.Документы["ПлатежноеПоручениеВходящее"].Представление());
	СписокТипов.Добавить(Метаданные.Документы["АккредитивПолученный"].Имя,        			Метаданные.Документы["АккредитивПолученный"].Представление());
	СписокТипов.Добавить(Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Имя,        	Метаданные.Документы["ИнкассовоеПоручениеПереданное"].Представление());
	СписокТипов.Добавить(Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Имя,       Метаданные.Документы["ПлатежноеТребованиеВыставленное"].Представление());
	
	// Пользователь выбирает тип расчетного документа
	ВыбранныйЭлемент = ВыбратьИзСписка(СписокТипов, Элемент);
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат; // пользователь отказался от выбора
	КонецЕсли;
	
	ТипРасчетногоДокумента = ВыбранныйЭлемент.Значение;
	
	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипРасчетногоДокумента].ПолучитьФормуВыбора(,Элемент,);
	
	ФормаВыбора.Отбор.Оплачено.Значение=Ложь;
	ФормаВыбора.Отбор.Оплачено.Использование=Истина;
	
	Если (ЗначениеЗаполнено(Элемент.Значение)) И ТипЗнч(Элемент.Значение)=Тип("ДокументСсылка."+ТипРасчетногоДокумента) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока=Элемент.Значение;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура РасчетныйДокументОчистка(Элемент, СтандартнаяОбработка)
	
	РасшифровкаПлатежа.Очистить();
	
	НоваяСтрока=РасшифровкаПлатежа.Добавить();
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;	
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	Если СтрокаПлатеж <> Неопределено Тогда
		
		ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
			
			СтрокаКурса = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, 
			СтрокаПлатеж.КурсВзаиморасчетов,
			СтрокаПлатеж.КратностьВзаиморасчетов,
			мВалютаРегламентированногоУчета,
			Истина);
			
		Иначе
			
			СтрокаКурса = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетовПоДоговору, 
			СтрокаПлатеж.КурсВзаиморасчетов,
			СтрокаПлатеж.КратностьВзаиморасчетов,
			мВалютаРегламентированногоУчета,
			Истина);
			
		КонецЕсли;
		
		ЭлементыФормы.ИнфНадписьКурса.Заголовок = СтрокаКурса;
		ЭлементыФормы.ИнфНадписьКурса1.Заголовок = СтрокаКурса;
		
		ЭлементыФормы.НадписьВалютаДокумент.Заголовок = Строка(СчетОрганизации.ВалютаДенежныхСредств);
		
		// Надпись НадписьСуммаВзаиморасчетов
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
			СтрокаСумма = "Сумма <нет валюты>:";
		Иначе
			СтрокаСумма = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;
		
		ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = СтрокаСумма;
		ЭлементыФормы.НадписьСуммаВзаиморасчетов1.Заголовок = СтрокаСумма;
		
		ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
		Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
		" "+СокрЛП(ВалютаДокумента);
		
		Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				
				ВалютаВзаиморасчетов = ВалютаВзаиморасчетовПоДоговору;
				
			ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
				
				ВалютаВзаиморасчетов = ВалютаВзаиморасчетовПоДоговору;
				
			КонецЕсли;
			
			
			ТекстКурсаЗаявки= РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, 
			СтрокаПлатеж.КурсВзаиморасчетовПлан,
			СтрокаПлатеж.КратностьВзаиморасчетов,
			мВалютаРегламентированногоУчета,
			Истина);
			
		Иначе
			
			ТекстКурсаЗаявки = "";
			
		КонецЕсли;
		
		ЭлементыФормы.ИнфНадписьКурсаЗаявки.Заголовок=ТекстКурсаЗаявки;
		ЭлементыФормы.ИнфНадписьКурсаЗаявки1.Заголовок=ТекстКурсаЗаявки;
		
	КонецЕсли;
	
	Если ЭлементыФормы.НадписьСделка.Заголовок="Сделка:" Тогда
		
		ЭлементыФормы.НадписьСделка.Высота=19;
		ЭлементыФормы.НадписьСделка.ВертикальноеПоложение=ВертикальноеПоложение.Центр;
		
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Высота=19;
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Верх=24;
		
	Иначе
		
		ЭлементыФормы.НадписьСделка.Высота=27;
		ЭлементыФормы.НадписьСделка.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
		
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Высота=15;
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Верх=29;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если ОтражатьВБухгалтерскомУчете
		И НЕ(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты) Тогда
		
		УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Истина);
	Иначе
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

Процедура СчетУчетаПриИзменении(Элемент)
	
	Если Элемент.Значение = мСчетБУ тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СубконтоКт1, ЭлементыФормы.СубконтоКт1,
		СубконтоКт2, ЭлементыФормы.СубконтоКт2,
		СубконтоКт3, ЭлементыФормы.СубконтоКт3);
	
	мСчетБУ = Элемент.Значение;

    Если ОтражатьВНалоговомУчете И НЕ мПрименениеУСН Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств Тогда
			Если СпецифическиеСоответствияСчетовБУиНУдляДокумента.Получить(Элемент.Значение)= Неопределено тогда
				СчетУчетаРасчетовСКонтрагентомНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",  Элемент.Значение), , Дата);
			Иначе
				СчетУчетаРасчетовСКонтрагентомНУ = СпецифическиеСоответствияСчетовБУиНУдляДокумента.Получить(Элемент.Значение);
			КонецЕсли;
			СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);
		КонецЕсли;
	Иначе
		СчетУчетаРасчетовСКонтрагентомНУ = Неопределено;
		СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);
	КонецЕсли;

	УстановитьВидимостьСубконто();
	
КонецПроцедуры // СчетУчетаПриИзменении()

Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Субконто1"
//
Процедура СубконтоКт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоКт"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоКт"+н]);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоКт1"
//
Процедура СубконтоКт1ПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ мПрименениеУСН Тогда
		БухгалтерскийУчет.ЗаменитьСубконтоНУ(СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовСКонтрагентомНУ, 1, СубконтоКт1, СубконтоНУКт1);
		СчетУчетаРасчетовСКонтрагентомНУ = НалоговыйУчет.ОпределитьСчетНУВШапке(Организация, Дата, СчетУчетаРасчетовСКонтрагентом, СубконтоКт1,СубконтоКт2,СубконтоКт3);
	Иначе
		СчетУчетаРасчетовСКонтрагентомНУ = Неопределено;
	КонецЕсли;	
	СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоКт2");
	СписокСубконто.Добавить("СубконтоКт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
	УстановитьВидимостьСубконто();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоНУКт1"
//
Процедура СубконтоКтНУ1ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоНУКт2");
	СписокСубконто.Добавить("СубконтоНУКт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	УправлениеДенежнымиСредствами.ПроверкаРасшифровкиПлатежногоДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	Если Ответственный.Пустая() Тогда
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;
		Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом) Тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом=СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
		
		СтатьяДвиженияДенежныхСредств=СтрокаПлатеж.СтатьяДвиженияДенежныхСредств;
		
	Иначе
		ДоговорКонтрагента=Новый(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам Тогда
		Если не РасшифровкаПлатежа.НайтиСтроки(Новый Структура("СчетУчетаРасчетовПоАвансам", ПланыСчетов.Хозрасчетный.ПустаяСсылка())).Количество() = РасшифровкаПлатежа.Количество() тогда
			РасшифровкаПлатежа[0].СчетУчетаРасчетовПоАвансам = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
	УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ПроверкаКурсовВалют();
	
	ДоговорСтрокаПлатеж = СтрокаПлатеж.ДоговорКонтрагента;
	Если НЕ ДоговорСтрокаПлатеж.РасчетыВУсловныхЕдиницах
		И ДоговорСтрокаПлатеж.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	КонецЕсли;
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
		/ СтрокаПлатеж.СуммаВзаиморасчетов / КратностьДокумента;
	КонецЕсли;
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура СуммаДокументаПриИзменении()
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
			РассчитатьСуммуВзаиморасчетов();
			
		Иначе
			
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты
				ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
				
				РассчитатьСуммуВзаиморасчетов();
				
			Иначе
				
				СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
				
				Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
					
					СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
								
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если мПрименениеУСН Тогда
		НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеПриВыборе(ИсходноеЗначение,ЗначениеВыбора)
	
	Если НЕ ЗначениеЗаполнено(ИсходноеЗначение) Тогда
		ИсходноеЗначение=ЗначениеВыбора;
	КонецЕсли;
	
КонецПроцедуры // УстановитьЗначениеПриВыборе() 

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();			
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
			
			УстановитьФокус();
			
			УстановитьВидимость();
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	ИначеЕсли Источник.КлючУникальности="ФормаПодбораПланируемыхПлатежей" Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда	
				
				НДСПоУмолчанию=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
				
				СтрокаПлатеж.ДоговорКонтрагента=ЗначениеВыбора.ДоговорКонтрагента;
				ПриИзмененииДоговора();
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетов;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Сделка,ЗначениеВыбора.Сделка);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КурсВзаиморасчетов,ЗначениеВыбора.КурсВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КратностьВзаиморасчетов,ЗначениеВыбора.КратностьВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаВзаиморасчетов,ЗначениеВыбора.СуммаВзаиморасчетов);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
			Если СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа 
				ИЛИ СтрокаПлатеж.СуммаПлатежа=0 Тогда
				
				СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа;
				СтрокаПлатеж.СуммаПлатежаПлан=ЗначениеВыбора.СуммаПлатежаПлан;
				
			ИначеЕсли СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
				
				РассчитатьСуммуПлатежаПлан();
				
			КонецЕсли;
			
			УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРеглУчета(ЭтотОбъект,СтрокаПлатеж, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
		Иначе
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаПлатежа,ЗначениеВыбора.СуммаПлатежа);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетов;
			
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			//СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
			РассчитатьСуммуВзаиморасчетов();
			
		КонецЕсли;
		
	Иначе
		
		НДСПоУмолчанию=?(НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС),УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС"),
		СтрокаПлатеж.СтавкаНДС);
		
		УправлениеДенежнымиСредствами.ОбработкаПодбораЗадолженностей(ЭтотОбъект,СтрокаПлатеж,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента, НДСПоУмолчанию,Неопределено);
		
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
		
		Если ОтражатьВБухгалтерскомУчете
			И НЕ(ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.РасчетыПоКредитамИЗаймам
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты) Тогда
			
			УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Истина);
		Иначе
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьФокус();
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,">0");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Ложь);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодбор(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,">0");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Ложь);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,СчетОрганизации);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,">0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("СсылкаНаДокумент"				,?(Проведен, Ссылка, ЭтотОбъект));
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"	,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		РассчитатьСуммуПлатежа();
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
	СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
	СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаПрочиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Безналичные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ПланируемыеПоступленияДенежныхСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Ложь);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
	СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,СчетОрганизации);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ДоговорКонтрагента"			,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Сделка"						,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

Процедура СуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты));
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;
		
	КонецЕсли;
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = ?(ДатаОплаты='00010101',Дата,КонецДня(ДатаОплаты));
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> неопределено Тогда
		
		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;
		
	КонецЕсли;
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура ыыполняет настройку платежа УСН
//
Процедура ДействияФормыНастройкаУСН(Кнопка)
	
	ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиПлатежаУСН");
	
	ФормаНастройки.Графа4       = Графа4_УСН;
	ФормаНастройки.Графа5       = Графа5_УСН;
	ФормаНастройки.Графа6       = Графа6_УСН;
	ФормаНастройки.Графа7       = Графа7_УСН;
	ФормаНастройки.НДС          = НДС_УСН;
	ФормаНастройки.ДоходЕНВД    = ДоходыЕНВД_УСН;
	ФормаНастройки.РасходЕНВД   = РасходыЕНВД_УСН;
	ФормаНастройки.Содержание   = Содержание_УСН;
	ФормаНастройки.ТолькоДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	
	СруктураПараметров = ФормаНастройки.ОткрытьМодально();
	
	Если СруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Графа4_УСН      <> СруктураПараметров.Графа4
		ИЛИ Графа5_УСН      <> СруктураПараметров.Графа5
		ИЛИ Графа6_УСН      <> СруктураПараметров.Графа6
		ИЛИ Графа7_УСН      <> СруктураПараметров.Графа7
		ИЛИ НДС_УСН         <> СруктураПараметров.НДС
		ИЛИ ДоходыЕНВД_УСН  <> СруктураПараметров.ДоходыЕНВД
		ИЛИ РасходыЕНВД_УСН <> СруктураПараметров.РасходыЕНВД
		ИЛИ Содержание_УСН  <> СруктураПараметров.Содержание Тогда
		
		РучнаяНастройка_УСН = Истина;
		
	КонецЕсли;
	
	Графа4_УСН      = СруктураПараметров.Графа4;
	Графа5_УСН      = СруктураПараметров.Графа5;
	Графа6_УСН      = СруктураПараметров.Графа6;
	Графа7_УСН      = СруктураПараметров.Графа7;
	НДС_УСН         = СруктураПараметров.НДС;
	ДоходыЕНВД_УСН  = СруктураПараметров.ДоходыЕНВД;
	РасходыЕНВД_УСН = СруктураПараметров.РасходыЕНВД;
	Содержание_УСН  = СруктураПараметров.Содержание;
	
КонецПроцедуры // ДействияФормыНастройкаУСН()

Процедура ДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
КонецПроцедуры

Процедура КурсНаДатуПриобретенияРеализацииВалютыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПриобретениеИностраннойВалюты Тогда
		
		ВалютаПодбора = ВалютаДокумента;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступленияОтПродажиИностраннойВалюты Тогда
		
		ВалютаПодбора = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
	КонецЕсли;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаПодбора;
	ФормаВводаКурсаИКратности.КратностьВалюты = 1;
	ФормаВводаКурсаИКратности.КурсВалюты      = КурсНаДатуПриобретенияРеализацииВалюты;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> неопределено Тогда
		
		КурсНаДатуПриобретенияРеализацииВалюты = СтруктураКурсаИКратности.КурсВалюты;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура РасшифровкаПлатежаПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура Проект1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура Проект2НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПриИзмененииСтатьиДДС(Строка)
	
	Если НЕ ЗначениеЗаполнено(Строка.Проект) Тогда
		
		ВидРаспределения=УправлениеПроектами.ПолучитьВидРаспределенияДляСтатьиДДС(Строка.СтатьяДвиженияДенежныхСредств, ?(Оплачено,ДатаОплаты,Дата));
		
		Если НЕ ВидРаспределения=Неопределено Тогда
			Строка.Проект=ВидРаспределения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСтатьиДДС()

Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПрочиеПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредств1ПриИзменении(Элемент)
	
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура НазначениеПлатежаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаНазначениеПлатежа = ПолучитьФорму("ФормаНазначениеПлатежа");
	ФормаНазначениеПлатежа.ДокументОбъект = ДокументОбъект;
	ФормаНазначениеПлатежа.ОткрытьМодально();
	
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомНУПриИзменении(Элемент)
	
	Если Элемент.Значение = мСчетНУ тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимостьСубконто();
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
			СубконтоНУКт1, ЭлементыФормы.СубконтоНУКт1,
			СубконтоНУКт2, ЭлементыФормы.СубконтоНУКт2,
			СубконтоНУКт3, ЭлементыФормы.СубконтоНУКт3);

	мСчетНУ = Элемент.Значение;
	
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ЗАКЛАДКИ "УЧЕТ ЗАТРАТ"

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатрат.
//
Процедура СтатьяЗатратПриИзменении(Элемент)
	
	СчетаУчета = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизацииЗатраты, СтатьяЗатрат);
	СчетУчетаРасчетовСКонтрагентом 	 = СчетаУчета.СчетУчетаБУ;
	СчетУчетаРасчетовСКонтрагентомНУ = СчетаУчета.СчетУчетаНУ;
	
	СчетУчетаПриИзменении(ЭлементыФормы.СчетУчетаЗатрат);
	СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаЗатратНУ);
	
	УстановитьВидимость();
	
КонецПроцедуры // СтатьяЗатратПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение.
// 
Процедура ПодразделениеЗатратыПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
	ПодразделениеОрганизацииЗатраты,
	ПодразделениеЗатраты,
	Организация);
	
КонецПроцедуры // ПодразделениеЗатратыПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации.
//
Процедура ПодразделениеОрганизацииЗатратыНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
	Элемент,
	ПодразделениеОрганизацииЗатраты,
	ПодразделениеЗатраты,
	Организация,
	ЭтаФорма);
	
КонецПроцедуры // ПодразделениеОрганизацииЗатратыНачалоВыбораИзСписка()

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)
	
	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);
	
КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)
	
	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");
	
КонецПроцедуры

Процедура ДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента,
	СтрокаПлатеж.Сделка, СтандартнаяОбработка, "Расход");
КонецПроцедуры

Процедура СуммаУслугПриИзменении(Элемент)
	
	АвтоотметкаСчетаУчетаЗатрат();
	
КонецПроцедуры

Процедура АвтоотметкаСчетаУчетаЗатрат()
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам Тогда
		ЭлементыФормы.СчетУчетаЗатрат.АвтоОтметкаНезаполненного = (не СуммаУслуг = 0);
		ЭлементыФормы.СчетУчетаЗатрат.АвтоВыборНезаполненного = (не СуммаУслуг = 0);
	КонецЕсли; 
КонецПроцедуры

Процедура СчетУчетаЗатратПриИзменении(Элемент)
	
	Если Элемент.Значение = мСчетБУ тогда
		Возврат;
	КонецЕсли;

	УстановитьВидимостьСубконто();

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	СубконтоКт1, ЭлементыФормы.СубконтоКтЗатраты1,
	СубконтоКт2, ЭлементыФормы.СубконтоКтЗатраты2,
	СубконтоКт3, ЭлементыФормы.СубконтоКтЗатраты3);
	
	мСчетБУ = Элемент.Значение;

    Если ОтражатьВНалоговомУчете тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПрочееПоступлениеБезналичныхДенежныхСредств 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ПоступлениеОплатыПоПлатежнымКартам тогда
			Если СпецифическиеСоответствияСчетовБУиНУдляДокумента.Получить(Элемент.Значение)= Неопределено тогда
				СчетУчетаРасчетовСКонтрагентомНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",  Элемент.Значение), , Дата);
			Иначе
				СчетУчетаРасчетовСКонтрагентомНУ = СпецифическиеСоответствияСчетовБУиНУдляДокумента.Получить(Элемент.Значение);
			КонецЕсли;
			СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаЗатратНУ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетУчетаЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();

КонецПроцедуры

Процедура СубконтоКт2ПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ мПрименениеУСН Тогда
		БухгалтерскийУчет.ЗаменитьСубконтоНУ(СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовСКонтрагентомНУ, 2, СубконтоКт2, СубконтоНУКт2);
		СчетУчетаРасчетовСКонтрагентомНУ = НалоговыйУчет.ОпределитьСчетНУВШапке(Организация, Дата, СчетУчетаРасчетовСКонтрагентом, СубконтоКт1,СубконтоКт2,СубконтоКт3);
	Иначе
		СчетУчетаРасчетовСКонтрагентомНУ = Неопределено;
	КонецЕсли;	
	СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);
	
	УстановитьВидимостьСубконто();
	
КонецПроцедуры

Процедура СубконтоКт3ПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ мПрименениеУСН Тогда
		БухгалтерскийУчет.ЗаменитьСубконтоНУ(СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовСКонтрагентомНУ, 3, СубконтоКт3, СубконтоНУКт3);
		СчетУчетаРасчетовСКонтрагентомНУ = НалоговыйУчет.ОпределитьСчетНУВШапке(Организация, Дата, СчетУчетаРасчетовСКонтрагентом, СубконтоКт1,СубконтоКт2,СубконтоКт3);
	Иначе
		СчетУчетаРасчетовСКонтрагентомНУ = Неопределено;
	КонецЕсли;	
	СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);
	
	УстановитьВидимостьСубконто();
	
КонецПроцедуры

Процедура СубконтоНУКт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоНУКт"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоНУКт"+н]);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

Процедура СубконтоКтЗатраты1ПриИзменении(Элемент)
	
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовСКонтрагентомНУ, 1, СубконтоКт1, СубконтоНУКт1);
	
	Если ОтражатьВНалоговомУчете Тогда		
		СчетУчетаРасчетовСКонтрагентомНУ = НалоговыйУчет.ОпределитьСчетНУВШапке(Организация, Дата, СчетУчетаРасчетовСКонтрагентом, СубконтоКт1,СубконтоКт2,СубконтоКт3);
		СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаЗатратНУ);
	КонецЕсли;	
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоКт2");
	СписокСубконто.Добавить("СубконтоКт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);

КонецПроцедуры

Процедура СубконтоКтЗатраты2ПриИзменении(Элемент)
	
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовСКонтрагентомНУ, 2, СубконтоКт2, СубконтоНУКт2);
	
	Если ОтражатьВНалоговомУчете Тогда		
		СчетУчетаРасчетовСКонтрагентомНУ = НалоговыйУчет.ОпределитьСчетНУВШапке(Организация, Дата, СчетУчетаРасчетовСКонтрагентом, СубконтоКт1,СубконтоКт2,СубконтоКт3);
		СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаЗатратНУ);
	КонецЕсли;	

КонецПроцедуры

Процедура СубконтоКтЗатраты3ПриИзменении(Элемент)
	
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СчетУчетаРасчетовСКонтрагентом, СчетУчетаРасчетовСКонтрагентомНУ, 3, СубконтоКт3, СубконтоНУКт3);
	
	Если ОтражатьВНалоговомУчете Тогда		
		СчетУчетаРасчетовСКонтрагентомНУ = НалоговыйУчет.ОпределитьСчетНУВШапке(Организация, Дата, СчетУчетаРасчетовСКонтрагентом, СубконтоКт1,СубконтоКт2,СубконтоКт3);
		СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаЗатратНУ);
	КонецЕсли;	

КонецПроцедуры

Процедура СубконтоНУКтЗатраты1ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоНУКт2");
	СписокСубконто.Добавить("СубконтоНУКт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);

КонецПроцедуры

Процедура СубконтоНУКтЗатраты1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоНУКт"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоНУКт"+н]);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ТЕЛО МОДУЛЯ

СпецифическиеСоответствияСчетовБУиНУдляДокумента = Новый Соответствие();
СпецифическиеСоответствияСчетовБУиНУдляДокумента.Вставить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы,ПланыСчетов.Налоговый.ВнереализационныеРасходы);
СпецифическиеСоответствияСчетовБУиНУдляДокумента.Вставить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы,ПланыСчетов.Налоговый.ВнереализационныеДоходы);