////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

//Хранит список числовых колонок документа (Структура)
Перем ВестиСкладскойУчетБУ;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧПоПартиям;
Перем мКнопкиЗаполненияТЧПоСчетамФактурам;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.ДанныеПоПартиям.Колонки);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(ЭлементыФормы.ДанныеПоПартиям.Колонки);
	
	ОтобразитьСчетаФактуры();
	
КонецПроцедуры //УстановитьВидимость()

// Процедура вызывается по кнопке при изменении активной строки в таблице косвенных 
// расходов, а также при переходе на закладку "Косвенные расходы".
Процедура ОтобразитьСчетаФактуры(ТекСтрокаПартий = Неопределено)

	Если ТекСтрокаПартий = Неопределено и не ЭлементыФормы.ДанныеПоПартиям.ТекущаяСтрока = Неопределено Тогда
		ТекСтрокаПартий = ЭлементыФормы.ДанныеПоПартиям.ТекущиеДанные;
	КонецЕсли; 
	
	
	// Включаем отбор тех дополнительных сведений, которые относятся к текущей строке,
	// выбранной в табличной части "ДанныеПоПартиям"
	Если ТекСтрокаПартий <> Неопределено Тогда
		// Включаем отбор ключу из текущей строки табличной части "ДополнительныеСведения"
		ЭлементыФормы.ДанныеПоСФ.ТолькоПросмотр = Ложь;
		ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.КлючСтроки.Значение = ТекСтрокаПартий.КлючСтроки;

	Иначе
		// Текущая строка в таблице косвенных расходов не установлена
		ЭлементыФормы.ДанныеПоСФ.ТолькоПросмотр = Истина;
		Если ДанныеПоПартиям.Количество() = 0 Тогда
			ДанныеПоСФ.Очистить();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОтобразитьСчетаФактуры()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ


Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧПоПартиям(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧПоПартиям.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧПоСчетамФактурам(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧПоСчетамФактурам.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧПоПартиям = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧПоПартиям"));
	мКнопкиЗаполненияТЧПоСчетамФактурам = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧПоСчетамФактурам"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДанныеПоПартиям, ЭлементыФормы.КоманднаяПанельПоПартиям.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧПоПартиям, СоответствиеТЧ);
	
	СоответствиеТЧ.Очистить();
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДанныеПоСФ, ЭлементыФормы.КоманднаяПанельПоСФ.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧПоСчетамФактурам, СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	КонецЕсли;
	
	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	// Предполагается использовать отбор по таблице "ДанныеПоСФ"
	ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.КлючСтроки.Использование = Истина;
	ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.КлючСтроки.Значение = 0;
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

Процедура ПослеЗаписи()
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ


// Процедура - обработчик события "ПриАктивизацииСтроки" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПриАктивизацииСтроки(Элемент)
	
	ОтобразитьСчетаФактуры();
		
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактированияСтроки" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда

		// Инициализируем значение "КлючСтроки" для установки связи данной таблицы с таблицей 
		// "ДанныеПоПартиям".
		// Значение должно быть уникальным в пределах таблицы ДанныеПоПартиям
		НеУстановлено = Истина;
		Кандидат = ДанныеПоПартиям.Количество();

		Пока НеУстановлено Цикл
			Если ДанныеПоПартиям.Найти(Кандидат, "КлючСтроки") = Неопределено Тогда
				// Уникальное значение ключа
				ЭлементыФормы.ДанныеПоПартиям.ТекущиеДанные.КлючСтроки = Кандидат;
				НеУстановлено = Ложь;

			Иначе
				// Такое значение ключа уже использовано
				Кандидат = Кандидат + 1;

			КонецЕсли;

		КонецЦикла;
		
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		Если не Элемент.Колонки.Найти("Номенклатура")=Неопределено Тогда
			ТекущаяСтрока.Номенклатура = Неопределено;
		КонецЕсли; 

		ОтобразитьСчетаФактуры();

	КонецЕсли;
	
КонецПроцедуры

Процедура ДанныеПоПартиямПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОтобразитьСчетаФактуры(Элемент.ТекущиеДанные);
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" 
// строки табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПередУдалением(Элемент, Отказ)
	
	// Необходимо очистить дополнительные сведения
	КлючПоиска = Новый Структура("КлючСтроки" , ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.КлючСтроки.Значение);
	
	НайденныеСтроки = ДанныеПоСФ.НайтиСтроки(КлючПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		ДанныеПоСФ.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" 
// для табличной части "ДанныеПоСФ".
//
Процедура ДанныеПоПартиямПослеУдаления(Элемент)
	
	ОтобразитьСчетаФактуры();
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования"
// строки табличной части "Дополнительные сведения".
//
Процедура ДанныеПоСФПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные.КлючСтроки = ЭлементыФормы.ДанныеПоСФ.ОтборСтрок.КлючСтроки.Значение;
	КонецЕсли; 
		
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении"
// колонки "СтавкаНДС" табличной части "Дополнительные сведения".
//
Процедура ДанныеПоСФСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоСФ.ТекущиеДанные;
	Если ТекущиеДанные.Стоимость <> 0 Тогда
		ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ТекущиеДанные.Стоимость, Истина, Истина, 
												УчетНДС.ПолучитьСтавкуНДС(ТекущиеДанные.СтавкаНДС));
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора"
// колонки "СчетУчетаНДС" табличной части "Дополнительные сведения".
//
Процедура ДанныеПоСФСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка =  БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка"
// колонки "ВидЦенности" табличной части "Дополнительные сведения".
//
Процедура ДанныеПоСФВидЦенностиНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.Очистить();
	
	Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Материалы);
	Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Товары);
	Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.Оборудование);
	Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ОС);
	Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);
	Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
	Элемент.СписокВыбора.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
		
КонецПроцедуры

Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если ДанныеПоПартиям.Количество() > 0 Тогда
	
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	ДанныеПоСФ.Очистить();
	ДанныеПоПартиям.Очистить();
	
	ТекстЗапроса = "ВЫБРАТЬ
	               |	РегПартии.Номенклатура КАК Номенклатура,
	               |	РегПартии.СчетУчета КАК СчетУчета,
	               |	РегПартии.Склад КАК Склад,
	               |	РегПартии.ДокументОприходования КАК Партия,
	               |	РегПартии.ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	               |	РегПартии.СерияНоменклатуры КАК СерияНоменклатуры,
	               |	СУММА(РегПартии.КоличествоОстаток) КАК КолОст,
	               |	СУММА(РегПартии.СтоимостьОстаток) КАК СуммаБезНДС,
	               |	НДСПредъявленныйОбороты.СтавкаНДС,
	               |	НДСПредъявленныйОбороты.ВидЦенности КАК ВидЦенности,
	               |	НДСПредъявленныйОбороты.СчетУчетаНДС,
	               |	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура.НДСВключенВСтоимость, ЛОЖЬ) КАК НДСВключенВСтоимость,
	               |	РегПартии.Заказ
	               |ИЗ
	               |	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
	               |		&КонДата,
	               |		Организация = &Орг
	               |		    И СчетУчета <> &СчетТары
	               |		    И (НЕ СчетУчета.Забалансовый)) КАК РегПартии
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.НДСПредъявленный.Обороты КАК НДСПредъявленныйОбороты
	               |		ПО РегПартии.ДокументОприходования = НДСПредъявленныйОбороты.СчетФактура
	               |			И (НДСПредъявленныйОбороты.ВидЦенности = ВЫБОР
	               |				КОГДА РегПартии.СчетУчета В ИЕРАРХИИ (&Счет07)
	               |					ТОГДА &ВЦ_Оборудование
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА РегПартии.СчетУчета В ИЕРАРХИИ (&Счет10)
	               |							ТОГДА &ВЦ_Материалы
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА РегПартии.СчетУчета В ИЕРАРХИИ (&Счет08_3)
	               |									ТОГДА &ВЦ_ОбъектыСтроительства
	               |								ИНАЧЕ ВЫБОР
	               |										КОГДА РегПартии.СчетУчета В ИЕРАРХИИ (&Счет08_4)
	               |											ТОГДА &ВЦ_ОС
	               |										ИНАЧЕ &ВЦ_Товары
	               |									КОНЕЦ
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	РегПартии.Номенклатура,
	               |	РегПартии.СчетУчета,
	               |	РегПартии.Склад,
	               |	РегПартии.ДокументОприходования,
	               |	РегПартии.ХарактеристикаНоменклатуры,
	               |	РегПартии.СерияНоменклатуры,
	               |	НДСПредъявленныйОбороты.СтавкаНДС,
	               |	НДСПредъявленныйОбороты.ВидЦенности,
	               |	НДСПредъявленныйОбороты.СчетУчетаНДС,
	               |	ЕСТЬNULL(НДСПредъявленныйОбороты.СчетФактура.НДСВключенВСтоимость, ЛОЖЬ),
	               |	РегПартии.Заказ
	               |
	               |ИМЕЮЩИЕ
	               |	СУММА(РегПартии.КоличествоОстаток) > 0
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Партия,
	               |	Номенклатура,
	               |	ХарактеристикаНоменклатуры,
	               |	СерияНоменклатуры
	               |ИТОГИ
	               |	СУММА(КолОст),
	               |	СУММА(СуммаБезНДС)
	               |ПО
	               |	Партия,
	               |	Склад,
	               |	Номенклатура,
	               |	ХарактеристикаНоменклатуры,
	               |	СерияНоменклатуры,
	               |	СчетУчета";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр( "КонДата",  ?(ЭтоНовый(), КонецДня(Дата), Дата));
	Запрос.УстановитьПараметр( "СчетТары", ПланыСчетов.Хозрасчетный.ТараПодТоваромИПорожняя);
	Запрос.УстановитьПараметр( "Орг",      Организация);
	Запрос.УстановитьПараметр( "Счет07",   ПланыСчетов.Хозрасчетный.ОборудованиеКУстановке);
	Запрос.УстановитьПараметр( "Счет10",   ПланыСчетов.Хозрасчетный.Материалы);
	Запрос.УстановитьПараметр( "Счет08_3", ПланыСчетов.Хозрасчетный.СтроительствоОбъектовОсновныхСредств);
	Запрос.УстановитьПараметр( "Счет08_4", ПланыСчетов.Хозрасчетный.ПриобретениеОбъектовОсновныхСредств);
	Запрос.УстановитьПараметр( "ВЦ_Оборудование",         Перечисления.ВидыЦенностей.Оборудование);
	Запрос.УстановитьПараметр( "ВЦ_Материалы",            Перечисления.ВидыЦенностей.Материалы);
	Запрос.УстановитьПараметр( "ВЦ_ОбъектыСтроительства", Перечисления.ВидыЦенностей.ОбъектыНезавершенногоСтроительства);
	Запрос.УстановитьПараметр( "ВЦ_ОС",                   Перечисления.ВидыЦенностей.ОС);
	Запрос.УстановитьПараметр( "ВЦ_Товары",               Перечисления.ВидыЦенностей.Товары);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	МетаТип = Метаданные.Документы[Метаданные().Имя].ТабличныеЧасти["ДанныеПоПартиям"].Реквизиты["Партия"].Тип;
	
	Ключ = 0;
	
	ОбходПоПартиям = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ОбходПоПартиям.Следующий() Цикл
		Если НЕ МетаТип.СодержитТип(ТипЗнч(ОбходПоПартиям.Партия)) ИЛИ НЕ ЗначениеЗаполнено(ОбходПоПартиям.Партия) Тогда
			Продолжить;
		КонецЕсли;
		ОбходПоСкладам = ОбходПоПартиям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ОбходПоСкладам.Следующий() Цикл
			ОбходПоНоменклатуре = ОбходПоСкладам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ОбходПоНоменклатуре.Следующий() Цикл
				ОбходПоХаракт = ОбходПоНоменклатуре.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				Пока ОбходПоХаракт.Следующий() Цикл
					ОбходПоСериям = ОбходПоХаракт.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ОбходПоСериям.Следующий() Цикл
						ОбходПоСчетам = ОбходПоСериям.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ОбходПоСчетам.Следующий() Цикл
							
							Ключ = Ключ + 1;
							
							// Добавим строку в таб.часть Партии
							СтрокаПартий              = ДанныеПоПартиям.Добавить();
							СтрокаПартий.КлючСтроки   = Ключ;
							СтрокаПартий.Номенклатура = ОбходПоСчетам.Номенклатура;
							СтрокаПартий.Партия       = ОбходПоСчетам.Партия;
							СтрокаПартий.Склад        = ОбходПоСчетам.Склад;
							СтрокаПартий.СчетУчета    = ОбходПоСчетам.СчетУчета;
							СтрокаПартий.Количество   = ОбходПоСчетам.КолОст;
									
							СтрокаПартий.ХарактеристикаНоменклатуры = ОбходПоСчетам.ХарактеристикаНоменклатуры;
							СтрокаПартий.СерияНоменклатуры          = ОбходПоСчетам.СерияНоменклатуры;
							СтрокаПартий.Заказ          			= ОбходПоСчетам.Заказ;
									
							Обход = ОбходПоСчетам.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
							Пока Обход.Следующий() Цикл
								
								СтрокаСФ = ДанныеПоСФ.Добавить();
								СтрокаСФ.КлючСтроки   = Ключ;
								СтрокаСФ.СчетФактура  = Обход.Партия;
								СтрокаСФ.ВидЦенности  = Обход.ВидЦенности;
								СтрокаСФ.СтавкаНДС    = Обход.СтавкаНДС;
								СтрокаСФ.СчетУчетаНДС = Обход.СчетУчетаНДС;
								
								СтрокаСФ.Количество = Обход.КолОст;
								СтрокаСФ.НДСВключенВСтоимость = Обход.НДСВключенВСтоимость;
								СтрокаСФ.НДС = УчетНДС.РассчитатьСуммуНДС( Обход.СуммаБезНДС, Истина, Обход.НДСВключенВСтоимость, УчетНДС.ПолучитьСтавкуНДС(Обход.СтавкаНДС));
									
								СтрокаСФ.Стоимость  = ?( Обход.НДСВключенВСтоимость, Обход.СуммаБезНДС, Обход.СуммаБезНДС + СтрокаСФ.НДС);
								
							КонецЦикла; // По детальным записям
								
						КонецЦикла; // По счетам
						
					КонецЦикла; // По сериям
				КонецЦикла; // По характеристикам
			КонецЦикла; // По Номенклатуре
		КонецЦикла; // По складам
	КонецЦикла; // По партиям
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры