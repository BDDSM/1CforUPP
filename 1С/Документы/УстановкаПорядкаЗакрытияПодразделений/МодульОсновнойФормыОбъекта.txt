////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;




////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПорядокЗакрытия,ЭлементыФормы.КоманднаяПанельПорядокЗакрытия.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


// Процедура
//
//		Параметры:
//
//
Процедура ЗаполнитьПодразделения(ПоКнопке = Ложь)
	
	Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не заполнена организация!");
		Возврат;
	КонецЕсли;
	
	Если ПорядокЗакрытия.Количество() > 0 И Не ПоКнопке Тогда
		Если ОтражатьВУправленческомУчете Тогда
			ТипПодр = Тип("СправочникСсылка.Подразделения");
		Иначе
			ТипПодр = Тип("СправочникСсылка.ПодразделенияОрганизаций");
		КонецЕсли;
		ФлагНадоОбновить = Ложь;
		Если Не ТипПодр = ТипЗнч(ПорядокЗакрытия[0].Подразделение) Тогда
			ФлагНадоОбновить = Истина;
		Иначе
			Если Не ОтражатьВУправленческомУчете
			   И Не ПорядокЗакрытия[0].Подразделение.Владелец = Организация Тогда
				ФлагНадоОбновить = Истина;
			КонецЕсли;
		КонецЕсли;
		Если Не ФлагНадоОбновить Тогда
			Возврат;
		Иначе
			Если ОтражатьВУправленческомУчете Тогда
				ЭлементыФормы.ПорядокЗакрытия.Колонки.Подразделение.ЭлементУправления.ОграничениеТипа  = Новый ОписаниеТипов("СправочникСсылка.Подразделения");
			Иначе
				ЭлементыФормы.ПорядокЗакрытия.Колонки.Подразделение.ЭлементУправления.ОграничениеТипа  = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
				ЭлементыФормы.ПорядокЗакрытия.Колонки.Подразделение.ЭлементУправления.ВыборПоВладельцу = Организация;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ПорядокЗакрытия.Очистить();
	
	КонДата = НачалоМесяца(Дата) - 1;
	НачДата = НачалоМесяца(КонДата);
	
	ДокОбразец = Неопределено;
	ДокВыборка = Документы[Метаданные().Имя].Выбрать(НачДата, КонДата);
	Пока ДокВыборка.Следующий() Цикл
		Если ДокВыборка.Проведен Тогда
			Если ДокВыборка.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете
			   И ДокВыборка.ОтражатьВБухгалтерскомУчете  = ОтражатьВБухгалтерскомУчете
			   И ((ДокВыборка.Организация = Организация И Не ОтражатьВУправленческомУчете)
			   ИЛИ ОтражатьВУправленческомУчете) Тогда
				ДокОбразец = ДокВыборка.ПолучитьОбъект();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокОбразец = Неопределено Тогда
		Если ОтражатьВУправленческомУчете Тогда
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата, ПоКнопке);
		Иначе
			УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, ПоКнопке);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(УчетнаяПолитика) Тогда
			Возврат;
		КонецЕсли;
		
		ВидыПодразделений = Новый Массив;
		Если УчетнаяПолитика["СпособРасчетаСебестоимостиОсновногоПроизводства"] = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
			ВидыПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
		КонецЕсли;
		
		Если УчетнаяПолитика["СпособРасчетаСебестоимостиВспомогательногоПроизводства"] = Перечисления.СпособыРасчетаСебестоимостиПродукции.ПоПодразделениям Тогда
			ВидыПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
		КонецЕсли;
		
		Если ВидыПодразделений.Количество() = 0 Тогда
			Предупреждение("Расчет себестоимости всех подразделений ведется по переделам. Заполнение документа не требуется!");
			Возврат;
		КонецЕсли;
			
		
		Запрос = Новый Запрос;
		Если ОтражатьВУправленческомУчете Тогда
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Подразделения.Ссылка КАК Подразделение,
				|	ВЫБОР КОГДА Подразделения.ВидПодразделения = &Вспомогательное ТОГДА
				|		1
				|	ИНАЧЕ
				|		0
				|	КОНЕЦ КАК ФлагВспомог
				|
				|ИЗ
				|	Справочник.Подразделения КАК Подразделения
				|
				|ГДЕ
				|	Не Подразделения.ПометкаУдаления
				|	И Подразделения.ВидПодразделения В (&ВидыПодразделений)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ФлагВспомог УБЫВ";
		Иначе
			Запрос.Текст = "
				|ВЫБРАТЬ
				|	Подразделения.Ссылка КАК Подразделение,
				|	ВЫБОР КОГДА Подразделения.ВидПодразделения = &Вспомогательное ТОГДА
				|		1
				|	ИНАЧЕ
				|		0
				|	КОНЕЦ КАК ФлагВспомог
				|ИЗ
				|	Справочник.ПодразделенияОрганизаций КАК Подразделения
				|ГДЕ
				|	Не Подразделения.ПометкаУдаления
				|	И Подразделения.Владелец = &Организация
				|	И Подразделения.ВидПодразделения В (&ВидыПодразделений)
				|
				|УПОРЯДОЧИТЬ ПО
				|	ФлагВспомог УБЫВ";
			Запрос.УстановитьПараметр("Организация", Организация);
		КонецЕсли;
		
		Запрос.УстановитьПараметр("Вспомогательное", Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
		Запрос.УстановитьПараметр("ВидыПодразделений", ВидыПодразделений);
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Предупреждение("Нет подразделений для заполнения!");
			Возврат;
		КонецЕсли;
		
		Обход = РезультатЗапроса.Выбрать();
		Пока Обход.Следующий() Цикл
			НоваяСтрока = ПорядокЗакрытия.Добавить();
			НоваяСтрока.Подразделение = Обход.Подразделение;
		КонецЦикла;
		
	Иначе
		
		Для Каждого СтрокаТЧ Из ДокОбразец.ПорядокЗакрытия Цикл
			НоваяСтрока = ПорядокЗакрытия.Добавить();
			НоваяСтрока.Подразделение = СтрокаТЧ.Подразделение;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьПодразделения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает видимость реквизитов в зависимости от установленных флажков
//  по типам учета.
//
// Параметры
//  Нет.
//
Процедура УстановитьВидимостьРеквизитовПоТипуУчета()

	Если ОтражатьВУправленческомУчете Тогда
		ЭлементыФормы.Организация.Видимость = Ложь;
		ЭлементыФормы.НадписьОрганизация.Видимость = Ложь;
		ЭлементыФормы.ПорядокЗакрытия.Колонки.ВидПодразделения.Видимость = Ложь;
	Иначе
		ЭлементыФормы.Организация.Видимость = Истина;
		ЭлементыФормы.НадписьОрганизация.Видимость = Истина;
		ЭлементыФормы.ПорядокЗакрытия.Колонки.ВидПодразделения.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимостьРеквизитовПоТипуУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		Дата = НачалоМесяца(Дата);
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		
		ЗаполнитьПодразделения();
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
	ИначеЕсли ОтражатьВБухгалтерскомУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете;
	КонецЕсли;

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	УстановитьВидимостьРеквизитовПоТипуУчета();
	
	Если ОтражатьВУправленческомУчете Тогда
		ЭлементыФормы.ПорядокЗакрытия.Колонки.Подразделение.ЭлементУправления.ОграничениеТипа  = Новый ОписаниеТипов("СправочникСсылка.Подразделения");
	Иначе
		ЭлементыФормы.ПорядокЗакрытия.Колонки.Подразделение.ЭлементУправления.ОграничениеТипа  = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
		ЭлементыФормы.ПорядокЗакрытия.Колонки.Подразделение.ЭлементУправления.ВыборПоВладельцу = Организация;
	КонецЕсли;
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КоманднаяПанельПорядокЗакрытияЗаполнить(Кнопка)
	
	ЗаполнитьПодразделения(Истина);

КонецПроцедуры // КоманднаяПанельПорядокЗакрытияЗаполнить()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ВидОтраженияВУчетеПриИзменении(Элемент)
	
	ОтражатьВУправленческомУчете = (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
	ОтражатьВБухгалтерскомУчете = (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете);
	
	УстановитьВидимостьРеквизитовПоТипуУчета();
	ЗаполнитьПодразделения();
	
КонецПроцедуры // ВидОтраженияВУчетеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	//Дата = НачалоМесяца(Дата);
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Организация.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ЗаполнитьПодразделения();
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПорядокЗакрытия

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля ПорядокЗакрытия
//
Процедура ПорядокЗакрытияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ДанныеСтроки.Подразделение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.ПорядокЗакрытия.Колонки.ВидПодразделения.Видимость = Истина Тогда
		ОформлениеСтроки.Ячейки.ВидПодразделения.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ВидПодразделения.Текст = ДанныеСтроки.Подразделение.ВидПодразделения;
	Иначе
		ОформлениеСтроки.Ячейки.ВидПодразделения.Текст = "";
	КонецЕсли;
	
КонецПроцедуры // ПорядокЗакрытияПриВыводеСтроки()


// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля ПорядокЗакрытия
//
Процедура ПорядокЗакрытияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ПорядокЗакрытия.ТекущиеДанные;
		Если ОтражатьВУправленческомУчете Тогда
			СтрокаТабличнойЧасти.Подразделение = Справочники.Подразделения.ПустаяСсылка();
		Иначе
			СтрокаТабличнойЧасти.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПорядокЗакрытияПриНачалеРедактирования()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры