////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОрганизация; // Хранит текущую организацию
Перем мОтражатьВРегламентированномУчете;
Перем мФормироватьРезервыПоСомнительнымДолгамБУ; // Хранит признак необходимости отражать резервы с налоговом плане счетов.
Перем мФормироватьРезервыПоСомнительнымДолгамНУ; // Хранит признак необходимости отражать резервы с налоговом плане счетов.

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура заполняет счет расчетов с контрагентом при выборе договора
//
Процедура УстановитьСчетаРасчетов(ТекСтрока, НуженСчетРасчетов = Истина)
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ТекСтрока.Контрагент, ТекСтрока.ДоговорКонтрагента);
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
		Если НуженСчетРасчетов Тогда
			ТекСтрока.СчетУчетаРасчетовСКонтрагентом = СчетаУчета["СчетРасчетов"];
		Иначе
			ТекСтрока.СчетУчетаРасчетовСКонтрагентом = СчетаУчета["СчетАвансов"];
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
		Если НуженСчетРасчетов Тогда
			ТекСтрока.СчетУчетаРасчетовСКонтрагентом = СчетаУчета["СчетРасчетовПокупателя"];
		Иначе
			ТекСтрока.СчетУчетаРасчетовСКонтрагентом = СчетаУчета["СчетАвансовПокупателя"];
		КонецЕсли;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РезервыПоСомнительнымДолгам Тогда
		ТекСтрока.СчетУчетаРасчетовСКонтрагентом = СчетаУчета["СчетРасчетовПокупателя"];
	Иначе
		ТекСтрока.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // УстановитьСчетаРасчетов()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(
		Ссылка, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДанныеПоРасчетам, 
		ЭлементыФормы.КоманднаяПанельДанныеПоРасчетам.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДанныеПоАвансам,  
		ЭлементыФормы.КоманднаяПанельДанныеПоАвансам.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДанныеПоРезервамПоСомнительнымДолгам,  
		ЭлементыФормы.КоманднаяПанельДанныеПоРезервамПоСомнительнымДолгам.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(
		мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя, "Имя", Истина), ЭтотОбъект);
	
КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость реквизитов документа.
//
Процедура УстановитьВидимость()

	ЭтоРезервы = ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РезервыПоСомнительнымДолгам;

	ЭлементыФормы.Панель.Страницы.ДанныеПоРасчетам.Видимость 	= НЕ ЭтоРезервы;
	ЭлементыФормы.Панель.Страницы.ДанныеПоАвансам.Видимость 	= НЕ ЭтоРезервы;
	ЭлементыФормы.Панель.Страницы.РезервыПоСомнительнымДолгам.Видимость = ЭтоРезервы;
	
	Если ЭтоРезервы Тогда
		ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.РезервыПоСомнительнымДолгам;
	Иначе
		Если ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.РезервыПоСомнительнымДолгам Тогда
			ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.ДанныеПоРасчетам;
		КонецЕсли;
	КонецЕсли;

	КолонкиРасчеты = ЭлементыФормы.ДанныеПоРасчетам.Колонки;
	
	КолонкиРасчеты.СчетУчетаРасчетовСКонтрагентом.Видимость = ОтражатьВБухгалтерскомУчете;
	КолонкиРасчеты.СуммаРегл.Видимость                      = ОтражатьВБухгалтерскомУчете;
	КолонкиРасчеты.СуммаРеглСУчетомПереоценки.Видимость     = ОтражатьВБухгалтерскомУчете И Дата >= '20070101';
	КолонкиРасчеты.СуммаУпр.Видимость                       = ОтражатьВУправленческомУчете;
	
	КолонкиАванс = ЭлементыФормы.ДанныеПоАвансам.Колонки;
	
	КолонкиАванс.СчетУчетаРасчетовСКонтрагентом.Видимость = ОтражатьВБухгалтерскомУчете;
	КолонкиАванс.СуммаРегл.Видимость                      = ОтражатьВБухгалтерскомУчете;
	КолонкиАванс.СуммаРеглСУчетомПереоценки.Видимость     = ОтражатьВБухгалтерскомУчете И Дата >= '20071231';
	КолонкиАванс.СуммаУпр.Видимость                       = ОтражатьВУправленческомУчете;
	
	ФлагПрочие = ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыПоПрочимОперациям;

	ЭлементыФормы.ОтражатьВУправленческомУчете.Доступность	 		= НЕ ЭтоРезервы;
	ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность	 		= НЕ ЭтоРезервы;
	ЭлементыФормы.НадписьОтражениеВБухучете.Доступность             = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.ОтразитьВРегистрахРасчетовОрганизации.Доступность = ОтражатьВБухгалтерскомУчете И НЕ ФлагПрочие И НЕ ЭтоРезервы;
	ЭлементыФормы.ФормироватьПроводки.Доступность                   = ОтражатьВБухгалтерскомУчете ИЛИ ЭтоРезервы;
	
	ЭлементыФормы.ОтразитьВРегистреВзаиморасчетовПоДокументам.Доступность = НЕ (ОтражатьВУправленческомУчете ИЛИ ФлагПрочие) И НЕ ЭтоРезервы;
	
	КолонкиРасчеты.Сделка.Видимость = НЕ ФлагПрочие;
	КолонкиАванс.Сделка.Видимость   = НЕ ФлагПрочие;
	
	КолонкиАванс.ДокументОплаты.ТекстШапки = ?(ФлагПрочие, "Документ расчетов", "Документ оплаты");
	
	
	КолонкиРезервы = ЭлементыФормы.ДанныеПоРезервамПоСомнительнымДолгам.Колонки;
	КолонкиРезервы.СуммаБУ.Видимость= мФормироватьРезервыПоСомнительнымДолгамБУ;
	КолонкиРезервы.СуммаНУ.Видимость= мФормироватьРезервыПоСомнительнымДолгамНУ;

	ТребуетсяВводРезервов = мФормироватьРезервыПоСомнительнымДолгамБУ ИЛИ мФормироватьРезервыПоСомнительнымДолгамНУ;
	
	Если ТребуетсяВводРезервов Тогда
		ЭлементыФормы.ПанельУчетнаяПолитикаРезервы.Свертка	= РежимСверткиЭлементаУправления.Верх;
	Иначе
		ЭлементыФормы.ПанельУчетнаяПолитикаРезервы.Свертка	= РежимСверткиЭлементаУправления.Нет;
	КонецЕсли;
	
	ЭлементыФормы.КоманднаяПанельДанныеПоРезервамПоСомнительнымДолгам.Доступность 	= ТребуетсяВводРезервов;
	ЭлементыФормы.ДанныеПоРезервамПоСомнительнымДолгам.Доступность					= ТребуетсяВводРезервов;
	
КонецПроцедуры //УстановитьВидимость()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	Страницы = ЭлементыФормы.Панель.Страницы;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РезервыПоСомнительнымДолгам Тогда
	    Страницы.РезервыПоСомнительнымДолгам.Заголовок = "Резервы по сомнительным долгам (" + ДанныеПоРезервамПоСомнительнымДолгам.Количество() + " поз.)";
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыПоПрочимОперациям Тогда
		Страницы.ДанныеПоРасчетам.Заголовок = "Уменьшение долга (" + ДанныеПоРасчетам.Количество() + " поз.)";
		Страницы.ДанныеПоАвансам               .Заголовок = "Увеличение долга (" + ДанныеПоАвансам.Количество() + " поз.)";
	Иначе
		Страницы.ДанныеПоРасчетам.Заголовок = "Расчеты с контрагентами (" + ДанныеПоРасчетам.Количество() + " поз.)";
		Страницы.ДанныеПоАвансам               .Заголовок = "Авансы (" + ДанныеПоАвансам.Количество() + " поз.)";
	КонецЕсли;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура кэширует в переменных формы настройки из учетной политики организации.
//
Процедура ОпределитьНастройкиИзУчетнойПолитикиОрганизации()

	мФормироватьРезервыПоСомнительнымДолгамБУ = Ложь;
	мФормироватьРезервыПоСомнительнымДолгамНУ = Ложь;
	
	УчетнаяПолитикаРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	Если ЗначениеЗаполнено(УчетнаяПолитикаРегл) Тогда
		мФормироватьРезервыПоСомнительнымДолгамБУ = УчетнаяПолитикаРегл.ФормироватьРезервыПоСомнительнымДолгамБУ;
		мФормироватьРезервыПоСомнительнымДолгамНУ = УчетнаяПолитикаРегл.ФормироватьРезервыПоСомнительнымДолгамНУ;
	КонецЕсли;

КонецПроцедуры // ОпределитьНастройкиИзУчетнойПолитикиОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		Если ВидОперации <> Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам[Кнопка.Имя] Тогда
			Если ДанныеПоАвансам.Количество() + ДанныеПоРасчетам.Количество() + ДанныеПоРезервамПоСомнительнымДолгам.Количество() > 0 Тогда
				// При смене вида операции табличная часть документа должна быть очищена
				Если Вопрос("При изменении вида операции табличные части будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет, "Изменение вида операции") = КодВозвратаДиалога.Да Тогда
					ДанныеПоАвансам.Очистить();
					ДанныеПоРасчетам.Очистить();
					ДанныеПоРезервамПоСомнительнымДолгам.Очистить();
					ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам[Кнопка.Имя];
				КонецЕсли;
			Иначе
				ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам[Кнопка.Имя];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыПоПрочимОперациям Тогда
		ОтразитьРасчетыСКонтрагентамиДляЦелейНДС    = Ложь;
		ОтразитьВРегистрахРасчетовОрганизации       = Ложь;
		ОтразитьВРегистреВзаиморасчетовПоДокументам = Ложь;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РезервыПоСомнительнымДолгам Тогда
		ОтражатьВУправленческомУчете				= Ложь;
		ОтражатьВБухгалтерскомУчете					= Истина;
		ОтразитьВРегистреВзаиморасчетовПоДокументам = Ложь;
		ФормироватьПроводки							= Истина;
		ОтразитьВРегистрахРасчетовОрганизации		= Ложь;
	КонецЕсли;
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) , ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		Если НЕ ЗначениеЗаполнено(ПараметрОснование) Тогда
		
			// Заполнить реквизиты значениями по умолчанию.
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		
			Если НЕ ЗначениеЗаполнено(ВидОперации) Тогда
				ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями;
			КонецЕсли;
			ОтразитьРасчетыСКонтрагентамиДляЦелейНДС = ОтражатьВБухгалтерскомУчете;
			
		ИначеЕсли ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС") Тогда
			
			ОтражатьВБухгалтерскомУчете = НЕ ПараметрОснование.ОтразитьРасчетыСКонтрагентами;
			
		КонецЕсли;
	
		ОтразитьВРегистрахРасчетовОрганизации       = ОтражатьВБухгалтерскомУчете;
		ФормироватьПроводкиПоВводуНачальныхОстатков = ОтражатьВБухгалтерскомУчете;
		ОтразитьВРегистреВзаиморасчетовПоДокументам = ОтражатьВУправленческомУчете;
			
	КонецЕсли;
	
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,"",мОтражатьВРегламентированномУчете);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
										  
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	ОпределитьНастройкиИзУчетнойПолитикиОрганизации();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	СтруктКолонок = Новый Структура;

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктКолонок.Вставить("Контрагент");
	СтруктКолонок.Вставить("ДоговорКонтрагента");
	СтруктКолонок.Вставить("СуммаВзаиморасчетов");

	// Установить ограничение - изменять видимость колонок для табличной части 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ДанныеПоРасчетам.Колонки, СтруктКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ДанныеПоАвансам.Колонки, СтруктКолонок);
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	ОпределитьНастройкиИзУчетнойПолитикиОрганизации();
	
	УстановитьВидимость();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	Если Организация <> мОрганизация
	  И (ДанныеПоРасчетам.Количество() + ДанныеПоАвансам.Количество() + ДанныеПоРезервамПоСомнительнымДолгам.Количество() > 0) Тогда
		Ответ = Вопрос("При смене организации табличные части будут очищены!" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Организация = мОрганизация;
			Возврат;
		КонецЕсли;
		ДанныеПоРасчетам.Очистить();
		ДанныеПоАвансам.Очистить();
		ДанныеПоРезервамПоСомнительнымДолгам.Очистить();
	КонецЕсли;
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,"",мОтражатьВРегламентированномУчете,истина);
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		ФормироватьПроводкиПоВводуНачальныхОстатков = Ложь;
		ОтразитьРасчетыСКонтрагентамиДляЦелейНДС    = Ложь;
		ОтразитьВРегистрахРасчетовОрганизации       = Ложь;
	КонецЕсли;

	ОпределитьНастройкиИзУчетнойПолитикиОрганизации();

	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВУправленческомУчете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	Если ОтражатьВУправленческомУчете Тогда
		ОтразитьВРегистреВзаиморасчетовПоДокументам = Истина;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВУправленческомУчете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	Если НЕ ОтражатьВБухгалтерскомУчете Тогда
		ФормироватьПроводкиПоВводуНачальныхОстатков = Ложь;
		ОтразитьРасчетыСКонтрагентамиДляЦелейНДС    = Ложь;
		ОтразитьВРегистрахРасчетовОрганизации       = Ложь;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ

Процедура ОтразитьВРегистрахРасчетовОрганизацииПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "Контрагент"
// табличного поля "Расчеты с контрагентами"
//
Процедура ДанныеПоРасчетамКонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаРасчетов(ЭлементыФормы.ДанныеПоРасчетам.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "ДоговорКонтрагента"
// табличного поля "Расчеты с контрагентами"
//
Процедура ДанныеПоРасчетамДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДанныеПоРасчетам.ТекущиеДанные;
	ПриИзмененииДоговораРасчетов(ТекДанные);
	УстановитьСчетаРасчетов(ТекДанные, Истина);
	
КонецПроцедуры // РасчетыСКонтрагентамиДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" колонки "ДоговорКонтрагента"
// табличного поля "Расчеты с контрагентами"
//
Процедура ДанныеПоРасчетамДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Иначе
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;	
		
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.ДанныеПоРасчетам.ТекущиеДанные.Контрагент, 
											ЭлементыФормы.ДанныеПоРасчетам.ТекущиеДанные.ДоговорКонтрагента,
											мСписокВидовДоговоров, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "СуммаВзаиморасчетов"
// табличного поля "Расчеты с контрагентами"
//
Процедура ДанныеПоРасчетамСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ДанныеПоРасчетам.ТекущиеДанные;
	
	ПересчетСуммыУпр(СтрокаТЧ);
	РасчетСуммыСУчетомПереоценки = Дата >= '20070101';
	ПересчетСуммыРегл(СтрокаТЧ, РасчетСуммыСУчетомПереоценки);
	
КонецПроцедуры // РасчетыСКонтрагентамиСуммаВзаиморасчетовПриИзменении()

// Процедура - обработчик события "ПриИзменении" колонки "Контрагент"
// табличного поля "ДанныеПоАвансам"
//
Процедура ДанныеПоАвансамКонтрагентПриИзменении(Элемент)
	
	ПриИзмененииКонтрагентаРасчетов(ЭлементыФормы.ДанныеПоАвансам.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "ДоговорКонтрагента"
// табличного поля "ДанныеПоАвансам"
//
Процедура ДанныеПоАвансамДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДанныеПоАвансам.ТекущиеДанные;
	ПриИзмененииДоговораРасчетов(ТекДанные);
	УстановитьСчетаРасчетов(ТекДанные, Ложь);
	
КонецПроцедуры // АвансыДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" колонки "ДоговорКонтрагента"
// табличного поля "ДанныеПоАвансам"
//
Процедура ДанныеПоАвансамДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПокупателями Тогда
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	Иначе
		мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.Прочее);
	КонецЕсли;	
		
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект,
		ЭтаФорма,
		Элемент,
		ЭлементыФормы.ДанныеПоАвансам.ТекущиеДанные.Контрагент, 
		ЭлементыФормы.ДанныеПоАвансам.ТекущиеДанные.ДоговорКонтрагента,
		мСписокВидовДоговоров,
		СтандартнаяОбработка);
		
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "СуммаВзаиморасчетов"
// табличного поля "ДанныеПоАвансам"
//
Процедура ДанныеПоАвансамСуммаВзаиморасчетовПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ДанныеПоАвансам.ТекущиеДанные;
	
	ПересчетСуммыУпр(СтрокаТЧ);
	РасчетСуммыСУчетомПереоценки = Дата >= '20071231';
	ПересчетСуммыРегл(СтрокаТЧ, РасчетСуммыСУчетомПереоценки);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" колонки "ДокументОплаты"
// табличного поля "ДанныеПоАвансам"
//
Процедура ДанныеПоАвансамДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущаяСтрока = ЭлементыФормы.ДанныеПоАвансам.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;

	СтруктураПараметров   = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, КонецПериода, НачалоПериода", Организация, ТекущаяСтрока.Контрагент, ТекущаяСтрока.ДоговорКонтрагента, Дата, '00010101');
	
  	СтруктураПараметров.Вставить("СчетДляОпределенияОстатков", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	СтруктураПараметров.Вставить("СторонаСчета", ?(ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками, 0, 1));
	УправлениеВзаиморасчетами.ВыборРасчетногоДокумента(СтруктураПараметров, Элемент, Элемент.ТипЗначения);
	
КонецПроцедуры

Процедура ДанныеПоРасчетамКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоРасчетам.ТекущиеДанные;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ТекущиеДанные.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = ТекущиеДанные.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = ТекущиеДанные.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		
		ТекущиеДанные.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		
	КонецЕсли;

КонецПроцедуры

Процедура ДанныеПоАвансамКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоАвансам.ТекущиеДанные;
	
	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ТекущиеДанные.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = ТекущиеДанные.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = ТекущиеДанные.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;
	
	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();
	
	Если СтруктураКурсаИКратности <> Неопределено Тогда
		
		ТекущиеДанные.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		ТекущиеДанные.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Контрагент
//
Процедура ПриИзмененииКонтрагентаРасчетов(СтрокаТЧ)
	
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТЧ.Контрагент <> СтрокаТЧ.ДоговорКонтрагента.Владелец Тогда
		
		СтрокаТЧ.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "Сделка"
//
Процедура ДанныеПоРасчетамСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТЧ = ЭлементыФормы.ДанныеПоРасчетам.ТекущиеДанные;
	ПараметрыВыбора = УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки();
	Попытка
		Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТЧ.ДоговорКонтрагента, СтрокаТЧ.Сделка, СтандартнаяОбработка, 
			                     "Приход", "ЗаказПоставщику");
		Иначе
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТЧ.ДоговорКонтрагента, СтрокаТЧ.Сделка, СтандартнаяОбработка, 
			                     "Расход", "ЗаказПокупателя");
		КонецЕсли;
	Исключение
	КонецПопытки;
						 
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "Сделка"
//
Процедура ДанныеПоАвансамСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТЧ = ЭлементыФормы.ДанныеПоАвансам.ТекущиеДанные;
	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбора = УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки();
	Попытка
		Если ВидОперации = Перечисления.ВидыОперацийВводНачальныхОстатковПоВзаиморасчетам.РасчетыСПоставщиками Тогда
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТЧ.ДоговорКонтрагента, СтрокаТЧ.Сделка, СтандартнаяОбработка, 
			                     "Расход", "ЗаказПоставщику");
		Иначе
			РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТЧ.ДоговорКонтрагента, СтрокаТЧ.Сделка, СтандартнаяОбработка, 
			                     "Расход", "ЗаказПокупателя");
		КонецЕсли;
	Исключение
	КонецПопытки;

КонецПроцедуры // АвансыСделкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля "Документ"
//
Процедура ДанныеПоРасчетамДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.ДанныеПоРасчетам.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктОтбор = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбор.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
		СтруктОтбор.Вставить( "Контрагент", ТекДанные.Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.ДоговорКонтрагента) Тогда
		СтруктОтбор.Вставить( "ДокументыПоДоговоруКонтрагента", ТекДанные.ДоговорКонтрагента);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(
		ЭтотОбъект,
		ЭтаФорма,
		Элемент, 
		СтандартнаяОбработка,
		СтруктОтбор,
		"ДанныеПоРасчетам");
		
КонецПроцедуры // РасчетыСКонтрагентамиДокументНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" колонки "Контрагент"
// табличного поля "Данные по резервам"
//
Процедура ДанныеПоРезервамПоСомнительнымДолгамКонтрагентПриИзменении(Элемент)

	ПриИзмененииКонтрагентаРасчетов(ЭлементыФормы.ДанныеПоРезервамПоСомнительнымДолгам.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" колонки "ДоговорКонтрагента"
// табличного поля "Данные по резервам"
//
Процедура ДанныеПоРезервамПоСомнительнымДолгамДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДанныеПоРезервамПоСомнительнымДолгам.ТекущиеДанные;
	УстановитьСчетаРасчетов(ТекДанные, Истина);
	
КонецПроцедуры // ДанныеПоРезервамПоСомнительнымДолгамДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" колонки "ДоговорКонтрагента"
// табличного поля "Расчеты с контрагентами"
//
Процедура ДанныеПоРезервамПоСомнительнымДолгамДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСписокВидовДоговоров = Новый СписокЗначений;
	
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
		
	ОтборПоВалюте = Новый Структура();
	ОтборПоВалюте.Вставить("ЗначениеОтбора", мВалютаРегламентированногоУчета);
	
	СтруктураДополнительныхПараметров = Новый Структура;
	СтруктураДополнительныхПараметров.Вставить("ВалютаВзаиморасчетов", ОтборПоВалюте);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ЭлементыФормы.ДанныеПоРезервамПоСомнительнымДолгам.ТекущиеДанные.Контрагент, 
											ЭлементыФормы.ДанныеПоРезервамПоСомнительнымДолгам.ТекущиеДанные.ДоговорКонтрагента,
											мСписокВидовДоговоров, СтандартнаяОбработка, СтруктураДополнительныхПараметров);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "Документ"
//
Процедура ДанныеПоРезервамПоСомнительнымДолгамДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.ДанныеПоРезервамПоСомнительнымДолгам.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктОтбор = Новый Структура;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбор.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
		СтруктОтбор.Вставить( "Контрагент", ТекДанные.Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.ДоговорКонтрагента) Тогда
		СтруктОтбор.Вставить( "ДокументыПоДоговоруКонтрагента", ТекДанные.ДоговорКонтрагента);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(
		ЭтотОбъект,
		ЭтаФорма,
		Элемент, 
		СтандартнаяОбработка,
		СтруктОтбор,
		"ДанныеПоРезервамПоСомнительнымДолгам");

КонецПроцедуры // ДанныеПоРезервамПоСомнительнымДолгамДокументРасчетовСКонтрагентомНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" колонк СуммаБУ
// табличного поля "Резервы по сомнительным долгам"
//
Процедура ДанныеПоРезервамПоСомнительнымДолгамСуммаБУПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДанныеПоРезервамПоСомнительнымДолгам.ТекущиеДанные;
	ТекущиеДанные.СуммаНУ = ТекущиеДанные.СуммаБУ;

КонецПроцедуры // ДанныеПоРезервамПоСомнительнымДолгамСуммаБУПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля "Организация"
//
Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мОрганизация = Организация;
	
КонецПроцедуры // ОрганизацияНачалоВыбора()

Процедура КоманднаяПанельДанныеПоРасчетамЗаполнитьДокументыРасчетов(Кнопка)
	
	ЗаполнитьДокументыРасчетов(ДанныеПоРасчетам);
	
КонецПроцедуры

Процедура КоманднаяПанельДанныеПоРасчетамЗаполнитьСуммуСУчетомПереоценки(Кнопка)
	
	Если Дата < '20070101' Тогда
		Предупреждение("Этот режим предназначен для документов с датой не ранее 01.01.2007 г.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = 
	"Во всех строках значение ""Сумма (регл) с учетом переоценки"" будет заполнено
	|результатом пересчета суммы взаиморасчетов по курсу на " + Формат(Дата, "ДФ=дд.ММ.гггг") + "
	|Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьСуммуСУчетомПереоценки(ДанныеПоРасчетам, Ложь);
	
КонецПроцедуры

Процедура КоманднаяПанельДанныеПоРасчетамЗаполнитьНулевуюСуммуСУчетомПереоценки(Кнопка)
	
	Если Дата < '20070101' Тогда
		Предупреждение("Этот режим предназначен для документов с датой не ранее 01.01.2007 г.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = 
	"В строках, где значение ""Сумма (регл) с учетом переоценки"" равно нулю, оно будет заполнено
	|результатом пересчета суммы взаиморасчетов по курсу на " + Формат(Дата, "ДФ=дд.ММ.гггг") + "
	|Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьСуммуСУчетомПереоценки(ДанныеПоРасчетам, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельДанныеПоАвансамЗаполнитьДокументыРасчетов(Кнопка)
	
	ЗаполнитьДокументыРасчетов(ДанныеПоАвансам, "ДанныеПоАвансам");
	
КонецПроцедуры

Процедура КоманднаяПанельДанныеПоАвансамЗаполнитьСуммуСУчетомПереоценки(Кнопка)
	
	Если Дата < '20071231' Тогда
		Предупреждение("Этот режим предназначен для документов с датой не ранее 31.12.2007 г.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = 
	"Во всех строках авансов в валюте значение ""Сумма (регл) с учетом переоценки"" будет заполнено
	|результатом пересчета суммы взаиморасчетов по курсу на " + Формат(Дата, "ДФ=дд.ММ.гггг") + "
	|Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьСуммуСУчетомПереоценки(ДанныеПоАвансам, Ложь, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельДанныеПоАвансамЗаполнитьНулевуюСуммуСУчетомПереоценки(Кнопка)
	
	Если Дата < '20071231' Тогда
		Предупреждение("Этот режим предназначен для документов с датой не ранее 31.12.2007 г.");
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = 
	"В строках авансов в валюте, где значение ""Сумма (регл) с учетом переоценки"" равно нулю, оно будет заполнено
	|результатом пересчета суммы взаиморасчетов по курсу на " + Формат(Дата, "ДФ=дд.ММ.гггг") + "
	|Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли; 
	
	ЗаполнитьСуммуСУчетомПереоценки(ДанныеПоАвансам, Истина, Истина);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура КоманднаяПанельДанныеПоРасчетамДействиеЗаполнитьПоВзаиморасчетамУСН(Кнопка)
	ЗаполнитьПоОстаткамВзаиморасчетыУСН(ДанныеПоРасчетам,ложь);
КонецПроцедуры

Процедура КоманднаяПанельДанныеПоАвансамДействиеЗаполнитьПоВзаиморасчетамУСН(Кнопка)
	ЗаполнитьПоОстаткамВзаиморасчетыУСН(ДанныеПоАвансам,истина);
КонецПроцедуры

Процедура КоманднаяПанельДанныеПоРезервамПоСомнительнымДолгамЗаполнитьПоСомнительнойЗадолженности(Кнопка)
	
	Если ДанныеПоРезервамПоСомнительнымДолгам.Количество() > 0 Тогда
		Ответ = Вопрос("Перед заполнением табличная часть будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, "Заполнить по сомнительной задолженности");
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		ДанныеПоРезервамПоСомнительнымДолгам.Очистить();
	КонецЕсли;

	ЗаполнитьПоСомнительнойЗадолженности();

КонецПроцедуры