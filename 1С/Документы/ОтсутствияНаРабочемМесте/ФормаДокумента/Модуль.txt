////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мНачалоРабочегоДня;
Перем мОкончаниеРабочегоДня;

Перем мДлинаЧаса;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОпределитьПериодРабочегоДня()
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		ДатаСобытия = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
	Иначе
		ДатаСобытия = НачалоДня(ДатаНачала);
	КонецЕсли;
	
	СтруктураРабочегоВремени = УправлениеКонтактами.ОпределитьНачалоИОкончаниеРабочегоДняПользователя(глЗначениеПеременной("глТекущийПользователь"), ДатаСобытия);
	
	НачалоРабочегоДняКонстанта		= СтруктураРабочегоВремени.ДатаНачала;
	ОкончаниеРабочегоДняКонстанта	= СтруктураРабочегоВремени.ДатаОкончания;
	
	ДлинаЧаса = 3600;
	
	мНачалоРабочегоДня		= НачалоЧаса(ДатаСобытия + Час(НачалоРабочегоДняКонстанта) * ДлинаЧаса + Минута(НачалоРабочегоДняКонстанта)*60);
	мОкончаниеРабочегоДня	= НачалоЧаса(ДатаСобытия + Час(ОкончаниеРабочегоДняКонстанта) * ДлинаЧаса + Минута(ОкончаниеРабочегоДняКонстанта)*60) - ДлинаЧаса;
	
КонецПроцедуры

Процедура ОбновитьВремяНачалаОкончанияНаФорме()
	
	Если ДатаНачала <> НачалоДня(ДатаНачала) Тогда
		ДатаНачалаНаФорме		= ДатаНачала;
	Иначе
		ДатаНачалаНаФорме		= 0;
	КонецЕсли;
	
	Если ДатаОкончания <> НачалоДня(ДатаОкончания) Тогда
		ДатаОкончанияНаФорме	= ДатаОкончания;
	Иначе
		ДатаОкончанияНаФорме	= 0;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	ОпределитьПериодРабочегоДня();
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		ОбработкаЗаполненияНовогоДокумента();
	Иначе
		// Установить доступность формы с учетом даты запрета редактирования
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	ОбновитьВремяНачалаОкончанияНаФорме();
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	Оповестить("ОбновитьФактическийОтпуск");
	
	// оповестим журналы о записи нового управленческого документа
	Оповестить("ЗаписанНовыйДокументУправленческогоУчета", Ответственный, Ссылка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)
	
	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)
	
	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	
	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	
	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры // ДатаПриИзменении

Процедура СотрудникПриИзменении(Элемент)
	
	ОпределитьПериодРабочегоДня();
	
КонецПроцедуры


Процедура ПолеВводаВТеченииДняУйдетПриИзменении(Элемент)
	
	ДатаНачала = НачалоДня(ДатаНачала) + (ДатаНачалаНаФорме - НачалоДня(ДатаНачалаНаФорме));
	
	ОбновитьВремяНачалаОкончанияНаФорме();
	
КонецПроцедуры

Процедура ПолеВводаВТеченииДняУйдетНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ДатаНачалаНаФорме) Тогда
		ТекущееВремя = Мин(ТекущаяДата(), мОкончаниеРабочегоДня);
		ДатаНачалаНаФорме = НачалоДня(ТекущееВремя) + Час(ТекущееВремя) * мДлинаЧаса + (?(Минута(ТекущееВремя) < 30, 0, 30) * 60);
	КонецЕсли;
	
	РаботаСДиалогамиДополнительный.ВыбратьВремяДня(ЭтаФорма, ДатаНачалаНаФорме, Элемент, Ответственный, , , Истина);
	
	ДатаНачала = НачалоДня(ДатаНачала) + (ДатаНачалаНаФорме - НачалоДня(ДатаНачалаНаФорме));
	
	ОбновитьВремяНачалаОкончанияНаФорме();
	
КонецПроцедуры


Процедура ПолеВводаВТеченииДняПридетПриИзменении(Элемент)
	
	ДатаОкончания = НачалоДня(ДатаОкончания) + (ДатаОкончанияНаФорме - НачалоДня(ДатаОкончанияНаФорме));
	
	ОбновитьВремяНачалаОкончанияНаФорме();
	
КонецПроцедуры

Процедура ПолеВводаВТеченииДняПридетНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ДатаОкончанияНаФорме) Тогда
		ТекущееВремя = Мин(ТекущаяДата(), мОкончаниеРабочегоДня);
		ДатаОкончанияНаФорме = НачалоДня(ТекущееВремя) + Час(ТекущееВремя) * мДлинаЧаса + (?(Минута(ТекущееВремя) < 30, 0, 30) * 60);
	КонецЕсли;
	
	РаботаСДиалогамиДополнительный.ВыбратьВремяДня(ЭтаФорма, ДатаОкончанияНаФорме, Элемент, Ответственный, , , Истина, ДатаНачала);
	
	ДатаОкончания = НачалоДня(ДатаОкончания) + (ДатаОкончанияНаФорме - НачалоДня(ДатаОкончанияНаФорме));
	
	ОбновитьВремяНачалаОкончанияНаФорме();
	
КонецПроцедуры


Процедура ПолеВводаНесколькоДнейДатаНачалаПриИзменении(Элемент)
	
	Если ДатаНачала > ДатаОкончания Тогда
		ДатаОкончания = НачалоДня(ДатаНачала) + (ДатаОкончания - НачалоДня(ДатаОкончания));
	КонецЕсли;
	
	ОбновитьВремяНачалаОкончанияНаФорме();
	
КонецПроцедуры

Процедура ПолеВводаНесколькоДнейДатаОкончанияПриИзменении(Элемент)
	
	Если НачалоДня(ДатаОкончания) < НачалоДня(ДатаНачала) Тогда
		ДатаНачала = НачалоДня(ДатаОкончания) + (ДатаНачала - НачалоДня(ДатаНачала));
	КонецЕсли;
	
	ОбновитьВремяНачалаОкончанияНаФорме();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаЧаса	= 3600;