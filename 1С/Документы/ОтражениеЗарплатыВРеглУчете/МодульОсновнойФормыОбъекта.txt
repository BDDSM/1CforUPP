////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мСведенияОСчетах;  // для получения сведений о счетах на время работы формы
Перем мСведенияОСтатьяхЗатрат;  // для получения сведений о статьях затрат на время работы формы

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;
// Хранит элемент управления подменю печати
Перем мПодменюПечати;
// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

Перем мВидимостьНУСчета;
Перем мСтруктураЭУ;

Перем мПравилаГрупп;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОтражениеВУчете,ЭлементыФормы.ОтражениеВУчетеПанель);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанельОсновныеНачисления);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДополнительныеНачисления,ЭлементыФормы.КоманднаяПанельДополнительныеНачисления);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Процедура - вызывается из обработчика события "ПриВыводеСтроки"
Процедура ПриВыводеСтроки(Элемент, ОформлениеСтроки)
	
	ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетДт);
	СведенияОСтатьеЗатрат = БухгалтерскийУчет.ПолучитьСведенияОСтатьеЗатратПоСтроке(мСведенияОСтатьяхЗатрат, "Дт", ДанныеСтроки);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Дт", СведенияОСчете);
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетКт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Кт", СведенияОСчете);
	
	Если мВидимостьНУСчета Тогда
		
		СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетДтНУ);
		БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "ДтНУ", СведенияОСчете);
		
		СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетКтНУ);
		БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "КтНУ", СведенияОСчете);
		
	КонецЕсли;

КонецПроцедуры

Процедура ОтражениеВУчетеУстановитьСчетДтНУ()
	
	ТекущаяСтрока = ЭлементыФормы.ОтражениеВУчете.ТекущиеДанные;	
	СведенияОСчете = УстановитьСчетДтНУ(ТекущаяСтрока);	
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеВУчете, "ДтНУ", СведенияОСчете);		
	
КонецПроцедуры

Процедура ОтражениеВУчетеУстановитьСчетКтНУ()
	ТекущаяСтрока = ЭлементыФормы.ОтражениеВУчете.ТекущиеДанные;
	СведенияОСчете = УстановитьСчетКтНУ(ТекущаяСтрока);
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеВУчете, "КтНУ", СведенияОСчете);		

КонецПроцедуры

Процедура ОсновныеНачисленияУстановитьСчетДтНУ()
	
 	ТекущаяСтрока = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	СведенияОСчете = УстановитьСчетДтНУ(ТекущаяСтрока);	
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ОсновныеНачисления, "ДтНУ", СведенияОСчете);		

КонецПроцедуры

Процедура ОсновныеНачисленияУстановитьСчетКтНУ()
	ТекущаяСтрока = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	СведенияОСчете = УстановитьСчетКтНУ(ТекущаяСтрока);	
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ОсновныеНачисления, "КтНУ", СведенияОСчете);		

КонецПроцедуры

Процедура ДополнительныеНачисленияУстановитьСчетДтНУ()
 	ТекущаяСтрока = ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные;
	СведенияОСчете = УстановитьСчетДтНУ(ТекущаяСтрока);	
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ДополнительныеНачисления, "ДтНУ", СведенияОСчете);		

КонецПроцедуры

Процедура ДополнительныеНачисленияУстановитьСчетКтНУ()
	
	ТекущаяСтрока = ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные;
	СведенияОСчете = УстановитьСчетКтНУ(ТекущаяСтрока);	
	БухгалтерскийУчет.ПривестиЗначениеСубконто(ЭлементыФормы.ДополнительныеНачисления, "КтНУ", СведенияОСчете);		

КонецПроцедуры

Функция УстановитьСчетДтНУ(ТекущаяСтрока)

	ТекущаяСтрока.СчетДтНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ТекущаяСтрока.СчетДт));	
	ТекущаяСтрока.СубконтоДтНУ1 = ТекущаяСтрока.СубконтоДт1;
	ТекущаяСтрока.СубконтоДтНУ2 = ТекущаяСтрока.СубконтоДт2;
	ТекущаяСтрока.СубконтоДтНУ3 = ТекущаяСтрока.СубконтоДт3;
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ТекущаяСтрока.СчетДтНУ);
	
	Возврат СведенияОСчете;

КонецФункции

Функция УстановитьСчетКтНУ(ТекущаяСтрока)
	
	ОтборПоСчету = Новый Структура("СчетБУ", ТекущаяСтрока.СчетКт);
	ТекущаяСтрока.СчетКтНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(ОтборПоСчету);
	
	ТекущаяСтрока.СубконтоКтНУ1 = ТекущаяСтрока.СубконтоКт1;
	ТекущаяСтрока.СубконтоКтНУ2 = ТекущаяСтрока.СубконтоКт2;
	ТекущаяСтрока.СубконтоКтНУ3 = ТекущаяСтрока.СубконтоКт3;
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ТекущаяСтрока.СчетКтНУ);
	
	Возврат СведенияОСчете;
	
КонецФункции

Процедура УстановитьТекущуюГруппуПроводок(Кнопка)
	
	ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Текст = Кнопка.Текст;

	Для Каждого КнопкаГруппы Из ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки Цикл
		КнопкаГруппы.Пометка = Ложь;
	КонецЦикла;	
	
	Кнопка.Пометка = Истина;
	
	Правило = мПравилаГрупп[Кнопка.Имя];
	Если Правило <> Неопределено Тогда
		
		ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.Сбросить();
		
		Если Правило.Дебет = Неопределено Тогда
			ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетДт.Использование = Ложь;
		Иначе
			ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетДт.ВидСравнения = Правило.Дебет.ВидСравнения;
			ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетДт.Значение = Правило.Дебет.Значение;
			ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетДт.Использование = Истина;
		КонецЕсли;
		
		Если Правило.Кредит = Неопределено Тогда
			ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетКт.Использование = Ложь;
		Иначе
			ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетКт.ВидСравнения = Правило.Кредит.ВидСравнения;
			ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетКт.Значение = Правило.Кредит.Значение;
			ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетКт.Использование = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура УточнитьИмяОтбораЕСН()

	Если ПериодРегистрации < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаЕСНиПФР.Текст = "ЕСН и взносы в ПФР";
	Иначе
		ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаЕСНиПФР.Текст = "Страховые взносы";
	КонецЕсли;

КонецПроцедуры

Процедура ЗаполнитьГруппыДляОтборов()
	
	////////////////////////////////////////////////////////////////////////////////
	// Заполнение групп
	
	// Выбираем интересующие счета
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Счета.Вид КАК Вид,
	|	Счета.Ссылка КАК Счет
	|ИЗ
	|	(ВЫБРАТЬ
	|		""Затраты"" КАК Вид,
	|		Хозрасчетный.Ссылка КАК Ссылка,
	|		Хозрасчетный.Код КАК Код,
	|		Хозрасчетный.ПометкаУдаления КАК ПометкаУдаления,
	|		Хозрасчетный.ЗапретитьИспользоватьВПроводках КАК ЗапретитьИспользоватьВПроводках
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|	ГДЕ
	|		Хозрасчетный.Ссылка В ИЕРАРХИИ(&Затраты)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""Резервы"",
	|		Хозрасчетный.Ссылка,
	|		Хозрасчетный.Код,
	|		Хозрасчетный.ПометкаУдаления,
	|		Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|	ГДЕ
	|		Хозрасчетный.Ссылка В ИЕРАРХИИ(&Резервы)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""РБП"",
	|		Хозрасчетный.Ссылка,
	|		Хозрасчетный.Код,
	|		Хозрасчетный.ПометкаУдаления,
	|		Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|	ГДЕ
	|		Хозрасчетный.Ссылка В ИЕРАРХИИ(&РБП)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""ФСС"",
	|		Хозрасчетный.Ссылка,
	|		Хозрасчетный.Код,
	|		Хозрасчетный.ПометкаУдаления,
	|		Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|	ГДЕ
	|		Хозрасчетный.Ссылка В ИЕРАРХИИ(&ФСС)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""НДФЛ"",
	|		Хозрасчетный.Ссылка,
	|		Хозрасчетный.Код,
	|		Хозрасчетный.ПометкаУдаления,
	|		Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|	ГДЕ
	|		Хозрасчетный.Ссылка В ИЕРАРХИИ(&НДФЛ)
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		""НСПЗ"",
	|		Хозрасчетный.Ссылка,
	|		Хозрасчетный.Код,
	|		Хозрасчетный.ПометкаУдаления,
	|		Хозрасчетный.ЗапретитьИспользоватьВПроводках
	|	ИЗ
	|		ПланСчетов.Хозрасчетный КАК Хозрасчетный
	|	ГДЕ
	|		Хозрасчетный.Ссылка В ИЕРАРХИИ(&НСПЗ)) КАК Счета
	|ГДЕ
	|	(НЕ Счета.ПометкаУдаления)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Вид,
	|	Счета.Код";
	
	// счета затрат
	Затраты = Новый Массив;
	Затраты.Добавить(ПланыСчетов.Хозрасчетный.ВложенияВоВнеоборотныеАктивы); // 08
	Затраты.Добавить(ПланыСчетов.Хозрасчетный.ОсновноеПроизводство_); // 20
	Затраты.Добавить(ПланыСчетов.Хозрасчетный.ВспомогательныеПроизводства); // 23
	Затраты.Добавить(ПланыСчетов.Хозрасчетный.ОбщепроизводственныеРасходы); // 25
	Затраты.Добавить(ПланыСчетов.Хозрасчетный.ОбщехозяйственныеРасходы); // 26
	Затраты.Добавить(ПланыСчетов.Хозрасчетный.БракВПроизводстве); // 28
	Затраты.Добавить(ПланыСчетов.Хозрасчетный.ОбслуживающиеПроизводства); // 29
	Затраты.Добавить(ПланыСчетов.Хозрасчетный.РасходыНаПродажу); // 44
	Затраты.Добавить(ПланыСчетов.Хозрасчетный.ЦелевоеФинансирование); // 86
	Затраты.Добавить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы); // 91.02
	
	// Резервы
	Резервы = Новый Массив;
	Резервы.Добавить(ПланыСчетов.Хозрасчетный.РезервыПредстоящихРасходов);  // 96
	
	// РБП
	РБП = Новый Массив;
	РБП.Добавить(ПланыСчетов.Хозрасчетный.РасходыБудущихПериодов); // 97
	
	// ФСС
	ФСС = Новый Массив;
	ФСС.Добавить(ПланыСчетов.Хозрасчетный.РасчетыПоСоциальномуСтрахованию); // 69
	
	// НСПЗ
	НСПЗ = Новый Массив;
	НСПЗ.Добавить(ПланыСчетов.Хозрасчетный.ФСС_НСиПЗ); // 69.11
	
	// НДФЛ
	НДФЛ = Новый Массив;
	НДФЛ.Добавить(ПланыСчетов.Хозрасчетный.НДФЛ); // 68.01
	
	Запрос.УстановитьПараметр("Затраты", Затраты);
	Запрос.УстановитьПараметр("Резервы", Резервы);
	Запрос.УстановитьПараметр("РБП", РБП);
	Запрос.УстановитьПараметр("ФСС", ФСС);
	Запрос.УстановитьПараметр("НСПЗ", НСПЗ);
	Запрос.УстановитьПараметр("НДФЛ", НДФЛ);
	
	ТаблицаСчетов = Запрос.Выполнить().Выгрузить();
	
	// Группируем счета по видам
	СчетаЗатрат = Новый СписокЗначений();
	СчетаЗатрат.ЗагрузитьЗначения(ТаблицаСчетов.Скопировать(Новый Структура("Вид", "Затраты")).ВыгрузитьКолонку("Счет"));
	
	СчетаРезервов = Новый СписокЗначений();
	СчетаРезервов.ЗагрузитьЗначения(ТаблицаСчетов.Скопировать(Новый Структура("Вид", "Резервы")).ВыгрузитьКолонку("Счет"));
	
	СчетаРБП = Новый СписокЗначений();
	СчетаРБП.ЗагрузитьЗначения(ТаблицаСчетов.Скопировать(Новый Структура("Вид", "РБП")).ВыгрузитьКолонку("Счет"));
	
	СчетаФСС = Новый СписокЗначений();
	СчетаФСС.ЗагрузитьЗначения(ТаблицаСчетов.Скопировать(Новый Структура("Вид", "ФСС")).ВыгрузитьКолонку("Счет"));
	
	СчетаНСПЗ = Новый СписокЗначений();
	СчетаНСПЗ.ЗагрузитьЗначения(ТаблицаСчетов.Скопировать(Новый Структура("Вид", "НСПЗ")).ВыгрузитьКолонку("Счет"));
	
	СчетаНДФЛ = Новый СписокЗначений();
	СчетаНДФЛ.ЗагрузитьЗначения(ТаблицаСчетов.Скопировать(Новый Структура("Вид", "НДФЛ")).ВыгрузитьКолонку("Счет"));
	
	СчетаРасходов = Новый СписокЗначений();
	СчетаРасходов.ЗагрузитьЗначения(СчетаЗатрат.ВыгрузитьЗначения());
	Для Каждого Счет Из СчетаРезервов Цикл
		СчетаРасходов.Добавить(Счет.Значение);
	КонецЦикла;
	Для Каждого Счет Из СчетаРБП Цикл
		СчетаРасходов.Добавить(Счет.Значение);
	КонецЦикла;
	
	СчетаФССбезНСПЗ = Новый СписокЗначений;
	СчетаФССбезНСПЗ.ЗагрузитьЗначения(СчетаФСС.ВыгрузитьЗначения());
	Для Каждого Счет Из СчетаНСПЗ Цикл
		СчетНСПЗ = СчетаФССбезНСПЗ.НайтиПоЗначению(Счет.Значение);
		Если СчетаФССбезНСПЗ <> Неопределено Тогда 
			СчетаФССбезНСПЗ.Удалить(СчетНСПЗ);
		КонецЕсли;
	КонецЦикла;
	
	// Заполняем правила
	
	ИменаСвойствПравила= "Дебет, Кредит";		
	ИменаСвойствОтбора	= "ВидСравнения, Значение";
	
	// Все проводки
	мПравилаГрупп.Вставить(
	ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаВсеПроводки.Имя, 
	Новый Структура(ИменаСвойствПравила,
	Неопределено,
	Неопределено));
	
	// Начисления
	мПравилаГрупп.Вставить(
	ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаНачисления.Имя, 
	Новый Структура(ИменаСвойствПравила,
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.ВСписке, СчетаРасходов),
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.Равно, ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)));
	
	// Пособия за счет ФСС
	мПравилаГрупп.Вставить(
	ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаПособияФСС.Имя, 
	Новый Структура(ИменаСвойствПравила,
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.ВСписке, СчетаФСС),
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.Равно, ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда)));
	
	// Удержания
	мПравилаГрупп.Вставить(
	ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаУдержания.Имя, 
	Новый Структура(ИменаСвойствПравила,
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.Равно, ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда),
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.НеВСписке, СчетаНДФЛ)));			
	
	// НДФЛ
	мПравилаГрупп.Вставить(
	ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаНДФЛ.Имя, 
	Новый Структура(ИменаСвойствПравила, Неопределено,
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.ВСписке, СчетаНДФЛ)));
	
	// ЕСН и взносы в ПФР
	мПравилаГрупп.Вставить(
	ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаЕСНиПФР.Имя, 
	Новый Структура(ИменаСвойствПравила,
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.ВСписке, СчетаРасходов),
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.ВСписке, СчетаФССбезНСПЗ)));
	
	// Взносы в ФСС на НС и ПЗ
	мПравилаГрупп.Вставить(
	ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаНСиПЗ.Имя, 
	Новый Структура(ИменаСвойствПравила,
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.ВСписке, СчетаРасходов),
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.ВСписке, СчетаНСПЗ)));
	
	// Списание РБП
	мПравилаГрупп.Вставить(
	ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаРБП.Имя, 
	Новый Структура(ИменаСвойствПравила,
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.ВСписке, СчетаЗатрат),
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.ВСписке, СчетаРБП)));
	
	// Отчисления в резервы
	мПравилаГрупп.Вставить(
	ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаРезервы.Имя, 
	Новый Структура(ИменаСвойствПравила,
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.ВСписке, СчетаЗатрат),
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.ВСписке, СчетаРезервов)));
	
	//Прочие
	СчетаДт = Новый СписокЗначений;
	СчетаКт = Новый СписокЗначений;
	
	СчетаДт.ЗагрузитьЗначения(СчетаЗатрат.ВыгрузитьЗначения());
	СчетаКт.ЗагрузитьЗначения(СчетаНДФЛ.ВыгрузитьЗначения());
	
	Для Каждого Счет Из СчетаРезервов Цикл
		СчетаДт.Добавить(Счет.Значение);
		СчетаКт.Добавить(Счет.Значение);
	КонецЦикла;
	Для Каждого Счет Из СчетаРБП Цикл
		СчетаДт.Добавить(Счет.Значение);
		СчетаКт.Добавить(Счет.Значение);
	КонецЦикла;
	Для Каждого Счет Из СчетаФСС Цикл
		СчетаДт.Добавить(Счет.Значение);
		СчетаКт.Добавить(Счет.Значение);
	КонецЦикла;
	СчетаДт.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	СчетаКт.Добавить(ПланыСчетов.Хозрасчетный.РасчетыСПерсоналомПоОплатеТруда);
	
	мПравилаГрупп.Вставить(
	ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаПрочие.Имя, 
	Новый Структура(ИменаСвойствПравила,
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.НеВСписке, СчетаДт),
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.НеВСписке, СчетаКт)));
	
	// пустой счет Дт
	мПравилаГрупп.Вставить(
	ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаПустойСчетДт.Имя, 
	Новый Структура(ИменаСвойствПравила,
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.Равно, ПланыСчетов.Хозрасчетный.ПустаяСсылка()),
	Неопределено));
	
	// пустой счет Кт
	мПравилаГрупп.Вставить(
	ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаПустойСчетКт.Имя, 
	Новый Структура(ИменаСвойствПравила,
	Неопределено,
	Новый Структура(
	ИменаСвойствОтбора,
	ВидСравнения.Равно, ПланыСчетов.Хозрасчетный.ПустаяСсылка())));
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	ЗаполнитьГруппыДляОтборов();
	

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;	

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СчетДт");
	СтруктураКолонок.Вставить("СчетКт");
	СтруктураКолонок.Вставить("СчетДтНУ");
	СтруктураКолонок.Вставить("СчетКтНУ");		
 	СтруктураКолонок.Вставить("Сумма");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОтражениеВУчете.Колонки, СтруктураКолонок);
		
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ТабельныйНомерСтрока);
	мМассивЭУ.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
			
	// отразим видимость элементов формы в зависимости от учетной политики
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата);
	мСтруктураЭУ = СоздатьСтруктуруЭУ();
	мВидимостьНУСчета = Ложь;
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУБухучета(мСтруктураЭУ, мВидимостьНУСчета , Организация, ПериодРегистрации);
	
	УстановитьТекущуюГруппуПроводок(ЭлементыФормы.ОтражениеВУчетеПанель.Кнопки.МенюГруппы.Кнопки.ГруппаВсеПроводки);
	
	УточнитьИмяОтбораЕСН();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
КонецПроцедуры // ПриОткрытии()

// Функция создает структуру массивов ЭУ, которая используется для управления видимостью ЭУ,
// зависящих от учетной политики и программы бухучета
//
Функция СоздатьСтруктуруЭУ()

	мСтруктураЭУ = Новый Структура();
	
	// УСН
	Массив = Новый Массив;
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.ОтражениеВУСН);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ОтражениеВУСН);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.ОтражениеВУСН);
	мСтруктураЭУ.Вставить("ВидимостьУСН", Массив);
	
	// ИП
	Массив = Новый Массив;
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.ВидНачисленияУдержанияИП);
	мСтруктураЭУ.Вставить("ВидимостьИП", Массив);
	
	// ВидимостьУчетПоПодразделениям
	Массив = Новый Массив;
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.ПодразделениеДт);
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.ПодразделениеКт);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ПодразделениеДт);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ПодразделениеКт);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.ПодразделениеДт);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.ПодразделениеКт);
	мСтруктураЭУ.Вставить("ВидимостьУчетПоПодразделениям", Массив);
	
	// ВидимостьНУ
	Массив = Новый Массив;
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.СуммаНУ);
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.СуммаВР);
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.СуммаПР);
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.ВидНачисленийОплатыТрудаПоСтатье255НК);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.СуммаНУ);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.СуммаВР);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.СуммаПР);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ВидНачисленийОплатыТрудаПоСтатье255НК);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.СуммаНУ);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.СуммаВР);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.СуммаПР);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.ВидНачисленийОплатыТрудаПоСтатье255НК);
	мСтруктураЭУ.Вставить("ВидимостьНУ", Массив);
	
	// ВидимостьНУСчета
	Массив = Новый Массив;
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.СчетДтНУ);
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.СчетКтНУ);
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.СубконтоДтНУ1);
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.СубконтоДтНУ2);
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.СубконтоДтНУ3);
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.СубконтоКтНУ1);
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.СубконтоКтНУ2);
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.СубконтоКтНУ3);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.СчетДтНУ);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.СчетКтНУ);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.СубконтоДтНУ1);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.СубконтоДтНУ2);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.СубконтоДтНУ3);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.СубконтоКтНУ1);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.СубконтоКтНУ2);
	Массив.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.СубконтоКтНУ3);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.СчетДтНУ);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.СчетКтНУ);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.СубконтоДтНУ1);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.СубконтоДтНУ2);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.СубконтоДтНУ3);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.СубконтоКтНУ1);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.СубконтоКтНУ2);
	Массив.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.СубконтоКтНУ3);
	мСтруктураЭУ.Вставить("ВидимостьНУСчета", Массив);
	
	// ВидимостьОКАТОКПП
	Массив = Новый Массив;
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.КодПоОКАТО);
	Массив.Добавить(ЭлементыФормы.ОтражениеВУчете.Колонки.КПП);
	мСтруктураЭУ.Вставить("ВидимостьОКАТОКПП", Массив);
	
	Возврат мСтруктураЭУ;

КонецФункции // СоздатьСтруктуруЭУ()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

Процедура ДействияФормыЗаполнить(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить(ОсновныеНачисления);
	МассивТаблиц.Добавить(ДополнительныеНачисления);
	МассивТаблиц.Добавить(ОтражениеВУчете);
	ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
	ТекстВопроса2 = "Перед заполнением все таблицы документа будут очищены. Продолжить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	ОтражениеВУчете.Очистить();
	ОсновныеНачисления.Очистить();
	ДополнительныеНачисления.Очистить();
	ЭтаФорма.Обновить();
	
	Автозаполнение();
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Если ОсновныеНачисления.Количество() = 0 И ДополнительныеНачисления.Количество() = 0 И ОтражениеВУчете.Количество() = 0 Тогда
		
		Сообщить("Не обнаружены данные для записи в табличные части документа.", СтатусСообщения.Важное )
		
	КонецЕсли;
			
КонецПроцедуры // ДействияФормыЗаполнить()

Процедура ДействияФормыОчистить(Кнопка)
	
	Если ОтражениеВУчете.Количество() > 0
		или ОсновныеНачисления.Количество() > 0
		или ДополнительныеНачисления.Количество() > 0 Тогда
		
		ТекстВопроса = "Все таблицы документа будут очищены. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли; 
	
	ОтражениеВУчете.Очистить();
	ОсновныеНачисления.Очистить();
	ДополнительныеНачисления.Очистить();
	
КонецПроцедуры // ДействияФормыОчистить()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры
 
// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// отразим видимость элементов формы в зависимости от учетной политики
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, ЭлементыФормы.Организация.Значение, Дата);	
	мВидимостьНУСчета = Ложь;
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУБухучета(мСтруктураЭУ, мВидимостьНУСчета , Организация, ПериодРегистрации);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	УточнитьИмяОтбораЕСН();
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	УточнитьИмяОтбораЕСН();
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТАБЛИЧНОГО ПОЛЯ ОтражениеВУчете

Процедура ОтражениеВУчетеПанельСформироватьПроводки(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить(ОтражениеВУчете);
	ТекстВопроса1 = "Автоматически сформировать проводки можно только после отмены проведения документа. Продолжить?";
	ТекстВопроса2 = "Текущие проводки будут удалены. Продолжить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	ОтражениеВУчете.Очистить();
	ЭтаФорма.Обновить();
	
	АвтозаполнениеПроводок();
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	Если ОсновныеНачисления.Количество() = 0 И
		ДополнительныеНачисления.Количество() = 0 Тогда
		
		Сообщить("Не обнаружены данные для формирования проводок.", СтатусСообщения.Важное )
		
	КонецЕсли;
			
КонецПроцедуры

Процедура ОтражениеВУчетеПанельВыбратьГруппу(Кнопка)
	
	УстановитьТекущуюГруппуПроводок(Кнопка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельОсновныеНачисленияПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ОсновныеНачисления, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 5);
	
КонецПроцедуры // КоманднаяПанельОсновныеНачисленияПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТАБЛИЧНОГО ПОЛЯ ДополнительныеНачисления

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельДополнительныеНачисленияПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ДополнительныеНачисления, Ссылка, Ложь, Дата, мГоловнаяОрганизация);
	
КонецПроцедуры // КоманднаяПанельДополнительныеНачисленияПодбор()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ОтражениеВУчете 

Процедура ОтражениеВУчетеПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ПриВыводеСтроки(Элемент, ОформлениеСтроки);
		БухгалтерскийУчетДополнительный.НазначитьВидимостьДополнительныхЯчеек(ОформлениеСтроки);
		// строки с отрицательным результатом - красным
		Если ОформлениеСтроки.ДанныеСтроки.Сумма < 0 Тогда
			ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОтражениеВУчете

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДт
Процедура ОтражениеВУчетеСчетДтПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеВУчете, "Дт", СведенияОСчете);
	ОтражениеВУчетеУстановитьСчетДтНУ();
	
КонецПроцедуры

Процедура ОтражениеВУчетеСчетДтНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора(,Элемент,Ссылка);
	
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетДт.ВидСравнения;
	ФормаВыбора.Отбор.Ссылка.Значение = ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетДт.Значение;
	ФормаВыбора.Отбор.Ссылка.Использование = ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетДт.Использование;
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетДт
Процедура ОтражениеВУчетеСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" полей ввода СубконтоД1, СубконтоД2, СубконтоД3
//
Процедура ОтражениеВУчетеСубконтоДтПриИзменении(Элемент)
	
	ОтражениеВУчетеУстановитьСчетДтНУ();
	
КонецПроцедуры // ОтражениеВУчетеСубконтоДтПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля СубконтоДт1
//
Процедура ОтражениеВУчетеСубконтоДт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля СубконтоДт1
//
Процедура ОтражениеВУчетеСубконтоДт1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля СубконтоДт1
//
Процедура ОтражениеВУчетеСубконтоДт1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетКт
Процедура ОтражениеВУчетеСчетКтПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеВУчете, "Кт", СведенияОСчете);
	ОтражениеВУчетеУстановитьСчетКтНУ();
		
КонецПроцедуры

Процедура ОтражениеВУчетеСчетКтНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПланыСчетов.Хозрасчетный.ПолучитьФормуВыбора(,Элемент,Ссылка);
	
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетКт.ВидСравнения;
	ФормаВыбора.Отбор.Ссылка.Значение = ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетКт.Значение;
	ФормаВыбора.Отбор.Ссылка.Использование = ЭлементыФормы.ОтражениеВУчете.ОтборСтрок.СчетКт.Использование;
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();

КонецПроцедуры // ОтражениеВУчетеСчетКтНачалоВыбора

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетКт
Процедура ОтражениеВУчетеСчетКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" полей ввода СубконтоК1, СубконтоК2, СубконтоК3
//
Процедура ОтражениеВУчетеСубконтоКтПриИзменении(Элемент)
	
	ОтражениеВУчетеУстановитьСчетКтНУ();
	
КонецПроцедуры // ОтражениеВУчетеСубконтоКтПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля СубконтоКт1
//
Процедура ОтражениеВУчетеСубконтоКт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля СубконтоКт1
//
Процедура ОтражениеВУчетеСубконтоКт1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля СубконтоКт1
//
Процедура ОтражениеВУчетеСубконтоКт1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДтНУ
Процедура ОтражениеВУчетеСчетДтНУПриИзменении(Элемент)
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеВУчете, "ДтНУ", СведенияОСчете);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетДтНУ
Процедура ОтражениеВУчетеСчетДтНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
		
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СубконтоДтНУ1
//
Процедура ОтражениеВУчетеСубконтоДтНУ1НачалоВыбора(Элемент, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля СубконтоДтНУ1
//
Процедура ОтражениеВУчетеСубконтоДтНУ1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля СубконтоДтНУ1
//
Процедура ОтражениеВУчетеСубконтоДтНУ1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетКтНУ
Процедура ОтражениеВУчетеСчетКтНУПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеВУчете, "КтНУ", СведенияОСчете);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетКтНУ
Процедура ОтражениеВУчетеСчетКтНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СубконтоКтНУ1
//
Процедура ОтражениеВУчетеСубконтоКтНУ1НачалоВыбора(Элемент, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля СубконтоКтНУ1
//
Процедура ОтражениеВУчетеСубконтоКтНУ1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля СубконтоКтНУ1
//
Процедура ОтражениеВУчетеСубконтоКтНУ1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ ОсновныеНачисления


// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура ОсновныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ОсновныеНачисления, ОформленияСтрок);
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ПриВыводеСтроки(Элемент, ОформлениеСтроки);	
		Если ОформлениеСтроки.ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ОсновныеНачисленияПриПолученииДанных()

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура ОсновныеНачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ОсновныеНачисления.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		НоваяСтрока = ОсновныеНачисления.Добавить();
		НоваяСтрока.Сотрудник = ВыбранноеЗначение;
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

// Процедура - обработчик события "ПриИзменении" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 5, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // СотрудникАвтоПодборТекста()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // СотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДт
Процедура ОсновныеНачисленияСчетДтПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ОсновныеНачисления, "Дт", СведенияОСчете);
	ОсновныеНачисленияУстановитьСчетДтНУ();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетДт
Процедура ОсновныеНачисленияСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" полей ввода СубконтоД1, СубконтоД2, СубконтоД3
//
Процедура ОсновныеНачисленияСубконтоДтПриИзменении(Элемент)
	
	ОсновныеНачисленияУстановитьСчетДтНУ();
	
КонецПроцедуры // ОсновныеНачисленияСубконтоДтПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля СубконтоДт1
//
Процедура ОсновныеНачисленияСубконтоДт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля СубконтоДт1
//
Процедура ОсновныеНачисленияСубконтоДт1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля СубконтоДт1
//
Процедура ОсновныеНачисленияСубконтоДт1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетКт
Процедура ОсновныеНачисленияСчетКтПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ОсновныеНачисления, "Кт", СведенияОСчете);
	ОсновныеНачисленияУстановитьСчетКтНУ();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетКт
Процедура ОсновныеНачисленияСчетКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" полей ввода СубконтоК1, СубконтоК2, СубконтоК3
//
Процедура ОсновныеНачисленияСубконтоКтПриИзменении(Элемент)
	
	УстановитьСчетКтНУ(ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные);
	
КонецПроцедуры // ОсновныеНачисленияСубконтоКтПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля СубконтоКт1
//
Процедура ОсновныеНачисленияСубконтоКт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля СубконтоКт1
//
Процедура ОсновныеНачисленияСубконтоКт1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля СубконтоКт1
//
Процедура ОсновныеНачисленияСубконтоКт1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДтНУ
Процедура ОсновныеНачисленияСчетДтНУПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ОсновныеНачисления, "ДтНУ", СведенияОСчете);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетДтНУ
Процедура ОсновныеНачисленияСчетДтНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СубконтоДтНУ1
//
Процедура ОсновныеНачисленияСубконтоДтНУ1НачалоВыбора(Элемент, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля СубконтоДтНУ1
//
Процедура ОсновныеНачисленияСубконтоДтНУ1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля СубконтоДтНУ1
//
Процедура ОсновныеНачисленияСубконтоДтНУ1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетКтНУ
Процедура ОсновныеНачисленияСчетКтНУПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ОсновныеНачисления, "КтНУ", СведенияОСчете);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетКтНУ
Процедура ОсновныеНачисленияСчетКтНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СубконтоКтНУ1
//
Процедура ОсновныеНачисленияСубконтоКтНУ1НачалоВыбора(Элемент, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля СубконтоКтНУ1
//
Процедура ОсновныеНачисленияСубконтоКтНУ1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля СубконтоКтНУ1
//
Процедура ОсновныеНачисленияСубконтоКтНУ1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

Процедура ОсновныеНачисленияДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Организация.Пустая() Тогда
		Предупреждение("Не выбрана организация!", 10);
		Возврат;
	КонецЕсли;
		
	РаботаСДиалогамиЗК.ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, ЭтаФорма, Ссылка, Организация, СтандартнаяОбработка, Истина);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ДополнительныеНачисления

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура ДополнительныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ДополнительныеНачисления, ОформленияСтрок);
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ПриВыводеСтроки(Элемент, ОформлениеСтроки);
		Если ОформлениеСтроки.ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ДополнительныеНачисленияПриПолученииДанных()

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура ДополнительныеНачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ДополнительныеНачисления.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		НоваяСтрока = ДополнительныеНачисления.Добавить();
		НоваяСтрока.Сотрудник = ВыбранноеЗначение;
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ДополнительныеНачисления


// Процедура - обработчик события "ПриИзменении" поля ввода Сотрудника
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ДополнительныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Сотрудника
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ДополнительныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ДополнительныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Сотрудника
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ДополнительныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 1, Текст, Организация);
	
КонецПроцедуры // СотрудникАвтоПодборТекста()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Сотрудника
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ДополнительныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 1, Текст, Организация);
	
КонецПроцедуры // СотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДт
Процедура ДополнительныеНачисленияСчетДтПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ДополнительныеНачисления, "Дт", СведенияОСчете);
	ДополнительныеНачисленияУстановитьСчетДтНУ();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетДт
Процедура ДополнительныеНачисленияСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" полей ввода СубконтоД1, СубконтоД2, СубконтоД3
//
Процедура ДополнительныеНачисленияСубконтоДтПриИзменении(Элемент)
	
	ДополнительныеНачисленияУстановитьСчетДтНУ();
	
КонецПроцедуры // ДополнительныеНачисленияСубконтоДтПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля СубконтоДт1
//
Процедура ДополнительныеНачисленияСубконтоДт1НачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)

КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля СубконтоДт1
//
Процедура ДополнительныеНачисленияСубконтоДт1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля СубконтоДт1
//
Процедура ДополнительныеНачисленияСубконтоДт1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетКт
//
Процедура ДополнительныеНачисленияСчетКтПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ДополнительныеНачисления, "Кт", СведенияОСчете);
	ДополнительныеНачисленияУстановитьСчетКтНУ();
	
КонецПроцедуры // ДополнительныеНачисленияСчетКтПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетКт
Процедура ДополнительныеНачисленияСчетКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" полей ввода СубконтоК1, СубконтоК2, СубконтоК3
//
Процедура ДополнительныеНачисленияСубконтоКтПриИзменении(Элемент)
	
	УстановитьСчетКтНУ(ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные);
	
КонецПроцедуры // ДополнительныеНачисленияСубконтоКтПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля СубконтоКт1
//
Процедура ДополнительныеНачисленияСубконтоКт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля СубконтоКт1
//
Процедура ДополнительныеНачисленияСубконтоКт1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля СубконтоКт1
//
Процедура ДополнительныеНачисленияСубконтоКт1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДтНУ
Процедура ДополнительныеНачисленияСчетДтНУПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ДополнительныеНачисления, "ДтНУ", СведенияОСчете);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетДтНУ
Процедура ДополнительныеНачисленияСчетДтНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)	
	
	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СубконтоДтНУ1
//
Процедура ДополнительныеНачисленияСубконтоДтНУ1НачалоВыбора(Элемент, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля СубконтоДтНУ1
//
Процедура ДополнительныеНачисленияСубконтоДтНУ1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля СубконтоДтНУ1
//
Процедура ДополнительныеНачисленияСубконтоДтНУ1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетКтНУ
Процедура ДополнительныеНачисленияСчетКтНУПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ДополнительныеНачисления, "КтНУ", СведенияОСчете);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетКтНУ
Процедура ДополнительныеНачисленияСчетКтНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СубконтоКтНУ1
//
Процедура ДополнительныеНачисленияСубконтоКтНУ1НачалоВыбора(Элемент, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля СубконтоКтНУ1
//
Процедура ДополнительныеНачисленияСубконтоКтНУ1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля СубконтоКтНУ1
//
Процедура ДополнительныеНачисленияСубконтоКтНУ1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент,Организация)
КонецПроцедуры

Процедура ДополнительныеНачисленияДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Организация.Пустая() Тогда
		Предупреждение("Не выбрана организация!", 10);
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, ЭтаФорма, Ссылка, Организация, СтандартнаяОбработка, Ложь);

КонецПроцедуры

Процедура ДополнительныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;
		Элемент.ТекущиеДанные.ДатаНачисления = ПериодРегистрации;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ДополнительныеНачисленияДатаНачисленияПриИзменении(Элемент)
	
	Если Элемент.Значение < ПериодРегистрации Тогда
		Элемент.Значение = ПериодРегистрации;
	ИначеЕсли Элемент.Значение > КонецМесяца(ПериодРегистрации) Тогда
		Элемент.Значение = КонецМесяца(ПериодРегистрации);
	КонецЕсли;	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

мСведенияОСчетах = Новый Соответствие;
мСведенияОСтатьяхЗатрат = Новый Соответствие;

мПравилаГрупп = Новый Соответствие;