////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит текущую дату документа
Перем мДатаДокумента;

// Используется для определения необходимости указания счета списания НДС на расходы.
Перем мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;

// Хранит дату конца налогового периода
Перем мКонецПериода;

// Определяет параметры учетной политики
//
Процедура ОпределитьПараметрыНДСПоУчетнойПолитике()
	
	ПараметрыНУ = Неопределено;
	мКонецПериода = УчетНДС.ПолучитьКонецПериодаПоУчетнойПолитике(Организация, Дата, , ПараметрыНУ);
	Если НЕ ЗначениеЗаполнено(ПараметрыНУ)  Тогда
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
	Иначе
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = ПараметрыНУ.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;
		Если НЕ ЗначениеЗаполнено(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость) Тогда
			мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ОпределитьСложныйУчетНДС()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьВидимость()
	
	ВидимостьСчетИАналитикаСписанияНДС = Не ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат;
	ВидимостьСтатьяЗатратНДС = ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат;
	ВидимостьСчетовСписанияБУ = ?(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ, Дата >= '20060101', мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.СписыватьНаРасходы)
								И Не ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат;
			
	ВидимостьСчетовСписанияНУ = (Дата >= '20060101'
			И Не ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат);
	
	ЭлементыФормы.РамкаГруппыСчетСписанияНДС.Видимость 		= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.ПанельСчетСписанияБУ.Видимость 			= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.ПанельСчетСписанияНУ.Видимость 			= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.ПодразделениеОрганизации.Видимость		= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НадписьПодразделениеОрганизации.Видимость	= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.СтатьяЗатратСписанияНДС.Видимость 		= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НадписьСтатьяЗатратСписанияНДС.Видимость 	= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НоменклатурнаяГруппа.Видимость 			= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НадписьНоменклатурнаяГруппа.Видимость 	= ВидимостьСчетИАналитикаСписанияНДС;
	
	ЭлементыФормы.СтатьяЗатратСписанияНДС.Доступность 		= ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НадписьСтатьяЗатратСписанияНДС.Доступность = ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НоменклатурнаяГруппа.Доступность 			= ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НадписьНоменклатурнаяГруппа.Доступность 	= ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	
	Если ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ Тогда
		ЭлементыФормы.СтатьяЗатратСписанияНДС.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СтатьяЗатратСписанияНДС);
	Иначе
		ЭлементыФормы.СтатьяЗатратСписанияНДС.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если ВидимостьСчетовСписанияБУ Тогда
		ЭлементыФормы.ПанельСчетСписанияБУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияБУ.Страницы.Счет;
	Иначе
		ЭлементыФормы.ПанельСчетСписанияБУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияБУ.Страницы.Надпись;
	КонецЕсли;
	
	Если ВидимостьСчетовСписанияНУ Тогда
		ЭлементыФормы.ПанельСчетСписанияНУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияНУ.Страницы.Счет;
	Иначе
		ЭлементыФормы.ПанельСчетСписанияНУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияНУ.Страницы.Надпись;
	КонецЕсли;
	
	ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетСписанияНДС, Неопределено);
	ХарактерЗатратНУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетСписанияНДСНУ, Неопределено, "Налоговый");
	
	Если ВидимостьСчетовСписанияБУ И ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДС, ЭлементыФормы.СубконтоСписанияНДС1, ЭлементыФормы.НадписьСубконтоСписанияНДС1,
							   			ЭлементыФормы.СубконтоСписанияНДС2, ЭлементыФормы.НадписьСубконтоСписанияНДС2,
						       			ЭлементыФормы.СубконтоСписанияНДС3, ЭлементыФормы.НадписьСубконтоСписанияНДС3);
	Иначе
		ЭлементыФормы.СубконтоСписанияНДС1.Видимость 		= Ложь;
		ЭлементыФормы.СубконтоСписанияНДС2.Видимость 		= Ложь;
		ЭлементыФормы.СубконтоСписанияНДС3.Видимость 		= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДС1.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДС2.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДС3.Видимость = Ложь;					   
							   
	КонецЕсли;

	Если ВидимостьСчетовСписанияНУ И ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДСНУ, ЭлементыФормы.СубконтоСписанияНДСНУ1, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ2, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ3, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3);
	Иначе
		ЭлементыФормы.СубконтоСписанияНДСНУ1.Видимость 			= Ложь;
		ЭлементыФормы.СубконтоСписанияНДСНУ2.Видимость 			= Ложь;
		ЭлементыФормы.СубконтоСписанияНДСНУ3.Видимость 			= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1.Видимость 	= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2.Видимость 	= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3.Видимость 	= Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет доступностью колонок субконто в табличной части услуги
Процедура УстановитьДоступностьСубконто(СтрокаТЧ)

	Колонки = ЭлементыФормы.СчетаУчетаРасходов.Колонки;
	ТекущиеДанные = ЭлементыФормы.СчетаУчетаРасходов.ТекущиеДанные;

	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетЗатрат,
								ТекущиеДанные.Субконто1, Колонки.Субконто1,
								ТекущиеДанные.Субконто2, Колонки.Субконто2,
								ТекущиеДанные.Субконто3, Колонки.Субконто3,
								Колонки.СчетЗатрат, Ложь);
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетЗатратНУ,
								ТекущиеДанные.СубконтоНУ1, Колонки.СубконтоНУ1,
								ТекущиеДанные.СубконтоНУ2, Колонки.СубконтоНУ2,
								ТекущиеДанные.СубконтоНУ3, Колонки.СубконтоНУ3,
								Колонки.СчетЗатратНУ, Ложь);

КонецПроцедуры // УстановитьДоступностьСубконто()

Процедура ДействияФормыЗаполнитьДокумент(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(НачалоПериода)Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не установлен период заполнения документа!");
		Возврат;
	КонецЕсли;
	
	Если СоставКосвенныхРасходов.Количество() > 0 Тогда
		ОтветНаВопрос = Вопрос("Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДокумент(, , , Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается по кнопке "Заполнить" в форме диалога документа.
// В процедуре реализуется алгоритм автоматического заполнения строк табличной части документа.
//
Процедура КоманднаяПанельЗаполнить(Кнопка)

	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НачалоПериода)Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Не установлен период заполнения документа!");
		Возврат;
	КонецЕсли;
	
	Если СоставКосвенныхРасходов.Количество() > 0 Тогда
		ОтветНаВопрос = Вопрос("Табличное поле будет очищено. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьТабличныеЧастиПоКосвеннымРасходам(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры  // КоманднаяПанельЗаполнить(Кнопка)

// Процедура вызывается по кнопке "Распределить" в форме диалога документа.
// В процедуре реализуется алгоритм распределения косвенных расходов в табличной
// части "СоставКосвенныхРасходов" на различные виды реализации в текущем периоде.
//
Процедура КоманднаяПанельРаспределить(Кнопка)

	РаспределитьПоВыручке();

КонецПроцедуры

// Процедура вызывается по кнопке "Рассчитать" из формы диалога документа.
// Выполняется расчет объемов реализации в текущем периоде по данным
// регистра НДСПродажи в разрезе различных ставок НДС.
//
Процедура КоманднаяПанельВыручкиРассчитать(Кнопка)

	РассчитатьВыручку();

КонецПроцедуры // КоманднаяПанельВыручкиРассчитать()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.СоставКосвенныхРасходов,ЭлементыФормы.КоманднаяПанель.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ();

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");

		НачалоПериода = НачалоМесяца(Дата); 

	КонецЕсли;

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Предполагается использовать отбор по таблице "СчетаУчетаРасходов"
	ЭлементыФормы.СчетаУчетаРасходов.ОтборСтрок.КлючСтроки.Использование = Истина;
	ЭлементыФормы.СчетаУчетаРасходов.ОтборСтрок.КлючСтроки.Значение = 0;
	
	мДатаДокумента = Дата;
	
	ОпределитьПараметрыНДСПоУчетнойПолитике();
	
	ОтобразитьНалоговыйПериод();
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Выполняем общие действия для всех документов при изменении реквизита Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	Для Каждого СтрокаСчетаУчетаРасходов Из СчетаУчетаРасходов Цикл
		
		РаботаСДиалогами.ПроверитьВладельцаСубконтоПодразделение(СтрокаСчетаУчетаРасходов, 
		                                        глЗначениеПеременной("глТекущийПользователь"), 
		                                        Организация, 
		                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
		                                                        |НазваниеСубконтоНУ1, НазваниеСубконтоНУ2, НазваниеСубконтоНУ3,
		                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3, 
		                                                        |СубконтоНУ1, СубконтоНУ2, СубконтоНУ3",
		                                                        "Субконто1", "Субконто2", "Субконто3", 
		                                                        "СубконтоНУ1", "СубконтоНУ2", "СубконтоНУ3",
		                                                        СтрокаСчетаУчетаРасходов.Субконто1, СтрокаСчетаУчетаРасходов.Субконто2, СтрокаСчетаУчетаРасходов.Субконто3, 
		                                                        СтрокаСчетаУчетаРасходов.СубконтоНУ1, СтрокаСчетаУчетаРасходов.СубконтоНУ2, СтрокаСчетаУчетаРасходов.СубконтоНУ3));
																						   
	КонецЦикла;

    ОпределитьПараметрыНДСПоУчетнойПолитике();
	ОтобразитьНалоговыйПериод();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура СтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные.НДСВсего = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные.СуммаВсего, TRUE, FALSE, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура вызывается при переключении закладок страниц табличной части.
// Устанавливается отбор в табличной части СчетаУчетаРасходов в зависимости от текущей
// строки в таблице СоставКосвенныхРасходов.
//
Процедура ЗакладкиПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если Элемент.ТекущаяСтраница.Имя = "КосвенныеРасходы" Тогда
		ОтобразитьНаправленияСписания();
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается по кнопке при изменении активной строки в таблице косвенных 
// расходов, а также при переходе на закладку "Косвенные расходы".
Процедура ОтобразитьНаправленияСписания()

	// Управляем поведением закладки "Счета учета расходов"
	ТекСтрокаРасходов = ЭлементыФормы.СоставКосвенныхРасходов.ТекущаяСтрока;
	// Включаем отбор тех счетов учета расходов, которые относятся к текущему расходу, выбранному
	// в табличной части "СоставКосвенныхРасходов"

	Если ТекСтрокаРасходов <> Неопределено Тогда
		// Включаем отбор ключу из текущей строки табличной части "СоставКосвенныхРасходов"
		ЭлементыФормы.СчетаУчетаРасходов.ТолькоПросмотр = Ложь;
		ЭлементыФормы.СчетаУчетаРасходов.ОтборСтрок.КлючСтроки.Значение = ТекСтрокаРасходов.КлючСтроки;

	Иначе
		// Текущая строка в таблице косвенных расходов не установлена
		ЭлементыФормы.СчетаУчетаРасходов.ТолькоПросмотр = Истина;
		Если СоставКосвенныхРасходов.Количество() = 0 И СчетаУчетаРасходов.Количество() <> 0 Тогда
			СчетаУчетаРасходов.Очистить();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОтобразитьНаправленияСписания()

Процедура ОтобразитьНалоговыйПериод()
	                                                                 
	ЭлементыФормы.НалоговыйПериод.Заголовок = "Налоговый период: " + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(мКонецПериода), "ФП = Истина");;
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "СоставКосвенныхРасходов".
//
Процедура СоставКосвенныхРасходовПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда

		// Инициализируем значение "КлючСтроки" для установки связи данной таблицы с таблицей "СчетаУчетаРасходов"
		// Значение должно быть уникальным в пределах таблицы СоставКосвенныхРасходов
		НеУстановлено = Истина;
		Кандидат = СоставКосвенныхРасходов.Количество();

		Пока НеУстановлено Цикл
			Если СоставКосвенныхРасходов.Найти(Кандидат, "КлючСтроки") = Неопределено Тогда
				// Уникальное значение ключа
				ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные.КлючСтроки = Кандидат;
				НеУстановлено = Ложь;

			Иначе
				// Такое значение ключа уже использовано
				Кандидат = Кандидат + 1;

			КонецЕсли;

		КонецЦикла;
		
		ОтобразитьНаправленияСписания();

	КонецЕсли;

КонецПроцедуры // СоставКосвенныхРасходовПриНачалеРедактирования()

// Процедура вызывается перед началом выбора значения в реквизиты "Субконто 1",
// "Субконто 2", "Субконто 3".
//
Процедура СчетаУчетаРасходовСубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент, "Бух");
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

// Процедура вызывается перед началом выбора значения в реквизиты "СубконтоНУ 1",
// "СубконтоНУ 2", "СубконтоНУ 3".
//
Процедура СчетаУчетаРасходовСубконтоНУНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокПараметров = ПараметрыНеобходимыеДляВыбораСубконто(Элемент, "Нал");
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

// Процедура вызывается после изменения значения в реквизите "СчетЗатрат"
//
Процедура СчетаУчетаРасходовСчетЗатратПриИзменении(Элемент)

	ТекущиеДанные = ЭлементыФормы.СчетаУчетаРасходов.ТекущиеДанные;
	ТекущиеДанные.СчетЗатратЕНВД = ПолучитьСчетЗатратЕНВД(ТекущиеДанные.СчетЗатрат);
	
	Колонки = ЭлементыФормы.СчетаУчетаРасходов.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
							  	ТекущиеДанные.Субконто1, Колонки.Субконто1,
	                            ТекущиеДанные.Субконто2, Колонки.Субконто2,
	                            ТекущиеДанные.Субконто3, Колонки.Субконто3);
								 
	РаботаСДиалогами.ПроверитьВладельцаСубконтоПодразделение(ТекущиеДанные, 
	                                        глЗначениеПеременной("глТекущийПользователь"), 
	                                        Организация, 
	                                        Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
	                                                        |СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
	                                                        "Субконто1", "Субконто2", "Субконто3", 
	                                                        ТекущиеДанные.Субконто1, ТекущиеДанные.Субконто2, ТекущиеДанные.Субконто3));
															
	ЗаполнитьСчетНалоговогоУчета();

КонецПроцедуры

// Процедура вызывается после изменения значения в реквизите "СчетЗатратНУ"
//
Процедура СчетаУчетаРасходовСчетЗатратНУПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.СчетаУчетаРасходов.ТекущиеДанные;
	Колонки = ЭлементыФормы.СчетаУчетаРасходов.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение, 
								ТекущиеДанные.СубконтоНУ1, Колонки.СубконтоНУ1,
	                            ТекущиеДанные.СубконтоНУ2, Колонки.СубконтоНУ2,
	                            ТекущиеДанные.СубконтоНУ3, Колонки.СубконтоНУ3);
								
	РаботаСДиалогами.ПроверитьВладельцаСубконтоПодразделение(ТекущиеДанные, 
											глЗначениеПеременной("глТекущийПользователь"), 
											Организация, 
											Новый Структура("НазваниеСубконтоНУ1, НазваниеСубконтоНУ2, НазваниеСубконтоНУ3, 
															|СубконтоНУ1, СубконтоНУ2, СубконтоНУ3",
															"СубконтоНУ1", "СубконтНУ2", "СубконтоНУ3", 
															ТекущиеДанные.СубконтоНУ1, ТекущиеДанные.СубконтоНУ2, ТекущиеДанные.СубконтоНУ3));
								 
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Субконто 1 табличной части "СчетУчетаРасходов".
//
Процедура СчетаУчетаРасходовСубконто1ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.СчетаУчетаРасходов.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 1, СтрокаТЧ.Субконто1, СтрокаТЧ.СубконтоНУ1);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Субконто 2 табличной части "СчетУчетаРасходов".
//
Процедура СчетаУчетаРасходовСубконто2ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.СчетаУчетаРасходов.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 2, СтрокаТЧ.Субконто2, СтрокаТЧ.СубконтоНУ2);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Субконто 3 табличной части "СчетУчетаРасходов".
//
Процедура СчетаУчетаРасходовСубконто3ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.СчетаУчетаРасходов.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 3, СтрокаТЧ.Субконто3, СтрокаТЧ.СубконтоНУ3);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля дата 
// в диалоге документа.
//
Процедура ДатаПриИзменении(Элемент)

	НовоеНачалоПериода = УчетНДС.ПолучитьНачалоПериодаПоУчетнойПолитике(Организация, Дата);
	
	Если (НачалоПериода <> НовоеНачалоПериода) Тогда
	 
	 	Ответ = Вопрос("Установить значение периода документа по текущей дате?", РежимДиалогаВопрос.ДаНет,,,);

		Если Ответ = КодВозвратаДиалога.Нет Тогда
			
			Дата = мДатаДокумента;
		Иначе
			
			УстановитьВремя(РежимАвтоВремя.Последним);
			НачалоПериода = НовоеНачалоПериода;

		КонецЕсли;

	Иначе
		
		УстановитьВремя(РежимАвтоВремя.Последним);
		НачалоПериода = НовоеНачалоПериода;
		
	КонецЕсли;
	
	мДатаДокумента = Дата;
	
	ОпределитьПараметрыНДСПоУчетнойПолитике();
	
	ОтобразитьНалоговыйПериод();

КонецПроцедуры

// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчетаВШапке(ИзменениеСубконто = ЛОЖЬ)
	
	Если ТипЗнч(СубконтоСписанияНДС1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоСписанияНДС1.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СубконтоСписанияНДС2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоСписанияНДС2.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СубконтоСписанияНДС3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоСписанияНДС3.ВидРасходовНУ;
	ИначеЕсли ИзменениеСубконто Тогда
		Возврат;
	Иначе
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СчетСписанияНДСНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СчетСписанияНДС, ВидЗатратНУ));
	Иначе
		СчетСписанияНДСНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетСписанияНДС));
	КонецЕсли;
	Если СтатьяЗатратСписанияНДС.ВидЗатрат = Перечисления.ВидыЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДСНУ, 	ЭлементыФормы.СубконтоСписанияНДСНУ1, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1,
		                         			ЭлементыФормы.СубконтоСписанияНДСНУ2, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2,
		                         			ЭлементыФормы.СубконтоСписанияНДСНУ3, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчетаВШапке()

Процедура ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатратПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатратСписанияНДС.
//
Процедура СтатьяЗатратСписанияНДСПриИзменении(Элемент)
	
	СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, СтатьяЗатратСписанияНДС);
	СчетСписанияНДС = СчетаУчетаЗатрат.СчетУчетаБУ;
	СчетСписанияНДСНУ = СчетаУчетаЗатрат.СчетУчетаНУ;
	Если СтатьяЗатратСписанияНДС.ВидЗатрат = Перечисления.ВидыЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДС, ЭлементыФормы.СубконтоСписанияНДС1, ЭлементыФормы.НадписьСубконтоСписанияНДС1,
							   			ЭлементыФормы.СубконтоСписанияНДС2, ЭлементыФормы.НадписьСубконтоСписанияНДС2,
						       			ЭлементыФормы.СубконтоСписанияНДС3, ЭлементыФормы.НадписьСубконтоСписанияНДС3);
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДСНУ, ЭлементыФормы.СубконтоСписанияНДСНУ1, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ2, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ3, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3);
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры // СтатьяЗатратСписанияНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетСписанияНДС
//
Процедура СчетСписанияНДСПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке();
	
	УстановитьВидимость();
	
КонецПроцедуры // СчетСписанияНДСПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетСписанияНДС
//
Процедура СчетСписанияНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетСписанияНДСОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода СубконтоСписанияНДС1
//
Процедура СубконтоСписанияНДС1НачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры // СубконтоСписанияНДС1НачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоСписанияНДС1
//
Процедура СубконтоСписанияНДС1ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке(Истина);
	Если ЗначениеЗаполнено(СчетСписанияНДСНУ) Тогда
		Если ТипЗнч(СубконтоСписанияНДСНУ1) = ТипЗнч(СубконтоСписанияНДС1) Тогда
			СубконтоСписанияНДСНУ1 = СубконтоСписанияНДС1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоСписанияНДС1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоСписанияНДС2
//
Процедура СубконтоСписанияНДС2ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке(Истина);
	Если ЗначениеЗаполнено(СчетСписанияНДСНУ) Тогда
		Если ТипЗнч(СубконтоСписанияНДСНУ2) = ТипЗнч(СубконтоСписанияНДС2) Тогда
			СубконтоСписанияНДСНУ2 = СубконтоСписанияНДС2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоСписанияНДС2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоСписанияНДС3
//
Процедура СубконтоСписанияНДС3ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке(Истина);
	Если ЗначениеЗаполнено(СчетСписанияНДСНУ) Тогда
		Если ТипЗнч(СубконтоСписанияНДСНУ3) = ТипЗнч(СубконтоСписанияНДС3) Тогда
			СубконтоСписанияНДСНУ3 = СубконтоСписанияНДС3;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоСписанияНДС3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетСписанияНДСНУ.
//
Процедура СчетСписанияНДСНУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СчетСписанияНДСНУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетСписанияНДСНУ
//
Процедура СчетСписанияНДСНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СчетСписанияНДСНУОбработкаВыбора()

// Процедура - обработчик события "При активизации строки"
// При переходе к новой строке в таблице косвенных расходов
// отображает соответсвтующие данной строке направления использования
// (списания) в таблице "СчетаУчетаРасходов"
Процедура СоставКосвенныхРасходовПриАктивизацииСтроки(Элемент)

	ОтобразитьНаправленияСписания();

КонецПроцедуры

// Процедура - обработчик события "Перед удалением строки"
// для табличной части диалога "СоставКосвенныхРасходов"
Процедура СоставКосвенныхРасходовПередУдалением(Элемент, Отказ)
	
	// Необходимо очистить таблицу СчетаУчетаРасходов
	КлючПоиска = Новый Структура("КлючСтроки" , ЭлементыФормы.СчетаУчетаРасходов.ОтборСтрок.КлючСтроки.Значение);
	
	НайденныеСтроки = СчетаУчетаРасходов.НайтиСтроки(КлючПоиска);
	
	Для Каждого Строка Из НайденныеСтроки Цикл
		СчетаУчетаРасходов.Удалить(Строка);
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "После удаления строки"
// для табличной части диалога "СоставКосвенныхРасходов"
Процедура СоставКосвенныхРасходовПослеУдаления(Элемент)

	ОтобразитьНаправленияСписания();

КонецПроцедуры

// Процедура - обработчик события "При начале редактирования"
// для табличной части диалога "СчетаУчетаРасходов"
Процедура СчетаУчетаРасходовПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		ЭлементыФормы.СчетаУчетаРасходов.ТекущиеДанные.КлючСтроки = ЭлементыФормы.СчетаУчетаРасходов.ОтборСтрок.КлючСтроки.Значение;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "При активизации строки"
// для табличной части диалога "СчетаУчетаРасходов"
Процедура СчетаУчетаРасходовПриАктивизацииСтроки(Элемент)
	
	УстановитьДоступностьСубконто(Элемент.ТекущиеДанные);
	
КонецПроцедуры

Процедура СчетаУчетаРасходовПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	Если ЭлементыФормы.СчетаУчетаРасходов.Колонки.ХарактерЗатрат.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.Текст = ХарактерЗатрат;
	КонецЕсли;
	
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, , ДанныеСтроки.СчетЗатрат, ДанныеСтроки.СчетЗатратНУ, ОформлениеСтроки, Ложь, Истина, Истина);
	
	ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(ДанныеСтроки.СчетЗатрат, Неопределено);
	Если ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы Тогда
		ОформлениеСтроки.Ячейки.СчетЗатратЕНВД.Видимость 		= Ложь;
		ОформлениеСтроки.Ячейки.СчетЗатратЕНВД.ТолькоПросмотр 	= Истина;
	Иначе
		ОформлениеСтроки.Ячейки.СчетЗатратЕНВД.Видимость 		= Истина;
		ОформлениеСтроки.Ячейки.СчетЗатратЕНВД.ТолькоПросмотр 	= Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.СчетЗатратНУ) Тогда
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.ОтметкаНезаполненного = ДанныеСтроки.ОтражатьВНалоговомУчете;
	Иначе
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.ОтметкаНезаполненного = Ложь;
	КонецЕсли;	
	
КонецПроцедуры // СчетаУчетаРасходовПриВыводеСтроки()

Процедура СчетаУчетаРасходовСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка =  БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СчетаУчетаРасходовСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка =  БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

 // Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчета(ИзменениеСубконто = Ложь)

	ТекущиеДанные = ЭлементыФормы.СчетаУчетаРасходов.ТекущиеДанные;
	Колонки = ЭлементыФормы.СчетаУчетаРасходов.Колонки;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ТекущиеДанные, ИзменениеСубконто);

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетЗатратНУ,
	                             ТекущиеДанные.СубконтоНУ1,
	                             Колонки.СубконтоНУ1,
	                             ТекущиеДанные.СубконтоНУ2,
	                             Колонки.СубконтоНУ2,
	                             ТекущиеДанные.СубконтоНУ3,
	                             Колонки.СубконтоНУ3);
								 
	РаботаСДиалогами.ПроверитьВладельцаСубконтоПодразделение(ТекущиеДанные, 
											глЗначениеПеременной("глТекущийПользователь"), 
											Организация, 
											Новый Структура("НазваниеСубконтоНУ1, НазваниеСубконтоНУ2, НазваниеСубконтоНУ3, 
															|СубконтоНУ1, СубконтоНУ2, СубконтоНУ3",
															"СубконтоНУ1", "СубконтНУ2", "СубконтоНУ3", 
															ТекущиеДанные.СубконтоНУ1, ТекущиеДанные.СубконтоНУ2, ТекущиеДанные.СубконтоНУ3));

КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()

Функция ПараметрыНеобходимыеДляВыбораСубконто(Элемент, Учет = "Бух")

	// Если тип выбираемого субконто - Партия, то создадим 
	// структуру дополнительных параметров.

	СписокПараметров = Новый Структура();
	ДанныеТекущейСтроки = ЭлементыФормы.СчетаУчетаРасходов.ТекущиеДанные;
	ДанныеТекущейСтрокиКосвРасх	= ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные;

	СписокПараметров.Вставить("Контрагент",   ДанныеТекущейСтрокиКосвРасх.Поставщик);
		
	Возврат СписокПараметров;

КонецФункции // ПараметрыНеобходимыеДляВыбораСубконто()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура СоставКосвенныхРасходовСуммаВсегоПриИзменении(Элемент)
	
	ТД = ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТД.НДСВсего = УчетНДС.РассчитатьСуммуНДС(ТД.СуммаВсего, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));

КонецПроцедуры

Процедура СоставКосвенныхРасходовНДССуммаПриИзменении(Элемент)
	
	ТД = ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТД.НДС = УчетНДС.РассчитатьСуммуНДС(ТД.НДССумма, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));

КонецПроцедуры

Процедура СоставКосвенныхРасходовБезНДССуммаПриИзменении(Элемент)
		
	ТД = ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТД.БезНДС = УчетНДС.РассчитатьСуммуНДС(ТД.БезНДССумма, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));

КонецПроцедуры

Процедура СоставКосвенныхРасходовЕНВДСуммаПриИзменении(Элемент)
		
	ТД = ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТД.ЕНВДНДС = УчетНДС.РассчитатьСуммуНДС(ТД.ЕНВДСумма, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));
	
КонецПроцедуры

Процедура СоставКосвенныхРасходовСуммаБезНДС0ПриИзменении(Элемент)
		
	ТД = ЭлементыФормы.СоставКосвенныхРасходов.ТекущиеДанные;
	
	Если ТД = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	ТД.НДС0 = УчетНДС.РассчитатьСуммуНДС(ТД.НДС0Сумма, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));
	
КонецПроцедуры

 
// Инициализация списка выбора для реквизита "ВидЦенности"
СписокВыбораПоУмолчанию = новый СписокЗначений();
СписокВыбораПоУмолчанию.Добавить(Перечисления.ВидыЦенностей.Материалы);
СписокВыбораПоУмолчанию.Добавить(Перечисления.ВидыЦенностей.ПрочиеРаботыИУслуги);
СписокВыбораПоУмолчанию.Добавить(Перечисления.ВидыЦенностей.ПредставительскиеРасходы);
СписокВыбораПоУмолчанию.Добавить(Перечисления.ВидыЦенностей.КомандировочныеРасходы);
СписокВыбораПоУмолчанию.Добавить(Перечисления.ВидыЦенностей.ТаможенныеПлатежи);
СписокВыбораПоУмолчанию.Добавить(Перечисления.ВидыЦенностей.ПосредническиеУслуги);
СписокВыбораПоУмолчанию.Добавить(Перечисления.ВидыЦенностей.Товары);
СписокВыбораПоУмолчанию.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентАренда);
СписокВыбораПоУмолчанию.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентРеализацияИмущества);
СписокВыбораПоУмолчанию.Добавить(Перечисления.ВидыЦенностей.НалоговыйАгентИностранцы);

ЭлементыФормы.СоставКосвенныхРасходов.Колонки.ВидЦенности.ЭлементУправления.СписокВыбора = СписокВыбораПоУмолчанию;