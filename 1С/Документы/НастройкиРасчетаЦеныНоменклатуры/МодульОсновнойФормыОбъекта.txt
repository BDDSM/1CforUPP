Перем НужноУдалитьРегламентноеЗадание Экспорт; // Ответ пользователя на вопрос о необходимости удалять регл. задание (булево или неопределено)
Перем Расписание Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает доступность элементов формы
//
Процедура УправлениеДоступностью()
	
	Если ТолькоПросмотр Тогда
		// Доступность регулируется настройками в диалоге
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.ПредставлениеРасписания.Доступность = ФормироватьДокументыАвтоматически;
	ЭлементыФормы.НастройкаРасчетаСебестоимости.Доступность = ПредварительноРасчитыватьСебестоимость;
	
КонецПроцедуры

Процедура НастроитьПостроительОтчета(МакетСКД = Неопределено)
	Если ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете Тогда
		МакетСКД = ПолучитьМакет("НастройкаРасчетаУпрУчет");
		
	Иначе
		МакетСКД = ПолучитьМакет("НастройкаРасчетаРеглУчет");
	КонецЕсли;	
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(МакетСКД)); 
КонецПроцедуры	
	
Процедура ФормироватьДокументыАвтоматическиПриИзменении(Элемент)
	
	НужноУдалитьРегламентноеЗадание = РегламентныеПроцедуры.ПриИзмененииФлагаФормироватьДокументыАвтоматически(ЭтаФорма);
	УправлениеДоступностью();
	
КонецПроцедуры

Процедура ПредставлениеРасписанияНажатие(Элемент)
	РегламентныеПроцедуры.РедактироватьРасписаниеРегламентногоЗадания(ЭтаФорма);
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	Если ЭтоНовый() Тогда
		Если НЕ ЗначениеЗаполнено(ВидОтраженияВУчете) Тогда
			ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
		КонецЕсли;
		
		МакетСКД = Неопределено;
		НастроитьПостроительОтчета(МакетСКД);
		НастройкиПриКопировании = НастройкиКомпоновщика.Получить();
		Если ЗначениеЗаполнено(НастройкиПриКопировании) Тогда
			КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиПриКопировании);
		Иначе	
			КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(МакетСКД.НастройкиПоУмолчанию);
		КонецЕсли;	
	Иначе
		НастроитьПостроительОтчета();
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновщика.Получить());
	КонецЕсли;	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Расписание = РегламентныеПроцедуры.ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗадание);
	ПредварительноРасчитыватьСебестоимость = ЗначениеЗаполнено(НастройкаРасчетаСебестоимости);
	РегламентныеПроцедуры.НастроитьПредставлениеРасписания(ЭтаФорма);
    УправлениеДоступностью();
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	ЗаголовокСообщения 	= ЗаголовокПриЗаписи();
	
	Если НужноУдалитьРегламентноеЗадание = Истина Тогда
		РегламентныеПроцедуры.УдалитьРегламентноеЗаданиеПриЗаписиНастройки(ЭтотОбъект,ЗаголовокСообщения,Отказ);
	КонецЕсли;	
	
	НастройкиКомпоновщика = Новый ХранилищеЗначения(КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки());
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
		
	// Обрабатываем расписание регл. задания
	Если НЕ ФормироватьДокументыАвтоматически Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаголовокСообщения 	= ЗаголовокПриЗаписи();
	
	РегламентныеПроцедуры.ИзменитьРегламентноеЗаданиеПриЗаписиНастройки(ЭтотОбъект,Расписание,ЗаголовокСообщения,Отказ);

КонецПроцедуры

Процедура ПредварительноРасчитыватьСебестоимостьПриИзменении(Элемент)
	Если НЕ ПредварительноРасчитыватьСебестоимость Тогда
		НастройкаРасчетаСебестоимости = "";
	КонецЕсли;
	УправлениеДоступностью();
КонецПроцедуры

Процедура ДействияФормыВыполнитьБезРегламентногоЗадания(Кнопка)
	
	Если ЭтаФорма.Модифицированность //Настройка изменена
	  ИЛИ ЭтоНовый() Тогда //Новая настройка
		Если НЕ ЭтаФорма.ЗаписатьВФорме() Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;	
	
	Если Вопрос("Будет выполнен расчет цен номенклатуры и запись результата в документ ""Установка цен номенклатуры"". Продолжить?",РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
		УправлениеЗапасамиРасширеннаяАналитика.РасчетЦеныНоменклатурыНаСервере(Ссылка, Истина);
	КонецЕсли;
КонецПроцедуры

Процедура ТипЦенНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.ТипыЦенНоменклатуры.ПолучитьФормуВыбора(,Элемент);
	ФормаВыбора.СправочникСписок.Отбор.Рассчитывается.Установить(Ложь);
	ФормаВыбора.НачальноеЗначениеВыбора = ТипЦен;
	ФормаВыбора.Открыть();
КонецПроцедуры

Процедура ПереключательУпрПриИзменении(Элемент)
	НастроитьПостроительОтчета();
КонецПроцедуры