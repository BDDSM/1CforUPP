////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Диалог настройки периода
Перем мНастройкаПериода;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

// Оптимизация работы события ПриПолученииДанных
Перем мКешОстатковОтпусков;
Перем мУдаляемыйСотрудник;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

// Процедура получает информацию об отпусках всех сотрудников или указанного сотрудника
Процедура ОбновитьКешОстатковОтпусков(Сотрудник = Неопределено)
	
	Если (ЭлементыФормы.РаботникиОрганизации.Колонки.Найти("Примечание") = Неопределено Или Не ЭлементыФормы.РаботникиОрганизации.Колонки.Примечание.Видимость) Тогда
		Возврат;
	КонецЕсли;
	
	Если мКешОстатковОтпусков = Неопределено Тогда
		мКешОстатковОтпусков = Новый ТаблицаЗначений;
		мКешОстатковОтпусков.Колонки.Добавить("Сотрудник",		Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
		мКешОстатковОтпусков.Колонки.Добавить("ДатаНачала",		Новый ОписаниеТипов("Дата"));
		мКешОстатковОтпусков.Колонки.Добавить("ДатаОкончания",	Новый ОписаниеТипов("Дата"));
		мКешОстатковОтпусков.Колонки.Добавить("Примечание",		Новый ОписаниеТипов("Строка"));
	КонецЕсли;
	
	Если Сотрудник = Неопределено Тогда
		мКешОстатковОтпусков.Очистить();
		
	Иначе
		// Если получаем данные по сотруднику, то сначала удалим данные по всем отпускам сотрудника
		СтрокиКУдалению = мКешОстатковОтпусков.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
		Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
			мКешОстатковОтпусков.Удалить(СтрокаКУдалению);
		КонецЦикла;
		
	КонецЕсли;
	
	// Таблицу периодов надо заполнить всеми сотрудниками, которые попадают в видимую область
	// Это необходимо для того, что бы посчитать отпуск с учетом строк, указанных в самом документе
	Если Сотрудник = Неопределено Тогда
		СписокСтрокДокумента = РаботникиОрганизации;
	Иначе
		СписокСтрокДокумента = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	КонецЕсли;
	
	Результат = ОстаткиОтпусков.СведенияОбОтпускахСпискаСотрудников(СписокСтрокДокумента, Ссылка, Истина, Дата);
	
	Для Каждого СтрокаТабличнойЧасти Из СписокСтрокДокумента Цикл
		СтрокаРезультата = Результат.НайтиСтроки(Новый Структура("Сотрудник, ДатаОкончания", СтрокаТабличнойЧасти.Сотрудник, СтрокаТабличнойЧасти.ДатаОкончания));
		
		Если СтрокаРезультата.Количество() > 0 Тогда
			Примечание = СтрокаРезультата[0].Примечание;
			
		Иначе
			Если СтрокаТабличнойЧасти.Сотрудник.Пустая() Тогда
				Примечание = "Не указан сотрудник";
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаНачала) ИЛИ Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДатаОкончания) Тогда
				Примечание = "Не заполнен период отпуска";
			Иначе
				Примечание = "Не принят на работу";
			КонецЕсли;
			
		КонецЕсли;
		
		Строка = мКешОстатковОтпусков.Добавить();
		ЗаполнитьЗначенияСвойств(Строка, СтрокаТабличнойЧасти);
		Строка.Примечание = Примечание;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	// Допишем дополнительные команды заполнения
	ГрафикОтпусковОрганизацийПереопределяемый.ДополнитьПодменюЗаполненияТЧ(ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить, Новый Действие("КоманднаяПанельРаботникиОрганизацииЗаполнить"));
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ДатаНачала");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.РаботникиОрганизации.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	мНастройкаПериода.УстановитьПериод(НачалоГода(Дата), КонецГода(Дата));
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
	// Получим информацию обо всех введенных в документе отпусках
	ОбновитьКешОстатковОтпусков();
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			РаботникиОрганизации.Загрузить(ЗначениеВыбора.Данные.Выгрузить());
			ОбновитьКешОстатковОтпусков();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	Оповестить("ИзмененГрафикОтпусковОрганизаций", Ссылка);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура разрешения/запрещения редактирования номера документа
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура КоманднаяПанельРаботникиОрганизацииЗаполнить(Кнопка)
	
	ГрафикОтпусковОрганизацийПереопределяемый.ОбработатьНажатиеНаКнопкуЗаполнения(Кнопка, ЭтотОбъект, мНастройкаПериода);
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииЗаполнить()


Процедура КоманднаяПанельРаботникиОрганизацииСписокРаботников(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
		
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , Организация, )

КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииСписокРаботников()

// Процедура - обработчик события нажатия кнопки "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 2);
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
	// Выводим примечание по остаткам отпусков
	Если (ЭлементыФормы.РаботникиОрганизации.Колонки.Найти("Примечание") = Неопределено Или Не ЭлементыФормы.РаботникиОрганизации.Колонки.Примечание.Видимость) Тогда
		мКешОстатковОтпусков = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если мКешОстатковОтпусков = Неопределено Тогда
		ОбновитьКешОстатковОтпусков();
	КонецЕсли;
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		СтрокиОтпуска = мКешОстатковОтпусков.НайтиСтроки(Новый Структура("Сотрудник, ДатаНачала, ДатаОкончания", ОформлениеСтроки.ДанныеСтроки.Сотрудник, ОформлениеСтроки.ДанныеСтроки.ДатаНачала, ОформлениеСтроки.ДанныеСтроки.ДатаОкончания));
		
		// Должна быть одна строка, но если пользователь введет несколько одинаковых строк, отобразим информацию во всех строках
		Для Каждого СтрокаОтпуска Из СтрокиОтпуска Цикл
			ОформлениеСтроки.Ячейки.Примечание.УстановитьТекст(СтрокаОтпуска.Примечание);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры // РаботникиОрганизацииПриПолученииДанных()

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		НоваяСтрока = РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник = ВыбранноеЗначение;
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
		ОбновитьКешОстатковОтпусков(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииОбработкаВыбора()

// Процедура - обработчик события "ПередОкончаниемРедактирования"
//
Процедура РаботникиОрганизацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если Не Элемент.ТекущиеДанные.Сотрудник.Пустая() Тогда
		ОбновитьКешОстатковОтпусков(Элемент.ТекущиеДанные.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры

Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	мУдаляемыйСотрудник = Элемент.ТекущиеДанные.Сотрудник;
	
КонецПроцедуры

Процедура РаботникиОрганизацииПослеУдаления(Элемент)
	
	Если мУдаляемыйСотрудник <> Неопределено И Не мУдаляемыйСотрудник.Пустая() Тогда
		ОбновитьКешОстатковОтпусков(мУдаляемыйСотрудник);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНастройкаПериода = Новый НастройкаПериода;