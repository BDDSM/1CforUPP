////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента;

Перем мКолонкиПродукция, мКолонкиВозвратнаяТара, мКолонкиМатериалы, мКолонкиРаспределениеМатериалов;
Перем мКолонкиПрочиеЗатраты, мКолонкиРаспределениеПрочихЗатрат;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;
Перем мКолонкиВозвратныеОтходы;
Перем мКолонкиРаспределениеВозвратныхОтходов;
Перем мОтражатьВРегламентированномУчете;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Продукция,ЭлементыФормы.КоманднаяПанельПродукция.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Материалы,ЭлементыФормы.КоманднаяПанельМатериалы.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаспределениеМатериалов,ЭлементыФормы.КоманднаяПанельРаспределениеМатериалов.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПрочиеЗатраты,ЭлементыФормы.КоманднаяПанельПрочиеЗатраты.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаспределениеПрочихЗатрат,ЭлементыФормы.КоманднаяПанельРаспределениеПрочихЗатрат.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратныеОтходы,ЭлементыФормы.КоманднаяПанельВозвратныеОтходы.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаспределениеВозвратныхОтходов,ЭлементыФормы.КоманднаяПанельРаспределениеВозвратныхОтходов.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура заполняет счет налогового учета на основании счета бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчета(ФормаТабличнаяЧасть, КолонкаСчетБУ = "Счет", КолонкаСчетНУ = "СчетНУ")

	СтрокаТабличнойЧасти = ФормаТабличнаяЧасть.ТекущаяСтрока;
	СтрокаТабличнойЧасти[КолонкаСчетНУ] = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаТабличнойЧасти[КолонкаСчетБУ]));

КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена                = Ложь;
	ЕстьСерия               = Истина;
	РазворачиватьДоКачества = Ложь;
	ПодбиратьУслуги         = Ложь;
	ОтборУслугПоСправочнику = Истина;

	СтруктураПараметровПодбора = Новый Структура();

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Продукция Тогда

		Команда                 = "ПодборВТабличнуюЧастьПродукция";
		ИмяТабличнойЧасти       = "Продукция";
		РазворачиватьДоКачества = Истина;

	ИначеЕсли ТабличнаяЧасть = Материалы Тогда

		Команда                 = "ПодборВТабличнуюЧастьМатериалы";
		ИмяТабличнойЧасти       = "Материалы";
		ПодбиратьУслуги         = Истина;
		ОтборУслугПоСправочнику = Ложь;

		СписокЗапросов.Добавить( "ОстаткиПроизводство", "По остаткам в производстве");
		СписокЗапросов.Добавить( "Спецификации",        "По спецификациям");

		СтруктураПараметровПодбора.Вставить( "Организация",   Организация);
		СтруктураПараметровПодбора.Вставить( "Подразделение", Подразделение);

	ИначеЕсли ТабличнаяЧасть = РаспределениеМатериалов Тогда

		Команда                 = "ПодборВТабличнуюЧастьРаспределениеМатериалов";
		ИмяТабличнойЧасти       = "РаспределениеМатериалов";
		ПодбиратьУслуги         = Истина;
		ОтборУслугПоСправочнику = Ложь;

		СписокЗапросов.Добавить( "ОстаткиПроизводство", "По остаткам в производстве");

		СтруктураПараметровПодбора.Вставить( "Организация",   Организация);
		СтруктураПараметровПодбора.Вставить( "Подразделение", Подразделение);

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Команда           = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ИмяТабличнойЧасти = "ВозвратнаяТара";
		ЕстьЦена  = Истина;

	ИначеЕсли ТабличнаяЧасть = ВозвратныеОтходы Тогда

		Команда           = "ПодборВТабличнуюЧастьВозвратныеОтходы";
		ИмяТабличнойЧасти = "ВозвратныеОтходы";	
		ЕстьЦена  = Истина;

	КонецЕсли;

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                  , Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ТипЦен"                 , Неопределено);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества", РазворачиватьДоКачества);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"        , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", ОтборУслугПоСправочнику);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры

// Производит открывает форму подбора по спецификации
//
Процедура ДействиеПодборПоСпецификации()
	
	// Открываем форму подбора.
	ФормаПодбора = Справочники.СпецификацииНоменклатуры.ПолучитьФорму( "ФормаПодбора", ЭтаФорма, ЭтаФорма);
	ФормаПодбора.РазрешитьСоединятьОкно          = Истина;
	ФормаПодбора.СоединяемоеОкно                 = Истина;
	ФормаПодбора.РазрешитьСостояниеПрикрепленное = Истина;
	ФормаПодбора.ПоложениеПрикрепленногоОкна     = ВариантПрикрепленияОкна.Право;
	ФормаПодбора.СостояниеОкна                   = ВариантСостоянияОкна.Прикрепленное;
	ФормаПодбора.РазрешитьСостояниеОбычное       = Ложь;
	
	ФормаПодбора.ЗакрыватьПриВыборе           = Ложь;
	ФормаПодбора.МножественныйВыбор           = Истина;
	ФормаПодбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаПодбора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Истина;
	
	ФормаПодбора.Отбор.ВидСпецификации.ВидСравнения  = ВидСравнения.НеРавно;
	ФормаПодбора.Отбор.ВидСпецификации.Значение      = Перечисления.ВидыСпецификаций.Узел;
	ФормаПодбора.Отбор.ВидСпецификации.Использование = Истина;
	
	ФормаПодбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора["ВидСпецификации"].Доступность = Ложь;
	
	ФормаПодбора.РежимВыбора = Истина;
	ФормаПодбора.Открыть();
	
КонецПроцедуры // ДействиеПодборПоСпецификации()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, СтатьяЗатрат, Спецификация, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("СтатьяЗатрат"    , СтатьяЗатрат);
	ЗначениеВыбора.Свойство("Спецификация"    , Спецификация);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура", 			   Номенклатура);
	Если ТабличнаяЧасть <> ВозвратнаяТара Тогда
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры",          Серия);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения",           ЕдиницаИзмерения);
		Если ТабличнаяЧасть = Продукция Тогда
			Качество = ?(ЗначениеЗаполнено(Качество), Качество, Справочники.Качество.Новый);
			СтруктураОтбора.Вставить("Качество",               Качество);
		КонецЕсли;
	КонецЕсли;
	Если ТабличнаяЧасть = Материалы Тогда
		Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
			СтруктураОтбора.Вставить("СтатьяЗатрат", СтатьяЗатрат);
		КонецЕсли;
		Если ЗначениеЗаполнено(Спецификация) Тогда
			СтруктураОтбора.Вставить("Спецификация", Спецификация);
		КонецЕсли;
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Рассчитать реквизиты табличной части.
		Если ТабличнаяЧасть <> РаспределениеМатериалов И ТабличнаяЧасть <> ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		КонецЕсли;
		
		Если ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура 				= Номенклатура;
		Если ТабличнаяЧасть <> ВозвратнаяТара Тогда
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры 			= Серия;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения    		= ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент          		= СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Количество   = Количество;
		
		Если ТабличнаяЧасть = Продукция Тогда
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;
		ИначеЕсли ТабличнаяЧасть <> ВозвратнаяТара Тогда
			СтрокаТабличнойЧасти.СтатьяЗатрат = ?(СтатьяЗатрат <> Неопределено, СтатьяЗатрат, Номенклатура.СтатьяЗатрат);
			СтрокаТабличнойЧасти.Спецификация = Спецификация;
		КонецЕсли;

		// Рассчитать реквизиты табличной части.
		Если ТабличнаяЧасть <> РаспределениеМатериалов И ТабличнаяЧасть <> ВозвратнаяТара Тогда
			
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			
		КонецЕсли;

		Если ТабличнаяЧасть = Продукция Тогда
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Продукция", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
			Если ЗначениеЗаполнено(Качество) Тогда
				СтрокаТабличнойЧасти.Качество          = Качество;
			Иначе
				СтрокаТабличнойЧасти.Качество         = Справочники.Качество.Новый;
			КонецЕсли;
			
		ИначеЕсли ТабличнаяЧасть = РаспределениеМатериалов Тогда
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "РаспределениеМатериалов", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
			
			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НД
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
		ИначеЕсли ТабличнаяЧасть = РаспределениеВозвратныхОтходов Тогда
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "РаспределениеВозвратныхОтходов", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
				СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию( СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
			КонецЕсли;
			
		ИначеЕсли ТабличнаяЧасть = ВозвратныеОтходы Тогда
			
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа 	= СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
			СтрокаТабличнойЧасти.СтатусПартии 			= Перечисления.СтатусыПартийТоваров.Продукция;
			СтрокаТабличнойЧасти.Цена = Цена;
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
			
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Спецификация) Тогда
				СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
			КонецЕсли;
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( СтрокаТабличнойЧасти, "ВозвратныеОтходы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
		КонецЕсли;

	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	Если ТабличнаяЧасть = Материалы Тогда
		ТабличнаяЧастьИмя = "Материалы";
	ИначеЕсли ТабличнаяЧасть = Продукция Тогда
		ТабличнаяЧастьИмя = "Продукция";
	ИначеЕсли ТабличнаяЧасть = РаспределениеМатериалов Тогда
		ТабличнаяЧастьИмя = "РаспределениеМатериалов";
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		ТабличнаяЧастьИмя = "ВозвратнаяТара";
	ИначеЕсли ТабличнаяЧасть = ВозвратныеОтходы Тогда
		ТабличнаяЧастьИмя = "ВозвратныеОтходы";
	КонецЕсли;

	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораПоСпецификации(ТабличнаяЧасть, ЗначениеВыбора)
	
	Перем Спецификация, Количество;
	
	ЗначениеВыбора.Свойство("Спецификация", Спецификация);
	ЗначениеВыбора.Свойство("Количество", 	Количество);
	
	Отбор = Новый Структура("СписаниеКомплектующей", Перечисления.ВариантыСписанияКомплектующих.Всегда);
	
	ИсходныеКомплектующие = УправлениеПроизводством.ПолучитьМатериалыПоСпецификации(Спецификация, Количество, Отбор, Дата, мИспользоватьТолькоСборочныеСпецификации);
	
	Если ИсходныеКомплектующие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ИсходныеКомплектующие Цикл
	
		СтруктураПодбора = Новый Структура();
		СтруктураПодбора.Вставить("Номенклатура",       Строка.Номенклатура);
		СтруктураПодбора.Вставить("ЕдиницаИзмерения",   Строка.ЕдиницаИзмерения);
		СтруктураПодбора.Вставить("Характеристика",     Строка.ХарактеристикаНоменклатуры);
		СтруктураПодбора.Вставить("Серия",     			Справочники.СерииНоменклатуры.ПустаяСсылка());
		СтруктураПодбора.Вставить("Количество",     	Строка.Количество);
		СтруктураПодбора.Вставить("СтатьяЗатрат",     	Строка.СтатьяЗатрат);
		СтруктураПодбора.Вставить("Спецификация",     	Спецификация);

		ОбработкаПодбора(ТабличнаяЧасть, СтруктураПодбора);
		
	КонецЦикла;

КонецПроцедуры // ОбработкаПодбораПоСпецификации()

// Процедура обработка подбора прочих затрат
//
Процедура ОбработкаПодбораПрочихЗатрат( ТабЧасть, СтруктВыбора)
	
	НоваяСтрока = ТабЧасть.Найти( СтруктВыбора["СтатьяЗатрат"], "СтатьяЗатрат");
	
	Если НоваяСтрока = Неопределено Тогда
		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.СтатьяЗатрат = СтруктВыбора["СтатьяЗатрат"];
	КонецЕсли;
	
	НоваяСтрока.Сумма     = НоваяСтрока.Сумма     + СтруктВыбора.СуммаУпр;
	НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаРегл + СтруктВыбора.СуммаРегл;
	
КонецПроцедуры // ОбработкаПодбораПрочихЗатрат()

// Процедура подбора прочих затрат по остаткам в НЗП
//
Процедура ПодборПоПрочимЗатратам()
	
	СтруктПараметры = Новый Структура;
	СтруктПараметры.Вставить( "Подразделение",            Подразделение);
	СтруктПараметры.Вставить( "ПодразделениеОрганизации", ПодразделениеОрганизации);
	СтруктПараметры.Вставить( "ФлагУпрУчета",             ОтражатьВУправленческомУчете);
	СтруктПараметры.Вставить( "ФлагРеглУчета",            ОтражатьВБухгалтерскомУчете);
	СтруктПараметры.Вставить( "ВидЗатрат",                "НематериальныеЗатраты");
	СтруктПараметры.Вставить( "ДатаОстатков",             Дата);
	СтруктПараметры.Вставить( "Организация",              Организация);
	СтруктПараметры.Вставить( "Команда",                  "ПодборПрочихЗатрат");
	
	ОбработкаТабличныхЧастей.ОткрытьПодборСтатейЗатрат( ЭтаФорма, СтруктПараметры);
	
КонецПроцедуры // ПодборПоПрочимЗатратам()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
		СчетУчетаРасчетовПоТаре        = СчетаУчета.СчетУчетаТары;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();

КонецПроцедуры // ПриИзмененииДоговора()

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "")

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
	Если ИмяТабличнойЧасти = "Продукция" ИЛИ ИмяТабличнойЧасти = "Материалы" Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Если ИмяТабличнойЧасти <> "Продукция" Тогда
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
				СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииНоменклатурыМатериаловИПродукции()

// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	
	Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)) Тогда
		
		//только счета затрат
		ЗаполнитьСчетаУчетаВТабЧасти(Продукция, 					"Продукция", 						ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,,Ложь);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеМатериалов, 		"РаспределениеМатериалов", 			ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,,Ложь);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеПрочихЗатрат, 	"РаспределениеПрочихЗатрат", 		ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,,Ложь);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратныеОтходы, 				"ВозвратныеОтходы", 				ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,,Ложь);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеВозвратныхОтходов,"РаспределениеВозвратныхОтходов", 	ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,,Ложь);
		
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура - устанавливает видимость/доступность элементов формы
//
Процедура УстановитьВидимостьДоступность()
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	Колонки            = ЭлементыФормы.Продукция.Колонки;
	КолонкиМат         = ЭлементыФормы.Материалы.Колонки;
	КолонкиОтходы      = ЭлементыФормы.ВозвратныеОтходы.Колонки;
	КолонкиРаспрМат    = ЭлементыФормы.РаспределениеМатериалов.Колонки;
	КолонкиРаспрЗатр   = ЭлементыФормы.РаспределениеПрочихЗатрат.Колонки;
	КолонкиРаспрОтходы = ЭлементыФормы.РаспределениеВозвратныхОтходов.Колонки;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.Счет,   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.СчетНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.СчетЗатрат,   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.СчетЗатратНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиОтходы.Счет,         ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиОтходы.СчетНУ,       ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиОтходы.СчетЗатрат,   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиОтходы.СчетЗатратНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиРаспрМат.СчетЗатрат,    ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиРаспрМат.СчетЗатратНУ,  ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиРаспрЗатр.СчетЗатрат,   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиРаспрЗатр.СчетЗатратНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиРаспрОтходы.СчетЗатрат,   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиРаспрОтходы.СчетЗатратНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( ЭлементыФормы.ВозвратнаяТара.Колонки.СчетУчетаБУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
	
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата, ПоказыватьВДокументахСчетаУчета);
	
	АвтоОтметка = Истина;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			АвтоОтметка = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если ЭлементыФормы.Заказ.АвтоотметкаНеЗаполненного <> АвтоОтметка Тогда
		ЭлементыФормы.Заказ.АвтоотметкаНеЗаполненного = АвтоОтметка;
	КонецЕсли;

	Если ЭлементыФормы.Заказ.ОтметкаНеЗаполненного <> АвтоОтметка И НЕ ЗначениеЗаполнено(Заказ) Тогда
		ЭлементыФормы.Заказ.ОтметкаНеЗаполненного = АвтоОтметка;
	КонецЕсли;
	
	ЭлементыФормы.Материалы.Колонки.СтатьяЗатрат.Видимость               = ВводитьСтатьиЗатратПоСтрокам;
	ЭлементыФормы.РаспределениеМатериалов.Колонки.СтатьяЗатрат.Видимость = ВводитьСтатьиЗатратПоСтрокам;
	
	ЭлементыФормы.Продукция.Колонки.ДоляСтоимости.Видимость = УправлениеПроизводством.ИспользоватьВидСпецификации(мИспользоватьТолькоСборочныеСпецификации);

	ЭлементыФормы.СтатьяЗатрат.Видимость = Не ВводитьСтатьиЗатратПоСтрокам;
	ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Не ВводитьСтатьиЗатратПоСтрокам;

	ЭлементыФормы.ОсновнаяПанель.Страницы.Материалы.Видимость                 = ИспользоватьМатериалы;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Распределение.Видимость             = Не АвтораспределениеМатериалов И ИспользоватьМатериалы;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ПрочиеЗатраты.Видимость             = ИспользоватьПрочиеЗатраты;
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеПрочихЗатрат.Видимость = Не АвтораспределениеПрочихЗатрат И ИспользоватьПрочиеЗатраты;
	
	// Установка видимости колонки "Проект".
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "Продукция.Проект");
	
	Флаг = ВозвратнаяТара.Количество() > 0 ИЛИ Константы.ИспользоватьВозвратнуюТару.Получить();
	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = Флаг И ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ВозвратныеОтходы.Видимость               = ИспользоватьВозвратныеОтходы;
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеВозвратныхОтходов.Видимость = Не АвтораспределениеВозвратныхОтходов И ИспользоватьВозвратныеОтходы;

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ЭлементыФормы.НадписьСкладОтходов.Видимость = Истина;
		ЭлементыФормы.СкладОтходов.Видимость = Истина;
	Иначе
		ЭлементыФормы.НадписьСкладОтходов.Видимость = Ложь;
		ЭлементыФормы.СкладОтходов.Видимость = Ложь;		
	КонецЕсли;
	
	// Доступность колонок Заказы.
	Если ИзмененоИспользоватьЗаказы Тогда
	
		ИзмененоИспользоватьЗаказы = Ложь; // Повторно не устанавливаем видимость
		
		мКолонкиПродукция.Заказ       .Видимость = ИспользоватьЗаказы;
		мКолонкиПродукция.Заказы      .Видимость = ИспользоватьЗаказы;
		мКолонкиПродукция.ЗаказРезерв .Видимость = ИспользоватьЗаказы;
		
		мКолонкиМатериалы.Заказ       .Видимость = ИспользоватьЗаказы;
		
		мКолонкиРаспределениеМатериалов.Заказ       .Видимость = ИспользоватьЗаказы;
		
		мКолонкиВозвратныеОтходы.Заказ        .Видимость = ИспользоватьЗаказы;
		мКолонкиВозвратныеОтходы.Заказы       .Видимость = ИспользоватьЗаказы;
		мКолонкиВозвратныеОтходы.ЗаказРезерв  .Видимость = ИспользоватьЗаказы;
		
		мКолонкиПрочиеЗатраты                 .Заказ.Видимость = ИспользоватьЗаказы;
		мКолонкиРаспределениеПрочихЗатрат     .Заказ.Видимость = ИспользоватьЗаказы;
		мКолонкиРаспределениеВозвратныхОтходов.Заказ.Видимость = ИспользоватьЗаказы;
		
	КонецЕсли;
	
	// Установим признак возможности изменения видимости колонок заказы
	СтруктураКолонок = Новый Структура("Заказ,Заказы,ЗаказРезерв");
	
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиПродукция,                      СтруктураКолонок, ИспользоватьЗаказы);
	
	СтруктураКолонок = Новый Структура("Заказ");
	
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиМатериалы,                      СтруктураКолонок, ИспользоватьЗаказы);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеМатериалов,        СтруктураКолонок, ИспользоватьЗаказы);
	
	СтруктураКолонок = Новый Структура("Заказ,Заказы,ЗаказРезерв");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиВозвратныеОтходы,               СтруктураКолонок, ИспользоватьЗаказы);
	
	СтруктураКолонок = Новый Структура("Заказ");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиПрочиеЗатраты,                  СтруктураКолонок, ИспользоватьЗаказы);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеПрочихЗатрат,      СтруктураКолонок, ИспользоватьЗаказы);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеВозвратныхОтходов, СтруктураКолонок, ИспользоватьЗаказы);
	
КонецПроцедуры // ДоступностьЭлементовФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если ЗначениеЗаполнено(ПараметрОснование) Тогда
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Если ПараметрОснование.ВидОперации <> Перечисления.ВидыОперацийПриходныйОрдер.ИзПереработки Тогда
				Предупреждение("Поступление товаров из переработки можно вводить на основании 
				                |приходного ордера только с видом операции ""из переработки""!");
				Отказ = Истина;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПоставщику")
			И Не ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
			Предупреждение("Документ можно вводить только на основании заказа поставщику с видом операции ""Переработка"".");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
        ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);

		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			
			// Заполнить реквизиты значениями по умолчанию.
			
			ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете;
			
			НДСВключенВСтоимость    = Ложь;
			УчитыватьНДС            = Истина;
			СуммаВключаетНДС        = Истина;
			
		КонецЕсли;
		
		ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		Если Материалы.Количество()>0 Тогда
			ИспользоватьМатериалы = истина;
		КонецЕсли;
		

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");

	// Установить ограничение - изменять видимоть колонок для ТЧ продукция
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Продукция.Колонки, СтруктураКолонок);

	// Установить ограничение - изменять видимоть колонок для ТЧ материалы
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Материалы.Колонки, СтруктураКолонок);

	// Установить ограничение - изменять видимоть колонок для ТЧ материалы
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ПрочиеЗатраты.Колонки, СтруктураКолонок);
	
	// Вывести в заголовке формы вид операции.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(" по ордеру", ЭтотОбъект, ЭтаФорма);
	Иначе
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиПродукция);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиПродукция);

	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиМатериалы);
	
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиВозвратныеОтходы);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиВозвратныеОтходы);

	СтруктураКолонок = Новый Структура("ХарактеристикаНоменклатуры, ХарактеристикаПродукции");
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиРаспределениеМатериалов, СтруктураКолонок);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиРаспределениеВозвратныхОтходов, СтруктураКолонок);
	
	СтруктураКолонок = Новый Структура("СерияНоменклатуры, СерияПродукции");
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиРаспределениеМатериалов, СтруктураКолонок);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиРаспределениеВозвратныхОтходов, СтруктураКолонок);

	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.РаспределениеПрочихЗатрат.Колонки);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(ЭлементыФормы.РаспределениеПрочихЗатрат.Колонки);

	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);

	// Установить в зависимости от вида поступления тип для выбора СкладаОрдера
	РаботаСДиалогами.УстановитьТипСкладаОрдера(ЭтотОбъект, ЭлементыФормы);

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	ИзмененоИспользоватьЗаказы = Истина; // Установить видимость колонок заказы при открытии
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	УстановитьВидимостьДоступность();
	
	УчетСерийныхНомеров.УстановитьВидимостьКнопкиВводаСерийныхНомеров(ЭлементыФормы.КоманднаяПанельПродукция);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ЭлементыФормы.ОсновнаяПанель.Страницы.Материалы.Заголовок     = "Материалы (" + Материалы.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.Продукция.Заголовок     = "Продукция (" + Продукция.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Заголовок = "Тара (" + ВозвратнаяТара.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.ПрочиеЗатраты.Заголовок = "Прочие затраты (" + ПрочиеЗатраты.Количество() + " поз.)";
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ВозвратныеОтходы.Заголовок = "Возвратные отходы (" + ВозвратныеОтходы.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеВозвратныхОтходов.Заголовок = "Распределение возвратных отходов (" + РаспределениеВозвратныхОтходов.Количество() + " поз.)";
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Распределение.Заголовок = "Распределение материалов (" + РаспределениеМатериалов.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеПрочихЗатрат.Заголовок = "Распределение прочих затрат (" + РаспределениеПрочихЗатрат.Количество() + " поз.)";

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда, Спецификация;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		ЗначениеВыбора.Свойство("Команда", Команда);
		ЗначениеВыбора.Свойство("Спецификация", Спецификация);

		Если Спецификация <> Неопределено
		   И Команда <> Неопределено
		Тогда
			ОбработкаПодбораПоСпецификации(Материалы, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			ОбработкаПодбора(Материалы, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьПродукция" Тогда
			ОбработкаПодбора(Продукция, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьРаспределениеМатериалов" Тогда
			ОбработкаПодбора(РаспределениеМатериалов, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратныеОтходы" Тогда
			ОбработкаПодбора(ВозвратныеОтходы, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборПрочихЗатрат" Тогда
			ОбработкаПодбораПрочихЗатрат( ПрочиеЗатраты, ЗначениеВыбора);	
		ИначеЕсли Команда = Неопределено Тогда
			УправлениеПроизводством.ЗаполнитьПоСпецификации(
				ЭтотОбъект, 
				мПараметрыСвязиСтрокТЧ, 
				ЗначениеВыбора.Спецификация, 
				ЗначениеВыбора.Количество
			);
			ЗаполнитьТаблицуРаспределенияМатериалов(Ложь);
			ЗаполнитьТаблицуРаспределенияВозвратныхОтходов(, Ложь);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураЗапрещенных = Неопределено;
	СтруктураЗапрещенных = Новый Структура("НДСВключенВСтоимость, УчитыватьНДС, СуммаВключаетНДС, УсловиеПродаж");

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураЗапрещенных, "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, СтруктураЗапрещенных, "ВозвратнаяТара", мВалютаРегламентированногоУчета, , СтруктураЗначений);
		
		Если СтруктураЗначений.ПерезаполнитьЦеныПоТипу Тогда
			
			Для Каждого СтрокаТабличнойЧасти Из ВозвратныеОтходы Цикл
				СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(
					СтрокаТабличнойЧасти.Сумма, 
					мВалютаРегламентированногоУчета, 
					мВалютаУправленческогоУчета, 
					Дата
				);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при выборе пункта подменю "Заполнить" командной панели формы.
//
Процедура КоманднаяПанельРаспределениеМатериаловЗаполнить(Кнопка)

	ЗаполнитьТаблицуРаспределенияМатериалов();

КонецПроцедуры // КоманднаяПанельРаспределениеМатериаловЗаполнить()

// Процедура вызывается при выборе пункта подменю "Заполнить" командной панели формы.
//
Процедура КоманднаяПанельРаспределениеПрочихЗатратЗаполнить(Кнопка)

	ЗаполнитьТаблицуРаспределенияПрочихЗатрат();

КонецПроцедуры // КоманднаяПанельРаспределениеПрочихЗатратЗаполнить()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Продукция"
//
Процедура КоманднаяПанельПродукцияПодбор(Кнопка)

	ДействиеПодбор(Продукция);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "ВозвратнаяТара"
//
Процедура КоманднаяПанельВозвратнаяТараПодбор(Кнопка)
	
	ДействиеПодбор(ВозвратнаяТара);
	
КонецПроцедуры // КоманднаяПанельВозвратнаяТараПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыПодбор(Кнопка)

	ДействиеПодбор(Материалы);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "ПрочиеЗатраты"
//
Процедура КоманднаяПанельПрочиеЗатратыПодбор(Кнопка)
	
	ПодборПоПрочимЗатратам();
	
КонецПроцедуры // КоманднаяПанельПрочиеЗатратыПодбор()

// Процедура вызывается при нажатии кнопки "ЗаполнитьСЗаменой" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьСЗаменой(Кнопка)
	
	ПодборМатериаловИАналогов = Обработки.ПодборМатериаловИАналогов.Создать();
	
	ФормаПодбораМатериаловИАналогов = ПодборМатериаловИАналогов.ПолучитьФорму(, ЭтаФорма);
	
	//Установим реквизиты и переменые формы.
	ФормаПодбораМатериаловИАналогов.ДокументОбъект = ЭтотОбъект;
	
	// Открываем форму обработки
	ФормаПодбораМатериаловИАналогов.Открыть();
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьСЗаменой()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "РаспределениеМатериалов"
//
Процедура КоманднаяПанельРаспределениеМатериаловПодбор(Кнопка)

	ДействиеПодбор(РаспределениеМатериалов);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Продукция"
//
Процедура КоманднаяПанельПродукцияЗаполнитьПоЗаказуПоставщику(Кнопка)
	
	ЗаполнитьТоварыПоОстаткамУпр();
	
КонецПроцедуры // КоманднаяПанельПродукцияЗаполнитьПоЗаказуПоставщику()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоЗаказу(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Предупреждение("Не указан заказ!");
		Возврат;
	КонецЕсли;
	
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос("При заполнении табличная часть будет очищена!
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Материалы.Очистить();
	КонецЕсли;
	
	ЗаполнитьМатериалыПоЗаказу();

КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоЗаказу()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоСпецификации(Кнопка)
	
	ЗаполнитьМатериалыПоСпецификации();
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнить()

// Процедура вызывается при выборе пункта подменю "Подбор" командной панели формы.
//
Процедура ДействияФормыПодбор(Кнопка)

	ДействиеПодборПоСпецификации();

КонецПроцедуры // ДействияФормыПодбор()

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("НоменклатурнаяГруппа", 		СтрокаТабличнойЧасти.НоменклатурнаяГруппа);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Истина);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Продукция");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();
	
КонецПроцедуры // КоманднаяПанельПродукцияСерийныеНомера()

// Процедура вызывается при нажатии кнопки "Настройка" командной панели формы.
//
Процедура ДействияФормыНастройка(Кнопка)
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	ФормаНастройки.ОткрытьМодально();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ДействияФормыНастройка()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "ИспользованныеМатериалы".
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоОстаткам(Кнопка)
	
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос("При заполнении табличная часть будет очищена!" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьМатериалыПоОстаткам();
		
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоОстаткам()

// Процедура обработчик события нажатие кнопки командной панели.
// Процедура выполняет заполнение табличной части затраты
//
Процедура КоманднаяПанельЗатратыЗаполнить(Кнопка)
	
	Если Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе");
		Возврат;
	КонецЕсли;
	
	Если ПрочиеЗатраты.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена!
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПрочиеЗатратыПоОстаткам();
	
КонецПроцедуры // КоманднаяПанельЗатратыЗаполнить(Кнопка)

// Процедура обработчик события нажатие кнопки командной панели.
//
Процедура КоманднаяПанельМатериалыДобавитьИзТребованиеНакладная(Кнопка)
	
	ДобавитьИзТребованиеНакладной();
	
КонецПроцедуры // КоманднаяПанельМатериалыДобавитьИзТребованиеНакладная()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратные отходы"
//
Процедура КоманднаяПанельВозвратныеОтходыПодбор(Кнопка)
	
	ДействиеПодбор(ВозвратныеОтходы);
	
КонецПроцедуры // КоманднаяПанельВозвратныеОтходыПодбор()

// Процедура вызывается при нажатии кнопки "Заполнить по спецификации" командной панели
// табличного поля "ВозвратныеОтходы"
//
Процедура КоманднаяПанельВозвратныеОтходыЗаполнитьПоСпецификации(Кнопка)
	
	ЗаполнитьВозвратныеОтходыПоСпецификации();
	
КонецПроцедуры // КоманднаяПанельВозвратныеОтходыЗаполнитьПоСпецификации()

// Процедура вызывается при выборе пункта подменю "Заполнить распределение возвратных отходов" командной панели формы.
//
Процедура КоманднаяПанельРаспределениеВозвратныхОтходовЗаполнитьРаспределениеВозвратныхОтходов(Кнопка)
	
	ЗаполнитьТаблицуРаспределенияВозвратныхОтходов();
	
КонецПроцедуры // КоманднаяПанельРаспределениеВозвратныхОтходовЗаполнитьРаспределениеВозвратныхОтходов()

// Процедура вызывается при нажатии кнопки "ПараметрыВыпуска" командной панели
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияПараметрыВыпуска(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Продукция");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводПараметровВыпуска = Обработки.ВводПараметровВыпускаПродукции.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводПараметровВыпуска.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводПараметровВыпуска.Открыть();
	
КонецПроцедуры // КоманднаяПанельПродукцияПараметрыВыпуска()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

	Если НЕ Элемент.Значение Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

	Если Продукция.Количество() + 
		РаспределениеМатериалов.Количество() + 
		РаспределениеПрочихЗатрат.Количество() +  
		ВозвратнаяТара.Количество() + 
		ВозвратныеОтходы.Количество() + 
		РаспределениеВозвратныхОтходов.Количество() > 0
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете) Тогда
		
		ЗаполнитьСчетаУчетаВТабЧасти(Продукция, 						"Продукция", 						ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеМатериалов, 			"РаспределениеМатериалов", 			ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеПрочихЗатрат, 		"РаспределениеПрочихЗатрат", 		ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, 					"ВозвратнаяТара",					ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратныеОтходы, 					"ВозвратныеОтходы",					ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеВозвратныхОтходов, 	"РаспределениеВозвратныхОтходов",	ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЕсли;

	Если Элемент.Значение Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в упр. учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	УстановитьВидимостьДоступность();

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	Если НЕ Элемент.Значение Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;

	Если Продукция.Количество() + 
		РаспределениеМатериалов.Количество() + 
		РаспределениеПрочихЗатрат.Количество() +  
		ВозвратнаяТара.Количество() + 
		ВозвратныеОтходы.Количество() + 
		РаспределениеВозвратныхОтходов.Количество() > 0
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(,ОтражатьВНалоговомУчете) Тогда
		
		ЗаполнитьСчетаУчетаВТабЧасти(Продукция, 						"Продукция", 						Неопределено, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеМатериалов, 			"РаспределениеМатериалов", 			Неопределено, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеПрочихЗатрат, 		"РаспределениеПрочихЗатрат", 		Неопределено, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратнаяТара, 					"ВозвратнаяТара",					Неопределено, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратныеОтходы, 					"ВозвратныеОтходы",					Неопределено, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеВозвратныхОтходов, 	"РаспределениеВозвратныхОтходов",	Неопределено, ОтражатьВНалоговомУчете);

	КонецЕсли;
	
	
	Если Элемент.Значение Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;

КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	УстановитьВидимостьДоступность();
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПодразделениеОрганизацииПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Подразделение
//
Процедура ПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	РаботаСДиалогами.НачалоВыбораПодразделения(ТаблицаОтбора, Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	РаботаСДиалогами.НачалоВыбораПодразделенияОрганизации(ТаблицаОтбора, Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Подразделения организации.
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ВводитьСтатьиЗатратПоСтрокам
//
Процедура ВводитьСтатьиЗатратПоСтрокамПриИзменении(Элемент)

	УстановитьВидимостьДоступность();

КонецПроцедуры // ВводитьСтатьиЗатратПоСтрокамПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СкладОрдер".
//
Процедура СкладОрдерПриИзменении(Элемент)
	
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(" по ордеру", ЭтотОбъект, ЭтаФорма);

		// Если контрагент еще не был выбран, заполним его по ордеру
		Если ЗначениеЗаполнено(СкладОрдер)
		   И НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = СкладОрдер.Контрагент;

			// Выполняем общие действия для всех документов при изменении Контрагент.
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

			// Могли поменять договор.
			ПриИзмененииДоговора();

		КонецЕсли;

	Иначе
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

	// Установить тип реквизита для ввода (если, например, поле очистили)
	РаботаСДиалогами.УстановитьТипСкладаОрдера(ЭтотОбъект, ЭлементыФормы);

КонецПроцедуры // СкладОрдерПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.Равно, СтандартнаяОбработка, Перечисления.ВидыСкладов.Оптовый);
		
	Иначе
		
		СтандартнаяОбработка = Ложь;

		// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
		// значение было присвоено стандартно.
		ФормаВыбора = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора(,Элемент,);

		// Оставим для выбора только нужные ордера
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Значение                            = Перечисления.ВидыОперацийПриходныйОрдер.ИзПереработки;
		ФормаВыбора.ДокументСписок.Отбор.ВидОперации.Использование                       = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;

		ФормаВыбора.Открыть();
		
	КонецЕсли;

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Заказ
//
Процедура ЗаказПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		
		Контрагент         = Заказ.Контрагент;
		ДоговорКонтрагента = Заказ.ДоговорКонтрагента;
		ПриИзмененииДоговора();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаказПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
//
Процедура ЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТабОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить( Перечисления.ВидыОперацийЗаказПоставщику.Переработка);
	
	ТекОтбор              = ТабОтбора.Добавить();
	ТекОтбор.Имя          = "ВидОперации";
	ТекОтбор.ВидСравнения = ВидСравнения.ВСписке;
	ТекОтбор.Значение     = СписокОтбора;
	ТекОтбор.НеИзменять   = Истина;
	
	Если ЗначениеЗаполнено( Организация) Тогда
		ТекОтбор              = ТабОтбора.Добавить();
		ТекОтбор.Имя          = "Организация";
		ТекОтбор.ВидСравнения = ВидСравнения.Равно;
		ТекОтбор.Значение     = Организация;
		ТекОтбор.НеИзменять   = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено( Контрагент) Тогда
		ТекОтбор              = ТабОтбора.Добавить();
		ТекОтбор.Имя          = "Контрагент";
		ТекОтбор.ВидСравнения = ВидСравнения.Равно;
		ТекОтбор.Значение     = Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено( ДоговорКонтрагента) Тогда
		ТекОтбор              = ТабОтбора.Добавить();
		ТекОтбор.Имя          = "ДоговорКонтрагента";
		ТекОтбор.ВидСравнения = ВидСравнения.Равно;
		ТекОтбор.Значение     = ДоговорКонтрагента;
	КонецЕсли;
	
	РаботаСДиалогами.ОткрытьФормуДокументаСОтбором(ЭтаФорма, Элемент,, ТабОтбора);
	
КонецПроцедуры // ЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВидПоступления".
//
Процедура ВидПоступленияПриИзменении(Элемент)
	
	РаботаСДиалогами.УстановитьТипСкладаОрдера(ЭтотОбъект, ЭлементыФормы);
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ВидПоступленияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Статья затрат.
//
Процедура СтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.Материальные);
	
КонецПроцедуры // СтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Контрагент
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	// Могли поменять договор.
	ПриИзмененииДоговора();
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		Если ЗначениеЗаполнено(Контрагент) И Заказ.Контрагент <> Контрагент Тогда
			Заказ = Неопределено;
		ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) И Заказ.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
			Заказ = Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И Заказ.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
			Заказ = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить( Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СписокОтбора.Добавить( Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	
	СтруктОтбора = Новый Структура;
	СтруктОтбора.Вставить( "ЗначениеОтбора",     СписокОтбора);
	СтруктОтбора.Вставить( "ВидСравненияОтбора", ВидСравнения.ВСписке);
	
	СтруктДопПараметры = Новый Структура;
	СтруктДопПараметры.Вставить("ВедениеВзаиморасчетов", СтруктОтбора);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект,
		ЭтаФорма,
		Элемент,
		Контрагент,
		ДоговорКонтрагента,
		Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком,
		СтандартнаяОбработка,
		СтруктДопПараметры);
												
КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПРОДУКЦИЯ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части Продукция
//
Процедура ПродукцияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиПродукция, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиПродукция, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент,ИспользоватьЗаказы, Неопределено, Неопределено, ДанныеСтроки, ОформлениеСтроки);

КонецПроцедуры // ПродукцияПриВыводеСтроки()

// Процедура - обработчик события "ПослеУдаления" табличной части Продукция.
//
Процедура ПродукцияПослеУдаления(Элемент)
	
	мПараметрыСвязиСтрокТЧ["Продукция"].ФлагМодификации = Истина;
	
КонецПроцедуры // ПродукцияПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры табличной части Продукция
//
Процедура ПродукцияНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти, "Продукция");

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Продукция", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
	
	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ПродукцияПродукцияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры табличной части Продукция.
//
Процедура ПродукцияХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры // ПродукцияХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода счета
// в строке табличной части "Продукция".
//
Процедура ПродукцияСчетПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчета(ЭлементыФормы.Продукция);

КонецПроцедуры // ПродукцияСчетПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "Продукция".
//
Процедура ПродукцияСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ПродукцияСчетЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Продукция".
//
Процедура ПродукцияКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПродукцияКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ЕдиницаМест
// табличной части Продукция.
//
Процедура ПродукцияЕдиницаМестИзмеренияПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ПродукцияЕдиницаМестИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ЕдиницаИзмерения табличной части Продукция
//
Процедура ПродукцияЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПродукцияЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Продукция".
//
Процедура ПродукцияКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры

// Процедура - обработчик события ПриНачалеРедактирования
//
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
	КонецЕсли;
	
КонецПроцедуры // ПродукцияПриНачалеРедактирования()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Продукция".
//
Процедура ПродукцияПриАктивизацииСтроки(Элемент)

	УстановитьВидимостьДоступность();

КонецПроцедуры // ПродукцияПриАктивизацииСтроки()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации 
// в табличной части "Продукция".
//
Процедура ПродукцияСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.Продукция.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ПродукцияСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет
//
Процедура ПродукцияСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // ПродукцияСчетОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат
//
Процедура ПродукцияСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // ПродукцияСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода заказ
//
Процедура ПродукцияЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Продукция", ДопПараметры);
	
КонецПроцедуры // ПродукцияЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если мКолонкиВозвратнаяТара.ЕдиницаХранения.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры // ВозвратнаяТараПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура" 
// табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Количество" 
// табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Цена"
// табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма"
// табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Заказ"
// табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
		

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ВозвратнаяТара", ДопПараметры);
	
КонецПроцедуры // ВозвратнаяТараЗаказНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетУчетаБУ"
// табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ВозвратнаяТараСчетУчетаБУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетУчетаБУ"
// табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараСчетУчетаБУПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные);
	
КонецПроцедуры // ВозвратнаяТараСчетУчетаБУПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ МАТЕРИАЛЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Материалы". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);	
	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент,ИспользоватьЗаказы, Неопределено, Неопределено, ДанныеСтроки, ОформлениеСтроки);

КонецПроцедуры // МатериалыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти, "Материалы");

КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаЗначенияНоменклатуры(Элемент, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // МатериалыНоменклатураНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаМестПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // МатериалыЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // МатериалыКоличествоПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Статья затрат
// табличной части "Материалы".
//
Процедура МатериалыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.Материальные);
	
КонецПроцедуры // МатериалыСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "Материалы".
//
Процедура МатериалыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Материалы", ДопПараметры);
	
КонецПроцедуры // МатериалыЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПРОЧИЕ ЗАТРАТЫ

// Процедура - обработчик события "ПриИзменении" поля ввода сумма
// в строке табличной части "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // ПрочиеЗатратыСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Статья затрат
// табличной части "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СформироватьТаблицуОтбораНематериальныхПроизводственныхСтатейЗатрат();
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		ТаблицаОтбора, 
		Элемент, 
		СтандартнаяОбработка
	);
	
КонецПроцедуры // ПрочиеЗатратыСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ПрочиеЗатраты", ДопПараметры);
	
КонецПроцедуры // ПрочиеЗатратыЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ РАСПРЕДЕЛЕНИЕ МАТЕРИАЛОВ

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "Распределение материалов".
//
Процедура РаспределениеМатериаловСчетЗатратПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);

КонецПроцедуры // РаспределениеМатериаловСчетЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Распределение материалов".
//
Процедура РаспределениеМатериаловНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "РаспределениеМатериалов", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // РаспределениеМатериаловНоменклатураПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации 
// в табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные.Продукция, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // РаспределениеМатериаловСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат
//
Процедура РаспределениеМатериаловСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // РаспределениеМатериаловСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Продукция
//
Процедура РаспределениеМатериаловПродукцияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеМатериаловПродукцияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Продукция
//
Процедура РаспределениеМатериаловХарактеристикаПродукцииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеМатериаловХарактеристикаПродукцииПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Статья затрат
// табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.Материальные);
	
КонецПроцедуры // РаспределениеМатериаловСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеМатериалов", ДопПараметры);
	
КонецПроцедуры // РаспределениеМатериаловЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Единица измерения.
//
Процедура РаспределениеМатериаловЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // РаспределениеМатериаловЕдиницаИзмеренияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ РАСПРЕДЕЛЕНИЕ ПРОЧИХ ЗАТРАТ

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "Распределение прочих затрат".
//
Процедура РаспределениеПрочихЗатратСчетЗатратПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);

КонецПроцедуры // РаспределениеПрочихЗатратСчетЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода сумма
// в строке табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // РаспределениеПрочихЗатратСуммаПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации 
// в табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // РаспределениеПрочихЗатратСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат
//
Процедура РаспределениеПрочихЗатратСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // РаспределениеПрочихЗатратСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Продукция
//
Процедура РаспределениеПрочихЗатратНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеПрочихЗатратНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Характеристика продукции.
//
Процедура РаспределениеПрочихЗатратХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеПрочихЗатратХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Статья затрат
// табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СформироватьТаблицуОтбораНематериальныхПроизводственныхСтатейЗатрат();
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		ТаблицаОтбора, 
		Элемент, 
		СтандартнаяОбработка
	);
	
КонецПроцедуры // РаспределениеПрочихЗатратСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеПрочихЗатрат", ДопПараметры);
	
КонецПроцедуры // РаспределениеПрочихЗатратЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНЫЕ ОТХОДЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратныеОтходы". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура ВозвратныеОтходыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиВозвратныеОтходы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратныеОтходы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент,ИспользоватьЗаказы, Неопределено, Неопределено, ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры // ВозвратныеОтходыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти);
	
	УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратныеОтходы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры // ВозвратныеОтходыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры // ВозвратныеОтходыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыКоличествоМестПриИзменении(Элемент)
	
	// Рассчитать новое количество
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // ВозвратныеОтходыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // ВозвратныеОтходыЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количество
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыКоличествоПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // ВозвратныеОтходыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // ВозвратныеОтходыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода сумма
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыСуммаПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Суммы.
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"ВозвратныеОтходы");
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // ВозвратныеОтходыСуммаПриИзменении()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СтатусПартии) Тогда
			Элемент.ТекущиеДанные.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВозвратныеОтходыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода счета
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыСчетПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, , "Счет", "СчетНУ");
	
КонецПроцедуры // ВозвратныеОтходыСчетПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ВозвратныеОтходыСчетЗатратПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификация
// в табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ВозвратныеОтходыСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета.
//
Процедура ВозвратныеОтходыСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ВозвратныеОтходыСчетОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета НУ.
//
Процедура ВозвратныеОтходыСчетНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ВозвратныеОтходыСчетНУОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат.
//
Процедура ВозвратныеОтходыСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ВозвратныеОтходыСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат НУ.
//
Процедура ВозвратныеОтходыСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ВозвратныеОтходыСчетЗатратНУОбработкаВыбора()

// Процедура - обработчик события НачалоВыбора поля ввода заказ
// в табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ВозвратныеОтходы", ДопПараметры);
	
КонецПроцедуры // ВозвратныеОтходыЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ РАСПРЕДЕЛЕНИЕ ВОЗВРАТНЫХ ОТХОДОВ

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "РаспределениеВозвратныхОтходов.
//
Процедура РаспределениеВозвратныхОтходовСчетЗатратПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);

КонецПроцедуры // РаспределениеВозвратныхОтходовСчетЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.СерияНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.СерияНоменклатуры = Неопределено;
	КонецЕсли; 

	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
		СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
	КонецЕсли;

	СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "РаспределениеВозвратныхОтходов", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // РаспределениеВозвратныхОтходовНоменклатураПриИзменении()

//Процедура - обработчик события НачалоВыбора поля ввода Спецификация
// в табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные.Продукция, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовСпецификацияНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода продукция
//
Процедура РаспределениеВозвратныхОтходовПродукцияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовПродукцияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристика продукции.
//
Процедура РаспределениеВозвратныхОтходовХарактеристикаПродукцииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовХарактеристикаПродукцииПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеВозвратныхОтходов", ДопПараметры);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовЗаказНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат.
//
Процедура РаспределениеВозвратныхОтходовСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат НУ.
//
Процедура РаспределениеВозвратныхОтходовСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовСчетЗатратНУОбработкаВыбора()

Процедура ПродукцияЗаказРезервНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Продукция", ДопПараметры);
		
КонецПроцедуры

Процедура ВозвратныеОтходыЗаказРезервНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ВозвратныеОтходы", ДопПараметры);
		
КонецПроцедуры

Процедура РаспределениеМатериаловПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент,ИспользоватьЗаказы, Неопределено, Неопределено, ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиПродукция 				= ЭлементыФормы.Продукция.Колонки;
мКолонкиВозвратнаяТара 			= ЭлементыФормы.ВозвратнаяТара.Колонки;
мКолонкиМатериалы 				= ЭлементыФормы.Материалы.Колонки;
мКолонкиРаспределениеМатериалов = ЭлементыФормы.РаспределениеМатериалов.Колонки;
мКолонкиПрочиеЗатраты			= ЭлементыФормы.ПрочиеЗатраты.Колонки;
мКолонкиРаспределениеПрочихЗатрат = ЭлементыФормы.РаспределениеПрочихЗатрат.Колонки;
мКолонкиВозвратныеОтходы 				= ЭлементыФормы.ВозвратныеОтходы.Колонки;
мКолонкиРаспределениеВозвратныхОтходов 	= ЭлементыФормы.РаспределениеВозвратныхОтходов.Колонки;

мИспользоватьТолькоСборочныеСпецификации = глЗначениеПеременной("ИспользоватьТолькоСборочныеСпецификации");

ЭлементыФормы.ВозвратныеОтходы.Колонки.СтатусПартии.ЭлементУправления.СписокВыбора.Добавить( Перечисления.СтатусыПартийТоваров.Продукция);
ЭлементыФормы.ВозвратныеОтходы.Колонки.СтатусПартии.ЭлементУправления.СписокВыбора.Добавить( Перечисления.СтатусыПартийТоваров.Купленный);