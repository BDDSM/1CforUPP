////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			 Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			 Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	Иначе
		СпособЗаполненияЦен = Неопределено;
	КонецЕсли;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "ТоварыИУслуги", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

КонецПроцедуры // ПриИзмененииДоговора()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Расчет, исходя из постоянной суммы
//
// Параметры:
//  СтрокаТабличнойЧасти - строка табличной части документа,
//  ДокументОбъект       - объект редактируемого документа.
//
Процедура РассчитатьСуммуНДСТоварыИУслуги(СтрокаТабличнойЧасти, ДокументОбъект)
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	СтрокаТабличнойЧасти.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	                                                   Истина,
	                                                   СуммаВключаетНДС,
	                                                   УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

КонецПроцедуры // РассчитатьСуммуНДСТоварыИУслуги()

Процедура УстановитьВидимость()

	ЭлементыФормы.Контрагент.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Контрагент) И Не (ИспользоватьДокументРасчетовКакСчетФактуру И УчетНДС.ДляСчетаФактурыНеТребуетсяКонтрагент(РасчетныйДокумент));
	ЭлементыФормы.ДоговорКонтрагента.ОтметкаНезаполненного = Не ЗначениеЗаполнено(ДоговорКонтрагента) И Не (ИспользоватьДокументРасчетовКакСчетФактуру И УчетНДС.ДляСчетаФактурыНеТребуетсяКонтрагент(РасчетныйДокумент));
	
	ЭлементыФормы.ФормироватьПроводки.Видимость = ПрямаяЗаписьВКнигу;
	ЭлементыФормы.РасчетныйДокумент.ОтметкаНезаполненного = Не ЗначениеЗаполнено(РасчетныйДокумент) И ИспользоватьДокументРасчетовКакСчетФактуру;
	ЭлементыФормы.ЗаписьДополнительногоЛиста.Видимость = ПрямаяЗаписьВКнигу;
	ЭлементыФормы.КорректируемыйПериод.Видимость = ПрямаяЗаписьВКнигу;
	ЭлементыФормы.КорректируемыйПериод.ОтметкаНезаполненного = ЗаписьДополнительногоЛиста И Не ЗначениеЗаполнено(КорректируемыйПериод);
	ЭлементыФормы.ФормироватьСторнирующиеЗаписиДопЛистовВручную.Видимость = ЗаписьДополнительногоЛиста И ПрямаяЗаписьВКнигу;
	
	ЭлементыФормы.ТоварыИУслуги.Колонки.СчетУчетаБУ.АвтоОтметкаНезаполненного = Не ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.СчетДоходовБУ.АвтоОтметкаНезаполненного = Не ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.ВидЦенности.АвтоОтметкаНезаполненного = ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.СчетУчетаНДСПоРеализации.АвтоОтметкаНезаполненного = ФормироватьПроводки;
	
	ЭлементыФормы.ТоварыИУслуги.Колонки.Номенклатура.Видимость = Не ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.ВидЦенности.Видимость = ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.СторнирующаяЗаписьДопЛиста.Видимость = ПрямаяЗаписьВКнигу И ЗаписьДополнительногоЛиста И ФормироватьСторнирующиеЗаписиДопЛистовВручную;
	ЭлементыФормы.ТоварыИУслуги.Колонки.СчетУчетаНДСПоРеализации.Видимость = ПрямаяЗаписьВКнигу И ФормироватьПроводки;
	ЭлементыФормы.ТоварыИУслуги.Колонки.СубконтоБУ.Видимость = ПрямаяЗаписьВКнигу И ФормироватьПроводки;
	ЭлементыФормы.ТоварыИУслуги.Колонки.Событие.Видимость = ПрямаяЗаписьВКнигу;
	Если ЭлементыФормы.ТоварыИУслуги.Колонки.Номенклатура.Видимость Тогда
		РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.ТоварыИУслуги.Колонки);
		РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(ЭлементыФормы.ТоварыИУслуги.Колонки);
	Иначе
		ЭлементыФормы.ТоварыИУслуги.Колонки.ХарактеристикаНоменклатуры.Видимость = Ложь;
		ЭлементыФормы.ТоварыИУслуги.Колонки.СерияНоменклатуры.Видимость = Ложь; 
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыОплаты.Видимость = ПрямаяЗаписьВКнигу;

	Для Каждого КнопкаЗаполнить Из ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки Цикл
		КнопкаЗаполнить.Доступность = Не ТолькоПросмотр;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ТоварыИУслуги, ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыОплаты, ЭлементыФормы.КоманднаяПанельДокументыОплаты.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ, СоответствиеТЧ);

КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(?(СуммаВключаетНДС, ТоварыИУслуги.Итог("Сумма"), ТоварыИУслуги.Итог("Сумма") + ТоварыИУслуги.Итог("СуммаНДС")));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьНДСДокумента(ЭтотОбъект, "ТоварыИУслуги"));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, 
	                                                                               ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
	                                                                               ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
	                                                                               мВалютаРегламентированногоУчета) + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик события "Нажатие" кнопки "Заполнить"
//
Процедура КоманднаяПанельТоварыДействиеЗаполнить(Кнопка)

	ЗаполнитьПоРасчетномуДокументу(Ложь);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

// Процедура - обработчик события "Нажатие" кнопки "Заполнить"
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьДобавить(Кнопка)

	ЗаполнитьПоРасчетномуДокументу(Истина);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");
	СтруктураЗапрещенных = Новый Структура();
	СтруктураЗапрещенных.Вставить("УсловиеПродаж");

	Если ПрямаяЗаписьВКнигу Тогда
		СтруктураЗапрещенных.Вставить("НДСВключенВСтоимость");
	КонецЕсли;

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураЗапрещенных, "ТоварыИУслуги", , Истина);
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, СтруктураЗапрещенных, "ТоварыИУслуги", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");

	Иначе
		// Определить счет-фактуру, введенный на основании этого документа, если такой 
		// счет-фактура существует.
		ЗаполнитьТекстПроСчетФактуру();
		
		Если (ЗначениеЗаполнено(РасчетныйДокумент)) и (ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС")) Тогда
			//По документам сформированным вводом начальных остатков по НДС не допускаются изменения
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли; 

	КонецЕсли;
	
	// Параметры для выбора организации
	УчетПоВсемОрганизациям = Истина; // Для совместимости с БП

	// Проверка ведения однофирменности
	ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;

	мТекущаяДатаДокумента = Дата;

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	УстановитьВидимость();
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчки события "ОбновлениеОтображения" формы.
//
// Обновляет заголовки закладок панели "ОсновнаяПанель".
//
Процедура ОбновлениеОтображения()
	
	ОбновитьПодвал();
	
	// Подсчитаем количество строк в табличной части.
	СтраницаПанели  = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.ТоварыИУслуги.Заголовок = "Товары и услуги ("   + ДокументОбъект.ТоварыИУслуги.Количество() + " поз.)";
	СтраницаПанели  = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.ДокументыОплаты.Заголовок = "Документы оплаты ("   + ДокументОбъект.ДокументыОплаты.Количество() + " поз.)";
	
КонецПроцедуры // ОбновлениеОтображения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	ПриИзмененииДоговора();
	
	УстановитьВидимость();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        Неопределено, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода РасчетныйДокумент
//
Процедура РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)

	Отбор = Новый Структура("Контрагент, ДокументыПоДоговоруКонтрагента", Контрагент, ДоговорКонтрагента);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "");

КонецПроцедуры // РасчетныйДокументНачалоВыбора()

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
													 УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный"));

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура - обработчик события "ПриИзменении" флага ПрямаяЗаписьВКнигу.
//
Процедура ПрямаяЗаписьВКнигуПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ИспользоватьДокументРасчетовКакСчетФактуруПриИзменении(Элемент)
	
	Если ИспользоватьДокументРасчетовКакСчетФактуру И Не Ссылка.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный");
		Если ЗначениеЗаполнено(СчетФактура) И ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			
			Ответ = Вопрос("Требуется пометить на удаление подчиненный документ <" + СчетФактура + ">. Пометить документ на удаление?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				СчетФактураОбъект.ДокументОснование = Неопределено;
				СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СчетФактураОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ИспользоватьДокументРасчетовКакСчетФактуру = Ложь;			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			Сообщить("Рекомендуется указать в качестве документа расчетов документ-основание счета-фактуры полученного, если им не является авансовый отчет");
		ИначеЕсли ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Сообщить("Рекомендуется указать в качестве документа расчетов документ-основание счета-фактуры выданного");
		КонецЕсли;
	КонецЕсли;                                       		
	
	Если ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		ПредъявленСчетФактура = Ложь;
	КонецЕсли;
	
	ЗаполнитьТекстПроСчетФактуру();
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ФормироватьПроводкиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ФормироватьСторнирующиеЗаписиДопЛистовВручнуюПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ЗаписьДополнительногоЛистаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура КорректируемыйПериодПриИзменении(Элемент)
	
	ЭлементыФормы.КорректируемыйПериод.ОтметкаНезаполненного = ЗаписьДополнительногоЛиста И Не ЗначениеЗаполнено(КорректируемыйПериод);
	
КонецПроцедуры

Процедура РасчетныйДокументПриИзменении(Элемент)
	
	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ "ТоварыИУслуги"

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Реализация");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыИУслугиСтавкаНДСПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;

	СтрокаТЧ.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.Сумма,
	                                       Истина, СуммаВключаетНДС,
	                                       УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));

КонецПроцедуры

Процедура ТоварыИУслугиСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыИУслугиЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
	
		// Выполнить общие действия для всех документов при изменении Единица.
		ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		РассчитатьСуммуНДСТоварыИУслуги(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыИУслугиЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	РассчитатьСуммуНДСТоварыИУслуги(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыИУслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные, ЭтотОбъект);
	РассчитатьСуммуНДСТоварыИУслуги(ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыИУслугиСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"ТоварыИУслуги");

	// Рассчитать реквизиты табличной части.
	РассчитатьСуммуНДСТоварыИУслуги(ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыИУслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;

	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		// Выполнить общие действия для всех документов при изменении номенклатуры.
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ТоварыИУслуги", Истина);
		
		СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата, ВалютаДокумента, Истина, СуммаВключаетНДС);
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ВидЦенности = УчетНДС.ОпределитьВидЦенности(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.СчетУчетаБУ);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ТоварыИУслугиНоменклатураПриИзменении()

Процедура ТоварыИУслугиСчетДоходовБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка =  БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура ТоварыИУслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.ТоварыИУслуги.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС)));
	КонецЕсли;

КонецПроцедуры

Процедура ТоварыИУслугиПриАктивизацииСтроки(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	Если Не СтрокаТЧ = Неопределено Тогда
		СчетБУ   = СтрокаТЧ.СчетУчетаНДСПоРеализации;
		ЭлементыФормы.ТоварыИУслуги.Колонки.СубконтоБУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));
	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыИУслугиСчетУчетаНДСПоРеализацииПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	СчетБУ   = СтрокаТЧ.СчетУчетаНДСПоРеализации;

	Если СчетБУ.ВидыСубконто.Количество() > 0 Тогда
		СтрокаТЧ.СубконтоБУ = Новый(СчетБУ.ВидыСубконто[0].ВидСубконто.ТипЗначения.Типы()[0])
	Иначе
		СтрокаТЧ.СубконтоБУ = Неопределено;
	КонецЕсли;

	ЭлементыФормы.ТоварыИУслуги.Колонки.СубконтоБУ.Доступность = НЕ (НЕ ЗначениеЗаполнено(СчетБУ) ИЛИ (СчетБУ.ВидыСубконто.Количество() = 0));

КонецПроцедуры

Процедура ТоварыИУслугиЕдиницаИзмеренияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ "ДокументыОплаты"

Процедура ДокументыОплатыДокументОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДокументыОплаты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОплаты) Тогда
		ТекущиеДанные.ДатаОплаты = ТекущиеДанные.ДокументОплаты.Дата;
	КонецЕсли;
	
КонецПроцедуры