////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мКолонкиМатериалы;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

Перем мОтражатьВРегламентированномУчете;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Материалы, ЭлементыФормы.КоманднаяПанельМатериалы.Кнопки.ПодменюЗаполнить);

	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Истина;
	ЕстьСерия = Истина;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить( , "По справочнику");

	ИмяТабличнойЧасти = "Материалы";

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , "ПодборВТабличнуюЧастьМатериалы");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Подразделение"        , Подразделение);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , Истина);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Неопределено);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"    		  , Серия);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура"				 , Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"		 , Серия);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения"          , ЕдиницаИзмерения);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры 			= Серия;
		
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      		= СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.НазначениеИспользования = Номенклатура.НазначениеИспользования;

		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ложь);

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		СтрокаТабличнойЧасти.СтоимостьРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Стоимость, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
		
	КонецЕсли;

	ЭлементыФормы.Материалы.ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы.Материалы.ТекущаяКолонка = ЭлементыФормы.Материалы.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатурыМатериалов(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      		= СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	СтрокаТабличнойЧасти.НазначениеИспользования = СтрокаТабличнойЧасти.Номенклатура.НазначениеИспользования;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НазначениеИспользования) Тогда
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.НазначениеИспользования.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.НазначениеИспользования.ЕдиницаИзмерения;
				
		ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, ложь);
	
КонецПроцедуры // ПриИзмененииНоменклатурыМатериалов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость реквизитов формы.
//
Процедура УстановитьВидимость()
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	КолМатериалы = ЭлементыФормы.Материалы.Колонки;
	
	//Установка видимости, автоотметки незаполненного полей со счетами учета номенклатуры и затрат
	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(Дата, Метаданные().Имя, ЭлементыФормы, Новый Структура("Материалы", КолМатериалы), ПоказыватьВДокументахСчетаУчета, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		
	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Материалы.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиМатериалы);
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	УстановитьВидимость();
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			ОбработкаПодбора(Материалы, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Материалы
//
Процедура КоманднаяПанельТоварыПодбор(Кнопка)
	
	ДействиеПодбор(Материалы);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Создать документы партий"
//
Процедура КоманднаяПанельТоварыСоздатьДокументыПартии(Кнопка)
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Дата");
	ТаблицаДокументов.Колонки.Добавить("Док");
	
	Для Каждого СтрокаТЧ Из Материалы Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ДатаПередачиВЭксплуатацию) Тогда
			Продолжить;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТЧ.ДокументПартии) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТаблицыДокументов = ТаблицаДокументов.Найти(НачалоДня(СтрокаТЧ.ДатаПередачиВЭксплуатацию));
		Если СтрокаТаблицыДокументов = неопределено Тогда
			Док = Документы.ПередачаМатериаловВЭксплуатацию.СоздатьДокумент();
			
			ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(Док);
			
			Док.Дата                         = СтрокаТЧ.ДатаПередачиВЭксплуатацию;
			Док.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете;
			Док.ОтражатьВБухгалтерскомУчете  = ОтражатьВБухгалтерскомУчете;
			Док.ОтражатьВНалоговомУчете      = ОтражатьВНалоговомУчете;
			Док.Организация                  = Организация;
			
			Док.Подразделение                = Подразделение;
			Док.ПодразделениеОрганизации     = ПодразделениеОрганизации;
			Док.Комментарий = "Документ создан автоматически для ввода начальных остатков материалов в эксплуатации";
			
			Док.Записать(РежимЗаписиДокумента.Запись);
		
			СтрокаТЧ.ДокументПартии = Док.Ссылка;
			
			НоваяСтрока = ТаблицаДокументов.Добавить();
			НоваяСтрока.Дата = НачалоДня(СтрокаТЧ.ДатаПередачиВЭксплуатацию);
			НоваяСтрока.Док  = Док.Ссылка;
			
		Иначе
			
			СтрокаТЧ.ДокументПартии = СтрокаТаблицыДокументов.Док;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельТоварыСоздатьДокументыПартии()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Материалы", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельМатериалыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧасти      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧасти = ИзменениеТабличнойЧасти.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧасти.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧасти.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧасти.мЕстьНДС                   = Ложь; 
	ФормаИзменениеТабличнойЧасти.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧасти.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧасти.мИмяТабличнойЧастиДокумента = "Материалы";

	//Перенесем табличную часть
	ИзменениеТабличнойЧасти.Товары.Загрузить(Материалы.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧасти.Открыть();

КонецПроцедуры // КоманднаяПанельМатериалыДействиеИзменить()

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Материалы"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	// Заполнить значения счетов учета и счетов затрат.
	Если Материалы.Количество() > 0 Тогда
		
		// Заполним сумму в валюте регл. учета.
		Ответ = Вопрос(?(ОтражатьВБухгалтерскомУчете, "Заполнить", "Очистить") + 
						" сумму регл. учета?", 
						РежимДиалогаВопрос.ДаНет, , , "Изменения суммы регл. учета");

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для Каждого СтрокаТЧ Из Материалы Цикл
				Если Элемент.Значение Тогда
					СтрокаТЧ.СтоимостьРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТЧ.Стоимость, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
				Иначе
					СтрокаТЧ.СтоимостьРегл = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в упр. учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Материалы"), Неопределено, ОтражатьВНалоговомУчете);
		
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Материалы"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
												  
	УстановитьВидимость();
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
											 
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Материалы

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Материалы". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // МатериалыПриВыводеСтроки()

// Процедура - обработчик события "ОбработкаВыбора" табличной части
// "Материалы".
//
Процедура МатериалыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущаяСтрока.Физлицо = ВыбранноеЗначение.Физлицо;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // МатериалыОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	ПриИзмененииНоменклатурыМатериалов(СтрокаТабличнойЧасти);
	
	ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода работника
// в строке табличной части "Материалы".
//
Процедура МатериалыФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// переопеределим выбор физлица на выбор из списка регистра сведений
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	Иначе
		ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	КонецЕсли;
	
КонецПроцедуры // МатериалыФизЛицоНачалоВыбора()

Процедура МатериалыФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	Иначе
		Элемент.Значение = ВыбранноеЗначение;
	КонецЕсли;

КонецПроцедуры

Процедура МатериалыФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	Если ОтражатьВБухгалтерскомУчете Тогда
        ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "РаботникиОрганизации", Текст,мГоловнаяОрганизация);
	Иначе
		ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст);
	КонецЕсли;

КонецПроцедуры

Процедура МатериалыФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Если ОтражатьВБухгалтерскомУчете Тогда
		Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, мГоловнаяОрганизация, Истина);
	Иначе	
		Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение, , Истина);
    КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НазначениеИспользования"
// в строке табличной части "Материалы".
//
Процедура МатериалыНазначениеИспользованияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.Номенклатура = Элемент.Значение.Владелец;
		МатериалыНоменклатураПриИзменении(Элемент);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НазначениеИспользования) Тогда
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.НазначениеИспользования.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.НазначениеИспользования.ЕдиницаИзмерения;
		
		ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // МатериалыНазначениеИспользованияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаМестПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СтоимостьРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Стоимость, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // МатериалыЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СтоимостьРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Стоимость, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количество
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	ТекСтрока = ЭлементыФормы.Материалы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти( ТекСтрока, ЭтотОбъект);
	
КонецПроцедуры // МатериалыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура МатериалыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ТекСтрока = ЭлементыФормы.Материалы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти( ТекСтрока, ЭтотОбъект);
	ТекСтрока.СтоимостьРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл( ТекСтрока.Стоимость, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);

КонецПроцедуры // МатериалыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода сумма
// в строке табличной части "Материалы".
//
Процедура МатериалыСуммаПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Суммы.
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	СтрокаТабличнойЧасти.СтоимостьРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Стоимость, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // МатериалыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ПогашеннаяСтоимость"
// в строке табличной части "Материалы".
//
Процедура МатериалыПогашеннаяСтоимостьПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	СтрокаТабличнойЧасти.ПогашеннаяСтоимостьРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.ПогашеннаяСтоимость, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // МатериалыПогашеннаяСтоимостьПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Счет табличной части "Материалы".
//
Процедура МатериалыСчетУчетаБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, , "СчетУчетаБУ", "СчетУчетаНУ");
	
КонецПроцедуры // МатериалыСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетУчетаБУ"
// в строке табличной части "Материалы".
//
Процедура МатериалыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // МатериалыСчетУчетаБУОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДокументПартии"
// в строке табличной части "Материалы".
//
Процедура МатериалыДокументПартииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Документы.ПередачаМатериаловВЭксплуатацию.ПолучитьФормуВыбора(, Элемент);

	ФормаВыбора.Отбор.Организация.Установить(Организация);
	ФормаВыбора.Отбор.Подразделение.Установить(Подразделение);
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;
	ФормаВыбора.Открыть();
	
КонецПроцедуры // МатериалыДокументПартииНачалоВыбора()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиМатериалы = ЭлементыФормы.Материалы.Колонки;