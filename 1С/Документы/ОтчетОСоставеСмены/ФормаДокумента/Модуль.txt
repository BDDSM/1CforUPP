// Для формы установлен неавтоматический порядок обхода в соответствии со следующей логикой:
// Сначала обходятся реквизиты левой колонки (дата, смена)
// Затем - реквизиты левой колоки
// Затем - табличное поле

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента;	// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера

Перем мКнопкиЗаполненияТЧ; 		// Хранит дерево кнопок подменю заполнение ТЧ

Перем мКолонкиСоставСмены;		// Хранит колонки табличного поля

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Выполняет необходимые действия после добавления новой строки
//
// Параметры
//  ДанныеСтроки - данные добавленной строки
//
Процедура ДобавлениеСтроки(ДанныеСтроки)
	
	ДанныеСтроки.Явка 		= Истина;
	ДанныеСтроки.ПоГрафику 	= Ложь;
	ИзменениеЯвки(ДанныеСтроки);
	
КонецПроцедуры

// Выполняет необходимые действия при изменении флага явки в строке
//
// Параметры
//  ДанныеСтроки - данные измененной строки
//
Процедура ИзменениеЯвки(ДанныеСтроки)
	
	Если НЕ ДанныеСтроки.Явка Тогда
		ДанныеСтроки.ВремяЯвки 			= Неопределено;
		ДанныеСтроки.ОтработанноеВремя 	= Неопределено;
	Иначе
		ДанныеСтроки.ЗамещающийСотрудник= Неопределено;
	КонецЕсли;
	
	//Если это текущая редактируемая строка, то настроим доступность полей
	Если ДанныеСтроки = ЭлементыФормы.СоставСмены.ТекущаяСтрока Тогда
		УправлениеДоступностьюРеквизитовВСтрокеСоставСмены();
	КонецЕсли;
	
КонецПроцедуры

// Управляет доступностью реквизитов в строке табличного поля СоставСмены.
//
// Табличное поле имеет две группы реквизитов - для явки и для неявки.
//
Процедура УправлениеДоступностьюРеквизитовВСтрокеСоставСмены()
	
	ДанныеСтроки = ЭлементыФормы.СоставСмены.ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено Тогда
	
		//Запрещаем редактировать поля, имеющие смысл только при явке или только при неявке.
		ЭлементыФормы.СоставСмены.Колонки.ВремяЯвки.ЭлементУправления.ТолькоПросмотр 			= НЕ ДанныеСтроки.Явка;
		ЭлементыФормы.СоставСмены.Колонки.ОтработанноеВремя.ЭлементУправления.ТолькоПросмотр 	= НЕ ДанныеСтроки.Явка;
		ЭлементыФормы.СоставСмены.Колонки.ЗамещающийСотрудник.ЭлементУправления.ТолькоПросмотр	= ДанныеСтроки.Явка;
		
		ЭлементыФормы.СоставСмены.Колонки.ВремяЯвки.ПропускатьПриВводе 							= НЕ ДанныеСтроки.Явка;
		ЭлементыФормы.СоставСмены.Колонки.ОтработанноеВремя.ПропускатьПриВводе 					= НЕ ДанныеСтроки.Явка;
		ЭлементыФормы.СоставСмены.Колонки.ЗамещающийСотрудник.ПропускатьПриВводе				= ДанныеСтроки.Явка;
		
		//Запрещаем редактировать сотрудника, имеющегося в графике
		ЭлементыФормы.СоставСмены.Колонки.Сотрудник.ЭлементУправления.ТолькоПросмотр 			= ДанныеСтроки.ПоГрафику;
		
	КонецЕсли;
	
КонецПроцедуры

// Устанавливает актуальный текст в информационные надписи.
//
Процедура ВывестиИнформациюОСмене()
	
	ПредыдущаяСмена = ОперативныйУчетПроизводства.ОписаниеПредыдущейСмены(Подразделение, ГраницаСмены, Метаданные().Имя);
	
	Если ГраницаСмены = '0001-01-01' Тогда
		ПериодСмены	= "<Дата не задана>";
	ИначеЕсли Смена.Пустая() Тогда
		ПериодСмены	= "<Смена не задана>";
	Иначе
		ПериодСмены	= ОперативныйУчетПроизводства.ПредставлениеПериодаСмены(ГраницаСмены, Смена);
	КонецЕсли;
	
КонецПроцедуры

// Выполняет действия, необходимые при изменении смены
//
Процедура ИзменениеСмены()
	
	ГраницаСмены 	= ОперативныйУчетПроизводства.ПолучитьГраницуСменыПоДате(Дата, Смена);
	
	ВывестиИнформациюОСмене();
	
КонецПроцедуры

// Определяет смену исходя из реквизитов документа.
//
Процедура УстановитьСмену()
	
	Смена = Документы.ОтчетОСоставеСмены.ПолучитьСмену(Подразделение, Ответственный, Дата);
    	
	ИзменениеСмены();
	
КонецПроцедуры // УстановитьСмену()

////////////////////////////////////////////////////////////////////////////////
//	УНИВЕРСАЛЬНЫЕ МЕХАНИЗМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа, добавляет подключаемые обработки заполнения
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.СоставСмены,				ЭлементыФормы.КоманднаяПанельСоставСмены.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы
// Подключает внешние обработки заполнения
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда 
		
		// Значение Даты еще не инициализировано
		Дата = ТекущаяДата();
		Если НачалоДня(Дата) <> РабочаяДата Тогда
			Дата = РабочаяДата;
		КонецЕсли;
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа", ПараметрОбъектКопирования);
		
		ГраницаСмены = ОперативныйУчетПроизводства.ПолучитьГраницуСменыПоДате(Дата, Смена); 
		УстановитьСмену();
		
	КонецЕсли;
	
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы
// Заполняет новый документ значениями по-умолчанию.
// Настраивает форму.
//
Процедура ПриОткрытии()

	Если НЕ ЭтоНовый() Тогда 
		
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		
		//Проверим, а не относится ли этот документ к закрытой смене.
		//Для пользователей с полными правами в зависимости от настроек механизма границ запрета изменения данных
		УстановитьПривилегированныйРежим(Истина);
		Если НЕ РольДоступна("ПолныеПрава")
			И
			ГраницаСмены <= РегистрыСведений.ЗавершенныеСмены.Получить(Новый Структура("Подразделение", Подразделение)).ГраницаСмены Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("Явка");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиСоставСмены, СтруктураКолонок);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	// Обновим содержание информационных строк
	ВывестиИнформациюОСмене();
	
	// Запомним текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	// Установим активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма, Новый Структура("Дата, Подразделение, Смена, Ответственный"), ЭлементыФормы.СоставСмены);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события ПослеЗаписи формы
// Сообщает пользователю о некритичных замечаниях по заполнению документа
// Выполняет настройки формы для записанного объекта
Процедура ПослеЗаписи()
	
	//При интерактивной записи проверим заполненность документа. Это не обязательные проверки.
	ПроверитьПравильностьЗаполненияДокумента();
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Обработчик нажатия кнопки ЗаполнитьСоставомТекущейСмены командной панели табличного поля СоставСмены
// 
Процедура КнопкаЗаполнитьСоставомТекущейСмены(Кнопка)
	
	Если СоставСмены.Количество() > 0 Тогда
		Ответ = Вопрос("Перед заполнением табличная часть будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСоставомТекущейСмены();
	
	// Выведем сообщение, чтобы избежать ситуации "нажал на кнопку - ничего не произошло"
	Если СоставСмены.Количество() = 0 Тогда
		Предупреждение(НСтр("ru = 'Данные для заполнения отсутствуют'"),,НСтр("ru='Заполнение списка сотрудников'"));
	КонецЕсли;
	
КонецПроцедуры

//	УНИВЕРСАЛЬНЫЕ МЕХАНИЗМЫ

// Обработчик нажатия на пункт "РедактироватьНомер" меню "Действия" командной панели "ДействияФормы"
//
// Назначается при вызове ДобавитьВМенюДействияКнопкуРедактированияНомера()
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

// Обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Обработчик нажатия пункта "СтруктураПодчиненностиДокумента" меню "Перейти" командной панели "ДействияФормы"
// Отображает структуру подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Обработчик нажатия на кнопку "Печать" командной панели "ОсновныеДействияФормы"
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Обработчик нажатия на кнопку "ПечатьПоУмолчанию командной панели "ОсновныеДействияФормы"
// Выводит на печать печатную форму по-умолчанию
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Обработчик события ПриИзменении поля ввода Дата
// Для другой даты можем найти более подходящую смену
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьСмену();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода Подразделение
// Для другого подразделения можем найти более подходящую смену
Процедура ПодразделениеПриИзменении(Элемент)
	
	УстановитьСмену();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода Ответственный
// Для другого ответственного можем найти более подходящую смену
Процедура ОтветственныйПриИзменении(Элемент)
	
	УстановитьСмену();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода Смена
//
Процедура СменаПриИзменении(Элемент)
	
	ИзменениеСмены();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ПОЛЯ ВВОДА СОСТАВ СМЕНЫ

// Обработчик события ПередНачаломИзменения
//
Процедура СоставСменыПередНачаломИзменения(Элемент, Отказ)
	
	УправлениеДоступностьюРеквизитовВСтрокеСоставСмены();
	
КонецПроцедуры

// Обработчик события ПриНачалеРедактирования
//
Процедура СоставСменыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ДанныеСтроки = ЭлементыФормы.СоставСмены.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ДобавлениеСтроки(ДанныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзмененииФлажка
//
Процедура СоставСменыПриИзмененииФлажка(Элемент, Колонка)
	Если Колонка = ЭлементыФормы.СоставСмены.Колонки.Явка Тогда
		ДанныеСтроки = ЭлементыФормы.СоставСмены.ТекущиеДанные;
		ИзменениеЯвки(ДанныеСтроки);
	КонецЕсли;
КонецПроцедуры

// Обработчик события ПриВыводеСтроки 
//
Процедура СоставСменыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если НЕ ДанныеСтроки.ПоГрафику Тогда
		
		//ОформлениеСтроки.ЦветФона = WebЦвета.Кремовый; //СветлоЖелтый
		ОформлениеСтроки.ЦветФона = ЦветаСтиля.АльтернативныйЦветФонаПоля;
		
	КонецЕсли;
	
	Если НЕ ДанныеСтроки.Явка Тогда
		
		ОформлениеСтроки.ЦветТекста = WebЦвета.ТемноКрасный;
		
		Если ПустаяСтрока(ДанныеСтроки.Примечание) Тогда
			ОформлениеСтроки.Ячейки.Примечание.УстановитьТекст("<Причина неявки не указана>");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриАктивизацииСтроки
//
Процедура СоставСменыПриАктивизацииСтроки(Элемент)
	
	УправлениеДоступностьюРеквизитовВСтрокеСоставСмены();
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора
//
Процедура СоставСменыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	//Если выбор произошел в форме подбора и этого физлица в документе пока нет,
	//добавим новую строку в таблицу
	СтруктураПоиска = Новый Структура("Сотрудник", ВыбранноеЗначение.Физлицо);
	
	Если СоставСмены.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		
		НоваяСтрока = СоставСмены.Добавить();
		НоваяСтрока.Сотрудник 	= ВыбранноеЗначение.ФизЛицо;
		ДобавлениеСтроки(НоваяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПередУдалением
//
Процедура СоставСменыПередУдалением(Элемент, Отказ)
	
	ДанныеСтроки = ЭлементыФормы.СоставСмены.ТекущиеДанные;
	Если ДанныеСтроки <> Неопределено Тогда
		
		Если ДанныеСтроки.ПоГрафику Тогда
			//Нельзя удалить из списка сотрудника, работающего по графику.
			//Воспримем это как намерение поставить неявку.
			//Если уже стоит неявка - то сообщим.
			Отказ 				= Истина;
			
			Если ДанныеСтроки.Явка Тогда
				ДанныеСтроки.Явка 	= Ложь;
				ИзменениеЯвки(ДанныеСтроки);
			Иначе
				ОбщегоНазначения.Сообщение("Нельзя удалить из списка сотрудника, который согласно графику должен был выйти на работу.");
			КонецЕсли;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ СОСТАВ СМЕНЫ

//Поле ввода в колонке Сотрудник

// Обработчик события ПриИзменении
//
Процедура СоставСменыСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.СоставСмены.ТекущиеДанные;
	
	//Этот обработчик будет вызываться только при подборе текста 
	//и не будет при выборе из справочника, так как заполнение реквизита сделано через
	//справочник "СотрудникиОрганизаций" и в обработке выбора стандартная обработка отключена.
	//См. СоставСменыСотрудникОбработкаВыбора()
	
КонецПроцедуры

// Обработчик события НачалоВыбора
// Для выбора используется форма выбора справочника СотрудникиОрганизаций
Процедура СоставСменыСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, ГраницаСмены, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста
//
Процедура СоставСменыСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст);
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста
//
Процедура СоставСменыСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение, , Истина);
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора
// Для выбора используется форма выбора справочника СотрудникиОрганизаций
Процедура СоставСменыСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

//Поле ввода в колонке ЗамещающийСотрудник

// Выполняет общие действия при изменении поля ЗамещающийСотрудник в строке табличной части СоставСмены
//
Процедура ЗамещающийСотрудник_Изменение()
	
	//Обработаем действия при изменении значения реквизита.
	ДанныеСтроки = ЭлементыФормы.СоставСмены.ТекущиеДанные;
	
	//Замещающий сотрудник должен входить в состав смены.
	Если ЗначениеЗаполнено(ДанныеСтроки.ЗамещающийСотрудник) 
	   И СоставСмены.Найти(ДанныеСтроки.ЗамещающийСотрудник, "Сотрудник") = Неопределено Тогда
		НоваяСтрока 				= СоставСмены.Добавить();
		НоваяСтрока.Сотрудник 	= ДанныеСтроки.ЗамещающийСотрудник;
		ДобавлениеСтроки(НоваяСтрока);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении
//
Процедура СоставСменыЗамещающийСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.СоставСмены.ТекущиеДанные;
	
	//Этот обработчик будет вызываться только при подборе текста 
	//и не будет при выборе из справочника, так как заполнение реквизита сделано через
	//справочник "СотрудникиОрганизаций" и в обработке выбора стандартная обработка отключена.
	//См. СоставСменыЗамещающийСотрудникОбработкаВыбора()
	ЗамещающийСотрудник_Изменение();
	
КонецПроцедуры

// Обработчик события НачалоВыбора
// Для выбора используется форма выбора справочника СотрудникиОрганизаций
Процедура СоставСменыЗамещающийСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, ГраницаСмены, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

// Обработчик события АвтоПодборТекста
//
Процедура СоставСменыЗамещающийСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст);
	
КонецПроцедуры

// Обработчик события ОкончаниеВводаТекста
//
Процедура СоставСменыЗамещающийСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение, , Истина);
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора
// Для выбора используется форма выбора справочника СотрудникиОрганизаций
Процедура СоставСменыЗамещающийСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
		
		ЗамещающийСотрудник_Изменение();
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиСоставСмены = ЭлементыФормы.СоставСмены.Колонки;