Перем мВалютаРегламентированногоУчета;
Перем мВалютаУправленческогоУчета;

Перем мИспользуютсяХарактеристикиНоменклатуры;

Перем мКолонкиИсходныеКомплектующие, мКолонкиВыходныеИзделия, мКолонкиВозвратныеОтходы;
Перем мФормаВводаФормулы, мИмяТабличнойЧастиВводаФормулы;
Перем мТекущаяСтрокаИсходныеКомплектующиеПравила, мФормаВводаПравилАвтоподбора;
Перем мЖирныйШрифт;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		СоответствиеТЧ.Вставить(ЭлементыФормы.ИсходныеКомплектующиеУзел, ЭлементыФормы.КоманднаяПанельИсходныеКомплектующиеУзел.Кнопки.ПодменюЗаполнить);
	Иначе
		СоответствиеТЧ.Вставить(ЭлементыФормы.ИсходныеКомплектующие, ЭлементыФормы.КоманднаяПанельИсходныеКомплектующие.Кнопки.ПодменюЗаполнить);
		СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратныеОтходы, ЭлементыФормы.КоманднаяПанельВозвратныеОтходы.Кнопки.ПодменюЗаполнить);
		СоответствиеТЧ.Вставить(ЭлементыФормы.ПараметрыВыпускаПродукции, ЭлементыФормы.КоманднаяПанельПараметрыВыпускаПродукции.Кнопки.ПодменюЗаполнить);
		СоответствиеТЧ.Вставить(ЭлементыФормы.Документация, ЭлементыФормы.КоманднаяПанельДокументация.Кнопки.ПодменюЗаполнить);
	КонецЕсли;
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура производит заполнение списка доступных номеров маршрута.
//
Процедура ЗаполнитьСписокНомеровОперацийМаршрута(Элемент)
	
	Элемент.СписокВыбора.Очистить();
	
	ТехнологическиеКарты = РегистрыСведений.ТехнологическиеКартыСпецификацийПланирования.СрезПоследних(ТекущаяДата(), Новый Структура("Спецификация", ЭтотОбъект.Ссылка));
	Если ТехнологическиеКарты.Количество() Тогда
		ТехнологическаяКарта = ТехнологическиеКарты[ТехнологическиеКарты.Количество() - 1].ТехнологическаяКарта;
		Если НЕ ТехнологическаяКарта.Пустая() Тогда
			Для каждого Операция из ТехнологическаяКарта.Маршрут Цикл
				Если ЗначениеЗаполнено(Операция.НомерОперации) Тогда
					Элемент.СписокВыбора.Добавить(Операция.НомерОперации, Операция.НомерОперации);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСписокНомеровОперацийМаршрута()

// Процедура копирует первую строку табличной части "Выходные изделия" в реквизиты шапки.
//
Процедура ЗаполнитьВыходноеИзделиеВШапке()
	
	Если ВыходныеИзделия.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТаблицы = ВыходныеИзделия.Получить(0);
	Номенклатура 				= СтрокаТаблицы.Номенклатура;
	ХарактеристикаНоменклатуры 	= СтрокаТаблицы.ХарактеристикаНоменклатуры;
	Количество 					= СтрокаТаблицы.Количество;
	ЕдиницаИзмерения 			= СтрокаТаблицы.ЕдиницаИзмерения;
	НомерОперацииМаршрута 		= СтрокаТаблицы.НомерОперацииМаршрута;
	МинимальнаяПартия			= СтрокаТаблицы.МинимальнаяПартия;
	Кратность 					= СтрокаТаблицы.Кратность;
	ТочкаМаршрута		 		= СтрокаТаблицы.ТочкаМаршрута;
	
КонецПроцедуры // ЗаполнитьВыходноеИзделиеВШапке()

// Заполняет текст про технологическую карту в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроТехнологическуюКарту()
	
	ТекстЗаголовка = "Выбрать технологическую карту";
	
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехнологическиеКарты.ТехнологическаяКарта КАК ТехнологическаяКарта
	|ИЗ
	|	РегистрСведений.ТехнологическиеКартыСпецификацийПланирования.СрезПоследних(&Дата,
	|	   Спецификация = &Спецификация) КАК ТехнологическиеКарты
	|";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Спецификация", Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТехнологическаяКарта = Выборка.ТехнологическаяКарта;
		Если ЗначениеЗаполнено(ТехнологическаяКарта) Тогда
			ТекстЗаголовка = Строка(ТехнологическаяКарта);
		КонецЕсли;
	КонецЕсли;

	ЭлементыФормы.ГиперссылкаТехнологическаяКартаСпецификацииПланирования.Заголовок = ТекстЗаголовка;

КонецПроцедуры // ЗаполнитьТекстПроТехнологическуюКарту()

// Процедура устанавливает технологическую карту для данной спецификации.
//
Процедура УстановитьТехнологическуюКарту()
	
	Если ЭтоНовый() Тогда
		Предупреждение("Объект не записан!");
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = Справочники.ТехнологическиеКартыПроизводства.ПолучитьФормуВыбора(, ЭтаФорма);
	ТехнологическаяКарта = ФормаВыбора.ОткрытьМодально();
	
	Если ТехнологическаяКарта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Период = РабочаяДата;
	Если Не ВвестиДату(Период,"Выберите дату установки тех. карты", ЧастиДаты.Дата) Тогда
		Возврат;
	КонецЕсли;
	
	НоваяЗапись = РегистрыСведений.ТехнологическиеКартыСпецификацийПланирования.СоздатьМенеджерЗаписи();
	НоваяЗапись.Период = Период;
	НоваяЗапись.Спецификация = Ссылка;
	НоваяЗапись.ТехнологическаяКарта = ТехнологическаяКарта;
	НоваяЗапись.Записать(Истина);
	
	ЗаполнитьТекстПроТехнологическуюКарту();
	
КонецПроцедуры // УстановитьТехнологическуюКарту()

// Процедура создает новую версию спецификации на основании текущей.
//
Процедура СоздатьНовуюВерсию()
	
	Если ЭтоНовый() Тогда
		Предупреждение("Объект не записан!");
		Возврат;
	КонецЕсли;
	
	НоваяСпецификация = Справочники.СпецификацииНоменклатуры.СоздатьЭлемент();
	НоваяСпецификация.Заполнить(ЭтотОбъект.Ссылка);
	ФормаСпецификации = НоваяСпецификация.ПолучитьФорму();
	ФормаСпецификации.Открыть();
		
КонецПроцедуры // СоздатьНовуюВерсию()

// Производит открывает форму подбора данных в табличные части документа
//
Процедура ДействиеПодбор(ТабличнаяЧасть)
	
	ЕстьЦена  = Ложь;
	ЕстьСерия = Ложь;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = ВыходныеИзделия Тогда
		Команда           = "ПодборВТабличнуюЧастьВыходныеИзделия";
		ИмяТабличнойЧасти = "ВыходныеИзделия";
	ИначеЕсли ТабличнаяЧасть = ИсходныеКомплектующие Тогда
		Команда           = "ПодборВТабличнуюЧастьИсходныеКомплектующие";
		ИмяТабличнойЧасти = "ИсходныеКомплектующие";
	ИначеЕсли ТабличнаяЧасть = ВозвратныеОтходы Тогда
		Команда           = "ПодборВТабличнуюЧастьВозвратныеОтходы";
		ИмяТабличнойЧасти = "ВозвратныеОтходы";	
		ЕстьЦена  = Истина;
	КонецЕсли;
	
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = НачалоДня(РабочаяДата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , глЗначениеПеременной("ВалютаУправленческогоУчета"));
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в спецификацию " + 
	                                    Наименование + " (" + ИмяТабличнойЧасти + ")");

	// Открываем форму подбора.
	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());
	
КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Характеристика",   Характеристика);
	ЗначениеВыбора.Свойство("Номенклатура",     Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество",       Количество);
	ЗначениеВыбора.Свойство("Цена",       		Цена);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения",           ЕдиницаИзмерения);

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура      			= Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.Количество         		= Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения  			= ЕдиницаИзмерения;
		
		Если ТабличнаяЧасть = ВыходныеИзделия Тогда
			СтрокаТабличнойЧасти.ДоляСтоимости = 1;
		
		ИначеЕсли ТабличнаяЧасть = ИсходныеКомплектующие Тогда
			СтрокаТабличнойЧасти.ВидНорматива 			= Перечисления.ВидыНормативовНоменклатуры.Номенклатура;
			СтрокаТабличнойЧасти.УказаниеНорматива 		= Перечисления.ВидыУказанияНорматива.НаКоличествоПродукции;
			СтрокаТабличнойЧасти.СписаниеКомплектующей	= Перечисления.ВариантыСписанияКомплектующих.Всегда;
			
			Если СтрокаТабличнойЧасти.НомерСтроки = 1 Тогда
				СтрокаТабличнойЧасти.ПозицияПоСпецификации = 1;
			Иначе
				ПозицияПоСпецификации = ИсходныеКомплектующие.Получить(СтрокаТабличнойЧасти.НомерСтроки - 2).ПозицияПоСпецификации;
				СтрокаТабличнойЧасти.ПозицияПоСпецификации = ПозицияПоСпецификации + 1;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.ВидВоспроизводства = СтрокаТабличнойЧасти.Номенклатура.ВидВоспроизводства;
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, ОбщегоНазначения.ПолучитьРабочуюДату());
			СтрокаТабличнойЧасти.СтатьяЗатрат = Номенклатура.СтатьяЗатрат;
		
		ИначеЕсли ТабличнаяЧасть = ВозвратныеОтходы Тогда
			СтрокаТабличнойЧасти.ВидНорматива 			= Перечисления.ВидыНормативовНоменклатуры.Номенклатура;
			СтрокаТабличнойЧасти.УказаниеНорматива 		= Перечисления.ВидыУказанияНорматива.НаКоличествоПродукции;
			СтрокаТабличнойЧасти.СписаниеКомплектующей	= Перечисления.ВариантыСписанияКомплектующих.Всегда;
			
			СтрокаТабличнойЧасти.Сумма = Цена;
			СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, РабочаяДата);
			
			СтрокаТабличнойЧасти.СтатьяЗатрат = Номенклатура.СтатьяЗатрат;
			
		КонецЕсли;

	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	Если ТабличнаяЧасть = ВыходныеИзделия Тогда
		ТабличнаяЧастьИмя = "ВыходныеИзделия";
	ИначеЕсли ТабличнаяЧасть = ИсходныеКомплектующие Тогда
		ТабличнаяЧастьИмя = "ИсходныеКомплектующие";
	ИначеЕсли ТабличнаяЧасть = ВозвратныеОтходы Тогда
		ТабличнаяЧастьИмя = "ВозвратныеОтходы";
	КонецЕсли;

	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Процедура обработки ввода формулы.
//
Процедура ВводФормулы(Элемент, ИмяТабличнойЧасти = "ИсходныеКомплектующие")
	
	Форма = Обработки.ВводФормулы.ПолучитьФорму("ФормаВводаФормулы", ЭтаФорма, "дляФормаВводаФормулы");

	Если Форма.Открыта() Тогда
		Форма.Активизировать();
		Если Вопрос("Предыдущая операция ввода формулы не завершена.
			|Завершить?",РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да)=КодВозвратаДиалога.Да Тогда
			Форма.Закрыть();
		КонецЕсли;
	КонецЕсли;	
	
	мИмяТабличнойЧастиВводаФормулы = ИмяТабличнойЧасти;

	// Передача параметров в форму.
	Форма.СправочникОбъект = ЭтотОбъект;
	Форма.НачальноеЗначениеВыбора = Элемент.Значение;
	Форма.РежимВыбора = Истина;
	
	мФормаВводаФормулы = Форма;
	
	Форма.Открыть();
	
КонецПроцедуры // ВводФормулы()

// Процедура выбора свойства.
//
Процедура ВыборСвойства(Элемент)
	
	ФормаВыбора = ПланыВидовХарактеристик.СвойстваОбъектов.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.Отбор.НазначениеСвойства.Установить(ПланыВидовХарактеристик.НазначенияСвойствКатегорийОбъектов.Справочник_ХарактеристикиНоменклатуры);
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры // ВыборСвойства()

// Процедура заполняет строку выходных изделий для сборочной спецификации.
//
Процедура ЗаполнитьСтрокуВыходныхИзделий()
	
	Если ВидСпецификации <> Перечисления.ВидыСпецификаций.Сборочная Тогда
		Возврат;
	КонецЕсли;
		
	ВыходныеИзделия.Очистить();
	
	НоваяСтрока = ВыходныеИзделия.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
	НоваяСтрока.Количество = Количество;
	НоваяСтрока.ЕдиницаИзмерения = ЕдиницаИзмерения;
	НоваяСтрока.ДоляСтоимости = 1;
	НоваяСтрока.НомерОперацииМаршрута = НомерОперацииМаршрута;
	НоваяСтрока.МинимальнаяПартия = МинимальнаяПартия;
	НоваяСтрока.Кратность = Кратность;
	НоваяСтрока.ТочкаМаршрута = ТочкаМаршрута;
	
КонецПроцедуры // ПеренестиНоменклатуруВВыходныеИзделия()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управляет видимостью элементов диалога.
//
Процедура УправлениеДиалогом()
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная Тогда
		ЭлементыФормы.ПанельВидСпецификации.ТекущаяСтраница = ЭлементыФормы.ПанельВидСпецификации.Страницы.Полная;
		ЭлементыФормы.ПанельВыходноеИзделие.ТекущаяСтраница = ЭлементыФормы.ПанельВыходноеИзделие.Страницы.Сборочная;
	ИначеЕсли ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		ЭлементыФормы.ПанельВидСпецификации.ТекущаяСтраница = ЭлементыФормы.ПанельВидСпецификации.Страницы.Узел;
	Иначе
		ЭлементыФормы.ПанельВидСпецификации.ТекущаяСтраница = ЭлементыФормы.ПанельВидСпецификации.Страницы.Полная;
		ЭлементыФормы.ПанельВыходноеИзделие.ТекущаяСтраница = ЭлементыФормы.ПанельВыходноеИзделие.Страницы.Полная;
	КонецЕсли;
	
	СостояниеУтвержден = (Состояние = Перечисления.СостоянияОбъектов.Утвержден);
	
	ЭлементыФормы.Активная.Доступность = СостояниеУтвержден ИЛИ Активная;
	ЭлементыФормы.ДействияФормы.Кнопки.УстановитьОсновнуюСпецификацию.Доступность = СостояниеУтвержден И Активная;
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		
		ЭлементыФормы.ДатаУтвержденияУзел.Доступность        = СостояниеУтвержден;
		ЭлементыФормы.НадписьДатаУтвержденияУзел.Доступность = СостояниеУтвержден;
		ЭлементыФормы.НадписьОтветственныйУзел.Доступность   = СостояниеУтвержден;
		ЭлементыФормы.ОтветственныйУзел.Доступность		   	 = СостояниеУтвержден;
		
	Иначе
			
		ЭлементыФормы.ДатаУтверждения.Доступность        = СостояниеУтвержден;
		ЭлементыФормы.НадписьДатаУтверждения.Доступность = СостояниеУтвержден;
		ЭлементыФормы.НадписьОтветственный.Доступность   = СостояниеУтвержден;
		ЭлементыФормы.Ответственный.Доступность		   	 = СостояниеУтвержден;
	
		ЭлементыФормы.ХарактеристикаНоменклатуры.Доступность = мИспользуютсяХарактеристикиНоменклатуры;
		ЭлементыФормы.НадписьХарактеристикаНоменклатуры.Доступность = мИспользуютсяХарактеристикиНоменклатуры;
		
		ЭлементыФормы.ПанельИсходныеКомплектующие.Страницы.ВозвратныеОтходы.Видимость 			= ИспользоватьВозвратныеОтходы;
		ЭлементыФормы.ПанельИсходныеКомплектующие.Страницы.ПараметрыВыпускаПродукции.Видимость 	= ИспользоватьПараметрыВыпускаПродукции;
		ЭлементыФормы.ПанельИсходныеКомплектующие.Страницы.Документация.Видимость 				= ИспользоватьДокументацию;
		
	КонецЕсли;
	
	ЭлементыФормы.КоманднаяПанельИсходныеКомплектующие.Кнопки.ОсновноеСырье.Доступность = ИспользоватьУказаниеНорматива;
	
	СтруктураКолонок = Новый Структура("ВидНорматива");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиИсходныеКомплектующие, СтруктураКолонок, ИспользоватьВидНорматива);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиВозвратныеОтходы, СтруктураКолонок, ИспользоватьВидНорматива);
	Если ИспользоватьВидНорматива И ИзмененоИспользоватьВидНорматива Тогда
		мКолонкиИсходныеКомплектующие["ВидНорматива"].Видимость = ИспользоватьВидНорматива;
		мКолонкиВозвратныеОтходы["ВидНорматива"].Видимость = ИспользоватьВидНорматива;
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура("ВидВоспроизводства, Спецификация");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиИсходныеКомплектующие, СтруктураКолонок, ИспользоватьВидВоспроизводства);
	Если ИспользоватьВидВоспроизводства И ИзмененоИспользоватьВидВоспроизводства Тогда
		мКолонкиИсходныеКомплектующие["ВидВоспроизводства"].Видимость = ИспользоватьВидВоспроизводства;
		мКолонкиИсходныеКомплектующие["Спецификация"].Видимость = ИспользоватьВидВоспроизводства;
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура("УказаниеНорматива");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиИсходныеКомплектующие, СтруктураКолонок, ИспользоватьУказаниеНорматива);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиВозвратныеОтходы, СтруктураКолонок, ИспользоватьУказаниеНорматива);
	Если ИспользоватьУказаниеНорматива И ИзмененоИспользоватьУказаниеНорматива Тогда
		мКолонкиИсходныеКомплектующие["УказаниеНорматива"].Видимость = ИспользоватьУказаниеНорматива;
		мКолонкиВозвратныеОтходы["УказаниеНорматива"].Видимость = ИспользоватьУказаниеНорматива;
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура("Формула");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиИсходныеКомплектующие, СтруктураКолонок, ИспользоватьФормулы);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиВозвратныеОтходы, СтруктураКолонок, ИспользоватьФормулы);
	Если ИспользоватьФормулы И ИзмененоИспользоватьФормулы Тогда
		мКолонкиИсходныеКомплектующие["Формула"].Видимость = ИспользоватьФормулы;
		мКолонкиВозвратныеОтходы["Формула"].Видимость = ИспользоватьФормулы;
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура("СписаниеКомплектующей, Свойство");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиИсходныеКомплектующие, СтруктураКолонок, ИспользоватьУправлениеСписанием);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиВозвратныеОтходы, СтруктураКолонок, ИспользоватьУправлениеСписанием);
	Если ИспользоватьУправлениеСписанием И ИзмененоИспользоватьУправлениеСписанием Тогда
		мКолонкиИсходныеКомплектующие["СписаниеКомплектующей"].Видимость = ИспользоватьУправлениеСписанием;
		мКолонкиИсходныеКомплектующие["Свойство"].Видимость = ИспользоватьУправлениеСписанием;
		мКолонкиВозвратныеОтходы["СписаниеКомплектующей"].Видимость = ИспользоватьУправлениеСписанием;
		мКолонкиВозвратныеОтходы["Свойство"].Видимость = ИспользоватьУправлениеСписанием;
	КонецЕсли;
	
КонецПроцедуры // УправлениеДиалогом()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	ИспользоватьТолькоСборочныеСпецификации = глЗначениеПеременной("ИспользоватьТолькоСборочныеСпецификации");
	
	Если ЭтоНовый() Тогда
		Если Не ЗначениеЗаполнено(ПараметрОбъектКопирования)
		   И Не ЗначениеЗаполнено(ПараметрОснование)
		   И Не ЗначениеЗаполнено(КодВерсии)
		Тогда
			
			КодВерсии = "00001";
		
			Если Не УправлениеПроизводством.ИспользоватьВидСпецификации(ИспользоватьТолькоСборочныеСпецификации) Тогда
				ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная;
			Иначе
				ВидСпецификации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойВидСпецификации");
				Если НЕ ЗначениеЗаполнено(ВидСпецификации) Тогда
					ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная;
				КонецЕсли;
			КонецЕсли;
			
			Состояние = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеСостояниеСпецификации");	
			Активная = Состояние = Перечисления.СостоянияОбъектов.Утвержден
					 И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновноеСостояниеАктивностиСпецификации");
				
			Если ВидСпецификации <> Перечисления.ВидыСпецификаций.Узел Тогда
				ИспользоватьВозвратныеОтходы = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьВозвратныеОтходыСпецификации");
				ИспользоватьДокументацию = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьДокументацию");
				ИспользоватьПараметрыВыпускаПродукции = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьПараметрыВыпускаПродукции");
			КонецЕсли;
					 
			ИспользоватьВидНорматива = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьВидНорматива");
			ИспользоватьВидВоспроизводства = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьВидВоспроизводства");
			ИспользоватьУказаниеНорматива = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьУказаниеНорматива");
			ИспользоватьУправлениеСписанием = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьУправлениеСписанием");
			ИспользоватьФормулы = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ИспользоватьФормулы");
			
			ИзмененоИспользоватьВидНорматива 		= ИспользоватьВидНорматива;
			ИзмененоИспользоватьВидВоспроизводства 	= ИспользоватьВидВоспроизводства;
			ИзмененоИспользоватьУказаниеНорматива 	= ИспользоватьУказаниеНорматива;
			ИзмененоИспользоватьФормулы 			= ИспользоватьФормулы;
			ИзмененоИспользоватьУправлениеСписанием = ИспользоватьУправлениеСписанием;
			
		КонецЕсли;
			
	КонецЕсли;
	
		
	ВидимостьКолонок = Константы.ВедениеПланированияПроизводстваПоСменам.Получить();
		
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		мКолонкиИсходныеКомплектующие = ЭлементыФормы.ИсходныеКомплектующиеУзел.Колонки;
	Иначе
		мКолонкиИсходныеКомплектующие = ЭлементыФормы.ИсходныеКомплектующие.Колонки;
	КонецЕсли;
	
	Колонки = ЭлементыФормы.ИсходныеКомплектующие.Колонки;
	Колонки["НомерОперацииМаршрута"].Видимость = ВидимостьКолонок;
	Колонки["МинимальнаяПартия"].Видимость = ВидимостьКолонок;
	
	Колонки = ЭлементыФормы.ВыходныеИзделия.Колонки;
	Колонки["НомерОперацииМаршрута"].Видимость = ВидимостьКолонок;
	
	Колонки = ЭлементыФормы.ВозвратныеОтходы.Колонки;
	Колонки["НомерОперацииМаршрута"].Видимость = ВидимостьКолонок;
	
	ЭлементыФормы.НомерОперацииМаршрута.Доступность = ВидимостьКолонок;
	ЭлементыФормы.НадписьНомерОперацииМаршрута.Доступность = ВидимостьКолонок;
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная Тогда
		ЗаполнитьВыходноеИзделиеВШапке();
	КонецЕсли;
	
	Если УправлениеПроизводством.ИспользоватьВидСпецификации(ИспользоватьТолькоСборочныеСпецификации) Тогда
		
		// Заполняем подменю, вызываемое нажатием кнопки "Вид спецификации" командной панели 
		// формы, значениями перечисления "Виды спецификаций".
		// В качестве обработки выбора вида операции назначается процедура 
		// КоманднаяПанельФормыДействиеУстановитьВидСпецификации модуля формы.
		РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаСпецификации,
											  ВидСпецификации.Метаданные().ЗначенияПеречисления,
											  Новый Действие("КоманднаяПанельФормыДействиеУстановитьВидСпецификации"));
	Иначе
		ИндексКнопкиПодменюВидаСпецификации = ЭлементыФормы.ДействияФормы.Кнопки.Индекс(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаСпецификации);
		Если ИндексКнопкиПодменюВидаСпецификации > -1 Тогда
			ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ИндексКнопкиПодменюВидаСпецификации);
		КонецЕсли;
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыСправочника(Строка(ВидСпецификации), ЭтотОбъект, ЭтаФорма);
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры".
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиВыходныеИзделия);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиИсходныеКомплектующие);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиВозвратныеОтходы);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.ИсходныеКомплектующиеУзел.Колонки);
	
	// Установить картинку кнопки "Файлы"
	СписокКнопокФайлов = Новый СписокЗначений;
	СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
	РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
	
	УправлениеДиалогом();
	ЗаполнитьТекстПроТехнологическуюКарту();
	
	ИспользоватьВерсииСпецификацийНоменклатуры = Константы.ИспользоватьВерсииСпецификацийНоменклатуры.Получить();
	
	ЭлементыФормы.КодВерсии.Доступность        = ИспользоватьВерсииСпецификацийНоменклатуры;
	ЭлементыФормы.НадписьКодВерсии.Доступность = ИспользоватьВерсииСпецификацийНоменклатуры;
	
	Если Не ИспользоватьВерсииСпецификацийНоменклатуры Тогда
		
		ИндексКнопкиСоздатьВерсию = ЭлементыФормы.ДействияФормы.Кнопки.Индекс(ЭлементыФормы.ДействияФормы.Кнопки.СоздатьВерсию);
		Если ИндексКнопкиСоздатьВерсию > -1 Тогда
			ЭлементыФормы.ДействияФормы.Кнопки.Удалить(ИндексКнопкиСоздатьВерсию);
		КонецЕсли;
		
		МенюПерейти = ЭлементыФормы.ДействияФормы.Кнопки.Подменю2;
		ИндексКнопкиВерсии = МенюПерейти.Кнопки.Индекс(МенюПерейти.Кнопки.ВерсииСпецификации);
		Если ИндексКнопкиСоздатьВерсию > -1 Тогда
			МенюПерейти.Кнопки.Удалить(ИндексКнопкиВерсии);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьНадписьОсновнаяСпецификация();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Код);
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПриИзмененииДанных" формы.
//
Процедура ПриИзмененииДанных()
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная Тогда
		ЗаполнитьВыходноеИзделиеВШапке();
	КонецЕсли;
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		мКолонкиИсходныеКомплектующие = ЭлементыФормы.ИсходныеКомплектующиеУзел.Колонки;
	Иначе
		мКолонкиИсходныеКомплектующие = ЭлементыФормы.ИсходныеКомплектующие.Колонки;
	КонецЕсли;
	
	УправлениеДиалогом();
	
КонецПроцедуры // ПриИзмененииДанных

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ)
	
	ЗаполнитьСтрокуВыходныхИзделий();
	
КонецПроцедуры // ПередЗаписью()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Отобразить в заголовке формы вид спецификации.
	РаботаСДиалогами.УстановитьЗаголовокФормыСправочника(Строка(ВидСпецификации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Код);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьВыходныеИзделия" Тогда
			ОбработкаПодбора(ВыходныеИзделия, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьИсходныеКомплектующие" Тогда
			ОбработкаПодбора(ИсходныеКомплектующие, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратныеОтходы" Тогда
			ОбработкаПодбора(ВозвратныеОтходы, ЗначениеВыбора);
		КонецЕсли;
	ИначеЕсли Источник = мФормаВводаФормулы Тогда
		ЭлементыФормы[мИмяТабличнойЧастиВводаФормулы].ТекущиеДанные.Формула = ЗначениеВыбора;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму"
	 И (Источник = Ссылка ИЛИ (ТипЗнч(Источник) = Тип("СправочникСсылка.СпецификацииНоменклатуры") И Источник.Пустая())) Тогда
		ИмяОбновляемогоЭлемента = Параметр.ИмяЭлемента;

		Если ИмяОбновляемогоЭлемента = "ИзмененСписокСправочникаХранилищеДопИнформации" Тогда
			СписокКнопокФайлов = Новый СписокЗначений;
			СписокКнопокФайлов.Добавить(ЭлементыФормы.ДействияФормы.Кнопки.Файлы);
			РаботаСФайлами.ПолучитьКартинкуКнопкиОткрытияФайлов(Ссылка, СписокКнопокФайлов);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаОповещения()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	
	ЭлементыФормы.ПанельИсходныеКомплектующие.Страницы.ИсходныеКомплектующие.Заголовок 		= "Исходные комплектующие (" + ИсходныеКомплектующие.Количество() + " поз.)";
	ЭлементыФормы.ПанельИсходныеКомплектующие.Страницы.ВозвратныеОтходы.Заголовок 	   		= "Возвратные отходы (" + ВозвратныеОтходы.Количество() + " поз.)";
	ЭлементыФормы.ПанельИсходныеКомплектующие.Страницы.ПараметрыВыпускаПродукции.Заголовок 	= "Параметры выпуска продукции (" + ПараметрыВыпускаПродукции.Количество() + " поз.)";
	ЭлементыФормы.ПанельИсходныеКомплектующие.Страницы.Документация.Заголовок 				= "Документация (" + Документация.Количество() + " поз.)";
	
КонецПроцедуры // ОбновлениеОтображения()

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Код);
КонецПроцедуры
// Обработчик события элемента КоманднаяПанельФормы.Файлы.
//
Процедура ДействияФормыФайлы(Кнопка)

	Если Не РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;

	СтруктураДляСпискаИзображдений = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	СтруктураДляСпискаДополнительныхФайлов = Новый Структура("ОтборОбъектИспользование, ОтборОбъектЗначение, ДоступностьОтбораОбъекта, ВидимостьКолонкиОбъекта", Истина, Ссылка, Ложь, Ложь);
	ОбязательныеОтборы = Новый Структура("Объект", Ссылка);

	РаботаСФайлами.ОткрытьФормуСпискаФайловИИзображений(СтруктураДляСпискаИзображдений, СтруктураДляСпискаДополнительныхФайлов, ОбязательныеОтборы, ЭтаФорма);

КонецПроцедуры // ДействияФормыФайлы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта "Версии спецификации" меню "Перейти"
// командной панели формы.
//
Процедура ДействияФормыВерсииСпецификации(Кнопка)
	
	ФормаСписка = Справочники.СпецификацииНоменклатуры.ПолучитьФормуСписка(, ЭтаФорма);
	
	ФормаСписка.Отбор.Код.ВидСравнения  = ВидСравнения.Равно;
	ФормаСписка.Отбор.Код.Значение      = Код;
	ФормаСписка.Отбор.Код.Использование = Истина;
	
	ФормаСписка.Открыть();
	
КонецПроцедуры // ДействияФормыВерсииСпецификации()

// Процедура вызывается при выборе пункта "Создать версию" командной панели формы.
//
Процедура ДействияФормыСоздатьВерсию(Кнопка)
	
	СоздатьНовуюВерсию();
	
КонецПроцедуры // ДействияФормыСоздатьВерсию()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаСпецификации" командной панели
// формы. Процедура устанавливает значение реквизита ВидСпецификации.
//
// Обработчик уставливается динамически методом "Действие"
Процедура КоманднаяПанельФормыДействиеУстановитьВидСпецификации(Кнопка)
	
	ТекущийВидСпецификации = ВидСпецификации;
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидСпецификации = Перечисления.ВидыСпецификаций[Кнопка.Имя];
	КонецЕсли;
	Если ТекущийВидСпецификации = ВидСпецификации Тогда
		//вид спецификации не был изменен
		Возврат;
	КонецЕсли;
	
	
	Если ТекущийВидСпецификации = Перечисления.ВидыСпецификаций.Полная
	   И ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная
	   И ВыходныеИзделия.Количество() > 1 Тогда
		Ответ = Вопрос("При смене вида спецификации строки выходных изделий, кроме первой, будут удалены, продолжить?",
						РежимДиалогаВопрос.ДаНет, , , "Смена вида спецификации");
						
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			ВидСпецификации = ТекущийВидСпецификации;
			Возврат;
		КонецЕсли;					
		
	КонецЕсли;
	
	ВидСпецификацииПриИзменении();
	
	// Отобразить в заголовке формы вид спецификации.
	РаботаСДиалогами.УстановитьЗаголовокФормыСправочника(Строка(ВидСпецификации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду спецификации.
	УправлениеДиалогом();

КонецПроцедуры // КоманднаяПанельФормыДействиеУстановитьВидСпецификации()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "ВыходныеИзделия".
//
Процедура КоманднаяПанельВыходныеИзделияПодбор(Кнопка)
	
	ДействиеПодбор(ВыходныеИзделия);
	
КонецПроцедуры // КоманднаяПанельВыходныеИзделияПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "ИсходныеКомплектующие".
//
Процедура КоманднаяПанельИсходныеКомплектующиеПодбор(Кнопка)
	
	ДействиеПодбор(ИсходныеКомплектующие);
	
КонецПроцедуры // КоманднаяПанельИсходныеКомплектующиеПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "ИсходныеКомплектующиеУзел".
//
Процедура КоманднаяПанельИсходныеКомплектующиеУзелПодбор(Кнопка)
	
	ДействиеПодбор(ИсходныеКомплектующие);
	
КонецПроцедуры // КоманднаяПанельИсходныеКомплектующиеУзелПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "ВозвратныеОтходы".
//
Процедура КоманднаяПанельВозвратныеОтходыПодбор(Кнопка)
	
	ДействиеПодбор(ВозвратныеОтходы);
	
КонецПроцедуры // КоманднаяПанельВозвратныеОтходыПодбор()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Настройка" командной панели формы.
//
Процедура ДействияФормыНастройка(Кнопка)
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	ФормаНастройки.ОткрытьМодально();
	УправлениеДиалогом();
	
КонецПроцедуры // ДействияФормыНастройка()

// Процедура вызывается при нажатии кнопки "Заполнить по спецификации" командной панели формы.
//
Процедура ДействияФормыПоСпецификации(Кнопка)
	
	ФормаВыбора = Справочники.СпецификацииНоменклатуры.ПолучитьФормуВыбора(, ЭтаФорма, ЭтаФорма);
	ФормаВыбора.РежимВыбора        = Истина;
	ФормаВыбора.ЗакрыватьПриВыборе = Истина;
	ФормаВыбора.МножественныйВыбор = Ложь;
	Выбор = ФормаВыбора.ОткрытьМодально();
	
	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИсходныеКомплектующие.Количество() > 0 ИЛИ (ИспользоватьВозвратныеОтходы И ВозвратныеОтходы.Количество() > 0) Тогда
		Ответ = Вопрос("Спецификация уже содержит строки. При заполнении они будут удалены!
				       |Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьВозвратныеОтходы = Выбор.ИспользоватьВозвратныеОтходы;
	ИспользоватьПараметрыВыпускаПродукции = Выбор.ИспользоватьПараметрыВыпускаПродукции;
	ИспользоватьДокументацию = Выбор.ИспользоватьДокументацию;
	
	ВыходныеИзделия.Очистить();
	ИсходныеКомплектующие.Очистить();
	ПараметрыВыпускаПродукции.Очистить();
	АвтоподборНоменклатуры.Очистить();
	АвтоподборХарактеристики.Очистить();
	ВозвратныеОтходы.Очистить();
	Документация.Очистить();
	
	УправлениеДиалогом();
	
	Для Каждого Строка Из Выбор.ВыходныеИзделия Цикл
		НоваяСтрока = ВыходныеИзделия.Добавить();
		ЗаполнитьЗначенияСвойств( НоваяСтрока, Строка,, "НомерСтроки");
	КонецЦикла;
	
	ЗаполнитьВыходноеИзделиеВШапке();
	
	Для Каждого СтрокаМат Из Выбор.ИсходныеКомплектующие Цикл
		НоваяСтрока = ИсходныеКомплектующие.Добавить();
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаМат,, "НомерСтроки");
	КонецЦикла;
	
	Для Каждого СтрокаМат Из Выбор.ПараметрыВыпускаПродукции Цикл
		НоваяСтрока = ПараметрыВыпускаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаМат,, "НомерСтроки");
	КонецЦикла;
	
	Для Каждого Строка Из Выбор.АвтоподборНоменклатуры Цикл
		НоваяСтрока = АвтоподборНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "НомерСтроки");
	КонецЦикла;
	
	Для Каждого Строка Из Выбор.АвтоподборХарактеристики Цикл
		НоваяСтрока = АвтоподборХарактеристики.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "НомерСтроки");
	КонецЦикла;
	
	Если ИспользоватьПараметрыВыпускаПродукции Тогда
		Для Каждого Строка Из Выбор.ПараметрыВыпускаПродукции Цикл
			НоваяСтрока = ПараметрыВыпускаПродукции.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "НомерСтроки");
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьВозвратныеОтходы Тогда
		Для Каждого СтрокаОтходы Из Выбор.ВозвратныеОтходы Цикл
			НоваяСтрока = ВозвратныеОтходы.Добавить();
			ЗаполнитьЗначенияСвойств( НоваяСтрока, СтрокаОтходы,, "НомерСтроки");
		КонецЦикла;
		
		Для Каждого Строка Из Выбор.АвтоподборНоменклатурыОтходы Цикл
			НоваяСтрока = АвтоподборНоменклатурыОтходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "НомерСтроки");
		КонецЦикла;
	
		Для Каждого Строка Из Выбор.АвтоподборХарактеристикиОтходы Цикл
			НоваяСтрока = АвтоподборХарактеристикиОтходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "НомерСтроки");
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользоватьДокументацию Тогда
		Для Каждого Строка Из Выбор.Документация Цикл
			НоваяСтрока = Документация.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "НомерСтроки");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыПоСпецификации()

// Процедура вызывается при нажатии кнопки "Заполнить по фактическому расходу" командной панели формы.
//
Процедура ДействияФормыЗаполнитьПоФактическимЗатратам(Кнопка)
	
	Если ВидСпецификации <> Перечисления.ВидыСпецификаций.Сборочная Тогда
		Предупреждение("Заполнение по фактическим затратам производится только
			|для вида спецификации ""Сборочная"".");	
		Возврат;
	КонецЕсли;
	
	Если ИсходныеКомплектующие.Количество() > 0 ИЛИ ВозвратныеОтходы.Количество() > 0 Тогда
		Ответ = Вопрос("Спецификация уже содержит строки. При заполнении они будут удалены!
				       |Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСтрокуВыходныхИзделий();
	
	ФормаЗаполнения = ПолучитьФорму("ФормаЗаполненияПоФактическимЗатратам", ЭтаФорма, ЭтаФорма);
	Результат = ФормаЗаполнения.ОткрытьМодально();
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ИсходныеКомплектующие.Очистить();
	ВозвратныеОтходы.Очистить();
	
	Для Каждого Строка Из Результат Цикл
		
		СтатусМатериальныхЗатрат = Строка.СтатьяЗатрат.СтатусМатериальныхЗатрат;
		Если СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ВозвратныеОтходы Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = ИсходныеКомплектующие.Добавить();
		НоваяСтрока.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура;
		НоваяСтрока.Номенклатура = Строка.Материал;
		НоваяСтрока.ХарактеристикаНоменклатуры = Строка.ХарактеристикаМатериала;
		НоваяСтрока.ЕдиницаИзмерения = Строка.ЕдиницаИзмерения;
		НоваяСтрока.Количество = Строка.Количество;
		НоваяСтрока.СтатьяЗатрат = Строка.СтатьяЗатрат;
		
		НоваяСтрока.ВидВоспроизводства = НоваяСтрока.Номенклатура.ВидВоспроизводства;
		НоваяСтрока.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(
			НоваяСтрока.Номенклатура, 
			НоваяСтрока.ХарактеристикаНоменклатуры, 
			ОбщегоНазначения.ПолучитьРабочуюДату()
		);
		НоваяСтрока.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоПродукции;
		НоваяСтрока.СписаниеКомплектующей = Перечисления.ВариантыСписанияКомплектующих.Всегда;
		
	КонецЦикла;
	
КонецПроцедуры // ДействияФормыЗаполнитьПоФактическимЗатратам()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "ПараметрыВыпускаПродукции".
//
Процедура КоманднаяПанельПараметрыВыпускаПродукцииЗаполнитьИзШаблона(Кнопка)
	
	Если ПараметрыВыпускаПродукции.Количество() > 0 Тогда
		Ответ = Вопрос("Параметры выпуска уже содержат строки. Очистить строки?" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПараметрыВыпускаПродукции.Очистить();
		КонецЕсли;
	КонецЕсли;

	ФормаВыбора = Справочники.ПараметрыВыпускаПродукции.ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаВыбора.Заголовок = "Выберите шаблон параметров для заполнения";
	ШаблонПараметров = ФормаВыбора.ОткрытьМодально();
	
	Если ШаблонПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ШаблонПараметров.Параметры Цикл
		НоваяСтрока = ПараметрыВыпускаПродукции.Добавить();
		НоваяСтрока.ВидПараметра = Строка.ВидПараметра;
		НоваяСтрока.Значение = Строка.Значение;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельПараметрыВыпускаПродукцииЗаполнить()

// Процедура вызывается при нажатии кнопки "ОсновноеСырье" командной панели
// табличного поля "ИсходныеКомплектующие".
//
Процедура КоманднаяПанельИсходныеКомплектующиеОсновноеСырье(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующие.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Узел
	 ИЛИ НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ИсходныеКомплектующие.Найти(Истина, "ОсновноеСырье");
	Если НайденнаяСтрока <> Неопределено Тогда
		НайденнаяСтрока.ОсновноеСырье = Ложь;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> НайденнаяСтрока Тогда
		СтрокаТабличнойЧасти.ОсновноеСырье = Истина;
		Если СтрокаТабличнойЧасти.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоОсновногоСырья Тогда
			СтрокаТабличнойЧасти.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоПродукции;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельИсходныеКомплектующиеОсновноеСырье()

// Процедура вызывается при нажатии кнопки "Заполнить по спецификации" командной панели
// табличного поля "ИсходныеКомплектующие".
//
Процедура КоманднаяПанельИсходныеКомплектующиеЗаполнитьПоСпецификации(Кнопка)
	
	Если ИсходныеКомплектующие.Количество() > 0 Тогда
		Ответ = Вопрос("Исходные комплектующие уже содержат строки. Очистить строки?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ИсходныеКомплектующие.Очистить();
			АвтоподборНоменклатуры.Очистить();
			АвтоподборХарактеристики.Очистить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ФормаВыбора = Справочники.СпецификацииНоменклатуры.ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаВыбора.Заголовок = "Выберите спецификацию номенклатуры для заполнения";
	СпецификацияНоменклатуры = ФормаВыбора.ОткрытьМодально();
	
	Если СпецификацияНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	НайденнаяСтрока = ИсходныеКомплектующие.Найти(Истина, "ОсновноеСырье");
	
	НовыйКлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, СправочникОбъект, "ИсходныеКомплектующие", Истина);
	
	Для Каждого Строка Из СпецификацияНоменклатуры.ИсходныеКомплектующие Цикл
		НоваяСтрока = ИсходныеКомплектующие.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "НомерСтроки");
		Если НоваяСтрока.КлючСвязи <> 0 Тогда
			НоваяСтрока.КлючСвязи = НоваяСтрока.КлючСвязи + НовыйКлючСвязи;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из СпецификацияНоменклатуры.АвтоподборНоменклатуры Цикл
		НоваяСтрока = АвтоподборНоменклатуры.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "НомерСтроки");
		Если НоваяСтрока.КлючСвязи <> 0 Тогда
			НоваяСтрока.КлючСвязи = НоваяСтрока.КлючСвязи + НовыйКлючСвязи;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Строка Из СпецификацияНоменклатуры.АвтоподборХарактеристики Цикл
		НоваяСтрока = АвтоподборХарактеристики.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка,, "НомерСтроки");
		Если НоваяСтрока.КлючСвязи <> 0 Тогда
			НоваяСтрока.КлючСвязи = НоваяСтрока.КлючСвязи + НовыйКлючСвязи;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденнаяСтрока <> Неопределено Тогда
		Массив = Новый Массив(ИсходныеКомплектующие.Количество());
		ИсходныеКомплектующие.ЗагрузитьКолонку(Массив, "ОсновноеСырье");
		НайденнаяСтрока.ОсновноеСырье = Истина;
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельИсходныеКомплектующиеЗаполнитьПоСпецификации()

// Процедура вызывается при нажатии кнопки "Заполнить по спецификации" командной панели
// табличного поля "ИсходныеКомплектующиеУзел".
//
Процедура КоманднаяПанельИсходныеКомплектующиеУзелЗаполнитьПоСпецификации(Кнопка)
	
	КоманднаяПанельИсходныеКомплектующиеЗаполнитьПоСпецификации(Кнопка);
		
КонецПроцедуры // КоманднаяПанельИсходныеКомплектующиеУзелЗаполнитьПоСпецификации()

// Процедура вызывается при нажатии кнопки "Заполнить по спецификации" командной панели
// табличного поля "ВозвратныеОтходы".
//
Процедура КоманднаяПанельВозвратныеОтходыЗаполнитьПоСпецификации(Кнопка)
	
	Если ВозвратныеОтходы.Количество() > 0 Тогда
		Ответ = Вопрос("Возвратные отходы уже содержат строки. Очистить строки?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВозвратныеОтходы.Очистить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ФормаВыбора = Справочники.СпецификацииНоменклатуры.ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаВыбора.Заголовок = "Выберите спецификацию номенклатуры для заполнения";
	СпецификацияНоменклатуры = ФормаВыбора.ОткрытьМодально();
	
	Если СпецификацияНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из СпецификацияНоменклатуры.ВозвратныеОтходы Цикл
		НоваяСтрока = ВозвратныеОтходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельВозвратныеОтходыЗаполнитьПоСпецификации()

// Процедура вызывается при нажатии кнопки "Заполнить по спецификации" командной панели
// табличного поля "ПараметрыВыпускаПродукции".
//
Процедура КоманднаяПанельПараметрыВыпускаПродукцииЗаполнитьПоСпецификации(Кнопка)
	
	Если ПараметрыВыпускаПродукции.Количество() > 0 Тогда
		Ответ = Вопрос("Параметры выпуска уже содержат строки. Очистить строки?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПараметрыВыпускаПродукции.Очистить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ФормаВыбора = Справочники.СпецификацииНоменклатуры.ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаВыбора.Заголовок = "Выберите спецификацию номенклатуры для заполнения";
	СпецификацияНоменклатуры = ФормаВыбора.ОткрытьМодально();
	
	Если СпецификацияНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из СпецификацияНоменклатуры.ПараметрыВыпускаПродукции Цикл
		НоваяСтрока = ПараметрыВыпускаПродукции.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельПараметрыВыпускаПродукцииЗаполнитьПоСпецификации()

// Процедура вызывается при нажатии кнопки "Заполнить по спецификации" командной панели
// табличного поля "Документация".
//
Процедура КоманднаяПанельДокументацияЗаполнитьПоСпецификации(Кнопка)
	
	Если Документация.Количество() > 0 Тогда
		Ответ = Вопрос("Документация уже содержит строки. Очистить строки?", РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			Документация.Очистить();
		ИначеЕсли Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ФормаВыбора = Справочники.СпецификацииНоменклатуры.ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаВыбора.Заголовок = "Выберите спецификацию номенклатуры для заполнения";
	СпецификацияНоменклатуры = ФормаВыбора.ОткрытьМодально();
	
	Если СпецификацияНоменклатуры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из СпецификацияНоменклатуры.Документация Цикл
		НоваяСтрока = Документация.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельДокументацияЗаполнитьПоСпецификации()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя, "Имя", Истина), ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" поля "Состояние".
//
Процедура СостояниеПриИзменении(Элемент)

	Если Состояние = Перечисления.СостоянияОбъектов.Утвержден Тогда
		ДатаУтверждения = РабочаяДата;
		Ответственный	= ПараметрыСеанса.ТекущийПользователь;
	Иначе
		ДатаУтверждения = Неопределено;
		Ответственный	= Неопределено;
		Активная		= Ложь;
	КонецЕсли;
	
	УправлениеДиалогом();
		
КонецПроцедуры // СостояниеПриИзменении()

// Процедура - обработчик события "Нажатие" надписи "ТехнологическаяКартаСпецификацииПланирования".
//
Процедура ГиперссылкаТехнологическаяКартаСпецификацииПланированияНажатие(Элемент)
	
	ЕстьТехнологическаяКарта = Ложь;
	ТекстЗапроса = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТехнологическиеКарты.ТехнологическаяКарта КАК ТехнологическаяКарта
	|ИЗ
	|	РегистрСведений.ТехнологическиеКартыСпецификацийПланирования.СрезПоследних(&Дата,
	|	   Спецификация = &Спецификация) КАК ТехнологическиеКарты
	|";

	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Дата", ТекущаяДата());
	Запрос.УстановитьПараметр("Спецификация", Ссылка);

	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТехнологическаяКарта = Выборка.ТехнологическаяКарта;
		Если ЗначениеЗаполнено(ТехнологическаяКарта) Тогда
			ОткрытьЗначение(ТехнологическаяКарта);
			ЕстьТехнологическаяКарта = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьТехнологическаяКарта = Ложь Тогда
		УстановитьТехнологическуюКарту();
	КонецЕсли;
	
КонецПроцедуры // ГиперссылкаТехнологическаяКартаСпецификацииПланированияНажатие()

// Процедура - обработчик события "ПриИзменении" поля "ВидСпецификации".
//
Процедура ВидСпецификацииПриИзменении()
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная Тогда
		ЗаполнитьВыходноеИзделиеВШапке();
	Иначе
		ВыходныеИзделия.Очистить();
		НоваяСтрока = ВыходныеИзделия.Добавить();
		НоваяСтрока.Номенклатура 				= Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры 	= ХарактеристикаНоменклатуры;
		НоваяСтрока.Количество 					= Количество;
		НоваяСтрока.ЕдиницаИзмерения 			= ЕдиницаИзмерения;
		НоваяСтрока.НомерОперацииМаршрута 		= НомерОперацииМаршрута;
		НоваяСтрока.МинимальнаяПартия			= МинимальнаяПартия;
		НоваяСтрока.Кратность 					= Кратность;
		НоваяСтрока.ТочкаМаршрута		 		= ТочкаМаршрута;
	КонецЕсли;
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		мКолонкиИсходныеКомплектующие = ЭлементыФормы.ИсходныеКомплектующиеУзел.Колонки;
		ИспользоватьВозвратныеОтходы = Ложь;
		ИспользоватьДокументацию = Ложь;
		ИспользоватьПараметрыВыпускаПродукции = Ложь;
	Иначе
		мКолонкиИсходныеКомплектующие = ЭлементыФормы.ИсходныеКомплектующие.Колонки;
		ИспользоватьВозвратныеОтходы = Ссылка.ИспользоватьВозвратныеОтходы;
		ИспользоватьДокументацию = Ссылка.ИспользоватьДокументацию;
		ИспользоватьПараметрыВыпускаПродукции = Ссылка.ИспользоватьПараметрыВыпускаПродукции;
	КонецЕсли;
	
	УправлениеДиалогом();
	
КонецПроцедуры // ВидСпецификацииПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля "НомерОперацииМаршрута".
//
Процедура НомерОперацииМаршрутаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокНомеровОперацийМаршрута(Элемент);
	
КонецПроцедуры // НомерОперацииМаршрутаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля "ВидСпецификации".
//
Процедура НоменклатураПриИзменении(Элемент)
	
	Если Номенклатура <> ХарактеристикаНоменклатуры.Владелец Тогда
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
	Если Номенклатура <> ЕдиницаИзмерения.Владелец Тогда
		ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		ЕдиницаИзмерения = Номенклатура.ЕдиницаХраненияОстатков;
	КонецЕсли;
	
	Если Количество = 0 Тогда
		Количество = 1;
	КонецЕсли;
	
КонецПроцедуры // НоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля "Наименование".
//
Процедура НаименованиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Имя = СокрЛП(Номенклатура.Наименование);
	Если ЗначениеЗаполнено(ХарактеристикаНоменклатуры) Тогда
		Имя = Имя + " (" + СокрЛП(ХарактеристикаНоменклатуры.Наименование) + ")";
	КонецЕсли;
	
	Элемент.СписокВыбора.Очистить();
	Элемент.СписокВыбора.Добавить(Имя, Имя);
	
КонецПроцедуры // НаименованиеНачалоВыбораИзСписка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ИСХОДНЫЕ КОМПЛЕКТУЮЩИЕ

// Процедура - обработчик события "ПриВыводеСтроки" поля табличной части "ИсходныеКомплектующие".
//
Процедура ИсходныеКомплектующиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если мКолонкиИсходныеКомплектующие.Код.Видимость Тогда
		Если ТипЗнч(ДанныеСтроки.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		 ИЛИ ТипЗнч(ДанныеСтроки.Номенклатура) = Тип("СправочникСсылка.НоменклатурныеУзлы") Тогда
			ОформлениеСтроки.Ячейки.Код.УстановитьТекст(ДанныеСтроки.Номенклатура.Код);
		Иначе
			ОформлениеСтроки.Ячейки.Код.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;

	Если мКолонкиИсходныеКомплектующие.Артикул.Видимость Тогда
		Если ТипЗнч(ДанныеСтроки.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ОформлениеСтроки.Ячейки.Артикул.УстановитьТекст(ДанныеСтроки.Номенклатура.Артикул);
		Иначе
			ОформлениеСтроки.Ячейки.Артикул.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры Тогда
		ОформлениеСтроки.Ячейки.Номенклатура.ТолькоПросмотр 				= Истина;
		ОформлениеСтроки.Ячейки.ХарактеристикаНоменклатуры.ТолькоПросмотр 	= Истина;
		ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ТолькоПросмотр 			= Истина;
	ИначеЕсли ДанныеСтроки.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики Тогда
		ОформлениеСтроки.Ячейки.Номенклатура.ТолькоПросмотр 				= Ложь;
		ОформлениеСтроки.Ячейки.ХарактеристикаНоменклатуры.ТолькоПросмотр 	= Истина;
		ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ТолькоПросмотр 			= Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.Номенклатура.ТолькоПросмотр 				= Ложь;
		Если ТипЗнч(ДанныеСтроки.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ДанныеСтроки.Номенклатура.ВестиУчетПоХарактеристикам Тогда
				ОформлениеСтроки.Ячейки.ХарактеристикаНоменклатуры.ТолькоПросмотр = Ложь;
			Иначе
				ОформлениеСтроки.Ячейки.ХарактеристикаНоменклатуры.ТолькоПросмотр = Истина;
			КонецЕсли;
		Иначе
			ОформлениеСтроки.Ячейки.ХарактеристикаНоменклатуры.ТолькоПросмотр = Истина;
		КонецЕсли;  
		Флаг = ЗначениеЗаполнено( ДанныеСтроки.ВидНорматива)
		    И ДанныеСтроки.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Узел;
		ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ТолькоПросмотр = Флаг;
		ОформлениеСтроки.Ячейки.СтатьяЗатрат    .ТолькоПросмотр = Флаг;
	КонецЕсли;
	
	Если ДанныеСтроки.СписаниеКомплектующей = Перечисления.ВариантыСписанияКомплектующих.ЗадаетсяВСвойстве Тогда
		ОформлениеСтроки.Ячейки.Свойство.ТолькоПросмотр = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.Свойство.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если ДанныеСтроки.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры
	 ИЛИ ДанныеСтроки.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Закупка
	 ИЛИ ДанныеСтроки.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.ПринятыеВПереработку Тогда
		СпецификацияВидимость = Ложь;
	Иначе
		СпецификацияВидимость = Истина;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Спецификация.Видимость = СпецификацияВидимость;
	ОформлениеСтроки.Ячейки.Спецификация.ТолькоПросмотр = НЕ СпецификацияВидимость;
	
	Если ДанныеСтроки.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Узел Тогда
		ОформлениеСтроки.Ячейки.УказаниеНорматива.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.УказаниеНорматива.ТолькоПросмотр = Истина;
	ИначеЕсли ИспользоватьУказаниеНорматива И ДанныеСтроки.ОсновноеСырье Тогда
		ОформлениеСтроки.Ячейки.УказаниеНорматива.Видимость = Истина;
		ОформлениеСтроки.Ячейки.УказаниеНорматива.ТолькоПросмотр = Истина;
	Иначе
		ОформлениеСтроки.Ячейки.УказаниеНорматива.Видимость = Истина;
		ОформлениеСтроки.Ячейки.УказаниеНорматива.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ИспользоватьУказаниеНорматива И ДанныеСтроки.ОсновноеСырье И ВидСпецификации <> Перечисления.ВидыСпецификаций.Узел Тогда
		ОформлениеСтроки.Шрифт = мЖирныйШрифт;
	КонецЕсли;
	
КонецПроцедуры // ИсходныеКомплектующиеПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "Исходные комплектующие".
//
Процедура ИсходныеКомплектующиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		
		Если СтрокаТабличнойЧасти.ПозицияПоСпецификации = 0 Тогда
			Если СтрокаТабличнойЧасти.НомерСтроки = 1 Тогда
				СтрокаТабличнойЧасти.ПозицияПоСпецификации = 1;
			Иначе
				ПозицияПоСпецификации = ИсходныеКомплектующие.Получить(СтрокаТабличнойЧасти.НомерСтроки - 2).ПозицияПоСпецификации;
				СтрокаТабличнойЧасти.ПозицияПоСпецификации = ПозицияПоСпецификации + 1;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидНорматива) Тогда
			СтрокаТабличнойЧасти.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура;
			СтрокаТабличнойЧасти.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
			НоменклатураПриИзменении(Элемент);
			
			СтрокаТабличнойЧасти.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоПродукции;
			СтрокаТабличнойЧасти.СписаниеКомплектующей = Перечисления.ВариантыСписанияКомплектующих.Всегда;
		КонецЕсли;
		
		Если Копирование Тогда
			
			НайденныеСтрокиАвтоподборНоменклатуры = АвтоподборНоменклатуры.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи));
			НайденныеСтрокиАвтоподборХарактеристики = АвтоподборХарактеристики.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи));
			
			СтрокаТабличнойЧасти.КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, СправочникОбъект, "ИсходныеКомплектующие", Истина);
			
			Для каждого НайденнаяСтрокаАвтоподборНоменклатуры из НайденныеСтрокиАвтоподборНоменклатуры Цикл
				
				НоваяСтрокаАвтоподборНоменклатуры = АвтоподборНоменклатуры.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаАвтоподборНоменклатуры, НайденнаяСтрокаАвтоподборНоменклатуры);
				НоваяСтрокаАвтоподборНоменклатуры.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
				
			КонецЦикла;
			
			Для каждого НайденнаяСтрокаАвтоподборХарактеристики из НайденныеСтрокиАвтоподборХарактеристики Цикл
				
				НоваяСтрокаАвтоподборХарактеристики = АвтоподборХарактеристики.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаАвтоподборХарактеристики, НайденнаяСтрокаАвтоподборХарактеристики);
				НоваяСтрокаАвтоподборХарактеристики.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ИсходныеКомплектующиеПриНачалеРедактирования()

// Процедура - обработчик события "Выбор" табличной части "ИсходныеКомплектующие".
//
Процедура ИсходныеКомплектующиеВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "Номенклатура" И ВыбраннаяСтрока.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры Тогда
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	ВыбраннаяСтрока.НомерСтроки);
		СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		ВыбраннаяСтрока);
		СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"ИсходныеКомплектующие");
	
		мФормаВводаПравилАвтоподбора = ПолучитьФорму("ФормаАвтоподбораНоменклатуры", ЭтаФорма, ЭтаФорма);
		мФормаВводаПравилАвтоподбора.СтруктураИсходныхПараметров = СтруктураПараметров;
		мФормаВводаПравилАвтоподбора.Открыть();
		
	ИначеЕсли Колонка.Имя = "ХарактеристикаНоменклатуры"
		    И (ВыбраннаяСтрока.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры
			   ИЛИ ВыбраннаяСтрока.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики)Тогда
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	ВыбраннаяСтрока.НомерСтроки);
		СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		ВыбраннаяСтрока);
		СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"ИсходныеКомплектующие");
	
		мФормаВводаПравилАвтоподбора = ПолучитьФорму("ФормаАвтоподбораХарактеристики", ЭтаФорма, ЭтаФорма);
		мФормаВводаПравилАвтоподбора.СтруктураИсходныхПараметров = СтруктураПараметров;
		мФормаВводаПравилАвтоподбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ИсходныеКомплектующиеВыбор()

// Процедура - обработчик события "ПередУдалением" табличной части "ИсходныеКомплектующие".
//
Процедура ИсходныеКомплектующиеПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = мТекущаяСтрокаИсходныеКомплектующиеПравила И мФормаВводаПравилАвтоподбора.Открыта() Тогда
		мФормаВводаПравилАвтоподбора.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ИсходныеКомплектующиеПередУдалением()

// Процедура - обработчик события "ПослеУдаления" табличной части "ИсходныеКомплектующие".
//
Процедура ИсходныеКомплектующиеПослеУдаления(Элемент)
	
	мПараметрыСвязиСтрокТЧ["ИсходныеКомплектующие"].ФлагМодификации = Истина;
	
КонецПроцедуры // ИсходныеКомплектующиеПослеУдаления()

// Процедура - обработчик события "ПриИзменении" вида норматива табличной части "ИсходныеКомплектующие".
//
Процедура ИсходныеКомплектующиеВидНормативаПриИзменении(Элемент)
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующиеУзел.ТекущиеДанные;
	Иначе
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующие.ТекущиеДанные;
	КонецЕсли;
	
	Если Элемент.Значение = Перечисления.ВидыНормативовНоменклатуры.Номенклатура Тогда
		ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
		ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ИначеЕсли Элемент.Значение = Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики Тогда
		ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
		ПустаяХарактеристика = "";
	ИначеЕсли Элемент.Значение = Перечисления.ВидыНормативовНоменклатуры.Узел Тогда
		ПустаяНоменклатура = Справочники.СпецификацииНоменклатуры.ПустаяСсылка();
		ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
		СтрокаТабличнойЧасти.СтатьяЗатрат = Неопределено;
	Иначе
		ПустаяНоменклатура = "";
		ПустаяХарактеристика = "";
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) <> ТипЗнч(ПустаяНоменклатура) Тогда
		СтрокаТабличнойЧасти.Номенклатура 				= ПустаяНоменклатура;
		Если ТипЗнч(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры) <> ТипЗнч(ПустаяХарактеристика) Тогда
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ПустаяХарактеристика;
		КонецЕсли;
		ИсходныеКомплектующиеНоменклатураПриИзменении(Элемент);
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры) <> ТипЗнч(ПустаяХарактеристика) Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ПустаяХарактеристика;
	КонецЕсли;
	
КонецПроцедуры // ИсходныеКомплектующиеВидНормативаПриИзменении()

// Процедура - обработчик события "ПриИзменении" номенклатуры табличной части "ИсходныеКомплектующие".
//
Процедура ИсходныеКомплектующиеНоменклатураПриИзменении(Элемент)
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующиеУзел.ТекущиеДанные;
	Иначе
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующие.ТекущиеДанные;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") 
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ЕдиницаИзмерения.Владелец Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
	   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
		СтрокаТабличнойЧасти.ВидВоспроизводства = СтрокаТабличнойЧасти.Номенклатура.ВидВоспроизводства;
		СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, ОбщегоНазначения.ПолучитьРабочуюДату());
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры // ИсходныеКомплектующиеНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбора" номенклатуры табличной части "ИсходныеКомплектующие".
//
Процедура ИсходныеКомплектующиеНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующиеУзел.ТекущиеДанные;
	Иначе
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующие.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Узел Тогда
		
		СтандартнаяОбработка = Ложь;
	
		ФормаВыбора = Справочники.СпецификацииНоменклатуры.ПолучитьФормуВыбора(, Элемент);
		ФормаВыбора.Отбор.ВидСпецификации.Установить(Перечисления.ВидыСпецификаций.Узел, Истина);
		
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) 
		   И ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
			ФормаВыбора.ПараметрТекущаяСтрока = СтрокаТабличнойЧасти.Номенклатура;
		КонецЕсли;
		ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ИсходныеКомплектующиеНоменклатураНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" характеристики номенклатуры табличной части "ИсходныеКомплектующие".
//
Процедура ИсходныеКомплектующиеХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующиеУзел.ТекущиеДанные;
	Иначе
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующие.ТекущиеДанные;
	КонецЕсли;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, ОбщегоНазначения.ПолучитьРабочуюДату());
	
КонецПроцедуры // ИсходныеКомплектующиеХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "Очистка" номенклатуры табличной части "Исходные комплектующие".
//
Процедура ИсходныеКомплектующиеНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующиеУзел.ТекущиеДанные;
	Иначе
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующие.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура Тогда
		Элемент.Значение = Справочники.Номенклатура.ПустаяСсылка();
	Иначе
		Элемент.Значение = Справочники.НоменклатурныеУзлы.ПустаяСсылка();
	КонецЕсли;
	
	ИсходныеКомплектующиеНоменклатураПриИзменении(Элемент);
	
	СтандартнаяОбработка = ЛОЖЬ;
	
КонецПроцедуры // ИсходныеКомплектующиеНоменклатураОчистка()

// Процедура - обработчик события "НачалоВыбора" единицы измерения табличной части "Исходные комплектующие".
//
Процедура ИсходныеКомплектующиеЕдиницаИзмеренияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующиеУзел.ТекущиеДанные;
	Иначе
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующие.ТекущиеДанные;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ИсходныеКомплектующиеЕдиницаИзмеренияНачалоВыбора()

// Процедура - обработчик события "НачалоВыбораИзСписка" номера операции маршрута табличной части "Исходные комплектующие".
//
Процедура ИсходныеКомплектующиеНомерОперацииМаршрутаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокНомеровОперацийМаршрута(Элемент);
	
КонецПроцедуры // ИсходныеКомплектующиеНомерОперацииМаршрутаНачалоВыбораИзСписка()

// Процедура - обработчик события "НачалоВыбора" спецификации табличной части "Исходные комплектующие".
//
Процедура ИсходныеКомплектующиеСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующиеУзел.ТекущиеДанные;
	Иначе
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующие.ТекущиеДанные;
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(СтрокаТабличнойЧасти.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ИсходныеКомплектующиеСпецификацияНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" вида воспроизводства табличной части "Исходные комплектующие".
//
Процедура ИсходныеКомплектующиеВидВоспроизводстваПриИзменении(Элемент)
	
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующиеУзел.ТекущиеДанные;
	Иначе
		СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующие.ТекущиеДанные;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.Закупка
	 ИЛИ СтрокаТабличнойЧасти.ВидВоспроизводства = Перечисления.ВидыВоспроизводстваНоменклатуры.ПринятыеВПереработку Тогда
		СтрокаТабличнойЧасти.Спецификация = Неопределено;
	КонецЕсли;
	
КонецПроцедуры // ИсходныеКомплектующиеВидВоспроизводстваПриИзменении()

// Процедура - обработчик события "НачалоВыбора" формулы табличной части "Исходные комплектующие".
//
Процедура ИсходныеКомплектующиеФормулаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВводФормулы(Элемент);
		
КонецПроцедуры // ИсходныеКомплектующиеФормулаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" варианта списания комплектующей табличной части "Исходные комплектующие".
//
Процедура ИсходныеКомплектующиеСписаниеКомплектующейПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ИсходныеКомплектующие.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.СписаниеКомплектующей = Перечисления.ВариантыСписанияКомплектующих.Всегда
	   ИЛИ СтрокаТабличнойЧасти.СписаниеКомплектующей = Перечисления.ВариантыСписанияКомплектующих.ТолькоВДокументахРаспределения Тогда
	    СтрокаТабличнойЧасти.СвойствоДляСписания = ПланыВидовХарактеристик.СвойстваОбъектов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля "Свойство" табличной части "ИсходныеКомплектующие".
//
Процедура ИсходныеКомплектующиеСвойствоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборСвойства(Элемент);
	
КонецПроцедуры // ИсходныеКомплектующиеСвойствоНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля "Свойство" табличной части "ИсходныеКомплектующие".
//
Процедура ИсходныеКомплектующиеСвойствоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) И Элемент.Значение.ТипЗначения <> Новый ОписаниеТипов("Булево") Тогда
		
		Предупреждение("Необходимо выбирать свойство с типом значения ""Булево""");
		Элемент.Значение = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // ИсходныеКомплектующиеСвойствоПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля "Свойство" табличной части "ИсходныеКомплектующие".
//
Процедура ИсходныеКомплектующиеСвойствоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение.ТипЗначения <> Новый ОписаниеТипов("Булево") Тогда
		
		Предупреждение("Необходимо выбирать свойство с типом значения ""Булево""");
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ИсходныеКомплектующиеСвойствоОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ИСХОДНЫЕ КОМПЛЕКТУЮЩИЕ (УЗЕЛ)

// Процедура - обработчик события "ПриВыводеСтроки" поля табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ИсходныеКомплектующиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры // ИсходныеКомплектующиеУзелПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИсходныеКомплектующиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры // ИсходныеКомплектующиеУзелПриНачалеРедактирования()

// Процедура - обработчик события "Выбор" табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	ИсходныеКомплектующиеВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка);
	
КонецПроцедуры // ИсходныеКомплектующиеУзелВыбор()

// Процедура - обработчик события "ПередУдалением" табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелПередУдалением(Элемент, Отказ)
	
	ИсходныеКомплектующиеПередУдалением(Элемент, Отказ);
	
КонецПроцедуры // ИсходныеКомплектующиеУзелПередУдалением()

// Процедура - обработчик события "ПослеУдаления" табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелПослеУдаления(Элемент)
	
	ИсходныеКомплектующиеПослеУдаления(Элемент);
	
КонецПроцедуры // ИсходныеКомплектующиеУзелПослеУдаления()

// Процедура - обработчик события "ПриИзменении" вида норматива табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелВидНормативаПриИзменении(Элемент)
	
	ИсходныеКомплектующиеВидНормативаПриИзменении(Элемент)
	
КонецПроцедуры // ИсходныеКомплектующиеУзелВидНормативаПриИзменении()

// Процедура - обработчик события "ПриИзменении" номенклатуры табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелНоменклатураПриИзменении(Элемент)
	
	ИсходныеКомплектующиеНоменклатураПриИзменении(Элемент);
	
КонецПроцедуры // ИсходныеКомплектующиеУзелНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбора" номенклатуры табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ИсходныеКомплектующиеНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ИсходныеКомплектующиеУзелНоменклатураНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" характеристики номенклатуры табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	ИсходныеКомплектующиеХарактеристикаНоменклатурыПриИзменении(Элемент);
	
КонецПроцедуры // ИсходныеКомплектующиеУзелХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "Очистка" номенклатуры табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	ИсходныеКомплектующиеНоменклатураОчистка(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ИсходныеКомплектующиеУзелНоменклатураОчистка()

// Процедура - обработчик события "НачалоВыбора" единицы измерения табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелЕдиницаИзмеренияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ИсходныеКомплектующиеЕдиницаИзмеренияНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ИсходныеКомплектующиеУзелЕдиницаИзмеренияНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" спецификации табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ИсходныеКомплектующиеСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ИсходныеКомплектующиеУзелСпецификацияНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" вида воспроизводства табличной части "Исходные комплектующие".
//
Процедура ИсходныеКомплектующиеУзелВидВоспроизводстваПриИзменении(Элемент)
	
	ИсходныеКомплектующиеВидВоспроизводстваПриИзменении(Элемент);
	
КонецПроцедуры // ИсходныеКомплектующиеУзелВидВоспроизводстваПриИзменении()

// Процедура - обработчик события "НачалоВыбора" формулы табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелФормулаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВводФормулы(Элемент, "ИсходныеКомплектующиеУзел");
	
КонецПроцедуры // ИсходныеКомплектующиеУзелФормулаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля "Свойство" табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелСвойствоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ИсходныеКомплектующиеСвойствоНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ИсходныеКомплектующиеУзелСвойствоНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля "Свойство" табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелСвойствоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) И Элемент.Значение.ТипЗначения <> Новый ОписаниеТипов("Булево") Тогда
		
		Предупреждение("Необходимо выбирать свойство с типом значения ""Булево""");
		Элемент.Значение = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // ИсходныеКомплектующиеУзелСвойствоПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля "Свойство" табличной части "ИсходныеКомплектующиеУзел".
//
Процедура ИсходныеКомплектующиеУзелСвойствоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение.ТипЗначения <> Новый ОписаниеТипов("Булево") Тогда
		
		Предупреждение("Необходимо выбирать свойство с типом значения ""Булево""");
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ИсходныеКомплектующиеУзелСвойствоОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВЫХОДНЫЕ ИЗДЕЛИЯ

// Процедура - обработчик события "ПриВыводеСтроки" поля табличной части "ВыходныеИзделия".
//
Процедура ВыходныеИзделияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВыходныеИзделия, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры // ВыходныеИзделияПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" номенклатуры табличной части "Выходные изделия".
//
Процедура ВыходныеИзделияНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВыходныеИзделия.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ЕдиницаИзмерения.Владелец Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ДоляСтоимости = 0 Тогда
		СтрокаТабличнойЧасти.ДоляСтоимости = 1;
	КонецЕсли;
	
КонецПроцедуры // ВыходныеИзделияНоменклатураПриИзменении()

// Процедура - обработчик события "Очистка" номенклатуры табличной части "Выходные изделия".
//
Процедура ВыходныеИзделияНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	ВыходныеИзделияНоменклатураПриИзменении(Элемент);
	
КонецПроцедуры // ВыходныеИзделияНоменклатураОчистка()

// Процедура - обработчик события "НачалоВыбора" единицы измерения табличной части "Выходные изделия".
//
Процедура ВыходныеИзделияЕдиницаИзмеренияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ВыходныеИзделия.ТекущиеДанные.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" номера операции маршрута табличной части "Выходные изделия".
//
Процедура ВыходныеИзделияНомерОперацииМаршрутаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокНомеровОперацийМаршрута(Элемент);
	
КонецПроцедуры // ВыходныеИзделияНомерОперацииМаршрутаНачалоВыбораИзСписка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНЫЕ ОТХОДЫ

// Процедура - обработчик события "ПриВыводеСтроки" поля табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если мКолонкиВозвратныеОтходы.Код.Видимость Тогда
		Если ТипЗнч(ДанныеСтроки.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ОформлениеСтроки.Ячейки.Код.УстановитьТекст(ДанныеСтроки.Номенклатура.Код);
		Иначе
			ОформлениеСтроки.Ячейки.Код.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;

	Если мКолонкиВозвратныеОтходы.Артикул.Видимость Тогда
		Если ТипЗнч(ДанныеСтроки.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ОформлениеСтроки.Ячейки.Артикул.УстановитьТекст(ДанныеСтроки.Номенклатура.Артикул);
		Иначе
			ОформлениеСтроки.Ячейки.Артикул.УстановитьТекст("");
		КонецЕсли;
	КонецЕсли;
	
	Если ДанныеСтроки.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры Тогда
		ОформлениеСтроки.Ячейки.Номенклатура.ТолькоПросмотр 				= Истина;
		ОформлениеСтроки.Ячейки.ХарактеристикаНоменклатуры.ТолькоПросмотр 	= Истина;
		ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ТолькоПросмотр 			= Истина;
	ИначеЕсли ДанныеСтроки.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики Тогда
		ОформлениеСтроки.Ячейки.Номенклатура.ТолькоПросмотр 				= Ложь;
		ОформлениеСтроки.Ячейки.ХарактеристикаНоменклатуры.ТолькоПросмотр 	= Истина;
		ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ТолькоПросмотр 			= Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.Номенклатура.ТолькоПросмотр 				= Ложь;
		Если ТипЗнч(ДанныеСтроки.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если ДанныеСтроки.Номенклатура.ВестиУчетПоХарактеристикам Тогда
				ОформлениеСтроки.Ячейки.ХарактеристикаНоменклатуры.ТолькоПросмотр = Ложь;
			Иначе
				ОформлениеСтроки.Ячейки.ХарактеристикаНоменклатуры.ТолькоПросмотр = Истина;
			КонецЕсли;
		Иначе
			ОформлениеСтроки.Ячейки.ХарактеристикаНоменклатуры.ТолькоПросмотр = Истина;
		КонецЕсли;  
		ОформлениеСтроки.Ячейки.ЕдиницаИзмерения.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если ДанныеСтроки.СписаниеКомплектующей = Перечисления.ВариантыСписанияКомплектующих.ЗадаетсяВСвойстве Тогда
		ОформлениеСтроки.Ячейки.Свойство.ТолькоПросмотр = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.Свойство.ТолькоПросмотр = Истина;
	КонецЕсли;
	
КонецПроцедуры // ВозвратныеОтходыПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
	Если НоваяСтрока Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВидНорматива) Тогда
			СтрокаТабличнойЧасти.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.Номенклатура;
			СтрокаТабличнойЧасти.Номенклатура = Справочники.Номенклатура.ПустаяСсылка();
			НоменклатураПриИзменении(Элемент);
			
			СтрокаТабличнойЧасти.УказаниеНорматива = Перечисления.ВидыУказанияНорматива.НаКоличествоПродукции;
			СтрокаТабличнойЧасти.СписаниеКомплектующей = Перечисления.ВариантыСписанияКомплектующих.Всегда;
		КонецЕсли;
		
		Если Копирование Тогда
			
			НайденныеСтрокиАвтоподборНоменклатурыОтходы = АвтоподборНоменклатурыОтходы.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи));
			НайденныеСтрокиАвтоподборХарактеристикиОтходы = АвтоподборХарактеристикиОтходы.НайтиСтроки(Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи));
			
			СтрокаТабличнойЧасти.КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, СправочникОбъект, "ВозвратныеОтходы", Истина);
			
			Для каждого НайденнаяСтрокаАвтоподборНоменклатурыОтходы из НайденныеСтрокиАвтоподборНоменклатурыОтходы Цикл
				
				НоваяСтрокаАвтоподборНоменклатурыОтходы = АвтоподборНоменклатурыОтходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаАвтоподборНоменклатурыОтходы, НайденнаяСтрокаАвтоподборНоменклатурыОтходы);
				НоваяСтрокаАвтоподборНоменклатурыОтходы.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
				
			КонецЦикла;
			
			Для каждого НайденнаяСтрокаАвтоподборХарактеристикиОтходы из НайденныеСтрокиАвтоподборХарактеристикиОтходы Цикл
				
				НоваяСтрокаАвтоподборХарактеристикиОтходы = АвтоподборХарактеристикиОтходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаАвтоподборХарактеристикиОтходы, НайденнаяСтрокаАвтоподборХарактеристикиОтходы);
				НоваяСтрокаАвтоподборХарактеристикиОтходы.КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВозвратныеОтходыПриНачалеРедактирования()

// Процедура - обработчик события "Выбор" табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	
	Если Колонка.Имя = "Номенклатура" И ВыбраннаяСтрока.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры Тогда
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	ВыбраннаяСтрока.НомерСтроки);
		СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		ВыбраннаяСтрока);
		СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"ВозвратныеОтходы");
	
		мФормаВводаПравилАвтоподбора = ПолучитьФорму("ФормаАвтоподбораНоменклатуры", ЭтаФорма, ЭтаФорма);
		мФормаВводаПравилАвтоподбора.СтруктураИсходныхПараметров = СтруктураПараметров;
		мФормаВводаПравилАвтоподбора.Открыть();
		
	ИначеЕсли Колонка.Имя = "ХарактеристикаНоменклатуры"
		    И (ВыбраннаяСтрока.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры
			   ИЛИ ВыбраннаяСтрока.ВидНорматива = Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики)Тогда
		СтандартнаяОбработка = Ложь;
		
		СтруктураПараметров = Новый Структура();
		СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	ВыбраннаяСтрока.НомерСтроки);
		СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		ВыбраннаяСтрока);
		СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"ВозвратныеОтходы");
	
		мФормаВводаПравилАвтоподбора = ПолучитьФорму("ФормаАвтоподбораХарактеристики", ЭтаФорма, ЭтаФорма);
		мФормаВводаПравилАвтоподбора.СтруктураИсходныхПараметров = СтруктураПараметров;
		мФормаВводаПравилАвтоподбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры // ВозвратныеОтходыВыбор()

// Процедура - обработчик события "ПередУдалением" табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыПередУдалением(Элемент, Отказ)
	
	Если Элемент.ТекущиеДанные = мТекущаяСтрокаИсходныеКомплектующиеПравила И мФормаВводаПравилАвтоподбора.Открыта() Тогда
		мФормаВводаПравилАвтоподбора.Закрыть();
	КонецЕсли;
	
КонецПроцедуры // ВозвратныеОтходыПередУдалением()

// Процедура - обработчик события "ПослеУдаления" табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыПослеУдаления(Элемент)
	
	мПараметрыСвязиСтрокТЧ["ВозвратныеОтходы"].ФлагМодификации = Истина;
	
КонецПроцедуры // ВозвратныеОтходыПослеУдаления()

// Процедура - обработчик события "ПриИзменении" вида норматива табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыВидНормативаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если Элемент.Значение = Перечисления.ВидыНормативовНоменклатуры.Номенклатура Тогда
		ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
		ПустаяХарактеристика = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	ИначеЕсли Элемент.Значение = Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики Тогда
		ПустаяНоменклатура = Справочники.Номенклатура.ПустаяСсылка();
		ПустаяХарактеристика = "";
	Иначе
		ПустаяНоменклатура = "";
		ПустаяХарактеристика = "";
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) <> ТипЗнч(ПустаяНоменклатура) Тогда
		СтрокаТабличнойЧасти.Номенклатура 				= ПустаяНоменклатура;
		Если ТипЗнч(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры) <> ТипЗнч(ПустаяХарактеристика) Тогда
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ПустаяХарактеристика;
		КонецЕсли;
		ВозвратныеОтходыНоменклатураПриИзменении(Элемент);
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры) <> ТипЗнч(ПустаяХарактеристика) Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ПустаяХарактеристика;
	КонецЕсли;
	
КонецПроцедуры // ВозвратныеОтходыВидНормативаПриИзменении()

// Процедура - обработчик события "ПриИзменении" номенклатуры табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры) = Тип("СправочникСсылка.ХарактеристикиНоменклатуры") 
	   И СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Справочники.ХарактеристикиНоменклатуры.ПустаяСсылка();
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ЕдиницаИзмерения.Владелец Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") 
	   И ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры // ВозвратныеОтходыНоменклатураПриИзменении()

// Процедура - обработчик события "Очистка" номенклатуры табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыНоменклатураОчистка(Элемент, СтандартнаяОбработка)
	
	ВыходныеИзделияНоменклатураПриИзменении(Элемент);
	
КонецПроцедуры // ВозвратныеОтходыНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбора" единицы измерения табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыЕдиницаИзмеренияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры // ВозвратныеОтходыЕдиницаИзмеренияНачалоВыбора()

// Процедура - обработчик события "НачалоВыбораИзСписка" номера операции маршрута табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыНомерОперацииМаршрутаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	ЗаполнитьСписокНомеровОперацийМаршрута(Элемент);
	
КонецПроцедуры // ВозвратныеОтходыНомерОперацииМаршрутаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" суммы табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыСуммаПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	СтрокаТЧ.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(
		СтрокаТЧ.Сумма,
		мВалютаРегламентированногоУчета,
		мВалютаУправленческогоУчета,
		?( НЕ ЗначениеЗаполнено(ДатаУтверждения), ТекущаяДата(), ДатаУтверждения));
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" формулы табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыФормулаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВводФормулы(Элемент, "ВозвратныеОтходы");
	
КонецПроцедуры // ВозвратныеОтходыФормулаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля "Свойство" табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыСвойствоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборСвойства(Элемент);
	
КонецПроцедуры // ВозвратныеОтходыСвойствоНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля "Свойство" табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыСвойствоПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Значение) И Элемент.Значение.ТипЗначения <> Новый ОписаниеТипов("Булево") Тогда
		
		Предупреждение("Необходимо выбирать свойство с типом значения ""Булево""");
		Элемент.Значение = Неопределено;
		
	КонецЕсли;
	
КонецПроцедуры // ВозвратныеОтходыСвойствоПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля "Свойство" табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыСвойствоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение.ТипЗначения <> Новый ОписаниеТипов("Булево") Тогда
		
		Предупреждение("Необходимо выбирать свойство с типом значения ""Булево""");
		СтандартнаяОбработка = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ВозвратныеОтходыСвойствоОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" флага активности спецификации
//
Процедура АктивнаяПриИзменении(Элемент)

	УправлениеДиалогом();

КонецПроцедуры // АктивнаяПриИзменении()

// Процедура формирует текст с надписью о статусе спецификации
// 
Процедура ОбновитьНадписьОсновнаяСпецификация(ДатаЗаписи = Неопределено)
	
	Текст = "";
	Если ВыходныеИзделия.Количество()>0 Тогда
		Если ДатаЗаписи = Неопределено Тогда
			ТекстЗапроса = 
				"ВЫБРАТЬ
				|	РегОсновныеСпецификации.Период,
				|	РегОсновныеСпецификации.Номенклатура,
				|	РегОсновныеСпецификации.ХарактеристикаНоменклатуры,
				|	РегОсновныеСпецификации.Подразделение,
				|	РегОсновныеСпецификации.СпецификацияНоменклатуры
				|ИЗ
				|	РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
				|		,
				|		Номенклатура = &Продукция
				|		И ХарактеристикаНоменклатуры = &ХарПрод
				|		И Подразделение = &ПустПодр) КАК РегОсновныеСпецификации
				|";
			
			Запрос = Новый Запрос;
			Запрос.Текст = ТекстЗапроса;
			
			//Запрос.УстановитьПараметр( "КонДата",   ТекущаяДата());
			Запрос.УстановитьПараметр( "Продукция", ВыходныеИзделия[0].Номенклатура);
			Запрос.УстановитьПараметр( "ХарПрод",   ВыходныеИзделия[0].ХарактеристикаНоменклатуры);
			Запрос.УстановитьПараметр( "ПустПодр",  Справочники.Подразделения.ПустаяСсылка());
			
			РезультатЗапроса = Запрос.Выполнить();
			Если Не РезультатЗапроса.Пустой() Тогда
				Обход = РезультатЗапроса.Выбрать();
				Обход.Следующий();
				Если Обход.СпецификацияНоменклатуры = Ссылка Тогда
					Текст = "Спецификация установлена основной на " + Формат( Обход.Период, "ДЛФ=DD");
				КонецЕсли;
			КонецЕсли;
		Иначе
			Текст = "Спецификация установлена основной на " + Формат(ДатаЗаписи, "ДЛФ=DD");
		КонецЕсли;
    КонецЕсли;
	ЭлементыФормы.ТекстОсновнаяСпецификация.Заголовок = Текст;

КонецПроцедуры // ОбновитьНадписьОсновнаяСпецификация()

Процедура ДействияФормыУстановитьОсновнуюСпецификациюНаДату(Кнопка)

	Если ЭтоНовый() Тогда
		Предупреждение("Вначале запишите спецификацию!");
		Возврат;
	КонецЕсли;
	Если ВыходныеИзделия.Количество()=0 Тогда
		Предупреждение("Вначале укажите выходное изделие!");
		Возврат;
	КонецЕсли;
	Если ВидСпецификации = Перечисления.ВидыСпецификаций.Узел Тогда
		Предупреждение("Нельзя установить основную спецификацию для номенклатурного узла!");
		Возврат;
	КонецЕсли;
	
	Если ВыходныеИзделия[0].Номенклатура = Справочники.Номенклатура.ПустаяСсылка() Тогда
		Предупреждение("Вначале укажите выходное изделие!");
		Возврат;

	КонецЕсли;
	
	ДатаЗаписи = ТекущаяДата();
	Если НЕ ВвестиДату(ДатаЗаписи, "Введите дату на которую данная спецификация будет установлена основной", ЧастиДаты.Дата) Тогда
		Возврат;
	КонецЕсли;
	Для каждого стр_вых из ВыходныеИзделия цикл
		НоваяЗапись = РегистрыСведений.ОсновныеСпецификацииНоменклатуры.СоздатьМенеджерЗаписи();
		НоваяЗапись.Период                     = ДатаЗаписи;
		НоваяЗапись.Номенклатура               = стр_вых.Номенклатура;
		НоваяЗапись.ХарактеристикаНоменклатуры = стр_вых.ХарактеристикаНоменклатуры;
		НоваяЗапись.СпецификацияНоменклатуры   = Ссылка;
		НоваяЗапись.Записать(Истина);
	КонецЦикла;
	ОбновитьНадписьОсновнаяСпецификация(ДатаЗаписи);

КонецПроцедуры // ДействияФормыУстановитьОсновнуюСпецификациюНаДату()

////////////////////////////////////////////////////////////////////////////////
// ОСНОВНОЙ ТЕКСТ МОДУЛЯ

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");

мКолонкиВыходныеИзделия 	  = ЭлементыФормы.ВыходныеИзделия.Колонки;
мКолонкиВозвратныеОтходы 	  = ЭлементыФормы.ВозвратныеОтходы.Колонки;

ИзмененоИспользоватьВидНорматива = Ложь;
ИзмененоИспользоватьВидВоспроизводства = Ложь;
ИзмененоИспользоватьУказаниеНорматива = Ложь;
ИзмененоИспользоватьФормулы = Ложь;
ИзмененоИспользоватьУправлениеСписанием = Ложь;

мИспользуютсяХарактеристикиНоменклатуры = Константы.ИспользоватьХарактеристикиНоменклатуры.Получить();

ЭлементыФормы.ВозвратныеОтходы.Колонки.ВидНорматива.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыНормативовНоменклатуры.Номенклатура);
Если мИспользуютсяХарактеристикиНоменклатуры Тогда
	ЭлементыФормы.ВозвратныеОтходы.Колонки.ВидНорматива.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры);
	ЭлементыФормы.ВозвратныеОтходы.Колонки.ВидНорматива.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики);
КонецЕсли;

ЭлементыФормы.ИсходныеКомплектующие.Колонки.ВидНорматива.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыНормативовНоменклатуры.Номенклатура);
ЭлементыФормы.ИсходныеКомплектующие.Колонки.ВидНорматива.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыНормативовНоменклатуры.Узел);
Если мИспользуютсяХарактеристикиНоменклатуры Тогда
	ЭлементыФормы.ИсходныеКомплектующие.Колонки.ВидНорматива.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры);
	ЭлементыФормы.ИсходныеКомплектующие.Колонки.ВидНорматива.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики);
КонецЕсли;

ЭлементыФормы.ИсходныеКомплектующиеУзел.Колонки.ВидНорматива.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыНормативовНоменклатуры.Номенклатура);
ЭлементыФормы.ИсходныеКомплектующиеУзел.Колонки.ВидНорматива.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыНормативовНоменклатуры.Узел);
Если мИспользуютсяХарактеристикиНоменклатуры Тогда
	ЭлементыФормы.ИсходныеКомплектующиеУзел.Колонки.ВидНорматива.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыНормативовНоменклатуры.АвтоподборНоменклатуры);
	ЭлементыФормы.ИсходныеКомплектующиеУзел.Колонки.ВидНорматива.ЭлементУправления.СписокВыбора.Добавить(Перечисления.ВидыНормативовНоменклатуры.АвтоподборХарактеристики);
КонецЕсли;

мЖирныйШрифт = Новый Шрифт(,, Истина);