////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мТекущийРаботник; 
Перем мВалютаУправленческогоУчета Экспорт;

// для синхронизации строк табличных полей
Перем мСтрокаРаботникиУстановлена;
Перем мСтрокаНачисленияУстановлена;
Перем мСинхронизируемыеТабличныеЧасти;
Перем мСведенияОВидахРасчета;
Перем мСписокНедоступныхРасчетов;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мТекущееПодразделение;
Перем мТекущаяДолжность;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Работники,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанель1.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Взыскания,ЭлементыФормы.КоманднаяПанель2.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОформитьСтрокиНачисленийВзысканий(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета, Элемент.Данные = "Начисления");	
	КонецЦикла;

КонецПроцедуры // ОформитьСтрокиНачисленийВзысканий

// удаляет начисления по работнику, все или автоматически заполняемые
// Параметры:
//   Сотрудник  - СправочникСсылка.СотрудникиОрганизации
//   УдалятьВсе - булево, если Истина - удаляются все начисления по физлицу,
//				например, при его удалении из сиска.
//				Если Ложь - удалаются только те, которые вводятся "автоматически",
//				например, при редактировании данных по строке табличной части 
//				со списком работников
//
Процедура УдалитьНачисленияПоРаботнику(Сотрудник)
	
	СтруктураПоиска = Новый Структура("Физлицо", Сотрудник.Физлицо);
	
	// удалять начисления будем в том случае, когда в т.ч. Работники эта строка с сотрудником - последняя
	Если Работники.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// удаляем начисления физлица...
	Строки = Начисления.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТабличнойЧасти из Строки Цикл
		Начисления.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	// ...и взыскания
	Строки = Взыскания.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТабличнойЧасти из Строки Цикл
		Взыскания.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	КадровоеПеремещениеПереопределяемый.УдалитьДополнительноПоСтроке(ЭтаФорма, Сотрудник);
		
КонецПроцедуры // УдалитьНачисленияПоРаботнику()

Процедура ВнестиДанныеПоСотруднику(ИзменятьКадровыеДанные = Ложь)
		
	УдалитьНачисленияПоРаботнику(мТекущийРаботник);
		
	ДанныеСтроки = ЭтаФорма.ЭлементыФормы.Работники.ТекущиеДанные;
	
	Если ИзменятьКадровыеДанные Тогда
		
		СведенияПоСотруднику = ПроцедурыУправленияПерсоналомДополнительный.СведенияПоВыбранномуРаботнику(ДанныеСтроки.Сотрудник, "Работники, УчетЗаработкаРаботников");
		
		Если ЗначениеЗаполнено(СведенияПоСотруднику) Тогда
			ДанныеСтроки.Физлицо						= ДанныеСтроки.Сотрудник.Физлицо;
			ДанныеСтроки.НовоеПодразделение				= СведенияПоСотруднику.Подразделение;
			ДанныеСтроки.НоваяДолжность					= СведенияПоСотруднику.Должность;
			ДанныеСтроки.ГрафикРаботы					= СведенияПоСотруднику.ГрафикРаботы;
			Если ЗначениеЗаполнено(СведенияПоСотруднику.ЗанимаемыхСтавок) Тогда
				ДанныеСтроки.ЗанимаемыхСтавок	= СведенияПоСотруднику.ЗанимаемыхСтавок;
			КонецЕсли;
			ДанныеСтроки.СпособОтраженияВУпрУчете		= СведенияПоСотруднику.СпособОтраженияВУпрУчете;
			ДанныеСтроки.УчетНачисленийПоОрганизации	= СведенияПоСотруднику.УчетНачисленийПоОрганизации;
			
		КонецЕсли;
	КонецЕсли;
	
	ДобавитьНачисленияПоСтроке(ДанныеСтроки);
	
КонецПроцедуры //ВнестиДанныеПоСотруднику

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	УчетРасходовНаПерсоналПереопределяемый.ПередОткрытиемФормыКадровогоДокументаДополнительно(ЭтаФорма);
	
	КадровоеПеремещениеПереопределяемый.ФормаДокументаПередОткрытиемДополнительно(ЭтаФорма, Новый Действие("ДополнительныеДействия"), Новый Структура("ПриИзменении", Новый Действие("ДополнительныйОбработчикПриИзменении")));
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
	Иначе		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ДатаНачала");

	// Установить ограничение - изменять видимость колонок для табличной части 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Работники.Колонки, СтруктураКолонок);

	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("Показатель1");
		
	// Установить ограничение - изменять видимость колонок для табличной части 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы Состояние документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мТекущийРаботник = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.СотрудникиОрганизаций");
	
	ЕстьВалютныеПоказатели =  глЗначениеПеременной("глЕстьВалютныеПоказатели");
	Для Сч = 1 По 6 Цикл
		ЭлементыФормы.Начисления.Колонки["Валюта"+Сч].Видимость = ЕстьВалютныеПоказатели;
		ЭлементыФормы.Взыскания.Колонки["Валюта"+Сч].Видимость = ЕстьВалютныеПоказатели;
	КонецЦикла;
	
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Работники.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));
	
	// Активизируем табличную часть
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Работники;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			ВременнаяТаблица = ЗначениеВыбора.Данные.Выгрузить();
			Работники.Загрузить(ВременнаяТаблица);
			// перенесем значения колонок "Подразделение" и "Должность" в колонки "НовоеПодразделение" и "НоваяДолжность"
			Работники.ЗагрузитьКолонку(ВременнаяТаблица.ВыгрузитьКолонку("Подразделение"), "НовоеПодразделение");
			Работники.ЗагрузитьКолонку(ВременнаяТаблица.ВыгрузитьКолонку("Должность"), 	"НоваяДолжность");
			ЗаполнениеПоСхемамМотивации();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Вывести в заголовке формы Состояние документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
	// оповестим журналы о записи нового управленческого документа
	Оповестить("ЗаписанНовыйДокументУправленческогоУчета", Ответственный, Ссылка);
	
	МассивСотрудников = Работники.ВыгрузитьКолонку("Сотрудник");
	Оповестить("ПеречитатьСотрудников", МассивСотрудников);
	
	Физлица = Работники.ВыгрузитьКолонку("Физлицо");
	Оповестить("ИзмененоМестоРаботыКомпании", Физлица);
	Оповестить("ОбновитьСписокПлановыхНачисленийУдержанийКомпании", Физлица);

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("СправочникСсылка.СотрудникиОрганизаций") ИЛИ Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ПодборОтменаВыбора" Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", Параметр);
		НайденныеСтроки = Источник.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Источник.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "КадровоеПеремещениеОрганизаций" меню "ВводНаОсновании"
//
Процедура ДействияФормыКадровоеПеремещениеОрганизацийВводНаОсновании(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналомДополнительный.ВводРегламентированногоКадровогоДокументаНаОсновании(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе меню "Заполнить по схемам мотивации".
// командной панели формы, закладки "Начисления".
//
Процедура КоманднаяПанель1СхемыМотиваций(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "заполнить") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	ЗаполнениеПоСхемамМотивации("Начисления");
	
КонецПроцедуры

// Процедура вызывается при выборе меню "Заполнить по схемам мотивации".
// командной панели формы, закладки "Взыскания".
//
Процедура КоманднаяПанель2СхемыМотиваций(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "заполнить") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;

	ЗаполнениеПоСхемамМотивации("Взыскания");
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если Работники.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

	КонецЕсли;
		
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, "Работники", , )
	
КонецПроцедуры

// Процедура - обработчик события нажатия кнопки "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	МДРеквизиты = Метаданные().ТабличныеЧасти.Работники.Реквизиты;
	
	ПараметрыПодбора = Новый Массив;
	ПараметрыПодбора.Добавить(МДРеквизиты.ДатаНачала);
	ПараметрыПодбора.Добавить(МДРеквизиты.НовоеПодразделение);
	ПараметрыПодбора.Добавить(МДРеквизиты.НоваяДолжность);
	ПараметрыПодбора.Добавить(МДРеквизиты.ГрафикРаботы);
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(ЭлементыФормы.Работники, Ссылка, Ложь, Дата, , , , ПараметрыПодбора);
	
КонецПроцедуры

Процедура ДополнительныеДействия(Кнопка)
	
	КадровоеПеремещениеПереопределяемый.ВыполнитьДополнительныеДействия(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ДополнительныйОбработчикПриИзменении(Элемент)
	
	КадровоеПеремещениеПереопределяемый.ОбработатьДополнительноПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
// Параметры:
//  Элемент      - элемент формы, который отображает дату документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "Работники"

// Процедура - обработчик события "АктивизацииЯчейки" строки ТЧ
Процедура РаботникиПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущаяКолонка = Элемент.ТекущаяКолонка;
	Если ТекущаяКолонка.Имя = "НовоеПодразделение" Или ТекущаяКолонка.Имя = "НоваяДолжность" Тогда
		
		ИмяПервойКолонки = ?(ТекущаяКолонка.Имя = "НовоеПодразделение","Подразделение","Должность");
		ИмяВторойКолонки = ?(ТекущаяКолонка.Имя = "НовоеПодразделение","НоваяДолжность","НовоеПодразделение");
		
		СписокЗначений = ПроцедурыУправленияПерсоналомДополнительный.ВыбратьИзКадровогоПланаПредприятия(ИмяПервойКолонки, Элемент.ТекущиеДанные[ИмяВторойКолонки]);
		КоличествоЗначений = СписокЗначений.Количество();
		
		ПолеВвода = ТекущаяКолонка.ЭлементУправления;
		ПолеВвода.СписокВыбора = СписокЗначений;
		ПолеВвода.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ПолеВвода.ВысотаСпискаВыбора = Мин(10, КоличествоЗначений);
		
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломДобавления" строки ТЧ
Процедура РаботникиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда		
		
		// чтобы исключить возможность ввода одного и того же работника несколько раз
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		
		НоваяСтрока								= Работники.Добавить();
		НоваяСтрока.ДатаНачала					= ТекущаяСтрока.ДатаНачала;
		НоваяСтрока.ДатаОкончания				= ТекущаяСтрока.ДатаОкончания;
		НоваяСтрока.НапомнитьПоЗавершении		= ТекущаяСтрока.НапомнитьПоЗавершении;
		НоваяСтрока.НовоеПодразделение			= ТекущаяСтрока.НовоеПодразделение;
		НоваяСтрока.НоваяДолжность				= ТекущаяСтрока.НоваяДолжность;
		НоваяСтрока.ЗанимаемыхСтавок			= ТекущаяСтрока.ЗанимаемыхСтавок;		
		НоваяСтрока.ГрафикРаботы				= ТекущаяСтрока.ГрафикРаботы;
		НоваяСтрока.СпособОтраженияВУпрУчете	= ТекущаяСтрока.СпособОтраженияВУпрУчете;
		НоваяСтрока.УчетНачисленийПоОрганизации	= ТекущаяСтрока.УчетНачисленийПоОрганизации;
		
		Элемент.ТекущаяСтрока = НоваяСтрока;
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением" строки ТЧ, удаляет строки из ТЧ "Начисления"
Процедура РаботникиПередУдалением(Элемент, Отказ)

	УдалитьНачисленияПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	
	Если Не Отказ Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповестить("ПодборОтменаВыбора", ДанныеСтроки.Сотрудник);
	КонецЕсли;	
	
КонецПроцедуры

Процедура РаботникиПослеУдаления(Элемент)

	КадровоеПеремещениеПереопределяемый.ФормаДокументаРаботникиПослеУдаленияСтрокиДополнительно(ЭтаФорма);
	
КонецПроцедуры

// Процедура обеспечивает начальное значение реквизита "ЗанимаемыхСтавок" и 
//  "ГрафикРаботы".
//
// Параметры:
//  Элемент      - табличное поле, которое отображает т.ч.
//  НоваяСтрока  - булево, признак редактирования новой строки
//  
Процедура РаботникиПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ЗанимаемыхСтавок) Тогда
			Элемент.ТекущаяСтрока.ЗанимаемыхСтавок = 1;
		КонецЕсли;
	КонецЕсли;
	
	мТекущийРаботник = Элемент.ТекущаяСтрока.Сотрудник;
	
КонецПроцедуры

Процедура РаботникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
			
	Если НоваяСтрока И ОтменаРедактирования Тогда
		УдалитьНачисленияПоРаботнику(мТекущийРаботник);
	КонецЕсли;

КонецПроцедуры

// Процедура обеспечивает заполнение колонок данных "до" перемещения 
//
// Параметры:
//	Элемент			- табличное поле, которое отображает т.ч.
//	НоваяСтрока		- булево, признак редактирования новой строки
//
Процедура РаботникиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		ДанныеСтроки = СтрокаТабличнойЧасти.ДанныеСтроки;
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = ДанныеСтроки.Сотрудник;
		НоваяСтрока.ДатаНачала = ДанныеСтроки.ДатаНачала;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.ДатаНачала
	|ПОМЕСТИТЬ ВТ_ТаблицаСотрудников
	|ИЗ
	|	&ТаблицаСотрудников КАК Сотрудники";
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников",	ТаблицаСотрудников);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Выборка = КадровоеПеремещениеПереопределяемый.СформироватьЗапросПоДаннымРаботникаДоНазначения(Запрос, Ссылка).Выбрать();
	
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		
		ДанныеСтроки = СтрокаТабличнойЧасти.ДанныеСтроки;
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(ДанныеСтроки.Сотрудник, "Сотрудник") Тогда
			СтрокаТабличнойЧасти.Ячейки.СтароеПодразделение.УстановитьТекст(Выборка.Подразделение);
			СтрокаТабличнойЧасти.Ячейки.СтараяДолжность.УстановитьТекст(Выборка.Должность);
			СтрокаТабличнойЧасти.Ячейки.СтараяСтавка.УстановитьТекст(Формат(Выборка.ЗанимаемыхСтавок,"ЧЦ=4;ЧДЦ=2"));
			КадровоеПеремещениеПереопределяемый.ДозаполнитьСтрокуДаннымиРаботникаДоНазначения(СтрокаТабличнойЧасти, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Работники, ОформленияСтрок);
	
	КадровоеПеремещениеПереопределяемый.ФормаДокументаРаботникиПриПолученииДанныхДополнительно(ЭлементыФормы.Работники, ОформленияСтрок);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода приказа  о приёме работника организации
Процедура РаботникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
			
		Если Работники.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Работники.Добавить();
			ЭлементыФормы.Работники.ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтрокаТабличнойЧасти.Сотрудник = ВыбранноеЗначение;
			ВнестиДанныеПоСотруднику(Истина);
			мТекущийРаботник = ВыбранноеЗначение;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
			
		Для Каждого Сотрудник Из ВыбранноеЗначение.Сотрудники Цикл
			Если Работники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник)).Количество() = 0 Тогда
				СтрокаТабличнойЧасти = Работники.Добавить();
				СтрокаТабличнойЧасти.Сотрудник = Сотрудник;
				Для Каждого Параметр Из ВыбранноеЗначение.ПараметрыПодбора Цикл
					Если ЗначениеЗаполнено(Параметр.Значение) Тогда
						СтрокаТабличнойЧасти[Параметр.Ключ]	= Параметр.Значение;
					КонецЕсли;
				КонецЦикла;
				ЭлементыФормы.Работники.ТекущаяСтрока = СтрокаТабличнойЧасти;
				ВнестиДанныеПоСотруднику(Истина);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры  // ТабличнаяЧастьОбработкаВыбора

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Работники"

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица.
// Добавляет строку по начислению в ТЧ "Начисления" по физическому лицу.
Процедура РаботникиСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.Работники.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	
	ВнестиДанныеПоСотруднику(Истина);
	
	мТекущийРаботник = Элемент.Значение;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура РаботникиСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура РаботникиСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = Работники.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 Тогда
		Предупреждение("В данном документе по одному сотруднику можно вводить только одну строку!");
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбранноеЗначение;
	ЭлементыФормы.Работники.ТекущиеДанные.ФизЛицо = Неопределено;
	
	ВнестиДанныеПоСотруднику(Истина);
		
	мТекущийРаботник = ВыбранноеЗначение;
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение);
	
КонецПроцедуры

// Процедура обеспечивает нестандартный шаг регулирования 
//
// Параметры:
//  Элемент      - элемент формы, который отображает занимаемые ставки.
//  Направление  - число, определяет, какая из кнопок регулирования была нажата.
//  СтандартнаяОбработка - булево, признак выполнения системной обработки события.
//  
Процедура РаботникиЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Направление = 1 Тогда // увеличиваем значение
		ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок = ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок + 0.5
	Иначе // = -1 - уменьшаем значение
		ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок = ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок - 0.5
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НовоеПодразделение" -  
// подбирает схему мотивации
//
// Параметры:
//  Элемент - элемент формы, который отображает "Подразделение"
//
Процедура РаботникиНовоеПодразделениеПриИзменении(Элемент)
	
	ВнестиДанныеПоСотруднику(Ложь);
	
	мТекущееПодразделение = ЭлементыФормы.Работники.ТекущиеДанные.НовоеПодразделение;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "НоваяДолжность" -  
// подбирает схему мотивации
//
// Параметры:
//  Элемент - элемент формы, который отображает "НоваяДолжность"
//
Процедура РаботникиНоваяДолжностьПриИзменении(Элемент)
	
	ВнестиДанныеПоСотруднику(Ложь);
	
	мТекущаяДолжность = ЭлементыФормы.Работники.ТекущиеДанные.НоваяДолжность;

КонецПроцедуры

Процедура РаботникиПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		мТекущееПодразделение = Неопределено;
	Иначе
		мТекущееПодразделение = Элемент.ТекущиеДанные.НовоеПодразделение;
	КонецЕсли;

КонецПроцедуры

Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ОформитьСтрокиНачисленийВзысканий(Элемент, ОформленияСтрок);
	
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
// или формой выбора в.р.
//
Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") Тогда
		Элемент.ТекущиеДанные.ВидРасчета = ВыбранноеЗначение;
		РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Начисления",ВыбранноеЗначение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);
	КонецЕсли;
	
КонецПроцедуры // ТабличнаяЧастьОбработкаВыбора

// Процедура - обработчик события "ПриНачалеРедактирования" строки ТЧ
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда 
		Элемент.ТекущаяСтрока.Действие = Перечисления.ВидыДействияСНачислением.Начать;
	КонецЕсли;
	
КонецПроцедуры

Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияНачисленияПриАктивизацииСтроки", 0.05, Истина);
	
КонецПроцедуры // НачисленияПриАктивизацииСтроки

Процедура ОбработчикОжиданияНачисленияПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Начисления, мСведенияОВидахРасчета);

КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Начисления"

Процедура НачисленияСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физического лица -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура НачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура НачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Начисления",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);	
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода вида расчета
//
Процедура НачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УправленческиеНачисления", "Не (Ссылка В(&СпВидовРасчета))", Новый Структура("СпВидовРасчета", мСписокНедоступныхРасчетов), СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ПОЛЯ "Взыскания"

// Процедура - обработчик события "НачалоВыбора" поля ввода физического лица -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура ВзысканияФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ВзысканияФизлицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВзысканияФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВзысканияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ОформитьСтрокиНачисленийВзысканий(Элемент, ОформленияСтрок);
	
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
// или формой выбора в.р.
//
Процедура ВзысканияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") Тогда
		Элемент.ТекущиеДанные.ВидРасчета = ВыбранноеЗначение;		
		РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Взыскания",ВыбранноеЗначение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" строки ТЧ
Процедура ВзысканияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда 
		Элемент.ТекущаяСтрока.Действие = Перечисления.ВидыДействияСНачислением.Начать;
	КонецЕсли;

КонецПроцедуры

Процедура ВзысканияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияВзысканияПриАктивизацииСтроки", 0.05, Истина);
	
КонецПроцедуры // ВзысканияПриАктивизацииСтроки

Процедура ОбработчикОжиданияВзысканияПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Взыскания, мСведенияОВидахРасчета);

КонецПроцедуры // ОбработчикОжиданияВзысканияПриАктивизацииСтроки

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Взыскания"

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура ВзысканияВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Взыскания",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);

КонецПроцедуры


// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ВзысканияФизлицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст, ,Истина, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ВзысканияФизлицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение, , Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода вида расчета
//
Процедура ВзысканияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УправленческиеУдержания", "Не (Ссылка В(&СпВидовРасчета))", Новый Структура("СпВидовРасчета", мСписокНедоступныхРасчетов), СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСтрокаРаботникиУстановлена  = Ложь;
мСтрокаНачисленияУстановлена = Ложь;

мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();

мСведенияОВидахРасчета = Новый Соответствие;

мСписокНедоступныхРасчетов = Новый СписокЗначений;
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["Работники"]  = Ложь;
мСинхронизируемыеТабличныеЧасти["Начисления"] = Ложь;
мСинхронизируемыеТабличныеЧасти["Взыскания"] = Ложь;