// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 

// Хранит валюту документа основания
Перем мВалютаДокумента;

Перем мВидимостьЗакладкиУслуг;

Перем мКолонкиТовары, мКолонкиУслуги, мКолонкиВозвратнаяТара, мКолонкиОборудование, мКолонкиМатериалы;
Перем мРазрешитьНулевыеЦеныВОпте;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Оборудование,ЭлементыФормы.КоманднаяПанельОборудование.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Материалы,ЭлементыФормы.КоманднаяПанельМатериалы.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Выполняет необходимые действия при изменении вида склада.
//
Процедура ПриИзмененииВидаСклада()

	// Определим текущий вид склада
	Если НЕ ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		ВидСклада = Неопределено;
	Иначе
		ВидСклада = ЗаказПоставщику.Склад.ВидСклада;
	КонецЕсли;

	// Оформление колонок таблицы
	ФлагАвтоОтметкиНезаполненого = Истина;

	Если (ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ НЕ ЗначениеЗаполнено(ВидСклада)) И мРазрешитьНулевыеЦеныВОпте Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	КонецЕсли;

	мКолонкиТовары.Сумма.АвтоОтметкаНезаполненного               = ФлагАвтоОтметкиНезаполненого;
	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного                = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Сумма.АвтоОтметкаНезаполненного       = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Цена.АвтоОтметкаНезаполненного        = ФлагАвтоОтметкиНезаполненого;
	мКолонкиУслуги.Сумма.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	мКолонкиУслуги.Цена.АвтоОтметкаНезаполненного  = ФлагАвтоОтметкиНезаполненого;

КонецПроцедуры // ПриИзмененииВидаСклада()

// Процедура заполняет единицу и цену по ценам покупки в строке табличной части документа
//
// Параметры:
//  СтрокаТабличнойЧасти           - строка табличной части документа,
//  ДокументОбъект                 - объект редактируемого документа.
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//  ПересчитыватьНалогиВЦене       - булево, определяет необходимость пересчета цен по флагам налогов в документе,
//                                   необязательный, по умолчанию Истина.
//
Процедура ЗаполнитьЕдиницуЦенуПокупкиТабЧастиКоректировки(СтрокаТабличнойЧасти, СтруктураШапкиДокумента, ПересчитыватьНалогиВЦене = Истина)

	Перем Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС;

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);

	МетаданныеДокумента = ЭтотОбъект.Метаданные();

	ХарактеристикаНоменклатуры = ОбработкаТабличныхЧастей.ПолучитьЗначениеРеквизитаТЧ(МетаданныеДокумента, ИмяТабличнойЧасти, СтрокаТабличнойЧасти, "ХарактеристикаНоменклатуры");

	СтруктураШапкиДокумента.Свойство("Контрагент", Контрагент);
	СтруктураШапкиДокумента.Свойство("ТипЦен", ТипЦен);
	СтруктураШапкиДокумента.Свойство("ДоговорКонтрагента", ДоговорКонтрагента);
	СтруктураШапкиДокумента.Свойство("ДатаДокумента", ДатаДокумента);
	СтруктураШапкиДокумента.Свойство("ВалютаДокумента",ВалютаДокумента); 
	СтруктураШапкиДокумента.Свойство("УчитыватьНДС", УчитыватьНДС);
	СтруктураШапкиДокумента.Свойство("СуммаВключаетНДС", СуммаВключаетНДС);
	
	// Из регистра сведений ЦеныКонтрагентов по измерениям Контрагент, Номенклатура, ТипЦен получить ресурсы, 
	// установить коэффициент.

	// определяем имя табличной части, из которой вызывается процедура
	ИмяТабличнойЧасти = Метаданные.НайтиПоТипу(ТипЗнч(СтрокаТабличнойЧасти)).Имя;
	
	// Если не заданы значения измерений, то устанавливаем по справочнику
	Если НЕ ЗначениеЗаполнено(Контрагент)
	 ИЛИ НЕ ЗначениеЗаполнено(ТипЦен)
	 ИЛИ НЕ ЗначениеЗаполнено(ЗаказПоставщику) Тогда 

		// берем из самого реквизита Номенклатура
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.Цена		 = 0;

	Иначе
		// из регистра
		Цена = Ценообразование.ПолучитьЦенуКонтрагента(СтрокаТабличнойЧасти.Номенклатура, ХарактеристикаНоменклатуры, Контрагент,
		                                 ТипЦен, ДатаДокумента, СтрокаТабличнойЧасти.ЕдиницаИзмерения, 
		                                 ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЗаказПоставщику, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЗаказПоставщику, мВалютаРегламентированногоУчета),
		                                 ДоговорКонтрагента, УсловиеПродаж);

		// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения
		Если НЕ ЗначениеЗаполнено(Цена) Тогда
			СтрокаТабличнойЧасти.Цена = 0;
		Иначе

			Если ПересчитыватьНалогиВЦене Тогда
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена, 
				            Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов, 
				            ТипЦен.ЦенаВключаетНДС,
				            УчитыватьНДС, СуммаВключаетНДС, 
				            УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли; 
		КонецЕсли;  

		// Если единица оказалась не заполненной, то заполняем ее основной единицей номеклатуры
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмерения	 = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
		КонецЕсли; 
		
		СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	КонецЕсли;

	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// если в документе существует реквизит КоличествоМест, то рассчитанная цена идет за него
	// вычислим цену за базовую единицу
	Если СтрокаТабличнойЧасти.Коэффициент > 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена / СтрокаТабличнойЧасти.Коэффициент;
	КонецЕсли;

КонецПроцедуры // ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти()

// Функция получения спецификации по умолчанию.
//
Функция ПолучитьСпецификацию( Номенклатура, ХарНоменклатуры)
	
	Если ЗначениеЗаполнено(ЗаказПоставщику)
		  И ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		Возврат УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию( Номенклатура, ХарНоменклатуры, Дата);
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции // ПолучитьСпецификацию()

// Заполняет текст надписи на форме по данным реквизита шапки, который есть в форме документа.
// Источник - <рекзит документа> - Имя ревизита шапки текущего документа
// ИмяПолучателя - <строка> - имя надписи на форме
// ИмяРеквизитаИзИсточника - <строка> - значение реквизита, которое мы хотим получить в тексте надписи из источника
// ТекстЗаголовкаПриНезаполненномИсточнике - <Строка> - текст, который будет отбражён, если Источник не выбран
//
Процедура ЗаполнитьТекстПоРеквизиту(Источник, ИмяПолучателя, ИмяРеквизитаИзИсточника, ТекстЗаголовкаПриНезаполненномИсточнике)
	Если НЕ ЗначениеЗаполнено(Источник) Тогда
		ЭлементыФормы[ИмяПолучателя].Заголовок = "Не выбран заказ";
		ЭлементыФормы[ИмяПолучателя].Гиперссылка = ложь;
	ИначеЕсли НЕ ЗначениеЗаполнено(Источник[ИмяРеквизитаИзИсточника]) Тогда
		ЭлементыФормы[ИмяПолучателя].Заголовок = ТекстЗаголовкаПриНезаполненномИсточнике;
		ЭлементыФормы[ИмяПолучателя].Гиперссылка = ложь;
	Иначе
		ЭлементыФормы[ИмяПолучателя].Заголовок = Строка(Источник[ИмяРеквизитаИзИсточника]);
		ЭлементыФормы[ИмяПолучателя].Гиперссылка = истина;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТекстПоРеквизиту()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)
	
	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары И ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		СписокЗапросов.Добавить("ПриходЦеныКонтрагента", "По ценам контрагента");
		СписокЗапросов.Добавить("ПриходНоменклатураКонтрагента", "По номенклатуре контрагента");
	КонецЕсли;

	Возврат СписокЗапросов;
	
КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	// Параметры запросов.
	ЕстьЦена               = Истина;
	ЕстьСерия              = Ложь;
	ПодбиратьУслуги        = Ложь;
	СкрыватьХарактеристику = Ложь;
	Валюта                 = ЗаказПоставщику.ВалютаДокумента;
	Если ТабличнаяЧасть = Товары Тогда
		Команда                = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти      = "Товары";
	ИначеЕсли ТабличнаяЧасть = Оборудование Тогда
		Команда                = "ПодборВТабличнуюЧастьОборудование";
		ИмяТабличнойЧасти      = "Оборудование";
	ИначеЕсли ТабличнаяЧасть = Материалы Тогда
		Команда                = "ПодборВТабличнуюЧастьМатериалы";
		ИмяТабличнойЧасти      = "Материалы";
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		Команда                = "ПодборВТабличнуюЧастьУслуги";
		ИмяТабличнойЧасти      = "Услуги";
		ПодбиратьУслуги        = Истина;
		СкрыватьХарактеристику = Истина;
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		Команда                = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ИмяТабличнойЧасти      = "Тара";
	КонецЕсли;

	СкладДляЗапроса       = ЗаказПоставщику.Склад;
	КонтрагентДляЗапроса  = ЗаказПоставщику.Контрагент;
	ДоговорДляЗапроса     = ЗаказПоставщику.ДоговорКонтрагента;
	ОрганизацияДляЗапроса = ЗаказПоставщику.Организация;
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СписокВидовПодбора    = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок      = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"               , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"    , СписокВидовПодбора);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"          , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                 , СкладДляЗапроса);
	СтруктураПараметровПодбора.Вставить("ТипЦен"                , ТипЦен);
	СтруктураПараметровПодбора.Вставить("Контрагент"            , КонтрагентДляЗапроса);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"    , ДоговорДляЗапроса);
	СтруктураПараметровПодбора.Вставить("Организация"           , ОрганизацияДляЗапроса);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"   , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"              , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"             , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"       , Валюта);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"       , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("СкрыватьХарактеристику", СкрыватьХарактеристику);
	СтруктураПараметровПодбора.Вставить("Заголовок"             , "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);

	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = Материалы ИЛИ ТабличнаяЧасть = ВозвратнаяТара ИЛИ ТабличнаяЧасть = Оборудование)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары
	 ИЛИ ТабличнаяЧасть = Материалы
	 ИЛИ ТабличнаяЧасть = Оборудование Тогда
	 
		СтруктураОтбора.Вставить("ЕдиницаИзмерения",           ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара
		  ИЛИ ТабличнаяЧасть = Услуги Тогда
		  
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитываем плановую себестоимость.
			ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

			// Итоговая информация об отклонение от плановой себестоимости
			РаботаСДиалогами.СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);
			
		ИначеЕсли ТабличнаяЧасть = Оборудование ИЛИ ТабличнаяЧасть = Материалы Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			Если ТабличнаяЧасть = Оборудование Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара ИЛИ ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
		
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		
		Если ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
			Если ТабличнаяЧасть = Товары Тогда
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
				СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
				СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
				// Рассчитываем реквизиты табличной части.
				ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
				СтрокаТабличнойЧасти.Спецификация = ПолучитьСпецификацию( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);				
			ИначеЕсли ТабличнаяЧасть = Услуги Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
            КонецЕсли;
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");

			Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда 
				// Пересчитаем цену в валюту документа.
				КурсДокумента      = ?(ЗаказПоставщику.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
				КратностьДокумента = ?(ЗаказПоставщику.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);
					Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ЗаказПоставщику.ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата);

					СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
												Цена,
												СпособЗаполненияЦен,
												ТипЦен.ЦенаВключаетНДС,
												УчитыватьНДС,
												СуммаВключаетНДС,
												УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
											
			КонецЕсли;
										
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = Оборудование ИЛИ ТабличнаяЧасть = Материалы Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;

			// Заполняем реквизиты табличной части.
			Если Не ТабличнаяЧасть = Материалы Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти( СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");
			КонецЕсли;
            Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда 

				// Пересчитаем цену в валюту документа.
				КурсДокумента      = ?(ЗаказПоставщику.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
				КратностьДокумента = ?(ЗаказПоставщику.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);

				Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ЗаказПоставщику.ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата);

				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
						Цена,
						СпособЗаполненияЦен,
						ТипЦен.ЦенаВключаетНДС,
						УчитыватьНДС,
						СуммаВключаетНДС,
						УчетНДС.ПолучитьСтавкуНДС(Номенклатура.СтавкаНДС));

			Иначе
				СтрокаТабличнойЧасти.Цена = Цена;
			КонецЕсли;	
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			Если НЕ ТабличнаяЧасть = Материалы Тогда
				ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
            КонецЕсли;
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество = Количество;
            Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда
				// Пересчитаем цену в валюту документа.
				КурсДокумента      = ?(ЗаказПоставщику.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
				КратностьДокумента = ?(ЗаказПоставщику.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);
				Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ЗаказПоставщику.ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата);

				// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
				// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС, 
				// ставки берутся из номенклатуры.
				СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
							СпособЗаполненияЦен,
							ТипЦен.ЦенаВключаетНДС,
							УчитыватьНДС,
							Истина,
							УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));
				
			 Иначе
				 СтрокаТабличнойЧасти.Цена = Цена;
			 КонецЕсли;
			 
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	Если ТабличнаяЧасть = Товары Тогда
		ТабличнаяЧастьИмя = "Товары";
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		ТабличнаяЧастьИмя = "ВозвратнаяТара";
	ИначеЕсли ТабличнаяЧасть = Материалы Тогда
		ТабличнаяЧастьИмя = "Материалы";
	ИначеЕсли ТабличнаяЧасть = Оборудование Тогда
		ТабличнаяЧастьИмя = "Оборудование";
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		ТабличнаяЧастьИмя = "Услуги";
	КонецЕсли;
	
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть)

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		ТекстПредупреждения = "Не выбран заказ поставщику. Заполнение невозможно.";
	Иначе							  
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Представление());
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	ДатаОстатков = ?( ЭтоНовый(), ТекущаяДата(), Дата);
	Если ТабличнаяЧасть = Товары Тогда

		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить( "УчитыватьНДС",     УчитыватьНДС);
		ДопПараметры.Вставить( "СуммаВключаетНДС", СуммаВключаетНДС);
		ДопПараметры.Вставить( "ЗнакКоличества",   -1);
		
		Если ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
			ДопПараметры.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВПереработку);
		КонецЕсли;
		
		УправлениеЗаказами.ЗаполнитьТабЧастьТоварыПоЗаказуПоставщику( ЗаказПоставщику, Товары, УправлениеЗаказами.ОстаткиТоваровПоЗаказуПоставщику( ЗаказПоставщику, ЗаказПоставщику.ДоговорКонтрагента, ДатаОстатков, ДопПараметры), ДопПараметры);
		
		Для Каждого СтрокаТЧ Из Товары Цикл
			ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти( СтрокаТЧ, ЭтотОбъект, мВалютаРегламентированногоУчета);
		КонецЦикла;

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить( "УчитыватьНДС",     УчитыватьНДС);
		ДопПараметры.Вставить( "СуммаВключаетНДС", СуммаВключаетНДС);
		ДопПараметры.Вставить( "ЗнакКоличества",   -1);
		
		Если ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
			СтатусПартии = Перечисления.СтатусыПартийТоваров.ВПереработку;
		Иначе
			СтатусПартии = Перечисления.СтатусыПартийТоваров.Купленный;
		КонецЕсли;
		
		УправлениеЗаказами.ЗаполнитьТабЧастьУслугиПоЗаказу( ЗаказПоставщику, Услуги, ЗаказПоставщику, УправлениеЗаказами.ОстаткиУслугПоЗаказуПоставщику( ЗаказПоставщику, ЗаказПоставщику.ДоговорКонтрагента, ДатаОстатков, СтатусПартии), ДопПараметры);

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		ПараметрыОстатков = Новый Структура;
		ПараметрыОстатков.Вставить( "ТоварТара",    Перечисления.ТоварТара.Тара);
		ПараметрыОстатков.Вставить( "СтатусПартии", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить( "УчитыватьНДС",     УчитыватьНДС);
		ДопПараметры.Вставить( "СуммаВключаетНДС", СуммаВключаетНДС);
		ДопПараметры.Вставить( "ЗнакКоличества",   -1);
		ДопПараметры.Вставить( "ФлагЭтоТара",      Истина);
		
		УправлениеЗаказами.ЗаполнитьТабЧастьТоварыПоЗаказуПоставщику( ЗаказПоставщику, ВозвратнаяТара, УправлениеЗаказами.ОстаткиТоваровПоЗаказуПоставщику( ЗаказПоставщику, ЗаказПоставщику.ДоговорКонтрагента, ДатаОстатков, ПараметрыОстатков), ДопПараметры);


	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Заполняет переданную табличную часть копированием соответствующей заказа покупателя
//
// Параметры:
//  ТабличнаяЧасть - табличная часть документа.
//
Процедура СкопироватьСостав(ТабличнаяЧасть)

	КопироватьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		ТекстПредупреждения = "Не выбрана заказ поставщику. Заполнение невозможно.";
	Иначе							  
		КопироватьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не КопироватьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, , Метаданные().Представление());
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		СкопироватьТовары();
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		СкопироватьВозвратнуюТару();
	ИначеЕсли ТабличнаяЧасть = Оборудование Тогда
		СкопироватьОборудование();
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СкопироватьУслуги();
	ИначеЕсли ТабличнаяЧасть = Материалы Тогда
		СкопироватьМатериалы();
	КонецЕсли;
	
КонецПроцедуры // СкопироватьСостав()

// Процедура - обработчик события "Нажатие" надписи о контрагенте.
//   Процедура открывает форму элемента справочника "Контрагенты"
// для реквизита Контрагент документа заказа.
//
Процедура ГиперссылкаКонтрагетНажатие(Элемент)

	Если ЗначениеЗаполнено(ЗаказПоставщику.Контрагент) Тогда
		ЗаказПоставщику.Контрагент.ПолучитьФорму( , ЭтаФорма, ).Открыть();
	КонецЕсли;

КонецПроцедуры // ГиперссылкаКонтрагетНажатие()

// Процедура - обработчик события "Нажатие" надписи об организации.
Процедура ГиперссылкаОрганизацииНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ЗаказПоставщику.Организация) Тогда
		ЗаказПоставщику.Организация.ПолучитьФорму( , ЭтаФорма, ).Открыть();
	КонецЕсли;
	
КонецПроцедуры // ГиперссылкаОрганизацииНажатие(Элемент)

// Процедура - обработчик события "Нажатие" надписи об организации.
Процедура ГиперссылкаСтруктурнаяЕдиницаНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ЗаказПоставщику.СтруктурнаяЕдиница) Тогда
		ЗаказПоставщику.СтруктурнаяЕдиница.ПолучитьФорму( , ЭтаФорма, ).Открыть();
	КонецЕсли;
	
КонецПроцедуры // ГиперссылкаОрганизацииНажатие(Элемент)

// Процедура - обработчик события "Нажатие" надписи о подразделении.
Процедура ГиперссылкаПодразделенияНажатие(Элемент)
	
	Если ЗначениеЗаполнено(ЗаказПоставщику.Подразделение) Тогда
		ЗаказПоставщику.Подразделение.ПолучитьФорму( , ЭтаФорма, ).Открыть();
	КонецЕсли;
	
КонецПроцедуры // ГиперссылкаПодразделениеНажатие(Элемент)

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти , ЭтотОбъект, "Приобретение"); 

	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         ЗаказПоставщику.Контрагент, ТипЦен, ЗаказПоставщику.ДоговорКонтрагента, Дата,ЗаказПоставщику.ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);

	ЗаполнитьЕдиницуЦенуПокупкиТабЧастиКоректировки(ЭлементыФормы.Товары.ТекущиеДанные, СтруктураШапкиДокумента, ); 
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, "Приобретение"); 
	
КонецПроцедуры

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатурыМатериалов(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

КонецПроцедуры // ПриИзмененииНоменклатурыМатериалов()

// Производит заполнение и установку необходимых полей при изменении характеристики товара в табличной части.
//
Процедура ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти)

	// Заполняем реквизиты табличной части.
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         ЗаказПоставщику.Контрагент, ТипЦен, ЗаказПоставщику.ДоговорКонтрагента, Дата,ЗаказПоставщику.ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);

	ЗаполнитьЕдиницуЦенуПокупкиТабЧастиКоректировки(СтрокаТабличнойЧасти, СтруктураШапкиДокумента,); 

КонецПроцедуры // ПриИзмененииХарактеристикиНоменклатурыТоваров()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> мКолонкиТовары.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиТовары.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиУслуги.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиУслуги.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиУслуги.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиОборудование.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиОборудование.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> мКолонкиОборудование.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиОборудование.СуммаНДС, УчитыватьНДС);
	КонецЕсли;

	
	// Видимость закладок.
	СтраницыПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	Если ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		СтраницыПанели.Материалы.Видимость = Истина;
		Если СтраницыПанели.Тара.Доступность Тогда
			СтраницыПанели.Тара.Видимость  = Ложь;
		КонецЕсли;
	Иначе
		СтраницыПанели.Материалы.Видимость = Ложь;
		Если СтраницыПанели.Тара.Доступность Тогда
			СтраницыПанели.Тара.Видимость  = Истина;
		КонецЕсли;
	КонецЕсли;

	Если ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Оборудование Тогда
		СтраницыПанели.Оборудование.Видимость = Истина;
	Иначе
		СтраницыПанели.Оборудование.Видимость = Ложь;
	КонецЕсли;
	
	ЗаказНаПереработку = (ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.Спецификация, ЗаказНаПереработку);

	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = мВидимостьЗакладкиУслуг;

	// Колонки плановой себестоимости показываем только тогда, когда с ней работаем.
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПлановаяСебестоимость,                         ИспользоватьПлановуюСебестоимость);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаПлановойСебестоимости,                    ИспользоватьПлановуюСебестоимость);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.СуммаОтклоненияОтСуммыПлановойСебестоимости,   ИспользоватьПлановуюСебестоимость);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиТовары.ПроцентОтклоненияОтСуммыПлановойСебестоимости, ИспользоватьПлановуюСебестоимость);
	ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости.Видимость = ИспользоватьПлановуюСебестоимость;

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает автоотметку незаполненного для тех колонок в табличной части 
// "Товары", обязательность заполнения которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьАвтоотметку()

	
КонецПроцедуры // УстановитьАвтоотментку()

// Процедура устанавливает заголовки по выбранному договору для:
// - колонок табличной части "Возвратная тара";
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	Если НЕ ЗначениеЗаполнено(ЗаказПоставщику) Тогда
		ЭлементыФормы.ИнфНадписьКурса.Заголовок = "Заказ не выбран. Информация о взаиморасчетах отсутствует.";
	Иначе
		ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
		                                                                                 КурсВзаиморасчетов,
		                                                                                 КратностьВзаиморасчетов,
		                                                                                 мВалютаРегламентированногоУчета,
		                                                                                 Истина);
	КонецЕсли;
КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	СумДок = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	Если ЗначениеЗаполнено(ЗаказПоставщику) И ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		СумДок = СумДок - УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Материалы");
	КонецЕсли;
	ЭлементыФормы.Всего   .Значение = ОбщегоНазначения.ФорматСумм(СумДок);
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьНДСДокумента(ЭтотОбъект));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(мВалютаДокумента))
	   И (мВалютаДокумента <> мВалютаРегламентированногоУчетаОрганизаций) Тогда
	   
		КурсДокумента      = ?(мВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
		КратностьДокумента = ?(мВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);

		ВременнаяСтрока = ВременнаяСтрока + КратностьДокумента
						+ " " +  мВалютаДокумента
		                + " = " + КурсДокумента
		                + мВалютаРегламентированногоУчетаОрганизаций + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.УсловиеПродаж) Тогда
		ВременнаяСтрока = ВременнаяСтрока + ", Условие продаж: " + ДокументОбъект.УсловиеПродаж;
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(мВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(мВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Процедура обновляет информацию в форме по выбранному заказу
//
// Параметры:
//  Нет.
//
Процедура ОбновитьИнформациюПоЗаказу()

	ЗаполнитьТекстПоРеквизиту(ЗаказПоставщику,"ГиперссылкаКонтрагента","Контрагент","Не выбран контрагент в заказе");
	ЗаполнитьТекстПоРеквизиту(ЗаказПоставщику,"ГиперссылкаПодразделения","Подразделение","Не выбрано подразделение в заказе");
	ЗаполнитьТекстПоРеквизиту(ЗаказПоставщику,"ГиперссылкаОрганизации","Организация","Не выбрана организация в заказе");
    ЗаполнитьТекстПоРеквизиту(ЗаказПоставщику,"ГиперссылкаСтруктурнаяЕдиница","СтруктурнаяЕдиница","Не выбран Б/счет, касса в заказе");

	мТекущаяВалютаВзаиморасчетов = ЗаказПоставщику.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Организация                  = ЗаказПоставщику.Организация;
	ВалютаДокумента              = ЗаказПоставщику.ВалютаДокумента;
	мВалютаДокумента             = ВалютаДокумента;

	// Итоговая информация об отклонение от плановой себестоимости
	РаботаСДиалогами.СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

КонецПроцедуры // ОбновитьИнформациюПоЗаказу()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка");
	КонецЕсли;

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(ЭтотОбъект.Метаданные().Синоним, ЭтотОбъект, ЭтаФорма);

	ОбновитьИнформациюПоЗаказу();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиОборудование);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);

	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);

	// Услуги на комиссию не принимаем.
	мВидимостьЗакладкиУслуг = ЗаказПоставщику.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	
	// Установить видимость реквизитов и заголовков колонок, а также автоотметку незаполненного
	УстановитьВидимость();
	УстановитьЗаголовкиПоДоговору();
	УстановитьАвтоотметку();
	ПриИзмененииВидаСклада();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Итоговая информация об отклонение от плановой себестоимости
	РаботаСДиалогами.СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если (КурсВзаиморасчетов = 0) ИЛИ (НЕ ЗначениеЗаполнено(ЗаказПоставщику)) Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		
		КурсДокумента      = ?(мВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
		КратностьДокумента = ?(мВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);
		
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
													мВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													КурсДокумента, КурсВзаиморасчетов,
													КратностьДокумента, КратностьВзаиморасчетов));
	КонецЕсли;

	ОбновитьПодвал();
	УстановитьЗаголовкиПоДоговору();

	// Подсчитаем количество строк в табличных частях.
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			Если ЗаказПоставщику.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
				СтраницаПанели.Заголовок = "Продукция (" + Товары.Количество() + " поз.)";
			Иначе
				СтраницаПанели.Заголовок = "Товары ("    + Товары.Количество() + " поз.)";
			КонецЕсли;
		ИначеЕсли СтраницаПанели.Имя = "Оборудование" Тогда
			СтраницаПанели.Заголовок = "Оборудование (" + ДокументОбъект.Оборудование.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Материалы" Тогда
			СтраницаПанели.Заголовок = "Материалы (" + ДокументОбъект.Материалы.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Услуги" Тогда
			СтраницаПанели.Заголовок = "Услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

	// Надпись НадписьСуммаВзаиморасчетов
	Если НЕ ЗначениеЗаполнено(мТекущаяВалютаВзаиморасчетов) Тогда
		ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма <нет валюты>:";
	Иначе	
		ЭлементыФормы.НадписьСуммаВзаиморасчетов.Заголовок = "Сумма " + СокрЛП(мТекущаяВалютаВзаиморасчетов) + ":";
	КонецЕсли;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			
			ОбработкаПодбора(Товары, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			
			ОбработкаПодбора(Материалы, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьОборудование" Тогда
			
			ОбработкаПодбора(Оборудование, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(ЭтотОбъект.Метаданные().Синоним, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, Ложь,
	                                                ТипЦен, Контрагент,
	                                                ЗаказПоставщику.ДоговорКонтрагента);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Оборудование" Тогда
		ОбработкаПодбора(Оборудование, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Материалы" Тогда
		ОбработкаПодбора(Материалы, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество,
	                                                ВалютаДокумента, Неопределено,
	                                                Ложь, ТипЦен, Контрагент,
	                                                ЗаказПоставщику.ДоговорКонтрагента);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Оборудование" Тогда
		ОбработкаПодбора(Оборудование, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Материалы" Тогда
		ОбработкаПодбора(Материалы, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при нажатии кнопки "Анализ" командной панели формы,
// вызывает анализ текущего состояния заказа.
//
Процедура ДействияФормыДействиеАнализ(Кнопка)
    УправлениеЗаказами.СформироватьОтчетАнализЗаказа(ЗаказПоставщику,ложь, истина);
КонецПроцедуры // ДействияФормыДействиеАнализ()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)
	
	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	
	КурсДокумента      = ?(ЗаказПоставщику.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КурсВзаиморасчетов);
	КратностьДокумента = ?(ЗаказПоставщику.ВалютаДокумента = мВалютаРегламентированногоУчета, 1, КратностьВзаиморасчетов);
	
	// Заполнить набор реквизитов, которые берутся не из текущего документа
	СтруктураРеквизитовДокумента.Вставить("Контрагент", ЗаказПоставщику.Контрагент);
	СтруктураРеквизитовДокумента.Вставить("ДоговорКонтрагента", ЗаказПоставщику.ДоговорКонтрагента);
	СтруктураРеквизитовДокумента.Вставить("ВалютаДокумента", ЗаказПоставщику.ВалютаДокумента);
	СтруктураРеквизитовДокумента.Вставить("КурсДокумента", КурсДокумента);
	СтруктураРеквизитовДокумента.Вставить("КратностьДокумента", КратностьДокумента);
	СтруктураРеквизитовДокумента.Вставить("ВызовКорректировкаЗаказа");

	// Сохраняем текущие заначения реквизитов документа.
	ТекущиеЗначенияРеквизитов = Новый Структура();
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийТипЦен",				ТипЦен);
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКурсДокумента",		КурсДокумента); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийКратностьДокумента",	КратностьДокумента); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийУчитыватьНДС",		УчитыватьНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийСуммаВключаетНДС",	СуммаВключаетНДС); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийВалютаДокумента",	ВалютаДокумента); 
	ТекущиеЗначенияРеквизитов.Вставить("ТекущийИспользоватьПлановуюСебестоимость",	ИспользоватьПлановуюСебестоимость);
	
	СтруктураТолькоЧтение = Новый Структура;
	СтруктураТолькоЧтение.Вставить("ИспользоватьПлановуюСебестоимость");
	СтруктураТолькоЧтение.Вставить("ВалютаДокумента");
	СтруктураТолькоЧтение.Вставить("КурсДокумента");
	СтруктураТолькоЧтение.Вставить("КурсВзаиморасчетов");

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураТолькоЧтение, "Товары");
												
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	СтруктураРеквизитовДокумента.Вставить( "ИспользоватьПлановуюСебестоимость", ИспользоватьПлановуюСебестоимость);
	
	// Выполнить стандартные действия при изменении режима использования плановой себестоимости
	РаботаСДиалогами.ИзмененитьРежимИспользованияПлановойСебестоимости(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, СтруктураРеквизитовДокумента.ИспользоватьПлановуюСебестоимость);

	// Пересчитывает плановую себестоимость с учетом новой валюты и налогов
	ОбработкаТабличныхЧастей.ИзменитьВалютуНалогиПлановойСебестоимостиТабЧасти(ЭтотОбъект, ТекущиеЗначенияРеквизитов, мВалютаРегламентированногоУчета);

	// Итоговая информация об отклонение от плановой себестоимости
	РаботаСДиалогами.СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)
	
	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели Товары.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоОстаткам(Кнопка)
	ЗаполнитьТабличнуюЧастьПоОстаткам(Товары);
КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Скопировать состав" подменю 
// "Заполнить" командной панели Товары.
//
Процедура КоманднаяПанельТоварыСкопироватьСостав(Кнопка)
	СкопироватьСостав(Товары);
КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели возвратной тары.
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоОстаткам(Кнопка)

	ЗаполнитьТабличнуюЧастьПоОстаткам(ВозвратнаяТара);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Скопировать состав" подменю 
// "Заполнить" командной панели возвратной тары.
//
Процедура КоманднаяПанельВозвратнаяТараСкопироватьСостав(Кнопка)
	СкопироватьСостав(ВозвратнаяТара);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Оборудование", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Оборудование".
//
Процедура КоманднаяПанельОборудованиеДействиеПодбор(Кнопка)
	
	ДействиеПодбор(Оборудование);

КонецПроцедуры // КоманднаяПанельОборудованиеДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Материалы", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Материалы".
//
Процедура КоманднаяПанельМатериалыДействиеПодбор(Кнопка)
	
	ДействиеПодбор(Материалы);

КонецПроцедуры // КоманднаяПанельМатериалыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)
	
	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()


// Процедура вызывается при выборе пункта меню "Скопировать состав" подменю 
// "Заполнить" командной панели Оборудование.
//
Процедура КоманднаяПанельОборудованиеСкопироватьСостав(Кнопка)
	
	СкопироватьСостав(Оборудование);
	
КонецПроцедуры // КоманднаяПанельОборудованиеСкопироватьСостав()

// Процедура вызывается при выборе пункта меню "Скопировать состав" подменю 
// "Заполнить" командной панели Материалы.
//
Процедура КоманднаяПанельМатериалыСкопироватьСостав(Кнопка)
	
	СкопироватьСостав(Материалы);
	
КонецПроцедуры // КоманднаяПанельМатериалыСкопироватьСостав()

// Процедура вызывается при нажатии кнопки "Заполнить по спецификации" командной панели
// табличного поля "Материалы", вызывает сервисный механизм для
// заполнения материалов по спецификации в табличную часть "Услуги".
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоСпецификации(Кнопка)
	
	ЗаполнитьМатериалыПоСпецификации();
		
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоСпецификации()


// Процедура вызывается при выборе пункта меню "Скопировать состав" подменю 
// "Заполнить" командной панели Услуги.
//
Процедура КоманднаяПанельУслугиСкопироватьСостав(Кнопка)
	
	СкопироватьСостав(Услуги);
	
КонецПроцедуры // КоманднаяПанельУслугиСкопироватьСостав()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели Оборудование.
//
Процедура КоманднаяПанельОборудованиеЗаполнитьПоОстаткам(Кнопка)
	
	Если Оборудование.Количество() > 0 Тогда
		ТекстВопроса = "При заполнении табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ЗаполнитьОборудованиеПоОстаткам();
	
КонецПроцедуры // КоманднаяПанельОборудованиеЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели Материалы.
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоОстаткам(Кнопка)
	
	Если Материалы.Количество() > 0 Тогда
		ТекстВопроса = "При заполнении табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, Метаданные().Представление());
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	ЗаполнитьМатериалыПоОстаткам();
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" подменю 
// "Заполнить" командной панели Услуги.
//
Процедура КоманднаяПанельУслугиЗаполнитьПоОстаткам(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоОстаткам(Услуги);
	
КонецПроцедуры // КоманднаяПанельУслугиЗаполнитьПоОстаткам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода заказа поставщику.
//
Процедура ЗаказПоставщикуПриИзменении(Элемент)
	
    ИзменяетсяОрганизация = НЕ Организация = ЗаказПоставщику.Организация;
	Если  ИзменяетсяОрганизация И Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	КурсВзаиморасчетов      = ЗаказПоставщику.КурсВзаиморасчетов; 
	КратностьВзаиморасчетов = ЗаказПоставщику.КратностьВзаиморасчетов; 

	// Услуги на комиссию не принимаем.
	мВидимостьЗакладкиУслуг = ЗаказПоставщику.ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом;
	
	УстановитьВидимость();
	ОбновитьИнформациюПоЗаказу();
	ПриИзмененииВидаСклада();

	СтруктурнаяЕдиница = Элемент.Значение.СтруктурнаяЕдиница;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиТовары.Всего.Видимость Тогда
		ТекСумма = ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);

		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
	КонецЕсли;

	// Рассчитать и показать в колонках информацию о сумме и отклонении от плановой себестоимости
	ОбработкаТабличныхЧастей.ЗаполнитьСуммуИОтклонениеОтПлановойСебестоимостиТабЧасти(ОформлениеСтроки, ДанныеСтроки, ЭтотОбъект);

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличной части "Товары".
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// Итоговая информация об отклонение от плановой себестоимости
	РаботаСДиалогами.СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

КонецПроцедуры // ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "ПослеУдаления" табличной части "Товары".
//
Процедура ТоварыПослеУдаления(Элемент)

	// Итоговая информация об отклонение от плановой себестоимости
	РаботаСДиалогами.СформироватьНадписьИтоговоеОтклонениеОтПлановойСебестоимости(ЭлементыФормы.ИнфНадписьИтоговоеОтклонениеОтПлановойСебестоимости, ЭтотОбъект);

КонецПроцедуры // ТоварыПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти , ЭтотОбъект);

	ПриИзмененииНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитываем плановую себестоимость.
	ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	СтрокаТабличнойЧасти.Спецификация = ПолучитьСпецификацию( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ПриИзмененииХарактеристикиНоменклатурыТоваров(СтрокаТабличнойЧасти);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитываем плановую себестоимость.
	ОбработкаТабличныхЧастей.РассчитатьПлановуюСебестоимостьВСтрокеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
	
	СтрокаТабличнойЧасти.Спецификация = ПолучитьСпецификацию( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ЗаказПоставщику) Тогда

		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
		РаботаСДиалогами.НачалоВыбораНоменклатурыКонтрагента(Элемент, СтандартнаяОбработка, ЗаказПоставщику.Контрагент, СтрокаТабличнойЧасти.Номенклатура);

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Сохраняем текущее значение коэффициента
	СтароеЗначениеКоэффициента = ЭлементыФормы.Товары.ТекущиеДанные.Коэффициент;

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Выполнить действия при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧастиПлановаяСебестоимость(СтрокаТабличнойЧасти, ЭтотОбъект, СтароеЗначениеКоэффициента);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Товары");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода заказа
// в строке табличной части "Товары".
//
Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Товары", ДопПараметры);

КонецПроцедуры // ТоварыЗаказПокупателяНачалоВыбора()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации
// в табличной части "Товары".
//
Процедура ТоварыСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ТоварыСпецификацияНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода заказа
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ВозвратнаяТара", ДопПараметры);

КонецПроцедуры // ВозвратнаяТараЗаказПокупателяНачалоВыбора()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ВозвратнаяТараПриВыводеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ МАТЕРИАЛЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Материалы". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиМатериалы,      ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // МатериалыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ПриИзмененииНоменклатурыМатериалов(СтрокаТабличнойЧасти);

КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаИзмеренияПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Материалы".
//
Процедура МатериалыЦенаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // МатериалыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Материалы".
//
Процедура МатериалыСуммаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Материалы");
	
КонецПроцедуры // МатериалыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" табличной части "Материалы".
//
Процедура МатериалыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаМестПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	// заполнение поля содержание в табличной части
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Услуги");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ОБОРУДОВАНИЕ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Оборудование". Формирует данные в колонке "Всего".
//
Процедура ОборудованиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиОборудование.Всего.Видимость Тогда
		ТекСумма = ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);

		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
	КонецЕсли;

	Если мКолонкиОборудование.КоэффициентМест.Видимость Тогда
		РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиОборудование, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	КонецЕсли;

КонецПроцедуры // ОборудованиеПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект );

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         ЗаказПоставщику.Контрагент, ТипЦен, ЗаказПоставщику.ДоговорКонтрагента, Дата,ЗаказПоставщику.ВалютаДокумента, ЗаказПоставщику.УчитыватьНДС, ЗаказПоставщику.СуммаВключаетНДС);
	ЗаполнитьЕдиницуЦенуПокупкиТабЧастиКоректировки(СтрокаТабличнойЧасти, СтруктураШапкиДокумента);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущиеДанные;
	
	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         ЗаказПоставщику.Контрагент, ТипЦен, ЗаказПоставщику.ДоговорКонтрагента, Дата, ЗаказПоставщику.ВалютаДокумента, ЗаказПоставщику.УчитыватьНДС, ЗаказПоставщику.СуммаВключаетНДС);
	ЗаполнитьЕдиницуЦенуПокупкиТабЧастиКоректировки(СтрокаТабличнойЧасти, СтруктураШапкиДокумента);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ОборудованиеХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеЕдиницаИзмеренияПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ОборудованиеКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Оборудование");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкиНДС
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеКоличествоМестПриИзменении(Элемент)
	
	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти( ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти     ( ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти  ( ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ОборудованиеКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеЕдиницаИзмеренияМестПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура - обработчик события "ПриВыводеСтроки" в ТЧ "Услуги".
//
Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если мКолонкиУслуги.Всего.Видимость Тогда
		ТекСумма = ДанныеСтроки.Сумма + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС);

		ОформлениеСтроки.Ячейки.Всего.УстановитьТекст(ОбщегоНазначения.ФорматСумм(ТекСумма));
	КонецЕсли;

КонецПроцедуры // УслугиПриВыводеСтроки()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиУслуги         = ЭлементыФормы.Услуги.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;
мКолонкиМатериалы      = ЭлементыФормы.Материалы.Колонки;
мКолонкиОборудование   = ЭлементыФормы.Оборудование.Колонки;

мРазрешитьНулевыеЦеныВОпте = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВОпте();