////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мСинхронизируемыеТабличныеЧасти; // для синхронизации строк табличных полей

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;


////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();

	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));

	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Удержания,ЭлементыФормы.КоманднаяПанельУдержания.Кнопки.ПодменюЗаполнить);

	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);

КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

	КонецЕсли;

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();

	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("РасчетныйДокумент");
	СтруктураКолонок.Вставить("ВалютаВзаиморасчетов");
	СтруктураКолонок.Вставить("СуммаВзаиморасчетов");

	// Установить ограничение - изменять видимоть колонок для табличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);

	// Установить ограничение - изменять видимоть колонок для табличной части Удержания
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Удержания.Колонки, СтруктураКолонок);

	// Активизируем табличную часть
	ТекущийЭлемент = ЭлементыФормы.Начисления;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Вывести в заголовок колонки наименование валюты упр. учета.
	ЭлементыФормы.Начисления.Колонки.Результат.ТекстШапки = СформироватьЗаголовокПоВалюте("Результат", мВалютаУправленческогоУчета);
	ЭлементыФормы.Удержания .Колонки.Результат.ТекстШапки = СформироватьЗаголовокПоВалюте("Результат", мВалютаУправленческогоУчета);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура - обрабатывает нажатие на кнопку "Очистить"
//
Процедура ДействияФормыОчистить(Кнопка)

	ТекстВопроса = "Табличные части будут очищены. Продолжить?";
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);

	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;

	Начисления.Очистить();
	Удержания.Очистить();

КонецПроцедуры // ДействияФормыОчистить(

// Процедура заполнения табличной части долгами подотчетных лиц.
//
Процедура ЗаполнитьДолгамиПодотчетныхЛиц(ТабличнаяЧасть)

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	ЭтоНачисления = (ТабличнаяЧасть = Начисления);
	Запрос        = Новый Запрос;

	// Установим параметры запроса
	Запрос.УстановитьПараметр("ПарДата", Дата);
	Запрос.УстановитьПараметр("Период", Дата);
	Запрос.УстановитьПараметр("ТабличнаяЧасть", ТабличнаяЧасть);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ФизЛицо КАК ФизЛицо,
	|	РаботникиСрезПоследних.Подразделение КАК Подразделение,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.РасчетныйДокумент КАК РасчетныйДокумент,
	|	ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта КАК ВалютаВзаиморасчетов,
	|	КурсыВалютСрезПоследних.Курс КАК КурсВзаиморасчетов,
	|	КурсыВалютСрезПоследних.Кратность КАК КратностьВзаиморасчетов,
	|	" + ?(ЭтоНачисления, "-1 * ", "")+ "ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетов,
	|	ВложенныйЗапрос.Сотрудник
	|ИЗ
	|	РегистрНакопления.ВзаиморасчетыСПодотчетнымиЛицами.Остатки(&ПарДата, ) КАК ВзаиморасчетыСПодотчетнымиЛицамиОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Работники.СрезПоследних(&ПарДата, ) КАК РаботникиСрезПоследних
	|		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ФизЛицо = РаботникиСрезПоследних.ФизЛицо
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ПарДата, ) КАК КурсыВалютСрезПоследних
	|		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Валюта = КурсыВалютСрезПоследних.Валюта
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			СписокСотрудников.Сотрудник КАК Сотрудник,
	|			СписокСотрудников.Физлицо КАК Физлицо
	|		ИЗ
	|			(ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиОсновноеМесто.Сотрудник) КАК Сотрудник,
	|				РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
	|				1 КАК Приоритет
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&Период,
	|						Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|							И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
	|			ГДЕ
	|				РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиОсновноеМесто.Сотрудник.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(РаботникиСовместительство.Сотрудник),
	|				РаботникиСовместительство.Сотрудник.Физлицо,
	|				2
	|			ИЗ
	|				РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|						&Период,
	|						Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|							И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
	|			ГДЕ
	|				РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РаботникиСовместительство.Сотрудник.Физлицо
	|			
	|			ОБЪЕДИНИТЬ
	|			
	|			ВЫБРАТЬ
	|				МАКСИМУМ(СотрудникиДУ.Ссылка),
	|				СотрудникиДУ.Физлицо,
	|				3
	|			ИЗ
	|				Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|			ГДЕ
	|				(СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|						ИЛИ СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор))
	|			
	|			СГРУППИРОВАТЬ ПО
	|				СотрудникиДУ.Физлицо) КАК СписокСотрудников
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|					СписокФизическихЛиц.Физлицо КАК Физлицо,
	|					МИНИМУМ(СписокФизическихЛиц.Приоритет) КАК Приоритет
	|				ИЗ
	|					(ВЫБРАТЬ
	|						РаботникиОсновноеМесто.Сотрудник.Физлицо КАК Физлицо,
	|						1 КАК Приоритет
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|								&Период,
	|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.ОсновноеМестоРаботы)) КАК РаботникиОсновноеМесто
	|					ГДЕ
	|						РаботникиОсновноеМесто.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						РаботникиСовместительство.Сотрудник.Физлицо,
	|						2
	|					ИЗ
	|						РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|								&Период,
	|								Сотрудник.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор)
	|									И Сотрудник.ВидЗанятости = ЗНАЧЕНИЕ(Перечисление.ВидыЗанятостиВОрганизации.Совместительство)) КАК РаботникиСовместительство
	|					ГДЕ
	|						РаботникиСовместительство.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
	|					
	|					ОБЪЕДИНИТЬ
	|					
	|					ВЫБРАТЬ
	|						СотрудникиДУ.Физлицо,
	|						3
	|					ИЗ
	|						Справочник.СотрудникиОрганизаций КАК СотрудникиДУ
	|					ГДЕ
	|						(СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ДоговорУправленческий)
	|								ИЛИ СотрудникиДУ.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровСФизЛицами.ТрудовойДоговор))) КАК СписокФизическихЛиц
	|				
	|				СГРУППИРОВАТЬ ПО
	|					СписокФизическихЛиц.Физлицо) КАК СписокФизическихЛиц
	|				ПО СписокСотрудников.Физлицо = СписокФизическихЛиц.Физлицо
	|					И СписокСотрудников.Приоритет = СписокФизическихЛиц.Приоритет) КАК ВложенныйЗапрос
	|		ПО ВзаиморасчетыСПодотчетнымиЛицамиОстатки.ФизЛицо = ВложенныйЗапрос.Физлицо
	|ГДЕ
	|	(НЕ ВзаиморасчетыСПодотчетнымиЛицамиОстатки.Организация.ОтражатьВРегламентированномУчете)
	|	И ВзаиморасчетыСПодотчетнымиЛицамиОстатки.СуммаВзаиморасчетовОстаток " + ?(ЭтоНачисления, "<", ">")+ " 0 ";

	
	РезультатЗапроса        = Запрос.Выполнить();
	СтруктураКурса          = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Дата);
	КурсВалютыУпрУчета      = СтруктураКурса.Курс;
	КратностьВалютыУпрУчета = СтруктураКурса.Кратность;

	Если РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;

	ТаблицаРезультат = РезультатЗапроса.Выгрузить();

	// Заполним значения в совпадающих колонках.
	Для каждого Строка Из ТаблицаРезультат Цикл
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		РассчитатьРезультат(НоваяСтрока, КурсВалютыУпрУчета, КратностьВалютыУпрУчета);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьДолгамиПодотчетныхЛиц()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура выполняет пересчет Результата при изменнении даты документа
//
Процедура ПересчитатьРезультатПриИзмененииДаты()

	СтруктураВалюты          = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, мТекущаяДатаДокумента);
	СтарыйКурсДокумента      = СтруктураВалюты.Курс;
	СтараяКратностьДокумента = СтруктураВалюты.Кратность;
	
	СтруктураВалюты          = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Дата);
	НовыйКурсДокумента       = СтруктураВалюты.Курс;
	НоваяКратностьДокумента  = СтруктураВалюты.Кратность;

	ИзменилсяКурсДокумента   = НЕ (НовыйКурсДокумента = СтарыйКурсДокумента И НоваяКратностьДокумента = СтараяКратностьДокумента);

	// Контроль изменений курса.
	Если ИзменилсяКурсДокумента Тогда
		ТекстВопроса = "На дату документа у валюты управленческого учета " +
		               СокрЛП(РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мВалютаУправленческогоУчета, СтарыйКурсДокумента, СтараяКратностьДокумента, мВалютаРегламентированногоУчета, Истина)) +
		               " был задан другой курс." +
		               Символы.ПС +
		               "Пересчитать данные табличных частей документа в соответствии с курсом валюты " +
		               СокрЛП(РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мВалютаУправленческогоУчета, НовыйКурсДокумента,  НоваяКратностьДокумента,  мВалютаРегламентированногоУчета, Истина)) +
		               " ?";
	Иначе
		Возврат;
	КонецЕсли;

	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

	Если Ответ = КодВозвратаДиалога.Да Тогда
		Для Каждого Строка Из Начисления Цикл
			РассчитатьРезультат(Строка, НовыйКурсДокумента, НоваяКратностьДокумента);
		КонецЦикла;
		Для Каждого Строка Из Удержания Цикл
			РассчитатьРезультат(Строка, НовыйКурсДокумента, НоваяКратностьДокумента);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры // ПересчитатьРезультатПриИзмененииДаты()

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	ПересчитатьРезультатПриИзмененииДаты();
	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "Регулирование" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)

	РаботаСДиалогами.РегулированиеПредставленияПериодаРегистрации(Направление, СтандартнаяОбработка, ПериодРегистрации, ПредставлениеПериодаРегистрации);

КонецПроцедуры // ПредставлениеПериодаРегистрацииРегулирование()

// Процедура - обработчик события "НачалоВыбораИзСписка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);

КонецПроцедуры // ПредставлениеПериодаРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "Очистка" элемента управления ПредставлениеПериодаРегистрации.
//
Процедура ПредставлениеПериодаРегистрацииОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ПредставлениеПериодаРегистрацииОчистка()

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

// Процедура - обработчик события "АвтоПодборТекста" реквизита "ФизЛицо" табличной части.
//
Процедура ФизлицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)

	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст);
	СтандартнаяОбработка = Ложь;

КонецПроцедуры // ФизлицоАвтоПодборТекста

// Процедура - обработчик события "ОкончаниеВводаТекста" реквизита "ФизЛицо" табличной части.
//
Процедура ФизлицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение);
	СтандартнаяОбработка = (Значение = Неопределено);

КонецПроцедуры // ФизлицоОкончаниеВводаТекста

// Процедура - обработчик события "НачалоВыбора" реквизита "РасчетныйДокумент" табличной части.
//
Процедура РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Метаданные.Документы["РасходныйКассовыйОрдер"].Имя,				Метаданные.Документы["РасходныйКассовыйОрдер"].Представление());
	СписокТипов.Добавить(Метаданные.Документы["ПриходныйКассовыйОрдер"].Имя,				Метаданные.Документы["ПриходныйКассовыйОрдер"].Представление());
	СписокТипов.Добавить(Метаданные.Документы["АвансовыйОтчет"].Имя,						Метаданные.Документы["АвансовыйОтчет"]        .Представление());
	СписокТипов.Добавить(Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Имя,			Метаданные.Документы["ПлатежноеПоручениеИсходящее"].Представление());
	СписокТипов.Добавить(Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"].Имя,	Метаданные.Документы["ПлатежныйОрдерСписаниеДенежныхСредств"]        .Представление());

	Если СписокТипов.Количество() = 1 Тогда
		ТипРасчетногоДокумента = СписокТипов[0].Значение;
	Иначе
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

		Если ВыбранныйЭлемент = Неопределено Тогда
			Возврат
		КонецЕсли;

		ТипРасчетногоДокумента = ВыбранныйЭлемент.Значение;
	КонецЕсли;

	ФормаВыбора = Документы[ТипРасчетногоДокумента].ПолучитьФормуВыбора(,Элемент,);

	ФормаВыбора.Открыть();

КонецПроцедуры // РасчетныйДокументНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" реквизита "РасчетныйДокумент" табличной части.
//
Процедура РасчетныйДокументПриИзменении(СтрокаТабличнойЧасти)

	РасчетныйДокумент = СтрокаТабличнойЧасти.РасчетныйДокумент;

	Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.АвансовыйОтчет") Тогда
			СтрокаТабличнойЧасти.ВалютаВзаиморасчетов =РасчетныйДокумент.ВалютаДокумента;
		ИначеЕсли ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ПриходныйКассовыйОрдер") Тогда
			Если РасчетныйДокумент.ВидОперации = Перечисления.ВидыОперацийПКО.ВозвратДенежныхСредствПодотчетником Тогда
				СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = РасчетныйДокумент.ВалютаВзаиморасчетовПодотчетника;
			Иначе
				СтрокаТабличнойЧасти.ВалютаВзаиморасчетов =РасчетныйДокумент.ВалютаДокумента;
			КонецЕсли;
		ИначеЕсли ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.РасходныйКассовыйОрдер") Тогда
			Если РасчетныйДокумент.ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
				СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = РасчетныйДокумент.ВалютаВзаиморасчетовРаботника;
			Иначе
				СтрокаТабличнойЧасти.ВалютаВзаиморасчетов =РасчетныйДокумент.ВалютаДокумента;
			КонецЕсли;
		ИначеЕсли ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее") Тогда
			Если РасчетныйДокумент.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ПеречислениеДенежныхСредствПодотчетнику Тогда
				СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = РасчетныйДокумент.ВалютаВзаиморасчетовРаботника;
			Иначе
				СтрокаТабличнойЧасти.ВалютаВзаиморасчетов =РасчетныйДокумент.ВалютаДокумента;
			КонецЕсли;
		ИначеЕсли ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств") Тогда
			Если РасчетныйДокумент.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ПеречислениеДенежныхСредствПодотчетнику Тогда
				СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = РасчетныйДокумент.ВалютаВзаиморасчетовРаботника;
			Иначе
				СтрокаТабличнойЧасти.ВалютаВзаиморасчетов =РасчетныйДокумент.ВалютаДокумента;
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = Неопределено;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.ВалютаВзаиморасчетов = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютаВзаиморасчетов) Тогда
		СтруктураКурса                               = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаТабличнойЧасти.ВалютаВзаиморасчетов, Дата);
		СтрокаТабличнойЧасти.КурсВзаиморасчетов      = СтруктураКурса.Курс;
		СтрокаТабличнойЧасти.КратностьВзаиморасчетов = СтруктураКурса.Кратность;

		РассчитатьСуммуВзаиморасчетов(СтрокаТабличнойЧасти);
	Иначе
		СтрокаТабличнойЧасти.КурсВзаиморасчетов      = 0;
		СтрокаТабличнойЧасти.КратностьВзаиморасчетов = 0;
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов     = 0;
		СтрокаТабличнойЧасти.Результат               = 0;
	КонецЕсли;


КонецПроцедуры // РасчетныйДокументПриИзменении()

// Пройедура выполняет расчет реквизита "СуммаВзаиморасчетов" строки табличной части.
//
Процедура РассчитатьСуммуВзаиморасчетов(СтрокаТабличнойЧасти, Курс = Неопределено, Кратность = Неопределено)

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютаВзаиморасчетов) Тогда
		СтрокаТабличнойЧасти.СуммаВзаиморасчетов = 0;
		Возврат;
	КонецЕсли;

	Если Курс      = Неопределено
	   И Кратность = Неопределено Тогда
		СтруктураКурса          = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Дата);
		КурсВалютыУпрУчета      = СтруктураКурса.Курс;
		КратностьВалютыУпрУчета = СтруктураКурса.Кратность;
	Иначе
		КурсВалютыУпрУчета      = Курс;
		КратностьВалютыУпрУчета = Кратность;
	КонецЕсли;

	СтрокаТабличнойЧасти.СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Результат,
	                                                                      мВалютаУправленческогоУчета,
	                                                                      СтрокаТабличнойЧасти.ВалютаВзаиморасчетов,
	                                                                      КурсВалютыУпрУчета,
	                                                                      СтрокаТабличнойЧасти.КурсВзаиморасчетов,
	                                                                      КратностьВалютыУпрУчета,
	                                                                      СтрокаТабличнойЧасти.КратностьВзаиморасчетов);

КонецПроцедуры // ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти()

// Пройедура выполняет расчет реквизита "Результат" строки табличной части.
//
Процедура РассчитатьРезультат(СтрокаТабличнойЧасти, Курс = Неопределено, Кратность = Неопределено)

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ВалютаВзаиморасчетов) Тогда
		СтрокаТабличнойЧасти.Результат = 0;
		Возврат;
	КонецЕсли;

	Если Курс      = Неопределено
	   И Кратность = Неопределено Тогда
		СтруктураКурса          = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Дата);
		КурсВалютыУпрУчета      = СтруктураКурса.Курс;
		КратностьВалютыУпрУчета = СтруктураКурса.Кратность;
	Иначе
		КурсВалютыУпрУчета      = Курс;
		КратностьВалютыУпрУчета = Кратность;
	КонецЕсли;

	СтрокаТабличнойЧасти.Результат = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.СуммаВзаиморасчетов,
	                                                            СтрокаТабличнойЧасти.ВалютаВзаиморасчетов,
	                                                            мВалютаУправленческогоУчета,
	                                                            СтрокаТабличнойЧасти.КурсВзаиморасчетов,
	                                                            КурсВалютыУпрУчета,
	                                                            СтрокаТабличнойЧасти.КратностьВзаиморасчетов,
	                                                            КратностьВалютыУпрУчета);

КонецПроцедуры // ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти()

// Формирует заголовок исходя из переданной валюты (добавляет валюту в конец заголовка).
//
// Параметры
//  ТекстЗаголовка  – строка, текст заголовка,
//  Валюта          – ссылка на справочник валют.
//
Функция СформироватьЗаголовокПоВалюте(ТекстЗаголовка, Валюта)

	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		ТекстЗаголовка  = ТекстЗаголовка + " (<>):";
	Иначе
		ТекстЗаголовка  = ТекстЗаголовка + " (" + СокрЛП(Валюта) + "):";
	КонецЕсли;

	Возврат ТекстЗаголовка;

КонецФункции // СформироватьЗаголовокПоВалюте()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Начисления и ее РЕКВИЗИТОВ


// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  
Процедура НачисленияСотрудникПриИзменении(Элемент)
	
	ЭлементыФормы.Начисления.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "Сотрудник" табличной части Начисления.
//
Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // НачисленияФизлицоНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" реквизита "РасчетныйДокумент" табличной части Начисления.
//
Процедура НачисленияРасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)

	РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка);

КонецПроцедуры // НачисленияРасчетныйДокументНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" реквизита "РасчетныйДокумент" табличной части Начисления.
//
Процедура НачисленияРасчетныйДокументПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Начисления.ТекущиеДанные;

	РасчетныйДокументПриИзменении(СтрокаТабличнойЧасти);

КонецПроцедуры // НачисленияРасчетныйДокументПриИзменении()

// Процедура - обработчик события "ПриИзменении" реквизита "Результат" табличной части Начисления.
//
Процедура НачисленияРезультатПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Начисления.ТекущиеДанные;

	РассчитатьСуммуВзаиморасчетов(СтрокаТабличнойЧасти);

КонецПроцедуры // НачисленияРезультатПриИзменении()

// Процедура - обработчик события "ПриИзменении" реквизита "СуммаВзаиморасчетов" табличной части Начисления.
//
Процедура НачисленияСуммаВзаиморасчетовПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Начисления.ТекущиеДанные;

	РассчитатьРезультат(СтрокаТабличнойЧасти);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Удержания и ее РЕКВИЗИТОВ


// Процедура - обработчик события "НачалоВыбора" реквизита "ФизЛицо" табличной части Удержания.
//
Процедура УдержанияФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // УдержанияФизлицоНачалоВыбора()

Процедура УдержанияФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "РасчетныйДокумент" табличной части Удержания.
//
Процедура УдержанияРасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)

	РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка);

КонецПроцедуры // УдержанияРасчетныйДокументНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" реквизита "РасчетныйДокумент" табличной части Удержания.
//
Процедура УдержанияРасчетныйДокументПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Удержания.ТекущиеДанные;

	РасчетныйДокументПриИзменении(СтрокаТабличнойЧасти);

КонецПроцедуры // УдержанияРасчетныйДокументПриИзменении()

// Процедура - обработчик события "ПриИзменении" реквизита "Результат" табличной части Удержания.
//
Процедура УдержанияРезультатПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Удержания.ТекущиеДанные;

	РассчитатьСуммуВзаиморасчетов(СтрокаТабличнойЧасти);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" реквизита "СуммаВзаиморасчетов" табличной части Удержания.
//
Процедура УдержанияСуммаВзаиморасчетовПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Удержания.ТекущиеДанные;

	РассчитатьРезультат(СтрокаТабличнойЧасти);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)

	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);

КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)

	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);

КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры
 
// Процедура вызывается при выборе пункта меню "Заполнить долгами подотчетных лиц" кнопки "Заполнить"
// командной панели табличного поля "Начисления",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельНачисленияДействиеЗаполнитьДолгамиПодотчетныхЛиц(Кнопка)

	ЗаполнитьДолгамиПодотчетныхЛиц(Начисления);

КонецПроцедуры // КоманднаяПанельНачисленияДействиеЗаполнитьДолгамиПодотчетныхЛиц()

// Процедура вызывается при выборе пункта меню "Заполнить долгами подотчетных лиц" кнопки "Заполнить"
// командной панели табличного поля "Удержания",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельУдержанияДействиеЗаполнитьДолгамиПодотчетныхЛиц(Кнопка)

	ЗаполнитьДолгамиПодотчетныхЛиц(Удержания);

КонецПроцедуры // КоманднаяПанельУдержанияДействиеЗаполнитьДолгамиПодотчетныхЛиц()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["Начисления"] = Ложь;
мСинхронизируемыеТабличныеЧасти["Удержания"]  = Ложь;