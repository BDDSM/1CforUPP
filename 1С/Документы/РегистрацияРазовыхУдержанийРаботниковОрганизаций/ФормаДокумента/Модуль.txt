////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента;   // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера

// Списки доступных удержаний
Перем СпВидовРасчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит "Результат" текущей строки
Перем мСтарыйРезультат;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

Перем мСведенияОВидахРасчета;

// Механизм исправлений
Перем мДокументыИсправление;
Перем мДокументСторнирование;
Перем мФизлицаИсправление;
Перем мМенюИсправление;
Перем мКнопкаИсправлениеТекущийСотрудник;
Перем мКнопкаИсправлениеВесьДокумент;
Перем мКнопкаИсправлениеСписокСотрудников;
Перем мКнопкаОтменаИсправление;
Перем мТекущееФизлицо;

Перем РучноеИзменениеПоказателей;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти()
			
	ТабличныеЧасти = Новый Массив;
	ТабличныеЧасти.Добавить(Удержания);
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти(мСведенияОВидахРасчета, ТабличныеЧасти, "РазовыеНачисленияИУдержания");
	
КонецПроцедуры // ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти

// устанавливает значение показателей начилсения для общих показателей в целом по компании и в целом по подразделению
//
Процедура ПоказательПриИзменении(Значение, парамПоказатель,ТабличнаяЧасть)
	
	ТекущаяСтрока = ЭлементыФормы[ТабличнаяЧасть].ТекущаяСтрока;
	ВидРасчета = ТекущаяСтрока.ВидРасчета;
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
	КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
	
	// "запоминаем" ручное изменение показателя
	ЗаполнениеДокументовЗК.ЗапомнитьРучноеИзменениеПоказателя(РучноеИзменениеПоказателей, ТекущаяСтрока, парамПоказатель);
	
	Если КоличествоПоказателей > (парамПоказатель - 1) Тогда
		Показатель  = СведенияОВидеРасчета["Показатель" + парамПоказатель];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ВидРасчета.ПроизвольнаяФормулаРасчета Тогда
		Если Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Тогда
			
			ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти();
			
			Для Каждого СтрокаНачисления Из Удержания Цикл
				СведенияОВидеРасчета = мСведенияОВидахРасчета[СтрокаНачисления.ВидРасчета];
				КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
					Если ПоказательВР.Предопределенный Тогда 
						Продолжить;
					КонецЕсли;
					Если ПоказательВР = Показатель Тогда
						СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры //ПоказательПриИзменении

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Удержания,ЭлементыФормы.КоманднаяПанельУдержания);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСотрудниковСИсправлениями()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	РазовыеУдержания.Физлицо КАК Сотрудник
	|ИЗ
	|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РазовыеУдержания
	|ГДЕ
	|	РазовыеУдержания.Ссылка В(&Исправления)
	|	И РазовыеУдержания.Сторно";
	
	мФизлицаИсправление = ПроведениеРасчетов.СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса, мДокументыИсправление);
	
КонецПроцедуры

Процедура ОбновитьТекущегоСотрудника()

 	ТекущиеДанные	= ЭлементыФормы.Удержания.ТекущиеДанные;
 	Если ТекущиеДанные = Неопределено Тогда 
		ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	Иначе
		ТекущееФизлицо = ТекущиеДанные.Физлицо;
	КонецЕсли;

	// Установим имя и доступность кнопки ТекущийСотрудник механизма исправлений
	Если ЭлементыФормы.ДополнительныеДействия.Кнопки.Найти("Исправить") <> Неопределено И мТекущееФизлицо <> ТекущееФизлицо Тогда
		РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(ТекущееФизлицо),ТекущееФизлицо,мФизлицаИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник)
	КонецЕсли;
	
	мТекущееФизлицо = ТекущееФизлицо;

КонецПроцедуры

Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или Удержания.Количество() = 0;
	
	ЗаполненСОшибками = Удержания.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.УдержанияОрганизаций.ПустаяСсылка())).Количество() > 0;
				
	НеРассчитан = Удержания.НайтиСтроки(Новый Структура("Результат, Сторно",0,Ложь)).Количество() = Удержания.НайтиСтроки(Новый Структура("Сторно",Ложь)).Количество() И Удержания.НайтиСтроки(Новый Структура("Сторно",Ложь)).Количество() > 0;
	
	ОписаниеСостоянияДокумента = РаботаСДиалогамиЗК.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Не НеРассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован,Ложь,Ложь); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура УстановитьКнопкиИсправленияДокумента(ДокументИсправлен = Неопределено, ИсправленВесьДокумент = Неопределено, ДокументСторнирован = Неопределено)
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	КонецЕсли;
	Если ДокументСторнирован = Неопределено Тогда
		ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для каждого СтрокаТЧ Из Удержания Цикл
				ИсправленВесьДокумент = мФизлицаИсправление[СтрокаТЧ.Физлицо] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументСторнирован Или ПериодРегистрации >= НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
		ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	Иначе 
		
		Кнопки = ЭлементыФормы.ДополнительныеДействия.Кнопки;
		Если Кнопки.Количество() = 0 Тогда
			МенюИсправить = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Подменю);
			ЗаполнитьЗначенияСвойств(МенюИсправить, мМенюИсправление);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеТекущийСотрудник.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеТекущийСотрудник);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеВесьДокумент.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеВесьДокумент);
			МенюИсправить.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеСписокСотрудников.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеСписокСотрудников);
		КонецЕсли;
		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность = Не ИсправленВесьДокумент;
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность = Не ДокументИсправлен;
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность = Не ИсправленВесьДокумент;
			
		Если Кнопки.Количество() = 1 И ДокументИсправлен Тогда
			Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаОтменаИсправление);
		ИначеЕсли Кнопки.Количество() > 1 И Не ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			Кнопки.Удалить(Кнопки.Разделитель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью элементов формы, зависящих от наличия перерассчитываемого документа
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из Удержания Цикл
			ИсправленВесьДокумент = мФизлицаИсправление[СтрокаТЧ.Физлицо] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	ТолькоПросмотр = ДокументИсправлен Или ДокументСторнирован;
	РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	
	УстановитьКнопкиИсправленияДокумента(ДокументИсправлен, ИсправленВесьДокумент, ДокументСторнирован);
	
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,"Открыть сторно-документ","Открыть исправления");
	
	Если Не ТолькоПросмотр Тогда
		МожноЗаполнять = Не ЭтоИсправление;
		СоставМенюЗаполнить = ЭлементыФормы.ДействияФормы.Кнопки.ПодменюЗаполнить.Кнопки;
		Для каждого Кнопка Из СоставМенюЗаполнить Цикл
			Если Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Разделитель Тогда
				Кнопка.Доступность = МожноЗаполнять
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.НадписьОрганизация.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
		Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
			ПолучитьСотрудниковСИсправлениями();
		КонецЕсли;
	Иначе
		РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, "Документ не заполнен", "СообщениеОПроблемах");
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");
	СтруктураКолонок.Вставить("Показатель1");
	СтруктураКолонок.Вставить("Показатель2");
	СтруктураКолонок.Вставить("Показатель3");
	СтруктураКолонок.Вставить("Показатель4");
	СтруктураКолонок.Вставить("Показатель5");
	СтруктураКолонок.Вставить("Показатель6");

	// Установить ограничение - изменять видимость колонок для табличной части 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Удержания.Колонки, СтруктураКолонок);
	
	// Активизируем табличную часть
	ТекущийЭлемент = ЭлементыФормы.Удержания;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Исправление документов
	мМенюИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаИсправлениеТекущийСотрудник = мМенюИсправление.Кнопки.ТекущийСотрудник;
	мКнопкаИсправлениеВесьДокумент = мМенюИсправление.Кнопки.ВесьДокумент;
	мКнопкаИсправлениеСписокСотрудников = мМенюИсправление.Кнопки.СписокСотрудников;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормы();
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Удержания;
	КонецЕсли;
    УстановитьЗаголовкиОрганизацийВФорме();
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументыИсправление.Найти(Источник) = Неопределено Тогда 
						мДокументыИсправление.Добавить(Источник);
						ПолучитьСотрудниковСИсправлениями();
						ОбновитьДоступностьЭлементовФормы();
						РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущееФизлицо),мТекущееФизлицо,мФизлицаИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЗаписьПоказателя" И Источник = ЭтаФорма Тогда
		
		КурсыВалют = Новый Соответствие;
		
		Если Удержания.Количество() > 0 Тогда
			ПодразделенияФизлиц = ПроведениеРасчетовПереопределяемый.ПолучитьСоответствиеФизлицИПодразделенийОрганизаций(Удержания.ВыгрузитьКолонку("ФизЛицо"), КонецДня(КонецМесяца(ПериодРегистрации)), ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		КонецЕсли;
		
		ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти();
		
		Для Каждого СтрокаПоказателей Из Параметр Цикл
			
			Валюта = СтрокаПоказателей.Валюта;
			Если КурсыВалют[Валюта] = Неопределено Тогда
				Курс = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ПериодРегистрации).Курс;
				Курс = ?(Курс = 0,1,Курс);
				Кратность = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ПериодРегистрации).Кратность;
				Кратность = ?(Кратность = 0,1,Кратность);
				КурсыВалют.Вставить(Валюта,Новый Структура("Курс,Кратность",Курс,Кратность));
			Иначе
				Курс = КурсыВалют[Валюта].Курс;
				Кратность = КурсыВалют[Валюта].Кратность;
			КонецЕсли;
			
			// По начислениям
			Для Каждого СтрокаДокумента Из Удержания Цикл
				СведенияОВидеРасчета = мСведенияОВидахРасчета[СтрокаДокумента.ВидРасчета];
				
				Для СчПоказателей = 1 По Мин(СведенияОВидеРасчета["ФактКоличествоПоказателей"],6) Цикл
					Если СведенияОВидеРасчета["Показатель"+СчПоказателей] = СтрокаПоказателей.Показатель  И НачалоМесяца(СтрокаДокумента.ДатаОкончания) = СтрокаПоказателей.ПериодДействия Тогда
						ЗначениеПоказателя = Окр(СтрокаПоказателей.Значение * Курс / Кратность, 2);
						Если СтрокаДокумента["Показатель"+СчПоказателей] <> ЗначениеПоказателя Тогда
							ВидПоказателя = СведенияОВидеРасчета["Показатель"+СчПоказателей].ВидПоказателя;
							Если ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий
							Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ДляВсехОрганизаций Тогда
								СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
								// Раз уж перезаполнили показатели, то и результат придется пересчитывать
								Если СтрокаДокумента.Авторасчет Тогда
									СтрокаДокумента.Результат = 0;
								КонецЕсли;
								
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
								Если СтрокаПоказателей.Подразделение = ПодразделенияФизлиц[СтрокаДокумента.ФизЛицо] Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;

									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
								
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный Тогда
								Если СтрокаПоказателей.Сотрудник.ФизЛицо = СтрокаДокумента.ФизЛицо Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
									// Раз уж перезаполнили показатели, то и результат придется пересчитывать
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
			
		КонецЦикла;
		

		
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = ""; Реквизиты = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			Автозаполнение(ЗначениеВыбора.Данные.Выгрузить(), ЗначениеВыбора.Реквизиты, мГоловнаяОрганизация);
		ИначеЕсли ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьДокументИсправление" Тогда
			РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора.ВыбранныеСотрудники);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура-обработчик события нажатия кнопки "Рассчитать"
Процедура ДействияФормыРассчитать(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	РассчитатьУдержания();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат = ТекущаяСтрока.Результат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если Удержания.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

	КонецЕсли;
	
	Если Удержания.Количество() > 0 Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации), "РаботникиОрганизаций", Организация, Неопределено, Истина, Ложь,"РазовыеУдержания", Новый Структура("ВидРасчета,Показатель1,ДатаНачала,ДатаОкончания,ЗаполнятьПоказателиАвтоматически,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6",Удержания[0].ВидРасчета,Удержания[0].Показатель1,Дата(1,1,1),Дата(1,1,1),Истина,Удержания[0].Показатель2,Удержания[0].Показатель3,Удержания[0].Показатель4,Удержания[0].Показатель5,Удержания[0].Показатель6), ПериодРегистрации, Истина, , , Истина);
	Иначе
		ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации), "РаботникиОрганизаций", Организация, Неопределено, Истина, Ложь,"РазовыеУдержания", Новый Структура("ВидРасчета,Показатель1,ДатаНачала,ДатаОкончания,ЗаполнятьПоказателиАвтоматически,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6",ПланыВидовРасчета.УдержанияОрганизаций.ПустаяСсылка(),0,Дата(1,1,1),Дата(1,1,1),Истина), ПериодРегистрации, Истина, , , Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	Если Не ЗначениеЗаполнено(мТекущееФизлицо) Тогда
		Предупреждение("Не выбран сотрудник для исправления расчетов!");
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, мТекущееФизлицо);

КонецПроцедуры

Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	Если Проведен Тогда
		
		ТекстВопроса = "Для исправления необходимо записать документ. Продолжить?";
		Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
			Возврат;
		КонецЕсли;
		
		СписокСотрудников = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	РазовыеУдержания.Физлицо,
		|	РазовыеУдержания.Физлицо.Наименование КАК Наименование
		|ИЗ
		|	Документ.РегистрацияРазовыхУдержанийРаботниковОрганизаций.Удержания КАК РазовыеУдержания
		|ГДЕ
		|	РазовыеУдержания.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		Запрос.УстановитьПараметр("Ссылка",Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если мФизлицаИсправление[Выборка.Физлицо] = Неопределено Тогда
				СписокСотрудников.Добавить(Выборка.Физлицо,Выборка.Наименование)
			КонецЕсли;
		КонецЦикла;
		
		Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, Ссылка);
		Форма.СписокСотрудников = СписокСотрудников;
		Форма.Заголовок = "Сотрудники документа Разовые удержания №" + Номер + " от " + Формат(Дата,"ДФ=dd.MM.yyyy");
		Форма.Открыть();
		
	Иначе
		Предупреждение("Исправить можно только проведенный документ!")
	КонецЕсли;
	
КонецПроцедуры

// Процедура отмены документов-исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
	ПолучитьСотрудниковСИсправлениями();
	ОбновитьДоступностьЭлементовФормы();
	РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущееФизлицо),мТекущееФизлицо,мФизлицаИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
	Обновить();
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельУдержанияПодбор(Кнопка)
	
	ПараметрыПодбора = ЗаполнениеДокументовЗК.ПараметрыПодбораСотрудниковТабличнойЧасти(ЭтотОбъект, "Удержания", мСведенияОВидахРасчета);
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.Удержания, Ссылка, Ложь, Дата, мГоловнаяОрганизация,,,,, Истина, ПараметрыПодбора);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	УстановитьКнопкиИсправленияДокумента();
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
КонецПроцедуры

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ПоказатьИсправления(ЭтаФорма, Ссылка, мДокументыИсправление, мДокументСторнирование);
	
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Удержания
 
// Процедура - обработчик события "ПриАктивизацииСтроки"
//
Процедура УдержанияПриАктивизацииСтроки(Элемент)
	
    ПодключитьОбработчикОжидания("ОбработчикОжиданияПриАктивизацииСтроки", 0.1, Истина);	 
	
КонецПроцедуры

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля Удержания
//
Процедура ОбработчикОжиданияПриАктивизацииСтроки()
    
	ДанныеСтроки = ЭлементыФормы.Удержания.ТекущаяСтрока;
	Если ДанныеСтроки <> Неопределено Тогда
		мСтарыйРезультат = ДанныеСтроки.Результат;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Удержания, мСведенияОВидахРасчета, , Истина);
	
	ОбновитьТекущегоСотрудника();
	МожноРедактироватьСтроку = (ДанныеСтроки = Неопределено Или Не ДанныеСтроки.Сторно) И мФизлицаИсправление[мФизлицаИсправление] = Неопределено;
	ЭлементыФормы.КоманднаяПанельУдержания.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КоманднаяПанельУдержания.Кнопки.Действие1.Доступность = ЭлементыФормы.Удержания.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюУдержания.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюУдержания.Кнопки.Действие1.Доступность = ЭлементыФормы.Удержания.ИзменятьСоставСтрок И МожноРедактироватьСтроку;

КонецПроцедуры // ОбработчикОжиданияНДФЛПриАктивизацииСтроки

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Начисления"
//
Процедура УдержанияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		Отказ = ЭлементыФормы.Удержания.ТекущаяСтрока.Сторно Или мФизлицаИсправление[мФизлицаИсправление] <> Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "Удержания"
//
Процедура УдержанияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Элемент.ТекущиеДанные.Сторно Или мФизлицаИсправление[Элемент.ТекущиеДанные.Физлицо] <> Неопределено	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных" табличного поля "Удержания"
//
Процедура УдержанияПриПолученииДанных(Элемент, ОформленияСтрок)

	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок, , "РазовыеНачисленияИУдержания");
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Ячейки.Авторасчет.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если мФизлицаИсправление[ДанныеСтроки.Физлицо] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			Ячейки.Авторасчет.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			Ячейки.Авторасчет.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		ЯчейкаСКартинкой = Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);	

		СведенияОВидеРасчета = мСведенияОВидахРасчета[ДанныеСтроки.ВидРасчета];

		Для СчПоказателей = 1 По 6 Цикл
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				
				ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
				ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"];
				
				// настроим видимость ячеек
				Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
						
				// размеры показателя будут доступны только для видимых и изменяемых показателей
				Если ВидимостьПоказателя Тогда
					
					Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
					
				КонецЕсли;
				
				// если отображается наименование - пропишем текст
				Если ВидимостьНаименованияПоказателя Тогда		
					Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
					Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				КонецЕсли;	
			Иначе
				// настроим видимость ячеек
				Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
			КонецЕсли;
		КонецЦикла;
		
		Ячейки.Показатели.Видимость = Ложь;	

	КонецЦикла;	
	
КонецПроцедуры

Процедура УдержанияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		ОбновитьТекущегоСотрудника();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик оповещения о выборе
//
Процедура УдержанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если Удержания.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Удержания.Добавить();
			СтрокаТабличнойЧасти.Физлицо	= ВыбранноеЗначение;
			СтрокаТабличнойЧасти.Авторасчет	= Истина;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
		
		ТекущиеДанные = ЭлементыФормы.Удержания.ТекущиеДанные;
		ТекущиеДанные.ВидРасчета = ВыбранноеЗначение;
		ТекущиеДанные.Авторасчет = Истина;
		
		ЗаполнитьПоказателиСтроки(ТекущиеДанные.Физлицо, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), , мГоловнаяОрганизация, "Удержания", ТекущиеДанные.ДатаНачала);
	
		РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			
		СтандартнаяОбработка = Ложь;
		
		ЗаполнениеДокументовЗК.ОбработатьПодборСотрудниковТабличнойЧасти(ДокументОбъект, "Удержания", ВыбранноеЗначение, "Физлицо");
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Удержания


// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура УдержанияФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение,, Истина);
	
КонецПроцедуры

Процедура УдержанияФизлицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, мГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура УдержанияФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементыФормы.Удержания.ТекущиеДанные;
	ТекущиеДанные.Авторасчет = Истина;
	
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Физлицо, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), , мГоловнаяОрганизация, "Удержания", ТекущиеДанные.ДатаНачала);
	
	РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура УдержанияФизлицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 1, Текст, Организация, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура УдержанияФизлицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 1, Текст, Организация, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода вида расчета
Процедура УдержанияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	//Предложим для выбора список расчетов
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", ЭлементыФормы.Удержания, "дляДокументаРегистрацияРазовыхУдержаний");
	
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = СпВидовРасчета;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = ИСТИНА;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура УдержанияФизлицоПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Удержания.ТекущиеДанные;
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Физлицо, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), , мГоловнаяОрганизация, "Удержания", ТекущиеДанные.ДатаНачала);
	
	РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода вида удержания
//
Процедура УдержанияВидРасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Удержания.ТекущиеДанные;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Удержания, мСведенияОВидахРасчета, , Истина);
	
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Физлицо, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), , мГоловнаяОрганизация, "Удержания", ТекущиеДанные.ДатаНачала);
	
	РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);

КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода вида расчета
Процедура УдержанияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УдержанияОрганизаций", "Ссылка НЕ В(&СпВидовРасчета)", Новый Структура("СпВидовРасчета", СпВидовРасчета), СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Результат"
//
Процедура УдержанияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультат Тогда
		
		ЭлементыФормы.Удержания.ТекущаяСтрока.Авторасчет = Ложь;
		мСтарыйРезультат = Элемент.Значение;

	КонецЕсли;

КонецПроцедуры

Процедура УдержанияПоказатель1ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 1,"Удержания");

КонецПроцедуры

Процедура УдержанияПоказатель2ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 2,"Удержания");
	
КонецПроцедуры

Процедура УдержанияПоказатель3ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 3,"Удержания");
	
КонецПроцедуры

Процедура УдержанияПоказатель4ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 4,"Удержания");
	
КонецПроцедуры

Процедура УдержанияПоказатель5ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 5,"Удержания");
	
КонецПроцедуры

Процедура УдержанияПоказатель6ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 6,"Удержания");
	
КонецПроцедуры

Процедура УдержанияДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Удержания.ТекущиеДанные;
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Физлицо, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), , мГоловнаяОрганизация, "Удержания", ТекущиеДанные.ДатаНачала, РучноеИзменениеПоказателей[ТекущиеДанные]);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ДействияФормыВвестиПоказателиДляРасчета(Кнопка)
	
	Если ЭлементыФормы.Удержания.ТекущиеДанные = Неопределено Тогда
		ТекущийСотрудник	= Неопределено;
	Иначе
		ТекущийСотрудник	= ЭлементыФормы.Удержания.ТекущиеДанные.ФизЛицо;
	КонецЕсли;

	Если Не ЗаполнитьПоказатели(ТекущийСотрудник, ЭтаФорма) Тогда
		Предупреждение("Для расчета сотрудников этого документа ввода показателей не требуется");
	КонецЕсли;

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ 
//

// Заполним список доступных видов удержаний
СпВидовРасчета = Новый СписокЗначений;

Запрос = Новый Запрос(
"ВЫБРАТЬ
|	УдержанияОрганизаций.Ссылка
|ИЗ
|	ПланВидовРасчета.УдержанияОрганизаций КАК УдержанияОрганизаций
|ГДЕ
|	УдержанияОрганизаций.Предопределенный");

СпВидовРасчета.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));

мСведенияОВидахРасчета = Новый Соответствие;

мДокументыИсправление = Новый Массив;
мФизлицаИсправление = Новый Соответствие;
	
РучноеИзменениеПоказателей = Новый Соответствие;