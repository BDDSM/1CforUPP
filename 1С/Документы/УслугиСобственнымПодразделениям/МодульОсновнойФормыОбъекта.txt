////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мПрименениеУСН;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мВедениеУчетаЗатратПоПроектам;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

//Процедура вызывается при изменении подразделения организации в шапке документа
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	ЗаполнитьСчетаЗатратВШапке(ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

//Процедура заполняет счета затрат в шапке документа в зависимости от подразделения организации
//
Процедура ЗаполнитьСчетаЗатратВШапке(ЗаполнятьБУ, ЗаполнятьНУ)
	//Счета в данной процедуре перезаполняются, если НЕ указана Номенклатура
	//Если Номенклатура указана - счета затрат заполняются в зависимости от настроек параметров учета услуг
	//	в рамках процедуры ЗаполнитьРеквизитыШапкиДокументаПоНоменклатуре
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	Если НЕ (ЗаполнятьБУ ИЛИ ЗаполнятьНУ) Тогда
		Возврат;
	КонецЕсли;
	СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, Справочники.СтатьиЗатрат.ПустаяСсылка());
	Если ЗаполнятьБУ Тогда
		СчетЗатрат = СчетаУчетаЗатрат.СчетУчетаБУ;
	КонецЕсли;
	Если ЗаполнятьНУ Тогда
		СчетЗатратНУ = СчетаУчетаЗатрат.СчетУчетаНУ;
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Затраты,ЭлементыФормы.КоманднаяПанельЗатраты);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

//Процедура заполняет реквизиты шапки документа по указанной Номенклатуре
//	В зависимости от номенклатуры заполняются следующие реквизиты шапки:
//		Подразделение, ПодразделениеОрганизации
//		Номенклатурная группа
//		Счета учета затрат
Процедура ЗаполнитьРеквизитыШапкиДокументаПоНоменклатуре()
	Перем ПараметрыНоменклатурыНеПустые;
	Перем РеквизитыШапкиЗаполнены;
	Перем РеквизитыШапкиРазличаются;
	Перем СтруктураПараметровНоменклатуры;
	
	//Нечем заполнять
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметровНоменклатуры = ПолучитьСтруктуруПараметровНоменклатуры();
	
	//Проверка заполненности 
	//1) параметров номенклатуры, которые попадут в шапку
	//2) соответствующих им реквизитов шапки
	//Сопоставление - отличаются ли реквизиты шапки от параметров номенклатуры
	ПараметрыНоменклатурыНеПустые 	= Ложь;
	РеквизитыШапкиЗаполнены 		= Ложь;
	РеквизитыШапкиРазличаются 		= Ложь;
	Для каждого Элем из СтруктураПараметровНоменклатуры Цикл
		//Проверка заполнения параметра номенклатуры
		ПараметрыНоменклатурыНеПустые = ПараметрыНоменклатурыНеПустые ИЛИ ЗначениеЗаполнено(Элем.Значение);
		//Проверка заполнения реквизита шапки
		РеквизитыШапкиЗаполнены = РеквизитыШапкиЗаполнены ИЛИ ЗначениеЗаполнено(ЭтотОбъект[Элем.Ключ]);
		//Сравнение реквизита шапки И параметра номенклатуры
		РеквизитыШапкиРазличаются = РеквизитыШапкиРазличаются ИЛИ Элем.Значение <> ЭтотОбъект[Элем.Ключ];
	КонецЦикла;
	
	//Если реквизиты шапки не отличаются от параметров номенклатуры - ничего менять не требуется
	Если НЕ РеквизитыШапкиРазличаются Тогда
		Возврат;
	КонецЕсли;

	//Если параметры номенклатуры не заполнены - сообщим об этом пользователю
	Если НЕ ПараметрыНоменклатурыНеПустые Тогда
		ТекстСообщения = "Не выполнена настройка параметров учета для услуги """ + СокрЛП(Номенклатура) + """" + Символы.ПС + 
		//Хвост сообщения зависит от того, заполнены ли реквизиты шапки
				"Данные на закладке ""Исполнитель"" " + ?(РеквизитыШапкиЗаполнены, "изменены не будут", "автоматически заполнены не будут");
		ОбщегоНазначения.Сообщение(ТекстСообщения,Перечисления.ВидыСообщений.Информация);
		Возврат;
	КонецЕсли;
	
	//Если в шапке было что-то заполнено, и пользователь не видит страницу Исполнитель - сообщим об изменении данных
	Если РеквизитыШапкиЗаполнены И ЭлементыФормы.Панель.ТекущаяСтраница <> ЭлементыФормы.Панель.Страницы.Исполнитель Тогда
		ТекстСообщения ="Изменены данные на закладке ""Исполнитель""";
		ОбщегоНазначения.Сообщение(ТекстСообщения,Перечисления.ВидыСообщений.Информация);
	КонецЕсли;
	
	//Заполним реквизиты шапки
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураПараметровНоменклатуры);
КонецПроцедуры

//Процедура определяет, что надо сделать с реквизитом табличной части
//- Надо ли его перезаполнить
//- Надо ли спросить пользователя о необходимости его заполнения
//	При выполнении процедуры происходит заполнение параметров ЗаполнитьРеквизит, СпроситьПроРеквизит
//Параметры:
//	ИмяРеквизита - строка, имя реквизита табличной части
//	ДанныеНоменклатуры 		- структура, источник данных для заполнения реквизита. Ключи структуры совпадают с именем реквизита
//	ЗаполнитьРеквизит 		- булево, признак того что реквизит следует заполнить. Параметр может измениться внутри данной процедуры
//	СпроситьПроРеквизит 	- булево, признак того что следует задать вопрос о заполнении реквизита. Параметр может измениться внутри данной процедуры
Процедура ОпределитьДействияСРеквизитомТЧ(ИмяРеквизита, ДанныеНоменклатуры, ЗаполнитьРеквизит, СпроситьПроРеквизит)
	Перем ВидимостьКолонки;
	
	Если НЕ ЗначениеЗаполнено(ДанныеНоменклатуры[ИмяРеквизита]) Тогда
		Возврат;
	КонецЕсли;
	
	// Определим, какие значения заполнены в ТЧ
	МассивЗначенийРеквизита = Затраты.ВыгрузитьКолонку(ИмяРеквизита);
	ОбщегоНазначения.УдалитьПовторяющиесяЭлементыМассива(МассивЗначенийРеквизита);
	
	ВидимостьКолонки = ЭлементыФормы.Затраты.Колонки[ИмяРеквизита].Видимость;
	Для Каждого Элем Из МассивЗначенийРеквизита Цикл
		//Заполняем реквизит, если его значение отличается от искомого
		Если Элем <> ДанныеНоменклатуры[ИмяРеквизита] Тогда
			ЗаполнитьРеквизит = Истина;
			//Спрашиваем про заполнение реквизита, если старое значение реквизита - не пустое, 
			//	и колонка с реквизитом видимая
			Если ВидимостьКолонки И ЗначениеЗаполнено(Элем) Тогда
				СпроситьПроРеквизит = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

//Функция получает данные Номенклатуры, которые подставляются в реквизиты табличной части
//	Возвращаемое значение - структура, ключи соответствуют именам реквизитов табличной части
Функция ПолучитьДанныеНоменклатуры()
	Возврат Новый Структура("СтатьяЗатрат, НоменклатурнаяГруппа", Номенклатура.СтатьяЗатрат, Номенклатура.НоменклатурнаяГруппаЗатрат);
КонецФункции

//Процедура заполняет реквизиты табличной части по указанной номенклатуре.
//	В табличной части перезаполняются СтатьяЗатрат И НоменклатурнаяГруппа
Процедура ЗаполнитьРеквизитыТабличнойЧастиДокументаПоНоменклатуре()
	Перем СпроситьПроСтатью;
	Перем СпроситьПроНГ;
	Перем ЗаполнитьСтатью;
	Перем ЗаполнитьНГ;
	Перем ДанныеНоменклатуры;

	//Нечего заполнять: нет строк в табличной части Затраты, либо не заполнена Номенклатура
	Если Затраты.Количество() = 0 ИЛИ НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Возврат;
	КонецЕсли;
	
	//Определим, какие значения будем подставлять в табличную часть
	ДанныеНоменклатуры = ПолучитьДанныеНоменклатуры();

	//Проверим, заполнены ли значения для подстановки в табличную часть
	Если НЕ ЗначениеЗаполнено(ДанныеНоменклатуры.СтатьяЗатрат) 
		И НЕ ЗначениеЗаполнено(ДанныеНоменклатуры.НоменклатурнаяГруппа) Тогда
		Возврат;
	КонецЕсли;
	
	СпроситьПроСтатью 	= Ложь;
	СпроситьПроНГ 		= Ложь;
	ЗаполнитьСтатью 				= Ложь;
	ЗаполнитьНГ 					= Ложь;
	
	ОпределитьДействияСРеквизитомТЧ("СтатьяЗатрат", 			ДанныеНоменклатуры, ЗаполнитьСтатью, 	СпроситьПроСтатью);
	ОпределитьДействияСРеквизитомТЧ("НоменклатурнаяГруппа", 	ДанныеНоменклатуры, ЗаполнитьНГ, 		СпроситьПроНГ);
		
	//Ничего заполнять не надо
	Если НЕ ЗаполнитьСтатью И НЕ ЗаполнитьНГ Тогда
		Возврат;
	КонецЕсли;
	
	//При необходимости зададим вопрос об изменении реквизитов ТЧ
	Если СпроситьПроСтатью ИЛИ СпроситьПроНГ Тогда
		ТекстПодвопроса1 = ?(СпроситьПроСтатью, Символы.ВК + "статью затрат - """ + 		ДанныеНоменклатуры.СтатьяЗатрат + """", "");
		ТекстПодвопроса2 = ?(СпроситьПроНГ, 	Символы.ВК + "номенклатурную группу - """ + ДанныеНоменклатуры.НоменклатурнаяГруппа + """", "");
	
		ТекстВопроса = "Заполнить в строках табличного поля ""Получатели""" + ТекстПодвопроса1 + ТекстПодвопроса2 + "?";
		ОтветНаВопрос = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			//Сбросим признак необходимости заполнения у тех реквизитов, про которые мы спрашивали и от заполнения которых пользователь отказался
			ЗаполнитьСтатью 	= НЕ СпроситьПроСтатью 	И ЗаполнитьСтатью;
			ЗаполнитьНГ 		= НЕ СпроситьПроНГ 		И ЗаполнитьНГ;
		КонецЕсли;
		//Проверим, надо ли что-то заполнять
		Если НЕ ЗаполнитьСтатью И НЕ ЗаполнитьНГ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ТабЗатраты = Затраты.Выгрузить();	
	Если ЗаполнитьСтатью Тогда
		ТабЗатраты.ЗаполнитьЗначения(ДанныеНоменклатуры.СтатьяЗатрат, "СтатьяЗатрат");
	КонецЕсли;
	Если ЗаполнитьНГ Тогда
		ТабЗатраты.ЗаполнитьЗначения(ДанныеНоменклатуры.НоменклатурнаяГруппа, "НоменклатурнаяГруппа");
	КонецЕсли;
	Затраты.Загрузить(ТабЗатраты);
	//Если менялась статья, необходимо обновить счета в таб части
	Если ЗаполнитьСтатью Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(Затраты, "Затраты", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;
КонецПроцедуры

//Процедура заполняет структуру с параметрами, которые определяются номенклатурой И подставляются в шапку документа
//Заполнение происходит на основе данных документа УстановкаПараметровУчетаНоменклатуры, закладка Услуги
//Состав ключей структуры:
//		Подразделение, ПодразделениеОрганизации,  
//		НоменклатурнаяГруппа, СчетЗатрат, СчетЗатратНУ
Функция ПолучитьСтруктуруПараметровНоменклатуры()
	Перем СтруктураПараметровНоменклатуры;

	//Таблица значений необходима для создания временной таблицы, которая будет передана в процедуру общего модуля
	//	для получения параметров учета номенклатуры
	ТаблицаНоменклатуры = Новый ТаблицаЗначений;
	ТаблицаНоменклатуры.Колонки.Добавить("Номенклатура", 	Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаНоменклатуры.Колонки.Добавить("ВидНоменклатуры", Новый ОписаниеТипов("СправочникСсылка.ВидыНоменклатуры"));
	НоваяСтрока = ТаблицаНоменклатуры.Добавить();
	НоваяСтрока.Номенклатура = Номенклатура;
	НоваяСтрока.ВидНоменклатуры = Номенклатура.ВидНоменклатуры;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ
	|	Номенклатура,
	|	ВидНоменклатуры
	|ПОМЕСТИТЬ ДанныеНоменклатуры
	|ИЗ &ТаблицаНоменклатуры КАК ТаблицаНоменклатуры";
	Запрос.УстановитьПараметр("ТаблицаНоменклатуры", ТаблицаНоменклатуры);
	Запрос.Выполнить();
	СчетаУчетаВДокументах.СформироватьТаблицуПараметровУчетаУслуг(Запрос.МенеджерВременныхТаблиц, Организация, Дата);
	
	Запрос.Текст = "ВЫБРАТЬ
	|	ДанныеНоменклатуры.Номенклатура,
	|	ДанныеНастроекПараметровУчета.Подразделение 				КАК Подразделение,
	|	ДанныеНастроекПараметровУчета.ПодразделениеОрганизации 		КАК ПодразделениеОрганизации,
	|	ДанныеНастроекПараметровУчета.НоменклатурнаяГруппа 			КАК НоменклатурнаяГруппа,
	|	ДанныеНастроекПараметровУчета.СчетЗатрат 					КАК СчетЗатрат,
	|	ДанныеНастроекПараметровУчета.СчетЗатратНУ 					КАК СчетЗатратНУ
	|ИЗ ДанныеНоменклатуры
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	ДанныеНастроекПараметровУчета КАК ДанныеНастроекПараметровУчета
	|ПО ДанныеНастроекПараметровУчета.Номенклатура = ДанныеНоменклатуры.Номенклатура
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураПараметровНоменклатуры = Новый Структура("Подразделение, ПодразделениеОрганизации, НоменклатурнаяГруппа, СчетЗатрат, СчетЗатратНУ");

	//Выборка всегда будет содержать хотя бы одну запись
	Выборка.Следующий();
	ЗаполнитьЗначенияСвойств(СтруктураПараметровНоменклатуры, Выборка);
	
	Возврат СтруктураПараметровНоменклатуры;
КонецФункции

//Процедура заполняет надпись с единицей измерения на форме
Процедура ЗаполнитьНадписьЕдиницаИзмерения()
	ТекстНадписи = "";
	Если НЕ Номенклатура.ЭтоГруппа И ЗначениеЗаполнено(Номенклатура.БазоваяЕдиницаИзмерения) Тогда
		ТекстНадписи = Номенклатура.БазоваяЕдиницаИзмерения.НаименованиеПолное;
	КонецЕсли;
	ЭлементыФормы.НадписьЕдиницаИзмерения.Заголовок = ТекстНадписи;
КонецПроцедуры

// Процедура заполняет подразделение организации в строке табличной части поля
//	Отличается от процедуры модуля РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру тем, что не выводит вопрос пользователю, 
//	если колонка ПодразделениеОрганизацииПолучатель невидимая
Процедура ЗаполнениеПодразделенияОрганизацииВСтрокеТабличнойЧасти(СтрокаТЧ) 
	Перем НовоеПодразделениеОрганизации;
	
	Если НЕ ОтражатьВБухгалтерскомУчете ИЛИ НЕ ЗначениеЗаполнено(Организация)
		ИЛИ НЕ ЗначениеЗаполнено(СтрокаТЧ.ПодразделениеПолучатель) Тогда
		Возврат;
	КонецЕсли;
													   
	СписокВыбора = РаботаСДиалогами.ПолучитьСписокПодразделенийОрганизаций(СтрокаТЧ.ПодразделениеПолучатель, Организация);
	
	Если СписокВыбора.Количество() <> 1 Тогда
		Возврат;
	КонецЕсли;
	
	НовоеПодразделениеОрганизации = СписокВыбора[0].Значение;
	
	//Если подразделение организации, соответствующее подразделению - пустое или совпадает со значением реквизита, ничего делать не надо
	Если НЕ ЗначениеЗаполнено(НовоеПодразделениеОрганизации)
		ИЛИ СтрокаТЧ.ПодразделениеОрганизацииПолучатель = НовоеПодразделениеОрганизации Тогда
		Возврат;
	КонецЕсли;
	
	//Если реквизит еще не заполнен, он заполняется без вопросов
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.ПодразделениеОрганизацииПолучатель) Тогда
		СтрокаТЧ.ПодразделениеОрганизацииПолучатель = НовоеПодразделениеОрганизации;
		Возврат;
	КонецЕсли;
	
	//Реквизит заполнен и значение отличается от подразделения организации, соответствующего подраздлению
	
	//Если колонка видима - зададим вопрос пользователю
	Если ЭлементыФормы.Затраты.Колонки.ПодразделениеОрганизацииПолучатель.Видимость Тогда
		ОтветНаВопрос = Вопрос("Заменить значение подразделения организации """
			+ СтрокаТЧ.ПодразделениеОрганизацииПолучатель + """ на """ + НовоеПодразделениеОрганизации + """ ?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	СтрокаТЧ.ПодразделениеОрганизацииПолучатель = НовоеПодразделениеОрганизации;

КонецПроцедуры //ЗаполнениеПодразделенияОрганизацииВСтрокеТабличнойЧасти

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Настраивает доступность (автоотметку незаполненного, пропуск при вводе) поля формы
//
Процедура УстановитьИспользованиеПоляВвода(ПолеВвода, Использование)
	
	ПолеВвода.АвтоОтметкаНезаполненного = Использование;
	ПолеВвода.АвтоВыборНезаполненного   = Использование;
	ПолеВвода.ПропускатьПриВводе        = НЕ Использование;
	Если НЕ Использование Тогда
		ПолеВвода.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Настраивает доступность (автоотметку незаполненного, пропуск при вводе) колонки табличной части и поля ввода в колонке
//
Процедура УстановитьИспользованиеКолонки(Колонка, Использование)
	
	Колонка.АвтоОтметкаНезаполненного = Использование;
	Колонка.ПропускатьПриВводе        = НЕ Использование;
	
	Колонка.ЭлементУправления.АвтоОтметкаНезаполненного = Использование;
	Колонка.ЭлементУправления.АвтоВыборНезаполненного   = Использование;
	Если НЕ Использование Тогда
		Колонка.ЭлементУправления.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры


// Процедура устанавливает доступность реквизитов формы и автоотметку незаполненного.
//
Процедура УстановитьДоступность()
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	// Счета учета
	ИмяДокумента = Метаданные().Имя;
	СтруктураКолонокТабличныхПолей = Новый Структура();
	СтруктураКолонокТабличныхПолей.Вставить("Затраты", ЭлементыФормы.Затраты.Колонки);
	
	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(
		Дата,
		ИмяДокумента,
		ЭлементыФормы, // Для установки свойств полей шапки
		СтруктураКолонокТабличныхПолей,
		Неопределено, // Не управляем видимостью
		ОтражатьВБухгалтерскомУчете,
		ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
		
	// Подразделение и подразделение организации
	УстановитьИспользованиеПоляВвода(ЭлементыФормы.Подразделение,            ОтражатьВУправленческомУчете);
	УстановитьИспользованиеПоляВвода(ЭлементыФормы.ПодразделениеОрганизации, ОтражатьВБухгалтерскомУчете);
		
	УстановитьИспользованиеКолонки(ЭлементыФормы.Затраты.Колонки.ПодразделениеПолучатель,            ОтражатьВУправленческомУчете);
	УстановитьИспользованиеКолонки(ЭлементыФормы.Затраты.Колонки.ПодразделениеОрганизацииПолучатель, ОтражатьВБухгалтерскомУчете);
	
КонецПроцедуры // УстановитьДоступность()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено И НЕ ЗначениеЗаполнено(Проект) Тогда
			Проект = Подразделение.ОсновнойПроект;
		КонецЕсли;
	Иначе
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,Неопределено);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Подразделение");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Затраты.Колонки, СтруктураКолонок);

	// Обновить содержание информационных строк.
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
    мВедениеУчетаЗатратПоПроектам = УправлениеПроектами.ВедениеУчетаЗатратПоПроектам();

	РаботаСДиалогами.УстановитьВидимостьКолонкиПроект(ЭлементыФормы.Затраты.Колонки, , мУказаниеПроектовВТабличнойЧастиДокументов И мВедениеУчетаЗатратПоПроектам);
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект", Истина);					   

	УстановитьДоступность();
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма, Новый Структура("Организация, Номенклатура"));
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	ЗаполнитьНадписьЕдиницаИзмерения();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УстановитьДоступность();
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	Если ОтражатьВБухгалтерскомУчете Тогда
		Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			// Попробуем заполнить подразделение организации 
			РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
																		  ПодразделениеОрганизации,
																		  Подразделение,
																		  Организация);
		КонецЕсли;
		//Заполним подразделение организации в строках ТЧ
		Для Каждого СтрокаТабличнойЧасти Из Затраты Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель) Тогда
				Продолжить;
			КонецЕсли;
			ЗаполнениеПодразделенияОрганизацииВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		КонецЦикла;
		ЗаполнитьСчетаЗатратВШапке(ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Затраты"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	УстановитьДоступность();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Затраты"), Неопределено, ОтражатьВНалоговомУчете);
	ЗаполнитьСчетаЗатратВШапке(Ложь, ОтражатьВНалоговомУчете);
	УстановитьДоступность();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	//Очистим несоответствующее подразделение организации, чтобы не задавалось лишних вопросов
	Если ПодразделениеОрганизации.Владелец <> Организация Тогда
		ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,Неопределено,Истина);

	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УстановитьДоступность();
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		//Реквизиты шапки заполним по номенклатуре
		ЗаполнитьРеквизитыШапкиДокументаПоНоменклатуре();
		
	Иначе
		ЗаполнитьСчетаЗатратВШапке(ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
		// Подразделение организации заполним по подразделению и организации
		РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(
			ОтражатьВБухгалтерскомУчете,
			ПодразделениеОрганизации,
			Подразделение,
			Организация);
		
	КонецЕсли;
										  
	Для Каждого СтрокаТабличнойЧасти Из Затраты Цикл
		Если СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель.Владелец <> Организация Тогда
			СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		ЗаполнениеПодразделенияОрганизацииВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
										  
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Затраты"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // ОрганизацияПриИзменении()

//Процедура обработчик события ПриИзменении элемента Номенклатура
//
Процедура НоменклатураПриИзменении(Элемент)
	ЗаполнитьНадписьЕдиницаИзмерения();
	Если Номенклатура.ЭтоГруппа Тогда
		Номенклатура = "";
		Возврат;
	КонецЕсли;

	Если Номенклатура.Пустая() Тогда
		Возврат;
	КонецЕсли;
	Если НЕ Номенклатура.Услуга Тогда
		Предупреждение("Выбрана номенклатура, которая не является услугой!");
		Номенклатура = "";
		Возврат;
	КонецЕсли;
	ЗаполнитьРеквизитыШапкиДокументаПоНоменклатуре();
	ЗаполнитьРеквизитыТабличнойЧастиДокументаПоНоменклатуре();
КонецПроцедуры

//Процедура обработчик события НачалоВыбора элемента Номенклатура
//
Процедура НоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	//Составим список видов номенклатуры "Услуга" - для ограничения выбора номенклатуры
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ Ссылка
	|	ИЗ Справочник.ВидыНоменклатуры
	|ГДЕ ТипНоменклатуры = ЗНАЧЕНИЕ(Перечисление.ТипыНоменклатуры.Услуга)";
	СписокВидовНоменклатуры = Новый СписокЗначений;
	СписокВидовНоменклатуры.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора(, Элемент);
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Отбор.ВидНоменклатуры.ВидСравнения  = ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.ВидНоменклатуры.Значение      = СписокВидовНоменклатуры;
	ФормаВыбора.Отбор.ВидНоменклатуры.Использование = Истина;
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.ПараметрТекущаяСтрока = Номенклатура;
	
	ФормаВыбора.Открыть();
КонецПроцедуры

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
																  ПодразделениеОрганизации,
																  Подразделение,
																  Организация);
	ПриИзмененииПодразделенияОрганизации();
КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Подразделение.
//
Процедура ПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	УправлениеПроизводством.ОткрытьФормуВыбораПроизводственногоПодразделения(Элемент, СтандартнаяОбработка, Ложь);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ПодразделениеОрганизации.
//
Процедура ПодразделениеОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	УправлениеПроизводством.ОткрытьФормуВыбораПроизводственногоПодразделения(Элемент, СтандартнаяОбработка, Истина);
КонецПроцедуры

// Процедура - обработчик события "При изменении" поля ввода ПодразделениеОрганизации
//
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	ПриИзмененииПодразделенияОрганизации();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка(ОтражатьВБухгалтерскомУчете,
															 Элемент,
															 ПодразделениеОрганизации,
															 Подразделение,
															 Организация,
															 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетЗатрат.
//
Процедура СчетЗатратПриИзменении(Элемент)
	
	СчетЗатратНУ = УправлениеЗатратами.ПолучитьСчетПрямыхРасходовНУ(СчетЗатрат);
	
КонецПроцедуры // СчетЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетЗатрат.
//
Процедура СчетЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокСчетов = БухгалтерскийУчет.ПолучитьМассивСчетов("Хозрасчетный", "20.01, 23", Ложь);
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("", Элемент, "Хозрасчетный", СписокСчетов);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетЗатрат
//
Процедура СчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетЗатратНУ.
//
Процедура СчетЗатратНУНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокСчетов = БухгалтерскийУчет.ПолучитьМассивСчетов("Налоговый", "20.01, 23", Ложь);
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("", Элемент, "Налоговый", СписокСчетов);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетЗатратНУ табличной части "Затраты".
//
Процедура СчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ЗАТРАТЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "Затраты"
//
Процедура ЗатратыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Перем ХарактерЗатрат;
	
	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	УправлениеПроектами.УстановитьДоступностьПроектаВСтрокеТабЧасти(ХарактерЗатрат, ОформлениеСтроки, ЭлементыФормы.Затраты);

	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, ДанныеСтроки.Продукция, ДанныеСтроки.Счет, ДанныеСтроки.СчетНУ, ОформлениеСтроки, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП);
	
КонецПроцедуры // ЗатратыПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "Затраты".
//
Процедура ЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элемент.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Проект) Тогда
			СтрокаТабличнойЧасти.Проект = Проект;
		КонецЕсли;
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			ДанныеНоменклатуры = ПолучитьДанныеНоменклатуры();
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, ДанныеНоменклатуры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ЗатратыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля СтатьяЗатрат табличной части "Затраты".
//
Процедура ЗатратыСтатьяЗатратПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТабличнойЧасти, "Затраты", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	Если мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.УстановитьПроектПоУмолчанию(СтрокаТабличнойЧасти.ПодразделениеПолучатель, СтрокаТабличнойЧасти.СтатьяЗатрат, СтрокаТабличнойЧасти.Проект);
	КонецЕсли;

КонецПроцедуры // ЗатратыСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Счет табличной части "Затраты".
//
Процедура ЗатратыСчетПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	СтрокаТабличнойЧасти.СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.Счет));
КонецПроцедуры // ЗатратыСчетЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат
//
Процедура ЗатратыСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ЗатратыСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат НУ.
//
Процедура ЗатратыСчетНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ЗатратыСчетЗатратНУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ПодразделениеПолучатель табличной части "Затраты".
//
Процедура ЗатратыПодразделениеПолучательПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементыформы.Затраты.ТекущиеДанные;
	// попробуем заполнить подразделение организации 
	ЗаполнениеПодразделенияОрганизацииВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	ПриИзмененииПодразделениеОрганизацииПолучатель();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ПодразделениеОрганизацииПолучатель табличной части "Затраты".
//
Процедура ЗатратыПодразделениеОрганизацииПолучательПриИзменении(Элемент)
	ПриИзмененииПодразделениеОрганизацииПолучатель();
КонецПроцедуры

// Процедура, обрабатывающая изменение поля ПодразделениеОрганизацииПолучатель в табличной части Затраты
//	Вызывается из процедур ЗатратыПодразделениеПолучательПриИзменении и ЗатратыПодразделениеОрганизацииПолучательПриИзменении
Процедура ПриИзмененииПодразделениеОрганизацииПолучатель()
	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТабличнойЧасти, "Затраты", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ПодразделениеОрганизацииПолучатель табличной части "Затраты".
//
Процедура ЗатратыПодразделениеОрганизацииПолучательНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаТЧ = ЭлементыФормы.Затраты.ТекущиеДанные;

	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка(ОтражатьВБухгалтерскомУчете,
															 Элемент,
															 СтрокаТЧ.ПодразделениеОрганизацииПолучатель,
															 СтрокаТЧ.ПодразделениеПолучатель,
															 Организация,
															 ЭтаФорма);


КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля Счет табличной части "Затраты".
//
Процедура ЗатратыСчетНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("", Элемент, "Хозрасчетный", мСписокСчетовБух);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СчетНУ табличной части "Затраты".
//
Процедура ЗатратыСчетНУНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("", Элемент, "Налоговый", мСписокСчетовНал);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ.
//
Процедура ЗатратыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Затраты", ДопПараметры);
	
КонецПроцедуры // ЗатратыЗаказНачалоВыбора()

//Процедура - обработчик события НачалоВыбора поля СтатьяЗатрат табличной части Затраты
//
Процедура ЗатратыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Неопределено, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.Материальные);
КонецПроцедуры