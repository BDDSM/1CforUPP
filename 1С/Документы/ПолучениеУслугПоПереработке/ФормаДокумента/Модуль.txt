////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 
Перем мИспользоватьТолькоСборочныеСпецификации Экспорт;

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

Перем мКолонкиТовары, мКолонкиМатериалы, мКолонкиДокументы;


Перем мПоДокументамРасчетов;
Перем мОтражатьВРегламентированномУчете;
Перем мРасчетыВУЕ;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;
Перем мВедениеУчетаЗатратПоПроектам;
Перем ПоказыватьВДокументахСчетаУчета;

// Хранит курс редактируемой строки табличной части "Предоплата"
Перем мКурсСтрокиДокументаРасчетов;

Перем мПрименениеУСН;
Перем мПрименениеУСНДоходы;

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуг.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ИспользованныеМатериалы,ЭлементыФормы.КоманднаяПанельИспользованныеМатериалы.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыРасчетовСКонтрагентом,ЭлементыФормы.КоманднаяПанельДокументыРасчетовСКонтрагентом.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
													 УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный"));

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Товары Тогда
		СписокЗапросов.Добавить("ПриходЦеныКонтрагента", "По ценам контрагента");
		СписокЗапросов.Добавить("ПриходНоменклатураКонтрагента", "По номенклатуре контрагента");
	ИначеЕсли ТабличнаяЧасть = ИспользованныеМатериалы Тогда
		СписокЗапросов.Добавить( "Спецификации", "По спецификациям");
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена                = Истина;
	ЕстьСерия               = Истина;
	ПодбиратьУслуги         = Ложь;
	ОтборУслугПоСправочнику = Истина;
	СкрыватьХарактеристику  = Ложь;

	Если ТабличнаяЧасть = Товары Тогда
		Команда                 = "ПодборВТабличнуюЧастьТовары";
		Валюта                  = ВалютаДокумента;
		ИмяТабличнойЧасти       = "Товары";
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		Команда                 = "ПодборВТабличнуюЧастьУслуги";
		Валюта                  = ВалютаДокумента;
		ИмяТабличнойЧасти       = "Услуги";
		ПодбиратьУслуги         = Истина;
		СкрыватьХарактеристику  = Истина;
	ИначеЕсли ТабличнаяЧасть = ИспользованныеМатериалы Тогда
		Команда                 = "ПодборВТабличнуюЧастьМатериалы";
		Валюта                  = ВалютаДокумента;
		ИмяТабличнойЧасти       = "ИспользованныеМатериалы";
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"              , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"   , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                  , Справочники.Склады.ПустаяСсылка());
	СтруктураПараметровПодбора.Вставить("ТипЦен"                 , ТипЦен);
	СтруктураПараметровПодбора.Вставить("Контрагент"             , Контрагент);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"     , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Организация"            , Организация);
	
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"    , Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"        , Валюта);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"        , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", ОтборУслугПоСправочнику);
	СтруктураПараметровПодбора.Вставить("СкрыватьХарактеристику" , СкрыватьХарактеристику);
	СтруктураПараметровПодбора.Вставить("Заголовок"              , "Подбор номенклатуры в документ " + 
										ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;
	Перем НоменклатурнаяГруппа, СтатьяЗатрат;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", 	СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены",			ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура", 		Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", 	ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество", 			Количество);
	ЗначениеВыбора.Свойство("Цена", 				Цена);
	ЗначениеВыбора.Свойство("Характеристика", 		Характеристика);
	ЗначениеВыбора.Свойство("Серия", 				Серия);
	ЗначениеВыбора.Свойство("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	ЗначениеВыбора.Свойство("СтатьяЗатрат", 		СтатьяЗатрат);

	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = ИспользованныеМатериалы)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары Тогда
		ИмяТЧ = "Товары";
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		ИмяТЧ = "Услуги";
	ИначеЕсли ТабличнаяЧасть = ИспользованныеМатериалы Тогда
		ИмяТЧ = "ИспользованныеМатериалы";
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ИспользованныеМатериалы Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		КонецЕсли;
		
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
        
		// Общая часть
		Если ТабличнаяЧасть <> Услуги Тогда
			СтрокаТабличнойЧасти.ЕдиницаИзмеренияМест = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения     = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент          = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		КонецЕсли;
		
		Если ТабличнаяЧасть = Товары Тогда
			СтрокаТабличнойЧасти.СерияНоменклатуры      = Серия;
		КонецЕсли;

		// Заполняем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");

		// Пересчитаем цену в валюту документа.
		Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

		Если ТабличнаяЧасть = Товары Тогда
			
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = ?(НоменклатурнаяГруппа <> Неопределено, НоменклатурнаяГруппа, СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа);

			СтрокаТабличнойЧасти.Количество       = Количество;
            СтрокаТабличнойЧасти.ОтражениеВУСН 	  = Перечисления.ОтражениеВУСН.Принимаются;
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				СпособЗаполненияЦен,
				ТипЦен.ЦенаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
				
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			
			СтрокаТабличнойЧасти.СтатьяЗатрат 		  = ?(СтатьяЗатрат <> Неопределено, СтатьяЗатрат, СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат);
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = ?(НоменклатурнаяГруппа <> Неопределено, НоменклатурнаяГруппа, СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат);
				
			СтрокаТабличнойЧасти.Количество = Количество;
			СтрокаТабличнойЧасти.ОтражениеВУСН 	  = Перечисления.ОтражениеВУСН.Принимаются;
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
				СпособЗаполненияЦен,
				ТипЦен.ЦенаВключаетНДС,
				УчитыватьНДС,
				СуммаВключаетНДС,
				УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
				
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ИспользованныеМатериалы Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
            СтрокаТабличнойЧасти.ОтражениеВУСН 	  = Перечисления.ОтражениеВУСН.Принимаются;
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
				Цена, СпособЗаполненияЦен, Ложь, Ложь, Ложь, 0);
				
			СтрокаТабличнойЧасти.СтатьяЗатрат 		  = ?(СтатьяЗатрат <> Неопределено, СтатьяЗатрат, СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат);
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = ?(НоменклатурнаяГруппа <> Неопределено, НоменклатурнаяГруппа, СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат);
			
		Иначе

			СтрокаТабличнойЧасти.Количество       = Количество;

		КонецЕсли;

		Если ТабличнаяЧасть = Товары
		 Или ТабличнаяЧасть = ИспользованныеМатериалы Тогда
		 	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		КонецЕсли;

		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		Если ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = Услуги Тогда
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		КонецЕсли;
		
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, ИмяТЧ, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	ЭлементыФормы[ИмяТЧ].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ИмяТЧ].ТекущаяКолонка = ЭлементыФормы[ИмяТЧ].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораПоСпецификации(ТабличнаяЧасть, ЗначениеВыбора)
	
	Перем Спецификация, Количество;
	
	ЗначениеВыбора.Свойство("Спецификация", Спецификация);
	ЗначениеВыбора.Свойство("Количество", 	Количество);
	
	Отбор = Новый Структура();
	
	ИсходныеКомплектующие = УправлениеПроизводством.ПолучитьМатериалыПоСпецификации(Спецификация, Количество, Отбор, Дата, мИспользоватьТолькоСборочныеСпецификации);
	
	Если ИсходныеКомплектующие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ИсходныеКомплектующие Цикл
	
		СтруктураПодбора = Новый Структура();
		СтруктураПодбора.Вставить("Номенклатура",       Строка.Номенклатура);
		СтруктураПодбора.Вставить("ЕдиницаИзмерения",   Строка.ЕдиницаИзмерения);
		СтруктураПодбора.Вставить("Характеристика",     Строка.ХарактеристикаНоменклатуры);
		СтруктураПодбора.Вставить("Серия",     			Справочники.СерииНоменклатуры.ПустаяСсылка());
		СтруктураПодбора.Вставить("Количество",     	Строка.Количество);
		СтруктураПодбора.Вставить("СтатьяЗатрат",     	Строка.СтатьяЗатрат);
		СтруктураПодбора.Вставить("НоменклатурнаяГруппа", Строка.НоменклатурнаяГруппа);

		ОбработкаПодбора(ТабличнаяЧасть, СтруктураПодбора);
		
	КонецЦикла;

КонецПроцедуры // ОбработкаПодбораПоСпецификации()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары", мТекущийДоговорКонтрагента);
	
	ВалютаДокумента         = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	СтруктураКурсаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты( ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументОбъект.Дата);
	КурсДокумента           = СтруктураКурсаДокумента.Курс;
	КратностьДокумента      = СтруктураКурсаДокумента.Кратность;
	КурсВзаиморасчетов      = СтруктураКурсаДокумента.Курс;
	КратностьВзаиморасчетов = СтруктураКурсаДокумента.Кратность;

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Заказ, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());

	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	мРасчетыВУЕ           = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
		Проект = ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

// Процедура выполняет заполниение табличной части неполученными ТМЦ по заказу поставщику.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть)

	ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам;
	ПредставлениеЗаказПоставщику = Метаданные.Документы.ЗаказПоставщику.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";
	ИначеЕсли Не Заказ.Проведен Тогда
		ТекстПредупреждения = ПредставлениеЗаказПоставщику + " не проведен.
							 |Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, ,);
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		ЗаполнитьТоварыПоОстаткамУпр();
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		ЗаполнитьУслугиПоОстаткамУпр();
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

// Процедура показывает на закладке "Предоплата" итоговые суммы 
// в валюте взаиморасчетов и в валюте регл.учета - всего по документу, предоплата, осталось оплатить
//
Процедура ПересчетСуммВзаиморасчетов()

	СуммаВзаиморасчетов = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары")
	                    + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетов, ВалютаДокумента,
	                                                 ДоговорКонтрагента.ВалютаВзаиморасчетов,
	                                                 ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
	                                                 ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);

	РаботаСДиалогами.ЗаполнитьНадписиРасчетовСКонтрагентом(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, СуммаВзаиморасчетов);

КонецПроцедуры

// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации(Элемент=Неопределено) Экспорт
	
	ЗаполняемыеТабличныеЧасти = Новый Соответствие();
	ЗаполняемыеТабличныеЧасти.Вставить("");
	ЗаполняемыеТабличныеЧасти.Вставить("Услуги");
	ЗаполняемыеТабличныеЧасти.Вставить("ИспользованныеМатериалы");
	
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, ЗаполняемыеТабличныеЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура установливает доступность полей продукция таб. поля "Услуги"
//
Процедура УстановитьДоступностьПродукции(ТекСтрока)
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Флаг = Истина;
	Если Не ТекСтрока.СтатьяЗатрат.Пустая()
		  И ТекСтрока.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		Флаг = Ложь;
	Иначе
		Если ЗначениеЗаполнено(ТекСтрока.Продукция)
		 ИЛИ ЗначениеЗаполнено(ТекСтрока.ХарактеристикаПродукции)
		 ИЛИ ЗначениеЗаполнено(ТекСтрока.СерияПродукции) Тогда
		 	ТекСтрока.Продукция               = "";
		 	ТекСтрока.ХарактеристикаПродукции = "";
			ТекСтрока.СерияПродукции          = "";
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.Услуги.Колонки.Продукция              .ТолькоПросмотр = Флаг;
	ЭлементыФормы.Услуги.Колонки.ХарактеристикаПродукции.ТолькоПросмотр = Флаг;
	ЭлементыФормы.Услуги.Колонки.СерияПродукции         .ТолькоПросмотр = Флаг;
	
КонецПроцедуры // УстановитьДоступностьПродукции()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость = мПоДокументамРасчетов;

	Колонки      = ЭлементыФормы.Товары.Колонки;
	КолонкиУслуг = ЭлементыФормы.Услуги.Колонки;
	КолонкиМатериалов = ЭлементыФормы.ИспользованныеМатериалы.Колонки;

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> Колонки.СтавкаНДС.Видимость Тогда

		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СтавкаНДС, УчитыватьНДС);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.СтавкаНДС, УчитыватьНДС);

	КонецЕсли;

	Если УчитыватьНДС <> Колонки.СуммаНДС.Видимость Тогда

		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаНДС,      УчитыватьНДС);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.Всего,         УчитыватьНДС);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.СуммаНДС, УчитыватьНДС);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.Всего,    УчитыватьНДС);

	КонецЕсли;

	ОтражатьВНалоговомУчетеУСН = (мПрименениеУСН И ОтражатьВНалоговомУчете И (НЕ мПрименениеУСНДоходы));
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ОтражениеВУСН, 	  ОтражатьВНалоговомУчетеУСН);
	
	АвтоОтметка = Истина;
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			АвтоОтметка = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если ЭлементыФормы.Заказ.АвтоотметкаНеЗаполненного <> АвтоОтметка Тогда
		ЭлементыФормы.Заказ.АвтоотметкаНеЗаполненного = АвтоОтметка;
	КонецЕсли;

	Если ЭлементыФормы.Заказ.ОтметкаНеЗаполненного <> АвтоОтметка И НЕ ЗначениеЗаполнено(Заказ) Тогда
		ЭлементыФормы.Заказ.ОтметкаНеЗаполненного = АвтоОтметка;
	КонецЕсли;
	
	// Установка видимости колонок если отражаем в рег. учете.
	ОписаниеТабличныхЧастей = Новый Структура();
	ОписаниеТабличныхЧастей.Вставить("Услуги", 					КолонкиУслуг);
	ОписаниеТабличныхЧастей.Вставить("ИспользованныеМатериалы", КолонкиМатериалов);
	
	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(Дата, Метаданные().Имя, ЭлементыФормы, ОписаниеТабличныхЧастей, ПоказыватьВДокументахСчетаУчета, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП, УчитыватьНДС И НЕ НДСВключенВСтоимость);
	
	ЭлементыФормы.НадписьСчетЗатрат  .Видимость = ЭлементыФормы.СчетЗатрат	.Видимость;
	ЭлементыФормы.НадписьСчетЗатратНУ.Видимость = ЭлементыФормы.СчетЗатратНУ.Видимость;
	ЭлементыФормы.НадписьСчетУчетаНДС.Видимость = ЭлементыФормы.СчетУчетаНДС.Видимость;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.Субконто1,    ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.Субконто2,    ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.Субконто3,    ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.СубконтоНУ1,  ОтражатьВНалоговомУчетеНП);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.СубконтоНУ2,  ОтражатьВНалоговомУчетеНП);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.СубконтоНУ3,  ОтражатьВНалоговомУчетеНП);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.ОтражениеВУСН,ОтражатьВНалоговомУчетеУСН);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиМатериалов.Цена, ОтражатьВУправленческомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиМатериалов.Сумма, ОтражатьВУправленческомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиМатериалов.ОтражениеВУСН,ОтражатьВНалоговомУчетеУСН);
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьПодразделение.Видимость 			= ОтражатьВУправленческомУчете;
	ЭлементыФормы.Подразделение.Видимость 					= ОтражатьВУправленческомУчете;
	ЭлементыФормы.НадписьПодразделениеОрганизации.Видимость = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.ПодразделениеОрганизации.Видимость 		= ОтражатьВБухгалтерскомУчете;

	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
	
	РаботаСДиалогами.УстановитьВидимостьКолонкиПроект(ЭлементыФормы.Услуги.Колонки, , мУказаниеПроектовВТабличнойЧастиДокументов И мВедениеУчетаЗатратПоПроектам);
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");

	// Видимость колонок таблицы документов расчетов
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.СуммаРегл,  мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.ДатаОплаты, мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги"));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьНДСДокумента(ЭтотОбъект));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, 
																				   ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
																				   ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
	                                                                               мВалютаРегламентированногоУчета) + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Процедура управляет доступностью колонок субконто в табличной части услуги
Процедура УстановитьДоступностьСубконто(СтрокаТабличнойЧасти)

	Колонки = ЭлементыФормы.Услуги.Колонки;

	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатрат,
							 СтрокаТабличнойЧасти.Субконто1,
							 Колонки.Субконто1,
							 СтрокаТабличнойЧасти.Субконто2,
							 Колонки.Субконто2,
							 СтрокаТабличнойЧасти.Субконто3,
							 Колонки.Субконто3);
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратНУ,
							 СтрокаТабличнойЧасти.СубконтоНУ1,
							 Колонки.СубконтоНУ1,
							 СтрокаТабличнойЧасти.СубконтоНУ2,
							 Колонки.СубконтоНУ2,
							 СтрокаТабличнойЧасти.СубконтоНУ3,
							 Колонки.СубконтоНУ3);

КонецПроцедуры // УстановитьДоступностьСубконто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПоставщику")
	И Не ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
		Предупреждение("Документ можно вводить только на основании заказа поставщику с видом операции ""Переработка"".");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка", ПараметрОбъектКопирования);

		Если ПараметрОснование = Неопределено И ПараметрОбъектКопирования = Неопределено Тогда
				
			РегистрироватьЦеныПоставщика = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РегистрироватьЦеныПоставщика");

			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
			
			Если НЕ ЗначениеЗаполнено(СтатьяЗатрат) Тогда
				СтатьяЗатрат = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтатьяЗатратУслугПоПереработке");
			КонецЕсли;
			ЗаполнитьСчетаУчетаВШапке();
			
		КонецЕсли;
	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЦенаВРознице");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("СтатьяЗатрат");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");

	// Установить ограничение - изменять видимость колонок для табличной части
	// "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Услуги.Колонки, СтруктураКолонок);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);
	
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);

	// Определить счет-фактуру, введенный на основании этого документа, если такой 
	// счет-фактура существует.
	ЗаполнитьТекстПроСчетФактуру();

	// Обновить содержание информационных строк.
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Заказ, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента             = Дата;
	мТекущаяВалютаВзаиморасчетов      = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мПоДокументамРасчетов             = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	мРасчетыВУЕ                       = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	мПрименениеУСН 		 = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	
	мВедениеУчетаЗатратПоПроектам = УправлениеПроектами.ВедениеУчетаЗатратПоПроектам();

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Товары") + УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги"),
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = "   ( " + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ДоговорКонтрагента.ВалютаВзаиморасчетов, 
																							   КурсВзаиморасчетов,
																							   КратностьВзаиморасчетов,
	                                                                                           мВалютаРегламентированногоУчета) + " )";

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.ИспользованныеМатериалы.Заголовок = "Использованные материалы (" + ДокументОбъект.ИспользованныеМатериалы.Количество() + " поз.)";
	СтраницаПанели.Товары.Заголовок = "Продукция ("   + ДокументОбъект.Товары.Количество() + " поз.)";
	СтраницаПанели.Услуги.Заголовок = "Доп. услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
	СтраницаПанели.ДокументыРасчетовСКонтрагентом.Заголовок = "Предоплата (" + ДокументОбъект.ДокументыРасчетовСКонтрагентом.Количество() + " поз.)";
	
	ПересчетСуммВзаиморасчетов();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда, Спецификация;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		ЗначениеВыбора.Свойство("Спецификация", Спецификация);

		Если Спецификация <> Неопределено Тогда
			ОбработкаПодбораПоСпецификации(ИспользованныеМатериалы, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			ОбработкаПодбора(ИспользованныеМатериалы, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта меню "Заполнить по заказу поставщику" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказуПоставщику(Кнопка)

	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Предупреждение("Не выбран заказ поставщику!");
		Возврат;
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоОстаткам(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Заполнить по заказу поставщику" кнопки "Заполнить"
// командной панели табличного поля "Услуги",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельУслугиДействиеЗаполнитьПоЗаказуПоставщику(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Предупреждение("Не выбран заказ поставщику!");
		Возврат;
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоОстаткам(Услуги);
	
КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказуПоставщику()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = УчитыватьНДС; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = Ложь;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	
	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)
	
	ДействиеПодбор(Услуги);
	
КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");
	//СтруктураЗапрещенных = Новый Структура("НДСВключенВСтоимость, УчитыватьНДС, СуммаВключаетНДС");

	СтруктураНередактируемыхРеквизитов = Новый Структура;
	СтруктураНередактируемыхРеквизитов.Вставить("УсловиеПродаж");

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураНередактируемыхРеквизитов, "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, Новый Структура, "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "ИспользованныеМатериалы", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "ИспользованныеМатериалы".
//
Процедура КоманднаяПанельИспользованныеМатериалыПодбор(Кнопка)
	
	ДействиеПодбор(ИспользованныеМатериалы);
	
КонецПроцедуры // КоманднаяПанельИспользованныеМатериалыПодбор()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "ИспользованныеМатериалы".
//
Процедура КоманднаяПанельИспользованныеМатериалыЗаполнитьПоОстаткам(Кнопка)
	
	Если ИспользованныеМатериалы.Количество() > 0 Тогда
		Ответ = Вопрос("При заполнении табличная часть будет очищена!" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьИспользованныеМатериалы();
		
КонецПроцедуры // КоманднаяПанельИспользованныеМатериалыЗаполнить()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "ИспользованныеМатериалы"
//
Процедура КоманднаяПанельИспользованныеМатериалыЗаполнитьПоСпецификации(Кнопка)
	
	ЗаполнитьМатериалыПоСпецификации();
	
КонецПроцедуры // КоманднаяПанельИспользованныеМатериалыЗаполнитьПоСпецификации()

// Процедура вызывается при выборе пункта меню "Заполнить по заказам документа" 
// кнопки "Заполнить" командной панели табличного поля "Документы расчетов с контрагентом",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельДокументыРасчетовСКонтрагентомЗаполнитьТолькоПоЗаказу(Кнопка)
	
	УправлениеВзаиморасчетами.ЗаполнитьПредоплату(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	мПрименениеУСН 		 = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бухгалтерском учете.
//
Процедура ОтражатьВБухгалтерскомУчетаПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");

	Если НЕ Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

	ЗаполняемыеТабличныеЧасти = Новый Соответствие();
	ЗаполняемыеТабличныеЧасти.Вставить("");
	ЗаполняемыеТабличныеЧасти.Вставить("Услуги");
	ЗаполняемыеТабличныеЧасти.Вставить("ИспользованныеМатериалы");
	
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, ЗаполняемыеТабличныеЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	Если Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	Если НЕ Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;

	ЗаполняемыеТабличныеЧасти = Новый Соответствие();
	ЗаполняемыеТабличныеЧасти.Вставить("");
	ЗаполняемыеТабличныеЧасти.Вставить("Услуги");
	ЗаполняемыеТабличныеЧасти.Вставить("ИспользованныеМатериалы");
	
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, ЗаполняемыеТабличныеЧасти, Неопределено, ОтражатьВНалоговомУчете);
	
	Если Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	мПрименениеУСН 		 = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	СтарыйДоговор = ДоговорКонтрагента;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	Если НЕ СтарыйДоговор = ДоговорКонтрагента Тогда
		ПриИзмененииДоговора();
	КонецЕсли;	
	
	УстановитьВидимость();
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПодразделениеОрганизацииПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Подразделения организации.
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации(Элемент);
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерассчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерассчитатьДолгНажатие(Элемент)

	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Заказ, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерассчитатьАвансДоговораНажатие()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода
// "СчетУчетаРасчетовСКонтрагентом".
//
Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода
// "СчетУчетаНДС".
//
Процедура СчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры // СчетУчетаНДСОбработкаВыбора(Элемент)

// Процедура - обработчик события "ОбработкаВыбора" поля ввода
// "СчетЗатрат".
//
Процедура СчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры // СчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода
// "СчетУчетаРасчетовПоАвансам".
//
Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода
// "СчетЗатрат".
//
Процедура СчетЗатратПриИзменении(Элемент)

	Если СчетЗатрат.Пустая() Тогда
		СчетЗатратНУ = ПланыСчетов.Налоговый.ПустаяСсылка();

	Иначе
		СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетЗатрат));

	КонецЕсли;

КонецПроцедуры // СчетЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Заказ
//
Процедура ЗаказПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Заказ) Тогда
		
		Контрагент         = Заказ.Контрагент;
		ДоговорКонтрагента = Заказ.ДоговорКонтрагента;
		ПриИзмененииДоговора();
		
	КонецЕсли;

КонецПроцедуры // ЗаказПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка ОтражатьВУправленческомУчете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
//
Процедура ЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	ТабОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить( Перечисления.ВидыОперацийЗаказПоставщику.Переработка);
	
	ТекОтбор              = ТабОтбора.Добавить();
	ТекОтбор.Имя          = "ВидОперации";
	ТекОтбор.ВидСравнения = ВидСравнения.ВСписке;
	ТекОтбор.Значение     = СписокОтбора;
	ТекОтбор.НеИзменять   = Истина;
	
	Если ЗначениеЗаполнено( Организация) Тогда
		ТекОтбор              = ТабОтбора.Добавить();
		ТекОтбор.Имя          = "Организация";
		ТекОтбор.ВидСравнения = ВидСравнения.Равно;
		ТекОтбор.Значение     = Организация;
		ТекОтбор.НеИзменять   = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено( Контрагент) Тогда
		ТекОтбор              = ТабОтбора.Добавить();
		ТекОтбор.Имя          = "Контрагент";
		ТекОтбор.ВидСравнения = ВидСравнения.Равно;
		ТекОтбор.Значение     = Контрагент;
	КонецЕсли;
	
	Если ЗначениеЗаполнено( ДоговорКонтрагента) Тогда
		ТекОтбор              = ТабОтбора.Добавить();
		ТекОтбор.Имя          = "ДоговорКонтрагента";
		ТекОтбор.ВидСравнения = ВидСравнения.Равно;
		ТекОтбор.Значение     = ДоговорКонтрагента;
	КонецЕсли;
	
	РаботаСДиалогами.ОткрытьФормуДокументаСОтбором(ЭтаФорма, Элемент,, ТабОтбора);

КонецПроцедуры // ЗаказНачалоВыбора()

// Процедура обработчик события ПриИзменении поля ввода СтатьяЗатрат
//
Процедура СтатьяЗатратПриИзменении(Элемент)

	ЗаполнитьСчетаУчетаВШапке(Ложь);
	
КонецПроцедуры // СтатьяЗатратПриИзменении()

// Процедура обработчик события "ПриИзменении" поля ввода СтатьяЗатрат.
//
Процедура СтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.Прочие);
	
КонецПроцедуры // СтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Контрагент
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	// Могли поменять договор.
	ПриИзмененииДоговора();
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		Если ЗначениеЗаполнено(Контрагент) И Заказ.Контрагент <> Контрагент Тогда
			Заказ = Неопределено;
		ИначеЕсли ЗначениеЗаполнено(ДоговорКонтрагента) И Заказ.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
			Заказ = Неопределено;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И Заказ.ДоговорКонтрагента <> ДоговорКонтрагента Тогда
			Заказ = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	СписокОтбора = Новый СписокЗначений;
	СписокОтбора.Добавить( Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
	СписокОтбора.Добавить( Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
	
	СтруктОтбора = Новый Структура;
	СтруктОтбора.Вставить( "ЗначениеОтбора",     СписокОтбора);
	СтруктОтбора.Вставить( "ВидСравненияОтбора", ВидСравнения.ВСписке);
	
	СтруктДопПараметры = Новый Структура;
	СтруктДопПараметры.Вставить("ВедениеВзаиморасчетов", СтруктОтбора);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(
		ЭтотОбъект,
		ЭтаФорма,
		Элемент,
		Контрагент,
		ДоговорКонтрагента,
		Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком,
		СтандартнаяОбработка,
		СтруктДопПараметры);
												
КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Проект.
//
Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ПроектНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
											+ ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));

	КонецЕсли;

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "НачалоВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	РаботаСДиалогами.НачалоВыбораНоменклатурыКонтрагента(Элемент, СтандартнаяОбработка, Контрагент, СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;
    СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ТоварыЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Товары");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ЗаказПокупателя
// в строке табличной части "Товары".
//
Процедура ТоварыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Товары", ДопПараметры);

КонецПроцедуры // ТоварыЗаказНачалоВыбора()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации 
// в табличной части "Продукция".
//
Процедура ТоварыСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.Товары.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ТоварыСпецификацияНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Услуги");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода номенклатуры
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	РаботаСДиалогами.НачалоВыбораНоменклатурыКонтрагента(Элемент, СтандартнаяОбработка, Контрагент, СтрокаТабличнойЧасти.Номенклатура);
	
КонецПроцедуры // УслугиНоменклатураНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Услуги". Формирует данные в колонке "ЕдиницаИзмерения".
//
Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	Если ЭлементыФормы.Услуги.Колонки.ХарактерЗатрат.Видимость Тогда
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.Текст = ХарактерЗатрат;
	КонецЕсли;
    УправлениеПроектами.УстановитьДоступностьПроектаВСтрокеТабЧасти(ХарактерЗатрат, ОформлениеСтроки, ЭлементыФормы.Услуги);

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
											+ ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	КонецЕсли;
    ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, ДанныеСтроки.Продукция, ДанныеСтроки.СчетЗатрат, ДанныеСтроки.СчетЗатратНУ, ОформлениеСтроки, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП);

КонецПроцедуры // УслугиПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" табличной части
// "Услуги". Формирует данные в колонке "СчетУчетаНУ".
//
Процедура УслугиСчетУчетаБУПриИзменении(Элемент)

	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки       = ЭлементыФормы.Услуги.Колонки;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
								 ТекущиеДанные.Субконто1, Колонки.Субконто1,
								 ТекущиеДанные.Субконто2, Колонки.Субконто2,
								 ТекущиеДанные.Субконто3, Колонки.Субконто3);

	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ТекущиеДанные);
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетЗатратНУ,
								 ТекущиеДанные.СубконтоНУ1, Колонки.СубконтоНУ1,
								 ТекущиеДанные.СубконтоНУ2, Колонки.СубконтоНУ2,
								 ТекущиеДанные.СубконтоНУ3, Колонки.СубконтоНУ3);

	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		ТекущиеДанные.СтатьяЗатрат,
		ТекущиеДанные.СчетЗатрат,
		ТекущиеДанные.Субконто1,
		ТекущиеДанные.Субконто2,
		ТекущиеДанные.Субконто3);

	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		ТекущиеДанные.СтатьяЗатрат,
		ТекущиеДанные.СчетЗатратНУ,
		ТекущиеДанные.СубконтоНУ1,
		ТекущиеДанные.СубконтоНУ2,
		ТекущиеДанные.СубконтоНУ3);

КонецПроцедуры // УслугиСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Услуги".
//
Процедура УслугиСубконтоБУ1ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;

	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, Истина);
	Если ЗначениеЗаполнено(СтрокаТЧ.СчетЗатратНУ) Тогда
		Если ТипЗнч(СтрокаТЧ.СубконтоНУ1) = ТипЗнч(СтрокаТЧ.Субконто1) Тогда
			СтрокаТЧ.СубконтоНУ1 = СтрокаТЧ.Субконто1;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // УслугиСубконтоБУ1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Услуги".
//
Процедура УслугиСубконтоБУ2ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, Истина);
	Если ЗначениеЗаполнено(СтрокаТЧ.СчетЗатратНУ) Тогда
		Если ТипЗнч(СтрокаТЧ.СубконтоНУ2) = ТипЗнч(СтрокаТЧ.Субконто2) Тогда
			СтрокаТЧ.СубконтоНУ2 = СтрокаТЧ.Субконто2;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // УслугиСубконтоБУ2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Услуги".
//
Процедура УслугиСубконтоБУ3ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;

	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, Истина);
	Если ЗначениеЗаполнено(СтрокаТЧ.СчетЗатратНУ) Тогда
		Если ТипЗнч(СтрокаТЧ.СубконтоНУ3) = ТипЗнч(СтрокаТЧ.Субконто3) Тогда
			СтрокаТЧ.СубконтоНУ3 = СтрокаТЧ.Субконто3;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // УслугиСубконтоБУ3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" табличной части
// "Услуги". Формирует данные в колонке "УслугиСтатьяЗатрат".
//
Процедура УслугиСтатьяЗатратПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете,Ложь);

	УстановитьДоступностьСубконто (СтрокаТабличнойЧасти);
	УстановитьДоступностьПродукции(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	
	Если ЭлементыФормы.Услуги.Колонки.Проект.Видимость Тогда
		УправлениеПроектами.УстановитьПроектПоУмолчанию(Справочники.Подразделения.ПустаяСсылка(), СтрокаТабличнойЧасти.СтатьяЗатрат, СтрокаТабличнойЧасти.Проект);
	КонецЕсли;

КонецПроцедуры // УслугиСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура УслугиСчетУчетаНУПриИзменении(Элемент)

	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки       = ЭлементыФормы.Услуги.Колонки;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
								 ТекущиеДанные.СубконтоНУ1, Колонки.СубконтоНУ1,
								 ТекущиеДанные.СубконтоНУ2, Колонки.СубконтоНУ2,
								 ТекущиеДанные.СубконтоНУ3, Колонки.СубконтоНУ3);

	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		ТекущиеДанные.СтатьяЗатрат,
		ТекущиеДанные.СчетЗатратНУ,
		ТекущиеДанные.СубконтоНУ1,
		ТекущиеДанные.СубконтоНУ2,
		ТекущиеДанные.СубконтоНУ3);

КонецПроцедуры // УслугиСчетУчетаНУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Продукция
// в строке табличной части "Услуги".
//
Процедура УслугиПродукцияПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.СерияПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.СерияПродукции = 0;
	КонецЕсли; 

	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.ХарактеристикаПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаПродукции = 0;
	КонецЕсли; 

КонецПроцедуры // УслугиПродукцияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "Услуги".
//
Процедура УслугиЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Услуги", ДопПараметры);
	
КонецПроцедуры // УслугиЗаказНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Проект"
//
Процедура УслугиПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // УслугиПроектНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ИспользованныеМатериалы

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ИспользованныеМатериалы". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ИспользованныеМатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, ДанныеСтроки.Номенклатура, ДанныеСтроки.СчетЗатрат, ДанныеСтроки.СчетЗатратНУ, ОформлениеСтроки, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
КонецПроцедуры // ИспользованныеМатериалыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполняем реквизиты табличной части.
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                          Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
	СтрокаТабличнойЧасти.СтатьяЗатрат 		  = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ИспользованныеМатериалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
    СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	
КонецПроцедуры // ИспользованныеМатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ИспользованныеМатериалыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыЕдиницаМестПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ИспользованныеМатериалыЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ИспользованныеМатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ИспользованныеМатериалыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыЦенаПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ИспользованныеМатериалыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыСуммаПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"ИспользованныеМатериалы");

КонецПроцедуры // ИспользованныеМатериалыСуммаПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры // ИспользованныеМатериалыСчетУчетаБУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
// в строке табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыСчетУчетаБУПриИзменении(Элемент)

	ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные.СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));

КонецПроцедуры // ИспользованныеМатериалыСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатрат
// в строке табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные;
	ЗаполнитьСчетаУчетаВТабЧасти(Услуги, 	"Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Ложь);
	
КонецПроцедуры // ИспользованныеМатериалыСтатьяЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СтатьяЗатрат
// в строке табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = новый ТаблицаЗначений();
	ТаблицаОтбора.Колонки.Добавить("Имя");
	ТаблицаОтбора.Колонки.Добавить("ВидСравнения");
	ТаблицаОтбора.Колонки.Добавить("Значение");
	ТаблицаОтбора.Колонки.Добавить("НеИзменять");
	
	Список = Новый СписокЗначений();
	Список.Добавить(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы);
	Список.Добавить(Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы);
	
	НоваяСтрока 				= ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 			= "ХарактерЗатрат";
	НоваяСтрока.ВидСравнения 	= ВидСравнения.ВСписке;
	НоваяСтрока.Значение		= Список;
	НоваяСтрока.НеИзменять		= Ложь;
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(ТаблицаОтбора, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.Материальные);
	
КонецПроцедуры // ИспользованныеМатериалыСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетЗатрат
// в строке табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ИспользованныеМатериалы.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ИспользованныеМатериалыСчетЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ОбработкаВыбора
// в строке табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ИспользованныеМатериалыСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "ИспользованныеМатериалы".
//
Процедура ИспользованныеМатериалыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ИспользованныеМатериалы", ДопПараметры);
	
КонецПроцедуры // ИспользованныеМатериалыЗаказНачалоВыбора()


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЧ ДокументыРасчетовСКонтрагентом

// Процедура рассчитывает суммы в строке табличной части ДокументыРасчетовСКонтрагентом
// 
// Параметры:
// ТекДанные                       - <Текущие данные строки табличной части>
// РассчитыватьСуммуВзаиморасчетов - <Булево> Если Истина - рассчитывается и сумма взаиморасчетов, и сумма регл.учета
//                                   Если Ложь - рассчитывается только сумма регл.учета
//
Процедура РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, РассчитыватьСуммуВзаиморасчетов = Истина)

	мСтруктураПараметровВзаиморасчетов.Вставить("КурсСтрокиДокументаРасчетов", мКурсСтрокиДокументаРасчетов);
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ТекДанные, мСтруктураПараметровВзаиморасчетов, РассчитыватьСуммуВзаиморасчетов);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента,
													    Заказ, СтандартнаяОбработка, "Расход");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	УправлениеВзаиморасчетами.ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(ТекДанные);
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СуммаВзаиморасчетов
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ "ДокументыРасчетовСКонтрагентом".
//
Процедура ДокументыРасчетовСКонтрагентомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	мКурсСтрокиДокументаРасчетов = ?(ТекДанные.СуммаВзаиморасчетов = 0, 0, ТекДанные.СуммаРегл / ТекДанные.СуммаВзаиморасчетов);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары    = ЭлементыФормы.Товары.Колонки;
мКолонкиМатериалы = ЭлементыФормы.ИспользованныеМатериалы.Колонки;
мКолонкиДокументы = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.Колонки;
мИспользоватьТолькоСборочныеСпецификации = глЗначениеПеременной("ИспользоватьТолькоСборочныеСпецификации");