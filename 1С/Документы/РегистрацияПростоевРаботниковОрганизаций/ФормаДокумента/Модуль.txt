////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;
Перем мДлинаСуток;
Перем мРассчитываемыеТаблицы;

Перем мСведенияОВидахРасчета;
Перем мСведенияОВидахРасчетаПоказатели;
Перем мРеквизитыНачисления;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

// для обеспечения работы механизма частичного сотрнирования
Перем мМассивВозможныхНачислений;

Перем мДополнительныеСвойства Экспорт;

// Текущий период - для проверки перехода документа в другой период расчета отчислений на соцстрах
Перем мТекущийПериод Экспорт; 

// Диалог настройки периода
Перем мНастройкаПериода;

// Механизм исправлений
Перем мДокументИсправление;
Перем мДокументСторнирование;
Перем мКнопкаИсправление;
Перем мКнопкаОтменаИсправление;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке()

	СтруктураПараметров = Новый Структура("Ссылка", ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора);
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднего,ЭлементыФормы.КоманднаяПанельРасчетСреднего);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Выполняет аворасчет реквизитов таблицы начислений
//
Процедура ВыполнитьАвторасчетРеквизитовСтрокиНачислений(РедактируемаяСтрока)
	
	// Размер
	Если НЕ ЗначениеЗаполнено(РедактируемаяСтрока.Показатель1) Тогда
		РедактируемаяСтрока.Показатель1 = мРеквизитыНачисления.Размер;
	КонецЕсли;
	
	// ПериодРасчетаСреднегоЗаработкаНачало
	Если НЕ ЗначениеЗаполнено(РедактируемаяСтрока.ПериодРасчетаСреднегоЗаработкаНачало) Тогда
		РедактируемаяСтрока.ПериодРасчетаСреднегоЗаработкаНачало = ПериодРасчетаСреднегоЗаработкаНачало;
	КонецЕсли;
	
	// ПериодРасчетаСреднегоЗаработкаОкончание
	Если НЕ ЗначениеЗаполнено(РедактируемаяСтрока.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
		РедактируемаяСтрока.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднегоЗаработкаОкончание;
	КонецЕсли;
		
	//Подразделение организации
	Если НЕ ЗначениеЗаполнено(РедактируемаяСтрока.ПодразделениеОрганизации) Тогда
		РедактируемаяСтрока.ПодразделениеОрганизации = мРеквизитыНачисления.ПодразделениеОрганизации;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьАвторасчетРеквизитовСтрокиНачислений()

// Управляет доступностью элементов формы, зависящих от целодневности простоя
//
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	ТолькоПросмотр = ДокументИсправлен Или ДокументСторнирован;
	РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	
	ЭлементыФормы.Сотрудник.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
		
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,"Открыть сторно-документ","Открыть исправление");
	
	РаботаСДиалогамиЗК.УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрации, ДокументИсправлен, ДокументСторнирован, ЭлементыФормы.ДополнительныеДействия.Кнопки, мКнопкаИсправление, мКнопкаОтменаИсправление);
	
	ЭтоЦелосменныйПростой = СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
    ЭУДатаОкончания = ЭлементыФормы.ДатаОкончания;
    ЭУОплачиватьЧасов = ЭлементыФормы.ОплачиватьЧасов;
	
	ЭлементыФормы.ДатаНачала.ТолькоПросмотр	= ТолькоПросмотр Или Не ЭтоЦелосменныйПростой;
	ЭУДатаОкончания.ТолькоПросмотр			= ТолькоПросмотр Или Не ЭтоЦелосменныйПростой;
	ЭлементыФормы.ДатаНачалаВнутрисменная.ТолькоПросмотр = ТолькоПросмотр Или ЭтоЦелосменныйПростой;
	ЭУОплачиватьЧасов.ТолькоПросмотр		= ТолькоПросмотр Или ЭтоЦелосменныйПростой;
	
	ЭУДатаОкончания.АвтоОтметкаНезаполненного	= Не ЭУДатаОкончания.ТолькоПросмотр;
	ЭУДатаОкончания.ОтметкаНезаполненного		= Не ЭУДатаОкончания.ТолькоПросмотр И Не ЗначениеЗаполнено(ДатаОкончания);
	ЭУОплачиватьЧасов.АвтоОтметкаНезаполненного	= Не ЭУОплачиватьЧасов.ТолькоПросмотр;
	ЭУОплачиватьЧасов.ОтметкаНезаполненного		= Не ЭУОплачиватьЧасов.ТолькоПросмотр И ОплачиватьЧасов = 0;
	
	ЭлементыФормы.ДатаНачала.АвтоОтметкаНезаполненного = ЭтоЦелосменныйПростой;
	ЭлементыФормы.ДатаНачала.ОтметкаНезаполненного = ЭтоЦелосменныйПростой И Не ЗначениеЗаполнено(ДатаНачала);
	ЭлементыФормы.ДатаНачалаВнутрисменная.АвтоОтметкаНезаполненного = Не ЭтоЦелосменныйПростой;
	ЭлементыФормы.ДатаНачалаВнутрисменная.ОтметкаНезаполненного = Не ЭтоЦелосменныйПростой И Не ЗначениеЗаполнено(ДатаНачала);
	
	ЭлементыФормы.Начисления.Колонки.ДатаОкончания.Видимость = ЭтоЦелосменныйПростой;
	ЭлементыФормы.Начисления.Колонки.ДатаОкончания.ИзменятьВидимость = ЭтоЦелосменныйПростой;
	ЭлементыФормы.Начисления.Колонки.ДатаНачала.ТекстШапки = ?(ЭтоЦелосменныйПростой, "Дата начала", "Дата");

КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

// Определяет флажки-описатели состояния документа, формирует и показывает строку-описание
//
Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Сотрудник);
	НеЗаполнен = НеЗаполнен Или Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ВидПростоя);
	
	ЭтоЦелосменныйПростой = СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
	ЗаполненСОшибками = ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) И ДатаНачала > ДатаОкончания;
	ЗаполненСОшибками = ЗаполненСОшибками Или (ЭтоЦелосменныйПростой И Не ЗначениеЗаполнено(ДатаОкончания));
	ЗаполненСОшибками = ЗаполненСОшибками Или (Не ЭтоЦелосменныйПростой И ОплачиватьЧасов = 0);
	
	Рассчитан = (Начисления.Количество() > 0);
	
	ОписаниеСостоянияДокумента = РаботаСДиалогамиЗК.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Рассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

// Управляет видимостью элементов формы, зависящих от вида простоя и перерассчитываемого документа
//
Процедура ОбновитьВидимостьПанелиРасчетаСреднего()
	
	ПоказыватьСреднийЗаработок = ВидПростоя = Перечисления.ВидыПростояРаботника.ПоВинеРаботодателя;
	ЭлементыФормы.Панель.Страницы.РасчетСреднего.Видимость = ПоказыватьСреднийЗаработок;
	ЭлементыФормы.НадписьСреднийЗаработок.Видимость = ПоказыватьСреднийЗаработок;
	ЭлементыФормы.ЗначениеСреднийЗаработок.Видимость = ПоказыватьСреднийЗаработок;
	ЭлементыФормы.ИнформационнаяНадписьСреднийЗаработок.Видимость = ПоказыватьСреднийЗаработок;
	
КонецПроцедуры // ОбновитьВидимостьПанелиРасчетаСреднего()

Процедура ОбновитьИнформационнуюНадписьРазмерНачислено()

	НачисленияДокумента = Новый Соответствие;
	НачисленияДокумента.Вставить(мРеквизитыНачисления.ВидРасчета,"");

	СуммаПоДокументу = 0;
	СуммаСторно  = 0;
	СуммаДоначислено = 0;
	ОплаченоДней = 0;
	НормаДней = 0;
	ИнформационнаяНадпись = "";
	ИнформационнаяНадписьСторно = "";
	ИнформационнаяНадписьДоначислено = "";
	
	Если Начисления.Количество() = 0 и РасчетСреднего.Количество() = 0 Тогда
		ИнформационнаяНадпись = "";
	ИначеЕсли Начисления.Количество() = 0 Тогда	
		ИнформационнаяНадпись = "Сумма начислений не рассчитана"
	Иначе
		// табличные части не пустые, получим сумму и проверим наличие сторнирования
		// начислений прошлых периодов
		Для каждого СтрокаНачислений Из Начисления Цикл
			Если СтрокаНачислений.Сторно Тогда
				ИнформационнаяНадписьСторно = "Сторнированы начисления прошлых периодов";
				СуммаСторно = СуммаСторно + СтрокаНачислений.Результат;
				Продолжить;
			КонецЕсли;
			Если НачисленияДокумента[СтрокаНачислений.ВидРасчета] = Неопределено Тогда
				ИнформационнаяНадписьДоначислено = "Начисления прошлых периодов";
				СуммаДоначислено = СуммаДоначислено + СтрокаНачислений.Результат;
				Продолжить;
			КонецЕсли;
			СуммаПоДокументу = СуммаПоДокументу + СтрокаНачислений.Результат;
			ОплаченоДней = ОплаченоДней + СтрокаНачислений.ОплаченоДнейЧасов;
			НормаДней = НормаДней + СтрокаНачислений.НормаДней;
		КонецЦикла;
	КонецЕсли;	
	
	// информационная надпись на лицевой стороне
	ЭлементыФормы.ЗначениеРазмер.Заголовок = Формат(СуммаПоДокументу, "ЧЦ=12; ЧДЦ=2; ЧН=");
	ЭлементыФормы.ИнформационнаяНадписьРазмер.Заголовок = ""+ ИнформационнаяНадпись + ИнформационнаяНадписьСторно;
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
		Если ОплаченоДней > НормаДней * 2 Тогда
			РазмерностьОплаченногоВремени = "часы"
		Иначе
			РазмерностьОплаченногоВремени = "дни"; 
		КонецЕсли;
	Иначе
		РазмерностьОплаченногоВремени = "часы"
	КонецЕсли;
	
	СтрокаРазмер = "Сумма: " + Формат(СуммаПоДокументу, "ЧЦ=12; ЧДЦ=2; ЧН=") + " руб."; 
	СтрокаРазмер = СтрокаРазмер + " Оплачено: " + ОплаченоДней + " " + ?(РазмерностьОплаченногоВремени = "дни",ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ОплаченоДней),ОбщегоНазначения.ФормаМножественногоЧисла("час","часа","часов",ОплаченоДней));
	СтрокаРазмер = СтрокаРазмер + Символы.ПС + ИнформационнаяНадписьСторно + ?(ПустаяСтрока(ИнформационнаяНадписьСторно),"", ": " + Формат(СуммаСторно, "ЧЦ=12; ЧДЦ=2; ЧН=") + " руб.");
	СтрокаРазмер = СтрокаРазмер + " " + ИнформационнаяНадписьДоначислено + ?(ПустаяСтрока(ИнформационнаяНадписьДоначислено),"", ": " + Формат(СуммаДоначислено, "ЧЦ=12; ЧДЦ=2; ЧН=") + " руб.");
	ЭлементыФормы.НадписьОплата.Заголовок = СтрокаРазмер;

КонецПроцедуры

Процедура ОбновитьИнформационнуюНадписьСреднийЗаработок()
	
	Если ВидПростоя = Перечисления.ВидыПростояРаботника.ПоВинеРаботодателя Тогда
	Если мРеквизитыНачисления.СуммированныйУчетРабочегоВремени Или СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
		НадписьСреднийЗаработокТекст = "Средний часовой заработок:";
		ИспользоватьСреднеЧасовойЗаработок = Истина;
	Иначе
		НадписьСреднийЗаработокТекст = "Средний дневной заработок:";
		ИспользоватьСреднеЧасовойЗаработок = Ложь;
	КонецЕсли;
	
	// данные среднего заработка
	
	Если ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
		
		ПериодРасчетаСреднегоЗаработкаТекст = "Расчетный период " + Символы.ПС + " с " + Формат(ПериодРасчетаСреднегоЗаработкаНачало,"ДФ=dd.MM.yyyy") +" по "+ Формат(ПериодРасчетаСреднегоЗаработкаОкончание,"ДФ=dd.MM.yyyy");
		ПериодРасчетаСреднегоЗаработкаТекст1 = "Расчетный период с " + Формат(ПериодРасчетаСреднегоЗаработкаНачало,"ДФ=dd.MM.yyyy") +" по "+ Формат(ПериодРасчетаСреднегоЗаработкаОкончание,"ДФ=dd.MM.yyyy");
		ВидРасчета = мРеквизитыНачисления.ВидРасчета;
		Если ЗначениеЗаполнено(ВидРасчета) Тогда
			СведениеОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ВидРасчета);
			МесяцевРасчетногоПериода = 0;
			ОбщегоНазначения.РазобратьРазностьДат(НачалоМесяца(ПериодРасчетаСреднегоЗаработкаОкончание), НачалоМесяца(ПериодРасчетаСреднегоЗаработкаНачало), , МесяцевРасчетногоПериода);
			Если ЗначениеЗаполнено(МесяцевРасчетногоПериода) Тогда
				МесяцевРасчетногоПериода = МесяцевРасчетногоПериода + 1;
			Иначе 
				МесяцевРасчетногоПериода = ?(СведениеОВидеРасчета.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка = Перечисления.ПорядокОпределенияРасчетногоПериодаСреднегоЗаработка.ПоКолдоговору,СведениеОВидеРасчета.ПериодРасчетаСреднегоЗаработка,12);
			КонецЕсли;
			СреднедневнойЗаработок = Формат(РегистрацияПростоевРаботниковОрганизацийПереопределяемый.РасчетСреднегоЗаработка(ЭтотОбъект, ИспользоватьСреднеЧасовойЗаработок, МесяцевРасчетногоПериода, ПериодРасчетаСреднегоЗаработкаНачало, ПериодРасчетаСреднегоЗаработкаОкончание),  "ЧЦ=12; ЧДЦ=2; ЧН=");
		Иначе
			СреднедневнойЗаработок = "";
		КонецЕсли;
	Иначе
		ПериодРасчетаСреднегоЗаработкаТекст = ""; 
		ПериодРасчетаСреднегоЗаработкаТекст1 = ""; 
		СреднедневнойЗаработок = "";
	КонецЕсли;
	
	ЭлементыФормы.НадписьСреднийЗаработок.Заголовок = НадписьСреднийЗаработокТекст;
	ЭлементыФормы.ЗначениеСреднийЗаработок.Заголовок = СреднедневнойЗаработок;
	ЭлементыФормы.ИнформационнаяНадписьСреднийЗаработок.Заголовок = ПериодРасчетаСреднегоЗаработкаТекст;
	ЭлементыФормы.НадписьРасчетСреднегоЗаработка.Заголовок = НадписьСреднийЗаработокТекст + " " + СреднедневнойЗаработок + " руб." + Символы.ПС + ПериодРасчетаСреднегоЗаработкаТекст1;
	
	КонецЕсли;
КонецПроцедуры

Процедура ОчиститьНачисления()
	
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
	КонецЕсли;
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ВыполнитьДополнительныеДействияПриУдаленииНачислений(ЭтотОбъект, ЭтаФорма);
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ОчиститьВсеРасчеты()

	ОчиститьНачисления();
	
	Если РасчетСреднего.Количество() > 0 Тогда
		РасчетСреднего.Очистить();
	КонецЕсли;

	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	
КонецПроцедуры

Процедура ПриИзмененииПериодаРегистрации()
	
	РаботаСДиалогамиЗК.УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрации, ЗначениеЗаполнено(мДокументИсправление), ЗначениеЗаполнено(мДокументСторнирование), ЭлементыФормы.ДополнительныеДействия.Кнопки, мКнопкаИсправление, мКнопкаОтменаИсправление);
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ВыполнитьДополнительныеДействияПриИзмененииПериодаРегистрации(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура РассчитатьНачисления()

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	Если НЕ УдалениеСтрокТабличнойЧастиНачисления() Тогда
		Возврат;
	КонецЕсли;
		
	мРассчитываемыеТаблицы.Начисления = Истина;
	мРассчитываемыеТаблицы.РасчетСреднего = Ложь;
	
	Рассчитать(мРассчитываемыеТаблицы);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	ЭлементыФормы.Начисления.Колонки.ПодразделениеОрганизации.ТекстШапки = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Подразделение организации");
	
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

// Подтверждение пользователя на очищение табличной части "Начисления".
Функция УдалениеСтрокТабличнойЧастиНачисления()

	Если Начисления.Количество() > 0 Тогда
		ТекстВопроса = "Табличная часть ""Начисления"" будет очищена. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции // ПроверкаСтрокТабличнойЧастиНачисления()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ВыполнитьДействияПередОткрытиемФормы(ЭтаФорма);
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"ТаблицаДокумента");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
	Иначе	
		РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, "Документ не заполнен", "СообщениеОПроблемах");
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если ВидПростоя.Пустая() Тогда
			ВидПростоя = Перечисления.ВидыПростояРаботника.ПоНезависящимПричинам
		КонецЕсли;
		Если СпособРегистрацииВремени.Пустая() Тогда
			СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();

	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("Результат");
	СтруктураКолонок.Вставить("НаименованиеПоказатель1");
	СтруктураКолонок.Вставить("НаименованиеПоказатель2");
	СтруктураКолонок.Вставить("НаименованиеПоказатель3");
	СтруктураКолонок.Вставить("НаименованиеПоказатель4");
	СтруктураКолонок.Вставить("НаименованиеПоказатель5");
	СтруктураКолонок.Вставить("НаименованиеПоказатель6");
	СтруктураКолонок.Вставить("Показатель1");
	СтруктураКолонок.Вставить("Показатель2");
	СтруктураКолонок.Вставить("Показатель3");
	СтруктураКолонок.Вставить("Показатель4");
	СтруктураКолонок.Вставить("Показатель5");
	СтруктураКолонок.Вставить("Показатель6");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();

	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("БазовыйПериодНачало");
	СтруктураКолонок.Вставить("БазовыйПериодКонец");
	СтруктураКолонок.Вставить("КоэффициентИндексации");
	СтруктураКолонок.Вставить("Результат");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетСреднего.Колонки, СтруктураКолонок);
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущий расчетный период
	мТекущийПериод = ПериодРегистрации;
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	мРеквизитыНачисления = РеквизитыНачисления();
	
	// Исправление документов
	мКнопкаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	// Видимость закладок
	ОбновитьВидимостьПанелиРасчетаСреднего();
	ОбновитьДоступностьЭлементовФормы();
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ВыполнитьДополнительныеДействияПриОткрытииФормы(ЭтотОбъект, ЭтаФорма);
	
	// Список видов записей расчета среднего
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.НастроитьСпискиВыбораЭлементовУправления(ЭтотОбъект, ЭтаФорма);
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.ДатаНачала;
	КонецЕсли;
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода = Новый НастройкаПериода;
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры // ОбновлениеОтображения()

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;
 
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументИсправление <> Источник Тогда
						мДокументИсправление = Источник;
						ОбновитьДоступностьЭлементовФормы();
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()


// Процедура ввода документа-исправления
Процедура ДополнительныеДействияИсправить(Кнопка)

	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура отмены исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"ТаблицаДокумента");
	ОбновитьДоступностьЭлементовФормы();
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры


// Процедура - обработчик нажатия кнопки настройки периода.
//
Процедура ВыбПериодНажатие(Элемент)
	
	мНастройкаПериода.УстановитьПериод(ПериодРасчетаСреднегоЗаработкаНачало, КонецДня(ПериодРасчетаСреднегоЗаработкаОкончание));
	
	Если мНастройкаПериода.Редактировать() Тогда
		ПериодРасчетаСреднегоЗаработкаНачало	= мНастройкаПериода.ПолучитьДатуНачала();
		ПериодРасчетаСреднегоЗаработкаОкончание	= мНастройкаПериода.ПолучитьДатуОкончания();
		ОчиститьВсеРасчеты();
	КонецЕсли;
	
КонецПроцедуры // ВыбПериодНажатие()

Процедура КнопкаРассчитатьВсеНажатие(Элемент)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	Если НЕ УдалениеСтрокТабличнойЧастиНачисления() Тогда
		Возврат;
	КонецЕсли;
	
	мРассчитываемыеТаблицы.Начисления = Истина;
	мРассчитываемыеТаблицы.РасчетСреднего = ВидПростоя = Перечисления.ВидыПростояРаботника.ПоВинеРаботодателя;
	
	Рассчитать(мРассчитываемыеТаблицы);
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КнопкаРассчитатьНачисленияНажатие(Элемент)
	РассчитатьНачисления();
КонецПроцедуры

Процедура КоманднаяПанельНачисленияРассчитатьНачисления(Кнопка)
	РассчитатьНачисления()
КонецПроцедуры

Процедура КоманднаяПанельРасчетСреднегоРассчитатьСреднийЗаработок(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	мРассчитываемыеТаблицы.Начисления = Ложь;
	мРассчитываемыеТаблицы.РасчетСреднего = Истина;
	
	Рассчитать(мРассчитываемыеТаблицы);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	ПриИзмененииПериодаРегистрации();	
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	ПриИзмененииПериодаРегистрации();	
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	ПриИзмененииПериодаРегистрации();	
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникПриИзменении(Элемент)
	
	Физлицо = Сотрудник.Физлицо;
	мРеквизитыНачисления = РеквизитыНачисления();
	ОчиститьВсеРасчеты();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // СотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" вида простоя
//
Процедура ВидПростояПриИзменении(Элемент)
	
	ОбновитьВидимостьПанелиРасчетаСреднего();
	мРеквизитыНачисления = РеквизитыНачисления();
	ОпределитьРасчетныйПериод(мРеквизитыНачисления);
	ОчиститьВсеРасчеты();
	
КонецПроцедуры // ВидПростояПриИзменении()

Процедура ДатаНачалаСобытияПриИзменении(Элемент)
	
	// Список видов записей расчета среднего
	// и видимость колонок
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.НастроитьСпискиВыбораЭлементовУправления(ЭтотОбъект, ЭтаФорма);
	
	Если ДатаНачала < ДатаНачалаСобытия Тогда
		ДатаНачала = ДатаНачалаСобытия;
	КонецЕсли;
	
	мРеквизитыНачисления = РеквизитыНачисления();
	ОпределитьРасчетныйПериод(мРеквизитыНачисления);
	ОчиститьВсеРасчеты();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" даты начала события
//
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ОчиститьНачисления();	
	
КонецПроцедуры // ДатаНачалаПриИзменении()

Процедура ДатаОкончанияПриИзменении(Элемент)
	ОчиститьНачисления();
КонецПроцедуры

Процедура ОплачиватьЧасовПриИзменении(Элемент)
	ОчиститьНачисления();
КонецПроцедуры

// Прцоедура - обработчик событи "ПриИзменении" способа регистрации времени
//
Процедура СпособРегистрацииВремениПриИзменении(Элемент)
	
	мРеквизитыНачисления = РеквизитыНачисления();
	ОчиститьНачисления();
	ОбновитьДоступностьЭлементовФормы();
	
КонецПроцедуры

Процедура ПериодРасчетаСреднегоЗаработкаНачалоПриИзменении(Элемент)
    ОчиститьВсеРасчеты();
КонецПроцедуры

Процедура ПериодРасчетаСреднегоЗаработкаОкончаниеПриИзменении(Элемент)
    ОчиститьВсеРасчеты();
КонецПроцедуры


Процедура НадписьРазмерНажатие(Элемент)
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.Начисления;
	ТекущийЭлемент = ЭлементыФормы.Начисления;

КонецПроцедуры

Процедура НадписьСреднийЗаработокНажатие(Элемент)
	
	ЭлементыФормы.Панель.ТекущаяСтраница = ЭлементыФормы.Панель.Страницы.РасчетСреднего;
	ТекущийЭлемент = ЭлементыФормы.РасчетСреднего;
	
КонецПроцедуры

Процедура ЗаголовокДополнительнойИнформационнойНадписиНажатие(Элемент)
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ПоказатьДополнительнуюФорму(ЭтотОбъект, ЭтаФорма)
КонецПроцедуры


Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	Если ЗначениеЗаполнено(мДокументИсправление) Тогда
		мДокументИсправление.ПолучитьФорму(, ЭтаФорма).Открыть();
	ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
		мДокументСторнирование.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Начисления

// Процедура - обработчик события "ПриАктивизацииСтроки"
//
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияНачисленияПриАктивизацииСтроки", 0.1, Истина);

КонецПроцедуры // НачисленияПриАктивизацииСтроки()

Процедура ОбработчикОжиданияНачисленияПриАктивизацииСтроки()
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ДанныеСтроки <> Неопределено Тогда
		ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
		Если ДанныеСтрокиВидРасчета = Неопределено Тогда
			ДанныеСтрокиВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Начисления, мСведенияОВидахРасчетаПоказатели, , Истина);
	
	МожноРедактироватьСтроку = ДанныеСтроки = Неопределено Или Не ДанныеСтроки.Сторно Или ДанныеСтроки.СторнируемыйДокумент <> ПерерассчитываемыйДокумент Или Не ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	
КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Отказ = ДанныеСтроки.Сторно И ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент И ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломИзменения(Элемент, Отказ)
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Отказ = ДанныеСтроки.Сторно И ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент И ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
КонецПроцедуры

Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ОбработатьОтображениеПоказателейДляРасчета(Элемент, ОформленияСтрок, мСведенияОВидахРасчетаПоказатели);
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		// сторно запись - красным
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		Иначе 	
			Ячейки.СторнируемыйДокумент.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеСтроки.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") Тогда
			Ячейки.ДатаНачалаСобытия.ТолькоПросмотр = Истина;
			Ячейки.ДатаНачалаСобытия.ОтметкаНезаполненного = Ложь;
		Иначе
			Ячейки.ЧислоМесяцев.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		ЯчейкаСКартинкой = Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);	
		
	КонецЦикла;	
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" строки таблицы
//
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда

		ДанныеСтроки = Элемент.ТекущиеДанные;
		
		ДанныеСтроки.Сторно		= Ложь;
		ДанныеСтроки.ВидРасчета	= мРеквизитыНачисления.ВидРасчета;
		ДанныеСтроки.Авторасчет	= Истина;
		
		Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
			ДанныеСтроки.ДатаНачала		= ДатаНачала;
			ДанныеСтроки.ДатаОкончания	= ДатаНачала;
		Иначе
			ИндексСтроки = Начисления.Индекс(ДанныеСтроки);
			Если ИндексСтроки > 0  Тогда
				ДанныеСтроки.ДатаНачала = Начисления[ИндексСтроки-1].ДатаОкончания + мДлинаСуток;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ВыполнитьДействияПриНачалеРедактированияНачисления(ЭтаФорма, Элемент, НоваяСтрока)
	
КонецПроцедуры // НачисленияПриНачалеРедактирования()

// Процедура - обработчик события "ПриОкончанииРедактирования" строки таблицы
//
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки.Сторно или мМассивВозможныхНачислений.Найти(ДанныеСтроки.ВидРасчета) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// авто расчет реквизитов
	ВыполнитьАвторасчетРеквизитовСтрокиНачислений(ДанныеСтроки);
	
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ВыполнитьДействияПослеРедактированияНачисления(ЭтаФорма, ДанныеСтроки);
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.ДатаНачала) И ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончания) Тогда
		РазницаВМесяцах = (Год(ДанныеСтроки.ДатаОкончания)*12 + Месяц(ДанныеСтроки.ДатаОкончания)) - (Год(ДанныеСтроки.ДатаНачала)*12 + Месяц(ДанныеСтроки.ДатаНачала));
		Если РазницаВМесяцах > 0 Тогда
			ТекстВопроса = "Разбить строку начислений на помесячные записи?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ПроведениеРасчетов.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(ДанныеСтроки, Начисления);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // НачисленияПриОкончанииРедактирования()

Процедура НачисленияПередУдалением(Элемент, Отказ)
	
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ВыполнитьДействияПередУдалениемНачисления(Элемент, ЭтотОбъект, Отказ)
	
КонецПроцедуры

Процедура НачисленияПослеУдаления(Элемент)
	ОбновитьИнформационнуюНадписьРазмерНачислено();
	РегистрацияПростоевРаботниковОрганизацийПереопределяемый.ОбновитьДополнительнуюИнформационнуюНадпись(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Начисления

// Процедура - обработчик события "ПриИзменении" поля ввода даты начала
//
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	
	Если ТипЗнч(ЭлементыФормы.Начисления.ТекущиеДанные.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	ЭлементыФормы.Начисления.ТекущиеДанные.ДатаНачалаСобытия = Элемент.Значение;
	
КонецПроцедуры // НачисленияДатаНачалаПриИзменении()

Процедура НачисленияСторнируемыйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
			
	Если Организация.Пустая() Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не выбрана организация!"), 10);
		Возврат;
	КонецЕсли;
		
	РаботаСДиалогамиЗК.ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, ЭтаФорма, Ссылка, Организация, СтандартнаяОбработка, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РасчетСреднего

// Процедура - обработчик события "ПриНачалеРедактирования" строки таблицы
//
Процедура РасчетСреднегоПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КоэффициентИндексации = 1;
	КонецЕсли;
	
КонецПроцедуры // РасчетСреднегоПриНачалеРедактирования()

Процедура РасчетСреднегоПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ОбновитьИнформационнуюНадписьСреднийЗаработок();
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоПослеУдаления(Элемент)
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
КонецПроцедуры

Процедура РасчетСреднегоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	Если ЭлементыФормы.РасчетСреднего.Колонки.КоэффициентИндексации.Видимость Тогда
		СсылкаВР = ДанныеСтроки.ВидРасчета;
		ОформлениеСтроки.Ячейки.КоэффициентИндексации.ТолькоПросмотр = (СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые);
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоВидРасчетаПриИзменении(Элемент)
	СсылкаВР = Элемент.Значение;
	Если СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоФиксГодовойПремииНеИндексируемые 
			Или СсылкаВР = ПланыВидовРасчета.СреднийЗаработок.ПоГодовойПремииНеИндексируемые Тогда
		ЭлементыФормы.РасчетСреднего.ТекущиеДанные.КоэффициентИндексации = 1;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Элемент.СписокВыбора;
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"));
	
КонецПроцедуры

Процедура РасчетСреднегоВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток			= 86400; // в секундах

мРассчитываемыеТаблицы = Новый Структура("Начисления,РасчетСреднего");

мСведенияОВидахРасчета = Новый Соответствие;
мСведенияОВидахРасчетаПоказатели = Новый Соответствие;

мОбработкаПодбораПоСтроке = Ложь;
мТекстПодбораПоСтроке = "";
мПоследнееЗначениеЭлементаПодбораПоСтроке = Неопределено;

мМассивВозможныхНачислений = Новый Массив;
мМассивВозможныхНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойТарифДневной);
мМассивВозможныхНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойОкладПоДням);
мМассивВозможныхНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойПоВинеРаботодателя);
мМассивВозможныхНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойТарифЧасовой);
мМассивВозможныхНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПочасовойПростойОкладПоЧасам);
мМассивВозможныхНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойПоВинеРаботодателя);
мМассивВозможныхНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойТарифЧасовой);
мМассивВозможныхНачислений.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПростойОкладПоЧасам);

мДополнительныеСвойства = Новый Структура()