////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

Перем мСписокВыбораОКАТОиКПП;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.ДействияФормы.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьВидимостьКолонок()
	
	мСписокВыбораОКАТОиКПП = Новый СписокЗначений;
	МаксимальнаяДлина = 40;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("ПустаяОрганизация",Справочники.Организации.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустойКодПоОКАТО","");
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Организации.Наименование + "": "" + Организации.КодПоОКАТО + "", "" + Организации.КПП КАК Представление,
	|	Организации.КодПоОКАТО,
	|	Организации.КПП,
	|	ВЫБОР
	|		КОГДА Организации.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК Порядок
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	ВЫБОР
	|			КОГДА Организации.ГоловнаяОрганизация = &ПустаяОрганизация
	|				ТОГДА Организации.Ссылка
	|			ИНАЧЕ Организации.ГоловнаяОрганизация
	|		КОНЕЦ = &Организация
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ПодразделенияОрганизаций.Владелец.Наименование + "", "" + ПодразделенияОрганизаций.Наименование + "": "" + ПодразделенияОрганизаций.КодПоОКАТО + "", "" + ПодразделенияОрганизаций.КПП,
	|	ПодразделенияОрганизаций.КодПоОКАТО,
	|	ПодразделенияОрганизаций.КПП,
	|	ВЫБОР
	|		КОГДА ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация = &ПустаяОрганизация
	|			ТОГДА 3
	|		ИНАЧЕ 4
	|	КОНЕЦ
	|ИЗ
	|	Справочник.ПодразделенияОрганизаций КАК ПодразделенияОрганизаций
	|ГДЕ
	|	ВЫБОР
	|			КОГДА ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация = &ПустаяОрганизация
	|				ТОГДА ПодразделенияОрганизаций.Владелец
	|			ИНАЧЕ ПодразделенияОрганизаций.Владелец.ГоловнаяОрганизация
	|		КОНЕЦ = &Организация
	|	И ПодразделенияОрганизаций.КодПоОКАТО <> &ПустойКодПоОКАТО
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	НаборыДанных = Запрос.Выполнить().Выгрузить(); 
	
	// Если не нашли данных - ничего не делаем
	Если НаборыДанных.Количество() > 0 Тогда
		Для Каждого СтрокаЗапроса Из НаборыДанных Цикл
			МаксимальнаяДлина = Макс(МаксимальнаяДлина,СтрДлина(СтрокаЗапроса.Представление));
			мСписокВыбораОКАТОиКПП.Добавить(СтрокаЗапроса, СтрокаЗапроса.Представление);
		КонецЦикла;
	КонецЕсли; 
	
	ЭтоЮрЛицо = ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Организация);
	ЭлементыФормы.РаботникиОрганизации.Колонки.КодПоОКАТО.Положение = ?(ЭтоЮрЛицо, ПоложениеКолонки.НаСледующейСтроке, ПоложениеКолонки.НоваяКолонка);
	ЭлементыФормы.РаботникиОрганизации.Колонки.КПП.Видимость = ЭтоЮрЛицо;
	ЭлементыФормы.РаботникиОрганизации.Колонки.КПП.ИзменятьНастройку = ЭтоЮрЛицо;
	ЭлементыФормы.РаботникиОрганизации.Колонки.КолонкаКодовОП.Видимость = ЭтоЮрЛицо;
	ЭлементыФормы.РаботникиОрганизации.Колонки.КолонкаКодовОП.ИзменятьНастройку = ЭтоЮрЛицо;
	
	ЭУКодаПоОКАТО = ЭлементыФормы.РаботникиОрганизации.Колонки.КодПоОКАТО.ЭлементУправления;				
	ЭУКодаПоОКАТО.КнопкаВыбора = мСписокВыбораОКАТОиКПП.Количество() <> 0;
	ЭУКодаПоОКАТО.ШиринаСпискаВыбора = МаксимальнаяДлина;
	
КонецПроцедуры

// Заполняет список выбора элемента формы "МесяцНалоговогоПериода"
Процедура ЗаполнитьСписокВыбораМесяцевНалоговыхПериодов()
	
	ГодНП = Год(Дата);// налоговый период
	
	// Добавим в список месяцев налоговых периодов, за которые возвращаем налог, декабри двух предыдущих лет и месяцы текущего налогового периода
	СписокВыбора = Новый СписокЗначений; 
	Для Год = ГодНП - 2 По ГодНП -1 Цикл
		СписокВыбора.Добавить( Дата(Год, 12, 1), "За " + Формат(Год, "ЧГ=0")  + " год");// последний месяц года
	КонецЦикла; 
	
	Для М=1 По Месяц(Дата) - 1 Цикл
		ДатаМесяца = Дата(ГодНП, М,1);
		СписокВыбора.Добавить(ДатаМесяца, "За "+ НРег(Формат(ДатаМесяца, "ДФ='ММММ гггг'")));
	КонецЦикла; 
	ЭлементыФормы.МесяцНалоговогоПериода.СписокВыбора = СписокВыбора;
	
КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация назначения");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");

	// Установить ограничение - изменять видимость колонок для табличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	НДФЛВозвратНалогаПереопределяемый.ДополнитьКолонкиТабличногоПоля(ЭлементыФормы.РаботникиОрганизации);
	
	// Ненужные колонки показывать не будем
	УстановитьВидимостьКолонок();
	
	// Настройка списка выбора месяца налогового периода
	ЗаполнитьСписокВыбораМесяцевНалоговыхПериодов();
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(МесяцНалоговогоПериода);
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;	
	
    УстановитьЗаголовкиОрганизацийВФорме();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры


// Для списка работников выполняет авторасчет сумм налога к возврату 
Процедура ДействияФормыРассчитать(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Укажите организацию!"));
		Возврат
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(МесяцНалоговогоПериода) Тогда
		Предупреждение("Укажите период, за который возвращается налог!");
		Возврат
	КонецЕсли;

	Рассчитать();
	
КонецПроцедуры

Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Укажите организацию!"));
		Возврат
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(МесяцНалоговогоПериода) Тогда
		Предупреждение("Укажите период, за который возвращается налог!");
		Возврат
	КонецЕсли;

	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Автозаполнение();
	
КонецПроцедуры

Процедура ДействиеСоздатьЗарплатаКВыплате(Кнопка)

	ЗарплатаКВыплатеОрганизацийСервис.СоздатьНаОсновании(ЭтаФорма, Ссылка, Ложь);
	
КонецПроцедуры // ДействияФормыБезНалогов()


// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация,,,,, Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;
	
	ЗаполнитьСписокВыбораМесяцевНалоговыхПериодов();
	
КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	// Ненужные колонки показывать не будем
	УстановитьВидимостьКолонок();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "МесяцНалоговогоПериода".
//
Процедура МесяцНалоговогоПериодаПриИзменении(Элемент)
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, МесяцНалоговогоПериода);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(МесяцНалоговогоПериода);
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "МесяцНалоговогоПериода".
//
Процедура МесяцНалоговогоПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	МесяцНалоговогоПериода = ВыбранноеЗначение;
	Элемент.Значение  = РаботаСДиалогами.ДатаКакМесяцПредставление(МесяцНалоговогоПериода);
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода "МесяцНалоговогоПериода".
//
Процедура МесяцНалоговогоПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	МесяцНалоговогоПериода = ДобавитьМесяц(МесяцНалоговогоПериода, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(МесяцНалоговогоПериода);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода "МесяцНалоговогоПериода".
//
Процедура МесяцНалоговогоПериодаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода "МесяцНалоговогоПериода".
//
Процедура МесяцНалоговогоПериодаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ

// Процедура - обработчик события вывода строки табличной части
Процедура РаботникиОрганизацииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если Элемент.Колонки.КолонкаЗаголовок.Видимость Тогда
		ОформлениеСтроки.Ячейки.КолонкаЗаголовок.Видимость = Ложь;	
	КонецЕсли;
	
	Если Элемент.Колонки.КолонкаКодовОП.Видимость Тогда
		ОформлениеСтроки.Ячейки.КолонкаКодовОП.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Физлицо = ВыбранноеЗначение;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо)).Количество() = 0 Тогда
		БылоСтрок = РаботникиОрганизации.Количество();
		Автозаполнение(Физлицо);
		Если БылоСтрок = РаботникиОрганизации.Количество() Тогда // заполнить оказалось нечем
			РаботникиОрганизации.Добавить().ФизЛицо = Физлицо
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ РаботникиОрганизации

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение,, Истина);
	
КонецПроцедуры

Процедура РаботникиОрганизацииФизЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, мГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 0, Текст, Организация, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 0, Текст, Организация, Истина);
	
КонецПроцедуры

Процедура РаботникиОрганизацииКодПоОКАТОНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = ВыбратьИзСписка(мСписокВыбораОКАТОиКПП,Элемент,мСписокВыбораОКАТОиКПП.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные,ЭлементСписка.Значение,"КодПоОКАТО,КПП")
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры