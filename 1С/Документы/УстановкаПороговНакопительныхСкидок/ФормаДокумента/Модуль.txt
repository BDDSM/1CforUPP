Перем мКолонкиШкалаДиапазонов;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мУчетнаяПолитика;

Перем мВалютаУправленческогоУчетаПредставление;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает тип для реквизита.
// Параметры:
//  Элемент - элемент, тип которого надо установить.
//  ТипЭлемента - устанавливаемый тип.
Процедура УстановитьТипЭлемента(Элемент, ТипЭлемента)

	Если ТипЗнч(Элемент) <> ТипЭлемента Тогда
		Элемент = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЭлемента);
	КонецЕсли;

КонецПроцедуры // УстановитьТипЭлемента()

// Возвращает тип значения порога в соответствии с учетной политикой.
//
Функция ПолучитьТипЗначенияПорога()

	Если мУчетнаяПолитика.СпособИспользованияНакопительныхСкидок = Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоДисконтнойКарте Тогда
		ЗначенияПорога = Тип("Число");
	ИначеЕсли мУчетнаяПолитика.СпособИспользованияНакопительныхСкидок = Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоВладельцуДисконтнойКарты Тогда
		ЗначенияПорога = Тип("СправочникСсылка.ВидыДисконтныхКарт");
	КонецЕсли;

	Возврат ЗначенияПорога;

КонецФункции // ПолучитьТипЗначенияПорога()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ШкалаДиапазонов,ЭлементыФормы.КоманднаяПанельШкалаДиапазонов);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	мУчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(?(ЭтоНовый(), ТекущаяДата(), Дата));
	Если НЕ ЗначениеЗаполнено(мУчетнаяПолитика) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если НЕ(мУчетнаяПолитика.ИспользоватьСкидкиПоДисконтнойКарте
	   И мУчетнаяПолитика.ИспользоватьНакопительныеСкидкиПоДисконтнымКартам) Тогда
		Предупреждение("В учетной политике не установлено использование накопительных скидок!");
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	// Установка кнопок заполнение ТЧ.
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // заполнить реквизиты значениями по умолчанию
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
	КонецЕсли;

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура;
	СтруктураКолонок.Вставить("НижняяГраница");
	СтруктураКолонок.Вставить("ЗначениеПорога");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиШкалаДиапазонов, СтруктураКолонок);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	Если мУчетнаяПолитика.СпособИспользованияНакопительныхСкидок = Перечисления.СпособыИспользованияНакопительныхСкидок.СкидкиНакапливаютсяПоДисконтнойКарте Тогда
		
	КонецЕсли;

	Если ЭтоНовый() Тогда // при вводе нового активизируем сразу табличное поле
		ТекущийЭлемент = ЭлементыФормы.ШкалаДиапазонов;
	КонецЕсли;

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()


	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПриНачалеРедактирования" строки в ТЧ "ШкалаДиапазонов".
//
Процедура ШкалаДиапазоновПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	УстановитьТипЭлемента(ЭлементыФормы.ШкалаДиапазонов.ТекущиеДанные.ЗначениеПорога, ПолучитьТипЗначенияПорога());

КонецПроцедуры // ШкалаДиапазоновПриНачалеРедактирования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура выполняет открытие формы работы со свойствами документа.
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры //ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа.
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры //ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа.
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)

	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);

КонецПроцедуры //ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура - обработчик события "ПриВыводеСтроки" в ТЧ "ШкалаДиапазонов".
//
Процедура ШкалаДиапазоновПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ОформлениеСтроки.Ячейки.ПредставлениеИнтервала.УстановитьТекст(ПолучитьПредставлениеИнтервала(Элемент.Значение, ДанныеСтроки));

КонецПроцедуры //ШкалаДиапазоновПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки) 

// Возвращает текстовое представление интервала.
//
Функция ПолучитьПредставлениеИнтервала(ТабличнаяЧасть, ТекущаяСтрока)

	МаксНижняяГраница = Неопределено;
	СледующаяСтрока = Неопределено;
	Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
		Если (МаксНижняяГраница = Неопределено Или МаксНижняяГраница >= СтрокаТЧ.НижняяГраница)
		   И ТекущаяСтрока.НижняяГраница <= СтрокаТЧ.НижняяГраница
		   И СтрокаТЧ <> ТекущаяСтрока Тогда
			СледующаяСтрока = СтрокаТЧ;
			МаксНижняяГраница = СтрокаТЧ.НижняяГраница;
		КонецЕсли;
	КонецЦикла;

	Если СледующаяСтрока = Неопределено Тогда
		ПредставлениеИнтервала = "От " + СокрЛП(ТекущаяСтрока.НижняяГраница) + " " + мВалютаУправленческогоУчетаПредставление;
	ИначеЕсли ТекущаяСтрока.НижняяГраница = СледующаяСтрока.НижняяГраница Тогда
		ПредставлениеИнтервала = "ОШИБКА: такая нижняя граница уже есть!";
	Иначе
		ПредставлениеИнтервала = "От " + СокрЛП(ТекущаяСтрока.НижняяГраница) + " до " + СокрЛП(СледующаяСтрока.НижняяГраница) + " " + мВалютаУправленческогоУчетаПредставление;
	КонецЕсли;

	Возврат ПредставлениеИнтервала;

КонецФункции // ПолучитьПредставлениеИнтервала()

// Процедура - обработчик события "ПриОкончанииРедактирования" строки в ТЧ "ШкалаДиапазонов".
//
Процедура ШкалаДиапазоновПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	// После ввода строки отсортируем ТЧ по возрастанию нижней границы.
	ШкалаДиапазонов.Сортировать("НижняяГраница");

КонецПроцедуры // ШкалаДиапазоновПриОкончанииРедактирования()

мКолонкиШкалаДиапазонов = ЭлементыФормы.ШкалаДиапазонов.Колонки;

мВалютаУправленческогоУчетаПредставление = СокрЛП(глЗначениеПеременной("ВалютаУправленческогоУчета"));