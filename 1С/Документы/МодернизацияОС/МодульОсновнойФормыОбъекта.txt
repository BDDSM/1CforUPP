////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОтражатьВРегламентированномУчете;

// Хранит установленный в учетной политике вариант
// учета расходов по амортизационной премии
Перем мВариантУчетаРасходовПоАмортизационнойПремии;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный");
	Если (Дата < '20060101' И СтоимостьБУХоз > 0)
		Или ЗначениеЗаполнено(СчетФактура) Тогда
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
														 СчетФактура);
		ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка = Истина;
	Иначе
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = "не требуется";
		ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка = Ложь;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()
												 
// Проверяет заполненность параметров амортизационной премии
//
Функция ПараметрыАмортизационнойПремииЗаполнены()

	Если (ОС.Итог("СуммаКапитальныхВложенийВключаемыхВРасходыНУ") = 0)
	   И (СчетУчетаЗатратПоАмортизационнойПремии = ПланыСчетов.Налоговый.ПустаяСсылка())
	   И (НЕ ЗначениеЗаполнено(СубконтоПоАмортизационнойПремии1))
	   И (НЕ ЗначениеЗаполнено(СубконтоПоАмортизационнойПремии2))
	   И (НЕ ЗначениеЗаполнено(СубконтоПоАмортизационнойПремии3)) Тогда
	   
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;

КонецФункции // ПроверитьЗаполненностьПараметровАмортизационнойПремии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОС,ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	ОтражатьВНалоговомУчетеНП  = (ОтражатьВНалоговомУчете И (НЕ НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)));
	ОтражатьВНалоговомУчетеУСН = (ОтражатьВНалоговомУчете И НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) И (НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата)));
	ОтражатьВНалоговомУчетеУСН = (НЕ Дата < Дата("20070101")) И ОтражатьВНалоговомУчетеУСН;
	
	ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
		ПрименениеПБУ18 = ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18;
	Иначе
		ПрименениеПБУ18 = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = мОтражатьВРегламентированномУчете;
	ЭлементыФормы.ОтражатьВНалоговомУчете    .Доступность = мОтражатьВРегламентированномУчете;
	
	ЭлементыФормы.Событие.Видимость                                                 = ОтражатьВУправленческомУчете;
	ЭлементыФормы.СобытиеРегл.Видимость                                             = ОтражатьВБухгалтерскомУчете;
	
	ЭлементыФормы.НадписьСобытие.Видимость                                          = ЭлементыФормы.Событие.Видимость;
	ЭлементыФормы.НадписьСобытиеРегл.Видимость                                      = ЭлементыФормы.СобытиеРегл.Видимость;
	
	ЭлементыФормы.ПанельУУ.Свертка                                                  = ?(ОтражатьВУправленческомУчете, 
	                                                                                    РежимСверткиЭлементаУправления.Нет,
	                                                                                    РежимСверткиЭлементаУправления.Верх);
																						
	ЭлементыФормы.ПанельБУ.Свертка                                                  = ?(ОтражатьВБухгалтерскомУчете, 
	                                                                                    РежимСверткиЭлементаУправления.Нет,
	                                                                                    РежимСверткиЭлементаУправления.Верх);
																						
	ЭлементыФормы.ПанельНУ.ТекущаяСтраница							 				= ?(ОтражатьВНалоговомУчетеУСН, 
																						ЭлементыФормы.ПанельНУ.Страницы.УСН,
																						ЭлементыФормы.ПанельНУ.Страницы.НУ);

	ЭлементыФормы.ПанельНУ.Свертка                                                  = ?(ОтражатьВНалоговомУчетеНП ИЛИ ОтражатьВНалоговомУчетеУСН, 
	                                                                                    РежимСверткиЭлементаУправления.Нет,
	                                                                                    РежимСверткиЭлементаУправления.Верх);

	ЭлементыФормы.ВключитьКапитальныеВложенияВРасходыНУ.Видимость                   = ОтражатьВНалоговомУчетеНП;
	
	ЭлементыФормы.ВключатьАПВСоставРасходовПриОтраженииМодернизации.Видимость       = ОтражатьВНалоговомУчетеНП И ВключитьКапитальныеВложенияВРасходыНУ
	                                                                                  И НЕ ВключатьАПВСоставРасходовПриОтраженииМодернизации = Истина;
	
	ЭлементыФормы.НадписьСуммаПР.Видимость                                          = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.НадписьСуммаВР.Видимость                                          = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.НадписьСуммаПРХоз.Видимость                                       = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.НадписьСуммаВРХоз.Видимость                                       = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	
	ЭлементыФормы.СтоимостьВР.Видимость                                             = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьПР.Видимость                                             = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьВРХоз.Видимость                                          = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьПРХоз.Видимость                                          = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	
	ЭлементыФормы.РеглВалюта5.Видимость                                             = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.РеглВалюта6.Видимость                                             = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.РеглВалюта7.Видимость                                             = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.РеглВалюта8.Видимость                                             = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;

	ЭлементыФормы.ОС.Колонки.ОстСрокИспользованияУУ.Видимость 	                    = ОтражатьВУправленческомУчете;
	ЭлементыФормы.ОС.Колонки.ОстОбъемПродукцииРаботУУ.Видимость                     = ОтражатьВУправленческомУчете;
	ЭлементыФормы.ОС.Колонки.ОстСтоимостьУУ.Видимость 			                    = ОтражатьВУправленческомУчете;
	
	ЭлементыФормы.ОС.Колонки.ОстСрокИспользованияБУ.Видимость 	                    = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.ОС.Колонки.ОстОбъемПродукцииРаботБУ.Видимость                     = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.ОС.Колонки.ОстСтоимостьБУ.Видимость 			                    = ОтражатьВБухгалтерскомУчете;

	ЭлементыФормы.ОС.Колонки.ОбщаяСуммаНУ.Видимость 			                    = ОтражатьВНалоговомУчетеНП;
	
	ЭлементыФормы.ОС.Колонки.СуммаКапитальныхВложенийВключаемыхВРасходыНУ.Видимость = ОтражатьВНалоговомУчетеНП 
	                                                                                И ВключитьКапитальныеВложенияВРасходыНУ;
																					
	ЭлементыФормы.ОсновнаяПанель.Страницы.АмортизационнаяПремия.Видимость = ОтражатьВНалоговомУчетеНП И ВключитьКапитальныеВложенияВРасходыНУ
	                                                                        И (мВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии);
	
	Если (мВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии) Тогда
		УстановитьВидимостьСубконто(СчетУчетаЗатратПоАмортизационнойПремии, "ПоАмортизационнойПремии", ОтражатьВНалоговомУчетеНП И ВключитьКапитальныеВложенияВРасходыНУ);
	КонецЕсли;
																					
	ЭлементыФормы.ОС.Колонки.СуммаМодернизацииВР.Видимость                          = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.ОС.Колонки.СуммаМодернизацииВРХоз.Видимость                       = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	
	ЭлементыФормы.ОС.Колонки.СуммаМодернизацииПР.Видимость                          = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.ОС.Колонки.СуммаМодернизацииПРХоз.Видимость                       = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	
	ЭлементыФормы.ОС.Колонки.СуммаМодернизацииУСН.Видимость                         = ОтражатьВНалоговомУчетеУСН;
	
	// Установка видимости счета-фактуры
	ЗаполнитьТекстПроСчетФактуру();
	
	ЭлементыФормы.ОС.Колонки.СтоимостьПР.Видимость                                  = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	ЭлементыФормы.ОС.Колонки.АмортизацияПР.Видимость                                = ОтражатьВНалоговомУчетеНП И ПрименениеПБУ18;
	
КонецПроцедуры //УстановитьВидимость()

// Заполнение реквизитов шапки документа значениями по умолчанию
//
Процедура ЗаполнитьДаннымиПоУмолчанию(ДокументОбъект)
	//Если НЕ ЗначениеЗаполнено(ДокументОбъект.Состояние) Тогда
	//	//ДокументОбъект.Состояние = ПолучитьСостояниеОСИзСправочника(Перечисления.ВидыСостоянийОС.Модернизировано);
	//КонецЕсли;
	СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОбъектовСтроительства(Организация,ОбъектСтроительства);
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СчетУчетаБУВнеоборотногоАктива) Тогда
		ДокументОбъект.СчетУчетаБУВнеоборотногоАктива = СчетаУчета.СчетУчетаБУ;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДокументОбъект.СчетУчетаНУВнеоборотногоАктива) Тогда
		ДокументОбъект.СчетУчетаНУВнеоборотногоАктива = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУВнеоборотногоАктива));
	КонецЕсли;
	ВключатьАПВСоставРасходовПриОтраженииМодернизации = Истина;
КонецПроцедуры

// Устанавливает видимость субконто счета.
//
Процедура УстановитьВидимостьСубконто(Счет, Суффикс, ВидимостьСчета)
	
	ВидыСубконтоСчета = Счет.ВидыСубконто;
	КоличествоСубконто = ВидыСубконтоСчета.Количество();
	
	Для НомерСубконто = 1 по 3 Цикл
		
		Если ВидимостьСчета И (НомерСубконто <= КоличествоСубконто) И (ЗначениеЗаполнено(Счет)) Тогда
			
			ЭлементыФормы["НадписьСубконто" + Суффикс + НомерСубконто].Заголовок = Строка(ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто) + ":";
			ЭлементыФормы["НадписьСубконто" + Суффикс + НомерСубконто].Видимость = Истина;
			ЭлементыФормы["Субконто" + Суффикс + НомерСубконто].Видимость        = Истина;
			
		Иначе
			
			ЭлементыФормы["НадписьСубконто" + Суффикс + НомерСубконто].Видимость = Ложь;
			ЭлементыФормы["Субконто" + Суффикс + НомерСубконто].Видимость        = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьСубконто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			
			ЗаполнитьДаннымиПоУмолчанию(ЭтотОбъект);
		КонецЕсли;
		
		
	КонецЕсли;
	
	ВалютаУУ = глЗначениеПеременной("ВалютаУправленческогоУчета");
	ЭлементыФормы.УпрВалюта.Заголовок   = ВалютаУУ;

	ВалютаРегл = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ЭлементыФормы.РеглВалюта1.Заголовок  = ВалютаРегл;
	ЭлементыФормы.РеглВалюта2.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта3.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта4.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта5.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта6.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта7.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта8.Заголовок = ВалютаРегл;

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
		мВариантУчетаРасходовПоАмортизационнойПремии = ПараметрыУчетнойПолитики.ВариантУчетаРасходовПоАмортизационнойПремии;
	КонецЕсли;
	
	ВключитьКапитальныеВложенияВРасходыНУ = ПараметрыАмортизационнойПремииЗаполнены();
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете( ЭтотОбъект, ЭтаФорма,,, мОтражатьВРегламентированномУчете);
	
	// Установим видимость и доступность реквизитов
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	мТекущаяДатаДокумента = Дата;

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда
		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
			СтрокаТабличнойЧасти = ОС.Найти(ЗначениеВыбора,"ОсновноеСредство");
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				Предупреждение("Это основное средство уже подобрано!",60);
			Иначе
				НоваяСтрока = ОС.Добавить();
				НоваяСтрока.ОсновноеСредство = ЗначениеВыбора;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры

// Процедура вызывается при нажании кнопки Заполнить командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСЗаполнить(Кнопка)

	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;

	Если Вопрос("При заполнении существующие данные будут пересчитаны! Продолжить?", 
		РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Если (ОтражатьВБухгалтерскомУчете или ОтражатьВНалоговомУчете) и (НЕ ЗначениеЗаполнено(Организация)) Тогда
		Предупреждение("Не выбрана организация", 60);
		Возврат;
	КонецЕсли;

	ТекВид = Новый СписокЗначений;
	ТекВид.Добавить(Перечисления.ВидыСобытийОС.Модернизация);
	ТекВид.Добавить(Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	ТаблицаАмортизацииУпр = Новый ТаблицаЗначений();
	ТаблицаАмортизацииБух = Новый ТаблицаЗначений();
	ТаблицаАмортизацииНал = Новый ТаблицаЗначений();

	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
	Запрос.УстановитьПараметр("ВнешнийИсточник", ОС);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
   	|	ОсновноеСредство
	|ПОМЕСТИТЬ ОсновныеСредства
	|ИЗ &ВнешнийИсточник КАК ВнешнийИсточник
	|";
	Запрос.Выполнить();
	
	Если ОтражатьВУправленческомУчете Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
		Запрос.УстановитьПараметр("Период",   Дата);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
		|	ЕСТЬNULL(АмортизацияОстатки.СтоимостьОстаток, 0) КАК СтоимостьУУ,
		|	ЕСТЬNULL(АмортизацияОстатки.АмортизацияОстаток, 0) КАК АмортизацияУУ,
		|	ЕСТЬNULL(ВыработкаОСОбороты.КоличествоОборот, 0) КАК Количество,
		|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользованияУУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.ОбъемПродукцииРабот, 0) КАК ОбъемПродукцииРаботУУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.КоэффициентАмортизации, 0) КАК КоэффициентАмортизацииУУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииСрезПоследних.КоэффициентУскорения, 0) КАК КоэффициентУскоренияУУ
		|ИЗ
		|	ОсновныеСредства
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.Остатки(&Период, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК АмортизацияОстатки
		|	ПО ОсновныеСредства.ОсновноеСредство = АмортизацияОстатки.ОсновноеСредство
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОС.СрезПоследних(&Период, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК ПараметрыАмортизацииСрезПоследних
		|	ПО ОсновныеСредства.ОсновноеСредство = ПараметрыАмортизацииСрезПоследних.ОсновноеСредство
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&Период, ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних
		|	ПО ОсновныеСредства.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(, &Период, , ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК ВыработкаОСОбороты
		|		ПО ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство 
		|		 И ПервоначальныеСведенияОбОсновныхСредствахСрезПоследних.ПараметрВыработки = ВыработкаОСОбороты.ПараметрВыработки
		|";
		ТЗ_УУ = Запрос.Выполнить().Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СостояниеОС", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
		
		Запрос.Текст = "ВЫБРАТЬ
		               |	СостоянияОС.ДатаСостояния КАК ДатаУУ,
		               |	СостоянияОС.ОсновноеСредство КАК ОС_УУ
		               |ИЗ
		               |	РегистрСведений.СостоянияОС КАК СостоянияОС
		               |ГДЕ
		               |	СостоянияОС.ОсновноеСредство В(ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)
		               |	И СостоянияОС.Состояние = &СостояниеОС";
					   
		ТЗСрокУУ = Запрос.Выполнить().Выгрузить();
		
		СписокОС = ТЗ_УУ.ВыгрузитьКолонку("ОсновноеСредство");
		
		ТаблицаАмортизацииУпр = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииУпр(Дата, СписокОС);
		
	КонецЕсли;
	
	Если (ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете) Тогда
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
		Запрос.УстановитьПараметр("ТекОрганизация", Организация);
		Запрос.УстановитьПараметр("Период",         Дата);
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеСредства.ОсновноеСредство КАК ОсновноеСредство,
		|	АмортизацияБухгалтерскийУчетОстатки.СтоимостьОстаток КАК СтоимостьБУ,
		|	АмортизацияБухгалтерскийУчетОстатки.АмортизацияОстаток КАК АмортизацияБУ,
		|	АмортизацияНалоговыйУчетОстатки.СтоимостьОстаток КАК СтоимостьНУ,
		|	ВыработкаОСОбороты.КоличествоОборот КАК Количество,
		|	ПараметрыАмортизацииНалоговыйУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияНУ,
		|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования КАК СрокПолезногоИспользованияБУ,
		|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот КАК ОбъемПродукцииРаботБУ,
		|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации КАК КоэффициентАмортизацииБУ,
		|	ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.КоэффициентУскорения КАК КоэффициентУскоренияБУ,
		|	ЕСТЬNULL(СтоимостьОС_ПР.СуммаОстатокДт, 0) КАК СтоимостьПР,
		|	ЕСТЬNULL(АмортизацияОС_ПР.СуммаОстатокКт, 0) КАК АмортизацияПР
		|ИЗ
		|	ОсновныеСредства
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(&Период, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК ПараметрыАмортизацииНалоговыйУчетСрезПоследних
		|	ПО ОсновныеСредства.ОсновноеСредство = ПараметрыАмортизацииНалоговыйУчетСрезПоследних.ОсновноеСредство
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСНалоговыйУчет.Остатки(&Период, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК АмортизацияНалоговыйУчетОстатки
		|	ПО ОсновныеСредства.ОсновноеСредство = АмортизацияНалоговыйУчетОстатки.ОсновноеСредство
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСБухгалтерскийУчет.Остатки(&Период, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК АмортизацияБухгалтерскийУчетОстатки
		|	ПО ОсновныеСредства.ОсновноеСредство = АмортизацияБухгалтерскийУчетОстатки.ОсновноеСредство
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(&Период, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних
		|	ПО ОсновныеСредства.ОсновноеСредство = ПараметрыАмортизацииБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&Период, Организация = &ТекОрганизация И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних
		|	ПО ОсновныеСредства.ОсновноеСредство = ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ВыработкаОС.Обороты(, &Период, , ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК ВыработкаОСОбороты
		|		ПО ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ОсновноеСредство = ВыработкаОСОбороты.ОсновноеСредство
		|		 И ПервоначальныеСведенияОбОсновныхСредствахОрганизацийСрезПоследних.ПараметрВыработки = ВыработкаОСОбороты.ПараметрВыработки
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(
		|			&Период,
		|			Организация = &ТекОрганизация
		|				И ОсновноеСредство В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СчетаНалоговогоУчетаОсновныхСредствСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(
		|				&Период,
		|				,
		|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|				Организация = &ТекОрганизация
		|					И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.ПР)
		|					И Субконто1 В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК СтоимостьОС_ПР
		|		ПО СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = СтоимостьОС_ПР.Субконто1
		|			И СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетУчета = СтоимостьОС_ПР.Счет
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрБухгалтерии.Налоговый.Остатки(
		|				&Период,
		|				,
		|				ЗНАЧЕНИЕ(ПланВидовХарактеристик.ВидыСубконтоХозрасчетные.ОсновныеСредства),
		|				Организация = &ТекОрганизация
		|					И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.ПР)
		|					И Субконто1 В (ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)) КАК АмортизацияОС_ПР
		|		ПО СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = АмортизацияОС_ПР.Субконто1
		|			И СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.СчетНачисленияАмортизации = АмортизацияОС_ПР.Счет
		|	ПО СчетаНалоговогоУчетаОсновныхСредствСрезПоследних.ОсновноеСредство = ОсновныеСредства.ОсновноеСредство
		|";
		ТЗ_БУ = Запрос.Выполнить().Выгрузить();
		
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц; 
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("СостояниеОС", Перечисления.СостоянияОС.ВведеноВЭксплуатацию);
		Запрос.Текст = "ВЫБРАТЬ
		               |	СостоянияОСОрганизаций.ДатаСостояния КАК ДатаБУ,
		               |	СостоянияОСОрганизаций.ОсновноеСредство КАК ОС_БУ
		               |ИЗ
		               |	РегистрСведений.СостоянияОСОрганизаций КАК СостоянияОСОрганизаций
		               |ГДЕ
		               |	СостоянияОСОрганизаций.ОсновноеСредство В(ВЫБРАТЬ ОсновноеСредство ИЗ ОсновныеСредства)
		               |	И СостоянияОСОрганизаций.Организация = &Организация
		               |	И СостоянияОСОрганизаций.Состояние = &СостояниеОС";
		ТЗСрокБУ = Запрос.Выполнить().Выгрузить();
		
		СписокОС = ТЗ_БУ.ВыгрузитьКолонку("ОсновноеСредство");
		
		ТаблицаАмортизацииБух = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииБухРегл(Дата, Организация, СписокОС);
		ТаблицаАмортизацииНал = УправлениеВнеоборотнымиАктивами.РасчетАмортизацииНалогРегл(ЭтотОбъект, Дата, Организация, СписокОС);
		
	КонецЕсли;

	Для Каждого Строка Из ОС Цикл

		// В соответствующие поля строки запишем данные из запроса
		
		Если ОтражатьВУправленческомУчете Тогда
			СтрокаТЗУУ = ТЗ_УУ.Найти(Строка.ОсновноеСредство,"ОсновноеСредство");
			
			Если СтрокаТЗУУ = Неопределено Тогда
				
				Строка.СрокПолезногоИспользованияУУ = 0;
				Строка.ФактСрокИспользованияУУ  = 0;
				Строка.ОбъемПродукцииРаботУУ    = 0;
				Строка.ФактОбъемПродукцииРаботУУ= 0;
				Строка.СтоимостьУУ              = 0;
				Строка.СуммаМодернизацииУУ      = 0;
				Строка.АмортизацияУУ            = 0;
				Строка.АмортизацияЗаМесяцУУ     = 0;
				Строка.КоэффициентАмортизацииУУ = 0;
				Строка.КоэффициентУскоренияУУ   = 0;
			Иначе
				
				Строка.СрокПолезногоИспользованияУУ = СтрокаТЗУУ.СрокПолезногоИспользованияУУ;
				СтрокаСрокУУ = ТЗСрокУУ.Найти(Строка.ОсновноеСредство,"ОС_УУ");
				Если СтрокаСрокУУ = Неопределено Тогда
					Строка.ФактСрокИспользованияУУ = 0;
				Иначе
					Строка.ФактСрокИспользованияУУ = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(СтрокаСрокУУ.ДатаУУ, Дата);
				КонецЕсли;
				
				Строка.ОбъемПродукцииРаботУУ     = СтрокаТЗУУ.ОбъемПродукцииРаботУУ;
				Строка.ФактОбъемПродукцииРаботУУ = СтрокаТЗУУ.Количество;
				Строка.СтоимостьУУ               = СтрокаТЗУУ.СтоимостьУУ;
				Строка.СуммаМодернизацииУУ       = ?(ОС.Количество()<>0,ЭлементыФормы.Стоимость.Значение / ОС.Количество(),0);
				Строка.АмортизацияУУ             = СтрокаТЗУУ.АмортизацияУУ;
				СтрокаТаблицаАмортизацииУпр      = ТаблицаАмортизацииУпр.Найти(Строка.ОсновноеСредство,"ОС");
				Строка.АмортизацияЗаМесяцУУ      = ?(СтрокаТаблицаАмортизацииУпр = Неопределено,0,СтрокаТаблицаАмортизацииУпр.Упр);
				Строка.КоэффициентАмортизацииУУ  = СтрокаТЗУУ.КоэффициентАмортизацииУУ;
				Строка.КоэффициентУскоренияУУ    = СтрокаТЗУУ.КоэффициентУскоренияУУ;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете Тогда
			СтрокаТЗБУ = ТЗ_БУ.Найти(Строка.ОсновноеСредство,"ОсновноеСредство");
			
			Если СтрокаТЗБУ = Неопределено Тогда
				
				Строка.СрокПолезногоИспользованияБУ = 0;
				Строка.ФактСрокИспользованияБУ      = 0;
				Строка.ОбъемПродукцииРаботБУ        = 0;
				Строка.ФактОбъемПродукцииРаботБУ    = 0;
				Строка.СтоимостьБУ                  = 0;
				Строка.СуммаМодернизацииБУ          = 0;
				Строка.АмортизацияБУ                = 0;
				Строка.АмортизацияЗаМесяцБУ         = 0;
				Строка.КоэффициентАмортизацииБУ     = 0;
				Строка.КоэффициентУскоренияБУ       = 0;
				Строка.СрокПолезногоИспользованияНУ = 0;
				Строка.СтоимостьНУ                  = 0;
				Строка.СуммаМодернизацииНУ          = 0;
				Строка.СуммаМодернизацииНУХоз       = 0;
				Строка.СуммаМодернизацииПР          = 0;
				Строка.СуммаМодернизацииПРХоз       = 0;
				Строка.СуммаМодернизацииВР          = 0;
				Строка.СуммаМодернизацииВРХоз       = 0;
				Строка.СтоимостьПР                  = 0;
				Строка.АмортизацияПР                = 0;
				
			Иначе
				
				Строка.СрокПолезногоИспользованияБУ = СтрокаТЗБУ.СрокПолезногоИспользованияБУ;
				СтрокаСрокБУ = ТЗСрокБУ.Найти(Строка.ОсновноеСредство,"ОС_БУ");
				Если СтрокаСрокБУ = Неопределено Тогда
					Строка.ФактСрокИспользованияБУ = 0;
				Иначе
					Строка.ФактСрокИспользованияБУ = УправлениеВнеоборотнымиАктивами.ОпределитьФактическийСрокИспользования(СтрокаСрокБУ.ДатаБУ, Дата)
				КонецЕсли;
				
				Строка.ОбъемПродукцииРаботБУ        = СтрокаТЗБУ.ОбъемПродукцииРаботБУ;
				Строка.ФактОбъемПродукцииРаботБУ    = СтрокаТЗБУ.Количество;
				Строка.СтоимостьБУ                  = СтрокаТЗБУ.СтоимостьБУ;
				Строка.СуммаМодернизацииБУ          = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьБУ.Значение / ОС.Количество(),0);
				Строка.СуммаМодернизацииБУХоз       = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьБУХоз.Значение / ОС.Количество(),0);
				Строка.АмортизацияБУ                = СтрокаТЗБУ.АмортизацияБУ;
				СтрокаТаблицаАмортизацииБух         = ТаблицаАмортизацииБух.Найти(Строка.ОсновноеСредство,"ОС");
				Строка.АмортизацияЗаМесяцБУ         = ?(СтрокаТаблицаАмортизацииБух = Неопределено,0,СтрокаТаблицаАмортизацииБух.Бух);
				Строка.КоэффициентАмортизацииБУ     = СтрокаТЗБУ.КоэффициентАмортизацииБУ;
				Строка.КоэффициентУскоренияБУ       = СтрокаТЗБУ.КоэффициентУскоренияБУ;
				Строка.СрокПолезногоИспользованияНУ = СтрокаТЗБУ.СрокПолезногоИспользованияНУ;
				
				Строка.СтоимостьНУ                  = СтрокаТЗБУ.СтоимостьНУ;
				Строка.СуммаМодернизацииНУ          = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьНУ.Значение / ОС.Количество(),0);
				Строка.СуммаМодернизацииНУХоз       = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьНУХоз.Значение / ОС.Количество(),0);
				Строка.СуммаМодернизацииПР          = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьПР.Значение / ОС.Количество(),0);
				Строка.СуммаМодернизацииПРХоз       = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьПРХоз.Значение / ОС.Количество(),0);
				Строка.СуммаМодернизацииВР          = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьВР.Значение / ОС.Количество(),0);
				Строка.СуммаМодернизацииВРХоз       = ?(ОС.Количество()<>0,ЭлементыФормы.СтоимостьВРХоз.Значение / ОС.Количество(),0);
				
				Строка.СуммаМодернизацииУСН         = ?(ОС.Количество() <> 0, СтоимостьУСН / ОС.Количество(), 0);
				
				Строка.СтоимостьПР                  = СтрокаТЗБУ.СтоимостьПР;
				Строка.АмортизацияПР                = СтрокаТЗБУ.АмортизацияПР;   
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	//Иначе
	
	//	Сообщить("Данные для заполнения отсутствуют.");
	
	//КонецЕсли;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "По наименованию" из меню "Заполнить"
// командной панели формы. Процедура добавляет в табличную часть основные средства,
// наименование которых совпадает с наименованием текущего выбранного в табличной части ОС
//
Процедура КоманднаяПанельОСЗаполнитьПоНаименованию(Кнопка)
	
	Если ЭлементыФормы.ОС.ТекущаяСтрока = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредство = ЭлементыФормы.ОС.ТекущиеДанные.ОсновноеСредство;
	
	Если ОсновноеСредство = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = ОС.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС",     СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК ОсновноеСредствоКод
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.Ссылка НЕ В (&СписокОС)
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаОС = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОС.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Другие элементы справочника с наименованием <" + ОсновноеСредствоНаименование + "> в справочнике ""Основные средства"" отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаОС.Следующий() Цикл
		НоваяСтрока = ОС.Добавить();
		НоваяСтрока.ОсновноеСредство = ВыборкаОС.ОсновноеСредство;
	КонецЦикла; 
	
КонецПроцедуры // КоманднаяПанельОСЗаполнитьПоНаименованию()

// Процедура вызывается при нажании кнопки Подбор командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСПодбор(Кнопка)
	
	ФормаПодбора =  Справочники.ОсновныеСредства.ПолучитьФорму("ФормаПодбора",ЭтаФорма);
	ФормаПодбора.РежимВыбора = Истина;
	ФормаПодбора.ЗакрыватьПриВыборе  = Ложь;
	ФормаПодбора.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете( ЭтотОбъект, ЭтаФорма,,, мОтражатьВРегламентированномУчете, Истина);
	
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
		мВариантУчетаРасходовПоАмортизационнойПремии = ПараметрыУчетнойПолитики.ВариантУчетаРасходовПоАмортизационнойПремии;
	КонецЕсли;
	
	УстановитьВидимость();
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВБухгалтерскомУчете 
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = Элемент.Значение;
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");

	УстановитьВидимость();
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	Если Элемент.Значение Тогда
		СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОбъектовСтроительства(Организация,ОбъектСтроительства);
		СчетУчетаБУВнеоборотногоАктива = СчетаУчета.СчетУчетаБУ;
		СчетУчетаНУВнеоборотногоАктива = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУВнеоборотногоАктива));
	КонецЕсли;
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВНалоговомУчете 
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ОбъектСтроительства 
//
Процедура ОбъектСтроительстваПриИзменении(Элемент)

	СчетаУчета = УправлениеВнеоборотнымиАктивами.ПолучитьСчетаУчетаОбъектовСтроительства(Организация,ОбъектСтроительства);
	СчетУчетаБУВнеоборотногоАктива = СчетаУчета.СчетУчетаБУ;
	СчетУчетаНУВнеоборотногоАктива = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУВнеоборотногоАктива));

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СчетУчетаБУВнеоборотногоАктива 
//
Процедура СчетУчетаБУВнеоборотногоАктиваПриИзменении(Элемент)

	СчетУчетаНУВнеоборотногоАктива = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУВнеоборотногоАктива));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетУчетаБУВнеоборотногоАктива 
//
Процедура СчетУчетаБУВнеоборотногоАктиваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетУчетаНУВнеоборотногоАктива 
//
Процедура СчетУчетаНУВнеоборотногоАктиваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки РассчитатьСтоимость
//
Процедура РассчитатьСтоимостьНажатие(Элемент)

	Если Ссылка.Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе." , 60,);
		Возврат;
	КонецЕсли;

	СтруктураСтоимости = УправлениеВнеоборотнымиАктивами.РассчитатьСтоимостьОбъектаСтроительства(ОтражатьВУправленческомУчете,
	                                                             ОтражатьВБухгалтерскомУчете,
	                                                             ОтражатьВНалоговомУчете,
	                                                             СчетУчетаБУВнеоборотногоАктива,
	                                                             СчетУчетаНУВнеоборотногоАктива,
	                                                             ОбъектСтроительства,
	                                                             Организация,
	                                                             КонецДня(Дата));
	
	ЭлементыФормы.Стоимость.Значение      = СтруктураСтоимости.СтоимостьУУ;
	ЭлементыФормы.СтоимостьБУ.Значение    = СтруктураСтоимости.СтоимостьБУ;
	ЭлементыФормы.СтоимостьБУХоз.Значение = СтруктураСтоимости.СтоимостьБУХоз;
	ЭлементыФормы.СтоимостьНУ.Значение    = СтруктураСтоимости.СтоимостьНУ;
	ЭлементыФормы.СтоимостьНУХоз.Значение = СтруктураСтоимости.СтоимостьНУХоз;
	ЭлементыФормы.СтоимостьПР.Значение    = СтруктураСтоимости.СтоимостьПР;
	ЭлементыФормы.СтоимостьПРХоз.Значение = СтруктураСтоимости.СтоимостьПРХоз;
	ЭлементыФормы.СтоимостьВР.Значение    = СтруктураСтоимости.СтоимостьВР;
	ЭлементыФормы.СтоимостьВРХоз.Значение = СтруктураСтоимости.СтоимостьВРХоз;
	ЭлементыФормы.СтоимостьУСН.Значение   = СтруктураСтоимости.СтоимостьБУ;

КонецПроцедуры // РассчитатьСтоимостьНажатие()

// Процедура - обработчик события "НачалоВыбора" поля Состояние 
//
Процедура СобытиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ВидыСобытий = ПолучитьСписокЗначенийВидыСобытий();	
    УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСобытияОС(Элемент, ВидыСобытий, СтандартнаяОбработка);

КонецПроцедуры

//Процедура - обработчик события "НачалоВыбора" элемента формы СобытиеРегл
//
Процедура СобытиеРеглНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СобытиеНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "Включить капитальные
// вложения в состав расходов по п. 1.1 ст. 259 НК РФ (НУ)"
//
Процедура ВключитьКапитальныеВложенияВРасходыНУПриИзменении(Элемент)
	
	Если НЕ ВключитьКапитальныеВложенияВРасходыНУ Тогда
	
		Если ПараметрыАмортизационнойПремииЗаполнены() Тогда
			
			ТекстВопроса =
			"Установленные параметры амортизационной премии будут очищены.
			|Продолжить?";
			
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
				
				Для Каждого СтрокаОС Из ОС Цикл
					СтрокаОС.СуммаКапитальныхВложенийВключаемыхВРасходыНУ = 0;					
				КонецЦикла;
				СчетУчетаЗатратПоАмортизационнойПремии = ПланыСчетов.Налоговый.ПустаяСсылка();
				СубконтоПоАмортизационнойПремии1       = Неопределено;
				СубконтоПоАмортизационнойПремии2       = Неопределено;
				СубконтоПоАмортизационнойПремии3       = Неопределено;
				
			Иначе
				
				ВключитьКапитальныеВложенияВРасходыНУ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если мВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии Тогда
		
			Если ОС.Количество() > 0 Тогда
				
				Если НЕ ОС[0].ОсновноеСредство = Справочники.ОсновныеСредства.ПустаяСсылка() Тогда
					
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Период",           Дата);
					Запрос.УстановитьПараметр("Организация",      Организация);
					Запрос.УстановитьПараметр("ОсновноеСредство", ОС[0].ОсновноеСредство);
					Запрос.Текст = 
					"ВЫБРАТЬ
					|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК СпособОтраженияРасходовПоАмортизации
					|ИЗ
					|	РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
					|		&Период,
					|		Организация = &Организация
					|			И ОсновноеСредство = &ОсновноеСредство) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
					|";
					РезультатЗапроса = Запрос.Выполнить();
					Если НЕ (РезультатЗапроса.Пустой()) Тогда
						СпособОтраженияРасходовПоАмортизации = РезультатЗапроса.Выгрузить()[0].СпособОтраженияРасходовПоАмортизации;
					Иначе
						СпособОтраженияРасходовПоАмортизации = Неопределено;
					КонецЕсли;
				
					Запрос = Новый Запрос();
					Запрос.УстановитьПараметр("АмортизационнаяПремия", Перечисления.ВидыРасходовНУ.АмортизационнаяПремия);
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	СтатьиЗатрат.Ссылка КАК Ссылка
					|ИЗ
					|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
					|ГДЕ
					|	СтатьиЗатрат.ВидРасходовНУ = &АмортизационнаяПремия
					|
					|УПОРЯДОЧИТЬ ПО
					|	СтатьиЗатрат.Код
					|";
					РезультатЗапроса = Запрос.Выполнить();
					Если НЕ (РезультатЗапроса.Пустой()) Тогда
						СтатьяЗатратАмортизационнаяПремия = РезультатЗапроса.Выгрузить()[0].Ссылка;
					Иначе
						СтатьяЗатратАмортизационнаяПремия = Неопределено;
					КонецЕсли;
					
					Запрос = Новый Запрос;
					Запрос.УстановитьПараметр("Ссылка",                            СпособОтраженияРасходовПоАмортизации);
					Запрос.УстановитьПараметр("СтатьяЗатратАмортизационнаяПремия", СтатьяЗатратАмортизационнаяПремия);
					Запрос.Текст = 
					"ВЫБРАТЬ ПЕРВЫЕ 1
					|	СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатратНУ КАК СчетЗатратНУ,
					|	ВЫБОР
					|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.СубконтоНУ1 ССЫЛКА Справочник.СтатьиЗатрат
					|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
					|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.СубконтоНУ1
					|	КОНЕЦ КАК СубконтоНУ1,
					|	ВЫБОР
					|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.СубконтоНУ2 ССЫЛКА Справочник.СтатьиЗатрат
					|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
					|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.СубконтоНУ2
					|	КОНЕЦ КАК СубконтоНУ2,
					|	ВЫБОР
					|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.СубконтоНУ3 ССЫЛКА Справочник.СтатьиЗатрат
					|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
					|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.СубконтоНУ3
					|	КОНЕЦ КАК СубконтоНУ3
					|ИЗ
					|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
					|ГДЕ
					|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка = &Ссылка
					|
					|УПОРЯДОЧИТЬ ПО
					|	СпособыОтраженияРасходовПоАмортизацииСпособы.НомерСтроки";
					РезультатЗапроса = Запрос.Выполнить();
					Если НЕ (РезультатЗапроса.Пустой()) Тогда
						
						СпособОтраженияРаcходов = РезультатЗапроса.Выгрузить()[0];
						
						СчетУчетаЗатратПоАмортизационнойПремии = СпособОтраженияРаcходов.СчетЗатратНУ;
						
						СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(ЭлементыФормы.СчетУчетаЗатратПоАмортизационнойПремии);
						
						Если ЗначениеЗаполнено(СпособОтраженияРаcходов.СубконтоНУ1) Тогда
							СубконтоПоАмортизационнойПремии1 = СпособОтраженияРаcходов.СубконтоНУ1;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СпособОтраженияРаcходов.СубконтоНУ2) Тогда
							СубконтоПоАмортизационнойПремии2 = СпособОтраженияРаcходов.СубконтоНУ2;
						КонецЕсли;
						
						Если ЗначениеЗаполнено(СпособОтраженияРаcходов.СубконтоНУ3) Тогда
							СубконтоПоАмортизационнойПремии3 = СпособОтраженияРаcходов.СубконтоНУ3;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ВключитьКапитальныеВложенияВРасходыНУПриИзменении()

// Обработчик события "ОбработкаВыбора" поля "Счет учета затрат по амортизационной
// премии (НУ)".
//
Процедура СчетУчетаЗатратПоАмортизационнойПремииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СчетУчетаЗатратПоАмортизационнойПремииОбработкаВыбора()

// Обработчик события "ПриИзменении" поля "Счет учета затрат по амортизационной
// премии (НУ)".
//
Процедура СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             СубконтоПоАмортизационнойПремии1,
	                             ЭлементыФормы.СубконтоПоАмортизационнойПремии1,
	                             СубконтоПоАмортизационнойПремии2,
	                             ЭлементыФормы.СубконтоПоАмортизационнойПремии2,
	                             СубконтоПоАмортизационнойПремии3,
	                             ЭлементыФормы.СубконтоПоАмортизационнойПремии3);
								 
	РаботаСДиалогами.ПроверитьВладельцаСубконтоПодразделение(ЭтотОбъект, 
											глЗначениеПеременной("глТекущийПользователь"),
											Организация, 
											Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
															|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
															"СубконтоПоАмортизационнойПремии1", "СубконтоПоАмортизационнойПремии2", "СубконтоПоАмортизационнойПремии3", 
															СубконтоПоАмортизационнойПремии1, СубконтоПоАмортизационнойПремии2, СубконтоПоАмортизационнойПремии3));
															
	УстановитьВидимость();														
															
КонецПроцедуры // СчетУчетаЗатратПоАмортизационнойПремииПриИзменении()

// Обработчик события "НачалоВыбора" поля ввода Субконто.
//
Процедура СубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры // СубконтоНачалоВыбора()

//Процедура - обработчик события "Нажатие" гиперрсылки ГиперссылкаСчетФактура
Процедура ГиперссылкаСчетФактураНажатие(Элемент)
	
	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Оборудование". Формирует данные в колонке "Инв. номер".
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ОС.Колонки.ИнвентарныйНомер.Видимость Тогда

		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ИнвентарныйНомер.Текст           = ДанныеСтроки.ОсновноеСредство.Код;

	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете Тогда

		ОформлениеСтроки.Ячейки.ОстСтоимостьУУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСтоимостьУУ.Текст = 
			ОбщегоНазначения.ФорматСумм(ДанныеСтроки.СтоимостьУУ + ДанныеСтроки.СуммаМодернизацииУУ - ДанныеСтроки.АмортизацияУУ - ДанныеСтроки.АмортизацияЗаМесяцУУ);

		ОформлениеСтроки.Ячейки.ОстСрокИспользованияУУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСрокИспользованияУУ.Текст = ДанныеСтроки.СрокПолезногоИспользованияУУ - ДанныеСтроки.ФактСрокИспользованияУУ;
				
		ОформлениеСтроки.Ячейки.ОстОбъемПродукцииРаботУУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстОбъемПродукцииРаботУУ.Текст = 
			СокрЛ(Формат(ДанныеСтроки.ОбъемПродукцииРаботУУ - ДанныеСтроки.ФактОбъемПродукцииРаботУУ, "ЧЦ=15;ЧДЦ=2"));
	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда

		ОформлениеСтроки.Ячейки.ОстСтоимостьБУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСтоимостьБУ.Текст = 
			ОбщегоНазначения.ФорматСумм(ДанныеСтроки.СтоимостьБУ + ДанныеСтроки.СуммаМодернизацииБУ - ДанныеСтроки.АмортизацияБУ - ДанныеСтроки.АмортизацияЗаМесяцБУ);

		ОформлениеСтроки.Ячейки.ОстСрокИспользованияБУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстСрокИспользованияБУ.Текст = 
			ДанныеСтроки.СрокПолезногоИспользованияБУ - ДанныеСтроки.ФактСрокИспользованияБУ;
				
		ОформлениеСтроки.Ячейки.ОстОбъемПродукцииРаботБУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОстОбъемПродукцииРаботБУ.Текст = 
			СокрЛ(Формат(ДанныеСтроки.ОбъемПродукцииРаботБУ - ДанныеСтроки.ФактОбъемПродукцииРаботБУ, "ЧЦ=15;ЧДЦ=2"));
	КонецЕсли;

	Если ОтражатьВНалоговомУчете Тогда
		ОформлениеСтроки.Ячейки.ОбщаяСуммаНУ.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ОбщаяСуммаНУ.Текст = 
			ОбщегоНазначения.ФорматСумм(ДанныеСтроки.СтоимостьНУ + ДанныеСтроки.СуммаМодернизацииНУ);

	КонецЕсли;
	

КонецПроцедуры // ОСПриВыводеСтроки()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

Процедура ОССуммаМодернизацииБУХозПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	УстановитьВидимость();
КонецПроцедуры