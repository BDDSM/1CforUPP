////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

//Хранит текущую строку списка оплачиваемых документов
Перем СтрокаПлатеж;

//Хранит текущую строку списка ведомостей на выплату ЗП
Перем СтрокаВыплата;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

Перем мСчетБУ;
Перем мСчетНУ;

Перем СпецифическиеСоответствияСчетовБУиНУдляДокумента;

Перем ИнвертироватьСуммы;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

Перем мОповещаемыеВедомости;

Перем мОтражатьВРегламентированномУчете;
Перем мПрименениеУСН;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасшифровкаПлатежа,ЭлементыФормы.КоманднаяПанельПлатежи.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВыплатаЗаработнойПлаты,ЭлементыФормы.КоманднаяПанельВыплатаЗаработнойПлаты);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		
		Организация = СтрокаПлатеж.ДоговорКонтрагента.Организация;
		
		ПриИзмененииОрганизации();
		
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
	       
	СтрокаПлатеж.ДокументРасчетовСКонтрагентом = Неопределено; 
	СтрокаПлатеж.Сделка = Неопределено; // Для сделки нет значения по умолчанию в договоре	
	СтрокаПлатеж.ДокументПланированияПлатежа=Документы.ЗаявкаНаРасходованиеСредств.ПустаяСсылка();

	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов, Дата);

	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов();

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = СтрокаПлатеж.ДоговорКонтрагента.Владелец;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Если НЕ (ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами) Тогда
			УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Истина);
		КонецЕсли;
	Иначе
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект) Тогда
		СтрокаПлатеж.Проект=СтрокаПлатеж.ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииДоговора()

Процедура ПриИзмененииКонтрагента()
	
	УправлениеДенежнымиСредствами.ПриИзмененииКонтрагентаВПлатежномДокументе(ДокументОбъект, СтрокаПлатеж);
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Выдать = ?(ПустаяСтрока(Контрагент.НаименованиеПолное), Контрагент.Наименование, Контрагент.НаименованиеПолное);
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКонтрагента

Процедура ПриИзмененииОрганизации()

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям И ОтражатьВБухгалтерскомУчете Тогда
	
		// Получим и запомним ссылку на головную организацию
		мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
		
		//Нужно выбирать ведомости новой организации
		ВыплатаЗаработнойПлаты.Очистить();
	КонецЕсли;

	ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = НалоговыйУчетУСН.ВидимостьКнопкиКУДиР(ЭтотОбъект);
	
	Если Касса.Владелец <> Организация Тогда
		Касса = Неопределено;
	КонецЕсли;

	Если ЗначениеЗаполнено(СчетОрганизации) И СчетОрганизации.Владелец <> Организация Тогда
		СчетОрганизации = Неопределено;
	КонецЕсли;

	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
КонецПроцедуры // ПриИзмененииОрганизации()

// Процедура выполняет заполнение реквизита Контрагент значением по умолчанию.
//
Процедура ЗаполнитьКонтрагента()
    СписокЗначений = новый СписокЗначений;

	ВремКонтрагент = Контрагент;
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ОплатаПоставщику Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойПоставщик", СписокЗначений).Значение;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойПокупатель", СписокЗначений).Значение;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		ВремКонтрагент = УправлениеПользователями.ПолучитьЗначениеПоУмолчаниюПользователя(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяКассаККМ", СписокЗначений).Значение;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = ВремКонтрагент;
		ПриИзмененииКонтрагента();
		ПриИзмененииДоговора();
		УстановитьФокус();
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьПолучателя()

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
Процедура УстановитьФокус()
	
	Если ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=Неопределено Тогда
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=СтрокаПлатеж;
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

// Процедура рассчитывает сумму взаиморасчетов подотчетника.
//
Процедура РассчитатьСуммуВзаиморасчетов()

	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		ВалютаВзаиморасчетов=ВалютаВзаиморасчетовРаботника;
	Иначе
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	
	Если (СтрокаПлатеж.КурсВзаиморасчетов <> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
			                                                  ВалютаВзаиморасчетов,
			                                                  КурсДокумента, СтрокаПлатеж.КурсВзаиморасчетов,
															  КратностьДокумента, СтрокаПлатеж.КратностьВзаиморасчетов);	
	Иначе
		СтрокаПлатеж.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
		
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов

// Процедура рассчитывает сумму платежа по заявке.
//
Процедура РассчитатьСуммуПлатежаПлан()
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетовПлан <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежаПлан=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетовПлан,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежаПлан = 0;
	КонецЕсли;

КонецПроцедуры // РассчитатьСуммуПлатежаПлан()

// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		ВалютаВзаиморасчетов = ВалютаВзаиморасчетовРаботника;
	Иначе
		СтрокаПлатеж.СуммаПлатежа = СтрокаПлатеж.СуммаВзаиморасчетов;
		Возврат;
	КонецЕсли;
	
	Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
	
	ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
		СтрокаПлатеж.СуммаПлатежа=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
															ВалютаДокумента,
			                                                СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
															СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		
		УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуПлатежа()

//Процедура рассчитывает курс взаиморасчетов по заявке
//
Процедура РассчитатьКурсВзаиморасчетовПлан()
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		Возврат;
	КонецЕсли;
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтрокаПлатеж.СуммаПлатежаПлан * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

//Процедура рассчитывает курс взаиморасчетов документа
//
Процедура РассчитатьКурсВзаиморасчетов()
	
	Если (СтрокаПлатеж.СуммаВзаиморасчетов<> 0) И (КратностьДокумента <> 0) Тогда
		СтрокаПлатеж.КурсВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа * КурсДокумента * СтрокаПлатеж.КратностьВзаиморасчетов
							/ СтрокаПлатеж.СуммаВзаиморасчетов/ КратностьДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьКурсВзаиморасчетов

// Обрабатывает интерактивное и программное изменение валюты
// взаиморасчетов с подотчетником
//
Процедура ПриИзмененииВалютыПодотчетника()
	
	Если ВалютаДокумента <> ВалютаВзаиморасчетовРаботника Тогда
		ОтражатьВБухгалтерскомУчете = Ложь;
		ОтражатьВНалоговомУчете     = Ложь;
	КонецЕсли;
	
	СтруктураКурсаВзаиморасчетов = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, Дата);
	СтрокаПлатеж.КурсВзаиморасчетов           = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Кратность;
	РассчитатьСуммуВзаиморасчетов();
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииВалютыПодотчетника()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.СтавкаНДС.Доступность                   = Истина;

	ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
	ЭлементыФормы.Список.Видимость = Ложь;
	ЭлементыФормы.Список1.Видимость = Ложь;

	ЭлементыФормы.СуммаДокумента.Доступность = Истина;
	ЭлементыФормы.РасчетныйДокумент.АвтоОтметкаНезаполненного=Ложь;
	
	ЭлементыФормы.ОсновнаяПанель.ОтображениеЗакладок = ?(ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов, ОтображениеЗакладок.Сверху, ОтображениеЗакладок.НеИспользовать);
	
		//Доступность поля "Док. расчетов:"
	Если СтрокаПлатеж.ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом Тогда
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументРасчетовСКонтрагентом.Доступность = Истина;
		ЭлементыФормы.ДокументРасчетовСКонтрагентом.Доступность                            = Истина;
	Иначе
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.ДокументРасчетовСКонтрагентом.Доступность = Ложь;
		ЭлементыФормы.ДокументРасчетовСКонтрагентом.Доступность                            = Ложь;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВыдачаПодотчетнику",ЭлементыФормы.ОсновнаяПанель);

		ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = 
			(ВалютаДокумента = ВалютаВзаиморасчетовРаботника) И мОтражатьВРегламентированномУчете;

		ЭлементыФормы.РамкаПлательщикПодотчет.Заголовок="Взаиморасчеты с подотчетным лицом";
		ЭлементыФормы.НадписьФизЛицо.Заголовок="Подотчетник";
		ЭлементыФормы.НадписьДокумент.Заголовок="Авансовый отчет";
		
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ЭлементыФормы.КурсВзаиморасчетовПланПодотчет.Видимость=Ложь;
			ЭлементыФормы.СуммаПлатежаПланПодотчет.Видимость=Ложь;
			ЭлементыФормы.НадписьКурсВзаиморасчетовПланПодотчет.Видимость=Ложь;
			ЭлементыФормы.НадписьСуммаПлатежаПланПодотчет.Видимость=Ложь;
			ЭлементыФормы.ИнфНадписьКурсаЗаявкиПодотчет.Видимость=Ложь;
			
		Иначе
			
			ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Истина;
			ЭлементыФормы.СуммаПлатежаПлан.Видимость=Истина;
			ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Истина;
			ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Истина;
			ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Истина;
			
		КонецЕсли;
		
		ЭлементыФормы.НадписьДатаПогашенияАванса.Видимость=Истина;
		ЭлементыФормы.ДатаПогашенияАванса.Видимость=Истина;
		
		ЭлементыФормы.ВалютаВзаиморасчетовПодотчетника.Доступность=Истина;
		ЭлементыФормы.КурсВзаиморасчетовПодотчетник.Доступность=Истина;

		ЭлементыФормы.НадписьСубконто1Подотчет.Видимость = Ложь;
		ЭлементыФормы.СубконтоДт1Подотчет.Видимость      = Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВзносНаличнымиВБанк",ЭлементыФормы.ОсновнаяПанель);

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("Прочее",ЭлементыФормы.ОсновнаяПанель);
        УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях();

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВыдачаКассеККМ",ЭлементыФормы.ОсновнаяПанель);
		ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВыплатаЗП",ЭлементыФормы.ОсновнаяПанель);
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Прочее.Видимость = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Прочее.Заголовок = "Счета затрат на компенсацию за задержку зарплаты";
		
		ЭлементыФормы.ПанельВыплатыЗарплаты.ТекущаяСтраница = ЭлементыФормы.ПанельВыплатыЗарплаты.Страницы.ПоВедомостям;
		
		ЭлементыФормы.ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ОсновнаяПанель.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		ЭлементыФормы.ПанельВыплатыЗарплаты.УстановитьПривязку(ГраницаЭлементаУправления.Низ, Панель, ГраницаЭлементаУправления.Низ);
		ЭлементыФормы.ПанельВыплатыЗарплаты.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		ЭлементыФормы.ВыплатаЗаработнойПлаты.УстановитьПривязку(ГраницаЭлементаУправления.Право, Панель, ГраницаЭлементаУправления.Право);
		
		ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = Ложь;
		ЭлементыФормы.СтавкаНДС.Доступность = Ложь;
		ЭлементыФормы.ДокументПланированияПлатежаПрочие.Видимость = Ложь;
		ЭлементыФормы.НадписьЗаявка.Видимость = Ложь;
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ.Видимость = Истина;
		ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентомНУ.Видимость = Истина;
		
		УстановитьВидимостьСубконто();
		УстановитьВидимостьСубконтоНУ();
		
	ИначеЕсли ЕстьРасчетыСКонтрагентами Тогда

		РаботаСДиалогами.УстановитьТекущуюСтраницу("РКО",ЭлементыФормы.ОсновнаяПанель);
		Если Список Тогда
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоНесколькимСделкам", ЭлементыФормы.ПанельПлатежи);
		Иначе
			РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);
		КонецЕсли;

		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Расшифровка платежа";
		ЭлементыФормы.Сделка.Доступность=Истина;
		
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.НадписьСчетРасчетов.Видимость            = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость     = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И (ВидОперации <> Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами);
		ЭлементыФормы.НадписьСчетАвансов.Видимость             = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И (ВидОперации <> Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами);

		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СчетУчетаРасчетовПоАвансам.Видимость     = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И (ВидОперации <> Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами);
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;

		ЭлементыФормы.НадписьРедактировать.Видимость = Истина;
		ЭлементыФормы.Список.Видимость = Истина;
		ЭлементыФормы.Список1.Видимость = Истина;
		
		Если ВидОперации=Перечисления.ВидыОперацийРКО.ПрочиеРасчетыСКонтрагентами Тогда
			ЭлементыФормы.Сделка.Доступность=Ложь;
		Иначе
			ЭлементыФормы.Сделка.Доступность=Истина;
		КонецЕсли;
				
		Если (Не Список) И НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
			
			ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Ложь;
			ЭлементыФормы.СуммаПлатежаПлан.Видимость=Ложь;
			ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Ложь;
			ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Ложь;
			ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Ложь;
			
		Иначе
			
			ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=Истина;
			ЭлементыФормы.СуммаПлатежаПлан.Видимость=Истина;
			ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=Истина;
			ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=Истина;
			ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=Истина;
			
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами Тогда

		РаботаСДиалогами.УстановитьТекущуюСтраницу("РКО",ЭлементыФормы.ОсновнаяПанель);
		РаботаСДиалогами.УстановитьТекущуюСтраницу("ПлатежПоОднойСделке", ЭлементыФормы.ПанельПлатежи);

		ЭлементыФормы.РамкаРасшифровкаПлатежа.Заголовок="Расшифровка платежа";

		ЭлементыФормы.Сделка.Доступность=Ложь;
		
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.НадписьСчетРасчетов.Видимость            = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость     = Ложь;
		ЭлементыФормы.НадписьСчетАвансов.Видимость             = Ложь;

		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СчетУчетаРасчетовПоАвансам.Видимость     = Ложь;
		ЭлементыФормы.РасшифровкаПлатежа.Колонки.СчетУчетаРасчетовСКонтрагентом.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете;

		ЭлементыФормы.НадписьРедактировать.Видимость = Ложь;
		ЭлементыФормы.Список.Видимость = Ложь;
		ЭлементыФормы.Список1.Видимость = Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда

		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВыдачаПодотчетнику",ЭлементыФормы.ОсновнаяПанель);

		ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = 
			(ВалютаДокумента = ВалютаВзаиморасчетовРаботника) И мОтражатьВРегламентированномУчете;

		ЭлементыФормы.РамкаПлательщикПодотчет.Заголовок="Выдача займа работнику";
		ЭлементыФормы.НадписьФизЛицо.Заголовок="Работник:";
		ЭлементыФормы.НадписьДокумент.Заголовок="Договор займа:";
		
		ЭлементыФормы.НадписьДатаПогашенияАванса.Видимость=Ложь;
		ЭлементыФормы.ДатаПогашенияАванса.Видимость=Ложь;
		ЭлементыФормы.РасчетныйДокумент.АвтоОтметкаНезаполненного=Истина;
		
		ЭлементыФормы.ВалютаВзаиморасчетовПодотчетника.Доступность=Истина;
		ЭлементыФормы.КурсВзаиморасчетовПодотчетник.Доступность=Истина;

		ЭлементыФормы.НадписьСубконто1Подотчет.Видимость = Ложь;
		ЭлементыФормы.СубконтоДт1Подотчет.Видимость      = Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда

		РаботаСДиалогами.УстановитьТекущуюСтраницу("ВыдачаПодотчетнику",ЭлементыФормы.ОсновнаяПанель);
		
		ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = 
			(ВалютаДокумента = ВалютаВзаиморасчетовРаботника) И мОтражатьВРегламентированномУчете;

		ЭлементыФормы.РамкаПлательщикПодотчет.Заголовок="Выдача заработной платы работнику";
		ЭлементыФормы.НадписьФизЛицо.Заголовок="Работник:";
		ЭлементыФормы.НадписьДокумент.Заголовок="Ведомость:";
		
		ЭлементыФормы.СуммаДокумента.Доступность = Ложь;
		
		ЭлементыФормы.НадписьДатаПогашенияАванса.Видимость=Ложь;
		ЭлементыФормы.ДатаПогашенияАванса.Видимость=Ложь;
		ЭлементыФормы.РасчетныйДокумент.АвтоОтметкаНезаполненного=Истина;
		
		ЭлементыФормы.ВалютаВзаиморасчетовПодотчетника.Доступность=Ложь;
		ЭлементыФормы.КурсВзаиморасчетовПодотчетник.Доступность=Ложь;
			
		ЭлементыФормы.НадписьСубконто1Подотчет.Видимость = Ложь;
		ЭлементыФормы.СубконтоДт1Подотчет.Видимость      = Ложь;
		
		// Закладка по отражению компенсации за задерку выплаты заработной платы
		ЭлементыФормы.ОсновнаяПанель.Страницы.ВыдачаПодотчетнику.Заголовок = "Выдача заработной платы работнику";
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Прочее.Видимость = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Прочее.Заголовок = "Счета затрат на компенсацию за задержку зарплаты";
		
		ЭлементыФормы.СтатьяДвиженияДенежныхСредствПрочие.Видимость = Ложь;
		ЭлементыФормы.НадписьСтатья1.Видимость = Ложь;
		
		ЭлементыФормы.ДокументПланированияПлатежаПрочие.Видимость = Ложь;
		ЭлементыФормы.НадписьЗаявка.Видимость = Ложь;
		ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ.Видимость = Истина;
		ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентомНУ.Видимость = Истина;
		
		УстановитьВидимостьСубконто();
		УстановитьВидимостьСубконтоНУ();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда

		Для Каждого Страница Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
			Если Страница.Имя="ВыплатаДепонентов" ИЛИ Страница.Имя="Депоненты_РасшифровкаПоСтатьям" Тогда
				Страница.Видимость=Истина;
			Иначе
				Страница.Видимость=Ложь;
			КонецЕсли;
		КонецЦикла;
	
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница=ЭлементыФормы.ОсновнаяПанель.Страницы["ВыплатаДепонентов"];

		ЭлементыФормы.СтавкаНДС.Доступность = Ложь;
	КонецЕсли;

	ЭлементыФормы.Оплачено.Доступность           = ОтражатьВУправленческомУчете;
	ЭлементыФормы.ОтраженоВОперУчете.Доступность = ОтражатьВУправленческомУчете;

	Если Список Тогда
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоОднойСделке"].Видимость       = Ложь;
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"].Видимость = Истина;
		ЭлементыФормы.ПанельПлатежи.ТекущаяСтраница=ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"];
		ЭлементыФормы.РасшифровкаПлатежа.Ширина=ЭлементыФормы.ПанельПлатежи.Ширина;
		ЭлементыФормы.РасшифровкаПлатежа.Высота=ЭлементыФормы.ПанельПлатежи.Высота;
	Иначе
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоОднойСделке"].Видимость       = Истина;
		ЭлементыФормы.ПанельПлатежи.Страницы["ПлатежПоНесколькимСделкам"].Видимость = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки["Чек"].Доступность = 
		(ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю 
			ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее);
	
	ВидимостьРеквизитовПланирования = ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа);
		
	ЭлементыФормы.КурсВзаиморасчетовПлан.Видимость=ВидимостьРеквизитовПланирования;
	ЭлементыФормы.СуммаПлатежаПлан.Видимость=ВидимостьРеквизитовПланирования;
	ЭлементыФормы.НадписьКурсВзаиморасчетовПлан.Видимость=ВидимостьРеквизитовПланирования;
	ЭлементыФормы.НадписьСуммаПлатежаПлан.Видимость=ВидимостьРеквизитовПланирования;
	ЭлементыФормы.ИнфНадписьКурсаЗаявки.Видимость=ВидимостьРеквизитовПланирования;
	
	ЭлементыФормы.КурсВзаиморасчетовПланПодотчет.Видимость=ВидимостьРеквизитовПланирования;
	ЭлементыФормы.СуммаПлатежаПланПодотчет.Видимость=ВидимостьРеквизитовПланирования;
	ЭлементыФормы.НадписьКурсВзаиморасчетовПланПодотчет.Видимость=ВидимостьРеквизитовПланирования;
	ЭлементыФормы.НадписьСуммаПлатежаПланПодотчет.Видимость=ВидимостьРеквизитовПланирования;
	ЭлементыФормы.ИнфНадписьКурсаЗаявкиПодотчет.Видимость=ВидимостьРеквизитовПланирования;
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	УстановитьДанныеДляРеквизитов();
		
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект,НадписьПроект1,Проект1,НадписьПроект2,Проект2,НадписьПроект3,Проект3,НадписьПроект4,Проект4,РасшифровкаПлатежа.Проект,ВыплатаДепонентов.Проект");
	ЭлементыФормы.ДействияФормы.Кнопки.НастройкаУСН.Доступность = НалоговыйУчетУСН.ВидимостьКнопкиКУДиР(ЭтотОбъект);

КонецПроцедуры // УстановитьВидимость()

// Процедура переопределяет источники данных для реквизитов "СуммаДокумента" и "СуммаВзаиморасчетов".
// В режиме расчетов с контрагентами без разбиения они меняются местами.
//
Процедура УстановитьДанныеДляРеквизитов()
	
	Если ((ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) И Не Список)
		ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		Если НЕ ЭлементыФормы.СуммаДокумента.Данные = "ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов" Тогда 
			ЭлементыФормы.СуммаДокумента.Данные="ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.СуммаВзаиморасчетов";
		КонецЕсли;
		
		ЭлементыФормы.НадписьСуммаДокумент.Данные="НадписьСуммаВзаиморасчетов";
		ЭлементыФормы.НадписьВалютаДокумент.Данные="";
		ЭлементыФормы.НадписьВалютаДокумент.Заголовок="";
		ЭлементыФормы.НадписьВалютаВзаиморасчетов.Данные="НадписьВалютаДокумент";
		ЭлементыФормы.НадписьВалютаВзаиморасчетовПодотчет.Данные="НадписьВалютаДокумент";
				
		ИнвертироватьСуммы=Истина;
		
	Иначе
		
		Если НЕ ЭлементыФормы.СуммаДокумента.Данные = "СуммаДокумента" Тогда 
			ЭлементыФормы.СуммаДокумента.Данные="СуммаДокумента";
		КонецЕсли;
		ЭлементыФормы.НадписьВалютаДокумент.Данные="НадписьВалютаДокумент";

		ЭлементыФормы.НадписьСуммаДокумент.Данные="";
		ЭлементыФормы.НадписьСуммаДокумент.Заголовок="Сумма: ";
		
		ИнвертироватьСуммы=Ложь;
				
	КонецЕсли;
	
КонецПроцедуры // УстановитьДанныеДляРеквизитов()

// Устанавливает тип поля "Контрагент" в зависимости от вида операции.
//
// Параметры:
//  Нет.
//
Процедура УстановитьТипКонтрагент(флПриОткрытии=ложь)

	ИмяСправочника         = "Контрагенты";
	ИмяРасчетногоДокумента ="АвансовыйОтчет";
	
	ЕстьКонтрагент=Истина;
	ЕстьРасчетныйДокумент=Ложь;

	Если      ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		ИмяСправочника = "КассыККМ";
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику  Тогда
		ИмяСправочника = "ФизическиеЛица";
		ЕстьРасчетныйДокумент=Истина;
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		ИмяСправочника = "ФизическиеЛица";
		ИмяРасчетногоДокумента="ДоговорЗаймаСРаботником";
		ЕстьРасчетныйДокумент=Истина;
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		ИмяСправочника = "ФизическиеЛица";
		ИмяРасчетногоДокумента="ЗарплатаКВыплатеОрганизаций";
		ЕстьРасчетныйДокумент=Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		ЕстьКонтрагент=Ложь;
		
	КонецЕсли;
	
	Если ЕстьКонтрагент Тогда
		Если флПриОткрытии Тогда
			Массив = Новый Массив;
			Массив.Добавить(Тип("СправочникСсылка." + ИмяСправочника));
			ЭлементыФормы.Контрагент.ОграничениеТипа = новый ОписаниеТипов(Массив);
		Иначе	
			Если ТипЗнч(Контрагент) <> Тип("СправочникСсылка." + ИмяСправочника) Тогда
				Контрагент = Справочники[ИмяСправочника].ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;	
	Иначе
		
		Если НЕ Контрагент=Неопределено Тогда
			Контрагент=Неопределено;
		КонецЕсли;
		
	КонецЕсли;

	Если ЕстьРасчетныйДокумент Тогда
		
		Если ТипЗнч(РасчетныйДокумент) <> Тип("ДокументСсылка." + ИмяРасчетногоДокумента) Тогда
			Если флПриОткрытии Тогда
				Массив = Новый Массив;
				Массив.Добавить(Тип("ДокументСсылка." + ИмяРасчетногоДокумента));
				ЭлементыФормы.РасчетныйДокумент.ОграничениеТипа = новый ОписаниеТипов(Массив);
            Иначе
				РасчетныйДокумент = Документы[ИмяРасчетногоДокумента].ПустаяСсылка();
			КонецЕсли;	
		КонецЕсли;

		
	Иначе
		
		Если Не РасчетныйДокумент=Неопределено Тогда
			РасчетныйДокумент=Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьТипКонтрагент()

// Устанавливает видимость реквизитов субконто и подписей к ним.
//
Процедура УстановитьВидимостьСубконто()

	Для Ном = 1 по 3 Цикл

		Если (Ном <= СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом))
			И ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете Тогда
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Заголовок = СчетУчетаРасчетовСКонтрагентом.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Видимость = Истина;
			ЭлементыФормы["СубконтоДт"+Ном].Видимость        = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконтоДт"+Ном].Видимость = Ложь;
			ЭлементыФормы["СубконтоДт"+Ном].Видимость        = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
	УстановитьВидимостьСубконтоНУ();

КонецПроцедуры // УстановитьВидимостьСубконто()

Процедура УстановитьВидимостьСубконтоНУ()
	
	Для Ном = 1 по 3 Цикл
		
		Если НЕ мПрименениеУСН И ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ) И (Ном <= СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто.Количество()) Тогда
			ЭлементыФормы["НадписьСубконтоНУДт"+Ном].Заголовок = Строка(СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто[Ном-1].ВидСубконто);
			ЭлементыФормы["НадписьСубконтоНУДт"+Ном].Видимость = Истина;
			ЭлементыФормы["СубконтоНУДт"+Ном].Видимость        = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконтоНУДт"+Ном].Видимость = Ложь;
			ЭлементыФормы["СубконтоНУДт"+Ном].Видимость        = Ложь;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьСубконтоНУ()


// Процедура устанавливает видимость счетов и соответствующих субконто на закладке Прочие операции
//
Процедура УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях()
	
	Флаг0 = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И мОтражатьВРегламентированномУчете;
	ЭлементыФормы.СчетУчета  .Видимость = Флаг0;
	ЭлементыФормы.НадписьСчет.Видимость = Флаг0;
	ВсегоСубконто = ?(НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентом), 0, СчетУчетаРасчетовСКонтрагентом.ВидыСубконто.Количество());
	Для К = 1 По 3 Цикл
		Флаг = К <= ВсегоСубконто И Флаг0;
		ЭлементыФормы["СубконтоДт"        + К].Видимость = Флаг;
		ЭлементыФормы["НадписьСубконтоДт" + К].Видимость = Флаг;
	КонецЦикла;
	
	Флаг0 = ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете И мОтражатьВРегламентированномУчете И НЕ мПрименениеУСН;
	ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ       .Видимость = Флаг0;
	ЭлементыФормы.НадписьСчетУчетаРасчетовСКонтрагентомНУ.Видимость = Флаг0;
	ВсегоСубконто = ?(НЕ ЗначениеЗаполнено(СчетУчетаРасчетовСКонтрагентомНУ), 0, СчетУчетаРасчетовСКонтрагентомНУ.ВидыСубконто.Количество());
	Для К = 1 По 3 Цикл
		Флаг = К <= ВсегоСубконто И Флаг0;
		ЭлементыФормы["СубконтоНУДт"        + К].Видимость = Флаг;
		ЭлементыФормы["НадписьСубконтоНУДт" + К].Видимость = Флаг;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьСчетовИСубконтоПриПрочихОперациях()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	// Установить тип поля Контрагент.
	УстановитьТипКонтрагент(истина);
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ	
		
		// Заполнить реквизиты значениями по умолчанию.
		УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРасчетногоДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), мВалютаРегламентированногоУчета,РасшифровкаПлатежа,,ПараметрОбъектКопирования);
		
		Если ПараметрОбъектКопирования = Неопределено Тогда
			
			Если НЕ (ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк
				ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
				ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее
				ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаДепонентов) Тогда
				
				ЗаполнитьКонтрагента();
				
			КонецЕсли;
			
			УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);
			
			Если НЕ ЗначениеЗаполнено(ВидВыдачиДенежныхСредств) Тогда
				ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ;
			КонецЕсли;
			
			НомерЧекаККМ = 0;
			
		Иначе
			
			УстановитьКурсДокумента();
			ЕстьРасчетыСКонтрагентами = УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
			ЕстьРасчетыПоКредитам     = УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
			
		КонецЕсли;
		
        УстановитьКурсДокумента();
		
	Иначе
		
		УстановитьКурсДокумента();
		ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
		ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);
	
	КонецЕсли;
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
 	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
	// Установить видимость реквизитов и заголовков колонок.
	Список = (РасшифровкаПлатежа.Количество() > 1);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	УстановитьВидимость();
	УстановитьВидимостьСубконто();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ВалютаВзаиморасчетовПоДоговору = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	ЭлементыФормы.ИнфНадписьКурса.Заголовок = РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетовПоДоговору, 
																					СтрокаПлатеж.КурсВзаиморасчетов,
																					СтрокаПлатеж.КратностьВзаиморасчетов,
																					мВалютаРегламентированногоУчета,
																					Истина);
	
	Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			ВалютаВзаиморасчетов = ВалютаВзаиморасчетовПоДоговору;
		Иначе
			ВалютаВзаиморасчетов = ВалютаВзаиморасчетовРаботника;
		КонецЕсли;
		
		ТекстКурсаЗаявки= РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаВзаиморасчетов, 
																СтрокаПлатеж.КурсВзаиморасчетовПлан,
																СтрокаПлатеж.КратностьВзаиморасчетов,
																мВалютаРегламентированногоУчета,
																Истина);
		
		ЭлементыФормы.ИнфНадписьКурсаЗаявки.Заголовок=ТекстКурсаЗаявки;
		ЭлементыФормы.ИнфНадписьКурсаЗаявкиПодотчет.Заголовок=ТекстКурсаЗаявки;
		
	КонецЕсли;
	
	НадписьВалютаДокумент=СокрЛП(ВалютаДокумента);

	// Установим заголовки по значению поля "Контрагент" 
	// (это или контрагент или подотчетник или КассаККМ).
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда

		// Надпись НадписьСуммаВзаиморасчетов
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовПоДоговору) Тогда
			НадписьСуммаВзаиморасчетов = "Сумма <нет валюты>:";
		Иначе
			НадписьСуммаВзаиморасчетов = "Сумма " + СокрЛП(ВалютаВзаиморасчетовПоДоговору) + ":";
		КонецЕсли;

	ИначеЕсли ТипЗнч(Контрагент) = Тип("СправочникСсылка.ФизическиеЛица") Тогда

		// Надпись НадписьСуммаВзаиморасчетов
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
			НадписьСуммаВзаиморасчетов = "Сумма <нет валюты>:";
		Иначе
			НадписьСуммаВзаиморасчетов = "Сумма " + СокрЛП(ВалютаВзаиморасчетовРаботника) + ":";
		КонецЕсли;

	КонецЕсли;
	
	ЭлементыФормы.НадписьИтогоСписок.Заголовок="Итого платежей по списку: "+
									Формат(РасшифровкаПлатежа.Итог("СуммаПлатежа"),"ЧЦ=15; ЧДЦ=2; ЧН=Ноль")+
									" "+СокрЛП(ВалютаДокумента);

								
	Если ЭлементыФормы.НадписьСделка.Заголовок="Сделка:" Тогда
		
		ЭлементыФормы.НадписьСделка.Высота=19;
		ЭлементыФормы.НадписьСделка.ВертикальноеПоложение=ВертикальноеПоложение.Центр;
		
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Высота=19;
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Верх=26;
		
	Иначе
		
		ЭлементыФормы.НадписьСделка.Высота=27;
		ЭлементыФормы.НадписьСделка.ВертикальноеПоложение=ВертикальноеПоложение.Верх;
		
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Высота=15;
		ЭлементыФормы.НадписьДокументРасчетовСКонтрагентом.Верх=30;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Оповестим оплачиваемые документы выплаты зарплаты
	Если Проведен Тогда
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
			Для каждого СтрокаТЧ Из ВыплатаЗаработнойПлаты Цикл
				мОповещаемыеВедомости.Вставить(СтрокаТЧ.Ведомость, СтрокаТЧ.Ведомость)
			КонецЦикла;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
			мОповещаемыеВедомости.Вставить(РасчетныйДокумент, РасчетныйДокумент)
		КонецЕсли;
	КонецЕсли;
	Если мОповещаемыеВедомости.Количество() > 0 Тогда
		Если ОтражатьВБухгалтерскомУчете Тогда
			Оповестить("ИзменениеВыплатыПоВедомостиРегл", мОповещаемыеВедомости);
		КонецЕсли;
		Если ОтражатьВУправленческомУчете Тогда
			Оповестить("ИзменениеВыплатыПоВедомостиУпр", мОповещаемыеВедомости);
		КонецЕсли;
	КонецЕсли;	
	
	// оповестим журналы о записи нового управленческого документа
	Оповестить("ЗаписанНовыйДокументУправленческогоУчета", Ответственный, Ссылка);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Чек" командной панели формы,
// вызывает печать на фискальном регистраторе.
//
Процедура ОсновныеДействияФормыЧек(Кнопка)

	Если НомерЧекаККМ <> 0 Тогда
		Предупреждение("Чек уже пробит на фискальном регистраторе!", 60);
		Возврат;
	КонецЕсли;

	МассивФР      = ПолучитьСерверТО().ПолучитьСписокУстройств(
	                    Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор,
	                    Справочники.КассыККМ.ПустаяСсылка());

	ФР            = Неопределено;
	СписокФР      = Новый СписокЗначений();
	Вид           = Неопределено;
	Представление = Неопределено;

	Для каждого ФР Из МассивФР Цикл
		ПолучитьСерверТО().ПолучитьПредставлениеУстройства(ФР, Вид, Представление);
		СписокФР.Добавить(ФР, Представление);
	КонецЦикла;

	КоличествоФР = СписокФР.Количество();
	Если      КоличествоФР = 0 Тогда
		Предупреждение("Фискальный регистратор не подключен!");
		ФР = Неопределено;
	ИначеЕсли КоличествоФР = 1 Тогда
		ФР = СписокФР[0].Значение;
	Иначе
		ФР = СписокФР.ВыбратьЭлемент("Необходимо выбрать фискальный регистратор");
		Если ФР = Неопределено Тогда
			Предупреждение("Операция отменена пользователем");
		Иначе
			ФР = ФР.Значение;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ФР) Тогда
		Возврат;
	КонецЕсли;

	Если (НЕ Оплачено) ИЛИ (НЕ Проведен) ИЛИ Модифицированность Тогда
		Ответ = Вопрос("Провести документ?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Предупреждение("Операция не выполнена!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
	
		НачатьТранзакцию();
		
		Оплачено = Истина;
		ИспользоватьРежимПроведения = ИспользованиеРежимаПроведения.Авто;
		ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
		
		Позиция         = Неопределено;
		НомерСмены      = Неопределено;
		ТаблицаПлатежей = Новый ТаблицаЗначений();
		ТаблицаПлатежей.Колонки.Добавить("Заголовок");
		ТаблицаПлатежей.Колонки.Добавить("Сумма");
		ТаблицаПлатежей.Колонки.Добавить("НДС");

		Для Каждого Позиция Из РасшифровкаПлатежа Цикл
			СтрокаТаблицы           = ТаблицаПлатежей.Добавить();
			СтрокаТаблицы.Заголовок = "Выдать: " + Выдать
			                          + "
			                            |Основание: " + Основание;
			СтрокаТаблицы.Сумма     = Позиция.СуммаПлатежа;
			СтрокаТаблицы.НДС       = УчетНДС.ПолучитьСтавкуНДС(Позиция.СтавкаНДС);
		КонецЦикла;

		Результат = ПолучитьСерверТО().ПечатьЧекаРКО(ФР,
	                                    "",
	                                    НомерЧекаККМ,
	                                    НомерСмены,
	                                    ТаблицаПлатежей,
	                                    СуммаДокумента,
	                                    0);

		Если ЗначениеЗаполнено(Результат) Тогда
			ОтменитьТранзакцию();
			ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиФРТО(Результат);
			Предупреждение(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		ПриЗаписиПерепроводить = Ложь;
		ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		ПриЗаписиПерепроводить = Истина;
		ЗафиксироватьТранзакцию();

	Исключение
		
		ОтменитьТранзакцию();
		Предупреждение("Операция не выполнена!");
		
	КонецПопытки;
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
// Обработчик уставливается динамически методом "Действие"
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО[Кнопка.Имя] Тогда
		Возврат;
	КонецЕсли; 
	
	РасшифровкаПлатежа.Очистить();

	СтрокаПлатеж              = РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
	
	Список = Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма, , , мОтражатьВРегламентированномУчете, Истина);
	КонецЕсли;

	ВидОперации = Перечисления.ВидыОперацийРКО[Кнопка.Имя];
	
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(СтрокаПлатеж,ВидОперации);

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		ОписаниеТипаПрочихРасходов = Новый ОписаниеТипов("СправочникСсылка.ПрочиеДоходыИРасходы");
		СубконтоДт1 = ОписаниеТипаПрочихРасходов.ПривестиЗначение(СубконтоДт1);
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям 
		И ВыплатаЗаработнойПлаты.Количество() > 0 Тогда

		ТекстВопроса = "Табличная часть ведомостей на выплату заработной платы
		|будет очищена. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		ВыплатаЗаработнойПлаты.Очистить();
		Приложение = "";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов И ВыплатаДепонентов.Количество() > 0 Тогда
		
		ТекстВопроса = "Табличная часть депонентов будет очищена. Продолжить?";

		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

		ВыплатаДепонентов.Очистить();
		Приложение = "";
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику И ЗначениеЗаполнено(Приложение) Тогда
		
		Приложение = "";
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		Если ОтражатьВБухгалтерскомУчете Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = глЗначениеПеременной("ВалютаУправленческогоУчета");
		КонецЕсли;

		СтавкаНДС = "";

		Если (ЗначениеЗаполнено(Касса)) И ВалютаДокумента <> Касса.ВалютаДенежныхСредств Тогда
			Сообщить("Валюта хранения денежных средств выбранной кассы 
			         |не совпадает с валютой выплаты заработной платы");
			Касса = "";
		КонецЕсли;

	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		ВалютаДокумента = мВалютаРегламентированногоУчета;
		ВалютаВзаиморасчетовРаботника   = ВалютаДокумента;
		СтрокаПлатеж.КурсВзаиморасчетов = 1;
		
		СтавкаНДС = "";

		Если (ЗначениеЗаполнено(Касса)) И ВалютаДокумента <> Касса.ВалютаДенежныхСредств Тогда
			Сообщить("Валюта хранения денежных средств выбранной кассы 
			         |не совпадает с валютой выплаты заработной платы");
			Касса = "";
		КонецЕсли;

		//ОтражатьВНалоговомУчете = Ложь;
        
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		ОтражатьВНалоговомУчете = ложь;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда

		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
			ВалютаВзаиморасчетовРаботника = ВалютаДокумента;
			ПриИзмененииВалютыПодотчетника();
		ИначеЕсли ВалютаДокумента <> ВалютаВзаиморасчетовРаботника Тогда
			ОтражатьВБухгалтерскомУчете = Ложь;
			ОтражатьВналоговомУчете     = Ложь;
		КонецЕсли;

		СтавкаНДС = "";
		СуммаНДС  = 0;
		ЭлементыФормы.СтавкаНДС.Доступность = Ложь;

	Иначе
		ЭлементыФормы.СтавкаНДС.Доступность = Истина;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		ОтражатьВБухгалтерскомУчете = Ложь;
		ОтражатьВНалоговомУчете = Ложь;
		
		Если (НЕ Касса.ВалютаДенежныхСредств=мВалютаРегламентированногоУчета)
			ИЛИ (НЕ ВалютаДокумента=мВалютаРегламентированногоУчета) Тогда
			
			Касса=Справочники.Кассы.ПустаяСсылка();
			СуммаДокумента=0;
			СуммаДокументаПриИзменении();
			
			ВалютаДокумента=мВалютаРегламентированногоУчета;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.РасчетыПоПредоставленнымЗаймам;
	КонецЕсли;
	
	Если ВидОперации <> Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк Тогда
		ОбъявлениеНаВзносНаличными = Неопределено;
		СчетОрганизации            = Неопределено;
	КонецЕсли;

	УстановитьТипКонтрагент(); //Надо определить тип поля "Контрагент"

	УстановитьФокус();
	ЕстьРасчетыСКонтрагентами=УправлениеДенежнымиСредствами.ЕстьРасчетыСКонтрагентами(ВидОперации);
	ЕстьРасчетыПоКредитам=УправлениеДенежнымиСредствами.ЕстьРасчетыПоКредитам(ВидОперации);

	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		Если ОтражатьВБухгалтерскомУчете Тогда
			Если НЕ (ВидОперации = Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСКонтрагентами) Тогда
				УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Истина);
			КонецЕсли;
		Иначе
			Платеж.СчетУчетаРасчетовСКонтрагентом = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			Платеж.СчетУчетаРасчетовПоАвансам     = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		КонецЕсли;
		
	КонецЦикла;
	
	Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
		УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	КонецЕсли;
	
	Если мПрименениеУСН Тогда
		НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, Истина);
	КонецЕсли;
	
	УстановитьОснование();
	УстановитьВидимость();
	УстановитьВидимостьСубконто();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
	УстановитьКурсДокумента();
	РассчитатьСуммуВзаиморасчетов();
	
КонецПроцедуры // ДатаПриИзменении()

// Рассчитывает новый курс документа при смене даты
//
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

Процедура ПриИзмененииСчетаОрганизации()
	
	Если СчетОрганизации.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Организация.Пустая() Тогда
		Организация=СчетОрганизации.Владелец;
	КонецЕсли;
	
	РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата, СуммаДокумента, СчетОрганизации.ВалютаДенежныхСредств);
	СуммаДокументаПриИзменении();
		
	Если НЕ Касса.Пустая() И НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств Тогда
		Сообщить("Валюта кассы не соответствует валюте счета организации.");
		Касса = Справочники.Кассы.ПустаяСсылка();
	КонецЕсли;	
			
КонецПроцедуры // ПриИзмененииСчетаОрганизации()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	УправлениеДенежнымиСредствами.ЗаполнитьСчетаУчетаПлатежейБУ(ЭтотОбъект,глЗначениеПеременной("глТекущийПользователь"),Истина);
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда

		Если ОтражатьВБухгалтерскомУчете Тогда
			ВалютаДокумента = мВалютаРегламентированногоУчета;
		Иначе
			ВалютаДокумента = глЗначениеПеременной("ВалютаУправленческогоУчета");
		КонецЕсли;

		ВыплатаЗаработнойПлаты.Очистить();
		СуммаДокумента=0;
		
		Если Не Касса.Пустая() И ВалютаДокумента <> Касса.ВалютаДенежныхСредств Тогда
			Сообщить("Валюта хранения денежных средств выбранной кассы 
			|не совпадает с валютой выплаты заработной платы");
			Касса = "";
		КонецЕсли;

	КонецЕсли;

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизации();
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		мОтражатьВРегламентированномУчете = Ложь;
		ОтражатьВБухгалтерскомУчете       = Ложь;
		ОтражатьВНалоговомУчете           = Ложь;
	Иначе
		РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма, , , мОтражатьВРегламентированномУчете, Истина);
	КонецЕсли;
	
    УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();	
	ПриИзмененииДоговора();
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

	УстановитьФокус();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();

	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Обработчик события "НачалоВыбора" реквизита "ДоговорКонтрагента"
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, Элемент.Значение,
				УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаДокумента".
//
Процедура СуммаДокументаПриИзменении()

	Если ИнвертироватьСуммы Тогда
		
		РассчитатьСуммуПлатежа();
		
		Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
			РассчитатьСуммуПлатежаПлан();
		КонецЕсли;
		
	Иначе
		
		Если РасшифровкаПлатежа.Количество()=1 Тогда
			
			СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
			
			Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
				
				УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
				
				Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
					РассчитатьСуммуВзаиморасчетов();
				Иначе			
					РассчитатьКурсВзаиморасчетов();
				КонецЕсли;
				
			ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
				
				Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
					РассчитатьСуммуВзаиморасчетов();
				Иначе			
					РассчитатьКурсВзаиморасчетов();
				КонецЕсли;
				
			Иначе
				
				Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
					
					СтрокаПлатеж.СуммаПлатежаПлан=СуммаДокумента;
							
				КонецЕсли;
				
				СтрокаПлатеж.СуммаВзаиморасчетов=СуммаДокумента;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;

	Если мПрименениеУСН Тогда
		НалоговыйУчетУСН.ЗаполнитьНастройкуКУДиР(ЭтотОбъект, Истина);
	КонецЕсли;

КонецПроцедуры // СуммаДокументаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетов".
//
Процедура КурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "КурсВзаиморасчетовПодотчетник".
//
Процедура КурсВзаиморасчетовПодотчетникНачалоВыбора(Элемент, СтандартнаяОбработка)

	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
		Предупреждение("Не выбрана валюта взаиморасчетов подотчетника."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаВзаиморасчетовРаботника;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовПодотчетникНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "КурсВзаиморасчетов".
// Процедура выполняет пересчет реквизитов при изменении курса взаиморасчетов
// с подотчетником
//
Процедура КурсВзаиморасчетовПриИзменении(Элемент)

	РассчитатьСуммуПлатежа();

КонецПроцедуры // КурсВзаиморасчетовПодотчетникПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ВалютаВзаиморасчетовПодотчетника".
//
Процедура ВалютаВзаиморасчетовПодотчетникаПриИзменении(Элемент)

	ПриИзмененииВалютыПодотчетника();
	
КонецПроцедуры // ВалютаВзаиморасчетовПодотчетникаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода"Касса". 
// Процедура устанавливает валюту документа, и предлагает пересчитать сумму документа.
//
Процедура КассаПриИзменении(Элемент)
	
	Если Организация.Пустая() Тогда
		
		Организация = Касса.Владелец;
		ПриИзмененииОрганизации();
	
		Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
			мОтражатьВРегламентированномУчете = Ложь;
			ОтражатьВБухгалтерскомУчете       = Ложь;
			ОтражатьВНалоговомУчете           = Ложь;
		Иначе
			РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма, , , мОтражатьВРегламентированномУчете, Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ПересчитыватьСумму=Истина;
	РаботаСДиалогами.ПриИзмененииЗначенияКассыБанковскогоСчета(ВалютаДокумента, КурсДокумента, КратностьДокумента, Дата, СуммаДокумента, Касса.ВалютаДенежныхСредств, ПересчитыватьСумму);
	
	// Пересчитаем суммы платежей при изменении валюты
	
	Если ПересчитыватьСумму Тогда
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
			
			Для Каждого Строка Из РасшифровкаПлатежа Цикл
				
				ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				
				Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
					Строка.СуммаПлатежа=Строка.СуммаВзаиморасчетов;
					
				ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
					Строка.СуммаПлатежа=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
					ВалютаДокумента,
					Строка.КурсВзаиморасчетов,КурсДокумента,
					Строка.КратностьВзаиморасчетов,КратностьДокумента);	
				Иначе
					Строка.СуммаПлатежа = 0;
				КонецЕсли;
				
				УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(Строка);
				
				Если ЗначениеЗаполнено(Строка.ДокументПланированияПлатежа) Тогда
					
					ВалютаПлатежаПлан=Строка.ДокументПланированияПлатежа.ВалютаДокумента;
					Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
						Строка.ДокументПланированияПлатежа="";
						Строка.КурсВзаиморасчетовПлан=0;
						Строка.СуммаПлатежаПлан=0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;	
			
			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			ВалютаВзаиморасчетов= ВалютаВзаиморасчетовРаботника;
			
			Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
				СтрокаПлатеж.СуммаПлатежа=СтрокаПлатеж.СуммаВзаиморасчетов;
				
			ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
				СтрокаПлатеж.СуммаПлатежа=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов, ВалютаВзаиморасчетов,
				ВалютаДокумента,
				СтрокаПлатеж.КурсВзаиморасчетов,КурсДокумента,
				СтрокаПлатеж.КратностьВзаиморасчетов,КратностьДокумента);	
			Иначе
				СтрокаПлатеж.СуммаПлатежа = 0;
			КонецЕсли;
			
			СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
			
			Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
				
				ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;	
				Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
					СтрокаПлатеж.ДокументПланированияПлатежа="";
					СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
					СтрокаПлатеж.СуммаПлатежаПлан=0;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
				
				ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;	
				Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
					СтрокаПлатеж.ДокументПланированияПлатежа="";
					СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
					СтрокаПлатеж.СуммаПлатежаПлан=0;
				КонецЕсли;
				
			КонецЕсли;
			
			СуммаДокументаПриИзменении();
			
		КонецЕсли;
		
	Иначе
		
		Если (ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам) Тогда
			
			Для Каждого Строка Из РасшифровкаПлатежа Цикл
				
				ВалютаВзаиморасчетов= СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
				
				Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
					Строка.СуммаВзаиморасчетов=Строка.СуммаПлатежа;
					
				ИначеЕсли (КурсДокумента <> 0) И (Строка.КратностьВзаиморасчетов <> 0) И (Строка.КурсВзаиморасчетов <> 0) Тогда
					Строка.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа, ВалютаДокумента,
					ВалютаВзаиморасчетов,
					КурсДокумента,Строка.КурсВзаиморасчетов,
					КратностьДокумента,Строка.КратностьВзаиморасчетов);	
				Иначе
					Строка.СуммаВзаиморасчетов = 0;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Строка.ДокументПланированияПлатежа) Тогда
					
					ВалютаПлатежаПлан=Строка.ДокументПланированияПлатежа.ВалютаДокумента;
					Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
						Строка.ДокументПланированияПлатежа="";
						Строка.КурсВзаиморасчетовПлан=0;
						Строка.СуммаПлатежаПлан=0;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;			
			
		ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			ВалютаВзаиморасчетов= ВалютаВзаиморасчетовРаботника;
			
			Если ВалютаВзаиморасчетов=ВалютаДокумента Тогда
				СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
				
			ИначеЕсли (КурсДокумента <> 0) И (СтрокаПлатеж.КратностьВзаиморасчетов <> 0) И (СтрокаПлатеж.КурсВзаиморасчетов <> 0) Тогда
				СтрокаПлатеж.СуммаВзаиморасчетов=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаПлатежа, ВалютаДокумента,
				ВалютаВзаиморасчетов,
				КурсДокумента,СтрокаПлатеж.КурсВзаиморасчетов,
				КратностьДокумента,СтрокаПлатеж.КратностьВзаиморасчетов);	
			Иначе
				СтрокаПлатеж.СуммаВзаиморасчетов = 0;
			КонецЕсли;

			Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
				
				ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;	
				Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
					СтрокаПлатеж.ДокументПланированияПлатежа="";
					СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
					СтрокаПлатеж.СуммаПлатежаПлан=0;
				КонецЕсли;
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
				
				ВалютаПлатежаПлан=СтрокаПлатеж.ДокументПланированияПлатежа.ВалютаДокумента;	
				Если НЕ (ВалютаПлатежаПлан=Справочники.Валюты.ПустаяСсылка() ИЛИ ВалютаПлатежаПлан=ВалютаДокумента) Тогда
					СтрокаПлатеж.ДокументПланированияПлатежа="";
					СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
					СтрокаПлатеж.СуммаПлатежаПлан=0;
				КонецЕсли;
				
			КонецЕсли;
						
		КонецЕсли;
		
	КонецЕсли;

	УстановитьФокус();
	УстановитьВидимость();
		
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику 
		И ВалютаДокумента <> ВалютаВзаиморасчетовРаботника Тогда
		ОтражатьВБухгалтерскомУчете = Ложь;
		ОтражатьВНалоговомУчете     = Ложь;
	КонецЕсли;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВзносНаличнымиВБанк И (Не СчетОрганизации.Пустая()) И (НЕ СчетОрганизации.ВалютаДенежныхСредств=Касса.ВалютаДенежныхСредств) Тогда
		
		Сообщить("Валюта счета организации не соответствует валюте кассы.");
		СчетОрганизации=Справочники.БанковскиеСчета.ПустаяСсылка();
		
	КонецЕсли;
	

КонецПроцедуры // КассаПриИзменении()

Процедура ВыборВедомостиПоЗарплате()

	ФормаПодбора = ПолучитьФорму("ФормаВыбораВедомостиПоЗарплате", ЭтаФорма);
	ФормаПодбора.Организация = Организация;
	ФормаПодбора.Контрагент = Контрагент;
	ФормаПодбора.РКО = Ссылка;
	
	РезультатПодбора = ФормаПодбора.ОткрытьМодально();
	
	Если ТипЗнч(РезультатПодбора) = Тип("Структура") Тогда
		
		РасчетныйДокумент = РезультатПодбора.Ссылка;
		СуммаДокумента    = РезультатПодбора.Сумма;
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = РезультатПодбора.Физлицо;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Организация = РезультатПодбора.Организация;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ВыборВедомостиПоЗарплате()

// Процедура - обработчик события "НачалоВыбора" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		
		ФормаВыбора = Документы.АвансовыйОтчет.ПолучитьФормуВыбора(,Элемент,);
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		
		ФормаВыбора = Документы.ДоговорЗаймаСРаботником.ПолучитьФормуВыбора(,Элемент,);
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику Тогда
		
		//ФормаВыбора = Документы.ЗарплатаКВыплатеОрганизаций.ПолучитьФормуВыбора(,Элемент,);
		ВыборВедомостиПоЗарплате();
		Возврат;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбора.ДокументСписок.Отбор.Организация.Значение = Организация;
		ФормаВыбора.ДокументСписок.Отбор.Организация.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность=Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Значение = ВалютаВзаиморасчетовРаботника;
		ФормаВыбора.ДокументСписок.Отбор.ВалютаДокумента.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВалютаДокумента.Доступность=Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		
		ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Значение = Контрагент;
		ФормаВыбора.ДокументСписок.Отбор.ФизЛицо.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ФизЛицо.Доступность=Ложь;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		
		ФормаВыбора.ПараметрТекущаяСтрока=Элемент.Значение;
		
	КонецЕсли;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "АвансовыйОтчет".
//
Процедура РасчетныйДокументПриИзменении(Элемент)

	Если ЗначениеЗаполнено(РасчетныйДокумент) Тогда
		
		Контрагент                       = РасчетныйДокумент.ФизЛицо;
		ВалютаВзаиморасчетовРаботника    = РасчетныйДокумент.ВалютаДокумента;
		Организация = РасчетныйДокумент.Организация;
		СтруктураКурсаВзаиморасчетов     = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаВзаиморасчетовРаботника, Дата);
		СтрокаПлатеж.КурсВзаиморасчетов               = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов          = СтруктураКурсаВзаиморасчетов.Кратность; 
		
		Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
			
			ЗаполнитьПоВзаиморасчетамСПодотчетнымЛицомУпр(СтрокаПлатеж);
			
		Иначе
			
			СтрокаПлатеж.СуммаВзаиморасчетов = РасчетныйДокумент.СуммаЗайма;
			СуммаДокумента = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
				СтрокаПлатеж.СуммаВзаиморасчетов, 
				ВалютаВзаиморасчетовРаботника, ВалютаДокумента,
				СтрокаПлатеж.КурсВзаиморасчетов, КурсДокумента,
				СтрокаПлатеж.КратностьВзаиморасчетов, КратностьДокумента);
			СтрокаПлатеж.СуммаПлатежа = СуммаДокумента;
			
		КонецЕсли;
		
		Если ВалютаДокумента <> ВалютаВзаиморасчетовРаботника Тогда
			ОтражатьВБухгалтерскомУчете = Ложь;
			ОтражатьВНалоговомУчете     = Ложь;
		КонецЕсли;	
		
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

Процедура СчетУчетаПриИзменении(Элемент)

	Если Элемент.Значение = мСчетБУ тогда
		Возврат;
	КонецЕсли;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
		СубконтоДт1, ЭлементыФормы.СубконтоДт1,
		СубконтоДт2, ЭлементыФормы.СубконтоДт2,
		СубконтоДт3, ЭлементыФормы.СубконтоДт3);

	мСчетБУ = Элемент.Значение;
	
	Если ОтражатьВНалоговомУчете И НЕ мПрименениеУСН Тогда
		Если ВидОперации = Перечисления.ВидыОперацийРКО.РасходДенежныхСредствПрочее тогда
			Если СпецифическиеСоответствияСчетовБУиНУдляДокумента.Получить(Элемент.Значение)= Неопределено тогда
				СчетУчетаРасчетовСКонтрагентомНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ",  Элемент.Значение), , Дата);
			Иначе
				СчетУчетаРасчетовСКонтрагентомНУ = СпецифическиеСоответствияСчетовБУиНУдляДокумента.Получить(Элемент.Значение);
			КонецЕсли;
			СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);
		КонецЕсли;
	Иначе
		СчетУчетаРасчетовСКонтрагентомНУ = Неопределено;
		СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);
	КонецЕсли;

	УстановитьВидимостьСубконто();
	
	СтруктураЗатрат = Новый Структура("Счет,Субконто1,Субконто2,Субконто3,СчетНУ","СчетУчетаРасчетовСКонтрагентом","СубконтоДт1","СубконтоДт2","СубконтоДт3","СчетУчетаРасчетовСКонтрагентомНУ");
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВДокументе(ЭтаФорма, Истина, СтруктураЗатрат, Дата)	

КонецПроцедуры // СчетУчетаПриИзменении()

Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры // СчетУчетаРасчетовСКонтрагентомОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "СубконтоДт1".
//
Процедура СубконтоДт1ПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ мПрименениеУСН Тогда
		БухгалтерскийУчет.ЗаменитьСубконтоНУ(ЭлементыФормы.СчетУчета.Значение, СчетУчетаРасчетовСКонтрагентомНУ, 1, СубконтоДт1, СубконтоНУДт1);
		СчетУчетаРасчетовСКонтрагентомНУ = НалоговыйУчет.ОпределитьСчетНУВШапке(Организация, Дата, СчетУчетаРасчетовСКонтрагентом, СубконтоДт1,СубконтоДт2,СубконтоДт3);
	Иначе
		СчетУчетаРасчетовСКонтрагентомНУ = Неопределено;
	КонецЕсли;
	СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);

	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДт2");
	СписокСубконто.Добавить("СубконтоДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
	УстановитьВидимостьСубконтоНУ();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ФизЛицо".
//
Процедура ФизЛицоПриИзменении(Элемент)

	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		РасчетныйДокумент=Документы.АвансовыйОтчет.ПустаяСсылка();
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		РасчетныйДокумент=Документы.ДоговорЗаймаСРаботником.ПустаяСсылка();
	КонецЕсли;

	Если ЗначениеЗаполнено(Контрагент) Тогда
		ЗаполнитьПоляВыдатьПоДокументу(Контрагент)
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ "ВыплатаЗаработнойПлаты" и ее РЕКВИЗИТОВ 

Процедура ВыплатаЗаработнойПлатыПриАктивизацииСтроки(Элемент)
	
	СтрокаВыплата = ЭлементыФормы.ВыплатаЗаработнойПлаты.ТекущиеДанные;
	
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПриНачалеРедактирования(Элемент, НоваяСтрока)
	Если НоваяСтрока Тогда
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ведомость) Тогда
			Элемент.ТекущиеДанные.Ведомость = ОбщегоНазначения.ПустоеЗначениеТипа(?(ОтражатьВБухгалтерскомУчете,"ДокументСсылка.ЗарплатаКВыплатеОрганизаций","ДокументСсылка.ЗарплатаКВыплате"));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если (Элемент.ТекущиеДанные.Ведомость=Неопределено ИЛИ Элемент.ТекущиеДанные.Ведомость.Пустая())
		И НЕ ОтменаРедактирования Тогда
		Сообщить("Не указана платежная ведомость.");
		Отказ=Истина;
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПослеУдаления(Элемент)
	УстановитьПриложение();
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)

	СуммаДокумента = ВыплатаЗаработнойПлаты.Итог("СуммаПлатежа");
	
	Если НЕ ОтменаРедактирования Тогда
	
		Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(Организация) И НЕ Элемент.ТекущиеДанные.Ведомость=Неопределено Тогда
			Организация=Элемент.ТекущиеДанные.Ведомость.Организация;
		КонецЕсли;
		
		УстановитьПриложение();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыВедомостьПриИзменении(Элемент)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("Ведомость",Элемент.Значение);

	Если ОтражатьВБухгалтерскомУчете Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма + ЗарплатаКВыплатеЗарплата.КомпенсацияЗаЗадержкуЗарплаты) КАК Сумма,
		|	ЗарплатаКВыплатеЗарплата.Ссылка
		|ИЗ
		|	Документ.ЗарплатаКВыплатеОрганизаций.Зарплата КАК ЗарплатаКВыплатеЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеЗарплата.Ссылка = РанееВыплаченныеСуммы.Ведомость
		|			И ЗарплатаКВыплатеЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		|ГДЕ
		|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ведомость
		|	И ЗарплатаКВыплатеЗарплата.ВыплаченностьЗарплаты = ЗНАЧЕНИЕ(Перечисление.ВыплаченностьЗарплаты.Выплачено)
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеЗарплата.Ссылка";


	ИначеЕсли ОтражатьВУправленческомУчете Тогда

		Запрос.Текст=
		"ВЫБРАТЬ
		|	СУММА(ЗарплатаКВыплатеЗарплата.Сумма) КАК Сумма,
		|	ЗарплатаКВыплатеЗарплата.Ссылка
		|ИЗ
		|	Документ.ЗарплатаКВыплате.Зарплата КАК ЗарплатаКВыплатеЗарплата
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СведенияОВыплатахРаботникамПоПлатежнымВедомостям КАК РанееВыплаченныеСуммы
		|		ПО ЗарплатаКВыплатеЗарплата.Ссылка = РанееВыплаченныеСуммы.Регистратор
		|			И ЗарплатаКВыплатеЗарплата.Физлицо = РанееВыплаченныеСуммы.Физлицо
		|			И (РанееВыплаченныеСуммы.Регистратор <> &Ссылка)
		|ГДЕ
		|	ЗарплатаКВыплатеЗарплата.Ссылка = &Ведомость
		|	И РанееВыплаченныеСуммы.Физлицо ЕСТЬ NULL 
		|
		|СГРУППИРОВАТЬ ПО
		|	ЗарплатаКВыплатеЗарплата.Ссылка";

	КонецЕсли;

	РезультатЗапроса = Запрос.Выполнить();

	Если РезультатЗапроса.Пустой() Тогда
		ОбщегоНазначения.СообщитьОбОшибке("По текущей ведомости нет сумм к выплате!");
		ЭлементыФормы.ВыплатаЗаработнойПлаты.ТекущиеДанные.СуммаПлатежа = 0;
	Иначе	
		Выборка = РезультатЗапроса.Выбрать(); 
		Выборка.Следующий();
		
		ЭлементыФормы.ВыплатаЗаработнойПлаты.ТекущиеДанные.СуммаПлатежа = Выборка.Сумма;
	КонецЕсли;

КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыВедомостьНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ОтражатьВБухгалтерскомУчете Тогда
		ПроцедурыУправленияПерсоналомДополнительный.ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, Организация, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу) 
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаВыплата);

КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ВыплатаДепонентов и ее РЕКВИЗИТОВ 

Процедура ВыплатаДепонентовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Команда = "";
		Если ВыбранноеЗначение.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			АвтозаполнениеДепонентов(ВыбранноеЗначение.Данные.Выгрузить().ВыгрузитьКолонку("ФизЛицо"));
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		ВыплатаДепонентов.Добавить().Физлицо = ВыбранноеЗначение.Физлицо;
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ВыплатаДепонентовФизЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, мГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВыплатаДепонентовФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ОтражатьВУправленческомУчете Тогда
		ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	Иначе
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаДепонентовФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;				
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплатаДепонентовФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, ?(ОтражатьВУправленческомУчете,"Работники","РаботникиИДоговорники"), Текст, Организация, Истина);
	
КонецПроцедуры

Процедура ВыплатаДепонентовФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Элемент.Значение, Организация, Истина);
КонецПроцедуры

Процедура ВыплатаДепонентовВедомостьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомДополнительный.ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, Организация, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу) 
	
КонецПроцедуры

Процедура ВыплатаДепонентовСуммаКВыплатеПриИзменении(Элемент)
	СуммаДокумента = ВыплатаДепонентов.Итог("СуммаКВыплате");
КонецПроцедуры

Процедура ВыплатаДепонентовСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	ПриИзмененииСтатьиДДС(ЭлементыФормы.ВыплатаДепонентов.ТекущиеДанные);
КонецПроцедуры


Процедура СуммаДокументаПодотчетникПриИзменении(Элемент)

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
		РассчитатьСуммуВзаиморасчетов();
	Иначе			
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;

КонецПроцедуры

Процедура СуммаДокументаРасчетыПриИзменении(Элемент)

	СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	Если СтрокаПлатеж.СуммаВзаиморасчетов=0 Тогда
		РассчитатьСуммуВзаиморасчетов();
	Иначе			
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;

КонецПроцедуры

Процедура КоманднаяПанельВыплатаЗаработнойПлатыЗаполнить(Кнопка)
	АвтозаполнениеПлатежныхВедомостей();
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	УправлениеДенежнымиСредствами.ПроверкаРасшифровкиПлатежногоДокументаПередЗаписью(ДокументОбъект, Отказ, РежимЗаписи, РежимПроведения);
	
	//для вида операции ВыплатаДепонентам - проверка соответствия общих сумм в ТЧ Депоненты и в ТЧ РасшифровкаПлатежа
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		Если (РежимЗаписи = РежимЗаписиДокумента.Запись ИЛИ РежимЗаписи = РежимЗаписиДокумента.Проведение)
			И НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = ВыплатаДепонентов.Итог("СуммаКВыплате") Тогда
			
			Предупреждение("Не совпадают сумма по депонентам ("+ВыплатаДепонентов.Итог("СуммаКВыплате")+") и ее расшифровка по статьям ("+РасшифровкаПлатежа.Итог("СуммаПлатежа")+"). Запись документа невозможна.");	
			
			Отказ = Истина;
		КонецЕсли;

	КонецЕсли;
	
	Если НЕ Отказ Тогда
		// ОценкаПроизводительности
		ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ПредопределенноеЗначение("Перечисление.КлючевыеОперации.ПроведениеДокументаРасходныйКассовыйОрдер"));
		// Конец ОценкаПроизводительности
	КонецЕсли;
	
	Если Ответственный.Пустая() Тогда
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		ДоговорКонтрагента=СтрокаПлатеж.ДоговорКонтрагента;
		Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом) Тогда
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом=СчетУчетаРасчетовСКонтрагентом;
		КонецЕсли;
		
		Если СтрокаПлатеж.СтатьяДвиженияДенежныхСредств.Пустая() Тогда
			СтрокаПлатеж.СтатьяДвиженияДенежныхСредств=СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
	Иначе
		ДоговорКонтрагента=Новый(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	КонецЕсли;

	мОповещаемыеВедомости = Новый Соответствие;
	Если Проведен Тогда
		Если ОтражатьВБухгалтерскомУчете Тогда
			ТаблицаДвижений = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Выгрузить();
			ТаблицаДвижений.Свернуть("Ведомость");
			Для каждого СтрокаТЧ Из ТаблицаДвижений Цикл
				мОповещаемыеВедомости.Вставить(СтрокаТЧ.Ведомость, СтрокаТЧ.Ведомость)
			КонецЦикла; 
		КонецЕсли;
		Если ОтражатьВУправленческомУчете Тогда
			Для каждого СтрокаТЧ Из ВыплатаЗаработнойПлаты Цикл
				мОповещаемыеВедомости.Вставить(СтрокаТЧ.Ведомость, СтрокаТЧ.Ведомость)
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	Если Не Элемент.Значение Тогда
		ОтраженоВОперУчете = Ложь;
		Оплачено        = Ложь;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

Процедура СчетОрганизацииПриИзменении(Элемент)

	ПриИзмененииСчетаОрганизации();

КонецПроцедуры

Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура СписокПриИзменении(Элемент)
	
	Если Не Список И РасшифровкаПлатежа.Количество()>1 Тогда
		
		ТекстВопроса = "Все строки расшифровки платежа, кроме первой, будут удалены.
		|Продолжить?";
		
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Список=Истина;
			Возврат;
		КонецЕсли;
		
		Пока РасшифровкаПлатежа.Количество()>1 Цикл
			СтрокаУдаления=РасшифровкаПлатежа[1];
			РасшифровкаПлатежа.Удалить(СтрокаУдаления);
		КонецЦикла;
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
		СтрокаПлатеж.СуммаПлатежа=СуммаДокумента;
		
		РассчитатьСуммуВзаиморасчетов();
		
	Иначе
		
		ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
		СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
		
	КонецЕсли;		
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
	УстановитьВидимость();
	УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);

КонецПроцедуры

Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента,
				УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ВидОперации), СтандартнаяОбработка);

КонецПроцедуры

Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента, СтрокаПлатеж.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);
					
КонецПроцедуры

Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
	ДоговорСтрокаПлатеж = СтрокаПлатеж.ДоговорКонтрагента;
	Если НЕ ДоговорСтрокаПлатеж.РасчетыВУсловныхЕдиницах
		И ДоговорСтрокаПлатеж.ВалютаВзаиморасчетов = ВалютаДокумента Тогда
		
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаПлатеж.СуммаПлатежа;
	Иначе
		РассчитатьКурсВзаиморасчетов();
	КонецЕсли;
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетов;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетов = СтруктураКурсаИКратности.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаИКратности.КратностьВалюты;

	КонецЕсли;

	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	УправлениеДенежнымиСредствами.ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
	Если СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
		РассчитатьСуммуПлатежаПлан();
	КонецЕсли;
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПодотчетникПриИзменении(Элемент)
	
	 РассчитатьСуммуПлатежа();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеПриВыборе(ИсходноеЗначение,ЗначениеВыбора)
	
	Если НЕ ЗначениеЗаполнено(ИсходноеЗначение) Тогда
		ИсходноеЗначение=ЗначениеВыбора;
	КонецЕсли;
		
КонецПроцедуры // УстановитьЗначениеПриВыборе() 

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если НЕ ТипЗнч(ЗначениеВыбора)=Тип("Структура") Тогда
		
		Если ЗначениеВыбора="АвтоПодбор" Тогда
			
			Если РасшифровкаПлатежа.Количество()>1 Тогда
				Список=истина;
			ИначеЕсли РасшифровкаПлатежа.Количество()=0 Тогда
				Список=Ложь;
				НоваяСтрока=РасшифровкаПлатежа.Добавить();			
			КонецЕсли;
			
			СтрокаПлатеж=РасшифровкаПлатежа[0];
						
			УстановитьФокус();
			
			УстановитьВидимость();

			СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
			
			Возврат;
			
		Иначе
			
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
		
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		Если НЕ ЗначениеЗаполнено(СтрокаВыплата.Проект) Тогда
			СтрокаВыплата.Проект=ЗначениеВыбора.Проект;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СтрокаВыплата.СтатьяДвиженияДенежныхСредств) Тогда
			СтрокаВыплата.СтатьяДвиженияДенежныхСредств=ЗначениеВыбора.СтатьяДвиженияДенежныхСредств;
		КонецЕсли;
		
		СтрокаВыплата.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;	
		
	ИначеЕсли Источник.КлючУникальности="ФормаПодбораПланируемыхПлатежей" Тогда
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			
			Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда	
				
				НДСПоУмолчанию=УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС");
				
				СтрокаПлатеж.ДоговорКонтрагента=ЗначениеВыбора.ДоговорКонтрагента;
				ПриИзмененииДоговора();
				
			КонецЕсли;
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан=ЗначениеВыбора.КурсВзаиморасчетов;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Сделка,ЗначениеВыбора.Сделка);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КурсВзаиморасчетов,ЗначениеВыбора.КурсВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.КратностьВзаиморасчетов,ЗначениеВыбора.КратностьВзаиморасчетов);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаВзаиморасчетов,ЗначениеВыбора.СуммаВзаиморасчетов);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
			Если СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа 
				ИЛИ СтрокаПлатеж.СуммаПлатежа=0 Тогда
				
				СтрокаПлатеж.СуммаПлатежа=ЗначениеВыбора.СуммаПлатежа;
				СтрокаПлатеж.СуммаПлатежаПлан=ЗначениеВыбора.СуммаПлатежаПлан;
				
			ИначеЕсли СтрокаПлатеж.КурсВзаиморасчетовПлан>0 Тогда
				
				РассчитатьСуммуПлатежаПлан();
				
			КонецЕсли;
			
			УправлениеДенежнымиСредствами.ЗаполнитьРеквизитыРеглУчета(ЭтотОбъект,СтрокаПлатеж, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
		Иначе
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СуммаПлатежа,ЗначениеВыбора.СуммаПлатежа);
			
			СтрокаПлатеж.КурсВзаиморасчетовПлан = ?(ЗначениеВыбора.СуммаВзаиморасчетов<>0, ЗначениеВыбора.СуммаПлатежа / ЗначениеВыбора.СуммаВзаиморасчетов, 0);
			
			СтрокаПлатеж.ДокументПланированияПлатежа=ЗначениеВыбора.ДокументПланирования;
			
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.СтатьяДвиженияДенежныхСредств,ЗначениеВыбора.СтатьяДвиженияДенежныхСредств);
			УстановитьЗначениеПриВыборе(СтрокаПлатеж.Проект,ЗначениеВыбора.Проект);
			
			СтрокаПлатеж.СуммаПлатежаПлан=СтрокаПлатеж.СуммаПлатежа;
			СтрокаПлатеж.СуммаВзаиморасчетов=СтрокаПлатеж.СуммаПлатежа;
			
		КонецЕсли;
		
	Иначе
		
		НДСПоУмолчанию=?(НЕ ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС),УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"),"ОсновнаяСтавкаНДС"),
						СтрокаПлатеж.СтавкаНДС);
		
		УправлениеДенежнымиСредствами.ОбработкаПодбораЗадолженностей(ЭтотОбъект,СтрокаПлатеж,ЗначениеВыбора,
		Список,ВалютаДокумента,КурсДокумента,КратностьДокумента, НДСПоУмолчанию,ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		СуммаДокумента=СтрокаПлатеж.СуммаПлатежа;
		
		Если ЕстьРасчетыСКонтрагентами ИЛИ ЕстьРасчетыПоКредитам Тогда
			УправлениеДенежнымиСредствами.УстановитьНадписьСделкиПлатеж(СтрокаПлатеж, ЭтаФорма, ВидОперации);
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьФокус();
	
	УстановитьВидимость();
				
КонецПроцедуры

Процедура КнопкаПодборНажатие(Элемент)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,Касса);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиПодбор(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка"					,Ссылка);
	СтруктураПараметров.Вставить("ФормаДокумента"					,ЭтаФорма);
	СтруктураПараметров.Вставить("Организация"						,Организация);
	СтруктураПараметров.Вставить("Контрагент"						,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"					,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"					,СуммаДокумента);
	СтруктураПараметров.Вставить("РасшифровкаПлатежаДок"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("ДатаДок"							,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"					,ВидОперации);
	СтруктураПараметров.Вставить("КурсДокумента"					,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"				,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"					,"<0");
    СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"				,Ложь);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"		,Истина);
	СтруктураПараметров.Вставить("ФормаОплаты"						,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ИмяРегистраПлан"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ВидОперацииПлан"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"				,Касса);
	СтруктураПараметров.Вставить("Проект"							,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств"	,СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"		,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ПодборЗадолженностей(СтруктураПараметров);
	
КонецПроцедуры

Процедура КоманднаяПанельПлатежиЗаполнить(Кнопка)
	
	СтруктураПараметров=Новый Структура;
	
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СуммаДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ВидОперацииДок"				,ВидОперации);
	СтруктураПараметров.Вставить("РасшифровкаПлатежа"			,РасшифровкаПлатежа);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности"				,"<0");
	СтруктураПараметров.Вставить("Интерактивно"					,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СтруктураПараметровАвто"		,Новый Структура);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВидОперацииПлан"				,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("ИмяРегистраПлан"				,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("СсылкаНаДокумент"				,?(Проведен, Ссылка, ЭтотОбъект));
	СтруктураПараметров.Вставить("ОтражатьВБухгалтерскомУчете"	,ОтражатьВБухгалтерскомУчете);
	
	УправлениеДенежнымиСредствами.ЗаполнитьРасшифровкуПлатежей(СтруктураПараметров);
	
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока=РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	СуммаДокумента=РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	ЭлементыФормы.РасшифровкаПлатежа.ТекущаяСтрока=РасшифровкаПлатежа[0];
	СтрокаПлатеж=ЭлементыФормы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

Процедура РасчетныйДокументОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка=Ложь;
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.РасчетыПоКредитамИЗаймамСРаботниками Тогда
		Элемент.Значение=Документы.ДоговорЗаймаСРаботником.ПустаяСсылка();
	Иначе
		Элемент.Значение=Документы.АвансовыйОтчет.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Процедура СчетОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если НЕ Касса.Пустая() Тогда
		
		СтандартнаяОбработка=Ложь;
		ФормаВыбораСчета=Справочники.БанковскиеСчета.ПолучитьФормуВыбора(,Элемент,);
		
		ФормаВыбораСчета.Отбор.ВалютаДенежныхСредств.Значение=Касса.ВалютаДенежныхСредств;
		ФормаВыбораСчета.Отбор.ВалютаДенежныхСредств.Использование=Истина;
		ФормаВыбораСчета.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаДенежныхСредств.Доступность=Ложь;
		
		ФормаВыбораСчета.Отбор.Владелец.Значение=Организация;
		ФормаВыбораСчета.Отбор.Владелец.Использование=Истина;
		ФормаВыбораСчета.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность=Ложь;
		
		ФормаВыбораСчета.РежимВыбора=Истина;
		
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
					
			ФормаВыбораСчета.ПараметрТекущаяСтрока=Элемент.Значение;
				
		КонецЕсли;
		
		ФормаВыбораСчета.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КассаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыПоВедомостям Тогда
		
		СтандартнаяОбработка=Ложь;	
		
		ФормаКассы=Справочники.Кассы.ПолучитьФормуВыбора(,Элемент,);
		ФормаКассы.Отбор.ВалютаДенежныхСредств.Значение=ВалютаДокумента;
		ФормаКассы.Отбор.ВалютаДенежныхСредств.Использование=Истина;
		ФормаКассы.Отбор.Владелец.Установить(Организация, Истина);
		ФормаКассы.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаДенежныхСредств.Доступность=Ложь;
		
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			
			ФормаКассы.ПараметрТекущаяСтрока=Элемент.Значение;
			
		КонецЕсли;
		
		ФормаКассы.РежимВыбора=Истина;
		
		ФормаКассы.Открыть();
		
	ИначеЕсли ВидОперации=Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ
		ИЛИ ВидОперации=Перечисления.ВидыОперацийРКО.ВыплатаЗаработнойПлатыРаботнику
		ИЛИ ВидОперации = Перечисления.ВидыОперацийРКО.ВыплатаДепонентов Тогда
		
		СтандартнаяОбработка=Ложь;
		
		ФормаКассы=Справочники.Кассы.ПолучитьФормуВыбора(,Элемент,);
		ФормаКассы.Отбор.ВалютаДенежныхСредств.Значение=мВалютаРегламентированногоУчета;
		ФормаКассы.Отбор.ВалютаДенежныхСредств.Использование=Истина;
		ФормаКассы.Отбор.Владелец.Установить(Организация, Истина);
		ФормаКассы.ЭлементыФормы.СправочникСписок.НастройкаОтбора.ВалютаДенежныхСредств.Доступность=Ложь;
		
		Если ЗначениеЗаполнено(Элемент.Значение) Тогда
			
			ФормаКассы.ПараметрТекущаяСтрока=Элемент.Значение;
			
		КонецЕсли;
		
		ФормаКассы.РежимВыбора=Истина;
		
		ФормаКассы.Открыть();
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан контрагент.");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,СтрокаПлатеж.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Сделка"						,СтрокаПлатеж.Сделка);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаПрочиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
		
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Сделка"						,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);

									
КонецПроцедуры

Процедура ДокументПланированияПлатежаКассаККМНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Сообщить("Не указан получатель (касса ККМ, НТТ).");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Контрагент);
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Сделка"						,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);

	
КонецПроцедуры

// Процедура обработчик события "НачалоВыбора" поля ввода кассы ККМ
//
Процедура КассаККМНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствКассеККМ Тогда
		Если ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.НТТ Тогда
			РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ВидСравнения.Равно, СтандартнаяОбработка);
		ИначеЕсли ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
			
			СтандартнаяОбработка=Ложь;
			ФормаВыбора=Справочники.КассыККМ.ПолучитьФормуВыбора(,Элемент,);
			
			ФормаВыбора.Отбор.Владелец.ВидСравнения=ВидСравнения.Равно;
			ФормаВыбора.Отбор.Владелец.Значение      = Организация;
			ФормаВыбора.Отбор.Владелец.Использование = Истина;
			ФормаВыбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора.Владелец.Доступность=Ложь;
				
			Если ЗначениеЗаполнено(Контрагент) Тогда
				
				ФормаВыбора.ПараметрТекущаяСтрока=Контрагент;
				
			КонецЕсли;
			
			ФормаВыбора.Открыть();
			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура обработчик события "ПриИзменении" поля ввода вида выдачи денежных средств
//
Процедура ВидВыдачиДенежныхСредствПриИзменении(Элемент)
	
	Если ВидВыдачиДенежныхСредств = Перечисления.ВидВыдачиДенежныхСредств.КассеККМ Тогда
		Если ТипЗнч(Контрагент)<>Тип("СправочникСсылка.КассыККМ") Тогда
			Контрагент = Справочники["КассыККМ"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо кассу ККМ, которой выдаются денежные средства.";
	Иначе
		Если ТипЗнч(Контрагент)<>Тип("СправочникСсылка.Склады") Тогда
			Контрагент = Справочники["Склады"].ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.КассаККМ.Подсказка = "В этом поле необходимо указать НТТ, которой выдаются денежные средства.";
	КонецЕсли;
 
КонецПроцедуры

Процедура СуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура КурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ВидОперации = Перечисления.ВидыОперацийРКО.ВыдачаДенежныхСредствПодотчетнику Тогда
		Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетовРаботника) Тогда
			Предупреждение("Для выбора курса взаиморасчетов нужно выбрать валюту взаиморасчетов."); 
			Возврат;
		КонецЕсли;
		ВалютаВзаиморасчетов = ВалютаВзаиморасчетовРаботника;
	Иначе
		Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
			Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
			Возврат;
		КонецЕсли;
		ВалютаВзаиморасчетов = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаСуммаПлатежаПланПриИзменении(Элемент)
	
	РассчитатьКурсВзаиморасчетовПлан();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаКурсВзаиморасчетовПланНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;

	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		Предупреждение("Для выбора курса взаиморасчетов нужно выбрать договор контрагента."); 
		Возврат;
	КонецЕсли;

	ФормаВводаКурсаИКратности = ПолучитьОбщуюФорму("ФормаВводаКурсаИКратности");
	ФормаВводаКурсаИКратности.Валюта          = СтрокаПлатеж.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ФормаВводаКурсаИКратности.КратностьВалюты = СтрокаПлатеж.КратностьВзаиморасчетов;
	ФормаВводаКурсаИКратности.КурсВалюты      = СтрокаПлатеж.КурсВзаиморасчетовПлан;
	ФормаВводаКурсаИКратности.ДатаУстановкиКурсаИКратности = Дата;

	СтруктураКурсаИКратности = ФормаВводаКурсаИКратности.ОткрытьМодально();

	Если СтруктураКурсаИКратности <> неопределено Тогда

		СтрокаПлатеж.КурсВзаиморасчетовПлан = СтруктураКурсаИКратности.КурсВалюты;

	КонецЕсли;
					   
	РассчитатьСуммуПлатежаПлан();
	
КонецПроцедуры

Процедура ДокументПланированияПлатежаОчистка(Элемент, СтандартнаяОбработка)
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ВыплатаЗаработнойПлатыЗаявкаНаРасходованиеСредствНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
		
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Сообщить("Не указана организация.");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров=Новый Структура;
	СтруктураПараметров.Вставить("ФормаДокумента"				,ЭтаФорма);
	СтруктураПараметров.Вставить("ФормаОплаты"					,Перечисления.ВидыДенежныхСредств.Наличные);
	СтруктураПараметров.Вставить("ВалютаДокумента"				,ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента"				,КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента"			,КратностьДокумента);
	СтруктураПараметров.Вставить("ДатаДок"						,Дата);
	СтруктураПараметров.Вставить("ИмяРегистра"					,"ЗаявкиНаРасходованиеСредств");
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе"			,Истина);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов"	,Истина);
	СтруктураПараметров.Вставить("СуммаДокумента"				,СтрокаПлатеж.СуммаПлатежа);
    СтруктураПараметров.Вставить("ВидОперации"					,УправлениеДенежнымиСредствами.ОпределитьВидОперацииПлан(ВидОперации));
	СтруктураПараметров.Вставить("БанковскийСчетКасса"			,Касса);
	СтруктураПараметров.Вставить("Организация"					,Организация);
	СтруктураПараметров.Вставить("Проект"						,СтрокаПлатеж.Проект);
	СтруктураПараметров.Вставить("СтатьяДвиженияДенежныхСредств",СтрокаПлатеж.СтатьяДвиженияДенежныхСредств);
    СтруктураПараметров.Вставить("Контрагент"					,Справочники.Контрагенты.ПустаяСсылка());
    СтруктураПараметров.Вставить("ДоговорКонтрагента"			,Справочники.ДоговорыКонтрагентов.ПустаяСсылка());
	СтруктураПараметров.Вставить("Сделка"						,Неопределено);
	
	УправлениеДенежнымиСредствами.ПодборДокументовПланирования(СтруктураПараметров);
	
КонецПроцедуры

// Процедура выполняет настройку платежа УСН
//
Процедура ДействияФормыНастройкаУСН(Кнопка)

	ФормаНастройки = ПолучитьОбщуюФорму("ФормаНастройкиПлатежаУСН");

	ФормаНастройки.Графа4       = Графа4_УСН;
	ФормаНастройки.Графа5       = Графа5_УСН;
	ФормаНастройки.Графа6       = Графа6_УСН;
	ФормаНастройки.Графа7       = Графа7_УСН;
	ФормаНастройки.НДС          = НДС_УСН;
	ФормаНастройки.ДоходЕНВД    = ДоходыЕНВД_УСН;
	ФормаНастройки.РасходЕНВД   = РасходыЕНВД_УСН;
	ФормаНастройки.Содержание   = Содержание_УСН;
	ФормаНастройки.ТолькоДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);

	СруктураПараметров = ФормаНастройки.ОткрытьМодально();

	Если СруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Графа4_УСН      <> СруктураПараметров.Графа4
	 ИЛИ Графа5_УСН      <> СруктураПараметров.Графа5
	 ИЛИ Графа6_УСН      <> СруктураПараметров.Графа6
	 ИЛИ Графа7_УСН      <> СруктураПараметров.Графа7
	 ИЛИ НДС_УСН         <> СруктураПараметров.НДС
	 ИЛИ ДоходыЕНВД_УСН  <> СруктураПараметров.ДоходыЕНВД
	 ИЛИ РасходыЕНВД_УСН <> СруктураПараметров.РасходыЕНВД
	 ИЛИ Содержание_УСН  <> СруктураПараметров.Содержание Тогда

		РучнаяНастройка_УСН = Истина;

	КонецЕсли;

	Графа4_УСН      = СруктураПараметров.Графа4;
	Графа5_УСН      = СруктураПараметров.Графа5;
	Графа6_УСН      = СруктураПараметров.Графа6;
	Графа7_УСН      = СруктураПараметров.Графа7;
	НДС_УСН         = СруктураПараметров.НДС;
	ДоходыЕНВД_УСН  = СруктураПараметров.ДоходыЕНВД;
	РасходыЕНВД_УСН = СруктураПараметров.РасходыЕНВД;
	Содержание_УСН  = СруктураПараметров.Содержание;

КонецПроцедуры // ДействияФормыНастройкаУСН()

Процедура ДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасшифровкаПлатежаДокументПланированияПлатежаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДокументПланированияПлатежа) Тогда
		СтрокаПлатеж.КурсВзаиморасчетовПлан=0;
		СтрокаПлатеж.СуммаПлатежаПлан=0;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура РасшифровкаПлатежаПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура Проект1НачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура Проект2НачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура Проект3НачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура Проект4НачалоВыбора(Элемент, СтандартнаяОбработка)
		
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);

КонецПроцедуры

Процедура ПриИзмененииСтатьиДДС(Строка)
	
	Если НЕ ЗначениеЗаполнено(Строка.Проект) Тогда
		
		ВидРаспределения=УправлениеПроектами.ПолучитьВидРаспределенияДляСтатьиДДС(Строка.СтатьяДвиженияДенежныхСредств, Дата);
		
		Если НЕ ВидРаспределения=Неопределено Тогда
			Строка.Проект=ВидРаспределения;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииСтатьиДДС()

Процедура РасшифровкаПлатежаСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствБанк1ПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствККМПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствПрочиеПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура СтатьяДвиженияДенежныхСредствБанкПриИзменении(Элемент)
		
	ПриИзмененииСтатьиДДС(СтрокаПлатеж);

КонецПроцедуры

Процедура ДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, СтрокаПлатеж.ДоговорКонтрагента,
														СтрокаПлатеж.Сделка, СтандартнаяОбработка, "Приход");
КонецПроцедуры

Процедура КоманднаяПанельВыплатаДепонентовПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ВыплатаДепонентов, Ссылка, Ложь, Дата, мГоловнаяОрганизация);
	
КонецПроцедуры

Процедура КоманднаяПанельВыплатаДепонентовСписокРаботников(Кнопка)
	
	Если ВыплатаДепонентов.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		ВыплатаДепонентов.Очистить();
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭлементыФормы.ВыплатаДепонентов, Дата, , Организация,,, Ложь,,,,,Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельВыплатаДепонентовЗаполнить(Кнопка)
	
	Если ВыплатаДепонентов.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		ВыплатаДепонентов.Очистить();
	КонецЕсли;
	
	АвтозаполнениеДепонентов();
	СуммаДокументаПриИзменении();
	
КонецПроцедуры

Процедура Депоненты_РасшифровкаПоСтатьямСтатьяДвиженияДенежныхСредствПриИзменении(Элемент)
	ПриИзмененииСтатьиДДС(ЭлементыФормы.Депоненты_РасшифровкаПоСтатьям.ТекущиеДанные);

КонецПроцедуры

Процедура КоманднаяПанельДепоненты_РасшифровкаПоСтатьямЗаполнитьПоЗакладкеДепоненты(Кнопка)
	ТабДепонирование = ВыплатаДепонентов.Выгрузить();
	ТабДепонирование.Свернуть("СтатьяДвиженияДенежныхСредств,Проект","СуммаКВыплате");
    ТабДепонирование.Колонки.СуммаКВыплате.Имя = "СуммаПлатежа";
	РасшифровкаПлатежа.Загрузить(ТабДепонирование);
	Если РасшифровкаПлатежа.Количество()=0 Тогда
		нстр = РасшифровкаПлатежа.Добавить();
		нстр.КурсВзаиморасчетов = 1;
	КонецЕсли;
	СуммаДокумента = ВыплатаДепонентов.Итог("СуммаКВыплате");
	СтрокаПлатеж = РасшифровкаПлатежа[0];
КонецПроцедуры

Процедура Депоненты_РасшифровкаПоСтатьямПередУдалением(Элемент, Отказ)
	Если РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ=Истина;
	КонецЕсли;

КонецПроцедуры

Процедура Депоненты_РасшифровкаПоСтатьямПриАктивизацииСтроки(Элемент)
	СтрокаПлатеж=ЭлементыФормы.Депоненты_РасшифровкаПоСтатьям.ТекущиеДанные;
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

Процедура КассаККМПриИзменении(Элемент)
	
	Если ТипЗнч(Контрагент)=Тип("СправочникСсылка.КассыККМ") И Организация.Пустая() Тогда
		Организация=Контрагент.Владелец;
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомНУПриИзменении(Элемент)
	
	Если Элемент.Значение = мСчетНУ тогда
		Возврат;
	КонецЕсли;

	УстановитьВидимостьСубконтоНУ();

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	СубконтоНУДт1, ЭлементыФормы.СубконтоНУДт1,
	СубконтоНУДт2, ЭлементыФормы.СубконтоНУДт2,
	СубконтоНУДт3, ЭлементыФормы.СубконтоНУДт3);

	мСчетНУ = Элемент.Значение;

КонецПроцедуры

Процедура СчетУчетаРасчетовСКонтрагентомНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

Процедура СубконтоНУДт1ПриИзменении(Элемент)
		
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоНУДт2");
	СписокСубконто.Добавить("СубконтоНУДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	

КонецПроцедуры

Процедура СубконтоНУДт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоНУДт"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоНУДт"+н]);
		КонецЕсли;
	КонецЦикла;
	
	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);

КонецПроцедуры

Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СубконтоДт1НачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура();
	Для н=1 По 3 Цикл
		Если ТипЗнч(ЭтотОбъект["СубконтоДт"+н]) = Тип("СправочникСсылка.Контрагенты") Тогда
			СписокПараметров.Вставить("Контрагент", ЭтотОбъект["СубконтоДт"+н]);
		КонецЕсли;
	КонецЦикла;

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация, СписокПараметров);


КонецПроцедуры

Процедура СубконтоДт2ПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ мПрименениеУСН Тогда
		БухгалтерскийУчет.ЗаменитьСубконтоНУ(ЭлементыФормы.СчетУчета.Значение, СчетУчетаРасчетовСКонтрагентомНУ, 2, СубконтоДт2, СубконтоНУДт2);
		СчетУчетаРасчетовСКонтрагентомНУ = НалоговыйУчет.ОпределитьСчетНУВШапке(Организация, Дата, СчетУчетаРасчетовСКонтрагентом, СубконтоДт1,СубконтоДт2,СубконтоДт3);
	Иначе
		СчетУчетаРасчетовСКонтрагентомНУ = Неопределено;
	КонецЕсли;
	СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);
	
	УстановитьВидимостьСубконтоНУ();
	
КонецПроцедуры

Процедура СубконтоДт3ПриИзменении(Элемент)
	
	Если ОтражатьВНалоговомУчете И НЕ мПрименениеУСН Тогда
		БухгалтерскийУчет.ЗаменитьСубконтоНУ(ЭлементыФормы.СчетУчета.Значение, СчетУчетаРасчетовСКонтрагентомНУ, 3, СубконтоДт3, СубконтоНУДт3);
		СчетУчетаРасчетовСКонтрагентомНУ = НалоговыйУчет.ОпределитьСчетНУВШапке(Организация, Дата, СчетУчетаРасчетовСКонтрагентом, СубконтоДт1,СубконтоДт2,СубконтоДт3);
	Иначе
		СчетУчетаРасчетовСКонтрагентомНУ = Неопределено;
	КонецЕсли;
	СчетУчетаРасчетовСКонтрагентомНУПриИзменении(ЭлементыФормы.СчетУчетаРасчетовСКонтрагентомНУ);
	
	УстановитьВидимостьСубконтоНУ();
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

СпецифическиеСоответствияСчетовБУиНУдляДокумента = Новый Соответствие();
СпецифическиеСоответствияСчетовБУиНУдляДокумента.Вставить(ПланыСчетов.Хозрасчетный.ПрочиеРасходы,ПланыСчетов.Налоговый.ВнереализационныеРасходы);
СпецифическиеСоответствияСчетовБУиНУдляДокумента.Вставить(ПланыСчетов.Хозрасчетный.ПрочиеДоходы,ПланыСчетов.Налоговый.ВнереализационныеДоходы);