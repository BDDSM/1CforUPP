// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// Хранит значения списка документов основания для автозаполнения
Перем мДокументыОснования;

// Указывает возможность автозаполнения поля список Документы овнования
Перем мАвтозаполнениеДокументыОснованияВозможно;

// Хранит значение поля иная полезная информация для автозаполнения
Перем мИнаяПолезнаяИнформация;

// Указывает возможность автозаполнения поля иная полезнаяинформация
Перем мАвтозаполнениеИнаяПолезнаяИнформацияВозможно;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Заполняет строку данными о выбранном сотруднике
//
// Параметры
//  нет
//
Процедура ЗаполнитьДанныеСотрудника()

	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	Если Не ЗначениеЗаполнено(ТекущаяСтрока.Сотрудник) Тогда
		
		ТекущаяСтрока.Физлицо = Неопределено;
		
		ТекущаяСтрока.ФамилияРебенка = "";
		ТекущаяСтрока.ИмяРебенка = "";
		ТекущаяСтрока.ОтчествоРебенка = "";
		ТекущаяСтрока.ДатаРождения = '00010101000000';
		
		Возврат;
	
	КонецЕсли;
	
	ЗаполнитьЛичныеДанныеСотрудника(ТекущаяСтрока);
	ЗаполнитьДанныеРебенкаФизлица(ТекущаяСтрока);
	
КонецПроцедуры

Процедура ЗаполнитьДанныеРебенкаФизлица(ТекущаяСтрока)
	
	Сотрудник = ТекущаяСтрока.Сотрудник;
	
	ТекущаяСтрока.ФамилияРебенка = "";
	ТекущаяСтрока.ИмяРебенка = "";
	ТекущаяСтрока.ОтчествоРебенка = "";
	ТекущаяСтрока.ДатаРожденияРебенка = '00010101000000';
	
	СписокДетей = ПолучитьСписокДетейФизлица(Сотрудник);
	
	Если СписокДетей.Количество() > 0 Тогда
		
		Для каждого ЭлементСпискаДетей Из СписокДетей Цикл
			
			Если НЕ ПособиеЗаявлялосьРанее(ТекущаяСтрока.Физлицо, ЭлементСпискаДетей.Представление, ЭлементСпискаДетей.Значение) Тогда
			
				ОбменСведениямиОПособияхСФСС.ЗаписатьФИОРебенкаВПоляДокумента(ЭлементСпискаДетей.Представление, ТекущаяСтрока);
				ТекущаяСтрока.ДатаРожденияРебенка = ЭлементСпискаДетей.Значение;
				
				Прервать;
			
			КонецЕсли; 
		
		КонецЦикла; 
		
		УстановитьСтепеньРодства(ТекущаяСтрока);
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьРебенкаСотрудника(Сотрудник)()
 
Процедура УстановитьАдресаСотрудникаВФорме()

	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	НетОтображаемыхСтрок = ТекущаяСтрока = Неопределено;
	
	Если Не НетОтображаемыхСтрок Тогда
	
		АдресРегистрацииВФорме 	= УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(ТекущаяСтрока.АдресРегистрации);
		АдресПочтовыйВФорме 	= УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(ТекущаяСтрока.АдресПочтовый);
		
	КонецЕсли;

	ЭлементыФормы.ОбновитьДанныеСотрудника.Доступность = Не ТолькоПросмотр И Не НетОтображаемыхСтрок;
	ЭлементыФормы.АдресРегистрацииВФорме.ТолькоПросмотр = ТолькоПросмотр Или НетОтображаемыхСтрок;
	ЭлементыФормы.АдресПочтовыйВФорме.ТолькоПросмотр = ТолькоПросмотр Или НетОтображаемыхСтрок;
	ЭлементыФормы.КнопкаЗаполнитьСписокПредставленныхДокументов.Доступность = Не ТолькоПросмотр И Не НетОтображаемыхСтрок;
	ЭлементыФормы.ОписаниеДокументаНаПроживание.ТолькоПросмотр = ТолькоПросмотр Или НетОтображаемыхСтрок;
	
КонецПроцедуры // УстановитьАдресаСотрудникаВФорме()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	УниверсальныеМеханизмы.УстановитьПодменюПечати(мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя, Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации, ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить);
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
КонецПроцедуры

Функция АвтоЗаполнениеСпискаДокументовВозможно(ТекущаяСтрока)

	Возврат УдалитьНезначащиеСимволы(ТекущаяСтрока.ДокументыОснования) = УдалитьНезначащиеСимволы(СформироватьСписокДокументовОснования(ТекущаяСтрока));

КонецФункции // АвтоЗаполнениеСпискаДокументовВозможно()

Функция АвтоЗаполнениеИнаяПолезнаяИнформацияВозможно(ТекущаяСтрока)

	Возврат УдалитьНезначащиеСимволы(ТекущаяСтрока.ИнаяПолезнаяИнформация) = УдалитьНезначащиеСимволы(СформироватьИнаяПолезнаяИнформация(ТекущаяСтрока));

КонецФункции // АвтоЗаполнениеИнаяПолезнаяИнформацияВозможно()

// Функция возвращает Список детей (сын, дочь) в порядке убывания даты рождения
//
// Параметры
//  Сотрудник  - <Справочник.СотрудникиОрганизаций> 
//
// Возвращаемое значение:
//   <СписокЗначений>   - Строки состоящие из "ФИО ребенка (дата рождения)"
//
Функция ПолучитьСписокДетейФизлица(Сотрудник)
	
	ТаблицаРезультатаЗапроса = ПолучитьСписокДетей(Сотрудник);
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	ВозвращаемыйСписокЗначений = Новый СписокЗначений;

	СтруктураПоиска = Новый Структура("Сотрудник,ФамилияРебенка,ИмяРебенка,ОтчествоРебенка", Сотрудник);
	Для Каждого СтрокаТаблицаРезультатаЗапроса Из ТаблицаРезультатаЗапроса Цикл
		
		ОбменСведениямиОПособияхСФСС.ЗаписатьФИОРебенкаВПоляДокумента(СтрокаТаблицаРезультатаЗапроса.Ребенок, СтруктураПоиска);
		НайденныеСтроки = РаботникиОрганизации.НайтиСтроки(СтруктураПоиска);
		
		СведенияУжеДобавленыВДокумент = Ложь;
		
		Для каждого НайденнаяСтрока Из НайденныеСтроки Цикл
		
			Если НайденнаяСтрока = ТекущаяСтрока Тогда
			
				Продолжить;
				
			Иначе
				
				СведенияУжеДобавленыВДокумент = Истина;
				
				Прервать;
			
			КонецЕсли; 
		
		КонецЦикла; 
		
		Если СведенияУжеДобавленыВДокумент Тогда
		
			Продолжить;
		
		КонецЕсли; 
	
		ВозвращаемыйСписокЗначений.Добавить(СтрокаТаблицаРезультатаЗапроса.ДатаРожденияРебенка, СтрокаТаблицаРезультатаЗапроса.Ребенок);
	
	КонецЦикла; 
	
    Возврат ВозвращаемыйСписокЗначений;
	
КонецФункции // ПолучитьСписокДетейФизлица()

Функция ПособиеЗаявлялосьРанее(ФизЛицо, Ребенок, ДатаРожденияРебенка)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Пособия.Ссылка
	|ИЗ
	|	Документ.РеестрСведенийВФССОПособияхПриРожденииРебенка.РаботникиОрганизации КАК Пособия
	|ГДЕ
	|	Пособия.Ссылка.Проведен
	|	И Пособия.ФизЛицо = &ФизЛицо
	|	И Пособия.ФамилияРебенка + "" "" + Пособия.ИмяРебенка + "" "" + Пособия.ОтчествоРебенка = &Ребенок
	|	И Пособия.Ссылка <> &Ссылка
	|	И Пособия.ДатаРожденияРебенка = &ДатаРожденияРебенка";
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("Ребенок", Ребенок);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаРожденияРебенка", ДатаРожденияРебенка);
	
	УстановитьПривилегированныйРежим(Истина);
	Результат = Запрос.Выполнить();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат Не Результат.Пустой();

КонецФункции // ПособиеЗаявлялосьРанее()

Функция СформироватьСписокДокументовОснования(ТекущаяСтрока)
	
	ДокументыОснования = "Заявление о выплате пособия от " + Формат(ТекущаяСтрока.ДатаПредставленияПакетаДокументов, "ДФ=dd.MM.yyyy");
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаСправки) И ЗначениеЗаполнено(ТекущаяСтрока.НомерСправки) Тогда
	
		ДокументыОснования =  ДокументыОснования + ?(ПустаяСтрока(ДокументыОснования), "", ", ") + "Справка о рождении, " + ТекущаяСтрока.ВидСправкиОРожденииРебенка + ", от " + Формат(ТекущаяСтрока.ДатаСправки, "ДФ=dd.MM.yyyy") + " № " + ТекущаяСтрока.НомерСправки;
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаСвидетельстваОРождении) И ЗначениеЗаполнено(ТекущаяСтрока.НомерСвидетельстваОРождении) И ЗначениеЗаполнено(ТекущаяСтрока.СерияСвидетельстваОРождении) Тогда
	
		ДокументыОснования = ДокументыОснования + ?(ПустаяСтрока(ДокументыОснования), "", ", ") + "Свидетельство о рождении от " + Формат(ТекущаяСтрока.ДатаСвидетельстваОРождении, "ДФ=dd.MM.yyyy") + " серия " + ТекущаяСтрока.СерияСвидетельстваОРождении + " № " + ТекущаяСтрока.НомерСвидетельстваОРождении;
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаИногоПодтвержденияРождения) И ЗначениеЗаполнено(ТекущаяСтрока.НомерИногоПодтвержденияРождения) Тогда
	
		ДокументыОснования = ДокументыОснования + ?(ПустаяСтрока(ДокументыОснования), "", ", ") + "<Иное подтверждение рождения> от " + Формат(ТекущаяСтрока.ДатаИногоПодтвержденияРождения, "ДФ=dd.MM.yyyy") + ?(ЗначениеЗаполнено(ТекущаяСтрока.СерияИногоПодтвержденияРождения)," серия " + ТекущаяСтрока.СерияИногоПодтвержденияРождения,"") + " № " + ТекущаяСтрока.НомерИногоПодтвержденияРождения;
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаСправкиОтДругогоРодителя) И ЗначениеЗаполнено(ТекущаяСтрока.НомерСправкиОтДругогоРодителя) Тогда
	
		ДокументыОснования = ДокументыОснования + ?(ПустаяСтрока(ДокументыОснования), "", ", ") + "Справка от другого родителя о неполучении пособия от " + Формат(ТекущаяСтрока.ДатаСправкиОтДругогоРодителя, "ДФ=dd.MM.yyyy") + " № " + ТекущаяСтрока.НомерСправкиОтДругогоРодителя;
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаРешенияОбОпеке) И ЗначениеЗаполнено(ТекущаяСтрока.НомерРешенияОбОпеке) Тогда
	
		ДокументыОснования = ДокументыОснования + ?(ПустаяСтрока(ДокументыОснования), "", ", ") + "Решение об установлении опеки от " + Формат(ТекущаяСтрока.ДатаРешенияОбОпеке, "ДФ=dd.MM.yyyy") + " № " + ТекущаяСтрока.НомерРешенияОбОпеке;
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаРешенияОбУсыновлении) И ЗначениеЗаполнено(ТекущаяСтрока.НомерРешенияОбУсыновлении) Тогда
	
		ДокументыОснования = ДокументыОснования + ?(ПустаяСтрока(ДокументыОснования), "", ", ") + "Решение об усыновлении от " + Формат(ТекущаяСтрока.ДатаРешенияОбУсыновлении, "ДФ=dd.MM.yyyy") + " № " + ТекущаяСтрока.НомерРешенияОбУсыновлении;
	
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.ДатаДоговораОПередачеНаВоспитание) И ЗначениеЗаполнено(ТекущаяСтрока.НомерДоговораОПередачеНаВоспитание) Тогда
	
		ДокументыОснования = ДокументыОснования + ?(ПустаяСтрока(ДокументыОснования), "", ", ") + "Договор о предаче ребенка на воспитание в приемную семью от " + Формат(ТекущаяСтрока.ДатаДоговораОПередачеНаВоспитание, "ДФ=dd.MM.yyyy") + " № " + ТекущаяСтрока.НомерДоговораОПередачеНаВоспитание;
	
	КонецЕсли; 
	
	Возврат ДокументыОснования;

КонецФункции // СформироватьСписокДокументовОснования()

Функция УдалитьНезначащиеСимволы(Знач ОбрабатываемаяСтрока)

	ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, " ", "");
	ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, ",", "");
	ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, ".", "");
	ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, ";", "");
	ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, ":", "");
	ОбрабатываемаяСтрока = СтрЗаменить(ОбрабатываемаяСтрока, Символы.ПС, "");
	
	Возврат ОбрабатываемаяСтрока;

КонецФункции // УдалитьНезначащиеСимволы()


////////////////////////////////////////////////////
// Обработчики событий формы

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати(); // Универсальный механизм печати документов
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ(); // Универсальный механизм подключения процедур заполнения табличных частей
	
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		Если Не ЗначениеЗаполнено(РегистрационныйНомерФСС) И РаботникиОрганизации.Количество() = 0 И ЗначениеЗаполнено(Организация) Тогда
			ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеОрганизации(ЭтотОбъект);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТелефонСоставителя) Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбменСведениямиОПособияхСФСС.ДанныеСоставителяРеестра(Ответственный));
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	УстановитьЗаголовкиОрганизацийВФорме();
	УстановитьАдресаСотрудникаВФорме();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	ЭлементыФормы.КПП.АвтоОтметкаНезаполненного = ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Организация);
	ЭлементыФормы.КПП.ОтметкаНезаполненного = ЭлементыФормы.КПП.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(КПП);
	ЭлементыФормы.СтатусНалогоплательщика.ДоступныеЗначения = ПроцедурыУправленияПерсоналом.ПолучитьСписокСтатусовФизлиц();
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПриОткрытии()

Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

Процедура ОбновлениеОтображения()
    ОписаниеДокументаНаПроживание = ОбменСведениямиОПособияхСФСС.ОписаниеДокументаНаПроживание(ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ 

// формирует файл сведений
//
Процедура ОсновныеДействияФормыФайл(Кнопка)
	
	ПроцедурыПерсонифицированногоУчета.ПоказатьФайлДокумента(ЭтотОбъект,"Файл реестра сведений по пособиям при рождении ребенка");
	                
КонецПроцедуры      

// копирует файл-пачку в указанное пользователем место
Процедура ОсновныеДействияФормыНаДискетку(Кнопка)
	
	ПроцедурыПерсонифицированногоУчета.ЗаписатьФайлДокументаНаДискету(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), ОбменСведениямиОПособияхСФСС.ИмяФайла(ЭтотОбъект) + ".xml", КодировкаТекста.ANSI,,"Файл реестра записан под именем: ");
	
КонецПроцедуры

// Процедура - заполняет табличную часть "РаботникиОрганизации" списком сотрудников (ФизЛиц)
// у которых есть дети с датой рождения - за последний год с даты документа.
// при этом ведется проверка не подавались ли данные ранее.
//
Процедура КоманднаяПанельРаботникиОрганизацииЗаполнитьСписокЗаПоследнийГод(Кнопка)

	Если РаботникиОрганизации.Количество() > 0 Тогда
		
		ТекстВопроса = НСтр("ru='Перед заполнением список сотрудников будет очищен.
			|
			|Продолжить?'");
			
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет, "Заполнить") <> КодВозвратаДиалога.Да Тогда
		
			Возврат;
		
		КонецЕсли; 
	
	КонецЕсли;
	
	Автозаполнение();
	
	Если РаботникиОрганизации.Количество() = 0 Тогда
		Сообщить("Не обнаружены данные для записи в документ.", СтатусСообщения.Важное )
	Иначе
		ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = РаботникиОрганизации[0]
	КонецЕсли;
	
КонецПроцедуры

// Открывает форму подбора сотрудников
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, ОбщегоНазначения.ГоловнаяОрганизация(Организация), 2);

КонецПроцедуры

// Процедура - обработчик события "ОбновитьДанныеСотрудникаНажатие"
//
Процедура ОбновитьДанныеСотрудникаНажатие(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
	
		ЗаполнитьЛичныеДанныеСотрудника(ТекущаяСтрока);
	
		УстановитьАдресаСотрудникаВФорме();
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбновитьДанныеСтрахователяНажатие"
//
Процедура ОбновитьДанныеСтрахователяНажатие(Элемент)
	
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеОрганизации(ЭтотОбъект);
	
КонецПроцедуры

// На основе введенных данных о датах и номерах документов, формирует
// перечень прилагаемых к заявлению документов
//
Процедура КнопкаЗаполнитьСписокПредставленныхДокументовНажатие(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
	
		Возврат;
	
	КонецЕсли; 
	
	Если Не ПустаяСтрока(ТекущаяСтрока.ДокументыОснования) Тогда
	
		ТекстВопроса = НСтр("ru='При заполнении список представленных документов будет очищен.
			|
			|Продолжить?'");
			
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет, "Заполнить") <> КодВозвратаДиалога.Да Тогда
		
			Возврат;
		
		КонецЕсли; 
	
	КонецЕсли; 
	
	мДокументыОснования = СформироватьСписокДокументовОснования(ТекущаяСтрока);
	
	ТекущаяСтрока.ДокументыОснования = мДокументыОснования;
	
	мАвтозаполнениеДокументыОснованияВозможно = Истина;
	
	ЭлементыФормы.КнопкаЗаполнитьСписокПредставленныхДокументов.Доступность = Ложь;
	
КонецПроцедуры

///////////////////////////////////////////////////
// Обработчики элементов управления

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура заполняет реквизиты Организации
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта( ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеОрганизации(ЭтотОбъект);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	ЭлементыФормы.КПП.АвтоОтметкаНезаполненного = ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Организация);
	ЭлементыФормы.КПП.ОтметкаНезаполненного = ЭлементыФормы.КПП.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(КПП);
	
КонецПроцедуры

Процедура ОтветственныйПриИзменении(Элемент)
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбменСведениямиОПособияхСФСС.ДанныеСоставителяРеестра(Ответственный));
КонецПроцедуры

Процедура ОтчествоПриИзменении(Элемент)
	Если ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Пол = ПроцедурыУправленияПерсоналом.ПолучитьПол(Элемент.Значение)
	КонецЕсли;
КонецПроцедуры

Процедура АдресРегистрацииВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтруктураАдреса = Новый Структура("Значение", ТекущиеДанные.АдресРегистрации);
		УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
		ТекущиеДанные.АдресРегистрации = СтруктураАдреса.Значение;
		Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура АдресПочтовыйВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		СтруктураАдреса = Новый Структура("Значение", ТекущиеДанные.АдресПочтовый);
		УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
		ТекущиеДанные.АдресПочтовый = СтруктураАдреса.Значение;
		ТекущиеДанные.АдресПочтовыйКодПоКЛАДР = ОбменСведениямиОПособияхСФСС.КодАдресаПоКЛАДРдляФСС(СтруктураАдреса.Значение);
		Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ОписаниеДокументаНаПроживаниеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбменСведениямиОПособияхСФСС.ОткрытьФормуРедактированияДокументаНаПроживание(ЭтаФорма, ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока)
	
КонецПроцедуры

Процедура ОписаниеДокументаНаПроживаниеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь
КонецПроцедуры

// При изменении реквизита "Банк" указывает в полях формы наименование и
// БИК выбранного банка
//
Процедура БанкПриИзменении(Элемент)
	
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеБанка(Элемент.Значение, ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменени"
//
Процедура ДатаРожденияПриИзменении(Элемент)
	
	ФизическиеЛицаКлиент.ФормаЭлементаДатаРожденияПриИзменении(Элемент, ЭтаФорма);
	
КонецПроцедуры

Процедура РеквизитыДокументовПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	Если мАвтозаполнениеДокументыОснованияВозможно Тогда
	
		мДокументыОснования = СформироватьСписокДокументовОснования(ТекущаяСтрока);
		
		ТекущаяСтрока.ДокументыОснования = мДокументыОснования;
		
	Иначе
		
		мАвтозаполнениеДокументыОснованияВозможно = АвтоЗаполнениеСпискаДокументовВозможно(ТекущаяСтрока);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ДокументыОснованияПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	мАвтозаполнениеДокументыОснованияВозможно = АвтоЗаполнениеСпискаДокументовВозможно(ТекущаяСтрока);
	
	ЭлементыФормы.КнопкаЗаполнитьСписокПредставленныхДокументов.Доступность = НЕ мАвтозаполнениеДокументыОснованияВозможно;
	
КонецПроцедуры

Процедура РеквизитыДляИнаяПолезнаяИнформацияПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	Если мАвтозаполнениеИнаяПолезнаяИнформацияВозможно Тогда
	
		мИнаяПолезнаяИнформация = СформироватьИнаяПолезнаяИнформация(ТекущаяСтрока);
		
		ТекущаяСтрока.ИнаяПолезнаяИнформация = мИнаяПолезнаяИнформация;
		
	Иначе
		
		мАвтозаполнениеИнаяПолезнаяИнформацияВозможно = АвтозаполнениеИнаяПолезнаяИнформацияВозможно(ТекущаяСтрока);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура ИнаяПолезнаяИнформацияПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	мАвтозаполнениеИнаяПолезнаяИнформацияВозможно = АвтозаполнениеИнаяПолезнаяИнформацияВозможно(ТекущаяСтрока);
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////
// Обработчики табличного поля "РаботникиОрганизации"

// Процедура - обработчик ожидания события "ПриАктивизацииСтроки"
//
Процедура ОбработчикОжиданияСотрудникиОрганизацииПриАктивизацииСтроки()
	
	УстановитьАдресаСотрудникаВФорме();
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	Если ТекущаяСтрока <> Неопределено Тогда
		мДокументыОснования = ТекущаяСтрока.ДокументыОснования;
		мАвтозаполнениеДокументыОснованияВозможно = АвтоЗаполнениеСпискаДокументовВозможно(ТекущаяСтрока);
		мИнаяПолезнаяИнформация = ТекущаяСтрока.ИнаяПолезнаяИнформация;
		мАвтозаполнениеИнаяПолезнаяИнформацияВозможно = АвтоЗаполнениеИнаяПолезнаяИнформацияВозможно(ТекущаяСтрока);
		ЭлементыФормы.КнопкаЗаполнитьСписокПредставленныхДокументов.Доступность = НЕ мАвтозаполнениеДокументыОснованияВозможно;
	Иначе
		ЭлементыФормы.КнопкаЗаполнитьСписокПредставленныхДокументов.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - при активации строки в табличной части "РаботникиОрганизации"
// Обновляет отображения адреса сотрудника в форме
//
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСотрудникиОрганизацииПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для каждого Строка Из ОформленияСтрок Цикл
		Строка.Ячейки.Ребенок.Видимость = Ложь
	КонецЦикла;
	
КонецПроцедуры

Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
		СтрокаТабличнойЧасти.Сотрудник = ВыбранноеЗначение;
		
		ЗаполнитьЛичныеДанныеСотрудника(СтрокаТабличнойЧасти);
		ЗаполнитьДанныеРебенкаФизлица(СтрокаТабличнойЧасти);
		СтрокаТабличнойЧасти.ВидСправкиОРожденииРебенка = Перечисления.ВидыСправокОРожденииРебенка.ФормаНомер24;
	
		Если ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = Неопределено Тогда
			ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = СтрокаТабличнойЧасти;
		КонецЕсли;
		УстановитьАдресаСотрудникаВФорме()
	КонецЕсли;

КонецПроцедуры

Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Если Не ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидСправкиОРожденииРебенка) Тогда
			Элемент.ТекущаяСтрока.ВидСправкиОРожденииРебенка = Перечисления.ВидыСправокОРожденииРебенка.ФормаНомер24
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура при изменении сотрудника заполняет поля его данными
//
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ЗаполнитьДанныеСотрудника();
	
	УстановитьАдресаСотрудникаВФорме();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()

// Процедура при изменнении ФИО ребенка инициирует процедура подбора степени родства
// заявителя к указанному ребенку
//
Процедура РаботникиОрганизацииРебенокПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	УстановитьСтепеньРодства(ТекущаяСтрока);
	
КонецПроцедуры

// Процедура формирует список детей сотрудника (для выбора)
//
Процедура РаботникиОрганизацииРебенокНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Сотрудник = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.Сотрудник;
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		Элемент.СписокВыбора.Очистить();
		
		СписокДетей = ПолучитьСписокДетейФизлица(Сотрудник);
		
		Для каждого ЭлементСпискаДетей Из СписокДетей Цикл
		
			Элемент.СписокВыбора.Добавить(ЭлементСпискаДетей, ЭлементСпискаДетей.Представление + " " + Формат(ЭлементСпискаДетей.Значение, "ДФ=dd.MM.yyyy"));		
		
		КонецЦикла;
	
	Иначе
	
		Элемент.Списоквыбора.Очистить();
	
	КонецЕсли; 
	
КонецПроцедуры

// при выборе ребенка из списка поля вввода заполняет реквизиты Ребенок
// и дата рождения ребенка из выбранного элемента списка
//
Процедура РаботникиОрганизацииРебенокОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	ОбменСведениямиОПособияхСФСС.ЗаписатьФИОРебенкаВПоляДокумента(ВыбранноеЗначение.Представление, ТекущаяСтрока);
	
	ТекущаяСтрока.ДатаРожденияРебенка = ВыбранноеЗначение.Значение;
	
	УстановитьСтепеньРодства(ТекущаяСтрока);
	
КонецПроцедуры


///////////////////////////////////////////////////
// Универсальные механизмы

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)
	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя, "Имя", Истина), ЭтотОбъект);
КонецПроцедуры