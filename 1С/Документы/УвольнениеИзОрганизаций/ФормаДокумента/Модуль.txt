////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

// Диалог настройки периода
Перем мНастройкаПериода Экспорт;

// Механизм исправлений
Перем мСтруктураМенюИсправление;
Перем мДокументыИсправление;
Перем мСотрудникиИсправление;
Перем мТекущийСотрудник;

Перем мСведенияОСотрудниках;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает механизму исправления информацию о том, заполнен документ правильно или с ошибками
//
Функция ДокументЗаполненСОшибками() Экспорт
	
	Возврат РаботникиОрганизации.НайтиСтроки(Новый Структура("ДатаУвольнения",Дата(1,1,1))).Количество() > 0
		ИЛИ РаботникиОрганизации.НайтиСтроки(Новый Структура("СтатьяТКРФ",Дата(1,1,1))).Количество() > 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ();

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.НадписьОрганизация.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

// Функция определяет, необходимо или нет прекращать стандартные вычеты
//
Функция ПрекращатьСтандартныеВычеты(Сотрудник, Дата)
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		
		СведенияОСотруднике = ПолучитьСведенияОСотрудниках(мСведенияОСотрудниках, Сотрудник);
		Если СведенияОСотруднике.ВидЗанятости <> Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
			
			ТаблицаДанных = СведенияОСотруднике.НДФЛПрименениеВычетов;
			ОрганизацияПримененияВычетов = Неопределено;
			ДатаЗначения = Неопределено;
			Для каждого СтрокаПрименения Из ТаблицаДанных Цикл
			    ОрганизацияПримененияВычетов = СтрокаПрименения.Организация;
				ДатаЗначения = СтрокаПрименения.Период;
				Если ДатаЗначения <= Дата  Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ДатаЗначения) И ДатаЗначения > Дата Тогда
				ОрганизацияПримененияВычетов = Неопределено;
			КонецЕсли;
			
			Возврат ОрганизацияПримененияВычетов = мГоловнаяОрганизация;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ПрекращатьСтандартныеВычеты()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	УвольнениеИзОрганизацийПереопределяемый.ДополнитьКнопкиКоманднойПанели(ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить, Новый Действие("ДополнительныеДействия"));
	
	УвольнениеИзОрганизацийПереопределяемый.ФормаДокументаПередОткрытиемДополнительно(ЭтаФорма);
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПередОткрытием(ЭтотОбъект, ЭтаФорма, мДокументыИсправление, мСотрудникиИсправление);
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));		
	Иначе		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ДатаУвольнения");

	// Установить ограничение - изменять видимость колонок для табличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.РаботникиОрганизации.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	мНастройкаПериода.УстановитьПериод(НачалоМесяца(Дата), КонецМесяца(Дата));
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриОткрытии(ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление, мСотрудникиИсправление);
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ИсполнитьПодготовленныйЗапрос" Тогда
			Автозаполнение(ЗначениеВыбора.Запрос);
		КонецЕсли;
	КонецЕсли;
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовОбработкаВыбора(ЗначениеВыбора, Источник, ЭтотОбъект, ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовОбработкаОповещения(
		ИмяСобытия, Параметр, Источник,
		ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление, мСотрудникиИсправление);
	
	Если ТипЗнч(Параметр) <> Тип("СправочникСсылка.СотрудникиОрганизаций") ИЛИ Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ПодборОтменаВыбора" Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", Параметр);
		НайденныеСтроки = Источник.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Источник.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ОбновитьОписаниеСостоянияКадровогоДокумента(ЭтотОбъект, ЭтаФорма, мДокументыИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы
//
Процедура ПослеЗаписи()
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПослеЗаписи(ЭтотОбъект);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	МассивСотрудников = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	Оповестить("ОбновитьСписокПлановыхНачислений", МассивСотрудников);
	Оповестить("ПеречитатьСотрудников", МассивСотрудников);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПередЗакрытием" формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()


// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура КоманднаяПанельРаботникиОрганизацииЗаполнить(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , Организация, , Ложь, Истина);

КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииЗаполнить()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	МДРеквизиты = Метаданные().ТабличныеЧасти.РаботникиОрганизации.Реквизиты;
	
	ПараметрыПодбора = Новый Массив;
	ПараметрыПодбора.Добавить(МДРеквизиты.ДатаУвольнения);
	ПараметрыПодбора.Добавить(МДРеквизиты.СтатьяТКРФ);
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 2, ,РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"), , , ПараметрыПодбора);
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииПодбор()

Процедура ДополнительныеДействия(Кнопка)
	
	УвольнениеИзОрганизацийПереопределяемый.ВыполнитьДополнительныеДействия(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры


// Процедура - обработчик нажатия на кнопку "Строки текущего сотрудника"
//
Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиКадровоеИсправлениеТекущегоСотрудника(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Весь документ"
//
Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Список сотрудников"
//
Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиКадровоеИсправлениеСпискаСотрудников(ЭтотОбъект, ЭтаФорма, мСотрудникиИсправление);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Отменить исправление"
//
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьКадровоеИсправление(ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Установим видимость реквизитов, зависящих отучетной политики
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()


// Процедура - обработчик события "Нажатие" надписи "Открыть исправление".
//
Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ПоказатьИсправления(ЭтаФорма, Ссылка, мДокументыИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" надписи "Открыть исходный".
//
Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ОткрытьИсходныйДокумент(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
			СтрокаТабличнойЧасти.Сотрудник						= ВыбранноеЗначение;
			СтрокаТабличнойЧасти.Физлицо						= ПолучитьСведенияОСотрудниках(мСведенияОСотрудниках, ВыбранноеЗначение).Физлицо;
			СтрокаТабличнойЧасти.ПрекращатьСтандартныеВычеты	= ПрекращатьСтандартныеВычеты(ВыбранноеЗначение, Дата);
			СтрокаТабличнойЧасти.ПорядокРасчетаОтпуска			= Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням;
			СтрокаТабличнойЧасти.ПризнакКомпенсацииОтпуска		= Истина;
			РассчитатьКоличествоДнейОтпуска(СтрокаТабличнойЧасти, мСведенияОСотрудниках);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Для Каждого Сотрудник Из ВыбранноеЗначение.Сотрудники Цикл
			Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
				СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
				СтрокаТабличнойЧасти.Сотрудник						= Сотрудник;
				СтрокаТабличнойЧасти.Физлицо						= ПолучитьСведенияОСотрудниках(мСведенияОСотрудниках, Сотрудник).Физлицо;
				СтрокаТабличнойЧасти.ПрекращатьСтандартныеВычеты	= ПрекращатьСтандартныеВычеты(Сотрудник, Дата);
				СтрокаТабличнойЧасти.ПорядокРасчетаОтпуска			= Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням;
				СтрокаТабличнойЧасти.ПризнакКомпенсацииОтпуска		= Истина;
				Для Каждого Параметр Из ВыбранноеЗначение.ПараметрыПодбора Цикл
					СтрокаТабличнойЧасти[Параметр.Ключ]				= Параметр.Значение;
				КонецЦикла;
				РассчитатьКоличествоДнейОтпуска(СтрокаТабличнойЧасти, мСведенияОСотрудниках);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ТабличнаяЧастьОбработкаВыбора()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		СведенияОСотруднике = ПолучитьСведенияОСотрудниках(мСведенияОСотрудниках, ОформлениеСтроки.ДанныеСтроки.Сотрудник);

		ОформлениеСтроки.Ячейки.ПрекращатьСтандартныеВычеты.Видимость = Не (СведенияОСотруднике.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство);
		УвольнениеИзОрганизацийПереопределяемый.УточнитьОформлениеСтрокиСотрудника(ОформлениеСтроки, СведенияОСотруднике);
	КонецЦикла;
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриПолученииДанных(ОформленияСтрок, мСотрудникиИсправление);
	
КонецПроцедуры // РаботникиОрганизацииПриПолученииДанных()

// Процедура - обработчик события "ПриАктивизацииСтроки"
//
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтроки(Элемент, ЭлементыФормы.КоманднаяПанельРаботникиОрганизации, мСотрудникиИсправление, мТекущийСотрудник);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

// Процедура - обработчик ожидания события "ПриАктивизацииСтроки"
//
Процедура ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтрокиОбработчикОжидания(ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры

// Процедура - обработчик события "ПередУдалением"
//
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	Если Не Отказ Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповестить("ПодборОтменаВыбора", ДанныеСтроки.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

// Процедура - обработчик события "ПередОкончаниемРедактирования"
//
Процедура РаботникиОрганизацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПодборВыбор", ДанныеСтроки.Сотрудник);
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования"
//
Процедура РаботникиОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриОкончанииРедактирования(ОтменаРедактирования, ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования"
//
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока И ДанныеСтроки.ПорядокРасчетаОтпуска.Пустая() Тогда
		ДанныеСтроки.ПорядокРасчетаОтпуска		= Перечисления.ПорядокРасчетаОтпуска.ПоКалендарнымДням;
		ДанныеСтроки.ПризнакКомпенсацииОтпуска	= Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица -
// подбирает подходящие должность и подразделение
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	СведенияОСотруднике = ПолучитьСведенияОСотрудниках(мСведенияОСотрудниках, Элемент.Значение);
	
	ТекущиеДанные = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	ТекущиеДанные.ФизЛицо = СведенияОСотруднике.ФизЛицо;
	
	Если СведенияОСотруднике.ВидЗанятости = Перечисления.ВидыЗанятостиВОрганизации.ВнутреннееСовместительство Тогда
		ТекущиеДанные.ПрекращатьСтандартныеВычеты = Ложь;
		
	ИначеЕсли ЗначениеЗаполнено(Элемент.Значение) Тогда
		ДатаУвольнения = ТекущиеДанные.ДатаУвольнения;
		ТекущиеДанные.ПрекращатьСтандартныеВычеты = ПрекращатьСтандартныеВычеты(Элемент.Значение, ?(ЗначениеЗаполнено(ДатаУвольнения), ДатаУвольнения, Дата));
		
	КонецЕсли;
	
	РассчитатьКоличествоДнейОтпуска(ТекущиеДанные, мСведенияОСотрудниках);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 И Элемент.Значение <> ВыбранноеЗначение Тогда
		Предупреждение("В данном документе по одному сотруднику можно вводить только одну строку!");
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбранноеЗначение;
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	ДанныеСтроки.ФизЛицо = ПолучитьСведенияОСотрудниках(мСведенияОСотрудниках, ВыбранноеЗначение).ФизЛицо;
	
	ДатаУвольнения = ДанныеСтроки.ДатаУвольнения;
	ДанныеСтроки.ПрекращатьСтандартныеВычеты = ПрекращатьСтандартныеВычеты(ВыбранноеЗначение, ?(ЗначениеЗаполнено(ДатаУвольнения), ДатаУвольнения, Дата));
	
	РассчитатьКоличествоДнейОтпуска(ДанныеСтроки, мСведенияОСотрудниках);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода даты увольнения
//
Процедура РаботникиОрганизацииДатаУвольненияПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	ДатаУвольнения = Элемент.Значение;
	ТекущиеДанные.ПрекращатьСтандартныеВычеты = ПрекращатьСтандартныеВычеты(ТекущиеДанные.Сотрудник, ?(ЗначениеЗаполнено(ДатаУвольнения), ДатаУвольнения, Дата));
	
	РассчитатьКоличествоДнейОтпуска(ТекущиеДанные, мСведенияОСотрудниках);
	
КонецПроцедуры // РаботникиОрганизацииДатаУвольненияПриИзменении()

Процедура РаботникиОрганизацииПорядокРасчетаОтпускаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	РассчитатьКоличествоДнейОтпуска(ТекущиеДанные, мСведенияОСотрудниках);
	
КонецПроцедуры

Процедура РаботникиОрганизацииДнейЧасовКомпенсацииУдержанияОтпускаОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	ТабДокумент = ОстаткиОтпусков.СправкаПоОтпускамСотрудника(ДанныеСтроки.Сотрудник, ДанныеСтроки.ДатаУвольнения, Истина, ДанныеСтроки.ПорядокРасчетаОтпуска);
	УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, 1, Ложь, "Справка по отпуску сотрудника");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНастройкаПериода = Новый НастройкаПериода;

мДокументыИсправление	= Новый Массив;
мСотрудникиИсправление	= Новый Соответствие;

мСведенияОСотрудниках = Новый Соответствие;