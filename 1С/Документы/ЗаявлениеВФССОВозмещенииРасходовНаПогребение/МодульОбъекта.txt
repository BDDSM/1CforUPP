// Возвращает доступные варианты печати документа
//
// Возвращаемое значение:
//  Структура, каждая строка которой соответствует одному из вариантов печати
//
Функция ПолучитьСтруктуруПечатныхФорм() Экспорт
	Возврат Новый Структура("ЗаявлениеВФССПогребение_2011, ЗаявлениеВФССПогребение_2012", "Заявление о возмещении расходов (форма 2011 г.)", "Заявление о возмещении расходов (форма 2012 г.)");
КонецФункции // ПолучитьСтруктуруПечатныхФорм()

#Если ТолстыйКлиентОбычноеПриложение Тогда

//Процедура вывода сведений на печать
Функция Печать(ИмяМакета, КоличествоЭкземпляров = 1, НаПринтер = Ложь) Экспорт
	
	Если Лев(ИмяМакета,23) = "ЗаявлениеВФССПогребение" Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		
		ВыборкаПоШапкеДокумента = СформироватьЗапросПоШапкеДокумента().Выбрать();
		ВыборкаПоШапкеДокумента.Следующий();
		
		ВыборкаПоТЧРаботникиОрганизации = СформироватьЗапросПоТЧРаботникиОрганизации().Выбрать();
	
		Отказ = Ложь;
	
		Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
		
		ПроверкаЗаполненияШапкиДокумента(ВыборкаПоШапкеДокумента, Отказ, Заголовок);
		
		Пока ВыборкаПоТЧРаботникиОрганизации.Следующий() Цикл
		
			ПроверитьЗаполнениеСтрокиТЧРаботникиОрганизации(ВыборкаПоТЧРаботникиОрганизации, Отказ, Заголовок);
		
		КонецЦикла; 
		
		Если Отказ Тогда
	
			ОбработкаКомментариев.ПоказатьСообщения();
			
			Возврат Неопределено;
	
		КонецЕсли; 
		
		ВыборкаПоТЧРаботникиОрганизации.Сбросить();
		
		ТабДокумент = Новый ТабличныйДокумент;
		
		ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявлениеВФССПогребение";
		
		ТабДокумент.ПолеСверху 	= 2;
		ТабДокумент.ПолеСлева 	= 10;
		ТабДокумент.ПолеСнизу 	= 2;
		ТабДокумент.ПолеСправа 	= 5;
		
		ТабДокумент.АвтоМасштаб = Истина;
		
		Макет = ПолучитьМакет(ИмяМакета);
		
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		
		ДлиныСтрок = Новый Массив();
		ДлиныСтрок.Добавить(27);
			
		НаПечатьНаименованиеТерриториальногоОрганаФСС = ОбменСведениямиОПособияхСФСС.РазбитьСтрокуНаПодСтроки(ВыборкаПоШапкеДокумента.НаименованиеТерриториальногоОрганаФСС, ДлиныСтрок);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НаПечатьНаименованиеТерриториальногоОрганаФСС, ОбластьШапка, "НаименованиеФСС_", 135);
		
			
		НаПечатьОрганизация = ВыборкаПоШапкеДокумента.ОрганизацияНаименование;
		
		НаПечатьОрганизация = ОбменСведениямиОПособияхСФСС.РазбитьСтрокуНаПодСтроки(НаПечатьОрганизация, ДлиныСтрок);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НаПечатьОрганизация, ОбластьШапка, "Страхователь_", 81);
		
		ТабДокумент.Вывести(ОбластьШапка);
		
		Пока ВыборкаПоТЧРаботникиОрганизации.Следующий() Цикл
		
			Если ВыборкаПоТЧРаботникиОрганизации.НомерСтроки > 1 Тогда
			
				ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			
				ТабДокумент.Вывести(ОбластьСтрока);
			
			КонецЕсли; 
		
			НПП = Формат(ВыборкаПоТЧРаботникиОрганизации.НомерСтроки, "ЧЦ=2");
			
			НПП = Лев("  ", 2 - СтрДлина(НПП)) + НПП;
			
			ДлиныСтрок = Новый Массив();
			ДлиныСтрок.Добавить(28);
			
			ФИО = ОбменСведениямиОПособияхСФСС.РазбитьСтрокуНаПодСтроки(ОбщегоНазначения.ФамилияИнициалыФизЛица(ВыборкаПоТЧРаботникиОрганизации.ФИОСотрудника), ДлиныСтрок);
			
			Статус = ВыборкаПоТЧРаботникиОрганизации.Статус;
			
			РазмерПособия = Формат(ВыборкаПоТЧРаботникиОрганизации.РазмерПособия, "ЧЦ=15; ЧДЦ=2; ЧН=; ЧГ=");
			
			РазмерПособия = Лев("        ", 8 - СтрДлина(РазмерПособия)) + РазмерПособия;
			
			ПерваяСтрокаВыводилась = Ложь;
			
			Пока СтрДлина(ФИО) > 0 ИЛИ НЕ ПерваяСтрокаВыводилась Цикл
				
				ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
				
				Если НЕ ПерваяСтрокаВыводилась Тогда
					
					ПерваяСтрокаВыводилась = Истина;
					
					ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(НПП, ОбластьСтрока, "НПП_", 2);
					
					ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(РазмерПособия, ОбластьСтрока, "РазмерПособия_", 8);
					
					ОбластьСтрока.Области["Статус"].Текст = Статус;
				
				КонецЕсли;
				
				Если СтрДлина(ФИО) <= 28 Тогда
				
					СтрокаФИО = ФИО;
					
					ФИО = "";
				
				Иначе
				
					СтрокаФИО = Лев(ФИО, 28);
					
					ФИО = Сред(ФИО, 29);
				
				КонецЕсли;
				
				ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрокаФИО, ОбластьСтрока, "ФИОПолучателя_", 28);
				
				ТабДокумент.Вывести(ОбластьСтрока);
				
			КонецЦикла;
			
		КонецЦикла;
		
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		ИтогоРазмерПособия = РаботникиОрганизации.Итог("РазмерПособия");
		
		СтрокаИтогоРазмерПособия = Формат(ИтогоРазмерПособия, "ЧДЦ=2; ЧН=; ЧГ=");
		
		СтрокаИтогоРазмерПособия = Лев("        ", 8 - СтрДлина(СтрокаИтогоРазмерПособия)) + СтрокаИтогоРазмерПособия; 
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрокаИтогоРазмерПособия, ОбластьПодвал, "ИтогоРазмерПособия_", 8);
		
		Рубли = Формат(Цел(ИтогоРазмерПособия), "ЧН=; ЧГ=");
		
		Рубли = Лев("        ", 8 - СтрДлина(Рубли)) + Рубли;
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Рубли, ОбластьПодвал, "ИтогоРазмерПособияРубли_", 8);
		
		Копейки = Формат((ИтогоРазмерПособия - Цел(ИтогоРазмерПособия)) * 100, "ЧЦ=2; ЧН=; ЧВН=");
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Копейки, ОбластьПодвал, "ИтогоРазмерПособияКопейки_", 2);
		
		СтрокаКоличествоСтраниц = Формат(ВыборкаПоШапкеДокумента.КоличествоСтраниц, "ЧЦ=2");
		
		СтрокаКоличествоСтраниц = Лев("  ", 2 - СтрДлина(СтрокаКоличествоСтраниц)) + СтрокаКоличествоСтраниц;
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(СтрокаКоличествоСтраниц, ОбластьПодвал, "КоличествоСтраниц_", 2);
		
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.РегистрационныйНомерФСС, ОбластьПодвал, "РегистрационныйНомерФСС_", 10);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.ДополнительныйКодФСС, ОбластьПодвал, "ДополнительныйКодФСС_", 10);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.КодПодчиненностиФСС, ОбластьПодвал, "КодПодчиненностиФСС_", 5);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.ИНН, ОбластьПодвал, "ИНН_", 12);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.КПП, ОбластьПодвал, "КПП_", 9);
		
		ДлиныСтрок = Новый Массив();
		ДлиныСтрок.Добавить(24);
		ДлиныСтрок.Добавить(43);
		ДлиныСтрок.Добавить(43);
			
		Адрес = ОбменСведениямиОПособияхСФСС.РазбитьСтрокуНаПодСтроки(УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(ВыборкаПоШапкеДокумента.АдресОрганизации), ДлиныСтрок);
		ДлинаАдреса = ?(ОбластьПодвал.Области.Найти("Адрес_68") = Неопределено, 67, 110);
		ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(Адрес, ОбластьПодвал, "Адрес_", ДлинаАдреса);
		
		Если ОбластьПодвал.Области.Найти("Банк_1") <> Неопределено Тогда
			
			ДлиныСтрок = Новый Массив();
			ДлиныСтрок.Добавить(35);
			ДлиныСтрок.Добавить(43);
			
			МассивНаименованиеБанка = ОбменСведениямиОПособияхСФСС.РазбитьСтрокуНаПодСтроки(ВыборкаПоШапкеДокумента.НаименованиеБанка, ДлиныСтрок);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(МассивНаименованиеБанка, ОбластьПодвал, "Банк_", 78);
			
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.НомерСчета, ОбластьПодвал, "Счет_", 20);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.БИКБанка, ОбластьПодвал, "БИК_", 9);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.КоррСчетБанка, ОбластьПодвал, "КорСчет_", 20);
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.НомерЛицевогоСчета, ОбластьПодвал, "ЛицСчет_", 12);
			
		КонецЕсли;
		
		Если ОбластьПодвал.Области.Найти("Тел_1") <> Неопределено Тогда
			ФормированиеПечатныхФормЗК.ВывестиДанныеПоБуквенно(ВыборкаПоШапкеДокумента.ТелефонСоставителя, ОбластьПодвал, "Тел_", 20);
		КонецЕсли;
		
		ОбластьПодвал.Области["ДолжностьФИОРуководителя"].Текст = "" + ВыборкаПоШапкеДокумента.ДолжностьРуководителя + ", " + ВыборкаПоШапкеДокумента.ФИОРуководителя;
		
		ТабДокумент.Вывести(ОбластьПодвал);
		
		Возврат УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляров, НаПринтер, "Заявление о возмещении расходов",,ТабДокумент);
		
	КонецЕсли;
	
КонецФункции // Печать() 

#КонецЕсли

// Процедура заполняет табличную часть "РаботникиОрганизации"
//			Предварительно ее очистив.
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
Процедура Автозаполнение() Экспорт

	РаботникиОрганизации.Очистить();
	
	ДатаПередачиФССВыплатыПособий = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ДатаПередачиФССВыплатыПособий");
	
	Запрос = Новый Запрос;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребениеРаботникиОрганизации.Ссылка КАК Ссылка,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребениеРаботникиОрганизации.ДокументОснование КАК ДокументОснование,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребениеРаботникиОрганизации.Сотрудник КАК Сотрудник
	|ПОМЕСТИТЬ ВТПереданныеПособия
	|ИЗ
	|	Документ.ЗаявлениеВФССОВозмещенииРасходовНаПогребение.РаботникиОрганизации КАК ЗаявлениеВФССОВозмещенииРасходовНаПогребениеРаботникиОрганизации
	|ГДЕ
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребениеРаботникиОрганизации.Ссылка.Проведен
	|	И ЗаявлениеВФССОВозмещенииРасходовНаПогребениеРаботникиОрганизации.Ссылка <> &Ссылка
	|	И ЗаявлениеВФССОВозмещенииРасходовНаПогребениеРаботникиОрганизации.Ссылка.Организация = &Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПособияСоциальномуСтрахованию.Сотрудник,
	|	ПособияСоциальномуСтрахованию.Сотрудник.Физлицо КАК Физлицо,
	|	ПособияСоциальномуСтрахованию.ДокументОснование,
	|	ПособияСоциальномуСтрахованию.СуммаВсего КАК РазмерПособия
	|ИЗ
	|	РегистрНакопления.ПособияСоциальномуСтрахованию КАК ПособияСоциальномуСтрахованию
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТПереданныеПособия КАК РанееВведенныеДокументы
	|		ПО ПособияСоциальномуСтрахованию.Сотрудник = РанееВведенныеДокументы.Сотрудник
	|			И ПособияСоциальномуСтрахованию.ДокументОснование = РанееВведенныеДокументы.ДокументОснование
	|ГДЕ
	|	ПособияСоциальномуСтрахованию.ВидПособияСоциальногоСтрахования = ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью)
	|	И РанееВведенныеДокументы.Ссылка ЕСТЬ NULL 
	|	И ПособияСоциальномуСтрахованию.Период >= &ДатаПередачиФССВыплатыПособий
	|	И ПособияСоциальномуСтрахованию.Организация = &Организация";
	
	Запрос.УстановитьПараметр("ДатаПередачиФССВыплатыПособий", ДатаПередачиФССВыплатыПособий);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
	
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = РаботникиОрганизации.Добавить();
		
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		КонецЦикла; 
	
	КонецЕсли; 

КонецПроцедуры // Автозаполнение()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Собирает сведения по щапке документа для вывода напечать и проверки заполнения
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СформироватьЗапросПоШапкеДокумента()

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.Ссылка,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.Номер,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.Дата,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.Организация,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.НаименованиеТерриториальногоОрганаФСС,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.РегистрационныйНомерФСС,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.ДополнительныйКодФСС,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.КодПодчиненностиФСС,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.АдресОрганизации,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.Руководитель,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.ДолжностьРуководителя,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.КраткийСоставДокумента,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.КоличествоСтраниц,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.ТелефонСоставителя,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.НаименованиеБанка,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.НомерЛицевогоСчета,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.НомерСчета,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.БИКБанка,
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.КоррСчетБанка
	|ПОМЕСТИТЬ ВТДанныеДокумента
	|ИЗ
	|	Документ.ЗаявлениеВФССОВозмещенииРасходовНаПогребение КАК ЗаявлениеВФССОВозмещенииРасходовНаПогребение
	|ГДЕ
	|	ЗаявлениеВФССОВозмещенииРасходовНаПогребение.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТДанныеДокумента.Ссылка,
	|	ВТДанныеДокумента.Номер,
	|	ВТДанныеДокумента.Дата,
	|	ВТДанныеДокумента.Организация КАК Организация,
	|	ВТДанныеДокумента.Организация.НаименованиеПолное КАК ОрганизацияНаименование,
	|	ВТДанныеДокумента.НаименованиеТерриториальногоОрганаФСС,
	|	ВТДанныеДокумента.РегистрационныйНомерФСС,
	|	ВТДанныеДокумента.ДополнительныйКодФСС,
	|	ВТДанныеДокумента.КодПодчиненностиФСС,
	|	ВТДанныеДокумента.АдресОрганизации,
	|	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ВТДанныеДокумента.Руководитель.Наименование) КАК ФИОРуководителя,
	|	ВТДанныеДокумента.ДолжностьРуководителя,
	|	ВТДанныеДокумента.КраткийСоставДокумента,
	|	ВТДанныеДокумента.КоличествоСтраниц,
	|	ВТДанныеДокумента.Организация.ИНН КАК ИНН,
	|	ВТДанныеДокумента.Организация.КПП КАК КПП,
	|	ВТДанныеДокумента.НаименованиеБанка,
	|	ВТДанныеДокумента.НомерЛицевогоСчета,
	|	ВТДанныеДокумента.НомерСчета,
	|	ВТДанныеДокумента.БИКБанка,
	|	ВТДанныеДокумента.КоррСчетБанка,
	|	ВТДанныеДокумента.ТелефонСоставителя
	|ИЗ
	|	ВТДанныеДокумента КАК ВТДанныеДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	|				&Дата,
	|				ФизЛицо В
	|					(ВЫБРАТЬ
	|						ВТДанныеДокумента.Руководитель
	|					ИЗ
	|						ВТДанныеДокумента КАК ВТДанныеДокумента)) КАК ФИОФизЛицСрезПоследних
	|		ПО ВТДанныеДокумента.Руководитель = ФИОФизЛицСрезПоследних.ФизЛицо";

	
	// Установим параметры запроса
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Возврат Запрос.Выполнить();	

КонецФункции // СформироватьЗапросПоШапкеДокумента()

// Запрос по табличной части РаботникиОрганизации для вывода на печать и проверки корректности заполнения
//
// Параметры
//  <Параметр1>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//  <Параметр2>  - <Тип.Вид> - <описание параметра>
//                 <продолжение описания параметра>
//
// Возвращаемое значение:
//   <Тип.Вид>   - <описание возвращаемого значения>
//
Функция СформироватьЗапросПоТЧРаботникиОрганизации()

	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ЗаявлениеВФССОВозмещенииРасходовНаПогребениеРаботникиОрганизации.НомерСтроки,
	                      |	ЗаявлениеВФССОВозмещенииРасходовНаПогребениеРаботникиОрганизации.ФизЛицо,
	                      |	ЗаявлениеВФССОВозмещенииРасходовНаПогребениеРаботникиОрганизации.Статус,
	                      |	ЗаявлениеВФССОВозмещенииРасходовНаПогребениеРаботникиОрганизации.РазмерПособия
	                      |ПОМЕСТИТЬ ВТТЧРаботникиОрганизации
	                      |ИЗ
	                      |	Документ.ЗаявлениеВФССОВозмещенииРасходовНаПогребение.РаботникиОрганизации КАК ЗаявлениеВФССОВозмещенииРасходовНаПогребениеРаботникиОрганизации
	                      |ГДЕ
	                      |	ЗаявлениеВФССОВозмещенииРасходовНаПогребениеРаботникиОрганизации.Ссылка = &ДокументСсылка
	                      |;
	                      |
	                      |////////////////////////////////////////////////////////////////////////////////
	                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                      |	ВТТЧРаботникиОрганизации.НомерСтроки,
	                      |	ЕСТЬNULL(ФИОФизЛицСрезПоследних.Фамилия + "" "" + ФИОФизЛицСрезПоследних.Имя + "" "" + ФИОФизЛицСрезПоследних.Отчество, ВТТЧРаботникиОрганизации.ФизЛицо.Наименование) КАК ФИОСотрудника,
	                      |	ВТТЧРаботникиОрганизации.Статус,
	                      |	ВТТЧРаботникиОрганизации.РазмерПособия
	                      |ИЗ
	                      |	ВТТЧРаботникиОрганизации КАК ВТТЧРаботникиОрганизации
	                      |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизЛиц.СрезПоследних(
	                      |				&Дата,
	                      |				ФизЛицо В
	                      |					(ВЫБРАТЬ
	                      |						ВТТЧРаботникиОрганизации.ФизЛицо
	                      |					ИЗ
	                      |						ВТТЧРаботникиОрганизации КАК ВТТЧРаботникиОрганизации)) КАК ФИОФизЛицСрезПоследних
	                      |		ПО ВТТЧРаботникиОрганизации.ФизЛицо = ФИОФизЛицСрезПоследних.ФизЛицо");
	
	
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("Дата", Дата);
	
	Возврат Запрос.Выполнить();

КонецФункции // СформироватьЗапросПоТЧРаботникиОрганизации()
 
// Проверяет правильность заполнения шапки документа.
// Если какой-то из реквизитов шапки, влияющий на проведение, не заполнен или
// заполнен некорректно, то выставляется флаг отказа в проведении.
// Проверка выполняется по выборке из результата запроса по шапке,
//
// Параметры: 
//	ВыборкаПоШапкеДокумента	- выборка из результата запрос
//	Отказ 					- флаг отказа
//	Заголовок				- Заголовок для сообщений об ошибках
Процедура ПроверкаЗаполненияШапкиДокумента(ВыборкаПоШапкеДокумента, Отказ, Заголовок)

	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.Организация) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация!"), Отказ, Заголовок);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.АдресОрганизации) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указан адрес организации!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.НаименованиеТерриториальногоОрганаФСС) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указано наименование территориального органа ФСС!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.РегистрационныйНомерФСС) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указан регистрационный номер в ФСС!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КодПодчиненностиФСС) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не указан код подчиненности ФСС!", Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВыборкаПоШапкеДокумента.КоличествоСтраниц) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указано количество страниц!"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверкаЗаполненияШапкиДокумента()

// Проверяет заполненность полей табличной части "РаботникиОрганизации"
// Проверка ведется по строке выборки по табличной части
//
// Параметры
// Параметры: 
//	СтрокаВыборкиПоТЧРаботникиОрганизации	- выборка из результата запрос
//	Отказ 									- флаг отказа
//	Заголовок								- Заголовок для сообщений об ошибках
//
Процедура ПроверитьЗаполнениеСтрокиТЧРаботникиОрганизации(СтрокаВыборкиПоТЧРаботникиОрганизации, Отказ, Заголовок)

	ТекстОшибкиСНомеромСтроки = НСтр("ru='В строке номер %НомерСтроки% табличной части ""Работники организации"": '");
	ТекстОшибкиСНомеромСтроки = СтрЗаменить(ТекстОшибкиСНомеромСтроки, "%НомерСтроки%", СтрокаВыборкиПоТЧРаботникиОрганизации.НомерСтроки);
	
	Если Не ЗначениеЗаполнено(СтрокаВыборкиПоТЧРаботникиОрганизации.ФИОСотрудника) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса(ТекстОшибкиСНомеромСтроки + "Не указан сотрудник!"), Отказ, Заголовок);
	КонецЕсли;

	Если Не ЗначениеЗаполнено(СтрокаВыборкиПоТЧРаботникиОрганизации.Статус) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса(ТекстОшибкиСНомеромСтроки + "Не указан статус!"), Отказ, Заголовок);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаВыборкиПоТЧРаботникиОрганизации.РазмерПособия) Тогда
		ОбщегоНазначения.ВывестиИнформациюОбОшибке(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса(ТекстОшибкиСНомеромСтроки + "Не указан размер пособия!"), Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры // ПроверитьЗаполнениеСтрокиТЧРаботникиОрганизации()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	МассивТЧ = Новый Массив();
	МассивТЧ.Добавить(РаботникиОрганизации);

	КраткийСоставДокумента = ПроцедурыУправленияПерсоналом.ЗаполнитьКраткийСоставДокумента(МассивТЧ);
	
КонецПроцедуры