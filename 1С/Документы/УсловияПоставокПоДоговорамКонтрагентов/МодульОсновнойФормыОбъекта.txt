////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мКолонкиНоменклатураДоговора;
Перем мВалютаВзаиморасчетовДоговораНаименование;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.НоменклатураДоговора,ЭлементыФормы.КоманднаяПанельСпискаНоменклатура);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура формирует надпись валюты взаиморасчетов договора
//
Процедура СформироватьНадписьВалютыВзаиморасчетовДоговора()

	мВалютаВзаиморасчетовДоговора = ОпределитьВалютуВзаиморасчетовДоговора();
	Если ЗначениеЗаполнено(мВалютаВзаиморасчетовДоговора) Тогда
		мВалютаВзаиморасчетовДоговораНаименование = мВалютаВзаиморасчетовДоговора.НаименованиеПолное;
	Иначе
		мВалютаВзаиморасчетовДоговораНаименование = "";
	КонецЕсли; 
	
	Если НЕ ЗначениеЗаполнено(мВалютаВзаиморасчетовДоговора) Тогда
		ЭлементыФормы.ВалютаВзаиморасчетов.Заголовок = "Не определена валюта взаиморасчетов в договоре взаиморасчетов ...";
		ЭлементыФормы.ВалютаВзаиморасчетов.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
	Иначе
		ЭлементыФормы.ВалютаВзаиморасчетов.Заголовок = СокрЛП(мВалютаВзаиморасчетовДоговора) + " (" + СокрЛП(Строка(мВалютаВзаиморасчетовДоговораНаименование)) + ")";
		ЭлементыФормы.ВалютаВзаиморасчетов.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
	КонецЕсли;
	
	ОбновитьИтоговуюСумму();

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)
	Перем Номенклатура;
	Перем ХарактеристикаНоменклатуры;
	Перем Количество, КоличествоМест, ЕдиницаИзмерения;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"  ,   Номенклатура);
	ЗначениеВыбора.Свойство("Характеристика",   ХарактеристикаНоменклатуры);
	ЗначениеВыбора.Свойство("Количество",       Количество);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - продолжим; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("Номенклатура"              , Номенклатура);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения"          , ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", ХарактеристикаНоменклатуры);

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);

	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура               = Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = ХарактеристикаНоменклатуры;
		СтрокаТабличнойЧасти.Цена                       = ЗначениеВыбора.Цена;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения           = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.ВалютаЦены                 = ЗначениеВыбора.ВалютаЦены;
		СтрокаТабличнойЧасти.Количество                 = Количество;
		СтрокаТабличнойЧасти.Коэффициент                = ЗначениеВыбора.ЕдиницаИзмерения.Коэффициент;

		ЭлементыФормы.НоменклатураДоговора.ТекущаяСтрока = СтрокаТабличнойЧасти;

		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;

	ЭлементыФормы.НоменклатураДоговора.ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы.НоменклатураДоговора.ТекущаяКолонка = ЭлементыФормы.НоменклатураДоговора.Колонки["Количество"];
	
КонецПроцедуры // ОбработкаПодбора()

// Процедура обновляет надпись суммы в подвале формы
//
// Параметры:
//  НЕТ
//
Процедура ОбновитьИтоговуюСумму()

	Если НЕ ЗначениеЗаполнено(мВалютаВзаиморасчетовДоговора) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок  = "Не определена валюта взаиморасчетов в договоре";
		ЭлементыФормы.НадписьВсего.ЦветТекста = ЦветаСтиля.ТекстПредупреждающейНадписи;
		ЭлементыФормы.Всего.Значение = "";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок  = "Сумма всего, " + СокрЛП(мВалютаВзаиморасчетовДоговора) + ":";
		ЭлементыФормы.НадписьВсего.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
		ЭлементыФормы.Всего.Значение = ОбщегоНазначения.ФорматСумм(РассчитатьСуммуТЧ());
	КонецЕсли;

КонецПроцедуры

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)
	Перем Команда, Валюта;

	Если ДоговорКонтрагента.Пустая() Тогда
		Предупреждение("Выберите договор контрагента.");
		Возврат;
	КонецЕсли; 

	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
		Предупреждение("Для договора взаиморасчетов вида прочее, данный документ вводить нельзя.");
		Возврат;
	КонецЕсли; 

	ЕстьЦена  = Истина;
	ЕстьСерия = Истина;

	Команда = "ПодборВТабличнуюЧастьТовары";
	Валюта  = ДоговорКонтрагента.ВалютаВзаиморасчетов;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
		СписокЗапросов.Добавить("РасходЦеныНоменклатуры", "По ценам номенклатуры");
	Иначе
		СписокЗапросов.Добавить("ПриходЦеныКонтрагента", "По ценам контрагента");
		СписокЗапросов.Добавить("ПриходНоменклатураКонтрагента", "По номенклатуре контрагента");
	КонецЕсли; 

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"              , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"   , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                  , Неопределено);
	СтруктураПараметровПодбора.Вставить("ТипЦен"                 , ДоговорКонтрагента.ТипЦен);
	СтруктураПараметровПодбора.Вставить("Контрагент"             , ДоговорКонтрагента.Владелец);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"     , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Организация"            , Неопределено);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , Истина);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , Ложь);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"        , Истина);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Ложь);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"        , ДоговорКонтрагента.ВалютаВзаиморасчетов);
	СтруктураПараметровПодбора.Вставить("Заголовок"              , "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (Номенклатура условий договора)");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		ДатаНачала = НачалоГода(ТекущаяДата());
		ДатаОкончания = КонецГода(ТекущаяДата());
		Периодичность = Перечисления.Периодичность.Месяц;
		Ответственный = глЗначениеПеременной("глТекущийПользователь");
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.НоменклатураДоговора.Колонки, СтруктураКолонок);

	СформироватьНадписьВалютыВзаиморасчетовДоговора();

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиНоменклатураДоговора);

	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда, РезультатВыбора;
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(НоменклатураДоговора, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	
	ОбновитьИтоговуюСумму();
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	СуммаТЧ = РассчитатьСуммуТЧ();
	
	Если СуммаТЧ <> СуммаУсловийДоговора И НоменклатураДоговора.Количество() > 0 Тогда
	
		ОтветНаВорос = Вопрос("Итог сумм по табличной части не совпадает с суммой по документу. Скорректировать сумму документа?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		
		Если ОтветНаВорос = КодВозвратаДиалога.Да Тогда
			СуммаУсловийДоговора = СуммаТЧ;
		КонецЕсли; 
	
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы
//
Процедура ПослеЗаписи()
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" элемента формы Контрагент.
//
Процедура КонтрагентПриИзменении(Элемент)

	Если ЗначениеЗаполнено(Контрагент) Тогда
		Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) ИЛИ ДоговорКонтрагента.Владелец <> Контрагент Тогда
			Если ЗначениеЗаполнено(Контрагент.ОсновнойДоговорКонтрагента)
			  И Контрагент.ОсновнойДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями
			  И ЗначениеЗаполнено(Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора)
			  И Контрагент.ОсновнойДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
				ДоговорКонтрагента = Контрагент.ОсновнойДоговорКонтрагента;
			Иначе
				Сообщить("Основной договор контрагента НЕ вида ""С покупателем"" или ""С поставщиком"" и с признаком дополнительных условий, выберите договор самостоятельно.");
				ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			КонецЕсли; 
		КонецЕсли; 
	Иначе
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли; 

	СформироватьНадписьВалютыВзаиморасчетовДоговора();

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" элемента формы НоменклатураПоставки.Номенклатура.
//
Процедура НоменклатураДоговораНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И (ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) Тогда

		СтрокаТабличнойЧасти = ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные;

		РаботаСДиалогами.НачалоВыбораНоменклатурыКонтрагента(Элемент, СтандартнаяОбработка, Контрагент, СтрокаТабличнойЧасти.Номенклатура);

	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы НоменклатураПоставки.Цена.
//
Процедура НоменклатураДоговораЦенаПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы НоменклатураПоставки.Количество.
//
Процедура НоменклатураДоговораКоличествоПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы НоменклатураПоставки.Сумма.
//
Процедура НоменклатураДоговораСуммаПриИзменении(Элемент)
	
	Если ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные <> Неопределено Тогда
		ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные.Цена = ?(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные.Количество <> 0, (Элемент.Значение / ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные.Количество), 0);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы НоменклатураПоставки.КоличествоМест.
//
Процедура НоменклатураДоговораКоличествоМестПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" элемента формы НоменклатураДоговора.
//
Процедура НоменклатураДоговораПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиНоменклатураДоговора, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиНоменклатураДоговора, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы НоменклатураДоговора.ЕдиницаИзмерения.
//
Процедура НоменклатураДоговораЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "НоменклатураДоговора".
Процедура НоменклатураДоговораЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы НоменклатураДоговора.Номенклатура.
//
Процедура НоменклатураДоговораНоменклатураПриИзменении(Элемент)
	
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные, ЭтотОбъект);
	Если НЕ Элемент.Значение.Пустая() И ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные.ЕдиницаИзмерения.Пустая() Тогда
		ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные.ЕдиницаИзмерения = Элемент.Значение.ЕдиницаХраненияОстатков;
		ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные.Коэффициент      = ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные.ЕдиницаИзмерения.Коэффициент;
		ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные, ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" элемента формы НоменклатураДоговора.Номенклатура.
//
Процедура НоменклатураДоговораНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ Элемент.Значение.Пустая() И ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные.ЕдиницаИзмерения.Пустая() И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные.ЕдиницаИзмерения = ВыбранноеЗначение.ЕдиницаХраненияОстатков;
		ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.НоменклатураДоговора.ТекущиеДанные, ЭтотОбъект);
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы ДоговорКонтрагента.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(Контрагент) Тогда
		Контрагент = ДоговорКонтрагента.Владелец;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.ПустаяСсылка()
		 ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее
		 ИЛИ ДоговорКонтрагента.ВидУсловийДоговора <> Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями Тогда
			Сообщить("Можно выбирать только договора вида ""С покупателем"" или ""С поставщиком"" и с признаком дополнительных условий");
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли; 
	КонецЕсли; 

	СформироватьНадписьВалютыВзаиморасчетовДоговора();

КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы КоманднаяПанельСпискаНоменклатура.Подбор.
//
Процедура КоманднаяПанельСпискаНоменклатураПодбор(Кнопка)

	ДействиеПодбор(НоменклатураДоговора);

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" элемента формы НоменклатураДоговора.
//
Процедура НоменклатураДоговораПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока И НЕ ДоговорКонтрагента.Пустая() Тогда
		Элемент.ТекущиеДанные.ВалютаЦены = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" элемента формы КоманднаяПанельСпискаНоменклатура.УстановитьОбщуюСумму.
//
Процедура КоманднаяПанельСпискаНоменклатураУстановитьОбщуюСумму(Кнопка)
	
	СуммаУсловийДоговора = РассчитатьСуммуТЧ();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура разрешения/запрещения редактирования номера документа.
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается по кнопке Анализ.
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыАнализ(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли; 
	
	УправлениеКонтактами.СформироватьАнализУсловийДоговораВзаиморасчетов(глЗначениеПеременной("глТекущийПользователь"), Ссылка);
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" элемента формы Дата
//
Процедура ДатаПриИзменении(Элемент)
	мСоответствиеКурсовВалют.Очистить();
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиНоменклатураДоговора = ЭлементыФормы.НоменклатураДоговора.Колонки;