////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мСписокКодовЕСНОсновныхНачислений;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики налоговому учету
Перем мМассивЭУЕНВД;

// список способов отражения в бухучете, которые нельзя выбирать, для предустановки отбора
Перем мСписокНедоступныхСпособовБухучета;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,		ЭлементыФормы.КоманднаяПанельОсновныеНачисления);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

//Функция очищает табличную часть ОсновныеНачисления, задав вопрос пользователю
// Возвращает Истина если табличная часть очищена
Функция ОчиститьОсновныеНачисленияПередВыполнениемДействия()

	Если ОсновныеНачисления.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;

	Возврат Истина;

КонецФункции


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);

	КонецЕсли;
	
	ЭлементыФормы.ДокументОснование.КнопкаОткрытия = ЗначениеЗаполнено(ДокументОснование);
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ВидРасчета");

	// Установить ограничение - изменять видимость колонок 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОсновныеНачисления.Колонки, СтруктураКолонок);

	мСписокКодовЕСНОсновныхНачислений = Новый СписокЗначений;
	мСписокКодовЕСНОсновныхНачислений.Добавить(Справочники.ДоходыЕСН.ВыплатыЗаСчетПрибыли);
	мСписокКодовЕСНОсновныхНачислений.Добавить(Справочники.ДоходыЕСН.ДоговораАвторские);
	мСписокКодовЕСНОсновныхНачислений.Добавить(Справочники.ДоходыЕСН.ДоговораГПХ);
	мСписокКодовЕСНОсновныхНачислений.Добавить(Справочники.ДоходыЕСН.ПособияЗаСчетФСС);
	мСписокКодовЕСНОсновныхНачислений.Добавить(Справочники.ДоходыЕСН.НеОблагаетсяЦеликом);
	мСписокКодовЕСНОсновныхНачислений.Добавить(Справочники.ДоходыЕСН.НеЯвляетсяОбъектом);
	мСписокКодовЕСНОсновныхНачислений.Добавить(Справочники.ДоходыЕСН.ОблагаетсяЦеликом);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	мМассивЭУЕНВД = Новый Массив();
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ОтнесениеРасходовКДеятельностиЕНВД);
	НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(Дата), Организация);
	БухгалтерскийУчетДополнительный.УстановитьВидимостьРеквизитовЕНВД(мМассивЭУЕНВД, Организация, Дата, глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"));
	
	Если Дата >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		ЭлементыФормы.ОсновныеНачисления.Колонки.КодДоходаЕСН.Видимость = Ложь
	КонецЕсли;
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.ОсновныеНачисления;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			ОсновныеНачисления.Загрузить(ЗначениеВыбора.Данные.Выгрузить())
		КонецЕсли;
	Иначе
		
		Если ОчиститьОсновныеНачисленияПередВыполнениемДействия() Тогда
			ОсновныеНачисления.Очистить();
			ЗаполнитьДокумент(ЗначениеВыбора);
			ЭлементыФормы.ДокументОснование.КнопкаОткрытия = Истина;
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	Оповестить("ИзмененоОтражениеПлановыхНачислений", ОсновныеНачисления.ВыгрузитьКолонку("Сотрудник"));
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если ОчиститьОсновныеНачисленияПередВыполнениемДействия() Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , Организация, );
	КонецЕсли;	

КонецПроцедуры // ДействияФормыЗаполнить()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()


// Процедура - обработчик события нажатия кнопки "Подбор"
//
Процедура КоманднаяПанельОсновныеНачисленияПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ОсновныеНачисления, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 5);
	
КонецПроцедуры // КоманднаяПанельОсновныеНачисленияПодбор()

Процедура ДействияФормыЗаполнитьПоДокументу(Кнопка)
	
	Если Не Организация.Пустая() Тогда
		Если ОчиститьОсновныеНачисленияПередВыполнениемДействия() Тогда
			ФормаВыбора = Документы[Кнопка.Имя].ПолучитьФормуВыбора( , ЭтаФорма, Ссылка);
			ФормаВыбора.Отбор.Организация.Установить(Организация);
			ФормаВыбора.Открыть();
		КонецЕсли;
	Иначе
		Предупреждение("Не выбрана организация!", 10);
		ТекущийЭлемент = ЭлементыФормы.Организация;
	КонецЕсли;
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;
	
	НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(Дата), Организация);
	БухгалтерскийУчетДополнительный.УстановитьВидимостьРеквизитовЕНВД(мМассивЭУЕНВД, Организация, Дата, глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"));

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(Дата), Организация);
	БухгалтерскийУчетДополнительный.УстановитьВидимостьРеквизитовЕНВД(мМассивЭУЕНВД, Организация, Дата, глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"));
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ДокументОснованиеОчистка(Элемент, СтандартнаяОбработка)
	
	Если Не Элемент.Значение = Неопределено и ОсновныеНачисления.Количество()>0 Тогда
		ТекстВопроса = "Удаляется документ основание. Очистить табличную часть?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ОсновныеНачисления.Очистить();
	
	КонецЕсли;	
	
	Элемент.КнопкаОткрытия = Ложь;
	
КонецПроцедуры

Процедура ДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не Организация.Пустая() Тогда
		
		СписокДляВыбора = Новый СписокЗначений;
		СписокДляВыбора.Добавить(Документы.ВводСведенийОПлановыхНачисленияхРаботниковОрганизаций,"Ввод сведений о плановых начислениях сотрудников организаций");
		СписокДляВыбора.Добавить(Документы.ПриемНаРаботуВОрганизацию,"Прием на работу в организацию");
		СписокДляВыбора.Добавить(Документы.КадровоеПеремещениеОрганизаций,"Кадровое перемещение организаций");
		
		ЭлементСписка = ВыбратьИзСписка(СписокДляВыбора,Элемент,);
		
		Если Не ЭлементСписка = Неопределено Тогда
			ФормаВыбора = ЭлементСписка.Значение.ПолучитьФормуВыбора( , ЭтаФорма, Ссылка);
			ФормаВыбора.Отбор.Организация.Установить(Организация);
			ФормаВыбора.ПараметрТекущаяСтрока	= ?(ТипЗнч(ЭлементСписка.Значение.ПустаяСсылка()) = ТипЗнч(Элемент.Значение), Элемент.Значение, Неопределено);
			ФормаВыбора.Открыть();
		КонецЕсли;	
		
	Иначе
		
		Предупреждение("Не выбрана организация!", 10);
		ТекущийЭлемент = ЭлементыФормы.Организация;
		
	КонецЕсли;
		
КонецПроцедуры // ДокументОснованиеНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура ОсновныеНачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ОсновныеНачисления.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		НоваяСтрока = ОсновныеНачисления.Добавить();
		НоваяСтрока.Сотрудник = ВыбранноеЗначение;
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияОбработкаВыбора()

// Процедура - обработчик события "ПриПолученииДанных" 
//
Процедура ОсновныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ОсновныеНачисления, ОформленияСтрок);
	
КонецПроцедуры // ОсновныеНачисленияПриПолученииДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОснНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 5, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОснНачисленияСотрудникНачалоВыбора()

Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры

Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры

Процедура ОсновныеНачисленияКодДоходаЕСННачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = ВыбратьИзСписка(мСписокКодовЕСНОсновныхНачислений,Элемент,мСписокКодовЕСНОсновныхНачислений.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияКодДоходаЕСННачалоВыбора()

Процедура ОсновныеНачисленияОтнесениеРасходовКДеятельностиЕНВДНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокРасходовЕНВДН = Новый СписокЗначений;
	ЭтоЕНВД = РаботаСДиалогамиДополнительный.СтатьяЗатратСпособаОтраженияОтноситсяКЕНВД(ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока.СпособОтраженияВБухучете);
	Если ЭтоЕНВД = Неопределено или ЭтоЕНВД = NULL Тогда
		СписокРасходовЕНВДН.Добавить(Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД);
		СписокРасходовЕНВДН.Добавить(Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД);
	ИначеЕсли ЭтоЕНВД Тогда
		СписокРасходовЕНВДН.Добавить(Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД);
	Иначе
		СписокРасходовЕНВДН.Добавить(Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД);
	КонецЕсли;
		
	ЭлементСписка = ВыбратьИзСписка(СписокРасходовЕНВДН,Элемент,СписокРасходовЕНВДН.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеНачисленияСпособОтраженияВБухучетеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПолучитьФормуВыбора(,Элемент,Ссылка);
	ФормаВыбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение =  мСписокНедоступныхСпособовБухучета;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ОсновныеНачисленияСпособОтраженияВБухучетеПриИзменении(Элемент)
	
	//проверим способ отражения, нельзя выбирать способ отражения с незаполненными счетами	
	ВыборкаСпособаОтражения = БухгалтерскийУчетДополнительный.ПолучитьХарактеристикуСпособаОтражения(Элемент.Значение);
	
	Если ВыборкаСпособаОтражения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ХорошийСпособОтражени = Истина;
	Если ВыборкаСпособаОтражения.Следующий() и Не ВыборкаСпособаОтражения.СчетВыбран Тогда
		СтрокаСообщения = "В способе отражения не задан счет дебета и/или кредита!";
		ХорошийСпособОтражени = Ложь;
	КонецЕсли;
	
	Если Не ХорошийСпособОтражени Тогда
		Предупреждение(СтрокаСообщения,5,);
		Элемент.Значение = Справочники.СпособыОтраженияЗарплатыВРеглУчете.ПустаяСсылка();
	Иначе 
		//уточним отнесение к ЕНВД
		ЭтоЕНВД = РаботаСДиалогамиДополнительный.СтатьяЗатратСпособаОтраженияОтноситсяКЕНВД(Элемент.Значение);
		Если ЭтоЕНВД = Неопределено или ЭтоЕНВД = NULL Тогда
			// по способу отражения не удалось однозначно определить отнесение к ЕНВД или
			// задан способ отражения с пустыми счетами
		ИначеЕсли ЭтоЕНВД Тогда
			ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКЕНВД;
		Иначе
			ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока.ОтнесениеРасходовКДеятельностиЕНВД = Перечисления.ОтнесениеРасходовКДеятельностиЕНВД.РасходыОтносятсяКнеЕНВД;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мСписокНедоступныхСпособовБухучета = Новый СписокЗначений;
мСписокНедоступныхСпособовБухучета.Добавить(Справочники.СпособыОтраженияЗарплатыВРеглУчете.РаспределятьПоБазовымНачислениям);
мСписокНедоступныхСпособовБухучета.Добавить(Справочники.СпособыОтраженияЗарплатыВРеглУчете.НеОтражатьВБухучете);
мСписокНедоступныхСпособовБухучета.Добавить(Справочники.СпособыОтраженияЗарплатыВРеглУчете.БольничныйЗаСчетРаботодателя);