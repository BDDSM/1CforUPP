Перем ДокументВводитсяНаОснованииПотоком;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Устанавливает внешний вид экранной формы в зависимости от Вида операции
//
Процедура УстановитьВидимость()

	Если ВидОперации=Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.внешняя Тогда
		ЭлементыФормы.СертифицирующееПодразделение.Видимость=ложь;
		ЭлементыФормы.НадписьСертифицирующееПодразделение.Видимость=ложь;
		ЭлементыФормы.ОрганПоСертификации.Видимость=истина;
		ЭлементыФормы.НадписьОрганСертификации.Видимость=истина;
		ЭлементыФормы.Склад.Доступность=Ложь;
	Иначе
		ЭлементыФормы.СертифицирующееПодразделение.Видимость=истина;
		ЭлементыФормы.НадписьСертифицирующееПодразделение.Видимость=истина;
		ЭлементыФормы.ОрганПоСертификации.Видимость=ложь;
		ЭлементыФормы.НадписьОрганСертификации.Видимость=ложь;
		ЭлементыФормы.Склад.Доступность=Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)
	
	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры[Кнопка.Имя];
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	
	Если ВидОперации=Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.внешняя Тогда
		Склад = Справочники.Склады.ПустаяСсылка();
		СертифицирующееПодразделение = Справочники.Подразделения.ПустаяСсылка();
	Иначе
		ОрганПоСертификации = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю из меню "Перейти".
// командной панели формы.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
// 
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)

	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события ПередОткрытием формы
// 
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	Отказ = Не УправлениеСертификациейНоменклатуры.ИспользоватьСертификациюНоменклатуры(Истина);
	
	ДокументВводитсяНаОснованииПотоком = ложь;
	Если ЗначениеЗаполнено(ДокументОприходования) и ЭтотОбъект.ЭтоНовый() Тогда
	    НужнаВнутренняяСертификация = Истина;
		НужнаВнешняяСертификация    = Истина;

		Если ТипЗнч(ДокументОприходования) = Тип("ДокументСсылка.ПоступлениеТоваровУслуг") Тогда
			ТабличнаяЧастьОснования     = ДокументОприходования.Товары;
		ИначеЕсли ТипЗнч(ДокументОприходования) = Тип("ДокументСсылка.ОтчетПроизводстваЗаСмену") Тогда
			ТабличнаяЧастьОснования     = ДокументОприходования.Продукция;
		КонецЕсли;
		
		Если не УправлениеСертификациейНоменклатуры.ВыбратьСериюИзДокументаОснования(ТабличнаяЧастьОснования, НужнаВнешняяСертификация, НужнаВнутренняяСертификация, Номенклатура, СерияНоменклатуры, "Заявка") Тогда
			Отказ = истина;
			Возврат;
		КонецЕсли;
		
		//считаем, что истину содержит один и только один из флагов,
		//поскольку пользователь выбирает ровно одну строку, а для каждой строки
		//явно определен вид сертификации
		Если не НужнаВнутренняяСертификация Тогда
			ВидОперации = Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.внешняя;
		Иначе
			ВидОперации = Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.внутренняя;
		КонецЕсли;
		НормативныйДокумент=УправлениеСертификациейНоменклатуры.ПолучитьНормативныйДокумент(Номенклатура);
		ДокументВводитсяНаОснованииПотоком = истина;
		
	ИначеЕсли  ЭтотОбъект.ЭтоНовый() Тогда
	
		ВидОперации=Перечисления.ВидыОперацийЗаявкаНаСертификациюНоменклатуры.внешняя;
		
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события ПриОткрытии формы
// 
Процедура ПриОткрытии()
	
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	КонецЕсли;
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
		ВидОперации.Метаданные().ЗначенияПеречисления,
		Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	УстановитьВидимость();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Потоковый ввод на основании
//
Процедура ПриЗакрытии()

	Если ДокументВводитсяНаОснованииПотоком И Проведен Тогда
		НоваяЗаявкаНаСертификацию = Документы.ЗаявкаНаСертификациюНоменклатуры.СоздатьДокумент();
		НоваяЗаявкаНаСертификацию.ОбработкаЗаполнения(ДокументОприходования);
		ФормаНовойЗаявкиНаСертификацию =  НоваяЗаявкаНаСертификацию.ПолучитьФорму();
		ФормаНовойЗаявкиНаСертификацию.Открыть();
	КонецЕсли;
	
КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

Процедура НоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	НормативныйДокумент = УправлениеСертификациейНоменклатуры.ПолучитьНормативныйДокумент( ВыбранноеЗначение);
	
КонецПроцедуры // НоменклатураОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура СерияНоменклатурыПриИзменении(Элемент)

	НормативныйДокумент = УправлениеСертификациейНоменклатуры.ПолучитьНормативныйДокумент( Номенклатура, Элемент.Значение);
	
КонецПроцедуры // СерияНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры