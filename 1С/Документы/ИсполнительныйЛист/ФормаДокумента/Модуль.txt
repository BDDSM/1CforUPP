Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;


////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.Надпись4.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

Процедура УстановитьПочтовыйТарифПоУмолчанию()
	
	Если Не ЗначениеЗаполнено(Тариф) И ЗначениеЗаполнено(Организация) Тогда
		Тариф = РегистрыСведений.ТарифПочтовогоСбораОрганизации.Получить(Новый Структура("Организация",Организация)).Тариф;
	КонецЕсли;
	
КонецПроцедуры

Процедура УправлениеДоступностьюЭлементовФормы()
	
	ЭлементыФормы.ПанельПочтовыйБанковскийПеревод.Видимость = НЕ (СпособПеречисленияПоИсполнительномуЛисту = Перечисления.СпособыПеречисленийПоИсполнительномуЛисту.ЧерезКассуПлатежнымПоручением);
	
	Если СпособПеречисленияПоИсполнительномуЛисту = Перечисления.СпособыПеречисленийПоИсполнительномуЛисту.БанковскийПеревод Тогда
	
		ЭлементыФормы.ПанельПочтовыйБанковскийПеревод.ТекущаяСтраница = ЭлементыФормы.ПанельПочтовыйБанковскийПеревод.Страницы.БанковскийПеревод;
		
	Иначе
		
		ЭлементыФормы.ПанельПочтовыйБанковскийПеревод.ТекущаяСтраница = ЭлементыФормы.ПанельПочтовыйБанковскийПеревод.Страницы.ПочтовыйПеревод;
	
		ЭлементыФормы.Тариф.ТолькоПросмотр 					= ПочтовыйСборРассчитыватьПроцентом;
		ЭлементыФормы.ПроцентПочтовогоСбора.ТолькоПросмотр 	= НЕ ПочтовыйСборРассчитыватьПроцентом;
	
		ЭлементыФормы.Тариф.АвтоОтметкаНезаполненного 	= Не ЭлементыФормы.Тариф.ТолькоПросмотр;
		ЭлементыФормы.Тариф.ОтметкаНезаполненного 		= ЭлементыФормы.Тариф.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(Тариф);
	
	КонецЕсли;
	 
	ЭлементыФормы.ПроцентПочтовогоСбора.АвтоОтметкаНезаполненного 	= Не ЭлементыФормы.ПроцентПочтовогоСбора.ТолькоПросмотр;
	ЭлементыФормы.ПроцентПочтовогоСбора.ОтметкаНезаполненного 		= ЭлементыФормы.ПроцентПочтовогоСбора.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(ПроцентПочтовогоСбора);
	
	ЭлементыФормы.ПрожиточныйМинимум.АвтоОтметкаНезаполненного = СпособРасчетаУдержания = Перечисления.СпособыРасчетаУдержанийПоИЛ.КратноВеличинеПрожиточногоМинимума;
	ЭлементыФормы.ПрожиточныйМинимум.ОтметкаНезаполненного = ЭлементыФормы.ПрожиточныйМинимум.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(ПрожиточныйМинимум);
	
	ЭлементыФормы.Предел.ТолькоПросмотр = СпособРасчетаУдержания = Перечисления.СпособыРасчетаУдержанийПоИЛ.КратноВеличинеПрожиточногоМинимума;
	
КонецПроцедуры //УправлениеДоступностьюЭлементовФормы

Процедура ПодобратьУсловияПоНачислениюИздержек()
	
	Если ЭтоНовый() Тогда
	
		Если ЗначениеЗаполнено(Получатель) И ЗначениеЗаполнено(ДатаНачала) Тогда
		
			Запрос = Новый Запрос;
			
			Запрос.Текст =
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ИсполнительныйЛист.СпособПеречисленияПоИсполнительномуЛисту,
			|	ИсполнительныйЛист.ТарифБанкаНаДенежныеПереводы,
			|	ИсполнительныйЛист.ПочтовыйСборРассчитыватьПроцентом,
			|	ИсполнительныйЛист.Тариф,
			|	ИсполнительныйЛист.ПроцентПочтовогоСбора
			|ИЗ
			|	Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
			|ГДЕ
			|	ИсполнительныйЛист.Проведен
			|	И ИсполнительныйЛист.Физлицо = &Физлицо
			|	И ИсполнительныйЛист.Получатель = &Получатель
			|	И ИсполнительныйЛист.ДатаОкончания >= &ДатаНачала
			|
			|УПОРЯДОЧИТЬ ПО
			|	ИсполнительныйЛист.Дата УБЫВ";
			
			Запрос.УстановитьПараметр("Физлицо", Физлицо);
			Запрос.УстановитьПараметр("Получатель", Получатель);
			Запрос.УстановитьПараметр("ДатаНачала", КонецДня(ДатаНачала));
			
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
			
				Выборка = РезультатЗапроса.Выбрать();
				Выборка.Следующий();
				
				ЗаполнитьЗначенияСвойств(ЭтотОбъект, Выборка);
				
				УправлениеДоступностьюЭлементовФормы();
			
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры


// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));

		Если НЕ ЗначениеЗаполнено(ВидИсполнительногоДокумента) Тогда
			ВидИсполнительногоДокумента = ЭлементыФормы.ВидИсполнительногоДокумента.СписокВыбора[0];
			СпособРасчетаУдержания = Перечисления.СпособыРасчетаУдержанийПоИЛ.ПроцентомОтЗаработка;
			СпособПеречисленияПоИсполнительномуЛисту = Перечисления.СпособыПеречисленийПоИсполнительномуЛисту.ЧерезКассуПлатежнымПоручением;// Не рассчитывать
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
    // Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
    УстановитьЗаголовкиОрганизацийВФорме();
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	УстановитьПочтовыйТарифПоУмолчанию();
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 6, СтандартнаяОбработка, Элемент.Значение,, Истина);
	
КонецПроцедуры

Процедура ФизлицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, мГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 6, Текст, Организация, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 6, Текст, Организация, Истина);
	
КонецПроцедуры

Процедура ПолучательПриИзменении(Элемент)
	
	ПодобратьУсловияПоНачислениюИздержек();
	
КонецПроцедуры

Процедура ДатаНачалаПриИзменении(Элемент)
	
	ПодобратьУсловияПоНачислениюИздержек();
	
КонецПроцедуры

Процедура СпособРасчетаИЛПриИзменении(Элемент)
	Если СпособРасчетаУдержания = Перечисления.СпособыРасчетаУдержанийПоИЛ.КратноВеличинеПрожиточногоМинимума Тогда
		Предел = 0
	КонецЕсли;
	УправлениеДоступностьюЭлементовФормы();
КонецПроцедуры

Процедура СпособПеречисленияПоИсполнительномуЛистуПриИзменении(Элемент)
	
	Если СпособПеречисленияПоИсполнительномуЛисту = Перечисления.СпособыПеречисленийПоИсполнительномуЛисту.БанковскийПеревод ИЛИ
		СпособПеречисленияПоИсполнительномуЛисту = Перечисления.СпособыПеречисленийПоИсполнительномуЛисту.ЧерезКассуПлатежнымПоручением Тогда
	
		ПочтовыйСборРассчитыватьПроцентом = Ложь;
		
	Иначе
		
		УстановитьПочтовыйТарифПоУмолчанию();
	
	КонецЕсли;
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

Процедура ПочтовыйСборРассчитыватьПроцентомПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры