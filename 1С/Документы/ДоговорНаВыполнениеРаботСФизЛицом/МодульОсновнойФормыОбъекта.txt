////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента;				// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мДеревоМакетов;						// Хранит дерево макетов печатных форм
Перем мПодменюПечати;						// Хранит элемент управления подменю печати
Перем мПечатьПоУмолчанию;					// Хранит элемент управления кнопку печать по умолчанию
Перем мКнопкиЗаполненияТЧ;					// Хранит дерево кнопок подменю заполнение ТЧ

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

Перем мСписокАвторскихВознаграждений; // Хранит авторские вознаграждения
Перем мСписокВыбораВычетов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ


Процедура УправлениеДоступностью()

	ЭлементыФормы.ПанельДопУсловий.ТекущаяСтраница = ?(ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудРаботающихВСтудотряде") И ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда, ЭлементыФормы.ПанельДопУсловий.Страницы.СтраницаСтудОтрядов, ЭлементыФормы.ПанельДопУсловий.Страницы.СтраницаАвторских);
	
	ПоказыватьВидАвторскогоДоговора = ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский;
	ЭлементыФормы.НадписьВидАвторскогоДоговора.Доступность = ПоказыватьВидАвторскогоДоговора;
	ЭлементыФормы.ВидАвторскогоДоговора.Доступность = ПоказыватьВидАвторскогоДоговора;
	ЭлементыФормы.ВидАвторскогоДоговора.АвтоОтметкаНезаполненного = ПоказыватьВидАвторскогоДоговора;
	ЭлементыФормы.ВидАвторскогоДоговора.ОтметкаНезаполненного = ПоказыватьВидАвторскогоДоговора И ВидАвторскогоДоговора.Пустая();
	
КонецПроцедуры

// Процедура обрабатывает изменение сотрудника
Процедура ОбработатьИзменениеСотрудника()

	ЗаполнитьЗначенияСвойств(ЭтотОбъект,Сотрудник,"ВидДоговора,ФизЛицо");
	Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
		Если ВидАвторскогоДоговора.Пустая() Тогда
			ВидАвторскогоДоговора = Перечисления.ВидыАвторскогоДоговора.АвторскогоЗаказа	
		КонецЕсли;
		Если ВидАвторскогоДоговора = Перечисления.ВидыАвторскогоДоговора.АвторскогоЗаказа Тогда
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.АвторскийДоговор;
		ИначеЕсли ВидАвторскогоДоговора = Перечисления.ВидыАвторскогоДоговора.Лицензионный Тогда
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ЛицензионныйДоговор;
		Иначе
			ВидРасчета = "";
		КонецЕсли;
	ИначеЕсли ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда Тогда
		ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ДоговорПодряда;
	КонецЕсли;
	УправлениеДоступностью();
	ПроведениеРасчетов.ЗаполнитьСпискиКодовДоходовВычетовПоДоговорам(мСписокВыбораВычетов,мСписокАвторскихВознаграждений,ВидДоговора,ВидАвторскогоДоговора);
	КодВычета = Справочники.ВычетыНДФЛ.ПустаяСсылка();

КонецПроцедуры // ОбработатьИзменениеСотрудника()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	ЭлементыФормы.ПодразделениеОрганизации.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Подразделение организации");
	
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	ДоговорНаВыполнениеРаботСФизЛицомПереопределяемый.ОформитьКоманднуюПанельФормы(ЭлементыФормы.ДействияФормы);
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если Не ЗначениеЗаполнено(ХарактерОплаты) Тогда
			ХарактерОплаты = Перечисления.ХарактерВыплатыПоДоговору.ОднократноВКонцеСрока
		КонецЕсли;
		Если ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский И ВидАвторскогоДоговора.Пустая() Тогда
			ВидАвторскогоДоговора = Перечисления.ВидыАвторскогоДоговора.АвторскогоЗаказа
		КонецЕсли;
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;	
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.ПодменюДействия,ЭлементыФормы.Номер);

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.ВалютаДокумента);
	мМассивЭУ.Добавить(ЭлементыФормы.НадписьВалютаДокумента);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

	ПроведениеРасчетов.ЗаполнитьСпискиКодовДоходовВычетовПоДоговорам(мСписокВыбораВычетов,мСписокАвторскихВознаграждений,ВидДоговора,ВидАвторскогоДоговора);
	УправлениеДоступностью();
	УстановитьЗаголовкиОрганизацийВФорме();
	
	ОписаниеОтраженияВУчета = ДоговорНаВыполнениеРаботСФизЛицомПереопределяемый.ПолучитьОписаниеОтраженияВУчете(ЭтотОбъект)
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.ПодменюДействия, ЭлементыФормы.Номер);
	
	Массив = Новый Массив;
	Массив.Добавить(Сотрудник);
	Оповестить("ОбновитьДоступностьРеквизитовСотрудника", Массив);
	
	Оповестить("ОбновитьСписокПлановыхНачислений", Массив);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ТипЗнч(ЗначениеВыбора) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") Тогда	
		ВидРасчета = ЗначениеВыбора;
	ИначеЕсли ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда	
		Сотрудник = ЗначениеВыбора;
		ВидДоговора = Сотрудник.ВидДоговора;
		ОбработатьИзменениеСотрудника();
	КонецЕсли
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.ПодменюДействия, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.ПодменюДействия, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОписаниеОтраженияВУчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВвода = ПолучитьФорму("ФормаОтраженияВУчете", ЭтаФорма);
	ФормаВвода.Открыть();
КонецПроцедуры

// Обработчики событий ЭУ Сотрудник

Процедура СотрудникПриИзменении(Элемент)
	
	ОбработатьИзменениеСотрудника();
	
КонецПроцедуры

Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 8, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 8, Текст, Организация);

КонецПроцедуры

Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 8, Текст, Организация);
	
КонецПроцедуры

Процедура ВидАвторскогоДоговораПриИзменении(Элемент)
	
	ПроведениеРасчетов.ЗаполнитьСпискиКодовДоходовВычетовПоДоговорам(мСписокВыбораВычетов,мСписокАвторскихВознаграждений,ВидДоговора,ВидАвторскогоДоговора);
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДополнительныеНачисленияОрганизаций.КодДоходаНДФЛ
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|ГДЕ
	|	ДополнительныеНачисленияОрганизаций.Ссылка = &Ссылка
	|	И ДополнительныеНачисленияОрганизаций.КодДоходаНДФЛ В(&СписокАвторскихВознаграждений)";
	Запрос.УстановитьПараметр("СписокАвторскихВознаграждений", мСписокАвторскихВознаграждений);
	Запрос.УстановитьПараметр("Ссылка", ВидРасчета);
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		Если ВидАвторскогоДоговора = Перечисления.ВидыАвторскогоДоговора.АвторскогоЗаказа Тогда
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.АвторскийДоговор;
			
		ИначеЕсли ВидАвторскогоДоговора = Перечисления.ВидыАвторскогоДоговора.Лицензионный Тогда
			ВидРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ЛицензионныйДоговор;
			
		Иначе // ВидАвторскогоДоговора = Перечисления.ВидыАвторскогоДоговора.ОбОтчужденииИсключительныхПрав
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 2
			|	ДополнительныеНачисленияОрганизаций.Ссылка
			|ИЗ
			|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
			|ГДЕ
			|	ДополнительныеНачисленияОрганизаций.КодДоходаНДФЛ.Код = ""1301""";
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				ВидРасчета = Выборка.Ссылка;
			Иначе
				ВидРасчета = "";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Обработчики событий поля ввода вида расчета

Процедура ВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", ЭтаФорма, "дляДокументаДоговорНаВыполнениеРаботСФизЛицом");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;

	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Значение = мСписокАвторскихВознаграждений;
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();

КонецПроцедуры

Процедура ВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("КодДоходаНДФЛ, СпособРасчета",мСписокАвторскихВознаграждений, Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой), Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"));
КонецПроцедуры

Процедура ВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("КодДоходаНДФЛ, СпособРасчета",мСписокАвторскихВознаграждений, Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"), Ложь, Ложь, Неопределено, Ложь);
	
КонецПроцедуры

// Обработчики событий ЭУ КодВычета

Процедура КодВычетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ЭлементСписка = ВыбратьИзСписка(мСписокВыбораВычетов,Элемент,мСписокВыбораВычетов.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;

КонецПроцедуры

Процедура КодВычетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокВыбораВычетов), Тип("СправочникСсылка.ВычетыНДФЛ"));

КонецПроцедуры

Процедура КодВычетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("Ссылка",мСписокВыбораВычетов), ЭтаФорма, Тип("СправочникСсылка.ВычетыНДФЛ"), Ложь, Ложь, Неопределено, Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.ПодменюДействия, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
мСписокВыбораВычетов = Новый СписокЗначений;
мСписокАвторскихВознаграждений = Новый СписокЗначений;