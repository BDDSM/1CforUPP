// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;
// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;
// Хранит элемент управления подменю печати
Перем мПодменюПечати;
// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;
// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

Перем мТекущийСотрудник;
Перем мТекущаяДатаНачала;
Перем мТекущийПриказ;

////////////////////////////////////////////////////
// Общего назначений

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	УниверсальныеМеханизмы.УстановитьПодменюПечати(мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя, Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации, ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ПодменюЗаполнить);
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
КонецПроцедуры

Процедура УстановитьАдресаСотрудникаВФорме()

	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	НетОтображаемыхСтрок = ТекущаяСтрока = Неопределено;
	
	Если Не НетОтображаемыхСтрок Тогда
	
		АдресРегистрацииВФорме 	= УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(ТекущаяСтрока.АдресРегистрации);
		АдресПочтовыйВФорме 	= УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(ТекущаяСтрока.АдресПочтовый);
		
	КонецЕсли;

	ЭлементыФормы.АдресРегистрацииВФорме.ТолькоПросмотр = ТолькоПросмотр Или НетОтображаемыхСтрок;
	ЭлементыФормы.АдресПочтовыйВФорме.ТолькоПросмотр = ТолькоПросмотр Или НетОтображаемыхСтрок;
	
КонецПроцедуры // УстановитьАдресаСотрудникаВФорме()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

Процедура УдалитьДанныеОДетях(Сотрудник, ДатаНачала)
	
	СтруктураПоискаДетей = Новый Структура("Сотрудник, ДатаНачала", Сотрудник, ДатаНачала);
    Для каждого СтрокаТЧ Из ДанныеОДетях.НайтиСтроки(СтруктураПоискаДетей) Цикл
		ДанныеОДетях.Удалить(СтрокаТЧ)
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////
// Обработчики событий формы

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати(); // Универсальный механизм печати документов
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ(); // Универсальный механизм подключения процедур заполнения табличных частей
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		Если Не ЗначениеЗаполнено(РегистрационныйНомерФСС) И РаботникиОрганизации.Количество() = 0 И ЗначениеЗаполнено(Организация) Тогда
			ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеОрганизации(ЭтотОбъект);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТелефонСоставителя) Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбменСведениямиОПособияхСФСС.ДанныеСоставителяРеестра(Ответственный));
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	ЭлементыФормы.КПП.АвтоОтметкаНезаполненного = ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Организация);
	ЭлементыФормы.КПП.ОтметкаНезаполненного = ЭлементыФормы.КПП.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(КПП);
	ЭлементыФормы.СтатусНалогоплательщика.ДоступныеЗначения = ПроцедурыУправленияПерсоналом.ПолучитьСписокСтатусовФизлиц();
	
	ДоступныеЗначения = Новый СписокЗначений;
	ДоступныеЗначения.Добавить(Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.Чернобыль);
	ДоступныеЗначения.Добавить(Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.Маяк);
	ДоступныеЗначения.Добавить(Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.ПодразделенияОсобогоРиска);
	ЭлементыФормы.ВыплатаЗаСчетФедеральногоБюджета.ДоступныеЗначения = ДоступныеЗначения;
	
	УстановитьАдресаСотрудникаВФорме();
	УстановитьЗаголовкиОрганизацийВФорме();
	
	Если РаботникиОрганизации.Количество() = 0 Тогда
		
		ЭлементыФормы.ДанныеОДетях.ОтборСтрок.ДатаНачала.Установить('30000101');
		ЭлементыФормы.ДанныеОДетях.ТолькоПросмотр = Истина;
		ЭлементыФормы.ОбновитьДанныеЗЛ.Доступность = Ложь;
		
	КонецЕсли;
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

Процедура ОбновлениеОтображения()
    ОписаниеДокументаНаПроживание = ОбменСведениямиОПособияхСФСС.ОписаниеДокументаНаПроживание(ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ 

// формирует файл сведений
//
Процедура ОсновныеДействияФормыФайл(Кнопка)
	
	ПроцедурыПерсонифицированногоУчета.ПоказатьФайлДокумента(ЭтотОбъект,"Файл реестра сведений по пособиям по уходу за ребенком");
	                
КонецПроцедуры      

// копирует файл-пачку в указанное пользователем место
Процедура ОсновныеДействияФормыНаДискетку(Кнопка)
	
	ПроцедурыПерсонифицированногоУчета.ЗаписатьФайлДокументаНаДискету(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), ОбменСведениямиОПособияхСФСС.ИмяФайла(ЭтотОбъект) + ".xml", КодировкаТекста.ANSI,,"Файл реестра записан под именем: ");
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииПоПриказамНаОтпуск(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличнaя часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		РаботникиОрганизации.Очистить();
	КонецЕсли;
	
	Автозаполнение();
	
	Если РаботникиОрганизации.Количество() = 0 Тогда
		Сообщить("Не обнаружены данные для записи в документ.", СтатусСообщения.Важное )
	Иначе
		ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = РаботникиОрганизации[0]
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельСотрудникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, ОбщегоНазначения.ГоловнаяОрганизация(Организация), 4);

КонецПроцедуры

///////////////////////////////////////////////////
// Обработчики элементов управления

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта( ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
		
	КонецЕсли;
	
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеОрганизации(ЭтотОбъект);
	ЭлементыФормы.КПП.АвтоОтметкаНезаполненного = ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Организация);
	ЭлементыФормы.КПП.ОтметкаНезаполненного = ЭлементыФормы.КПП.АвтоОтметкаНезаполненного И Не ЗначениеЗаполнено(КПП);
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
КонецПроцедуры

Процедура ОтветственныйПриИзменении(Элемент)
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ОбменСведениямиОПособияхСФСС.ДанныеСоставителяРеестра(Ответственный));
КонецПроцедуры

Процедура ОтчествоПриИзменении(Элемент)
	Если ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Пол = ПроцедурыУправленияПерсоналом.ПолучитьПол(Элемент.Значение)
	КонецЕсли;
КонецПроцедуры

Процедура ДатаРожденияПриИзменении(Элемент)
	ФизическиеЛицаКлиент.ФормаЭлементаДатаРожденияПриИзменении(Элемент, ЭтаФорма);
КонецПроцедуры

Процедура ПолПриИзменении(Элемент)
	Если ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда
		Статус = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Статус;
		Если Элемент.Значение = Перечисления.ПолФизическихЛиц.Мужской Тогда
			Если Не ЗначениеЗаполнено(Статус) Или Статус = "Мать" Или Статус = "Бабушка" Тогда
				ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Статус = "Отец"
			КонецЕсли;
		ИначеЕсли Элемент.Значение = Перечисления.ПолФизическихЛиц.Женский Тогда
			Если Не ЗначениеЗаполнено(Статус) Или Статус = "Отец" Или Статус = "Дедушка" Тогда
				ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Статус = "Мать"
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура СтатусНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("Мать");
	СписокВыбора.Добавить("Отец");
	СписокВыбора.Добавить("Опекун");
	СписокВыбора.Добавить("Бабушка");
	СписокВыбора.Добавить("Дедушка");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура БанкПриИзменении(Элемент)
	
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеБанка(Элемент.Значение, ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока);
	
КонецПроцедуры

Процедура АдресПочтовыйВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда
		СтруктураАдреса = Новый Структура("Значение", ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресПочтовый);
		УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресПочтовый = СтруктураАдреса.Значение;
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресПочтовыйКодПоКЛАДР = ОбменСведениямиОПособияхСФСС.КодАдресаПоКЛАДРдляФСС(СтруктураАдреса.Значение);
		Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура АдресРегистрацииВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные <> Неопределено Тогда
		СтруктураАдреса = Новый Структура("Значение", ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресРегистрации);
		УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
		ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.АдресРегистрации = СтруктураАдреса.Значение;
		Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
	КонецЕсли;
КонецПроцедуры

Процедура ОписаниеДокументаНаПроживаниеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбменСведениямиОПособияхСФСС.ОткрытьФормуРедактированияДокументаНаПроживание(ЭтаФорма, ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока)
	
КонецПроцедуры

Процедура ОписаниеДокументаНаПроживаниеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь
КонецПроцедуры

Процедура РеквизитыТекстовыхПолейПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	СформироватьТекстовыеПоля(ТекущаяСтрока);
	
КонецПроцедуры

Процедура ОбновитьДанныеЗЛНажатие(Элемент)
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		Автозаполнение("ДанныеПриказа", ТекущаяСтрока);
		Автозаполнение("ДанныеСотрудника", ТекущаяСтрока);
		УстановитьАдресаСотрудникаВФорме();
	КонецЕсли;
КонецПроцедуры

Процедура ОбновитьДанныеСтрахователяНажатие(Элемент)
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеОрганизации(ЭтотОбъект);
КонецПроцедуры

Процедура КнопкаЗаполнитьСписокПредставленныхДокументовНажатие(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ПустаяСтрока(ТекущаяСтрока.ИнаяПолезнаяИнформация) Или Не ПустаяСтрока(ТекущаяСтрока.ДокументыОснования) Тогда
	
		ТекстВопроса = НСтр("ru='Данные в полях ""Наименование и реквизиты представленных документов"" и ""Иная полезная информация"" будут очищены.
			|
			|Продолжить?'");
			
		Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет, "Заполнить") <> КодВозвратаДиалога.Да Тогда
			
			Возврат;
		
		КонецЕсли;
	
	КонецЕсли; 
	
	СформироватьТекстовыеПоля(ТекущаяСтрока);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации
 
// Процедура - обработчик ожидания события "ПриАктивизацииСтроки"
//
Процедура ОбработчикОжиданияСотрудникиОрганизацииПриАктивизацииСтроки()
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	НетОтображаемыхСтрок = ТекущаяСтрока = Неопределено;
	Если НетОтображаемыхСтрок Тогда
		ЭлементыФормы.ДанныеОДетях.ОтборСтрок.ДатаНачала.Установить('30000101');
	Иначе 
		ЭлементыФормы.ДанныеОДетях.ОтборСтрок.Сотрудник.Установить(ТекущаяСтрока.Сотрудник);
		ЭлементыФормы.ДанныеОДетях.ОтборСтрок.ДатаНачала.Установить(ТекущаяСтрока.ДатаНачала);
	КонецЕсли;
	
	ЭлементыФормы.ДанныеОДетях.ТолькоПросмотр = ТолькоПросмотр Или НетОтображаемыхСтрок;
	ЭлементыФормы.ОбновитьДанныеЗЛ.Доступность = Не ТолькоПросмотр И Не НетОтображаемыхСтрок;
	УстановитьАдресаСотрудникаВФорме();
	
КонецПроцедуры

Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСотрудникиОрганизацииПриАктивизацииСтроки", 0.1, Истина);
КонецПроцедуры

Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)

	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	УдалитьДанныеОДетях(ТекущаяСтрока.Сотрудник, ТекущаяСтрока.ДатаНачала);
	АдресРегистрацииВФорме = "";
	АдресПочтовыйВФорме = "";

КонецПроцедуры

Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		мТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
		мТекущаяДатаНачала = '00010101';
		мТекущийПриказ = Документы.ОтпускПоУходуЗаРебенком.ПустаяСсылка();
	Иначе
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		мТекущийСотрудник = ТекущаяСтрока.Сотрудник;
		мТекущаяДатаНачала = ТекущаяСтрока.ДатаНачала;
		мТекущийПриказ = ТекущаяСтрока.ПриказНаОтпускПоУходуЗаРебенком;
	КонецЕсли;
КонецПроцедуры

Процедура РаботникиОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если Не ОтменаРедактирования Тогда
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		Если мТекущийСотрудник <> ТекущаяСтрока.Сотрудник Или мТекущаяДатаНачала <> ТекущаяСтрока.ДатаНачала Или мТекущийПриказ <> ТекущаяСтрока.ПриказНаОтпускПоУходуЗаРебенком Тогда
			Если мТекущийСотрудник <> ТекущаяСтрока.Сотрудник Или мТекущийПриказ <> ТекущаяСтрока.ПриказНаОтпускПоУходуЗаРебенком Тогда
				УдалитьДанныеОДетях(мТекущийСотрудник, мТекущаяДатаНачала);
				Если мТекущийСотрудник <> ТекущаяСтрока.Сотрудник Тогда
					Автозаполнение("ДанныеСотрудника", ТекущаяСтрока);
					УстановитьАдресаСотрудникаВФорме();
				КонецЕсли;
				Если мТекущийПриказ <> ТекущаяСтрока.ПриказНаОтпускПоУходуЗаРебенком Тогда
					Автозаполнение("ДанныеПриказа", ТекущаяСтрока);
				КонецЕсли;
			Иначе 	
				СтруктураПоискаДетей = Новый Структура("Сотрудник, ДатаНачала", мТекущийСотрудник, мТекущаяДатаНачала);
			    Для каждого СтрокаТЧ Из ДанныеОДетях.НайтиСтроки(СтруктураПоискаДетей) Цикл
					СтрокаТЧ.ДатаНачала = ТекущаяСтрока.ДатаНачала
				КонецЦикла;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущаяСтрока.Сотрудник) Тогда
				УстановитьАдресаСотрудникаВФорме()
			Иначе 	
				АдресРегистрацииВФорме = "";
				АдресПочтовыйВФорме = "";
			КонецЕсли;
			ЭлементыФормы.ДанныеОДетях.ОтборСтрок.Сотрудник.Установить(ТекущаяСтрока.Сотрудник);
			ЭлементыФормы.ДанныеОДетях.ОтборСтрок.ДатаНачала.Установить(ТекущаяСтрока.ДатаНачала);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
		СтрокаТабличнойЧасти.Сотрудник = ВыбранноеЗначение;
		Автозаполнение("ДанныеСотрудника", СтрокаТабличнойЧасти);
		Если ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = Неопределено Тогда
			ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока = РаботникиОрганизации[0]
		Иначе 
			УстановитьАдресаСотрудникаВФорме();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 4, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // СотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 4, Текст, Организация);
	
КонецПроцедуры // СотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 4, Текст, Организация);
	
КонецПроцедуры // СотрудникОкончаниеВводаТекста()

Процедура РаботникиОрганизацииПриказНаОтпускПоУходуЗаРебенкомНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	ФормаВыбораПриказа = Документы.ОтпускПоУходуЗаРебенком.ПолучитьФормуВыбора(, Элемент, ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекущаяСтрока.Сотрудник) Тогда
		ФормаВыбораПриказа.Отбор.Сотрудник.Установить(ТекущаяСтрока.Сотрудник);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбораПриказа.Отбор.Организация.Установить(Организация);
	КонецЕсли;
	
	ФормаВыбораПриказа.Отбор.Проведен.Установить(Истина);
	
	ФормаВыбораПриказа.Отбор.ДатаОкончанияПособияДоПолутораЛет.ВидСравнения = ВидСравнения.БольшеИлиРавно;
	ФормаВыбораПриказа.Отбор.ДатаОкончанияПособияДоПолутораЛет.Значение = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ДатаПередачиФССВыплатыПособий");
	ФормаВыбораПриказа.Отбор.ДатаОкончанияПособияДоПолутораЛет.Использование = Истина;
	
	ФормаВыбораПриказа.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбораПриказа.Порядок.Установить("Дата Убыв");
	ФормаВыбораПриказа.Открыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ДанныеОДетях
 
Процедура ДанныеОДетяхПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ДанныеТекущегоСотрудника = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	Если ДанныеТекущегоСотрудника = Неопределено Тогда
		Возврат
	КонецЕсли;
	Если НоваяСтрока Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если Копирование Тогда
			ДанныеСтроки.НомерДокумента = ""
		Иначе
			ДанныеСтроки.ВидПодтверждающегоДокумента = Перечисления.ВидыПодтверждающихДокументовОтпускаПоУходу.СвидетельствоОРождении;
			ДанныеСтроки.НаименованиеПодтверждающегоДокумента = "Свидетельство о рождении";
			ЗаполнитьЗначенияСвойств(ДанныеСтроки,ДанныеТекущегоСотрудника,"Сотрудник, ДатаНачала");
		КонецЕсли;
		ПоследнийРебенок = 0;
		СтруктураПоискаДетей = Новый Структура("Сотрудник, ДатаНачала");
		ЗаполнитьЗначенияСвойств(СтруктураПоискаДетей, ДанныеСтроки);
		Для каждого СтрокаТЧ Из ДанныеОДетях.НайтиСтроки(СтруктураПоискаДетей) Цикл
			ПоследнийРебенок = Макс(СтрокаТЧ.Очередность, ПоследнийРебенок)
		КонецЦикла;
		ДанныеСтроки.Очередность = ПоследнийРебенок + 1
	КонецЕсли;
КонецПроцедуры

Процедура ДанныеОДетяхПриПолученииДанных(Элемент, ОформленияСтрок)
	ЕстьКолонкаПодтверждающийДокумент = Элемент.Колонки.КолонкаПодтверждающийДокумент.Видимость;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если ЕстьКолонкаПодтверждающийДокумент Тогда
			ОформлениеСтроки.Ячейки.КолонкаПодтверждающийДокумент.Видимость = Ложь
		КонецЕсли;
	
	КонецЦикла;
КонецПроцедуры

Процедура ДанныеОДетяхПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекущаяСтрока = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	СформироватьТекстовыеПоля(ТекущаяСтрока);
КонецПроцедуры

Процедура ДанныеОДетяхВидПодтверждающегоДокументаПриИзменении(Элемент)
	ДанныеСтроки = ЭлементыФормы.ДанныеОДетях.ТекущиеДанные;
	ВидДокумента = Элемент.Значение;
	Если ВидДокумента = Перечисления.ВидыПодтверждающихДокументовОтпускаПоУходу.СвидетельствоОРождении Тогда
		ДанныеСтроки.НаименованиеПодтверждающегоДокумента = "Свидетельство о рождении";
	ИначеЕсли ВидДокумента = Перечисления.ВидыПодтверждающихДокументовОтпускаПоУходу.РешениеОбУстановленииОпеки Тогда
		ДанныеСтроки.НаименованиеПодтверждающегоДокумента = "Решение об установлении опеки";
	ИначеЕсли ВидДокумента = Перечисления.ВидыПодтверждающихДокументовОтпускаПоУходу.СвидетельствоОСмерти Тогда
		ДанныеСтроки.НаименованиеПодтверждающегоДокумента = "Свидетельство о смерти";
	Иначе
		ДанныеСтроки.НаименованиеПодтверждающегоДокумента = "";
	КонецЕсли;
КонецПроцедуры

///////////////////////////////////////////////////
// Универсальные механизмы

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)
	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли; 
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя, "Имя", Истина), ЭтотОбъект);
КонецПроцедуры