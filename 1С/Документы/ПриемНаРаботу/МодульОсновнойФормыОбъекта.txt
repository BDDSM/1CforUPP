////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
Перем мТекущийРаботник;

Перем мСведенияОВидахРасчета;
Перем мСписокНедоступныхРасчетов;
Перем мВалютаУправленческогоУчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Диалог настройки периода
Перем мНастройкаПериода;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Работники,ЭлементыФормы.КоманднаяПанельРаботники.Кнопки.Заполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Взыскания,ЭлементыФормы.КоманднаяПанельВзыскания.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОформитьСтрокиНачисленийВзысканий(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета, Элемент.Данные = "Начисления");	
	КонецЦикла;

КонецПроцедуры // ОформитьСтрокиНачисленийВзысканий

// Заполняет "пустые" реквизиты ТЧ значениями по умолчанию
//
Процедура ДоЗаполнитьСтроку()

	ДанныеСтроки = ЭлементыФормы.Работники.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗанимаемыхСтавок) Тогда
		ДанныеСтроки.ЗанимаемыхСтавок  = 1;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ИспытательныйСрок) Тогда
		ДанныеСтроки.ИспытательныйСрок = Перечисления.ИспытательныйСрок.БезИспытательногоСрока;
	КонецЕсли;
	
КонецПроцедуры // ДоЗаполнитьСтроку()

// удаляет начисления по работнику, все или автоматически заполняемые
// Параметры:
//   Сотрудник  - СправочникСсылка.СотрудникиОрганизации
//   УдалятьВсе - булево, если Истина - удаляются все начисления по физлицу,
//				например, при его удалении из сиска.
//				Если Ложь - удалаются только те, которые вводятся "автоматически",
//				например, при редактировании данных по строке табличной части 
//				со списком работников
//
Процедура УдалитьНачисленияПоРаботнику(Сотрудник)
	
	СтруктураПоиска = Новый Структура("Физлицо", Сотрудник.Физлицо);
	
	// удалять начисления будем в том случае, когда в т.ч. Работники эта строка с сотрудником - последняя
	Если Работники.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	// удаляем начисления физлица...
	Строки = Начисления.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТабличнойЧасти из Строки Цикл
		Начисления.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	// ...и взыскания
	Строки = Взыскания.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого СтрокаТабличнойЧасти из Строки Цикл
		Взыскания.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	ПриемНаРаботуПереопределяемый.УдалитьДополнительноПоСтроке(ЭтаФорма, Сотрудник);
		
КонецПроцедуры // УдалитьНачисленияПоРаботнику()

Процедура ВнестиДанныеПоСотруднику(ИзменятьКадровыеДанные = Ложь)
		
	УдалитьНачисленияПоРаботнику(мТекущийРаботник);
		
	ДанныеСтроки = ЭтаФорма.ЭлементыФормы.Работники.ТекущиеДанные;
	Сотрудник = ДанныеСтроки.Сотрудник;

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
	|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
	|	СотрудникиОрганизаций.Должность КАК Должность,
	|	СотрудникиОрганизаций.ГрафикРаботы КАК ГрафикРаботы
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	Если ИзменятьКадровыеДанные Тогда
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Выборка);
	КонецЕсли;
	
	ДобавитьНачисленияПоСтроке(ДанныеСтроки);
	
КонецПроцедуры //ВнестиДанныеПоСотруднику

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	УчетРасходовНаПерсоналПереопределяемый.ПередОткрытиемФормыКадровогоДокументаДополнительно(ЭтаФорма);
	
	ПриемНаРаботуПереопределяемый.ФормаДокументаПередОткрытиемДополнительно(ЭтаФорма, Новый Действие("ДополнительныеДействия"), Новый Структура("ПриИзменении", Новый Действие("ДополнительныйОбработчикПриИзменении")));
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ДатаПриема");

	// Установить ограничение - изменять видимость колонок для табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Работники.Колонки, СтруктураКолонок);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("Размер");

	// Установить ограничение - изменять видимость колонок для табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен)
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы
	мТекущаяДатаДокумента = Дата;
	мТекущийРаботник	  = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.СотрудникиОрганизаций");
	мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Работники.Колонки.ТабельныйНомерСтрока);
	мМассивЭУ.Добавить(ЭлементыФормы.Начисления.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	мНастройкаПериода.УстановитьПериод(НачалоМесяца(Дата), КонецМесяца(Дата));
	
	// Установить активный реквизит
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Работники;
	КонецЕсли;
	
	ЕстьВалютныеПоказатели =  глЗначениеПеременной("глЕстьВалютныеПоказатели");
	Для Сч = 1 По 6 Цикл
		ЭлементыФормы.Начисления.Колонки["Валюта"+Сч].Видимость = ЕстьВалютныеПоказатели;
		ЭлементыФормы.Взыскания.Колонки["Валюта"+Сч].Видимость = ЕстьВалютныеПоказатели;
	КонецЦикла;

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	// если открыт Менеджер контактов - оповестим о необходимости обновить список кандидатов
	Оповестить("ОбновитьСписокКандидатов");
	
	// оповестим журналы о записи нового управленческого документа
	Оповестить("ЗаписанНовыйДокументУправленческогоУчета", Ответственный, Ссылка);
	
	МассивСотрудников = Работники.ВыгрузитьКолонку("Сотрудник");
	Оповестить("ПеречитатьСотрудников", МассивСотрудников);
	
	Физлица = Работники.ВыгрузитьКолонку("Физлицо");
	Оповестить("ИзмененоМестоРаботыКомпании", Физлица);
	Оповестить("ОбновитьСписокПлановыхНачисленийУдержанийКомпании", Физлица);

КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("СправочникСсылка.СотрудникиОрганизаций") ИЛИ Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ПодборОтменаВыбора" Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", Параметр);
		НайденныеСтроки = Источник.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Источник.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "ПриемНаРаботуВОрганизацию" меню "ВводНаОсновании"
//
Процедура ДействияФормыПриемНаРаботуВОрганизациюВводНаОсновании(Кнопка)
	
	Если НЕ РаботаСДиалогами.ЗаписатьНовыйОбъектВФорме(ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналомДополнительный.ВводРегламентированногоКадровогоДокументаНаОсновании(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "ЗаполнитьПринятымиВОрганизации" список физлиц
Процедура КоманднаяПанельРаботникиЗаполнитьРаботникамиОрганизаций(Кнопка)
	
	Если Работники.Количество() > 0 Тогда
		Вопрос = "Имеющийся список сотрудников будет очищен. Продолжить?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если мНастройкаПериода.Редактировать() Тогда
		ЗаполнитьТабличнуюЧастьРаботникиРаботникамиОрганизаций(мНастройкаПериода.ДатаНачала, мНастройкаПериода.ДатаОкончания);
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиЗаполнитьКандидатами(Кнопка)
	
	Если Работники.Количество() > 0 Тогда
		Вопрос = "Имеющийся список сотрудников будет очищен. Продолжить?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьТабличнуюЧастьРаботникиКандидатами();
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиПодбор(Кнопка)
	
	МДРеквизиты = Метаданные().ТабличныеЧасти.Работники.Реквизиты;
	
	ПараметрыПодбора = Новый Массив;
	ПараметрыПодбора.Добавить(МДРеквизиты.ДатаПриема);
	ПараметрыПодбора.Добавить(МДРеквизиты.Подразделение);
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(ЭлементыФормы.Работники, Ссылка, Ложь, Дата, , Работники.ВыгрузитьКолонку("Сотрудник"), , ПараметрыПодбора);
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Заполнить по схемам мотивации" список физлиц
Процедура КоманднаяПанельНачисленияСхемыМотиваций(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
		
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "заполнить") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	ЗаполнениеПоСхемамМотивации("Начисления");

КонецПроцедуры

// Процедура - обработчик нажатия кнопки "Заполнить по схемам мотивации" список физлиц
Процедура КоманднаяПанельВзысканияСхемыМотиваций(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "заполнить") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	ЗаполнениеПоСхемамМотивации("Взыскания");
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

Процедура ДополнительныеДействия(Кнопка)
	
	ПриемНаРаботуПереопределяемый.ВыполнитьДополнительныеДействия(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ДополнительныйОбработчикПриИзменении(Элемент)
	
	ПриемНаРаботуПереопределяемый.ОбработатьДополнительноПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ "Работники"

// заполняем списки выбора должностей и подразделений связанными значениями
Процедура РаботникиПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущаяСтрока = Неопределено Тогда
		Возврат
	КонецЕсли;
	
	ТекущаяКолонка = Элемент.ТекущаяКолонка;
	Если ТекущаяКолонка.Имя = "Подразделение" Или ТекущаяКолонка.Имя = "Должность" Тогда
		
		ИмяПервойКолонки = ТекущаяКолонка.Имя;
		ИмяВторойКолонки = ?(ТекущаяКолонка.Имя = "Подразделение","Должность","Подразделение");
		
		СписокЗначений = ПроцедурыУправленияПерсоналомДополнительный.ВыбратьИзКадровогоПланаПредприятия(ИмяПервойКолонки, Элемент.ТекущиеДанные[ИмяВторойКолонки]);
		КоличествоЗначений = СписокЗначений.Количество();
		
		ПолеВвода = ТекущаяКолонка.ЭлементУправления;
		ПолеВвода.СписокВыбора = СписокЗначений;
		ПолеВвода.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ПолеВвода.ВысотаСпискаВыбора = Мин(10, КоличествоЗначений);
		
	КонецЕсли; 
	
КонецПроцедуры

Процедура РаботникиПередНачаломДобавления(Элемент, Отказ, Копирование)

	Если Копирование Тогда
		
		// сотрудника не копируем 
		ТекущаяСтрока = Элемент.ТекущиеДанные;
		
		НоваяСтрока	= Работники.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекущаяСтрока, , "Сотрудник,ФизЛицо");
		
		Элемент.ТекущаяСтрока = НоваяСтрока;
		
		Отказ = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура РаботникиПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ДанныеСтроки = Элемент.ТекущаяСтрока;
	
	мТекущийРаботник = ДанныеСтроки.Сотрудник;
	
	Если НоваяСтрока Тогда
		ДоЗаполнитьСтроку();
		ДанныеСтроки.НапомнитьПоЗавершении = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура РаботникиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПодборВыбор", ДанныеСтроки.Сотрудник);
	
КонецПроцедуры

Процедура РаботникиПередУдалением(Элемент, Отказ)

	УдалитьНачисленияПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	
	Если Не Отказ Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповестить("ПодборОтменаВыбора", ДанныеСтроки.Сотрудник);
	КонецЕсли;	
	
КонецПроцедуры

Процедура РаботникиПослеУдаления(Элемент)

	ПриемНаРаботуПереопределяемый.ФормаДокументаРаботникиПослеУдаленияСтрокиДополнительно(ЭтаФорма);
	
КонецПроцедуры

Процедура РаботникиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
		
	Если НоваяСтрока И ОтменаРедактирования Тогда
		УдалитьНачисленияПоРаботнику(мТекущийРаботник);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода приказа  о приёме работника организации
Процедура РаботникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Работники.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Работники.Добавить();
			ЭлементыФормы.Работники.ТекущаяСтрока = СтрокаТабличнойЧасти;
			СтрокаТабличнойЧасти.Сотрудник = ВыбранноеЗначение;
			ВнестиДанныеПоСотруднику(Истина);
			ДоЗаполнитьСтроку();			
			мТекущийРаботник = ВыбранноеЗначение;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Для Каждого Сотрудник Из ВыбранноеЗначение.Сотрудники Цикл
			Если Работники.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник)).Количество() = 0 Тогда
				СтрокаТабличнойЧасти = Работники.Добавить();
				
				СтрокаТабличнойЧасти.Сотрудник = Сотрудник;
				
				Для Каждого Параметр Из ВыбранноеЗначение.ПараметрыПодбора Цикл
					Если ЗначениеЗаполнено(Параметр.Значение) Тогда
						СтрокаТабличнойЧасти[Параметр.Ключ]	= Параметр.Значение;
					КонецЕсли;
				КонецЦикла;
				
				ЭлементыФормы.Работники.ТекущаяСтрока = СтрокаТабличнойЧасти;
				
				ВнестиДанныеПоСотруднику(Истина);
				ДоЗаполнитьСтроку();	
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Работники"

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица.
// Добавляет строку по начислению в ТЧ "Начисления" по физическому лицу.
Процедура РаботникиСотрудникПриИзменении(Элемент)
	
	ВнестиДанныеПоСотруднику(Истина);
	ДоЗаполнитьСтроку();	
	
	мТекущийРаботник = Элемент.Значение;
	
КонецПроцедуры

Процедура РаботникиПодразделениеПриИзменении(Элемент)
	
	ВнестиДанныеПоСотруднику(Ложь);
	
КонецПроцедуры

Процедура РаботникиДолжностьПриИзменении(Элемент)
	
	ВнестиДанныеПоСотруднику(Ложь);
	
КонецПроцедуры

// Процедура обеспечивает нестандартный шаг регулирования 
//
// Параметры:
//  Элемент - поле ввода т.ч., которое отображает занимаемые ставки
//  Направление - число, определяет, какая из кнопок регулирования была нажата
//  СтандартнаяОбработка - булево, признак выполнения системной обработки события
//  
Процедура РаботникиЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если Направление = 1 Тогда // увеличиваем значение
		ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок = ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок + 0.5
	Иначе // = -1 - уменьшаем значение
		ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок = ЭлементыФормы.Работники.ТекущиеДанные.ЗанимаемыхСтавок - 0.5
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода даты приема
Процедура РаботникиДатаПриемаПриИзменении(Элемент)
	Если Элемент.Значение > РабочаяДата Тогда
		Ответ = Вопрос("Вы действительно хотите принять сотрудника на будущую дату?", РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Элемент.Значение = РабочаяДата
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура РаботникиСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);

КонецПроцедуры

Процедура РаботникиИспытательныйСрокПриИзменении(Элемент)
	Если Элемент.Значение = Перечисления.ИспытательныйСрок.СИспытательнымСроком И Не ЭлементыФормы.Работники.Колонки.ДатаПо.Видимость Тогда
		Вопрос = "При приеме с испытанием необходимо указывать дату окончания срока испытания. Показать колонку с датами окончания?";
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ЭлементыФормы.Работники.Колонки.ДатаПо.Видимость = Истина
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры

Процедура РаботникиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Работники, ОформленияСтрок);
	
	ТолькоПросмотрНапоминания = Работники.Итог("НапомнитьПоЗавершении") = Работники.Количество();
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.НапомнитьПоЗавершении.ТолькоПросмотр = ТолькоПросмотрНапоминания;
	КонецЦикла;
	
	ПриемНаРаботуПереопределяемый.ФормаДокументаРаботникиПриПолученииДанныхДополнительно(ЭлементыФормы.Работники, ОформленияСтрок);
	
КонецПроцедуры

Процедура РаботникиСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Сотрудники", Текст);
	
КонецПроцедуры

Процедура РаботникиСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Сотрудники", Текст, Элемент.Значение);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ПОЛЯ "Начисления"


Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияНачисленияПриАктивизацииСтроки", 0.05, Истина);
	
КонецПроцедуры // НачисленияПриАктивизацииСтроки

Процедура ОбработчикОжиданияНачисленияПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Начисления, мСведенияОВидахРасчета);

КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Начисления"

Процедура НачисленияСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	
КонецПроцедуры

Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Начисления",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);
	
КонецПроцедуры

Процедура НачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УправленческиеНачисления.ПолучитьФормуВыбора("ФормаВыбора", ЭлементыФормы.Начисления, "дляДокументаПриемНаРаботу");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = мСписокНедоступныхРасчетов;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура НачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УправленческиеНачисления", "Не (Ссылка В(&СпВидовРасчета))", Новый Структура("СпВидовРасчета", мСписокНедоступныхРасчетов), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") Тогда
		Элемент.ТекущаяСтрока.ВидРасчета = ВыбранноеЗначение;
		РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Начисления",ВыбранноеЗначение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);		
	КонецЕсли
КонецПроцедуры

Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Начисления, ОформленияСтрок);
	
	ОформитьСтрокиНачисленийВзысканий(Элемент, ОформленияСтрок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ПОЛЯ "Взыскания"

Процедура ВзысканияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияВзысканияПриАктивизацииСтроки", 0.05, Истина);
	
КонецПроцедуры // ВзысканияПриАктивизацииСтроки

Процедура ОбработчикОжиданияВзысканияПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Взыскания, мСведенияОВидахРасчета);

КонецПроцедуры // ОбработчикОжиданияВзысканияПриАктивизацииСтроки

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ "Взыскания"

Процедура ВзысканияФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ВзысканияФизлицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВзысканияФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВзысканияФизлицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Сотрудники", Текст, ,Истина, Истина);
	
КонецПроцедуры

Процедура ВзысканияФизлицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Сотрудники", Текст, Элемент.Значение, , Истина);
	
КонецПроцедуры

Процедура ВзысканияВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Взыскания",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);
	
КонецПроцедуры

Процедура ВзысканияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "УправленческиеУдержания", "Не (Ссылка В(&СпВидовРасчета))", Новый Структура("СпВидовРасчета", мСписокНедоступныхРасчетов), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ВзысканияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Взыскания, ОформленияСтрок);
	
	ОформитьСтрокиНачисленийВзысканий(Элемент, ОформленияСтрок);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСведенияОВидахРасчета = Новый Соответствие;

мСписокНедоступныхРасчетов = Новый СписокЗначений;
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);

мНастройкаПериода = Новый НастройкаПериода;