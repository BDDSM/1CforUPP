// Проверяет даты начала и конца ограничения оборотов и корректирует при необходимости
//
Процедура ПроверкаИнтервала()
	
	Если (ДатаКонца='00010101') И (ДатаНачала<>'00010101') Тогда
		
		ДатаКонца=ОбщегоНазначения.ДатаКонцаПериода(ДатаНачала,Сценарий.Периодичность);
		
	ИначеЕсли (ДатаКонца<>'00010101') И (ДатаНачала='00010101') Тогда
		
		ДатаНачала=ОбщегоНазначения.ДатаНачалаПериода(ДатаКонца,Сценарий.Периодичность);
		
	ИначеЕсли ДатаКонца<ДатаНачала Тогда
		
		Если ЭтаФорма.ТекущийЭлемент.Имя="ДатаКонца" Тогда
			
			ДатаНачала=ОбщегоНазначения.ДатаНачалаПериода(ДатаКонца,Сценарий.Периодичность);
			
		Иначе
			
			ДатаКонца=ОбщегоНазначения.ДатаКонцаПериода(ДатаНачала,Сценарий.Периодичность);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПроверкаИнтервала()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ

// Процедура - обработчик нажатия кнопки настройки периода
//
Процедура КнопкаНастройкаПериодаНажатие(Элемент)

	Если НП.Редактировать() Тогда
		
		Если НЕ Сценарий.Пустая() Тогда
			
			ДатаНачала=ОбщегоНазначения.ДатаНачалаПериода(НП.ПолучитьДатуНачала(),Сценарий.Периодичность);
			ДатаКонца=ОбщегоНазначения.ДатаКонцаПериода(НП.ПолучитьДатуОкончания(),Сценарий.Периодичность);
		Иначе
			
			ДатаНачала = НП.ПолучитьДатуНачала();
			ДатаКонца = НП.ПолучитьДатуОкончания();
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // КнопкаНастройкаПериодаНажатие()

Процедура ДатаНачалаПриИзменении(Элемент)
	
	Элемент.Значение=ОбщегоНазначения.ДатаНачалаПериода(Элемент.Значение,Сценарий.Периодичность);
	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ДатаНачалаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Элемент.Значение=ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,Сценарий.Периодичность,Направление);
	
	ПроверкаИнтервала();

КонецПроцедуры

Процедура ДатаКонцаПриИзменении(Элемент)
	
	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(Элемент.Значение,Сценарий.Периодичность);
	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура ДатаКонцаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Элемент.Значение=ОбщегоНазначения.ДатаКонцаПериода(ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,Сценарий.Периодичность,Направление),Сценарий.Периодичность);

	ПроверкаИнтервала();
	
КонецПроцедуры

Процедура СценарийПриИзменении(Элемент)
	
	Если НЕ Сценарий.Пустая() Тогда
		
		ДатаНачала=ОбщегоНазначения.ДатаНачалаПериода(ДатаНачала,Сценарий.Периодичность);
		ДатаКонца=ОбщегоНазначения.ДатаКонцаПериода(ДатаКонца,Сценарий.Периодичность);
		
	КонецЕсли;	
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если Ответственный.Пустая() Тогда
		Ответственный = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойОтветственный");
	КонецЕсли;
	
	Если НастройкаПереносаТранзакций.Количество()>0 Тогда
		
		Периодичность=Сценарий.Периодичность;
		ПереносТранзакций.Очистить();
		
		ДатаНачалаПереноса=ОбщегоНазначения.ДатаНачалаПериода(ОбщегоНазначения.ДобавитьИнтервал(ДатаКонца,Периодичность,1),Периодичность);
		
		ПоискПрофиля=Новый Структура;
		ПоискПрофиля.Вставить("УстановкаПериода",Перечисления.ВидыПереносаОтклоненийПланФакт.ПоПрофилю);
		ПоискПрофиля.Вставить("ПереноситьТранзакцию",Истина);
		
		МассивСтрокПрофиль=НастройкаПереносаТранзакций.НайтиСтроки(ПоискПрофиля);
		
		Для каждого СтрокаПрофиль Из МассивСтрокПрофиль Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаПрофиль.Период) Тогда
				
				Сообщить("Для строки "+СтрокаПрофиль.НомерСтроки+" не указан профиль распределения.
				|Перенос транзакций не выполнен.");
				
				ПереносТранзакций.Очистить();
				Прервать;
				
			КонецЕсли;
			
			ШагРаспределения=СтрокаПрофиль.Период.ПериодСмещения;
			
			Для каждого СтрокаПериод Из СтрокаПрофиль.Период.ПрофильИзменения Цикл
				
				НоваяТранзакция=ПереносТранзакций.Добавить();
				
				ДатаТранзакции=ОбщегоНазначения.ДатаНачалаПериода(ОбщегоНазначения.ДобавитьИнтервал(ДатаНачалаПереноса,ШагРаспределения,СтрокаПериод.НомерПериода),Периодичность);
								
				НоваяТранзакция.Период=?(ДатаТранзакции>ДатаНачалаПереноса,ДатаТранзакции,ДатаНачалаПереноса);
				НоваяТранзакция.СтатьяОборотов=СтрокаПрофиль.СтатьяОборотов;
				НоваяТранзакция.Валюта=СтрокаПрофиль.Валюта;
				НоваяТранзакция.ЦФО=СтрокаПрофиль.ЦФО;
				НоваяТранзакция.Проект=СтрокаПрофиль.Проект;
				НоваяТранзакция.Контрагент=СтрокаПрофиль.Контрагент;
				НоваяТранзакция.Номенклатура=СтрокаПрофиль.Номенклатура;
				НоваяТранзакция.Количество=СтрокаПрофиль.Количество*СтрокаПериод.Коэффициент;
				НоваяТранзакция.Сумма=СтрокаПрофиль.ВалютнаяСумма*СтрокаПериод.Коэффициент;
				
			КонецЦикла;
			
		КонецЦикла; 
		
		ПоискПериода=Новый Структура;
		ПоискПериода.Вставить("УстановкаПериода",Перечисления.ВидыПереносаОтклоненийПланФакт.РучноеУказаниеПериода);
		ПоискПериода.Вставить("ПереноситьТранзакцию",Истина);
		
		МассивСтрокПериод=НастройкаПереносаТранзакций.НайтиСтроки(ПоискПериода);
		
		Для каждого СтрокаПериод Из МассивСтрокПериод Цикл
			
			Если НЕ ЗначениеЗаполнено(СтрокаПериод.Период) Тогда
				
				Сообщить("Для строки "+СтрокаПериод.НомерСтроки+" не указан период планирования.
				|Перенос транзакций не выполнен.");
				
				ПереносТранзакций.Очистить();
				Прервать;
				
			КонецЕсли;
			
			НоваяТранзакция=ПереносТранзакций.Добавить();
			НоваяТранзакция.Период=СтрокаПериод.Период;
			НоваяТранзакция.СтатьяОборотов=СтрокаПериод.СтатьяОборотов;
			НоваяТранзакция.Валюта=СтрокаПериод.Валюта;
			НоваяТранзакция.ЦФО=СтрокаПериод.ЦФО;
			НоваяТранзакция.Проект=СтрокаПериод.Проект;
			НоваяТранзакция.Контрагент=СтрокаПериод.Контрагент;
			НоваяТранзакция.Номенклатура=СтрокаПериод.Номенклатура;
			НоваяТранзакция.Количество=СтрокаПериод.Количество;
			НоваяТранзакция.Сумма=СтрокаПериод.ВалютнаяСумма;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

 ////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ДействияФормыПереносТранзакций(Кнопка)
	
	Отказ=Ложь;
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = ОбщегоНазначения.ПредставлениеДокументаПриПроведении(Ссылка);
	ЗаполнениеДокументов.ПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,Новый Структура("Сценарий,ДатаНачала,ДатаКонца,Ответственный"),Отказ, Заголовок);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
		
	Форма = ПолучитьФорму("ФормаПереносТранзакций", ЭтаФорма,);
	Форма.Открыть();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);		
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		
		ТекПользователь = глЗначениеПеременной("глТекущийПользователь");
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		
		Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
			ДатаНачала=РабочаяДата;
			ДатаКонца=РабочаяДата;
		КонецЕсли;
		
	КонецЕсли;
			
	Если НЕ ЗначениеЗаполнено(Состояние) Тогда
		Состояние=Перечисления.СостоянияОбъектов.Подготовлен;
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект,ЭтаФорма);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры