Перем НужноУдалитьРегламентноеЗадание Экспорт; // Ответ пользователя на вопрос о необходимости удалять регл. задание (булево или неопределено)
Перем Расписание Экспорт;
Перем ПредставленияПериодДетализации;  // Коллекция представлений реквизита ПериодДетализации
Перем ПредставленияРегулярныхДокументов; //Коллекция представлений реквизита ВидРегулярногоДокумента
Перем РазрешеноРедактированиеДатыНачала; //Булево - спрашивали ли в сеансе работы с формой о разрешении редактирования даты начала обработки данных

// Устанавливает доступность элементов формы
//
Процедура УправлениеДоступностью()
	
	Если ТолькоПросмотр Тогда
		// Доступность других элементов регулируется настройками в диалоге
		Возврат;
	КонецЕсли;
	ЭлементыФормы.ПредставлениеРасписания.Доступность 				= ФормироватьДокументыАвтоматически;
	ЭлементыФормы.НадписьПояснениеЗадержка.Видимость 				= ФормироватьДокументыАвтоматически;
	ЭлементыФормы.Задержка.Доступность 								= ФормироватьДокументыАвтоматически И НеОбрабатыватьВсеДокументы;
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность 				= ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.ШаблонРегулярногоДокумента.Доступность 			= ЗначениеЗаполнено(ВидРегулярногоДокумента);
	ЭлементыФормы.НеОбрабатыватьВсеДокументы.Доступность			= ФормироватьДокументыАвтоматически;
	ЭлементыФормы.Панель.Страницы.Расписание.Заголовок = "Расписание " + ?(Расписание = Неопределено,"(не задано)","");
КонецПроцедуры

// Устанавливает подпись к полю Задержка с учетом формы множественного числа
Процедура НастроитьНадписьЗадержка()
	
	Если НеОбрабатыватьВсеДокументы Тогда
	
		Если Задержка = 0 Тогда 
			ПояснениеЗадержка = "Не обрабатывать документы за сегодня";
		Иначе
			ПояснениеЗадержка = "";
		КонецЕсли;
		
	Иначе
		
		ПояснениеЗадержка = "Обрабатывать все введенные документы";
		
	КонецЕсли;
	
	Предыдущие 	= ОбщегоНазначения.ФормаМножественногоЧисла("предыдущий","предыдущие","предыдущие", Задержка);
	Дней 		= ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней", Задержка);
	
	ЭлементыФормы.НеОбрабатыватьВсеДокументы.Заголовок = "Не обрабатывать документы за " + Предыдущие + ":";
	ЭлементыФормы.НадписьЗадержка.Заголовок         = Дней;
	
КонецПроцедуры

//ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ФормироватьДокументыАвтоматическиПриИзменении(Элемент)
	НужноУдалитьРегламентноеЗадание = РегламентныеПроцедуры.ПриИзмененииФлагаФормироватьДокументыАвтоматически(ЭтаФорма);
	Если НЕ ФормироватьДокументыАвтоматически Тогда
		НеОбрабатыватьВсеДокументы = Ложь;
		Задержка = 0;
	КонецЕсли;
	УправлениеДоступностью();
КонецПроцедуры

Процедура ПредставлениеРасписанияНажатие(Элемент)
	РегламентныеПроцедуры.РедактироватьРасписаниеРегламентногоЗадания(ЭтаФорма);
	УправлениеДоступностью();
КонецПроцедуры

Процедура ПриОткрытии()
	МакетСКД = Справочники.НастройкиФормированияДокументовПоОрдерам.ПолучитьМакет("Настройка");
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(МакетСКД));
	ТекНастройкиКомпоновщика = МакетСКД.НастройкиПоУмолчанию;
	РазрешеноРедактированиеДатыНачала = Ложь;
	
	Если ЭтоНовый() Тогда
		Если ПараметрОбъектКопирования <> Неопределено Тогда
			ТекНастройкиКомпоновщика = ПараметрОбъектКопирования.НастройкиКомпоновщика.Получить();
		КонецЕсли;
	Иначе
		ТекНастройкиКомпоновщика = НастройкиКомпоновщика.Получить();
		Если ТекНастройкиКомпоновщика = Неопределено Тогда
			ТекНастройкиКомпоновщика = МакетСКД.НастройкиПоУмолчанию;
		КонецЕсли;
	КонецЕсли;
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(ТекНастройкиКомпоновщика);
	
	ПериодДетализацииПредставление 	= РегламентноеФормированиеДокументов.ПолучитьПредставление(ПредставленияПериодДетализации, ПериодДетализации);
	ВидРегулярногоДокументаПредставление = РегламентноеФормированиеДокументов.ПолучитьПредставление(ПредставленияРегулярныхДокументов, ВидРегулярногоДокумента);
	
	ИспользоватьЗадержку = Задержка <> 0;
	НастроитьНадписьЗадержка();
	
	НачалоОбработки = ?(ЗначениеЗаполнено(ГраницаОбработки), КонецДня(ГраницаОбработки) + 1,'0001-01-01');
	
	Расписание = РегламентныеПроцедуры.ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗадание);
	РегламентныеПроцедуры.НастроитьПредставлениеРасписания(ЭтаФорма);
	УправлениеДоступностью();
КонецПроцедуры

Процедура ПередЗаписью(Отказ)
	ЗаголовокСообщения 	= ЗаголовокПриЗаписи();
	Если НужноУдалитьРегламентноеЗадание = Истина Тогда
		РегламентныеПроцедуры.УдалитьРегламентноеЗаданиеПриЗаписиНастройки(ЭтотОбъект,ЗаголовокСообщения,Отказ);
	КонецЕсли;
	НастройкиКомпоновщика = Новый ХранилищеЗначения(КомпоновщикНастроекКомпоновкиДанных.ПолучитьНастройки());
	НастройкиОтбораСогласованы = ПроверитьНастройкиОтбора();
	Если НЕ НастройкиОтбораСогласованы Тогда
		Предупреждение("Возможно, в отборе указаны некорректные значения. 
						|Тип значения отбора ""Вид операции"" не соответствует значению отбора ""Направление""");
	КонецЕсли;
	
	ГраницаОбработки = ?(ЗначениеЗаполнено(НачалоОбработки), НачалоДня(НачалоОбработки) - 1,'0001-01-01');
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Обрабатываем расписание регл. задания
	Если НЕ ФормироватьДокументыАвтоматически Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаголовокСообщения 	= ЗаголовокПриЗаписи();
	РегламентныеПроцедуры.ИзменитьРегламентноеЗаданиеПриЗаписиНастройки(ЭтотОбъект,Расписание,ЗаголовокСообщения,Отказ);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Обработчик события НачалоВыбораИзСписка поля ПериодДетализации
// Выбор из ограниченного списка
Процедура ПериодДетализацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // стандартная обработка не позволяет спозиционироваться на нужное значение
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(ПредставленияПериодДетализации.ВыгрузитьКолонку("Представление"));
	
	Значение = ВыбратьИзСписка(СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если Значение<>Неопределено Тогда
		Элемент.Значение 	= Значение.Значение;
		ПериодДетализации = РегламентноеФормированиеДокументов.ПолучитьЗначение(ПредставленияПериодДетализации, Значение.Значение);
	КонецЕсли;	
КонецПроцедуры

Процедура ПериодДетализацииОчистка(Элемент, СтандартнаяОбработка)
	
	// Очищать это поле нельзя
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка поля ВидРегулярногоДокумента
// 
Процедура ВидРегулярногоДокументаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь; // стандартная обработка не позволяет спозиционироваться на нужное значение
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(ПредставленияРегулярныхДокументов.ВыгрузитьКолонку("Представление"));
	
	Значение = ВыбратьИзСписка(СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если Значение<>Неопределено Тогда
		Элемент.Значение 	= Значение.Значение;
		ВидРегулярногоДокумента = РегламентноеФормированиеДокументов.ПолучитьЗначение(ПредставленияРегулярныхДокументов, Значение.Значение);
		Если ТипЗнч(ШаблонРегулярногоДокумента) <> Тип("ДокументСсылка."+СокрЛП(ВидРегулярногоДокумента)) Тогда
			ШаблонРегулярногоДокумента = Документы[ВидРегулярногоДокумента].ПустаяСсылка();
		КонецЕсли;
		УправлениеДоступностью();
	КонецЕсли;	
КонецПроцедуры 

// Обработчик события ПриИзменении флага ОтражатьВБухгалтерскомУчете
// Управление связанным флагом ОтражатьВНалоговомУчете
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	УправлениеДоступностью();

КонецПроцедуры

// Обработчик события ПриИзменении поля ввода Задержка
// От значения зависит подпись
Процедура ЗадержкаПриИзменении(Элемент)
	
	НастроитьНадписьЗадержка();
	
КонецПроцедуры

// Обработчик события ПриИзменении флага НеОбрабатыватьВсеДокументы
// От значения зависит работа с полем Задержка
Процедура НеОбрабатыватьВсеДокументыПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
	Если НеОбрабатыватьВсеДокументы Тогда
		ТекущийЭлемент = ЭлементыФормы.Задержка;
	КонецЕсли;
	
	НастроитьНадписьЗадержка();
	
КонецПроцедуры

Процедура ВидРегулярногоДокументаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

Процедура НачалоОбработкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если РазрешеноРедактированиеДатыНачала Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Дата, начиная с которой обрабатываются данные, изменяется автоматически.
	|Изменение этой даты вручную может привести к ошибкам при формировании документов.
	|Вы действительно хотите изменить дату вручную?";
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Изменить дату вручную");
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		РазрешеноРедактированиеДатыНачала = Истина;
		
	Иначе
		//Восстановим предыдущую дату
		Элемент.Значение     = НачалоОбработки;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

КонецПроцедуры

//Описания представлений реквизита "ПериодДетализации" используются также в форме списка настроек
РегламентноеФормированиеДокументов.ДобавитьЭлементКоллекцииПредставлений(ПредставленияПериодДетализации, Перечисления.Периодичность.День,   "1 документ в день",	1);
РегламентноеФормированиеДокументов.ДобавитьЭлементКоллекцииПредставлений(ПредставленияПериодДетализации, Перечисления.Периодичность.Неделя, "1 документ в неделю",	7);
РегламентноеФормированиеДокументов.ДобавитьЭлементКоллекцииПредставлений(ПредставленияПериодДетализации, Перечисления.Периодичность.Месяц,  "1 документ в месяц",	30);
//Описания представлений реквизита "ВидРегулярногоДокумента" 
РегламентноеФормированиеДокументов.ДобавитьЭлементКоллекцииПредставлений(ПредставленияРегулярныхДокументов, "ПоступлениеТоваровУслуг",   "Поступление товаров и услуг",	1);
РегламентноеФормированиеДокументов.ДобавитьЭлементКоллекцииПредставлений(ПредставленияРегулярныхДокументов, "РеализацияТоваровУслуг", "Реализация товаров и услуг",	2);