////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Хранит список видов договоров, доступных для данного документа
Перем мСписокВидовДоговоров; 

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Переменные для кэширования коллекций колонок табличных полей.
Перем мКолонкиТовары;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если Не ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком
		Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом
		Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем
			 Или ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером
			 Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	КонецЕсли;
	
	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мВалютаРегламентированногоУчета, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, , "ТоварыИУслуги", мТекущийДоговорКонтрагента);

	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;

КонецПроцедуры // ПриИзмененииДоговора()

// Процедура управляет доступностью колонок субконто в табличной части услуги
Процедура УстановитьДоступностьСубконто()

	Колонки  = ЭлементыФормы.ТоварыИУслуги.Колонки;
	СтрокаТЧ = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;

	Если СтрокаТЧ = неопределено Тогда
		Возврат;
	КонецЕсли;

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТЧ.СчетЗатрат,
							 СтрокаТЧ.Субконто1, Колонки.Субконто1,
							 СтрокаТЧ.Субконто2, Колонки.Субконто2,
							 СтрокаТЧ.Субконто3, Колонки.Субконто3,
							 Колонки.СчетЗатрат,
							 Ложь);

КонецПроцедуры // УстановитьДоступностьСубконто()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	//ЭлементыФормы.ПрямаяЗаписьВКнигу.Доступность = Не мУпрощенныйУчетНДС;
	
	ЭлементыФормы.Контрагент.ОтметкаНезаполненного = Не ЗначениеЗаполнено(Контрагент) И Не (ИспользоватьДокументРасчетовКакСчетФактуру И УчетНДС.ДляСчетаФактурыНеТребуетсяКонтрагент(РасчетныйДокумент));
	ЭлементыФормы.ДоговорКонтрагента.ОтметкаНезаполненного = Не ЗначениеЗаполнено(ДоговорКонтрагента) И Не (ИспользоватьДокументРасчетовКакСчетФактуру И УчетНДС.ДляСчетаФактурыНеТребуетсяКонтрагент(РасчетныйДокумент));
	
	ЭлементыФормы.ФормироватьПроводки.Видимость = ПрямаяЗаписьВКнигу;
	ЭлементыФормы.РасчетныйДокумент.ОтметкаНезаполненного = Не ЗначениеЗаполнено(РасчетныйДокумент) И ИспользоватьДокументРасчетовКакСчетФактуру;
	ЭлементыФормы.ЗаписьДополнительногоЛиста.Видимость = ПрямаяЗаписьВКнигу;
	ЭлементыФормы.КорректируемыйПериод.Видимость = ПрямаяЗаписьВКнигу;
	
	ЭлементыФормы.КорректируемыйПериод.ОтметкаНезаполненного = ЗаписьДополнительногоЛиста И Не ЗначениеЗаполнено(КорректируемыйПериод);
	
	// Табличная часть Товары и услуги
	ЭлементыФормы.ТоварыИУслуги.Колонки.Цена.Видимость = Не ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.Количество.Видимость = Не ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.СчетЗатрат.Видимость = Не ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.Субконто1.Видимость = Не ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.Субконто2.Видимость = Не ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.Субконто3.Видимость = Не ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.Номенклатура.Видимость = Не ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.ВидЦенности.Видимость = ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.Событие.Видимость = ПрямаяЗаписьВКнигу;
	
	ЭлементыФормы.ТоварыИУслуги.Колонки.ВидЦенности.АвтоОтметкаНезаполненного = ПрямаяЗаписьВКнигу;
	ЭлементыФормы.ТоварыИУслуги.Колонки.СчетЗатрат.АвтоОтметкаНезаполненного = Не ПрямаяЗаписьВКнигу;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыОплаты.Видимость = ПрямаяЗаписьВКнигу;
		
	Для Каждого КнопкаЗаполнить Из ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки Цикл
		КнопкаЗаполнить.Доступность = Не ТолькоПросмотр;
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ТоварыИУслуги, ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыОплаты, ЭлементыФормы.КоманднаяПанельДокументыОплаты);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ, СоответствиеТЧ);

КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(?(СуммаВключаетНДС, ТоварыИУслуги.Итог("Сумма"), ТоварыИУслуги.Итог("Сумма") + ТоварыИУслуги.Итог("СуммаНДС")));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьНДСДокумента(ЭтотОбъект, "ТоварыИУслуги"));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, 
	                                                                               ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
	                                                                               ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
	                                                                               мВалютаРегламентированногоУчета) + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Ограничение типов для документа расчетов
//
Функция ОграничениеТиповДляДокументаРасчетов(ИзменятьДокументРасчетов = Ложь, КонтролироватьДокументРасчетов = Истина)
	
	ИсключаемыеТипы = Новый Массив();
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.ВводНачальныхОстатковНДС"));
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.ОперацияБух"));
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.ПлатежныйОрдерСписаниеДенежныхСредств"));
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.ПлатежноеПоручениеИсходящее"));
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.РасходныйКассовыйОрдер"));
	ИсключаемыеТипы.Добавить(Тип("ДокументСсылка.КорректировкаДолга"));
	
	ОграничениеТипа = Новый ОписаниеТипов(ЭлементыФормы.РасчетныйДокумент.ТипЗначения,,ИсключаемыеТипы);
	ЭлементыФормы.РасчетныйДокумент.ОграничениеТипа = ОграничениеТипа;
	
	Если КонтролироватьДокументРасчетов 
		И Не РасчетныйДокумент = Неопределено 
		И Не ОграничениеТипа.СодержитТип(ТипЗнч(РасчетныйДокумент)) Тогда
		// Выбран документ 
		ОбщегоНазначения.СообщитьОбОшибке(СтрЗаменить(Строка(типзнч(РасчетныйДокумент)), "Документ ссылка: ","Документ вида <")+"> не может использоваться в качестве "+?(ПрямаяЗаписьВКнигу,"документа оплаты", "документа расчетов")+".",,,СтатусСообщения.Информация);
		Если ИзменятьДокументРасчетов Тогда
			РасчетныйДокумент = Неопределено;
		КонецЕсли; 
	КонецЕсли; 

КонецФункции // ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ
 
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");
	СтруктураЗапрещенных = Новый Структура();
	СтруктураЗапрещенных.Вставить("УсловиеПродаж");

	Если ПрямаяЗаписьВКнигу Тогда
		СтруктураЗапрещенных.Вставить("НДСВключенВСтоимость");
	КонецЕсли;

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураЗапрещенных, "ТоварыИУслуги", , Истина);
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, СтруктураЗапрещенных, "ТоварыИУслуги", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка");

	Иначе
		Если (ЗначениеЗаполнено(РасчетныйДокумент)) и (ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ВводНачальныхОстатковНДС")) Тогда
			//По документам сформированным вводом начальных остатков по НДС не допускаются изменения
			ЭтаФорма.ТолькоПросмотр = Истина;
		КонецЕсли; 
		
		// Определить счет-фактуру, введенный на основании этого документа, если такой 
		// счет-фактура существует.
		ЗаполнитьТекстПроСчетФактуру();

	КонецЕсли;
	
	// Параметры для выбора организации
	УчетПоВсемОрганизациям = Истина; // Для совместимости с БП

	// Проверка ведения однофирменности
	ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;

	мТекущаяДатаДокумента = Дата;

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	ОграничениеТиповДляДокументаРасчетов(, Ложь);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	УстановитьВидимость();

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

Процедура ОбновлениеОтображения()
	
	ОбновитьПодвал();
	
	// Подсчитаем количество строк в табличной части.
	СтраницаПанели  = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.ТоварыИУслуги.Заголовок = "Товары и услуги ("   + ДокументОбъект.ТоварыИУслуги.Количество() + " поз.)";
	СтраницаПанели  = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.ДокументыОплаты.Заголовок = "Документы оплаты ("   + ДокументОбъект.ДокументыОплаты.Количество() + " поз.)";

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);

	Для Каждого СтрокаТоварыИУслуги Из ТоварыИУслуги Цикл
	
		РаботаСДиалогами.ПроверитьВладельцаСубконтоПодразделение(СтрокаТоварыИУслуги, 
												глЗначениеПеременной("глТекущийПользователь"),
												Организация, 
												Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
																|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
																"Субконто1", "Субконто2", "Субконто3", 
																СтрокаТоварыИУслуги.Субконто1, СтрокаТоварыИУслуги.Субконто2, СтрокаТоварыИУслуги.Субконто3));
	
	КонецЦикла;
														
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                        Неопределено, СтандартнаяОбработка);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода РасчетныйДокумент
//
Процедура РасчетныйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)

	Отбор = Новый Структура("Контрагент, ДокументыПоДоговоруКонтрагента", Контрагент, ДоговорКонтрагента);
	
	ОграничениеТипов = Элемент.ОграничениеТипа.Типы();
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "", ОграничениеТипов);

КонецПроцедуры // РасчетныйДокументНачалоВыбора()

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	Если ИспользоватьДокументРасчетовКакСчетФактуру <> Ссылка.ИспользоватьДокументРасчетовКакСчетФактуру Тогда 
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = "Для ввода счета-фактуры требуется записать документ";
		ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка = Ложь;
	ИначеЕсли ИспользоватьДокументРасчетовКакСчетФактуру
		И ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.ВозвратТоваровОтПокупателя") 
		И Не РасчетныйДокумент.ПокупателемВыставляетсяСчетФактураНаВозврат Тогда
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный"),
																									ЭтотОбъект, ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка);
	Иначе
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный"),
																									ЭтотОбъект, ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка);
	КонецЕсли;																						

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

// Процедура - обработчик события "ПриИзменении" флага "ПрямаяЗаписьВКнигу".
//
Процедура ПрямаяЗаписьВКнигуПриИзменении(Элемент)
	
	ОграничениеТиповДляДокументаРасчетов(Истина);
	УстановитьВидимость();
	
КонецПроцедуры

Процедура ЗаписьДополнительногоЛистаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры

Процедура РасчетныйДокументПриИзменении(Элемент)
	
	ЗаполнитьТекстПроСчетФактуру();
	УстановитьВидимость();

КонецПроцедуры

Процедура ИспользоватьДокументРасчетовКакСчетФактуруПриИзменении(Элемент)
		
	Если ИспользоватьДокументРасчетовКакСчетФактуру И Не Ссылка.ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный");
		Если ЗначениеЗаполнено(СчетФактура) И ТипЗнч(СчетФактура) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			
			Ответ = Вопрос("Требуется пометить на удаление подчиненный документ <" + СчетФактура + ">. Пометить документ на удаление?", РежимДиалогаВопрос.ДаНет);
			Если Ответ = КодВозвратаДиалога.Да Тогда
				СчетФактураОбъект = СчетФактура.ПолучитьОбъект();
				СчетФактураОбъект.ДокументОснование = Неопределено;
				СчетФактураОбъект.Записать(РежимЗаписиДокумента.ОтменаПроведения);
				СчетФактураОбъект.УстановитьПометкуУдаления(Истина);
			Иначе
				ИспользоватьДокументРасчетовКакСчетФактуру = Ложь;			
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьДокументРасчетовКакСчетФактуру Тогда
		Если ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураПолученный") Тогда
			Сообщить("Рекомендуется указать в качестве документа расчетов документ-основание счета-фактуры полученного, если им не является авансовый отчет");
		ИначеЕсли ТипЗнч(РасчетныйДокумент) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			Сообщить("Рекомендуется указать в качестве документа расчетов документ-основание счета-фактуры выданного");
		КонецЕсли;
	КонецЕсли;                                       		
	
	ЗаполнитьТекстПроСчетФактуру();
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ "ТоварыИУслуги"

// Процедура - обработчик события "Нажатие" кнопки "Заполнить"
//
Процедура КоманднаяПанельТоварыДействиеЗаполнить(Кнопка)

	ЗаполнитьПоРасчетномуДокументу(Ложь);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнить()

// Процедура - обработчик события "Нажатие" кнопки "Заполнить"
//
Процедура КоманднаяПанельТоварыДействиеЗаполнить1(Кнопка)

	ЗаполнитьПоРасчетномуДокументу(Истина);

КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииКолонки" ТЧ "ТоварыИУслуги"
//
Процедура ТоварыИУслугиПриАктивизацииКолонки(Элемент)

	УстановитьДоступностьСубконто()

КонецПроцедуры // ТоварыИУслугиПриАктивизацииКолонки()

Процедура ТоварыИУслугиСтавкаНДСПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;

	СтрокаТЧ.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.Сумма,
	                                       Истина, СуммаВключаетНДС,
	                                       УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));

КонецПроцедуры

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

Процедура ТоварыИУслугиСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СчетЗатрат"
// табличной части "ТоварыИУслуги".
//
Процедура ТоварыИУслугиСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             СтрокаТабличнойЧасти.Субконто1,
	                             ЭлементыФормы.ТоварыИУслуги.Колонки.Субконто1,
	                             СтрокаТабличнойЧасти.Субконто2,
	                             ЭлементыФормы.ТоварыИУслуги.Колонки.Субконто2,
	                             СтрокаТабличнойЧасти.Субконто3,
	                             ЭлементыФормы.ТоварыИУслуги.Колонки.Субконто3);
	
	РаботаСДиалогами.ПроверитьВладельцаСубконтоПодразделение(СтрокаТабличнойЧасти, 
											глЗначениеПеременной("глТекущийПользователь"),
											Организация, 
											Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
															|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
															"Субконто1", "Субконто2", "Субконто3", 
															СтрокаТабличнойЧасти.Субконто1, 
															СтрокаТабличнойЧасти.Субконто2, 
															СтрокаТабличнойЧасти.Субконто3));
	
	СтрокаТабличнойЧасти.ВидЦенности = УчетНДС.ОпределитьВидЦенности(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.СчетЗатрат);
	
КонецПроцедуры // ТоварыИУслугиСчетЗатратПриИзменении()

Процедура ТоварыИУслугиСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура ТоварыИУслугиСуммаПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;

	СтрокаТЧ.СуммаНДС = УчетНДС.РассчитатьСуммуНДС(СтрокаТЧ.Сумма,
	                                       Истина, СуммаВключаетНДС,
	                                       УчетНДС.ПолучитьСтавкуНДС(СтрокаТЧ.СтавкаНДС));
										   
КонецПроцедуры

Процедура ТоварыИУслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ЭлементыФормы.ТоварыИУслуги.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));

	КонецЕсли;

КонецПроцедуры

Процедура ТоварыИУслугиНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		// Выполнить общие действия для всех документов при изменении номенклатуры.
		ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		// Заполняем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 

		СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
		                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата, ВалютаДокумента, Истина, СуммаВключаетНДС);
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ТоварыИУслуги", Истина, Ложь);
		
	ИначеЕсли ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = Неопределено;		
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ВидЦенности = УчетНДС.ОпределитьВидЦенности(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.СчетЗатрат);
	
	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

Процедура ТоварыИУслугиЦенаПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

Процедура ТоварыИУслугиКоличествоПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

Процедура ТоварыИУслугиЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
	
		// Выполнить общие действия для всех документов при изменении Единица.
		ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		// Рассчитать реквизиты табличной части.
		ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры

Процедура ТоварыИУслугиЕдиницаИзмеренияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ТоварыИУслуги.ТекущиеДанные;
	
	Если ТипЗнч(СтрокаТабличнойЧасти.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ "ДокументыОплаты"

Процедура ДокументыОплатыДокументОплатыПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДокументыОплаты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОплаты) Тогда
		ТекущиеДанные.ДатаОплаты = ТекущиеДанные.ДокументОплаты.Дата;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
//

мКолонкиТовары = ЭлементыФормы.ТоварыИУслуги.Колонки;