////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСведенияОВидахРасчета;

Перем мСведенияОВидеРасчета;

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мБылВидРасчета;

Перем мПоказыватьВалюту;

Перем мМассивРасчетовПоИсполнительнымЛистам;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает наличие валютного учета по выбранной организации
//
Процедура ОпределитьНаличиеВалютногоУчета()
	
	мПоказыватьВалюту = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
	
	УстановитьВидимостьИНазваниеКолонокРазмера();
	
КонецПроцедуры

Процедура УстановитьВидимостьИНазваниеКолонокРазмера()
	
	мСведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета, );
	
	ВидимостьТекущихЗначений = (Действие = 0 Или Действие = 2);
	
	Если ВидимостьТекущихЗначений Тогда
		ЭлементыФормы.НадписьПериод.Заголовок			= "Период";
	Иначе
		ЭлементыФормы.НадписьПериод.Заголовок			= "Прекратить";
	КонецЕсли;
	
	Для СчПоказателей = 1 По 6 Цикл
		
		Если СчПоказателей <= мСведенияОВидеРасчета["КоличествоПоказателей"] Или СчПоказателей = 1 Тогда


			Если мСведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
				
				ВидимостьПоказателя = мСведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] И ВидимостьТекущихЗначений;
				
				ЭлементыФормы.ОсновныеНачисления.Колонки["НаименованиеПоказательТР" + СчПоказателей].ТекстШапки = мСведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"];
				
				ЭлементыФормы.ОсновныеНачисления.Колонки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= ВидимостьПоказателя;
				ЭлементыФормы.ОсновныеНачисления.Колонки["ТарифныйРазряд" + СчПоказателей].Видимость			= ВидимостьПоказателя И ВидимостьТекущихЗначений;
				
				ЭлементыФормы.ОсновныеНачисления.Колонки["Показатель" + СчПоказателей].Видимость				= Ложь;
				ЭлементыФормы.ОсновныеНачисления.Колонки["Валюта" + СчПоказателей].Видимость					= Ложь;
				ЭлементыФормы.ОсновныеНачисления.Колонки["НаименованиеПоказатель" + СчПоказателей].Видимость	= Ложь;
				
			Иначе
				// размеры показателя будут доступны только для видимых показателей
				ВидимостьПоказателя = мСведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] И ВидимостьТекущихЗначений;
				ЭлементыФормы.ОсновныеНачисления.Колонки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				Если ВидимостьПоказателя Тогда
					ЭлементыФормы.ОсновныеНачисления.Колонки["НаименованиеПоказатель" + СчПоказателей].ТекстШапки = мСведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
				КонецЕсли;
				
				ЭлементыФормы.ОсновныеНачисления.Колонки["Показатель" + СчПоказателей].Видимость				= ВидимостьПоказателя И ВидимостьТекущихЗначений;
				ЭлементыФормы.ОсновныеНачисления.Колонки["Валюта" + СчПоказателей].Видимость					= ВидимостьПоказателя И ВидимостьТекущихЗначений И мСведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] И мПоказыватьВалюту;
			
				ЭлементыФормы.ОсновныеНачисления.Колонки["Показатель" + СчПоказателей].ЭлементУправления.Формат = "ЧДЦ=" + мСведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"];
				ЭлементыФормы.ОсновныеНачисления.Колонки["Показатель" + СчПоказателей].Формат = "ЧДЦ=" + мСведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"];
				
				ЭлементыФормы.ОсновныеНачисления.Колонки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= Ложь;
				ЭлементыФормы.ОсновныеНачисления.Колонки["ТарифныйРазряд" + СчПоказателей].Видимость			= Ложь;
				
				ТолькоПросмотрКолонок	 = Не (ВидимостьПоказателя И (Действие = 0 Или Действие = 2));
				
			КонецЕсли;
			
		Иначе
			// настроим видимость ячеек
			ЭлементыФормы.ОсновныеНачисления.Колонки["НаименованиеПоказатель" + СчПоказателей].Видимость	= Ложь;
			ЭлементыФормы.ОсновныеНачисления.Колонки["Показатель" + СчПоказателей].Видимость				= Ложь;
			ЭлементыФормы.ОсновныеНачисления.Колонки["Валюта" + СчПоказателей].Видимость					= Ложь;
			ЭлементыФормы.ОсновныеНачисления.Колонки["НаименованиеПоказательТР" + СчПоказателей].Видимость	= Ложь;
			ЭлементыФормы.ОсновныеНачисления.Колонки["ТарифныйРазряд" + СчПоказателей].Видимость			= Ложь;
			
		КонецЕсли;
	
	КонецЦикла;
	
	Если Действие = 3 Тогда
		ЭлементыФормы.ОсновныеНачисления.Колонки.ДокументОснование.Видимость = Истина;
	Иначе
		ЭлементыФормы.ОсновныеНачисления.Колонки.ДокументОснование.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры //УстановитьВидимостьИНазваниеКолонокРазмера

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя, "Имя", Истина), ЭтотОбъект);
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанельОсновныеНачисления);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.НадписьОрганизация.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

// Процедура устанавливает значение показателей начилсения для общих показателей в целом по компании и в целом по подразделению
//
Процедура ПриИзмененииПоказателяНачисления(Значение,парамПоказатель)
	
	мСведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
	КоличествоПоказателей = мСведенияОВидеРасчета["ФактКоличествоПоказателей"];
	
	Если КоличествоПоказателей > (парамПоказатель - 1) Тогда
		Показатель  = мСведенияОВидеРасчета["Показатель" + парамПоказатель];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Тогда
		Для каждого СтрокаНачисления Из ОсновныеНачисления Цикл
			ВидРасчета = СтрокаНачисления.ВидРасчета;
			СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
			КоличествоПоказателей = мСведенияОВидеРасчета["ФактКоличествоПоказателей"];
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				ПоказательВР = мСведенияОВидеРасчета["Показатель" + СчПоказателей];
				Если ПоказательВР.Предопределенный Тогда 
					Продолжить;
				КонецЕсли;
				Если ПоказательВР = Показатель Тогда
					СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры //ПриИзмененииПоказателяНачисления

Функция ПолучитьСтруктуруПараметровПодбораПоСтроке()
	
	СтруктураПараметров = Новый Структура("СпособРасчета", ПроведениеРасчетов.ПолучитьСписокВариантовУдержанийОрганизации());
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли; 
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

Процедура КоманднаяПанельОсновныеНачисленияПодбор(Кнопка)

	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизацииСПоказателями(Метаданные().ТабличныеЧасти.ОсновныеНачисления.Реквизиты, ЭлементыФормы, Ссылка, Дата, мГоловнаяОрганизация, ОсновныеНачисления, "ОсновныеНачисления", Истина, "НаименованиеПоказатель");

КонецПроцедуры

Процедура КоманднаяПанельОсновныеНачисленияСписокРаботников(Кнопка)
	
	Если ОсновныеНачисления.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидРасчета) Тогда
		Если ОсновныеНачисления.Количество() > 0 Тогда
			ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата,"РаботникиОрганизаций",Организация, , , ,"ПостоянныеНачисления", Новый Структура("ВидРасчета, Показатель1, Показатель2, Показатель3, Показатель4, Показатель5, Показатель6, ТарифныйРазряд1, ТарифныйРазряд2, ТарифныйРазряд3, ТарифныйРазряд4, ТарифныйРазряд5, ТарифныйРазряд6, Валюта1, Валюта2, Валюта3, Валюта4, Валюта5, Валюта6",
			ВидРасчета, ОсновныеНачисления[0].Показатель1, ОсновныеНачисления[0].Показатель2, ОсновныеНачисления[0].Показатель3, ОсновныеНачисления[0].Показатель4, ОсновныеНачисления[0].Показатель5, ОсновныеНачисления[0].Показатель6, ОсновныеНачисления[0].ТарифныйРазряд1, ОсновныеНачисления[0].ТарифныйРазряд2, ОсновныеНачисления[0].ТарифныйРазряд3, ОсновныеНачисления[0].ТарифныйРазряд4,  ОсновныеНачисления[0].ТарифныйРазряд5,  ОсновныеНачисления[0].ТарифныйРазряд6,
			ОсновныеНачисления[0].Валюта1, ОсновныеНачисления[0].Валюта2, ОсновныеНачисления[0].Валюта3, ОсновныеНачисления[0].Валюта4, ОсновныеНачисления[0].Валюта5, ОсновныеНачисления[0].Валюта6));
		Иначе
			ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата,"РаботникиОрганизаций",Организация, , , ,"ПостоянныеНачисления", Новый Структура("ВидРасчета, Показатель1, Показатель2, Показатель3, Показатель4, Показатель5, Показатель6, ТарифныйРазряд1, ТарифныйРазряд2, ТарифныйРазряд3, ТарифныйРазряд4, ТарифныйРазряд5, ТарифныйРазряд6, Валюта1, Валюта2, Валюта3, Валюта4, Валюта5, Валюта6",
			ВидРасчета));
		КонецЕсли;
	Иначе
		Предупреждение("Перед заполнением табличной части необходимо выбрать вид расчета!");
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

Процедура ОсновныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ОсновныеНачисления, ОформленияСтрок);

КонецПроцедуры

Процедура ОсновныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		мСведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
		КоличествоПоказателей = мСведенияОВидеРасчета["ФактКоличествоПоказателей"];
		Для СчПоказателей = 1 По КоличествоПоказателей Цикл
			Элемент.ТекущаяСтрока["Валюта" + СчПоказателей] = мСведенияОВидеРасчета["ВалютаПоказателя" + СчПоказателей];
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура ОсновныеНачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	Если ВидРасчета <> Неопределено Тогда
	
		мСведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
		
		Для СчПоказателей = 1 По 6 Цикл
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["НаименованиеПоказательТР" + СчПоказателей].Видимость = Ложь;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияПриВыводеСтроки()

// Процедура - обработчик события "ПриОкончанииРедактирования" ТЧ
//
Процедура ОсновныеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Действие= Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Элемент.ТекущаяСтрока.Показатель1 = 0;
		Элемент.ТекущаяСтрока.Показатель2 = 0;
		Элемент.ТекущаяСтрока.Показатель3 = 0;
		Элемент.ТекущаяСтрока.Показатель4 = 0;
		Элемент.ТекущаяСтрока.Показатель5 = 0;
		Элемент.ТекущаяСтрока.Показатель6 = 0;
		
	КонецЕсли;
		
КонецПроцедуры // ОсновныеНачисленияПриОкончанииРедактирования()


// Процедура - обработчик события "ОбработкаВыбора"
//
Процедура ОсновныеНачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если ОсновныеНачисления.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			НоваяСтрока = ОсновныеНачисления.Добавить();
			НоваяСтрока.Сотрудник = ВыбранноеЗначение;
			НоваяСтрока.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
			
			Для СчПоказателя = 1 По 6 Цикл
				Если СчПоказателя <= мСведенияОВидеРасчета.ФактКоличествоПоказателей Тогда 
					Если мСведенияОВидеРасчета["Показатель" + СчПоказателя + "Видимость"] Тогда
						НоваяСтрока["Валюта"+СчПоказателя] = мСведенияОВидеРасчета["ВалютаПоказателя"+СчПоказателя];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ПроцедурыУправленияПерсоналом.ОбработкаВыбораТабличнойЧастиСЗаполнениемПоказателейРасчета(ВыбранноеЗначение, ОсновныеНачисления)

	КонецЕсли;

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

// Процедура - обработчик события "ПриИзменении" поля ввода Сотрудник
//
Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Физлицо = Элемент.Значение.Физлицо;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 5, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 5, Текст, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 5, Текст, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникОкончаниеВводаТекста()


// Процедура - обработчик события "ПоказательПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель1ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 1);
	
КонецПроцедуры //ОсновныеНачисленияПоказатель1ПриИзменении

// Процедура - обработчик события "Показатель2ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель2ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 2);
	
КонецПроцедуры //ОсновныеНачисленияПоказатель2ПриИзменении

// Процедура - обработчик события "Показатель3ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель3ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 3);

КонецПроцедуры //ОсновныеНачисленияПоказатель3ПриИзменении

// Процедура - обработчик события "Показатель4ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель4ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 4);
	
КонецПроцедуры //ОсновныеНачисленияПоказатель4ПриИзменении

// Процедура - обработчик события "Показатель5ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель5ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 5);
	
КонецПроцедуры

// Процедура - обработчик события "Показатель6ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель6ПриИзменении(Элемент)

	ПриИзмененииПоказателяНачисления(Элемент.Значение, 6);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
		мБылВидРасчета = ВидРасчета;

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
			
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ТабельныйНомерСтрока);
	Если глЗначениеПеременной("глЕстьВалютныеПоказателиОрганизаций") Тогда
		Для Сч = 1 По 6 Цикл
			мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки["Валюта"+Сч]);
		КонецЦикла;
	Иначе
		Для Сч = 1 По 6 Цикл
			ЭлементыФормы.ОсновныеНачисления.Колонки["Валюта"+Сч].Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	ОпределитьНаличиеВалютногоУчета();
	
	ВнестиИлиИзменитьНачислениеПриИзменении();

	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.ОсновныеНачисления;
	КонецЕсли;
	
	УстановитьЗаголовкиОрганизацийВФорме();

	мМассивРасчетовПоИсполнительнымЛистам = ПроведениеРасчетов.МассивРасчетовПоИсполнительнымЛистам();
	
КонецПроцедуры //ПриОткрытии

Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	Если ТипЗнч(ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
		Оповестить("ОбновитьСписокПлановыхНачислений", ОсновныеНачисления.ВыгрузитьКолонку("Сотрудник"));
	Иначе
		Оповестить("ОбновитьСписокПлановыхУдержаний", ОсновныеНачисления.ВыгрузитьКолонку("Сотрудник"));
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";  Реквизиты = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			Если Действие = 0 Или Действие = 1 Тогда // начисления
				ОсновныеНачисления.Загрузить(ЗначениеВыбора.Данные.Выгрузить());
			Иначе // для удержаний оставим только по одному сотруднику на физлицо	
				Запрос = Новый Запрос;
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СотрудникиОрганизаций.Физлицо КАК Физлицо,
				|	СотрудникиОрганизаций.Ссылка КАК Сотрудник,
				|	СотрудникиОрганизаций.ВидЗанятости КАК ВидЗанятости
				|ИЗ
				|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
				|ГДЕ
				|	СотрудникиОрганизаций.Ссылка В(&СписокСотрудников)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Физлицо,
				|	ВидЗанятости УБЫВ";
				Запрос.УстановитьПараметр("СписокСотрудников", ЗначениеВыбора.Данные.Выгрузить().ВыгрузитьКолонку("Сотрудник"));
				
				ВременнаяТаблица = Запрос.Выполнить().Выгрузить();
				ВременнаяТаблица.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 0)));
				Счетчик = 0;
				Для каждого СтрокаТЗ Из ВременнаяТаблица Цикл
					СтрокаТЗ.НомерСтроки = Счетчик;
					Счетчик = Счетчик + 1;
				КонецЦикла;
				
				Запрос.Текст = 
				"ВЫБРАТЬ
				|	СписокСотрудников.НомерСтроки КАК НомерСтроки,
				|	СписокСотрудников.Сотрудник КАК Сотрудник,
				|	СписокСотрудников.ВидЗанятости КАК ВидЗанятости,
				|	СписокСотрудников.Физлицо КАК Физлицо
				|ПОМЕСТИТЬ ВТСотрудники
				|ИЗ
				|	&СписокСотрудников КАК СписокСотрудников
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	Сотрудники.Физлицо,
				|	Сотрудники.Сотрудник
				|ИЗ
				|	ВТСотрудники КАК Сотрудники
				|		ЛЕВОЕ СОЕДИНЕНИЕ ВТСотрудники КАК ПовторныеСотрудники
				|		ПО Сотрудники.Физлицо = ПовторныеСотрудники.Физлицо
				|			И Сотрудники.НомерСтроки < ПовторныеСотрудники.НомерСтроки
				|ГДЕ
				|	ПовторныеСотрудники.НомерСтроки ЕСТЬ NULL ";
				Запрос.УстановитьПараметр("СписокСотрудников", ВременнаяТаблица);
				ОсновныеНачисления.Загрузить(Запрос.Выполнить().Выгрузить());
			КонецЕсли;
			
			Для Каждого СтрокаПоказателей Из ОсновныеНачисления Цикл
				Для Сч = 1 По Мин(мСведенияОВидеРасчета.КоличествоПоказателей, 6) Цикл
					Если Сч <=  мСведенияОВидеРасчета.КоличествоПоказателей Тогда
						СтрокаПоказателей["Показатель"+Сч] = ЗначениеВыбора.Реквизиты["Показатель"+Сч];
						СтрокаПоказателей["ТарифныйРазряд"+Сч] = ЗначениеВыбора.Реквизиты["ТарифныйРазряд"+Сч];
						СтрокаПоказателей["Валюта"+Сч] = ЗначениеВыбора.Реквизиты["Валюта"+Сч];
						
						Если Не ЗначениеЗаполнено(СтрокаПоказателей["Валюта"+Сч]) Тогда
							СтрокаПоказателей["Валюта"+Сч] = мСведенияОВидеРасчета["ВалютаПоказателя"+Сч];
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)


	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	ОпределитьНаличиеВалютногоУчета();

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ДействиеПриИзменении()
	
	Если Действие = 1 Или Действие = 3 Тогда
		Для Каждого СтрокаОсновныеНачисления Из ОсновныеНачисления Цикл
			СтрокаОсновныеНачисления.Показатель1 = 0;
			СтрокаОсновныеНачисления.Показатель2 = 0;
			СтрокаОсновныеНачисления.Показатель3 = 0;
			СтрокаОсновныеНачисления.Показатель4 = 0;
			СтрокаОсновныеНачисления.Показатель5 = 0;
			СтрокаОсновныеНачисления.Показатель6 = 0;
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

Процедура ВнестиИлиИзменитьНачислениеПриИзменении()
	
	Если (Действие = 0 Или Действие = 1) И ТипЗнч(ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций") Тогда
		ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
	ИначеЕсли (Действие = 2 Или Действие = 3) И ТипЗнч(ВидРасчета) <> Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций") Тогда
		ВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	УстановитьВидимостьИНазваниеКолонокРазмера();

КонецПроцедуры

Процедура ВнестиИлиИзменитьНачислениеПриИзмененииИзФормы()
	
	ВнестиИлиИзменитьНачислениеПриИзменении();

	ДействиеПриИзменении();
	
КонецПроцедуры


Процедура ВидРасчетаПриИзменении(Элемент)
	
	УстановитьВидимостьИНазваниеКолонокРазмера();

КонецПроцедуры

Процедура ВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если Действие = 0 Или Действие = 1 Тогда
		Возврат
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаВводПостоянногоНачисленияИлиУдержанияСотрудникамОрганизации");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = ПроведениеРасчетов.ПолучитьСписокВариантовУдержанийОрганизации();
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммой;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура ВидРасчетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ОсновныеНачисления.Количество() > 0 Тогда
		
		Если мБылВидРасчета <> ВыбранноеЗначение Тогда
			
			Ответ = Вопрос("При смене вида расчета введенные ранее показатели будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет,120);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				СтандартнаяОбработка = Ложь;
			Иначе
				
				ВидРасчета = ВыбранноеЗначение;
				мСведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
				
				Для Каждого СтрокаПоказателей Из ОсновныеНачисления Цикл
					Для СчПоказателя = 1 По 6 Цикл
						СтрокаПоказателей["Показатель"+СчПоказателя] = 0;
						СтрокаПоказателей["ТарифныйРазряд"+СчПоказателя] = Справочники.ТарифныеРазряды.ПустаяСсылка();
						Если СчПоказателя <= мСведенияОВидеРасчета.ФактКоличествоПоказателей Тогда
							Если мСведенияОВидеРасчета["Валюта" + СчПоказателя + "Видимость"] Тогда
								Показатель = мСведенияОВидеРасчета["Показатель"+СчПоказателя];
								Если ЗначениеЗаполнено(Показатель) Тогда
									СтрокаПоказателей["Валюта"+СчПоказателя] = Показатель.Валюта;
								Иначе
									СтрокаПоказателей["Валюта"+СчПоказателя] = Справочники.Валюты.ПустаяСсылка();
								КонецЕсли;
							Иначе
								СтрокаПоказателей["Валюта"+СчПоказателя] = Справочники.Валюты.ПустаяСсылка();
							КонецЕсли;
						Иначе
							СтрокаПоказателей["Валюта"+СчПоказателя] = Справочники.Валюты.ПустаяСсылка();
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				мБылВидРасчета = ВыбранноеЗначение;
				УстановитьВидимостьИНазваниеКолонокРазмера();
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	Если Действие = 0 Или Действие = 1 Тогда
		Возврат
	КонецЕсли;
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"));
	
КонецПроцедуры

Процедура ВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Если Действие = 0 Или Действие = 1 Тогда
		Возврат
	КонецЕсли;
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

Процедура ОсновныеНачисленияДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если мМассивРасчетовПоИсполнительнымЛистам.Найти(ВидРасчета) <> Неопределено Тогда
		Тип = Тип("ДокументСсылка.ИсполнительныйЛист");
		
		Если ТипЗнч(ЭлементыФормы.ОсновныеНачисления.Колонки.ДокументОснование) <> Тип Тогда
			ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока.ДокументОснование = ОбщегоНазначения.ПустоеЗначениеТипа(Тип);
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСведенияОВидахРасчета = Новый Соответствие;