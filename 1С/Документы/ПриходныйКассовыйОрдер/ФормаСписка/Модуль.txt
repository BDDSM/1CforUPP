Перем мВалютаРегламентированногоУчета;

//  Процедура печатает выбранный документ 
// Печатается та форма, которая была отпечатана при нажатии в документе кнопки
// печати по умолчанию
//
Процедура ДействияФормыДействиеПечать(Кнопка)

	Если ЭтаФорма.ЭлементыФормы.Список.ТекущаяСтрока = Неопределено тогда
		Возврат
	КонецЕсли;

	УниверсальныеМеханизмы.НапечататьДокументИзФормыСписка(ЭтаФорма.ЭлементыФормы.Список.ТекущаяСтрока.ПолучитьОбъект());

КонецПроцедуры // ДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	Если ЭтаФорма.ЭлементыФормы.Список.ТекущаяСтрока = Неопределено тогда
		Возврат
	КонецЕсли;

	РаботаСДиалогами.НапечататьДвиженияДокумента(ЭлементыФормы.Список.ТекущиеДанные.Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура вызывается при выборе пункта подменю "Структура подчиненности" меню "Перейти".
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭтаФорма.ЭлементыФормы.Список.ТекущаяСтрока);
	
КонецПроцедуры

Процедура ДействияФормыПечатьКассовогоЧека(Кнопка)

	ТекущиеДанные = ЭлементыФормы.Список.ТекущиеДанные;

	Если ТекущиеДанные = Неопределено Тогда
		Предупреждение("В списке не выбран документ, печать чека для которого запрашивается.", 60);
		Возврат;
	КонецЕсли;

	МассивФР = ПолучитьСерверТО().ПолучитьСписокУстройств(
	                    Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор,
	                    Справочники.КассыККМ.ПустаяСсылка());

	ФР            = Неопределено;
	СписокФР      = Новый СписокЗначений();
	Вид           = Неопределено;
	Представление = Неопределено;

	Для каждого ФР Из МассивФР Цикл
		ПолучитьСерверТО().ПолучитьПредставлениеУстройства(ФР, Вид, Представление);
		СписокФР.Добавить(ФР, Представление);
	КонецЦикла;

	КоличествоФР = СписокФР.Количество();
	Если      КоличествоФР = 0 Тогда
		Предупреждение("Фискальный регистратор не подключен!");
		ФР = Неопределено;
	ИначеЕсли КоличествоФР = 1 Тогда
		ФР = СписокФР[0].Значение;
	Иначе
		ФР = СписокФР.ВыбратьЭлемент("Необходимо выбрать фискальный регистратор");
		Если ФР = Неопределено Тогда
			Предупреждение("Операция отменена пользователем");
		Иначе
			ФР = ФР.Значение;
		КонецЕсли;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ФР) Тогда
		Возврат;
	КонецЕсли;

	Ссылка = ТекущиеДанные.Ссылка;
	Объект = Ссылка.ПолучитьОбъект();

	Если Объект.НомерЧекаККМ <> 0 Тогда
		Предупреждение("Чек уже пробит на фискальном регистраторе.");
		Возврат;
	КонецЕсли;

	Если (НЕ Объект.Оплачено) ИЛИ (НЕ Объект.Проведен) Тогда
		Ответ = Вопрос("Провести документ?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Предупреждение("Операция не выполнена!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Попытка
	
		НачатьТранзакцию();
		
		Объект.Оплачено = Истина;
		Объект.Записать(РежимЗаписиДокумента.Проведение);
	
		ЗаголовокЧека = "Принято от " + Объект.ПринятоОт + "
		            |Основание: " + Объект.Основание;

		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|    &ЗаголовокЧека             КАК Заголовок,
		|    ТчРасшифровка.СуммаПлатежа КАК Сумма,
		|    ВЫБОР
		|        КОГДА ТчРасшифровка.СтавкаНДС = &НДС20 ИЛИ ТчРасшифровка.СтавкаНДС = &НДС120 ТОГДА
		|            20
		|        КОГДА ТчРасшифровка.СтавкаНДС = &НДС10 ИЛИ ТчРасшифровка.СтавкаНДС = &НДС110 ТОГДА
		|            10
		|        КОГДА ТчРасшифровка.СтавкаНДС = &НДС18 ИЛИ ТчРасшифровка.СтавкаНДС = &НДС118 ТОГДА
		|            18
		|        ИНАЧЕ
		|            0
		|    КОНЕЦ                      КАК НДС
		|ИЗ
		|    Документ.ПриходныйКассовыйОрдер.РасшифровкаПлатежа КАК ТчРасшифровка
		|ГДЕ
		|    ТчРасшифровка.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("НДС20",  Перечисления.СтавкиНДС.НДС20);
		Запрос.УстановитьПараметр("НДС120", Перечисления.СтавкиНДС.НДС20_120);
		Запрос.УстановитьПараметр("НДС10",  Перечисления.СтавкиНДС.НДС10);
		Запрос.УстановитьПараметр("НДС110", Перечисления.СтавкиНДС.НДС10_110);
		Запрос.УстановитьПараметр("НДС18",  Перечисления.СтавкиНДС.НДС18);
		Запрос.УстановитьПараметр("НДС118", Перечисления.СтавкиНДС.НДС18_118);
		Запрос.УстановитьПараметр("ЗаголовокЧека", ЗаголовокЧека);
		РезультатЗапроса = Запрос.Выполнить();

		Если РезультатЗапроса.Пустой() Тогда
			ОтменитьТранзакцию();
			Предупреждение("Документ не содержит информации о платежах.");
			Возврат;
		КонецЕсли;

		НомерСмены      = Неопределено;
		ТаблицаПлатежей = РезультатЗапроса.Выгрузить();
	
		Результат = ПолучитьСерверТО().ПечатьЧекаПКО(ФР,
	                                    "",
	                                    Объект.НомерЧекаККМ,
	                                    НомерСмены,
	                                    ТаблицаПлатежей,
	                                    Объект.СуммаДокумента,
	                                    0);

		Если ЗначениеЗаполнено(Результат) Тогда
			ОтменитьТранзакцию();
			ТекстОшибки = ПолучитьСерверТО().ПолучитьТекстОшибкиФРТО(Результат);
			Предупреждение(ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Объект.Записать(РежимЗаписиДокумента.Запись);
		ЗафиксироватьТранзакцию();

	Исключение
		
		ОтменитьТранзакцию();
		Предупреждение("Операция не выполнена!");
		Объект.ПолучитьФорму().Открыть();
		
	КонецПопытки;

КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	БухгалтерскийУчет.ОткрытьЖурналПроводок(ЭлементыФормы.Список.ТекущиеДанные.Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	Если ЭлементыФормы.Список.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	БухгалтерскийУчет.ОткрытьЖурналПроводок(ЭлементыФормы.Список.ТекущиеДанные.Ссылка, "НУ");

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.ФискальныйРегистратор Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");