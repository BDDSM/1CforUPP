////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мСинхронизируемыеТабличныеЧасти; // для синхронизации строк табличных полей

Перем мСведенияОВидахРасчета;
Перем мДопСведенияОВидахРасчетаНачислений;

Перем мСписокКодовНДФЛОсновныхНачислений;
Перем мСписокКодовВычетов;
Перем мСписокКодовВычетовДоговораГПХ;
Перем мКодВычетаПоМатпомощиПриРожденииРебенка;
Перем мСоответствиеДоходовИВычетов;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит "Результат" текущей строки
Перем мСтарыйРезультат;
// Хранит "ОтработаноДней" текущей строки
Перем мБылоОтработаноДней;
// Хранит "ОтработаноЧасов" текущей строки
Перем мБылоОтработаноЧасов;
// Хранит "ОтработаноДнейПоПятидневке" текущей строки
Перем мБылоОтработаноДнейПоПятидневке;
// Хранит "ОтработаноЧасовПоПятидневке" текущей строки
Перем мБылоОтработаноЧасовПоПятидневке;
// Хранит "НормаДней" текущей строки
Перем мБылоНормаДней;
// Хранит "НормаЧасов" текущей строки
Перем мБылоНормаЧасов;
// Хранит "НормаДнейПоПятидневке" текущей строки
Перем мБылоНормаДнейПоПятидневке;
// Хранит "НормаЧасовПоПятидневке" текущей строки
Перем мБылоНормаЧасовПоПятидневке;
// Хранит "ОплаченоДнейЧасов" текущей строки
Перем мБылоОплаченоДнейЧасов;
// Хранит "Результат" текущей строки ТЧ "ДополнительныеНачисления"
Перем мСтарыйРезультатТЧДополнительныеНачисления;
// Хранит "ОплаченоДнейЧасов" текущей строки ТЧ "ДополнительныеНачисления"
Перем мБылоОплаченоДнейЧасовТЧДополнительныеНачисления;
// Хранит "Результат" текущей строки ТЧ "Удержания"
Перем мСтарыйРезультатТЧУдержания;

// Хранит список способов расчета, являющихся почасовыми отклонениями
Перем мСписокПочасовыхОтклонений;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

//Для формирования имен кнопок
Перем мТекущееФизлицо;

//для формирования имен кнопок
Перем мКнопкаРассчитатьРаботника;
Перем мКнопкаРассчитатьРаботникаСКомментарием;
Перем мКнопкаУДФРаботника;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

// Механизм исправлений
Перем мДокументыИсправление;
Перем мДокументСторнирование;
Перем мСотрудникиИсправление;
Перем мФизлицаИсправление;
Перем мМенюИсправление;
Перем мКнопкаИсправлениеТекущийСотрудник;
Перем мКнопкаИсправлениеВесьДокумент;
Перем мКнопкаИсправлениеСписокСотрудников;
Перем мКнопкаОтменаИсправление;
Перем мТекущийСотрудник;

// Механизм дополнительных колонок в табличных полях документа
Перем мВидимостьДополнительныхКолонок;
Перем мДополнительныеКолонки;
Перем мТабличныеПоляСДополнительнымиКолонками;

Перем мРежимЗаписи;

Перем РучноеИзменениеПоказателей;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// выводит показатели схем мотивации
//
Процедура ВыводСтрокПоказателей(ДанныеСтрокиВидРасчета, ОформлениеСтроки, ДанныеСтроки)
	
	ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
	
	СведенияОВидеРасчета = мДопСведенияОВидахРасчетаНачислений[ДанныеСтрокиВидРасчета];
	
	ЕстьПоказатели = Ложь;
	
	Если ЗначениеЗаполнено(ДанныеСтрокиВидРасчета) Тогда
		
		ЕстьПоказатели = Ложь; 
		СчПоказателей = 0;
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
				
				ЕстьПоказатели = Истина;
				
				ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
				ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"];
				
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
				
				// размеры показателя будут доступны только для видимых и изменяемых показателей
				Если ВидимостьПоказателя Тогда
					ВозможностьИзменения = СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"];
					Если ТипЗнч(ВозможностьИзменения) = Тип("ПеречислениеСсылка.ИзменениеПоказателейСхемМотивации") Тогда
						ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = ЗначениеЗаполнено(ВозможностьИзменения);
					КонецЕсли;
				КонецЕсли;
				
				// если отображается наименование - пропишем текст
				Если ВидимостьНаименованияПоказателя Тогда
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
				ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
					ВидимостьПоказателя = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"];
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр	= Не ВидимостьПоказателя Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
																							  Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;																							  
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"];
					ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);
				КонецЕсли;
				
				Если ВидимостьПоказателя Тогда
					ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));
				КонецЕсли;
				
			Иначе
				// настроим видимость ячеек
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ДанныеСтрокиВидРасчета) Тогда
			Если не ЕстьПоказатели Тогда
				ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.УстановитьТекст("<рассчитываются автоматически>");
				ОформлениеСтроки.Ячейки.НаименованиеПоказатель1.Видимость			= Истина;
				ОформлениеСтроки.Ячейки["Показатель1"].ТолькоПросмотр				= Истина;
			КонецЕсли;
		КонецЕсли;
	Иначе
		
		Для СчПоказателей = 1 По 6 Цикл
			// настроим видимость ячеек
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;
			
		КонецЦикла;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;
	
КонецПроцедуры //ВыводСтрокПоказателей

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке(ИмяЭУ)
	
	Если ИмяЭУ = "КодВычета" Тогда
		СтруктураПараметров = Новый Структура("Ссылка", мСписокКодовВычетов);
		
	ИначеЕсли ИмяЭУ = "КодВычетаДоговораГПХ" Тогда
		СтруктураПараметров = Новый Структура("Ссылка", мСписокКодовВычетовДоговораГПХ);
		
	ИначеЕсли ИмяЭУ = "ДополнительныеНачисления" Тогда
		СтруктураПараметров = Новый Структура("КодДоходаНДФЛ", ПроведениеРасчетов.ПолучитьСписокКодовДоходаДополнительныхНачислений());
		
	ИначеЕсли ИмяЭУ = "ОсновныеНачисления" Тогда
		
		Если Не ЗначениеЗаполнено(мСписокКодовНДФЛОсновныхНачислений) Тогда
			мСписокКодовНДФЛОсновныхНачислений = ПроведениеРасчетов.ПолучитьСписокКодовДоходаОсновныхНачислений()
		КонецЕсли;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СпособыРасчетаОплатыТруда.Ссылка
		|ИЗ
		|	Перечисление.СпособыРасчетаОплатыТруда КАК СпособыРасчетаОплатыТруда
		|ГДЕ
		|	(НЕ СпособыРасчетаОплатыТруда.Ссылка В (&НедопустимыеСпособыРасчета))";
		НедопустимыеСпособыРасчета = Новый Массив;
		НедопустимыеСпособыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
		НедопустимыеСпособыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
		Запрос.УстановитьПараметр("НедопустимыеСпособыРасчета", НедопустимыеСпособыРасчета);
		
		СтруктураПараметров = Новый Структура("КодДоходаНДФЛ,СпособРасчета", мСписокКодовНДФЛОсновныхНачислений, Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		
	ИначеЕсли ИмяЭУ = "ДоговорыНаВыполнениеРабот" Тогда
		СтруктураПараметров = Новый Структура("СпособРасчета", Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой);
		
	КонецЕсли;
	
	Возврат СтруктураПараметров;
	
КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

Функция ПолучитьРабочийДеньМесяца(ДатаДокумента)

	ПоследнийДеньМесяца = КонецМесяца(ДатаДокумента);
	Если ДеньНедели(КонецМесяца(ДатаДокумента)) = 6 Тогда
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 86400;
		
	ИначеЕсли ДеньНедели(КонецМесяца(ДатаДокумента)) = 7 Тогда
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца - 2 * 86400;
		
	Иначе
		ПоследнийРабочийДеньМесяца = ПоследнийДеньМесяца;
		
	КонецЕсли;
	
	Возврат ПоследнийРабочийДеньМесяца;
	
КонецФункции // ПолучитьРабочийДеньМесяца()

// Функция фозвращает физлицо из текущей строки табличной части
//
Функция ПолучитьТекущегоСотрудника()
	
    ЭтоСотрудник = Ложь; 
	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	Если ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаОсновныеНачисления Тогда
		ТекущиеДанные	= ЭлементыФормы.Начисления.ТекущиеДанные;
		ЭтоСотрудник = Истина;
	ИначеЕсли ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДополнительныеНачисления Тогда
		ТекущиеДанные	= ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные;
		ЭтоСотрудник = Истина;
	ИначеЕсли ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДоговорыНаВыполнениеРабот Тогда
		ТекущиеДанные	= ЭлементыФормы.ДоговорыНаВыполнениеРабот.ТекущиеДанные;
		ЭтоСотрудник = Истина;
	ИначеЕсли ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаЗаймы Тогда
		ТекущиеДанные	= ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные;
	ИначеЕсли ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаНДФЛ Тогда
		ТекущиеДанные	= ЭлементыФормы.НДФЛ.ТекущиеДанные;
	ИначеЕсли ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаУдержания Тогда
		ТекущиеДанные	= ЭлементыФормы.Удержания.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено ИЛИ ЭтоСотрудник И ТекущиеДанные.Сотрудник.Пустая() Тогда 
		Возврат Новый Структура("Сотрудник,ФизЛицо",Справочники.СотрудникиОрганизаций.ПустаяСсылка(),Справочники.ФизическиеЛица.ПустаяСсылка());
	ИначеЕсли ЭтоСотрудник Тогда
		Возврат Новый Структура("Сотрудник,ФизЛицо",ТекущиеДанные.Сотрудник,ТекущиеДанные.Сотрудник.ФизЛицо);
	Иначе
		Возврат Новый Структура("Сотрудник,ФизЛицо",мТекущийСотрудник,ТекущиеДанные.Физлицо);
	КонецЕсли;

КонецФункции // ПолучитьТекущегоСотрудника()

Функция РасчетДокументаРазрешен()
	
	КонфликтныеДокументы = ПолучитьДокументыРасчетаЗаВесьМесяц();
	Успешно = КонфликтныеДокументы.Количество() = 0;
	
	Если Не Успешно Тогда
		СтрокаЗаголовок = "Перерасчет первой половины месяца невозможен, так как уже выполнено начисление зарплаты за " 
				+ Формат(ПериодРегистрации,"ДФ=ММММ") + "." + Символы.ПС + "Для повторного расчета первой половины месяца вы можете отменить проведение следующих документов:";
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		ОбщегоНазначенияЗК.ОшибкаРасчета(СтрокаЗаголовок);
		Для Каждого СтрокаДока Из КонфликтныеДокументы Цикл
			ОбщегоНазначенияЗК.КомментарийРасчета("",, СтрокаДока.Представление, СтрокаДока.Ссылка);
		КонецЦикла; 
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
	Возврат Успешно

КонецФункции

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачислений);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Удержания,ЭлементыФормы.КоманднаяПанельУдержаний);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДополнительныеНачисления,ЭлементыФормы.КоманднаяПанельДополнительныхНачислений);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДоговорыНаВыполнениеРабот,ЭлементыФормы.КоманднаяПанельДоговорыНаВыполнениеРабот);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПогашениеЗаймов,ЭлементыФормы.КоманднаяПанельПогашениеЗаймов);
	СоответствиеТЧ.Вставить(ЭлементыФормы.НДФЛ,ЭлементыФормы.КоманднаяПанельНДФЛ);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

Процедура УстановитьЗначениеПогашеноПроцентов()
	
	ДанныеСтроки = ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные;
	ДанныеСтроки.ПогашеноПроцентов = Мин(ДанныеСтроки.ПогашеноЗайма, ДанныеСтроки.НачисленоПроцентов);
	
КонецПроцедуры // УстановитьЗначениеПогашеноПроцентов()

Процедура ОбновитьДанныеДляПочасовогоОтклонения()

	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ДанныеСтроки.ВидРасчета);
	Если мСписокПочасовыхОтклонений.НайтиПоЗначению(СведенияОВидеРасчета.ВидВремени) <> Неопределено
		 И Не ЭлементыФормы.Начисления.Колонки.ОплачиватьЧасов.Видимость Тогда
		
		ЭлементыФормы.Начисления.Колонки.ОплачиватьЧасов.Видимость = Истина;
		
		ДанныеСтроки.ДатаОкончания = ДанныеСтроки.ДатаНачала;
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДанныеДляПочасовогоОтклонения()

// В завизимости от значение реквизита "ВидОперации" формирует подменю кнопки "Рассчитать"
//
Процедура ЗаполнениеПодменюРассчитать()

	КнопкиРассчитать = ЭлементыФормы.ПодменюРассчитать.Кнопки;
	КнопкиРассчитать.Очистить();
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
		
		ПоказываемУдержания = Не (ЗначениеЗаполнено(ПерерассчитываемыйДокумент) И Удержания.Количество() = 0);
		
		НомерКнопки = 0;
		НоваяКнопка = КнопкиРассчитать.Вставить(НомерКнопки, "РассчитатьВсе", ТипКнопкиКоманднойПанели.Действие, "Рассчитать (полный расчет)", Новый Действие("ДействияФормыРассчитатьВсе"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НомерКнопки = НомерКнопки + 1;
		КнопкиРассчитать.Вставить(НомерКнопки, "Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
		
		НомерКнопки = НомерКнопки + 1;
		НоваяКнопка = КнопкиРассчитать.Вставить(НомерКнопки, "РассчитатьНачисления", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать начисления", Новый Действие("ДействияФормыРассчитатьНачисления"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НомерКнопки = НомерКнопки + 1;
		НоваяКнопка = КнопкиРассчитать.Вставить(НомерКнопки, "РассчитатьПогашениеЗаймов", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать погашение займов", Новый Действие("ДействияФормыРассчитатьПогашениеЗаймов"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НомерКнопки = НомерКнопки + 1;
		НоваяКнопка = КнопкиРассчитать.Вставить(НомерКнопки, "РассчитатьНДФЛ", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать НДФЛ", Новый Действие("ДействияФормыРассчитатьНДФЛ"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		Если ПоказываемУдержания Тогда
			НомерКнопки = НомерКнопки + 1;
			НоваяКнопка = КнопкиРассчитать.Вставить(НомерКнопки, "РассчитатьУдержания", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать удержания", Новый Действие("ДействияФормыРассчитатьУдержания"));
			НоваяКнопка.ИзменяетДанные = Истина;
		КонецЕсли;
		
		НомерКнопки = НомерКнопки + 1;
		КнопкиРассчитать.Вставить(НомерКнопки, "РазделительРаботника", ТипКнопкиКоманднойПанели.Разделитель);
		
		НомерКнопки = НомерКнопки + 1;
		НоваяКнопка = КнопкиРассчитать.Вставить(НомерКнопки, "РассчитатьРаботника", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника", Новый Действие("ДействияФормыРассчитатьРаботника"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НомерКнопки = НомерКнопки + 1;
		НоваяКнопка = КнопкиРассчитать.Вставить(НомерКнопки, "РассчитатьРаботникаСКомментарием", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника с комментарием", Новый Действие("ДействияФормыРассчитатьРаботникаСКомментарием"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		НоваяКнопка = КнопкиРассчитать.Вставить(0, "РассчитатьНачисления", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать начисления", Новый Действие("ДействияФормыРассчитатьНачисления"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		КнопкиРассчитать.Вставить(1, "РазделительРаботника", ТипКнопкиКоманднойПанели.Разделитель);
		
		НоваяКнопка = КнопкиРассчитать.Вставить(2, "РассчитатьРаботника", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника",	Новый Действие("ДействияФормыРассчитатьРаботника"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НоваяКнопка = КнопкиРассчитать.Вставить(3, "РассчитатьРаботникаСКомментарием", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника с комментарием", Новый Действие("ДействияФормыРассчитатьРаботникаСКомментарием"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		НоваяКнопка = КнопкиРассчитать.Вставить(0, "РассчитатьПогашениеЗаймов",	ТипКнопкиКоманднойПанели.Действие,	"Рассчитать погашение займов",	Новый Действие("ДействияФормыРассчитатьПогашениеЗаймов"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		КнопкиРассчитать.Вставить(1, "РазделительРаботника",		ТипКнопкиКоманднойПанели.Разделитель);
		
		НоваяКнопка = КнопкиРассчитать.Вставить(2, "РассчитатьРаботника",			ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника",			Новый Действие("ДействияФормыРассчитатьРаботника"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НоваяКнопка = КнопкиРассчитать.Вставить(3, "РассчитатьРаботникаСКомментарием", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника с комментарием", Новый Действие("ДействияФормыРассчитатьРаботникаСКомментарием"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
		
		НоваяКнопка = КнопкиРассчитать.Вставить(0, "РассчитатьНДФЛ",				ТипКнопкиКоманднойПанели.Действие,	"Рассчитать НДФЛ",				Новый Действие("ДействияФормыРассчитатьНДФЛ"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		КнопкиРассчитать.Вставить(1, "РазделительРаботника",		ТипКнопкиКоманднойПанели.Разделитель);
		
		НоваяКнопка = КнопкиРассчитать.Вставить(2, "РассчитатьРаботника",			ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника",			Новый Действие("ДействияФормыРассчитатьРаботника"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НоваяКнопка = КнопкиРассчитать.Вставить(3, "РассчитатьРаботникаСКомментарием", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника с комментарием", Новый Действие("ДействияФормыРассчитатьРаботникаСКомментарием"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		
		НоваяКнопка = КнопкиРассчитать.Вставить(0, "РассчитатьУдержания",			ТипКнопкиКоманднойПанели.Действие,	"Рассчитать удержания",			Новый Действие("ДействияФормыРассчитатьУдержания"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		КнопкиРассчитать.Вставить(1, "РазделительРаботника",		ТипКнопкиКоманднойПанели.Разделитель);
		
		НоваяКнопка = КнопкиРассчитать.Вставить(2, "РассчитатьРаботника",			ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника",			Новый Действие("ДействияФормыРассчитатьРаботника"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НоваяКнопка = КнопкиРассчитать.Вставить(3, "РассчитатьРаботникаСКомментарием", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника с комментарием", Новый Действие("ДействияФормыРассчитатьРаботникаСКомментарием"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
	КонецЕсли;
	
	мКнопкаРассчитатьРаботника = КнопкиРассчитать.Найти("РассчитатьРаботника");
	мКнопкаРассчитатьРаботникаСКомментарием = КнопкиРассчитать.Найти("РассчитатьРаботникаСКомментарием");
	
КонецПроцедуры // ЗаполнениеПодменюРассчитать()

Процедура ПолучитьСотрудниковСИсправлениями()

	мСотрудникиИсправление = Новый Соответствие;
	мФизлицаИсправление = Новый Соответствие;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Начисления.Сотрудник,
	|	Начисления.Физлицо
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
	|ГДЕ
	|	Начисления.Ссылка В(&Исправления)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДополнительныеНачисления.Сотрудник,
	|	ДополнительныеНачисления.Физлицо
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК ДополнительныеНачисления
	|ГДЕ
	|	ДополнительныеНачисления.Ссылка В(&Исправления)
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ДоговорыНаВыполнениеРабот.Сотрудник,
	|	ДоговорыНаВыполнениеРабот.Физлицо
	|ИЗ
	|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК ДоговорыНаВыполнениеРабот
	|ГДЕ
	|	ДоговорыНаВыполнениеРабот.Ссылка В(&Исправления)";
	Запрос.УстановитьПараметр("Исправления",мДокументыИсправление);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		мСотрудникиИсправление.Вставить(Выборка.Сотрудник, Истина);
		мФизлицаИсправление.Вставить(Выборка.Физлицо, Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбновитьТекущегоСотрудника(Редактирование = Ложь)

	ТекущиеДанные = ПолучитьТекущегоСотрудника();
	ТекущееФизлицо = ТекущиеДанные.Физлицо;
	ТекущийСотрудник = ТекущиеДанные.Сотрудник;
	
	ЗаполнитьРасчетныйЛисток(Редактирование, ТекущееФизлицо);
	
	ФИО = "";
	
	// Установим имена: для кнопки РассчитатьРаботника - "Рассчитать <ФИО>"
	// имя кнопки Данные по работнику как "Данные по работнику <ФИО>"
	// имя кнопки РассчитатьРаботникаСКомментарием как "Рассчитать " + <ФИО> + " с комментарием"
	// имя гиперссылки НадписьПоказыватьРасчетныйЛисток 
	Если Не ЗначениеЗаполнено(ТекущееФизлицо) Тогда
		
		Если мКнопкаРассчитатьРаботника <> Неопределено Тогда
			мКнопкаРассчитатьРаботника.Текст = "Рассчитать сотрудника";
		КонецЕсли;
		
		Если мКнопкаРассчитатьРаботникаСКомментарием <> Неопределено Тогда
			мКнопкаРассчитатьРаботникаСКомментарием.Текст = "Рассчитать сотрудника с комментарием";
		КонецЕсли;
		
		Если мКнопкаУДФРаботника <> Неопределено Тогда
			мКнопкаУДФРаботника.Текст = "Данные по сотруднику";
		КонецЕсли;
		
		ЭлементыФормы.НадписьРасчетныйЛисток.Заголовок = " Расчетный листок";
		
	ИначеЕсли мТекущееФизлицо <> ТекущееФизлицо Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Физлицо", ТекущееФизлицо);
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ФизическиеЛица.Наименование,
		|	ФизическиеЛица.Пол
		|ИЗ
		|	Справочник.ФизическиеЛица КАК ФизическиеЛица
		|ГДЕ
		|	ФизическиеЛица.Ссылка = &Физлицо";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Наименование);
		
		Если мКнопкаУДФРаботника <> Неопределено Тогда
			мКнопкаУДФРаботника.Текст = "Данные по сотруднику " + ФИО;
		КонецЕсли;
		
		ПозицияПервогоПробела = Найти(ФИО+" "," ");
		Фамилия  = Лев(ФИО,ПозицияПервогоПробела-1);
		Инициалы = Сред(ФИО,ПозицияПервогоПробела+1);
		
		Если мКнопкаРассчитатьРаботника <> Неопределено 
			Или мКнопкаРассчитатьРаботникаСКомментарием <> Неопределено Тогда
			
			РезультатСклонения = "";
			Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"),Фамилия, 4, Выборка.Пол, РезультатСклонения) Тогда
				ФИО = РезультатСклонения + " " + Инициалы;	
			КонецЕсли;
			
			Если мКнопкаРассчитатьРаботника <> Неопределено Тогда
				мКнопкаРассчитатьРаботника.Текст = "Рассчитать " + ФИО;
			КонецЕсли;
			
			Если мКнопкаРассчитатьРаботникаСКомментарием <> Неопределено Тогда
				мКнопкаРассчитатьРаботникаСКомментарием.Текст = "Рассчитать " + ФИО + " с комментарием";
			КонецЕсли;
			
		КонецЕсли;
		
		ЭлементыФормы.НадписьРасчетныйЛисток.Заголовок = " " + Выборка.Наименование + ". Расчетный листок";
		
	КонецЕсли;
		
	// имя и доступность кнопки ТекущийСотрудник механизма исправлений
	Если ЭлементыФормы.ДополнительныеДействия.Кнопки.Найти("Исправить") <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекущийСотрудник) Тогда
			ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник.Текст = "Расчеты текущего сотрудника";             
			ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность = Истина;
		ИначеЕсли мТекущийСотрудник <> ТекущийСотрудник Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Сотрудник", ТекущийСотрудник);
			
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Наименование,
			|	СотрудникиОрганизаций.Физлицо.Пол КАК Пол
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			
			ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Наименование);
			
			ПозицияПервогоПробела = Найти(ФИО + " "," ");
			Фамилия  = Лев(ФИО,ПозицияПервогоПробела-1);
			Инициалы = Сред(ФИО,ПозицияПервогоПробела+1);
			
			РезультатСклонения = "";
			Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"),Фамилия, 2, Выборка.Пол, РезультатСклонения) Тогда
				ФИО = РезультатСклонения + " " + Инициалы;	
			КонецЕсли;
			
			ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник.Текст = "Расчеты " + ФИО;
			ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность = (мСотрудникиИсправление[ТекущийСотрудник] = Неопределено);
			
		КонецЕсли;
	КонецЕсли;
	
	мТекущееФизлицо = ТекущееФизлицо;
	мТекущийСотрудник = ТекущийСотрудник;

КонецПроцедуры

Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	СтрокНДФЛ = НДФЛ.Количество();
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация)
				Или (Начисления.Количество() = 0 И ДополнительныеНачисления.Количество() = 0
				И ДоговорыНаВыполнениеРабот.Количество() = 0 И Удержания.Количество() = 0
				И СтрокНДФЛ = 0 И ПогашениеЗаймов.Количество() = 0);
	
	ЗаполненСОшибками = ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПрошлыйПериод 
				И (Не ЗначениеЗаполнено(ПериодНачисленияДатаНачала) Или Не ЗначениеЗаполнено(ПериодНачисленияДатаОкончания)
				Или ПериодНачисленияДатаНачала >= ПериодРегистрации Или ПериодНачисленияДатаОкончания >= ПериодРегистрации
				Или ПериодНачисленияДатаНачала > ПериодНачисленияДатаОкончания);
				
	СтруктураРезультата = Новый Структура("Результат, Сторно",0,Ложь);
	СтруктураНовыхЗаписей = Новый Структура("Сторно",Ложь);
	СтрокЗаймов = ПогашениеЗаймов.НайтиСтроки(СтруктураНовыхЗаписей).Количество();
	
	ЗаполненСОшибками = ЗаполненСОшибками Или Начисления.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или Начисления.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ДополнительныеНачисления.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ДополнительныеНачисления.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ДоговорыНаВыполнениеРабот.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ДоговорыНаВыполнениеРабот.НайтиСтроки(Новый Структура("ВидРасчета",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ДоговорыНаВыполнениеРабот.НайтиСтроки(Новый Структура("ДокументОснование",Документы.ДоговорНаВыполнениеРаботСФизЛицом.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ПогашениеЗаймов.НайтиСтроки(Новый Структура("ФизЛицо",Справочники.ФизическиеЛица.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или ПогашениеЗаймов.НайтиСтроки(Новый Структура("ДоговорЗайма",Документы.ДоговорЗаймаСРаботником.ПустаяСсылка())).Количество() > 0;
	
	НеРассчитан = Начисления.НайтиСтроки(СтруктураРезультата).Количество() = Начисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() И Начисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() > 0;
	НеРассчитан = НеРассчитан Или ДополнительныеНачисления.НайтиСтроки(СтруктураРезультата).Количество() = ДополнительныеНачисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() И ДополнительныеНачисления.НайтиСтроки(СтруктураНовыхЗаписей).Количество() > 0;
	НеРассчитан = НеРассчитан Или ДоговорыНаВыполнениеРабот.НайтиСтроки(СтруктураРезультата).Количество() = ДоговорыНаВыполнениеРабот.НайтиСтроки(СтруктураНовыхЗаписей).Количество() И ДоговорыНаВыполнениеРабот.НайтиСтроки(СтруктураНовыхЗаписей).Количество() > 0;
	НеРассчитан = НеРассчитан Или Удержания.НайтиСтроки(СтруктураРезультата).Количество() = Удержания.НайтиСтроки(СтруктураНовыхЗаписей).Количество() И Удержания.НайтиСтроки(СтруктураНовыхЗаписей).Количество() > 0;
	НеРассчитан = НеРассчитан Или НДФЛ.НайтиСтроки(Новый Структура("Налог",0)).Количество() = СтрокНДФЛ И СтрокНДФЛ > 0 И НДФЛ.НайтиСтроки(Новый Структура("ПримененныйВычетНаДетей",0)).Количество() = СтрокНДФЛ И НДФЛ.НайтиСтроки(Новый Структура("ПримененныйВычетЛичный",0)).Количество() = СтрокНДФЛ И НДФЛ.НайтиСтроки(Новый Структура("ПримененныйВычетНаДетейИнвалидов",0)).Количество() = СтрокНДФЛ И НДФЛ.НайтиСтроки(Новый Структура("ПримененныйВычетИмущественныйПроцентыПоКредитам",0)).Количество() = СтрокНДФЛ  И НДФЛ.НайтиСтроки(Новый Структура("ПримененныйВычетИмущественныйПроцентыПриПерекредитовании",0)).Количество() = СтрокНДФЛ И НДФЛ.НайтиСтроки(Новый Структура("ПримененныйВычетИмущественныйРасход",0)).Количество() = СтрокНДФЛ;
	НеРассчитан = НеРассчитан Или ПогашениеЗаймов.НайтиСтроки(Новый Структура("ПогашеноЗайма, Сторно",0,Ложь)).Количество() = СтрокЗаймов И СтрокЗаймов > 0 И ПогашениеЗаймов.НайтиСтроки(Новый Структура("НачисленоПроцентов, Сторно",0,Ложь)).Количество() = СтрокЗаймов И ПогашениеЗаймов.НайтиСтроки(Новый Структура("МатериальнаяВыгода, Сторно",0,Ложь)).Количество() = СтрокЗаймов И ПогашениеЗаймов.НайтиСтроки(Новый Структура("НалогНаМатериальнуюВыгоду, Сторно",0,Ложь)).Количество() = СтрокЗаймов;
	
	НеРассчитан = Начисления.НайтиСтроки(Новый Структура("Результат, Сторно",0,Ложь)).Количество() = Начисления.НайтиСтроки(Новый Структура("Сторно",Ложь)).Количество() И Начисления.НайтиСтроки(Новый Структура("Сторно",Ложь)).Количество() > 0;
	
	ОписаниеСостоянияДокумента = РаботаСДиалогамиЗК.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Не НеРассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован,Ложь,Ложь); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура УстановитьКнопкиИсправленияДокумента(ЭтоРасчетПервойПоловиныМесяца = Неопределено, ДокументИсправлен = Неопределено, ИсправленВесьДокумент = Неопределено, ДокументСторнирован = Неопределено)
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	КонецЕсли;
	Если ДокументСторнирован = Неопределено Тогда
		ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	КонецЕсли;
	Если ЭтоРасчетПервойПоловиныМесяца = Неопределено Тогда
		ЭтоРасчетПервойПоловиныМесяца = ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца;
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для каждого СтрокаТЧ Из Начисления Цикл
				ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		Если ИсправленВесьДокумент Тогда
			Для каждого СтрокаТЧ Из ДоговорыНаВыполнениеРабот Цикл
				ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
		Если ИсправленВесьДокумент Тогда
			Для каждого СтрокаТЧ Из ДополнительныеНачисления Цикл
				ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Или ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Или ЭтоРасчетПервойПоловиныМесяца Или ДокументСторнирован Или ПериодРегистрации >= НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
		ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	Иначе 
		
		Кнопки = ЭлементыФормы.ДополнительныеДействия.Кнопки;
		Если Кнопки.Количество() = 0 Тогда
			МенюИсправить = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Подменю);
			ЗаполнитьЗначенияСвойств(МенюИсправить, мМенюИсправление);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеТекущийСотрудник.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеТекущийСотрудник);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеВесьДокумент.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеВесьДокумент);
			МенюИсправить.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеСписокСотрудников.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеСписокСотрудников);
		КонецЕсли;
		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность = Не ИсправленВесьДокумент;
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность = Не ДокументИсправлен;
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность = Не ИсправленВесьДокумент;
			
		Если Кнопки.Количество() = 1 И ДокументИсправлен Тогда
			Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаОтменаИсправление);
		ИначеЕсли Кнопки.Количество() > 1 И Не ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			Кнопки.Удалить(Кнопки.Разделитель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью элементов формы, зависящих от наличия перерассчитываемого документа
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	ЭтоРасчетПервойПоловиныМесяца = ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца;
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из Начисления Цикл
			ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	Если ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из ДоговорыНаВыполнениеРабот Цикл
			ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	Если ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из ДополнительныеНачисления Цикл
			ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	ТолькоПросмотр = ДокументИсправлен Или ДокументСторнирован;
	РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	ЭлементыФормы.ПериодНачисления.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	
	ЭлементыФормы.ПериодНачисленияДатаНачала.ТолькоПросмотр = ЭлементыФормы.ПериодНачисления.ТолькоПросмотр Или ПериодНачисления <> Перечисления.ПериодНачисленияЗарплаты.ПрошлыйПериод;
	ЭлементыФормы.ПериодНачисленияДатаОкончания.ТолькоПросмотр = ЭлементыФормы.ПериодНачисления.ТолькоПросмотр Или ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ТекущийМесяц;
	ЭлементыФормы.ПериодНачисленияДатаОкончания.КнопкаРегулирования = ЭтоРасчетПервойПоловиныМесяца;
	
	УстановитьКнопкиИсправленияДокумента(ЭтоРасчетПервойПоловиныМесяца, ДокументИсправлен, ИсправленВесьДокумент, ДокументСторнирован);
	
	СверткаПанельОткрытьИсходный = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	Если ЭлементыФормы.ПанельОткрытьИсходный.Свертка <> СверткаПанельОткрытьИсходный Тогда
		ЭлементыФормы.ПанельОткрытьИсходный.Свертка = СверткаПанельОткрытьИсходный
	КонецЕсли;
	
	СверткаПанельОткрытьИсправление = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	Если ЭлементыФормы.ПанельОткрытьИсправление.Свертка <> СверткаПанельОткрытьИсправление Тогда
		ЭлементыФормы.ПанельОткрытьИсправление.Свертка = СверткаПанельОткрытьИсправление
	КонецЕсли;
		
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,"Открыть сторно-документ","Открыть исправления");
	
	Если Не ТолькоПросмотр Тогда
		МожноЗаполнять = Не ЭтоИсправление;
		СоставМенюЗаполнить = ЭлементыФормы.ПодменюЗаполнить.Кнопки;
		Для каждого Кнопка Из СоставМенюЗаполнить Цикл
			Если Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Разделитель Тогда
				Кнопка.Доступность = МожноЗаполнять
			КонецЕсли;
		КонецЦикла;
		
		МожноВыбиратьОперацию = Не ЭтоРасчетПервойПоловиныМесяца И Не ЭтоИсправление;
		СоставМенюОперация = ЭлементыФормы.ДействияФормы.Кнопки.Операция.Кнопки;
		СоставМенюОперация.РасчетНачислений.Доступность = МожноВыбиратьОперацию;
		СоставМенюОперация.ПогашениеЗаймов.Доступность = МожноВыбиратьОперацию;
		СоставМенюОперация.РасчетНДФЛ.Доступность = МожноВыбиратьОперацию;
		СоставМенюОперация.РасчетУдержаний.Доступность = МожноВыбиратьОперацию;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

// В завизимости от значение реквизита "ВидОперации" управляет видимостью закладок основной панели формы
//
Процедура УправлениеВидимостьюЗакладок()

	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДополнительныеНачисления.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаОсновныеНачисления.Видимость			= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДоговорыНаВыполнениеРабот.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаЗаймы.Видимость						= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаНДФЛ.Видимость						= Истина;
		ПоказываемУдержания = Не (ЗначениеЗаполнено(ПерерассчитываемыйДокумент) И Удержания.Количество() = 0);
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаУдержания.Видимость					= ПоказываемУдержания;
		
		ТекущийЭлемент = ЭлементыФормы.Начисления;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДополнительныеНачисления.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаОсновныеНачисления.Видимость			= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДоговорыНаВыполнениеРабот.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаЗаймы.Видимость						= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаНДФЛ.Видимость						= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаУдержания.Видимость					= Ложь;
		
		ТекущийЭлемент = ЭлементыФормы.Начисления;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДополнительныеНачисления.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаОсновныеНачисления.Видимость			= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДоговорыНаВыполнениеРабот.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаЗаймы.Видимость						= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаНДФЛ.Видимость						= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаУдержания.Видимость					= Ложь;
		
		ТекущийЭлемент = ЭлементыФормы.ПогашениеЗаймов;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДополнительныеНачисления.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаОсновныеНачисления.Видимость			= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДоговорыНаВыполнениеРабот.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаЗаймы.Видимость						= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаНДФЛ.Видимость						= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаУдержания.Видимость					= Ложь;
		
		ТекущийЭлемент = ЭлементыФормы.НДФЛ;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДополнительныеНачисления.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаОсновныеНачисления.Видимость			= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДоговорыНаВыполнениеРабот.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаЗаймы.Видимость						= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаНДФЛ.Видимость						= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаУдержания.Видимость					= Истина;
		
		ТекущийЭлемент = ЭлементыФормы.Удержания;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьюЗакладок()

Процедура УправлениеПометкиПодменюОперация()
	
	КнопкиРассчитать = ЭлементыФормы.ДействияФормы.Кнопки.Операция.Кнопки;
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
		
		КнопкиРассчитать.ПолныйРасчет.Пометка		= Истина;
		КнопкиРассчитать.РасчетНачислений.Пометка	= Ложь;
		КнопкиРассчитать.ПогашениеЗаймов.Пометка	= Ложь;
		КнопкиРассчитать.РасчетНДФЛ.Пометка			= Ложь;
		КнопкиРассчитать.РасчетУдержаний.Пометка	= Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		КнопкиРассчитать.ПолныйРасчет.Пометка		= Ложь;
		КнопкиРассчитать.РасчетНачислений.Пометка	= Истина;
		КнопкиРассчитать.ПогашениеЗаймов.Пометка	= Ложь;
		КнопкиРассчитать.РасчетНДФЛ.Пометка			= Ложь;
		КнопкиРассчитать.РасчетУдержаний.Пометка	= Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		КнопкиРассчитать.ПолныйРасчет.Пометка		= Ложь;
		КнопкиРассчитать.РасчетНачислений.Пометка	= Ложь;
		КнопкиРассчитать.ПогашениеЗаймов.Пометка	= Истина;
		КнопкиРассчитать.РасчетНДФЛ.Пометка			= Ложь;
		КнопкиРассчитать.РасчетУдержаний.Пометка	= Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
		
		КнопкиРассчитать.ПолныйРасчет.Пометка		= Ложь;
		КнопкиРассчитать.РасчетНачислений.Пометка	= Ложь;
		КнопкиРассчитать.ПогашениеЗаймов.Пометка	= Ложь;
		КнопкиРассчитать.РасчетНДФЛ.Пометка			= Истина;
		КнопкиРассчитать.РасчетУдержаний.Пометка	= Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		
		КнопкиРассчитать.ПолныйРасчет.Пометка		= Ложь;
		КнопкиРассчитать.РасчетНачислений.Пометка	= Ложь;
		КнопкиРассчитать.ПогашениеЗаймов.Пометка	= Ложь;
		КнопкиРассчитать.РасчетНДФЛ.Пометка			= Ложь;
		КнопкиРассчитать.РасчетУдержаний.Пометка	= Истина;
		
	КонецЕсли;

КонецПроцедуры // УправлениеПометкиПодменюОперация()

// Процедура заполняет табличный документ "Расчетный листок"
Процедура ЗаполнитьРасчетныйЛисток(Редактирование = Ложь, ТекущееФизлицо = НеОпределено)
	
	Если ПоказыватьРасчетныйЛисток Тогда
	
		Если ТекущееФизлицо = НеОпределено Тогда
			ТекущееФизлицо = ПолучитьТекущегоСотрудника().Физлицо;
		КонецЕсли;
		
		Если ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			Если Редактирование Тогда
				ТабличноеПолеРасчетногоЛистка = ЭлементыФормы.ТабличноеПолеРасчетногоЛистка;
				ТабличноеПолеРасчетногоЛистка.Очистить();
			КонецЕсли;
			Возврат;
		КонецЕсли; 
		
		Если Редактирование Или ТекущееФизлицо <> мТекущееФизлицо  Тогда
			ВременныйТабличныйДокумент = ЗаполнитьТаблицуРасчетногоЛистка(ТекущееФизлицо);
			ТабличноеПолеРасчетногоЛистка = ЭлементыФормы.ТабличноеПолеРасчетногоЛистка;
			ТабличноеПолеРасчетногоЛистка.Очистить();
			ТабличноеПолеРасчетногоЛистка.Вывести(ВременныйТабличныйДокумент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьРасчетныйЛисток()

// Активизирует строки табличных частей документа после заполнения
//
Процедура УстановитьТекущуюСтрокуТабличнойЧасти()

	мТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	мТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	
	//активизируем во всех табличных частях 1-ю строку
	Если Начисления.Количество() > 0 Тогда
		СтрокаТЧ = Начисления.Получить(0);
		ЭлементыФормы.Начисления.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;
	
	Если ДополнительныеНачисления.Количество() > 0 Тогда
		СтрокаТЧ = ДополнительныеНачисления.Получить(0);
		ЭлементыФормы.ДополнительныеНачисления.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;
	
	Если ДоговорыНаВыполнениеРабот.Количество() > 0 Тогда
		СтрокаТЧ = ДоговорыНаВыполнениеРабот.Получить(0);
		ЭлементыФормы.ДоговорыНаВыполнениеРабот.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;
	
	Если ПогашениеЗаймов.Количество() > 0 Тогда
		СтрокаТЧ = ПогашениеЗаймов.Получить(0);
		ЭлементыФормы.ПогашениеЗаймов.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;
	
	Если НДФЛ.Количество() > 0 Тогда
		СтрокаТЧ = НДФЛ.Получить(0);
		ЭлементыФормы.НДФЛ.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;
	
	Если Удержания.Количество() > 0 Тогда
		СтрокаТЧ = Удержания.Получить(0);
		ЭлементыФормы.Удержания.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;

КонецПроцедуры  //УстановитьТекущуюСтрокуТабличнойЧасти()

// устанавливает значение показателей начисления для общих показателей в целом по компании и в целом по подразделению
//
Процедура ПриИзмененииПоказателяНачисления(Значение, парамПоказатель, ТабличнаяЧасть)
	
	ТекущаяСтрока = ЭлементыФормы[ТабличнаяЧасть].ТекущаяСтрока;
	ВидРасчета = ТекущаяСтрока.ВидРасчета;
	
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мДопСведенияОВидахРасчетаНачислений, ВидРасчета);
	КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
	
	// "запоминаем" ручное изменение показателя
	ЗаполнениеДокументовЗК.ЗапомнитьРучноеИзменениеПоказателя(РучноеИзменениеПоказателей, ТекущаяСтрока, парамПоказатель);
	
	Если ТабличнаяЧасть = "Начисления" Тогда
		ТЧ = Начисления;
	ИначеЕсли ТабличнаяЧасть = "ДополнительныеНачисления" Тогда
		ТЧ = ДополнительныеНачисления;
	ИначеЕсли ТабличнаяЧасть = "Удержания" Тогда
		ТЧ = Удержания;
	КонецЕсли;
	Если КоличествоПоказателей > (парамПоказатель - 1) Тогда
		Показатель  = СведенияОВидеРасчета["Показатель" + парамПоказатель];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ТекущаяСтрока.ВидРасчета.ПроизвольнаяФормулаРасчета Тогда
		Если ТабличнаяЧасть <> "Удержания" Тогда
			СтрПодразделение= ТекущаяСтрока.ПодразделениеОрганизации;
		КонецЕсли;
		Если Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Тогда
			Для Каждого СтрокаНачисления Из ТЧ Цикл
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
					Если ПоказательВР.Предопределенный Тогда
						Продолжить;
					КонецЕсли;
					Если ПоказательВР = Показатель Тогда
						СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		ИначеЕсли Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
			Если ТабличнаяЧасть <> "Удержания" Тогда
				Для Каждого СтрокаНачисления Из ТЧ Цикл
					Если СтрокаНачисления.ПодразделениеОрганизации = СтрПодразделение Тогда
						Для СчПоказателей = 1 По КоличествоПоказателей Цикл
							ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
							Если ПоказательВР.Предопределенный Тогда
								Продолжить;
							КонецЕсли;
							Если ПоказательВР = Показатель Тогда
								СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ПриИзмененииПоказателяНачисления

Процедура ПриИзмененииКодаВычета(Значение)
	ТабличноеПоле = ЭлементыФормы.ДополнительныеНачисления;
	ТекущиеДанные = ТабличноеПоле.ТекущиеДанные;
	ЭлементУправления = ТабличноеПоле.Колонки.СуммаВычета.ЭлементУправления;
	Если Значение = мКодВычетаПоМатпомощиПриРожденииРебенка Тогда
		ТочностьСуммыВычета = 0;
		МаксимальноеЗначение = 99;
		МинимальноеЗначение = 1;
		Если ТекущиеДанные.СуммаВычета >= 100 или ТекущиеДанные.СуммаВычета <= 0 Тогда
			ТекущиеДанные.СуммаВычета = 1
		КонецЕсли;
	Иначе
		ТочностьСуммыВычета = 2;
		МаксимальноеЗначение = Неопределено;
		МинимальноеЗначение = Неопределено;
	КонецЕсли;
	ЭлементУправления.МаксимальноеЗначение = МаксимальноеЗначение;
	ЭлементУправления.МинимальноеЗначение = МинимальноеЗначение;
	ЭлементУправления.Формат = "ЧДЦ=" + ТочностьСуммыВычета
КонецПроцедуры

Функция ПроверкаУчастияВПилотномПроектеФСС(МассивНачислений, МассивДопНачислений, ЗаголовокОкна)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ОсновныеНачисленияОрганизаций.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
	|ГДЕ
	|	ОсновныеНачисленияОрганизаций.ВидПособияСоциальногоСтрахования <> ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)
	|	И ОсновныеНачисленияОрганизаций.Ссылка В(&Начисления)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	ДополнительныеНачисленияОрганизаций.Ссылка
	|ИЗ
	|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
	|ГДЕ
	|	ДополнительныеНачисленияОрганизаций.ВидПособияСоциальногоСтрахования <> ЗНАЧЕНИЕ(Перечисление.ВидыПособийСоциальногоСтрахования.ПустаяСсылка)
	|	И ДополнительныеНачисленияОрганизаций.Ссылка В(&ДопНачисления)";
	Запрос.УстановитьПараметр("Начисления", МассивНачислений);
	Запрос.УстановитьПараметр("ДопНачисления", МассивДопНачислений);
	
	Если Не Запрос.Выполнить().Пустой() Тогда // проверяем условия пилотного проекта ФСС
		Возврат ОбменСведениямиОПособияхСФСС.ПроверкаУчастияВПилотномПроектеИОтказОтДействия(Организация, ПериодРегистрации, ЗаголовокОкна, "Рассчитать записи") 
	КонецЕсли;
	Возврат Истина	
КонецФункции 

Процедура РассчитатьРаботника(КомментироватьРасчет)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	ТекущееФизлицо = мТекущееФизлицо;
	Если Не ЗначениеЗаполнено(ТекущееФизлицо) Тогда
		Предупреждение("Не выбран сотрудник для расчета!");
		Возврат;
	КонецЕсли;
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет
	    Или ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		Если Не ПроверкаУчастияВПилотномПроектеФСС(Начисления.Выгрузить(Новый Структура("Физлицо",ТекущееФизлицо), "ВидРасчета").ВыгрузитьКолонку("ВидРасчета"), ДополнительныеНачисления.Выгрузить(Новый Структура("Физлицо",ТекущееФизлицо), "ВидРасчета").ВыгрузитьКолонку("ВидРасчета"), "Расчет сотрудника") Тогда
			Возврат
		КонецЕсли;
			
	КонецЕсли;
	
	Если НДФЛ.Количество()>0 Тогда
		Если ЭлементыФормы.НДФЛ.ТекущиеДанные = Неопределено Тогда
			СтрокаТЧ = НДФЛ.Получить(0);
			ЭлементыФормы.НДФЛ.ТекущаяСтрока = СтрокаТЧ;
			НомерСтрокиНДФЛ = 1;
		Иначе
			НомерСтрокиНДФЛ = ЭлементыФормы.НДФЛ.ТекущиеДанные.НомерСтроки;
		КонецЕсли;
	Иначе
		НомерСтрокиНДФЛ = Неопределено;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Расчет для сотрудника ",, Строка(ТекущееФизлицо), ТекущееФизлицо, Перечисления.ВидыСообщений.Раздел);
		КонецЕсли;
		РассчитатьВсе(ТекущееФизлицо, КомментироватьРасчет);
		Если КомментироватьРасчет Тогда
			глЗначениеПеременной("глОбработкаСообщений").ПоказатьСообщения();
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Расчет для сотрудника ",, Строка(ТекущееФизлицо), ТекущееФизлицо, Перечисления.ВидыСообщений.Раздел);
		КонецЕсли;
		РассчитатьНачисления(,,,ТекущееФизлицо, КомментироватьРасчет);
		Если КомментироватьРасчет Тогда
			глЗначениеПеременной("глОбработкаСообщений").ПоказатьСообщения();
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Расчет для сотрудника ",, Строка(ТекущееФизлицо), ТекущееФизлицо, Перечисления.ВидыСообщений.Раздел);
		КонецЕсли;
		РассчитатьПогашениеЗаймов(ТекущееФизлицо, КомментироватьРасчет);
		Если КомментироватьРасчет Тогда
			глЗначениеПеременной("глОбработкаСообщений").ПоказатьСообщения();
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Расчет для сотрудника ",, Строка(ТекущееФизлицо), ТекущееФизлицо, Перечисления.ВидыСообщений.Раздел);
		КонецЕсли;
		РассчитатьНДФЛ(ТекущееФизлицо, КомментироватьРасчет);
		Если КомментироватьРасчет Тогда
			глЗначениеПеременной("глОбработкаСообщений").ПоказатьСообщения();
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Расчет для сотрудника ",, Строка(ТекущееФизлицо), ТекущееФизлицо, Перечисления.ВидыСообщений.Раздел);
		КонецЕсли;
		РассчитатьУдержания(,,ТекущееФизлицо, КомментироватьРасчет);
		Если КомментироватьРасчет Тогда
			глЗначениеПеременной("глОбработкаСообщений").ПоказатьСообщения();
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
		мБылоОтработаноДней				= ТекущаяСтрока.ОтработаноДней;
		мБылоОтработаноЧасов			= ТекущаяСтрока.ОтработаноЧасов;
		мБылоОтработаноДнейПоПятидневке	= ТекущаяСтрока.ОтработаноДнейПоПятидневке;
		мБылоНормаДней					= ТекущаяСтрока.НормаДней;
		мБылоНормаЧасов					= ТекущаяСтрока.НормаЧасов;
		мБылоНормаДнейПоПятидневке		= ТекущаяСтрока.НормаДнейПоПятидневке;
		мБылоОплаченоДнейЧасов			= ТекущаяСтрока.ОплаченоДнейЧасов;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультатТЧУдержания = ТекущаяСтрока.Результат;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.ДополнительныеНачисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультатТЧДополнительныеНачисления			= ТекущаяСтрока.Результат;
		мБылоОплаченоДнейЧасовТЧДополнительныеНачисления	= ТекущаяСтрока.ОплаченоДнейЧасов;
	КонецЕсли;
	
	//активизируем строку табличного поля НДФЛ
	Если Не НомерСтрокиНДФЛ = Неопределено Тогда
		ИндексСтрокиНДФЛ = Мин(НомерСтрокиНДФЛ,НДФЛ.Количество())-1;
		Если ИндексСтрокиНДФЛ >= 0 Тогда
			СтрокаТЧ=НДФЛ.Получить(ИндексСтрокиНДФЛ);
			ЭлементыФормы.НДФЛ.ТекущаяСтрока = СтрокаТЧ;
		КонецЕсли;
	Иначе
		Если НДФЛ.Количество()>0 Тогда
			СтрокаТЧ = НДФЛ.Получить(0);
			ЭлементыФормы.НДФЛ.ТекущаяСтрока = СтрокаТЧ;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРасчетныйЛисток(Истина, ТекущееФизлицо);
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

Процедура ОпределитьДатыПериодаНачисления()

	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	Если ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ТекущийМесяц Тогда
		ПериодНачисленияДатаНачала = НачалоМесяца(ПериодРегистрации);
		ПериодНачисленияДатаОкончания = КонецМесяца(ПериодРегистрации);
	ИначеЕсли ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
		ПериодНачисленияДатаНачала = НачалоМесяца(ПериодРегистрации);
		Если День(ПериодНачисленияДатаОкончания) > 10 и День(ПериодНачисленияДатаОкончания) < 23 Тогда
			//не меняем число месяца если оно в диапазоне с 11 по 22-е число месяца
			ПериодНачисленияДатаОкончания = КонецДня(Дата(Год(ПериодНачисленияДатаНачала),Месяц(ПериодНачисленияДатаНачала),День(ПериодНачисленияДатаОкончания)));
		Иначе
			// установим дату середины месяца
			ПериодНачисленияДатаОкончания = КонецДня(ПериодНачисленияДатаНачала + (Цел(День(КонецМесяца(ПериодНачисленияДатаНачала)) / 2) - 1) * 86400);
		КонецЕсли;
	ИначеЕсли Не ЭлементыФормы.ПериодНачисления.ТолькоПросмотр Тогда // когда пользователь сам выбрал этот вариант
		//начисление за прошлый период
		ПериодНачисленияДатаНачала = НачалоМесяца(ПериодРегистрации - 1);
		ПериодНачисленияДатаОкончания = КонецМесяца(ПериодНачисленияДатаНачала);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовокФормыДокумента()
		
	МесяцСтрокой = Формат(ПериодРегистрации, "ДФ=ММММ");  
	ГодСтрокой = " " + Формат(ПериодРегистрации, "ДФ=yyyy") + ". ";
	СтрокаВидОперации = ?(ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет, "", Строка(ВидОперации) + ". ");
	
	Если ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
		
		УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), МесяцСтрокой, 4, Перечисления.ПолФизическихЛиц.Мужской, МесяцСтрокой);
		СтрокаЗаголовокФормы = "Начисление зарплаты: За первую половину " + МесяцСтрокой + ГодСтрокой;
		
	ИначеЕсли ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПрошлыйПериод Тогда
		
		МесяцГодСтрокой = УправлениеОтчетамиЗК.ОписаниеПериода(ПериодНачисленияДатаНачала, ПериодНачисленияДатаОкончания, Ложь, Истина, Ложь);
		СтрокаЗаголовокФормы = "Начисление зарплаты: " + СтрокаВидОперации + "За " + МесяцГодСтрокой + ". ";
		
	Иначе
		
		СтрокаЗаголовокФормы = "Начисление зарплаты: " + СтрокаВидОперации + "За " + МесяцСтрокой + ГодСтрокой;
		
	КонецЕсли;
	
	Если ЭтоНовый() Тогда  
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Новый";
	Иначе
		Если Проведен Тогда
			СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Проведен";
		Иначе
			СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Не проведен";
		КонецЕсли;
	КонецЕсли;
		
	Заголовок = СтрокаЗаголовокФормы;

КонецПроцедуры

Процедура ПроверитьИсправитьПериодНачисленияДатаОкончания(Элемент)

	// проверим чтобы даты находились в одном месяце
	Если НачалоМесяца(Элемент.Значение) <> НачалоМесяца(ПериодНачисленияДатаНачала) Тогда
		ТекстОшибки = "Даты начала и окончания периода начисления должны принадлежать одному месяцу";
		Предупреждение(ТекстОшибки);
		Элемент.Значение = КонецДня(ПериодНачисленияДатаНачала + (Цел(День(КонецМесяца(ПериодНачисленияДатаНачала)) / 2) - 1) * 86400);	
	ИначеЕсли ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца И (День(Элемент.Значение) < 11 или День(Элемент.Значение) > 22) Тогда
		//считаем правильным значение с 11 по 22-е число месяца
		ТекстОшибки = "Дата окончания периода начисления должны быть с 11-го по 22-е число месяца";
		Предупреждение(ТекстОшибки);
		Элемент.Значение = КонецДня(ПериодНачисленияДатаНачала + (Цел(День(КонецМесяца(ПериодНачисленияДатаНачала)) / 2) - 1) * 86400);
	КонецЕсли;	

КонецПроцедуры

Процедура УстановитьВидимостьРасчетногоЛистка() Экспорт
	
	ЭлементыФормы.НадписьПоказыватьРасчетныйЛисток.Заголовок = ?(ПоказыватьРасчетныйЛисток, "Скрыть расчетный листок", "Показать расчетный листок");
	РаботаСДиалогамиЗК.ИзменитьВидимостьПанелиРасчетногоЛистка(Панель, ПоказыватьРасчетныйЛисток, ЭлементыФормы.НадписьПоказыватьРасчетныйЛисток, ЭлементыФормы.ПанельРасчетногоЛистка, ЭлементыФормы.РазделительРасчетногоЛистка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
		Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
			ПолучитьСотрудниковСИсправлениями();
		КонецЕсли;
	Иначе
		РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, "Документ не заполнен", "СообщениеОПроблемах");
	КонецЕсли;
	
	мВидимостьДополнительныхКолонок = РаботаСДиалогамиЗК.ВидимостьДополнительныхКолонок("НачислениеЗарплатыРаботникамОрганизаций", мТабличныеПоляСДополнительнымиКолонками);
	
	НачислениеЗарплатыРаботникамОрганизацийПереопределяемый.ФормаДокументаПередОткрытиемДополнительно(ЭтаФорма, Новый Структура("ПриИзменении", Новый Действие("ПогашениеЗаймовВидДоговораПриИзменении")),
		Новый Структура("ПриНачалеРедактирования, ПередНачаломИзменения, ПриПолученииДанных", 
		Новый Действие("ПогашениеЗаймовПриНачалеРедактирования"), Новый Действие("ПогашениеЗаймовПередНачаломИзменения"), Новый Действие("ПогашениеЗаймовПриПолученииДанных")));
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Дата = ПолучитьРабочийДеньМесяца(Дата);
		Если ПериодНачисления.Пустая() Тогда
			ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет;
			ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ТекущийМесяц;
			ПериодНачисленияДатаНачала = НачалоМесяца(ПериодРегистрации);
			ПериодНачисленияДатаОкончания = КонецМесяца(ПериодРегистрации);
		КонецЕсли;
	Иначе
		// Если в документе присутствуют почасовые отклонения, то сразу покажем колонку ОплачиватьЧасы
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка", Ссылка);
		Запрос.УстановитьПараметр("СписокПочасовыхОтклонений", ПроведениеРасчетов.ПолучитьСписокНачисленийПочасовыхОтклонений());
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	КОЛИЧЕСТВО(Начисления.ВидРасчета.СпособРасчета) КАК КоличествоПочасовыхОтклонений
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК Начисления
		|ГДЕ
		|	Начисления.Ссылка = &Ссылка
		|	И Начисления.ВидРасчета.ВидВремени В(&СписокПочасовыхОтклонений)";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() И Выборка.КоличествоПочасовыхОтклонений > 0 Тогда
			ЭлементыФормы.Начисления.Колонки.ОплачиватьЧасов.Видимость = Истина;
		КонецЕсли;
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	ЭлементыФормы.ПериодНачисления.ДоступныеЗначения.Добавить(Перечисления.ПериодНачисленияЗарплаты.ТекущийМесяц);
	ЭлементыФормы.ПериодНачисления.ДоступныеЗначения.Добавить(Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца);
	ЭлементыФормы.ПериодНачисления.ДоступныеЗначения.Добавить(Перечисления.ПериодНачисленияЗарплаты.ПрошлыйПериод);
	
	СтруктураКолонок = Новый Структура();
	
	//запомним кнопку командной панели, для формирования имени
	мКнопкаУДФРаботника = ЭлементыФормы.ДействияФормы.Кнопки.Подменю1.Кнопки.УДФОткрыть;
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");
	СтруктураКолонок.Вставить("Показатели");
	СтруктураКолонок.Вставить("Показатель1");
	СтруктураКолонок.Вставить("Показатель2");
	СтруктураКолонок.Вставить("Показатель3");
	СтруктураКолонок.Вставить("Показатель4");
	СтруктураКолонок.Вставить("Показатель5");
	СтруктураКолонок.Вставить("Показатель6");

	// Установить ограничение - изменять видимость колонок для табличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);

	// Установить ограничение - изменять видимость колонок для табличной части ДополнительныеНачисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ДополнительныеНачисления.Колонки, СтруктураКолонок);
	
	// Установить ограничение - изменять видимость колонок для табличной части ДополнительныеНачисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ДоговорыНаВыполнениеРабот.Колонки, СтруктураКолонок);
	
	// Установить ограничение - изменять видимость колонок для табличной части Удержания
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Удержания.Колонки, СтруктураКолонок);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("МесяцНалоговогоПериода");

	// Установить ограничение - изменять видимость колонок для табличной части НДФЛ
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.НДФЛ.Колонки, СтруктураКолонок);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("ПогашениеОсновногоДолга");
	
	// Установить ограничение - изменять видимость колонок для табличной части НДФЛ
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ПогашениеЗаймов.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	СтавкиМатвыгоды = Новый СписокЗначений;
	СтавкиМатвыгоды.Добавить(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13);
	СтавкиМатвыгоды.Добавить(Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35);
	ЭлементыФормы.ПогашениеЗаймов.Колонки.СтавкаНалогообложенияМатвыгоды.ЭлементУправления.ДоступныеЗначения = СтавкиМатвыгоды;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Начисления.Колонки.ТабельныйНомерСтрока);
	мМассивЭУ.Добавить(ЭлементыФормы.ДоговорыНаВыполнениеРабот.Колонки.ТабельныйНомерСтрока);
	мМассивЭУ.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

	// Ограничим возможности выбора кодов вычета
	мСписокКодовВычетов = ПроведениеРасчетов.ПолучитьСписокВычетовКДоходам();
	ЭлементыФормы.ДополнительныеНачисления.Колонки.КодВычета.ЭлементУправления.ВысотаСпискаВыбора = мСписокКодовВычетов.Количество();
	ЭлементыФормы.ДополнительныеНачисления.Колонки.КодВычета.ЭлементУправления.ШиринаСпискаВыбора = 60;
	
	// Ограничим возможности выбора кодов вычета
	мСписокКодовВычетовДоговораГПХ = Новый СписокЗначений;
	мСписокКодовВычетовДоговораГПХ.Добавить(Справочники.ВычетыНДФЛ.Код403);
	мСписокКодовВычетовДоговораГПХ.Добавить(Справочники.ВычетыНДФЛ.Код404);
	мСписокКодовВычетовДоговораГПХ.Добавить(Справочники.ВычетыНДФЛ.Код405);
	
	мКодВычетаПоМатпомощиПриРожденииРебенка = Справочники.ВычетыНДФЛ.МатпомощьПриРожденииРебенка;
	
	// Устанавливаем соответствие доходов и положенных по ним вычетов для целей исчисления НДФЛ
	мСоответствиеДоходовИВычетов = ПроведениеРасчетов.ПолучитьСоответствиеДоходовИВычетов();
	
	// Заполнить подменю "Рассчитать" в зависимости от значения реквизита "ВидОперации"
	ЗаполнениеПодменюРассчитать();
	// Управление видимостью закладок на основной панели формы
	УправлениеВидимостьюЗакладок();
	УправлениеПометкиПодменюОперация();
	
	// Исправление документов
	мМенюИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаИсправлениеТекущийСотрудник = мМенюИсправление.Кнопки.ТекущийСотрудник;
	мКнопкаИсправлениеВесьДокумент = мМенюИсправление.Кнопки.ВесьДокумент;
	мКнопкаИсправлениеСписокСотрудников = мМенюИсправление.Кнопки.СписокСотрудников;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормы();

	ЭлементыФормы.ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Низ;
	ЭлементыФормы.НадписьПоказыватьРасчетныйЛисток.Заголовок = "Показать расчетный листок";
	ЭлементыФормы.РазделительРасчетногоЛистка.Доступность = ПоказыватьРасчетныйЛисток;

	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Начисления;
	КонецЕсли;
	
 	МассивСсылок = Новый Массив;
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код101);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код102);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код106);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код107);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код111);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код113);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код115);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код119);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код123);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код116);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код120);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код124);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код311);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код312);
 	МассивСсылок.Добавить(Справочники.ВычетыНДФЛ.Код318);
 	Представления = ОбщегоНазначения.ПолучитьПредставленияОбъектов(МассивСсылок);
	
	КолонкиНДФЛ = ЭлементыФормы.НДФЛ.Колонки;
	КолонкиНДФЛ.ПримененныйВычетНаДетей.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код101];
	КолонкиНДФЛ.ПримененныйВычетНаДетейДвойной.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код102];
	КолонкиНДФЛ.ПримененныйВычетНаДетейДвойнойВторой.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код111];
	КолонкиНДФЛ.ПримененныйВычетНаТретьегоРебенка.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код116];
	КолонкиНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойной.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код120];
	КолонкиНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код124];
	КолонкиНДФЛ.ПримененныйВычетНаВторогоРебенка.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код115];
	КолонкиНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойной.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код119];
	КолонкиНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойнойВторой.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код123];
	КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидов.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код106];
	КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код107];
	КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код113];
	КолонкиНДФЛ.ПримененныйВычетИмущественныйРасход.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код311];
	КолонкиНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код312];
	КолонкиНДФЛ.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании.ТекстШапки = Представления[Справочники.ВычетыНДФЛ.Код318];
	
	мДополнительныеКолонки = РаботаСДиалогамиЗК.ДополнительныеКолонкиТабличныхПолейДокумента(ЭлементыФормы, мТабличныеПоляСДополнительнымиКолонками); 
	
	РаботаСДиалогамиЗК.ПоказатьСкрытьДополнительныеКолонки(мДополнительныеКолонки, мВидимостьДополнительныхКолонок, мТабличныеПоляСДополнительнымиКолонками);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	ТипВыбранногоЗначения = ТипЗнч(ЗначениеВыбора);
	
	Если ТипВыбранногоЗначения = Тип("Структура") Тогда
		
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ИсполнитьПодготовленныйЗапрос" Тогда
			
			// обработаем заполнение документа все вопросы пользователю задавали перед вызовом обработки заполнения
			
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			
			Начисления.Очистить();
			ДополнительныеНачисления.Очистить();
			ДоговорыНаВыполнениеРабот.Очистить();
			НДФЛ.Очистить();
			ПогашениеЗаймов.Очистить();
			Удержания.Очистить();
			ЭлементыФормы.ТабличноеПолеРасчетногоЛистка.Очистить();
			
			Если ЭтотОбъект.Проведен Тогда
				Попытка
					ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
				Исключение
					Возврат;
				КонецПопытки;
			Иначе
				Если ЭтотОбъект.Модифицированность() Тогда //запишем документ
					Попытка
						ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
					Исключение
						Возврат;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			Автозаполнение(ЗначениеВыбора.Запрос);
			
			ОбработкаКомментариев.ПоказатьСообщения();
			
		ИначеЕсли ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьДокументИсправление" Тогда
			РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора.ВыбранныеСотрудники);
		КонецЕсли;
		
	ИначеЕсли ТипВыбранногоЗначения = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		// Если заполняем по одному сотру и этого сотрудника в документе пока нет,
		// добавим новые строки в документ
			
		СтруктураПоиска = Новый Структура("Сотрудник", ЗначениеВыбора);
		СтруктураПоискаФизлица = Новый Структура("Физлицо", ЗначениеВыбора.Физлицо);
		Представление = Строка(ЗначениеВыбора);

		Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет И
			Начисления.НайтиСтроки(СтруктураПоиска).Количество() 
			+ ДоговорыНаВыполнениеРабот.НайтиСтроки(СтруктураПоиска).Количество()
			+ ДополнительныеНачисления.НайтиСтроки(СтруктураПоиска).Количество()
			+ Удержания.НайтиСтроки(СтруктураПоискаФизлица).Количество() <> 0 Тогда

			
			ТекстВопроса = "По сотруднику " + Представление + " в документе обнаружены строки. Перезаполнить начисления и удержания?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из Начисления.НайтиСтроки(СтруктураПоиска) Цикл
				Начисления.Удалить(СтрокаТЧ)
			КонецЦикла; 
			Для каждого СтрокаТЧ Из ДоговорыНаВыполнениеРабот.НайтиСтроки(СтруктураПоиска) Цикл
				ДоговорыНаВыполнениеРабот.Удалить(СтрокаТЧ)
			КонецЦикла; 
			Для каждого СтрокаТЧ Из ДополнительныеНачисления.НайтиСтроки(СтруктураПоиска) Цикл
				ДополнительныеНачисления.Удалить(СтрокаТЧ)
			КонецЦикла; 
			Для каждого СтрокаТЧ Из Удержания.НайтиСтроки(СтруктураПоискаФизлица) Цикл
				Удержания.Удалить(СтрокаТЧ)
			КонецЦикла; 
			Для каждого СтрокаТЧ Из НДФЛ.НайтиСтроки(СтруктураПоискаФизлица) Цикл
				НДФЛ.Удалить(СтрокаТЧ)
			КонецЦикла; 
			Для каждого СтрокаТЧ Из ПогашениеЗаймов.НайтиСтроки(СтруктураПоискаФизлица) Цикл
				ПогашениеЗаймов.Удалить(СтрокаТЧ)
			КонецЦикла; 
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений И
			Начисления.НайтиСтроки(СтруктураПоиска).Количество() 
			+ ДоговорыНаВыполнениеРабот.НайтиСтроки(СтруктураПоиска).Количество()
			+ ДополнительныеНачисления.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			
			ТекстВопроса = "По сотруднику " + Представление + " в документе обнаружены строки начислений. Перезаполнить начисления?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из Начисления.НайтиСтроки(СтруктураПоиска) Цикл
				Начисления.Удалить(СтрокаТЧ)
			КонецЦикла; 
			Для каждого СтрокаТЧ Из ДоговорыНаВыполнениеРабот.НайтиСтроки(СтруктураПоиска) Цикл
				ДоговорыНаВыполнениеРабот.Удалить(СтрокаТЧ)
			КонецЦикла; 
			Для каждого СтрокаТЧ Из ДополнительныеНачисления.НайтиСтроки(СтруктураПоиска) Цикл
				ДополнительныеНачисления.Удалить(СтрокаТЧ)
			КонецЦикла; 
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов И
			ПогашениеЗаймов.НайтиСтроки(СтруктураПоискаФизлица).Количество() > 0 Тогда
			
			ТекстВопроса = "По сотруднику " + Представление + " в документе обнаружены строки погашения займов. Перезаполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из ПогашениеЗаймов.НайтиСтроки(СтруктураПоискаФизлица) Цикл
				ПогашениеЗаймов.Удалить(СтрокаТЧ)
			КонецЦикла; 
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ И
			НДФЛ.НайтиСтроки(СтруктураПоискаФизлица).Количество() > 0 Тогда
			
			ТекстВопроса = "По сотруднику " + Представление + " в документе обнаружены строки по НДФЛ. Перезаполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из НДФЛ.НайтиСтроки(СтруктураПоискаФизлица) Цикл
				НДФЛ.Удалить(СтрокаТЧ)
			КонецЦикла; 
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний И
			Удержания.НайтиСтроки(СтруктураПоискаФизлица).Количество() > 0 Тогда
			
			ТекстВопроса = "По сотруднику " + Представление + " в документе обнаружены строки удержаний. Перезаполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из Удержания.НайтиСтроки(СтруктураПоискаФизлица) Цикл
				Удержания.Удалить(СтрокаТЧ)
			КонецЦикла; 
			
		КонецЕсли;
		
		БылоСтрокДокумента = Начисления.Количество() + ДоговорыНаВыполнениеРабот.Количество()
			+ ДополнительныеНачисления.Количество() + ПогашениеЗаймов.Количество()
			+ НДФЛ.Количество() + Удержания.Количество();
			
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
	
 		ВыполнитьАвтозаполнение(ПериодНачисленияДатаНачала, ПериодНачисленияДатаОкончания, , , , ЗначениеВыбора);
		
		ОбработкаКомментариев.ПоказатьСообщения();
	
		Если БылоСтрокДокумента = Начисления.Количество() + ДоговорыНаВыполнениеРабот.Количество()
			+ ДополнительныеНачисления.Количество() + ПогашениеЗаймов.Количество()
			+ НДФЛ.Количество() + Удержания.Количество() Тогда
			
			Предупреждение("По сотруднику " + Представление + " не обнаружены данные для записи в табличные части документа.");
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьПоказателя" И Источник = ЭтаФорма Тогда
		
		КурсыВалют = Новый Соответствие;
		
		ВалютаРегУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		Если Удержания.Количество() > 0 Тогда
			ПодразделенияФизлиц = ПроведениеРасчетовПереопределяемый.ПолучитьСоответствиеФизлицИПодразделенийОрганизаций(Удержания.ВыгрузитьКолонку("ФизЛицо"), КонецДня(КонецМесяца(ПериодРегистрации)), ОбщегоНазначения.ГоловнаяОрганизация(Организация));
		КонецЕсли;
		
		ТабличныеЧасти = Новый Массив;
		ТабличныеЧасти.Добавить(Начисления);
		ТабличныеЧасти.Добавить(ДополнительныеНачисления);
		ТабличныеЧасти.Добавить(Удержания);
		РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти(мДопСведенияОВидахРасчетаНачислений, ТабличныеЧасти, "ПриРасчете");
		
		Для Каждого СтрокаПоказателей Из Параметр Цикл
			
			Валюта = СтрокаПоказателей.Валюта;
			Если Валюта = Справочники.Валюты.ПустаяСсылка() Или Валюта = Null Тогда
				Валюта = ВалютаРегУчета;
			КонецЕсли;

			СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта,КонецМесяца(ПериодРегистрации));
			СтруктураКурсаРегУчета = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаРегУчета,КонецМесяца(ПериодРегистрации));
			
			// По начислениям
			Для Каждого СтрокаДокумента Из Начисления Цикл
				СведенияОВидеРасчета = мДопСведенияОВидахРасчетаНачислений[СтрокаДокумента.ВидРасчета];
				
				Для СчПоказателей = 1 По СведенияОВидеРасчета["ФактКоличествоПоказателей"] Цикл
					Если СведенияОВидеРасчета["Показатель"+СчПоказателей] = СтрокаПоказателей.Показатель  И НачалоМесяца(СтрокаДокумента.ДатаОкончания) = СтрокаПоказателей.ПериодДействия Тогда
						
						ЗначениеПоказателя = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПоказателей.Значение,Валюта,ВалютаРегУчета,
						СтруктураКурса.Курс,СтруктураКурсаРегУчета.Курс,
						СтруктураКурса.Кратность,СтруктураКурсаРегУчета.Кратность);
						Если СтрокаДокумента["Показатель"+СчПоказателей] <> ЗначениеПоказателя Тогда
							ВидПоказателя = СведенияОВидеРасчета["Показатель"+СчПоказателей].ВидПоказателя;
							Если ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий
								Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ДляВсехОрганизаций Тогда
								СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
								// Раз уж перезаполнили показатели, то и результат придется пересчитывать
								Если СтрокаДокумента.Авторасчет Тогда
									СтрокаДокумента.Результат = 0;
								КонецЕсли;
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
								Если СтрокаПоказателей.Подразделение = СтрокаДокумента.ПодразделениеОрганизации Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
									// Раз уж перезаполнили показатели, то и результат придется пересчитывать
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный Тогда
								Если СтрокаПоказателей.Сотрудник = СтрокаДокумента.Сотрудник Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
									// Раз уж перезаполнили показатели, то и результат придется пересчитывать
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;

			КонецЦикла;
			
			// По дополнительным начислениям
			Для Каждого СтрокаДокумента Из ДополнительныеНачисления Цикл
				СведенияОВидеРасчета = мДопСведенияОВидахРасчетаНачислений[СтрокаДокумента.ВидРасчета];
				Для СчПоказателей = 1 По СведенияОВидеРасчета["ФактКоличествоПоказателей"] Цикл
					Если СведенияОВидеРасчета["Показатель"+СчПоказателей] = СтрокаПоказателей.Показатель  И НачалоМесяца(СтрокаДокумента.ДатаОкончания) = СтрокаПоказателей.ПериодДействия Тогда
						ЗначениеПоказателя = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПоказателей.Значение,Валюта,ВалютаРегУчета,
						СтруктураКурса.Курс,СтруктураКурсаРегУчета.Курс,
						СтруктураКурса.Кратность,СтруктураКурсаРегУчета.Кратность);
						Если СтрокаДокумента["Показатель"+СчПоказателей] <> СтрокаПоказателей.Значение Тогда
							ВидПоказателя = СведенияОВидеРасчета["Показатель"+СчПоказателей].ВидПоказателя;
							Если ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий
							Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ДляВсехОрганизаций Тогда
								СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
								// Раз уж перезаполнили показатели, то и результат придется пересчитывать
								Если СтрокаДокумента.Авторасчет Тогда
									СтрокаДокумента.Результат = 0;
								КонецЕсли;
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
								Если СтрокаПоказателей.Подразделение = СтрокаДокумента.ПодразделениеОрганизации Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
									// Раз уж перезаполнили показатели, то и результат придется пересчитывать
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный Тогда
								Если СтрокаПоказателей.Сотрудник = СтрокаДокумента.Сотрудник Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
									// Раз уж перезаполнили показатели, то и результат придется пересчитывать
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			// По удержаниям
			Для Каждого СтрокаДокумента Из Удержания Цикл
				СведенияОВидеРасчета = мДопСведенияОВидахРасчетаНачислений[СтрокаДокумента.ВидРасчета];
				Для СчПоказателей = 1 По СведенияОВидеРасчета["ФактКоличествоПоказателей"] Цикл
					Если СведенияОВидеРасчета["Показатель"+СчПоказателей] = СтрокаПоказателей.Показатель  И НачалоМесяца(СтрокаДокумента.ДатаОкончания) = СтрокаПоказателей.ПериодДействия Тогда
						ЗначениеПоказателя = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаПоказателей.Значение,Валюта,ВалютаРегУчета,
						СтруктураКурса.Курс,СтруктураКурсаРегУчета.Курс,
						СтруктураКурса.Кратность,СтруктураКурсаРегУчета.Кратность);
						
						ВидПоказателя = СведенияОВидеРасчета["Показатель"+СчПоказателей].ВидПоказателя;
						Если СтрокаДокумента["Показатель"+СчПоказателей] <> СтрокаПоказателей.Значение Тогда
							Если ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий
							Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ДляВсехОрганизаций Тогда
								СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
								// Раз уж перезаполнили показатели, то и результат придется пересчитывать
								Если СтрокаДокумента.Авторасчет Тогда
									СтрокаДокумента.Результат = 0;
								КонецЕсли;
								
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
								Если СтрокаПоказателей.Подразделение = ПодразделенияФизлиц[СтрокаДокумента.ФизЛицо] Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;

									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
								
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный Тогда
								Если СтрокаПоказателей.Сотрудник.ФизЛицо = СтрокаДокумента.ФизЛицо Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
									// Раз уж перезаполнили показатели, то и результат придется пересчитывать
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументыИсправление.Найти(Источник) = Неопределено Тогда 
						мДокументыИсправление.Добавить(Источник);
						ПолучитьСотрудниковСИсправлениями();
						ОбновитьДоступностьЭлементовФормы();
						РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаНДФЛ Тогда
		
		КолонкиНДФЛ = ЭлементыФормы.НДФЛ.Колонки;
		
		БлокКолонок = Новый Массив;
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетей);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейДвойной);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейДвойнойВторой);
		РаботаСДиалогамиЗК.ПеренестиБлокКолонокЦеликом(КолонкиНДФЛ, КолонкиНДФЛ.ЗаголовокВычетовНаДетей, БлокКолонок);
		
		БлокКолонок = Новый Массив;
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаВторогоРебенка);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойной);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаВторогоРебенкаДвойнойВторой);
		РаботаСДиалогамиЗК.ПеренестиБлокКолонокЦеликом(КолонкиНДФЛ, КолонкиНДФЛ.ЗаголовокВычетовНаВторыхДетей, БлокКолонок);
		
		БлокКолонок = Новый Массив;
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаТретьегоРебенка);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойной);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаТретьегоРебенкаДвойнойВторой);
		РаботаСДиалогамиЗК.ПеренестиБлокКолонокЦеликом(КолонкиНДФЛ, КолонкиНДФЛ.ЗаголовокВычетовНаТретьихДетей, БлокКолонок);
		
		БлокКолонок = Новый Массив;
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидов);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойной);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетНаДетейИнвалидовДвойнойВторой);
		РаботаСДиалогамиЗК.ПеренестиБлокКолонокЦеликом(КолонкиНДФЛ, КолонкиНДФЛ.ЗаголовокВычетовНаДетейИнвалидов, БлокКолонок);
		
		БлокКолонок = Новый Массив;
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетИмущественныйРасход);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетИмущественныйПроцентыПоКредитам);
		БлокКолонок.Добавить(КолонкиНДФЛ.ПримененныйВычетИмущественныйПроцентыПриПерекредитовании);
		РаботаСДиалогамиЗК.ПеренестиБлокКолонокЦеликом(КолонкиНДФЛ, КолонкиНДФЛ.ЗаголовокИмущественныхВычетов, БлокКолонок);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// Очистим "лишние", с точки зрения реквизита "ВидаОперации", строки табличных частей.
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		// Проверка наличия записей в других ТЧ документа.
		Если ПогашениеЗаймов.Количество() > 0 ИЛИ
			НДФЛ.Количество() > 0 ИЛИ Удержания.Количество() > 0 Тогда
			
			ТекстВопроса = "Обнаружены строки в табличных частях документа, не относящихся к операции ""Расчет начислений"".
			|При записи документа эти строки будут удалены. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ПогашениеЗаймов.Очистить();
		НДФЛ.Очистить();
		Удержания.Очистить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		// Проверка наличия записей в других ТЧ документа.
		Если Начисления.Количество() > 0 ИЛИ ДополнительныеНачисления.Количество() > 0 ИЛИ ДоговорыНаВыполнениеРабот.Количество() > 0 ИЛИ 
			НДФЛ.Количество() > 0 ИЛИ Удержания.Количество() > 0 Тогда
			
			ТекстВопроса = "Обнаружены строки в табличных частях документа, не относящихся к операции ""Погашение займов"".
			|При записи документа эти строки будут удалены. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Начисления.Очистить();
		ДополнительныеНачисления.Очистить();
		ДоговорыНаВыполнениеРабот.Очистить();
		НДФЛ.Очистить();
		Удержания.Очистить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
		
		// Проверка наличия записей в других ТЧ документа.
		Если Начисления.Количество() > 0 ИЛИ ДополнительныеНачисления.Количество() > 0 ИЛИ ДоговорыНаВыполнениеРабот.Количество() > 0 ИЛИ
			ПогашениеЗаймов.Количество() > 0 ИЛИ Удержания.Количество() > 0 Тогда
			
			ТекстВопроса = "Обнаружены строки в табличных частях документа, не относящихся к операции ""Расчет НДФЛ"".
			|При записи документа эти строки будут удалены. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Начисления.Очистить();
		ДополнительныеНачисления.Очистить();
		ДоговорыНаВыполнениеРабот.Очистить();
		ПогашениеЗаймов.Очистить();
		Удержания.Очистить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		
		// Проверка наличия записей в других ТЧ документа.
		Если Начисления.Количество() > 0 ИЛИ ДополнительныеНачисления.Количество() > 0 ИЛИ ДоговорыНаВыполнениеРабот.Количество() > 0 ИЛИ
			НДФЛ.Количество() > 0 ИЛИ ПогашениеЗаймов.Количество() > 0 Тогда
			
			ТекстВопроса = "Обнаружены строки в табличных частях документа, не относящихся к операции ""Расчет удержаний"".
			|При записи документа эти строки будут удалены. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Начисления.Очистить();
		ДополнительныеНачисления.Очистить();
		ДоговорыНаВыполнениеРабот.Очистить();
		НДФЛ.Очистить();
		ПогашениеЗаймов.Очистить();

	КонецЕсли;

	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ДанныеДокумента = ДополнительныеНачисления.Выгрузить(,"Сотрудник,ВидРасчета");
		ДанныеДокумента.Свернуть("Сотрудник,ВидРасчета");
		ДанныеДокумента.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
		ДанныеДокумента.ЗаполнитьЗначения(ПериодНачисленияДатаНачала, "ДатаНачала");
		РаботаСДиалогамиЗК.ПроверитьДанныеОПериодическихВыплатах(Ссылка, Отказ, ПерерассчитываемыйДокумент, ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПередЗакрытием" формы.
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ЭтаФорма);
	ПоказыватьРасчетныйЛисток = Ложь;
	УстановитьВидимостьРасчетногоЛистка();
	
	РаботаСДиалогамиЗК.СохранитьСтруктуруВидимостиДополнительныхКолонок("НачислениеЗарплатыРаботникамОрганизаций", мВидимостьДополнительныхКолонок);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыУстановитьОперацию(Кнопка)

	Если Кнопка = Неопределено Тогда
		Возврат;
		
	Иначе
		ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций[Кнопка.Имя];
		
	КонецЕсли;
	
	ЗаполнениеПодменюРассчитать();
	УправлениеВидимостьюЗакладок();
	УправлениеПометкиПодменюОперация();
	УстановитьКнопкиИсправленияДокумента();
	
	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры // ДействияФормыУстановитьОперацию()

Процедура ДействияФормыСоздатьЗарплатаКВыплате()
	
	ЗарплатаКВыплатеОрганизацийСервис.СоздатьНаОсновании(ЭтаФорма, Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "По всем работникам" подменю "Заполнить" командной панели формы,
// заполняет документ по данным регистров сведений о начислениях и удержаниях.
//
Процедура ДействияФормыДействиеЗаполнить(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(Начисления);
		МассивТаблиц.Добавить(ДополнительныеНачисления);
		МассивТаблиц.Добавить(ДоговорыНаВыполнениеРабот);
		МассивТаблиц.Добавить(НДФЛ);
		МассивТаблиц.Добавить(Удержания);
		МассивТаблиц.Добавить(ПогашениеЗаймов);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением все таблицы документа будут очищены. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		Начисления.Очистить();
		ДополнительныеНачисления.Очистить();
		ДоговорыНаВыполнениеРабот.Очистить();
		НДФЛ.Очистить();
		Удержания.Очистить();
		ПогашениеЗаймов.Очистить();
		ЭтаФорма.Обновить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(Начисления);
		МассивТаблиц.Добавить(ДополнительныеНачисления);
		МассивТаблиц.Добавить(ДоговорыНаВыполнениеРабот);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением все таблицы документа будут очищены. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		Начисления.Очистить();
		ДополнительныеНачисления.Очистить();
		ДоговорыНаВыполнениеРабот.Очистить();
		ЭтаФорма.Обновить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(ПогашениеЗаймов);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением таблица ""Погашение займов"" будет очищена. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		ПогашениеЗаймов.Очистить();
		ЭтаФорма.Обновить();

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(НДФЛ);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением таблица ""НДФЛ"" будет очищена. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		НДФЛ.Очистить();
		ЭтаФорма.Обновить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний И
		Удержания.Количество() > 0 Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(Удержания);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением таблица ""Прочие удержания"" будет очищена. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		Удержания.Очистить();
		ЭтаФорма.Обновить();
		
	КонецЕсли;
	
	ЗаполнениеВыполнено = Автозаполнение();
	
	Если ЗаполнениеВыполнено Тогда 
		// проверяем заполнились ли данные только если автозаполнение выполнено
		НетДанных = Ложь;
		Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
			Если Начисления.Количество() = 0 И ДополнительныеНачисления.Количество() = 0 И ДоговорыНаВыполнениеРабот.Количество() = 0 И НДФЛ.Количество() = 0 И
				Удержания.Количество() = 0  И ПогашениеЗаймов.Количество() = 0 Тогда
				НетДанных = Истина;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
			Если Начисления.Количество() = 0 И ДополнительныеНачисления.Количество() = 0 И ДоговорыНаВыполнениеРабот.Количество() = 0 Тогда
				НетДанных = Истина;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
			Если ПогашениеЗаймов.Количество() = 0 Тогда
				НетДанных = Истина;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
			Если НДФЛ.Количество() = 0 Тогда
				НетДанных = Истина;
			КонецЕсли;
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
			Если Удержания.Количество() = 0 Тогда
				НетДанных = Истина;
			КонецЕсли;
		КонецЕсли;
		Если НетДанных Тогда
			ОбщегоНазначенияЗК.ОшибкаРасчета("Не обнаружены данные для записи в табличные части документа.");
		КонецЕсли;
		
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	//после заполнения табличных частей, активизируем строку
	УстановитьТекущуюСтрокуТабличнойЧасти();
	
КонецПроцедуры // ДействияФормыДействиеЗаполнить()

Процедура ДействияФормыПодборСотрудников(Кнопка)
	
	Если Проведен Тогда 
		Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
			МассивТаблиц = Новый Массив;
			МассивТаблиц.Добавить(Начисления);
			МассивТаблиц.Добавить(ДополнительныеНачисления);
			МассивТаблиц.Добавить(ДоговорыНаВыполнениеРабот);
			МассивТаблиц.Добавить(НДФЛ);
			МассивТаблиц.Добавить(Удержания);
			МассивТаблиц.Добавить(ПогашениеЗаймов);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
			
			МассивТаблиц = Новый Массив;
			МассивТаблиц.Добавить(Начисления);
			МассивТаблиц.Добавить(ДополнительныеНачисления);
			МассивТаблиц.Добавить(ДоговорыНаВыполнениеРабот);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
			
			МассивТаблиц = Новый Массив;
			МассивТаблиц.Добавить(ПогашениеЗаймов);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
			
			МассивТаблиц = Новый Массив;
			МассивТаблиц.Добавить(НДФЛ);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний И
			Удержания.Количество() > 0 Тогда
			
			МассивТаблиц = Новый Массив;
			МассивТаблиц.Добавить(Удержания);
		КонецЕсли;
			
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		ТекстВопроса1 = "Заполнить документ подбором можно только после отмены его проведения. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, "") Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭтаФорма, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 0);
	
КонецПроцедуры

Процедура ДействияФормыСписокСотрудников(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
		
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(Начисления);
		МассивТаблиц.Добавить(ДополнительныеНачисления);
		МассивТаблиц.Добавить(ДоговорыНаВыполнениеРабот);
		МассивТаблиц.Добавить(НДФЛ);
		МассивТаблиц.Добавить(Удержания);
		МассивТаблиц.Добавить(ПогашениеЗаймов);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением все таблицы документа будут очищены. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2, Ложь) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(Начисления);
		МассивТаблиц.Добавить(ДополнительныеНачисления);
		МассивТаблиц.Добавить(ДоговорыНаВыполнениеРабот);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением все таблицы документа будут очищены. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2, Ложь) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(ПогашениеЗаймов);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением таблица ""Погашение займов"" будет очищена. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2, Ложь) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНДФЛ Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(НДФЛ);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением таблица ""НДФЛ"" будет очищена. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2, Ложь) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний И
		Удержания.Количество() > 0 Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(Удержания);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением таблица ""Прочие удержания"" будет очищена. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2, Ложь) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, ПериодНачисленияДатаОкончания, , Организация, ПодразделениеОрганизации, Ложь, , , , ПериодНачисленияДатаНачала, Истина, Истина);	

	//после заполнения табличных частей, активизируем строку
	УстановитьТекущуюСтрокуТабличнойЧасти();
	
КонецПроцедуры // ДействияФормыСписокРаботников()

Процедура ДействияФормыРассчитатьНачисления(Кнопка)
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	Если Не ПроверкаУчастияВПилотномПроектеФСС(Начисления.ВыгрузитьКолонку("ВидРасчета"), ДополнительныеНачисления.ВыгрузитьКолонку("ВидРасчета"), "Расчет начислений") Тогда
		Возврат
	КонецЕсли;
		
	РассчитатьНачисления();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
		мБылоОтработаноДней				= ТекущаяСтрока.ОтработаноДней;
		мБылоОтработаноЧасов			= ТекущаяСтрока.ОтработаноЧасов;
		мБылоОтработаноДнейПоПятидневке	= ТекущаяСтрока.ОтработаноДнейПоПятидневке;
		мБылоНормаДней					= ТекущаяСтрока.НормаДней;
		мБылоНормаЧасов					= ТекущаяСтрока.НормаЧасов;
		мБылоНормаДнейПоПятидневке		= ТекущаяСтрока.НормаДнейПоПятидневке;
		мБылоОплаченоДнейЧасов			= ТекущаяСтрока.ОплаченоДнейЧасов;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.ДополнительныеНачисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультатТЧДополнительныеНачисления			= ТекущаяСтрока.Результат;
		мБылоОплаченоДнейЧасовТЧДополнительныеНачисления	= ТекущаяСтрока.ОплаченоДнейЧасов;
	КонецЕсли;
	
	ЗаполнитьРасчетныйЛисток(Истина);
	
КонецПроцедуры // ДействияФормыРассчитатьНачисления()

Процедура ДействияФормыРассчитатьУдержания(Кнопка)
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	РассчитатьУдержания();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультатТЧУдержания = ТекущаяСтрока.Результат;
	КонецЕсли;
	
	ЗаполнитьРасчетныйЛисток(Истина);
	
КонецПроцедуры // ДействияФормыРассчитатьУдержания()

Процедура ДействияФормыРассчитатьПогашениеЗаймов(Кнопка)
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	РассчитатьПогашениеЗаймов();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	//активизируем текущую строку после расчета
	Если ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные = Неопределено И ПогашениеЗаймов.Количество()>0 Тогда
		СтрокаТЧ = ПогашениеЗаймов.Получить(0);
		ЭлементыФормы.ПогашениеЗаймов.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;
	
	ЗаполнитьРасчетныйЛисток(Истина);
	
КонецПроцедуры // ДействияФормыРассчитатьПогашениеЗаймов()

Процедура ДействияФормыРассчитатьНДФЛ(Кнопка)
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	РассчитатьНДФЛ();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	//активизируем текущую строку после расчета
	Если ЭлементыФормы.НДФЛ.ТекущиеДанные = Неопределено И НДФЛ.Количество() > 0 Тогда
		СтрокаТЧ = НДФЛ.Получить(0);
		ЭлементыФормы.НДФЛ.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;
	
	ЗаполнитьРасчетныйЛисток(Истина);
	
КонецПроцедуры // ДействияФормыРассчитатьНДФЛ()

Процедура ДействияФормыРассчитатьВсе(Кнопка)
	
	Если Не РасчетДокументаРазрешен() Тогда
		Возврат
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если Не РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	Если Не ПроверкаУчастияВПилотномПроектеФСС(Начисления.ВыгрузитьКолонку("ВидРасчета"), ДополнительныеНачисления.ВыгрузитьКолонку("ВидРасчета"), "Полный расчет") Тогда
		Возврат
	КонецЕсли;
		
	РассчитатьВсе();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
		мБылоОтработаноДней				= ТекущаяСтрока.ОтработаноДней;
		мБылоОтработаноЧасов			= ТекущаяСтрока.ОтработаноЧасов;
		мБылоОтработаноДнейПоПятидневке	= ТекущаяСтрока.ОтработаноДнейПоПятидневке;
		мБылоНормаДней					= ТекущаяСтрока.НормаДней;
		мБылоНормаЧасов					= ТекущаяСтрока.НормаЧасов;
		мБылоНормаДнейПоПятидневке		= ТекущаяСтрока.НормаДнейПоПятидневке;
		мБылоОплаченоДнейЧасов			= ТекущаяСтрока.ОплаченоДнейЧасов;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультатТЧУдержания = ТекущаяСтрока.Результат;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.ДополнительныеНачисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультатТЧДополнительныеНачисления			= ТекущаяСтрока.Результат;
		мБылоОплаченоДнейЧасовТЧДополнительныеНачисления	= ТекущаяСтрока.ОплаченоДнейЧасов;
	КонецЕсли;
	
	//активизируем текущую строку после расчета
	Если ЭлементыФормы.НДФЛ.ТекущиеДанные = Неопределено И НДФЛ.Количество()>0 Тогда
		СтрокаТЧ = НДФЛ.Получить(0);
		ЭлементыФормы.НДФЛ.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;
	
	//активизируем текущую строку после расчета
	Если ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные = Неопределено И ПогашениеЗаймов.Количество()>0 Тогда
		СтрокаТЧ = ПогашениеЗаймов.Получить(0);
		ЭлементыФормы.ПогашениеЗаймов.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;
	
	ЗаполнитьРасчетныйЛисток(Истина);
	
КонецПроцедуры // ДействияФормыРассчитатьВсе()

Процедура ДействияФормыРассчитатьРаботника(Кнопка)
	РассчитатьРаботника(Ложь);
КонецПроцедуры // ДействияФормыРассчитатьРаботника()

Процедура ДействияФормыРассчитатьРаботникаСКомментарием(Кнопка)
	РассчитатьРаботника(Истина);
КонецПроцедуры // ДействияФормыРассчитатьРаботника()

Процедура ДействияФормыПоказатели(Кнопка)
	
	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	ТекущийСотрудник	= Неопределено;
	Если ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаОсновныеНачисления Тогда
		Если ЭлементыФормы.Начисления.ТекущиеДанные <> Неопределено Тогда
			ТекущийСотрудник  = ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник;
		ИначеЕсли Начисления.Количество() > 0 Тогда
			ТекущийСотрудник  = Начисления[Начисления.Количество()-1].Сотрудник;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДополнительныеНачисления Тогда
		Если ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные <> Неопределено Тогда
			ТекущийСотрудник  = ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные.Сотрудник;
		ИначеЕсли ДополнительныеНачисления.Количество() > 0 Тогда
			ТекущийСотрудник  = ДополнительныеНачисления[ДополнительныеНачисления.Количество()-1].Сотрудник;
		КонецЕсли;
	ИначеЕсли ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаУдержания Тогда
		Если ЭлементыФормы.Удержания.ТекущиеДанные <> Неопределено Тогда
			ТекущийСотрудник  = ЭлементыФормы.Удержания.ТекущиеДанные.ФизЛицо;
		ИначеЕсли Удержания.Количество() > 0 Тогда
			ТекущийСотрудник  = Удержания[Удержания.Количество()-1].ФизЛицо;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗаполнитьПоказатели(ТекущийСотрудник, ЭтаФорма) Тогда
		Предупреждение("Для расчета сотрудников этого документа ввода показателей не требуется");
	КонецЕсли;

КонецПроцедуры //ДействияФормыПоказатели

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

Процедура УДФОткрыть(Кнопка)
	
	Если Не ЗначениеЗаполнено(мТекущееФизлицо) Тогда
		Возврат;
	КонецЕсли;
	
	Форма = Обработки.УправлениеДаннымиРаботника.ПолучитьФорму();
	Форма.УстановитьРеквизиты(мТекущееФизлицо, "РасчетыЗарплата", ПериодРегистрации);
	Форма.Открыть();
	
КонецПроцедуры // УДФОткрыть()

Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	Если Не ЗначениеЗаполнено(мТекущийСотрудник) Тогда
		Предупреждение("Не выбран сотрудник для исправления расчетов!");
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);

КонецПроцедуры

Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	Если Проведен Тогда
		
		ТекстВопроса = "Для исправления необходимо записать документ. Продолжить?";
		Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
			Возврат;
		КонецЕсли;
		
		СписокСотрудников = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.Начисления КАК НачислениеЗарплатыРаботникамОрганизацийНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийНачисления.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Сотрудник.Наименование
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДополнительныеНачисления КАК НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийДополнительныеНачисления.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сотрудник,
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Сотрудник.Наименование
		|ИЗ
		|	Документ.НачислениеЗарплатыРаботникамОрганизаций.ДоговорыНаВыполнениеРабот КАК НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот
		|ГДЕ
		|	НачислениеЗарплатыРаботникамОрганизацийДоговорыНаВыполнениеРабот.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		Запрос.УстановитьПараметр("Ссылка",Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если мСотрудникиИсправление[Выборка.Сотрудник] = Неопределено Тогда
				СписокСотрудников.Добавить(Выборка.Сотрудник,Выборка.Наименование)
			КонецЕсли;
		КонецЦикла;
		
		Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, Ссылка);
		Форма.СписокСотрудников = СписокСотрудников;
		Форма.Заголовок = "Сотрудники документа Начисление зарплаты №" + Номер + " от " + Формат(Дата,"ДФ=dd.MM.yyyy");
		Форма.Открыть();
		
	Иначе
		Предупреждение("Исправить можно только проведенный документ!")
	КонецЕсли;
	
КонецПроцедуры

// Процедура отмены документов-исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
	ПолучитьСотрудниковСИсправлениями();
	ОбновитьДоступностьЭлементовФормы();
	РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
	Обновить();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Проверка на последний рабочий день месяца.
	Если ПериодНачисления <> Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда	
		ПоследнийРабочийДеньМесяца = ПолучитьРабочийДеньМесяца(Элемент.Значение);
		
		Если КонецДня(Элемент.Значение) < ПоследнийРабочийДеньМесяца И Месяц(Элемент.Значение) = Месяц(ПериодРегистрации) Тогда
			
			Ответ = Вопрос("Начисление зарплаты производится не последним рабочим днем месяца. Продолжить?", РежимДиалогаВопрос.ДаНет);
			
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Дата = мТекущаяДатаДокумента
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	ОпределитьДатыПериодаНачисления();
	УстановитьЗаголовокФормыДокумента();
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	ОпределитьДатыПериодаНачисления();
	УстановитьЗаголовокФормыДокумента();
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
	ОпределитьДатыПериодаНачисления();
	УстановитьЗаголовокФормыДокумента();
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода режима работы документа
//
Процедура ПериодНачисленияПриИзменении(Элемент)
	
	ОпределитьДатыПериодаНачисления();
	
	Если ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
		// всегда производим полный расчет
		
		ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет;
		
		ЗаполнениеПодменюРассчитать();
		УправлениеВидимостьюЗакладок();
		УправлениеПометкиПодменюОперация();
	
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	УстановитьЗаголовокФормыДокумента();
	ОбновитьДоступностьЭлементовФормы();
	
КонецПроцедуры

Процедура ПериодНачисленияДатаНачалаПриИзменении(Элемент)
	УстановитьЗаголовокФормыДокумента();
	Если ПериодНачисления = Перечисления.ПериодНачисленияЗарплаты.ПрошлыйПериод Тогда
		ПериодНачисленияДатаОкончания = КонецМесяца(Элемент.Значение)	
	КонецЕсли;
КонецПроцедуры

Процедура ПериодНачисленияДатаОкончанияПриИзменении(Элемент)
	
	ПроверитьИсправитьПериодНачисленияДатаОкончания(Элемент);
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

Процедура ПериодНачисленияДатаОкончанияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если День(Элемент.Значение) = 11 и Направление = -1 или День(Элемент.Значение) = 22 и Направление = 1 Тогда
		//считаем правильным значение с 11 по 22-е число месяца
		ТекстОшибки = "Дата окончания периода начисления должны быть с 11-го по 22-е число месяца";
		Предупреждение(ТекстОшибки);
	Иначе
		Элемент.Значение = Элемент.Значение + Направление * 86400;
	КонецЕсли;
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

// Процедура вызывается при смене закладки
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьТекущегоСотрудника();
	
КонецПроцедуры // ОсновнаяПанельПриСменеСтраницы()

Процедура НадписьПоказыватьРасчетныйЛистокНажатие(Элемент)
	
	ПоказыватьРасчетныйЛисток = Не ПоказыватьРасчетныйЛисток;
	Если ПоказыватьРасчетныйЛисток Тогда
		ЗаполнитьРасчетныйЛисток(Истина);
	КонецЕсли;
	УстановитьВидимостьРасчетногоЛистка();
		
КонецПроцедуры

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ПоказатьИсправления(ЭтаФорма, Ссылка, мДокументыИсправление, мДокументСторнирование);
	
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КНОПОК ФОРМЫ

Процедура КнопкаОчиститьНажатие(Элемент)
	
	Если Начисления.Количество()>0
		ИЛИ ДополнительныеНачисления.Количество()>0
		ИЛИ ДоговорыНаВыполнениеРабот.Количество()>0
		ИЛИ НДФЛ.Количество()>0
		ИЛИ ПогашениеЗаймов.Количество()>0 
		ИЛИ Удержания.Количество()>0 Тогда
		
		ТекстВопроса = "Все таблицы документа будут очищены. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		Начисления.Очистить();
		ДополнительныеНачисления.Очистить();
		ДоговорыНаВыполнениеРабот.Очистить();
		Удержания.Очистить();
		НДФЛ.Очистить();
		ПогашениеЗаймов.Очистить();
		
	КонецЕсли;
	
	ЭлементыФормы.ТабличноеПолеРасчетногоЛистка.Очистить();
	мТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	мТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

// Процедура - обработчик события "ПриОкончанииРедактирования"
//
Процедура ПриОкончанииРедактированияСтроки(Элемент, НоваяСтрока, ОтменаРедактирования)

	Если НЕ ОтменаРедактирования Тогда
		
		ОбновитьТекущегоСотрудника(Истина);
		
	КонецЕсли;

КонецПроцедуры // ПриОкончанииРедактированияСтроки()

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Отказ = ДанныеСтроки.Сторно И ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент Или мСотрудникиИсправление[мТекущийСотрудник] <> Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломИзменения(Элемент, Отказ)
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Отказ = ДанныеСтроки.Сторно И ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент Или мСотрудникиИсправление[ДанныеСтроки.Сотрудник] <> Неопределено	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Начисления

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//	Элемент - табличное поле, которое отображает т.ч.
//	
Процедура НачисленияПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияНачисленияПриАктивизацииСтроки", 0.1, Истина);	 	
	
КонецПроцедуры // НачисленияПриАктивизацииСтроки()

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля Начисления
//
Процедура ОбработчикОжиданияНачисленияПриАктивизацииСтроки()
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущиеДанные;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
		мБылоОтработаноДней				= ТекущаяСтрока.ОтработаноДней;
		мБылоОтработаноЧасов			= ТекущаяСтрока.ОтработаноЧасов;
		мБылоОтработаноДнейПоПятидневке	= ТекущаяСтрока.ОтработаноДнейПоПятидневке;
		мБылоНормаДней					= ТекущаяСтрока.НормаДней;
		мБылоНормаЧасов					= ТекущаяСтрока.НормаЧасов;
		мБылоНормаДнейПоПятидневке		= ТекущаяСтрока.НормаДнейПоПятидневке;
		мБылоОплаченоДнейЧасов			= ТекущаяСтрока.ОплаченоДнейЧасов;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Начисления, мДопСведенияОВидахРасчетаНачислений, , Истина);
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаОсновныеНачисления Тогда
		
		ОбновитьТекущегоСотрудника();
		МожноРедактироватьСтроку = (ТекущаяСтрока = Неопределено Или Не ТекущаяСтрока.Сторно Или ТекущаяСтрока.СторнируемыйДокумент <> ПерерассчитываемыйДокумент) И мСотрудникиИсправление[мТекущийСотрудник] = Неопределено;
		ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
		ЭлементыФормы.КоманднаяПанельНачислений.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
		ЭлементыФормы.КонтекстноеМенюОсновныеНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
		ЭлементыФормы.КонтекстноеМенюОсновныеНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
	КонецЕсли;
	
КонецПроцедуры // НачисленияПриНачалеРедактирования()

// Процедура - обработчик события "ПриПолученииДанных" табличного поля "Начисления"
//
Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Начисления, ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мДопСведенияОВидахРасчетаНачислений, ОформленияСтрок, , "ПриРасчете");
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Ячейки.Авторасчет.ТолькоПросмотр = ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент;
		Иначе
			Ячейки.СторнируемыйДокумент.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если мСотрудникиИсправление[ДанныеСтроки.Сотрудник] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			Ячейки.Авторасчет.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			Ячейки.Авторасчет.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		ЯчейкаСКартинкой = Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
		
		ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
		
		СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ДанныеСтрокиВидРасчета);
		
		Если НЕ ДанныеСтрокиВидРасчета.Пустая() Тогда
			
			Если НЕ СведенияОВидеРасчета.ЗачетОтработанногоВремени Тогда
				Ячейки.ОтработаноДней.ТолькоПросмотр				= Истина;
				Ячейки.ОтработаноЧасов.ТолькоПросмотр				= Истина;
				Ячейки.ОтработаноДнейПоПятидневке.ТолькоПросмотр	= Истина;
			КонецЕсли;
			
			Если НЕ СведенияОВидеРасчета.ЗачетНормыВремени Тогда
				Ячейки.НормаДней.ТолькоПросмотр				= Истина;
				Ячейки.НормаДнейПоПятидневке.ТолькоПросмотр	= Истина;
			КонецЕсли;
			
			Если мСписокПочасовыхОтклонений.НайтиПоЗначению(СведенияОВидеРасчета.ВидВремени) <> Неопределено Тогда
				Ячейки.ДатаОкончания.ТолькоПросмотр	= Истина;
			Иначе
				Ячейки.ОплачиватьЧасов.ТолькоПросмотр	= Истина;
			КонецЕсли;
			
		КонецЕсли;

		Ячейки.ОтработанноеВремя.Видимость = Ложь;
		Ячейки.Показатели.Видимость = Ложь;
		
		ВыводСтрокПоказателей(ДанныеСтрокиВидРасчета,ОформлениеСтроки, ДанныеСтроки);
		
	КонецЦикла;	
	
КонецПроцедуры // НачисленияПриПолученииДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ 

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура НачисленияСотрудникПриИзменении(Элемент)

	ТекущиеДанные = ЭлементыФормы.Начисления.ТекущиеДанные;
	
	ДатаСобытия = ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания), ТекущиеДанные.ДатаОкончания, Дата);
	ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(ТекущиеДанные.Сотрудник, ДатаСобытия, ЭлементыФормы.Начисления);
	ТекущиеДанные.ФизЛицо = Неопределено;
	
	ДатаНачала = ТекущиеДанные.ДатаНачала;
	Если ДатаНачала = '0001.01.01' Тогда
		ДатаНачала = ПериодНачисленияДатаНачала;
	КонецЕсли;
	
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Сотрудник, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), ТекущиеДанные.ПодразделениеОрганизации, мГоловнаяОрганизация, "Начисления", ДатаНачала);
	
	РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);
	
КонецПроцедуры // НачисленияФизлицоПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода физического лица
Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина,  Дата, мГоловнаяОрганизация, 5, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // НачисленияФизлицоНачалоВыбора()

Процедура НачисленияСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДатаСобытия = ?(ЗначениеЗаполнено(ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания), ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания, Дата);
	ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(ВыбранноеЗначение, ДатаСобытия, ЭлементыФормы.Начисления);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Сотрудник
Процедура НачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода Сотрудник
Процедура НачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета
Процедура НачисленияВидРасчетаПриИзменении(Элемент)

	ТекущиеДанные = ЭлементыФормы.Начисления.ТекущиеДанные;
	
	ДатаНачала = ТекущиеДанные.ДатаНачала;
	Если ДатаНачала = '0001.01.01' Тогда
		ДатаНачала = ПериодНачисленияДатаНачала;
	КонецЕсли;

	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Сотрудник, Элемент.Значение, Число(ТекущиеДанные.НомерСтроки), ТекущиеДанные.ПодразделениеОрганизации, мГоловнаяОрганизация, "Начисления", ДатаНачала);
	
	РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);
	
	ОбновитьДанныеДляПочасовогоОтклонения();
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Начисления, мДопСведенияОВидахРасчетаНачислений, , Истина);
	
КонецПроцедуры // НачисленияВидРасчетаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода вида расчета
Процедура НачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(мСписокКодовНДФЛОсновныхНачислений) Тогда
		мСписокКодовНДФЛОсновныхНачислений = ПроведениеРасчетов.ПолучитьСписокКодовДоходаОсновныхНачислений()
	КонецЕсли;	

	НедопустимыеСпособыРасчета = Новый СписокЗначений;
	НедопустимыеСпособыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
	НедопустимыеСпособыРасчета.Добавить(Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС);
	
	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаНачислениеЗарплатыРаботникамОрганизаций");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.ВидСравнения		= ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Значение			= мСписокКодовНДФЛОсновныхНачислений;		
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Использование	= Истина;

	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения		= ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение			= НедопустимыеСпособыРасчета;		
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование	= Истина;
	
	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры // НачисленияВидРасчетаНачалоВыбора()

Процедура НачисленияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ОсновныеНачисления"), Элемент.ТипЗначения.Типы()[0]);
	
КонецПроцедуры // НачисленияВидРасчетаАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода вида расчета
Процедура НачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ОсновныеНачисления"), ЭтаФорма, Элемент.ТипЗначения.Типы()[0], мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // НачисленияВидРасчетаОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода даты начала
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Начисления.ТекущиеДанные;
	
	ТекущиеДанные.ДатаНачалаСобытия = Элемент.Значение;
	
	СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ТекущиеДанные.ВидРасчета);
	Если мСписокПочасовыхОтклонений.НайтиПоЗначению(СведенияОВидеРасчета.ВидВремени) <> Неопределено Тогда
		ТекущиеДанные.ДатаОкончания = Элемент.Значение;
	КонецЕсли;
	
	ДатаНачала = ТекущиеДанные.ДатаНачала;
	Если ДатаНачала = '0001.01.01' Тогда
		ДатаНачала = ПериодНачисленияДатаНачала;
	КонецЕсли;
	
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Сотрудник, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), ТекущиеДанные.ПодразделениеОрганизации, мГоловнаяОрганизация, "Начисления", ДатаНачала, РучноеИзменениеПоказателей[ТекущиеДанные]);

КонецПроцедуры // НачисленияДатаНачалаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Результат"
//
Процедура НачисленияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультат Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мСтарыйРезультат = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // НачисленияРезультатПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ОтработаноДней"
//
Процедура НачисленияОтработаноДнейПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоОтработаноДней = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры // НачисленияОтработаноДнейПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ОтработаноЧасов"
//
Процедура НачисленияОтработаноЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоОтработаноЧасов = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры // НачисленияОтработаноЧасовПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "НормаДней"
//
Процедура НачисленияНормаДнейПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоНормаДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоНормаДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // НачисленияНормаДнейПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "НормаЧасов"
//
Процедура НачисленияНормаЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоНормаЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоНормаЧасов = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры // НачисленияНормаЧасовПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "НормаДнейПоПятидневке"
//
Процедура НачисленияНормаДнейПоПятидневкеПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоНормаДнейПоПятидневке Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоНормаДнейПоПятидневке = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры // НачисленияНормаДнейПоПятидневкеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "ОтработаноДнейПоПятидневке"
//
Процедура НачисленияОтработаноДнейПоПятидневкеПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноДнейПоПятидневке Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоОтработаноДнейПоПятидневке = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры // НачисленияОтработаноДнейПоПятидневкеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "НормаЧасовПоПятидневке"
//
Процедура НачисленияНормаЧасовПоПятидневкеПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоНормаЧасовПоПятидневке Тогда
		ЭлементыФормы.Начисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоНормаЧасовПоПятидневке = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // НачисленияНормаДнейПоПятидневкеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОтработаноЧасовПоПятидневке"
//
Процедура НачисленияОтработаноЧасовПоПятидневкеПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноЧасовПоПятидневке Тогда
		ЭлементыФормы.Начисления.ТекущиеДанные.Авторасчет = Ложь;
		мБылоОтработаноЧасовПоПятидневке = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // НачисленияОтработаноДнейПоПятидневкеПриИзменении()

Процедура НачисленияОплаченоДнейЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОплаченоДнейЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоОплаченоДнейЧасов = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры

Процедура НачисленияСторнируемыйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	Если Организация.Пустая() Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не выбрана организация!"), 10);
		Возврат;
	КонецЕсли;
		
	РаботаСДиалогамиЗК.ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, ЭтаФорма, Ссылка, Организация, СтандартнаяОбработка, Истина);
		
КонецПроцедуры

// Процедура - обработчик события "Показатель1ПриИзменении"
//
Процедура НачисленияПоказатель1ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 1 ,"Начисления");
	
КонецПроцедуры //НачисленияПоказатель1ПриИзменении

// Процедура - обработчик события "Показатель2ПриИзменении"
//
Процедура НачисленияПоказатель2ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 2 ,"Начисления");
	
КонецПроцедуры //НачисленияПоказатель2ПриИзменении

// Процедура - обработчик события "Показатель3ПриИзменении"
//
Процедура НачисленияПоказатель3ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 3 ,"Начисления");
	
КонецПроцедуры //НачисленияПоказатель3ПриИзменении

// Процедура - обработчик события "Показатель4ПриИзменении"
//
Процедура НачисленияПоказатель4ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 4 ,"Начисления");
	
КонецПроцедуры //НачисленияПоказатель4ПриИзменении

// Процедура - обработчик события "Показатель5ПриИзменении"
//
Процедура НачисленияПоказатель5ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 5 ,"Начисления");

КонецПроцедуры //НачисленияПоказатель5ПриИзменении

// Процедура - обработчик события "Показатель6ПриИзменении"
//
Процедура НачисленияПоказатель6ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 6 ,"Начисления");
	
КонецПроцедуры //НачисленияПоказатель6ПриИзменении


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ДополнительныеНачисления

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//	Элемент - табличное поле, которое отображает т.ч.
//	
Процедура ДополнительныеНачисленияПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияДополнительныеНачисленияПриАктивизацииСтроки", 0.1, Истина);	 	
	
КонецПроцедуры // ДополнительныеНачисленияПриАктивизацииСтроки()

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля ДополнительныеНачисления
//
Процедура ОбработчикОжиданияДополнительныеНачисленияПриАктивизацииСтроки()
	
	ТекущаяСтрока = ЭлементыФормы.ДополнительныеНачисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультатТЧДополнительныеНачисления			= ТекущаяСтрока.Результат;
		мБылоОплаченоДнейЧасовТЧДополнительныеНачисления	= ТекущаяСтрока.ОплаченоДнейЧасов;
		Если ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные.КодВычета = мКодВычетаПоМатпомощиПриРожденииРебенка Тогда
			ТочностьСуммыВычета = 0;
			МаксимальноеЗначение = 99;
		Иначе
			ТочностьСуммыВычета = 2;
			МаксимальноеЗначение = 0;
		КонецЕсли;
		ЭлементыФормы.ДополнительныеНачисления.Колонки.СуммаВычета.ЭлементУправления.МаксимальноеЗначение = МаксимальноеЗначение;
		ЭлементыФормы.ДополнительныеНачисления.Колонки.СуммаВычета.ЭлементУправления.Формат = "ЧДЦ=" + ТочностьСуммыВычета;
		
	КонецЕсли;	
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ДополнительныеНачисления, мДопСведенияОВидахРасчетаНачислений, , Истина);
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДополнительныеНачисления Тогда
		
		ОбновитьТекущегоСотрудника();
		МожноРедактироватьСтроку = (ТекущаяСтрока = Неопределено Или Не ТекущаяСтрока.Сторно Или ТекущаяСтрока.СторнируемыйДокумент <> ПерерассчитываемыйДокумент) И мСотрудникиИсправление[мТекущийСотрудник] = Неопределено;
		ЭлементыФормы.КоманднаяПанельДополнительныхНачислений.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
		ЭлементыФормы.КоманднаяПанельДополнительныхНачислений.Кнопки.Действие1.Доступность = ЭлементыФормы.ДополнительныеНачисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
		ЭлементыФормы.КонтекстноеМенюДополнительныеНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
		ЭлементыФормы.КонтекстноеМенюДополнительныеНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.ДополнительныеНачисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
		
	КонецЕсли;
	
КонецПроцедуры // ОбработчикОжиданияДополнительныеНачисленияПриАктивизацииСтроки

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура ДополнительныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
	КонецЕсли;

КонецПроцедуры // ДополнительныеНачисленияПриНачалеРедактирования()

// Процедура - обработчик события "ПриПолученииДанных" табличного поля "ДополнительныеНачисления"
//
Процедура ДополнительныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ДополнительныеНачисления, ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мДопСведенияОВидахРасчетаНачислений, ОформленияСтрок, , "ПриРасчете");
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;

		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		КонецЕсли;
		
		Если мСотрудникиИсправление[ДанныеСтроки.Сотрудник] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			ОформлениеСтроки.Ячейки.Авторасчет.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			ОформлениеСтроки.Ячейки.Авторасчет.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.СторнируемыйДокумент.ТолькоПросмотр = Не ДанныеСтроки.Сторно;

		// проставим отметки незаполненного
		СпособРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ДанныеСтроки.ВидРасчета).СпособРасчета;
		
		ТребуетсяБазовыйПериод = СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом 
								Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.СевернаяНадбавка
								Или СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ОтСтажаПроцентом;
		
		Если Элемент.Колонки.ДатаНачала.Видимость Тогда
			ОформлениеСтроки.Ячейки.ДатаНачала.ОтметкаНезаполненного = ТребуетсяБазовыйПериод и НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаНачала)
		КонецЕсли;
		Если Элемент.Колонки.ДатаОкончания.Видимость Тогда
			ОформлениеСтроки.Ячейки.ДатаОкончания.ОтметкаНезаполненного = ТребуетсяБазовыйПериод и НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончания)
		КонецЕсли;
		
		ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
		
		ВыводСтрокПоказателей(ДанныеСтрокиВидРасчета,ОформлениеСтроки, ДанныеСтроки);
		
		// вычет к доходу не всегда сумма. для матпомощи - это количество детей
		ТочностьСуммыВычета = ?(ДанныеСтроки.КодВычета = мКодВычетаПоМатпомощиПриРожденииРебенка,0,2);
		ОформлениеСтроки.Ячейки.СуммаВычета.УстановитьТекст(Формат(ДанныеСтроки.СуммаВычета,"ЧДЦ=" + ТочностьСуммыВычета));
		
	КонецЦикла;
	
КонецПроцедуры // ДополнительныеНачисленияПриПолученииДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ДополнительныеНачисления

// Процедура - обработчик события "ПриИзменении" поля ввода работника -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура ДополнительныеНачисленияСотрудникПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные;
	
	ДатаСобытия = ?(ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания), ТекущиеДанные.ДатаОкончания, Дата);
	ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(Элемент.Значение, ДатаСобытия, ЭлементыФормы.ДополнительныеНачисления);
	
	ТекущиеДанные.ФизЛицо = Неопределено;
	
	ДатаНачала = ТекущиеДанные.ДатаНачала;
	Если ДатаНачала = '0001.01.01' Тогда
		ДатаНачала = ПериодНачисленияДатаНачала;
	КонецЕсли;
	
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Сотрудник, Элемент.Значение, Число(ТекущиеДанные.НомерСтроки), ТекущиеДанные.ПодразделениеОрганизации, мГоловнаяОрганизация, "ДополнительныеНачисления", ДатаНачала);
	
	РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);
	
КонецПроцедуры // ДополнительныеНачисленияФизлицоПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода работника
Процедура ДополнительныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 5, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ДополнительныеНачисленияФизлицоНачалоВыбора()

Процедура ДополнительныеНачисленияСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ДатаСобытия = ?(ЗначениеЗаполнено(ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные.ДатаОкончания), ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные.ДатаОкончания, Дата);
	ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(ВыбранноеЗначение, ДатаСобытия, ЭлементыФормы.ДополнительныеНачисления);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Сотрудник
Процедура ДополнительныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода Сотрудник
Процедура ДополнительныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода вида начисления 
//
Процедура ДополнительныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные;

	ДатаНачала = ТекущиеДанные.ДатаНачала;
	Если ДатаНачала = '0001.01.01' Тогда
		ДатаНачала = ПериодНачисленияДатаНачала;
	КонецЕсли;	
	
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.Сотрудник, Элемент.Значение, Число(ТекущиеДанные.НомерСтроки), ТекущиеДанные.ПодразделениеОрганизации, мГоловнаяОрганизация, "ДополнительныеНачисления", ДатаНачала);
	
	РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);
	
	СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, Элемент.Значение);
	КодВычета = мСоответствиеДоходовИВычетов[СведенияОВидеРасчета.КодДоходаНДФЛ];
	Если КодВычета = Неопределено Тогда
		ТекущиеДанные.КодВычета = "";
	Иначе
		ТекущиеДанные.КодВычета = КодВычета;
	КонецЕсли;
	ПриИзмененииКодаВычета(КодВычета);
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ДополнительныеНачисления, мДопСведенияОВидахРасчетаНачислений, , Истина);
	
КонецПроцедуры // ДополнительныеНачисленияВидРасчетаПриИзменении()

Процедура ДополнительныеНачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаНачислениеЗарплатыРаботникамОрганизаций");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.ВидСравнения		= ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Значение			= ПроведениеРасчетов.ПолучитьСписокКодовДоходаДополнительныхНачислений();
	ФормаВыбораВидаРасчета.Отбор.КодДоходаНДФЛ.Использование	= Истина;

	ФормаВыбораВидаРасчета.Открыть();

КонецПроцедуры // ДополнительныеНачисленияВидРасчетаНачалоВыбора()

Процедура ДополнительныеНачисленияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ДополнительныеНачисления"), Элемент.ТипЗначения.Типы()[0]);
	
КонецПроцедуры // ДополнительныеНачисленияВидРасчетаАвтоПодборТекста()

Процедура ДополнительныеНачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ДополнительныеНачисления"), ЭтаФорма, Элемент.ТипЗначения.Типы()[0], мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // ДополнительныеНачисленияВидРасчетаОкончаниеВводаТекста()

Процедура ДополнительныеНачисленияКодВычетаПриИзменении(Элемент)
	ПриИзмененииКодаВычета(Элемент.Значение)
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода кода вычета по НДФЛ к доходу
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ДополнительныеНачисленияКодВычетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = ВыбратьИзСписка(мСписокКодовВычетов,Элемент,мСписокКодовВычетов.НайтиПоЗначению(Элемент.Значение));
	
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
		ПриИзмененииКодаВычета(ЭлементСписка.Значение);
	КонецЕсли;
	
КонецПроцедуры // ДополнительныеНачисленияКодВычетаНачалоВыбора()

Процедура ДополнительныеНачисленияКодВычетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("КодВычета"), Элемент.ТипЗначения.Типы()[0]);
	
КонецПроцедуры // ДополнительныеНачисленияКодВычетаАвтоПодборТекста()

Процедура ДополнительныеНачисленияКодВычетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("КодВычета"), ЭтаФорма, Элемент.ТипЗначения.Типы()[0], мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // ДополнительныеНачисленияКодВычетаОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода "Результат"
//
Процедура ДополнительныеНачисленияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультатТЧДополнительныеНачисления Тогда
		ЭлементыФормы.ДополнительныеНачисления.ТекущаяСтрока.Авторасчет = Ложь;
		мСтарыйРезультатТЧДополнительныеНачисления = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // ДополнительныеНачисленияРезультатПриИзменении()

Процедура ДополнительныеНачисленияОплаченоДнейЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОплаченоДнейЧасовТЧДополнительныеНачисления Тогда
		ЭлементыФормы.ДополнительныеНачисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоОплаченоДнейЧасовТЧДополнительныеНачисления = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Показатель1ПриИзменении"
//
Процедура ДополнительныеНачисленияПоказатель1ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 1 ,"ДополнительныеНачисления");
	
КонецПроцедуры  //ДополнительныеНачисленияПоказатель1ПриИзменении

// Процедура - обработчик события "Показатель2ПриИзменении"
//
Процедура ДополнительныеНачисленияПоказатель2ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 2,"ДополнительныеНачисления");
	
КонецПроцедуры  //ДополнительныеНачисленияПоказатель2ПриИзменении

// Процедура - обработчик события "Показатель2ПриИзменении"
//
Процедура ДополнительныеНачисленияПоказатель3ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 3 ,"ДополнительныеНачисления");

КонецПроцедуры //ДополнительныеНачисленияПоказатель3ПриИзменении

// Процедура - обработчик события "Показатель4ПриИзменении"
//
Процедура ДополнительныеНачисленияПоказатель4ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 4 ,"ДополнительныеНачисления");

КонецПроцедуры //ДополнительныеНачисленияПоказатель4ПриИзменении

// Процедура - обработчик события "Показатель5ПриИзменении"
//
Процедура ДополнительныеНачисленияПоказатель5ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 5 ,"ДополнительныеНачисления");
	
КонецПроцедуры //ДополнительныеНачисленияПоказатель5ПриИзменении

// Процедура - обработчик события "Показатель6ПриИзменении"
//
Процедура ДополнительныеНачисленияПоказатель6ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 6 ,"ДополнительныеНачисления");
	
КонецПроцедуры  //ДополнительныеНачисленияПоказатель6ПриИзменении

Процедура ДополнительныеНачисленияСторнируемыйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	Если Организация.Пустая() Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не выбрана организация!"), 10);
		Возврат;
	КонецЕсли;
		
	РаботаСДиалогамиЗК.ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, ЭтаФорма, Ссылка, Организация, СтандартнаяОбработка, Ложь, Документы.НачислениеЗарплатыРаботникамОрганизаций);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ДоговорыНаВыполнениеРабот

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//	Элемент - табличное поле, которое отображает т.ч.
//	
Процедура ДоговорыНаВыполнениеРаботПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияДоговорыНаВыполнениеРаботПриАктивизацииСтроки", 0.1, Истина);	 
    
КонецПроцедуры // ДоговорыНаВыполнениеРаботПриАктивизацииСтроки()

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля ДоговорыНаВыполнениеРабот
//
Процедура ОбработчикОжиданияДоговорыНаВыполнениеРаботПриАктивизацииСтроки()
    
    Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаДоговорыНаВыполнениеРабот Тогда
        
		ОбновитьТекущегоСотрудника();
		ДанныеСтроки = ЭлементыФормы.ДоговорыНаВыполнениеРабот.ТекущаяСтрока;
		МожноРедактироватьСтроку = (ДанныеСтроки = Неопределено Или Не ДанныеСтроки.Сторно Или ДанныеСтроки.СторнируемыйДокумент <> ПерерассчитываемыйДокумент) И мСотрудникиИсправление[мТекущийСотрудник] = Неопределено;
		ЭлементыФормы.КоманднаяПанельДоговорыНаВыполнениеРабот.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
		ЭлементыФормы.КоманднаяПанельДоговорыНаВыполнениеРабот.Кнопки.Действие1.Доступность = ЭлементыФормы.ДоговорыНаВыполнениеРабот.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
		ЭлементыФормы.КонтекстноеМенюДоговорыНаВыполнениеРабот.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
		ЭлементыФормы.КонтекстноеМенюДоговорыНаВыполнениеРабот.Кнопки.Действие1.Доступность = ЭлементыФормы.ДоговорыНаВыполнениеРабот.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
        
    КонецЕсли;   

КонецПроцедуры // ОбработчикОжиданияДоговорыНаВыполнениеРаботПриАктивизацииСтроки

// Процедура - обработчик события "ПриПолученииДанных" табличного поля "ДоговорыНаВыполнениеРабот"
//
Процедура ДоговорыНаВыполнениеРаботПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ДоговорыНаВыполнениеРабот, ОформленияСтрок);
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		Иначе
			Ячейки.СторнируемыйДокумент.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если мСотрудникиИсправление[ДанныеСтроки.Сотрудник] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры // ДоговорыНаВыполнениеРаботПриПолученииДанных()

// Процедура - обработчик события "ПриОкончанииРедактирования" табличного поля "ДоговорыНаВыполнениеРабот"
Процедура ДоговорыНаВыполнениеРаботПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		
		ОбновитьТекущегоСотрудника(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ДоговорыНаВыполнениеРабот

Процедура ДоговорыНаВыполнениеРаботСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ДоговорыНаВыполнениеРабот.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договорника
Процедура ДоговорыНаВыполнениеРаботСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 8, СтандартнаяОбработка, Элемент.Значение);

КонецПроцедуры // ДоговорыНаВыполнениеРаботФизлицоНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Сотрудник
Процедура ДоговорыНаВыполнениеРаботСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 8, Текст, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода Сотрудник
Процедура ДоговорыНаВыполнениеРаботСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 8, Текст, Организация);
	
КонецПроцедуры

Процедура ДоговорыНаВыполнениеРаботДокументОснованиеПриИзменении(Элемент)
	
	ЗаполнитьЗначенияСвойств(ЭлементыФормы.ДоговорыНаВыполнениеРабот.ТекущиеДанные,Элемент.Значение,"ВидРасчета,КодВычета,ПодразделениеОрганизации");
	
КонецПроцедуры

Процедура ДоговорыНаВыполнениеРаботДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка  = Ложь;
	
	ФормаВыбора = Документы.ДоговорНаВыполнениеРаботСФизЛицом.ПолучитьФормуВыбора(, Элемент);
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;	
	
	ФормаВыбора.Отбор.Организация.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.Организация.Значение		= Организация;
	ФормаВыбора.Отбор.Организация.Использование	= Истина;
	
	ФормаВыбора.Отбор.Сотрудник.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбора.Отбор.Сотрудник.Значение		= ЭлементыФормы.ДоговорыНаВыполнениеРабот.ТекущиеДанные.Сотрудник;
	ФормаВыбора.Отбор.Сотрудник.Использование	= Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода кода вычета по НДФЛ к доходу
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ДоговорыНаВыполнениеРаботКодВычетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = ВыбратьИзСписка(мСписокКодовВычетов,Элемент,мСписокКодовВычетовДоговораГПХ.НайтиПоЗначению(Элемент.Значение));
	
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
	
КонецПроцедуры // ДоговорыНаВыполнениеРаботКодВычетаНачалоВыбора()

Процедура ДоговорыНаВыполнениеРаботКодВычетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("КодВычетаДоговораГПХ"), Элемент.ТипЗначения.Типы()[0]);
	
КонецПроцедуры // ДоговорыНаВыполнениеРаботКодВычетаАвтоПодборТекста()

Процедура ДоговорыНаВыполнениеРаботКодВычетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("КодВычетаДоговораГПХ"), ЭтаФорма, Элемент.ТипЗначения.Типы()[0], мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // ДоговорыНаВыполнениеРаботКодВычетаОкончаниеВводаТекста()

Процедура ДоговорыНаВыполнениеРаботВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаНачислениеЗарплатыРаботникамОрганизаций");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения		= ВидСравнения.Равно;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение			= Перечисления.СпособыРасчетаОплатыТруда.ПоДоговоруФиксированнойСуммой;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование	= Истина;

	ФормаВыбораВидаРасчета.Открыть();

КонецПроцедуры // ДоговорыНаВыполнениеРаботВидРасчетаНачалоВыбора()

Процедура ДоговорыНаВыполнениеРаботВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ДоговорыНаВыполнениеРабот"), Элемент.ТипЗначения.Типы()[0]);
	
КонецПроцедуры // ДоговорыНаВыполнениеРаботВидРасчетаАвтоПодборТекста()

Процедура ДоговорыНаВыполнениеРаботВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ДоговорыНаВыполнениеРабот"), ЭтаФорма, Элемент.ТипЗначения.Типы()[0], мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // ДоговорыНаВыполнениеРаботВидРасчетаОкончаниеВводаТекста()

Процедура ДоговорыНаВыполнениеРаботСторнируемыйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	Если Организация.Пустая() Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не выбрана организация!"), 10);
		Возврат;
	КонецЕсли;
		
	РаботаСДиалогамиЗК.ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, ЭтаФорма, Ссылка, Организация, СтандартнаяОбработка, Ложь, Документы.НачислениеЗарплатыРаботникамОрганизаций);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Удержания

Процедура УдержанияПриАктивизацииСтроки(Элемент)
    ПодключитьОбработчикОжидания("ОбработчикОжиданияУдержанияПриАктивизацииСтроки", 0.1, Истина);	 
КонецПроцедуры // УдержанияПриАктивизацииСтроки()

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля Удержания
//
Процедура ОбработчикОжиданияУдержанияПриАктивизацииСтроки()
    
    ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
    Если ТекущаяСтрока <> Неопределено Тогда
        мСтарыйРезультатТЧУдержания = ТекущаяСтрока.Результат;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Удержания, мДопСведенияОВидахРасчетаНачислений);

    Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаУдержания Тогда
        
		ОбновитьТекущегоСотрудника();
		МожноРедактироватьСтроку = (ТекущаяСтрока = Неопределено Или Не ТекущаяСтрока.Сторно) И мФизлицаИсправление[мТекущееФизлицо] = Неопределено;
		ЭлементыФормы.КоманднаяПанельУдержаний.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
		ЭлементыФормы.КоманднаяПанельУдержаний.Кнопки.Действие1.Доступность = ЭлементыФормы.Удержания.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
		ЭлементыФормы.КонтекстноеМенюУдержания.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
		ЭлементыФормы.КонтекстноеМенюУдержания.Кнопки.Действие1.Доступность = ЭлементыФормы.Удержания.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
        
    КонецЕсли;
    
КонецПроцедуры // ОбработчикОжиданияУдержанияПриАктивизацииСтроки

Процедура УдержанияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		Отказ = Элемент.ТекущиеДанные.Сторно Или мФизлицаИсправление[мТекущееФизлицо] <> Неопределено;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Элемент.ТекущиеДанные.Сторно Или мФизлицаИсправление[мТекущееФизлицо] <> Неопределено;
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
	КонецЕсли;

КонецПроцедуры // УдержанияПриНачалеРедактирования()

Процедура УдержанияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мДопСведенияОВидахРасчетаНачислений, ОформленияСтрок, , "ПриРасчете");
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
	
	   	ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
		
	   	ДанныеСтрокиДокументОснование = ДанныеСтроки.ДокументОснование;
		
		ЭтоВРИздержекПоИЛ = (ДанныеСтрокиВидРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ПочтовыйСборПоИЛ);
		
		Если НЕ ЭтоВРИздержекПоИЛ И ЗначениеЗаполнено(ДанныеСтрокиВидРасчета) Тогда
		
			ЭтоВРИздержекПоИЛ = (ДанныеСтрокиВидРасчета = ОбщегоНазначенияЗК.ОсобыйЭлемент(ПланыВидовРасчета.УдержанияОрганизаций, "БанковскиеИздержкиПоИЛ"));
		
		КонецЕсли;
		
		Если ЭтоВРИздержекПоИЛ И НЕ ЗначениеЗаполнено(ДанныеСтрокиДокументОснование) Тогда
		
			ОформлениеСтроки.Ячейки.ДокументОснование.Видимость = Ложь;
		
		Иначе
		
			ОформлениеСтроки.Ячейки.Получатель.Видимость = Ложь;
		
		КонецЕсли; 
		
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		КонецЕсли;
		Если мФизлицаИсправление[ДанныеСтроки.ФизЛицо] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			ОформлениеСтроки.Ячейки.Авторасчет.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			ОформлениеСтроки.Ячейки.Авторасчет.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		// проставим отметки незаполненного
		СпособРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ДанныеСтроки.ВидРасчета).СпособРасчета;
		ТребуетсяБазовыйПериод = СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом; 
		
		Если Элемент.Колонки.ДатаНачала.Видимость Тогда
			ОформлениеСтроки.Ячейки.ДатаНачала.ОтметкаНезаполненного = ТребуетсяБазовыйПериод и НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаНачала)
		КонецЕсли;
		Если Элемент.Колонки.ДатаОкончания.Видимость Тогда
			ОформлениеСтроки.Ячейки.ДатаОкончания.ОтметкаНезаполненного = ТребуетсяБазовыйПериод и НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаОкончания)
		КонецЕсли;
		
		ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
		
		ВыводСтрокПоказателей(ДанныеСтрокиВидРасчета,ОформлениеСтроки, ДанныеСтроки);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Удержания

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
Процедура УдержанияФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение,, Истина);
	
КонецПроцедуры // УдержанияФизЛицоНачалоВыбора()

Процедура УдержанияФизЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, мГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода физлица
Процедура УдержанияФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Элемент.Значение = ВыбранноеЗначение;
	
	ТекущиеДанные = ЭлементыФормы.Удержания.ТекущиеДанные;
	ДатаНачала = ТекущиеДанные.ДатаНачала;
	Если ДатаНачала = '0001.01.01' Тогда
		ДатаНачала = ПериодНачисленияДатаНачала;
	КонецЕсли;
	
	ЗаполнитьПоказателиСтроки(Элемент.Значение, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), , мГоловнаяОрганизация, "Удержания", ДатаНачала);
	
	РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
Процедура УдержанияФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
Процедура УдержанияФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Элемент.Значение, Организация, Истина);
	
КонецПроцедуры

Процедура УдержанияВидРасчетаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Удержания.ТекущиеДанные;
	ДатаНачала = ТекущиеДанные.ДатаНачала;
	Если ДатаНачала = '0001.01.01' Тогда
		ДатаНачала = ПериодНачисленияДатаНачала;
	КонецЕсли;
	
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.ФизЛицо, Элемент.Значение, Число(ТекущиеДанные.НомерСтроки), , мГоловнаяОрганизация, "Удержания", ДатаНачала);
	
	РучноеИзменениеПоказателей.Удалить(ТекущиеДанные);
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Удержания, мДопСведенияОВидахРасчетаНачислений);

КонецПроцедуры

Процедура УдержанияДокументОснованиеПриИзменении(Элемент)
	ТекущиеДанные = ЭлементыФормы.Удержания.ТекущиеДанные;
	СведенияОВидеРасчета = ПроведениеРасчетов.ПолучитьСведенияОВидеРасчета(мСведенияОВидахРасчета, ТекущиеДанные.ВидРасчета);
	Если СведенияОВидеРасчета.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПочтовыйСбор Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ДокументОснование) Тогда
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ВЫБОР
			|		КОГДА ИсполнительныйЛист.СпособПеречисленияПоИсполнительномуЛисту = ЗНАЧЕНИЕ(Перечисление.СпособыПеречисленийПоИсполнительномуЛисту.ПочтовыйПеревод)
			|				И ИсполнительныйЛист.ПочтовыйСборРассчитыватьПроцентом
			|			ТОГДА ИсполнительныйЛист.ПроцентПочтовогоСбора
			|		КОГДА ИсполнительныйЛист.СпособПеречисленияПоИсполнительномуЛисту = ЗНАЧЕНИЕ(Перечисление.СпособыПеречисленийПоИсполнительномуЛисту.ПочтовыйПеревод)
			|				И (НЕ ИсполнительныйЛист.ПочтовыйСборРассчитыватьПроцентом)
			|			ТОГДА ИсполнительныйЛист.Тариф
			|		КОГДА ИсполнительныйЛист.СпособПеречисленияПоИсполнительномуЛисту = ЗНАЧЕНИЕ(Перечисление.СпособыПеречисленийПоИсполнительномуЛисту.БанковскийПеревод)
			|			ТОГДА ИсполнительныйЛист.ТарифБанкаНаДенежныеПереводы
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК ПорядокИсчисленияИздержек
			|ИЗ
			|	Документ.ИсполнительныйЛист КАК ИсполнительныйЛист
			|ГДЕ
			|	ИсполнительныйЛист.Ссылка = &Ссылка";
			Запрос.УстановитьПараметр("Ссылка", ТекущиеДанные.ДокументОснование);
			Выборка = Запрос.Выполнить().Выбрать();
			Выборка.Следующий();
			ТекущиеДанные.ПорядокИсчисленияИздержек = Выборка.ПорядокИсчисленияИздержек;
		Иначе
			ТекущиеДанные.ПорядокИсчисленияИздержек = Справочники.ТарифыПочтовогоСбора.ПустаяСсылка();
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Результат"
//
Процедура УдержанияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультатТЧУдержания Тогда
		ЭлементыФормы.Удержания.ТекущаяСтрока.Авторасчет = Ложь;
		мСтарыйРезультатТЧУдержания = Элемент.Значение;
		
	КонецЕсли;
	
КонецПроцедуры // УдержанияРезультатПриИзменении()

// Процедура - обработчик события "Показатель1ПриИзменении"
//
Процедура УдержанияПоказатель1ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 1 ,"Удержания");
	
КонецПроцедуры //УдержанияПоказатель1ПриИзменении

// Процедура - обработчик события "Показатель2ПриИзменении"
//
Процедура УдержанияПоказатель2ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 2 ,"Удержания");
	
КонецПроцедуры //УдержанияПоказатель2ПриИзменении

// Процедура - обработчик события "Показатель3ПриИзменении"
//
Процедура УдержанияПоказатель3ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 3 ,"Удержания");
	
КонецПроцедуры //УдержанияПоказатель3ПриИзменении

// Процедура - обработчик события "Показатель4ПриИзменении"
//
Процедура УдержанияПоказатель4ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 4 ,"Удержания");
	
КонецПроцедуры //УдержанияПоказатель4ПриИзменении

// Процедура - обработчик события "Показатель5ПриИзменении"
//
Процедура УдержанияПоказатель5ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 5 ,"Удержания");
	
КонецПроцедуры //УдержанияПоказатель5ПриИзменении

// Процедура - обработчик события "Показатель6ПриИзменении"
//
Процедура УдержанияПоказатель6ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 6 ,"Удержания");
	
КонецПроцедуры //УдержанияПоказатель6ПриИзменении

Процедура УдержанияДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Удержания.ТекущиеДанные;
	ДатаНачала = ТекущиеДанные.ДатаНачала;
	Если ДатаНачала = '0001.01.01' Тогда
		ДатаНачала = ПериодНачисленияДатаНачала;
	КонецЕсли;
	
	ТекущиеДанные.ДатаНачалаСобытия = ДатаНачала;
	
	ЗаполнитьПоказателиСтроки(ТекущиеДанные.ФизЛицо, ТекущиеДанные.ВидРасчета, Число(ТекущиеДанные.НомерСтроки), , мГоловнаяОрганизация, "Удержания", ДатаНачала, РучноеИзменениеПоказателей[ТекущиеДанные]);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ НДФЛ

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//	Элемент - табличное поле, которое отображает т.ч.
//	
Процедура НДФЛПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияНДФЛПриАктивизацииСтроки", 0.1, Истина);	 
    
КонецПроцедуры // НДФЛПриАктивизацииСтроки()

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля НДФЛ
//
Процедура ОбработчикОжиданияНДФЛПриАктивизацииСтроки()
    
    Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаНДФЛ Тогда
        
		ОбновитьТекущегоСотрудника();
 		ЭлементыФормы.КоманднаяПанельНДФЛ.Кнопки.Действие2.Доступность = мФизлицаИсправление[мТекущееФизлицо] = Неопределено;
        
    КонецЕсли;   

КонецПроцедуры // ОбработчикОжиданияНДФЛПриАктивизацииСтроки

Процедура НДФЛПриПолученииДанных(Элемент, ОформленияСтрок)
		
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		Если мФизлицаИсправление[ОформлениеСтроки.ДанныеСтроки.ФизЛицо] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
		КонецЕсли;
		ОформлениеСтроки.Ячейки.ЗаголовокВычетовНаДетей.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ЗаголовокВычетовНаВторыхДетей.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ЗаголовокВычетовНаТретьихДетей.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ЗаголовокВычетовНаДетейИнвалидов.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ЗаголовокИмущественныхВычетов.Видимость = Ложь;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ НДФЛ

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
Процедура НДФЛФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 6, СтандартнаяОбработка, Элемент.Значение,, Истина);
	
КонецПроцедуры // НДФЛФизЛицоНачалоВыбора()

Процедура НДФЛФизЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, мГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
Процедура НДФЛФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
Процедура НДФЛФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Элемент.Значение, Организация, Истина);
	
КонецПроцедуры

Процедура НДФЛМесяцНалоговогоПериодаПриИзменении(Элемент)
	Элемент.Значение = НачалоМесяца(Элемент.Значение) 
КонецПроцедуры

Процедура НДФЛПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	 Если НЕ ОтменаРедактирования Тогда
		
		ОбновитьТекущегоСотрудника(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура НДФЛФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПогашениеЗаймов

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//	Элемент - табличное поле, которое отображает т.ч.
//	
Процедура ПогашениеЗаймовПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияПогашениеЗаймовПриАктивизацииСтроки", 0.1, Истина);	 	
    
КонецПроцедуры // ПогашениеЗаймовПриАктивизацииСтроки()

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля ПогашениеЗаймов
//
Процедура ОбработчикОжиданияПогашениеЗаймовПриАктивизацииСтроки()
    
    Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.СтраницаЗаймы Тогда
        
		ОбновитьТекущегоСотрудника();
 		ЭлементыФормы.КоманднаяПанельПогашениеЗаймов.Кнопки.Действие2.Доступность = мФизлицаИсправление[мТекущееФизлицо] = Неопределено;
       
    КонецЕсли;  

КонецПроцедуры // ОбработчикОжиданияПогашениеЗаймовПриАктивизацииСтроки

// Процедура - обработчик события "ПриПолученииДанных" табличного поля "ПогашениеЗаймов"
//
Процедура ПогашениеЗаймовПриПолученииДанных(Элемент, ОформленияСтрок)

	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		КонецЕсли;
		
		Если Элемент.Колонки.НалогНаМатериальнуюВыгоду.Видимость Тогда
			Ячейки.НалогНаМатериальнуюВыгоду.ТолькоПросмотр = ДанныеСтроки.СтавкаНалогообложенияМатвыгоды = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13
		КонецЕсли;
		
		Если мФизлицаИсправление[ДанныеСтроки.Физлицо] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
		КонецЕсли;
		
		ЯчейкаСКартинкой = Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(Не ДанныеСтроки.Сторно);	
		
		НачислениеЗарплатыРаботникамОрганизацийПереопределяемый.УстановитьТекстДополнительно(Ячейки);
		
	КонецЦикла;	
	
КонецПроцедуры

Процедура ПогашениеЗаймовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		
		ОбновитьТекущегоСотрудника(Истина);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПогашениеЗаймовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником") Тогда
		
		ТекущиеДанные = Элемент.ТекущиеДанные;
		ТекущиеДанные.ДоговорЗайма = ВыбранноеЗначение;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ
		|	СведенияОЗаймах.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
		|	СведенияОЗаймах.НачислятьМатериальнуюВыгоду,
		|	ЕСТЬNULL(СведенияОЗаймах.ДоговорЗайма.ФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизЛицо
		|ИЗ
		|	РегистрСведений.СведенияОЗаймах КАК СведенияОЗаймах
		|ГДЕ
		|	СведенияОЗаймах.ДоговорЗайма = &ДоговорЗайма
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОЗаймах.СтавкаНалогообложенияРезидента,
		|	СведенияОЗаймах.НачислятьМатериальнуюВыгоду,
		|	ЕСТЬNULL(СведенияОЗаймах.ДоговорЗайма.ФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))";
		
		Запрос.УстановитьПараметр("ДоговорЗайма", ВыбранноеЗначение);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			
			СтруктураДанныхДоговораЗайма = Новый Структура("СтавкаНалогообложенияРезидента,НачислятьМатериальнуюВыгоду,ФизЛицо");
			ЗаполнитьЗначенияСвойств(СтруктураДанныхДоговораЗайма, Выборка);
			
			Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ФизЛицо) Тогда
				ЗаполнитьЗначенияСвойств(ТекущиеДанные,СтруктураДанныхДоговораЗайма,"Физлицо");
			КонецЕсли;
			ТекущиеДанные.СтавкаНалогообложенияМатвыгоды = ?(СтруктураДанныхДоговораЗайма.НачислятьМатериальнуюВыгоду, СтруктураДанныхДоговораЗайма.СтавкаНалогообложенияРезидента,"");
			Если ТекущиеДанные.СтавкаНалогообложенияМатвыгоды <> Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35 Тогда
				ТекущиеДанные.НалогНаМатериальнуюВыгоду = 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	НачислениеЗарплатыРаботникамОрганизацийПереопределяемый.ОбработкаВыбораДополнительно(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры // ПогашениеЗаймовОбработкаВыбора

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ПогашениеЗаймов

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
Процедура ПогашениеЗаймовФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0, СтандартнаяОбработка, Элемент.Значение,, Истина);
	
КонецПроцедуры // ПогашениеЗаймовФизЛицоНачалоВыбора()

Процедура ПогашениеЗаймовФизЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, мГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
Процедура ПогашениеЗаймовФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
Процедура ПогашениеЗаймовФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "РаботникиИДоговорники", Текст, Элемент.Значение, Организация, Истина);
	
КонецПроцедуры

Процедура ПогашениеЗаймовДоговорЗаймаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	
	Если ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником") Тогда
		ФормаВыбора = Документы.ДоговорЗаймаСРаботником.ПолучитьФормуВыбора(, ЭлементыФормы.ПогашениеЗаймов);
		
		ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
		
		ФормаВыбора.Отбор.ОтражатьВБухгалтерскомУчете.ВидСравнения	= ВидСравнения.Равно;
		ФормаВыбора.Отбор.ОтражатьВБухгалтерскомУчете.Значение		= Истина;
		ФормаВыбора.Отбор.ОтражатьВБухгалтерскомУчете.Использование = Истина;
		
		Если ЗначениеЗаполнено(ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные.ФизЛицо) Тогда
			ФормаВыбора.Отбор.ФизЛицо.ВидСравнения	 = ВидСравнения.Равно;
			ФормаВыбора.Отбор.ФизЛицо.Значение		 = ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные.ФизЛицо;
			ФормаВыбора.Отбор.ФизЛицо.Использование	 = Истина;
		КонецЕсли;
			
		ФормаВыбора.Открыть();
		
	КонецЕсли; 
	
	НачислениеЗарплатыРаботникамОрганизацийПереопределяемый.ДоговорЗаймаНачалоВыбораДополнительно(ЭлементыФормы, ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПогашениеЗаймовДоговорЗаймаПриИзменении(Элемент)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	СведенияОЗаймах.СтавкаНалогообложенияРезидента КАК СтавкаНалогообложенияРезидента,
	|	СведенияОЗаймах.НачислятьМатериальнуюВыгоду,
	|	ЕСТЬNULL(СведенияОЗаймах.ДоговорЗайма.ФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)) КАК ФизЛицо
	|ИЗ
	|	РегистрСведений.СведенияОЗаймах КАК СведенияОЗаймах
	|ГДЕ
	|	СведенияОЗаймах.ДоговорЗайма = &ДоговорЗайма
	|
	|СГРУППИРОВАТЬ ПО
	|	СведенияОЗаймах.СтавкаНалогообложенияРезидента,
	|	СведенияОЗаймах.НачислятьМатериальнуюВыгоду,
	|	ЕСТЬNULL(СведенияОЗаймах.ДоговорЗайма.ФизЛицо, ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка))";
	
	Запрос.УстановитьПараметр("ДоговорЗайма", Элемент.Значение);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		ТекущиеДанные = ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные;
		СтруктураДанныхДоговораЗайма = Новый Структура("СтавкаНалогообложенияРезидента,НачислятьМатериальнуюВыгоду,ФизЛицо");
		ЗаполнитьЗначенияСвойств(СтруктураДанныхДоговораЗайма, Выборка);
		
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ФизЛицо) Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные,СтруктураДанныхДоговораЗайма,"Физлицо");
		КонецЕсли;
		ТекущиеДанные.СтавкаНалогообложенияМатвыгоды = ?(СтруктураДанныхДоговораЗайма.НачислятьМатериальнуюВыгоду, СтруктураДанныхДоговораЗайма.СтавкаНалогообложенияРезидента,"");
		Если ТекущиеДанные.СтавкаНалогообложенияМатвыгоды <> Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка35 Тогда
			ТекущиеДанные.НалогНаМатериальнуюВыгоду = 0;
		КонецЕсли;
		
	КонецЕсли; 
	
КонецПроцедуры // ПогашениеЗаймовДоговорЗаймаПриИзменении()

Процедура ПогашениеЗаймовНачисленоПроцентовПриИзменении(Элемент)
	
	УстановитьЗначениеПогашеноПроцентов();
	
КонецПроцедуры // ПогашениеЗаймовНачисленоПроцентовПриИзменении()

Процедура ПогашениеЗаймовПогашениеОсновногоДолгаПриИзменении(Элемент)
	
	УстановитьЗначениеПогашеноПроцентов();
	
КонецПроцедуры // ПогашениеЗаймовПогашениеОсновногоДолгаПриИзменении()

Процедура ПогашениеЗаймовСтавкаНалогообложенияМатвыгодыПриИзменении(Элемент)
	
	Если Элемент.Значение = Перечисления.НДФЛСтавкиНалогообложенияРезидента.Ставка13 Тогда
		ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные.НалогНаМатериальнуюВыгоду = 0;
	КонецЕсли;
	
КонецПроцедуры // ПогашениеЗаймовСтавкаНалогообложенияМатвыгодыПриИзменении()

Процедура ПогашениеЗаймовВидДоговораПриИзменении(Элемент)
	
	НачислениеЗарплатыРаботникамОрганизацийПереопределяемый.ВидДоговораПриИзмененииДополнительно(ЭлементыФормы, Элемент);
	
КонецПроцедуры

Процедура ПогашениеЗаймовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НачислениеЗарплатыРаботникамОрганизацийПереопределяемый.ПогашениеЗаймовПриНачалеРедактированияДополнительно(ЭлементыФормы, Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

Процедура ПогашениеЗаймовПередНачаломИзменения(Элемент, Отказ)
	
	НачислениеЗарплатыРаботникамОрганизацийПереопределяемый.ПогашениеЗаймовПередНачаломИзмененияДополнительно(ЭлементыФормы, мФизлицаИсправление, мТекущееФизлицо, Элемент, Отказ);
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ Кнопки Дополнительно

Процедура ОбработатьНажатиеНаКнопкуДополнительно(Кнопка, ТабличноеПоле)
	
	мВидимостьДополнительныхКолонок[ТабличноеПоле] = НЕ мВидимостьДополнительныхКолонок[ТабличноеПоле];
	РаботаСДиалогамиЗК.ПоказатьСкрытьДополнительныеКолонки(мДополнительныеКолонки, мВидимостьДополнительныхКолонок, мТабличныеПоляСДополнительнымиКолонками, ТабличноеПоле);
	
КонецПроцедуры
	
Процедура КоманднаяПанельНачисленийДополнительно(Кнопка)
	
	ОбработатьНажатиеНаКнопкуДополнительно(Кнопка, "Начисления");
	
КонецПроцедуры

Процедура КоманднаяПанельДоговорыНаВыполнениеРаботДополнительно(Кнопка)
	
	ОбработатьНажатиеНаКнопкуДополнительно(Кнопка, "ДоговорыНаВыполнениеРабот");
	
КонецПроцедуры

Процедура КоманднаяПанельДополнительныхНачисленийДополнительно(Кнопка)
	
	ОбработатьНажатиеНаКнопкуДополнительно(Кнопка, "ДополнительныеНачисления");
	
КонецПроцедуры

Процедура КоманднаяПанельНДФЛДополнительно(Кнопка)
	
	ОбработатьНажатиеНаКнопкуДополнительно(Кнопка, "НДФЛ");
	
КонецПроцедуры

Процедура КоманднаяПанельУдержанийДополнительно(Кнопка)
	
	ОбработатьНажатиеНаКнопкуДополнительно(Кнопка, "Удержания");
	
КонецПроцедуры

Процедура КоманднаяПанельПогашениеЗаймовДополнительно(Кнопка)
	
	ОбработатьНажатиеНаКнопкуДополнительно(Кнопка, "ПогашениеЗаймов");
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["Начисления"]				= Ложь;
мСинхронизируемыеТабличныеЧасти["ДополнительныеНачисления"]	= Ложь;
мСинхронизируемыеТабличныеЧасти["ДоговорыНаВыполнениеРабот"]= Ложь;

мСведенияОВидахРасчета = Новый Соответствие;
мДопСведенияОВидахРасчетаНачислений = Новый Соответствие;

мСписокПочасовыхОтклонений = ПроведениеРасчетов.ПолучитьСписокНачисленийПочасовыхОтклонений();

мДокументыИсправление = Новый Массив;
мСотрудникиИсправление = Новый Соответствие;
мФизлицаИсправление = Новый Соответствие;
	
мТабличныеПоляСДополнительнымиКолонками = Новый Соответствие;
	
мТабличныеПоляСДополнительнымиКолонками.Вставить("Начисления", 					ЭлементыФормы.КоманднаяПанельНачислений);
мТабличныеПоляСДополнительнымиКолонками.Вставить("ДоговорыНаВыполнениеРабот", 	ЭлементыФормы.КоманднаяПанельДоговорыНаВыполнениеРабот);
мТабличныеПоляСДополнительнымиКолонками.Вставить("ДополнительныеНачисления", 	ЭлементыФормы.КоманднаяПанельДополнительныхНачислений);
мТабличныеПоляСДополнительнымиКолонками.Вставить("НДФЛ", 						ЭлементыФормы.КоманднаяПанельНДФЛ);
мТабличныеПоляСДополнительнымиКолонками.Вставить("Удержания", 					ЭлементыФормы.КоманднаяПанельУдержаний);
мТабличныеПоляСДополнительнымиКолонками.Вставить("ПогашениеЗаймов", 			ЭлементыФормы.КоманднаяПанельПогашениеЗаймов);

РучноеИзменениеПоказателей = Новый Соответствие;