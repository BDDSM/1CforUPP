////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВыполняемыеДействия,ЭлементыФормы.КоманднаяПанельВыполняемыеДействия.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает доступность реквизитов в зависимости от установленных флажков по типам учета.
//
Процедура УстановитьДоступностьРеквизитовПоТипуУчета()

	ЭлементыФормы.Организация.Доступность = НЕ ОтражатьВУправленческомУчете;
	
	Если ЭлементыФормы.Организация.Доступность Тогда
		ЭлементыФормы.Организация.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Если НЕ Организация.Пустая() Тогда
			Организация = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
		ЭлементыФормы.Организация.АвтоОтметкаНезаполненного = Ложь;
		ЭлементыФормы.Организация.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьРеквизитовПоТипуУчета()

// Процедура устанавливает видимость элементов формы.
//
Процедура УстановитьВидимость()
	
	ИспользоватьРасширеннуюАналитику = ПолучитьИспользованиеРасширеннойАналитики();
	Если ИспользоватьРасширеннуюАналитику Тогда
		РежимИспользованияРасширеннойАналитики = ПолучитьРежимИспользованияРасширеннойАналитики();
	КонецЕсли;
	
	Если Не ИспользоватьРасширеннуюАналитику
	   И ВыполняемыеДействия.Найти(
			Перечисления.ВыполняемыеОперацииРасчетСебестоимостиВыпуска.РаспределениеПродукцииИЗатратПоПеределам, 
			"ВыполняемоеДействие") <> Неопределено
	Тогда
		ЕстьРаспределениеПоПеределам = Истина;
	Иначе
		ЕстьРаспределениеПоПеределам = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.РамкаГруппыРаспределение.Видимость = ЕстьРаспределениеПоПеределам;
	ЭлементыФормы.УчитыватьОбщепроизводственныеРасходыПриРаспределенииПоПеределам.Видимость = ЕстьРаспределениеПоПеределам;
		
	// Видимость переключателей отражения в учете.
	Если ИспользоватьРасширеннуюАналитику Тогда
		ЭлементыФормы.ПанельОтразитьВУчете.ТекущаяСтраница = ЭлементыФормы.ПанельОтразитьВУчете.Страницы.РасширеннаяАналитика;
		ЭлементыФормы.ВидОтраженияВУчетеРасширеннаяАналитика.Доступность = (РежимИспользованияРасширеннойАналитики = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет);
		
		ЭлементыФормы.ВыполняемыеДействия.ИзменятьПорядокСтрок = Ложь;
	Иначе
		ЭлементыФормы.ПанельОтразитьВУчете.ТекущаяСтраница = ЭлементыФормы.ПанельОтразитьВУчете.Страницы.Основная;
		ЭлементыФормы.ВыполняемыеДействия.ИзменятьПорядокСтрок = Истина;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

// Процедура заполняет значение переключателя "ВидОтраженияВУчете".
//
Процедура ЗаполнитьВидОтраженияВУчете()
	
	ИспользоватьРасширеннуюАналитику = ПолучитьИспользованиеРасширеннойАналитики();
	
	Если ОтражатьВУправленческомУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
		
	ИначеЕсли ИспользоватьРасширеннуюАналитику Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете;
		
	ИначеЕсли ОтражатьВУправленческомУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
		
	ИначеЕсли ОтражатьВБухгалтерскомУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете;
		
	ИначеЕсли ОтражатьВНалоговомУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете;
		
	ИначеЕсли ОтражатьВМеждународномУчете Тогда
		ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьВидОтраженияВУчете()

// Процедура вызывается при изменении периода регистрации.
//
Процедура ПриИзмененииПериодаРегистрации()
	
	ИспользоватьРасширеннуюАналитику = ПолучитьИспользованиеРасширеннойАналитики(Истина);
	Если ИспользоватьРасширеннуюАналитику Тогда
		ПолучитьРежимИспользованияРасширеннойАналитики(Истина);
	КонецЕсли;
	
	ЗаполнитьВидОтраженияВУчете();
	ВидОтраженияВУчетеПриИзменении(Неопределено);
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииПериодаРегистрации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		
		ИспользоватьРасширеннуюАналитику = ПолучитьИспользованиеРасширеннойАналитики();
		Если ИспользоватьРасширеннуюАналитику Тогда
			РежимИспользованияРасширеннойАналитики = ПолучитьРежимИспользованияРасширеннойАналитики();
		КонецЕсли;
		
		Если ИспользоватьРасширеннуюАналитику Тогда
			Если РежимИспользованияРасширеннойАналитики = Перечисления.РежимыИспользованияРасширеннойАналитики.УправленческийИРегламентированныйУчет Тогда
				ОтражатьВУправленческомУчете = Истина;
				ОтражатьВБухгалтерскомУчете  = Ложь;
				ОтражатьВНалоговомУчете      = Ложь;
			Иначе
				ОтражатьВУправленческомУчете = Ложь;
				ОтражатьВБухгалтерскомУчете  = Истина;
				ОтражатьВНалоговомУчете      = Истина;
			КонецЕсли;
			
		Иначе
			ОтражатьВУправленческомУчете = Истина;
			ОтражатьВБухгалтерскомУчете  = Ложь;
			ОтражатьВНалоговомУчете      = Ложь;
		КонецЕсли;
		
		Если ВыполняемыеДействия.Количество() = 0 Тогда
			ЗаполнитьВыполняемыеДействия();
		КонецЕсли;

	КонецЕсли;
	
	ЗаполнитьВидОтраженияВУчете();
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	УстановитьДоступностьРеквизитовПоТипуУчета();
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	ПредставлениеПериодаРегистрации = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	// Если форма недоступна, сделаем пункт меню "Провести вне транзакции" недоступным
	ЭлементыФормы.ДействияФормы.Кнопки.Подменю.Кнопки.ПровестиВнеТранзакции.Доступность = НЕ ЭтаФорма.ТолькоПросмотр;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	
	УстановитьВидимость();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура КоманднаяПанельВыполняемыеДействияЗаполнить(Кнопка)
	
	Если ВыполняемыеДействия.Количество() > 0 Тогда
	 
		Ответ = Вопрос("В документе уже присутствуют строки." + Символы.ПС
					 + "При заполнении они будут удалены!" + Символы.ПС
					 + "Продолжить?", РежимДиалогаВопрос.ДаНет,,
					 КодВозвратаДиалога.Нет);
					 
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		ВыполняемыеДействия.Очистить();
	КонецЕсли;
	
	ЗаполнитьВыполняемыеДействия(Истина);
	УстановитьВидимость();
	
КонецПроцедуры // КоманднаяПанельВыполняемыеДействияЗаполнить()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	Если НачалоМесяца(ПериодРегистрации) <> НачалоМесяца(Дата) Тогда
		ПериодРегистрации = НачалоМесяца(Дата);
		ЭлементыФормы.ПредставлениеПериодаРегистрации.Значение = РаботаСДиалогами.ПолучитьПредставлениеПериодаРегистрации(ПериодРегистрации);
		ПриИзмененииПериодаРегистрации();
	КонецЕсли;	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете.
//
Процедура ВидОтраженияВУчетеПриИзменении(Элемент)
	
	ИспользоватьРасширеннуюАналитику = ПолучитьИспользованиеРасширеннойАналитики();
	
	Если ИспользоватьРасширеннуюАналитику Тогда
		ОтражатьВУправленческомУчете = (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
		ОтражатьВБухгалтерскомУчете = (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете);
		ОтражатьВНалоговомУчете = Ложь;
		ОтражатьВМеждународномУчете = Ложь;
	Иначе
		ОтражатьВУправленческомУчете = (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете);
		ОтражатьВБухгалтерскомУчете = (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВБухгалтерскомУчете);
		ОтражатьВНалоговомУчете = (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВНалоговомУчете);
		ОтражатьВМеждународномУчете = (ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВМеждународномУчете);
	КонецЕсли;

	УстановитьДоступностьРеквизитовПоТипуУчета();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Процедура перезаписывает документ в форме
Процедура ПерезаписатьВФорме()
	СтароеЗначениеПриЗаписиПерепроводить = ПриЗаписиПерепроводить;
	ПриЗаписиПерепроводить = Ложь;
	ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
	ПриЗаписиПерепроводить = СтароеЗначениеПриЗаписиПерепроводить;
КонецПроцедуры	

// Процедура проводит документ вне транзакции
Процедура ДействияФормыПровестиВнеТранзакции(Кнопка)
	Если ПометкаУдаления Тогда
		Предупреждение("Помеченный на удаление документ не может быть проведен!");
		Возврат;
	КонецЕсли;
	Если НЕ ПравоДоступа("Изменение", Метаданные.Документы.РасчетСебестоимостиВыпуска) Тогда
		Предупреждение("Нарушение прав доступа!");
		Возврат;
	КонецЕсли;
	Если Проведен Тогда
		Предупреждение("Проводить вне транзакции можно только непроведенные документы!");
		Возврат;
	КонецЕсли;
	
	Ответ = Вопрос("Внимание! Проведение расчета себестоимости вне транзакции можно выполнять только, если одновременно не вводятся первичные документы:
	  |- в периоде за который рассчитывается себестоимость, 
	  |- в периодах предшествующих расчету себестоимости.
	  |Перед проведением документ будет записан.
  	  |Провести расчет себестоимости вне транзакции?", РежимДиалогаВопрос.ДаНет,100,КодВозвратаДиалога.Нет);
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;	
	  
	Попытка
		Заблокировать();
	Исключение
		Предупреждение("Невозможно заблокировать документ.");
		Возврат;
	КонецПопытки;
	
	Попытка
		Записать(РежимЗаписиДокумента.Запись);
	Исключение
		ОписаниеОшибки = ИнформацияОбОшибке();
		Предупреждение(ОписаниеОшибки.Описание);
		Возврат;
	КонецПопытки;	
	
	Отказ = Ложь;
	
	// Если предыдущее проведение вне транзакции завершилось внештатно (аварийно), то у непроведенного документа
	// могут остаться движения. Такие движения необходимо очистить.
	мУдалятьДвижения = Истина;
	
	ОбработкаПроведения(Отказ,РежимПроведенияДокумента.Неоперативный);
	
	Если Не Отказ Тогда
		//Если при выполнении процедуры ОбработкаПроведения() были добавлены движения в коллекцию Движения, то их нужно записать
		Для Каждого ТекущееДвижение Из Движения Цикл
			Если ТекущееДвижение.Модифицированность() ТОгда
				ТекущееДвижение.Записать();
			КонецЕсли;
		КонецЦикла;	
		
		Проведен = Истина;
		ПерезаписатьВФорме();
	КонецЕсли;	
		
	Разблокировать();
КонецПроцедуры

Процедура ВыполняемыеДействияВыполняемоеДействиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьМассивВыполняемыхДействий(ПериодРегистрации, Организация, ОтражатьВУправленческомУчете, ОтражатьВНалоговомУчете, Истина));	
КонецПроцедуры

Процедура ВыполняемыеДействияВыполняемоеДействиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	Элемент.СписокВыбора.ЗагрузитьЗначения(ПроцедурыРасчетаСебестоимостиВыпуска.ПолучитьМассивВыполняемыхДействий(ПериодРегистрации, Организация, ОтражатьВУправленческомУчете, ОтражатьВНалоговомУчете, Истина));	
	СтандартнаяОбработка = Ложь;
	РезультатВыбора = ЭтаФорма.ВыбратьИзСписка(Элемент.СписокВыбора,Элемент, Элемент.СписокВыбора.НайтиПоЗначению(ЭлементыФормы.ВыполняемыеДействия.ТекущиеДанные.ВыполняемоеДействие)); 
	Если РезультатВыбора <> Неопределено Тогда
		ЭлементыФормы.ВыполняемыеДействия.ТекущиеДанные.ВыполняемоеДействие = РезультатВыбора.Значение;
	КонецЕсли;	
КонецПроцедуры