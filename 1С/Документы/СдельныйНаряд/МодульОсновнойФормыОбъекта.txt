////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаНачалаПериода;
Перем мКурсВалютыУпрУчета;
Перем мКратностьВалютыУпрУчета;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;
Перем мПрименениеУСН;
Перем мОтражатьВРегламентированномУчете;

// Список соответствий 1 - пн, 2 - вт,.... 7 - вс.
Перем ДниНедели;
// Массив строк "Первый", "Второй", "Третий" - приставки элементов табличной части документа
Перем МассивПриставок;
//  Соответствие символа обозначения времени и ссылки на классификатор
//  использования рабочего времени
Перем мБуквенныеОбозначения;
// Допустимые для ввода виды времени
Перем МассивДопустимыхВидовВремени;
// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

Перем мСтруктураЭУ;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Выработка,ЭлементыФормы.КоманднаяПанельРаботы);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Исполнители,ЭлементыФормы.КоманднаяПанельРаботники.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Запоминаем курс упр валюты на дату документа
//
// Параметры
//  ДатаКурса - дата курса
//
Процедура ПолучитьКурсУпрВалюты(ДатаКурса)

	Если мВалютаУпрУчета = мВалютаРегламентированногоУчета Тогда
		мКурсВалютыУпрУчета = 1;
		мКратностьВалютыУпрУчета = 1;
	Иначе	
		Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", мВалютаУпрУчета));
		мКурсВалютыУпрУчета = Структура.Курс;
		мКратностьВалютыУпрУчета = Структура.Кратность;
	КонецЕсли; 

КонецПроцедуры // ПолучитьКурсУпрВалюты()
 
// Управляет элементами формы
//
// Параметры
//  нет
//
Процедура ПриИзмененииВидаУчета()

	РаботаСДиалогамиДополнительный.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	ЭлементыФормы.Организация.АвтоОтметкаНезаполненного	= ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.Организация.ОтметкаНезаполненного		= ОтражатьВБухгалтерскомУчете и Организация.Пустая();
	
	Если ОтражатьВБухгалтерскомУчете Тогда 
		
		ЭлементыФормы.УчитыватьОтработанноеВремя.Доступность = Истина;
		ЭлементыФормы.УчитыватьТариф.Доступность = Истина;
		
	Иначе
		
		ЭлементыФормы.УчитыватьОтработанноеВремя.Доступность = Ложь;
		ЭлементыФормы.УчитыватьТариф.Доступность = Ложь;
		Если УчитыватьОтработанноеВремя Тогда
			УчитыватьОтработанноеВремя = Ложь;
		КонецЕсли;
		Если УчитыватьТариф Тогда
			УчитыватьТариф = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьРеквизитыУчетаВремени();
	ЭлементыФормы.Выработка.Колонки.ПодразделениеОрганизации.Видимость		= ОтражатьВБухгалтерскомУчете;
	
КонецПроцедуры // ПриИзмененииВидаУчета()

// Процедура устанавливает видимость колонок в зависимости от выбранного способа регистрации времени
// и видимость и доступность реквизитов учета времени
Процедура ОбновитьРеквизитыУчетаВремени()
	
	ЭлементыФормы.УчитыватьВремяНеТолькоПриРасчете.Доступность	= УчитыватьОтработанноеВремя;
	ЭлементыФормы.УчитыватьВремяТолькоПриРасчете.Доступность	= УчитыватьОтработанноеВремя;
	
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		
		ЭлементыФормы.ДатаНачалаПериода.ТолькоПросмотр				= Ложь;
		ЭлементыФормы.ПериодРегистрации.Доступность					= Ложь;
		ЭлементыФормы.ПоДням.Видимость								= Ложь;
		ЭлементыФормы.ВЦеломЗаПериод.Видимость						= Ложь;
		ЭлементыФормы.НадписьСпособВводаДанных.Видимость			= Ложь;
		
		ЭлементыФормы.Исполнители.Колонки.ОтработаноДней.Видимость	= Ложь;
		ЭлементыФормы.Исполнители.Колонки.ОтработаноЧасов.Видимость	= Ложь;
		
		Для Сч =1 По 5 Цикл
		
			ЭлементыФормы.Исполнители.Колонки["ВидВремени" + Сч].Видимость	= Ложь;
			ЭлементыФормы.Исполнители.Колонки["Дней" + Сч].Видимость		= Ложь;
			ЭлементыФормы.Исполнители.Колонки["Часов" + Сч].Видимость		= Ложь;
		
		КонецЦикла; 
		
	Иначе
		
		ЭлементыФормы.ДатаНачалаПериода.ТолькоПросмотр				= Истина;
		ЭлементыФормы.ПериодРегистрации.Доступность					= Истина;
		ЭлементыФормы.ВЦеломЗаПериод.Видимость						= Истина;
		ЭлементыФормы.ПоДням.Видимость								= Истина;
		ЭлементыФормы.НадписьСпособВводаДанных.Видимость			= Истина;
		ЭлементыФормы.ВЦеломЗаПериод.Доступность					= УчитыватьОтработанноеВремя;
		ЭлементыФормы.ПоДням.Доступность							= УчитыватьОтработанноеВремя;
		
		Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
			
			ЭлементыФормы.Исполнители.Колонки.ОтработаноДней.Видимость	= УчитыватьОтработанноеВремя;
			ЭлементыФормы.Исполнители.Колонки.ОтработаноЧасов.Видимость	= УчитыватьОтработанноеВремя;
			
			Для Сч =1 По 5 Цикл
				
				ЭлементыФормы.Исполнители.Колонки["ВидВремени" + Сч].Видимость	= Ложь;
				ЭлементыФормы.Исполнители.Колонки["Дней" + Сч].Видимость		= Ложь;
				ЭлементыФормы.Исполнители.Колонки["Часов" + Сч].Видимость		= Ложь;
				
			КонецЦикла; 
			
		Иначе // В целом за период
			
			ЭлементыФормы.Исполнители.Колонки.ОтработаноДней.Видимость	= Ложь;
			ЭлементыФормы.Исполнители.Колонки.ОтработаноЧасов.Видимость	= Ложь;
			
			Для Сч =1 По 5 Цикл
				
				ЭлементыФормы.Исполнители.Колонки["ВидВремени" + Сч].Видимость	= УчитыватьОтработанноеВремя;
				ЭлементыФормы.Исполнители.Колонки["Дней" + Сч].Видимость		= УчитыватьОтработанноеВремя;
				ЭлементыФормы.Исполнители.Колонки["Часов" + Сч].Видимость		= УчитыватьОтработанноеВремя;
				
			КонецЦикла; 
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень И УчитыватьОтработанноеВремя Тогда
		УстановитьКолонкуПоДате();
	Иначе
		
		ВидимостьКолонокПоДням = (СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням) И УчитыватьОтработанноеВремя;
		
		Для Каждого Колонка Из ЭлементыФормы.Исполнители.Колонки Цикл
			
			Если Найти(Колонка.Имя, "День") = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			Колонка.Видимость = ВидимостьКолонокПоДням;
			
		КонецЦикла;
		
		// Обрубание лишних колонок по дням для месяцес с количеством дней менее 31.
		Если ВидимостьКолонокПоДням Тогда
			УдалениеЛишнихКолонокДней();
		КонецЕсли;
		ОформитьЗаголовкиДнейМесяца();
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьРеквизитыУчетаВремени()

// Настраивает доступность (автоотметку незаполненного, пропуск при вводе) поля формы
//
Процедура УстановитьИспользованиеПоляВвода(ПолеВвода, Использование)
	
	ПолеВвода.АвтоОтметкаНезаполненного = Использование;
	ПолеВвода.АвтоВыборНезаполненного   = Использование;
	ПолеВвода.ПропускатьПриВводе        = НЕ Использование;
	Если НЕ Использование Тогда
		ПолеВвода.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ПервоначальнаяУстановкаРеквизитовУчетаВремени()

	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		ПериодНаряда = СпособВводаДанных;
	Иначе
		ПериодНаряда = Перечисления.СпособыВводаДанныхОВремени.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // ПервоначальнаяУстановкаРеквизитовУчетаВремени()

// Функция формирует структуру параметров для для ввода Видов времени по подстроке
//
// Параметры
//	НЕТ
//
// Возвращаемое значение:
//	Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке()

	СтруктураПараметров = Новый Структура("Ссылка", МассивДопустимыхВидовВремени);
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

// По тексту из ячейки (текст) возвращает соответствие: ВидВремени (классификатор) - Количество часов
//
Функция ПолучитьВидВремениИКоличествоЧасов(Текст , Результат) Экспорт
	Результат = Новый Соответствие;
	Если ПустаяСтрока(Текст) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РазделительВГруппе = " ";
	РазделительГрупп = Символы.ПС;
	
	ПодСтроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, РазделительГрупп);
	Для ИндексМассива = 0 По ПодСтроки.Количество() - 1 Цикл
		ВидВремениИКоличество = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПодСтроки[ИндексМассива], РазделительВГруппе);

		Если ВидВремениИКоличество.Количество() = 2 Тогда
			Код = мБуквенныеОбозначения[ВидВремениИКоличество[0]];
			Если МассивДопустимыхВидовВремени.Найти(Код)<> Неопределено Тогда
				Количество = Число(ВидВремениИКоличество[1]);
				Результат.Вставить(Код, Количество);
			Иначе
				Сообщить("Документ не предназначен для ввода отработанного времени по виду времени: " + ВидВремениИКоличество[0] + "(" + Код + ").
				|Введенное количество часов для данного вида времени в ячейку не записано!", СтатусСообщения.Внимание)
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецФункции // ПолучитьВидВремениИКоличествоЧасов()

// Функция проверяет введенные в таблице данные на правильность, а также приводит их к нормальному виду
Функция НормироватьТекст(Текст, Результат, НеполныйФормат = Истина, НормаЧасов = 8) Экспорт
	Результат = "";
	Если ПустаяСтрока(Текст) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Разделители = Новый Массив;
	Разделители.Добавить(Символы.ПС);
	Разделители.Добавить(" ");
	Разделители.Добавить("-");
	Разделители.Добавить(";");
	Разделители.Добавить("/");
	Разделители.Добавить(",");
	Разделители.Добавить(":");
	
	//РазделительГрупп = "  ";
	РазделительВГруппе = " ";
	РазделительГрупп = Символы.ПС;
	
	Для Каждого Разделитель из Разделители Цикл
		ПодСтроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, Разделитель);
		Если ПодСтроки.Количество() > 1 Тогда
			БылКод = Ложь;
			Для Каждого ПодСтрока Из Подстроки Цикл
				Код = мБуквенныеОбозначения[СокрЛП(ВРег(ПодСтрока))];
				АнализируемаяСтрока = СпецСокрЛП(ПодСтрока, Разделители);
				Если Код <> НеОпределено Тогда
					Если БылКод Тогда
						Возврат Ложь;
					КонецЕсли;
					Результат = Результат + ВРег(ПодСтрока);
					БылКод = Истина;
				ИначеЕсли ЭтоЧисло(АнализируемаяСтрока) и БылКод Тогда
					
					Результат = Результат + РазделительВГруппе + ?(АнализируемаяСтрока = "0", Строка(НормаЧасов), АнализируемаяСтрока) + РазделительГрупп;
					БылКод = Ложь;
				Иначе
					ПодРезультат = "";
					Если НормироватьТекст(ПодСтрока, ПодРезультат, Ложь) Тогда
						Результат = Результат + ПодРезультат;
					Иначе
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПустаяСтрока(Результат) Тогда
		Если НеполныйФормат Тогда
			Код = мБуквенныеОбозначения[СокрЛП(ВРег(Текст))];
			Если Код <> НеОпределено Тогда
				Результат = СокрЛП(ВРег(Текст)) + РазделительВГруппе + Строка(НормаЧасов) + РазделительГрупп;
				
				Возврат Истина;
			ИначеЕсли ЭтоЧисло(СпецСокрЛП(Текст, Разделители)) Тогда
				Результат = "Я" + РазделительВГруппе + СпецСокрЛП(Текст, Разделители) + РазделительГрупп;
				
				Возврат Истина;
			ИначеЕсли СокрЛП(Текст) = "0" Тогда
				
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		
		Возврат Истина;
	КонецЕсли;
КонецФункции

// Процедура проверяет введенное в ячейку значение на присутствие в
// Справочнике КлассификаторИспользованияРабочегоВремени, и суммирует число часов/дней в соответствующих колонках
Функция ОбработкаВводаДанныхВЯчейку(Элемент, Текст, Значение, СтандартнаяОбработка, НомерДня)
	Результат = ""; 
	//НормаЧасов = ПолучитьНормуВремениПоДню(ЭлементыФормы.Исполнители.ТекущаяСтрока.Сотрудник, Число(НомерДня));
	Если НормироватьТекст(Текст, Результат) Тогда
		Элемент.Значение = Результат;
	Иначе
		Значение = Новый СписокЗначений;
		СтандартнаяОбработка = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
	Для ИндексМассиваПриставок = 0 По 2 Цикл
		ЭлементыФормы.Исполнители.ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+НомерДня] = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
		ЭлементыФормы.Исполнители.ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"Часов"+НомерДня] = 0;
	КонецЦикла;
	
	СписокВремени = "";
	ИндексМассиваПриставок = 0;
	ПередаваемоеЗначениеЯчейки = Элемент.Значение;
	ПередаваемоеЗначениеЯчейки = Лев(ПередаваемоеЗначениеЯчейки, СтрДлина(ПередаваемоеЗначениеЯчейки)-1);
	ПолучитьВидВремениИКоличествоЧасов(ПередаваемоеЗначениеЯчейки, СписокВремени);
	
	Для Каждого ЭлементСписка Из СписокВремени Цикл
		
		Если ИндексМассиваПриставок > 2 Тогда
			
			Предупреждение("В ячейку можно записать не больше чем 3 вида времени");
			Прервать;
			
		Иначе
			
			ЭлементыФормы.Исполнители.ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+НомерДня] = ЭлементСписка.Ключ;
			ЭлементыФормы.Исполнители.ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"Часов"+НомерДня] = Число(ЭлементСписка.Значение);
			ИндексМассиваПриставок = ИндексМассиваПриставок + 1;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ОбработкаВводаДанныхВЯчейку()

Процедура ОбновитьСуммуОтработанныхДнейИЧасов()
	
	ТекущаяСтрока = ЭлементыФормы.Исполнители.ТекущаяСтрока;
	
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
		
		СуммаЧасов	= 0;
		СуммаДней	= 0;
		Для ИндексДня = 1 По 31 Цикл
			
			ЧасовВЯчейке = ВычислитьКоличествоЧасовВЯчейке(ТекущаяСтрока, ИндексДня);
			
			СуммаЧасов = СуммаЧасов + ЧасовВЯчейке;
			
			Если ЧасовВЯчейке > 0 Тогда
				СуммаДней = СуммаДней + 1
			КонецЕсли; 
			
		КонецЦикла;
		
		ЭлементыФормы.Исполнители.ТекущиеДанные.ОтработаноЧасов	= СуммаЧасов;
		ЭлементыФормы.Исполнители.ТекущиеДанные.ОтработаноДней	= СуммаДней;
		
	ИначеЕсли СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		
		ИндексДня = Строка(День(ДатаНачалаПериода));
		СуммаЧасов = ВычислитьКоличествоЧасовВЯчейке(ТекущаяСтрока, ИндексДня);
		
		ЭлементыФормы.Исполнители.ТекущиеДанные.ОтработаноЧасов	= СуммаЧасов;
		ЭлементыФормы.Исполнители.ТекущиеДанные.ОтработаноДней	= ?(СуммаЧасов > 0, 1, 0);
		
	КонецЕсли;
	
КонецПроцедуры // ОбновитьСуммуОтработанныхДнейИЧасов()

// Процедура надписывает колонки т.п. ГрафикРаботы в зависимости от способа ввода данных
// и количества дней в месяце.
Процедура ОформитьЗаголовкиДнейМесяца()

	// Устанавливаем заголовки дней месяца.
	БледноКрасныйЦвет	= Новый Цвет(255, 176, 176);
	СерыйЦвет			= Новый Цвет(234, 229, 216);
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
		ЭлементыФормы.Исполнители.ВысотаШапки = 1;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоМесяца",ПериодРегистрации);
		Запрос.УстановитьПараметр("КонецМесяца",КонецМесяца(ПериодРегистрации));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегламентированныйПроизводственныйКалендарь.ВидДня,
		|	ДЕНЬНЕДЕЛИ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ДеньНедели
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоМесяца И &КонецМесяца
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ДеньНеделиМесяца = ДеньНедели(ПериодРегистрации);
			Для ДеньМесяца = 1 по День(КонецМесяца(ПериодРегистрации)) Цикл
				
				Колонка = ЭлементыФормы.Исполнители.Колонки["День"+Строка(ДеньМесяца)];

				Колонка.ТекстШапки = Строка(ДеньМесяца) + Символы.ПС + ДниНедели[ДеньНеделиМесяца];
				Если ДеньНеделиМесяца = 6 Или ДеньНеделиМесяца = 7 Тогда
					Колонка.ЦветТекстаШапки = ЦветаСтиля.ЦветОсобогоТекста;
					Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
				Иначе
					Колонка.ЦветТекстаШапки = Новый Цвет();	
					Колонка.ШрифтШапки = Новый Шрифт();
				КонецЕсли;
				
				ДеньНеделиМесяца = (ДеньНеделиМесяца%7)+1;
			КонецЦикла;
		Иначе
			Данные = Результат.Выгрузить();
			ЦветСубботы	           = Новый Цвет(153, 51,   0); // Темно-красный
			ЦветВоскресенья 	   = ЦветаСтиля.ЦветОсобогоТекста; // Красный
			ЦветПредпразничногоДня = Новый Цвет(  0,  0, 186); // Темно-синий
			ЦветПраздничногоДня	   = Новый Цвет(255,  0, 255); // Фиолетовый
			Для ДеньМесяца = 1 по День(КонецМесяца(ПериодРегистрации)) Цикл
				
				Колонка = ЭлементыФормы.Исполнители.Колонки["День"+Строка(ДеньМесяца)];

				Колонка.ТекстШапки = Строка(ДеньМесяца) + Символы.ПС + ДниНедели[Данные[ДеньМесяца - 1].ДеньНедели];
				
			    ВидДня = Данные[ДеньМесяца - 1].ВидДня;
				Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
					Колонка.ЦветТекстаШапки = ЦветПраздничногоДня;
					Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
				ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
					Колонка.ЦветТекстаШапки = ЦветВоскресенья;
					Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
				ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
					Колонка.ЦветТекстаШапки = ЦветСубботы;
					Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
				ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
					Колонка.ЦветТекстаШапки = ЦветПредпразничногоДня;
					Колонка.ШрифтШапки = Новый Шрифт();
				Иначе
					Колонка.ЦветТекстаШапки = Новый Цвет();	
					Колонка.ШрифтШапки = Новый Шрифт();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЭлементыФормы.Исполнители.ВысотаШапки = 2;
		
	КонецЕсли;

КонецПроцедуры

// Процедура управляет обработкой выбора из справочника "Сотрудники организаций"
//
// Параметры
//  ВыбранноеЗначение  – СправочникСсылка.СотрудникиОрганизаций – выбранное значение
//
Процедура ОбработкаВыбораРаботника(ВыбранноеЗначение, ДобавлятьНовуюСтроку = Истина, ПроверятьУникальностьСотрудника = Истина)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда 
		ИЛИ ВыбранноеЗначение.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
	
		Предупреждение("Подбор сотрудника по договору ГПХ не предусмотрен!");		
		Возврат;
		
	КонецЕсли; 
	
	// Если выбор произошел в форме подбора и этого физлица в документе пока нет,
	// добавим новую строку в таблицу
	СтруктураПоиска = Новый Структура("Сотрудник", ВыбранноеЗначение);
	
	Если Не ПроверятьУникальностьСотрудника ИЛИ Исполнители.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		Если ДобавлятьНовуюСтроку Тогда
			Автозаполнение(,ВыбранноеЗначение);
		Иначе
			Автозаполнение(,ВыбранноеЗначение, ЭлементыФормы.Исполнители.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;		
	

КонецПроцедуры // ОбработкаВыбораРаботника()

// Процедура заполняет отработанное время в целом за период
// по данным тработанное время по дням
//
Процедура ЗаполнитьОтработанноеВремяВЦеломЗаПериод()
		
	МаксимальныйНомерЯчейки = 0;
	СоответствиеВидаВремениИЯчейки = Новый Соответствие;
	
	Для Каждого СтрокаОтработанногоВремени Из Исполнители Цикл
		
		// Очистить значения для заполнения сводных данных
		Для Сч = 1 По 5 Цикл
			
			СтрокаОтработанногоВремени["ВидВремени" + Сч]	= Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
			СтрокаОтработанногоВремени["Часов" + Сч]		= 0;
			СтрокаОтработанногоВремени["Дней" + Сч]			= 0;
			
		КонецЦикла;
		
		СоответствиеВидаВремениИЯчейки.Очистить();
		МаксимальныйНомерЯчейки = 0;
		Для ИндексЯчейки = 1 По 31 Цикл
			
			Для Каждого ТекущаяПриставка Из МассивПриставок Цикл
				
				Часов = СтрокаОтработанногоВремени[ТекущаяПриставка+"Часов"+ИндексЯчейки];
				
				Если Часов > 0 Тогда
					
					ВидВремени = СтрокаОтработанногоВремени[ТекущаяПриставка+"ВидВремени"+ИндексЯчейки];
					НомерЯчейки = СоответствиеВидаВремениИЯчейки.Получить(ВидВремени);
					
					Если НомерЯчейки = Неопределено Тогда
						
						МаксимальныйНомерЯчейки = МаксимальныйНомерЯчейки + 1;
						Если МаксимальныйНомерЯчейки > 5 Тогда
							Продолжить;
						КонецЕсли;
						СоответствиеВидаВремениИЯчейки.Вставить(ВидВремени, Строка(МаксимальныйНомерЯчейки));
						НомерЯчейки = МаксимальныйНомерЯчейки;
						СтрокаОтработанногоВремени["ВидВремени" + НомерЯчейки] = ВидВремени;
						
					КонецЕсли;
					
					СтрокаОтработанногоВремени["Часов" + НомерЯчейки] = СтрокаОтработанногоВремени["Часов" + НомерЯчейки] + Часов;
					СтрокаОтработанногоВремени["Дней" + НомерЯчейки] = СтрокаОтработанногоВремени["Дней" + НомерЯчейки] + 1;
					
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры  //ЗаполнитьОтработанноеВремяВЦеломЗаПериод

// Функция, удаляет символы до разделителя слева и справа после разделителя
Функция СпецСокрЛП(Строка, Разделители)
	НоваяСтрока = Строка;
	// удалим лишние символы слева
	Пока Истина Цикл
		Символ = Лев(НоваяСтрока, 1);
		ЭтоРазделитель = Ложь;
		Для Каждого Разделитель Из Разделители Цикл
			Если Символ = Разделитель Тогда
				ЭтоРазделитель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоРазделитель Тогда
			НоваяСтрока = Сред(НоваяСтрока, 2);
			Если ПустаяСтрока(НоваяСтрока) Тогда
				Прервать;
			КонецЕсли;    
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;        
	// удалим лишние символы справа
	Пока Истина Цикл
		Символ = Прав(НоваяСтрока, 1);
		ЭтоРазделитель = Ложь;
		Для Каждого Разделитель Из Разделители Цикл
			Если Символ = Разделитель Тогда
				ЭтоРазделитель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоРазделитель Тогда
			НоваяСтрока = Лев(НоваяСтрока, СтрДлина(НоваяСтрока) - 1);
			Если ПустаяСтрока(НоваяСтрока) Тогда
				Прервать;
			КонецЕсли;    
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НоваяСтрока;
КонецФункции

// Процедура удаляет лишние колонки с днями для месяцев с количеством дней менее 31
//
Процедура УдалениеЛишнихКолонокДней()
	
	НомерДня = День(КонецМесяца(ПериодРегистрации)) + 1;
	Пока НомерДня <= 31 Цикл
		ЭлементыФормы.Исполнители.Колонки["День" + Строка(НомерДня)].Видимость = Ложь;
		НомерДня = НомерДня + 1
	КонецЦикла
	
КонецПроцедуры //УдалениеЛишнихКолонокДней()

// Процедура устанавливает видимость колонки, номер которой совпадает с днем даты документа
//
Процедура УстановитьКолонкуПоДате()

	НомерКолонки = День(ДатаНачалаПериода);
	Для каждого Колонка из ЭлементыФормы.Исполнители.Колонки Цикл
		
		Если Найти(Колонка.Имя, "День") = 0 Тогда
			Продолжить
		КонецЕсли;
		
		Колонка.Видимость = ?(Колонка.Имя = "День" + Строка(НомерКолонки), Истина, Ложь)
		
	КонецЦикла;
	
КонецПроцедуры

// Функция определяет, возможно ли переданную строку перевести в число
// Возвращает Истина, если Возможно, иначе Ложь
Функция ЭтоЧисло(Строка)
	Попытка
		Число = Число(Строка);
		Если Число = 0 Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

Процедура ОбновитьТарифы()

	Если УчитыватьТариф и (Дата <> мТекущаяДатаДокумента или ДатаНачалаПериода <> мТекущаяДатаНачалаПериода) и Исполнители.Количество() > 0 Тогда
		РассчитатьТарифыСотрудников();
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если СпособВводаДанных.Пустая() Тогда
			СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням;
		КонецЕсли;
		Если ДатаНачалаПериода = Дата(1, 1, 1) Тогда
			ДатаНачалаПериода = НачалоМесяца(ПериодРегистрации);
		КонецЕсли;
		
		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			ОтражатьВБухгалтерскомУчете = Не ОтражатьВУправленческомУчете;
			ОтражатьВНалоговомУчете = Не ОтражатьВУправленческомУчете;
		КонецЕсли;	

	КонецЕсли;
	
	ПервоначальнаяУстановкаРеквизитовУчетаВремени();

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);
	ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = Истина;
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ТехнологическаяОперация");
	СтруктураКолонок.Вставить("СтатьяЗатрат");
 	СтруктураКолонок.Вставить("Расценка");
 	СтруктураКолонок.Вставить("Количество");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Выработка.Колонки, СтруктураКолонок);

	СтруктураКолонок = Новый Структура();

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Исполнители.Колонки, СтруктураКолонок);

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, СтрЗаменить(мСтрокаРеквизитыБухУчета,"Организация, ПодразделениеОрганизации,",""), мСтрокаРеквизитыНалУчета);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Исполнители.Колонки.ТабельныйНомерСтрока);
	
	// Установим видимость реквизитов в зависимости от уч.политики
	Если ОтражатьВБухгалтерскомУчете Тогда
		РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
		// отразим видимость элементов формы в зависимости от учетной политики
		НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(Дата), Организация);
	Иначе
		РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мТекущаяДатаНачалаПериода = ДатаНачалаПериода;
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ЭлементыФормы.Выработка.Колонки["ОтражениеВУСН"].Видимость = (мПрименениеУСН и ОтражатьВНалоговомУчете);
	
	ПолучитьКурсУпрВалюты(Дата);
	ПриИзмененииВидаУчета();
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.Исполнители.Колонки.КТУ.Видимость				= УчитыватьКТУ;
	ЭлементыФормы.Исполнители.Колонки.Тариф.Видимость			= УчитыватьТариф;
	ЭлементыФормы.Исполнители.Колонки.ОтработаноЧасов.Видимость	= УчитыватьОтработанноеВремя;
	ЭлементыФормы.Исполнители.Колонки.ОтработаноДней.Видимость	= СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод;
	
	// Установить видимость колонок.
	ОбновитьРеквизитыУчетаВремени();
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
	// Управление панелью порядка расчета
	СверткаПанели = Исполнители.Количество() > 0;
	ЭлементыФормы.НадписьПоказыватьПорядокРасчета.Заголовок = ?(СверткаПанели,"Показать","Скрыть") + " порядок расчета сумм к начислению";
	ПоказыватьПорядокРасчета = НЕ СверткаПанели;
	ЭлементыФормы.ПанельРасчетаСуммКНачислению.Свертка = ?(СверткаПанели,РежимСверткиЭлементаУправления.Верх,РежимСверткиЭлементаУправления.Нет);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ИсполнитьПодготовленныйЗапрос" Тогда
			
			Исполнители.Очистить();
			Автозаполнение(ЗначениеВыбора.Запрос);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	// оповестим журналы о записи нового управленческого документа
	Оповестить("ЗаписанНовыйДокументУправленческогоУчета", Ответственный, Ссылка);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("СправочникСсылка.СотрудникиОрганизаций") ИЛИ Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ПодборОтменаВыбора" Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", Параметр);
		НайденныеСтроки = Источник.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Источник.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура выполняет  открытие формы регистра ГрафикиРаботыПоВидамВремени
// с отбором по данному документу
Процедура ДействияФормыГрафикиРаботыПоВидамВремени(Кнопка)
	ФормаСписка = РегистрыСведений.ГрафикиРаботыПоВидамВремени.ПолучитьФормуСписка();	
	ФормаСписка.Отбор.Документ.Установить(Ссылка);
	ФормаСписка.Открыть();
КонецПроцедуры

Процедура КоманднаяПанельРаботникиПодбор(Кнопка)
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.Исполнители, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 2, , Исполнители.ВыгрузитьКолонку("Сотрудник"));
	Иначе
		ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(ЭлементыФормы.Исполнители, Ссылка, Ложь, Дата, , Исполнители.ВыгрузитьКолонку("Сотрудник"));
	КонецЕсли;
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиСписокРаботников(Кнопка)
	
	Если Исполнители.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаДень = СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, ?(ЗаДень, Дата, КонецМесяца(ПериодРегистрации)), ?(ОтражатьВУправленческомУчете,"Работники","РаботникиОрганизаций"), Организация, ?(ОтражатьВУправленческомУчете,Неопределено,ПодразделениеОрганизации), Ложь, , , , НачалоМесяца(Дата), Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиДействиеЗаполнитьВсех(Кнопка)
		
	Если Организация.Пустая() Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация, заполнить список сотрудников невозможно!"));
		Возврат;
	КонецЕсли;
	
	Если Исполнители.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличнaя часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Исполнители.Очистить();
		
	КонецЕсли;
	
	Автозаполнение();
	

КонецПроцедуры

Процедура КоманднаяПанельРаботникиРассчитать(Кнопка)
	
	Если Исполнители.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	КомментироватьРасчет = ?(Кнопка.Имя = "РассчитатьСКомментарием", Истина, Ложь);
	
	Рассчитать(КомментироватьРасчет);
	
КонецПроцедуры

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	ОбновитьТарифы();

	мТекущаяДатаДокумента = Дата;
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ЭлементыФормы.Выработка.Колонки["ОтражениеВУСН"].Видимость = (мПрименениеУСН и ОтражатьВНалоговомУчете);
	
	ПолучитьКурсУпрВалюты(Дата);
	
КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
    РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, СтрЗаменить(мСтрокаРеквизитыБухУчета,"Организация, ПодразделениеОрганизации,",""), мСтрокаРеквизитыНалУчета);
	
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ЭлементыФормы.Выработка.Колонки["ОтражениеВУСН"].Видимость = (мПрименениеУСН и ОтражатьВНалоговомУчете);
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	// Подмена подразделения орагнизаций в табличной части Выработка
	СписокВыбора = РаботаСДиалогами.ПолучитьСписокПодразделенийОрганизаций(Подразделение,Организация);
	Если СписокВыбора.Количество()=1 тогда
		
		мПодразделениеОрганизации = СписокВыбора[0].Значение;
		ЗаданВопрос = Ложь;
		
		Для каждого СтрокаВыработка Из Выработка Цикл
		
			Если НЕ ЗначениеЗаполнено(СтрокаВыработка.ПодразделениеОрганизации) Тогда
				
				СтрокаВыработка.ПодразделениеОрганизации = мПодразделениеОрганизации
				
			ИначеЕсли СтрокаВыработка.ПодразделениеОрганизации <> мПодразделениеОрганизации Тогда
				
				Если НЕ ЗаданВопрос Тогда
					
					Если Вопрос("Заменить значение подразделения организации во всех строчках табличной части"""
						+ """ на """
						+ мПодразделениеОрганизации+ """ ?",
						РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
						СтрокаВыработка.ПодразделениеОрганизации = мПодразделениеОрганизации;
					Иначе 
						Прервать
					КонецЕсли;
					ЗаданВопрос = Истина;
				
				КонецЕсли; 
				СтрокаВыработка.ПодразделениеОрганизации = мПодразделениеОрганизации;
			
			КонецЕсли; 
		
		КонецЦикла; 
		
	КонецЕсли;

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода ПодразделениеОрганизации
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	мПодразделениеОрганизации = Элемент.Значение;
	ЗаданВопрос = Ложь;
	
	Для каждого СтрокаВыработка Из Выработка Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаВыработка.ПодразделениеОрганизации) Тогда
			
			СтрокаВыработка.ПодразделениеОрганизации = мПодразделениеОрганизации
			
		ИначеЕсли СтрокаВыработка.ПодразделениеОрганизации <> мПодразделениеОрганизации Тогда
			
			Если ЗаданВопрос Тогда
				
				СтрокаВыработка.ПодразделениеОрганизации = мПодразделениеОрганизации
				
			Иначе
				
				Если Вопрос("Заменить значение подразделения организации во всех строчках табличной части"""
					+ """ на """
					+ мПодразделениеОрганизации+ """ ?",
					РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да тогда
					СтрокаВыработка.ПодразделениеОрганизации = мПодразделениеОрганизации;
				Иначе 
					Прервать
				КонецЕсли;
				ЗаданВопрос = Истина;
				
			КонецЕсли; 
			
		КонецЕсли; 
		
	КонецЦикла; 
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, СтрЗаменить(мСтрокаРеквизитыБухУчета,"Организация, ПодразделениеОрганизации,",""), мСтрокаРеквизитыНалУчета);
    	
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бухгалтерском учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, СтрЗаменить(мСтрокаРеквизитыБухУчета,"Организация, ПодразделениеОрганизации,",""), мСтрокаРеквизитыНалУчета);
	
	ПриИзмененииВидаУчета();
	УстановитьВидимость();
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, СтрЗаменить(мСтрокаРеквизитыБухУчета,"Организация, ПодразделениеОрганизации,",""), мСтрокаРеквизитыНалУчета);
	ЭлементыФормы.Выработка.Колонки["ОтражениеВУСН"].Видимость = (мПрименениеУСН и ОтражатьВНалоговомУчете);
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

Процедура УстановитьВидимость()
	
	ЭлементыФормы.Выработка.Колонки.Проект.Видимость = УправлениеПроектами.ИспользоватьРаспределениеЗатратПоПроектам();
	
	Колонки = ЭлементыФормы.Выработка.Колонки;
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.СчетУчетаБУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.СчетУчетаНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);

	ЭлементыФормы.ПодразделениеОрганизации.Видимость	= Истина;
	ЭлементыФормы.Подразделение.Видимость				= Истина;
	ЭлементыФормы.Организация.Видимость					= Истина;
	УстановитьИспользованиеПоляВвода(ЭлементыФормы.Подразделение,				ОтражатьВУправленческомУчете);
	УстановитьИспользованиеПоляВвода(ЭлементыФормы.ПодразделениеОрганизации,	ОтражатьВБухгалтерскомУчете);
	УстановитьИспользованиеПоляВвода(ЭлементыФормы.Организация, 				ОтражатьВБухгалтерскомУчете);
	
КонецПроцедуры // УстановитьВидимость()

// Процедура - обработчик события "ПриИзменении" поля "Заказ".
//
Процедура ЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "", ДопПараметры);
	
КонецПроцедуры // ЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ЗаДень".
//
Процедура ЗаДеньПриИзменении(Элемент)
	Если Элемент.Значение = Перечисления.СпособыВводаДанныхОВремени.ЗаДень Тогда
		СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ЗаДень;
	Иначе
		СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням;
		ДатаНачалаПериода = НачалоМесяца(ПериодРегистрации);	
	КонецЕсли;
	ОбновитьРеквизитыУчетаВремени();
	ОбновитьТарифы();
	мТекущаяДатаНачалаПериода = ДатаНачалаПериода;
	ОбновитьСуммуОтработанныхДнейИЧасовДляВсехСтрок();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ПоДням".
//
Процедура ПоДнямПриИзменении(Элемент)
	
	ОбновитьРеквизитыУчетаВремени();
	Если ЭлементыФормы.ДатаНачалаПериода.ТолькоПросмотр Тогда
		ДатаНачалаПериода = НачалоМесяца(ПериодРегистрации);
		ОбновитьТарифы();
		мТекущаяДатаНачалаПериода = ДатаНачалаПериода;
	КонецЕсли;
	Если Элемент.Значение = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
		ЗаполнитьОтработанноеВремяВЦеломЗаПериод();
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "ДатаНачалаПериода".
//
Процедура ДатаНачалаПериодаПриИзменении(Элемент)
	
	Если ДатаНачалаПериода <> Дата(1, 1, 1) Тогда
		ПериодРегистрации = НачалоМесяца(ДатаНачалаПериода);
		МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
		ОбновитьРеквизитыУчетаВремени();
		ОбновитьТарифы();
	КонецЕсли;
	мТекущаяДатаНачалаПериода = ДатаНачалаПериода;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "УчитыватьКТУ".
//
Процедура УчитыватьКТУПриИзменении(Элемент)
	
	ЭлементыФормы.Исполнители.Колонки.КТУ.Видимость = Элемент.Значение;
	
КонецПроцедуры // УчитыватьКТУПриИзменении()

Процедура УчитыватьТарифПриИзменении(Элемент)
	
	ЭлементыФормы.Исполнители.Колонки.Тариф.Видимость = Элемент.Значение;
	Если Элемент.Значение Тогда
		Если Исполнители.Количество()> 0 Тогда
			РассчитатьТарифыСотрудников();
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "УчитыватьОтработанныеЧасы".
//
Процедура УчитыватьОтработанныеЧасыПриИзменении(Элемент)
	
	ОбновитьРеквизитыУчетаВремени();
	
КонецПроцедуры // УчитыватьОтработанныеЧасыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	ОбновитьРеквизитыУчетаВремени();
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	ДатаНачалаПериода = ПериодРегистрации;
	ОбновитьТарифы();
	мТекущаяДатаНачалаПериода = ДатаНачалаПериода;
	ОбновитьРеквизитыУчетаВремени();
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
	ДатаНачалаПериода = ПериодРегистрации;
	ОбновитьТарифы();
	мТекущаяДатаНачалаПериода = ДатаНачалаПериода;
	ОбновитьРеквизитыУчетаВремени();
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
	ДатаНачалаПериода = ПериодРегистрации;
	ОбновитьТарифы();
	мТекущаяДатаНачалаПериода = ДатаНачалаПериода;
	ОбновитьРеквизитыУчетаВремени();
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
	ДатаНачалаПериода = ПериодРегистрации;
	ОбновитьТарифы();
	мТекущаяДатаНачалаПериода = ДатаНачалаПериода;
	ОбновитьРеквизитыУчетаВремени();
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

Процедура НадписьПоказыватьПорядокРасчетаНажатие()

	ПоказыватьПорядокРасчета = Не ПоказыватьПорядокРасчета;
		
	ЭлементыФормы.НадписьПоказыватьПорядокРасчета.Заголовок = ?(ПоказыватьПорядокРасчета,"Скрыть","Показать") + " порядок расчета сумм к начислению";
	ЭлементыФормы.ПанельРасчетаСуммКНачислению.Свертка = РежимСверткиЭлементаУправления.Нет;
	ЭлементыФормы.ПанельРасчетаСуммКНачислению.Свертка = ?(ПоказыватьПорядокРасчета,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Верх);

КонецПроцедуры
 
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ Выработка

// Процедура - обработчик события "ПриВыводеСтроки" таб.поля "Выработка"
//
Процедура ВыработкаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(
		ХарактерЗатрат,
		ДанныеСтроки.Продукция,
		ДанныеСтроки.СчетЗатрат,
		ДанныеСтроки.СчетЗатратНУ,
		ОформлениеСтроки,
		ОтражатьВУправленческомУчете,
		ОтражатьВБухгалтерскомУчете,
		ОтражатьВНалоговомУчетеНП);
		
КонецПроцедуры // ВыработкаПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода технологической операции
//
Процедура ВыработкаТехнологическаяОперацияПриИзменении(Элемент)
	
	ТехОперация = Элемент.Значение;
	Если Не ТехОперация.Пустая() Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	ТехнологическиеОперации.ОсновнаяСтатьяЗатратНаПроизводство,
		                      |	ТехнологическиеОперации.СпособОтраженияЗарплатыВБухучете.СчетДт КАК СчетУчетаБУ,
		                      |	ТехнологическиеОперации.СпособОтраженияЗарплатыВБухучете.СчетДтНУ КАК СчетУчетаНУ,
		                      |	ТехнологическиеОперации.ОсновнаяНоменклатурнаяГруппа,
		                      |	ТехнологическиеОперации.Расценка,
		                      |	ТехнологическиеОперации.Валюта,
		                      |	ТехнологическиеОперации.СпособОтраженияЗарплатыВБухучете.СубконтоДт1 КАК СубконтоДт1,
		                      |	ТехнологическиеОперации.СпособОтраженияЗарплатыВБухучете.СубконтоДт2 КАК СубконтоДт2,
		                      |	ТехнологическиеОперации.СпособОтраженияЗарплатыВБухучете.СубконтоДт3 КАК СубконтоДт3,
		                      |	ТехнологическиеОперации.ОсновнаяСтатьяЗатратНаПроизводство.ХарактерЗатрат КАК ХарактерЗатрат,
		                      |	ТехнологическиеОперации.ОсновнойСпособРаспределенияЗатратНаВыпуск,
		                      |	ТехнологическиеОперации.СпособОтраженияЗарплатыВБухучете.ОтражениеВУСН КАК ОтражениеВУСН
		                      |ИЗ
		                      |	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
		                      |
		                      |ГДЕ
		                      |	ТехнологическиеОперации.Ссылка = &Ссылка");
							  
		Запрос.УстановитьПараметр("Ссылка",ТехОперация);
		ТехОперация = Запрос.Выполнить().Выбрать();
		ТехОперация.Следующий();
		
		ТекущаяСтрока = ЭлементыФормы.Выработка.ТекущиеДанные;
		
		ТекущаяСтрока.СтатьяЗатрат			= ТехОперация.ОсновнаяСтатьяЗатратНаПроизводство;
		ТекущаяСтрока.НоменклатурнаяГруппа	= ТехОперация.ОсновнаяНоменклатурнаяГруппа;
		ТекущаяСтрока.СпособРаспределенияЗатратНаВыпуск	= ТехОперация.ОсновнойСпособРаспределенияЗатратНаВыпуск;
		ТекущаяСтрока.Расценка				= ТехОперация.Расценка;
		ТекущаяСтрока.Валюта				= ?(НЕ ЗначениеЗаполнено(ТехОперация.Валюта),мВалютаУпрУчета,ТехОперация.Валюта);
		ТекущаяСтрока.СчетЗатрат			= ТехОперация.СчетУчетаБУ;
		ТекущаяСтрока.СчетЗатратНУ			= ТехОперация.СчетУчетаНУ;
		ТекущаяСтрока.ОтражениеВУСН			= ТехОперация.ОтражениеВУСН;
		
		Если ТехОперация.ХарактерЗатрат = Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы Тогда
			
			Если ТипЗнч(ТехОперация.СубконтоДт1) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда 
				ТекущаяСтрока.ОбъектСтроительства = ТехОперация.СубконтоДт1
			ИначеЕсли ТипЗнч(ТехОперация.СубконтоДт2) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				ТекущаяСтрока.ОбъектСтроительства = ТехОперация.СубконтоДт2
			ИначеЕсли ТипЗнч(ТехОперация.СубконтоДт3) = Тип("СправочникСсылка.ОбъектыСтроительства") Тогда
				ТекущаяСтрока.ОбъектСтроительства = ТехОперация.СубконтоДт3
			КонецЕсли;

			Если ТипЗнч(ТехОперация.СубконтоДт1) = Тип("ПеречислениеСсылка.СпособыСтроительства") Тогда 
				ТекущаяСтрока.СпособСтроительства = ТехОперация.СубконтоДт1
			ИначеЕсли ТипЗнч(ТехОперация.СубконтоДт2) = Тип("ПеречислениеСсылка.СпособыСтроительства") Тогда
				ТекущаяСтрока.СпособСтроительства = ТехОперация.СубконтоДт2
			ИначеЕсли ТипЗнч(ТехОперация.СубконтоДт3) = Тип("ПеречислениеСсылка.СпособыСтроительства") Тогда
				ТекущаяСтрока.СпособСтроительства = ТехОперация.СубконтоДт3
			КонецЕсли;
			
		КонецЕсли;
		
		ПроведениеРасчетовПереопределяемый.РассчитатьСуммуЗаРаботу(ОтражатьВБухгалтерскомУчете, ОтражатьВУправленческомУчете, ТекущаяСтрока,Дата, мВалютаРегламентированногоУчета, мВалютаУпрУчета, мКурсВалютыУпрУчета, мКратностьВалютыУпрУчета);
		
		Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.ПодразделениеОрганизации)И 
			ОтражатьВБухгалтерскомУчете Тогда
			
			ТекущаяСтрока.ПодразделениеОрганизации = ПодразделениеОрганизации
			
		КонецЕсли; 
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СтатьяЗатрат"
//
Процедура ВыработкаСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Выработка.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(
		СтрокаТабличнойЧасти,
		ПодразделениеОрганизации,
		СтрокаТабличнойЧасти.СтатьяЗатрат);
	
КонецПроцедуры // ВыработкаСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода расченки
//
Процедура ВыработкаРасценкаПриИзменении(Элемент)
	ПроведениеРасчетовПереопределяемый.РассчитатьСуммуЗаРаботу(ОтражатьВБухгалтерскомУчете, ОтражатьВУправленческомУчете, ЭлементыФормы.Выработка.ТекущиеДанные,Дата, мВалютаРегламентированногоУчета, мВалютаУпрУчета, мКурсВалютыУпрУчета, мКратностьВалютыУпрУчета)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода валюты
//
Процедура ВыработкаВалютаПриИзменении(Элемент)
	ПроведениеРасчетовПереопределяемый.РассчитатьСуммуЗаРаботу(ОтражатьВБухгалтерскомУчете, ОтражатьВУправленческомУчете, ЭлементыФормы.Выработка.ТекущиеДанные,Дата, мВалютаРегламентированногоУчета, мВалютаУпрУчета, мКурсВалютыУпрУчета, мКратностьВалютыУпрУчета)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
//
Процедура ВыработкаКоличествоПриИзменении(Элемент)
	ПроведениеРасчетовПереопределяемый.РассчитатьСуммуЗаРаботу(ОтражатьВБухгалтерскомУчете, ОтражатьВУправленческомУчете, ЭлементыФормы.Выработка.ТекущиеДанные,Дата, мВалютаРегламентированногоУчета, мВалютаУпрУчета, мКурсВалютыУпрУчета, мКратностьВалютыУпрУчета)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаЗаРаботуВВалюте"
//
Процедура ВыработкаСуммаЗаРаботуВВалютеПриИзменении(Элемент)
	ПроведениеРасчетовПереопределяемый.РассчитатьСуммуЗаРаботу(ОтражатьВБухгалтерскомУчете, ОтражатьВУправленческомУчете, ЭлементыФормы.Выработка.ТекущиеДанные,Дата, мВалютаРегламентированногоУчета, мВалютаУпрУчета, мКурсВалютыУпрУчета, мКратностьВалютыУпрУчета, Ложь)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма"
//
Процедура ВыработкаСуммаПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.Выработка.ТекущиеДанные;
	
	ТекСтрока.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		ТекСтрока.Сумма,
		мВалютаУпрУчета,
		мВалютаРегламентированногоУчета,
		мКурсВалютыУпрУчета, 1,
		мКратностьВалютыУпрУчета, 1);
		
КонецПроцедуры

Процедура ВыработкаСчетУчетаБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Выработка.ТекущиеДанные;

	Если ОтражатьВНалоговомУчете Тогда
		СтрокаТЧ.СчетЗатратНУ = БухгалтерскийУчетДополнительный.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТЧ.СчетЗатрат))
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетУчетаБУ".
//
Процедура ВыработкаСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры // ВыработкаСчетУчетаБУОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СчетУчетаНУ".
//
Процедура ВыработкаСчетУчетаНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // ВыработкаСчетУчетаНУОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Исполнители

// Процедура - обработчик события "ПриАктивизацииЯчейки"
//
Процедура ИсполнителиПриАктивизацииЯчейки(Элемент)
	
	ИмяЯчейки = Элемент.ТекущаяКолонка.Имя;
	Если (Лев(ИмяЯчейки, 4) = "День") И (Исполнители.Количество() > 0) И (Элемент.ТекущаяСтрока <> Неопределено) Тогда
		ТекстЯчейки = "";
		СтрокаИндексДня = Сред(ИмяЯчейки, 5);
		Для ИндексМассиваПриставок = 0 По 2 Цикл
			НазваниеЯчейкиВидВремени = МассивПриставок[ИндексМассиваПриставок] + "ВидВремени"+СтрокаИндексДня;
			НазваниеЯчейкиДней = МассивПриставок[ИндексМассиваПриставок] + "Часов"+СтрокаИндексДня;
			КоличествоЧасов = Строка(Элемент.ТекущаяСтрока[НазваниеЯчейкиДней]);
			Если КоличествоЧасов = "0" Тогда
				КоличествоЧасов = "";
			КонецЕсли;
			ВидВремени = Элемент.ТекущаяСтрока[НазваниеЯчейкиВидВремени];
			Если НЕ ВидВремени.Пустая() Тогда
				ТекстЯчейки = ТекстЯчейки + Символы.ПС + ВидВремени.БуквенныйКод + " " + КоличествоЧасов;
			КонецЕсли;
		КонецЦикла;	
		ТекстЯчейки = Сред(ТекстЯчейки, 2);
		ТекущаяЯчейка = Элемент.ТекущаяКолонка.ЭлементУправления;
		Если ТекущаяЯчейка.Значение <> ТекстЯчейки Тогда
			ТекущаяЯчейка.Значение = ТекстЯчейки;
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения"
//
Процедура ИсполнителиПередНачаломИзменения(Элемент, Отказ)
	
	ИмяЯчейки = Элемент.ТекущаяКолонка.Имя;
	Если (Лев(ИмяЯчейки, 4) = "День") И (Исполнители.Количество() > 0) И (Элемент.ТекущаяСтрока <> Неопределено) Тогда
		ТекстЯчейки = "";
		СтрокаИндексДня = Сред(ИмяЯчейки, 5);
		Для ИндексМассиваПриставок = 0 По 2 Цикл
			НазваниеЯчейкиВидВремени = МассивПриставок[ИндексМассиваПриставок] + "ВидВремени"+СтрокаИндексДня;
			НазваниеЯчейкиДней = МассивПриставок[ИндексМассиваПриставок] + "Часов"+СтрокаИндексДня;
			КоличествоЧасов = Строка(Элемент.ТекущаяСтрока[НазваниеЯчейкиДней]);
			Если КоличествоЧасов = "0" Тогда
				КоличествоЧасов = "";
			КонецЕсли;
			ВидВремени = Элемент.ТекущаяСтрока[НазваниеЯчейкиВидВремени];
			Если НЕ ВидВремени.Пустая() Тогда
				Если ВидВремени.БуквенныйКод = "Я" Тогда
					ТекстЯчейки = "Я " + КоличествоЧасов + Символы.ПС + ТекстЯчейки;
				Иначе
					ТекстЯчейки = ТекстЯчейки + ВидВремени.БуквенныйКод + " " + КоличествоЧасов + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		ТекстЯчейки = Лев(ТекстЯчейки, СтрДлина(ТекстЯчейки)-1);
		ТекущаяЯчейка = Элемент.ТекущаяКолонка.ЭлементУправления;
		Если ТекущаяЯчейка.Значение <> ТекстЯчейки Тогда
			ТекущаяЯчейка.Значение = ТекстЯчейки;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования"
//
Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.КТУ = 1;
		
	КонецЕсли;
	
КонецПроцедуры // ИсполнителиПриНачалеРедактирования()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура ИсполнителиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	СтрокаИндексДня = "";
	НазваниеЯчейкиВидВремени = "";
	НазваниеЯчейкиДней = "";
	ТекстЯчейки = "";
	//Цикл по строкам документа
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		//Цикл по дням
		Для ИндексДня  = 1 По 31 Цикл
			ТекстЯчейки = "";
			СтрокаИндексДня = Строка(ИндексДня);
			// цикл по значениям внутри дня
			Для ИндексМассиваПриставок = 0 По 2 Цикл
				НазваниеЯчейкиВидВремени = МассивПриставок[ИндексМассиваПриставок] + "ВидВремени"+СтрокаИндексДня;
				НазваниеЯчейкиДней = МассивПриставок[ИндексМассиваПриставок] + "Часов"+СтрокаИндексДня;
				КоличествоЧасов = Строка(ОформлениеСтроки.Данныестроки[НазваниеЯчейкиДней]);
				Если КоличествоЧасов = "0" Тогда
					КоличествоЧасов = "";
				КонецЕсли;
				ВидВремени = ОформлениеСтроки.Данныестроки[НазваниеЯчейкиВидВремени];
				Если НЕ ВидВремени.Пустая() Тогда
					Если ВидВремени.БуквенныйКод = "Я" Тогда
						ТекстЯчейки = "Я " + КоличествоЧасов + Символы.ПС + ТекстЯчейки;
					Иначе
						ТекстЯчейки = ТекстЯчейки + ВидВремени.БуквенныйКод + " " + КоличествоЧасов + Символы.ПС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			ТекстЯчейки = Лев(ТекстЯчейки, СтрДлина(ТекстЯчейки)-1);
			ТекущаяЯчейка = ОформлениеСтроки.Ячейки["День"+СтрокаИндексДня];
			Если ТекущаяЯчейка.Значение <> ТекстЯчейки Тогда
				ТекущаяЯчейка.Значение = ТекстЯчейки;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Исполнители, ОформленияСтрок);
	
КонецПроцедуры // ИсполнителиПриПолученииДанных()

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура ИсполнителиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораРаботника(ВыбранноеЗначение);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ИсполнителиОбработкаВыбора()

// Процедура - обработчик события "ПередУдалением"
//
Процедура ИсполнителиПередУдалением(Элемент, Отказ)
	
	Если Не Отказ Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповестить("ПодборОтменаВыбора", ДанныеСтроки.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

// Процедура - обработчик события "ПередОкончаниемРедактирования"
//
Процедура ИсполнителиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПодборВыбор", ДанныеСтроки.Сотрудник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Исполнители

// Процедура - обработчик события "ПриИзменении" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнителиСотрудникПриИзменении(Элемент)
	ЭлементыФормы.Исполнители.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
	ОбработкаВыбораРаботника(Элемент.Значение, Ложь, Ложь);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнителиСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// переопеределим выбор физлица на выбор из списка регистра сведений
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
		
	Иначе
		ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение, , , Подразделение);
		
	КонецЕсли;
	
КонецПроцедуры // ИсполнителиСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнителиСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, ?(ОтражатьВБухгалтерскомУчете,"РаботникиОрганизации","Работники"), Текст, Организация);
	
КонецПроцедуры // ИсполнителиСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнителиСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, ?(ОтражатьВБухгалтерскомУчете,"РаботникиОрганизации","Работники"), Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // ИсполнителиСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" полей ввода часов
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнителиДеньОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ОбработкаВводаДанныхВЯчейку(Элемент, Текст, Значение, СтандартнаяОбработка, Сред(ЭлементыФормы.Исполнители.ТекущаяКолонка.Имя, 5));
	ОбновитьСуммуОтработанныхДнейИЧасов();
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ВидВремени
//
Процедура ИсполнителиВидВремениПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Исполнители.ТекущаяСтрока;
	КолонкиТаблицы = ЭлементыФормы.Исполнители.Колонки;
	ИскомоеЗначение = Элемент.Значение;
	Если НЕ ИскомоеЗначение.Пустая() 
		И ((ТекущаяСтрока.ВидВремени1 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени1.ЭлементУправления <> Элемент)
		ИЛИ (ТекущаяСтрока.ВидВремени2 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени2.ЭлементУправления <> Элемент)	
		ИЛИ (ТекущаяСтрока.ВидВремени3 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени3.ЭлементУправления <> Элемент)
		ИЛИ (ТекущаяСтрока.ВидВремени4 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени4.ЭлементУправления <> Элемент)
		ИЛИ (ТекущаяСтрока.ВидВремени5 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени5.ЭлементУправления <> Элемент)) Тогда
		Предупреждение("Данный вид времени уже введен");
		Элемент.Значение = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ВидВремени
//
Процедура ИсполнителиВидВремениНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ФормаВыбораВидаВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаСдельныйНаряд");
	
	СписокВидовВремени = Новый СписокЗначений;
	СписокВидовВремени.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Работа);
	СписокВидовВремени.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Праздники);
	СписокВидовВремени.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы);
	СписокВидовВремени.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы);
	СписокВидовВремени.Добавить(Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные);
	ФормаВыбораВидаВремени.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаВремени.Отбор.Ссылка.Значение = СписокВидовВремени;
	ФормаВыбораВидаВремени.Отбор.Ссылка.Использование = Истина;
	
	ФормаВыбораВидаВремени.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ВидВремени
//
Процедура ИсполнителиВидВремениОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если МассивДопустимыхВидовВремени.Найти(ВыбранноеЗначение)= Неопределено Тогда
		Сообщить("Документ не предназначен для ввода отработанного времени по виду времени: " + ВыбранноеЗначение, СтатусСообщения.Внимание);
		ВыбранноеЗначение = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка()
	КонецЕсли;
	
КонецПроцедуры

Процедура ИсполнителиВидВремени1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

Процедура ИсполнителиВидВремени2ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

Процедура ИсполнителиВидВремени3ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

Процедура ИсполнителиВидВремени4ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

Процедура ИсполнителиВидВремени5ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

Процедура ИсполнителиВидВремени1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени"));
КонецПроцедуры

Процедура ИсполнителиВидВремени2АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени"));
КонецПроцедуры

Процедура ИсполнителиВидВремени3АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени"));
КонецПроцедуры

Процедура ИсполнителиВидВремени4АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени"));
КонецПроцедуры

Процедура ИсполнителиВидВремени5АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("СправочникСсылка.КлассификаторИспользованияРабочегоВремени"));
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Проект"
//
Процедура ВыработкаПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ВыработкаПроектНачалоВыбора()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мОбработкаПодбораПоСтроке					= Ложь;
мТекстПодбораПоСтроке						= "";
мПоследнееЗначениеЭлементаПодбораПоСтроке	= Неопределено;

МассивПриставок = Новый Массив(3);
МассивПриставок[0] = "Первый";
МассивПриставок[1] = "Второй";
МассивПриставок[2] = "Третий";

мБуквенныеОбозначения = Новый Соответствие;
Запрос = Новый Запрос("Выбрать Ссылка, БуквенныйКод Из Справочник.КлассификаторИспользованияРабочегоВремени");
Выборка = Запрос.Выполнить().Выбрать();
Пока Выборка.Следующий() Цикл
	мБуквенныеОбозначения[ВРег(Выборка.БуквенныйКод)] = Выборка.Ссылка;
КонецЦикла;

ДлинаСуток = 86400;
ПерваяДата = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
ПерваяДата = ПерваяДата - ДеньНедели(ПерваяДата) * ДлинаСуток;
ДниНедели = Новый Соответствие;
Для ДеньНедели = 1 По 7 Цикл
	ДниНедели.Вставить(ДеньНедели, НРег(Формат(ПерваяДата + ДеньНедели * ДлинаСуток,"ДФ=ддд")));
КонецЦикла;

// Допустимые для ввода виды времени
МассивДопустимыхВидовВремени = Новый Массив(5);
МассивДопустимыхВидовВремени[0] = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
МассивДопустимыхВидовВремени[1] = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;
МассивДопустимыхВидовВремени[2] = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
МассивДопустимыхВидовВремени[3] = Справочники.КлассификаторИспользованияРабочегоВремени.Праздники;
МассивДопустимыхВидовВремени[4] = Справочники.КлассификаторИспользованияРабочегоВремени.Сверхурочные;