////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мПредыдущееЗначениеДнейНеВыплаты;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит суммы текущей строки
Перем мСтарыеЗначения;

// Диалог настройки периода
Перем мНастройкаПериода;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// Хранит учетную политику взаиморасчетов
Перем мУпрощенныйУчетВзаиморасчетов;

// Состояние выплаченности (0 - нет, <1 - частично, 1 - полностью)
Перем мОплатаСтатус;
Перем мОплатаТекст;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Зарплата,ЭлементыФормы.КоманднаяПанельЗарплата);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет видимостью элементов формы диалога.
//
Процедура УправлениеДоступностьюЭлементовФормы()
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();

	ДоступностьКассовыхФорм = СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу;
	ДоступностьБанковскихФорм = СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк;
	
	// изменять документ можно, пока не началась оплата
	РедактированиеРазрешено = НЕ Проведен Или мОплатаСтатус = 0 Или мУпрощенныйУчетВзаиморасчетов;
	
	// изменять отметки можно, пока есть не оплаченные строки
	РедактированиеОтметкиРазрешено = ДоступностьКассовыхФорм И (НЕ Проведен Или мОплатаСтатус <> 1);
	
	ПолеВвода = Тип("ПолеВвода");
	Кнопка = Тип("Кнопка");
	ТабличноеПоле = Тип("ТабличноеПоле");
	КоманднаяПанель = Тип("КоманднаяПанель");
	Для каждого ЭУ Из ЭлементыФормы Цикл
		ТипЭУ = Тип(ЭУ);
		Если ТипЭУ = ПолеВвода Тогда
			ЭУ.ТолькоПросмотр = Не РедактированиеРазрешено
		ИначеЕсли ТипЭУ = Кнопка Тогда
			ЭУ.Доступность = РедактированиеРазрешено
		ИначеЕсли ТипЭУ = ТабличноеПоле Тогда
			Если ЭУ.Имя = "Зарплата" Тогда
				ЭУ.ИзменятьСоставСтрок = РедактированиеРазрешено;
				Для каждого Колонка Из ЭУ.Колонки Цикл
					Если Колонка.Имя = "НомерСтроки" Тогда
						Продолжить;	
					ИначеЕсли Колонка.Имя = "Физлицо" Тогда
						Колонка.ЭлементУправления.ТолькоПросмотр = Не РедактированиеРазрешено
					ИначеЕсли Колонка.Имя = "ВыплаченностьЗарплаты" Тогда	
						Колонка.ТолькоПросмотр = Не РедактированиеОтметкиРазрешено
					ИначеЕсли Колонка.Имя = "ВыплатаЗарегистрированаДокументом" Тогда
						Продолжить;
					Иначе
						Колонка.ТолькоПросмотр = Не РедактированиеРазрешено
					КонецЕсли;
				КонецЦикла;
			Иначе
				ЭУ.ТолькоПросмотр = Не РедактированиеРазрешено
			КонецЕсли;
		ИначеЕсли ТипЭУ = КоманднаяПанель Тогда
			Для каждого КнопкаКП Из ЭУ.Кнопки Цикл
				Если КнопкаКП.ТипКнопки = ТипКнопкиКоманднойПанели.Действие И КнопкаКП.ИзменяетДанные Тогда
					КнопкаКП.Доступность = РедактированиеРазрешено;
				ИначеЕсли КнопкаКП.ТипКнопки = ТипКнопкиКоманднойПанели.Подменю Тогда
					Для каждого КнопкаКП Из КнопкаКП.Кнопки Цикл
						Если КнопкаКП.ТипКнопки = ТипКнопкиКоманднойПанели.Действие И КнопкаКП.ИзменяетДанные Тогда
							КнопкаКП.Доступность = РедактированиеРазрешено;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		Иначе
			
		КонецЕсли;
	КонецЦикла;
	
	// Устанавливаем показ полей в зависисости от способа выплаты
	ЭлементыФормы.ПанельСпособаВыплаты.Видимость = ДоступностьБанковскихФорм;
	
	ЭлементыФормы.КоманднаяПанельЗарплата.Кнопки.ПодменюЗамены.Кнопки.ВыплатитьВсе.Доступность	= РедактированиеОтметкиРазрешено;
	ЭлементыФормы.КоманднаяПанельЗарплата.Кнопки.ПодменюЗамены.Кнопки.Выплатить.Доступность		= РедактированиеОтметкиРазрешено;
	ЭлементыФормы.КоманднаяПанельЗарплата.Кнопки.ПодменюЗамены.Кнопки.Депонировать.Доступность	= РедактированиеОтметкиРазрешено;
	
	ЭлементыФормы.КонтекстнаяКоманднаяПанель.Кнопки.Выплачено.Доступность	= РедактированиеОтметкиРазрешено;
	ЭлементыФормы.КонтекстнаяКоманднаяПанель.Кнопки.Депонировано.Доступность= РедактированиеОтметкиРазрешено;
	ЭлементыФормы.КонтекстнаяКоманднаяПанель.Кнопки.НеВыплачено.Доступность	= РедактированиеОтметкиРазрешено;
	
	ЭлементыФормы.Зарплата.Колонки.ВыплаченностьЗарплаты.Видимость			= ДоступностьКассовыхФорм;
	ЭлементыФормы.Зарплата.Колонки.ВыплаченностьЗарплаты.ИзменятьВидимость	= ДоступностьКассовыхФорм;
	
	ЭлементыФормы.Зарплата.Колонки.ВыплатаЗарегистрированаДокументом.Видимость			= ДоступностьКассовыхФорм И НЕ мУпрощенныйУчетВзаиморасчетов;
	ЭлементыФормы.Зарплата.Колонки.ВыплатаЗарегистрированаДокументом.ИзменятьВидимость	= ДоступностьКассовыхФорм И НЕ мУпрощенныйУчетВзаиморасчетов;
	
	РаботаСДиалогамиЗК.ЗаполнитьКнопкиКоманднойПанелиСпискомКоманд(
		ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВвестиНаОсновании.Кнопки,
		ЗарплатаКВыплатеОрганизацийПереопределяемый.СписокДокументовВводимыхНаОсновании(ЭтотОбъект),
		Новый Действие("ДействиеВводНаОсновании"));
	
	КнопкиМенюПерейти = ЭлементыФормы.ДействияФормы.Кнопки.ПодменюПерейти.Кнопки;
	Если ДоступностьКассовыхФорм И НЕ мУпрощенныйУчетВзаиморасчетов Тогда
		Если КнопкиМенюПерейти.Найти("ВыплатаЗарплатыРасходнымиОрдерами") = Неопределено Тогда
			НоваяКнопка = КнопкиМенюПерейти.Вставить(0, "ВыплатаЗарплатыРасходнымиОрдерами", ТипКнопкиКоманднойПанели.Действие, "Выплата зарплаты расходными ордерами", Новый Действие("ДействияФормыВыплатаЗарплатыРасходнымиОрдерами"));
			НоваяКнопка = КнопкиМенюПерейти.Вставить(1, "ВыплатаЗарплатыРасходнымиОрдерамиРазделитель", ТипКнопкиКоманднойПанели.Разделитель);
		КонецЕсли;
	ИначеЕсли КнопкиМенюПерейти.Найти("ВыплатаЗарплатыРасходнымиОрдерами") <> Неопределено Тогда
		КнопкиМенюПерейти.Удалить(0); // ВыплатаЗарплатыРасходнымиОрдерами
		КнопкиМенюПерейти.Удалить(0); // ВыплатаЗарплатыРасходнымиОрдерамиРазделитель
	КонецЕсли;
	
	// Устанавливаем показ полей в завимисости от характера выплаты
	
	ТипОснования = ЗарплатаКВыплатеОрганизацийПереопределяемый.ТипОснованияПоХарактеруВыплаты(ХарактерВыплаты);
	Если ТипОснования = Неопределено Тогда
		
		ЭлементыФормы.ПанельХарактераВыплаты.Видимость = Ложь;
		
	Иначе
		
		ЭлементыФормы.ПанельХарактераВыплаты.Видимость = Истина;
		
		МассивТипов = Новый Массив();
		МассивТипов.Добавить(ТипОснования);
		НовоеОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
		ЭлементыФормы.ДокументОснование.ОграничениеТипа = НовоеОписаниеТипов;
		Если РедактированиеРазрешено Тогда
			ПриведенноеОснование = НовоеОписаниеТипов.ПривестиЗначение(ДокументОснование);
			Если ДокументОснование <> ПриведенноеОснование Тогда
				ДокументОснование = ПриведенноеОснование;
			КонецЕсли
		КонецЕсли;
		
	КонецЕсли;
	
	// Настройка колонок списка сотрудников в зависимости от характера выплаты
	ПоказыватьНачисленоУдержано = 
		ХарактерВыплаты <> Перечисления.ХарактерВыплатыЗарплаты.ПлановыйАванс
		И ХарактерВыплаты <> Перечисления.ХарактерВыплатыЗарплаты.АвансЗаПервуюПоловинуМесяца;
	ЭлементыФормы.Зарплата.Колонки.Начислено.Видимость = ПоказыватьНачисленоУдержано;
	ЭлементыФормы.Зарплата.Колонки.Удержано.Видимость = ПоказыватьНачисленоУдержано;
	ЭлементыФормы.Зарплата.Колонки.Начислено.ИзменятьВидимость = ПоказыватьНачисленоУдержано;
	ЭлементыФормы.Зарплата.Колонки.Удержано.ИзменятьВидимость = ПоказыватьНачисленоУдержано;
	
	// Колонку компенсации показываем только при наличии задержки
	ЗарплатаКВыплатеОрганизацийСервис.ОтобразитьЭУКомпенсацииЗаЗадержкуЗарплаты(ДнейНеВыплаты > 0, ЭтаФорма, Новый Действие("ДействияФормыЗарегистрироватьДоходыПоКомпенсации")); 
	
	// Доступность параметров заполнения и расчета
	ЭлементыФормы.НадписьПараметрыЗаполнения.ГиперСсылка = 
		ЗначениеЗаполнено(ЗарплатаКВыплатеОрганизацийСервис.ИмяСтраницыНастройкиРасчета(ХарактерВыплаты));
		
	// Рассчитывать и проводить можно при заполнении ключевых полей
	РасчетРазрешен = 
		РедактированиеРазрешено
		И ЗначениеЗаполнено(Организация) 
		И ЗначениеЗаполнено(ХарактерВыплаты)
		И (СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу ИЛИ ЗначениеЗаполнено(Банк))
		И (ТипОснования = Неопределено ИЛИ ЗначениеЗаполнено(ДокументОснование));
	
	ЭлементыФормы.КоманднаяПанельЗарплата.Кнопки.Подбор.Доступность			= РасчетРазрешен;
	ЭлементыФормы.КоманднаяПанельЗарплата.Кнопки.ПодборПоУсловию.Доступность= РасчетРазрешен; 
	
	ЭлементыФормы.КоманднаяПанельЗарплата.Кнопки.УдалитьПустые.Доступность	= РедактированиеРазрешено;
	
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.Доступность		= РедактированиеРазрешено;
	ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Записать.Доступность = РедактированиеРазрешено; 

	
	// Документы на выплату/депонирование можно создавать только по проведенному и не полностью оплаченному документу
	Для Каждого Кнопка Из ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВвестиНаОсновании.Кнопки Цикл
		Кнопка.Доступность	= Проведен И мОплатаСтатус <> 1;
	КонецЦикла;
	
	Если мОплатаСтатус = 0 Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.КнопкаПоУмолчанию = Истина;
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеДоступностьюЭлементовФормы()

Процедура ПроверитьДокументыВведенныеНаОсновании()
	
	ЗапросПоПлатежнымДокументам = Новый Запрос;
	ЗапросПоПлатежнымДокументам.УстановитьПараметр("Ведомость", Ссылка);
	
	Если СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк Тогда
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	1 КАК ПорядокТипа,
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка) КАК Представление,
		|	&КоличествоФизлиц КАК КоличествоФизлиц
		|ИЗ
		|	Документ.ПлатежноеПоручениеИсходящее.ПеречислениеЗаработнойПлаты КАК ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты
		|ГДЕ
		|	ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ведомость = &Ведомость
		|	И ПлатежноеПоручениеИсходящееПеречислениеЗаработнойПлаты.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	2,
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор,
		|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор),
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо)
		|ИЗ
		|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|ГДЕ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = &Ведомость
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор";
		
		ЗапросПоПлатежнымДокументам.УстановитьПараметр("КоличествоФизлиц", Зарплата.Количество());
		
		ЗапросПоПлатежнымДокументам.Текст = ТекстЗапроса;
		
		РезультатЗапроса = ЗапросПоПлатежнымДокументам.Выполнить();
		
	Иначе
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	0 КАК ПорядокТипа,
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор КАК Ссылка,
		|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор) КАК Представление,
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо) КАК КоличествоФизлиц
		|ИЗ
		|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|ГДЕ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = &Ведомость
		|
		|СГРУППИРОВАТЬ ПО
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор";
		
		ЗапросПоПлатежнымДокументам.Текст = ТекстЗапроса;
		
	КонецЕсли;
	
	РезультатЗапроса = ЗапросПоПлатежнымДокументам.Выполнить();
	
	УжеОплачивали = НЕ РезультатЗапроса.Пустой();
	
	Если УжеОплачивали Тогда
		
		ПлатежныеДокументы = РезультатЗапроса.Выгрузить();
		ПлатежныеДокументы.Сортировать("ПорядокТипа, Представление");
		ПлатежныеДокументы.Свернуть("Ссылка, Представление", "КоличествоФизлиц");
		
		КоличествоДоктов = ПлатежныеДокументы.Количество();
		КоличествоФизЛиц = Мин(ПлатежныеДокументы.Итог("КоличествоФизлиц"), Зарплата.Количество());
		
		Если мУпрощенныйУчетВзаиморасчетов И КоличествоДоктов = 1 И ТипЗнч(ПлатежныеДокументы[0].Ссылка) = Тип("ДокументСсылка.ЗарплатаКВыплатеОрганизаций") Тогда
			
			мОплатаТекст = "(используется упрощенный учет взаиморасчетов)";
			
		Иначе	
			
			МаксДоковДляПоказа = 3;
			
			мОплатаТекст = ?(КоличествоДоктов = 1,"документом ", "документами ");
			Для Н = 1 По Мин(КоличествоДоктов, МаксДоковДляПоказа) Цикл
				мОплатаТекст = мОплатаТекст + ?(Н=1,"",", ") + ПлатежныеДокументы[Н-1].Представление;
			КонецЦикла;
			
			Если КоличествоДоктов >= МаксДоковДляПоказа Тогда
				мОплатаТекст = мОплатаТекст + "...";
			КонецЕсли;
		
		КонецЕсли;
		
		Если Зарплата.Количество() = 0 Тогда
			мОплатаСтатус = 1;
		Иначе
			мОплатаСтатус = КоличествоФизЛиц / Зарплата.Количество();
		КонецЕсли;
		
	Иначе	
		мОплатаСтатус = 0;
		мОплатаТекст = "";
	КонецЕсли;		
	
КонецПроцедуры

Процедура УстановитьНадписьНастройкаРасчета()
	
	ЭлементыФормы.ИнформационнаяНадписьПараметрыЗаполнения.Заголовок = ЗарплатаКВыплатеОрганизацийСервис.ПолучитьПредставлениеНастройкиРасчета(ЭтотОбъект);
	
КонецПроцедуры

// Возвращает список доступных характеров выплат
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокДоступныхХарактеровВыплат(УчетЗадолженностиПоМесяцам = "")

	СписокХарактеровВыплаты = Новый СписокЗначений;

	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.ПлановыйАванс);
	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.АвансЗаПервуюПоловинуМесяца);
	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.ПоБольничнымЛистам);
	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.ПоБеременностиИРодам);
	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.Отпускные);
	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.Командировочные);
	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.Премии);
	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.РасчетПриУвольнении);
	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.ПрочиеРазовыеНачисления);
	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.ВозвратНДФЛ);
	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.Дивиденды);
	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.ПособияФСС);
	Если УчетЗадолженностиПоМесяцам = "" Тогда
		УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
	КонецЕсли;
	Если НЕ УчетЗадолженностиПоМесяцам Тогда
		СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.Задолженность);
	КонецЕсли;
	
	Возврат СписокХарактеровВыплаты

КонецФункции

Функция ПолучитьОписаниеСостоянияДокумента(Заполнен, ЗаполненСОшибками, Проведен, ЕстьНулевыеСуммы) 

	ТекстСообщения = "";
	ВажностьСообщения = "";                         
	
	Если Не Заполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ не заполнен.";
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Поля документа заполнены не полностью или неверно.";
	ИначеЕсли ЕстьНулевыеСуммы Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Есть строки с нулевыми суммами.";
	ИначеЕсли Не Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ не проведен.";
	ИначеЕсли Проведен Тогда
		ВажностьСообщения = "Информация";
		Если мОплатаСтатус = 0 Тогда
			Если мУпрощенныйУчетВзаиморасчетов Тогда
				ТекстОплаты = "Для оплаты документа достаточно его провести (используется упрощенный учет взаиморасчетов)";
			Иначе	
				ПредлагаемыйДокумент = ?(СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезБанк, "Платежное поручение исходящее", "Расходный кассовый ордер");
				ТекстОплаты = "Для оплаты документа можно ввести на основании " + ПредлагаемыйДокумент;
			КонецЕсли;	
		Иначе
			ТекстОплаты = 
				"Ведомость "
				+ ?(мОплатаСтатус = 1, "полностью", "частично")
				+ " оплачена "
			    + мОплатаТекст;
		КонецЕсли;
		ТекстСообщения = "Документ проведен." +" "+ ТекстОплаты; 
	КонецЕсли;
	
	Возврат Новый Структура("ТекстСообщения,ВажностьСообщения", ТекстСообщения, ВажностьСообщения)

КонецФункции

Процедура ОбновитьОписаниеСостоянияДокумента()   
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация)
		или Зарплата.Количество() = 0;
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Премии
		Или ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПрочиеРазовыеНачисления
		Или ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ВозвратНДФЛ
		Или ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПособияФСС Тогда
		
		НеЗаполнен = НеЗаполнен Или Не ЗначениеЗаполнено(ДокументОснование);
		
	КонецЕсли;
	
	ЗаполненСОшибками = Не ЗначениеЗаполнено(ХарактерВыплаты);
	ЗаполненСОшибками = ЗаполненСОшибками Или Зарплата.НайтиСтроки(Новый Структура("Физлицо",Справочники.ФизическиеЛица.ПустаяСсылка())).Количество() > 0;
	
    ЕстьНулевыеСуммы = Ложь;
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		Если (СтрокаЗарплаты.Сумма + СтрокаЗарплаты.КомпенсацияЗаЗадержкуЗарплаты) <= 0 Тогда
			ЕстьНулевыеСуммы = Истина;
			Прервать
		КонецЕсли;
	КонецЦикла;	
	
	ОписаниеСостоянияДокумента = ПолучитьОписаниеСостоянияДокумента(Не НеЗаполнен, ЗаполненСОшибками, Проведен, ЕстьНулевыеСуммы);// поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Функция МожноСоздаватьПлатежныеДокументы()
	
	Если НЕ Проведен Тогда
		Предупреждение("Создавать платежные документы можно только по проведенному документу!");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура ОткрытьПлатежныйДокумент(Физлицо)
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор
	|ИЗ
	|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
	|ГДЕ
	|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = &Ведомость
	|	И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо = &Физлицо";
	
	Запрос.УстановитьПараметр("Ведомость", Ссылка);
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ФормаДокумента = Выборка.Регистратор.ПолучитьФорму(, ЭтаФорма, Новый УникальныйИдентификатор);
		ФормаДокумента.Открыть();
	КонецЕсли;	
	
КонецПроцедуры

Функция ЗаписатьПередСозданиемНаОсновании()
	
	Возврат РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, "Перед вводом на основании необходимо записать документ. Продолжить?")
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// используем заполненность реквизита как признак инициализированности документа
		Если Не ЗначениеЗаполнено(ХарактерВыплаты) Тогда
			// Заполнить реквизиты значениями по умолчанию.
			ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
			
			Если НЕ ЗначениеЗаполнено(ХарактерВыплаты) Тогда
				ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(СпособВыплаты) Тогда
				СпособВыплаты = Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу
			КонецЕсли;
			
			ЗарплатаКВыплатеОрганизацийСервис.ЗаполнитьПоНастройкам(ЭтотОбъект);
			
			ПроцентВыплаты = 100;
		КонецЕсли;
		
		мУпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");
		
		РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, "Документ не заполнен", "СообщениеОПроблемах");
		
	Иначе
		
		УчетЗадолженностиПоМесяцам = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
		Если УчетЗадолженностиПоМесяцам И ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Задолженность И Организация <> Справочники.Организации.ПустаяСсылка() Тогда
			Сообщить("Характер выплаты указан неверно, т.к. организация ведет учет задолженности в разрезе месяцев ее образования (см. учетную политику по персоналу)");
		КонецЕсли;
		
		мУпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
		
		ПроверитьДокументыВведенныеНаОсновании();
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("Сумма");

	// Установить ограничение - изменять видимость колонок для табличной части Зарплата
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Зарплата.Колонки, СтруктураКолонок);
	ЗарплатаКВыплатеОрганизацийСервис.ОтобразитьЭУКомпенсацииЗаЗадержкуЗарплаты(ДнейНеВыплаты > 0, ЭтаФорма, Новый Действие("ДействияФормыЗарегистрироватьДоходыПоКомпенсации")); 
	ЭлементыФормы.ХарактерВыплаты.ДоступныеЗначения = ПолучитьСписокДоступныхХарактеровВыплат();

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	УправлениеДоступностьюЭлементовФормы();
	УстановитьНадписьНастройкаРасчета();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мПредыдущееЗначениеДнейНеВыплаты = ДнейНеВыплаты;

	// Установить настройку периода по умолчанию
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Зарплата;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			Зарплата.Очистить();
			ЭтаФорма.Обновить();

			ТаблицаСотрудников = ЗначениеВыбора.Данные.Выгрузить();
			Если ТаблицаСотрудников.Количество() > 0 Тогда
				
				ТаблицаСотрудников.Свернуть("ФизЛицо");
				
				Автозаполнение(ТаблицаСотрудников.ВыгрузитьКолонку("ФизЛицо"));
				
				Если Зарплата.Количество() = 0 и глЗначениеПеременной("глОбработкаСообщений").Сообщения.Строки.Количество() = 0 Тогда  
					ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не обнаружены данные для записи в табличную часть документа.");
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеВыплатыПоВедомостиРегл" И Параметр[Ссылка] <> Неопределено 
		ИЛИ ИмяСобытия = "ОбновитьФорму" И Параметр = Ссылка Тогда 
		
		мУпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");
		
		ПроверитьДокументыВведенныеНаОсновании();
		УправлениеДоступностьюЭлементовФормы();
		ОбновитьОписаниеСостоянияДокумента();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	Оповестить("ОбновитьФорму", Ссылка);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик нажатия на кнопку "Перечитать"
//
Процедура ДействияФормыПеречитать(Кнопка)
	
	Если Модифицированность() И Вопрос("Документ был изменен", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Прочитать();
	
	Оповестить("ОбновитьФорму", Ссылка)

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура вызова формы "ВыплатаЗарплатыРасходнымиОрдерами"
//
Процедура ДействияФормыВыплатаЗарплатыРасходнымиОрдерами(Кнопка)
	
	ТекстВопроса = "Действие может быть выполнено только после записи документа. Записать?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, ТекстВопроса) Тогда
		Возврат;
	КонецЕсли;

	ФормированиеРКО = Обработки.ВыплатаЗарплатыРасходнымиОрдерами.Создать();
	ФормированиеРКО.Организация = Организация;
	ФормированиеРКО.ПлатежнаяВедомость = Ссылка;
	ФормированиеРКО.Автозаполнение();
	ФормированиеРКО.ПолучитьФорму().Открыть();		
	
КонецПроцедуры

Процедура ДействиеВводНаОсновании(Кнопка)
	
	Если МожноСоздаватьПлатежныеДокументы() Тогда
		Если ЗаписатьПередСозданиемНаОсновании() Тогда
			ЗарплатаКВыплатеОрганизацийПереопределяемый.ОбработкаВводаНаОсновании(Кнопка.Имя, ЭтотОбъект, ЭтаФорма);			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДействияФормыЗарегистрироватьДоходыПоКомпенсации(Кнопка)
	ЗарегистрироватьДоходыПоКомпенсации(ЭтаФорма)
КонецПроцедуры


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации); // ПериодРегистрации изменяем
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации); // привели значение Элемента к правильному представлению
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление); // ПериодРегистрации изменяем
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации); // привели значение Элемента к правильному представлению
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	мУпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");

	УчетЗадолженностиПоМесяцам	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
	Если УчетЗадолженностиПоМесяцам И ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Задолженность И Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		Сообщить("Характер выплаты указан неверно, т.к. организация ведет учет задолженности в разрезе месяцев ее образования (см. учетную политику по персоналу)");
	КонецЕсли;
	
	ЭлементыФормы.ХарактерВыплаты.ДоступныеЗначения = ПолучитьСписокДоступныхХарактеровВыплат(УчетЗадолженностиПоМесяцам);

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура СпособВыплатыПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

Процедура БанкПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы();
	
КонецПроцедуры

Процедура ХарактерВыплатыПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы();
	
	ЗарплатаКВыплатеОрганизацийСервис.ЗаполнитьПоНастройкам(ЭтотОбъект);
	УстановитьНадписьНастройкаРасчета();

КонецПроцедуры

Процедура ДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Дивиденды Тогда
		ФормаВыбора = Документы.НачислениеДивидендовОрганизаций.ПолучитьФормуВыбора(,Элемент);
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Премии Тогда
		ФормаВыбора = Документы.ПремииРаботниковОрганизаций.ПолучитьФормуВыбора(,Элемент);
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПрочиеРазовыеНачисления Тогда
		ФормаВыбора = Документы.РегистрацияРазовыхНачисленийРаботниковОрганизаций.ПолучитьФормуВыбора(,Элемент);
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ВозвратНДФЛ Тогда
		ФормаВыбора = Документы.НДФЛВозвратНалога.ПолучитьФормуВыбора(,Элемент);
	ИначеЕсли ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПособияФСС Тогда
		ФормаВыбора = Документы.НачислениеЕдиновременныхПособийЗаСчетФСС.ПолучитьФормуВыбора(,Элемент);
	Иначе
		Возврат
	КонецЕсли;
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Отбор.Организация.Установить(Организация);
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора["Организация"].Доступность = Ложь;
	
	Если ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ВозвратНДФЛ Тогда
		ЭлементОтбораПоПериоду = ФормаВыбора.Отбор.МесяцНалоговогоПериода;
	Иначе
		ЭлементОтбораПоПериоду = ФормаВыбора.Отбор.ПериодРегистрации;
	КонецЕсли;
	ЭлементОтбораПоПериоду.Установить(ПериодРегистрации);
	// При учете взаиморасчетов в разрезе месяцев не стоит выплачивать по документам других периодов
	УчетЗадолженностиПоМесяцам = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчетЗадолженностиПоМесяцам");
	Если УчетЗадолженностиПоМесяцам Тогда
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора[ЭлементОтбораПоПериоду.Имя].Доступность = Ложь;
	КонецЕсли;	

	ФормаВыбора.ДокументСписок.Обновить();
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ДокументОснованиеПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы()
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЗАПОЛНЕНИЯ И РАСЧЕТА ДОКУМЕНТА 

Процедура НадписьПараметрыЗаполненияНажатие(Элемент)
	
	Если Не ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ВозвратНДФЛ Тогда
		
		ФормаНастройкиРасчета=ПолучитьФорму("ФормаНастройкиРасчета");
		ФормаНастройкиРасчета.ОткрытьМодально();
		
		ЭтаФорма.ТекущийЭлемент = ЭлементыФормы.КнопкаЗаполнить;
		
		УстановитьНадписьНастройкаРасчета();
		
		ЗарплатаКВыплатеОрганизацийСервис.ОтобразитьЭУКомпенсацииЗаЗадержкуЗарплаты(ДнейНеВыплаты > 0, ЭтаФорма, Новый Действие("ДействияФормыЗарегистрироватьДоходыПоКомпенсации")); 
		
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаЗаполнитьНажатие(Элемент)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить(Зарплата);
	ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
	ТекстВопроса2 = "Перед заполнением список сотрудников будет очищен. Заполнить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;

	Зарплата.Очистить();
	ЭтаФорма.Обновить();
	
	Автозаполнение();
	
	Если Зарплата.Количество() = 0 и ОбработкаКомментариев.Сообщения.Строки.Количество() = 0 Тогда  
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не обнаружены данные для записи в табличную часть документа.");
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТАБЛИЧНОЙ ЧАСТИ

Процедура КоманднаяПанельЗарплатаПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.Зарплата, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 0);
	
КонецПроцедуры

Процедура КоманднаяПанельЗарплатаПодборПоУсловию(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить(Зарплата);
	ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
	ТекстВопроса2 = "Перед заполнением список сотрудников будет очищен. Заполнить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2, Ложь) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	НеПоказыватьУволенных = ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.ПлановыйАванс И ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УчитыватьНевыходыДляПлановогоАванса");
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации), "РаботникиОрганизаций", Организация, ПодразделениеОрганизации, Истина, Истина,,,,,Истина, НеПоказыватьУволенных);
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

Процедура КоманднаяПанельЗарплатаУдалитьПустые(Кнопка)
	
	УдалитьПустыеСтроки();
	
КонецПроцедуры

Процедура КоманднаяПанельЗарплатаВыплатитьВсе(Кнопка)
	
	ЗарплатаКВыплатеОрганизацийДополнительный.ЗаменаЗначенийКолонкиВыплаченности(ЭтотОбъект, Перечисления.ВыплаченностьЗарплаты.Выплачено, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельЗарплатаВыплатить(Кнопка)
	
	ЗарплатаКВыплатеОрганизацийДополнительный.ЗаменаЗначенийКолонкиВыплаченности(ЭтотОбъект, Перечисления.ВыплаченностьЗарплаты.Выплачено);

КонецПроцедуры

Процедура КоманднаяПанельЗарплатаДепонировать(Кнопка)
	
	ЗарплатаКВыплатеОрганизацийДополнительный.ЗаменаЗначенийКолонкиВыплаченности(ЭтотОбъект, Перечисления.ВыплаченностьЗарплаты.Задепонировано);
	
КонецПроцедуры

Процедура КонтекстнаяКоманднаяПанельВыплачено(Кнопка)
	
	УстановитьВыплаченностьПомеченных(Перечисления.ВыплаченностьЗарплаты.Выплачено);
	
КонецПроцедуры

Процедура КонтекстнаяКоманднаяПанельЗадепонировано(Кнопка)
	
	УстановитьВыплаченностьПомеченных(Перечисления.ВыплаченностьЗарплаты.Задепонировано);
		
КонецПроцедуры

Процедура КонтекстнаяКоманднаяПанельНеВыплачено(Кнопка)
	
	УстановитьВыплаченностьПомеченных(Перечисления.ВыплаченностьЗарплаты.НеВыплачено);
		
КонецПроцедуры

Процедура УстановитьВыплаченностьПомеченных(ВыплаченностьЗарплаты)

	Для Каждого Строка Из ЭлементыФормы.Зарплата.ВыделенныеСтроки Цикл
		Строка.ВыплаченностьЗарплаты = ВыплаченностьЗарплаты;
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ и ее РЕКВИЗИТОВ 

Процедура ЗарплатаПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущаяКолонка = ЭлементыФормы.Зарплата.Колонки.ВыплатаЗарегистрированаДокументом Тогда
		Отказ = Истина;
		ОткрытьПлатежныйДокумент(Элемент.ТекущаяСтрока.Физлицо)
	КонецЕсли;	
КонецПроцедуры

Процедура ЗарплатаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПоказыватьДокументы = ЭлементыФормы.Зарплата.Колонки.ВыплатаЗарегистрированаДокументом.Видимость;
	
	// получим данные для отрисовки в ячейках
	Если ПоказыватьДокументы Тогда
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор,
		|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Регистратор) КАК Представление,
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо КАК Физлицо
		|ИЗ
		|	РегистрСведений.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям
		|ГДЕ
		|	СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Ведомость = &Ведомость
		|	И СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Физлицо В(&Физлица)";
		
		Физлица = Новый Массив;
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			Физлица.Добавить(ОформлениеСтроки.ДанныеСтроки.ФизЛицо)
		КонецЦикла;
		
		Запрос.УстановитьПараметр("Ведомость",Ссылка);
		Запрос.УстановитьПараметр("Физлица",	Физлица);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		ПоказыватьДокументы = Выборка.Количество() > 0;
		
	КонецЕсли;
	
	Точность = ЗарплатаКВыплатеОрганизацийСервис.СпособОкругленияТочность(Округление);
	
	// получим данные для отрисовки в ячейках
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если ПоказыватьДокументы Тогда
			Выборка.Сбросить();
			Если Выборка.НайтиСледующий(ДанныеСтроки.Физлицо, "ФизЛицо") Тогда
				ОформлениеСтроки.Ячейки.ВыплаченностьЗарплаты.ТолькоПросмотр = Истина;
				ОформлениеСтроки.Ячейки.ВыплатаЗарегистрированаДокументом.УстановитьТекст(Выборка.Представление);
			КонецЕсли;
		КонецЕсли;
		
		ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
		
		Если (ДанныеСтроки.Сумма + ДанныеСтроки.КомпенсацияЗаЗадержкуЗарплаты) <= 0 Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		КонецЕсли;

		// Подсвечиваем отрицательные резервы, если они превышают погрешность округления
		// (это случай, когда "многовато" переплачиваем)
		Если ДанныеСтроки.Удержано < -Точность Тогда
			ЯчейкаУдержания = ОформлениеСтроки.Ячейки.Удержано;
			ЯчейкаУдержания.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура ЗарплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Если Не Копирование Тогда
			Элемент.ТекущиеДанные.Авторасчет = Истина;
			Элемент.ТекущиеДанные.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.НеВыплачено;
		Иначе
			Элемент.ТекущиеДанные.Физлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "Обработка выбора" табличного поля.
//
Процедура ЗарплатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ДобавитьРаботника(ВыбранноеЗначение.Физлицо) Тогда
		
		ФизЛица =  Новый Массив();
		ФизЛица.Добавить(ВыбранноеЗначение.Физлицо);
		
		Рассчитать(ФизЛица);
		
	КонецЕсли;
		
КонецПроцедуры

Функция ЕстьВыплатаСотруднику(Физлицо)
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Ложь;
	КонецЕсли;

	СтрокаТЧ = Зарплата.Найти(Физлицо, "ФизЛицо");
	Если СтрокаТЧ  <> Неопределено И СтрокаТЧ <> ЭлементыФормы.Зарплата.ТекущаяСтрока Тогда
		Предупреждение("В документе уже есть выплата этому сотруднику!");
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Процедура ЗарплатаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьВыплатаСотруднику(Элемент.ТекущаяСтрока.Физлицо) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗарплатаФизлицоПриИзменении(Элемент)
	
	ФизЛица =  Новый Массив();
	ФизЛица.Добавить(Элемент.Значение);
	Рассчитать(ФизЛица);

КонецПроцедуры

// Процедура - обработчик события "Начало выбора" поля ввода физического лица.
//
Процедура ЗарплатаФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 0,СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ЗарплатаФизлицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, мГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ЗарплатаФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ЕстьВыплатаСотруднику(ВыбранноеЗначение.Физлицо) Тогда
			Возврат;
		КонецЕсли;
		
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
		ЭлементыФормы.Зарплата.ТекущиеДанные.Авторасчет = Истина;
		ЭлементыФормы.Зарплата.ТекущиеДанные.ВыплаченностьЗарплаты = Перечисления.ВыплаченностьЗарплаты.НеВыплачено;
		
		ФизЛица =  Новый Массив();
		ФизЛица.Добавить(ВыбранноеЗначение.Физлицо);
		Рассчитать(ФизЛица);
			
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ЗарплатаФизлицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 0, Текст, Организация, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ЗарплатаФизлицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 0, Текст, Организация, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки"
//
Процедура ЗарплатаПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(мСтарыеЗначения, ТекущаяСтрока); 
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма"
//
Процедура ЗарплатаСуммаПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Зарплата.ТекущаяСтрока;
	
	Если ТекущаяСтрока.Сумма <> мСтарыеЗначения.Сумма Тогда
		ТекущаяСтрока.Авторасчет = Ложь;
		мСтарыеЗначения.Сумма	= ТекущаяСтрока.Сумма;
	КонецЕсли;
	
	ТекущаяСтрока.Удержано = ТекущаяСтрока.Начислено - ТекущаяСтрока.Сумма;
	
КонецПроцедуры
 
// Процедура - обработчик события "ПриИзменении" поля ввода "Удержано"
//
Процедура ЗарплатаУдержаноПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Зарплата.ТекущаяСтрока;
	
	Если ТекущаяСтрока.Удержано <> мСтарыеЗначения.Удержано Тогда
		ТекущаяСтрока.Авторасчет = Ложь;
		мСтарыеЗначения.Удержано = ТекущаяСтрока.Удержано;
	КонецЕсли;
	
	ТекущаяСтрока.Сумма = ТекущаяСтрока.Начислено - ТекущаяСтрока.Удержано;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "КомпенсацияЗаЗадержкуЗарплаты"
//
Процедура ЗарплатаКомпенсацияЗаЗадержкуЗарплатыПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.Зарплата.ТекущаяСтрока;

	Если Элемент.Значение <> мСтарыеЗначения.КомпенсацияЗаЗадержкуЗарплаты Тогда
		ТекущаяСтрока.Авторасчет = Ложь;
		мСтарыеЗначения.КомпенсацияЗаЗадержкуЗарплаты = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мНастройкаПериода = Новый НастройкаПериода;

мСтарыеЗначения = Новый Структура("Начислено, Удержано, Сумма, КомпенсацияЗаЗадержкуЗарплаты");

мОплатаСтатус = 0;
мОплатаТекст = "";