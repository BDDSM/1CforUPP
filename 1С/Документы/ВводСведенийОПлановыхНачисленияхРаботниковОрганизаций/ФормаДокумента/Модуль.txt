////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мСведенияОВидахРасчетаОснНачислений;

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Ссылка на текущего работника формы
Перем мТекущийСотрудник;

// для синхронизации строк табличных полей
Перем мСинхронизируемыеТабличныеЧасти;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мВалютаРегламентированногоУчета;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
	
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанельОсновныеНачисления);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Обновляет значение отбора строк т.п. начислений
//
// Параметры
//	Сотрудник	- СправочникСсылка.СотрудникиОрганизаций - текущий сотрудник
//
Процедура УстановитьОтборРаботника(Сотрудник)

	ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Значение = Сотрудник;
	
КонецПроцедуры // УстановитьОтборРаботника()

// Процедура формирует таблицу работников на основе данных табличных частей документа
//
// Параметры
//
Процедура ЗаполнитьТаблицуРаботниковОрганизации()
	
	РаботникиОрганизации.Очистить();
	
	ТЗ = ОсновныеНачисления.Выгрузить();
	ТЗ.Свернуть("Сотрудник");
	ТЗ.Сортировать("Сотрудник");
	
	Для Каждого СтрокаТабличнойЧасти Из ТЗ Цикл
		ЗаполнитьЗначенияСвойств(РаботникиОрганизации.Добавить(), СтрокаТабличнойЧасти);
	КонецЦикла;
		
КонецПроцедуры // ЗаполнитьТаблицуРаботниковОрганизации()

// Процедура устанавливает значение показателей начилсения для общих показателей в целом по компании и в целом по подразделению
//
Процедура ПриИзмененииПоказателяНачисления(Значение,парамПоказатель)
	
	ВидРасчета = ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока.ВидРасчета;
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, ВидРасчета);
	КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
	
	Если КоличествоПоказателей > (парамПоказатель - 1) Тогда
		Показатель  = СведенияОВидеРасчета["Показатель" + парамПоказатель];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Тогда
		РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, ОсновныеНачисления.ВыгрузитьКолонку("ВидРасчета"));
		Для каждого СтрокаНачисления Из ОсновныеНачисления Цикл
			ВидРасчета = СтрокаНачисления.ВидРасчета;
			СведенияОВидеРасчета = мСведенияОВидахРасчетаОснНачислений[ВидРасчета];
			КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
			Для СчПоказателей = 1 По КоличествоПоказателей Цикл
				ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
				Если ПоказательВР.Предопределенный Тогда 
					Продолжить;
				КонецЕсли;
				Если ПоказательВР = Показатель Тогда
					СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры //ПриИзмененииПоказателяНачисления

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Ввод сведений о плановых начислениях сотрудников организации");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("Действие");
	СтруктураКолонок.Вставить("ДатаДействия");

	// Установить ограничение - изменять видимость колонок для табличной части ОсновныеНачисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОсновныеНачисления.Колонки, СтруктураКолонок);

	// Активизируем табличное поле
	ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Кнопки "По сотруднику" командных панелей установим в оключенное состояние
	ЭлементыФормы.КоманднаяПанельОсновныеНачисления.Кнопки.ВсеРаботники.Пометка		= Ложь;
	
	// Заполним таблицу работников
	ЗаполнитьТаблицуРаботниковОрганизации();
    РаботникиОрганизации.Индексы.Добавить("Сотрудник");
    
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
		// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
		мМассивЭУ = Новый Массив();
		мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ТабельныйНомерСтрока); 
		Если глЗначениеПеременной("глЕстьВалютныеПоказателиОрганизаций") Тогда
			мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта1);
			мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта2);
			мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта3);
			мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта4);
			мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта5);
			мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта6);
		Иначе
			Для СчПоказателей = 1 По 6 Цикл
				ЭлементыФормы.ОсновныеНачисления.Колонки["Валюта"+СчПоказателей].Видимость = Ложь;
			КонецЦикла;
		КонецЕсли;
		РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;
	
	УстановитьЗаголовкиОрганизацийВФорме();
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			РаботникиОрганизации.Очистить();
			ОсновныеНачисления.Очистить();
			Для Каждого СтрокаТЗ Из ЗначениеВыбора.Данные.Выгрузить() Цикл
				
				СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
				ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокаТЗ);
				
				мТекущийСотрудник	= СтрокаТабличнойЧасти.Сотрудник;
				
			КонецЦикла;
			
			ДанныеДокумента = РаботникиОрганизации.Скопировать();
			ДанныеДокумента.Колонки.Добавить("ДатаДействия", 	ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
		
			ДанныеДокумента.ЗаполнитьЗначения(Дата, "ДатаДействия");
			
			ОсновныеНачисления.Загрузить(ЗаполнениеДокументовЗК.ПолучитьТаблицуДействийСНачислениями(ДанныеДокумента, Ссылка, Дата, Организация, "ДатаДействия"));
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	Оповестить("ОбновитьСписокПлановыхНачислений", ОсновныеНачисления.ВыгрузитьКолонку("Сотрудник"));
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , Организация, )

КонецПроцедуры // ДействияФормыЗаполнить()


// Процедура - обработчик события нажатия кнопки "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 5);
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииПодбор()

// Процедура - обработчик события нажатия кнопки "ВсеРаботники"
//
Процедура КоманднаяПанельОсновныеНачисленияВсеРаботники(Кнопка)
	
	Если ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока <> Неопределено Тогда
		
		Если ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Использование Тогда
			// отключим отбор
			ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Использование = Ложь;
			ЭлементыФормы.КоманднаяПанельОсновныеНачисления.Кнопки.ВсеРаботники.Пометка = Ложь;
			
		Иначе
			// установим отбор
			ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Установить(ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.Сотрудник);
			ЭлементыФормы.КоманднаяПанельОсновныеНачисления.Кнопки.ВсеРаботники.Пометка = Истина;
			
		КонецЕсли;
		
	Иначе
		Сообщить("В таблице сотрудников не выбрана строка!");
		
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельОсновныеНачисленияВсеРаботники()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ОбработкаВыбора" табличного поля
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		РаботникиОрганизации.Добавить().Сотрудник = ВыбранноеЗначение;
		ДобавитьСтрокиНачисленийПоРаботнику(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры // ТабличнаяЧастьОбработкаВыбора()

// Процедура - обработчик события "Перед удалением" строки табличного поля
//
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьСтрокиНачисленийПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

// Процедура - обработчик события "ПриАктивизацииСтроки" табличного поля
//
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)    
    
	Элемент = ЭлементыФормы.РаботникиОрганизации;
    
    ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, Элемент, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		мТекущийСотрудник = Неопределено;
		Возврат;
	КонецЕсли;
	
	// запомним текущего работника
	мТекущийСотрудник	= ДанныеСтроки.Сотрудник;
	
	УстановитьОтборРаботника(ДанныеСтроки.Сотрудник);
    
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииСтроки()

// Процедура - обработчик события "ПередОкончаниемРедактирования" табличного поля
//
Процедура РаботникиОрганизацииПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	// если работник изменился, то по предыдущему работнику удалим строки, а по новому добавим
	Если ДанныеСтроки.Сотрудник <> мТекущийСотрудник Тогда
		УдалитьСтрокиНачисленийПоРаботнику(мТекущийСотрудник);
		// запомним текущего работника
		мТекущийСотрудник = ДанныеСтроки.Сотрудник;
		// добавим строки начислений
		ДобавитьСтрокиНачисленийПоРаботнику(ДанныеСтроки.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПередОкончаниемРедактирования()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
КонецПроцедуры // РаботникиОрганизацииПриПолученииДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица
//
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	УстановитьОтборРаботника(ДанныеСтроки.Сотрудник);

КонецПроцедуры // РаботникиОрганизацииСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода физического лица
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 5, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 И Элемент.Значение <> ВыбранноеЗначение Тогда
		Предупреждение("В данном документе по одному сотруднику можно вводить только одну строку!");
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбранноеЗначение;
	УстановитьОтборРаботника(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 5, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 5, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля Начисления
//
Процедура ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки()
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.ОсновныеНачисления, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ОсновныеНачисления, мСведенияОВидахРасчетаОснНачислений);
	
КонецПроцедуры // ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
//
Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки", 0.05, Истина);	 	
    
КонецПроцедуры // ОсновныеНачисленияПриАктивизацииСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" строки ТЧ
//
Процедура ОсновныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		ДанныеСтроки.ДатаДействия = Дата;
		
		Если ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Использование И ЗначениеЗаполнено(ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Значение) Тогда
			ДанныеСтроки.Сотрудник = ЭлементыФормы.ОсновныеНачисления.ОтборСтрок.Сотрудник.Значение;
			
		Иначе
			ДанныеСтрокиТЧРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
			Если ДанныеСтрокиТЧРаботники <> Неопределено Тогда
				ДанныеСтроки.Сотрудник = ДанныеСтрокиТЧРаботники.Сотрудник;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияПриНачалеРедактирования()

// Процедура - обработчик события "ПослеУдаления" строки ТЧ
//
Процедура ОсновныеНачисленияПослеУдаления(Элемент)
	
	ЗаполнитьТаблицуРаботниковОрганизации();
	
КонецПроцедуры // ОсновныеНачисленияПослеУдаления()

// Процедура - обработчик события "ПриОкончанииРедактирования" ТЧ
//
Процедура ОсновныеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущаяСтрока.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Элемент.ТекущаяСтрока.Показатель1 = 0;
		Элемент.ТекущаяСтрока.Показатель2 = 0;
		Элемент.ТекущаяСтрока.Показатель3 = 0;
		Элемент.ТекущаяСтрока.Показатель4 = 0;
		Элемент.ТекущаяСтрока.Показатель5 = 0;
		Элемент.ТекущаяСтрока.Показатель6 = 0;
	ИначеЕсли НоваяСтрока Тогда
		
		СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, Элемент.ТекущаяСтрока.ВидРасчета);
		КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
		Для СчПоказателей = 1 По КоличествоПоказателей Цикл
			Если СчПоказателей <= СведенияОВидеРасчета.ФактКоличествоПоказателей Тогда
				Элемент.ТекущаяСтрока["Валюта" + СчПоказателей] = СведенияОВидеРасчета["ВалютаПоказателя" + СчПоказателей];
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияПриОкончанииРедактирования()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура ОсновныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ОсновныеНачисления, ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчетаОснНачислений, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчетаОснНачислений, Истина);	
		
		Если ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные <> Неопределено Тогда
			
			СведенияОВидеРасчета = мСведенияОВидахРасчетаОснНачислений[ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.ВидРасчета];
			
			КоличествоПоказателей = СведенияОВидеРасчета["КоличествоПоказателей"];
			Если ДанныеСтроки.Действие = Перечисления.ВидыДействияСНачислением.Начать ИЛИ
				ДанныеСтроки.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
				
				Для СчПоказателей = 1 По 6 Цикл
					Если СчПоказателей = 1 Или СчПоказателей <= КоличествоПоказателей Тогда
						ОформлениеСтроки.Ячейки["Показатель"+СчПоказателей].ТолькоПросмотр = НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для СчПоказателей = 1 По 6 Цикл
					Если СчПоказателей = 1 Или СчПоказателей <= КоличествоПоказателей Тогда
						ОформлениеСтроки.Ячейки["Показатель"+СчПоказателей].ТолькоПросмотр = Истина;
					КонецЕсли;;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
		
		ОформлениеСтроки.Ячейки.Период.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.ДатаДействияКонец.ТолькоПросмотр = ДанныеСтроки.Действие <> Перечисления.ВидыДействияСНачислением.Начать;
		
	КонецЦикла;
	
КонецПроцедуры // ОсновныеНачисленияПриПолученииДанных()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления


Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.Физлицо = Элемент.Значение.Физлицо;
	Если РаботникиОрганизации.Найти(Элемент.Значение,"Сотрудник") = Неопределено Тогда
		ЗаполнитьТаблицуРаботниковОрганизации();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 5, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 5, Текст, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 5, Текст, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода начисления  
//
Процедура ОсновныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, Элемент.Значение);
	ДанныеСтроки = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	
	КоличествоПоказателей = СведенияОВидеРасчета["КоличествоПоказателей"];
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ОсновныеНачисления, мСведенияОВидахРасчетаОснНачислений);
	
	Если Не СведенияОВидеРасчета.РазмерТребуется Тогда
		ДанныеСтроки.Показатель1			= 0;
		ДанныеСтроки.ТарифныйРазряд1	= Справочники.ТарифныеРазряды.ПустаяСсылка();
	КонецЕсли;
	
	Если СведенияОВидеРасчета.НеТребуетВалюты Тогда
		ДанныеСтроки.Валюта1			= Справочники.Валюты.ПустаяСсылка();
		
	Иначе
		ИспользуютсяНачисленияВВалюте = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
			
		Если Не ИспользуютсяНачисленияВВалюте И ДанныеСтроки.Валюта1.Пустая() Тогда
			ДанныеСтроки.Валюта1 = мВалютаРегламентированногоУчета;
		КонецЕсли;
			
	КонецЕсли;
	
	Для СчПоказателей = 1 По 6 Цикл
		Если СчПоказателей = 1 Или СчПоказателей <= КоличествоПоказателей Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей]) И 
				СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей] = мВалютаРегламентированногоУчета;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				Если СчПоказателей <= СведенияОВидеРасчета.ФактКоличествоПоказателей Тогда
					ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей] = СведенияОВидеРасчета["ВалютаПоказателя" + СчПоказателей];
				КонецЕсли;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Показатель" + СчПоказателей] = 0;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["ТарифныйРазряд" + СчПоказателей] = Справочники.ТарифныеРазряды.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей]		= Справочники.Валюты.ПустаяСсылка();
			ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Показатель" + СчПоказателей]	= 0;
			ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["ТарифныйРазряд" + СчПоказателей]= Справочники.ТарифныеРазряды.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;		
	
КонецПроцедуры // ОсновныеНачисленияВидРасчетаПриИзменении()

Процедура ОсновныеНачисленияДействиеПриИзменении(Элемент)
	Если Элемент.Значение <> Перечисления.ВидыДействияСНачислением.Начать Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.ДатаДействияКонец = ""
	КонецЕсли;
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик события "ПоказательПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель1ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 1);
	
КонецПроцедуры //ОсновныеНачисленияПоказатель1ПриИзменении

// Процедура - обработчик события "Показатель2ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель2ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 2);
	
КонецПроцедуры //ОсновныеНачисленияПоказатель2ПриИзменении

// Процедура - обработчик события "Показатель3ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель3ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 3);

КонецПроцедуры //ОсновныеНачисленияПоказатель3ПриИзменении

// Процедура - обработчик события "Показатель4ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель4ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 4);
	
КонецПроцедуры //ОсновныеНачисленияПоказатель4ПриИзменении

// Процедура - обработчик события "Показатель5ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель5ПриИзменении(Элемент)
	
	ПриИзмененииПоказателяНачисления(Элемент.Значение, 5);
	
КонецПроцедуры

// Процедура - обработчик события "Показатель6ПриИзменении"
//
Процедура ОсновныеНачисленияПоказатель6ПриИзменении(Элемент)

	ПриИзмененииПоказателяНачисления(Элемент.Значение, 6);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;
мСинхронизируемыеТабличныеЧасти["ОсновныеНачисления"]		= Ложь;
мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]		= Ложь;

мСведенияОВидахРасчетаОснНачислений = Новый Соответствие;

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();