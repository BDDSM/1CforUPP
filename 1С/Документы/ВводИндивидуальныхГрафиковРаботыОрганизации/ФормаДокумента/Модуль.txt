////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Перечисление.СпособВводаДанных.ПоДням необходима для сравнения и присвоения значений переменных
Перем СпособВводаДанныхПоДням;

// Список соответствий 1 - пн, 2 - вт,.... 7 - вс.
Перем ДниНедели;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ГрафикРаботы,ЭлементыФормы.КоманднаяПанельГрафикРаботы.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;	
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Процедура заполняет своднные данные по дням, часам, вечерним и ночным, по результатам с разбивкой по дням.
Процедура ЗаполнитьСводныеДанныеГрафикаРаботы()
	Для Каждого СтрокаГрафикаРаботы Из ГрафикРаботы Цикл
		КоличествоЧасов = 0;
		КоличествоЧасовВечерних = 0;
		КоличествоЧасовНочных = 0;
		КоличествоДней = 0;
		Для ИндексДня = 1 по 31 Цикл
			
			Часов = СтрокаГрафикаРаботы["Часов"+Строка(ИндексДня)];
			ЧасовВечерних = СтрокаГрафикаРаботы["ЧасовВечерних"+Строка(ИндексДня)];
			ЧасовНочных = СтрокаГрафикаРаботы["ЧасовНочных"+Строка(ИндексДня)];
			
			КоличествоЧасов = КоличествоЧасов + Часов;
			КоличествоЧасовВечерних = КоличествоЧасовВечерних + ЧасовВечерних;
			КоличествоЧасовНочных = КоличествоЧасовНочных + ЧасовНочных;
			
			Если (Часов > 0) Или (ЧасовВечерних > 0) Или (ЧасовНочных > 0) Тогда
				КоличествоДней = КоличествоДней + 1;
			КонецЕсли;
			
		КонецЦикла;
		СтрокаГрафикаРаботы.ВсегоДней = КоличествоДней;
		СтрокаГрафикаРаботы.ВсегоЧасов = КоличествоЧасов;
		СтрокаГрафикаРаботы.ВсегоЧасовВечерних = КоличествоЧасовВечерних;
		СтрокаГрафикаРаботы.ВсегоЧасовНочных = КоличествоЧасовНочных;
	КонецЦикла;
КонецПроцедуры // ЗаполнитьСводныеДанныеГрафикаРаботы()

// Процедура надписывает колонки т.п. ГрафикРаботы в зависимости от способа ввода данных
// и количества дней в месяце.
Процедура ОформитьЗаголовкиДнейМесяца()
	
	// Устанавливаем заголовки дней месяца.
	БледноКрасныйЦвет = Новый Цвет(255, 176, 176);
	СерыйЦвет = Новый Цвет(234, 229, 216);
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("НачалоМесяца",НачалоМесяца(ПериодРегистрации));
		Запрос.УстановитьПараметр("КонецМесяца",КонецМесяца(ПериодРегистрации));
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	РегламентированныйПроизводственныйКалендарь.ВидДня,
		|	ДЕНЬНЕДЕЛИ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ДеньНедели
		|ИЗ
		|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
		|ГДЕ
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоМесяца И &КонецМесяца
		|
		|УПОРЯДОЧИТЬ ПО
		|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря";
		
		Результат = Запрос.Выполнить();
		Если Результат.Пустой() Тогда
			ДеньНеделиМесяца = ДеньНедели(НачалоМесяца(ПериодРегистрации));
			Для ДеньМесяца = 1 по День(КонецМесяца(ПериодРегистрации)) Цикл
				
				Колонка = ЭлементыФормы.ГрафикРаботы.Колонки["Часов"+Строка(ДеньМесяца)];
				
				Колонка.ТекстШапки = Строка(ДеньМесяца) + Символы.ПС + ДниНедели[ДеньНеделиМесяца];
				Если ДеньНеделиМесяца = 6 Или ДеньНеделиМесяца = 7 Тогда
					Колонка.ЦветТекстаШапки = ЦветаСтиля.ЦветОсобогоТекста;
					Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
				Иначе
					Колонка.ЦветТекстаШапки = Новый Цвет();	
					Колонка.ШрифтШапки = Новый Шрифт();
				КонецЕсли;
				
				ДеньНеделиМесяца = (ДеньНеделиМесяца%7)+1;
			КонецЦикла;
		Иначе
			Данные = Результат.Выгрузить();
			ЦветСубботы	           = Новый Цвет(153, 51,   0); // Темно-красный
			ЦветВоскресенья 	   = ЦветаСтиля.ЦветОсобогоТекста; // Красный
			ЦветПредпразничногоДня = Новый Цвет(  0,  0, 186); // Темно-синий
			ЦветПраздничногоДня	   = Новый Цвет(255,  0, 255); // Фиолетовый
			Для ДеньМесяца = 1 по День(КонецМесяца(ПериодРегистрации)) Цикл
				
				Колонка = ЭлементыФормы.ГрафикРаботы.Колонки["Часов"+Строка(ДеньМесяца)];
				
				Колонка.ТекстШапки = Строка(ДеньМесяца) + Символы.ПС + ДниНедели[Данные[ДеньМесяца - 1].ДеньНедели];
				
				ВидДня = Данные[ДеньМесяца - 1].ВидДня;
				Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
					Колонка.ЦветТекстаШапки = ЦветПраздничногоДня;
					Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
				ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
					Колонка.ЦветТекстаШапки = ЦветВоскресенья;
					Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
				ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
					Колонка.ЦветТекстаШапки = ЦветСубботы;
					Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
				ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
					Колонка.ЦветТекстаШапки = ЦветПредпразничногоДня;
					Колонка.ШрифтШапки = Новый Шрифт();
				Иначе
					Колонка.ЦветТекстаШапки = Новый Цвет();	
					Колонка.ШрифтШапки = Новый Шрифт();
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		ЭлементыФормы.ГрафикРаботы.ВысотаШапки = 2;
	Иначе
		ЭлементыФормы.ГрафикРаботы.ВысотаШапки = 1;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость колонок таблицы ГрафикРаботы в зависимости от способа ввода данных
// и количества дней в месяце.
Процедура УстановитьВидимостьколонокТаблицыГрафикРаботы()
	
	ВводимПоДням = СпособВводаДанных = СпособВводаДанныхПоДням;
	
	ЭлементыФормы.ГрафикРаботы.Колонки.ЧасовЗаДень.Видимость 	= ВводимПоДням И (ПоказыватьНочные ИЛИ ПоказыватьВечерние);
	ЭлементыФормы.ГрафикРаботы.Колонки.ИзНихВечерних.Видимость 	= ВводимПоДням И ПоказыватьВечерние;
	ЭлементыФормы.ГрафикРаботы.Колонки.ИзНихНочных.Видимость 	= ВводимПоДням И ПоказыватьНочные;
	
	Элементыформы.ГрафикРаботы.Колонки.ЗаголовокИтогоДнейЧасов.Видимость = ВводимПоДням;
	Элементыформы.ГрафикРаботы.Колонки.ИтогоРасчетДней.Видимость     = ВводимПоДням;
	Элементыформы.ГрафикРаботы.Колонки.ИтогоРасчетЧасов.Видимость     = ВводимПоДням;
	Элементыформы.ГрафикРаботы.Колонки.ИтогоРасчетВечерних.Видимость = ВводимПоДням И ПоказыватьВечерние;
	Элементыформы.ГрафикРаботы.Колонки.ИтогоРасчетНочных.Видимость   = ВводимПоДням И ПоказыватьНочные;
	
	ПоследнийДеньМесяца = День(КонецМесяца(ПериодРегистрации));
	Для ДеньМесяца = 1 По 31 Цикл
		
		ВидимостьКолонок = ВводимПоДням И (ДеньМесяца <= ПоследнийДеньМесяца);
		
		// дневные часы
		ЭлементыФормы.ГрафикРаботы.Колонки["Часов"+Строка(ДеньМесяца)].Видимость = ВидимостьКолонок;
		
		// Вечерние часы
		ЭлементыФормы.ГрафикРаботы.Колонки["ЧасовВечерних"+Строка(ДеньМесяца)].Видимость = ВидимостьКолонок И ПоказыватьВечерние;
		
		// Ночные часы
		ЭлементыФормы.ГрафикРаботы.Колонки["ЧасовНочных"+Строка(ДеньМесяца)].Видимость = ВидимостьКолонок И ПоказыватьНочные;
		
	КонецЦикла;
	
	ВводимСводно = Не ВводимПоДням;
	ЭлементыФормы.ГрафикРаботы.Колонки.ВсегоДней.Видимость = ВводимСводно;
	ЭлементыФормы.ГрафикРаботы.Колонки.ВсегоЧасов.Видимость = ВводимСводно;
	ЭлементыФормы.ГрафикРаботы.Колонки.ВсегоЧасовВечерних.Видимость = ВводимСводно И ПоказыватьВечерние;
	ЭлементыФормы.ГрафикРаботы.Колонки.ВсегоЧасовНочных.Видимость = ВводимСводно И ПоказыватьНочные;
	
	УстановитьФиксациюСлева();
	
КонецПроцедуры // УстановитьВидимостьколонокТаблицыГрафикРаботы()	

// Процедура устанавливает фиксацию колонок таблицы,
// в зависимости от количества видимых колонок
//
Процедура УстановитьФиксациюСлева()
	
	ВводимПоДням = СпособВводаДанных = СпособВводаДанныхПоДням;
	
	// Установим фиксацию сотрудника с табельным номером если он выводится
	ВидимостьТабельногоНомера = ЭлементыФормы.ГрафикРаботы.Колонки.ТабельныйНомерСтрока.Видимость;
	ВидимостьНадписиПоЧасам = ПоказыватьВечерние ИЛИ ПоказыватьНочные;
	Если ВводимПоДням Тогда
		Если ВидимостьТабельногоНомера И ВидимостьНадписиПоЧасам Тогда
			ЭлементыФормы.ГрафикРаботы.ФиксацияСлева = 5;
		ИначеЕсли Не ВидимостьТабельногоНомера И НЕ ВидимостьНадписиПоЧасам Тогда
			ЭлементыФормы.ГрафикРаботы.ФиксацияСлева = 3;
		Иначе
			ЭлементыФормы.ГрафикРаботы.ФиксацияСлева = 4;
		КонецЕсли;
	Иначе
		Если ВидимостьТабельногоНомера Тогда
			ЭлементыФормы.ГрафикРаботы.ФиксацияСлева = 3;
		Иначе
			ЭлементыФормы.ГрафикРаботы.ФиксацияСлева = 2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает видимость табельного номера и количество фиксируемых колонок
//
Процедура УстановитьВидимостьТабельногоНомера()
	
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	УстановитьФиксациюСлева();
	
КонецПроцедуры

// определяем, надо ли вводить вечерние и ночные часы
//
// Параметры
//  нет
//
Процедура ОпределитьПорядокВводаДанных()
	
	
	ПоследнийДеньМесяца = День(КонецМесяца(ПериодРегистрации));
	
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		Для НомерДня = 1 По ПоследнийДеньМесяца Цикл
			ПоказыватьВечерние = (ГрафикРаботы.Итог("ЧасовВечерних"+Строка(НомерДня)) > 0) ИЛИ ПоказыватьВечерние;
			ПоказыватьНочные = (ГрафикРаботы.Итог("ЧасовНочных"+Строка(НомерДня)) > 0) ИЛИ ПоказыватьНочные;
			Если ПоказыватьНочные И ПоказыватьВечерние Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ПоказыватьВечерние = (ГрафикРаботы.Итог("ВсегоЧасовВечерних") > 0) ИЛИ ПоказыватьВечерние;
		ПоказыватьНочные = (ГрафикРаботы.Итог("ВсегоЧасовНочных") > 0) ИЛИ ПоказыватьНочные;
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельГрафикРаботы.Кнопки.ДействиеНочные.Пометка = ПоказыватьНочные;
	ЭлементыФормы.КоманднаяПанельГрафикРаботы.Кнопки.ДействиеВечерние.Пометка = ПоказыватьВечерние;
КонецПроцедуры // ОпределитьПорядокВводаДанных()

// Функция просматривает график работы и возвращает Истина если введены ночные или
// вечерние часы	
Функция ЕстьДанныеПоВечернимНочнымЧасам(УчитыватьВечерниеЧасы = Ложь,УчитыватьНочныеЧасы = Ложь)
	
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		Для Каждого СтрокаГрафикаРаботы Из ГрафикРаботы Цикл
			Для ИндексДня = 1 По 31 Цикл
				Если (УчитыватьВечерниеЧасы И (СтрокаГрафикаРаботы["ЧасовВечерних"+Строка(ИндексДня)]>0)) 
					ИЛИ (УчитыватьНочныеЧасы И (СтрокаГрафикаРаботы["ЧасовНочных"+Строка(ИндексДня)]>0)) Тогда
					Возврат Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого СтрокаГрафикаРаботы Из ГрафикРаботы Цикл
			Если (УчитыватьВечерниеЧасы И (СтрокаГрафикаРаботы.ВсегоЧасовВечерних>0)) 
				ИЛИ (УчитыватьНочныеЧасы И (СтрокаГрафикаРаботы.ВсегоЧасовНочных>0)) Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Возврат Ложь;	
	
КонецФункции // ЕстьДанныеПоВечернимНочнымЧасам()

// Процедура устанавливает видимость колонок Вечерние и Ночные часы в Истина,
// если в данных колонках есть ненулевые значения
Процедура УстановкаВидимостиНеобходимыхВечернихИНочныхЧасов()
	Если ГрафикРаботы.Итог("ВсегоЧасовНочных") > 0 Тогда
		ПоказыватьНочные = Истина;
		ЭлементыФормы.КоманднаяПанельГрафикРаботы.Кнопки.ДействиеНочные.Пометка = Истина;
		УстановитьВидимостьКолонокТаблицыГрафикРаботы();
	КонецЕсли;
	Если ГрафикРаботы.Итог("ВсегоЧасовВечерних") > 0 Тогда
		ПоказыватьВечерние = Истина;
		ЭлементыФормы.КоманднаяПанельГрафикРаботы.Кнопки.ДействиеВечерние.Пометка = Истина;
		УстановитьВидимостьКолонокТаблицыГрафикРаботы();
	КонецЕсли;
	
	
КонецПроцедуры // УстановкаВидимостиНеобходимыхВечернихИНочныхЧасов()

// Процедура проверяет возможность автозаполнения документа, 
// и в случае успеха запускает заполнение, иначе выдает комментарии
Процедура ПроверкаУсловийИВыполнениеАвтозаполнения(Запрос = Неопределено, Сотрудник = Неопределено, ТекущаяСтрокаГрафикаРаботы = Неопределено)
	
	Если ФормированиеПечатныхФормЗК.ЗаполненРегламентированныйПроизводственныйКалендарь(НачалоМесяца(ПериодРегистрации), КонецМесяца(ПериодРегистрации)) Тогда
		Автозаполнение(Запрос, Сотрудник, ТекущаяСтрокаГрафикаРаботы);
	Иначе
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		ОбработкаКомментариев.ДобавитьСообщение("Предупреждение", Перечисления.ВидыСообщений.Раздел);
		ОбработкаКомментариев.ДобавитьСообщение("за указанный период, не заполнен регламентированный производственный календарь!", Перечисления.ВидыСообщений.ВажнаяИнформация);
		ОбработкаКомментариев.ПоказатьСообщения();
	КонецЕсли;
	
КонецПроцедуры // ПроверкаУсловийИВыполнениеАвтозаполнения()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	ЭлементыФормы.ПодразделениеОрганизации.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Подразделение организации");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		Если СпособВводаДанных.Пустая() Тогда
			СпособВводаДанных = ВосстановитьЗначение("СпособВводаДанных");
			Если СпособВводаДанных.Пустая() Тогда	
				СпособВводаДанных = СпособВводаДанныхПоДням;
			КонецЕсли;
		КонецЕсли;
		
		ПоказыватьВечерние = ВосстановитьЗначение("ПоказыватьВечерние");
		ПоказыватьНочные = ВосстановитьЗначение("ПоказыватьНочные");
		ЭлементыФормы.КоманднаяПанельГрафикРаботы.Кнопки.ДействиеВечерние.Пометка = ПоказыватьВечерние;
		ЭлементыФормы.КоманднаяПанельГрафикРаботы.Кнопки.ДействиеНочные.Пометка = ПоказыватьНочные;
		
	Иначе
		ОпределитьПорядокВводаДанных();
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.ГрафикРаботы.Колонки.ТабельныйНомерСтрока);
	УстановитьВидимостьТабельногоНомера();
	
	УстановитьВидимостьколонокТаблицыГрафикРаботы();	
	ОформитьЗаголовкиДнейМесяца();
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.ГрафикРаботы
	КонецЕсли;
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ИсполнитьПодготовленныйЗапрос" Тогда			
			
			ГрафикРаботы.Очистить();
			
			ПроверкаУсловийИВыполнениеАвтозаполнения(ЗначениеВыбора.Запрос);
			
			Если ГрафикРаботы.Количество() > 0 Тогда
				УстановкаВидимостиНеобходимыхВечернихИНочныхЧасов();
				ОпределитьПорядокВводаДанных();
				УстановитьВидимостьколонокТаблицыГрафикРаботы();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" формы
Процедура ПриЗаписи(Отказ)
	
	СохранитьЗначение("СпособВводаДанных", СпособВводаДанных);
	СохранитьЗначение("ПоказыватьНочные", ПоказыватьНочные);
	СохранитьЗначение("ПоказыватьВечерние", ПоказыватьВечерние);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы
Процедура ПослеЗаписи()
	 
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("СправочникСсылка.СотрудникиОрганизаций") ИЛИ Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ПодборОтменаВыбора" Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", Параметр);
		НайденныеСтроки = Источник.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Источник.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)
	
	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)
	
	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	
	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура выполняет  открытие формы регистра ГрафикиРаботыПоВидамВремени
// с отбором по данному документу
Процедура ДействияФормыГрафикиРаботыПоВидамВремени(Кнопка)
	ФормаСписка = РегистрыСведений.ГрафикиРаботыПоВидамВремени.ПолучитьФормуСписка();	
	ФормаСписка.Отбор.Документ.Установить(Ссылка);
	ФормаСписка.Открыть();
КонецПроцедуры // ДействияФормыГрафикиРаботыПоВидамВремени()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
			
КонецПроцедуры
             
// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - вызывается при нажатии на кнопку "Заполнить" командной панели КоманднаяПанельГрафикРаботы
Процедура КоманднаяПанельГрафикРаботыДействиеЗаполнить(Кнопка)
	
	Если ГрафикРаботы.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличнaя часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		ГрафикРаботы.Очистить();
		
	КонецЕсли;
	
	ПроверкаУсловийИВыполнениеАвтозаполнения();
	
	Если ГрафикРаботы.Количество() > 0 Тогда
		УстановкаВидимостиНеобходимыхВечернихИНочныхЧасов();
		ОпределитьПорядокВводаДанных();
		УстановитьВидимостьколонокТаблицыГрафикРаботы();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Заполнить" командной панели КоманднаяПанельГрафикРаботы
Процедура КоманднаяПанельГрафикРаботыСписокРаботников(Кнопка)
	
	Если ГрафикРаботы.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличнaя часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации), "РаботникиОрганизаций", Организация, ПодразделениеОрганизации, Ложь,,,,ПериодРегистрации, Истина);
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор" командной панели КоманднаяПанельГрафикРаботы
Процедура КоманднаяПанельГрафикРаботыПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ГрафикРаботы, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 3, , ГрафикРаботы.ВыгрузитьКолонку("Сотрудник"));
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Ночные" командной панели "ДействияФормы"
Процедура КоманднаяПанельГрафикРаботыДействиеНочные(Кнопка)
	
	Если Кнопка.Пометка И ЕстьДанныеПоВечернимНочнымЧасам(Ложь, Истина) Тогда
		ТекстВопроса = "Будут очищены данные ночных часов, продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		// Очищаем  ночное время
		Для Каждого СтрокаГрафикРаботы Из ГрафикРаботы Цикл
			Для ИндексДня = 1 По 31 Цикл
				СтрокаГрафикРаботы["ЧасовНочных"+Строка(ИндексДня)] = 0;
			КонецЦикла;	
			СтрокаГрафикРаботы["ВсегоЧасовНочных"] = 0
		КонецЦикла;
	КонецЕсли;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПоказыватьНочные = Кнопка.Пометка;
	УстановитьВидимостьКолонокТаблицыГрафикРаботы();
	
КонецПроцедуры // КоманднаяПанельГрафикРаботыДействиеНочные()

// Процедура - вызывается при нажатии на кнопку "Вечерние" командной панели "ДействияФормы"
Процедура КоманднаяПанельГрафикРаботыДействиеВечерние(Кнопка)
	
	Если Кнопка.Пометка И ЕстьДанныеПоВечернимНочнымЧасам(Истина, Ложь) Тогда
		ТекстВопроса = "Будут очищены данные вечерних часов, продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		// Очищаем вечернее время
		Для Каждого СтрокаГрафикРаботы Из ГрафикРаботы Цикл
			Для ИндексДня = 1 По 31 Цикл
				СтрокаГрафикРаботы["ЧасовВечерних"+Строка(ИндексДня)] = 0;
			КонецЦикла;	
			СтрокаГрафикРаботы["ВсегоЧасовВечерних"] = 0
		КонецЦикла;
	КонецЕсли;
	Кнопка.Пометка = НЕ Кнопка.Пометка;
	ПоказыватьВечерние = Кнопка.Пометка;
	УстановитьВидимостьКолонокТаблицыГрафикРаботы();
	
КонецПроцедуры // КоманднаяПанельГрафикРаботыДействиеВечерние()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов
	УстановитьВидимостьТабельногоНомера();
	
КонецПроцедуры

// Процедура выполняет алгоритм действий при изменении реквизита СпособВводаДанных
//
// Параметры:
//  Элемент      - элемент формы, который отображает Способ ввода данных.
//
Процедура СпособВводаДанныхПриИзменении(Элемент)
	Если СпособВводаДанных <> СпособВводаДанныхПоДням Тогда
		ЗаполнитьСводныеДанныеГрафикаРаботы();
	КонецЕсли;
	УстановитьВидимостьКолонокТаблицыГрафикРаботы();
	ОформитьЗаголовкиДнейМесяца();
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТА ШАПКИ ПериодРегистрации

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		УстановитьВидимостьколонокТаблицыГрафикРаботы();
		ОформитьЗаголовкиДнейМесяца();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		УстановитьВидимостьколонокТаблицыГрафикРаботы();
		ОформитьЗаголовкиДнейМесяца();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		УстановитьВидимостьколонокТаблицыГрафикРаботы();
		ОформитьЗаголовкиДнейМесяца();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ГрафикРаботы

// Процедура - обработчик события "ПриВыводеСтроки" табличной части ГрафикРаботы
Процедура ГрафикРаботыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ИтогоДней 	  = 0;
	ИтогоЧасов    = 0;
	ИтогоВечерних = 0;
	ИтогоНочных   = 0;
	
	Для НомерДня = 1 По День(КонецМесяца(ПериодРегистрации)) Цикл
		ЗначениеЯчейки = ДанныеСтроки["Часов"+Строка(НомерДня)];
		Если ЗначениеЯчейки <> 0 Тогда
			ОформлениеСтроки.Ячейки["Часов"+Строка(НомерДня)].Текст = Строка(ЗначениеЯчейки);
			ИтогоДней = ИтогоДней + 1;
			ИтогоЧасов = ИтогоЧасов + ЗначениеЯчейки;
		КонецЕсли;
		ЗначениеЯчейки = ДанныеСтроки["ЧасовВечерних"+Строка(НомерДня)];
		Если ЗначениеЯчейки <> 0 Тогда
			ОформлениеСтроки.Ячейки["ЧасовВечерних"+Строка(НомерДня)].Текст = Строка(ЗначениеЯчейки);
			ИтогоВечерних = ИтогоВечерних + ЗначениеЯчейки;
		КонецЕсли;
		ЗначениеЯчейки = ДанныеСтроки["ЧасовНочных"+Строка(НомерДня)];
		Если ЗначениеЯчейки <> 0 Тогда	
			ОформлениеСтроки.Ячейки["ЧасовНочных"+Строка(НомерДня)].Текст = Строка(ЗначениеЯчейки);
			ИтогоНочных = ИтогоНочных + ЗначениеЯчейки;
		КонецЕсли;
	КонецЦикла;
	
	ОформлениеСтроки.Ячейки.ИтогоРасчетДней.УстановитьТекст(Строка(ИтогоДней));
	ОформлениеСтроки.Ячейки.ИтогоРасчетЧасов.УстановитьТекст(Строка(ИтогоЧасов));
	ОформлениеСтроки.Ячейки.ИтогоРасчетВечерних.УстановитьТекст(Строка(ИтогоВечерних));
	ОформлениеСтроки.Ячейки.ИтогоРасчетНочных.УстановитьТекст(Строка(ИтогоНочных));
	
	ОформлениеСтроки.Ячейки.ЗаголовокИтогоДнейЧасов.Видимость= Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных" 
Процедура ГрафикРаботыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ГрафикРаботы, ОформленияСтрок);
	Если СпособВводаДанных = СпособВводаДанныхПоДням 
		И (ПоказыватьВечерние ИЛИ ПоказыватьНочные) Тогда
		Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
			ОформлениеСтроки.Ячейки.ЧасовЗаДень.УстановитьТекст("Часов за день");
			ОформлениеСтроки.Ячейки.ИзНихВечерних.УстановитьТекст("Из них вечерних");
			ОформлениеСтроки.Ячейки.ИзНихНочных.УстановитьТекст("Из них ночных");
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПриПолученииДанных()

// Процедура - обработчик события "ОбработкаВыбора" табличной части ГрафикРаботы
Процедура ГрафикРаботыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	// Если выбор произошел в форме подбора и этого физлица в документе пока нет,
	// добавим новую строку в таблицу
	СтруктураПоиска = Новый Структура("Сотрудник", ВыбранноеЗначение);
	
	Если ГрафикРаботы.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
		ПроверкаУсловийИВыполнениеАвтозаполнения(,ВыбранноеЗначение);
		УстановкаВидимостиНеобходимыхВечернихИНочныхЧасов();
	КонецЕсли;		
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура ГрафикРаботыПередУдалением(Элемент, Отказ)
	
	Если (СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням И Найти(Элемент.ТекущаяКолонка.Данные, "Часов") = 1)
		или (СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод И Найти(Элемент.ТекущаяКолонка.Данные, "Всего") = 1) Тогда
		ТекстВопроса = "Вы действительно хотите удалить сотрудника из графика?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Отказ = Ответ <> КодВозвратаДиалога.Да;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Оповестить("ПодборОтменаВыбора", ДанныеСтроки.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

Процедура ГрафикРаботыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПодборВыбор", ДанныеСтроки.Сотрудник);
	
КонецПроцедуры

Процедура ГрафикРаботыСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ГрафикРаботы.ТекущаяСтрока.ФизЛицо = Элемент.Значение.ФизЛицо;
	ПроверкаУсловийИВыполнениеАвтозаполнения(,Элемент.Значение, ЭлементыФормы.ГрафикРаботы.ТекущаяСтрока);
	УстановкаВидимостиНеобходимыхВечернихИНочныхЧасов();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Сотрудник
Процедура ГрафикРаботыСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 3, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // НачисленияФизлицоНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Сотрудник
Процедура ГрафикРаботыСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода Сотрудник
Процедура ГрафикРаботыСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры


 ////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

СпособВводаДанныхПоДням = Перечисления.СпособыВводаДанныхОВремени.ПоДням;

ДлинаСуток = 86400;
ПерваяДата = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
ПерваяДата = ПерваяДата - ДеньНедели(ПерваяДата) * ДлинаСуток;
ДниНедели = Новый Соответствие;
Для ДеньНедели = 1 По 7 Цикл
	ДниНедели.Вставить(ДеньНедели, НРег(Формат(ПерваяДата + ДеньНедели * ДлинаСуток,"ДФ=ддд")));
КонецЦикла;