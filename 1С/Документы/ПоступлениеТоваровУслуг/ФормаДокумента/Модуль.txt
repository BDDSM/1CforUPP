////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит текущее значение учетной политики розничная торговля облагается ЕНВД
Перем мРозничнаяТорговляОблагаетсяЕНВД;

// Хранит текущее значение склада для контроля учетной политики розничная торговля облагается ЕНВД
Перем мТекущийСклад;

// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов;

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента;

Перем мВидДоговора;
Перем мПоДокументамРасчетов;
Перем мОтражатьВРегламентированномУчете;
Перем мРасчетыВУЕ;

// Переменные для кэширования коллекций колонок табличных полей.
Перем мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиОборудование, мКолонкиДокументы;

Перем мРазрешитьНулевыеЦеныВОпте;

// Автоотметка СкладОрдера без учета заполненности ТЧ.
Перем мАвтоОтметкаСкладОрдера;
Перем мСкладИзШапки;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Предыдущие значения реквизитов
Перем мСтароеЗначениеСделки, мСтароеЗначениеСклада;

// Флаги наличия реквизитов и табличных частей
Перем мЕстьКолонкаСклад, мЕстьКолонкаСерии;
Перем мВедениеУчетаЗатратПоПроектам;
Перем ПоказыватьВДокументахСчетаУчета;

Перем мПрименениеУСН;
Перем мПрименениеУСНДоходы;

Перем мТерминалы;

// Хранит курс редактируемой строки табличной части "Предоплата"
Перем мКурсСтрокиДокументаРасчетов;

// Содержит значение функциональной опции "ИспользоватьОбменЭД"
Перем мИспользоватьОбменЭД; 

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Услуги,ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Оборудование,ЭлементыФормы.КоманднаяПанельОборудование.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОбъектыСтроительства,ЭлементыФормы.КоманднаяПанельОбъектыСтроительства);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДокументыРасчетовСКонтрагентом,ЭлементыФормы.КоманднаяПанельДокументыРасчетовСКонтрагентом.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	Если ЗначениеЗаполнено(ДоговорКонтрагента)
		И ДоговорКонтрагента.УчетАгентскогоНДС
		И ДоговорКонтрагента.НалоговыйАгентПоОплате Тогда
		ЭлементыФормы.ГиперссылкаСчетФактура.Гиперссылка = Ложь;
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = "не требуется";
	Иначе
		ЭлементыФормы.ГиперссылкаСчетФактура.Гиперссылка = Истина;
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
		                                                 УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураПолученный"));
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	ПустойТипЦен = НЕ ЗначениеЗаполнено(ТипЦен);

	Если ТабличнаяЧасть = Товары
		ИЛИ ТабличнаяЧасть = ВозвратнаяТара Тогда

		Если ЗначениеЗаполнено(Контрагент) Тогда
			СписокЗапросов.Добавить("ПриходНоменклатураКонтрагента", "По номенклатуре контрагента");
		КонецЕсли;
		Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
			СписокЗапросов.Добавить("ПриходЦеныКонтрагента", "По ценам контрагента");
		КонецЕсли;

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		СписокЗапросов.Добавить("РасходУслуги", "По услугам предприятия");
		Если НЕ ПустойТипЦен ИЛИ (ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидУсловийДоговора = Перечисления.ВидыУсловийДоговоровВзаиморасчетов.СДополнительнымиУсловиями) Тогда
			СписокЗапросов.Добавить("ПриходЦеныУслуг", "По ценам и услугам контрагента");
		КонецЕсли;
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена               = Истина;
	ЕстьСерия              = Истина;
	Валюта                 = ВалютаДокумента;
	СпособЗаполненияЦен    = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	ПодбиратьУслуги        = Ложь;
	СкрыватьХарактеристику = Ложь;

	Если ТабличнаяЧасть = Товары Тогда
		Команда                = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти      = "Товары";
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		Команда                = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ЕстьСерия              = Ложь;
		ИмяТабличнойЧасти      = "Тара";
	ИначеЕсли ТабличнаяЧасть = Услуги Тогда
		Команда                = "ПодборВТабличнуюЧастьУслуги";
		ЕстьСерия              = Ложь;
		ИмяТабличнойЧасти      = "Услуги";
		ПодбиратьУслуги        = Истина;
		СкрыватьХарактеристику = Истина;
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"              , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"   , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"          , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                 , СкладОрдер);
	СтруктураПараметровПодбора.Вставить("ТипЦен"                , ТипЦен);
	СтруктураПараметровПодбора.Вставить("Контрагент"            , Контрагент);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента"    , ДоговорКонтрагента);
	СтруктураПараметровПодбора.Вставить("Организация"           , Организация);
	СтруктураПараметровПодбора.Вставить("Сделка"                , Сделка);

	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен"   , СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"              , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"             , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"       , Валюта);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"       , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("СкрыватьХарактеристику", СкрыватьХарактеристику);
	СтруктураПараметровПодбора.Вставить("Заголовок"             , "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены, ЕстьСкладВТабличнойЧасти;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);

	ЕстьСкладВТабличнойЧасти = мУказаниеСкладовВТЧ;

	Если ТабличнаяЧасть = Услуги Тогда
		ЕстьСкладВТабличнойЧасти = Ложь;
	КонецЕсли;	 
							 
	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = Оборудование ИЛИ ТабличнаяЧасть = ВозвратнаяТара ИЛИ ТабличнаяЧасть = ОбъектыСтроительства)
	   И Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	ИначеЕсли ТабличнаяЧасть = Услуги И Не Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте товары не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;

	Если ЕстьСкладВТабличнойЧасти
	   И ТабличнаяЧасть <> Услуги
	   И ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад
	   И ЗначениеЗаполнено(СкладОрдер) Тогда
		СтруктураОтбора.Вставить("Склад", СкладОрдер);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
			   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		КонецЕсли;
	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			СтрокаТабличнойЧасти.ОтражениеВУСН              = Перечисления.ОтражениеВУСН.Принимаются;
			
			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			СтрокаТабличнойЧасти.Количество = Количество;

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			// Если цену заполнили из регистра, то ее надо пересчитывать по флагам налогообложения.
			// Считаем, что оценочную стоимость возвратной тары всегда задают с НДС
			// ставки берутся из номенклатуры.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                     СпособЗаполненияЦен,
			                                     ТипЦен.ЦенаВключаетНДС,
			                                     УчитыватьНДС,
			                                     Истина,
			                                     УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС));

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			СтрокаТабличнойЧасти.Количество    = Количество;
			СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;

			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");

			// Пересчитаем цену в валюту документа.
			Цена = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена, ВалютаЦены, ВалютаДокумента, ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), Дата);

			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(Цена,
			                                                 СпособЗаполненияЦен,
			                                                 ТипЦен.ЦенаВключаетНДС,
			                                                 УчитыватьНДС,
			                                                 СуммаВключаетНДС,
			                                                 УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
			
		КонецЕсли;
	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	Если ТабличнаяЧасть <> Услуги Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(СтрокаТабличнойЧасти);
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, ИмяТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары", "ВозвратнаяТара");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

	УчетСерийныхНомеров.ОбработкаПодбораНоменклатурыПоСерийномуНомеру(ЗначениеВыбора, СерийныеНомера,
	                                              ТабличнаяЧасть, СтрокаТабличнойЧасти,
	                                              мПараметрыСвязиСтрокТЧ,
	                                              ТабличнаяЧастьИмя,
	                                              ЭтотОбъект);

КонецПроцедуры // ОбработкаПодбора()

// Удаление из меню лишних пунктов.
//
Процедура ОбновитьМенюКнопкиЗаполнить()

	Кнопка = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоЗаказуПоставщику;
	Кнопка.Текст = ?( ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку,
		"Заполнить по заказу покупателя на переработку",
		"Заполнить по заказу поставщику (счету на оплату)");

КонецПроцедуры // ОбновитьМенюКнопкиЗаполнить()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	КонецЕсли;

	// Зададим, какие реквизиты надо редактировать.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);

	ЗаполнениеДокументов.ПриИзмененииЗначенияДоговора(ЭтотОбъект, мТекущаяВалютаВзаиморасчетов, мВалютаРегламентированногоУчета, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, "Покупка", "Товары", мТекущийДоговорКонтрагента);
    ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ВидОперации, ДоговорКонтрагента, "Поступление");
	Если ЕстьКолонкаЗаказ Тогда
		УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, Товары, "ЗаказПоставщику");
		УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, ВозвратнаяТара, "ЗаказПоставщику");
		УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, Услуги, "ЗаказПоставщику");
		УправлениеЗаказами.ПроверитьИОчиститьЗаказВТабличнойЧастиПриИзмененииДоговора(ДоговорКонтрагента, Оборудование, "ЗаказПоставщику");
	КонецЕсли;
	
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Истина);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства тогда 
		ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Ложь);
	Иначе
		ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Ложь);
	КонецЕсли;

	ПроверитьИОчиститьСтрокиВТабличнойЧастиДокументыРасчетовСКонтрагентом();

	Если СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, Новый Структура("ОбъектыСтроительства,Товары,Услуги,ВозвратнаяТара,Оборудование",Ложь), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете) Тогда
		ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства(ОбъектыСтроительства, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;
	
	мВидДоговора          = ДоговорКонтрагента.ВидДоговора;
	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	мРасчетыВУЕ           = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента.ОсновнойПроект) Тогда
		Проект=ДоговорКонтрагента.ОсновнойПроект;
	КонецЕсли;

	РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, ВидОперации, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиОборудование, мКолонкиДокументы, ЭлементыФормы.Сделка, "ЗаказПоставщику", "Поступление");
	ЗаполнитьТекстПроСчетФактуру();
	УстановитьВидимость();

КонецПроцедуры // ПриИзмененииДоговора()

// Выполняет необходимые действия при изменении вида склада.
//
Процедура ПриИзмененииВидаСклада()

	// Определим текущий вид склада
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ВидСклада = СкладОрдер.ВидСклада;
	Иначе
		ВидСклада = СкладОрдер.Склад.ВидСклада;
	КонецЕсли;

	// Оформление колонок таблицы
	ФлагАвтоОтметкиНезаполненого = Истина;

	Если (ВидСклада = Перечисления.ВидыСкладов.Оптовый ИЛИ НЕ ЗначениеЗаполнено(ВидСклада)) И мРазрешитьНулевыеЦеныВОпте Тогда
		ФлагАвтоОтметкиНезаполненого = Ложь;
	КонецЕсли;

	мКолонкиТовары.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	мКолонкиУслуги.Сумма.АвтоОтметкаНезаполненного         = ФлагАвтоОтметкиНезаполненого;
	мКолонкиУслуги.Цена.АвтоОтметкаНезаполненного          = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Сумма.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;
	мКолонкиВозвратнаяТара.Цена.АвтоОтметкаНезаполненного  = ФлагАвтоОтметкиНезаполненого;

КонецПроцедуры // ПриИзмененииВидаСклада()

// Обновляет текущее значение учетной политики розничная торговля облагается ЕНВД.
//
Процедура ПриИзмененииОблагаетсяЕНВД(РежимВызова = "")

	Если НЕ ЗначениеЗаполнено(РежимВызова) Тогда
		ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
			мРозничнаяТорговляОблагаетсяЕНВД = ПараметрыУчетнойПолитики.РозничнаяТорговляОблагаетсяЕНВД;
		Иначе
			мРозничнаяТорговляОблагаетсяЕНВД = Ложь;
		КонецЕсли;

		Если ЗначениеЗаполнено(ВидПоступления) Тогда
			Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
				мТекущийСклад = СкладОрдер;
			Иначе
				мТекущийСклад = СкладОрдер.Склад;
			КонецЕсли;
		Иначе
			мТекущийСклад = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
	Иначе
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

		ЗаполнениеДокументов.ПриИзмененииРозничнаяТорговляОблагаетсяЕНВД(ЭтотОбъект, мВалютаРегламентированногоУчета,
		                                            СпособЗаполненияЦен, "Покупка", РежимВызова, "Товары",
		                                            мРозничнаяТорговляОблагаетсяЕНВД, мТекущийСклад);
		УстановитьВидимость();
	КонецЕсли;

КонецПроцедуры // ПриИзмененииОблагаетсяЕНВД()

// Процедура выполняет заполниение табличной части неполученными ТМЦ по заказу поставщику.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, которую необходимо заполнить.
//
Процедура ЗаполнитьТабличнуюЧастьПоОстаткам(ТабличнаяЧасть)

	ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам;
	ПредставлениеЗаказПоставщику = Метаданные.Документы.ЗаказПоставщику.Представление();

	ЗаполнятьТабличнуюЧасть = Ложь;
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ТекстПредупреждения = "Не выбран договор. Заполнение невозможно.";

	ИначеЕсли НЕ ЗначениеЗаполнено(Сделка)
          или Не (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")
          или ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика")
		  или (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя")
		    И Сделка.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка)) Тогда
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			ТекстПредупреждения = "Не выбран заказ покупателя (переработка).
			                      |Заполнение невозможно.";
		Иначе
			ТекстПредупреждения = "Не выбран заказ поставщику (счет на оплату).
			                      |Заполнение невозможно.";
		КонецЕсли;
	ИначеЕсли Не Сделка.Проведен И Не ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		ТекстПредупреждения = ПредставлениеЗаказПоставщику + " не проведен.
		                     |Заполнение невозможно.";
	Иначе
		ЗаполнятьТабличнуюЧасть = Истина;
	КонецЕсли;

	Если Не ЗаполнятьТабличнуюЧасть Тогда
		Предупреждение(ТекстПредупреждения, ,);
		Возврат;
	КонецЕсли;

	Если ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	Если ТипЗнч(Сделка) = Тип("ДокументСсылка.СчетНаОплатуПоставщика") Тогда
		Если ТабличнаяЧасть = Товары Тогда
			СкопироватьТовары();
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
			СкопироватьВозвратнуюТару();
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			СкопироватьУслуги();
		КонецЕсли;
	Иначе
		Если ТабличнаяЧасть = Товары Тогда
			Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
				ЗаполнитьТоварыПоОстаткамУпр("ВПереработку");
			Иначе
				ЗаполнитьТоварыПоОстаткамУпр();
			КонецЕсли;
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
			ЗаполнитьВозвратнуюТаруПоОстаткамУпр();
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда
			ЗаполнитьУслугиПоОстаткамУпр();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоОстаткам()

Процедура ОбработкаВыбораЗаполненияТабличнойЧастиИзТабличногоДокумента(ЗначениеВыбора)
	
	ТабличнаяЧасть = ЭтотОбъект[ЗначениеВыбора.ИмяТабличнойЧасти];
	ТабличнаяЧасть.Очистить();
	
	Для каждого Строка Из ЗначениеВыбора.ТаблицаДанных Цикл
		
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Строка.Номенклатура;
		СтрокаТабличнойЧасти.Количество = Строка.Количество;
		
		Если ЗначениеВыбора.ИмяТабличнойЧасти = "Товары" Тогда
			
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 
			
			СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
													 Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 
			
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			
			УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ЗначениеВыбора.ИмяТабличнойЧасти = "ВозвратнаяТара" Тогда
			
			// Выполнить общие действия для всех документов при изменении возвратной тары.
			ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
			// Заполнить реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);
			
			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
		КонецЕсли;
		
		
	КонецЦикла;
	
КонецПроцедуры // ()

// Очищает значение реквизита в табличных частях "Товары", "Услуги", "Возвратная тара".
//
Процедура ОчиститьРеквизитВТабличныхЧастях(ИмяРеквизита, КромеУслуг = Ложь, КромеОборудования = Ложь)
	
	// Очистим значения в строках
	Для Каждого Строка Из Товары Цикл
		Строка[ИмяРеквизита] = Неопределено;
	КонецЦикла;
	Если мИспользоватьТару Тогда
		Для Каждого Строка Из ВозвратнаяТара Цикл
			Строка[ИмяРеквизита] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	Если НЕ КромеУслуг Тогда
		Для Каждого Строка Из Услуги Цикл
			Строка[ИмяРеквизита] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование 
		И НЕ КромеОборудования Тогда
		Для Каждого Строка Из Оборудование Цикл
			Строка[ИмяРеквизита] = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Заменяет значение реквизита в табличных частях "Товары", "Услуги", "Возвратная тара".
//
Процедура ЗаменитьЗначениеРеквизитаВТабличныхЧастях(ИмяРеквизита, СтароеЗначение, НовоеЗначение, КромеУслуг = Ложь, КромеОборудования = Ложь)
	
	// Заменим значения в строках
	Для Каждого Строка Из Товары Цикл
		Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
			Строка[ИмяРеквизита] = НовоеЗначение;
		КонецЕсли;
	КонецЦикла;
	Если мИспользоватьТару Тогда
		Для Каждого Строка Из ВозвратнаяТара Цикл
			Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
				Строка[ИмяРеквизита] = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если НЕ КромеУслуг Тогда
		Для Каждого Строка Из Услуги Цикл
			Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
				Строка[ИмяРеквизита] = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование 
		И НЕ КромеОборудования Тогда
		Для Каждого Строка Из Оборудование Цикл
			Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
				Строка[ИмяРеквизита] = НовоеЗначение;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

//Проверяет значение реквизит заказ на соответствие договору в табличной части "ДокументыРасчетовСКонтрагентом"
//
Процедура ПроверитьИОчиститьСтрокиВТабличнойЧастиДокументыРасчетовСКонтрагентом()

	Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
	
		СписокЗаказовДокумента = Новый СписокЗначений;
		Если ЗначениеЗаполнено(Сделка) Тогда
			СписокЗаказовДокумента.Добавить(Сделка);
		КонецЕсли;
		
		Для Каждого Строка ИЗ Товары Цикл
			Если ЗначениеЗаполнено(Строка.ЗаказПоставщику) 
				И СписокЗаказовДокумента.НайтиПоЗначению(Строка.ЗаказПоставщику) = Неопределено Тогда
				СписокЗаказовДокумента.Добавить(Строка.ЗаказПоставщику);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого Строка ИЗ Услуги Цикл
			Если ЗначениеЗаполнено(Строка.ЗаказПоставщику) 
				И СписокЗаказовДокумента.НайтиПоЗначению(Строка.ЗаказПоставщику) = Неопределено Тогда
				СписокЗаказовДокумента.Добавить(Строка.ЗаказПоставщику);
			КонецЕсли;
		КонецЦикла;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			Для Каждого Строка ИЗ Оборудование Цикл
				Если ЗначениеЗаполнено(Строка.ЗаказПоставщику) 
					И СписокЗаказовДокумента.НайтиПоЗначению(Строка.ЗаказПоставщику) = Неопределено Тогда
					СписокЗаказовДокумента.Добавить(Строка.ЗаказПоставщику);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		КоличествоСтрок = ДокументыРасчетовСКонтрагентом.Количество();	
		Для Инд = 1 По КоличествоСтрок Цикл
			Строка = ДокументыРасчетовСКонтрагентом.Получить(КоличествоСтрок - Инд);
			Если ЗначениеЗаполнено(Строка.Сделка) Тогда
				Если СписокЗаказовДокумента.НайтиПоЗначению(Строка.Сделка) = Неопределено Тогда
		        	ДокументыРасчетовСКонтрагентом.Удалить(Строка);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	
	КонецЕсли;
	
КонецПроцедуры

// Изменяет значение реквизита "Заказ поставщику" в табличных частях при изменении "Сделки".
//
Процедура ИзменитьЗаказВТабличнойЧасти()
	
	// Если табличные части пустые - выходим
	Если (Товары.Количество() + Услуги.Количество() + ВозвратнаяТара.Количество() + ДокументыРасчетовСКонтрагентом.Количество()) = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Если колонка заказ недоступна - очистим заказ в табличных частях и выходим
	ЕстьКолонкаЗаказ = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ДокументОбъект.ВидОперации, ДокументОбъект.ДоговорКонтрагента, "Поступление");
	
	Если НЕ ЕстьКолонкаЗаказ Тогда
		ОчиститьРеквизитВТабличныхЧастях("ЗаказПоставщику");
		ПроверитьИОчиститьСтрокиВТабличнойЧастиДокументыРасчетовСКонтрагентом();
		Возврат;
	КонецЕсли;

	// Если не "пустое значение" и не "заказ поставщику" - значение неподходит, выходим
	Если ЗначениеЗаполнено(Сделка) И НЕ ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Возврат;
	КонецЕсли;
	
	// Если не "пустое значение" и не "заказ поставщику" - значение неподходит, выходим
	Если ЗначениеЗаполнено(мСтароеЗначениеСделки) И НЕ ТипЗнч(мСтароеЗначениеСделки) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		Возврат;
	КонецЕсли;
	
	// Если оба значения пустые - менять нечего, выходим
	Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСделки) И НЕ ЗначениеЗаполнено(Сделка) Тогда
		Возврат;
	КонецЕсли;
	
	Если Сделка <> мСтароеЗначениеСделки Тогда // Изменен заказ в шапке
		
		// Получим список заказов из табличных частей документа
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Товары, "ЗаказПоставщику");
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Услуги, "ЗаказПоставщику", СписокЗаказов);
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(ВозвратнаяТара, "ЗаказПоставщику", СписокЗаказов);
		СписокЗаказов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(ДокументыРасчетовСКонтрагентом, "Сделка", СписокЗаказов);
		
		// Приведем тип пустого значения к типу пустого значения в строках ТЧ для поиска
		Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСделки) Тогда
			мСтароеЗначениеСделки = Документы.ЗаказПоставщику.ПустаяСсылка();
		КонецЕсли;
		
		Если СписокЗаказов.Количество() = 0 И ЗначениеЗаполнено(Сделка) Тогда
			// Все поля пустые, можно заполнить выбранным значением
			мСтароеЗначениеСделки = Документы.ЗаказПоставщику.ПустаяСсылка();
			
			ТекстВопроса = "Заполнить значение заказа в табличных частях?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение заказа");
			// Очистим значения в строках
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗаменитьЗначениеРеквизитаВТабличныхЧастях("ЗаказПоставщику", мСтароеЗначениеСделки, Сделка);
			КонецЕсли;
			
		ИначеЕсли НЕ СписокЗаказов.НайтиПоЗначению(мСтароеЗначениеСделки) = Неопределено Тогда
			// В табличных частях есть строки со старым значением сделки
			
			Если НЕ ЗначениеЗаполнено(Сделка) Тогда
				ТекстВопроса = "Очистить значение заказа в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Пустое значение заказа");
				// Очистим значения в строках
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ОчиститьРеквизитВТабличныхЧастях("ЗаказПоставщику");
				КонецЕсли;
			Иначе
				ТекстВопроса = "Заменить значение заказа в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение заказа");
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ЗаменитьЗначениеРеквизитаВТабличныхЧастях("ЗаказПоставщику", мСтароеЗначениеСделки, Сделка);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		мСтароеЗначениеСделки = Сделка;
		
		ПроверитьИОчиститьСтрокиВТабличнойЧастиДокументыРасчетовСКонтрагентом();
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьЗаказВТабличнойЧасти()

// Процедура показывает на закладке "Предоплата" итоговые суммы 
// в валюте взаиморасчетов и в валюте регл.учета - всего по документу, предоплата, осталось оплатить
//
Процедура ПересчетСуммВзаиморасчетов()

	СуммаВзаиморасчетов = УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	Если ДоговорКонтрагента.УчетАгентскогоНДС Тогда
		СуммаВзаиморасчетов = СуммаВзаиморасчетов - Товары.Итог("СуммаНДС") - Услуги.Итог("СуммаНДС") 
		                    - Оборудование.Итог("СуммаНДС") - ОбъектыСтроительства.Итог("СуммаНДС");
	КонецЕсли;
	СуммаВзаиморасчетов = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетов, ВалютаДокумента,
	                                                 ДоговорКонтрагента.ВалютаВзаиморасчетов,
	                                                 ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КурсВзаиморасчетов,
	                                                 ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов);

	РаботаСДиалогами.ЗаполнитьНадписиРасчетовСКонтрагентом(ЭтотОбъект, ЭтаФорма, мВалютаРегламентированногоУчета, СуммаВзаиморасчетов);

КонецПроцедуры

// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	УстановитьДоступностьСубконто(ЭлементыФормы.Услуги.ТекущиеДанные);
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает текущую страницу панели по виду операции документа.
//
Функция УстановитьТекущуюСтраницуОсновнойПанели()
	
	ТабличнаяЧасть = Неопределено;
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
		Или ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Товары;
		ТабличнаяЧасть = ЭлементыФормы.Товары;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Оборудование;
		ТабличнаяЧасть = ЭлементыФормы.Оборудование;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		
		ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ОбъектыСтроительства;
		ТабличнаяЧасть = ЭлементыФормы.ОбъектыСтроительства;
		
	КонецЕсли;
	
	Возврат ТабличнаяЧасть;
	
КонецФункции // УстановитьТекущуюСтраницуОсновнойПанели()

// Процедура установливает доступность полей продукция таб. поля "Услуги"
//
Процедура УстановитьДоступностьПродукции(ТекСтрока)
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Флаг = Истина;
	Если Не ТекСтрока.СтатьяЗатрат.Пустая()
		  И ТекСтрока.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.БракВПроизводстве Тогда
		Флаг = Ложь;
	Иначе
		Если ЗначениеЗаполнено(ТекСтрока.Продукция)
		 ИЛИ ЗначениеЗаполнено(ТекСтрока.ХарактеристикаПродукции)
		 ИЛИ ЗначениеЗаполнено(ТекСтрока.СерияПродукции) Тогда
		 	ТекСтрока.Продукция               = "";
		 	ТекСтрока.ХарактеристикаПродукции = "";
			ТекСтрока.СерияПродукции          = "";
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.Услуги.Колонки.Продукция              .ТолькоПросмотр = Флаг;
	ЭлементыФормы.Услуги.Колонки.ХарактеристикаПродукции.ТолькоПросмотр = Флаг;
	ЭлементыФормы.Услуги.Колонки.СерияПродукции         .ТолькоПросмотр = Флаг;
	
КонецПроцедуры // УстановитьДоступностьПродукции()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	Если ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость = мПоДокументамРасчетов;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.ДокументыРасчетовСКонтрагентом.Видимость = ложь;
	КонецЕсли;
	
	ЭлементыФормы.ВидПоступления.Доступность = ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование;
	
	Колонки      = ЭлементыФормы.Товары.Колонки;
	КолонкиУслуг = ЭлементыФормы.Услуги.Колонки;
	КолонкиТара  = ЭлементыФормы.ВозвратнаяТара.Колонки;
	КолонкиОС    = ЭлементыФормы.Оборудование.Колонки;
	КолонкиОбС   = ЭлементыФормы.ОбъектыСтроительства.Колонки;

	ОтражатьВНалоговомУчетеУСН = (мПрименениеУСН И ОтражатьВНалоговомУчете И (НЕ мПрименениеУСНДоходы));
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));

	// Колонки налога показываем только тогда, когда его учитываем.
	Если УчитыватьНДС <> Колонки.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> КолонкиУслуг.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиУслуг.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> КолонкиОС.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиОС.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> КолонкиОбС.СтавкаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиОбС.СтавкаНДС, УчитыватьНДС);
	КонецЕсли;

	Если УчитыватьНДС <> Колонки.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.СуммаНДС, УчитыватьНДС);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.Всего,    УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> КолонкиУслуг.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиУслуг.СуммаНДС, УчитыватьНДС);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиУслуг.Всего,    УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> КолонкиОС.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиОС.СуммаНДС, УчитыватьНДС);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиОС.Всего,    УчитыватьНДС);
	КонецЕсли;
	Если УчитыватьНДС <> КолонкиОбС.СуммаНДС.Видимость Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиОбС.СуммаНДС, УчитыватьНДС);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиОбС.Всего,    УчитыватьНДС);
	КонецЕсли;

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	// Установка видимости колонок если отражаем в рег. учете.
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиТара.СчетУчетаБУ,   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиТара.СчетУчетаНУ,   ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчетеНП);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.Подразделение, ОтражатьВУправленческомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.ПодразделениеОрганизации, ОтражатьВБухгалтерскомУчете);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.Субконто1,    ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.Субконто2,    ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.Субконто3,    ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.СубконтоНУ1,  ОтражатьВНалоговомУчетеНП);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.СубконтоНУ2,  ОтражатьВНалоговомУчетеНП);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.СубконтоНУ3,  ОтражатьВНалоговомУчетеНП);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиОбС.СчетУчетаБУ,    ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиОбС.СчетУчетаНДС,   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И УчитыватьНДС И НЕ НДСВключенВСтоимость);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиОбС.СчетУчетаНУ,    ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчетеНП);

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.Заказ,     Ложь);
		Колонки.Заказ.ИзменятьВидимость = ложь;
	Иначе

		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.Заказ,     Истина);
        Колонки.Заказ.ИзменятьВидимость = истина;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
	 ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ВидимостьСчетов = Ложь;
	Иначе
		ВидимостьСчетов = Истина;
	КонецЕсли;
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = мОтражатьВРегламентированномУчете И ОтражатьВБухгалтерскомУчете И (ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);

	ОписаниеТабличныхЧастей = Новый Структура();
	ОписаниеТабличныхЧастей.Вставить("Товары", 			Колонки);
	ОписаниеТабличныхЧастей.Вставить("ВозвратнаяТара",	КолонкиТара);
	ОписаниеТабличныхЧастей.Вставить("Услуги",			КолонкиУслуг);
	ОписаниеТабличныхЧастей.Вставить("Оборудование",	КолонкиОС);
	
	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(Дата, Метаданные().Имя, ЭлементыФормы, ОписаниеТабличныхЧастей, ПоказыватьВДокументахСчетаУчета, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП, ВидимостьСчетов И УчитыватьНДС И НЕ НДСВключенВСтоимость);
	
	ЭлементыФормы.СчетУчетаРасчетовПоАвансам.Видимость        = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И ВидимостьСчетов;
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоАвансам.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И ВидимостьСчетов;
	
	ФлагТара = ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства И (ВозвратнаяТара.Количество() > 0 ИЛИ мИспользоватьТару);
	ЭлементыФормы.СчетУчетаРасчетовПоТаре.Видимость        = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И ФлагТара;
	ЭлементыФормы.НадписьСчетУчетаРасчетовПоТаре.Видимость = ЭлементыФормы.СчетУчетаРасчетовПоТаре.Видимость;

	ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость = ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете И ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;

	ЭлементыФормы.ВидПоступления.Видимость = НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);
	ЭлементыФормы.СкладОрдер.Видимость     = НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);

	// Услуги на комиссию и в переработку не принимаем.
	ВидимостьЗакладкиУслуг = (мВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом) И (ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = ВидимостьЗакладкиУслуг;

	ВидимостьПриходногоОрдера = (ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру);

	мКолонкиТовары.ПриходныйОрдер.ИзменятьВидимость         = Истина;
	мКолонкиТовары.ПриходныйОрдер.Видимость                 = ВидимостьПриходногоОрдера;
	мКолонкиТовары.ПриходныйОрдер.ИзменятьВидимость         = ВидимостьПриходногоОрдера;
	мКолонкиВозвратнаяТара.ПриходныйОрдер.ИзменятьВидимость = Истина;
	мКолонкиВозвратнаяТара.ПриходныйОрдер.Видимость         = ВидимостьПриходногоОрдера;
	мКолонкиВозвратнаяТара.ПриходныйОрдер.ИзменятьВидимость = ВидимостьПриходногоОрдера;
	мКолонкиОборудование.ПриходныйОрдер.ИзменятьВидимость = Истина;
	мКолонкиОборудование.ПриходныйОрдер.Видимость         = ВидимостьПриходногоОрдера;
	мКолонкиОборудование.ПриходныйОрдер.ИзменятьВидимость = ВидимостьПриходногоОрдера;

	// Доступность пункта меню "Заполнить по приходному ордеру".
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоПриходномуОрдеру.Доступность          = ВидимостьПриходногоОрдера;
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДобавитьПоПриходномуОрдеру.Доступность           = ВидимостьПриходногоОрдера;
	ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьПоПриходномуОрдеру1.Доступность = ВидимостьПриходногоОрдера;
	ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить.Кнопки.ДобавитьПоПриходномуОрдеру.Доступность   = ВидимостьПриходногоОрдера;

	// Доступность пункта меню "Заполнить по заказу поставщику (счету на оплату)".
	ДоступностьЗаполнитьПоЗаказу = Истина;
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоЗаказуПоставщику.Доступность        = ДоступностьЗаполнитьПоЗаказу;
	ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоЗаказуПоставщиу.Доступность = ДоступностьЗаполнитьПоЗаказу;
	ЭлементыФормы.КоманднаяПанельУслуги.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнитьПоЗаказуПоставщику.Доступность        = ДоступностьЗаполнитьПоЗаказу;

	ВидимостьЗакладкиСчетаУчета = (ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ОтражениеВУСН,  ОтражатьВНалоговомУчетеУСН И ВидимостьЗакладкиУслуг И ВидимостьЗакладкиСчетаУчета);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУслуг.ОтражениеВУСН,  ОтражатьВНалоговомУчетеУСН И ВидимостьЗакладкиУслуг И ВидимостьЗакладкиСчетаУчета);

	Если ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Доступность Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость =
			НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства)
		  И НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	КонецЕсли;

	// Видимость колонок таблицы документов расчетов
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.СуммаРегл,  мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиДокументы.ДатаОплаты, мОтражатьВРегламентированномУчете 
	                                 И мТекущаяВалютаВзаиморасчетов <> мВалютаРегламентированногоУчета);
	
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект");
	
	ЭлементыФормы.СчетУчетаРасчетовСКонтрагентом.АвтоОтметкаНезаполненного = (ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ЭлементыФормы.СчетУчетаРасчетовПоАвансам.АвтоОтметкаНезаполненного     = (ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	ЭлементыФормы.СчетУчетаРасчетовПоТаре.АвтоОтметкаНезаполненного        = (ВозвратнаяТара.Количество() > 0);
		
КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если документ - внешний заказ, его дата совпадает с текущей и установлен хотя бы один
// из флагов Авторазмещение или Авторезервирование.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
		НачалоДня(Дата) = НачалоДня(ТекущаяДата())
		И ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку;

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает автоотметку незаполненного для Склада
Процедура УстановитьАвтоотметкуСклада()

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Если мСкладИзШапки Тогда
			Автоотметка = мАвтоОтметкаСкладОрдера;
		Иначе
			Автоотметка = мАвтоОтметкаСкладОрдера
			              И (Товары.Количество() > 0 ИЛИ ВозвратнаяТара.Количество() > 0);
		КонецЕсли;

		ЭлементыФормы.СкладОрдер.АвтоотметкаНезаполненного = Автоотметка;

		Если ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного <> Автоотметка И НЕ ЗначениеЗаполнено(СкладОрдер) Тогда
			ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного = Автоотметка;
		КонецЕсли;
	Иначе
		Автоотметка = Ложь;

		ЭлементыФормы.СкладОрдер.АвтоотметкаНезаполненного = Автоотметка;

		Если ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного <> Автоотметка Тогда
			ЭлементыФормы.СкладОрдер.ОтметкаНезаполненного = Автоотметка;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // УстановитьАвтоотметкуСклада()

// Процедура устанавливает заголовки по выбранному договору для:
// - элементов формы НадписьСделки, НадписьСуммаВзаиморасчетов.
//
// Параметры:
//  Нет.
//
Процедура УстановитьЗаголовкиПоДоговору()

	ФлагЗаказПокупателя = Ложь;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		РаботаСДиалогами.УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма, Истина);
		ФлагЗаказПокупателя = Истина;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства тогда 
		РаботаСДиалогами.УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма, Ложь);
	Иначе
		РаботаСДиалогами.УстановитьНадписьСделки(ЭтотОбъект, ЭтаФорма, Ложь);
	КонецЕсли;
	РаботаСДиалогами.УстановитьНадписьСуммыВзаиморасчетов(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // УстановитьЗаголовкиПоДоговору()

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	// При изменении данных обновим суммы в подвале.
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьНДСДокумента(ЭтотОбъект));

	ВременнаяСтрока = "";

	Если (ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента))
	   И (ДокументОбъект.ВалютаДокумента <> мВалютаРегламентированногоУчета) Тогда

		ВременнаяСтрока = ВременнаяСтрока + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(ВалютаДокумента, 
	                                                                               ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
	                                                                               ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
	                                                                               мВалютаРегламентированногоУчета) + ", ";

	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.ТипЦен) Тогда
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: " + ДокументОбъект.ТипЦен;
	Иначе
		ВременнаяСтрока = ВременнаяСтрока + "Тип цен: Не заполнено!";
	КонецЕсли;

	Если ЗначениеЗаполнено(ДокументОбъект.УсловиеПродаж) Тогда
		ВременнаяСтрока = ВременнаяСтрока + ", Условие продаж: " + ДокументОбъект.УсловиеПродаж;
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьТоварыИтоги.Заголовок = ВременнаяСтрока;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ДокументОбъект.ВалютаДокумента) +"):";
	КонецЕсли;

	Если СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Процедура управляет доступностью колонок субконто в табличной части услуги
Процедура УстановитьДоступностьСубконто(СтрокаТЧ)

	Колонки = ЭлементыФормы.Услуги.Колонки;
	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;

	Если СтрокаТЧ = неопределено Тогда
		Возврат;
	КонецЕсли;

	ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСтатьюЗатратНаПроизводственныеРасходы(СтрокаТЧ.СтатьяЗатрат);

	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетЗатрат,
							 ТекущиеДанные.Субконто1,
							 Колонки.Субконто1,
							 ТекущиеДанные.Субконто2,
							 Колонки.Субконто2,
							 ТекущиеДанные.Субконто3,
							 Колонки.Субконто3,
							 Колонки.СчетЗатрат,
							 Ложь);
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетЗатратНУ,
							 ТекущиеДанные.СубконтоНУ1,
							 Колонки.СубконтоНУ1,
							 ТекущиеДанные.СубконтоНУ2,
							 Колонки.СубконтоНУ2,
							 ТекущиеДанные.СубконтоНУ3,
							 Колонки.СубконтоНУ3,
							 Колонки.СчетЗатратНУ,
							 Ложь);

КонецПроцедуры // УстановитьДоступностьСубконто()

// Процедура устанавливает доступность меню "Проверить"
// командной панели "КоманднаяПанельТовары"
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьМенюПроверить()

	Перем Кнопка;

	УстановитьДоступностьКнопкиПроверитьШтрихКоды();

	Кнопка = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Проверить;
	Если Кнопка.Кнопки.Количество() = 0 Тогда
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Удалить(Кнопка);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьМенюПроверить()

// Процедура устанавливает доступность пункта "Штрих-коды" меню "Проверить"
// командной панели "КоманднаяПанельТовары"
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьКнопкиПроверитьШтрихКоды()

	КнопкаПроверить = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Проверить;
	Если ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.СканерШтрихКода,
	                                       Справочники.КассыККМ.ПустаяСсылка()).Количество() = 0 Тогда
		Кнопка = КнопкаПроверить.Кнопки.ШтрихКоды;
		КнопкаПроверить.Кнопки.Удалить(Кнопка);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьКнопкиПроверитьШтрихКоды()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если ЭтоНовый() И (ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику")) Тогда
		Если Сделка.ВидОперации = Перечисления.ВидыОперацийЗаказПоставщику.Переработка Тогда
			Предупреждение("Поступление товаров и услуг не вводится на основании заказа поставщику с видом операции - ""Переработка""");
			Отказ = Истина;
			Возврат;
		КонецЕсли;	
	КонецЕсли;	
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ЗаказПокупателя")
	И Не ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
		Предупреждение("Документ можно вводить только на основании заказ покупателя с видом операции ""Переработка"".");
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрОснование) Тогда
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ПриходныйОрдерНаТовары") Тогда
			Если ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.ОтПодотчетника Тогда
				Предупреждение("Поступление можно вводить только на основании приходного ордера от поставщика!");
				Отказ = Истина;
			ИначеЕсли ПараметрОснование.ВидОперации = Перечисления.ВидыОперацийПриходныйОрдер.НеОпределен Тогда
				Предупреждение("Поступление нельзя вводить на основании 
				                |приходного ордера с видом операции ""Не определен""!");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрОснование) Тогда
		
		ОчиститьСкладПриВидеОперацииОборудование(Ложь);
		
	КонецЕсли;
	
	// ЭлектронныеДокументы
	РаботаСДиалогами.УдалитьКнопкуЭД(ЭлементыФормы.ДействияФормы.Кнопки, мИспользоватьОбменЭД);
	// Конец ЭлектронныеДокументы

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Покупка", ПараметрОбъектКопирования);

		Если ЗначениеЗаполнено(Сделка) И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПокупателя") И Сделка.ВидОперации = Перечисления.ВидыОперацийЗаказПокупателя.Переработка Тогда
			НДСВключенВСтоимость    = Истина;
			УчитыватьНДС            = Ложь;
			СуммаВключаетНДС        = Ложь;
		КонецЕсли; 
		Если ВидОперации <> Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			РегистрироватьЦеныПоставщика = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "РегистрироватьЦеныПоставщика");
		КонецЕсли;

		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ЗаполнитьСтруктуруСчетовУчетаШапки());
	КонецЕсли;
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);
	//Вид операции "В переработку" не отражается в НУ
	//	Сброс флага необходимо выполнить после выполнения "РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете",
	//		т.к. внутри данной процедуры признак отражения в НУ может быть взведен в Истина в соответствии с настройками пользователя по умолчанию
	Если  ЭтоНовый() И ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ОтражатьВНалоговомУчете = Ложь;
	КонецЕсли;

	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");
	СтруктураКолонок.Вставить("ЕдиницаХранения");

	// Установить ограничение - изменять видимость колонок для табличной части
	// "Возвратная тара".
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ВозвратнаяТара.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("СтавкаНДС");
	СтруктураКолонок.Вставить("СуммаНДС");
	СтруктураКолонок.Вставить("ЕдиницаИзмерения");
	
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Товары.Колонки, СтруктураКолонок);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("СтатьяЗатрат");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("Сумма");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Услуги.Колонки, СтруктураКолонок);
	
	//ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Оборудование.Колонки, СтруктураКолонок);
	//
	//// Установить колонки, видимостью которых пользователь управлять не может.
	//СтруктураКолонок.Вставить("ОбъектСтроительства");
	//
	//ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ОбъектыСтроительства.Колонки, СтруктураКолонок);
	
	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                    ВидОперации.Метаданные().ЗначенияПеречисления,
	                                    Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
	                                    
	// Вывести в заголовке формы вид операции.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) + " по ордеру", ЭтотОбъект, ЭтаФорма);
	Иначе
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

	// Определить счет-фактуру, введенный на основании этого документа, если такой 
	// счет-фактура существует.
	ЗаполнитьТекстПроСчетФактуру();

	// Обновить содержание информационных строк.
	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка, Истина);
	УстановитьЗаголовкиПоДоговору();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента             = Дата;
	мТекущаяВалютаВзаиморасчетов      = ДоговорКонтрагента.ВалютаВзаиморасчетов;
    мПрименениеУСН 					  = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы 			  = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	мВедениеУчетаЗатратПоПроектам = УправлениеПроектами.ВедениеУчетаЗатратПоПроектам();

	ПриИзмененииОблагаетсяЕНВД();

	// Установить в зависимости от вида поступления тип для выбора СкладаОрдера
	РаботаСДиалогами.УстановитьТипСкладаОрдера(ЭтотОбъект, ЭлементыФормы);

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиОборудование);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиОборудование);

	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);

	ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование 
	 	ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства
	Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = Истина;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = Ложь;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Оборудование.Видимость = Истина;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.Оборудование.Видимость = Ложь;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОбъектыСтроительства.Видимость = Истина;
		ЭлементыФормы.Сделка.Доступность = ложь;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОбъектыСтроительства.Видимость = Ложь;
		ЭлементыФормы.Сделка.Доступность = истина;
	КонецЕсли;

	Если ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Доступность Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = Истина;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ЭлементыФормы.ГиперссылкаСчетФактура.Доступность = Ложь;
	Иначе
		ЭлементыФормы.ГиперссылкаСчетФактура.Доступность = Истина;
	КонецЕсли;

	РаботаСДиалогами.УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, мКолонкиВозвратнаяТара, ЭлементыФормы.СкладОрдер,
		"Склад", мУказаниеСкладовВТЧ Или (ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру), мКолонкиОборудование);

	РаботаСДиалогами.УстановитьВидимостьКолонкиПроект(ЭлементыФормы.Услуги.Колонки, , мУказаниеПроектовВТабличнойЧастиДокументов И мВедениеУчетаЗатратПоПроектам);
	
	//Запомним автоотметку поля шапки СкладОрдер
	мАвтоОтметкаСкладОрдера = ЭлементыФормы.СкладОрдер.АвтоОтметкаНезаполненного;

	мВидДоговора          = ДоговорКонтрагента.ВидДоговора;
	мПоДокументамРасчетов = ДоговорКонтрагента.ВестиПоДокументамРасчетовСКонтрагентом;
	мРасчетыВУЕ           = ДоговорКонтрагента.РасчетыВУсловныхЕдиницах;
	
	// Сохраним текущее значение сделки и склада
	мСтароеЗначениеСделки = Сделка;
	мСтароеЗначениеСклада = СкладОрдер;

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// Установим текущую страницу.
	ТабличнаяЧастьТекущейСтраницы = УстановитьТекущуюСтраницуОсновнойПанели();

	РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, ВидОперации, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиОборудование, мКолонкиДокументы, ЭлементыФормы.Сделка, "ЗаказПоставщику", "Поступление");
	ОбновитьМенюКнопкиЗаполнить();
	ПриИзмененииВидаСклада();

	// Установить автоотметку
	УстановитьАвтоотметкуСклада();
	
	УчетСерийныхНомеров.УстановитьВидимостьКнопкиВводаСерийныхНомеров(ЭлементыФормы.КоманднаяПанельТовары);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма,, ТабличнаяЧастьТекущейСтраницы);

	// проверка и показ заметок
	УправлениеКонтактами.ПроверитьЗаметкиПоДокументу(ЭтотОбъект);

	УстановитьДоступностьМенюПроверить();

	ЭлементыФормы.Товары.Колонки.Заказ.ИзменятьВидимость = Ложь;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);

	РаботаСДиалогами.УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных(ЭтаФорма, мТерминалы);
	
	// ЭлектронныеДокументы
	ЭлементыФормы.РамкаЭлектронныеДокументы.Видимость 	= мИспользоватьОбменЭД;
	ЭлементыФормы.НадписьСостояниеЭД.Видимость 			= мИспользоватьОбменЭД;
	ЭлементыФормы.ТекстСостоянияЭД.Видимость 			= мИспользоватьОбменЭД;
	
	Если мИспользоватьОбменЭД Тогда
		ТекстСостоянияЭД = ЭлектронныеДокументыКлиент.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	КонецЕсли;
	// Конец ЭлектронныеДокументы

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Пересчитаем сумму взаиморасчетов.
	Если КурсВзаиморасчетов = 0 Тогда
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = 0;
	Иначе
		ЭлементыФормы.СуммаВзаиморасчетов.Значение = ОбщегоНазначения.ФорматСумм(МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(УчетНДС.ПолучитьСуммуДокументаСНДС(ЭтотОбъект),  
													ВалютаДокумента, мТекущаяВалютаВзаиморасчетов,
													ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета) , КурсВзаиморасчетов,
													ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета), КратностьВзаиморасчетов));
	КонецЕсли;

	ЭлементыФормы.ИнфНадписьКурса.Заголовок = "   ( " + РаботаСДиалогами.ПолучитьИнформациюКурсаВалютыСтрокой(мТекущаяВалютаВзаиморасчетов, 
	                                                                                           КурсВзаиморасчетов,
	                                                                                           КратностьВзаиморасчетов,
	                                                                                           мВалютаРегламентированногоУчета) + " )";

	ОбновитьПодвал();

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.ОсновнаяПанель.Страницы;
	СтраницаПанели.Тара.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
	СтраницаПанели.Оборудование.Заголовок = "Оборудование (" + ДокументОбъект.Оборудование.Количество() + " поз.)";
	СтраницаПанели.ОбъектыСтроительства.Заголовок = "Объекты строительства (" + ДокументОбъект.ОбъектыСтроительства.Количество() + " поз.)";
	СтраницаПанели.ДокументыРасчетовСКонтрагентом.Заголовок = "Предоплата (" + ДокументОбъект.ДокументыРасчетовСКонтрагентом.Количество() + " поз.)";
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		СтраницаПанели.Товары.Заголовок = "Материалы ("   + ДокументОбъект.Товары.Количество() + " поз.)";
		СтраницаПанели.Услуги.Заголовок = "Доп. услуги (" + ДокументОбъект.Услуги.Количество() + " поз.)";
	Иначе
		СтраницаПанели.Товары.Заголовок = "Товары ("      + ДокументОбъект.Товары.Количество() + " поз.)";
		СтраницаПанели.Услуги.Заголовок = "Услуги ("      + ДокументОбъект.Услуги.Количество() + " поз.)";
	КонецЕсли;
	
	ПересчетСуммВзаиморасчетов();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьУслуги" Тогда
			ОбработкаПодбора(Услуги, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ЗаполнениеТабличнойЧастиИзТабличногоДокумента" Тогда
			ОбработкаВыбораЗаполненияТабличнойЧастиИзТабличногоДокумента(ЗначениеВыбора);
			
		ИначеЕсли Команда = "ЗаполнениеТабличныхЧастей" Тогда

			Если ЗначениеВыбора.ЗаполнятьТовары Тогда
				ОбработкаЗаполнения(Товары, ЗначениеВыбора.Товары);
			КонецЕсли;
			Если ЗначениеВыбора.ЗаполнятьТару И мИспользоватьТару Тогда
				ОбработкаЗаполнения(ВозвратнаяТара, ЗначениеВыбора.ВозвратнаяТара);
			КонецЕсли;
			Если ЗначениеВыбора.ЗаполнятьУслуги Тогда
				ОбработкаЗаполнения(Услуги, ЗначениеВыбора.Услуги);
			КонецЕсли;
			Если ЗначениеВыбора.ЗаполнятьОборудование Тогда
				ОбработкаЗаполнения(Оборудование, ЗначениеВыбора.Оборудование);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) + " по ордеру", ЭтотОбъект, ЭтаФорма);
	Иначе
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
		МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// ЭлектронныеДокументы
	Если мИспользоватьОбменЭД Тогда
		ТекстСостоянияЭД = ЭлектронныеДокументыКлиент.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	КонецЕсли;
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ПредопределенноеЗначение("Перечисление.КлючевыеОперации.ПроведениеДокументаПоступлениеТоваровУслуг"));
	// Конец ОценкаПроизводительности

КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронныеДокументы
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ТекстСостоянияЭД = ЭлектронныеДокументыКлиент.ПолучитьТекстСостоянияЭД(Ссылка, ЭтаФорма);
	ИначеЕсли ИмяСобытия = "ОбновитьДокументИБПослеЗаполнения" Тогда
		ЭтаФорма.Прочитать();
	КонецЕсли;
	// Конец ЭлектронныеДокументы

КонецПроцедуры
///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                ТипЦен, Контрагент, ДоговорКонтрагента);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Оборудование" Тогда
		ОбработкаПодбора(Оборудование, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, ВалютаДокумента,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                ТипЦен, Контрагент, ДоговорКонтрагента);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Оборудование" Тогда
		ОбработкаПодбора(Оборудование, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                ВалютаДокумента, Номер,
	                                                мУказаниеСкладовВТЧ, ТипЦен,
	                                                Контрагент, ДоговорКонтрагента);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Услуги" Тогда
		ОбработкаПодбора(Услуги, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Оборудование" Тогда
		ОбработкаПодбора(Оборудование, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоЗаказуПоставщику(Кнопка)

	ЗаполнитьТабличнуюЧастьПоОстаткам(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Скопировать состав" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеЗаполнитьПоПриходномуОрдеру(Кнопка)

	Если НЕ ЗначениеЗаполнено(СкладОрдер) Тогда
		Предупреждение("Не выбран приходный ордер!");
		Возврат;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда

		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 

		Товары.Очистить();

	КонецЕсли;

	ЗаполнитьТоварыПоОснованиюУпр(СкладОрдер, Товары);
	ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // КоманднаяПанельТоварыДействиеСкопироватьСостав()

// Процедура вызывается при выборе пункта меню "Добавить по приходному ордеру" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельТоварыДействиеДобавитьПоПриходномуОрдеру(Кнопка)
	
	ФормаОрдера = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора();
	ФормаОрдера.Заголовок = "Выберите приходный ордер для заполнения документа поступления";
	ФормаОрдера.РежимВыбора = Истина;
	ПриходныйОрдрер = ФормаОрдера.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(ПриходныйОрдрер) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоОснованиюУпр(ПриходныйОрдрер, Товары);

КонецПроцедуры


// Процедура вызывается при нажатии кнопки "Изменить" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// группового изменения значений реквизитов табличной части "Товары".
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = УчитыватьНДС; 
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = (СкладОрдер.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	Иначе
		ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = (СкладОрдер.Склад.ВидСклада = Перечисления.ВидыСкладов.НТТ);
	КонецЕсли;
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;
	
	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "ЦеныВалюта" командной панели
// табличного поля "Товары", вызывает сервисный механизм для изменения
// общих для всей табличной части "Товары" реквизитов - таких, например,
// как тип цен, валюта и т. д.
//
Процедура КоманднаяПанельТоварыДействиеЦеныВалюта(Кнопка)

	СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов;

	// Задать набор реквизитов для редактирования.
	СтруктураРеквизитовДокумента = Ценообразование.ПолучитьСтруктуруРеквизитовДокументаДляЦенообразования(ЭтотОбъект);
	СтруктураРеквизитовДокумента.Вставить("НДСВключенВСтоимость");
	СтруктураЗапрещенных = Неопределено;
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
	 ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
	 
	 	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
			СтруктураЗапрещенных = Новый Структура("НДСВключенВСтоимость");
		Иначе
			СтруктураЗапрещенных = Новый Структура("НДСВключенВСтоимость, УчитыватьНДС, СуммаВключаетНДС, РегистрироватьЦеныПоставщика");
		КонецЕсли;

	КонецЕсли;

	// Вызов общей формы "Цены и валюта" и пересчеты по результатам выбора в этой форме.
	СтруктураЗначений = Ценообразование.ОткрытьФормуЦеныИВалюта(ДокументОбъект, СтруктураРеквизитовДокумента, мВалютаРегламентированногоУчета,
	                                            СтруктураЗапрещенных, "Товары");
	Если СтруктураЗначений <> Неопределено Тогда
		ЗаполнениеДокументов.ИзменитьЦеныВалюту(ЭтотОбъект, СпособЗаполненияЦен, СтруктураРеквизитовДокумента, СтруктураЗапрещенных, "Товары", мВалютаРегламентированногоУчета, , СтруктураЗначений);
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // КоманднаяПанельТоварыКнопкаЦеныВалюта()

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Товары".
//
Процедура КоманднаяПанельТоварыСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Ложь);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Товары");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();

КонецПроцедуры // КоманднаяПанельТоварыСерийныеНомера()

// Процедура вызывается при выборе пункта меню "Заполнить по остаткам" кнопки "Заполнить"
// командной панели табличного поля "Возвратная тара",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоЗаказуПоставщику(Кнопка)

	ЗаполнитьТабличнуюЧастьПоОстаткам(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоОстаткам()

// Процедура вызывается при выборе пункта меню "Заполнить по приходному ордеру" кнопки "Заполнить"
// командной панели табличного поля "Возвратная тара",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельВозвратнаяТараДействиеЗаполнитьПоПриходномуОрдеру(Кнопка)   

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда
		Предупреждение("Выбран вид поступления на склад, а не по ордеру!");
		Возврат;
	Иначе
		Если НЕ ЗначениеЗаполнено(СкладОрдер) Тогда
			Предупреждение("Не выбран приходный ордер!");
			Возврат;
		КонецЕсли;
	КонецЕсли;

	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ВозвратнаяТара.Очистить();
		
	КонецЕсли;
	
	ЗаполнитьТоварыПоОснованиюУпр(СкладОрдер, ВозвратнаяТара);
	
КонецПроцедуры

 // Процедура вызывается при выборе пункта меню "Добавить по приходному ордеру" кнопки "Заполнить"
// командной панели табличного поля "Товары",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельВозвратнаяТараДействиеДобавитьПоПриходномуОрдеру(Кнопка)
	
	ФормаОрдера = Документы.ПриходныйОрдерНаТовары.ПолучитьФормуВыбора();
	ФормаОрдера.Заголовок = "Выберите приходный ордер для заполнения документа поступления";
	ФормаОрдера.РежимВыбора = Истина;
	ПриходныйОрдрер = ФормаОрдера.ОткрытьМодально();

	Если НЕ ЗначениеЗаполнено(ПриходныйОрдрер) Тогда
		Возврат;
	КонецЕсли;

	ЗаполнитьТоварыПоОснованиюУпр(ПриходныйОрдрер, ВозвратнаяТара);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при выборе пункта меню "Заполнить по заказу поставщику" кнопки "Заполнить"
// командной панели табличного поля "Услуги",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельУслугиДействиеЗаполнитьПоЗаказуПоставщику(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоОстаткам(Услуги);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Услуги", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Услуги".
//
Процедура КоманднаяПанельУслугиДействиеПодбор(Кнопка)

	ДействиеПодбор(Услуги);

КонецПроцедуры // КоманднаяПанельУслугиДействиеПодбор()

// Процедура вызывается при выборе пункта меню "Заполнить по заказу поставщику" кнопки "Заполнить"
// командной панели табличного поля "Оборудование",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельОборудованиеДействиеЗаполнитьПоЗаказуПоставщику(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(Сделка) Тогда
		Предупреждение("Не выбран заказ поставщику!");
		Возврат;
	КонецЕсли;

	Если Оборудование.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Оборудование.Очистить();
	КонецЕсли;
	
	ЗаполнитьОборудованиеПоОстаткамУпр();
КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить по заказам документа" 
// кнопки "Заполнить" командной панели табличного поля "Документы расчетов с контрагентом",
// вызывает сервисный механизм для заполнения табличной части.
//
Процедура КоманднаяПанельДокументыРасчетовСКонтрагентомЗаполнитьТолькоПоЗаказу(Кнопка)
	
	УправлениеВзаиморасчетами.ЗаполнитьПредоплату(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
// Обработчик уставливается динамически методом "Действие"
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг[Кнопка.Имя];
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ВидПоступления) Тогда
		ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад;
		РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
	
		// Оборудование может поступать только на оптовый склад
		ОчиститьСкладПриВидеОперацииОборудование(Ложь);
		
		// При виде операции оборудование вид договора должен быть с поставщиком
		Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.ВидДоговора <> Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			ПриИзмененииДоговора();
		КонецЕсли;
		//Очистим заказ, если у него неправильный тип
		Если ЗначениеЗаполнено(Сделка) И ТипЗнч(Сделка)=Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			Сделка = Неопределено;
		КонецЕсли;
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) + " по ордеру", ЭтотОбъект, ЭтаФорма);
	Иначе
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Товары.Видимость = НЕ (ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства);

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование 
	 ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = Истина;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.Услуги.Видимость = Ложь;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Оборудование.Видимость = Истина;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.Оборудование.Видимость = Ложь;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОбъектыСтроительства.Видимость = Истина;
		ЭлементыФормы.Сделка.Доступность = ложь;
		Если ЗначениеЗаполнено(Сделка) Тогда
			Сделка = неопределено;
		КонецЕсли;
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов <> Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом Тогда
			ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.ОбъектыСтроительства.Видимость = Ложь;
		ЭлементыФормы.Сделка.Доступность = истина;
	КонецЕсли;

	Если ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Доступность Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.Тара.Видимость = Истина;
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ЭлементыФормы.ГиперссылкаСчетФактура.Доступность = Ложь;
		мКолонкиТовары.ЗаказПоставщику.ТекстШапки = "Заказ покупателя";
	Иначе
		ЭлементыФормы.ГиперссылкаСчетФактура.Доступность = Истина;
		мКолонкиТовары.ЗаказПоставщику.ТекстШапки = "Заказ поставщику";
	КонецЕсли;
	
	// Установим текущую страницу.
	УстановитьТекущуюСтраницуОсновнойПанели();

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
	 ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда

		// Очистим реквизиты счетов в табличных частях.
		ПустойБУ = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		ПустойНУ = ПланыСчетов.Налоговый.ПустаяСсылка();

		Для каждого Строка Из Товары Цикл
			Строка.СчетУчетаНДС = ПустойБУ;
			Строка.СчетУчетаНУ  = ПустойНУ;
		КонецЦикла;

		НДСВключенВСтоимость    = Истина;
		УчитыватьНДС            = Ложь;
		СуммаВключаетНДС        = Ложь;

		ОтражатьВНалоговомУчете = Ложь;
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = Истина;
		
		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
			РегистрироватьЦеныПоставщика = Ложь;
		КонецЕсли;
	Иначе
		Если Не УчитыватьНДС Тогда
			НДСВключенВСтоимость    = Ложь;
			УчитыватьНДС            = Истина;
			СуммаВключаетНДС        = Истина;
		КонецЕсли;
		
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = Истина;
	КонецЕсли;

	Если СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, Новый Структура("ОбъектыСтроительства,Товары,Услуги,ВозвратнаяТара,Оборудование",Ложь), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете) Тогда
		ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства(ОбъектыСтроительства, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;
	
	ОбновитьМенюКнопкиЗаполнить();
	ОчиститьНенужныеТабличныеЧасти();

	// Установить видимость реквизитов по виду операции.
	РаботаСДиалогами.УстановитьВидимостьКолонкиЗаказ(ЭлементыФормы, ВидОперации, ДоговорКонтрагента, мКолонкиТовары, мКолонкиВозвратнаяТара, мКолонкиУслуги, мКолонкиОборудование, мКолонкиДокументы, ЭлементыФормы.Сделка, "ЗаказПоставщику", "Поступление");
	УстановитьВидимость();
	УстановитьЗаголовкиПоДоговору();

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда
		ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Истина);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства тогда 
		ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Ложь);
	Иначе
		ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Ложь);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	// Очистим записи документа по регистрам остатков и заказов покупателей, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборОстаткиТоваров = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборОстаткиТоваров.Отбор.Регистратор.Установить(Ссылка);
		НаборОстаткиТоваров.Записать();
		НаборЗаказыПоставщикам = РегистрыНакопления.ЗаказыПоставщикам.СоздатьНаборЗаписей();
		НаборЗаказыПоставщикам.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаказыПоставщикам.Записать();
		НаборЗаказыПокупателей = РегистрыНакопления.ЗаказыПокупателей.СоздатьНаборЗаписей();
		НаборЗаказыПокупателей.Отбор.Регистратор.Установить(Ссылка);
		НаборЗаказыПокупателей.Записать();
		НаборВнутренниеЗаказы = РегистрыНакопления.ВнутренниеЗаказы.СоздатьНаборЗаписей();
		НаборВнутренниеЗаказы.Отбор.Регистратор.Установить(Ссылка);
		НаборВнутренниеЗаказы.Записать();
		НаборТоварыВРезерве = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборТоварыВРезерве.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыВРезерве.Записать();
		НаборРазмещение = РегистрыНакопления.РазмещениеЗаказовПокупателей.СоздатьНаборЗаписей();
		НаборРазмещение.Отбор.Регистратор.Установить(Ссылка);
		НаборРазмещение.Записать();
		НаборВзаиморасчетыСКонтрагентамиПоДокументамРасчетов = РегистрыНакопления.ВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.СоздатьНаборЗаписей();
		НаборВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Отбор.Регистратор.Установить(Ссылка);
		НаборВзаиморасчетыСКонтрагентамиПоДокументамРасчетов.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьТабличныеЧастиПередПроведениемУпр();

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик события "ПриНажатии" пункта меню "ШтрихКоды"
// "КоманднаяПанельТовары"
//
// Параметры
//  Кнопка – <КнопкаКоманднойПанели> 
//         – кнопка "ШтрихКоды"
//
Процедура КоманднаяПанельТоварыШтрихКоды(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПроверкиШтрихкодов(ЭтаФорма, ЭтотОбъект, мПараметрыСвязиСтрокТЧ);

КонецПроцедуры // КоманднаяПанельТоварыШтрихКоды()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	ПриИзмененииОблагаетсяЕНВД("ДатаДокумента");

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	мПрименениеУСН 		  = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы  = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бухгалтерском учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
	 ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
		ОтражатьВНалоговомУчете = Ложь;
	Иначе
		ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	КонецЕсли;

	Если НЕ Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;

	Если СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, Новый Структура("ОбъектыСтроительства,Товары,Услуги,ВозвратнаяТара,Оборудование",Ложь), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете) Тогда
		ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства(ОбъектыСтроительства, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;
		
	Если Элемент.Значение Тогда
		УстановитьВидимость();
	КонецЕсли;
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	Если СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Истина, Новый Структура("ОбъектыСтроительства,Товары,Услуги,ВозвратнаяТара,Оборудование",Ложь), Неопределено, ОтражатьВНалоговомУчете) Тогда
		ЗаполнитьСчетаУчетаВТабЧастиПоОбъектамСтроительства(ОбъектыСтроительства, Неопределено, ОтражатьВНалоговомУчете);
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

	// Выполняем общие действия для всех документов при изменении Организация.
	СтарыйДоговор = ДоговорКонтрагента;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);
	ПриИзмененииОблагаетсяЕНВД("Организация");
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку
	 ИЛИ ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом и ОтражатьВНалоговомУчете Тогда
		ОтражатьВНалоговомУчете = Ложь;
	КонецЕсли;
	
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	мПрименениеУСНДоходы = НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	
	Если НЕ СтарыйДоговор = ДоговорКонтрагента Тогда
		ПриИзмененииДоговора();
	КонецЕсли;	
	
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента.
//
Процедура КонтрагентПриИзменении(Элемент)

	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры // КонтрагентПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Склад
//
Процедура СкладОрдерПриИзменении(Элемент)

	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру Тогда

		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации) + " по ордеру", ЭтотОбъект, ЭтаФорма);

		// Если контрагент еще не был выбран, заполним его по ордеру
		Если ЗначениеЗаполнено(СкладОрдер)
		   И НЕ ЗначениеЗаполнено(Контрагент) Тогда
			Контрагент = СкладОрдер.Контрагент;

			// Выполняем общие действия для всех документов при изменении Контрагент.
			ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект, мСтруктураПараметровДляПолученияДоговора);

			// Могли поменять договор.
			ПриИзмененииДоговора();

		КонецЕсли;

	Иначе
		РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

	// Установить тип реквизита для ввода (если, например, поле очистили)
	РаботаСДиалогами.УстановитьТипСкладаОрдера(ЭтотОбъект, ЭлементыФормы);

	ПриИзмененииОблагаетсяЕНВД("Склад");
	ПриИзмененииВидаСклада();
	
	Если мУказаниеСкладовВТЧ Тогда
		РаботаСДиалогами.ИзменитьЗначениеСкладаВТабЧастях(
			ЭтотОбъект,
			СкладОрдер,
			мСтароеЗначениеСклада,
			"Товары, ВозвратнаяТара" + ?(ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование, ", Оборудование", ""),
			?(ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру, "ПриходныйОрдер", "Склад"));
	КонецЕсли;

КонецПроцедуры // СкладОрдерПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СкладОрдер
//
Процедура СкладОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)

	мСтароеЗначениеСклада = СкладОрдер;
	
	// Определить в зависимости от вида поступления тип для выбора СкладаОрдера
	Если ВидПоступления = Перечисления.ВидыПоступленияТоваров.НаСклад Тогда

		Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
			РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.Равно, СтандартнаяОбработка, Перечисления.ВидыСкладов.Оптовый);
		Иначе
			РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.НеРавно, СтандартнаяОбработка);
		КонецЕсли;

	Иначе
        РаботаСДиалогами.НачалоВыбораПриходногоОрдера(Элемент, СтандартнаяОбработка, Организация, Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика);

	КонецЕсли;

КонецПроцедуры // СкладОрдерНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда

		// В этом случае нужны все договора, кроме "по расчетным документам".
		СтруктураДополнительныхПараметров = Новый Структура();
		СтруктураОтбора = Новый Структура();
		
		СписокВедениеВзаиморасчетовПоДоговорам = Новый СписокЗначений;
		СписокВедениеВзаиморасчетовПоДоговорам.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом);
		СписокВедениеВзаиморасчетовПоДоговорам.Добавить(Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам);
		СтруктураОтбора.Вставить("ЗначениеОтбора", СписокВедениеВзаиморасчетовПоДоговорам);
		СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.ВСписке);
		
		СтруктураДополнительныхПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураОтбора);
		РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                            Перечисления.ВидыДоговоровКонтрагентов.СПокупателем, СтандартнаяОбработка, 
	                                            СтруктураДополнительныхПараметров)
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		
		РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                            СписокВидовДоговоров, СтандартнаяОбработка);
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ОбъектыСтроительства Тогда
		//для объектов строительства нельзя выбирать договоры "по заказам"
		СтруктураДополнительныхПараметров = Новый Структура();
		СтруктураОтбора = Новый Структура();
		ЗначениеВедениеВзаиморасчетовПоДоговорам = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом;
		СтруктураОтбора.Вставить("ЗначениеОтбора", ЗначениеВедениеВзаиморасчетовПоДоговорам);
		СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.Равно);
		СтруктураДополнительныхПараметров.Вставить("ВедениеВзаиморасчетов", СтруктураОтбора);
		РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                            Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком, СтандартнаяОбработка, 
	                                            СтруктураДополнительныхПараметров);
		
	Иначе
		СписокВидовДоговоров = Новый СписокЗначений;
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
		РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
	                                            СписокВидовДоговоров, СтандартнаяОбработка);
	КонецЕсли;

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ДоговорКонтрагента". Процедура выполняет действия при изменении договора
// взаиморасчетов с контрагентом.
//
Процедура ДоговорКонтрагентаПриИзменении(Элемент)

	ПриИзмененииДоговора();
	
КонецПроцедуры // ДоговорКонтрагентаПриИзменении()

// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураПолученный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	мСтароеЗначениеСделки = Сделка;
	
	ВидЗаказа = "ЗаказПоставщику";
	// Данный документ выполняет расход по регистру взаиморасчетов.
	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку Тогда

		СтандартнаяОбработка = Ложь;
		Элемент.ВыбиратьТип = Ложь;

		ТипЗаказа = Новый ОписаниеТипов("ДокументСсылка.ЗаказПокупателя");
		Элемент.Значение = ТипЗаказа.ПривестиЗначение(Элемент.Значение);

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.Переработка);
		Если Не Организация.Пустая() Тогда
			СтруктураОтбора.Вставить("Организация", Организация);
		КонецЕсли;

		ВидЗаказа = "ЗаказПокупателя";
	Иначе	
		СтруктураОтбора = УправлениеЗаказами.ПолучитьСтруктуруОтбораПоЗаказам(ЭтотОбъект);	
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, 
							   "Расход", ВидЗаказа, СтруктураОтбора);
КонецПроцедуры // СделкаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Сделка".
//
Процедура СделкаПриИзменении(Элемент)

	ИзменитьЗаказВТабличнойЧасти();
	
КонецПроцедуры // СделкаПриИзменении()

// Процедура - обработчик события "Нажатие" кнопки "КнопкаПерерассчитатьДолг".
// Процедура вызывает сервисный механизм пересчета долга контрагента 
// по выбранному в форме договору взаиморасчетов и сделке.
//
Процедура КнопкаПерерассчитатьДолгНажатие(Элемент)

	РаботаСДиалогами.СформироватьНадписьДолга(ДоговорКонтрагента, Сделка, ЭлементыФормы.ИнфНадписьДолга, Ссылка);

КонецПроцедуры // КнопкаПерерассчитатьАвансДоговораНажатие()

// Процедура - обработчик события "ПриИзменении" поля ввода
// "ВидПоступления".
//
Процедура ВидПоступленияПриИзменении(Элемент)

	РаботаСДиалогами.УстановитьВидимостьОбязательностьСклада(мКолонкиТовары, мКолонкиВозвратнаяТара, ЭлементыФормы.СкладОрдер,
		"Склад",  мУказаниеСкладовВТЧ Или (ВидПоступления = Перечисления.ВидыПоступленияТоваров.ПоОрдеру), мКолонкиОборудование);
	
	РаботаСДиалогами.УстановитьТипСкладаОрдера(ЭтотОбъект, ЭлементыФормы);
	ПриИзмененииВидаСклада();
	//ПриИзмененииСкладаОрдера();
	УстановитьАвтоотметкуСклада();
	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода
// "СчетУчетаРасчетовСКонтрагентом".
//
Процедура СчетУчетаРасчетовСКонтрагентомОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода
// "СчетУчетаРасчетовПоАвансам".
//
Процедура СчетУчетаРасчетовПоАвансамОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода
// "СчетУчетаРасчетовПоТаре".
//
Процедура СчетУчетаРасчетовПоТареОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка ОтражатьВУправленческомУчете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьВидПоступленияПередачи(ЭтотОбъект, ЭтаФорма);
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
		   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.КлючСвязи = 0;
	КонецЕсли;

КонецПроцедуры // ТоварыПриНачалеРедактирования

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Товары". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Товары.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));

	КонецЕсли;

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если ЭлементыФормы.Товары.Колонки.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если ЭлементыФормы.Товары.Колонки.СтранаПроисхождения.Видимость Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ТоварыПриВыводеСтроки()

// Процедура - обработчик события "НачалоВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	РаботаСДиалогами.НачалоВыбораНоменклатурыКонтрагента(Элемент, СтандартнаяОбработка, Контрагент, СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 

	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
    СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	
	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета); 

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.Номенклатура = Элемент.Значение.Владелец;
	КонецЕсли;

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Товары".
//
Процедура ТоварыСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Товары");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ТоварыСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ЗаказПокупателя
// в строке табличной части "Товары".
//
Процедура ТоварыЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
		ИЛИ  ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		
		СтруктураОтбора = Новый Структура;
		Если ЗначениеЗаполнено(Организация) Тогда
			СтруктураОтбора.Вставить("Организация", Организация);
		КонецЕсли;
		
		МассивДоступныеПоляОтбора = Новый Массив;
		МассивДоступныеПоляОтбора.Добавить("Организация");
		ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
		
		УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Товары", ДопПараметры);
	Иначе
		// Чтобы не спрашивать тип, определим его автоматом (если значение не было заполнено)
		СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
			СтрокаТабличнойЧасти.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия Тогда
		ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные)
	КонецЕсли;

КонецПроцедуры // ТоварыСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" поля табличной части "Товары"
//
Процедура ТоварыПослеУдаления(Элемент)
	
	УстановитьАвтоотметкуСклада();
	мПараметрыСвязиСтрокТЧ["Товары"].ФлагМодификации = Истина;
	
КонецПроцедуры //ТоварыПослеУдаления()

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "Товары"
//
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ТоварыПриОкончанииРедактирования()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Склад"
// в строке табличной части "Товары".
Процедура ТоварыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.НеРавно, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПоставщику"
// в строке табличной части "Товары".
Процедура ТоварыЗаказПоставщикуНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = УправлениеЗаказами.ПолучитьСтруктуруОтбораПоЗаказам(ЭтотОбъект);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							   "Расход", "ЗаказПоставщику",СтруктураОтбора);	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Товары".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельТоварыДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары       = Истина;
			Форма.ПоказыватьУслуги       = Ложь;
			Форма.ПоказыватьТару         = Ложь;
			Форма.ПоказыватьОборудование = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары       = Истина;
			Форма.ФлажокУслуги       = Ложь;
			Форма.ФлажокТара         = Ложь;
			Форма.ФлажокОборудование = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ УСЛУГИ

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура УслугиЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);


КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Услуги".
//
Процедура УслугиСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Услуги");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Услуги".
//
Процедура УслугиСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Услуги.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Заказ"
// в строке табличной части "Услуги".
//
Процедура УслугиЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Услуги", ДопПараметры);
	
КонецПроцедуры // УслугиЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "Номенклатура"
// в строке табличной части "Услуги".
//
Процедура УслугиНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
		СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатурнаяГруппа) Тогда
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;
	КонецЕсли;

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // УслугиНоменклатураПриИзменении()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Услуги". Формирует данные в колонке "ЕдиницаИзмерения".
//
Процедура УслугиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	Если ЭлементыФормы.Услуги.Колонки.ХарактерЗатрат.Видимость Тогда
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.Текст = ХарактерЗатрат;
	КонецЕсли;
    УправлениеПроектами.УстановитьДоступностьПроектаВСтрокеТабЧасти(ХарактерЗатрат, ОформлениеСтроки, ЭлементыФормы.Услуги);

	Если ЭлементыФормы.Услуги.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	КонецЕсли;
    ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, ДанныеСтроки.Продукция, ДанныеСтроки.СчетЗатрат, ДанныеСтроки.СчетЗатратНУ, ОформлениеСтроки, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП);

КонецПроцедуры // УслугиПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" табличной части
// "Услуги". Формирует данные в колонке "СчетУчетаНУ".
//
Процедура УслугиСчетУчетаБУПриИзменении(Элемент)

	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки = ЭлементыФормы.Услуги.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             ТекущиеДанные.Субконто1,
	                             Колонки.Субконто1,
	                             ТекущиеДанные.Субконто2,
	                             Колонки.Субконто2,
	                             ТекущиеДанные.Субконто3,
	                             Колонки.Субконто3);
								 
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		ТекущиеДанные.СтатьяЗатрат,
		ТекущиеДанные.СчетЗатрат,
		ТекущиеДанные.Субконто1,
		ТекущиеДанные.Субконто2,
		ТекущиеДанные.Субконто3);
		
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(
		ТекущиеДанные, 
		Истина, // УчитыватьЗначенияСубконто
		, 
		, 
		Ложь); // ЗаполнятьТолькоЕслиСчетЗависитОтСубконто
		
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		ТекущиеДанные.СтатьяЗатрат,
		ТекущиеДанные.СчетЗатратНУ,
		ТекущиеДанные.СубконтоНУ1,
		ТекущиеДанные.СубконтоНУ2,
		ТекущиеДанные.СубконтоНУ3);
		
		УслугиСчетУчетаНУПриИзменении(Элемент);

КонецПроцедуры // УслугиСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Услуги".
//
Процедура УслугиСубконто1ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, Истина);
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 1, СтрокаТЧ.Субконто1, СтрокаТЧ.СубконтоНУ1);

КонецПроцедуры // УслугиСубконто1ПриИзменении()


// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Услуги".
//
Процедура УслугиСубконто2ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, Истина);
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 2, СтрокаТЧ.Субконто2, СтрокаТЧ.СубконтоНУ2);

КонецПроцедуры // УслугиСубконто2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Услуги".
//
Процедура УслугиСубконто3ПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Услуги.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТЧ, Истина);

	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 3, СтрокаТЧ.Субконто3, СтрокаТЧ.СубконтоНУ3);

КонецПроцедуры // УслугиСубконто3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" табличной части
// "Услуги". Формирует данные в колонке "УслугиСтатьяЗатрат".
//
Процедура УслугиСтатьяЗатратПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		
	УстановитьДоступностьСубконто (СтрокаТабличнойЧасти);
	УстановитьДоступностьПродукции(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	
	Если мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.УстановитьПроектПоУмолчанию(СтрокаТабличнойЧасти.Подразделение, СтрокаТабличнойЧасти.СтатьяЗатрат, СтрокаТабличнойЧасти.Проект);
	КонецЕсли;
	
КонецПроцедуры // УслугиСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Услуги".
//
Процедура УслугиСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура УслугиСчетУчетаНУПриИзменении(Элемент)

	ТекущиеДанные = ЭлементыФормы.Услуги.ТекущиеДанные;
	Колонки = ЭлементыФормы.Услуги.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ТекущиеДанные.СчетЗатратНУ,
	                             ТекущиеДанные.СубконтоНУ1,
	                             Колонки.СубконтоНУ1,
	                             ТекущиеДанные.СубконтоНУ2,
	                             Колонки.СубконтоНУ2,
	                             ТекущиеДанные.СубконтоНУ3,
	                             Колонки.СубконтоНУ3);
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		ТекущиеДанные.СтатьяЗатрат,
		ТекущиеДанные.СчетЗатратНУ,
		ТекущиеДанные.СубконтоНУ1,
		ТекущиеДанные.СубконтоНУ2,
		ТекущиеДанные.СубконтоНУ3);

КонецПроцедуры // УслугиСчетУчетаНУПриИзменении()

Процедура УслугиПодразделениеОрганизацииПриИзменении(Элемент)

	ПриИзмененииПодразделенияОрганизации();

КонецПроцедуры

Процедура УслугиПодразделениеОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры

Процедура УслугиПриАктивизацииСтроки(Элемент)

	УстановитьДоступностьСубконто (Элемент.ТекущиеДанные);
	УстановитьДоступностьПродукции(Элемент.ТекущиеДанные);

КонецПроцедуры // УслугиПриАктивизацииСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода Продукция
// в строке табличной части "Услуги".
//
Процедура УслугиПродукцияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.СерияПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.СерияПродукции = 0;
	КонецЕсли; 

	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.ХарактеристикаПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаПродукции = 0;
	КонецЕсли; 

КонецПроцедуры // УслугиПродукцияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// в строке табличной части "Услуги".
// 
Процедура УслугиПодразделениеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементыформы.Услуги.ТекущиеДанные;
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизации,
												  СтрокаТабличнойЧасти.Подразделение,
												  Организация);
	
КонецПроцедуры // УслугиПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
// в строке табличной части "Услуги".
//
Процедура УслугиПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 Элементыформы.Услуги.ТекущиеДанные.ПодразделениеОрганизации,
											 Элементыформы.Услуги.ТекущиеДанные.Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПоставщику"
// в строке табличной части "Услуги".
Процедура УслугиЗаказПоставщикуНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = УправлениеЗаказами.ПолучитьСтруктуруОтбораПоЗаказам(ЭтотОбъект);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							   "Расход", "ЗаказПоставщику",СтруктураОтбора);	

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Проект".
//
Процедура УслугиПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // УслугиПроектНачалоВыбора()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Услуги".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельУслугиДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары       = Ложь;
			Форма.ПоказыватьУслуги       = Истина;
			Форма.ПоказыватьТару         = Ложь;
			Форма.ПоказыватьОборудование = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары       = Ложь;
			Форма.ФлажокУслуги       = Истина;
			Форма.ФлажокТара         = Ложь;
			Форма.ФлажокОборудование = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Возвратная тара"
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

		Если Не УправлениеЗаказами.ИспользоватьВнутренниеЗаказы() Тогда
			СтрокаТабличнойЧасти.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
		   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ВозвратнаяТараПриОкончанииРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Заполнить реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьЦенуВозвратнойТарыТабЧастиПоступление(СтрокаТабличнойЧасти, ЭтотОбъект, мВалютаРегламентированногоУчета);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЦенаПриИзменении(Элемент)

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыВозвратнойТарыТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ВозвратнаяТараСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода ЗаказПокупателя
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараЗаказПокупателяНачалоВыбора(Элемент, СтандартнаяОбработка)

	Если ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия 
		ИЛИ ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Оборудование Тогда
		
		СтруктураОтбора = Новый Структура;
		Если ЗначениеЗаполнено(Организация) Тогда
			СтруктураОтбора.Вставить("Организация", Организация);
		КонецЕсли;
		
		МассивДоступныеПоляОтбора = Новый Массив;
		МассивДоступныеПоляОтбора.Добавить("Организация");
		ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
		
		УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ВозвратнаяТара", ДопПараметры);
	Иначе
		// Чтобы не спрашивать тип, определим его автоматом (если значение не было заполнено)
		СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Заказ) Тогда
			СтрокаТабличнойЧасти.Заказ = Документы.ЗаказПокупателя.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара". Формирует данные в колонке "ЕдиницаХранения".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ВозвратнаяТара.Колонки.ЕдиницаХранения.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ЕдиницаХранения.УстановитьТекст(ДанныеСтроки.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

Процедура ВозвратнаяТараСчетУчетаБУПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные);

КонецПроцедуры

// Процедура - обработчик события "ПослеУдаления" поля табличной части "ВозвратнаяТара"
//
Процедура ВозвратнаяТараПослеУдаления(Элемент)
	УстановитьАвтоотметкуСклада();
КонецПроцедуры //ВозвратнаяТараПослеУдаления()

//Процедура - обработчик события "НачалоВыбора" поля ввода Приходного ордера
Процедура ВозвратнаяТараПриходныйОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораПриходногоОрдера(Элемент, СтандартнаяОбработка, Организация, Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика);
КонецПроцедуры

//Процедура - обработчик события "ПриИзменении" поля ввода Приходного ордера
Процедура ВозвратнаяТараПриходныйОрдерПриИзменении(Элемент)
	ПриИзмененииПриходногоОрдераВТабличнойЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Склад"
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараСкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.НеРавно, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" реквизита "ЗаказПоставщику"
// в строке табличной части "ВозвратнаяТара".
Процедура ВозвратнаяТараЗаказПоставщикуНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = УправлениеЗаказами.ПолучитьСтруктуруОтбораПоЗаказам(ЭтотОбъект);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							   "Расход", "ЗаказПоставщику",СтруктураОтбора);	

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Возвратная тара".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельВозвратнаяТараДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары       = Ложь;
			Форма.ПоказыватьУслуги       = Ложь;
			Форма.ПоказыватьТару         = Истина;
			Форма.ПоказыватьОборудование = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары       = Ложь;
			Форма.ФлажокУслуги       = Ложь;
			Форма.ФлажокТара         = Истина;
			Форма.ФлажокОборудование = Ложь;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ОБОРУДОВАНИЕ

// Процедура - обработчик события "ПриВыводеСтроки" 
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.Оборудование.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	КонецЕсли;

	Если ЭлементыФормы.Оборудование.Колонки.КоэффициентМест.Видимость Тогда
		РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиОборудование, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	КонецЕсли;

КонецПроцедуры

//Процедура - обработчик события "ПриИзменении" поля ввода Приходного ордера
Процедура ОборудованиеПриходныйОрдерПриИзменении(Элемент)
	ПриИзмененииПриходногоОрдераВТабличнойЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект );

	// Заполняем реквизиты табличной части.
	ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение"); 
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Оборудование", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики номенклатуры
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущиеДанные;
	
	// Заполняем реквизиты табличной части.
	СтруктураШапкиДокумента = Новый Структура("Контрагент, ТипЦен, ДоговорКонтрагента, ДатаДокумента, ВалютаДокумента, УчитыватьНДС, СуммаВключаетНДС",
	                                         Контрагент, ТипЦен, ДоговорКонтрагента, Дата,ВалютаДокумента, УчитыватьНДС,СуммаВключаетНДС);
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуЦенуПокупкиТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, СтруктураШапкиДокумента, мВалютаРегламентированногоУчета);

	// Рассчитываем реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ОборудованиеХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеЕдиницаИзмеренияМестПриИзменении(Элемент)
	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеЕдиницаИзмеренияПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеКоличествоПриИзменении(Элемент)
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеЦенаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеСуммаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Оборудование");

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкиНДС
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеСчетУчетаБУПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(ЭлементыФормы.Оборудование.ТекущиеДанные);

КонецПроцедуры // ОборудованиеСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели табличной части "Оборудование".
// Процедура открывает форму "ФормаОтбораЗаказов" для заполнения табличной части
// документами "ЗаказПокупателя" по условиям.
Процедура КоманднаяПанельОборудованиеДействиеОтобратьИЗаполнитьПоЗаказам(Кнопка)

	Если Кнопка <> Неопределено Тогда

		Если НЕ ДокументОбъект.ЭтоНовый() И НЕ ДокументОбъект.Модифицированность() Тогда
		
			// Получим форму.
			Форма = ДокументОбъект.ПолучитьФорму("ФормаОтбораЗаказов", ЭтаФорма, );
			
			//Установим реквизиты и переменные формы.
			Форма.ПоказыватьТовары       = Ложь;
			Форма.ПоказыватьУслуги       = Ложь;
			Форма.ПоказыватьТару         = Ложь;
			Форма.ПоказыватьОборудование = Истина;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.Открыть();
			
		Иначе
			// Получим форму.
			Форма = ПолучитьОбщуюФорму("ФормаВыбораРежимаЗаполненияПоЗаказам", ЭтаФорма, );
		
			//Установим реквизиты и переменные формы.
			Форма.ФлажокТовары       = Ложь;
			Форма.ФлажокУслуги       = Ложь;
			Форма.ФлажокТара         = Ложь;
			Форма.ФлажокОборудование = Истина;
			Форма.ДокументОбъект = ЭтотОбъект;
			Форма.ФормаДокумента = ЭтаФорма;
			Форма.ОткрытьМодально();
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "ЗаказПоставщику"
Процедура ОборудованиеЗаказПоставщикуНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = УправлениеЗаказами.ПолучитьСтруктуруОтбораПоЗаказам(ЭтотОбъект);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Элемент.Значение, СтандартнаяОбработка, 
							   "Расход", "ЗаказПоставщику",СтруктураОтбора);	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Склад"
// в строке табличной части "Оборудование".
//
Процедура ОборудованиеСкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОрдер, ВидСравнения.Равно, СтандартнаяОбработка, Перечисления.ВидыСкладов.Оптовый);
	
КонецПроцедуры // ОборудованиеСкладНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ПриходныйОрдер"
Процедура ОборудованиеПриходныйОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораПриходногоОрдера(Элемент, СтандартнаяОбработка, Организация, Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ОБЪЕКТЫ СТРОИТЕЛЬСТВА

// Процедура - обработчик события "ПриВыводеСтроки" 
// в строке табличной части "Оборудование".
//
Процедура ОбъектСтроительстваПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ОбъектыСтроительства.Колонки.Всего.Видимость Тогда
		ОформлениеСтроки.Ячейки.Всего.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Всего.Текст = ОбщегоНазначения.ФорматСумм(ДанныеСтроки.Сумма
		                                    + ?(СуммаВключаетНДС, 0, ДанныеСтроки.СуммаНДС));
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактированияСтроки"
Процедура ОбъектыСтроительстваПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ЭлементыФормы.ОбъектыСтроительства.ТекущиеДанные.СтавкаНДС = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяСтавкаНДС");

	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ОбъектСтроительства
// в строке табличной части "ОбъектыСтроительства".
//
Процедура ОбъектСтроительстваПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ОбъектыСтроительства.ТекущиеДанные;

	// Заполняем реквизиты табличной части.
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиОбъектовСтроительства(СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода суммы
// в строке табличной части "ОбъектыСтроительства".
//
Процедура ОбъектСтроительстваСуммаПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ОбъектыСтроительства.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СтавкиНДС
// в строке табличной части "ОбъектыСтроительства".
//
Процедура ОбъектСтроительстваСтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(ЭлементыФормы.ОбъектыСтроительства.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
// в строке табличной части "ОбъектыСтроительства".
//
Процедура ОбъектСтроительстваСчетУчетаБУПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(ЭлементыФормы.ОбъектыСтроительства.ТекущиеДанные);

КонецПроцедуры // ОборудованиеСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "ОбъектыСтроительства".
//
Процедура ОбъектСтроительстваСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаНДС
// в строке табличной части "ОбъектыСтроительства".
//
Процедура ОбъектСтроительстваСчетУчетаНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЭлементыФормы.Товары.ТекущаяСтрока.СерияНоменклатуры = ВыбранноеЗначение;
КонецПроцедуры

//Процедура - обработчик события "НачалоВыбора" поля ввода Приходного ордера
Процедура ТоварыПриходныйОрдерНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораПриходногоОрдера(Элемент, СтандартнаяОбработка, Организация, Перечисления.ВидыОперацийПриходныйОрдер.ОтПоставщика);
КонецПроцедуры

//Процедура - обработчик события "ПриИзменении" поля ввода Приходного ордера
Процедура ТоварыПриходныйОрдерПриИзменении(Элемент)
	ПриИзмененииПриходногоОрдераВТабличнойЧасти(ЭлементыФормы.Товары.ТекущиеДанные);
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" поля табличной части "Услуги"
//
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)

	СтрокаТабличнойЧасти = ЭлементыФормы.Услуги.ТекущиеДанные;

	Если НоваяСтрока
	   И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
	   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
		СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Производит заполнение документа переданными из формы заполнения данными.
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ТаблицаИсточник - таблица значений - источник для заполняемой табличной части.
//
Процедура ОбработкаЗаполнения(ТабличнаяЧасть, ТаблицаИсточник) Экспорт

	// Сформировать таблицу по ценам и скидкам
	ЕстьКолонкаЗаказ  = УправлениеЗаказами.ЕстьЗаказВТабличнойЧасти(ДокументОбъект.ВидОперации, ДокументОбъект.ДоговорКонтрагента, "Поступление");
	
	ИмяТабличнойЧасти = ОбщегоНазначения.ПолучитьИмяТабличнойЧастиПоСсылкеНаСтроку(ТабличнаяЧасть);
	ОтражатьВУСН      = ОбщегоНазначения.ЕстьРеквизитТабЧастиДокумента("ОтражениеВУСН", ДокументОбъект.Метаданные(), ИмяТабличнойЧасти);

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДоговорКонтрагента", ДоговорКонтрагента);
	Если ЕстьКолонкаЗаказ Тогда
		ТаблицаЗаказов = ТаблицаИсточник.Скопировать();
		ТаблицаЗаказов.Свернуть("ЗаказПоставщику");
		СписокЗаказов = Новый СписокЗначений;
		Для Каждого Строка Из ТаблицаЗаказов Цикл
			Если ЗначениеЗаполнено(Строка.ЗаказПоставщику) Тогда
				СписокЗаказов.Добавить(Строка.ЗаказПоставщику.Ссылка);
			КонецЕсли;
		КонецЦикла;
		Если НЕ СписокЗаказов.Количество() > 0 Тогда
			СписокЗаказов.Добавить(Сделка);
		КонецЕсли;
		Запрос.УстановитьПараметр("СписокЗаказов",   СписокЗаказов);
	Иначе
		Запрос.УстановитьПараметр("ЗаказПоставщику", Сделка);
	КонецЕсли;
	Запрос.УстановитьПараметр("СтатусТары", Перечисления.СтатусыПартийТоваров.ВозвратнаяТара);
	Запрос.УстановитьПараметр("СтатусОборудования", Перечисления.СтатусыПартийТоваров.Оборудование);

	ИмяРеквизитаКоличества = "Количество";

	Если ТабличнаяЧасть = Товары Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПоставщику                      КАК ЗаказПоставщику,", "") + "
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	ОстаткиЗаказ.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент         КАК Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента"
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПоставщику В (&СписокЗаказов)", "
		|	                                              И ЗаказПоставщику = &ЗаказПоставщику") + "
		|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПоставщику,", "") + "
		|	ОстаткиЗаказ.Цена,
		|	ОстаткиЗаказ.ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
		|";

		ИмяРеквизитаКоличества = "Количество";

		ТаблицаИсточник.Колонки.Добавить("Коэффициент");

	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПоставщику                      КАК ЗаказПоставщику,", "") + "
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента" 
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПоставщику В (&СписокЗаказов)", "
		|	                                              И ЗаказПоставщику = &ЗаказПоставщику") + "
		|	                                              И СтатусПартии = &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПоставщику,", "") + "
		|	ОстаткиЗаказ.Цена
		|";

	ИначеЕсли ТабличнаяЧасть = Услуги Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.Цена                                 КАК Цена,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПоставщику                      КАК ЗаказПоставщику,", "") + "
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента"
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПоставщику В (&СписокЗаказов)", "
		|	                                              И ЗаказПоставщику = &ЗаказПоставщику") + "
		|	                                              И СтатусПартии <> &СтатусТары) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПоставщику,", "") + "
		|	ОстаткиЗаказ.Цена
		|";

	ИначеЕсли ТабличнаяЧасть = Оборудование Тогда

		Запрос.Текст = "
		|ВЫБРАТЬ
		|	ОстаткиЗаказ.Номенклатура                         КАК Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры           КАК ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПоставщику                      КАК ЗаказПоставщику,", "") + "
		|	ОстаткиЗаказ.Цена                                 КАК Цена,
		|	ОстаткиЗаказ.ЕдиницаИзмерения                     КАК ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент         КАК Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоэффициентЕдиницыХранения,
		|	СУММА(ОстаткиЗаказ.КоличествоОстаток)             КАК Количество
		|
		|ИЗ
		|	РегистрНакопления.ЗаказыПоставщикам.Остатки(, ДоговорКонтрагента = &ДоговорКонтрагента"
		+ ?(ЕстьКолонкаЗаказ, "
		|	                                              И ЗаказПоставщику В (&СписокЗаказов)", "
		|	                                              И ЗаказПоставщику = &ЗаказПоставщику") + "
		|	                                              И СтатусПартии = &СтатусОборудования) КАК ОстаткиЗаказ
		|
		|	СГРУППИРОВАТЬ ПО
		|	ОстаткиЗаказ.Номенклатура,
		|	ОстаткиЗаказ.ХарактеристикаНоменклатуры,"
		+ ?(ЕстьКолонкаЗаказ, "
		|	ОстаткиЗаказ.ЗаказПоставщику,", "") + "
		|	ОстаткиЗаказ.Цена,
		|	ОстаткиЗаказ.ЕдиницаИзмерения,
		|	ОстаткиЗаказ.ЕдиницаИзмерения.Коэффициент,
		|	ОстаткиЗаказ.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
		|";

		ИмяРеквизитаКоличества = "Количество";

		ТаблицаИсточник.Колонки.Добавить("Коэффициент");
		
	КонецЕсли;

	ТаблицаЦен = Запрос.Выполнить().Выгрузить();

	ТаблицаИсточник.Колонки.Добавить("Цена");

	НомерСтроки = 0;
	ТаблицаИсточникКоличество = ТаблицаИсточник.Количество();
	Пока НомерСтроки < ТаблицаИсточникКоличество Цикл

		СтрокаТаблицы = ТаблицаИсточник[НомерСтроки];

		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Номенклатура",                   СтрокаТаблицы.Номенклатура);
		Если ТабличнаяЧасть = Товары Тогда
			СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаТаблицы.ХарактеристикаНоменклатуры);
		КонецЕсли;
		Если ЕстьКолонкаЗаказ Тогда
			СтруктураОтбора.Вставить("ЗаказПоставщику", СтрокаТаблицы.ЗаказПоставщику);
		КонецЕсли;

		ОтобранныеСтрокиТаблицыЦен = ТаблицаЦен.НайтиСтроки(СтруктураОтбора);
		ОсталосьДобавить = СтрокаТаблицы[ИмяРеквизитаКоличества];

		ДобавленыСтроки = Ложь;
		Для Каждого СтрокаТаблицыЦен Из ОтобранныеСтрокиТаблицыЦен Цикл
			Если СтрокаТаблицыЦен.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ОсталосьДобавить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если СтрокаТаблицыЦен.Количество = ОсталосьДобавить Тогда
				СтрокаТаблицы.Цена = СтрокаТаблицыЦен.Цена;
				Если ТабличнаяЧасть = Товары Тогда

					СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицыЦен.ЕдиницаИзмерения;
					СтрокаТаблицы.Коэффициент      = СтрокаТаблицыЦен.Коэффициент;

					Добавить                       = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
													Окр(ОсталосьДобавить
													* СтрокаТаблицыЦен.КоэффициентЕдиницыХранения
													/ СтрокаТаблицы.Коэффициент,3));
				Иначе
					Добавить                       = ОсталосьДобавить;
				КонецЕсли;
				СтрокаТаблицы[ИмяРеквизитаКоличества] = Добавить;
				СтрокаТаблицыЦен.Количество           = 0;

				ОсталосьДобавить = 0;
				ДобавленыСтроки  = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если ДобавленыСтроки Тогда
			НомерСтроки = НомерСтроки + 1;
			Продолжить;
		КонецЕсли;
		
		ДобавленыСтроки = Ложь;
		Для Каждого СтрокаТаблицыЦен Из ОтобранныеСтрокиТаблицыЦен Цикл
			Если СтрокаТаблицыЦен.Количество <= 0 Тогда
				Продолжить;
			КонецЕсли;
			Если ОсталосьДобавить <= 0 Тогда
				Прервать;
			КонецЕсли;
			Если СтрокаТаблицыЦен.Количество <= ОсталосьДобавить Тогда
				Если ДобавленыСтроки Тогда
					// Добавим новую строку на остаток номенклатуры
					КопияСтроки = ТаблицаИсточник.Добавить();
                    ЗаполнитьЗначенияСвойств(КопияСтроки,СтрокаТаблицы);
					КопияСтроки.Количество = 0;
					
					СтрокаТаблицы = ТаблицаИсточник[НомерСтроки];
				КонецЕсли;
			КонецЕсли;

			СтрокаТаблицы.Цена = СтрокаТаблицыЦен.Цена;
			Если ТабличнаяЧасть = Товары 
				ИЛИ ТабличнаяЧасть = Оборудование Тогда

				СтрокаТаблицы.ЕдиницаИзмерения = СтрокаТаблицыЦен.ЕдиницаИзмерения;
				СтрокаТаблицы.Коэффициент      = СтрокаТаблицыЦен.Коэффициент;

				Добавить                       = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
												Окр(Мин(СтрокаТаблицыЦен.Количество, ОсталосьДобавить)
												* СтрокаТаблицыЦен.КоэффициентЕдиницыХранения
												/ СтрокаТаблицы.Коэффициент,3));
				ДобавленоВЕдХранения           = ?(НЕ ЗначениеЗаполнено(Добавить), 0,
												Окр(Добавить / СтрокаТаблицыЦен.КоэффициентЕдиницыХранения
												* СтрокаТаблицы.Коэффициент,3));
				СтрокаТаблицыЦен.Количество    = СтрокаТаблицыЦен.Количество - ДобавленоВЕдХранения;
			Иначе
				Добавить                       = Мин(СтрокаТаблицыЦен.Количество, ОсталосьДобавить);
				СтрокаТаблицыЦен.Количество    = СтрокаТаблицыЦен.Количество - Добавить;
				ДобавленоВЕдХранения           = Добавить;
			КонецЕсли;
			СтрокаТаблицы[ИмяРеквизитаКоличества] = Добавить;

			ОсталосьДобавить = ОсталосьДобавить - ДобавленоВЕдХранения;
			ДобавленыСтроки  = Истина;
		КонецЦикла;

		Если ДобавленыСтроки И ОсталосьДобавить > 0 Тогда
			// Добавим новую строку на остаток номенклатуры
			КопияСтроки = ТаблицаИсточник.Добавить();

            ЗаполнитьЗначенияСвойств(КопияСтроки,СтрокаТаблицы);
			
			СтрокаТаблицы = ТаблицаИсточник[НомерСтроки];
			Если ТабличнаяЧасть = Товары Тогда
				ОсталосьДобавить                = ?(НЕ ЗначениеЗаполнено(СтрокаТаблицы.Коэффициент), 0,
												Окр(ОсталосьДобавить
												* СтрокаТаблицыЦен.КоэффициентЕдиницыХранения
												/ СтрокаТаблицы.Коэффициент,3));
			КонецЕсли;
			СтрокаТаблицы[ИмяРеквизитаКоличества] = ОсталосьДобавить;
			СтрокаТаблицыЦен.Количество = СтрокаТаблицыЦен.Количество - Окр(ОсталосьДобавить
										/ СтрокаТаблицыЦен.КоэффициентЕдиницыХранения
										* СтрокаТаблицы.Коэффициент,3);
			ОсталосьДобавить = 0;
		КонецЕсли;

		НомерСтроки = НомерСтроки + 1;

	КонецЦикла;

	// Загрузить в документ обработанную таблицу
	Если НЕ ЕстьКолонкаЗаказ Тогда
		ОрганизацияЗаказа                   = Сделка.Организация;
		ДатаЗаказа                          = Сделка.Дата;
		
		ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаЗаказа, ОрганизацияЗаказа, Ложь);
		Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
			ОрганизацияЯвляетсяПлательщикомЕНВД = ПараметрыУчетнойПолитики.ОрганизацияЯвляетсяПлательщикомЕНВД;
		Иначе
			ОрганизацияЯвляетсяПлательщикомЕНВД = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	КопияТабличнойЧасти = ТабличнаяЧасть.Выгрузить();
    ТабличнаяЧасть.Загрузить(ТаблицаИсточник);

	Для Каждого СтрокаТабличнойЧасти Из ТабличнаяЧасть Цикл
		Если ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = Оборудование Тогда
			
			Если ЕстьКолонкаЗаказ Тогда
				ДокументЗаказ = СтрокаТабличнойЧасти.ЗаказПоставщику;
			ИначеЕсли ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				ДокументЗаказ = Сделка;
			Иначе
				ДокументЗаказ = Документы.ЗаказПоставщику.ПустаяСсылка();
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Коэффициент) Тогда
				СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			КонецЕсли;

			Если ОтражатьВУСН Тогда
				СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
			
			// Выполнить общие действия для всех документов при изменении номенклатуры.
			ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");

			// Заполнение цены зависит от розничности операции.
			СтрокаТабличнойЧасти.Цена = Ценообразование.ПересчитатьЦенуПриИзмененииФлаговНалогов(
											МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Цена, 
											ДокументЗаказ.ВалютаДокумента, ВалютаДокумента,
											ЗаполнениеДокументов.КурсДокумента(ДокументЗаказ, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КурсДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета),
											ЗаполнениеДокументов.КратностьДокумента(ДокументЗаказ, мВалютаРегламентированногоУчета), ЗаполнениеДокументов.КратностьДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета)),
											Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатурыКонтрагентов,
											ДокументЗаказ.СуммаВключаетНДС,
											УчитыватьНДС,
											СуммаВключаетНДС,
											УчетНДС.ПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));

			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

			ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда

			// Выполнить общие действия для всех документов при изменении возвратной тары.
			ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			// Рассчитать реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

			ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			
		ИначеЕсли ТабличнаяЧасть = Услуги Тогда

			Если ЕстьКолонкаЗаказ Тогда
				ОрганизацияЗаказа                   = СтрокаТабличнойЧасти.ЗаказПоставщику.Организация;
				ДатаЗаказа                          = СтрокаТабличнойЧасти.ЗаказПоставщику.Дата;
				
				ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДатаЗаказа, ОрганизацияЗаказа, Ложь);
				Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
					ОрганизацияЯвляетсяПлательщикомЕНВД = ПараметрыУчетнойПолитики.ОрганизацияЯвляетсяПлательщикомЕНВД;
				Иначе
					ОрганизацияЯвляетсяПлательщикомЕНВД = Ложь;
				КонецЕсли;
			КонецЕсли;
			// Заполняем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьСтавкуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, "Приобретение");
			ОбработкаТабличныхЧастей.ЗаполнитьСодержаниеТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
            СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппаЗатрат;

			Если ОтражатьВУСН Тогда
				СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
			КонецЕсли;
			
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			ОбработкаТабличныхЧастей.РассчитатьСуммуНДСТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Услуги", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

		КонецЕсли;
		
		Если ЕстьКолонкаЗаказ И НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику) Тогда
			Если ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
				СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Если КопияТабличнойЧасти.Количество()>0 Тогда
		ОбщегоНазначения.ЗагрузитьВТаблицуЗначений(КопияТабличнойЧасти, ТабличнаяЧасть);
	КонецЕсли;
	
	Если ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = Оборудование Тогда
		СтрокаХарактеристика       = ", ХарактеристикаНоменклатуры";
	Иначе
		СтрокаХарактеристика       = "";
	КонецЕсли;
	СтрокаЗаказПокупателя      = "";
	
	Если ТабличнаяЧасть = Услуги ИЛИ ТабличнаяЧасть = Товары Тогда
		СтрокаЗаказПокупателя      = ", Заказ";
	КонецЕсли;
	
	Если ЕстьКолонкаЗаказ Тогда
		СтрокаЗаказ = ", ЗаказПоставщику";
	Иначе
		СтрокаЗаказ = "";
	КонецЕсли;
	
	Если ТабличнаяЧасть <> Услуги И мЕстьКолонкаСклад Тогда
		СтрокаСклад = ", Склад";
	Иначе
		СтрокаСклад = "";
	КонецЕсли;
	
	Если (ТабличнаяЧасть = Товары ИЛИ ТабличнаяЧасть = Оборудование)
		И мЕстьКолонкаСерии Тогда
		СтрокаСерия = ", СерияНоменклатуры";
	Иначе
		СтрокаСерия = "";
	КонецЕсли;
	
	КолонкиГруппировок = "";
	КолонкиСуммирования = "";
	Для каждого Колонка из КопияТабличнойЧасти.Колонки цикл
		ИмяКолонки = Колонка.Имя;
		Если ИмяКолонки = "НомерСтроки" Тогда
			Продолжить;
		КонецЕсли;
		
		Если ИмяКолонки = "Количество" или ИмяКолонки = "Сумма" или ИмяКолонки = "КоличествоМест" или ИмяКолонки = "СуммаНДС" Тогда
			КолонкиСуммирования = КолонкиСуммирования + ?(КолонкиСуммирования="","",",") + ИмяКолонки ;
			Продолжить;
		КонецЕсли;
		КолонкиГруппировок = КолонкиГруппировок + ?(КолонкиГруппировок="","",",") + ИмяКолонки ;
	КонецЦикла;
	
	ТабличнаяЧасть.Свернуть(КолонкиГруппировок, КолонкиСуммирования);
	ТабличнаяЧасть.Сортировать("Номенклатура" + СтрокаХарактеристика + СтрокаСерия + СтрокаЗаказ + СтрокаСклад  + СтрокаЗаказПокупателя + ", Цена");

КонецПроцедуры // ОбработкаЗаполнения()

Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура КоманднаяПанельТоварыПереоценка(Кнопка)

	УправлениеРозничнойТорговлей.ВвестиПереоценкуНаОснованииПрихода(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // КоманднаяПанельТоварыПереоценка()


// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Процедура открывает список ЭД по текущему документу
//
Процедура ДействияФормыСписокЭлектронныхДокументов(Кнопка)
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", 	Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", 		ЭтаФорма);
	
	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Ссылка, ПараметрыОткрытия);
	
КонецПроцедуры

// Процедура выполняет перезаполнение документа по ЭД
//
Процедура ДействияФормыПерезаполнитьДаннымиИзЭД(Кнопка)
	
	ЭлектронныеДокументыКлиент.ПерезаполнитьДокумент(Ссылка, ЭтаФорма);
	
КонецПроцедуры

// Процедура выполняет открытие актуального ЭД
//
Процедура ДействияФормыОткрытьАктуальныйЭД(Кнопка)
	
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Ссылка, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

//////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ТЧ ДокументыРасчетовСКонтрагентом

// Процедура рассчитывает суммы в строке табличной части ДокументыРасчетовСКонтрагентом
// 
// Параметры:
// ТекДанные                       - <Текущие данные строки табличной части>
// РассчитыватьСуммуВзаиморасчетов - <Булево> Если Истина - рассчитывается и сумма взаиморасчетов, и сумма регл.учета
//                                   Если Ложь - рассчитывается только сумма регл.учета
//
Процедура РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, РассчитыватьСуммуВзаиморасчетов = Истина)

	мСтруктураПараметровВзаиморасчетов.Вставить("КурсСтрокиДокументаРасчетов", мКурсСтрокиДокументаРасчетов);
	УправлениеВзаиморасчетами.ДополнитьСтруктуруПараметровДляЗаполненияТаблицыДокументовРасчетов(ЭтотОбъект, мСтруктураПараметровВзаиморасчетов);
	УправлениеВзаиморасчетами.РассчитатьПогашаемыеСуммыПоДокументуРасчетов(ДокументОбъект, ТекДанные, мСтруктураПараметровВзаиморасчетов, РассчитыватьСуммуВзаиморасчетов);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля Сделка
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные.Сделка,
	                          СтандартнаяОбработка, "","ЗаказПоставщику");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Сделка
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСделкаПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента,
														Сделка, СтандартнаяОбработка, "Расход");
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ДокументРасчетовСКонтрагентом
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомДокументРасчетовСКонтрагентомПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	УправлениеВзаиморасчетами.ОпределитьДатуОплатыДокументаРасчетовСКонтрагентом(ТекДанные);
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СуммаВзаиморасчетов
// в строке табличной части ДокументыРасчетовСКонтрагентом
//
Процедура ДокументыРасчетовСКонтрагентомСуммаВзаиморасчетовПриИзменении(Элемент)
	
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	РасчетСуммСтрокиДокументовРасчетовСКонтрагентом(ТекДанные, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ "ДокументыРасчетовСКонтрагентом".
//
Процедура ДокументыРасчетовСКонтрагентомПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.ТекущиеДанные;
	мКурсСтрокиДокументаРасчетов = ?(ТекДанные.СуммаВзаиморасчетов = 0, 0, ТекДанные.СуммаРегл / ТекДанные.СуммаВзаиморасчетов);
КонецПроцедуры

Процедура ПриИзмененииПриходногоОрдераВТабличнойЧасти(ТекДанные)
	//если склад из шапки - значит его не видно в табличной части.
	//	ничего не надо спрашивать
	Если мСкладИзШапки Тогда Возврат; КонецЕсли;
	Если ТекДанные.ПриходныйОрдер.Склад<>ТекДанные.Склад Тогда
		Если Вопрос("Склад в строке табличной части не соответствует складу в Приходном ордере. Изменить склад в строке табличной части?",РежимДиалогаВопрос.ДаНет)=КодВозвратаДиалога.Да Тогда
			ТекДанные.Склад = ТекДанные.ПриходныйОрдер.Склад;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ТоварыЗаказПоставщикуПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
КонецПроцедуры

Процедура ВозвратнаяТараЗаказПоставщикуПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);	
КонецПроцедуры

Процедура ОборудованиеЗаказПоставщикуПриИзменении(Элемент)
	// Вставить содержимое обработчика.
	СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
КонецПроцедуры

Процедура ОборудованиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	// Вставить содержимое обработчика.
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти = ЭлементыФормы.Оборудование.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ЗаказПоставщику)
		   И ТипЗнч(Сделка) = Тип("ДокументСсылка.ЗаказПоставщику") Тогда
			СтрокаТабличнойЧасти.ЗаказПоставщику = Сделка;
		КонецЕсли;
		
		ОбработкаТабличныхЧастей.ЗаполнитьСкладИОрдерТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

// Обработчик события "Нажатие" кнопки "ОткрытьФормуНастройкиАдресногоСклада" в подменю "Действия".
//
Процедура ДействияФормыОткрытьФормуНастройкиБланкаТоварногоНаполнения(Кнопка)

	РаботаСДиалогами.ОткрытьФормуНастройкиБланкаТоварногоНаполнения(ЭтотОбъект);

КонецПроцедуры // ДействияФормыОткрытьФормуНастройкиАдресногоСклада()

// Процедура - обработчик нажатия на кнопку "ПараметрыЭлектронногоОбменаДокументами".
//
Процедура ДействияФормыПараметрыЭлектронногоОбменаДокументами(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПараметрыЭлектронногоОбменаДокументами(ЭтотОбъект);

КонецПроцедуры // ДействияФормыПараметрыЭлектронногоОбменаДокументами()

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)

	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);

КонецПроцедуры

Процедура ТекстСостоянияЭДНажатие(Элемент)
	
	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(Ссылка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;
мКолонкиОборудование   = ЭлементыФормы.Оборудование.Колонки;
мКолонкиУслуги         = ЭлементыФормы.Услуги.Колонки;
мКолонкиДокументы      = ЭлементыФормы.ДокументыРасчетовСКонтрагентом.Колонки;

мСкладИзШапки   =   Не мУказаниеСкладовВТЧ;

мЕстьКолонкаСклад = НЕ мСкладИзШапки;

мЕстьКолонкаСерии = Константы.ИспользоватьСерииНоменклатуры.Получить();

мРазрешитьНулевыеЦеныВОпте = УправлениеДопПравамиПользователей.РазрешитьНулевыеЦеныВОпте();

мТерминалы = ПолучитьСерверТО().ПолучитьСписокУстройств(
                 Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);

мИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");