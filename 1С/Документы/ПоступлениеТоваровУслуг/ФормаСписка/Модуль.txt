////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мИспользоватьОбменЭД; // Переменная содержит значение функциональной опции "ИспользоватьОбменЭД"

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ 

//  Процедура печатает выбранный документ 
// Печатается та форма, которая была отпечатана при нажатии в документе кнопки
// печати по умолчанию
//
Процедура ДействияФормыДействиеПечать(Кнопка)

	ТекущиеДанные = ЭтаФорма.ЭлементыФормы.ДокументСписок.ТекущиеДанные; 
	Если ТекущиеДанные <> Неопределено тогда
		УниверсальныеМеханизмы.НапечататьДокументИзФормыСписка(ТекущиеДанные.Ссылка.
		ПолучитьОбъект());
	КонецЕсли;


КонецПроцедуры // ДействиеПечать()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	ТекущиеДанные = ЭтаФорма.ЭлементыФормы.ДокументСписок.ТекущиеДанные; 
	Если ТекущиеДанные <> Неопределено тогда
		РаботаСДиалогами.НапечататьДвиженияДокумента(ТекущиеДанные.Ссылка);
	КонецЕсли;

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "Структура подчиненности" меню "Перейти".
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено тогда
		Возврат
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);
	
КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	БухгалтерскийУчет.ОткрытьЖурналПроводок(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	БухгалтерскийУчет.ОткрытьЖурналПроводок(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка, "НУ");

КонецПроцедуры

// Процедура открывает список ЭД по текущему документу
//
Процедура ДействияФормыСписокЭлектронныхДокументов(Кнопка)
	
	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Ссылка = ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Уникальность", 	Ссылка.УникальныйИдентификатор());
	ПараметрыОткрытия.Вставить("Источник", 		ЭтаФорма);

	ЭлектронныеДокументыКлиент.ОткрытьДеревоЭД(Ссылка, ПараметрыОткрытия)
	
КонецПроцедуры

Процедура ДействияФормыОткрытьАктуальныйЭД(Кнопка)
	
	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ЭлектронныеДокументыКлиент.ОткрытьАктуальныйЭД(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка, ЭтаФорма);
	
КонецПроцедуры

Процедура ДействияФормыПерезаполнитьДаннымиИзЭД(Кнопка)
	
	Если ЭлементыФормы.ДокументСписок.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭлектронныеДокументыКлиент.ПерезаполнитьДокумент(ЭлементыФормы.ДокументСписок.ТекущиеДанные.Ссылка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТЧ ДокументСписок

Процедура ДокументСписокПриПолученииДанных(Элемент, ОформленияСтрок)
	
	// ЭлектронныеДокументы
	Если НЕ мИспользоватьОбменЭД ИЛИ НЕ Элемент.Колонки.СостояниеЭД.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	// Сформируем массив документов для получения состояния 
	ДокументыДляПолученияСостояния = Новый Массив();
	Для каждого ОформлениеСтроки из ОформленияСтрок Цикл
		ДокументыДляПолученияСостояния.Добавить(ОформлениеСтроки.ДанныеСтроки.Ссылка);
	КонецЦикла;
	
	СостоянияЭД = ЭлектронныеДокументы.ПолучитьТекстСостоянияЭДПоВладельцам(ДокументыДляПолученияСостояния);
	
	Для каждого оформлениеСтроки из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.СостояниеЭД.УстановитьТекст(СостоянияЭД[ОформлениеСтроки.ДанныеСтроки.Ссылка]);
	КонецЦикла
	// Конец ЭлектронныеДокументы

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПриОткрытии" формы
//
// Параметры
//  Нет
//
Процедура ПриОткрытии()
	
	// ЭлектронныеДокументы
	Если НЕ мИспользоватьОбменЭД Тогда 
		ЭлементыФормы.ДокументСписок.Колонки.СостояниеЭД.Видимость = Ложь;
	КонецЕсли;
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ЭлектронныеДокументы
	Если ИмяСобытия = "ОбновитьСостояниеЭД" Тогда
		ДокументСписок.Обновить();	
	КонецЕсли;	
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// ЭлектронныеДокументы
	РаботаСДиалогами.УдалитьКнопкуЭД(ЭлементыФормы.ДействияФормы.Кнопки, мИспользоватьОбменЭД);
	// Конец ЭлектронныеДокументы
	
КонецПроцедуры

мИспользоватьОбменЭД = ЭлектронныеДокументыПереопределяемый.ПолучитьЗначениеФункциональнойОпции("ИспользоватьОбменЭД");