////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мТекущийОтчетныйПериод; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

Перем мЕстьДоступКНачислениям;

Перем мТаблицаСведенийПринятыхПФР;
Перем мМассивПрошлыхПериодов;
Перем мИменаПрошлыхПачек;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Заполняет адреса для информирования
//
Процедура ЗаполнениеАдреса(ТипЗаполнения)
	
	Если РаботникиОрганизации.Количество()>0 Тогда
		Если Модифицированность() Тогда
			Вопрос = "Документ будет сохранен и имеющиеся адреса застрахованных лиц будут переписаны. Продолжить?";
		Иначе
			Вопрос = "Имеющиеся адреса застрахованных лиц будут переписаны. Продолжить?";
		КонецЕсли;
		Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ОКОтмена);
		Если Ответ = КодВозвратаДиалога.Отмена Тогда
			Возврат;
		ИначеЕсли Ответ = КодВозвратаДиалога.ОК И Модифицированность() Тогда
			ЗаписатьВФорме();
		КонецЕсли;
	КонецЕсли; 
	
	Автозаполнение(ТипЗаполнения);
	
КонецПроцедуры // ЗаполнениеАдреса()

Процедура ПоказатьЭлементыФормы()

	ЭлементыФормы.ТерриториальныеУсловия.ТолькоПросмотр = ТолькоПросмотр Или ТипФормДокументов <> "СЗВ-4-2";
	ЭлементыФормы.КорректируемыйПериод.ТолькоПросмотр = ТолькоПросмотр Или ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ;
	ЭлементыФормы.ПередаватьДоуплаченныеСуммы.Доступность = Не ТолькоПросмотр И ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ;
	
	ЭтоНовыеФормы = ОтчетныйПериод >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
	Если СпециальныйДокумент2010года Тогда
		ЭлементыФормы.ПанельОписанияФорм.ТекущаяСтраница = ЭлементыФормы.ПанельОписанияФорм.Страницы.СтраницаОписания;
		ЭлементыФормы.НадписьСпециальногоДокумента.Заголовок = "Эта пачка пенсионных форм была сформирована до утверждения документов СЗВ-6. Сейчас эти формы можно только распечатать."
			+ Символы.ПС + "Пачка содержит " + ?(Не ЗначениеЗаполнено(ВидКорректировки),"исходные",?(ВидКорректировки = "КОРР","корректирующие","отменяющие")) + " сведения " + ТипФормДокументов;
		
	ИначеЕсли ЭтоНовыеФормы Тогда
		ЭлементыФормы.ПанельОписанияФорм.ТекущаяСтраница = ЭлементыФормы.ПанельОписанияФорм.Страницы.Страница2010;
		
	Иначе
		ЭлементыФормы.ПанельОписанияФорм.ТекущаяСтраница = ЭлементыФормы.ПанельОписанияФорм.Страницы.Страница2009;
		
	КонецЕсли;
	
	Если мЕстьДоступКНачислениям И Не СпециальныйДокумент2010года И ЭтоНовыеФормы Тогда
		ЭлементыФормы.ПанельСостояниеПачекДокументов.Свертка = РежимСверткиЭлементаУправления.Нет;
	Иначе
		ЭлементыФормы.ПанельСостояниеПачекДокументов.Свертка = РежимСверткиЭлементаУправления.Верх;
	КонецЕсли;
	
	ПоказыватьКолонкиВзносов = ЭтоНовыеФормы И мЕстьДоступКНачислениям И ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ;
	ЭлементыФормы.РаботникиОрганизации.Колонки.КолонкаНакопительная.Видимость = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.КолонкаСтраховая.Видимость = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.НачисленоНакопительная.Видимость = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.НачисленоСтраховая.Видимость = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.УплаченоНакопительная.Видимость = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.УплаченоСтраховая.Видимость = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.КолонкаНакопительная.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.КолонкаСтраховая.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.НачисленоНакопительная.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.НачисленоСтраховая.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.УплаченоНакопительная.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.УплаченоСтраховая.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Подвал = ПоказыватьКолонкиВзносов;

	ПоказыватьКолонкиВзносов = ЭтоНовыеФормы И мЕстьДоступКНачислениям И ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ;
	ЭлементыФормы.РаботникиОрганизации.Колонки.ДоначисленоНакопительная.Видимость = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.ДоначисленоСтраховая.Видимость = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.ДоначисленоНакопительная.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.ДоначисленоСтраховая.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.ДоУплаченоНакопительная.Видимость = ПоказыватьКолонкиВзносов И ПередаватьДоуплаченныеСуммы;
	ЭлементыФормы.РаботникиОрганизации.Колонки.ДоУплаченоНакопительная.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Колонки.ДоУплаченоСтраховая.Видимость = ПоказыватьКолонкиВзносов И ПередаватьДоуплаченныеСуммы;
	ЭлементыФормы.РаботникиОрганизации.Колонки.ДоУплаченоСтраховая.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
	
	Записан = Не ЭтоНовый();
	ЭлементыФормы.НомерПачки.АвтоОтметкаНезаполненного = Записан;
	ЭлементыФормы.НомерПачки.ОтметкаНезаполненного = Записан И Не ЗначениеЗаполнено(НомерПачки);
	
	Если СпециальныйДокумент2010года Тогда
		Кнопки = ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
		Кнопки.Удалить(Кнопки.Записать);
		Если мЕстьДоступКНачислениям Тогда
			Кнопки.Удалить(Кнопки.НаДискетку);
			Кнопки.Удалить(Кнопки.ОК);
			Кнопки.Удалить(Кнопки.ПроверитьВCheckXML);
			Кнопки.Удалить(Кнопки.Файл);
		КонецЕсли;
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть.КнопкаПоУмолчанию = Истина;
		ЭлементыФормы.ПринятоВПФР.Доступность = Ложь;
	ИначеЕсли мЕстьДоступКНачислениям Тогда
		Если ПринятоВПФР Тогда
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть.КнопкаПоУмолчанию = Истина;
		Иначе 	
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		ЭлементыФормы.ПринятоВПФР.Доступность = Проведен И Не ЗаполненПринятымиСведениями;
	Иначе 	
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть.КнопкаПоУмолчанию = Истина;
		ЭлементыФормы.ПринятоВПФР.Доступность = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ДействиеРедактироватьСЗВ_4.Картинка = ?(ТолькоПросмотр, БиблиотекаКартинок.ПосмотретьСЗВ4,БиблиотекаКартинок.ОткрытьСЗВ4);
	
КонецПроцедуры

Процедура ПриИзмененииФизлица(СтрокаТабличнойЧасти)

	Если ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		НовыеДанные = ПроцедурыПерсонифицированногоУчета.ДанныеФизЛицаДляДокументаПерсучета(СтрокаТабличнойЧасти.Физлицо, Дата, Неопределено, Неопределено, Неопределено, Истина);
	Иначе 
		НовыеДанные = ПроцедурыПерсонифицированногоУчета.ДанныеФизЛицаДляДокументаПерсучета(СтрокаТабличнойЧасти.Физлицо, Дата, Организация, КатегорияЗастрахованныхЛиц, ОтчетныйПериод, Истина);
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,НовыеДанные);
	
	Если ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		Возврат	
	КонецЕсли;
	
	МассивФизлиц = Новый Массив;
	МассивФизлиц.Добавить(СтрокаТабличнойЧасти.Физлицо);
	
	ПериодРасчетаВзносов = ?(ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ, ОтчетныйПериод, КорректируемыйПериод);
	
	ВзносыФизлиц = ПроцедурыПерсонифицированногоУчетаПолныеПрава.ДанныеОВзносахПоКатегориям(Дата, ПериодРасчетаВзносов, ПериодРасчетаВзносов, Организация, МассивФизлиц);
	ВзносыФизлиц.Индексы.Добавить("Физлицо,КатегорияЗастрахованныхЛиц");
	
	СтруктураПоиска = Новый Структура("Физлицо,КатегорияЗастрахованныхЛиц", СтрокаТабличнойЧасти.Физлицо, КатегорияЗастрахованныхЛиц, ПериодРасчетаВзносов);
	СтрокиФизлица = ВзносыФизлиц.НайтиСтроки(СтруктураПоиска);
	Если СтрокиФизлица.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СтрокиФизлица[0]);
	Иначе
		СтрокаТабличнойЧасти.НачисленоСтраховая = 0;
		СтрокаТабличнойЧасти.УплаченоСтраховая = 0;
		СтрокаТабличнойЧасти.НачисленоНакопительная = 0;
		СтрокаТабличнойЧасти.УплаченоНакопительная = 0;
	КонецЕсли;
	
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ Тогда
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(СтрокаТабличнойЧасти);
		ДоначисленныеВзносы = ПроцедурыПерсонифицированногоУчета.ДоначисленныеВзносыДляКорректирующегоДокумента(Организация, Дата, КорректируемыйПериод, КатегорияЗастрахованныхЛиц, РаботникиОрганизации.Выгрузить(МассивСтрок,"НомерСтроки,ФизЛицо,НачисленоНакопительная,НачисленоСтраховая,УплаченоНакопительная,УплаченоСтраховая"));
		Выборка = ДоначисленныеВзносы.Выбрать();
		Если Выборка.Следующий() Тогда 
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, Выборка, "ДоначисленоСтраховая, ДоначисленоНакопительная, ДоУплаченоСтраховая, ДоУплаченоНакопительная");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииОрганизации()

	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПроцедурыПерсонифицированногоУчета.ДанныеРуководителяОрганизации(Организация, Дата));
	СписокКатегорийЗастрахованныхЛиц = ПроцедурыПерсонифицированногоУчета.КатегорииЗастрахованныхЛицОрганизации(Организация, мГоловнаяОрганизация, ?(ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ, ОтчетныйПериод, КорректируемыйПериод), , ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	КатегорияЗастрахованныхЛиц = СписокКатегорийЗастрахованныхЛиц[0].Значение;
	ЭлементыФормы.КатегорияЗастрахованныхЛиц.ДоступныеЗначения = СписокКатегорийЗастрахованныхЛиц;
	НомерПачки = "";
	
КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок 	= ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка 		= ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.Заполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьНадписьСостоянияПачекДокументов()
	ПроцедурыПерсонифицированногоУчетаПолныеПрава.ПрочитатьСведенияПринятыеПФР(Организация, ?(ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ, ОтчетныйПериод, КорректируемыйПериод), мТаблицаСведенийПринятыхПФР, мИменаПрошлыхПачек, мМассивПрошлыхПериодов, мЕстьДоступКНачислениям);
	ПроцедурыПерсонифицированногоУчета.ОписаниеСостоянияПринятыхПФРДанных(мТаблицаСведенийПринятыхПФР.Количество(), мТаблицаСведенийПринятыхПФР, мМассивПрошлыхПериодов, мИменаПрошлыхПачек, ЭлементыФормы, Истина);
	Если мЕстьДоступКНачислениям Тогда
		ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.Заполнить.Кнопки.ЗаполнитьВзносы.Доступность = мМассивПрошлыхПериодов.Количество() = 0 Или мТаблицаСведенийПринятыхПФР.Количество() = мМассивПрошлыхПериодов.Количество();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если Не ЗначениеЗаполнено(ОтчетныйПериод) Тогда
			ОтчетныйПериод = ПроцедурыПерсонифицированногоУчета.ПредшествующийОтчетныйПериодПерсучета(ОбщегоНазначения.ПолучитьРабочуюДату());
		КонецЕсли;
		Если ТипСведенийСЗВ.Пустая() Тогда
			ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ;
			ТипФормДокументов = ?(ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами(),"СЗВ-4-2","СЗВ-6-2");
		КонецЕсли;	 
		ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07;
		ПринятоВПФР = Ложь;
		НомерПачки = "";
	ИначеЕсли СпециальныйДокумент2010года Или ЗаполненПринятымиСведениями Или ПринятоВПФР Тогда 
		ТолькоПросмотр = Истина;
	Иначе
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = ПредставлениеПериода(НачалоГода(ОтчетныйПериод), ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод), "ФП = Истина" );
	КорректируемыйМесяцСтрока = ПредставлениеПериода(НачалоГода(КорректируемыйПериод), ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(КорректируемыйПериод), "ФП = Истина" );
	
	ФлажокПринятоВПФР = ПринятоВПФР;
	ПередаватьДоуплаченныеСуммы = Не НеПередаватьДоуплаченныеСуммы;
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мТекущийОтчетныйПериод = ОтчетныйПериод;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	мЕстьДоступКНачислениям = НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл();
	
	Если Не мЕстьДоступКНачислениям Тогда
		КоманднаяПанель = ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
		КоманднаяПанель.Удалить(КоманднаяПанель.НаДискетку);
		КоманднаяПанель.Удалить(КоманднаяПанель.Файл);
		КоманднаяПанель.Удалить(КоманднаяПанель.ОК);
		КоманднаяПанель.Удалить(КоманднаяПанель.ПроверитьВCheckXML);
		КоманднаяПанель = ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.Заполнить.Кнопки;
		КоманднаяПанель.Удалить(КоманднаяПанель.ЗаполнитьВзносы);
		ЭлементыФормы.ПередаватьДоуплаченныеСуммы.Видимость = Ложь;
	КонецЕсли;
	
	ОбновитьНадписьСостоянияПачекДокументов();	
	
	Если ЭтоНовый() И КатегорияЗастрахованныхЛиц.Пустая() Тогда
		ПриИзмененииОрганизации();
	Иначе
		ЭлементыФормы.КатегорияЗастрахованныхЛиц.ДоступныеЗначения = ПроцедурыПерсонифицированногоУчета.КатегорииЗастрахованныхЛицОрганизации(Организация, мГоловнаяОрганизация, ?(ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ, ОтчетныйПериод, КорректируемыйПериод), , ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	КонецЕсли;
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
	ПоказатьЭлементыФормы();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	Если ПринятоВПФР Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ПоказатьЭлементыФормы();
	
КонецПроцедуры

// Процедура - обработчик пришедшего оповещения
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)

	Если ИмяСобытия = "ЗаписанаКИ" И ТипЗнч(Параметр) = Тип("Структура") И (Источник = ЭтаФорма) Тогда
		
		Данные = "";
		Если Параметр.Свойство("Данные", Данные) Тогда
			
			СтрокаТЧ = Неопределено;
			ИмяАдреса = "";
			Если Данные.Свойство("СтрокаТЧ", СтрокаТЧ) и Данные.Свойство("ИмяАдреса", ИмяАдреса) Тогда
				
				Если ТипЗнч(СтрокаТЧ) = Тип("ДокументТабличнаяЧастьСтрока.СведенияОТрудовомСтажеИЗаработкеСЗВ4.РаботникиОрганизации") 
					И РаботникиОрганизации.Индекс(СтрокаТЧ) <> -1 Тогда
					
					СтруктураАдресаПФР = Новый Структура;
					СтруктураАдресаПФР.Вставить("Страна","");
					СтруктураАдресаПФР.Вставить("Индекс",СокрЛП(Данные.Поле1));
					СтруктураАдресаПФР.Вставить("Регион",СокрЛП(Данные.Поле2));
					СтруктураАдресаПФР.Вставить("Район",СокрЛП(Данные.Поле3));
					СтруктураАдресаПФР.Вставить("Город",СокрЛП(Данные.Поле4));
					СтруктураАдресаПФР.Вставить("НаселенныйПункт",СокрЛП(Данные.Поле5));
					СтруктураАдресаПФР.Вставить("Улица",СокрЛП(Данные.Поле6));
					СтруктураАдресаПФР.Вставить("Дом",СокрЛП(Данные.Поле7));
					СтруктураАдресаПФР.Вставить("Корпус",СокрЛП(Данные.Поле8));
					СтруктураАдресаПФР.Вставить("Квартира",СокрЛП(Данные.Поле9));
					
					СтрокаТЧ[ИмяАдреса] = РегламентированнаяОтчетность.СобратьАдрес(СтруктураАдресаПФР);
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ОсновныеДействияФормыФайл(Кнопка)
	ОбработкаСообщений = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаСообщений.УдалитьСообщения();
	ПроцедурыПерсонифицированногоУчета.ПоказатьФайлДокумента(ЭтотОбъект,"Файл-пачка документов " + ТипФормДокументов);
КонецПроцедуры

// Запускает тестирование файла программой проверки
//
Процедура ОсновныеДействияФормыПроверитьВCheckXML(Кнопка)
	
	ТекстВопросаСохранения = "Перед проверкой документ необходимо записать. Записать?";
	ТекстВопросаДействия = "Внимание!" + Символы.ПС + "В рамках одного документа невозможно провести весь комплекс предусмотренных ПФР проверок! " + Символы.ПС + "Для проведения полной проверки комплекта передаваемых сведений Вы можете перейти в рабочее место" + Символы.ПС + "Подготовка данных ПФР (рекомендуется) или проверить только эту пачку.";
	ТекстКнопкиДействия = "Проверить текущую пачку";
	ЗаголовокОкна = "Проверка данных";
	
	Если ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ЭтотОбъект,ТекстВопросаСохранения) тогда
			Возврат;
		КонецЕсли;
		ПроцедурыПерсонифицированногоУчета.ПроверитьФайлВCheckXML(ДокументОбъект, ЭтаФорма);
	ИначеЕсли Не ПроцедурыПерсонифицированногоУчета.ПереходВРабочееМестоПФРвОтветНаВопрос(ЭтотОбъект, ЭтаФорма, ТекстВопросаСохранения, ТекстВопросаДействия, ТекстКнопкиДействия, ЗаголовокОкна, Организация, ОтчетныйПериод, Год(ОтчетныйПериод), Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ) Тогда
		ПроцедурыПерсонифицированногоУчета.ПроверитьФайлВCheckXML(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

// копирует файл с "правильным" именем в указанное пользователем место
//
Процедура ОсновныеДействияФормыНаДискетку(Кнопка)
	
	ТекстВопросаСохранения = "Перед формированием файла документ необходимо записать. Записать?";
	ТекстВопросаДействия = "Внимание!" + Символы.ПС + "В ПФР необходимо передавать файлы перс.учета в одном пакете с расчетом РСВ-1! " + Символы.ПС + "Для формирования полного комплекта передаваемых сведений Вы можете перейти в рабочее место" + Символы.ПС + "Подготовка данных ПФР (рекомендуется) либо сейчас сохранить только этот файл.";
	ТекстКнопкиДействия = "Записать только файл " + ТипФормДокументов;
	ЗаголовокОкна = "Формирование файлов";
	
	Если ОтчетныйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
		
		Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ЭтотОбъект,ТекстВопросаСохранения) тогда
			Возврат;
		КонецЕсли;
		
		ОбработкаСообщений = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаСообщений.УдалитьСообщения();
		Если ФорматФайла = Перечисления.ФорматФайлаПФР.Версия04 Тогда
			КодировкаФайла = КодировкаТекста.OEM;
		ИначеЕсли ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07 Тогда
			КодировкаФайла = КодировкаТекста.ANSI;
		КонецЕсли;
		ПроцедурыПерсонифицированногоУчета.ЗаписатьФайлДокументаНаДискету(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Ссылка, Год(ОтчетныйПериод)), КодировкаФайла);
	ИначеЕсли Не ПроцедурыПерсонифицированногоУчета.ПереходВРабочееМестоПФРвОтветНаВопрос(ЭтотОбъект, ЭтаФорма, ТекстВопросаСохранения, ТекстВопросаДействия, ТекстКнопкиДействия, ЗаголовокОкна, Организация, ОтчетныйПериод, Год(ОтчетныйПериод), Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ) Тогда
		ОбработкаСообщений = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаСообщений.УдалитьСообщения();
		ПроцедурыПерсонифицированногоУчета.ЗаписатьФайлДокументаНаДискету(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Ссылка, Год(ОтчетныйПериод)), "windows-1251");
	КонецЕсли;
	
КонецПроцедуры

// открывает форму ввода данных СЗВ-4 для редактирования
Процедура КоманднаяПанельРаботникиОрганизацииДействиеРедактироватьСЗВ_4(Кнопка)
	
	СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если СтрокаРаботники = Неопределено тогда
		Возврат;
	КонецЕсли;	 
	Если Не ЗначениеЗаполнено(СтрокаРаботники.ФизЛицо) Тогда
		Возврат;
	КонецЕсли; 
	
	ФормаВводаДанныхСЗВ4 = ПолучитьОбщуюФорму("ФормаВводаДанныхСЗВ4", ЭтаФорма, "ФизЛицо"+ СтрокаРаботники.ФизЛицо);
	ФормаВводаДанныхСЗВ4.ФизЛицо = СтрокаРаботники.ФизЛицо;
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ПЕНСИОННАЯ Тогда
		ФормаВводаДанныхСЗВ4.ИспользоватьМежрасчетныйПериод = Истина;
		ФормаВводаДанныхСЗВ4.ДатаОкончанияМежрасчетногоПериода = Дата;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ФормаВводаДанныхСЗВ4, ЭтотОбъект,"Организация,КатегорияЗастрахованныхЛиц");
	ФормаВводаДанныхСЗВ4.ОтчетныйПериод = ?(ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.КОРРЕКТИРУЮЩАЯ, КорректируемыйПериод, ОтчетныйПериод);
	ФормаВводаДанныхСЗВ4.ТолькоЧтение = Проведен Или ЗаполненПринятымиСведениями;
	ФормаВводаДанныхСЗВ4.Открыть();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1,,,, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииЗаполнитьВсеАдреса(Кнопка)
	
	ЗаполнениеАдреса("ВсеАдреса");
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииЗаполнитьИзменившиесяАдреса(Кнопка)
	
	ЗаполнениеАдреса("ИзменившиесяАдреса");
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииЗаполнитьВзносы(Кнопка)
	
	Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботникиОрганизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КатегорияЗастрахованныхЛиц.Пустая() Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Не указана категория застрахованных лиц!");
		Возврат;
	КонецЕсли;
	
	Вопрос = "Имеющиеся данные о суммах начисленных, уплаченных взносов по застрахованным лицам будут обновлены. Продолжить?";
	Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьВзносы()
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	Если Год(мТекущаяДатаДокумента) <> Год(Дата) Тогда
		НомерПачки = "";
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	ПриИзмененииОрганизации();
	
	ОбновитьНадписьСостоянияПачекДокументов();	
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода типа формы документов
Процедура ТипФормДокументовПриИзменении(Элемент)
	
	Если Элемент.Значение = "СЗВ-4-1" Тогда
		ТерриториальныеУсловия = "";
	КонецЕсли;
	
	ПоказатьЭлементыФормы();
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ОтчетныйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ОтчетныйПериод < '20100101' Тогда
		ОтчетныйПериод = ДобавитьМесяц(ОтчетныйПериод, Направление * 12);
	ИначеЕсли ОтчетныйПериод = '20100101' Тогда
		Если Направление = 1 Тогда
			ОтчетныйПериод = '20100701'
		Иначе 	
			ОтчетныйПериод = '20090101'
		КонецЕсли;
	ИначеЕсли ОтчетныйПериод = '20100701' Тогда
		ОтчетныйПериод = ДобавитьМесяц(ОтчетныйПериод, Направление * 6);
	ИначеЕсли ОтчетныйПериод = '20110101' И Направление = -1 Тогда
		ОтчетныйПериод = '20100701'
	Иначе
		ОтчетныйПериод = ДобавитьМесяц(ОтчетныйПериод, Направление * 3);
	КонецЕсли;
	Элемент.Значение = ПредставлениеПериода(НачалоГода(ОтчетныйПериод), ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод), "ФП = Истина" );
	
	Если мТекущийОтчетныйПериод <> ОтчетныйПериод Тогда
		
		ЭтоНовыеФормы = ОтчетныйПериод >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		Если ЭтоНовыеФормы И ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
			СписокКатегорийЗастрахованныхЛиц = ПроцедурыПерсонифицированногоУчета.КатегорииЗастрахованныхЛицОрганизации(Организация, мГоловнаяОрганизация, ОтчетныйПериод);
			Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(КатегорияЗастрахованныхЛиц) = Неопределено Тогда
				КатегорияЗастрахованныхЛиц = СписокКатегорийЗастрахованныхЛиц[0].Значение;
			КонецЕсли;
			ЭлементыФормы.КатегорияЗастрахованныхЛиц.ДоступныеЗначения = СписокКатегорийЗастрахованныхЛиц;
		КонецЕсли;
		
		Если Год(мТекущийОтчетныйПериод) <> Год(ОтчетныйПериод) Тогда
			
			Если ЭтоНовыеФормы Тогда
				Если ТипФормДокументов = "СЗВ-4-1" Тогда
					ТипФормДокументов = "СЗВ-6-1"
				ИначеЕсли ТипФормДокументов = "СЗВ-4-2" Тогда
					ТипФормДокументов = "СЗВ-6-2"
				КонецЕсли;
				Если ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ПЕНСИОННАЯ Тогда
					ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ
				КонецЕсли;
			Иначе
				Если ТипФормДокументов = "СЗВ-6-1" Тогда
					ТипФормДокументов = "СЗВ-4-1"
				ИначеЕсли ТипФормДокументов = "СЗВ-6-2" Тогда
					ТипФормДокументов = "СЗВ-4-2"
				КонецЕсли;
				Если ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
					ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ
				КонецЕсли;
				
			КонецЕсли;
			
			УстановитьКнопкиПечати();
			
			ПоказатьЭлементыФормы();
			
		КонецЕсли;
		
		мТекущийОтчетныйПериод = ОтчетныйПериод;
		
	КонецЕсли;
	
	ОбновитьНадписьСостоянияПачекДокументов();	
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура КорректируемыйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если КорректируемыйПериод = '20100101' Тогда
		Если Направление = 1 Тогда
			КорректируемыйПериод = '20100701'
		КонецЕсли;
	ИначеЕсли КорректируемыйПериод = '20100701' Тогда
		КорректируемыйПериод = ДобавитьМесяц(КорректируемыйПериод, Направление * 6);
	ИначеЕсли КорректируемыйПериод = '20110101' И Направление = -1 Тогда
		КорректируемыйПериод = '20100701'
	Иначе
		КорректируемыйПериод = ДобавитьМесяц(КорректируемыйПериод, Направление * 3);
	КонецЕсли;
	Элемент.Значение = ПредставлениеПериода(НачалоГода(КорректируемыйПериод), ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(КорректируемыйПериод), "ФП = Истина" );
	
	СписокКатегорийЗастрахованныхЛиц = ПроцедурыПерсонифицированногоУчета.КатегорииЗастрахованныхЛицОрганизации(Организация, мГоловнаяОрганизация, КорректируемыйПериод, , Истина);
	Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(КатегорияЗастрахованныхЛиц) = Неопределено Тогда
		КатегорияЗастрахованныхЛиц = СписокКатегорийЗастрахованныхЛиц[0].Значение;
	КонецЕсли;
	ЭлементыФормы.КатегорияЗастрахованныхЛиц.ДоступныеЗначения = СписокКатегорийЗастрахованныхЛиц;
	
	ОбновитьНадписьСостоянияПачекДокументов();	
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

Процедура ПереключательТипСведений2010ПриИзменении(Элемент)
	
	ПоказатьЭлементыФормы();
	Если Элемент.Значение = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ Тогда
		КорректируемыйПериод = "";
		КорректируемыйМесяцСтрока = "";
		СписокКатегорийЗастрахованныхЛиц = ПроцедурыПерсонифицированногоУчета.КатегорииЗастрахованныхЛицОрганизации(Организация, мГоловнаяОрганизация, ОтчетныйПериод);
	Иначе
		КорректируемыйПериод = ПроцедурыПерсонифицированногоУчета.ПредшествующийОтчетныйПериодПерсучета(ОтчетныйПериод);
		КорректируемыйПериод = ?(КорректируемыйПериод < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами(), ОтчетныйПериод, КорректируемыйПериод);
		КорректируемыйМесяцСтрока = ПредставлениеПериода(НачалоГода(КорректируемыйПериод), ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(КорректируемыйПериод), "ФП = Истина" );
		СписокКатегорийЗастрахованныхЛиц = ПроцедурыПерсонифицированногоУчета.КатегорииЗастрахованныхЛицОрганизации(Организация, мГоловнаяОрганизация, КорректируемыйПериод, , Истина);
	КонецЕсли;
	Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(КатегорияЗастрахованныхЛиц) = Неопределено Тогда
		КатегорияЗастрахованныхЛиц = СписокКатегорийЗастрахованныхЛиц[0].Значение;
	КонецЕсли;
	ЭлементыФормы.КатегорияЗастрахованныхЛиц.ДоступныеЗначения = СписокКатегорийЗастрахованныхЛиц;
	
КонецПроцедуры

Процедура ПринятоВПФРПриИзменении(Элемент)
	
	ПринятоВПФР = ФлажокПринятоВПФР;
	
	Если Не ПринятоВПФР Тогда
		ТолькоПросмотр = Ложь;
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПоказатьЭлементыФормы();
	
КонецПроцедуры

Процедура ПередаватьДоуплаченныеСуммыПриИзменении(Элемент)
	НеПередаватьДоуплаченныеСуммы = Не ПередаватьДоуплаченныеСуммы;
	ПоказатьЭлементыФормы();
КонецПроцедуры

Процедура НадписьПерейтиПодготовкаДанныхПФРНажатие(Элемент)
	
	Вопрос = "Перед переходом в рабочее место необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ЭтотОбъект,Вопрос) тогда
		Возврат;
	КонецЕсли;
	
	Обработка = Обработки.ПодготовкаДанныхПФР2010.Создать();
	Обработка.Организация		= Организация;
	Обработка.ОтчетныйПериод	= ОтчетныйПериод;
	Обработка.ТипСведений		= Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ;
	
	Обработка.ПолучитьФорму("Форма").Открыть();
	
	Закрыть();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ

Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПоказываемАдрес = Элемент.Колонки.АдресДляИнформирования.Видимость;
	
	// уберем ненужные ячейки колонок заголовка
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.КолонкаСтраховая.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.КолонкаНакопительная.Видимость = Ложь;
		Если ПоказываемАдрес Тогда
			ОформлениеСтроки.Ячейки.АдресДляИнформирования.УстановитьТекст(УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(ОформлениеСтроки.ДанныеСтроки.АдресДляИнформирования));
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	Физлицо = ВыбранноеЗначение;
		
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
		СтрокаТабличнойЧасти.Физлицо = Физлицо;
		ПриИзмененииФизлица(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры  // ТабличнаяЧастьОбработкаВыбора


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ РаботникиОрганизации

// Процедура - обработчик события "ПриИзменении" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоПриИзменении(Элемент)
	
	ПриИзмененииФизлица(ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение,, Истина);
	
КонецПроцедуры

Процедура РаботникиОрганизацииФизЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, мГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 6, Текст, Организация, Истина);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 6, Текст, Организация, Истина);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода АдресДляИнформирования
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииАдресДляИнформированияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(Элемент, ЭтаФорма, "ФормаРедактированияАдресаРегистрацииПоСтроке"+ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока.НомерСтроки);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры
////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мТаблицаСведенийПринятыхПФР = Новый ТаблицаЗначений;
мТаблицаСведенийПринятыхПФР.Колонки.Добавить("Пачка");
мТаблицаСведенийПринятыхПФР.Колонки.Добавить("ОтчетныйПериод");