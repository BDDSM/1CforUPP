////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

Перем мТекСтрока; // Текущая строка таблицы Материалы

// Используется для определения необходимости отображения действий над НДС в документе.
Перем мСложныйУчетНДС;

// Используется для определения необходимости указания счета списания НДС на расходы.
Перем мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;

Перем мКолонкиМатериалы;
Перем мИспользоватьТолькоСборочныеСпецификации Экспорт;
Перем мВедениеУчетаЗатратПоПроектам;
Перем мИспользоватьВнутренниеЗаказы;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Предыдущие значения реквизитов
Перем мСтароеЗначениеСклада;

Перем ПоказыватьВДокументахСчетаУчета;

Перем мОтражатьВРегламентированномУчете;

Перем мПрименениеУСН;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если дата документа совпадает с текущей // Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
		НачалоДня(Дата) = НачалоДня(ТекущаяДата());

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей( Ссылка, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить( ЭлементыФормы.Материалы, ЭлементыФормы.КоманднаяПанельМатериалы.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок( мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Ложь;
	ЕстьСерия = Истина;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", 	"По остаткам номенклатуры");
	СписокЗапросов.Добавить("Спецификации", 		"По спецификациям");
	
	
	Команда           = "ПодборВТабличнуюЧастьМатериалы";
	ИмяТабличнойЧасти = "Материалы";

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"                , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"     , СписокЗапросов);
	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                  , Склад);
	СтруктураПараметровПодбора.Вставить("Организация"            , Организация);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества", Истина);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"        , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество, СтатьяЗатрат, НоменклатурнаяГруппа;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура", 		Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", 	ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество", 			Количество);
	ЗначениеВыбора.Свойство("Характеристика", 		Характеристика);
	ЗначениеВыбора.Свойство("Серия", 				Серия);
	ЗначениеВыбора.Свойство("Качество", 			Качество);
	ЗначениеВыбора.Свойство("СтатьяЗатрат", 		СтатьяЗатрат);
	ЗначениеВыбора.Свойство("НоменклатурнаяГруппа", НоменклатурнаяГруппа);
	
	Если Номенклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура",				Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры",	Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры",			Серия);
	Если ЗначениеЗаполнено(Качество) Тогда
		СтруктураОтбора.Вставить("Качество", 				Качество);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		СтруктураОтбора.Вставить("СтатьяЗатрат", 			СтатьяЗатрат);
	КонецЕсли;
	Если ЗначениеЗаполнено(НоменклатурнаяГруппа) Тогда
		СтруктураОтбора.Вставить("НоменклатурнаяГруппа", 	НоменклатурнаяГруппа);
	КонецЕсли;
	СтруктураОтбора.Вставить("ЕдиницаИзмерения",			ЕдиницаИзмерения);
	
	Если мУказаниеСкладовВТЧ
	   И ЗначениеЗаполнено(Склад) Тогда
		СтруктураОтбора.Вставить("Склад", Склад);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
		
		СтрокаТабличнойЧасти.Склад = Склад;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      		= СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.СтатьяЗатрат     		= ?(СтатьяЗатрат <> Неопределено, СтатьяЗатрат, Номенклатура.СтатьяЗатрат);
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа 	= ?(НоменклатурнаяГруппа <> Неопределено, НоменклатурнаяГруппа, Номенклатура.НоменклатурнаяГруппаЗатрат);
		Если ЗначениеЗаполнено(Качество) Тогда
			СтрокаТабличнойЧасти.Качество          = Качество;
		Иначе
			СтрокаТабличнойЧасти.Качество         = Справочники.Качество.Новый;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
		СтрокаТабличнойЧасти.ОтражениеВУСН 				= Перечисления.ОтражениеВУСН.Принимаются;
		
		СтрокаТабличнойЧасти.Склад = Склад;

		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЕсли;

	ЭлементыФормы.Материалы.ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы.Материалы.ТекущаяКолонка = ЭлементыФормы.Материалы.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораПоСпецификации(ТабличнаяЧасть, ЗначениеВыбора)
	
	Перем Спецификация, Количество;
	
	ЗначениеВыбора.Свойство("Спецификация", Спецификация);
	ЗначениеВыбора.Свойство("Количество", 	Количество);
	
	Отбор = Новый Структура();
	
	ИсходныеКомплектующие = УправлениеПроизводством.ПолучитьМатериалыПоСпецификации(Спецификация, Количество, Отбор, Дата, мИспользоватьТолькоСборочныеСпецификации);
	
	Если ИсходныеКомплектующие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ИсходныеКомплектующие Цикл
	
		СтруктураПодбора = Новый Структура();
		СтруктураПодбора.Вставить("Номенклатура",       Строка.Номенклатура);
		СтруктураПодбора.Вставить("ЕдиницаИзмерения",   Строка.ЕдиницаИзмерения);
		СтруктураПодбора.Вставить("Характеристика",     Строка.ХарактеристикаНоменклатуры);
		СтруктураПодбора.Вставить("Серия",     			Справочники.СерииНоменклатуры.ПустаяСсылка());
		СтруктураПодбора.Вставить("Количество",     	Строка.Количество);
		СтруктураПодбора.Вставить("СтатьяЗатрат",     	Строка.СтатьяЗатрат);
		СтруктураПодбора.Вставить("НоменклатурнаяГруппа", Строка.НоменклатурнаяГруппа);

		ОбработкаПодбора(ТабличнаяЧасть, СтруктураПодбора);
		
	КонецЦикла;

КонецПроцедуры // ОбработкаПодбораПоСпецификации()

// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчета(ИзменениеСубконто = ЛОЖЬ)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТабличнойЧасти.СчетЗатрат, Неопределено);
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
		Если ТипЗнч(СтрокаТабличнойЧасти.Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто1.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто2.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто3.ВидРасходовНУ;
		ИначеЕсли ИзменениеСубконто Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ВидЗатратНУ = СтрокаТабличнойЧасти.СтатьяЗатрат.ВидРасходовНУ;
	КонецЕсли;
	
	СтруктураДанных = новый Структура("СчетБУ",СтрокаТабличнойЧасти.СчетЗатрат);
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Счет) Тогда
		СтруктураДанных.Вставить("СчетКоррБУ",СтрокаТабличнойЧасти.Счет);
	КонецЕсли;
	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СтруктураДанных.Вставить("ВидЗатратНУ",ВидЗатратНУ);
	КонецЕсли;
	СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(СтруктураДанных);
	//Не удалось заполнить СчетНУ с учетом трех параметров
	Если СтруктураДанных.Свойство("СчетКоррБУ") И СтруктураДанных.Свойство("ВидЗатратНУ") И НЕ ЗначениеЗаполнено(СчетНУ) Тогда
		//Попытка заполнить с учетом СчетКоррБУ без учета ВидЗатрат
		СтруктураДанныхДоп = Новый Структура("СчетБУ,СчетКоррБУ", СтрокаТабличнойЧасти.СчетЗатрат,СтрокаТабличнойЧасти.Счет);
        СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(СтруктураДанныхДоп);

		Если НЕ ЗначениеЗаполнено(СчетНУ) Тогда
			//Попытка заполнить с учетом ВидЗатрат без учета СчетКоррБУ
			СтруктураДанныхДоп = Новый Структура("СчетБУ,ВидЗатратНУ", СтрокаТабличнойЧасти.СчетЗатрат,ВидЗатратНУ);
       	 	СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(СтруктураДанныхДоп);
		КонецЕсли;
	КонецЕсли;
	//Не удалось заполнить СчетНУ с учетом нескольких параметров - попытка заполнить только по СчетБУ
	Если НЕ ЗначениеЗаполнено(СчетНУ) И СтруктураДанных.Количество()>1 Тогда
		СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаТабличнойЧасти.СчетЗатрат));
	КонецЕсли;
	
	СтрокаТабличнойЧасти.СчетЗатратНУ = СчетНУ;
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭлементыФормы.Материалы.ТекущиеДанные.СчетЗатратНУ,
	                             ЭлементыФормы.Материалы.ТекущиеДанные.СубконтоНУ1,
	                             ЭлементыФормы.Материалы.Колонки.СубконтоНУ1,
	                             ЭлементыФормы.Материалы.ТекущиеДанные.СубконтоНУ2,
	                             ЭлементыФормы.Материалы.Колонки.СубконтоНУ2,
	                             ЭлементыФормы.Материалы.ТекущиеДанные.СубконтоНУ3,
	                             ЭлементыФормы.Материалы.Колонки.СубконтоНУ3);
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()

// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчетаВШапке(ИзменениеСубконто = ЛОЖЬ)
	
	Если ТипЗнч(СубконтоСписанияНДС1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоСписанияНДС1.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СубконтоСписанияНДС2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоСписанияНДС2.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СубконтоСписанияНДС3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоСписанияНДС3.ВидРасходовНУ;
	ИначеЕсли ИзменениеСубконто Тогда
		Возврат;
	Иначе
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СчетСписанияНДСНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СчетСписанияНДС, ВидЗатратНУ));
	Иначе
		СчетСписанияНДСНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетСписанияНДС));
	КонецЕсли;
	Если СтатьяЗатратСписанияНДС.ВидЗатрат = Перечисления.ВидыЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДСНУ, 	ЭлементыФормы.СубконтоСписанияНДСНУ1, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1,
		                         			ЭлементыФормы.СубконтоСписанияНДСНУ2, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2,
		                         			ЭлементыФормы.СубконтоСписанияНДСНУ3, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчетаВШапке()

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      		= СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);

КонецПроцедуры // ПриИзмененииНоменклатуры()

// Определяет параметры учетной политики (сложный учет НДС по организации).
//
Процедура ОпределитьСложныйУчетНДС()
	
	ПараметрыНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если НЕ ЗначениеЗаполнено(ПараметрыНУ)  Тогда
		мСложныйУчетНДС = Ложь;
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
	Иначе
		мСложныйУчетНДС = ПараметрыНУ.СложныйУчетНДС и Не ПараметрыНУ.УСН;
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = ПараметрыНУ.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;
		Если НЕ ЗначениеЗаполнено(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость) Тогда
			мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ОпределитьСложныйУчетНДС()

// Очищает значение реквизита в табличных частях "Материалы".
//
Процедура ОчиститьРеквизитВТабличныхЧастях(ИмяРеквизита)
	
	// Очистим значения в строках
	Для Каждого Строка Из Материалы Цикл
		Строка[ИмяРеквизита] = Неопределено;
	КонецЦикла;
	
КонецПроцедуры // ОчиститьРеквизитВТабличныхЧастях()

// Заменяет значение реквизита в табличных частях "Материалы".
//
Процедура ЗаменитьЗначениеРеквизитаВТабличныхЧастях(ИмяРеквизита, СтароеЗначение, НовоеЗначение)
	
	// Заменим значения в строках
	Для Каждого Строка Из Материалы Цикл
		Если Строка[ИмяРеквизита] = СтароеЗначение Тогда
			Строка[ИмяРеквизита] = НовоеЗначение;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ЗаменитьЗначениеРеквизитаВТабличныхЧастях()

// Изменяет значение реквизита "Склад" в табличных частях при изменении "Склада" в шапке.
//
Процедура ИзменитьСкладВТабличнойЧасти()
	
	// Если табличные части пустые - выходим
	Если Материалы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ мУказаниеСкладовВТЧ Тогда
		ОчиститьРеквизитВТабличныхЧастях("Склад");
		Возврат;
	КонецЕсли;	
	
	// Если не "пустое значение" и не "склад" - значение неподходит, выходим
	Если ЗначениеЗаполнено(Склад) И НЕ ТипЗнч(Склад) = Тип("СправочникСсылка.Склады") Тогда
		Возврат;
	КонецЕсли;
	
	// Если не "пустое значение" и не "склад" - значение неподходит, выходим
	Если ЗначениеЗаполнено(мСтароеЗначениеСклада) И НЕ ТипЗнч(мСтароеЗначениеСклада) = Тип("СправочникСсылка.Склады") Тогда
		Возврат;
	КонецЕсли;
	
	// Если оба значения пустые - менять нечего, выходим
	Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСклада) И НЕ ЗначениеЗаполнено(Склад) Тогда
		Возврат;
	КонецЕсли;
	
	Если Склад <> мСтароеЗначениеСклада Тогда // Изменен склад в шапке
		
		// Получим список заказов из табличных частей документа
		СписокСкладов = ОбработкаТабличныхЧастей.ПолучитьСписокЗначенийРеквизитаТЧ(Материалы, "Склад");
		
		// Приведем тип пустого значения к типу пустого значения в строках ТЧ для поиска
		Если НЕ ЗначениеЗаполнено(мСтароеЗначениеСклада) Тогда
			мСтароеЗначениеСклада = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
		Если СписокСкладов.Количество() = 0 И ЗначениеЗаполнено(Склад) Тогда
			// Все поля пустые, можно заполнить выбранным значением
			мСтароеЗначениеСклада = Справочники.Склады.ПустаяСсылка();
			
			ТекстВопроса = "Заполнить значение склада в табличных частях?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение склада");
			// Очистим значения в строках
			Если Ответ = КодВозвратаДиалога.Да Тогда
				ЗаменитьЗначениеРеквизитаВТабличныхЧастях("Склад", мСтароеЗначениеСклада, Склад);
			КонецЕсли;
			
		ИначеЕсли НЕ СписокСкладов.НайтиПоЗначению(мСтароеЗначениеСклада) = Неопределено Тогда
			// В табличных частях есть строки со старым значением склада
			
			Если НЕ ЗначениеЗаполнено(Склад) Тогда
				ТекстВопроса = "Очистить значение склада в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Пустое значение склада");
				// Очистим значения в строках
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ОчиститьРеквизитВТабличныхЧастях("Склад");
				КонецЕсли;
			Иначе
				ТекстВопроса = "Заменить значение склада в табличных частях?";
				Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, "Новое значение склада");
				Если Ответ = КодВозвратаДиалога.Да Тогда
					// Заменим значения в строках на новое
					ЗаменитьЗначениеРеквизитаВТабличныхЧастях("Склад", мСтароеЗначениеСклада, Склад);
				КонецЕсли; 
			КонецЕсли; 
		КонецЕсли;
		
		мСтароеЗначениеСклада = Склад;
		
	КонецЕсли;
	
КонецПроцедуры // ИзменитьСкладВТабличнойЧасти()

// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Материалы"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Материалы", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиМатериалы.Проект, 	мУказаниеПроектовВТабличнойЧастиДокументов И мВедениеУчетаЗатратПоПроектам И ОтражатьВУправленческомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиМатериалы.ВнутреннийЗаказ, мИспользоватьВнутренниеЗаказы);

	//Установка видимости, автоотметки незаполненного полей со счетами учета номенклатуры и затрат
	СтруктураТабличныхЧастей = Новый Структура();
	СтруктураТабличныхЧастей.Вставить("Материалы", 		мКолонкиМатериалы);
	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(Дата, Метаданные().Имя, Неопределено, СтруктураТабличныхЧастей, ПоказыватьВДокументахСчетаУчета, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	ЭлементыФормы.Материалы.Колонки.Склад .Видимость = мУказаниеСкладовВТЧ;
	ЭлементыФормы.Материалы.Колонки.ОтпущеноСверхЛимита.Видимость = РазрешитьПревышениеЛимита;
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата, ПоказыватьВДокументахСчетаУчета);
	
	Если мСложныйУчетНДС И ОтражатьВБухгалтерскомУчете И Не мПрименениеУСН Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.НДС.Видимость = Истина;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.НДС.Видимость = Ложь;
	КонецЕсли;
	
	ЭлементыФормы.ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат.Видимость = (НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость);
	
	ВидимостьСчетИАналитикаСписанияНДС = Не ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат
										 И (НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость);
										 
	ВидимостьСтатьяЗатратНДС = ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат
										 И (НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(мКолонкиМатериалы.СтатьяЗатратНДС, ВидимостьСтатьяЗатратНДС);
	
	ВидимостьСчетовСписанияБУ = (НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость
			И ОтражатьВБухгалтерскомУчете
			И ?(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ, Дата >= '20060101', мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.СписыватьНаРасходы)
			И Не ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат);
			
	ВидимостьСчетовСписанияНУ = (Дата >= '20060101'
			И НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость
			И ОтражатьВНалоговомУчете
			И Не мПрименениеУСН
			И Не ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат);
	
	ЭлементыФормы.РамкаГруппыСчетСписанияНДС.Видимость 	= ВидимостьСчетИАналитикаСписанияНДС;		
	ЭлементыФормы.ПанельСчетСписанияБУ.Видимость 		= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.ПанельСчетСписанияНУ.Видимость 		= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.СтатьяЗатратСписанияНДС.Видимость 	= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НадписьСтатьяЗатратСписанияНДС.Видимость = ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НоменклатурнаяГруппа.Видимость 		= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НадписьНоменклатурнаяГруппа.Видимость = ВидимостьСчетИАналитикаСписанияНДС;
	
	ЭлементыФормы.СтатьяЗатратСписанияНДС.Доступность 	= ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НадписьСтатьяЗатратСписанияНДС.Доступность = ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НоменклатурнаяГруппа.Доступность 		= ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НадписьНоменклатурнаяГруппа.Доступность = ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	
	Если ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ Тогда
		ЭлементыФормы.СтатьяЗатратСписанияНДС.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(СтатьяЗатратСписанияНДС);
	Иначе
		ЭлементыФормы.СтатьяЗатратСписанияНДС.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	Если ВидимостьСчетовСписанияБУ Тогда
		ЭлементыФормы.ПанельСчетСписанияБУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияБУ.Страницы.Счет;
	Иначе
		ЭлементыФормы.ПанельСчетСписанияБУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияБУ.Страницы.Надпись;
	КонецЕсли;
	
	Если ВидимостьСчетовСписанияНУ Тогда
		ЭлементыФормы.ПанельСчетСписанияНУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияНУ.Страницы.Счет;
	Иначе
		ЭлементыФормы.ПанельСчетСписанияНУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияНУ.Страницы.Надпись;
	КонецЕсли;
	
	ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетСписанияНДС, Неопределено);
	ХарактерЗатратНУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетСписанияНДСНУ, Неопределено, "Налоговый");
	
	Если ВидимостьСчетовСписанияБУ И ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДС, ЭлементыФормы.СубконтоСписанияНДС1, ЭлементыФормы.НадписьСубконтоСписанияНДС1,
							   			ЭлементыФормы.СубконтоСписанияНДС2, ЭлементыФормы.НадписьСубконтоСписанияНДС2,
						       			ЭлементыФормы.СубконтоСписанияНДС3, ЭлементыФормы.НадписьСубконтоСписанияНДС3);
	Иначе
		ЭлементыФормы.СубконтоСписанияНДС1.Видимость 		= Ложь;
		ЭлементыФормы.СубконтоСписанияНДС2.Видимость 		= Ложь;
		ЭлементыФормы.СубконтоСписанияНДС3.Видимость 		= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДС1.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДС2.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДС3.Видимость = Ложь;					   
							   
	КонецЕсли;

	Если ВидимостьСчетовСписанияНУ И ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДСНУ, ЭлементыФормы.СубконтоСписанияНДСНУ1, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ2, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ3, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3);
	Иначе
		ЭлементыФормы.СубконтоСписанияНДСНУ1.Видимость 			= Ложь;
		ЭлементыФормы.СубконтоСписанияНДСНУ2.Видимость 			= Ложь;
		ЭлементыФормы.СубконтоСписанияНДСНУ3.Видимость 			= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1.Видимость 	= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2.Видимость 	= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3.Видимость 	= Ложь;
	КонецЕсли;
	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
КонецПроцедуры // УстановитьВидимость()

// Процедура управляет доступностью колонок субконто в табличной части услуги
//
Процедура УстановитьДоступностьСубконто(СтрокаТЧ)

	Колонки = ЭлементыФормы.Материалы.Колонки;

	Если СтрокаТЧ = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ СтрокаТЧ.СтатьяЗатрат.ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭлементыФормы.Материалы.ТекущиеДанные.СчетЗатрат,
							 ЭлементыФормы.Материалы.ТекущиеДанные.Субконто1,
							 ЭлементыФормы.Материалы.Колонки.Субконто1,
							 ЭлементыФормы.Материалы.ТекущиеДанные.Субконто2,
							 ЭлементыФормы.Материалы.Колонки.Субконто2,
							 ЭлементыФормы.Материалы.ТекущиеДанные.Субконто3,
							 ЭлементыФормы.Материалы.Колонки.Субконто3);
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭлементыФормы.Материалы.ТекущиеДанные.СчетЗатратНУ,
							 ЭлементыФормы.Материалы.ТекущиеДанные.СубконтоНУ1,
							 ЭлементыФормы.Материалы.Колонки.СубконтоНУ1,
							 ЭлементыФормы.Материалы.ТекущиеДанные.СубконтоНУ2,
							 ЭлементыФормы.Материалы.Колонки.СубконтоНУ2,
							 ЭлементыФормы.Материалы.ТекущиеДанные.СубконтоНУ3,
							 ЭлементыФормы.Материалы.Колонки.СубконтоНУ3);

КонецПроцедуры // УстановитьДоступностьСубконто()

// Заполняет табличную часть по сериям при оперативном проведении
//
Процедура ЗаполнитьПоСериям()

	МатериалыТабличнойЧасти = Материалы.Выгрузить();
	МатериалыТабличнойЧасти.Свернуть("Номенклатура");
	СкладыТабличнойЧасти = Материалы.Выгрузить();
	СкладыТабличнойЧасти.Свернуть("Склад");

	МассивНоменклатуры   = МатериалыТабличнойЧасти.ВыгрузитьКолонку("Номенклатура");
	МассивСклады         = СкладыТабличнойЧасти.ВыгрузитьКолонку("Склад");
	
	ТаблицаРезервовПоСериям = новый ТаблицаЗначений;
	ТаблицаСерий         = УправлениеЗапасами.ПолучитьТаблицуОстатковПоСериям(МассивСклады, Организация, МассивНоменклатуры,,,ТаблицаРезервовПоСериям);
	МатериалыТабличнойЧасти = Материалы.Выгрузить();
	Материалы.Очистить();

	КолонкиТабЧасти = МатериалыТабличнойЧасти.Колонки;
    ИспользоватьУказаниеСерийНоменклатурыПриРезервировании = глЗначениеПеременной("ИспользоватьУказаниеСерийНоменклатурыПриРезервировании");

	Для Каждого ИсходнаяСтрока ИЗ МатериалыТабличнойЧасти Цикл

		СтуктураПоиска = Новый Структура;
		СтуктураПоиска.Вставить("Номенклатура",               ИсходнаяСтрока.Номенклатура);
		СтуктураПоиска.Вставить("ХарактеристикаНоменклатуры", ИсходнаяСтрока.ХарактеристикаНоменклатуры);
		СтуктураПоиска.Вставить("Качество",                   ИсходнаяСтрока.Качество);
		СтуктураПоиска.Вставить("Склад",                      ИсходнаяСтрока.Склад);

		флЗаполнятьИзРезервов = ложь;
		Если ТипЗнч(ИсходнаяСтрока.ЗаказРезерв)=Тип("ДокументСсылка.ЗаказПокупателя") И ИспользоватьУказаниеСерийНоменклатурыПриРезервировании Тогда
			Если ИсходнаяСтрока.ЗаказРезерв.ДоговорКонтрагента.ОбособленныйУчетТоваровПоЗаказамПокупателей Тогда
				СтуктураПоиска.Вставить("ДокументРезерва",    ИсходнаяСтрока.ЗаказРезерв);
				флЗаполнятьИзРезервов = истина;
			КонецЕсли;
		КонецЕсли;
		Если флЗаполнятьИзРезервов Тогда
			НайденныеСтроки  = ТаблицаРезервовПоСериям.НайтиСтроки(СтуктураПоиска);
		Иначе
			НайденныеСтроки  = ТаблицаСерий.НайтиСтроки(СтуктураПоиска);
		КонецЕсли;

		КоличествоОсталосьПогасить = ИсходнаяСтрока.Количество;
        СтрокаСПустойСерией = Неопределено;

		Для Каждого Строка Из НайденныеСтроки Цикл

			Если КоличествоОсталосьПогасить <=0 Тогда
				Прервать;
			КонецЕсли;
            Если НЕ ЗначениеЗаполнено(Строка.СерияНоменклатуры) Тогда
				Продолжить;
			КонецЕсли;

			ОстатокВЕдиницахДокумента = Строка.Остаток * ИсходнаяСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ИсходнаяСтрока.ЕдиницаИзмерения.Коэффициент;

			Если ОстатокВЕдиницахДокумента >= КоличествоОсталосьПогасить Тогда
				КоэффСписания = КоличествоОсталосьПогасить / ОстатокВЕдиницахДокумента;
			Иначе
				КоэффСписания = 1
			КонецЕсли;

			СписанноеКоличество = Окр(ОстатокВЕдиницахДокумента * КоэффСписания, 3, РежимОкругления.Окр15как20);
			Если СписанноеКоличество = 0 Тогда 
				Продолжить; 
			КонецЕсли;

			НоваяСтрока = Материалы.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);
			
			НоваяСтрока.СерияНоменклатуры = Строка.СерияНоменклатуры;
			НоваяСтрока.Количество        = СписанноеКоличество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СерияНоменклатуры) Тогда
				СтрокаСПустойСерией = НоваяСтрока;
			КонецЕсли;

			КоличествоОсталосьПогасить = КоличествоОсталосьПогасить-СписанноеКоличество;
			Строка.Остаток             = Строка.Остаток - СписанноеКоличество;

		КонецЦикла;

		Если КоличествоОсталосьПогасить > 0 Тогда

			Если СтрокаСПустойСерией = Неопределено Тогда

				НоваяСтрока = Материалы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ИсходнаяСтрока);

				НоваяСтрока.Количество = КоличествоОсталосьПогасить;
				ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(НоваяСтрока, ЭтотОбъект);

			Иначе

				СтрокаСПустойСерией.Количество = СтрокаСПустойСерией.Количество+КоличествоОсталосьПогасить;

			КонецЕсли;
		КонецЕсли;

	КонецЦикла;

КонецПроцедуры //ЗаполнитьПоСериям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Если УправлениеЗаказами.ИспользоватьВнутренниеЗаказы(Истина) Тогда
			Если Не ПараметрОснование.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение Тогда
				ОбщегоНазначения.Сообщение("Требование - накладную можно вводить только на основании заказа от подразделения", СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		
		Если НЕ ЗначениеЗаполнено(НДСвСтоимостиТоваров) Тогда
			НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Проект) Тогда
			Проект = Подразделение.ОсновнойПроект;
		КонецЕсли;
		

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	СтруктураКолонок.Вставить("СтатьяЗатрат");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Материалы.Колонки, СтруктураКолонок);
	
	РаботаСДиалогами.УстановитьВидимостьОбязательностьСклада(ЭлементыФормы.Материалы.Колонки, , ЭлементыФормы.Склад, "Склад", мУказаниеСкладовВТЧ);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
    мВедениеУчетаЗатратПоПроектам = УправлениеПроектами.ВедениеУчетаЗатратПоПроектам();

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиМатериалы);

	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	// Определеим параметры сложного учета НДС.
	ОпределитьСложныйУчетНДС();
	
	// Сохраним текущее значение склада
	мСтароеЗначениеСклада = Склад;

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	РаботаСДиалогами.УстановитьВидимостьКолонкиПроект(мКолонкиМатериалы, , мУказаниеПроектовВТабличнойЧастиДокументов И мВедениеУчетаЗатратПоПроектам);
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект", Истина);
	
	мИспользоватьВнутренниеЗаказы = УправлениеЗаказами.ИспользоватьВнутренниеЗаказы();
	
	// Установить видимость и доступность элементов формы.
	УстановитьВидимость();
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Доступность элементов формы для указания сверхлимитного отпуска материалов.
	ИспользоватьЛимитыОтпускаМатериалов = УправлениеПроизводством.ИспользоватьЛимитыОтпускаМатериалов();
	Если ИспользоватьЛимитыОтпускаМатериалов Тогда
		РедактированиеРазрешенияПревышенияЛимита = УправлениеДопПравамиПользователей.РазрешеноРедактированиеРазрешенияПревышенияЛимитаОтпускаМатериалов();
		ЭлементыФормы.РазрешитьПревышениеЛимита.Доступность = РедактированиеРазрешенияПревышенияЛимита;
		ЭлементыФормы.Материалы.Колонки.ОтпущеноСверхЛимита.Доступность = РедактированиеРазрешенияПревышенияЛимита;
	Иначе
		ЭлементыФормы.РазрешитьПревышениеЛимита.Видимость = Ложь;
		
		СтруктураКолонок = Новый Структура("ОтпущеноСверхЛимита");
		РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиМатериалы, СтруктураКолонок, Ложь);
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ПредопределенноеЗначение("Перечисление.КлючевыеОперации.ПроведениеДокументаТребованиеНакладная"));
	// Конец ОценкаПроизводительности
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда, Спецификация;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		ЗначениеВыбора.Свойство("Спецификация", Спецификация);

		Если Спецификация <> Неопределено Тогда
			ОбработкаПодбораПоСпецификации(Материалы, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			ОбработкаПодбора(Материалы, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                Неопределено);

	ОбработкаПодбора(Материалы, СтруктураПодбора);

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Результат        = Истина;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, мУказаниеСкладовВТЧ,
	                                                Неопределено);

	ОбработкаПодбора(Материалы, СтруктураПодбора);

	Возврат Результат;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыПодбор(Кнопка)
	
	ДействиеПодбор(Материалы);
	
КонецПроцедуры // КоманднаяПанельМатериалыПодбор()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Заполнить по внутреннему заказу" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоВнутреннемуЗаказу(Кнопка)
	
	Если Материалы.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	ФормаВыбора = Документы.ВнутреннийЗаказ.ПолучитьФормуВыбора(, ЭтаФорма, ЭтотОбъект);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Отбор = ФормаВыбора.Отбор.ВидЗаказа;
	Отбор.ВидСравнения  = ВидСравнения.Равно;
	Отбор.Значение      = Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение;
	Отбор.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидЗаказа.Доступность = Ложь;
	
	Если ОтражатьВУправленческомУчете И ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Заказчик;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Заказчик.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ВнутрЗаказ = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ВнутрЗаказ) Тогда
		Возврат;
	КонецЕсли;
	
	Материалы.Очистить();
	
	РезультатЗапроса = ОстаткиТоваровПоВнутреннемуЗаказу_СУчетомРезервов( ВнутрЗаказ, ?(ЭтоНовый(), КонецДня(Дата), Дата));
	ЗаполнитьМатериалыПоВнутреннемуЗаказу(РезультатЗапроса);
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоВнутреннемуЗаказу()

// Процедура вызывается при нажатии кнопки "Заполнить по заказу покупателя (переработка)" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоЗаказуПокупателяПереработка(Кнопка)
	
	Если Материалы.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	ФормаВыбора = Документы.ЗаказПокупателя.ПолучитьФормуВыбора(, ЭтаФорма, ЭтотОбъект);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Отбор = ФормаВыбора.Отбор.ВидОперации;
	Отбор.ВидСравнения  = ВидСравнения.Равно;
	Отбор.Значение      = Перечисления.ВидыОперацийЗаказПокупателя.Переработка;
	Отбор.Использование = Истина;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;
	
	ФормаВыбора.РежимВыбора = Истина;
	ЗаказПокупателя = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ЗаказПокупателя) Тогда
		Возврат;
	КонецЕсли;
	ЗаказыНаПроизводствоИПереработку.ЗаполнитьТребованиеНакладнаяПоЗаказуПокупателяПереработка(ЭтотОбъект, ЗаказПокупателя);
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоЗаказуПокупателяПереработка()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельМатериалыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызывается при нажатии кнопки "Добавить по поступлению" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельТоварыДействиеДобавитьПоПоступлению(Кнопка)

	ФормаВыбора = Документы.ПоступлениеТоваровУслуг.ПолучитьФормуВыбора(, ЭтаФорма, ЭтотОбъект);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	СписокВидовОпераций = Новый СписокЗначений;
	СписокВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ВПереработку);
	СписокВидовОпераций.Добавить(Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия);
	
	Отбор = ФормаВыбора.Отбор.ВидОперации;
	Отбор.ВидСравнения  = ВидСравнения.ВСписке;
	Отбор.Использование = Истина;
	Отбор.Значение      = СписокВидовОпераций;
	ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидОперации.Доступность = Ложь;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокПоступления = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокПоступления) Тогда
		Возврат;
	КонецЕсли;
	
	УказаниеСкладовВТЧ = глЗначениеПеременной("УказаниеСкладовВТабличнойЧастиДокументов");
	Если УказаниеСкладовВТЧ = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступления
	   ИЛИ УказаниеСкладовВТЧ = Перечисления.ВариантыУказанияСкладовВТабличнойЧастиДокументов.ДляДокументовПоступленияРеализации Тогда
	   
		СтруктТабЧастей = Новый Структура;
		СтруктТабЧастей.Вставить("Товары",         "Склад");
			
		СтруктПараметры = Новый Структура;
		СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
		СтруктПараметры.Вставить("ИмяСкладаВШапке", "СкладОрдер");
		Если мУказаниеСкладовВТЧ Тогда
			СтруктПараметры.Вставить("ВсеСклады", Истина);
		Иначе
			СтруктПараметры.Вставить("ВсеСклады", Ложь);
		КонецЕсли;
			
		ВыбСклад = РаботаСДиалогами.ВыбратьСкладИзДокументаОснования(ДокПоступления, СтруктПараметры);
	Иначе
		ВыбСклад = "ВсеСклады";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|Номенклатура 				КАК Номенклатура,
	|ХарактеристикаНоменклатуры КАК ХарактеристикаНоменклатуры,
	|СерияНоменклатуры 			КАК СерияНоменклатуры,
	|Заказ 						КАК ЗаказРезерв,
	|ЕдиницаИзмерения 			КАК ЕдиницаИзмерения,
	|Сумма(Количество)			КАК Количество,
	|Сумма(КоличествоМест)		КАК КоличествоМест,
	|ЕдиницаИзмеренияМест 		КАК ЕдиницаИзмеренияМест,
	|Коэффициент 				КАК Коэффициент,
	|Склад 						КАК Склад
	|ИЗ Документ.ПоступлениеТоваровУслуг.Товары
	|ГДЕ Ссылка = &Ссылка "
	+?(ВыбСклад <> "ВсеСклады","И Склад = &ВыбСклад","")+"
	|СГРУППИРОВАТЬ ПО Номенклатура,
	|ХарактеристикаНоменклатуры,
	|СерияНоменклатуры,
	|Заказ,
	|ЕдиницаИзмерения,
    |ЕдиницаИзмеренияМест,
	|Коэффициент,
	|Склад";

	Запрос.УстановитьПараметр("Ссылка", ДокПоступления);
	Запрос.УстановитьПараметр("ВыбСклад", ВыбСклад);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() цикл
		СтрокаТЧ = Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаТЧ, Выборка);
		СтрокаТЧ.Качество    = Справочники.Качество.Новый;
        УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля( СтрокаТЧ, Истина, Истина);
		ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( СтрокаТЧ, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		УстановитьДоступностьСубконто( СтрокаТЧ);
	КонецЦикла;

КонецПроцедуры // КоманднаяПанельТоварыДействиеДобавитьПоПоступлению()

// Процедура вызывается при нажатии кнопки "Заполнить по заданию на производство" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоЗаданиюНаПроизводство(Кнопка)
	
	Если Материалы.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	ФормаВыбора = Документы.ЗаданиеНаПроизводство.ПолучитьФормуВыбора(, ЭтаФорма, ЭтотОбъект);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Подразделение;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Подразделение.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокЗадание = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокЗадание) Тогда
		Возврат;
	КонецЕсли;
	
	Материалы.Очистить();
	
	ОбработкаЗаполненияПоЗаданиюНаПроизводство(ДокЗадание);
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоЗаданиюНаПроизводство()

// Процедура вызывается при нажатии кнопки "Заполнить по потребностям" командной панели 
// табличного поля "Распределение материалов".
//
Процедура КоманднаяПанельРаспределениеМатериаловЗаполнитьПоПотребностям(Кнопка)

	Если Склад.Пустая() Тогда
		Предупреждение("Не выбран склад!");
		Возврат;
	КонецЕсли; 
	
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос("Перед заполнением табличная часть будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		Материалы.Очистить();
	КонецЕсли;
	
	ФормаВыбора = Документы.ЗаказНаПроизводство.ПолучитьФормуВыбора(, ЭтаФорма, ЭтотОбъект);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Подразделение;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Подразделение.Доступность = Ложь;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ПроизЗаказ = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ПроизЗаказ) Тогда
		Возврат;
	КонецЕсли;
	ЗаказыНаПроизводствоИПереработку.ЗаполнитьТребованиеНакладнаяПотребностямиЗаказаНаПроизводство(ЭтотОбъект, ПроизЗаказ);
	
КонецПроцедуры // КоманднаяПанельРаспределениеМатериаловЗаполнитьПоПотребностям()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Материалы", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельМатериалыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧасти      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧасти = ИзменениеТабличнойЧасти.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменные формы.
	ФормаИзменениеТабличнойЧасти.ДокументОбъект             = ЭтотОбъект;
	ФормаИзменениеТабличнойЧасти.мФормаДокумента            = ЭтаФорма;
	ФормаИзменениеТабличнойЧасти.мЕстьНДС                   = Ложь; 
	ФормаИзменениеТабличнойЧасти.мЕстьЦенаВРознице          = Ложь;
	ФормаИзменениеТабличнойЧасти.мСпособЗаполненияЦен       = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
	ФормаИзменениеТабличнойЧасти.мИмяТабличнойЧастиДокумента = "Материалы";

	//Перенесем табличную часть
	ИзменениеТабличнойЧасти.Товары.Загрузить(Материалы.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧасти.Открыть();

КонецПроцедуры // КоманднаяПанельМатериалыДействиеИзменить()

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	// Очистим записи документа, по остаткам товаров, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборТоварыНаСкладах = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборТоварыНаСкладах.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыНаСкладах.Записать();

		НаборТоварыНаСкладах = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборТоварыНаСкладах.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыНаСкладах.Записать();

		НаборТоварыОрганизаций = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборТоварыОрганизаций.Отбор.Регистратор.Установить(Ссылка);
		НаборТоварыОрганизаций.Записать();
	КонецЕсли;
	
	// Заполнение складов в табличной части Материалы
	Для Каждого СтрокаТЧ Из Материалы Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаТЧ.Склад) Тогда
			СтрокаТЧ.Склад = Склад;
		КонецЕсли;
	КонецЦикла;
	
	// Заполнение документа
	ЗаполнитьПоСериям();

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
	// Определеим параметры сложного учета НДС
	ОпределитьСложныйУчетНДС();
	
    УстановитьДоступностьКнопкиЗаполнитьИПровести();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Материалы"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в упр. учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Материалы"), Неопределено, ОтражатьВНалоговомУчете);

	УстановитьВидимость();

КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	ОпределитьСложныйУчетНДС();
    УстановитьВидимость();
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
	
												  
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Материалы"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
												  
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПодразделениеОрганизацииПриИзменении(Элемент);
	КонецЕсли;
												  
	Проект = Подразделение.ОсновнойПроект;

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Подразделения организации.
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Склад.
//
Процедура СкладПриИзменении(Элемент)
	
	ИзменитьСкладВТабличнойЧасти();
	
КонецПроцедуры // СкладПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСтароеЗначениеСклада = Склад;

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" флажка "РазрешитьПревышениеЛимита".
//
Процедура РазрешитьПревышениеЛимитаПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // РазрешитьПревышениеЛимитаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Проект.
//
Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ПроектНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода НДСвСтоимостиТоваров.
//
Процедура НДСвСтоимостиТоваровПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // НДСвСтоимостиТоваровПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатрат".
//
Процедура ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатратПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // ДляСписанияНДСиспользоватьСчетИАналитикуУчетаЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатратСписанияНДС.
//
Процедура СтатьяЗатратСписанияНДСПриИзменении(Элемент)
	
	СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, СтатьяЗатратСписанияНДС);
	СчетСписанияНДС = СчетаУчетаЗатрат.СчетУчетаБУ;
	СчетСписанияНДСНУ = СчетаУчетаЗатрат.СчетУчетаНУ;
	Если СтатьяЗатратСписанияНДС.ВидЗатрат = Перечисления.ВидыЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДС, ЭлементыФормы.СубконтоСписанияНДС1, ЭлементыФормы.НадписьСубконтоСписанияНДС1,
							   			ЭлементыФормы.СубконтоСписанияНДС2, ЭлементыФормы.НадписьСубконтоСписанияНДС2,
						       			ЭлементыФормы.СубконтоСписанияНДС3, ЭлементыФормы.НадписьСубконтоСписанияНДС3);
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДСНУ, ЭлементыФормы.СубконтоСписанияНДСНУ1, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ2, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ3, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3);
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры // СтатьяЗатратСписанияНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетСписанияНДС
//
Процедура СчетСписанияНДСПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке();
	
	УстановитьВидимость();
	
КонецПроцедуры // СчетСписанияНДСПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетСписанияНДС
//
Процедура СчетСписанияНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетСписанияНДСОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода СубконтоСписанияНДС1
//
Процедура СубконтоСписанияНДС1НачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры // СубконтоСписанияНДС1НачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоСписанияНДС1
//
Процедура СубконтоСписанияНДС1ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке(Истина);
	Если ЗначениеЗаполнено(СчетСписанияНДСНУ) Тогда
		Если ТипЗнч(СубконтоСписанияНДСНУ1) = ТипЗнч(СубконтоСписанияНДС1) Тогда
			СубконтоСписанияНДСНУ1 = СубконтоСписанияНДС1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоСписанияНДС1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоСписанияНДС2
//
Процедура СубконтоСписанияНДС2ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке(Истина);
	Если ЗначениеЗаполнено(СчетСписанияНДСНУ) Тогда
		Если ТипЗнч(СубконтоСписанияНДСНУ2) = ТипЗнч(СубконтоСписанияНДС2) Тогда
			СубконтоСписанияНДСНУ2 = СубконтоСписанияНДС2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоСписанияНДС2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоСписанияНДС3
//
Процедура СубконтоСписанияНДС3ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке(Истина);
	Если ЗначениеЗаполнено(СчетСписанияНДСНУ) Тогда
		Если ТипЗнч(СубконтоСписанияНДСНУ3) = ТипЗнч(СубконтоСписанияНДС3) Тогда
			СубконтоСписанияНДСНУ3 = СубконтоСписанияНДС3;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоСписанияНДС3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетСписанияНДСНУ.
//
Процедура СчетСписанияНДСНУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СчетСписанияНДСНУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетСписанияНДСНУ
//
Процедура СчетСписанияНДСНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СчетСписанияНДСНУОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Материалы

// Процедура - обработчик события "ПриАктивизацииСтроки" табличной части "Материалы".
//
Процедура МатериалыПриАктивизацииСтроки(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	УстановитьДоступностьСубконто(СтрокаТабличнойЧасти);
	
КонецПроцедуры // МатериалыПриАктивизацииСтроки()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Материалы". Формирует данные в колонке "ХарактерЗатрат" и "ЕдиницаХранения".
//
Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	Если ЭлементыФормы.Материалы.Колонки.ХарактерЗатрат.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.Текст = ХарактерЗатрат;
	КонецЕсли;
	
	УправлениеПроектами.УстановитьДоступностьПроектаВСтрокеТабЧасти(ХарактерЗатрат, ОформлениеСтроки, ЭлементыФормы.Материалы);
	
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, ДанныеСтроки.Продукция, ДанныеСтроки.СчетЗатрат, ДанныеСтроки.СчетЗатратНУ, ОформлениеСтроки, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП);
	
	Если ЗначениеЗаполнено(ДанныеСтроки.СерияНоменклатуры) Тогда
		Если ЭлементыФормы.Материалы.Колонки.НомерГТД.Видимость Тогда
			ОформлениеСтроки.Ячейки.НомерГТД.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.НомерГТД.Текст = ДанныеСтроки.СерияНоменклатуры.НомерГТД;
		КонецЕсли;
		Если ЭлементыФормы.Материалы.Колонки.СтранаПроисхождения.Видимость Тогда
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.ОтображатьТекст = Истина;
			ОформлениеСтроки.Ячейки.СтранаПроисхождения.Текст = ДанныеСтроки.СерияНоменклатуры.СтранаПроисхождения;
		КонецЕсли;
	КонецЕсли;
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.ПроизводственныеРасходы
	   И ДанныеСтроки.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
		ОформлениеСтроки.Ячейки.СчетНУ.ОтметкаНезаполненного 		= Ложь;
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.ОтметкаНезаполненного 	= Ложь;
		ОформлениеСтроки.Ячейки.СчетНУ.Видимость 					= Ложь;
		ОформлениеСтроки.Ячейки.СчетНУ.ТолькоПросмотр 				= Истина;
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.Видимость 				= Ложь;
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.ТолькоПросмотр 		= Истина;
	Иначе
		ОформлениеСтроки.Ячейки.СчетНУ.Видимость 					= Истина;
		ОформлениеСтроки.Ячейки.СчетНУ.ТолькоПросмотр 				= Ложь;
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.Видимость 				= Истина;
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.ТолькоПросмотр 		= Ложь;
	КонецЕсли;
	
	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
КонецПроцедуры // МатериалыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатуры(СтрокаТабличнойЧасти);

	УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;
    СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	
КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыСерияНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики
// в строке табличной части "Материалы".
//
Процедура МатериалыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

КонецПроцедуры // МатериалыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоМестПриИзменении(Элемент)
	
	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // МатериалыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаМестПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // МатериалыЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ДокументОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "Материалы".
//
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока и Не Копирование Тогда
		Если Не мТекСтрока = Неопределено Тогда
			Элемент.ТекущаяСтрока.СтатьяЗатрат = мТекСтрока.СтатьяЗатрат;
			МатериалыСтатьяЗатратПриИзменении(Элемент);
			Элемент.ТекущаяСтрока.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
		КонецЕсли;
		Элемент.ТекущиеДанные.Склад = Склад;
	КонецЕсли;
	
КонецПроцедуры // МатериалыПриНачалеРедактирования()

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Материалы".
//
Процедура МатериалыПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	мТекСтрока = Элемент.ТекущаяСтрока;
	
КонецПроцедуры // МатериалыПередНачаломДобавления()

// Процедура - обработчик события "ПриИзменении" поля СтатьяЗатрат табличной части "Материалы".
//
Процедура МатериалыСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	СтрокаТабличнойЧасти.СтатьяЗатратНДС = СтрокаТабличнойЧасти.СтатьяЗатрат;
	
	УстановитьДоступностьСубконто(СтрокаТабличнойЧасти);
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатрат,
		СтрокаТабличнойЧасти.Субконто1, мКолонкиМатериалы.Субконто1,
		СтрокаТабличнойЧасти.Субконто2, мКолонкиМатериалы.Субконто2,
		СтрокаТабличнойЧасти.Субконто3, мКолонкиМатериалы.Субконто3);
		
		ЗаполнитьСчетНалоговогоУчета();
		
	Если мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.УстановитьПроектПоУмолчанию(Подразделение, СтрокаТабличнойЧасти.СтатьяЗатрат, СтрокаТабличнойЧасти.Проект);
	КонецЕсли;
	
КонецПроцедуры // МатериалыСтатьяЗатратПриИзменении()
	
// Процедура - обработчик события "ПриИзменении" поля Счет затрат табличной части "Материалы".
//
Процедура МатериалыСчетЗатратПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Материалы.ТекущиеДанные;
	ТабКол        = ЭлементыФормы.Материалы.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле( Элемент.Значение,
		ТекущиеДанные.Субконто1, ТабКол.Субконто1,
		ТекущиеДанные.Субконто2, ТабКол.Субконто2,
		ТекущиеДанные.Субконто3, ТабКол.Субконто3);
	
	ЗаполнитьСчетНалоговогоУчета();
	
КонецПроцедуры // МатериалыСчетЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Материалы".
//
Процедура МатериалыСубконто1ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчета(Истина);
	СтрокаТЧ = ЭлементыФормы.Материалы.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 1, СтрокаТЧ.Субконто1, СтрокаТЧ.СубконтоНУ1);

КонецПроцедуры // МатериалыСубконто1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Материалы".
//
Процедура МатериалыСубконто2ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчета(Истина);
	СтрокаТЧ = ЭлементыФормы.Материалы.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 2, СтрокаТЧ.Субконто2, СтрокаТЧ.СубконтоНУ2);

КонецПроцедуры // МатериалыСубконто2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Материалы".
//
Процедура МатериалыСубконто3ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчета(Истина);
	СтрокаТЧ = ЭлементыФормы.Материалы.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 3, СтрокаТЧ.Субконто3, СтрокаТЧ.СубконтоНУ3);

КонецПроцедуры // МатериалыСубконто3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Счет затрат (НУ) табличной части "Материалы".
//
Процедура МатериалыСчетЗатратНУПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Материалы.ТекущиеДанные;
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             ЭлементыФормы.Материалы.ТекущиеДанные.СубконтоНУ1,
	                             ЭлементыФормы.Материалы.Колонки.СубконтоНУ1,
	                             ЭлементыФормы.Материалы.ТекущиеДанные.СубконтоНУ2,
	                             ЭлементыФормы.Материалы.Колонки.СубконтоНУ2,
	                             ЭлементыФормы.Материалы.ТекущиеДанные.СубконтоНУ3,
	                             ЭлементыФормы.Материалы.Колонки.СубконтоНУ3);
								 
КонецПроцедуры // МатериалыСчетЗатратНУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Счет табличной части "Материалы".
//
Процедура МатериалыСчетПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	СтрокаТабличнойЧасти.СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаТабличнойЧасти.Счет));
	ЗаполнитьСчетНалоговогоУчета();
КонецПроцедуры // МатериалыСчетПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет учета
//
Процедура МатериалыСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // МатериалыСчетОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат
//
Процедура МатериалыСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // МатериалыСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода заказ
//
Процедура МатериалыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	МассивДоступныеПоляОтбора = Новый Массив;
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
		МассивДоступныеПоляОтбора.Добавить("Организация");
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
		СтруктураОтбора.Вставить("ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.Переработка);
	КонецЕсли;
	
	МассивИсключаемыхТипов = Новый Массив;
	МассивИсключаемыхТипов.Добавить(Тип("ДокументСсылка.ВнутреннийЗаказ"));
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ИсключаемыеТипы", МассивИсключаемыхТипов);
	ДопПараметры.Вставить("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Материалы", ДопПараметры);

КонецПроцедуры // МатериалыЗаказНачалоВыбора()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Проект"
//
Процедура МатериалыПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // МатериалыПроектНачалоВыбора()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура МатериалыЗаказРезервНачалоВыбора(Элемент, СтандартнаяОбработка)

	МассивДоступныеПоляОтбора = Новый Массив;
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
		МассивДоступныеПоляОтбора.Добавить("Организация");
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);	
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Материалы", ДопПараметры);
		
КонецПроцедуры // МатериалыЗаказРезервНачалоВыбора()

Процедура МатериалыВнутреннийЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	МассивДоступныеПоляОтбора = Новый Массив;
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
		МассивДоступныеПоляОтбора.Добавить("Организация");
	КонецЕсли;
	
	СтруктураОтбора.Вставить("ВидЗаказа", Перечисления.ВидыВнутреннегоЗаказа.ВПодразделение);
	Если ЗначениеЗаполнено(Подразделение) Тогда
		СтруктураОтбора.Вставить("Заказчик", Подразделение);
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);	
		
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Материалы", ДопПараметры);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура МатериалыСкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Элемент.Значение, ВидСравнения.НеРавно, СтандартнаяОбработка);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиМатериалы = ЭлементыФормы.Материалы.Колонки;
мИспользоватьТолькоСборочныеСпецификации = глЗначениеПеременной("ИспользоватьТолькоСборочныеСпецификации");
мУказаниеПроектовВТабличнойЧастиДокументов = УправлениеПроектами.УказаниеПроектовВТабличнойЧастиДокументов();