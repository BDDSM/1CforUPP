Перем мОрганизация;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

///////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ
//

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


// Пересчитывает сумму операции при изменении сумм в проводках.
//
Процедура ПересчитатьСуммуОперации()

	СуммаОперации = 0;

	Для каждого Проводка Из ЭлементыФормы.ТабличноеПолеДвиженияБУ.Значение Цикл
		СуммаОперации = СуммаОперации + Проводка.Сумма;
	КонецЦикла;

КонецПроцедуры // ПересчитатьСуммуОперации()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
//

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");

	КонецЕсли;

	Если (ЗначениеЗаполнено(ПараметрТекущаяСтрока)) И (ЗначениеЗаполнено(ПараметрРегистр)) Тогда

		Если ПараметрРегистр = "Хозрасчетный" Тогда
			ЭлементыФормы.Движения.ТекущаяСтраница              = ЭлементыФормы.Движения.Страницы.ПроводкиБУ;
			ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущаяСтрока = Движения[ПараметрРегистр][ПараметрТекущаяСтрока - 1];
		Иначе
			ЭлементыФормы.Движения.ТекущаяСтраница              = ЭлементыФормы.Движения.Страницы.ПроводкиНУ;
			ЭлементыФормы.ТабличноеПолеДвиженияНУ.ТекущаяСтрока = Движения[ПараметрРегистр][ПараметрТекущаяСтрока - 1];
		КонецЕсли;

	КонецЕсли;

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	мОрганизация = Организация;
	мТекущаяДатаДокумента = Дата;

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НЕ ЗначениеЗаполнено(Организация) Тогда

		Предупреждение("Не указана организация. Операция не записана.");

		ТекущийЭлемент = ЭлементыФормы.Организация;
		Отказ = Истина;

		Возврат;

	КонецЕсли;

	Для Каждого Проводка Из Движения.Хозрасчетный Цикл

		Проводка.Период      = Дата;
		Проводка.Организация = Организация;

	КонецЦикла;

	Для Каждого Проводка Из Движения.Налоговый Цикл

		Если (НЕ ЗначениеЗаполнено(Проводка.ВидУчетаДт)) И
			(ЗначениеЗаполнено(Проводка.СчетДт)) Тогда
			Предупреждение("В проводке налогового учета не указан вид учета. Операция не записана.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Если (НЕ ЗначениеЗаполнено(Проводка.ВидУчетаКт)) И
			(ЗначениеЗаполнено(Проводка.СчетКт)) Тогда
			Предупреждение("В проводке налогового учета не указан вид учета. Операция не записана.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		Проводка.Период      = Дата;
		Проводка.Организация = Организация;

	КонецЦикла;

КонецПроцедуры // ПередЗаписью()

Процедура ПриЗаписи(Отказ)

	Если НЕ УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "КонтрольКорреспонденцииСчетов") Тогда
		Возврат;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ПустаяСсылка",         ПланыСчетов.Хозрасчетный.ПустаяСсылка()); 
	Запрос.УстановитьПараметр("СсылкаНаЭтотДокумент", Ссылка); 
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	|	Хозрасчетный.СчетДт.Код КАК КодДт,
	|	Хозрасчетный.СчетКт.Код КАК КодКт,
	|	Хозрасчетный.Содержание КАК Комментарий,
	|	СУММА(1) КАК ВесПроводки
	|ИЗ
	|	РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			Хозрасчетный.СчетДт КАК СчетДт,
	|			Хозрасчетный.СчетКт КАК СчетКт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|				ПО Хозрасчетный.СчетДт = КорректныеКорреспонденцииСчетов.СчетДт И Хозрасчетный.СчетКт = КорректныеКорреспонденцииСчетов.СчетКт
	|		ГДЕ
	|			Хозрасчетный.Регистратор = &СсылкаНаЭтотДокумент
	|
	|		ОБЪЕДИНИТЬ
	|
	|		ВЫБРАТЬ
	|			Хозрасчетный.СчетДт,
	|			Хозрасчетный.СчетКт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|				ПО Хозрасчетный.СчетДт = КорректныеКорреспонденцииСчетов.СчетДт И (КорректныеКорреспонденцииСчетов.СчетКт = &ПустаяСсылка)
	|		ГДЕ
	|			Хозрасчетный.Регистратор = &СсылкаНаЭтотДокумент
	|
	|		ОБЪЕДИНИТЬ
	|
	|		ВЫБРАТЬ
	|			Хозрасчетный.СчетДт,
	|			Хозрасчетный.СчетКт
	|		ИЗ
	|			РегистрБухгалтерии.Хозрасчетный КАК Хозрасчетный
	|				ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КорректныеКорреспонденцииСчетов КАК КорректныеКорреспонденцииСчетов
	|				ПО (КорректныеКорреспонденцииСчетов.СчетДт = &ПустаяСсылка) И Хозрасчетный.СчетКт = КорректныеКорреспонденцииСчетов.СчетКт
	|		ГДЕ 
	|			Хозрасчетный.Регистратор = &СсылкаНаЭтотДокумент) КАК Проверенные
	|		ПО Проверенные.СчетКт = Хозрасчетный.СчетКт И Проверенные.СчетДт = Хозрасчетный.СчетДт
	|ГДЕ
	|	((Проверенные.СчетКт) ЕСТЬ NULL ) И
	|	Хозрасчетный.Регистратор = &СсылкаНаЭтотДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	Хозрасчетный.СчетДт,
	|	Хозрасчетный.СчетКт,
	|	Хозрасчетный.Содержание
	|
	|УПОРЯДОЧИТЬ ПО
	|	КодДт,
	|	КодКт";
	Результат = Запрос.Выполнить();

	Если НЕ Результат.Пустой() Тогда

		Отказ = Истина;
		Сообщить("Обнаружены некорректные корреспонденции.");

		ФормаСпискаКорреспонденций = РегистрыСведений.КорректныеКорреспонденцииСчетов.ПолучитьФорму("ФормаСпискаКорреспонденций");
		ФормаСпискаКорреспонденций.ТаблицаКорреспонденций = Результат.Выгрузить();
		ФормаСпискаКорреспонденций.Открыть();

	КонецЕсли;

КонецПроцедуры // ПриЗаписи()

///////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ФОРМЫ
//

// Процедура - обработчик события "ПриИзменении" поля Организация
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

	Если мОрганизация <> Организация Тогда

		Ответ = Вопрос("При смене организации значения расчетных счетов и подразделений в проводках будут очищены.
		               |Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Таймаут ИЛИ 
			 Ответ = КодВозвратаДиалога.Нет Тогда
			Организация = мОрганизация;
			Возврат;

		КонецЕсли;

		мОрганизация = Организация;

		ТипБС = Тип("СправочникСсылка.БанковскиеСчета");
		ТипПО = Тип("СправочникСсылка.ПодразделенияОрганизаций");

		Для каждого Проводка Из ЭлементыФормы.ТабличноеПолеДвиженияБУ.Значение Цикл

			Если ЗначениеЗаполнено(Проводка.СубконтоДт.БанковскиеСчета) Тогда
				Проводка.СубконтоДт.БанковскиеСчета = Новый(ТипБС);
			КонецЕсли;

			Если ЗначениеЗаполнено(Проводка.СубконтоДт.Подразделения) Тогда
				Проводка.СубконтоДт.Подразделения = Новый(ТипПО);
			КонецЕсли;

			Если ЗначениеЗаполнено(Проводка.СубконтоКт.БанковскиеСчета) Тогда
				Проводка.СубконтоКт.БанковскиеСчета = Новый(ТипБС);
			КонецЕсли;

			Если ЗначениеЗаполнено(Проводка.СубконтоКт.Подразделения) Тогда
				Проводка.СубконтоКт.Подразделения = Новый(ТипПО);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Пересчет валютной суммы в основную по курсу на указанную дату
//
Функция ПересчетСуммыПоКурсу(ВалютнаяСумма, Валюта, Дата) Экспорт

	Запись = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Валюта));
	Сумма  = ВалютнаяСумма * Запись.Курс;

	Если Запись.Кратность <> 0 Тогда
		Сумма = Сумма / ?(Запись.Кратность = 0, 1, Запись.Кратность);
	КонецЕсли;

	Возврат Сумма;

КонецФункции // ПересчетСуммыПоКурсу()

// Процедура - обработчик события "Нажатия" кнопки ЗАполнитьБУ по НУ
//
Процедура КоманднаяПанельБУЗаполнитьНУ(Кнопка)

	Если Движения.Хозрасчетный.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	Если ЭлементыФормы.ТабличноеПолеДвиженияНУ.Значение.Количество() > 0 Тогда
		Ответ = Вопрос("Имеющиеся данные на закладке ""Налоговый учет"" будут удалены и заполнены по данным бухгалтерского учета
						|Продолжить?", 
						РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет,
						"Заполнение данных налогового учета");

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Движения.Налоговый.Очистить();
		Иначе
			Возврат;
		КонецЕсли;
		
	КонецЕсли;

    НалоговыйУчет.ЗаполнитьДанныеНалоговогоУчетаПоБухгалтерскомуУчету(Движения.Налоговый, Движения.Хозрасчетный, Дата);
	
КонецПроцедуры // КоманднаяПанельБУЗаполнитьНУ()

// Процедура - обработчик события "ПриНачалеРедактирования" элемента ТабличноеПолеДвиженияБУ 
//
Процедура ТабличноеПолеДвиженияБУПриНачалеРедактирования(Элемент, НоваяСтрока)

	Строка = Элемент.ТекущаяСтрока;

	Строка.Период      = Дата;
	Строка.Организация = Организация;

КонецПроцедуры

// Процедура - обработчик события "ПередОкончаниемРедактирования" элемента ТабличноеПолеДвиженияБУ
//
Процедура ТабличноеПолеДвиженияБУПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)

	ПересчитатьСуммуОперации();

КонецПроцедуры // ТабличноеПолеДвиженияБУПередОкончаниемРедактирования()

// Процедура - обработчик события "ПослеУдаления" элемента ТабличноеПолеДвиженияБУ
//
Процедура ТабличноеПолеДвиженияБУПослеУдаления(Элемент)
	ПересчитатьСуммуОперации();
КонецПроцедуры


// Процедура - обработчик события "ОбработкаВыбора" поля СчетДт
//
Процедура ТабличноеПолеДвиженияБУСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетКт
//
Процедура ТабличноеПолеДвиженияБУСчетКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ВалютаДт
//
Процедура ТабличноеПолеДвиженияБУВалютаДтПриИзменении(Элемент)

	ТД       = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные;
	ТД.Сумма = ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаДт, ТД.ВалютаДт, Дата);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ВалютаКт
//
Процедура ТабличноеПолеДвиженияБУВалютаКтПриИзменении(Элемент)

	ТД = ЭлементыФормы.ТабличноеПолеДвиженияБУ.ТекущиеДанные;

	Если НЕ ТД.СчетДт.Валютный Тогда
		ТД.Сумма = ПересчетСуммыПоКурсу(ТД.ВалютнаяСуммаКт, ТД.ВалютаКт, Дата);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Сумма
//
Процедура ТабличноеПолеДвиженияБУСуммаПриИзменении(Элемент)

	ПересчитатьСуммуОперации();

КонецПроцедуры // ТабличноеПолеДвиженияБУСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля СубконтоДт1
//
Процедура ТабличноеПолеДвиженияБУСубконтоДт1НачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля СубконтоКт1
//
Процедура ТабличноеПолеДвиженияБУСубконтоКт1НачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" элемента ТабличноеПолеДвиженияНУ
//
Процедура ТабличноеПолеДвиженияНУПриНачалеРедактирования(Элемент, НоваяСтрока)

	Строка = Элемент.ТекущаяСтрока;

	Строка.Период      = Дата;
	Строка.Организация = Организация;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетДт
//
Процедура ТабличноеПолеДвиженияНУСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СчетДт
//
Процедура ТабличноеПолеДвиженияНУСчетДтПриИзменении(Элемент)
	Строка = ЭлементыФормы.ТабличноеПолеДвиженияНУ.ТекущиеДанные;
	Если (ЗначениеЗаполнено(Строка.СчетДт)) И НЕ ЗначениеЗаполнено(Строка.ВидУчетаДт) Тогда
		Строка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.НУ;
	ИначеЕсли НЕ ЗначениеЗаполнено(Строка.СчетДт) Тогда
		Строка.ВидУчетаДт = Перечисления.ВидыУчетаПоПБУ18.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля СчетКт
//
Процедура ТабличноеПолеДвиженияНУСчетКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СчетКт
//
Процедура ТабличноеПолеДвиженияНУСчетКтПриИзменении(Элемент)
	Строка = ЭлементыФормы.ТабличноеПолеДвиженияНУ.ТекущиеДанные;
	Если (ЗначениеЗаполнено(Строка.СчетКт)) И НЕ ЗначениеЗаполнено(Строка.ВидУчетаКт) Тогда
		Строка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.НУ;
	ИначеЕсли НЕ ЗначениеЗаполнено(Строка.СчетКт) Тогда
		Строка.ВидУчетаКт = Перечисления.ВидыУчетаПоПБУ18.ПустаяСсылка();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ОбновлениеОтображения()

	ЭлементыФормы.КоманднаяПанельБУ.Кнопки.ПереключитьАктивность.Доступность = НЕ ПометкаУдаления;
	ЭлементыФормы.КоманднаяПанельНУ.Кнопки.ПереключитьАктивность.Доступность = НЕ ПометкаУдаления;

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры // ПослеЗаписи()