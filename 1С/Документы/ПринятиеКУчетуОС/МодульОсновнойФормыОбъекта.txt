////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Переменные содержат курсы валют упр. и регл. учета
Перем мВалютаРегламентированногоУчета;
Перем мВалютаУправленческогоУчета;
Перем КурсВал;
Перем КратностьВал;
Перем ИмяВалБух;
Перем ИмяВалУпр;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;
Перем мОтражатьВРегламентированномУчете;

// Хранит установленный в учетной политике вариант
// учета расходов по амортизационной премии
Перем мВариантУчетаРасходовПоАмортизационнойПремии;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеСредства,ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Оплата,ЭлементыФормы.КоманднаяПанель1);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Функция возвращает список значений доступных способов амортизации для бух. учета
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   СписокЗначений
Функция ПолучитьСписокСпособовАмортизацииБУ() Экспорт

	СписокПеречисления = Новый СписокЗначений;
	
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.Линейный);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ);
	СписокПеречисления.Добавить(Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега);
	
	Возврат СписокПеречисления;

КонецФункции // ПолучитьСписокСпособовАмортизацииБУ()

Процедура ПересчетСуммыНДСХозспособ()
	
	СуммаНДС = УчетНДС.РассчитатьСуммуНДС( СтоимостьБУХоз, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС));
	
КонецПроцедуры // ПересчетСуммыНДСХозспособ()

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт

	СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный");
	Если (Дата < '20060101' И СтоимостьБУХоз > 0)
		Или ЗначениеЗаполнено(СчетФактура) Тогда
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = РаботаСДиалогами.ПолучитьТекстСчетаФактуры(
														 СчетФактура);
		ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка = Истина;
	Иначе
		ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок = "не требуется";
		ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка = Ложь;
	КонецЕсли;
		
КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

// Проверка параметров амортизационной премии на заполненность.
//
Функция ПараметрыАмортизационнойПремииЗаполнены()

	Если (ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0)
	   И (СчетУчетаЗатратПоАмортизационнойПремии = ПланыСчетов.Налоговый.ПустаяСсылка())
	   И (НЕ ЗначениеЗаполнено(СубконтоПоАмортизационнойПремии1))
	   И (НЕ ЗначениеЗаполнено(СубконтоПоАмортизационнойПремии2))
	   И (НЕ ЗначениеЗаполнено(СубконтоПоАмортизационнойПремии3)) Тогда
	   
		Возврат Ложь;
		
	Иначе
		
		Возврат Истина;
		
	КонецЕсли;

КонецФункции // ПроверитьЗаполненностьПараметровАмортизационнойПремии()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает видимость элементов формы в зависимости от вида операции и 
// взведенных флагов
//
Процедура УстановитьВидимость()
	
	// Установка видимости панелей формы в зависимости от вида операции
	ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.ОССоСклада.Видимость           = (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование);
	ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.ОбъектыСтроительства.Видимость = (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства);
	ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.Прочее.Видимость               = (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее);

	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		ЭлементыФормы.ПанельВнеоборотныеАктивы.ТекущаяСтраница =  ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.ОССоСклада;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ЭлементыФормы.ПанельВнеоборотныеАктивы.ТекущаяСтраница =  ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.ОбъектыСтроительства;
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее Тогда
		ЭлементыФормы.ПанельВнеоборотныеАктивы.ТекущаяСтраница =  ЭлементыФормы.ПанельВнеоборотныеАктивы.Страницы.Прочее;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее Тогда
		ЭлементыФормы.ЗаполнитьУУ.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ЗаполнитьУУ.Видимость = Истина;
	КонецЕсли;

	ПараметрыУчетнойПолитикиРегл = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитикиРегл) Тогда
		ПрименениеПБУ18 = ПараметрыУчетнойПолитикиРегл.ПоддержкаПБУ18;
	Иначе
		ПрименениеПБУ18 = Ложь;
	КонецЕсли; 

	ЭтоУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);

	Если ЭтоУСН Тогда
		ЭтоРасходыУСН = НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(Организация, Дата);
	Иначе
		ЭтоРасходыУСН = Ложь;
	КонецЕсли;

	Если ЭтоРасходыУСН Тогда
		ЭлементыФормы.НадписьПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 	= НЕ (Дата < Дата("20060101"));
		ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 		= НЕ (Дата < Дата("20060101"));
	КонецЕсли;
	
	//**************
	// Установка видимости элементов формы в зависимости от вида учета

	ЭлементыФормы.СчетУчетаНУВнеоборотногоАктива.Видимость         = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.СчетУчетаНУВнеоборотногоАктива1.Видимость        = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);

	ЭлементыФормы.НадписьСчетУчетаНУВнеоборотногоАктива.Видимость  = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.НадписьСчетУчетаНУВнеоборотногоАктива1.Видимость = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);

	ЭлементыФормы.НадписьСтоимостьНУ.Видимость                     = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.СтоимостьНУ.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.НадписьСтоимостьНУХоз.Видимость                  = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.СтоимостьНУХоз.Видимость                         = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.НадписьСтоимостьПР.Видимость                     = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьПР.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.НадписьСтоимостьПРХоз.Видимость                  = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьПРХоз.Видимость                         = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.НадписьСтоимостьВР.Видимость                     = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьВР.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.НадписьСтоимостьВРХоз.Видимость                  = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.СтоимостьВРХоз.Видимость                         = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;

	ЭлементыФормы.УпрВалюта.Видимость                              = ОтражатьВУправленческомУчете;
	ЭлементыФормы.РеглВалюта1.Видимость                            = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.РеглВалюта2.Видимость                            = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.РеглВалюта3.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.РеглВалюта4.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.РеглВалюта5.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.РеглВалюта6.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.РеглВалюта7.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	ЭлементыФормы.РеглВалюта8.Видимость                            = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН) И ПрименениеПБУ18;
	
	// Установка видимости страниц панелей в зависимости от вида учета
	ЭлементыФормы.ОсновнаяПанель.Страницы.УпрУчет.Видимость        = ОтражатьВУправленческомУчете;
	ЭлементыФормы.ОсновнаяПанель.Страницы.БухУчет.Видимость        = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.ОсновнаяПанель.Страницы.НалУчет.Видимость        = ОтражатьВНалоговомУчете И (НЕ ЭтоУСН);
	ЭлементыФормы.ОсновнаяПанель.Страницы.УСНУчет.Видимость        = ОтражатьВНалоговомУчете И ЭтоРасходыУСН;

	//**************
	// Установка видимости элементов формы в зависимости от вида учета

	ЭлементыФормы.СчетУчетаБУВнеоборотногоАктива.Видимость         = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СчетУчетаБУВнеоборотногоАктива1.Видимость        = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СчетУчетаНУВнеоборотногоАктива.Видимость         = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;
	ЭлементыФормы.СчетУчетаНУВнеоборотногоАктива1.Видимость        = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;

	ЭлементыФормы.НадписьСчетУчетаБУВнеоборотногоАктива.Видимость  = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСчетУчетаБУВнеоборотногоАктива1.Видимость = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСчетУчетаНУВнеоборотногоАктива.Видимость  = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;
	ЭлементыФормы.НадписьСчетУчетаНУВнеоборотногоАктива1.Видимость = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;

	ЭлементыФормы.НадписьСтоимость.Видимость                       = ОтражатьВУправленческомУчете;
	ЭлементыФормы.Стоимость.Видимость                              = ОтражатьВУправленческомУчете;
	ЭлементыФормы.НадписьСтоимостьБУ.Видимость                     = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СтоимостьБУ.Видимость                            = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСтоимостьБУХоз.Видимость                  = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.СтоимостьБУХоз.Видимость                         = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.НадписьСтоимостьНУ.Видимость                     = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;
	ЭлементыФормы.СтоимостьНУ.Видимость                            = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;
	ЭлементыФормы.НадписьСтоимостьНУХоз.Видимость                  = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;
	ЭлементыФормы.СтоимостьНУХоз.Видимость                         = ОтражатьВНалоговомУчете И НЕ ЭтоУСН;

	// Установка видимости элементов формы в зависимости от вида операции
	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства Тогда
		ЭлементыФормы.СтавкаНДС           .Видимость = ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.НадписьСтавкаНДС    .Видимость = ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.СуммаНДС            .Видимость = ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.НадписьНДС          .Видимость = ОтражатьВБухгалтерскомУчете;
		ЭлементыФормы.НДСВключенВСтоимость.Видимость = ОтражатьВБухгалтерскомУчете;
	КонецЕсли;
	
	ЭлементыФормы.Подразделение.Доступность                 = НЕ ОтразитьВСоставеМПЗ;
	ЭлементыФормы.СоставОсновногоСредства.Доступность       = НЕ ОтразитьВСоставеМПЗ;
	ЭлементыФормы.МОЛУУ.Доступность                         = НЕ ОтразитьВСоставеМПЗ;
	ЭлементыФормы.СобытиеПринятиеКУчету.Доступность         = НЕ ОтразитьВСоставеМПЗ;
	ЭлементыФормы.СпособНачисленияАмортизацииУУ.Доступность = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.СрокПолезногоИспользованияУУ.Доступность  = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.ЗаполнитьУУ.Доступность                   = НЕ ОтразитьВСоставеМПЗ;
	
	ЭлементыФормы.ПодразделениеОрганизации.Доступность      = НЕ ОтразитьВСоставеМПЗ;
	ЭлементыФормы.МОЛБУ.Доступность                         = НЕ ОтразитьВСоставеМПЗ;
	ЭлементыФормы.СпособПоступления.Доступность             = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.СобытиеПринятиеКУчетуРегл.Доступность     = НЕ ОтразитьВСоставеМПЗ ИЛИ (ОтразитьВСоставеМПЗ И ОтражатьВНалоговомУчете); 
	ЭлементыФормы.СпособНачисленияАмортизацииБУ.Доступность = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.СрокПолезногоИспользованияБУ.Доступность  = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.СчетНачисленияАмортизацииБУ.Доступность   = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.СчетУчетаБУ.Доступность                   = НЕ ОтразитьВСоставеМПЗ;
	ЭлементыФормы.ЗаполнитьБУ.Доступность                   = НЕ ОтразитьВСоставеМПЗ;
	
	ЭлементыФормы.НДСВключенВСтоимость.Доступность = Не ОтразитьВСоставеМПЗ;
	
	// Установка доступности флажков Бух и Нал в зависимости от вида операции
	ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = НЕ (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее) И мОтражатьВРегламентированномУчете;
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность     = НЕ (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее) И ОтражатьВБухгалтерскомУчете;
	
	ЭлементыФормы.СобытиеВводаВЭксплуатацию.Доступность                   = НЕ ОтразитьВСоставеМПЗ И ПринятиеКУчетуОдновременноСВводомВЭксплуатацию;
	ЭлементыФормы.СобытиеВводаВЭксплуатациюРегл.Доступность               = ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл;
	ЭлементыФормы.СобытиеВводаВЭксплуатациюРегл.ОтметкаНезаполненного     = ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл И НЕ ЗначениеЗаполнено(СобытиеВводВЭксплуатациюРегл);
	ЭлементыФормы.СобытиеВводаВЭксплуатациюРегл.АвтоОтметкаНезаполненного = ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл;
	ЭлементыФормы.СобытиеВводаВЭксплуатациюРегл.АвтоВыборНезаполненного   = ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл;

	ЭлементыФормы.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию.Доступность     = НЕ ОтразитьВСоставеМПЗ;
	ЭлементыФормы.ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл.Доступность = НЕ ОтразитьВСоставеМПЗ ИЛИ (ОтразитьВСоставеМПЗ И ОтражатьВНалоговомУчете);
	
	// доступность реквизита Начислять амортизацию в зависимости от ввода в эксплуатацию
	ЭлементыФормы.НачислятьАмортизациюУУ.Доступность = ПринятиеКУчетуОдновременноСВводомВЭксплуатацию И НЕ СписыватьПриПринятииКУчету;
	ЭлементыФормы.НачислятьАмортизациюБУ.Доступность = НЕ (ОтразитьВСоставеМПЗ ИЛИ СписыватьПриПринятииКУчету);
	ЭлементыФормы.НачислятьАмортизациюНУ.Доступность = ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл;
	
	ЭлементыФормы.НачислятьАмортизациюВТекущемМесяце.Доступность = НачислятьАмортизациюУУ;
	
	Если ОтражатьВУправленческомУчете Тогда

		ЭлементыФормы.СобытиеВводаВЭксплуатацию.АвтоВыборНезаполненного   = ПринятиеКУчетуОдновременноСВводомВЭксплуатацию;
		ЭлементыФормы.СобытиеВводаВЭксплуатацию.АвтоОтметкаНезаполненного = ПринятиеКУчетуОдновременноСВводомВЭксплуатацию;
		ЭлементыФормы.СобытиеВводаВЭксплуатацию.ОтметкаНезаполненного     = ПринятиеКУчетуОдновременноСВводомВЭксплуатацию И НЕ ЗначениеЗаполнено(СобытиеВводВЭксплуатацию);
		
		// зависимость объема работ от способа амортизации
		Если  (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
			И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции) Тогда
			ЭлементыФормы.ПредполагаемыйОбъемПродукцииУУ.Доступность = Ложь;
			ЭлементыФормы.ПараметрВыработкиУУ.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ПредполагаемыйОбъемПродукцииУУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
			ЭлементыФормы.ПараметрВыработкиУУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
		КонецЕсли;

		// зависимость коэффициента ускорения от способа амортизации
		Если  (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
			ЭлементыФормы.КоэффициентУскоренияУУ .Доступность = Ложь;
		Иначе
			ЭлементыФормы.КоэффициентУскоренияУУ .Доступность = НЕ ОтразитьВСоставеМПЗ;
		КонецЕсли;

		// зависимость годовой нормы амортизации от способа амортизации
		Если  (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
			ИЛИ (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ) Тогда
			ЭлементыФормы.ГодоваяНормаАмортизацииУУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
		Иначе
			ЭлементыФормы.ГодоваяНормаАмортизацииУУ.Доступность = Ложь;
		КонецЕсли;

		// зависимость годового графика амортизации от способа амортизации
		Если  (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный)
			И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ)
			И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования)
			И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
			ЭлементыФормы.ГрафикАмортизацииПоГодуУУ.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ГрафикАмортизацииПоГодуУУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
		КонецЕсли;

		// зависимость индивидуального графика амортизации от способа амортизации
		Если (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику) Тогда
			ЭлементыФормы.ИндивидуальныйГрафикАмортизации.Доступность = НЕ ОтразитьВСоставеМПЗ;
		Иначе
			ЭлементыФормы.ИндивидуальныйГрафикАмортизации.Доступность = Ложь;
		КонецЕсли;

	КонецЕсли;

	Если ОтражатьВБухгалтерскомУчете Тогда

		// зависимость объема работ от способа амортизации
		Если  (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
			И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции) Тогда
			ЭлементыФормы.ПредполагаемыйОбъемПродукцииБУ.Доступность = Ложь;
			ЭлементыФормы.ПараметрВыработкиБУ.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ПредполагаемыйОбъемПродукцииБУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
			ЭлементыФормы.ПараметрВыработкиБУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
		КонецЕсли;

		// зависимость коэффициента ускорения от способа амортизации
		Если  (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
			ЭлементыФормы.КоэффициентУскоренияБУ .Доступность = Ложь;
		Иначе
			ЭлементыФормы.КоэффициентУскоренияБУ .Доступность = НЕ ОтразитьВСоставеМПЗ;
		КонецЕсли;

		// зависимость годовой нормы амортизации от способа амортизации
		Если  (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
			ИЛИ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ) Тогда
			ЭлементыФормы.ГодоваяНормаАмортизацииБУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
		Иначе
			ЭлементыФормы.ГодоваяНормаАмортизацииБУ.Доступность = Ложь;
		КонецЕсли;

		// зависимость годового графика амортизации от способа амортизации
		Если  (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный)
			И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ)
			И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования)
			И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
			ЭлементыФормы.ГрафикАмортизацииПоГодуБУ.Доступность = Ложь;
		Иначе
			ЭлементыФормы.ГрафикАмортизацииПоГодуБУ.Доступность = НЕ ОтразитьВСоставеМПЗ;
		КонецЕсли;

	КонецЕсли;
	
	// Установка отметки незаполенного реквизиту "Способы отражения расходов по амортизации"
	СпособыОтраженияРасходовПоАмортизацииОтметкаНезаполненного =
	НЕ ((ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы) И ОтразитьВСоставеМПЗ);
	
	ЭлементыФормы.СпособыОтраженияРасходовПоАмортизации.ОтметкаНезаполненного     = СпособыОтраженияРасходовПоАмортизацииОтметкаНезаполненного И НЕ ЗначениеЗаполнено(СпособыОтраженияРасходовПоАмортизации);
	ЭлементыФормы.СпособыОтраженияРасходовПоАмортизации.АвтоОтметкаНезаполненного = СпособыОтраженияРасходовПоАмортизацииОтметкаНезаполненного;
	ЭлементыФормы.СпособыОтраженияРасходовПоАмортизации.АвтоВыборНезаполненного   = СпособыОтраженияРасходовПоАмортизацииОтметкаНезаполненного;
	
	// Установка видимости страниц панели ПанельПорядокВключенияСтоимостиВСоставРасходовНУ в завивисмости от 
	// выбранного варианта включения стоимости в состав расходов
	Если НЕ ЗначениеЗаполнено(ПорядокВключенияСтоимостиВСоставРасходовНУ) Тогда
		ЭлементыФормы.ПанельПорядокВключенияСтоимостиВСоставРасходовНУ.Видимость = Ложь;
		ЭлементыФормы.ПанельСуммСписанияНаРасходыВНУ.Видимость = Ложь;
	Иначе
		ЭлементыФормы.ПанельПорядокВключенияСтоимостиВСоставРасходовНУ.Видимость = Истина;
		Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование
		  И ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету
		  И УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата) Тогда
			ЭлементыФормы.ПанельСуммСписанияНаРасходыВНУ.Видимость = Истина;
		Иначе
			ЭлементыФормы.ПанельСуммСписанияНаРасходыВНУ.Видимость = Ложь;
		КонецЕсли;	
		ЭлементыФормы.ПанельПорядокВключенияСтоимостиВСоставРасходовНУ.ТекущаяСтраница = ЭлементыФормы.ПанельПорядокВключенияСтоимостиВСоставРасходовНУ.Страницы[ПорядокВключенияСтоимостиВСоставРасходовНУ.Метаданные().ЗначенияПеречисления[Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.Индекс(ПорядокВключенияСтоимостиВСоставРасходовНУ)].Имя];
	КонецЕсли;
	
	СписокДоступныхЗначенийПриОтраженииВСоставеМПЗ = Новый СписокЗначений();
	СписокДоступныхЗначенийПриОтраженииВСоставеМПЗ.Добавить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации);
	СписокДоступныхЗначенийПриОтраженииВСоставеМПЗ.Добавить(Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.СтоимостьНеВключаетсяВРасходы);
	
	ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовНУ.ДоступныеЗначения = ?(ОтразитьВСоставеМПЗ ИЛИ ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОбъектыСтроительства,
	                                                                               СписокДоступныхЗначенийПриОтраженииВСоставеМПЗ,
	                                                                               Новый СписокЗначений());
	
	// Установка видимости надписи с расшифровкой срока полезного использования
	ЭлементыФормы.РасшифровкаСрокаПолезногоИспользованияНУ.Заголовок  = УправлениеВнеоборотнымиАктивами.РасшифровкаСрокаПолезногоИспользования(СрокПолезногоИспользованияНУ);
	
	// Установка видимости счета-фактуры
	ЗаполнитьТекстПроСчетФактуру();
	
	// Установка видимости реквизитов амортизационной премии
	ЭлементыФормы.ПанельАмортизационнаяПремия.Видимость                   = ВключитьКапитальныеВложенияВРасходыНУ;
	ЭлементыФормы.НадписьСчетУчетаЗатратПоАмортизационнойПремии.Видимость = (мВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии);
	ЭлементыФормы.НадписьСубконтоПоАмортизационнойПремии1.Видимость       = (мВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии);
	ЭлементыФормы.НадписьСубконтоПоАмортизационнойПремии2.Видимость       = (мВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии);
	ЭлементыФормы.НадписьСубконтоПоАмортизационнойПремии3.Видимость       = (мВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии);
	ЭлементыФормы.СчетУчетаЗатратПоАмортизационнойПремии.Видимость        = (мВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии);
	ЭлементыФормы.СубконтоПоАмортизационнойПремии1.Видимость              = (мВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии);
	ЭлементыФормы.СубконтоПоАмортизационнойПремии2.Видимость              = (мВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии);
	ЭлементыФормы.СубконтоПоАмортизационнойПремии3.Видимость              = (мВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии);
	
	Если (мВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии) Тогда
		УстановитьВидимостьСубконто(СчетУчетаЗатратПоАмортизационнойПремии, "ПоАмортизационнойПремии", ОтражатьВНалоговомУчете И (ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации) И ВключитьКапитальныеВложенияВРасходыНУ);
	КонецЕсли;

	КолонкиТЧ = ЭлементыФормы.ОсновныеСредства.Колонки;
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиТЧ.ИнвентарныйНомер, ОтражатьВБухгалтерскомУчете);
	
	// Установка видимости метода начисления амортизации (НУ).
	До2009 = (Год(Дата) < 2009);
	ЭлементыФормы.ПанельМетодНачисленияАмортизацииНУ.Свертка = ?(До2009, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	
Конецпроцедуры // УстановитьВидимость()

// Заполнение реквизитов шапки документа значениями по умолчанию
//
Процедура ЗаполнитьДаннымиПоУмолчанию(ДокументОбъект)

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ВидОперации) Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ДокументОбъект.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию) Тогда

		ДокументОбъект.ПринятиеКУчетуОдновременноСВводомВЭксплуатацию = Истина;
		ДокументОбъект.НачислятьАмортизациюУУ       = Истина;
		ДокументОбъект.НачислятьАмортизациюБУ       = Истина;
		ДокументОбъект.НачислятьАмортизациюНУ       = Истина;

	КонецЕсли;

КонецПроцедуры

// Процедура формирует надпись с укзанием суммы документа
//
Процедура ОбновитьНадписьСуммаДокумента()
	
	Текст = "Сумма документа: ";
	Если ОтражатьВУправленческомУчете Тогда
		Текст = Текст + Формат( Стоимость, "ЧЦ=12; ЧДЦ=2; ЧН=0") + " " + ИмяВалУпр;
		Если ОтражатьВБухгалтерскомУчете Тогда
			Текст = Текст + " (" + Формат( СтоимостьБУ, "ЧЦ=12; ЧДЦ=2; ЧН=0") + " " + ИмяВалБух + ")";
		КонецЕсли;
	Иначе
		Текст = Текст + Формат( СтоимостьБУ, "ЧЦ=12; ЧДЦ=2; ЧН=0") + " " + ИмяВалБух;
	КонецЕсли;
	
	ЭлементыФормы.НадписьСуммаДокумента.Заголовок = Текст;
	
КонецПроцедуры // ОбновитьНадписьСуммаДокумента()

// Процедура пересчитывает сумму документа с учетом курсов валют.
//
Процедура ПересчетВалСумм()
	
	мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");

	КурсВалюты   = МодульВалютногоУчета.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, Дата);
	КурсВал      = КурсВалюты.Курс;
	КратностьВал = КурсВалюты.Кратность;
	ИмяВалБух    = "" + мВалютаРегламентированногоУчета;
	ИмяВалУпр    = "" + мВалютаУправленческогоУчета;
	
КонецПроцедуры // ПересчетВалСумм()

// Управление видимостью субконто.
//
Процедура УстановитьВидимостьСубконто(Счет, Суффикс, ВидимостьСчета)
	
	ВидыСубконтоСчета = Счет.ВидыСубконто;
	КоличествоСубконто = ВидыСубконтоСчета.Количество();
	
	Для НомерСубконто = 1 по 3 Цикл
		
		Если ВидимостьСчета И (НомерСубконто <= КоличествоСубконто) И (ЗначениеЗаполнено(Счет)) Тогда
			
			ЭлементыФормы["НадписьСубконто" + Суффикс + НомерСубконто].Заголовок = Строка(ВидыСубконтоСчета[НомерСубконто-1].ВидСубконто) + ":";
			ЭлементыФормы["НадписьСубконто" + Суффикс + НомерСубконто].Видимость = Истина;
			ЭлементыФормы["Субконто" + Суффикс + НомерСубконто].Видимость        = Истина;
			
		Иначе
			
			ЭлементыФормы["НадписьСубконто" + Суффикс + НомерСубконто].Видимость = Ложь;
			ЭлементыФормы["Субконто" + Суффикс + НомерСубконто].Видимость        = Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // УстановитьВидимостьСубконто()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		
		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			// Заполнить реквизиты значениями по умолчанию.
			
			ЗаполнитьДаннымиПоУмолчанию(ЭтотОбъект);
			СтавкаНДС = Перечисления.СтавкиНДС.НДС18;
			
			ПорядокВключенияСтоимостиВСоставРасходовУСН = Перечисления.ПорядокВключенияСтоимостиОСиНМАВСоставРасходовУСН.ВключитьВСоставАмортизируемогоИмущества;
			
			Если НЕ НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата) Тогда
				СпециальныйКоэффициентНУ = 1;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.

	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
										  ВидОперации.Метаданные().ЗначенияПеречисления,
										  Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	ВалютаУУ = глЗначениеПеременной("ВалютаУправленческогоУчета");
	ЭлементыФормы.УпрВалюта.Заголовок   = ВалютаУУ;
	ЭлементыФормы.УпрВалюта1.Заголовок  = ВалютаУУ;

	ВалютаРегл = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	ЭлементыФормы.РеглВалюта1.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта2.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта3.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта4.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта5.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта6.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта7.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта8.Заголовок = ВалютаРегл;
	ЭлементыФормы.РеглВалюта9.Заголовок = ВалютаРегл;
	ПараметрВыработкиУУПриИзменении(ЭлементыФормы.ПараметрВыработкиУУ);
	ПараметрВыработкиБУПриИзменении(ЭлементыФормы.ПараметрВыработкиБУ);
	
	
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
		мВариантУчетаРасходовПоАмортизационнойПремии = ПараметрыУчетнойПолитики.ВариантУчетаРасходовПоАмортизационнойПремии;
	КонецЕсли;
	
	ВключитьКапитальныеВложенияВРасходыНУ = ПараметрыАмортизационнойПремииЗаполнены();
	
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	мТекущаяДатаДокумента = Дата;
	
	ПересчетВалСумм();
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	// Если открыли данную форму из формы документа, то там надо поменять текст
	Если НЕ (ВладелецФормы = Неопределено) И ТипЗнч(ВладелецФормы) = Тип("Форма") Тогда
		ВладелецФормы.ЗаполнитьТекстПроДокументы();
	КонецЕсли; 

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ЗначениеЗаполнено(ЗначениеВыбора) Тогда

		Если ТипЗнч(ЗначениеВыбора) = Тип("СправочникСсылка.ОсновныеСредства") Тогда

			СтрокаТабличнойЧасти = ОсновныеСредства.Найти(ЗначениеВыбора,"ОсновноеСредство");
			Если СтрокаТабличнойЧасти <> Неопределено Тогда
				Предупреждение("Это основное средство уже подобрано!",60);
			Иначе
				НоваяСтрока = ОсновныеСредства.Добавить();
				НоваяСтрока.ОсновноеСредство = ЗначениеВыбора;
				НоваяСтрока.ИнвентарныйНомер = ЗначениеВыбора.Код;
			КонецЕсли;

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств[Кнопка.Имя];
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Оборудование Тогда
		Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
			СчетУчетаБУВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			СчетУчетаНУВнеоборотногоАктива = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;
	Иначе

		СписыватьПриПринятииКУчету = Ложь;
		
	КонецЕсли;

	Если ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОБъектыСтроительства Тогда

		Если НЕ ЗначениеЗаполнено(ОбъектСтроительства) Тогда
			СчетУчетаБУВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
			СчетУчетаНУВнеоборотногоАктива = ПланыСчетов.Налоговый.ПустаяСсылка();
		КонецЕсли;
		
		Номенклатура = Неопределено;

		Если ОтражатьВНалоговомУчете Тогда
			
			Если ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.ВключениеВРасходыПриПринятииКУчету Тогда
				
				ПорядокВключенияСтоимостиВСоставРасходовНУ = Перечисления.ПорядокВключенияСтоимостиОСВСоставРасходовНУ.НачислениеАмортизации;
				Сообщить("Порядок учета (НУ) изменен на ""Начисление амортизации"".");
				
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее Тогда
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		ОтражатьВНалоговомУчете      = Ложь;
	КонецЕсли;

	Если ВидОперации <> Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.ОБъектыСтроительства Тогда
		ОбъектСтроительства = Справочники.ОбъектыСтроительства.ПустаяСсылка();
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при нажатии кнопки "ЗаполнитьБУ" командной панели формы
//
Процедура КоманднаяПанельЗаполнитьЗаполнитьБУ(Кнопка)

	Если СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику Тогда
		Предупреждение("В бухгалтерском учете способ начисления амортизации по индивидуальному графику не используется.");
		Возврат;
	Иначе
		СпособНачисленияАмортизацииБУ  = СпособНачисленияАмортизацииУУ;
		ПараметрВыработкиБУ            = ПараметрВыработкиУУ;
		СрокПолезногоИспользованияБУ   = СрокПолезногоИспользованияУУ;
		ПредполагаемыйОбъемПродукцииБУ = ПредполагаемыйОбъемПродукцииУУ;
		КоэффициентУскоренияБУ         = КоэффициентУскоренияУУ;
		Если ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл тогда
			НачислятьАмортизациюБУ     = НачислятьАмортизациюУУ;
		КонецЕсли;
		ГрафикАмортизацииПоГодуБУ      = ГрафикАмортизацииПоГодуУУ;
		УстановитьВидимость();
	КонецЕсли;

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "ЗаполнитьУУ" командной панели формы
//
Процедура КоманднаяПанельЗаполнитьЗаполнитьУУ(Кнопка)

	СпособНачисленияАмортизацииУУ  = СпособНачисленияАмортизацииБУ;
	ПараметрВыработкиУУ            = ПараметрВыработкиБУ;
	СрокПолезногоИспользованияУУ   = СрокПолезногоИспользованияБУ;
	ПредполагаемыйОбъемПродукцииУУ = ПредполагаемыйОбъемПродукцииБУ;
	КоэффициентУскоренияУУ         = КоэффициентУскоренияБУ;
	Если ПринятиеКУчетуОдновременноСВводомВЭксплуатацию тогда
		НачислятьАмортизациюУУ     = НачислятьАмортизациюБУ;
	КонецЕсли;
	ГрафикАмортизацииПоГодуУУ      = ГрафикАмортизацииПоГодуБУ;
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "По наименованию" из меню "Заполнить"
// командной панели формы. Процедура добавляет в табличную часть основные средства,
// наименование которых совпадает с наименованием текущего выбранного в табличной части ОС
//
Процедура КоманднаяПанельОСЗаполнитьПоНаименованию(Кнопка)
	
	Если ЭлементыФормы.ОсновныеСредства.ТекущаяСтрока = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредство = ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.ОсновноеСредство;
	
	Если ОсновноеСредство = Неопределено Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Данные для заполнения отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	ОсновноеСредствоНаименование = Строка(ОсновноеСредство);
	
	СписокОС = ОсновныеСредства.ВыгрузитьКолонку("ОсновноеСредство");
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("СписокОС",     СписокОС);
	Запрос.УстановитьПараметр("Наименование", ОсновноеСредствоНаименование);
	
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеСредства.Ссылка КАК ОсновноеСредство,
	|	ОсновныеСредства.Код КАК ОсновноеСредствоКод
	|ИЗ
	|	Справочник.ОсновныеСредства КАК ОсновныеСредства
	|ГДЕ
	|	ОсновныеСредства.Наименование = &Наименование
	|	И ОсновныеСредства.Ссылка НЕ В (&СписокОС)
	|	И ОсновныеСредства.ПометкаУдаления = ЛОЖЬ
	|	И ОсновныеСредства.ЭтоГруппа = ЛОЖЬ";
	
	ВыборкаОсновныеСредства = Запрос.Выполнить().Выбрать();
	
	Если ВыборкаОсновныеСредства.Количество() = 0 Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Другие элементы справочника с наименованием <" + ОсновноеСредствоНаименование + "> в справочнике ""Основные средства"" отсутствуют.",,, СтатусСообщения.Обычное);
		Возврат;
	КонецЕсли;
	
	Пока ВыборкаОсновныеСредства.Следующий() Цикл
		НоваяСтрока = ОсновныеСредства.Добавить();
		НоваяСтрока.ОсновноеСредство = ВыборкаОсновныеСредства.ОсновноеСредство;
		НоваяСтрока.ИнвентарныйНомер = ВыборкаОсновныеСредства.ОсновноеСредствоКод;
	КонецЦикла; 
	
КонецПроцедуры // КоманднаяПанельОСЗаполнитьПоНаименованию()

// Процедура вызывается при нажании кнопки Подбор командной панели "КоманднаяПанельОС"
//
Процедура КоманднаяПанельОСПодбор(Кнопка)
	
	ФормаПодбора =  Справочники.ОсновныеСредства.ПолучитьФорму("ФормаПодбора",ЭтаФорма);
	ФормаПодбора.РежимВыбора = Истина;
	ФормаПодбора.ЗакрыватьПриВыборе  = Ложь;
	ФормаПодбора.Открыть();
	

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики)  Тогда
		мВариантУчетаРасходовПоАмортизационнойПремии = ПараметрыУчетнойПолитики.ВариантУчетаРасходовПоАмортизационнойПремии;
	КонецЕсли;
	
	УстановитьВидимость();
	ПересчетВалСумм();
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Организация 
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	// Документ с видом операции "Прочее" не отражается в регл учете
	Если НЕ (ВидОперации = Перечисления.ВидыОперацийПринятияКУчетуОсновныхСредств.Прочее) Тогда
		РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	КонецЕсли;

	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	ПараметрыУчетнойПолитики = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если ЗначениеЗаполнено(ПараметрыУчетнойПолитики) Тогда
		мВариантУчетаРасходовПоАмортизационнойПремии = ПараметрыУчетнойПолитики.ВариантУчетаРасходовПоАмортизационнойПремии;
	КонецЕсли;
	
  УстановитьВидимость();
	
КонецПроцедуры //ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВУправленческомУчете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	УстановитьВидимость();
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВБухгалтерскомУчете 
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	
	УстановитьВидимость();
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
												 ПодразделениеОрганизации,
												 Подразделение,
												 Организация);
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ОтражатьВНалоговомУчете 
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	Если НЕ ОтражатьВНалоговомУчете 
	   И ОтражатьВБухгалтерскомУчете
	   И ОтразитьВСоставеМПЗ Тогда
		СобытиеПринятиеКУчетуРегл = Справочники.СобытияОС.ПустаяСсылка();
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СпособНачисленияАмортизацииБУ
//
Процедура СпособНачисленияАмортизацииБУПриИзменении(Элемент)

	// зависимость объема работ от способа амортизации
	Если  (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
		И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции) Тогда
		ПредполагаемыйОбъемПродукцииБУ = 0;
		ПараметрВыработкиБУ = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();
	КонецЕсли;

	// зависимость коэффициента ускорения от способа амортизации
	Если  (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
		КоэффициентУскоренияБУ = 0;
	КонецЕсли;

	// зависимость годовой нормы амортизации от способа амортизации
	Если НЕ ( (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
		ИЛИ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
		ИЛИ (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ)) Тогда
		ГодоваяНормаАмортизацииБУ = 0;
	КонецЕсли;

	// зависимость годового графика амортизации от способа амортизации
	Если  (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный)
		И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ)
		И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования)
		И (СпособНачисленияАмортизацииБУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
		ГрафикАмортизацииПоГодуБУ = 0;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры // СпособНачисленияАмортизацииБУПриИзменении()









// Процедура - обработчик события "ПриИзменении" поля ОбъектСтроительства
//
Процедура ОбъектСтроительстваПриИзменении(Элемент)

	УстановитьВидимость();

КонецПроцедуры // ОбъектСтроительстваПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.Равно, СтандартнаяОбработка, Перечисления.ВидыСкладов.Оптовый);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетУчетаБУ
//
Процедура СчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетНачисленияАмортизации
//
Процедура СчетНачисленияАмортизацииБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетУчетаНУ
//
Процедура СчетУчетаНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СчетНачисленияАмортизацииНУ
//
Процедура СчетНачисленияАмортизацииНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "Включить капитальные
// вложения в состав расходов по п. 1.1 ст. 259 НК РФ".
//
// Очищает значение процента капитальных вложений и вызывает процедуру
// установки видимости.
// 
Процедура ВключитьКапитальныеВложенияВРасходыНУПриИзменении(Элемент)
	
	Если НЕ ВключитьКапитальныеВложенияВРасходыНУ Тогда
	
		Если ПараметрыАмортизационнойПремииЗаполнены() Тогда
			
			ТекстВопроса =
			"Установленные параметры амортизационной премии будут очищены.
			|Продолжить?";
			
			Если Вопрос(ТекстВопроса, РежимДиалогаВопрос.ОКОтмена) = КодВозвратаДиалога.ОК Тогда
				
				ПроцентКапитальныхВложенийВключаемыхВРасходыНУ = 0;
				СчетУчетаЗатратПоАмортизационнойПремии         = ПланыСчетов.Налоговый.ПустаяСсылка();
				СубконтоПоАмортизационнойПремии1               = Неопределено;
				СубконтоПоАмортизационнойПремии2               = Неопределено;
				СубконтоПоАмортизационнойПремии3               = Неопределено;
				
			Иначе
				
				ВключитьКапитальныеВложенияВРасходыНУ = Истина;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		Если мВариантУчетаРасходовПоАмортизационнойПремии = Перечисления.ВариантыУчетаРасходовПоАмортизационнойПремии.НаСчетахРасходовПоАмортизационнойПремии Тогда
		
			Если НЕ (СпособыОтраженияРасходовПоАмортизации = Справочники.СпособыОтраженияРасходовПоАмортизации.ПустаяСсылка()) Тогда
				
				Запрос = Новый Запрос();
				Запрос.УстановитьПараметр("АмортизационнаяПремия", Перечисления.ВидыРасходовНУ.АмортизационнаяПремия);
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СтатьиЗатрат.Ссылка КАК Ссылка
				|ИЗ
				|	Справочник.СтатьиЗатрат КАК СтатьиЗатрат
				|ГДЕ
				|	СтатьиЗатрат.ВидРасходовНУ = &АмортизационнаяПремия
				|
				|УПОРЯДОЧИТЬ ПО
				|	СтатьиЗатрат.Код
				|";
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ (РезультатЗапроса.Пустой()) Тогда
					СтатьяЗатратАмортизационнаяПремия = РезультатЗапроса.Выгрузить()[0].Ссылка;
				Иначе
					СтатьяЗатратАмортизационнаяПремия = Неопределено;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.УстановитьПараметр("Ссылка",                            СпособыОтраженияРасходовПоАмортизации);
				Запрос.УстановитьПараметр("СтатьяЗатратАмортизационнаяПремия", СтатьяЗатратАмортизационнаяПремия);
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	СпособыОтраженияРасходовПоАмортизацииСпособы.СчетЗатратНУ КАК СчетЗатратНУ,
				|	ВЫБОР
				|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.СубконтоНУ1 ССЫЛКА Справочник.СтатьиЗатрат
				|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
				|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.СубконтоНУ1
				|	КОНЕЦ КАК СубконтоНУ1,
				|	ВЫБОР
				|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.СубконтоНУ2 ССЫЛКА Справочник.СтатьиЗатрат
				|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
				|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.СубконтоНУ2
				|	КОНЕЦ КАК СубконтоНУ2,
				|	ВЫБОР
				|		КОГДА СпособыОтраженияРасходовПоАмортизацииСпособы.СубконтоНУ3 ССЫЛКА Справочник.СтатьиЗатрат
				|			ТОГДА &СтатьяЗатратАмортизационнаяПремия
				|		ИНАЧЕ СпособыОтраженияРасходовПоАмортизацииСпособы.СубконтоНУ3
				|	КОНЕЦ КАК СубконтоНУ3
				|ИЗ
				|	Справочник.СпособыОтраженияРасходовПоАмортизации.Способы КАК СпособыОтраженияРасходовПоАмортизацииСпособы
				|ГДЕ
				|	СпособыОтраженияРасходовПоАмортизацииСпособы.Ссылка = &Ссылка
				|
				|УПОРЯДОЧИТЬ ПО
				|	СпособыОтраженияРасходовПоАмортизацииСпособы.НомерСтроки";
				РезультатЗапроса = Запрос.Выполнить();
				Если НЕ (РезультатЗапроса.Пустой()) Тогда
					
					СпособОтраженияРаcходов = РезультатЗапроса.Выгрузить()[0];
					
					СчетУчетаЗатратПоАмортизационнойПремии = СпособОтраженияРаcходов.СчетЗатратНУ;
					
					СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(ЭлементыФормы.СчетУчетаЗатратПоАмортизационнойПремии);
					
					Если ЗначениеЗаполнено(СпособОтраженияРаcходов.СубконтоНУ1) Тогда
						СубконтоПоАмортизационнойПремии1 = СпособОтраженияРаcходов.СубконтоНУ1;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СпособОтраженияРаcходов.СубконтоНУ2) Тогда
						СубконтоПоАмортизационнойПремии2 = СпособОтраженияРаcходов.СубконтоНУ2;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(СпособОтраженияРаcходов.СубконтоНУ3) Тогда
						СубконтоПоАмортизационнойПремии3 = СпособОтраженияРаcходов.СубконтоНУ3;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // ВключитьКапитальныеВложенияВРасходыНУПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ПринятиеКУчетуОдновременноСВводомВЭксплуатацию 
//
Процедура ПринятиеКУчетуОдновременноСВводомВЭксплуатациюПриИзменении(Элемент)

	Если Не(ПринятиеКУчетуОдновременноСВводомВЭксплуатацию) тогда
		СобытиеВводаВЭксплуатацию          = Справочники.СобытияОС.ПустаяСсылка();
		НачислятьАмортизациюУУ             = Ложь;
		НачислятьАмортизациюВТекущемМесяце = Ложь;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

// Обработчик события "ПриИзменении" флага "Принятие к учету с вводом в 
// эксплуатацию" на закладке "Бухгалтерский учет".
//
Процедура ПринятиеКУчетуОдновременноСВводомВЭксплуатациюПриИзмененииРегл(Элемент)
	
	Если НЕ ПринятиеКУчетуОдновременноСВводомВЭксплуатациюРегл Тогда
		СобытиеВводаВЭксплуатацию = Справочники.СобытияОС.ПустаяСсылка();
		НачислятьАмортизациюНУ    = Ложь;
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры // ПринятиеКУчетуОдновременноСВводомВЭксплуатациюПриИзмененииРегл()

// Процедура - обработчик события "ПриИзменении" поля ввода Номенклатура
//
Процедура НоменклатураПриИзменении(Элемент)

	Если Номенклатура <> СерияНоменклатуры.Владелец Тогда
		СерияНоменклатуры = Неопределено;
	КонецЕсли; 

	Если Номенклатура <> ХарактеристикаНоменклатуры.Владелец Тогда
		ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		СчетУчетаБУВнеоборотногоАктива = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СчетУчетаНУВнеоборотногоАктива = ПланыСчетов.Налоговый.ПустаяСсылка();
	Иначе
		СчетаУчета = СчетаУчетаВДокументах.ПолучитьСчетаУчетаНоменклатурыИзНастроек(Организация, Номенклатура, Склад, Дата);
		СчетУчетаБУВнеоборотногоАктива = СчетаУчета.СчетУчетаБУ;
		СчетУчетаНУВнеоборотногоАктива = СчетаУчета.СчетУчетаНУ;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
//
Процедура СчетУчетаБУВнеоборотногоАктиваОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
//
Процедура СчетУчетаБУВнеоборотногоАктиваПриИзменении(Элемент)

	СчетУчетаНУВнеоборотногоАктива = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СчетУчетаБУВнеоборотногоАктива));

КонецПроцедуры // ТоварыСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СпособНачисленияАмортизацииУУ
//
Процедура СпособНачисленияАмортизацииУУПриИзменении(Элемент)

	// зависимость объема работ от способа амортизации
	Если  (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
		И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПропорциональноОбъемуПродукции) Тогда
		ПредполагаемыйОбъемПродукцииУУ = 0;
		ПараметрВыработкиУУ            = Справочники.ПараметрыВыработкиОС.ПустаяСсылка();

	КонецЕсли;

	// зависимость коэффициента ускорения от способа амортизации
	Если  (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
		КоэффициентУскоренияУУ = 0;
	КонецЕсли;

	// зависимость годовой нормы амортизации от способа амортизации
	Если НЕ ( (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега)
		ИЛИ (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка)
		ИЛИ (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ)) Тогда
		ГодоваяНормаАмортизацииУУ = 0;
	КонецЕсли;

	// зависимость годового графика амортизации от способа амортизации
	Если  (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.Линейный)
		И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ)
		И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоСуммеЧиселЛетИспользования)
		И (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.УменьшаемогоОстатка) Тогда
		ГрафикАмортизацииПоГодуУУ = 0;
	КонецЕсли;

	// зависимость индивидуального графика амортизации от способа амортизации
	Если (СпособНачисленияАмортизацииУУ <> Перечисления.СпособыНачисленияАмортизацииОС.ПоИндивидуальномуГрафику) Тогда
		ИндивидуальныйГрафикАмортизации = 0;
	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "Нажание" кнопки РассчитатьСтоимость
//
Процедура РассчитатьСтоимостьНажатие(Элемент)

	СтруктураСтоимости = УправлениеВнеоборотнымиАктивами.РассчитатьСтоимостьОбъектаСтроительства(ОтражатьВУправленческомУчете,
	                                                                                             ОтражатьВБухгалтерскомУчете,
	                                                                                             ОтражатьВНалоговомУчете,
	                                                                                             СчетУчетаБУВнеоборотногоАктива,
	                                                                                             СчетУчетаНУВнеоборотногоАктива,
	                                                                                             ОбъектСтроительства,
	                                                                                             Организация,
	                                                                                             Новый Граница(КонецМесяца(Дата)));

	ЭлементыФормы.СтоимостьУУ.Значение    = СтруктураСтоимости.СтоимостьУУ;
	ЭлементыФормы.СтоимостьБУ.Значение    = СтруктураСтоимости.СтоимостьБУ;
	ЭлементыФормы.СтоимостьБУХоз.Значение = СтруктураСтоимости.СтоимостьБУХоз;
	ЭлементыФормы.СтоимостьНУ.Значение    = СтруктураСтоимости.СтоимостьНУ;
	ЭлементыФормы.СтоимостьНУХоз.Значение = СтруктураСтоимости.СтоимостьНУХоз;
	ЭлементыФормы.СтоимостьПР.Значение    = СтруктураСтоимости.СтоимостьПР;
	ЭлементыФормы.СтоимостьПРХоз.Значение = СтруктураСтоимости.СтоимостьПРХоз;
	ЭлементыФормы.СтоимостьВР.Значение    = СтруктураСтоимости.СтоимостьВР;
	ЭлементыФормы.СтоимостьВРХоз.Значение = СтруктураСтоимости.СтоимостьВРХоз;

	ПересчетСуммыНДСХозспособ();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СпособНачисленияАмортизацииБУ
//
Процедура СпособНачисленияАмортизацииБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.УстановитьСписокПоляВыбора(ЭлементыФормы.СпособНачисленияАмортизацииБУ, ПолучитьСписокСпособовАмортизацииБУ());

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СобытиеПринятиеКУчету
//
Процедура СобытиеПринятиеКУчетуНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокСобытий = Новый СписокЗначений;
	СписокСобытий.Добавить(Перечисления.ВидыСобытийОС.ПринятиеКУчету);
	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСобытияОС(Элемент, СписокСобытий, СтандартнаяОбработка);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода СостояниеВводаВЭксплуатацию
//
Процедура СобытиеВводаВЭксплуатациюНачалоВыбора(Элемент, СтандартнаяОбработка)

	СписокСобытий = Новый СписокЗначений;
	СписокСобытий.Добавить(Перечисления.ВидыСобытийОС.ВводВЭксплуатацию);
	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСобытияОС(Элемент, СписокСобытий, СтандартнаяОбработка);

КонецПроцедуры

Процедура СобытиеПринятиеКУчетуНачалоВыбораРегл(Элемент, СтандартнаяОбработка)
	
	СобытиеПринятиеКУчетуНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура СобытиеВводаВЭксплуатациюНачалоВыбораРегл(Элемент, СтандартнаяОбработка)
	
	СобытиеВводаВЭксплуатациюНачалоВыбора(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры


Процедура ГодоваяНормаАмортизацииУУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВыбора = Новый СписокЗначений;
	НормаПоЕНАОФ = 0;

	Если ЗначениеЗаполнено(ШифрПоЕНАОФ) Тогда

		Если    (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ) Тогда
			НормаПоЕНАОФ = ШифрПоЕНАОФ.НормаАмортизационныхОтчислений;

		ИначеЕсли (СпособНачисленияАмортизацииУУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега) Тогда
			НормаПоЕНАОФ = ШифрПоЕНАОФ.ПроцентОтСтоимостиМашины;

		КонецЕсли;

		СписокВыбора.Добавить(НормаПоЕНАОФ);

	КонецЕсли;

	ЭлементыФормы.ГодоваяНормаАмортизацииУУ.СписокВыбора = СписокВыбора;

КонецПроцедуры

Процедура ГодоваяНормаАмортизацииБУНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СписокВыбора = Новый СписокЗначений;
	НормаПоЕНАОФ = 0;

	Если ЗначениеЗаполнено(ШифрПоЕНАОФ) Тогда
		Если    (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФ) Тогда
			НормаПоЕНАОФ = ШифрПоЕНАОФ.НормаАмортизационныхОтчислений;

		ИначеЕсли (СпособНачисленияАмортизацииБУ = Перечисления.СпособыНачисленияАмортизацииОС.ПоЕНАОФНа1000кмПробега) Тогда
			НормаПоЕНАОФ = ШифрПоЕНАОФ.ПроцентОтСтоимостиМашины;

		КонецЕсли;

		СписокВыбора.Добавить(НормаПоЕНАОФ);

	КонецЕсли;

	ЭлементыФормы.ГодоваяНормаАмортизацииБУ.СписокВыбора = СписокВыбора;

КонецПроцедуры

Процедура ПараметрВыработкиУУПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(ПараметрВыработкиУУ) ТОгда
		ЭлементыФормы.ЕдиницаНормыУУ.Заголовок = "";

	Иначе
		ЭлементыФормы.ЕдиницаНормыУУ.Заголовок = ПараметрВыработкиУУ.ЕдиницаИзмерения.Наименование;

	КонецЕсли;

КонецПроцедуры

Процедура ПараметрВыработкиБУПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(ПараметрВыработкиБУ) ТОгда
		ЭлементыФормы.ЕдиницаНормыБУ.Заголовок = "";

	Иначе
		ЭлементыФормы.ЕдиницаНормыБУ.Заголовок = ПараметрВыработкиБУ.ЕдиницаИзмерения.Наименование;

	КонецЕсли;

КонецПроцедуры

Процедура ОсновныеСредстваОсновноеСредствоПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.ОсновныеСредства.ТекущиеДанные;
	СтрокаТЧ.ИнвентарныйНомер = СтрокаТЧ.ОсновноеСредство.Код;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода серии номенклатуры
//
Процедура СерияНоменклатурыПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Номенклатура = Элемент.Значение.Владелец;
	КонецЕсли;

КонецПроцедуры

Процедура НачислятьАмортизациюУУПриИзменении(Элемент)

	Если НЕ НачислятьАмортизациюУУ Тогда
		НачислятьАмортизациюВТекущемМесяце = Ложь;

	КонецЕсли;

	УстановитьВидимость();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
//
Процедура СчетУчетаБУПриИзменении(Элемент)
	
	СчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетУчетаБУ));
	
КонецПроцедуры // СчетУчетаБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетНачисленияАмортизацииБУ
//
Процедура СчетНачисленияАмортизацииБУПриИзменении(Элемент)
	
	СчетНачисленияАмортизацииНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетНачисленияАмортизацииБУ));
	
КонецПроцедуры // СчетНачисленияАмортизацииБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Порядок учета"(НУ)
//
Процедура ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(Элемент)
	
	УстановитьВидимость();

КонецПроцедуры // ПорядокВключенияСтоимостиВСоставРасходовНУПриИзменении(

// Процедура - обработчик события "ПриИзменении" поля ввода "Срок полезного
// использования (в месяцах)"(НУ)
//
Процедура СрокПолезногоИспользованияНУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СрокПолезногоИспользованияНУПриИзменении()

// Процедура - обработчик события ОбновлениеОтображения формы документа
//
Процедура ОбновлениеОтображения()
	
	ОбновитьНадписьСуммаДокумента();
	
КонецПроцедуры // ОбновлениеОтображения()

// Обработчик события "ПриИзменении" поля ввода "Счет учета затрат по 
// амортизационной премии".
//
Процедура СчетУчетаЗатратПоАмортизационнойПремииПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             СубконтоПоАмортизационнойПремии1,
	                             ЭлементыФормы.СубконтоПоАмортизационнойПремии1,
	                             СубконтоПоАмортизационнойПремии2,
	                             ЭлементыФормы.СубконтоПоАмортизационнойПремии2,
	                             СубконтоПоАмортизационнойПремии3,
	                             ЭлементыФормы.СубконтоПоАмортизационнойПремии3);
								 
	РаботаСДиалогами.ПроверитьВладельцаСубконтоПодразделение(ЭтотОбъект, 
											глЗначениеПеременной("глТекущийПользователь"),
											Организация, 
											Новый Структура("НазваниеСубконтоБУ1, НазваниеСубконтоБУ2, НазваниеСубконтоБУ3, 
															|СубконтоБУ1, СубконтоБУ2, СубконтоБУ3",
															"СубконтоПоАмортизационнойПремии1", "СубконтоПоАмортизационнойПремии2", "СубконтоПоАмортизационнойПремии3", 
															СубконтоПоАмортизационнойПремии1, СубконтоПоАмортизационнойПремии2, СубконтоПоАмортизационнойПремии3));
															
	УстановитьВидимость();														
															
КонецПроцедуры // СчетУчетаЗатратПоАмортизационнойПремииПриИзменении()

// Обработчик события "ОбработкаВыбора" поля ввода "Счет учета затрат по 
// амортизационной премии".
//
Процедура СчетУчетаЗатратПоАмортизационнойПремииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СчетУчетаЗатратПоАмортизационнойПремииОбработкаВыбора()

// Обработчик события "НачалоВыбора" поля ввода Субконто.
//
Процедура СубконтоНачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры // СубконтоНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ОсновныеСредства". Формирует данные в колонке "Инв. №".
//
Процедура ОСПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.ОсновныеСредства.Колонки.ИнвНомер.Видимость Тогда

		ОформлениеСтроки.Ячейки.ИнвНомер.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ИнвНомер.Текст           = ДанныеСтроки.ОсновноеСредство.Код;

	КонецЕсли;

КонецПроцедуры // ОСПриВыводеСтроки()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура вызывается по кнопке при изменении активной строки в таблице основных 
// средств, а также при переходе на закладку "Налоговый учет (УСН)".
Процедура ОтобразитьОплаты()

	ТекСтрока = ЭлементыФормы.ОсновныеСредстваДляУСН.ТекущаяСтрока;
	// Включаем отбор тех оплат, которые относятся к текущему основному средству, выбранному
	// в табличной части "ОсновныеСредстваДляУСН"

	Если ТекСтрока <> Неопределено Тогда
		// Включаем отбор ключу из текущей строки табличной части "СоставКосвенныхРасходов"
		ЭлементыФормы.Оплата.ТолькоПросмотр = Ложь;
		ЭлементыФормы.Оплата.ОтборСтрок.ОсновноеСредство.Значение = ТекСтрока.ОсновноеСредство;

	Иначе
		// Текущая строка в таблице косвенных расходов не установлена
		ЭлементыФормы.Оплата.ТолькоПросмотр = Истина;
		Если ОсновныеСредства.Количество() = 0 Тогда
			Оплата.Очистить();
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОтобразитьНаправленияСписания()

Процедура ОсновныеСредстваДляУСНПриАктивизацииСтроки(Элемент)

	ОтобразитьОплаты();
	
КонецПроцедуры // ОсновныеСредстваДляУСНПриАктивизацииСтроки()

Процедура ОплатаПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока Тогда
		ЭлементыФормы.Оплата.ТекущиеДанные.ОсновноеСредство = ЭлементыФормы.Оплата.ОтборСтрок.ОсновноеСредство.Значение;
	КонецЕсли;
	
КонецПроцедуры // ОплатаПриНачалеРедактирования()

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)

	Если Элемент.ТекущаяСтраница.Имя = "УСНУчет" Тогда
		ЭлементыФормы.Оплата.ОтборСтрок.ОсновноеСредство.Использование = Истина;
		ЭлементыФормы.Оплата.ОтборСтрок.ОсновноеСредство.Значение = Справочники.ОсновныеСредства.ПустаяСсылка();
		ОтобразитьОплаты();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеСредстваПередУдалением(Элемент, Отказ)

	Если ЗначениеЗаполнено(Оплата.Найти(Элемент.ТекущиеДанные.ОсновноеСредство)) Тогда
		Ответ = Вопрос("При удалении основного средства, на закладке ""Налоговый учет УСН"" будет очищена информация о его оплатах."+
		"Продожить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			КолвоЭлементовКоллекции = Оплата.Количество(); 
			Для ОбратныйИндекс = 1 По КолвоЭлементовКоллекции Цикл
				ЭлементКоллекции = Оплата[КолвоЭлементовКоллекции - ОбратныйИндекс];
				Если ЭлементКоллекции.ОсновноеСредство = Элемент.ТекущиеДанные.ОсновноеСредство Тогда
					Оплата.Удалить(ЭлементКоллекции);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Отказ = Истина;
		КонецЕслИ;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеСредстваПередУдалением()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры
 
//Процедура - обработчик события "Нажатие" гиперрсылки ГиперссылкаСчетФактура
Процедура ГиперссылкаСчетФактураНажатие(Элемент)
	
	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");
	
КонецПроцедуры

Процедура СтоимостьБУХозПриИзменении(Элемент)
	
	ПересчетСуммыНДСХозспособ();
	УстановитьВидимость();
	
КонецПроцедуры

Процедура СтавкаНДСПриИзменении(Элемент)
	
	ПересчетСуммыНДСХозспособ();
	
КонецПроцедуры

Процедура СтавкаНДСОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

Процедура НДСВключенВСтоимостьПриИзменении(Элемент)
	
	СтоимостьБУ = Макс( СтоимостьБУ + ?( НДСВключенВСтоимость, СуммаНДС, -СуммаНДС), 0);
	
КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Обработчик события "Начало выбора" поля "Способ отражения расходов по амортизации".
//
Процедура СпособыОтраженияРасходовПоАмортизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеВнеоборотнымиАктивами.НачалоВыбораЗначенияСпособовОтраженияРасходовПоАмортизации(Элемент, Организация, СтандартнаяОбработка);
	
КонецПроцедуры // СпособыОтраженияРасходовПоАмортизацииНачалоВыбора()

Процедура РассчитатьСтоимостьСписанияНУНажатие(Элемент)
	
	Если Проведен Тогда
		Предупреждение("Расчет возможен только в непроведенном документе" , 60,);
		Возврат;
	КонецЕсли;
	
	ПорядокСубконто = Новый Массив();
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Номенклатура);
	ПорядокСубконто.Добавить(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные.Склады);
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	СУММА(НалоговыйОстатки.СуммаОстатокДт) / ВЫБОР
	|		КОГДА СУММА(НалоговыйОстатки.КоличествоОстатокДт) = 0
	|			ТОГДА 1
	|		ИНАЧЕ СУММА(НалоговыйОстатки.КоличествоОстатокДт)
	|	КОНЕЦ КАК Стоимость
	|ИЗ
	|	РегистрБухгалтерии.Налоговый.Остатки(
	|			&Период,
	|			Счет = &СчетУчетаНУ,
	|			&ПорядокСубконто,
	|			Субконто1 = &Номенклатура
	|				И Субконто2 = &Склад
	|				И Организация = &Организация
	|				И ВидУчета = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаПоПБУ18.НУ)) КАК НалоговыйОстатки");
	Запрос.УстановитьПараметр("Период",               Новый Граница(КонецМесяца(Дата)));
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("Номенклатура",  		  Номенклатура);
	Запрос.УстановитьПараметр("Склад",  		  	  Склад);
	Запрос.УстановитьПараметр("СчетУчетаНУ",          СчетУчетаНУВнеоборотногоАктива);
	Запрос.УстановитьПараметр("ПорядокСубконто",      ПорядокСубконто);
	
	Выборка = Запрос.Выполнить().Выбрать();

	СтоимостьНУ = 0;
	СтоимостьПР = 0;
	СтоимостьВР = 0;
	
	Если Выборка.Следующий() Тогда
		
		СтоимостьНУ    = Выборка.Стоимость*ОсновныеСредства.Количество();
			
	КонецЕсли;
	
КонецПроцедуры