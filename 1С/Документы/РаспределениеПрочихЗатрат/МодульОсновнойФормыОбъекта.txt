////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мКолонкиПродукция;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

Перем мОтражатьВРегламентированномУчете;


////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

// Процедура обработка подбора прочих затрат
//
Процедура ОбработкаПодбораПрочихЗатрат( ТабЧасть, СтруктВыбора)
	
	НоваяСтрока = ТабЧасть.Найти( СтруктВыбора["СтатьяЗатрат"], "СтатьяЗатрат");
	
	Если НоваяСтрока = Неопределено Тогда
		НоваяСтрока = ТабЧасть.Добавить();		
		НоваяСтрока.СтатьяЗатрат = СтруктВыбора["СтатьяЗатрат"];
		НоваяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля( НоваяСтрока, ПодразделениеОрганизации, НоваяСтрока.СтатьяЗатрат);
	КонецЕсли;
	
	НоваяСтрока.Сумма     = НоваяСтрока.Сумма     + СтруктВыбора.СуммаУпр;
	НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаРегл + СтруктВыбора.СуммаРегл;
	НоваяСтрока.СуммаНал  = НоваяСтрока.СуммаНал  + СтруктВыбора.СуммаРегл;
	
КонецПроцедуры // ОбработкаПодбораПрочихЗатрат()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Продукция,ЭлементыФормы.КоманднаяПанельПродукция.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ЗатратыНаПродукцию,ЭлементыФормы.КоманднаяПанельРаспределениеМатериалов.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПрочиеЗатраты,ЭлементыФормы.КоманднаяПанельЗатраты.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Ложь;
	ЕстьСерия = Истина;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Продукция Тогда

		Команда           = "ПодборВТабличнуюЧастьПродукция";
		ИмяТабличнойЧасти = "Продукция";
		
	КонецЕсли;

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         , ВременнаяДатаРасчетов);

	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, Цена, Характеристика, Серия;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура"				 , Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
		СтрокаТабличнойЧасти.ВидВыпуска                 = Перечисления.ВидыВыпуска.Выпуск;
		СтрокаТабличнойЧасти.Количество       			= Количество;
		
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа 		= СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;
		СтрокаТабличнойЧасти.Спецификация 				= УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(Номенклатура, Характеристика, Дата, Подразделение);
		
	КонецЕсли;

	Если ТабличнаяЧасть = Продукция Тогда
		ТабличнаяЧастьИмя = "Продукция";
	КонецЕсли;
	
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Процедура подбора прочих затрат по остаткам в НЗП
//
Процедура ПодборПоПрочимЗатратам()
	
	СтруктПараметры = Новый Структура;
	СтруктПараметры.Вставить( "Подразделение",            Подразделение);
	СтруктПараметры.Вставить( "ПодразделениеОрганизации", ПодразделениеОрганизации);
	СтруктПараметры.Вставить( "ФлагУпрУчета",             ОтражатьВУправленческомУчете);
	СтруктПараметры.Вставить( "ФлагРеглУчета",            ОтражатьВБухгалтерскомУчете);
	СтруктПараметры.Вставить( "ВидЗатрат",                "НематериальныеЗатраты");
	СтруктПараметры.Вставить( "ДатаОстатков",             Дата);
	СтруктПараметры.Вставить( "Организация",              Организация);
	СтруктПараметры.Вставить( "Команда",                  "ПодборПрочихЗатрат");
	
	ОбработкаТабличныхЧастей.ОткрытьПодборСтатейЗатрат( ЭтаФорма, СтруктПараметры);
	
КонецПроцедуры // ПодборПоПрочимЗатратам()

// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	
	Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)) Тогда
						
		Для Каждого СтрокаТЧ Из Продукция Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, Неопределено);
		КонецЦикла;
		Для Каждого СтрокаТЧ Из ПрочиеЗатраты Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
		КонецЦикла;
		Для Каждого СтрокаТЧ Из ЗатратыНаПродукцию Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура устанавливает видимость/доступность элементов формы
//
Процедура ДоступностьЭлементовФормы()
	
	КолонкиПродукция = ЭлементыФормы.Продукция.Колонки;
	КолонкиПродукция.Заказ.Видимость = НЕ ЗначениеЗаполнено(Заказ);
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	КолонкиПрочиеЗатраты   		= ЭлементыФормы.ПрочиеЗатраты.Колонки;
	КолонкиЗатратыНаПродукцию 	= ЭлементыФормы.ЗатратыНаПродукцию.Колонки;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиПрочиеЗатраты.СчетЗатрат,   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиПрочиеЗатраты.СчетЗатратНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиЗатратыНаПродукцию.СчетЗатрат,   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиЗатратыНаПродукцию.СчетЗатратНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчете);
	
	СтруктураКолонок = Новый Структура("ПодразделениеНЗП, ПодразделениеОрганизацииНЗП");
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиПрочиеЗатраты, 		СтруктураКолонок, ИспользоватьПодразделенияНЗП);
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиЗатратыНаПродукцию, 	СтруктураКолонок, ИспользоватьПодразделенияНЗП);
	
	// Доступность колонок Подразделение НЗП.
	Если ИспользоватьПодразделенияНЗП Тогда
		КолонкиПрочиеЗатраты.ПодразделениеНЗП.Видимость 				= ИспользоватьПодразделенияНЗП И ОтражатьВУправленческомУчете;
		КолонкиЗатратыНаПродукцию.ПодразделениеНЗП.Видимость 			= ИспользоватьПодразделенияНЗП И ОтражатьВУправленческомУчете;
		
		КолонкиПрочиеЗатраты.ПодразделениеОрганизацииНЗП.Видимость 		= ИспользоватьПодразделенияНЗП И ОтражатьВБухгалтерскомУчете;
		КолонкиЗатратыНаПродукцию.ПодразделениеОрганизацииНЗП.Видимость = ИспользоватьПодразделенияНЗП И ОтражатьВБухгалтерскомУчете;
	КонецЕсли;
	
	// Доступность колонок вид выпуска
	СтруктураКолонок = Новый Структура("ВидВыпуска");
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиПродукция, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиПрочиеЗатраты, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	РаботаСДиалогами.УстановитьВидимостьКолонок(КолонкиЗатратыНаПродукцию, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	
	Если ИспользоватьНаработку Тогда
		КолонкиПродукция.ВидВыпуска.Видимость 			= ИспользоватьНаработку;
		КолонкиПрочиеЗатраты.ВидВыпуска.Видимость 		= ИспользоватьНаработку;
		КолонкиЗатратыНаПродукцию.ВидВыпуска.Видимость 	= ИспользоватьНаработку;
	КонецЕсли;
	
КонецПроцедуры // ДоступностьЭлементовФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	// Проверить объект на то, что он еще не внесен в ИБ.
	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
			Если Не мИспользоватьНаработку Тогда
				ИспользоватьНаработку = мИспользоватьНаработку;
			КонецЕсли;
		КонецЕсли;
		ДатаНачалаПериода = НачалоМесяца(Дата);

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура;
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Сумма");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Продукция.Колонки, СтруктураКолонок);

	СтруктураКолонок = Новый Структура;
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("СтатьяЗатрат");
	СтруктураКолонок.Вставить("Сумма");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ПрочиеЗатраты.Колонки, СтруктураКолонок);

	СтруктураКолонок = Новый Структура;
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Продукция");
	СтруктураКолонок.Вставить("СтатьяЗатрат");
	СтруктураКолонок.Вставить("Сумма");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ЗатратыНаПродукцию.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиПродукция);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиПродукция);
	
	СтруктураКолонок = Новый Структура("ХарактеристикаПродукции");
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.ЗатратыНаПродукцию.Колонки, СтруктураКолонок);
	СтруктураКолонок = Новый Структура("СерияПродукции");
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(ЭлементыФормы.ЗатратыНаПродукцию.Колонки, СтруктураКолонок);

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	ДоступностьЭлементовФормы();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеПрочихЗатрат.Заголовок = "Распределение прочих затрат (" + ЗатратыНаПродукцию.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.Продукция.Заголовок          = "Продукция (" + Продукция.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.ПрочиеЗатраты.Заголовок      = "Прочие затраты (" + ПрочиеЗатраты.Количество() + " поз.)";
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьПродукция" Тогда
			ОбработкаПодбора(Продукция, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборПрочихЗатрат" Тогда
			ОбработкаПодбораПрочихЗатрат( ПрочиеЗатраты, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура СформироватьЗапросЗаполнитьПоНормативамУпр(ТабРезультат)
	
	Если НЕ ОтражатьВУправленческомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	ТекстУсловия = "Подразделение = &Подр";
	Запрос.УстановитьПараметр("Подр",       Подразделение);
	Запрос.УстановитьПараметр("МатЗатраты", Перечисления.ВидыЗатрат.Материальные);
	
	Если НЕ ЗначениеЗаполнено(Заказ) Тогда
		Запрос.УстановитьПараметр("Заказ", Неопределено);
	Иначе
		ТекстУсловия = ТекстУсловия + " И Заказ = &Заказ";
		Запрос.УстановитьПараметр("Заказ", Заказ);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НачДата", ДатаНачалаПериода);
	Запрос.УстановитьПараметр("КонДата", Дата);
	
	Запрос.Текст = "
		|ВЫБРАТЬ
		|	РегВыпуск.Продукция,
		|	РегВыпуск.НоменклатурнаяГруппа,
		|	РегВыпуск.ХарактеристикаПродукции,
		|	РегВыпуск.СерияПродукции,
		|	РегВыпуск.Спецификация,
		|	РегВыпуск.Заказ,
		|	РегВыпуск.КоличествоОборот КАК КолВыпуск,
		|	РегНорматив.СтатьяЗатрат,
		|	РегНорматив.Сумма,
		|	РегВыпуск.КоличествоОборот * РегНорматив.Сумма КАК ПланСтоимость,
		|	РегЗатраты.КоличествоОборот,
		|	РегЗатраты.СуммаОборот,
		|	РегВыпуск.КоличествоОборот * РегНорматив.Сумма -
		|	ВЫБОР КОГДА РегЗатраты.СуммаОборот ЕСТЬ NULL ТОГДА
		|		0
		|	ИНАЧЕ
		|		РегЗатраты.СуммаОборот
		|	КОНЕЦ КАК Досписать
		|
		|ИЗ
		|	РегистрНакопления.ВыпускПродукции.Обороты(&НачДата, &КонДата, , " + ТекстУсловия + ") КАК РегВыпуск
		|
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПлановаяСебестоимостьНоменклатуры.СрезПоследних(&КонДата, СтатьяЗатрат.ВидЗатрат <> &МатЗатраты) КАК РегНорматив
		|		ПО РегВыпуск.Продукция               = РегНорматив.Номенклатура
		|        И РегВыпуск.ХарактеристикаПродукции = РегНорматив.ХарактеристикаНоменклатуры
		|
		|	ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.ЗатратыНаВыпускПродукции.Обороты(&НачДата, &КонДата, , СтатьяЗатрат.ВидЗатрат <> &МатЗатраты И " + ТекстУсловия + ") КАК РегЗатраты
		|		ПО РегНорматив.СтатьяЗатрат          = РегЗатраты.СтатьяЗатрат
		|        И РегВыпуск.Продукция               = РегЗатраты.Продукция
		|		 И РегВыпуск.ХарактеристикаПродукции = РегЗатраты.ХарактеристикаПродукции
		|		 И РегВыпуск.СерияПродукции          = РегЗатраты.СерияПродукции
		|		 И РегВыпуск.Спецификация            = РегЗатраты.Спецификация
		|		 И РегВыпуск.Заказ                   = РегЗатраты.Заказ
		| 
		|ГДЕ 	РегВыпуск.КоличествоОборот * РегНорматив.Сумма -
		|	ВЫБОР КОГДА РегЗатраты.СуммаОборот ЕСТЬ NULL ТОГДА
		|		0
		|	ИНАЧЕ
		|		РегЗатраты.СуммаОборот
		|	КОНЕЦ > 0";

		
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	
КонецПроцедуры // СформироватьЗапросЗаполнитьПоНормативамУпр()

Процедура СформироватьЗапросЗаполнитьПоНормативамРегл(ТабРезультат)
	
	Если НЕ ОтражатьВБухгалтерскомУчете И НЕ ОтражатьВНалоговомУчете Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		УсловиеПоЗаказу = "И РегВыпуск.Заказ = &Заказ";
	Иначе
		УсловиеПоЗаказу = "";
	КонецЕсли;
	
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	РегВыпуск.Продукция,
	|	РегВыпуск.НоменклатурнаяГруппа,
	|	РегВыпуск.ХарактеристикаПродукции,
	|	РегВыпуск.СерияПродукции,
	|	РегВыпуск.Спецификация,
	|	РегВыпуск.Заказ,
	|	РегВыпуск.СчетЗатрат,
	|	РегВыпускНУ.СчетЗатратНУ,
	|	РегВыпуск.КоличествоОборот КАК КолВыпуск,
	|	РегНорматив.СтатьяЗатрат,
	|	РегНорматив.Сумма,
	|	РегВыпуск.КоличествоОборот * РегНорматив.Сумма КАК ПланСтоимость,
	|	РегЗатраты.КоличествоОборот,
	|	РегЗатраты.СуммаОборот,
	|	РегВыпуск.КоличествоОборот * РегНорматив.Сумма -
	|	ВЫБОР КОГДА РегЗатраты.СуммаОборот ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		РегЗатраты.СуммаОборот
	|	КОНЕЦ КАК Досписать
	|
	|ИЗ  (
	|	ВЫБРАТЬ
	|		РегВыпуск.Продукция,
	|		РегВыпуск.НоменклатурнаяГруппа,
	|		РегВыпуск.ХарактеристикаПродукции,
	|		РегВыпуск.СерияПродукции,
	|		РегВыпуск.Спецификация,
	|		РегВыпуск.Заказ,
	|		РегВыпуск.СчетУчетаНЗП КАК СчетЗатрат,
	|		Сумма(РегВыпуск.Количество) КАК КоличествоОборот
	|	ИЗ
	|		РегистрНакопления.ВыпускПродукцииБухгалтерскийУчет КАК РегВыпуск
	|	ГДЕ	
	|		РегВыпуск.Период Между &НачДата И &КонДата
	|		И РегВыпуск.Подразделение = &Подразделение
	|		И РегВыпуск.КодОперации <> &КодОперацииФикс
	|		"+ УсловиеПоЗаказу +"
	|	СГРУППИРОВАТЬ ПО
	|		РегВыпуск.Продукция,
	|		РегВыпуск.НоменклатурнаяГруппа,
	|		РегВыпуск.ХарактеристикаПродукции,
	|		РегВыпуск.СерияПродукции,
	|		РегВыпуск.Спецификация,
	|		РегВыпуск.Заказ,
	|		РегВыпуск.СчетУчетаНЗП
	|	
	|	) КАК РегВыпуск
	|	
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ (
	|		ВЫБРАТЬ
	|			РегВыпускНУ.Продукция,
	|			РегВыпускНУ.НоменклатурнаяГруппа,
	|			РегВыпускНУ.ХарактеристикаПродукции,
	|			РегВыпускНУ.СерияПродукции,
	|			РегВыпускНУ.Спецификация,
	|			РегВыпускНУ.Заказ,
	|			РегВыпускНУ.СчетУчетаНЗП КАК СчетЗатратНУ
	|		ИЗ
	|			РегистрНакопления.ВыпускПродукцииНалоговыйУчет КАК РегВыпускНУ
	|		ГДЕ	
	|			РегВыпускНУ.Период Между &НачДата И &КонДата
	|			И РегВыпускНУ.Подразделение = &Подразделение
	|			И РегВыпускНУ.КодОперации <> &КодОперацииФикс
	|		СГРУППИРОВАТЬ ПО
	|			РегВыпускНУ.Продукция,
	|			РегВыпускНУ.НоменклатурнаяГруппа,
	|			РегВыпускНУ.ХарактеристикаПродукции,
	|			РегВыпускНУ.СерияПродукции,
	|			РегВыпускНУ.Спецификация,
	|			РегВыпускНУ.Заказ,
	|			РегВыпускНУ.СчетУчетаНЗП
	|		
	|		) КАК РегВыпускНУ
	|	ПО
	|        РегВыпуск.Продукция               = РегВыпускНУ.Продукция
	|		И РегВыпуск.ХарактеристикаПродукции = РегВыпускНУ.ХарактеристикаПродукции
	|		И РегВыпуск.СерияПродукции          = РегВыпускНУ.СерияПродукции
	|		И РегВыпуск.Спецификация            = РегВыпускНУ.Спецификация
	|		И РегВыпуск.Заказ                   = РегВыпускНУ.Заказ
	|
	|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ 
	|		РегистрСведений.ПлановаяСебестоимостьНоменклатуры.СрезПоследних(&КонДата, СтатьяЗатрат.ВидЗатрат <> &МатЗатраты) КАК РегНорматив
	|	ПО 
	|		РегВыпуск.Продукция                 = РегНорматив.Номенклатура
	|        И РегВыпуск.ХарактеристикаПродукции = РегНорматив.ХарактеристикаНоменклатуры
	|
	|	ЛЕВОЕ СОЕДИНЕНИЕ 
	|		РегистрНакопления.ЗатратыНаВыпускПродукцииБухгалтерскийУчет.Обороты(&НачДата, &КонДата, , СтатьяЗатрат.ВидЗатрат <> &МатЗатраты 
	|																								   И Подразделение = &Подразделение
	|																								   ) КАК РегЗатраты
	|	ПО 
	|		РегНорматив.СтатьяЗатрат            = РегЗатраты.СтатьяЗатрат
	|       И РегВыпуск.СчетЗатрат              = РегЗатраты.СчетУчета
	|       И РегВыпуск.Продукция               = РегЗатраты.Продукция
	|		И РегВыпуск.ХарактеристикаПродукции = РегЗатраты.ХарактеристикаПродукции
	|		И РегВыпуск.СерияПродукции          = РегЗатраты.СерияПродукции
	|		И РегВыпуск.Спецификация            = РегЗатраты.Спецификация
	|		И РегВыпуск.Заказ                   = РегЗатраты.Заказ
	| 
	|ГДЕ 	
	|	РегВыпуск.КоличествоОборот * РегНорматив.Сумма -
	|	ВЫБОР КОГДА РегЗатраты.СуммаОборот ЕСТЬ NULL ТОГДА
	|		0
	|	ИНАЧЕ
	|		РегЗатраты.СуммаОборот
	|	КОНЕЦ > 0
	|";

	Запрос.УстановитьПараметр("НачДата", ДатаНачалаПериода);
	Запрос.УстановитьПараметр("КонДата", Дата);	
	Запрос.УстановитьПараметр("Подразделение", ПодразделениеОрганизации);
	Запрос.УстановитьПараметр("МатЗатраты", Перечисления.ВидыЗатрат.Материальные);
	Запрос.УстановитьПараметр("КодОперацииФикс", Перечисления.КодыОперацийВыпускПродукции.ВыпускПродукцииПоФиксированнойСтоимости);
	
	Если ЗначениеЗаполнено(Заказ) Тогда
		Запрос.УстановитьПараметр("Заказ", Заказ);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст;
		
	ТабРез = Запрос.Выполнить().Выгрузить();
	Если ТабРезультат.Количество() > 0 Тогда
		Для Каждого СтрокаРез Из ТабРезультат Цикл
			НоваяСтрока = ТабРез.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРез);
		КонецЦикла;
		ТабРезультат = ТабРез;
	КонецЕсли;
	ТабРезультат = ТабРез;
	
КонецПроцедуры // СформироватьЗапросЗаполнитьПоНормативамРегл()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Заполнить" командной панели формы.
//
Процедура ДействияФормыЗаполнитьПоНормативам(Кнопка)
	
	ИспользоватьРасширеннуюАналитику = глЗначениеПеременной("ИспользоватьРасширеннуюАналитикуУчетаНоменклатурыИЗатрат") 
		И (глЗначениеПеременной("ДатаНачалаИспользованияРасширеннойАналитикиУчетаНоменклатурыИЗатрат") <= Дата);
		
	Если ИспользоватьРасширеннуюАналитику Тогда
		Предупреждение("Заполнение по нормативам не поддерживается при использовании расширенной аналитики учета затрат!");
		Возврат;
	КонецЕсли;
	
	Суффикс = "";
	Если ОтражатьВУправленческомУчете Тогда
		Если Подразделение.Пустая() Тогда
			Предупреждение("Не указано подразделение!");
			Возврат;
		КонецЕсли;
		Подр = Подразделение;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете Тогда
		Если ПодразделениеОрганизации.Пустая() Тогда
			Предупреждение("Не указано подразделение организации!");
			Возврат;
		КонецЕсли;
		Если Организация.Пустая() Тогда
			Предупреждение("Не указана организация!");
			Возврат;
		КонецЕсли;
		Подр = ПодразделениеОрганизации;
	КонецЕсли;
	
	Если Продукция         .Количество() > 0
	 ИЛИ ПрочиеЗатраты     .Количество() > 0
	 ИЛИ ЗатратыНаПродукцию.Количество() > 0 Тогда
	 
		Ответ = Вопрос("В документе уже присутствуют строки." + Символы.ПС
					 + "При заполнении они будут удалены!" + Символы.ПС
					 + "Продолжить?", РежимДиалогаВопрос.ДаНет,,
					 КодВозвратаДиалога.Нет);
					 
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
		// Удалим все строки документа.
		Продукция         .Очистить();
		ПрочиеЗатраты     .Очистить();
		ЗатратыНаПродукцию.Очистить();
		
	КонецЕсли;
	
	ТабРезультат = Новый ТаблицаЗначений;
	СформироватьЗапросЗаполнитьПоНормативамУпр(ТабРезультат);
	СформироватьЗапросЗаполнитьПоНормативамРегл(ТабРезультат);
		
	Для Каждого Обход Из ТабРезультат Цикл
		НоваяСтрока = ЗатратыНаПродукцию.Добавить();
		НоваяСтрока.Продукция               = Обход.Продукция;
		НоваяСтрока.НоменклатурнаяГруппа    = Обход.НоменклатурнаяГруппа;
		НоваяСтрока.НоменклатурнаяГруппаНЗП = Обход.НоменклатурнаяГруппа;
		НоваяСтрока.ХарактеристикаПродукции = Обход.ХарактеристикаПродукции;
		НоваяСтрока.СерияПродукции          = Обход.СерияПродукции;
		НоваяСтрока.Спецификация            = Обход.Спецификация;
		НоваяСтрока.Заказ                   = Обход.Заказ;
		НоваяСтрока.ЗаказНЗП                = Обход.Заказ;
		НоваяСтрока.СтатьяЗатрат            = Обход.СтатьяЗатрат;
		НоваяСтрока.Сумма                   = Обход.Досписать;
		НоваяСтрока.СуммаНал                = Обход.Досписать;
		Если ОтражатьВБухгалтерскомУчете Тогда
			НоваяСтрока.СчетЗатрат          = Обход.СчетЗатрат;
		КонецЕсли;
		Если ОтражатьВНалоговомУчете Тогда
			НоваяСтрока.СчетЗатратНУ        = Обход.СчетЗатратНУ;
		КонецЕсли;
	КонецЦикла;
	
	ТабЗатрат = ПрочиеЗатраты.Выгрузить();
	Для Каждого Обход Из ТабРезультат Цикл
		НоваяСтрока = ТабЗатрат.Добавить();
		НоваяСтрока.Заказ        			   = Обход.Заказ;
		НоваяСтрока.СтатьяЗатрат 			   = Обход.СтатьяЗатрат;
		НоваяСтрока.НоменклатурнаяГруппа       = Обход.НоменклатурнаяГруппа;
		НоваяСтрока.Сумма        			   = Обход.Досписать;
		НоваяСтрока.СуммаНал     			   = Обход.Досписать;
		Если ОтражатьВБухгалтерскомУчете Тогда
			НоваяСтрока.СчетЗатрат             = Обход.СчетЗатрат;
		КонецЕсли;
		Если ОтражатьВНалоговомУчете Тогда
			НоваяСтрока.СчетЗатратНУ           = Обход.СчетЗатратНУ;
		КонецЕсли;
	КонецЦикла;
	ТабЗатрат.Свернуть("Заказ, СтатьяЗатрат, НоменклатурнаяГруппа, СчетЗатрат, СчетЗатратНУ", "Сумма, СуммаНал");
	ПрочиеЗатраты.Загрузить(ТабЗатрат);
	ТабЗатрат = 0;
	
	ТабПродукция = Продукция.Выгрузить();
	Для Каждого Обход Из ТабРезультат Цикл
		НоваяСтрока = ТабПродукция.Добавить();
		НоваяСтрока.Номенклатура               = Обход.Продукция;
		НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаПродукции;
		НоваяСтрока.СерияНоменклатуры          = Обход.СерияПродукции;
		НоваяСтрока.Спецификация               = Обход.Спецификация;
		НоваяСтрока.НоменклатурнаяГруппа       = Обход.НоменклатурнаяГруппа;
		НоваяСтрока.Заказ                      = Обход.Заказ;
		НоваяСтрока.Количество                 = Обход.КолВыпуск;
		ЗаполнитьСчетаЗатратРегл(НоваяСтрока, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЦикла;
	ТабПродукция.Свернуть("Номенклатура, ХарактеристикаНоменклатуры, СерияНоменклатуры, Заказ, Спецификация, НоменклатурнаяГруппа, СчетЗатрат, СчетЗатратНУ", "Количество");
	Продукция.Загрузить(ТабПродукция);
	
	ТабПродукция = 0;
	ТабРезультат = 0;
	Запрос = 0;
	
КонецПроцедуры // ДействияФормыЗаполнитьПоНормативам()

// Процедура вызывается при нажатии кнопки "Настройка" командной панели формы.
//
Процедура ДействияФормыНастройка(Кнопка)
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	ФормаНастройки.ОткрытьМодально();
	ДоступностьЭлементовФормы();
	
КонецПроцедуры // ДействияФормыНастройка()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура обработчик события нажатие кнопки командной панели.
// Процедура выполняет заполнение табличной части затраты
//
Процедура КоманднаяПанельЗатратыЗаполнить(Кнопка)
	
	Если Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе");
		Возврат;
	КонецЕсли;
	
	Если ПрочиеЗатраты.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена!
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПрочиеЗатратыПоОстаткам();
	
КонецПроцедуры // КоманднаяПанельЗатратыЗаполнить(Кнопка)

// Процедура обработчик события нажатие кнопки командной панели.
// Выполняет заполнение табличной части продукция
//
Процедура КоманднаяПанельПродукцияЗаполнить(Кнопка)
	
	Если Продукция.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена!
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Продукция.Очистить();
	
	ТаблицаПродукция = Продукция.Выгрузить();
	УправлениеПроизводством.ЗаполнитьПродукциюПоВыпуску(ЭтотОбъект, ТаблицаПродукция);
	ТаблицаПродукция.ЗаполнитьЗначения(Перечисления.ВидыВыпуска.Выпуск,"ВидВыпуска");
	Продукция.Загрузить(ТаблицаПродукция);
	
КонецПроцедуры //  КоманднаяПанельПродукцияЗаполнить()

// Процедура обработчик события нажатие кнопки командной панели.
// Выполняет заполнение табличной части продукция
//
Процедура КоманднаяПанельПродукцияЗаполнитьПоВыпускуНаработка(Кнопка)
	
	Если Продукция.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена!
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Продукция.Очистить();
	
	ТаблицаПродукция = Продукция.Выгрузить();
	УправлениеПроизводством.ЗаполнитьПродукциюПоВыпускуНаработка(ЭтотОбъект, ТаблицаПродукция);
	ТаблицаПродукция.ЗаполнитьЗначения(Перечисления.ВидыВыпуска.Наработка,"ВидВыпуска");
	Продукция.Загрузить(ТаблицаПродукция);
	
	Для каждого СтрокаТабличнойЧасти из Продукция Цикл
		СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
		ЗаполнитьСчетаЗатратРегл(СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЦикла;
	
КонецПроцедуры

// Процедура обработчик события нажатие кнопки командной панели.
// Выполняет заполнение табличной части продукция
//
Процедура КоманднаяПанельЗатратыНаПродукциюЗаполнить(Кнопка)
	
	Если ЗатратыНаПродукцию.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена!
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ЗаполнитьРаспределениеЗатратНаПродукцию();
	
КонецПроцедуры // КоманднаяПанельЗатратыНаПродукциюЗаполнить()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Продукция"
//
Процедура КоманднаяПанельПродукцияПодбор(Кнопка)
	
	ДействиеПодбор(Продукция);
	
КонецПроцедуры // КоманднаяПанельПродукцияПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Затраты"
//
Процедура КоманднаяПанельЗатратыПодбор(Кнопка)
	
	ПодборПоПрочимЗатратам();
	
КонецПроцедуры // КоманднаяПанельЗатратыПодбор()

// Процедура вызывается при нажатии кнопки "Заполнить по инвентаризации" командной панели
// табличного поля "Затраты".
//
Процедура КоманднаяПанельЗатратыЗаполнитьПоИнвентаризации(Кнопка)
	
	Если ДокументИнвентаризация.Пустая() Тогда
		Предупреждение("Не указан документ инвентаризации!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	Если ПрочиеЗатраты.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена.
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		ПрочиеЗатраты.Очистить();
	КонецЕсли;
	
	УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоИнвентаризацииНЗП(ЭтотОбъект, ПрочиеЗатраты);
	
	Для Каждого СтрокаТЧ Из ПрочиеЗатраты Цикл
		СтрокаТЧ.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельЗатратыЗаполнитьПоИнвентаризации()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	ДоступностьЭлементовФормы();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	Если ДатаНачалаПериода > Дата Тогда
		ДатаНачалаПериода = Дата;
	КонецЕсли;
	Если ДатаОкончанияПериода < ДатаНачалаПериода Тогда
		ДатаОкончанияПериода = ДатаНачалаПериода;
	КонецЕсли;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
	
	Если Продукция.Количество() > 0 
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете) Тогда
		
		ЗаполнитьСчетаЗатратВТабЧастиРегл(Продукция, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаЗатратВТабЧастиРегл(ПрочиеЗатраты, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаЗатратВТабЧастиРегл(ЗатратыНаПродукцию, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	КонецЕсли;

	ДоступностьЭлементовФормы();
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в упр. учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	ДоступностьЭлементовФормы();
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	Если Продукция.Количество() > 0 
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(,ОтражатьВНалоговомУчете) Тогда
		
		ЗаполнитьСчетаЗатратВТабЧастиРегл( Продукция, Неопределено, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаЗатратВТабЧастиРегл(ПрочиеЗатраты, Неопределено, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаЗатратВТабЧастиРегл(ЗатратыНаПродукцию, Неопределено, ОтражатьВНалоговомУчете);

	КонецЕсли;
	ДоступностьЭлементовФормы();
	
КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	ДоступностьЭлементовФормы();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
//
Процедура ЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "", ДопПараметры);
	
КонецПроцедуры // ЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Заказ
//
Процедура ЗаказПриИзменении(Элемент)
	
	ДоступностьЭлементовФормы();
	
КонецПроцедуры // ЗаказПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение.
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПодразделениеОрганизацииПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры // ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Подразделение
//
Процедура ПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	РаботаСДиалогами.НачалоВыбораПодразделения(ТаблицаОтбора, Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	РаботаСДиалогами.НачалоВыбораПодразделенияОрганизации(ТаблицаОтбора, Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизации.
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
	
КонецПроцедуры // ПодразделениеОрганизацииНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода Подразделения организации.
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПРОДУКЦИЯ

// Процедура - обработчик события ПриНачалеРедактирования 
//
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
			Элемент.ТекущиеДанные.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Продукция".
//
Процедура ПродукцияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиПродукция, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "Продукция".
//
Процедура ПродукцияСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ПродукцияСчетЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура ПродукцияСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ПродукцияСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Продукция".
//
Процедура ПродукцияНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.СерияНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.СерияНоменклатуры = Неопределено;
	КонецЕсли; 

	Если СтрокаТабличнойЧасти.Номенклатура <> СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Неопределено;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	ЗаполнитьСчетаЗатратРегл( СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
КонецПроцедуры // ПродукцияНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристика номенклатуры
// в строке табличной части "Продукция".
//
Процедура ПродукцияХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры // ПродукцияХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
//
Процедура ПродукцияЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Продукция", ДопПараметры);
	
КонецПроцедуры // ПродукцияЗаказНачалоВыбора()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации
// в табличной части "Продукция".
//
Процедура ПродукцияСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.Продукция.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ПродукцияСпецификацияНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПРОЧИЕ ЗАТРАТЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
		Элемент.ТекущаяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЕсли;

КонецПроцедуры // ПрочиеЗатратыПриНачалеРедактирования()
 
// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
//
Процедура ПрочиеЗатратыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ПрочиеЗатраты", ДопПараметры);
	
КонецПроцедуры // ПрочиеЗатратыЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Счет затрат
// табличной части "Прочие затраты"
//
Процедура ПрочиеЗатратыСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ПрочиеЗатратыСчетЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатрат
// табличной части "Прочие затраты"
//
Процедура ПрочиеЗатратыСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат);
	
КонецПроцедуры // ПрочиеЗатратыСтатьяЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СтатьяЗатрат
// табличной части "Прочие затраты"
//
Процедура ПрочиеЗатратыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СформироватьТаблицуОтбораНематериальныхПроизводственныхСтатейЗатрат();
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		ТаблицаОтбора, 
		Элемент, 
		СтандартнаяОбработка
	);
	
КонецПроцедуры // ПрочиеЗатратыСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля Сумма табличной части "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	СтрокаТабличнойЧасти.СуммаНал = СтрокаТабличнойЧасти.СуммаРегл;
	
КонецПроцедуры // ПрочиеЗатратыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля СуммаРегл табличной части "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыСуммаРеглПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаНал = СтрокаТабличнойЧасти.СуммаРегл;
	
КонецПроцедуры // ПрочиеЗатратыСуммаРеглПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат
//
Процедура ПрочиеЗатратыСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ПрочиеЗатратыСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат НУ.
//
Процедура ПрочиеЗатратыСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ПрочиеЗатратыСчетЗатратНУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделениеНЗП
// в строке табличной части "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыПодразделениеНЗППриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
												  СтрокаТабличнойЧасти.ПодразделениеНЗП,
												  Организация);
	
КонецПроцедуры // ПрочиеЗатратыПодразделениеНЗППриИзменении()
											  
// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);
	
КонецПроцедуры // ПрочиеЗатратыПодразделениеОрганизацииНЗПНачалоВыбораИзСписка()

///////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ЗАТРАТЫ НА ПРОДУКЦИЮ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// в строке табличной части "РаспределениеПрочихЗатрат".
//
Процедура ЗатратыНаПродукциюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
		Элемент.ТекущаяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода продукции
// табличной части "ЗатратыНаПродукцию"
//
Процедура ЗатратыНаПродукциюПродукцияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ЗатратыНаПродукцию.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.СерияПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.СерияПродукции = Неопределено;
	КонецЕсли; 

	Если СтрокаТабличнойЧасти.Продукция <> СтрокаТабличнойЧасти.ХарактеристикаПродукции.Владелец Тогда
		СтрокаТабличнойЧасти.ХарактеристикаПродукции = Неопределено;
	КонецЕсли; 
	
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // ЗатратыНаПродукциюПродукцияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики продукции
// табличной части "ЗатратыНаПродукцию"
//
Процедура ЗатратыНаПродукциюХарактеристикаПродукцииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ЗатратыНаПродукцию.ТекущиеДанные;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // ЗатратыНаПродукциюХарактеристикаПродукцииПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
//
Процедура ЗатратыНаПродукциюЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ЗатратыНаПродукцию", ДопПараметры);
	
КонецПроцедуры // ЗатратыНаПродукциюЗаказНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ НЗП.
//
Процедура ЗатратыНаПродукциюЗаказНЗПНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ЗатратыНаПродукцию", ДопПараметры, "ЗаказНЗП");
	
КонецПроцедуры // ЗатратыНаПродукциюЗаказНЗПНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Счет затрат
// табличной части "ЗатратыНаПродукцию"
//
Процедура ЗатратыНаПродукциюСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ЗатратыНаПродукцию.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ЗатратыНаПродукциюСчетЗатратПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации
// в табличной части "ЗатратыНаПродукцию".
//
Процедура ЗатратыНаПродукциюСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.ЗатратыНаПродукцию.ТекущиеДанные.Продукция, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ЗатратыНаПродукциюСпецификацияНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля Сумма табличной части "ЗатратыНаПродукцию".
//
Процедура ЗатратыНаПродукциюСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ЗатратыНаПродукцию.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	СтрокаТабличнойЧасти.СуммаНал = СтрокаТабличнойЧасти.СуммаРегл;
	
КонецПроцедуры // ЗатратыНаПродукциюСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля СуммаРегл табличной части "ЗатратыНаПродукцию".
//
Процедура ЗатратыНаПродукциюСуммаРеглПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ЗатратыНаПродукцию.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаНал = СтрокаТабличнойЧасти.СуммаРегл;
	
КонецПроцедуры // ЗатратыНаПродукциюСуммаРеглПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат
//
Процедура ЗатратыНаПродукциюСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ЗатратыНаПродукциюСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат.
//
Процедура ЗатратыНаПродукциюСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ЗатратыНаПродукциюСчетЗатратНУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода Статья затрат
//
Процедура ЗатратыНаПродукциюСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ЗатратыНаПродукцию.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат);
	
КонецПроцедуры // ЗатратыНаПродукциюСтатьяЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Статья затрат
//
Процедура ЗатратыНаПродукциюСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СформироватьТаблицуОтбораНематериальныхПроизводственныхСтатейЗатрат();
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		ТаблицаОтбора, 
		Элемент, 
		СтандартнаяОбработка
	);
	
КонецПроцедуры // ЗатратыНаПродукциюСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделениеНЗП
// в строке табличной части "ЗатратыНаПродукцию".
//
Процедура ЗатратыНаПродукциюПодразделениеНЗППриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ЗатратыНаПродукцию.ТекущиеДанные;
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
												  СтрокаТабличнойЧасти.ПодразделениеНЗП,
												  Организация);
	
КонецПроцедуры // ЗатратыНаПродукциюПодразделениеНЗППриИзменении()
											  
// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "ЗатратыНаПродукцию".
//
Процедура ЗатратыНаПродукциюПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ЗатратыНаПродукцию.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);
	
КонецПроцедуры // ЗатратыНаПродукциюПодразделениеОрганизацииНЗПНачалоВыбораИзСписка()


// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиПродукция = ЭлементыФормы.Продукция.Колонки;