////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мИспользоватьТолькоСборочныеСпецификации Экспорт;

// Устанавливается в значение "Истина", если пользователю можно менять цену
// в документе
Перем мМожноМенятьЦенуВДокументе;

// Используется для определения необходимости отображения действий над НДС в документе.
Перем мСложныйУчетНДС;

// Используется для определения необходимости изменения параметра включения НДС в стоимость
Перем мЕстьЕНВД;

// Используется для определения необходимости указания счета списания НДС на расходы.
Перем мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;

Перем мКолонкиТовары, мКолонкиВозвратнаяТара;

Перем мОтражатьВРегламентированномУчете;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;
Перем мУчетнаяПолитикаУпр;

Перем мТерминалы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	Если ЕстьНТТ() Тогда
		ЭлементыФормы.Всего.Видимость = Истина;
		ЭлементыФормы.НадписьВсего.Видимость = Истина;

		ЭлементыФормы.Всего.Значение = ОбщегоНазначения.ФорматСумм(ПолучитьРозничнуюСуммуДокумента());

		Если НЕ ЗначениеЗаполнено(мВалютаРегламентированногоУчета) Тогда
			ЭлементыФормы.НадписьВсего.Заголовок = "Розничная сумма (<>):";
		Иначе
			ЭлементыФормы.НадписьВсего.Заголовок = "Розничная сумма (" + СокрЛП(мВалютаРегламентированногоУчета) + "):";
		КонецЕсли;
	Иначе
		ЭлементыФормы.Всего.Видимость = Ложь;
		ЭлементыФормы.НадписьВсего.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратнаяТара,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Выполняет необходимые действия при изменении вида склада.
//
Процедура ПриИзмененииВидаСклада()

	// Оформление колонок таблицы
	ФлагАвтоОтметкиНезаполненого = Ложь;

	Если ЕстьНТТ() И НЕ мРазрешитьНулевыеЦеныВРознице Тогда
		ФлагАвтоОтметкиНезаполненого = Истина;
	КонецЕсли;

	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного = ФлагАвтоОтметкиНезаполненого;

КонецПроцедуры // ПриИзмененииВидаСклада()

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть, РазворачиватьДоКачества)

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(, "По справочнику");
	Если ТабличнаяЧасть = Товары Тогда
		СписокЗапросов.Добавить( "Спецификации", "По спецификациям");
	КонецЕсли;

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		СписокЗапросов.Добавить("ОстаткиНТТ", "По остаткам и ценам номенклатуры в торговой точке");
		РазворачиватьДоКачества = Ложь;
	Иначе
		СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");

		Если СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
			СписокЗапросов.Добавить("РасходЦеныНоменклатуры",         "По ценам номенклатуры");
			СписокЗапросов.Добавить("РасходОстаткиИЦеныНоменклатуры", "По остаткам и ценам номенклатуры");
		КонецЕсли;
		Если ТабличнаяЧасть = ВозвратнаяТара Тогда
			РазворачиватьДоКачества = Ложь;
		Иначе
			РазворачиватьДоКачества = НЕ (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование);
		КонецЕсли;
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номеклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда;

	ЕстьСерия               = Истина;
	ТипЦен                  = Неопределено;
	РазворачиватьДоКачества = Истина;

	Если СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		СпособЗаполненияЦен     = Перечисления.СпособыЗаполненияЦен.ПоРозничнымЦенам;
		ЕстьЦена                = мМожноМенятьЦенуВДокументе;
	ИначеЕсли СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда 
		СпособЗаполненияЦен = Перечисления.СпособыЗаполненияЦен.ПоЦенамНоменклатуры;
		ЕстьЦена            = мМожноМенятьЦенуВДокументе;
	Иначе
		СпособЗаполненияЦен = Неопределено;
		ЕстьЦена            = Ложь;
	КонецЕсли;

	Если ТабличнаяЧасть = Товары Тогда
		Команда           = "ПодборВТабличнуюЧастьТовары";
		ИмяТабличнойЧасти = "Товары";
	ИначеЕсли ТабличнаяЧасть = ВозвратнаяТара Тогда
		Команда                 = "ПодборВТабличнуюЧастьВозвратнаяТара";
		ЕстьЦена                = Ложь;
		ЕстьСерия               = Ложь;
		ИмяТабличнойЧасти       = "Тара";
	КонецЕсли;

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть, РазворачиватьДоКачества);
	ПредставлениеДок   = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда",            Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора", СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов",            ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад",                   СкладОтправитель);
	// Тип цен устанавливает склад получатель.
	СтруктураПараметровПодбора.Вставить("ТипЦен",                  СкладПолучатель.ТипЦенРозничнойТорговли);
	СтруктураПараметровПодбора.Вставить("Организация",             Организация);
	СтруктураПараметровПодбора.Вставить("Контрагент",              Неопределено);
	СтруктураПараметровПодбора.Вставить("ДоговорКонтрагента",      Неопределено);
	СтруктураПараметровПодбора.Вставить("СпособЗаполненияЦен",     СпособЗаполненияЦен);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена",                ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия",               ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента",         мВалютаРегламентированногоУчета);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества", РазворачиватьДоКачества);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	СтруктураПараметровПодбора.Вставить("ВременныеТаблицы",        ОбработкаТабличныхЧастей.СтруктураДляРасчетаРезерваПриПодбореНоменклатуры(ЭтаФорма, Истина, "ВнутреннийЗаказ", "ТоварыВРезервеНаСкладах", "ДокументРезерва", "ДокументРезерва", Ложь));

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен", СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         , ВалютаЦены);

	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Цена"            , Цена);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	ЗначениеВыбора.Свойство("Качество"        , Качество);

	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Расчет цены по валюте документа
	ВалютаДокумента      = мВалютаРегламентированногоУчета;
	КурсДокумента        = 1;
	КратностьДокумента   = 1;
	ЦенаВВалютеДокумента = Ценообразование.ПересчитатьЦенуПриИзмененииВалюты(Цена,
	                                                         ВалютаЦены,
	                                                         ВалютаДокумента,
	                                                         КурсДокумента,
	                                                         КратностьДокумента,
	                                                         Дата);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	Если ТабличнаяЧасть = Товары Тогда
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
		СтруктураОтбора.Вставить("СерияНоменклатуры"         , Серия);
		Если НЕ ЗначениеЗаполнено(Качество) Тогда
			Качество = Справочники.Качество.Новый;
		КонецЕсли;
		СтруктураОтбора.Вставить("Качество"         , Качество);

		Если ЕстьНТТ() Тогда
			СтруктураОтбора.Вставить("Цена", ЦенаВВалютеДокумента);
		КонецЕсли;
	Иначе
		СтруктураОтбора.Вставить("Номенклатура", Номенклатура);
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		Если ТабличнаяЧасть = Товары Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;

		Если ТабличнаяЧасть = Товары Тогда

			СтрокаТабличнойЧасти.Количество       = Количество;

			ВалютаДокумента    = мВалютаРегламентированногоУчета;
			КурсДокумента      = 1;
			КратностьДокумента = 1;

			СтрокаТабличнойЧасти.Качество         = Справочники.Качество.Новый;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Коэффициент                = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
			СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
			СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;
			СтрокаТабличнойЧасти.Цена                       = ЦенаВВалютеДокумента;
			СтрокаТабличнойЧасти.Качество                   = Качество;
			
			// Рассчитываем реквизиты табличной части.
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			Если НЕ ЗначениеЗаполнено(Качество) Тогда
				ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			КонецЕсли;

		Иначе

			СтрокаТабличнойЧасти.Количество       = Количество;

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
		КонецЕсли;
		
	КонецЕсли;

	ТабличнаяЧастьИмя = ?(ТабличнаяЧасть = Товары, "Товары", "ВозвратнаяТара");
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораПоСпецификации(ТабличнаяЧасть, ЗначениеВыбора)
	
	Перем Спецификация, Количество;
	
	ЗначениеВыбора.Свойство("Спецификация", Спецификация);
	ЗначениеВыбора.Свойство("Количество", 	Количество);
	
	Отбор = Новый Структура();
	
	ИсходныеКомплектующие = УправлениеПроизводством.ПолучитьМатериалыПоСпецификации(Спецификация, Количество, Отбор, Дата, мИспользоватьТолькоСборочныеСпецификации);
	
	Если ИсходныеКомплектующие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ИсходныеКомплектующие Цикл
	
		СтруктураПодбора = Новый Структура();
		СтруктураПодбора.Вставить("Номенклатура",       Строка.Номенклатура);
		СтруктураПодбора.Вставить("ЕдиницаИзмерения",   Строка.ЕдиницаИзмерения);
		СтруктураПодбора.Вставить("Характеристика",     Строка.ХарактеристикаНоменклатуры);
		СтруктураПодбора.Вставить("Серия",     			Справочники.СерииНоменклатуры.ПустаяСсылка());
		СтруктураПодбора.Вставить("Количество",     	Строка.Количество);
		СтруктураПодбора.Вставить("СтатьяЗатрат",     	Строка.СтатьяЗатрат);

		ОбработкаПодбора(ТабличнаяЧасть, СтруктураПодбора);
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПодбораПоСпецификации()

// Производит заполнение и установку необходимых полей при изменении товара в табличной части.
// Вызывается из:
//  ТоварыНоменклатураПриИзменении()
//  ВнешнееСобытие()
//
Процедура УстановитьЦенуНоменклатуры(СтрокаТабличнойЧасти)

	Если Не ЕстьНТТ() Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	ИначеЕсли (СкладОтправитель.ВидСклада <> Перечисления.ВидыСкладов.НТТ) 
		    И (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ) Тогда
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;

		// Тип цен устанавливает склад получатель. 
		СтрокаТабличнойЧасти.Цена = Ценообразование.ПолучитьЦенуНоменклатуры(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
		                              СкладПолучатель.ТипЦенРозничнойТорговли, Дата, СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                              ВалютаДокумента, КурсДокумента, КратностьДокумента);
	ИначеЕсли СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ВалютаДокумента    = мВалютаРегламентированногоУчета;
		КурсДокумента      = 1;
		КратностьДокумента = 1;

		СтрокаТабличнойЧасти.Цена = УправлениеРозничнойТорговлей.ПолучитьРозничнуюЦену(СтрокаТабличнойЧасти.Номенклатура,, СкладОтправитель,
		                                                  мВалютаРегламентированногоУчета, Дата,
		                                                  СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		                                                  ВалютаДокумента, КурсДокумента, КратностьДокумента);
	КонецЕсли;

КонецПроцедуры

// Определяет параметры учетной политики (сложный учет НДС по организации).
//
Процедура ОпределитьСложныйУчетНДС()
	
	ПараметрыНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация, Ложь);
	Если НЕ ЗначениеЗаполнено(ПараметрыНУ) Тогда
		мСложныйУчетНДС = Ложь;
		мЕстьЕНВД = Ложь;
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
	Иначе
		мСложныйУчетНДС = ПараметрыНУ.СложныйУчетНДС и Не ПараметрыНУ.УСН;
		мЕстьЕНВД = ПараметрыНУ.ОрганизацияЯвляетсяПлательщикомЕНВД и ПараметрыНУ.РозничнаяТорговляОблагаетсяЕНВД;
		
		мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = ПараметрыНУ.СпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость;
		Если НЕ ЗначениеЗаполнено(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость) Тогда
			мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ;
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ОпределитьСложныйУчетНДС()

// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчетаВШапке(ИзменениеСубконто = ЛОЖЬ)
	
	Если ТипЗнч(СубконтоСписанияНДС1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоСписанияНДС1.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СубконтоСписанияНДС2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоСписанияНДС2.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СубконтоСписанияНДС3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоСписанияНДС3.ВидРасходовНУ;
	ИначеЕсли ИзменениеСубконто Тогда
		Возврат;
	Иначе
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СчетСписанияНДСНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СчетСписанияНДС, ВидЗатратНУ));
	Иначе
		СчетСписанияНДСНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетСписанияНДС));
	КонецЕсли;
	Если СтатьяЗатратСписанияНДС.ВидЗатрат = Перечисления.ВидыЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДСНУ, 	ЭлементыФормы.СубконтоСписанияНДСНУ1, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1,
		                         			ЭлементыФормы.СубконтоСписанияНДСНУ2, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2,
		                         			ЭлементыФормы.СубконтоСписанияНДСНУ3, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчетаВШапке()

// Процедура обновляет параметры учетной политики
//
Процедура ОбновитьПараметрыУчетнойПолитикиУпр()
	
	мУчетнаяПолитикаУпр = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиУпр(Дата);

КонецПроцедуры // ОбновитьПараметрыУчетнойПолитикиУпр()

// Процедура для заполнения счетов списания НДС значениями по умолчанию
//
// Параметры
//  ВыводитьВопрос  – <Булево> – задавать вопрос перед заполнением счетов
//  ТолькоНУ		– <Булево> – заполнять только счета налогвоого учета
//
Процедура ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(ВыводитьВопрос = Ложь, ТолькоНУ = Ложь)
	Если ВыводитьВопрос Тогда
		Ответ = Вопрос("Установить счета и аналитику для списания НДС
					|в соответствии со значениями по умолчанию?", 
					РежимДиалогаВопрос.ДаНет, , , "Изменения счетов списания НДС");
	Иначе
		Ответ = КодВозвратаДиалога.Да;
	КонецЕсли;
				
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ЕстьСкладЕНВД = (СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ 
					ИЛИ СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.Розничный) И мЕстьЕНВД;
					
		Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
			ПодразделениеОрганизации = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеПодразделениеОрганизации");
		КонецЕсли;
					
		СтатьяЗатратСписанияНДС = Справочники.СтатьиЗатрат.СписаниеНДСНаРасходы;

		Если Не ТолькоНУ Тогда
			СчетСписанияНДС = ?(ЕстьСкладЕНВД, ПланыСчетов.Хозрасчетный.ИздержкиОбращенияОблагаемыеЕНВД, ПланыСчетов.Хозрасчетный.ИздержкиОбращенияНеОблагаемыеЕНВД);
		КонецЕсли; 
		
		СчетСписанияНДСНУ = ?(ЕстьСкладЕНВД, ПланыСчетов.Налоговый.РасходыПоДеятельностиЕНВД, ПланыСчетов.Налоговый.ИздержкиОбращенияНеОблагаемыеЕНВД);
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию()

//Процедура обрабатывает начало выбора внутреннего заказа в шапке или в табличной части
Процедура НачалоВыбораВнутреннегоЗаказа(Элемент, СтандартнаяОбработка, ИмяТЧ="")
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		СтруктураОтбора.Вставить("ВидЗаказа", Перечисления.ВидыВнутреннегоЗаказа.НаСклад);
	Иначе
		СтруктураОтбора.Вставить("Заказчик", СкладПолучатель);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, ИмяТЧ, ДопПараметры);
		
	УстановитьВидимость();

КонецПроцедуры

//Процедура обрабатывает изменение внутреннего заказа в шапке или в табличной части
Процедура ПриИзмененииВнутреннегоЗаказа(ВнутреннийЗаказ)
	Если ЗначениеЗаполнено(ВнутреннийЗаказ) и НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		СкладПолучатель = ВнутреннийЗаказ.Заказчик;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает соответстующие свойства поля ввода цены при изменении 
// номенклатуры в текущей строке табличной части.
//
// Параметры:
//  Номенклатура - ссылка на справочник, элемент номенклатуры, для которого будем устанавливать цену
//
Процедура УстановитьСвойстваПоляВводаЦены(Номенклатура)

	ТекущаяСтрока     = ЭлементыФормы.Товары.ТекущиеДанные;
	ЭлементУправления = ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления;
	
	ЭлементУправления.КнопкаСпискаВыбора = (СкладОтправитель.ВидСклада = Перечисления.ВидыСкладов.НТТ);

КонецПроцедуры // УстановитьСвойстваПоляВводаЦены()

// Процедура устанавливает доступность кнопки "Заполнить и провести". Кнопка доступна,
// если дата дата документа совпадает с текущей.
//
// Параметры:
//	Нет.
//
Процедура УстановитьДоступностьКнопкиЗаполнитьИПровести()

	ЭлементыФормы.ДействияФормы.Кнопки.ДействиеЗаполнитьИПровести.Доступность = 
								НачалоДня(Дата) = НачалоДня(ТекущаяДата()) И НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам;

КонецПроцедуры // УстановитьДоступностьКнопкиЗаполнитьИПровести

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()

	ЭлементыФормы.РаспределениеОстатковТоваровОрганизацийПоСкладам.Доступность =
		мОтражатьВРегламентированномУчете И ЗначениеЗаполнено(мУчетнаяПолитикаУпр) И
		мУчетнаяПолитикаУпр["ВестиУчетТоваровОрганизацийВРазрезеСкладов"];
		
	Если РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
			//особый режим документа
		ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность = ложь;	
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ложь;	
	КонецЕсли;
	
	КнопкиЗаполнить = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки;
	КнопкиЗаполнить.ЗаполнитьПоВнутреннемуЗаказу.Доступность = НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам;
	КнопкиЗаполнить.ЗаполнитПоОстаткамПриРаспределенииПоСкладам.Доступность = РаспределениеОстатковТоваровОрганизацийПоСкладам;
	ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Переоценка.Доступность = НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам;

	УстановитьДоступностьКнопкиЗаполнитьИПровести();

	Колонки     = ЭлементыФормы.Товары.Колонки;
	КолонкиТары = ЭлементыФормы.ВозвратнаяТара.Колонки;

	ЭлементыФормы.ОтражатьВУправленческомУчете.Доступность = НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам;
	
	УСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И Не УСН);

	// Если в перемещении участвует НТТ, то надо сделать видимыми колонки формирования
	// розничной цены.
	Если ЕстьНТТ() И НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.Цена, Истина);
		Колонки.Цена.ТекстШапки = "Розн. цена (" + мВалютаРегламентированногоУчета + ")";
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьЦенуНТТ.Доступность = Истина;
	Иначе
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.Цена, Ложь);
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить.Кнопки.ЗаполнитьЦенуНТТ.Доступность = Ложь;
	КонецЕсли;

	ЭтоНеОборудование = НЕ (ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование);

	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(
		Дата,
		Метаданные().Имя, 
		Неопределено, //видимостью полей шапки в этом документе не управляем, они управляются отдельным механизмом
		Новый Структура("Товары,ВозвратнаяТара",Колонки,КолонкиТары), 
		ПоказыватьВДокументахСчетаУчета, 
		ОтражатьВБухгалтерскомУчете, 
		ОтражатьВНалоговомУчете);
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

	// При перемещении оборудования не указываем качество и документ резерва.
	ВидимостьКолонкиКачество = ВидОперации <> Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование;
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.Качество, ВидимостьКолонкиКачество);
	Колонки.Качество.ИзменятьВидимость = ВидимостьКолонкиКачество;

	ВидимостьКолонкиДокументРезерва = ВидОперации <> Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование И НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам;
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиТары.ДокументРезерва, ВидимостьКолонкиДокументРезерва);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки    .ДокументРезерва, ВидимостьКолонкиДокументРезерва);
	Колонки.ДокументРезерва.ИзменятьВидимость = ВидимостьКолонкиДокументРезерва;
	КолонкиТары.ДокументРезерва.ИзменятьВидимость = ВидимостьКолонкиДокументРезерва;

	ДоступностьПолучателя = истина;
    ДоступностьВнутреннийЗаказ = ложь;

	Если УправлениеЗаказами.ИспользоватьВнутренниеЗаказы(Ложь) И НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам И ЭтоНеОборудование Тогда
		ДоступностьВнутреннийЗаказ = истина;
		Для каждого Строка из Товары цикл
			Если ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
				ДоступностьПолучателя = ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ДоступностьПолучателя Тогда
			Для каждого Строка из ВозвратнаяТара цикл
				Если ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
					ДоступностьПолучателя = ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.ВнутреннийЗаказ       .Доступность = ДоступностьВнутреннийЗаказ;
	ЭлементыФормы.НадписьВнутреннийЗаказ.Доступность = ДоступностьВнутреннийЗаказ;
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( КолонкиТары.ВнутреннийЗаказ, ДоступностьВнутреннийЗаказ);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки    .ВнутреннийЗаказ, ДоступностьВнутреннийЗаказ);
	
	
	
    Колонки.ВнутреннийЗаказ.ИзменятьВидимость = ДоступностьВнутреннийЗаказ;
	КолонкиТары.ВнутреннийЗаказ.ИзменятьВидимость = ДоступностьВнутреннийЗаказ;

	ЭлементыФормы.СкладПолучатель.АвтоОтметкаНезаполненного = ДоступностьПолучателя;
	ЭлементыФормы.НадписьСкладПолучатель.Доступность        = ДоступностьПолучателя;
	ЭлементыФормы.СкладПолучатель.Доступность               = ДоступностьПолучателя;
	
	Если мСложныйУчетНДС И ОтражатьВБухгалтерскомУчете И Не УСН И НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.НДС.Видимость = Истина;
	Иначе
		ЭлементыФормы.ОсновнаяПанель.Страницы.НДС.Видимость = Ложь;
	КонецЕсли;
	
	ВидимостьСчетИАналитикаСписанияНДС = НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость И НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам ;
	
	ВидимостьСчетовСписанияБУ = (НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость
			И ОтражатьВБухгалтерскомУчете
			И ?(мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.ВСоответствииСоСт170НКРФ, Дата >= '20060101', мСпособОтраженияВБухгалтерскомУчетеВключенияНДСВСтоимость = Перечисления.НДССпособОтраженияВБухгалтерскомУчетеПриВключенииВСтоимость.СписыватьНаРасходы)
			) И НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам ;
			
	ВидимостьСчетовСписанияНУ = (Дата >= '20060101'
			И НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость
			И ОтражатьВНалоговомУчете
			И Не УСН
			) И НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам ;
	
	ЭлементыФормы.РамкаГруппыСчетСписанияНДС.Видимость 	= ВидимостьСчетИАналитикаСписанияНДС;		
	ЭлементыФормы.ПанельСчетСписанияБУ.Видимость 		= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.ПанельСчетСписанияНУ.Видимость 		= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.ПодразделениеОрганизации.Видимость 	= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НадписьПодразделениеОрганизации.Видимость = ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.СтатьяЗатратСписанияНДС.Видимость 	= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НадписьСтатьяЗатратСписанияНДС.Видимость = ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НоменклатурнаяГруппа.Видимость 		= ВидимостьСчетИАналитикаСписанияНДС;
	ЭлементыФормы.НадписьНоменклатурнаяГруппа.Видимость = ВидимостьСчетИАналитикаСписанияНДС;
	
	ЭлементыФормы.ПодразделениеОрганизации.Доступность 	= ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НадписьПодразделениеОрганизации.Доступность = ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.СтатьяЗатратСписанияНДС.Доступность 	= ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НадписьСтатьяЗатратСписанияНДС.Доступность = ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НоменклатурнаяГруппа.Доступность 		= ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	ЭлементыФормы.НадписьНоменклатурнаяГруппа.Доступность = ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ;
	
	Если ВидимостьСчетовСписанияБУ ИЛИ ВидимостьСчетовСписанияНУ Тогда
		ЭлементыФормы.ПодразделениеОрганизации.ОтметкаНезаполненного 	= НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) И СтатьяЗатратСписанияНДС.ХарактерЗатрат <> Перечисления.ХарактерЗатрат.Прочие;
		ЭлементыФормы.СтатьяЗатратСписанияНДС.ОтметкаНезаполненного 	= НЕ ЗначениеЗаполнено(СтатьяЗатратСписанияНДС);
	Иначе
		ЭлементыФормы.ПодразделениеОрганизации.ОтметкаНезаполненного 	= Ложь;
		ЭлементыФормы.СтатьяЗатратСписанияНДС.ОтметкаНезаполненного 	= Ложь;
	КонецЕсли;
	
	Если ВидимостьСчетовСписанияБУ Тогда
		ЭлементыФормы.ПанельСчетСписанияБУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияБУ.Страницы.Счет;
	Иначе
		ЭлементыФормы.ПанельСчетСписанияБУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияБУ.Страницы.Надпись;
	КонецЕсли;
	
	Если ВидимостьСчетовСписанияНУ Тогда
		ЭлементыФормы.ПанельСчетСписанияНУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияНУ.Страницы.Счет;
	Иначе
		ЭлементыФормы.ПанельСчетСписанияНУ.ТекущаяСтраница = ЭлементыФормы.ПанельСчетСписанияНУ.Страницы.Надпись;
	КонецЕсли;
	
	ХарактерЗатратБУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетСписанияНДС, Неопределено);
	ХарактерЗатратНУ = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СчетСписанияНДСНУ, Неопределено, "Налоговый");
	
	Если ВидимостьСчетовСписанияБУ И ХарактерЗатратБУ = Перечисления.ХарактерЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДС, ЭлементыФормы.СубконтоСписанияНДС1, ЭлементыФормы.НадписьСубконтоСписанияНДС1,
							   			ЭлементыФормы.СубконтоСписанияНДС2, ЭлементыФормы.НадписьСубконтоСписанияНДС2,
						       			ЭлементыФормы.СубконтоСписанияНДС3, ЭлементыФормы.НадписьСубконтоСписанияНДС3);
	Иначе
		ЭлементыФормы.СубконтоСписанияНДС1.Видимость 		= Ложь;
		ЭлементыФормы.СубконтоСписанияНДС2.Видимость 		= Ложь;
		ЭлементыФормы.СубконтоСписанияНДС3.Видимость 		= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДС1.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДС2.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДС3.Видимость = Ложь;					   
							   
	КонецЕсли;

	Если ВидимостьСчетовСписанияНУ И ХарактерЗатратНУ = Перечисления.ХарактерЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДСНУ, ЭлементыФормы.СубконтоСписанияНДСНУ1, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ2, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ3, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3);
	Иначе
		ЭлементыФормы.СубконтоСписанияНДСНУ1.Видимость 			= Ложь;
		ЭлементыФормы.СубконтоСписанияНДСНУ2.Видимость 			= Ложь;
		ЭлементыФормы.СубконтоСписанияНДСНУ3.Видимость 			= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1.Видимость 	= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2.Видимость 	= Ложь;
		ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3.Видимость 	= Ложь;
	КонецЕсли;
	
	ЭлементыФормы.СкладОтправитель.АвтоОтметкаНезаполненного = НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам;
	ЭлементыФормы.СкладОтправитель.Доступность               = НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам;
	ЭлементыФормы.НадписьСкладОтправитель.Доступность        = НЕ РаспределениеОстатковТоваровОрганизацийПоСкладам;
	Если РаспределениеОстатковТоваровОрганизацийПоСкладам И ЭлементыФормы.СкладОтправитель.ОтметкаНезаполненного Тогда
		ЭлементыФормы.СкладОтправитель.ОтметкаНезаполненного = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьВидимость()

// Процедура устанавливает доступность меню "Проверить"
// командной панели "КоманднаяПанельТовары"
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьМенюПроверить()

	Перем Кнопка;

	УстановитьДоступностьКнопкиПроверитьШтрихКоды();

	Кнопка = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Проверить;
	Если Кнопка.Кнопки.Количество() = 0 Тогда
		ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Удалить(Кнопка);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьМенюПроверить()

// Процедура устанавливает доступность пункта "Штрих-коды" меню "Проверить"
// командной панели "КоманднаяПанельТовары"
//
// Параметры
//  Нет
//
Процедура УстановитьДоступностьКнопкиПроверитьШтрихКоды()

	КнопкаПроверить = ЭлементыФормы.КоманднаяПанельТовары.Кнопки.Проверить;
	Если ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.СканерШтрихКода,
	                                                Справочники.КассыККМ.ПустаяСсылка()).Количество() = 0 Тогда
		Кнопка = КнопкаПроверить.Кнопки.ШтрихКоды;
		КнопкаПроверить.Кнопки.Удалить(Кнопка);
	КонецЕсли;

КонецПроцедуры // УстановитьДоступностьКнопкиПроверитьШтрихКоды()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
	Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.ВнутреннийЗаказ") Тогда
		Если УправлениеЗаказами.ИспользоватьВнутренниеЗаказы(Истина) Тогда
			Если Не ПараметрОснование.ВидЗаказа = Перечисления.ВидыВнутреннегоЗаказа.НаСклад Тогда
				Сообщить("Перемещение товаров можно вводить только на основании заказа со склада", СтатусСообщения.Важное);
				Отказ = Истина;
				Возврат;
			КонецЕсли;
		Иначе
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);

		Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
			СкладОтправитель = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;

		Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
			СкладПолучатель  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НДСвСтоимостиТоваров) Тогда
			НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.НеИзменять;
		КонецЕсли;

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");

	// Установить ограничение - изменять видимость колонок для табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВозвратнаяТара, СтруктураКолонок);

	СтруктураКолонок.Вставить("Цена");
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента             = Дата;
	
	// Определеим параметры сложного учета НДС.
	ОпределитьСложныйУчетНДС();

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	ОбновитьПараметрыУчетнойПолитикиУпр();
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиТовары);
	РаботаСДиалогами.УстановитьВидимостьПринадлежностиНоменклатуры(мКолонкиТовары, Дата);

	// Установить видимость закладки "Возвратная тара"
	РаботаСДиалогами.УстановитьВидимостьЗакладкиВозвратнаяТара(ЭтаФорма);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();

	// установим доступность колонки "Цена" для редактирования
	мМожноМенятьЦенуВДокументе = УправлениеДопПравамиПользователей.РазрешитьРедактированиеЦенВДокументах();

	ЭлементыФормы.Товары.Колонки.Цена.ЭлементУправления.ТолькоПросмотр = НЕ мМожноМенятьЦенуВДокументе;

	ПриИзмененииВидаСклада();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	мКолонкиТовары.Цена.АвтоОтметкаНезаполненного  = НЕ мРазрешитьНулевыеЦеныВРознице;
	
	УстановитьДоступностьМенюПроверить();

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);

	РаботаСДиалогами.УстановитьДоступностьКнопкиЗаполнитьИзТерминалаСбораДанных(ЭтаФорма, мТерминалы);

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "При закрытии" формы.
//
// Параметры:
//  Нет.
//
Процедура ПриЗакрытии()

	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры // ПриЗакрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	ЗаголовокТовары = ?(ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование, "Оборудование (", "Товары (");
	Для каждого СтраницаПанели из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл

		Если СтраницаПанели.Имя = "Тара" Тогда
			СтраницаПанели.Заголовок = "Тара (" + ДокументОбъект.ВозвратнаяТара.Количество() + " поз.)";
		ИначеЕсли СтраницаПанели.Имя = "Товары" Тогда
			СтраницаПанели.Заголовок = ЗаголовокТовары  + ДокументОбъект.Товары.Количество() + " поз.)";
		КонецЕсли;

	КонецЦикла;

	ОбновитьПодвал();

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда, Спецификация;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);
		ЗначениеВыбора.Свойство("Спецификация", Спецификация);

		Если Спецификация <> Неопределено Тогда
			ОбработкаПодбораПоСпецификации(Товары, ЗначениеВыбора);
			
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьТовары" Тогда
			ОбработкаПодбора(Товары, ЗначениеВыбора);

		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратнаяТара" Тогда
			ОбработкаПодбора(ВозвратнаяТара, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Процедура - обработчик внешнего событие, которое возникает при посылке
// внешним приложением сообщения, сформированного в специальном формате.
// Внешнее событие сначала обрабатывается всеми открытыми формами, имеющими
// обработчик этого события, а затем может быть обработано в процедуре модуля
// приложения с именем ОбработкаВнешнегоСобытия().
//
// Параметры:
//  Источник - <Строка>
//           - Источник внешнего события.
//
//  Событие  - <Строка>
//           - Наименование события.
//
//  Данные   - <Строка>
//           - Данные для события.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода
	 Или Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Товары" Тогда
		ОбработкаПодбора(Товары, СтруктураПодбора);
	ИначеЕсли ИмяТекСтраницы = "Тара" Тогда
		ОбработкаПодбора(ВозвратнаяТара, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                Неопределено, Номер,
	                                                Ложь, Неопределено);

	Предупреждение("Подбор серийных номеров в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
// Обработчик уставливается динамически методом "Действие"
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров[Кнопка.Имя];
	КонецЕсли;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование Тогда
		ВнутреннийЗаказ = Неопределено;
		ВидСкладаНТТ    = СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ;
		Для каждого Строка из Товары цикл
			Если ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
				Строка.ВнутреннийЗаказ = "";
				Если ВидСкладаНТТ Тогда
					Строка.ДокументРезерва = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для каждого Строка из ВозвратнаяТара цикл
			Если ЗначениеЗаполнено(Строка.ВнутреннийЗаказ) Тогда
				Строка.ВнутреннийЗаказ = "";
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

//Функция осуществляет выбор внутреннего заказа для заполнения табличной части
Функция ВыбратьВнутреннийЗаказ()
	ФормаЗаказы = Документы.ВнутреннийЗаказ.ПолучитьФормуВыбора();
	ФормаЗаказы.Заголовок = "Выберите внутренний заказ для заполнения перемещения";
	ФормаЗаказы.РежимВыбора = Истина;
	
	ФормаЗаказы.Отбор.ВидЗаказа.Значение  = Перечисления.ВидыВнутреннегоЗаказа.НаСклад;
	ФормаЗаказы.Отбор.ВидЗаказа.Использование = Истина;
	ФормаЗаказы.ЭлементыФормы.ДокументСписок.НастройкаОтбора.ВидЗаказа.Доступность = ложь;
	
	Если ЗначениеЗаполнено(СкладПолучатель) Тогда
		ФормаЗаказы.Отбор.Заказчик.Значение  = СкладПолучатель;
		ФормаЗаказы.Отбор.Заказчик.Использование = Истина;
		ФормаЗаказы.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Заказчик.Доступность = ложь;
	КонецЕсли;
	ТекВнутреннийЗаказ = ФормаЗаказы.ОткрытьМодально();
	Если НЕ ЗначениеЗаполнено(ТекВнутреннийЗаказ) Тогда
		Возврат Неопределено;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
		СкладПолучатель = ТекВнутреннийЗаказ.Заказчик;
	КонецЕсли;
	Возврат ТекВнутреннийЗаказ;
КонецФункции

//Процедура осуществляет заполнение табличной части по внутреннему заказу
Процедура ЗаполнитьПоВНутреннемуЗаказу(ТабЧасть, ИмяТабЧасти, флОчищать = истина)
	Если ВидОперации = Перечисления.ВидыОперацийПеремещениеТоваров.Оборудование Тогда
		Предупреждение("Для оборудования данная операция не предусмотрена");
		Возврат;
	КонецЕсли;
	
	Если флОчищать Тогда
		Если ТабЧасть.Количество() > 0 Тогда
		
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			ТабЧасть.Очистить();
		КонецЕсли;

	КонецЕсли;
	ТекВнутреннийЗаказ = ВнутреннийЗаказ;
	Если НЕ ЗначениеЗаполнено(ТекВнутреннийЗаказ) ИЛИ НЕ флОчищать Тогда
		ТекВнутреннийЗаказ = ВыбратьВнутреннийЗаказ();
		Если НЕ ЗначениеЗаполнено(ТекВнутреннийЗаказ) Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;


	ДатаОстатков = ОбщегоНазначения.ПолучитьДатуОстатков(ЭтотОбъект);
	
	УправлениеЗаказами.ЗаполнитьОстаткамиТоваровСРезервомПоВнутреннемуЗаказу( ЭтотОбъект, ТекВнутреннийЗаказ, ТабЧасть, СкладОтправитель, ДатаОстатков,?(ИмяТабЧасти="ВозвратнаяТара",Перечисления.СтатусыПартийТоваров.ВозвратнаяТара,неопределено));

	ЗаполнитьСчетаУчетаВТабЧасти(ТабЧасть, ИмяТабЧасти, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
    УстановитьВидимость();

Конецпроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить по внутреннему заказу" подменю 
// "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельТоварыЗаполнитьПоВнутреннемуЗаказу(Кнопка)
	
	ЗаполнитьПоВНутреннемуЗаказу(Товары, "Товары");
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоВнутреннемуЗаказу()

// Процедура вызывается при выборе пункта меню "Добавить по внутреннему заказу" подменю 
// "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельТоварыДобавитьПоВнутреннемуЗаказу(Кнопка)
	ЗаполнитьПоВНутреннемуЗаказу(Товары, "Товары",ложь);
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)

	ДействиеПодбор(Товары);

КонецПроцедуры // КоманднаяПанельТоварыДействиеПодбор()

// Процедура вызывается при нажатии кнопки "Изменить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для изменения табличной части
//
Процедура КоманднаяПанельТоварыДействиеИзменить(Кнопка)

	// Получим контекст обработки
	ИзменениеТабличнойЧастиТовары      = Обработки.ОбработкаТабличнойЧастиТовары.Создать();
	ФормаИзменениеТабличнойЧастиТовары = ИзменениеТабличнойЧастиТовары.ПолучитьФорму(,ЭтаФорма);

	//Установим реквизиты и переменые формы.
	ФормаИзменениеТабличнойЧастиТовары.ДокументОбъект       = ЭтотОбъект;
	ФормаИзменениеТабличнойЧастиТовары.мФормаДокумента      = ЭтаФорма;
	ФормаИзменениеТабличнойЧастиТовары.мЕстьНДС             = Ложь; 
	ФормаИзменениеТабличнойЧастиТовары.мЕстьЦенаВРознице    = ЕстьНТТ();
	ФормаИзменениеТабличнойЧастиТовары.мСпособЗаполненияЦен = Неопределено;
	
	//Перенесем табличную часть
	ИзменениеТабличнойЧастиТовары.Товары.Загрузить(Товары.Выгрузить());

	// Открываем форму обработки
	ФормаИзменениеТабличнойЧастиТовары.Открыть();

КонецПроцедуры

// Процедура вызывается при выборе пункта меню "Заполнить по внутреннему заказу" подменю 
// "Заполнить" командной панели "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараЗаполнитьПоВнутреннемуЗаказу(Кнопка)
	ЗаполнитьПоВНутреннемуЗаказу(ВозвратнаяТара, "ВозвратнаяТара");
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьПоВнутреннемуЗаказу()

// Процедура вызывается при выборе пункта меню "Добавить по внутреннему заказу" подменю 
// "Заполнить" командной панели товаров.
//
Процедура КоманднаяПанельВозвратнаяТараДобавитьПоВнутреннемуЗаказу(Кнопка)
	ЗаполнитьПоВНутреннемуЗаказу(ВозвратнаяТара, "ВозвратнаяТара",ложь);
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратная тара", вызывает сервисный механизм для
// подбора номеклатуры в табличную часть "Возвратная тара".
//
Процедура КоманднаяПанельВозвратнаяТараДействиеПодбор(Кнопка)

	ДействиеПодбор(ВозвратнаяТара);

КонецПроцедуры // КоманднаяПанельВозвратнаяТараДействиеПодбор()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "ЗаполнитьЦенуНТТ" командной панели
//
Процедура КоманднаяПанельТоварыЗаполнитьЦенуНТТ(Кнопка)

	ЗаполнитьРозничнуюЦену();

КонецПроцедуры

// Процедура - обработчик события "ПриНажатии" пункта меню "ШтрихКоды"
// "КоманднаяПанельТовары"
//
// Параметры
//  Кнопка – <КнопкаКоманднойПанели> 
//         – кнопка "ШтрихКоды"
//
Процедура КоманднаяПанельТоварыШтрихКоды(Кнопка)

	РаботаСДиалогами.ОткрытьФормуПроверкиШтрихкодов(ЭтаФорма, ЭтотОбъект, Неопределено);

КонецПроцедуры // КоманднаяПанельТоварыШтрихКоды()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура - обработчик нажатия на кнопку "ЗаполнитПоОстаткамПриРаспределенииПоСкладам"
//
Процедура КоманднаяПанельТоварыЗаполнитПоОстаткамПриРаспределенииПоСкладам(Кнопка)

	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	Если глЗначениеПеременной("ПараметрыПартионногоУчета").ВестиПартионныйУчетПоСкладам Тогда
	
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Предупреждение("Укажите организацию");
			Возврат;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(СкладПолучатель) Тогда
			Предупреждение("Укажите склад-получатель");
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.Номенклатура,
			|	ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.ХарактеристикаНоменклатуры,
			|	ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.СерияНоменклатуры,
			|	ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.Качество,
			|	ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.ПартииТоваровНаСкладахБухгалтерскийУчет.Остатки(
			|		&КонДата,
			|		Организация = &Орг
			|			И Склад = &Склад) КАК ПартииТоваровНаСкладахБухгалтерскийУчетОстатки
			|ГДЕ
			|	ПартииТоваровНаСкладахБухгалтерскийУчетОстатки.КоличествоОстаток > 0";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("КонДата", ?(ЭтоНовый(), КонецДня(Дата), Дата));
		Запрос.УстановитьПараметр("Орг",     Организация);
		Запрос.УстановитьПараметр("Склад",   СкладПолучатель);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Предупреждение("Нет данных для заполнения!");
			Возврат;
		Иначе
			Товары.Очистить();
		КонецЕсли;
		
		Обход = РезультатЗапроса.Выбрать();
		Пока Обход.Следующий() Цикл
		
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = Обход.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = Обход.СерияНоменклатуры;
			НоваяСтрока.Количество                 = Обход.КоличествоОстаток;
			НоваяСтрока.Качество                   = Обход.Качество;
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			
		КонецЦикла;
		
	Иначе
		
		Если НЕ ЗначениеЗаполнено(Организация) Тогда
			Предупреждение("Укажите организацию");
			Возврат;
		КонецЕсли;
		
		ТекстЗапроса =
			"ВЫБРАТЬ
			|	ТоварыОрганизацийОстатки.Номенклатура,
			|	ТоварыОрганизацийОстатки.ХарактеристикаНоменклатуры,
			|	ТоварыОрганизацийОстатки.СерияНоменклатуры,
			|	ТоварыОрганизацийОстатки.Качество,
			|	ТоварыОрганизацийОстатки.КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.ТоварыОрганизаций.Остатки(
			|		&КонДата,
			|		Организация = &Орг
			|			И Склад = &ПустСклад
			|			И Комиссионер = &ПустКонтрагент) КАК ТоварыОрганизацийОстатки
			|ГДЕ
			|	ТоварыОрганизацийОстатки.КоличествоОстаток > 0";
		
		Запрос = Новый Запрос;
		Запрос.Текст = ТекстЗапроса;
		
		Запрос.УстановитьПараметр("КонДата",        ?(ЭтоНовый(), КонецДня(Дата), Дата));
		Запрос.УстановитьПараметр("Орг",            Организация);
		Запрос.УстановитьПараметр("ПустКонтрагент", Справочники.Контрагенты.ПустаяСсылка());
		Запрос.УстановитьПараметр("ПустСклад",      Справочники.Склады.ПустаяСсылка());
		
		РезультатЗапроса = Запрос.Выполнить();
		Если РезультатЗапроса.Пустой() Тогда
			Предупреждение("Нет данных для заполнения!");
			Возврат;
		Иначе
			Товары.Очистить();
		КонецЕсли;
		
		Обход = РезультатЗапроса.Выбрать();
		Пока Обход.Следующий() Цикл
		
			НоваяСтрока = Товары.Добавить();
			НоваяСтрока.Номенклатура               = Обход.Номенклатура;
			НоваяСтрока.ХарактеристикаНоменклатуры = Обход.ХарактеристикаНоменклатуры;
			НоваяСтрока.СерияНоменклатуры          = Обход.СерияНоменклатуры;
			НоваяСтрока.Количество                 = Обход.КоличествоОстаток;
			НоваяСтрока.Качество                   = Обход.Качество;
			НоваяСтрока.ЕдиницаИзмерения = НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
			НоваяСтрока.Коэффициент      = НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитПоОстаткамПриРаспределенииПоСкладам()

// Процедура - обработчик нажатия на кнопку "ЗаполнитьОстаткамиПоСкладуОтправителю"
//
Процедура КоманднаяПанельТоварыЗаполнитьОстаткамиПоСкладуОтправителю(Кнопка)

	Если НЕ ЗначениеЗаполнено(СкладОтправитель) Тогда
		Сообщить("Укажите склад-отправитель", СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если Товары.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
	КонецЕсли;
	
	ТекстЗапроса =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыНаСкладахОстатки.Номенклатура,
		|	ТоварыНаСкладахОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыНаСкладахОстатки.СерияНоменклатуры,
		|	ТоварыНаСкладахОстатки.Качество,
		|	ТоварыНаСкладахОстатки.КоличествоОстаток,
		|	NULL КАК ЦенаВРознице
		|ИЗ
		|	РегистрНакопления.ТоварыНаСкладах.Остатки(&КонДата, Склад = &Склад) КАК ТоварыНаСкладахОстатки
		|ГДЕ
		|	ТоварыНаСкладахОстатки.КоличествоОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыВНТТОстатки.Номенклатура,
		|	ТоварыВНТТОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыВНТТОстатки.СерияНоменклатуры,
		|	ЗНАЧЕНИЕ(Справочник.Качество.Новый),
		|	ТоварыВНТТОстатки.КоличествоОстаток,
		|	ТоварыВНТТОстатки.ЦенаВРознице
		|ИЗ
		|	РегистрНакопления.ТоварыВНТТ.Остатки(&КонДата, Склад = &Склад) КАК ТоварыВНТТОстатки
		|ГДЕ
		|	ТоварыВНТТОстатки.КоличествоОстаток > 0
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТоварыВРозницеОстатки.Номенклатура,
		|	ТоварыВРозницеОстатки.ХарактеристикаНоменклатуры,
		|	ТоварыВРозницеОстатки.СерияНоменклатуры,
		|	ТоварыВРозницеОстатки.Качество,
		|	ТоварыВРозницеОстатки.КоличествоОстаток,
		|	NULL
		|ИЗ
		|	РегистрНакопления.ТоварыВРознице.Остатки(&КонДата, Склад = &Склад) КАК ТоварыВРозницеОстатки
		|ГДЕ
		|	ТоварыВРозницеОстатки.КоличествоОстаток > 0";
		
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("КонДата", ?(ЭтоНовый(), КонецДня(Дата), Дата));
	Запрос.УстановитьПараметр("Склад",   СкладОтправитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Предупреждение("Нет данных для заполнения!");
		Возврат;
	Иначе
		Товары.Очистить();
	КонецЕсли;
	
	Обход = РезультатЗапроса.Выбрать();
	Пока Обход.Следующий() Цикл
		
		НоваяСтрока = Товары.Добавить();
		НоваяСтрока.Номенклатура				= Обход.Номенклатура;
		НоваяСтрока.ХарактеристикаНоменклатуры	= Обход.ХарактеристикаНоменклатуры;
		НоваяСтрока.СерияНоменклатуры			= Обход.СерияНоменклатуры;
		НоваяСтрока.Количество					= Обход.КоличествоОстаток;
		НоваяСтрока.Цена						= Обход.ЦенаВРознице;
		НоваяСтрока.Качество					= Обход.Качество;
		НоваяСтрока.ЕдиницаИзмерения			= НоваяСтрока.Номенклатура.ЕдиницаХраненияОстатков;
		НоваяСтрока.Коэффициент					= НоваяСтрока.ЕдиницаИзмерения.Коэффициент;
		
	КонецЦикла;

	ЗаполнитьСчетаУчетаВТабЧасти(Товары, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
КонецПроцедуры // КоманднаяПанельТоварыЗаполнитьОстаткамиПоСкладуОтправителю()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Переоценка"
Процедура КоманднаяПанельТоварыПереоценка(Кнопка)

	УправлениеРозничнойТорговлей.ВвестиПереоценкуНаОснованииПрихода(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // КоманднаяПанельТоварыПереоценка()

// Процедура - обработчик события "Нажатие" кнопки "ПоискПоШтрихКоду" в ТЧ "Товары".
//
Процедура КоманднаяПанельТоварыПоискПоШтрихКоду(Кнопка)

	Результат = РаботаСТорговымОборудованием.ВвестиШтрихкод();

	Если Не ПустаяСтрока(Результат) Тогда
		ПолучитьСерверТО().ОбработатьВведенныйШтрихкод(Результат, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // КоманднаяПанельТоварыПоискПоШтрихКоду()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить и провести" командной панели формы,
// вызывает заполнение документа с проведением.
//
Процедура ДействияФормыДействиеЗаполнитьИПровести(Кнопка)

	// Заполнять с проведением можно документы с текущую датой
	Если НачалоДня(Дата) = НачалоДня(ТекущаяДата()) Тогда
		Если НЕ ЭтоНовый() Тогда

			// Если документ ранее был записан, то он будет переноситься в конец дня из-за оперативного проведения, о чем следует предупредить.
			Ответ = Вопрос("В режиме заполнения с проведением документ будет проводиться оперативно. " + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
			Если НЕ Ответ = КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

	// Очистим записи документа по размещению, если он был ранее проведен
	Если Проведен Тогда
		НачатьТранзакцию();

		НаборТовары = РегистрыНакопления.ТоварыНаСкладах.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();

		НаборТовары = РегистрыНакопления.ТоварыВРознице.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();

		НаборТовары = РегистрыНакопления.ТоварыВРезервеНаСкладах.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();

		НаборТовары = РегистрыНакопления.ТоварыОрганизаций.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();

		НаборТовары = РегистрыНакопления.ТоварыКПередачеСоСкладов.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();

		НаборТовары = РегистрыНакопления.ТоварыВНТТ.СоздатьНаборЗаписей();
		НаборТовары.Отбор.Регистратор.Установить(Ссылка);
		НаборТовары.Записать();
	КонецЕсли;

	// Заполнение документа
	ЗаполнитьПоСериям();

	Если Проведен Тогда
		ОтменитьТранзакцию();
	КонецЕсли;

	РаботаСДиалогами.ПровестиДокументВФормеОперативно(ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

	УстановитьДоступностьКнопкиЗаполнитьИПровести();
	
	// Определеим параметры сложного учета НДС.
	ОпределитьСложныйУчетНДС();
	ОбновитьПараметрыУчетнойПолитикиУпр();

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");

	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Товары,ВозвратнаяТара"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Товары,ВозвратнаяТара"), Неопределено, ОтражатьВНалоговомУчете);
	
	УстановитьВидимость();

КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Товары,ВозвратнаяТара"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	ОбновитьПараметрыУчетнойПолитикиУпр();
	Если НЕ (Организация.ОтражатьВРегламентированномУчете
	       И ЗначениеЗаполнено(мУчетнаяПолитикаУпр) И мУчетнаяПолитикаУпр["ВестиУчетТоваровОрганизацийВРазрезеСкладов"])
	     И РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
		РаспределениеОстатковТоваровОрганизацийПоСкладам = Ложь;
	КонецЕсли;
	ОпределитьСложныйУчетНДС();
	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СкладОтправитель.
//
Процедура СкладОтправительПриИзменении(Элемент)

	РаботаСДиалогами.УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	ПриИзмененииВидаСклада();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СкладПолучатель.
//
Процедура СкладПолучательПриИзменении(Элемент)

	РаботаСДиалогами.УстановитьЗаголовокФормыДокументаСУчетомСклада(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма, СкладПолучатель);

	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	ПриИзмененииВидаСклада();

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СкладОтправитель".
//
Процедура СкладОтправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ОтправительНТТ = (СкладОтправитель.ВидСклада  = Перечисления.ВидыСкладов.НТТ);
	ПолучательНТТ  = (СкладПолучатель.ВидСклада   = Перечисления.ВидыСкладов.НТТ);
	ВыбранныйНТТ   = (ВыбранноеЗначение.ВидСклада = Перечисления.ВидыСкладов.НТТ);

	Если ВыбранныйНТТ
	   И НЕ ОтправительНТТ Тогда

		ДокументЗаполнен = (Товары.Количество() > 0);

		Если ДокументЗаполнен Тогда
			Текст = "Заполнить розничные цены для товаров в соответствии с";

			Если ВыбранныйНТТ
			   И НЕ ПолучательНТТ Тогда
				Текст = Текст + " остатками склада " + ВыбранноеЗначение + ".";
			Иначе
				Текст = Текст + " установленным типом цен для склада " + СкладПолучатель + ".";
			КонецЕсли;

			Ответ = Вопрос(Текст + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

			Если Ответ = КодВозвратаДиалога.Да Тогда
				СкладОтправитель = ВыбранноеЗначение;
				ЗаполнитьРозничнуюЦену();
			Иначе
				СтандартнаяОбработка = Ложь; // отказ от выбора
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "СкладПолучатель".
//
Процедура СкладПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	ОтправительНТТ = (СкладОтправитель.ВидСклада  = Перечисления.ВидыСкладов.НТТ);
	ПолучательНТТ  = (СкладПолучатель.ВидСклада   = Перечисления.ВидыСкладов.НТТ);
	ВыбранныйНТТ   = (ВыбранноеЗначение.ВидСклада = Перечисления.ВидыСкладов.НТТ);

	Если ВыбранныйНТТ
	   И НЕ ПолучательНТТ Тогда

		ДокументЗаполнен = (Товары.Количество() > 0);

		Если ДокументЗаполнен Тогда
			Текст = "Заполнить розничные цены для товаров в соответствии с";

			Если ОтправительНТТ Тогда
				Текст = Текст + " остатками склада " + СкладОтправитель + ".";
			Иначе
				Текст = Текст + " установленным типом цен для склада " + ВыбранноеЗначение + ".";
			КонецЕсли;

			Ответ = Вопрос(Текст + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);

			Если Ответ = КодВозвратаДиалога.Да Тогда
				СкладПолучатель = ВыбранноеЗначение;
				ЗаполнитьРозничнуюЦену();
			Иначе
				СтандартнаяОбработка = Ложь; // отказ от выбора
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода НДСвСтоимостиТоваров.
//
Процедура НДСвСтоимостиТоваровПриИзменении(Элемент)
	
	Если НДСвСтоимостиТоваров = Перечисления.ДействиеНДСВСтоимостиТоваров.ВключитьВСтоимость Тогда
		ЗаполнитьСчетаСписанияНДСЗначениямиПоУмолчанию(Истина);
	КонецЕслИ;
	
	УстановитьВидимость();
	
КонецПроцедуры // НДСвСтоимостиТоваровПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатратСписанияНДС.
//
Процедура СтатьяЗатратСписанияНДСПриИзменении(Элемент)
	
	СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, СтатьяЗатратСписанияНДС);
	СчетСписанияНДС = СчетаУчетаЗатрат.СчетУчетаБУ;
	СчетСписанияНДСНУ = СчетаУчетаЗатрат.СчетУчетаНУ;
	Если СтатьяЗатратСписанияНДС.ВидЗатрат = Перечисления.ВидыЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДС, ЭлементыФормы.СубконтоСписанияНДС1, ЭлементыФормы.НадписьСубконтоСписанияНДС1,
							   			ЭлементыФормы.СубконтоСписанияНДС2, ЭлементыФормы.НадписьСубконтоСписанияНДС2,
						       			ЭлементыФормы.СубконтоСписанияНДС3, ЭлементыФормы.НадписьСубконтоСписанияНДС3);
		РаботаСДиалогами.ПриВыбореСчета(СчетСписанияНДСНУ, ЭлементыФормы.СубконтоСписанияНДСНУ1, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ1,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ2, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ2,
								 		ЭлементыФормы.СубконтоСписанияНДСНУ3, ЭлементыФормы.НадписьСубконтоСписанияНДСНУ3);
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры // СтатьяЗатратСписанияНДСПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетСписанияНДС
//
Процедура СчетСписанияНДСПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке();
	
	УстановитьВидимость();
	
КонецПроцедуры // СчетСписанияНДСПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетСписанияНДС
//
Процедура СчетСписанияНДСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетСписанияНДСОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода СубконтоСписанияНДС1
//
Процедура СубконтоСписанияНДС1НачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры // СубконтоСписанияНДС1НачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоСписанияНДС1
//
Процедура СубконтоСписанияНДС1ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке(Истина);
	Если ЗначениеЗаполнено(СчетСписанияНДСНУ) Тогда
		Если ТипЗнч(СубконтоСписанияНДСНУ1) = ТипЗнч(СубконтоСписанияНДС1) Тогда
			СубконтоСписанияНДСНУ1 = СубконтоСписанияНДС1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоСписанияНДС1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоСписанияНДС2
//
Процедура СубконтоСписанияНДС2ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке(Истина);
	Если ЗначениеЗаполнено(СчетСписанияНДСНУ) Тогда
		Если ТипЗнч(СубконтоСписанияНДСНУ2) = ТипЗнч(СубконтоСписанияНДС2) Тогда
			СубконтоСписанияНДСНУ2 = СубконтоСписанияНДС2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоСписанияНДС2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоСписанияНДС3
//
Процедура СубконтоСписанияНДС3ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчетаВШапке(Истина);
	Если ЗначениеЗаполнено(СчетСписанияНДСНУ) Тогда
		Если ТипЗнч(СубконтоСписанияНДСНУ3) = ТипЗнч(СубконтоСписанияНДС3) Тогда
			СубконтоСписанияНДСНУ3 = СубконтоСписанияНДС3;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоСписанияНДС3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетСписанияНДСНУ.
//
Процедура СчетСписанияНДСНУПриИзменении(Элемент)
	
	УстановитьВидимость();
	
КонецПроцедуры // СчетСписанияНДСНУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетСписанияНДСНУ
//
Процедура СчетСписанияНДСНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // СчетСписанияНДСНУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" флажка "РаспределениеОстатковТоваровОрганизацийПоСкладам".
//
Процедура РаспределениеОстатковТоваровОрганизацийПоСкладамПриИзменении(Элемент)

	Если РаспределениеОстатковТоваровОрганизацийПоСкладам Тогда
	
		ОтражатьВУправленческомУчете = Истина;
		ОтражатьВБухгалтерскомУчете  = Ложь;
		ОтражатьВНалоговомУчете      = Ложь;
		СкладОтправитель = Неопределено;
		Заказ            = Неопределено;
		ВидОперации      = Перечисления.ВидыОперацийПеремещениеТоваров.ТоварыПродукция;
		
	Иначе
	
		СкладОтправитель             = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОсновнойСклад");
		
		ОтражатьВУправленческомУчете = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВУправленческомУчете");
		ОтражатьВБухгалтерскомУчете  = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВБухгалтерскомУчете");
		ОтражатьВНалоговомУчете      = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
		
		РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

		ОтражатьВБухгалтерскомУчетеПриИзменении(ЭлементыФормы.ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры // РаспределениеОстатковТоваровОрганизацийПоСкладамПриИзменении()

//Процедура-обработчик события "ПриИзменении" поля ввода ВнутреннийЗаказ в шапке
Процедура ВнутреннийЗаказПриИзменении(Элемент)
	ПриИзмененииВнутреннегоЗаказа(ВнутреннийЗаказ);
КонецПроцедуры // ЗаказПриИзменении()

//Процедура-обработчик события "НачалоВыбора" поля ввода ВнутреннийЗаказ в шапке
Процедура ВнутреннийЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораВнутреннегоЗаказа(Элемент, СтандартнаяОбработка)
КонецПроцедуры // ЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

// Процедура - обработчик события "ПриВыводеСтроки" поля табличной части "Товары".
//
Процедура ТоварыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиТовары, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "Товары". 
//
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);
	Если НоваяСтрока Тогда
    	СтрокаТабличнойЧасти.ВнутреннийЗаказ = ВнутреннийЗаказ;
	КонецЕсли;
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//Услуг в этом документе быть не должно.
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.Услуга Тогда
			Предупреждение("Услуг в этом документе быть не должно."); 
			СтандартнаяОбработка = Ложь;  // Отказ от выбора.
		КонецЕсли; 
	КонецЕсли; 
КонецПроцедуры // ТоварыНоменклатураОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Товары".
//
Процедура ТоварыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	// Берем из самого реквизита Номенклатура
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;

	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	УстановитьЦенуНоменклатуры(СтрокаТабличнойЧасти);

	// Поменяем способ редактирования цены.
	УстановитьСвойстваПоляВводаЦены(СтрокаТабличнойЧасти.Номенклатура);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Товары", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	СтрокаТабличнойЧасти.Качество = Справочники.Качество.Новый;

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики
// в строке табличной части "Товары".
//
Процедура ТоварыХарактеристикаНоменклатурыПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	УстановитьЦенуНоменклатуры(СтрокаТабличнойЧасти);

КонецПроцедуры // ТоварыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаПриИзменении(Элемент)

	// Установить коэффициент
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТабличнойЧасти.Коэффициент = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент; 
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // ТоварыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // ТоварыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Товары".
//
Процедура ТоварыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода цены в рознице
// в строке табличной части "Товары".
//
Процедура ТоварыЦенаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;

	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтандартнаяОбработка = Ложь;
		Предупреждение("Не выбрана позиция номенклатуры!"); 
		Возврат;
	КонецЕсли; 

	Элемент.СписокВыбора = УправлениеРозничнойТорговлей.СформироватьСписокРозничныхЦен(СтрокаТабличнойЧасти.Номенклатура,
	                                                      СтрокаТабличнойЧасти.ЕдиницаИзмерения,
	                                                      СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры,
	                                                      СкладОтправитель, мВалютаРегламентированногоУчета,
	                                                      Дата);

КонецПроцедуры // ТоварыЦенаНачалоВыбораИзСписка()

// Процедура - обработчик события "НачалоВыбора" поля Заказ покупателя
// в строке табличной части "Товары".
//
Процедура ТоварыДокументРезерваНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	Если СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		СтандартнаяОбработка = ложь;
		Если ЗначениеЗаполнено(ТекДанные.ВнутреннийЗаказ) Тогда
			ответ = Вопрос("Списывать товар из резерва?", РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Да);
			Если ответ = КодВозвратаДиалога.Да Тогда
				ТекДанные.ДокументРезерва = ТекДанные.ВнутреннийЗаказ;
			Иначе
				ТекДанные.ДокументРезерва = Неопределено;
			КонецЕсли;
		Иначе
			Предупреждение("Не выбран внутренний заказ. При перемещении в НТТ использовать документ резерва можно, только если выбран внутренний заказ.");
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ТекДанные.ВнутреннийЗаказ) Тогда
			СтандартнаяОбработка = ложь;
			ТекДанные.ДокументРезерва = ТекДанные.ВнутреннийЗаказ;
		Иначе
			СтруктураОтбора = Новый Структура;
			Если ЗначениеЗаполнено(Организация) Тогда
				СтруктураОтбора.Вставить("Организация", Организация);
			КонецЕсли;
			МассивДоступныеПоляОтбора = Новый Массив;
			МассивДоступныеПоляОтбора.Добавить("Организация");
			ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
			УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Товары", ДопПараметры);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУПриИзменении(Элемент)

	ТекДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	Если НЕ мСчета003_01.НайтиПоЗначению(ТекДанные.СчетУчетаБУ) = Неопределено
	   И НЕ мСчета003_01.НайтиПоЗначению(ТекДанные.ПринятыеСчетУчетаБУ) = Неопределено Тогда
		// Это давальческие материалы. Не проводятся по НУ.
		ТекДанные.СчетУчетаНУ         = Неопределено;
		ТекДанные.ПринятыеСчетУчетаНУ = Неопределено;
	Иначе
		ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(ТекДанные);
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыНовыйСчетУчетаБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТЧ.НовыйСчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыНовыйСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Товары".
//
Процедура ТоварыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Товары.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыПринятыеСчетУчетаБУПриИзменении(Элемент)

	ТекДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	Если НЕ мСчета003_01.НайтиПоЗначению(ТекДанные.СчетУчетаБУ) = Неопределено
	   И НЕ мСчета003_01.НайтиПоЗначению(ТекДанные.ПринятыеСчетУчетаБУ) = Неопределено Тогда
		// Это давальческие материалы. Не проводятся по НУ.
		ТекДанные.СчетУчетаНУ         = Неопределено;
		ТекДанные.ПринятыеСчетУчетаНУ = Неопределено;
	Иначе
		ТекДанные.ПринятыеСчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));
	КонецЕсли;

КонецПроцедуры // ТоварыПринятыеСчетУчетаБУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
// в строке табличной части "Товары".
//
Процедура ТоварыНовыйПринятыеСчетУчетаБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.Товары.ТекущиеДанные;
	СтрокаТЧ.НовыйПринятыеСчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));

КонецПроцедуры // ТоварыНовыйПринятыеСчетУчетаБУПриИзменении()

//Процедура-обработчик события "ПриИзменении" поля ввода "ВнутреннийЗаказ" табличной части Товары
Процедура ТоварыВнутреннийЗаказПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.Товары.ТекущиеДанные;
	ПриИзмененииВнутреннегоЗаказа(ТекДанные.ВнутреннийЗаказ);
	Если ЗначениеЗаполнено(ТекДанные.ДокументРезерва) И ТекДанные.ДокументРезерва <> ТекДанные.ВнутреннийЗаказ 
		и ЗначениеЗаполнено(ТекДанные.ВнутреннийЗаказ) Тогда
		ТекДанные.ДокументРезерва = неопределено;
	КонецЕсли;	

КонецПроцедуры

//Процедура-обработчик события "Очистка" поля ввода "ВнутреннийЗаказ" табличной части Товары
Процедура ТоварыВнутреннийЗаказОчистка(Элемент, СтандартнаяОбработка)
	УстановитьВидимость();

	Если СкладПолучатель.ВидСклада = Перечисления.ВидыСкладов.НТТ Тогда
		ЭлементыФормы.Товары.ТекущиеДанные.ДокументРезерва = Неопределено;
	КонецЕсли;

КонецПроцедуры

//Процедура-обработчик события "НачалоВыбора" поля ввода "ВнутреннийЗаказ" табличной части Товары
Процедура ТоварыВнутреннийЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораВнутреннегоЗаказа(Элемент, СтандартнаяОбработка,"Товары")
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНАЯ ТАРА

// Процедура - обработчик события "ПриНачалеРедактирования" поля ввода номенклатуры
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПриНачалеРедактирования(Элемент, НоваяСтрока)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	Если НоваяСтрока Тогда
		СтрокаТабличнойЧасти.ВнутреннийЗаказ = ВнутреннийЗаказ;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода номенклатуры
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	//Услуг в этом документе быть не должно.
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если ВыбранноеЗначение.Услуга Тогда
			Предупреждение("Услуг в этом документе быть не должно."); 
			СтандартнаяОбработка = Ложь;  // Отказ от выбора.
		КонецЕсли; 
	КонецЕсли; 

КонецПроцедуры // ВозвратнаяТараНоменклатураОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении возвратной тары.
	ОбработкаТабличныхЧастей.ПриИзмененииВозвратнойТарыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратнаяТара", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // ВозвратнаяТараНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ покупателя
// в строке табличной части "Возвратная тара".
//
Процедура ВозвратнаяТараДокументРезерваНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.ВнутреннийЗаказ) Тогда
		СтандартнаяОбработка = ложь;
		ТекДанные.ДокументРезерва = ТекДанные.ВнутреннийЗаказ;
	Иначе	

		СтруктураОтбора = Новый Структура;
		Если ЗначениеЗаполнено(Организация) Тогда
			СтруктураОтбора.Вставить("Организация", Организация);
		КонецЕсли;
		

		МассивДоступныеПоляОтбора = Новый Массив;
		МассивДоступныеПоляОтбора.Добавить("Организация");
		ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
		
		УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ВозвратнаяТара", ДопПараметры);
    КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараСчетУчетаБУПриИзменении(Элемент)

	ОбработкаТабличныхЧастей.ЗаполнитьСчетНУпоСчетуБУТабЧасти(ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетУчетаБУ
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараНовыйСчетУчетаБУПриИзменении(Элемент)

	СтрокаТЧ = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	СтрокаТЧ.НовыйСчетУчетаНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", Элемент.Значение));

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаБУ
// в строке табличной части "ВозвратнаяТара".
//
Процедура ВозвратнаяТараНовыйСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратнаяТара".
//
Процедура ВозвратнаяТараПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратнаяТара, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // ВозвратнаяТараПриВыводеСтроки()

//Процедура-обработчик события "НачалоВыбора" поля ввода "ВнутреннийЗаказ" табличной части ВозвратнаяТара
Процедура ВозвратнаяТараВнутреннийЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	НачалоВыбораВнутреннегоЗаказа(Элемент, СтандартнаяОбработка,"ВозвратнаяТара")
КонецПроцедуры

//Процедура-обработчик события "ПриИзменении" поля ввода "ВнутреннийЗаказ" табличной части ВозвратнаяТара
Процедура ВозвратнаяТараВнутреннийЗаказПриИзменении(Элемент)
	ТекДанные = ЭлементыФормы.ВозвратнаяТара.ТекущиеДанные;
	ПриИзмененииВнутреннегоЗаказа(ТекДанные.ВнутреннийЗаказ);
	Если ЗначениеЗаполнено(ТекДанные.ДокументРезерва) И ТекДанные.ДокументРезерва <> ТекДанные.ВнутреннийЗаказ
		И ЗначениеЗаполнено(ТекДанные.ВнутреннийЗаказ) Тогда
		ТекДанные.ДокументРезерва = неопределено;
	КонецЕсли;	
КонецПроцедуры

//Процедура-обработчик события "Очистка" поля ввода "ВнутреннийЗаказ" табличной части ВозвратнаяТара
Процедура ВозвратнаяТараВнутреннийЗаказОчистка(Элемент, СтандартнаяОбработка)
	УстановитьВидимость();
КонецПроцедуры

// Обработчик события "Нажатие" кнопки "ОткрытьФормуНастройкиАдресногоСклада" в подменю "Действия".
//
Процедура ДействияФормыОткрытьФормуНастройкиБланкаТоварногоНаполнения(Кнопка)

	РаботаСДиалогами.ОткрытьФормуНастройкиБланкаТоварногоНаполнения(ЭтотОбъект);

КонецПроцедуры // ДействияФормыОткрытьФормуНастройкиАдресногоСклада()

// Процедура вызывается при выборе пункта "Из терминала сбора данных"
// меню кнопки "Заполнить" командной панели табличного поля "Товары"
//
Процедура КоманднаяПанельТоварыИзТерминалаСбораДанных(Кнопка)

	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);

КонецПроцедуры

//////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мМожноМенятьЦенуВДокументе    = Истина;

мКолонкиТовары         = ЭлементыФормы.Товары.Колонки;
мКолонкиВозвратнаяТара = ЭлементыФормы.ВозвратнаяТара.Колонки;

мИспользоватьТолькоСборочныеСпецификации = глЗначениеПеременной("ИспользоватьТолькоСборочныеСпецификации");

мТерминалы                    = ПолучитьСерверТО().ПолучитьСписокУстройств(
									Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных);