////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мПрименениеУСН;

Перем мКурсВалютыУпрУчета;
Перем мКратностьВалютыУпрУчета;

Перем мКолонкиПродукция, мКолонкиПолучатели, мКолонкиМатериалы, мКолонкиРаспределениеМатериалов;
Перем мКолонкиВозвратныеОтходы, мКолонкиРаспределениеВозвратныхОтходов;
Перем мКолонкиТехнологическиеОперации, мКолонкиРаспределениеТехнологическихОпераций;
Перем мКолонкиПрочиеЗатраты, мКолонкиРаспределениеПрочихЗатрат;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

Перем мОтражатьВРегламентированномУчете;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
Перем мВедениеУчетаЗатратПоПроектам;
////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Продукция,ЭлементыФормы.КоманднаяПанельПродукция.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Материалы,ЭлементыФормы.КоманднаяПанельМатериалы.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаспределениеМатериалов,ЭлементыФормы.КоманднаяПанельРаспределениеМатериалов.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПрочиеЗатраты,ЭлементыФормы.КоманднаяПанельПрочиеЗатраты.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаспределениеПрочихЗатрат,ЭлементыФормы.КоманднаяПанельРаспределениеПрочихЗатрат.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ТехнологическиеОперации,ЭлементыФормы.КоманднаяПанельТехнологическиеОперации.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Исполнители,ЭлементыФормы.КоманднаяПанельИсполнители);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаспределениеТехнологическихОпераций,ЭлементыФормы.КоманднаяПанельРаспределениеТехнологическихОпераций.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВозвратныеОтходы,ЭлементыФормы.КоманднаяПанельВозвратныеОтходы.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаспределениеВозвратныхОтходов,ЭлементыФормы.КоманднаяПанельРаспределениеВозвратныхОтходов.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура заполняет направление выпуска в ТЧ продукция
//
Процедура ЗаполнитьНаправлениеВыпуска(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.НаправлениеВыпуска = СтрокаТабличнойЧасти.Номенклатура.НаправлениеВыпуска;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаправлениеВыпуска) Тогда
		СтрокаТабличнойЧасти.НаправлениеВыпуска = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновноеНаправлениеВыпуска");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.НаправлениеВыпуска) Тогда
		СтрокаТабличнойЧасти.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаСклад;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Номенклатура.Услуга
	   И СтрокаТабличнойЧасти.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаСклад Тогда
		СтрокаТабличнойЧасти.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаЗатраты;
	КонецЕсли;
	
КонецПроцедуры

// Процедура
//
Процедура РассчитатьСуммуТехОперации(ТекущаяСтрока)
	
	Если мКурсВалютыУпрУчета = 0 Тогда
		ОбщегоНазначения.Сообщение("Не задан курс валюты """ + мВалютаУправленческогоУчета + """ по расчетам с персоналом!", СтатусСообщения.Внимание);
	КонецЕсли;
	Если мКратностьВалютыУпрУчета = 0 Тогда
		ОбщегоНазначения.Сообщение("Не задана кратность валюты """ + мВалютаУправленческогоУчета + """ по расчетам с персоналом!", СтатусСообщения.Внимание);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(ТекущаяСтрока.Валюта)
	 ИЛИ мКурсВалютыУпрУчета = 0
	 ИЛИ мКратностьВалютыУпрУчета = 0
	 ИЛИ ТекущаяСтрока.Количество <= 0
	 ИЛИ ТекущаяСтрока.Расценка = 0 Тогда
		ТекущаяСтрока.Сумма     = 0;
		ТекущаяСтрока.СуммаРегл = 0;
	Иначе
		ТекущаяСтрока.СуммаВВалютеРасценки = ТекущаяСтрока.Расценка * ТекущаяСтрока.Количество;
		Если ТекущаяСтрока.Валюта = мВалютаРегламентированногоУчета Тогда
			КурсВалютыРасценки      = 1;
			КратностьВалютыРасценки = 1;
		ИначеЕсли ТекущаяСтрока.Валюта = мВалютаУправленческогоУчета Тогда	
			КурсВалютыРасценки      = мКурсВалютыУпрУчета;
			КратностьВалютыРасценки = мКратностьВалютыУпрУчета;
		Иначе	
			Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", ТекущаяСтрока.Валюта));
			КурсВалютыРасценки      = Структура.Курс;
			КратностьВалютыРасценки = Структура.Кратность;
		КонецЕсли; 
		
		ТекущаяСтрока.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			ТекущаяСтрока.СуммаВВалютеРасценки,
			ТекущаяСтрока.Валюта,
			мВалютаУправленческогоУчета,
			КурсВалютыРасценки,
			мКурсВалютыУпрУчета,
			КратностьВалютыРасценки,
			мКратностьВалютыУпрУчета);
			
		ТекущаяСтрока.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			ТекущаяСтрока.СуммаВВалютеРасценки,
			ТекущаяСтрока.Валюта,
			мВалютаРегламентированногоУчета,
			КурсВалютыРасценки,      1,
			КратностьВалютыРасценки, 1);
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуТехОперации()

// Запоминаем курс упр валюты на дату документа
//
// Параметры
//  ДатаКурса - дата курса
//
Процедура ПолучитьКурсУпрВалюты(ДатаКурса)

	Если мВалютаУправленческогоУчета = мВалютаРегламентированногоУчета Тогда
		мКурсВалютыУпрУчета = 1;
		мКратностьВалютыУпрУчета = 1;
	Иначе	
		Структура = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(ДатаКурса, Новый Структура("Валюта", мВалютаУправленческогоУчета));
		мКурсВалютыУпрУчета = Структура.Курс;
		мКратностьВалютыУпрУчета = Структура.Кратность;
	КонецЕсли; 

КонецПроцедуры // ПолучитьКурсУпрВалюты()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена                = Ложь;
	ЕстьСерия               = Истина;
	РазворачиватьДоКачества = Ложь;
	ПодбиратьУслуги         = Ложь;
	ОтборУслугПоСправочнику = Истина;
	

	СтруктураПараметровПодбора = Новый Структура();

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");

	Если ТабличнаяЧасть = Продукция Тогда
		Команда                 = "ПодборВТабличнуюЧастьПродукция";
		ИмяТабличнойЧасти       = "Продукция";
		РазворачиватьДоКачества = Истина;
		ПодбиратьУслуги         = Истина;
		ОтборУслугПоСправочнику = Ложь;
	ИначеЕсли ТабличнаяЧасть = Материалы Тогда

		Команда                 = "ПодборВТабличнуюЧастьМатериалы";
		ИмяТабличнойЧасти       = "Материалы";
		ПодбиратьУслуги         = Истина;
		ОтборУслугПоСправочнику = Ложь;

		СписокЗапросов.Добавить("ОстаткиПроизводство","По остаткам в производстве");

		СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
		СтруктураПараметровПодбора.Вставить("Подразделение"        , Подразделение);

	ИначеЕсли ТабличнаяЧасть = РаспределениеМатериалов Тогда

		Команда                 = "ПодборВТабличнуюЧастьРаспределениеМатериалов";
		ИмяТабличнойЧасти       = "РаспределениеМатериалов";
		ПодбиратьУслуги         = Истина;
		ОтборУслугПоСправочнику = Ложь;

		СписокЗапросов.Добавить("ОстаткиПроизводство","По остаткам в производстве");

		СтруктураПараметровПодбора.Вставить("Организация"          , Организация);
		СтруктураПараметровПодбора.Вставить("Подразделение"        , Подразделение);

	ИначеЕсли ТабличнаяЧасть = ВозвратныеОтходы Тогда
		Команда           = "ПодборВТабличнуюЧастьВозвратныеОтходы";
		ИмяТабличнойЧасти = "ВозвратныеОтходы";	
		ЕстьЦена  = Истина;
	КонецЕсли;

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад"                  , Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"               , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ВалютаДокумента"        , Валюта);
	СтруктураПараметровПодбора.Вставить("РазворачиватьДоКачества", РазворачиватьДоКачества);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"        , ПодбиратьУслуги);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", ОтборУслугПоСправочнику);
	СтруктураПараметровПодбора.Вставить("Заголовок", "Подбор номенклатуры в документ " + 
	                                    ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, Качество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Характеристика",   Характеристика);
	ЗначениеВыбора.Свойство("Номенклатура",     Номенклатура);
	ЗначениеВыбора.Свойство("Серия",            Серия);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество",       Количество);
	ЗначениеВыбора.Свойство("Цена",             Цена);
	ЗначениеВыбора.Свойство("Качество",         Качество);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура",               Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры",          Серия);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения",           ЕдиницаИзмерения);
	Если ТабличнаяЧасть = Продукция Тогда
		Качество = ?(Номенклатура.Услуга, Справочники.Качество.ПустаяСсылка(), ?(ЗначениеЗаполнено(Качество), Качество, Справочники.Качество.Новый));
		СтруктураОтбора.Вставить("Качество",               Качество);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Рассчитать реквизиты табличной части.
		Если ТабличнаяЧасть <> РаспределениеМатериалов Тогда

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
			ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

		Иначе

			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;

		КонецЕсли;

	Иначе

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура      			= Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры 			= Серия;
		СтрокаТабличнойЧасти.ВидВыпуска                 = Перечисления.ВидыВыпуска.Выпуск;
			
		СтрокаТабличнойЧасти.Количество     = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения  = ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент       = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		
		Если Не ТабличнаяЧасть.Выгрузить().Колонки.Найти("НоменклатурнаяГруппа") = Неопределено Тогда
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = Номенклатура.НоменклатурнаяГруппа;
		КонецЕсли;

		// Рассчитать реквизиты табличной части.
		Если ТабличнаяЧасть <> РаспределениеМатериалов Тогда
			ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Истина);
		КонецЕсли;
		
		Если ТабличнаяЧасть = Продукция Тогда

			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Продукция", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
			СтрокаТабличнойЧасти.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
			СтрокаТабличнойЧасти.Качество     = Качество;
			ЗаполнитьНаправлениеВыпуска(СтрокаТабличнойЧасти);
			
		ИначеЕсли ТабличнаяЧасть = РаспределениеМатериалов Тогда
			
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "РаспределениеМатериалов", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию( СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
			СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
			
		ИначеЕсли ТабличнаяЧасть = РаспределениеВозвратныхОтходов Тогда
			
			//не надо учитывать статью затрат при определении счета затрат
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию( СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "РаспределениеВозвратныхОтходов", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
		ИначеЕсли ТабличнаяЧасть = ВозвратныеОтходы Тогда
			
			СтрокаТабличнойЧасти.Цена = Цена;
			ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
			СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
			
			СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию( СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
			СтрокаТабличнойЧасти.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
			
			СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
			ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл( СтрокаТабличнойЧасти, "ВозвратныеОтходы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
			
		ИначеЕсли ТабличнаяЧасть = Материалы Тогда
			
			СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
			
		КонецЕсли;

	КонецЕсли; // СтрокаТабличнойЧасти <> Неопределено

	Если ТабличнаяЧасть = Материалы Тогда
		ТабличнаяЧастьИмя = "Материалы";
	ИначеЕсли ТабличнаяЧасть = Продукция Тогда
		ТабличнаяЧастьИмя = "Продукция";
	ИначеЕсли ТабличнаяЧасть = РаспределениеМатериалов Тогда
		ТабличнаяЧастьИмя = "РаспределениеМатериалов";
	ИначеЕсли ТабличнаяЧасть = ВозвратныеОтходы Тогда
		ТабличнаяЧастьИмя = "ВозвратныеОтходы";
	КонецЕсли;

	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ТабличнаяЧастьИмя].ТекущаяКолонка = ЭлементыФормы[ТабличнаяЧастьИмя].Колонки["Количество"];

	УчетСерийныхНомеров.ОбработкаПодбораНоменклатурыПоСерийномуНомеру(ЗначениеВыбора, СерийныеНомера,
	                                              ТабличнаяЧасть, СтрокаТабличнойЧасти,
	                                              мПараметрыСвязиСтрокТЧ,
	                                              ТабличнаяЧастьИмя,
	                                              ЭтотОбъект);

КонецПроцедуры // ОбработкаПодбора()

// Процедура обработка подбора прочих затрат
//
Процедура ОбработкаПодбораПрочихЗатрат( ТабЧасть, СтруктВыбора)
	
	НоваяСтрока = ТабЧасть.Найти( СтруктВыбора["СтатьяЗатрат"], "СтатьяЗатрат");
	
	Если НоваяСтрока = Неопределено Тогда
		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.СтатьяЗатрат = СтруктВыбора["СтатьяЗатрат"];
		НоваяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЕсли;
	
	НоваяСтрока.Сумма     = НоваяСтрока.Сумма     + СтруктВыбора.СуммаУпр;
	НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаРегл + СтруктВыбора.СуммаРегл;
	
КонецПроцедуры // ОбработкаПодбораПрочихЗатрат()

// Процедура подбора прочих затрат по остаткам в НЗП
//
Процедура ПодборПоПрочимЗатратам()
	
	СтруктПараметры = Новый Структура;
	СтруктПараметры.Вставить( "Подразделение",            Подразделение);
	СтруктПараметры.Вставить( "ПодразделениеОрганизации", ПодразделениеОрганизации);
	СтруктПараметры.Вставить( "ФлагУпрУчета",             ОтражатьВУправленческомУчете);
	СтруктПараметры.Вставить( "ФлагРеглУчета",            ОтражатьВБухгалтерскомУчете);
	СтруктПараметры.Вставить( "ВидЗатрат",                "НематериальныеЗатраты");
	СтруктПараметры.Вставить( "ДатаОстатков",             Дата);
	СтруктПараметры.Вставить( "Организация",              Организация);
	СтруктПараметры.Вставить( "Команда",                  "ПодборПрочихЗатрат");
	
	ОбработкаТабличныхЧастей.ОткрытьПодборСтатейЗатрат( ЭтаФорма, СтруктПараметры);
	
КонецПроцедуры // ПодборПоПрочимЗатратам()

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "")

	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      = СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);

	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Если ИмяТабличнойЧасти = "Продукция" Тогда
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ПриИзмененииНоменклатурыМатериаловИПродукции()

// Заполняет переданную табличную часть по остаткам
//
// Параметры:
//  ТабличнаяЧасть  - табличная часть документа.
//	ЗаказНаПроизводство - заказ по которому производится заполнение
// 	Очистить		- очистить предварительно ТЧ или добавить в конец
//
Процедура ЗаполнитьТабличнуюЧастьПоЗаказуНаПроизводство(ТабличнаяЧасть, ЗаказНаПроизводство = Неопределено, Очистить = Истина, ТипДокумента = Неопределено)

	Если НЕ ЗначениеЗаполнено(ЗаказНаПроизводство) Тогда
		ФормаЗаказы = Документы[ТипДокумента].ПолучитьФормуВыбора();
		ФормаЗаказы.Заголовок = "Выберите заказ на производство для заполнения заказа на производство";
		ФормаЗаказы.РежимВыбора = Истина;
		ЗаказНаПроизводство = ФормаЗаказы.ОткрытьМодально();
	КонецЕсли; 

	Если НЕ ЗначениеЗаполнено(ЗаказНаПроизводство) Тогда
		Возврат;
	КонецЕсли;

	Если Очистить И ТабличнаяЧасть.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		ТабличнаяЧасть.Очистить();
	КонецЕсли;

	ЗаполнитьТабличнуюЧастьПоОстаткамЗаказНаПроизводство(ТабличнаяЧасть, ЗаказНаПроизводство);

КонецПроцедуры // ЗаполнитьТабличнуюЧастьПоЗаказуПокупателю()

// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	
	Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,мПрименениеУСН) Тогда
						
		Для Каждого СтрокаТЧ Из Продукция Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, Неопределено);
		КонецЦикла;
		
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеМатериалов, 				"РаспределениеМатериалов", 				ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете,,Ложь);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеТехнологическихОпераций, 	"РаспределениеТехнологическихОпераций", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете,,Ложь);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеПрочихЗатрат, 			"РаспределениеПрочихЗатрат", 			ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете,,Ложь);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратныеОтходы, 						"ВозвратныеОтходы"       , 				ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете,,Ложь);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеВозвратныхОтходов, 		"РаспределениеВозвратныхОтходов", 		ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете,,Ложь);
		
	КонецЕсли;
	
КонецПроцедуры	

// Процедура управляет обработкой выбора из справочника "Сотрудники организаций"
//
// Параметры
//  ВыбранноеЗначение  – СправочникСсылка.СотрудникиОрганизаций – выбранное значение
//
Процедура ОбработкаВыбораРаботника(ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Подряда 
		ИЛИ ВыбранноеЗначение.ВидДоговора = Перечисления.ВидыДоговоровСФизЛицами.Авторский Тогда
	
		Предупреждение("Подбор работника по договору ГПХ не предусмотрен!");		
		Возврат;
		
	КонецЕсли; 
	
	// Если выбор произошел в форме подбора и этого физлица в документе пока нет,
	// добавим новую строку в таблицу
	СтруктураПоиска = Новый Структура("Сотрудник", ВыбранноеЗначение);
	
КонецПроцедуры // ОбработкаВыбораРаботника()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура - устанавливает видимость/доступность элементов формы
//
Процедура УстановитьВидимостьДоступность()

	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Получатели.Видимость                        		= ИспользоватьНаправленияВыпуска;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Материалы.Видимость                        		= ИспользоватьМатериалы;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Распределение.Видимость                        	= Не АвтораспределениеМатериалов И ИспользоватьМатериалы;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ПрочиеЗатраты.Видимость                        	= ИспользоватьПрочиеЗатраты;
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеПрочихЗатрат.Видимость            	= Не АвтораспределениеПрочихЗатрат И ИспользоватьПрочиеЗатраты;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ТехнологическиеОперации.Видимость                 = ИспользоватьТехнологическиеОперации;
	ЭлементыФормы.ОсновнаяПанель.Страницы.Исполнители.Видимость                 			= ИспользоватьТехнологическиеОперации;
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеТехнологическихОпераций.Видимость 	= Не АвтораспределениеТехнологическихОпераций И ИспользоватьТехнологическиеОперации;
	ЭлементыФормы.ОсновнаяПанель.Страницы.ВозвратныеОтходы.Видимость                 		= ИспользоватьВозвратныеОтходы;
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеВозвратныхОтходов.Видимость       	= Не АвтораспределениеВозвратныхОтходов И ИспользоватьВозвратныеОтходы;
	
	КолонкиПродукция = ЭлементыФормы.Продукция.Колонки;
	
	МассивКолонокТаблиц = Новый Массив;
	МассивКолонокТаблиц.Добавить(КолонкиПродукция);
	Если ИспользоватьНаправленияВыпуска Тогда
		МассивКолонокТаблиц.Добавить(ЭлементыФормы.Получатели.Колонки);
	КонецЕсли;
	Если Не АвтораспределениеМатериалов И ИспользоватьМатериалы Тогда
		МассивКолонокТаблиц.Добавить(ЭлементыФормы.РаспределениеМатериалов.Колонки);
	КонецЕсли;
	Если ИспользоватьВозвратныеОтходы Тогда
		МассивКолонокТаблиц.Добавить(ЭлементыФормы.ВозвратныеОтходы.Колонки);
	КонецЕсли;
	Если Не АвтораспределениеВозвратныхОтходов И ИспользоватьВозвратныеОтходы Тогда
		МассивКолонокТаблиц.Добавить(ЭлементыФормы.РаспределениеВозвратныхОтходов.Колонки);
	КонецЕсли;
	Если ИспользоватьТехнологическиеОперации Тогда
		МассивКолонокТаблиц.Добавить(ЭлементыФормы.ТехнологическиеОперации.Колонки);
	КонецЕсли;
	Если Не АвтораспределениеТехнологическихОпераций И ИспользоватьТехнологическиеОперации Тогда
		МассивКолонокТаблиц.Добавить(ЭлементыФормы.РаспределениеТехнологическихОпераций.Колонки);
	КонецЕсли;
	Если Не АвтораспределениеПрочихЗатрат И ИспользоватьПрочиеЗатраты Тогда
		МассивКолонокТаблиц.Добавить(ЭлементыФормы.РаспределениеПрочихЗатрат.Колонки);
	КонецЕсли;
	
	МассивКолонкиБУ = Новый Массив;
	МассивКолонкиБУ.Добавить("Счет");
	МассивКолонкиБУ.Добавить("СчетЗатрат");
	
	Для Каждого КолонкиТаблицы Из МассивКолонокТаблиц Цикл
		
		Для Каждого Колонка Из МассивКолонкиБУ Цикл
			
			Если КолонкиТаблицы.Найти(Колонка) = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(
				КолонкиТаблицы[Колонка],
				ПоказыватьВДокументахСчетаУчета
					И ОтражатьВБухгалтерскомУчете
			);
		КонецЦикла;
		
	КонецЦикла;
	
	НалоговыйУчетУСН.УстановитьВидимостьРеквизитовУСН(ЭлементыФормы, Организация, Дата, ПоказыватьВДокументахСчетаУчета);
	
	ЭлементыФормы.Материалы.Колонки.СтатьяЗатрат.Видимость               = ВводитьСтатьиЗатратПоСтрокам;
	ЭлементыФормы.РаспределениеМатериалов.Колонки.СтатьяЗатрат.Видимость = ВводитьСтатьиЗатратПоСтрокам;
	
	ЭлементыФормы.Продукция.Колонки.ДоляСтоимости.Видимость = УправлениеПроизводством.ИспользоватьВидСпецификации(мИспользоватьТолькоСборочныеСпецификации);
	
	СтруктураКолонок = Новый Структура("НаправлениеВыпуска");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиПродукция, СтруктураКолонок, ИспользоватьНаправленияВыпуска);
	Если ИспользоватьНаправленияВыпуска Тогда
		мКолонкиПродукция.НаправлениеВыпуска.Видимость = ИспользоватьНаправленияВыпуска;
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура("ВидВыпуска, КоличествоДоделка");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиПродукция, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	Если ИспользоватьНаработку Тогда
		мКолонкиПродукция.ВидВыпуска.Видимость 			= ИспользоватьНаработку;
		мКолонкиПродукция.КоличествоДоделка.Видимость 	= ИспользоватьНаработку;
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура("ВидВыпуска");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиМатериалы, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеМатериалов, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиТехнологическиеОперации, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеТехнологическихОпераций, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиПрочиеЗатраты, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеПрочихЗатрат, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиВозвратныеОтходы, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеВозвратныхОтходов, СтруктураКолонок, (ИспользоватьНаработку И мИспользоватьНаработку));
	Если ИспользоватьНаработку Тогда
		мКолонкиМатериалы.ВидВыпуска.Видимость 								= ИспользоватьНаработку;
		мКолонкиРаспределениеМатериалов.ВидВыпуска.Видимость 				= ИспользоватьНаработку;
		мКолонкиТехнологическиеОперации.ВидВыпуска.Видимость 				= ИспользоватьНаработку;
		мКолонкиРаспределениеТехнологическихОпераций.ВидВыпуска.Видимость 	= ИспользоватьНаработку;
		мКолонкиПрочиеЗатраты.ВидВыпуска.Видимость 							= ИспользоватьНаработку;
		мКолонкиРаспределениеПрочихЗатрат.ВидВыпуска.Видимость 				= ИспользоватьНаработку;
		мКолонкиВозвратныеОтходы.ВидВыпуска.Видимость 						= ИспользоватьНаработку;
		мКолонкиРаспределениеВозвратныхОтходов.ВидВыпуска.Видимость 		= ИспользоватьНаработку;
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура("КонечнаяПродукция");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиПродукция, СтруктураКолонок, (ИспользоватьЗаданияНаПроизводство ИЛИ ИспользоватьЗаказыНаОбслуживаниеОС));
	Если ИспользоватьЗаданияНаПроизводство ИЛИ ИспользоватьЗаказыНаОбслуживаниеОС Тогда
		КолонкиПродукция.КонечнаяПродукция.Видимость = Истина
	КонецЕсли;
	
	ЭлементыФормы.СтатьяЗатрат.Видимость = Не ВводитьСтатьиЗатратПоСтрокам;
	ЭлементыФормы.НадписьСтатьяЗатрат.Видимость = Не ВводитьСтатьиЗатратПоСтрокам;
	
	ЭлементыФормы.НадписьЗаданиеНаПроизводство.Видимость = ИспользоватьЗаданияНаПроизводство;
	ЭлементыФормы.ЗаданиеНаПроизводство.Видимость = ИспользоватьЗаданияНаПроизводство;

	ЭлементыФормы.КоманднаяПанельПродукция.Кнопки.Получатели.Доступность = ИспользоватьНаправленияВыпуска;
	
	ЭлементыФормы.ТехнологическиеОперации.Колонки.Проект.Видимость = ИспользоватьТехнологическиеОперации И УправлениеПроектами.ИспользоватьРаспределениеЗатратПоПроектам();
	
	ЭлементыФормы.РазрешитьПревышениеЛимита.Видимость = ИспользоватьНаправленияВыпуска;
	ЭлементыФормы.Получатели.Колонки.ОтпущеноСверхЛимита.Видимость = РазрешитьПревышениеЛимита;
	
	// Доступность колонок Заказы.
	мКолонкиПродукция.Заказ       .Видимость = ИспользоватьЗаказы;
	мКолонкиПродукция.Заказы      .Видимость = ИспользоватьЗаказы;
	мКолонкиПродукция.ЗаказРезерв .Видимость = ИспользоватьЗаказы;
	мКолонкиПродукция.ЗаказВыпуска.Видимость = ИспользоватьЗаказы;
	
	мКолонкиМатериалы.Заказ       .Видимость = ИспользоватьЗаказы;
	мКолонкиМатериалы.Заказы      .Видимость = ИспользоватьЗаказы;
	мКолонкиМатериалы.ЗаказВыпуска.Видимость = ИспользоватьЗаказы;
	
	мКолонкиРаспределениеМатериалов.Заказ       .Видимость = ИспользоватьЗаказы;
	мКолонкиРаспределениеМатериалов.Заказы      .Видимость = ИспользоватьЗаказы;
	мКолонкиРаспределениеМатериалов.ЗаказВыпуска.Видимость = ИспользоватьЗаказы;
	
	мКолонкиВозвратныеОтходы.Заказ              .Видимость = ИспользоватьЗаказы;
	мКолонкиВозвратныеОтходы.Заказы             .Видимость = ИспользоватьЗаказы;
	мКолонкиВозвратныеОтходы.ЗаказРезерв        .Видимость = ИспользоватьЗаказы;
	
	мКолонкиТехнологическиеОперации             .Заказ.Видимость = ИспользоватьЗаказы;
	мКолонкиРаспределениеТехнологическихОпераций.Заказ.Видимость = ИспользоватьЗаказы;
	мКолонкиПрочиеЗатраты                       .Заказ.Видимость = ИспользоватьЗаказы;
	мКолонкиРаспределениеПрочихЗатрат           .Заказ.Видимость = ИспользоватьЗаказы;
	мКолонкиРаспределениеВозвратныхОтходов      .Заказ.Видимость = ИспользоватьЗаказы;
	
	СтруктураКолонок = Новый Структура("ПодразделениеНЗП, ПодразделениеОрганизацииНЗП");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиМатериалы, 						СтруктураКолонок, ИспользоватьПодразделенияНЗП);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеМатериалов, 		СтруктураКолонок, ИспользоватьПодразделенияНЗП);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиВозвратныеОтходы, 				СтруктураКолонок, ИспользоватьПодразделенияНЗП);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеВозвратныхОтходов, 	СтруктураКолонок, ИспользоватьПодразделенияНЗП);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиПрочиеЗатраты, 					СтруктураКолонок, ИспользоватьПодразделенияНЗП);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеПрочихЗатрат,		СтруктураКолонок, ИспользоватьПодразделенияНЗП);
	
	// Доступность колонок Подразделение НЗП.
	Если ИспользоватьПодразделенияНЗП Тогда
		мКолонкиМатериалы.ПодразделениеНЗП.Видимость 							= ИспользоватьПодразделенияНЗП И ОтражатьВУправленческомУчете;
		мКолонкиРаспределениеМатериалов.ПодразделениеНЗП.Видимость 				= ИспользоватьПодразделенияНЗП И ОтражатьВУправленческомУчете;
		мКолонкиВозвратныеОтходы.ПодразделениеНЗП.Видимость 					= ИспользоватьПодразделенияНЗП И ОтражатьВУправленческомУчете;
		мКолонкиРаспределениеВозвратныхОтходов.ПодразделениеНЗП.Видимость 		= ИспользоватьПодразделенияНЗП И ОтражатьВУправленческомУчете;
		мКолонкиПрочиеЗатраты.ПодразделениеНЗП.Видимость 						= ИспользоватьПодразделенияНЗП И ОтражатьВУправленческомУчете;
		мКолонкиРаспределениеПрочихЗатрат.ПодразделениеНЗП.Видимость 			= ИспользоватьПодразделенияНЗП И ОтражатьВУправленческомУчете;
		
		мКолонкиМатериалы.ПодразделениеОрганизацииНЗП.Видимость 				= ИспользоватьПодразделенияНЗП И ОтражатьВБухгалтерскомУчете;
		мКолонкиРаспределениеМатериалов.ПодразделениеОрганизацииНЗП.Видимость 	= ИспользоватьПодразделенияНЗП И ОтражатьВБухгалтерскомУчете;
		мКолонкиВозвратныеОтходы.ПодразделениеОрганизацииНЗП.Видимость 			= ИспользоватьПодразделенияНЗП И ОтражатьВБухгалтерскомУчете;
		мКолонкиРаспределениеВозвратныхОтходов.ПодразделениеОрганизацииНЗП.Видимость = ИспользоватьПодразделенияНЗП И ОтражатьВБухгалтерскомУчете;
		мКолонкиПрочиеЗатраты.ПодразделениеОрганизацииНЗП.Видимость 			= ИспользоватьПодразделенияНЗП И ОтражатьВБухгалтерскомУчете;
		мКолонкиРаспределениеПрочихЗатрат.ПодразделениеОрганизацииНЗП.Видимость = ИспользоватьПодразделенияНЗП И ОтражатьВБухгалтерскомУчете;
	КонецЕсли;
	
	СтруктураКолонок = Новый Структура("НоменклатурнаяГруппаНЗП,ЗаказНЗП");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеМатериалов, 		СтруктураКолонок, ИспользоватьАналитикуНЗП);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеВозвратныхОтходов, 	СтруктураКолонок, ИспользоватьАналитикуНЗП);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеПрочихЗатрат,		СтруктураКолонок, ИспользоватьАналитикуНЗП);
	
	СтруктураКолонок = Новый Структура("НоменклатурнаяГруппа");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиМатериалы, 		СтруктураКолонок, ИспользоватьАналитикуНЗП);
	
	// Доступность колонок НоменклатурнаяГруппаНЗП, ЗаказНЗП.
	Если ИспользоватьАналитикуНЗП Тогда
		мКолонкиМатериалы.НоменклатурнаяГруппа.Видимость = ИспользоватьАналитикуНЗП;
		
		мКолонкиРаспределениеМатериалов.НоменклатурнаяГруппаНЗП.Видимость 			= ИспользоватьАналитикуНЗП;
		мКолонкиРаспределениеВозвратныхОтходов.НоменклатурнаяГруппаНЗП.Видимость 	= ИспользоватьАналитикуНЗП;
		мКолонкиРаспределениеПрочихЗатрат.НоменклатурнаяГруппаНЗП.Видимость 		= ИспользоватьАналитикуНЗП;
		
		мКолонкиРаспределениеМатериалов.ЗаказНЗП.Видимость 			= ИспользоватьАналитикуНЗП;
		мКолонкиРаспределениеВозвратныхОтходов.ЗаказНЗП.Видимость 	= ИспользоватьАналитикуНЗП;
		мКолонкиРаспределениеПрочихЗатрат.ЗаказНЗП.Видимость 		= ИспользоватьАналитикуНЗП;
		
	КонецЕсли;
	
	// Установим признак возможности изменения видимости колонок заказы
	СтруктураКолонок = Новый Структура("Заказ,Заказы,ЗаказРезерв,ЗаказВыпуска");
	
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиПродукция,                            СтруктураКолонок, ИспользоватьЗаказы);
	
	СтруктураКолонок = Новый Структура("Заказ,Заказы,ЗаказВыпуска");
	
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиМатериалы,                            СтруктураКолонок, ИспользоватьЗаказы);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеМатериалов,              СтруктураКолонок, ИспользоватьЗаказы);
	
	СтруктураКолонок = Новый Структура("Заказ,Заказы,ЗаказРезерв");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиВозвратныеОтходы,                     СтруктураКолонок, ИспользоватьЗаказы);
	
	СтруктураКолонок = Новый Структура("Заказ");
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиТехнологическиеОперации,              СтруктураКолонок, ИспользоватьЗаказы);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеТехнологическихОпераций, СтруктураКолонок, ИспользоватьЗаказы);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиПрочиеЗатраты,                        СтруктураКолонок, ИспользоватьЗаказы);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеПрочихЗатрат,            СтруктураКолонок, ИспользоватьЗаказы);
	РаботаСДиалогами.УстановитьВидимостьКолонок(мКолонкиРаспределениеВозвратныхОтходов,       СтруктураКолонок, ИспользоватьЗаказы);

КонецПроцедуры // ДоступностьЭлементовФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);

		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
						
			ЗаполнениеДокументов.ЗаполнитьНастройкиДокументаВыпуска(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
			Если Не мИспользоватьНаработку Тогда
				ИспользоватьНаработку = мИспользоватьНаработку;
			КонецЕсли;
		КонецЕсли;
		
		
	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");

	// Установить ограничение - изменять видимоть колонок для ТЧ продукция
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Продукция.Колонки, СтруктураКолонок);

	// Установить ограничение - изменять видимоть колонок для ТЧ материалы
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Материалы.Колонки, СтруктураКолонок);

	// Установить ограничение - изменять видимоть колонок для ТЧ материалы
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ПрочиеЗатраты.Колонки, СтруктураКолонок);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ТехнологическаяОперация");
 	СтруктураКолонок.Вставить("Расценка");
 	СтруктураКолонок.Вставить("Количество");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ТехнологическиеОперации.Колонки, СтруктураКолонок);

	СтруктураКолонок = Новый Структура();

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Исполнители.Колонки, СтруктураКолонок);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента( , ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	ПолучитьКурсУпрВалюты(Дата);
	мВедениеУчетаЗатратПоПроектам = УправлениеПроектами.ВедениеУчетаЗатратПоПроектам();

	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиПродукция);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиПродукция);
	
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиПолучатели);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиПолучатели);
	
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиМатериалы);
	
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиВозвратныеОтходы);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиВозвратныеОтходы);
	
	СтруктураКолонок = Новый Структура("ХарактеристикаНоменклатуры, ХарактеристикаПродукции");
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиРаспределениеМатериалов, СтруктураКолонок);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиРаспределениеВозвратныхОтходов, СтруктураКолонок);
	
	СтруктураКолонок = Новый Структура("СерияНоменклатуры, СерияПродукции");
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиРаспределениеМатериалов, СтруктураКолонок);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиРаспределениеВозвратныхОтходов, СтруктураКолонок);
	
	СтруктураКолонок = Новый Структура("ХарактеристикаПродукции");
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.РаспределениеПрочихЗатрат.Колонки, СтруктураКолонок);
	СтруктураКолонок = Новый Структура("СерияПродукции");
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(ЭлементыФормы.РаспределениеПрочихЗатрат.Колонки, СтруктураКолонок);
	
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(ЭлементыФормы.РаспределениеТехнологическихОпераций.Колонки);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(ЭлементыФормы.РаспределениеТехнологическихОпераций.Колонки);
	
	ЭлементыФормы.Исполнители.Колонки.КТУ.Видимость	= УчитыватьКТУ;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	
	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	РаботаСДиалогами.УстановитьВидимостьКолонкиПроект(ЭлементыФормы.Получатели.Колонки, , мВедениеУчетаЗатратПоПроектам);
	
	УстановитьВидимостьДоступность();
	
	УчетСерийныхНомеров.УстановитьВидимостьКнопкиВводаСерийныхНомеров(ЭлементыФормы.КоманднаяПанельПродукция);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	// Доступность элементов формы для указания сверхлимитного отпуска материалов.
	ИспользоватьЛимитыОтпускаМатериалов = УправлениеПроизводством.ИспользоватьЛимитыОтпускаМатериалов();
	Если ИспользоватьЛимитыОтпускаМатериалов Тогда
		РедактированиеРазрешенияПревышенияЛимита = УправлениеДопПравамиПользователей.РазрешеноРедактированиеРазрешенияПревышенияЛимитаОтпускаМатериалов();
		ЭлементыФормы.РазрешитьПревышениеЛимита.Доступность = РедактированиеРазрешенияПревышенияЛимита;
		ЭлементыФормы.Получатели.Колонки.ОтпущеноСверхЛимита.Доступность = РедактированиеРазрешенияПревышенияЛимита;
	Иначе
		ЭлементыФормы.РазрешитьПревышениеЛимита.Видимость = Ложь;
		
		СтруктураКолонок = Новый Структура("ОтпущеноСверхЛимита");
		РаботаСДиалогами.УстановитьВидимостьКолонок(ЭлементыФормы.Получатели.Колонки, СтруктураКолонок, Ложь);
	КонецЕсли;

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

Процедура ПриЗакрытии()
	
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента( , ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	ЭлементыФормы.ОсновнаяПанель.Страницы.Продукция.Заголовок     = "Продукция и услуги (" + Продукция.Количество() + " поз.)";
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.Материалы.Заголовок     = "Материалы (" + Материалы.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.Распределение.Заголовок = "Распределение материалов (" + РаспределениеМатериалов.Количество() + " поз.)";
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ПрочиеЗатраты.Заголовок = "Прочие затраты (" + ПрочиеЗатраты.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеПрочихЗатрат.Заголовок = "Распределение прочих затрат (" + РаспределениеПрочихЗатрат.Количество() + " поз.)";
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ВозвратныеОтходы.Заголовок = "Возвратные отходы (" + ВозвратныеОтходы.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеВозвратныхОтходов.Заголовок = "Распределение возвратных отходов (" + РаспределениеВозвратныхОтходов.Количество() + " поз.)";
	
	ЭлементыФормы.ОсновнаяПанель.Страницы.ТехнологическиеОперации.Заголовок = "Тех. операции (" + ТехнологическиеОперации.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.Исполнители.Заголовок = "Исполнители (" + Исполнители.Количество() + " поз.)";
	ЭлементыФормы.ОсновнаяПанель.Страницы.РаспределениеТехнологическихОпераций.Заголовок = "Распределение тех. операций (" + РаспределениеТехнологическихОпераций.Количество() + " поз.)";
	
	Если ИспользоватьНаработку
	   И Продукция.Найти(Перечисления.ВидыВыпуска.Выпуск, "ВидВыпуска") = Неопределено
	Тогда
		ПроверятьЗаполнениеСклада = Ложь;
		
	ИначеЕсли ИспользоватьНаправленияВыпуска
	   И Продукция.Найти(Перечисления.НаправленияВыпуска.НаСклад, "НаправлениеВыпуска") = Неопределено
	Тогда
		ПроверятьЗаполнениеСклада = Ложь;
		
	Иначе
		ПроверятьЗаполнениеСклада = Истина;
		
	КонецЕсли;
	
	Если ПроверятьЗаполнениеСклада
	   И Не ЗначениеЗаполнено(Склад)
	Тогда
		ЭлементыФормы.Склад.ОтметкаНезаполненного = Истина;
	Иначе
		ЭлементыФормы.Склад.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			ОбработкаПодбора(Материалы, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьПродукция" Тогда
			ОбработкаПодбора(Продукция, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьРаспределениеМатериалов" Тогда
			ОбработкаПодбора(РаспределениеМатериалов, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьВозвратныеОтходы" Тогда
			ОбработкаПодбора(ВозвратныеОтходы, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборПрочихЗатрат" Тогда
			ОбработкаПодбораПрочихЗатрат( ПрочиеЗатраты, ЗначениеВыбора);
		ИначеЕсли Команда = Неопределено Тогда
			УправлениеПроизводством.ЗаполнитьПоСпецификации(
				ЭтотОбъект, 
				мПараметрыСвязиСтрокТЧ, 
				ЗначениеВыбора.Спецификация, 
				ЗначениеВыбора.Количество
			);
			ЗаполнитьТаблицуРаспределенияМатериалов(Ложь);
			ЗаполнитьТаблицуРаспределенияВозвратныхОтходов(, Ложь);
			ЗаполнитьТаблицуРаспределенияТехнологическихОпераций(, Ложь);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ПредопределенноеЗначение("Перечисление.КлючевыеОперации.ПроведениеДокументаОтчетПроизводстваЗаСмену"));
	// Конец ОценкаПроизводительности
	
КонецПроцедуры

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);
	
КонецПроцедуры

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.СканерШтрихКода Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

///////////////////////////////////////////////////////////////////////////////
//// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА)

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Качество, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Ложь,
	                                                Неопределено);

	Если  ИмяТекСтраницы = "Продукция" Тогда
		ОбработкаПодбора(Продукция, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Неопределено, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено, 1,
	                                                Неопределено, Номер,
	                                                Ложь, Неопределено);

	Если ИмяТекСтраницы = "Продукция" Тогда
		ОбработкаПодбора(Продукция, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Предупреждение("Подбор информационных карт в данной форме не предусмотрен!");
	Возврат Истина;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Заполнить" командной панели формы.
//
Процедура КоманднаяПанельРаспределениеМатериаловЗаполнить(Кнопка)

	ЗаполнитьТаблицуРаспределенияМатериалов();

КонецПроцедуры // КоманднаяПанельРаспределениеМатериаловЗаполнить()

// Процедура вызывается при выборе пункта подменю "Заполнить" командной панели формы.
//
Процедура КоманднаяПанельРаспределениеПрочихЗатратЗаполнить(Кнопка)

	ЗаполнитьТаблицуРаспределенияПрочихЗатрат();

КонецПроцедуры // КоманднаяПанельРаспределениеПрочихЗатратЗаполнить()

// Процедура вызывается при выборе пункта подменю "Заполнить распределение возвратных отходов" командной панели формы.
//
Процедура КоманднаяПанельРаспределениеВозвратныхОтходовЗаполнитьРаспределениеВозвратныхОтходов(Кнопка)
	
	ЗаполнитьТаблицуРаспределенияВозвратныхОтходов();
	
КонецПроцедуры // КоманднаяПанельРаспределениеВозвратныхОтходовЗаполнитьРаспределениеВозвратныхОтходов()

// Процедура вызывается при выборе пункта подменю "Заполнить по заданию на производство" командной панели формы.
//
Процедура КоманднаяПанельПродукцияЗаполнитьПоЗаданиюНаПроизводство(Кнопка)
	
	ЗаполнитьПродукциюПоЗаданиюНаПроизводство();
	
КонецПроцедуры // КоманднаяПанельПродукцияЗаполнитьПоЗаданиюНаПроизводство()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Продукция"
//
Процедура КоманднаяПанельПродукцияПодбор(Кнопка)

	ДействиеПодбор(Продукция);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "СерийныеНомера" командной панели
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияСерийныеНомера(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("НоменклатурнаяГруппа", 		СтрокаТабличнойЧасти.НоменклатурнаяГруппа);
	СтруктураПараметров.Вставить("СозданиеНовыхСерийныхНомеров",Истина);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Продукция");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводСерийныхНомеров = Обработки.ВводСерийныхНомеров.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводСерийныхНомеров.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводСерийныхНомеров.Открыть();
	
КонецПроцедуры // КоманднаяПанельПродукцияСерийныеНомера()

// Процедура вызывается при нажатии кнопки "ПараметрыВыпуска" командной панели
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияПараметрыВыпуска(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Продукция");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	
	// Открываем форму подбора.
	ФормаВводПараметровВыпуска = Обработки.ВводПараметровВыпускаПродукции.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводПараметровВыпуска.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводПараметровВыпуска.Открыть();
	
КонецПроцедуры // КоманднаяПанельПродукцияПараметрыВыпуска()

// Процедура вызывается при нажатии кнопки "Получатели" командной панели
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияПолучатели(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ИспользоватьНаработку И СтрокаТабличнойЧасти.ВидВыпуска <> Перечисления.ВидыВыпуска.Выпуск)
	 ИЛИ СтрокаТабличнойЧасти.НаправлениеВыпуска <> Перечисления.НаправленияВыпуска.НаЗатратыСписок Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номенклатура", 				СтрокаТабличнойЧасти.Номенклатура);
	СтруктураПараметров.Вставить("ХарактеристикаНоменклатуры", 	СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры);
	СтруктураПараметров.Вставить("СерияНоменклатуры", 			СтрокаТабличнойЧасти.СерияНоменклатуры);
	СтруктураПараметров.Вставить("Количество", 					СтрокаТабличнойЧасти.Количество);
	СтруктураПараметров.Вставить("ЕдиницаИзмерения", 			СтрокаТабличнойЧасти.ЕдиницаИзмерения);
	СтруктураПараметров.Вставить("ДокументОбъект", 				ЭтотОбъект);
	СтруктураПараметров.Вставить("ИмяТабличнойЧасти", 			"Продукция");
	СтруктураПараметров.Вставить("НомерСтрокиТабличнойЧасти", 	СтрокаТабличнойЧасти.НомерСтроки);
	СтруктураПараметров.Вставить("СтрокаТабличнойЧасти", 		СтрокаТабличнойЧасти);
	СтруктураПараметров.Вставить("ПараметрыСвязиСтрокТЧ", 		мПараметрыСвязиСтрокТЧ);
	СтруктураПараметров.Вставить("ПрименениеУСН", 				мПрименениеУСН);
	СтруктураПараметров.Вставить("ИспользоватьЗаказы", 			ИспользоватьЗаказы);
	
	// Открываем форму подбора.
	ФормаВводНаправленийСписания = Обработки.ВводНаправленийСписания.ПолучитьФорму("ОсновнаяФорма", ЭтаФорма, ЭтаФорма);
	ФормаВводНаправленийСписания.СтруктураИсходныхПараметров = СтруктураПараметров;
	ФормаВводНаправленийСписания.Открыть();
	
КонецПроцедуры // КоманднаяПанельПродукцияПолучатели()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыПодбор(Кнопка)

	ДействиеПодбор(Материалы);

КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Возвратные отходы"
//
Процедура КоманднаяПанельВозвратныеОтходыПодбор(Кнопка)
	
	ДействиеПодбор(ВозвратныеОтходы);
	
КонецПроцедуры // КоманднаяПанельВозвратныеОтходыПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "РаспределениеМатериалов"
//
Процедура КоманднаяПанельРаспределениеМатериаловПодбор(Кнопка)

	ДействиеПодбор(РаспределениеМатериалов);

КонецПроцедуры // КоманднаяПанельРаспределениеМатериаловПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "ПрочиеЗатраты"
//
Процедура КоманднаяПанельПрочиеЗатратыПодбор(Кнопка)
	
	ПодборПоПрочимЗатратам();
	
КонецПроцедуры // КоманднаяПанельПрочиеЗатратыПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели формы
// Выполняется подбор по сспецификациям
//
Процедура ДействияФормыПодборПоСпецификации(Кнопка)
	
	// Открываем форму подбора.
	ФормаПодбора = Справочники.СпецификацииНоменклатуры.ПолучитьФорму( "ФормаПодбора", ЭтаФорма, ЭтаФорма);
	ФормаПодбора.РазрешитьСоединятьОкно          = Истина;
	ФормаПодбора.СоединяемоеОкно                 = Истина;
	ФормаПодбора.РазрешитьСостояниеПрикрепленное = Истина;
	ФормаПодбора.ПоложениеПрикрепленногоОкна     = ВариантПрикрепленияОкна.Право;
	ФормаПодбора.СостояниеОкна                   = ВариантСостоянияОкна.Прикрепленное;
	ФормаПодбора.РазрешитьСостояниеОбычное       = Ложь;
	
	ФормаПодбора.ЗакрыватьПриВыборе           = Ложь;
	ФормаПодбора.МножественныйВыбор           = Истина;
	ФормаПодбора.ПараметрВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы;
	ФормаПодбора.ЭлементыФормы.СправочникСписок.ИерархическийПросмотр = Истина;
	
	ФормаПодбора.Отбор.ВидСпецификации.ВидСравнения  = ВидСравнения.НеРавно;
	ФормаПодбора.Отбор.ВидСпецификации.Значение      = Перечисления.ВидыСпецификаций.Узел;
	ФормаПодбора.Отбор.ВидСпецификации.Использование = Истина;
	
	ФормаПодбора.ЭлементыФормы.СправочникСписок.НастройкаОтбора["ВидСпецификации"].Доступность = Ложь;
	
	ФормаПодбора.РежимВыбора = Истина;
	ФормаПодбора.Открыть();
	
КонецПроцедуры // ДействияФормыПодборПоСпецификации()

// Процедура вызывается при нажатии кнопки "Рассчитать" командной панели
// табличного поля "Исполнители"
//
Процедура КоманднаяПанельИсполнителиРассчитать(Кнопка)
	
	Если Исполнители.Количество() = 0 Тогда
		Возврат
	КонецЕсли;
	
	// получим массив коэффициентов распределения
	МассивКТУ	= Новый Массив;
	ПоТарифу	= 0;
	
	Для Каждого СтрокаИсполнители Из Исполнители Цикл
		
		Вес = 1;
		Если УчитыватьКТУ Тогда
			Вес = Вес * ?(СтрокаИсполнители.КТУ = 0, 1, СтрокаИсполнители.КТУ);
		КонецЕсли;
		
		Если УчитыватьТариф Тогда
			
			// Рассчитаем часовую тарифную ставку работника 
			ЧасовойТариф = ПроцедурыУправленияПерсоналом.ЧасоваяТарифнаяСтавкаРаботникаОрг(СтрокаИсполнители.Сотрудник, Дата, Дата, мВалютаРегламентированногоУчета);
			Вес = Вес * ЧасовойТариф;
			
		КонецЕсли;
		
		МассивКТУ.Добавить(Вес);
		
		// Очищение колонки "Сумма к начислению"
		Если ОтражатьВБухгалтерскомУчете Тогда
			СтрокаИсполнители.СуммаКНачислениюРегл	= 0;
		Иначе
			СтрокаИсполнители.СуммаКНачислению		= 0;
		КонецЕсли;
		
	КонецЦикла;
	
	
	МассивСуммКНачислению = ОбщегоНазначенияЗК.РаспределитьПропорционально(ТехнологическиеОперации.Итог("Сумма"),МассивКТУ);
	Если МассивСуммКНачислению <> Неопределено Тогда
		
		Исполнители.ЗагрузитьКолонку(МассивСуммКНачислению,"СуммаКНачислению");
		
	КонецЕсли;
	
	МассивСуммКНачислению = ОбщегоНазначенияЗК.РаспределитьПропорционально(ТехнологическиеОперации.Итог("СуммаРегл"),МассивКТУ);
	Если МассивСуммКНачислению <> Неопределено Тогда
		
		Исполнители.ЗагрузитьКолонку(МассивСуммКНачислению,"СуммаКНачислениюРегл");
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоСпецификации(Кнопка)
	
	ЗаполнитьМатериалыПоСпецификации();
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнить()

// Процедура вызывается при нажатии кнопки "ЗаполнитьСЗаменой" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьСЗаменой(Кнопка)
	
	ПодборМатериаловИАналогов = Обработки.ПодборМатериаловИАналогов.Создать();
	
	ФормаПодбораМатериаловИАналогов = ПодборМатериаловИАналогов.ПолучитьФорму(, ЭтаФорма);
	
	//Установим реквизиты и переменые формы.
	ФормаПодбораМатериаловИАналогов.ДокументОбъект = ЭтотОбъект;
	
	// Открываем форму обработки
	ФормаПодбораМатериаловИАналогов.Открыть();
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьСЗаменой()

// Процедура вызывается при нажатии кнопки "Заполнить по спецификации" командной панели
// табличного поля "ВозвратныеОтходы"
//
Процедура КоманднаяПанельВозвратныеОтходыЗаполнитьПоСпецификации(Кнопка)
	
	ЗаполнитьВозвратныеОтходыПоСпецификации();
	
КонецПроцедуры // КоманднаяПанельВозвратныеОтходыЗаполнитьПоСпецификации()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "ТехнологическиеОперации"
//
Процедура КоманднаяПанельТехнологическиеОперацииЗаполнить(Кнопка)
	
	Если ТехнологическиеОперации.Количество() > 0 Тогда
		Ответ = Вопрос("Табличная часть ""Технологические операции"" уже содержит строки."
					  + Символы.ПС + "При заполнении они будут удалены!" + Символы.ПС,
					   РежимДиалогаВопрос.ДаНет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		ТехнологическиеОперации.Очистить();
	КонецЕсли;
	
	ЗаполнитьТехОперации();
	
КонецПроцедуры // КоманднаяПанельТехнологическиеОперацииЗаполнить()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "РаспределениеТехнологическихОпераций"
//
Процедура КоманднаяПанельРаспределениеТехнологическихОперацийЗаполнить(Кнопка)
	
	ЗаполнитьТаблицуРаспределенияТехнологическихОпераций();
	
КонецПроцедуры // КоманднаяПанельРаспределениеТехнологическихОперацийЗаполнить()

// Процедура вызывается при нажатии кнопки "Настройка" командной панели формы.
//
Процедура ДействияФормыНастройка(Кнопка)
	
	ФормаНастройки = ПолучитьФорму("ФормаНастройки", ЭтаФорма);
	ФормаНастройки.ОткрытьМодально();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ДействияФормыНастройка()

// Процедура вызывается при выборе пункта подменю "Заполнить"
//
Процедура КоманднаяПанельМатериалыЗаполнить(Кнопка)
	
	Если Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе");
		Возврат;
	КонецЕсли;
	Если ОтражатьВУправленческомУчете И НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Предупреждение("Не указано подразделение!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Предупреждение("Не указано подразделение организации!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена.
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Материалы.Очистить();
	
	УправлениеПроизводством.ЗаполнитьМатериалыПоОстаткамНЗП(ЭтотОбъект, Материалы,, Истина);
	
	Для Каждого СтрокаТЧ Из Материалы Цикл
		СтрокаТЧ.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнить()

// Процедура обработчик события нажатие кнопки командной панели.
// Процедура выполняет заполнение табличной части затраты
//
Процедура КоманднаяПанельЗатратыЗаполнить(Кнопка)
	
	Если Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе");
		Возврат;
	КонецЕсли;
	Если ПрочиеЗатраты.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена!
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПрочиеЗатратыПоОстаткам();
	
КонецПроцедуры // КоманднаяПанельЗатратыЗаполнить(Кнопка)

// Процедура обработчик события нажатие кнопки командной панели.
//
Процедура КоманднаяПанельПродукцияДобавитьИзЗаказаПокупателя(Кнопка)
	
	ДобавитьИзЗаказаПокупателя();
	
КонецПроцедуры // КоманднаяПанельПродукцияДобавитьИзЗаказаПокупателя()

// Процедура обработчик события нажатие кнопки командной панели.
//
Процедура КоманднаяПанельМатериалыДобавитьИзТребованиеНакладная(Кнопка)
	
	ДобавитьИзТребованиеНакладной();
	
КонецПроцедуры // КоманднаяПанельМатериалыДобавитьИзТребованиеНакладная()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

// Процедура вызывается при нажатии кнопки "Заполнить из шаблона" командной панели
// табличного поля "ПараметрыВыпускаПродукции".
//
Процедура КоманднаяПанельПолучателиЗаполнитьИзШаблона(Кнопка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Получатели.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.ВидВыпуска <> Перечисления.ВидыВыпуска.Выпуск
	 ИЛИ СтрокаТабличнойЧасти.НаправлениеВыпуска <> Перечисления.НаправленияВыпуска.НаЗатраты Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатратПолучатель) Тогда
		Ответ = Вопрос("Направление списания продукции уже заполнено. Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОсновноеНаправлениеСписания = СтрокаТабличнойЧасти.Продукция.НаправлениеСписанияВыпущеннойПродукции;
	
	ФормаВыбора = Справочники.НаправленияСписанияВыпущеннойПродукции.ПолучитьФормуВыбора(, ЭтаФорма);
	ФормаВыбора.Заголовок = "Выберите шаблон направлений списания для заполнения";
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.НаправлениеСписанияВыпущеннойПродукции) Тогда
		ФормаВыбора.ПараметрТекущаяСтрока = СтрокаТабличнойЧасти.Номенклатура.НаправлениеСписанияВыпущеннойПродукции;
	КонецЕсли;
	ШаблонНаправленийСписания = ФормаВыбора.ОткрытьМодально();
	
	Если ШаблонНаправленийСписания = Неопределено ИЛИ ШаблонНаправленийСписания.Направления.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Строка = ШаблонНаправленийСписания.Направления[0];
	
	СтрокаТабличнойЧасти.ПодразделениеПолучатель = Строка.Подразделение;
	СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель = Строка.ПодразделениеОрганизации;
	СтрокаТабличнойЧасти.ЗаказПолучатель = Строка.Заказ;
	СтрокаТабличнойЧасти.СтатьяЗатратПолучатель = Строка.СтатьяЗатрат;
	СтрокаТабличнойЧасти.НоменклатурнаяГруппаПолучатель = Строка.НоменклатурнаяГруппа;
	
	СтрокаТабличнойЧасти.СчетЗатратПолучатель = Строка.СчетЗатрат;
	СтрокаТабличнойЧасти.СчетЗатратПолучательНУ = Строка.СчетЗатратНУ;
	
	СтрокаТабличнойЧасти.Субконто1 = Строка.Субконто1;
	СтрокаТабличнойЧасти.Субконто2 = Строка.Субконто2;
	СтрокаТабличнойЧасти.Субконто3 = Строка.Субконто3;
	СтрокаТабличнойЧасти.СубконтоНУ1 = Строка.СубконтоНУ1;
	СтрокаТабличнойЧасти.СубконтоНУ2 = Строка.СубконтоНУ2;
	СтрокаТабличнойЧасти.СубконтоНУ3 = Строка.СубконтоНУ3;
	
	СтрокаТабличнойЧасти.Продукция = Строка.Продукция;
	СтрокаТабличнойЧасти.ХарактеристикаПродукции = Строка.ХарактеристикаПродукции;
	СтрокаТабличнойЧасти.СерияПродукции = Строка.СерияПродукции;
	
	СтрокаТабличнойЧасти.ОбъектСтроительства = Строка.ОбъектСтроительства;
	СтрокаТабличнойЧасти.СпособСтроительства = Строка.СпособСтроительства;
	
КонецПроцедуры // КоманднаяПанельПолучателиЗаполнитьИзШаблона()

// Процедура вызывается при нажатии кнопки "Заполнить по заказу на производство" командной панели 
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияЗаполнитьПоЗаказуНаПроизводство(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуНаПроизводство(Продукция, , , "ЗаказНаПроизводство");
	
КонецПроцедуры // КоманднаяПанельПродукцияЗаполнитьПоЗаказуНаПроизводство()

// Процедура вызывается при нажатии кнопки "Добавить по заказу на производство" командной панели 
// табличного поля "Продукция".
//
Процедура КоманднаяПанельПродукцияДобавитьПоЗаказуНаПроизводство(Кнопка)
	
	ЗаполнитьТабличнуюЧастьПоЗаказуНаПроизводство(Продукция, , Ложь, "ЗаказНаПроизводство");
	
КонецПроцедуры // КоманднаяПанельПродукцияДобавитьПоЗаказуНаПроизводство()

// Процедура вызывается при нажатии кнопки "Заполнить по потребностям" командной панели 
// табличного поля "Материалы".
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоПотребностям(Кнопка)

	МассивЗаказов = Новый Массив;
	Для Каждого СтрокаТЧ Из Продукция Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ЗаказВыпуска) Тогда
			МассивЗаказов.Добавить(СтрокаТЧ.ЗаказВыпуска);
		КонецЕсли;
	КонецЦикла;
	Если МассивЗаказов.Количество() = 0 Тогда
		Предупреждение("В табличной части ""Продукция"" не обнаружены заказы на производство." + Символы.ПС + "Заполнение невозможно");
		Возврат;
	КонецЕсли;
	
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос("В табличной части уже присутствую строки. При заполнении они будут удалены!" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		Материалы.Очистить();
	КонецЕсли;
	
	ЗаполнитьПотребностямиПоЗаказамНаПроизводство(Материалы, МассивЗаказов);
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоПотребностям()

// Процедура вызывается при нажатии кнопки "Заполнить по потребностям" командной панели 
// табличного поля "Распределение материалов".
//
Процедура КоманднаяПанельРаспределениеМатериаловЗаполнитьПоПотребностям(Кнопка)

	МассивЗаказов = Новый Массив;
	Для Каждого СтрокаТЧ Из Продукция Цикл
		Если ЗначениеЗаполнено(СтрокаТЧ.ЗаказВыпуска) Тогда
			МассивЗаказов.Добавить(СтрокаТЧ.ЗаказВыпуска);
		КонецЕсли;
	КонецЦикла;
	Если МассивЗаказов.Количество() = 0 Тогда
		Предупреждение("В табличной части ""Продукция"" не обнаружены заказы на производство." + Символы.ПС + "Заполнение невозможно");
		Возврат;
	КонецЕсли;
	
	Если РаспределениеМатериалов.Количество() > 0 Тогда
		Ответ = Вопрос("В табличной части уже присутствую строки. При заполнении они будут удалены!" + Символы.ПС + "Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		РаспределениеМатериалов.Очистить();
	КонецЕсли;
	
	ЗаполнитьПотребностямиПоЗаказамНаПроизводство(РаспределениеМатериалов, МассивЗаказов);
	
КонецПроцедуры // КоманднаяПанельРаспределениеМатериаловЗаполнитьПоПотребностям()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

	Если НЕ Элемент.Значение Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	// Заполним подразделение организации получатель в ТЧ "Продукция" и "НаправленияСписания"
	Для каждого СтрокаТабличнойЧасти из Продукция Цикл
		Если СтрокаТабличнойЧасти.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаЗатраты Тогда
			РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
														   СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель,
														   СтрокаТабличнойЧасти.ПодразделениеПолучатель,
														   Организация);
		КонецЕсли;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти из НаправленияСписания Цикл
		РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
													   СтрокаТабличнойЧасти.ПодразделениеОрганизации,
													   СтрокаТабличнойЧасти.Подразделение,
													   Организация);
	КонецЦикла;
	

	Если Продукция.Количество() + РаспределениеМатериалов.Количество() > 0 
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете) Тогда

		ЗаполнитьСчетаУчетаВТабЧасти(Продукция, 							"Продукция"              , 				ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеМатериалов, 				"РаспределениеМатериалов", 				ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(ТехнологическиеОперации, 				"ТехнологическиеОперации", 				ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеТехнологическихОпераций, 	"РаспределениеТехнологическихОпераций", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеПрочихЗатрат, 			"РаспределениеПрочихЗатрат", 			ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(ВозвратныеОтходы, 						"ВозвратныеОтходы"       , 				ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеВозвратныхОтходов , 		"РаспределениеВозвратныхОтходов", 		ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(НаправленияСписания , 					"НаправленияСписания", 	   				ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	КонецЕсли;

	Если Элемент.Значение Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в упр. учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)

	УстановитьВидимостьДоступность();

КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	Если НЕ Элемент.Значение Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;

	Если Продукция.Количество() + РаспределениеМатериалов.Количество() > 0 
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(,ОтражатьВНалоговомУчете) Тогда
		
		ЗаполнитьСчетаУчетаВТабЧасти(Продукция, 							"Продукция"              , 				неопределено, ОтражатьВНалоговомУчете);
		ЗаполнитьСчетаУчетаВТабЧасти(РаспределениеМатериалов, 				"РаспределениеМатериалов", 				неопределено, ОтражатьВНалоговомУчете);
		
	КонецЕсли;

	Если Элемент.Значение Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;

КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	ПолучитьКурсУпрВалюты(Дата);
    мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	
КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УстановитьВидимостьДоступность();
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Для Каждого СтрокаТабличнойЧасти Из Продукция Цикл
		Если СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель.Владелец <> Организация Тогда
			СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
													 СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель,
													 СтрокаТабличнойЧасти.ПодразделениеПолучатель,
													 Организация);
	КонецЦикла;
												 
	Для Каждого СтрокаТабличнойЧасти Из НаправленияСписания Цикл
		Если СтрокаТабличнойЧасти.ПодразделениеОрганизации.Владелец <> Организация Тогда
			СтрокаТабличнойЧасти.ПодразделениеОрганизации = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
													 СтрокаТабличнойЧасти.ПодразделениеОрганизации,
													 СтрокаТабличнойЧасти.Подразделение,
													 Организация);
	КонецЦикла;											 
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПодразделениеОрганизацииПриИзменении(Элемент);
	КонецЕсли;

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Подразделение
//
Процедура ПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	РаботаСДиалогами.НачалоВыбораПодразделения(ТаблицаОтбора, Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	РаботаСДиалогами.НачалоВыбораПодразделенияОрганизации(ТаблицаОтбора, Элемент, СтандартнаяОбработка);	
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Подразделения организации.
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага ВводитьСтатьиЗатратПоСтрокам
//
Процедура ВводитьСтатьиЗатратПоСтрокамПриИзменении(Элемент)

	УстановитьВидимостьДоступность();

КонецПроцедуры // ВводитьСтатьиЗатратПоСтрокамПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Статья затрат.
// 
Процедура СтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.Материальные);
	
КонецПроцедуры // СтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Склад
//
Процедура СкладНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, Склад, ВидСравнения.Равно, СтандартнаяОбработка, Перечисления.ВидыСкладов.Оптовый);

КонецПроцедуры // СкладНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода СкладОтходов
//
Процедура СкладОтходовНачалоВыбора(Элемент, СтандартнаяОбработка)

	РаботаСДиалогами.НачалоВыбораСкладаНТТ(ЭтотОбъект, ЭтаФорма, Элемент, СкладОтходов, ВидСравнения.Равно, СтандартнаяОбработка, Перечисления.ВидыСкладов.Оптовый);

КонецПроцедуры // СкладНачалоВыбора()


// Процедура - обработчик события "ПриИзменении" флажка "РазрешитьПревышениеЛимита".
//
Процедура РазрешитьПревышениеЛимитаПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // РазрешитьПревышениеЛимитаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "УчитыватьКТУ".
//
Процедура УчитыватьКТУПриИзменении(Элемент)
	
	ЭлементыФормы.Исполнители.Колонки.КТУ.Видимость = Элемент.Значение;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПРОДУКЦИЯ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части Продукция.
//
Процедура ПродукцияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура)
	   И НЕ ДанныеСтроки.Номенклатура.Услуга
	   И (Не ИспользоватьНаработку ИЛИ ИспользоватьНаработку И ДанныеСтроки.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск)
	   И (Не ИспользоватьНаправленияВыпуска ИЛИ ИспользоватьНаправленияВыпуска И ДанныеСтроки.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаСклад) Тогда
		ВыпускНаСклад = Истина;
	Иначе
		ВыпускНаСклад = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеСтроки.Номенклатура)
	   И (ДанныеСтроки.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск ИЛИ Не ИспользоватьНаработку) Тогда
		НаправлениеВыпускаВидимость = Истина;
	Иначе
		НаправлениеВыпускаВидимость = Ложь;
	КонецЕсли;
	
	Если ДанныеСтроки.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск Тогда
		ОформлениеСтроки.Ячейки.Счет.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(ДанныеСтроки.Счет);
		ОформлениеСтроки.Ячейки.СчетНУ.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(ДанныеСтроки.СчетНУ);
		ОформлениеСтроки.Ячейки.СчетЗатрат.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(ДанныеСтроки.СчетЗатрат);
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(ДанныеСтроки.СчетЗатратНУ);
	Иначе
		ОформлениеСтроки.Ячейки.Счет.ОтметкаНезаполненного = Ложь;
		ОформлениеСтроки.Ячейки.СчетНУ.ОтметкаНезаполненного = Ложь;
		ОформлениеСтроки.Ячейки.СчетЗатрат.ОтметкаНезаполненного = Ложь;
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.НаправлениеВыпуска.Видимость = НаправлениеВыпускаВидимость;
	ОформлениеСтроки.Ячейки.НаправлениеВыпуска.ТолькоПросмотр = Не НаправлениеВыпускаВидимость;
	
	ОформлениеСтроки.Ячейки.Качество.Видимость = ВыпускНаСклад;
	ОформлениеСтроки.Ячейки.Качество.ТолькоПросмотр = Не ВыпускНаСклад;
	
	ОформлениеСтроки.Ячейки.СтатусПартии.Видимость = ВыпускНаСклад;
	ОформлениеСтроки.Ячейки.СтатусПартии.ТолькоПросмотр = Не ВыпускНаСклад;
	
	ОформлениеСтроки.Ячейки.Счет.Видимость = ВыпускНаСклад;
	ОформлениеСтроки.Ячейки.СчетНУ.Видимость = ВыпускНаСклад;
	ОформлениеСтроки.Ячейки.Счет.ТолькоПросмотр = Не ВыпускНаСклад;
	ОформлениеСтроки.Ячейки.СчетНУ.ТолькоПросмотр = Не ВыпускНаСклад;
	
	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиПродукция, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиПродукция, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент, ИспользоватьЗаказы, ИспользоватьНаправленияВыпуска, ИспользоватьНаработку, ДанныеСтроки, ОформлениеСтроки);

КонецПроцедуры // ПродукцияПриВыводеСтроки()

// Процедура - обработчик события "ПослеУдаления" табличной части Продукция.
//
Процедура ПродукцияПослеУдаления(Элемент)
	
	мПараметрыСвязиСтрокТЧ["Продукция"].ФлагМодификации = Истина;
	
КонецПроцедуры // ПродукцияПослеУдаления()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры табличной части Продукция
//
Процедура ПродукцияПродукцияПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти, "Продукция");

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Продукция", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	ОбработкаТабличныхЧастей.ЗаполнитьКачествоНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
	ЗаполнитьНаправлениеВыпуска(СтрокаТабличнойЧасти);
		
	ЭлементыФормы.Продукция.Колонки.НаправлениеВыпуска.ЭлементУправления.СписокВыбора.Очистить();
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
	   И НЕ СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
		ЭлементыФормы.Продукция.Колонки.НаправлениеВыпуска.ЭлементУправления.СписокВыбора.Добавить(Перечисления.НаправленияВыпуска.НаСклад);
	КонецЕсли;
	ЭлементыФормы.Продукция.Колонки.НаправлениеВыпуска.ЭлементУправления.СписокВыбора.Добавить(Перечисления.НаправленияВыпуска.НаЗатраты);
	ЭлементыФормы.Продукция.Колонки.НаправлениеВыпуска.ЭлементУправления.СписокВыбора.Добавить(Перечисления.НаправленияВыпуска.НаЗатратыСписок);
	
	УчетСерийныхНомеров.ПроверитьСерийныеНомера(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // ПродукцияПродукцияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристика номенклатуры табличной части Продукция
//
Процедура ПродукцияХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры // ПродукцияХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода счета
// в строке табличной части "Продукция".
//
Процедура ПродукцияСчетПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, , "Счет", "СчетНУ");

КонецПроцедуры // ПродукцияСчетПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "Продукция".
//
Процедура ПродукцияСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ПродукцияСчетЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Продукция".
//
Процедура ПродукцияКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПродукцияКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода ЕдиницаМест табличной части Продукция
//
Процедура ПродукцияЕдиницаМестИзмеренияПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // ПродукцияЕдиницаМестИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Продукция".
//
Процедура ПродукцияКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Единица табличной части Продукция
//
Процедура ПродукцияЕдиницаПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Продукция.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры // ПродукцияЕдиницаПриИзменении()

// Процедура - обработчик события ПриНачалеРедактирования 
//
Процедура ПродукцияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		Элемент.ТекущиеДанные.КлючСвязи = 0;
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
			Элемент.ТекущиеДанные.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СтатусПартии) Тогда
			Элемент.ТекущиеДанные.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.НаправлениеВыпуска) Тогда
			ЗаполнитьНаправлениеВыпуска(Элемент.ТекущиеДанные);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Элемент.ТекущаяКолонка.Данные = "НаправлениеВыпуска" Тогда
		
		СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
		
		ЭлементыФормы.Продукция.Колонки.НаправлениеВыпуска.ЭлементУправления.СписокВыбора.Очистить();
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура)
		   И НЕ СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
			ЭлементыФормы.Продукция.Колонки.НаправлениеВыпуска.ЭлементУправления.СписокВыбора.Добавить(Перечисления.НаправленияВыпуска.НаСклад);
		КонецЕсли;
		ЭлементыФормы.Продукция.Колонки.НаправлениеВыпуска.ЭлементУправления.СписокВыбора.Добавить(Перечисления.НаправленияВыпуска.НаЗатраты);
		ЭлементыФормы.Продукция.Колонки.НаправлениеВыпуска.ЭлементУправления.СписокВыбора.Добавить(Перечисления.НаправленияВыпуска.НаЗатратыСписок);
		
	КонецЕсли;
	
КонецПроцедуры // ПродукцияПриНачалеРедактирования()

//Процедура - обработчик события ПриИзменении поля ввода КонечнаяПродукция табличной части "Продукция"
//
Процедура ПродукцияКонечнаяПродукцияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	Если ТипЗнч(СтрокаТабличнойЧасти.КонечнаяПродукция) = Тип("СправочникСсылка.ОсновныеСредства") Тогда
	   	Если  ТипЗнч(СтрокаТабличнойЧасти.Заказ) <> Тип("ДокументСсылка.ЗаказНаОбслуживаниеОС") Тогда
			СтрокаТабличнойЧасти.Заказ = Документы.ЗаказНаОбслуживаниеОС.ПустаяСсылка();
		КонецЕсли;
	    Если  ТипЗнч(СтрокаТабличнойЧасти.ЗаказВыпуска) <> Тип("ДокументСсылка.ЗаказНаОбслуживаниеОС") Тогда
			СтрокаТабличнойЧасти.ЗаказВыпуска = Документы.ЗаказНаОбслуживаниеОС.ПустаяСсылка();
		КонецЕсли;

	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.КонечнаяПродукция) = Тип("СправочникСсылка.Номенклатура") Тогда
		    Если (ТипЗнч(СтрокаТабличнойЧасти.Заказ) <> Тип("ДокументСсылка.ЗаказПокупателя")
			   	И ТипЗнч(СтрокаТабличнойЧасти.Заказ) <> Тип("ДокументСсылка.ЗаказНаПроизводство")) Тогда
				СтрокаТабличнойЧасти.Заказ = Неопределено;
			КонецЕсли;
			Если ТипЗнч(СтрокаТабличнойЧасти.ЗаказВыпуска) <> Тип("ДокументСсылка.ЗаказНаПроизводство") Тогда
				СтрокаТабличнойЧасти.ЗаказВыпуска = Неопределено;
           КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПродукцияКонечнаяПродукцияПриИзменении()

//Процедура - обработчик события ПриИзменении поля ввода Заказ табличной части "Продукция"
//
Процедура ПродукцияЗаказПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	Если ТипЗнч(СтрокаТабличнойЧасти.Заказ) = Тип("ДокументСсылка.ЗаказНаОбслуживаниеОС")
	   И ТипЗнч(СтрокаТабличнойЧасти.КонечнаяПродукция) <> Тип("СправочникСсылка.ОсновныеСредства") Тогда
		СтрокаТабличнойЧасти.КонечнаяПродукция = Справочники.ОсновныеСредства.ПустаяСсылка();
		
	ИначеЕсли (ТипЗнч(СтрокаТабличнойЧасти.Заказ) = Тип("ДокументСсылка.ЗаказПокупателя")
			   ИЛИ ТипЗнч(СтрокаТабличнойЧасти.Заказ) = Тип("ДокументСсылка.ЗаказНаПроизводство"))
		    И ТипЗнч(СтрокаТабличнойЧасти.КонечнаяПродукция) <> Тип("СправочникСсылка.Номенклатура") Тогда
		СтрокаТабличнойЧасти.КонечнаяПродукция = Справочники.Номенклатура.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры // ПродукцияЗаказПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификация
// в табличной части "Продукция".
//
Процедура ПродукцияСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.Продукция.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ПродукцияСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура ПродукцияСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ПродукцияСчетОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура ПродукцияСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ПродукцияСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода заказ
//
Процедура ПродукцияЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	
	МассивИсключаемыхТипов = Новый Массив;
 	МассивИсключаемыхТипов.Добавить(Тип("ДокументСсылка.ЗаказНаОбслуживаниеОС"));
	ДопПараметры.Вставить( "ИсключаемыеТипы", МассивИсключаемыхТипов);
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры.Вставить("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
		
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Продукция", ДопПараметры);

КонецПроцедуры // ПродукцияЗаказНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода заказ выпуска.
//
Процедура ПродукцияЗаказВыпускаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	
	МассивИсключаемыхТипов = Новый Массив;
	Если (ЗначениеЗаполнено(СтрокаТабличнойЧасти.КонечнаяПродукция) И ТипЗнч(СтрокаТабличнойЧасти.КонечнаяПродукция) <> Тип("СправочникСсылка.ОсновныеСредства")) ИЛИ Не ИспользоватьЗаказыНаОбслуживаниеОС Тогда
		МассивИсключаемыхТипов.Добавить(Тип("ДокументСсылка.ЗаказНаОбслуживаниеОС"));
	КонецЕсли;
		
	ДопПараметры.Вставить("ИсключаемыеТипы", МассивИсключаемыхТипов);
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры.Вставить("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
		
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Продукция", ДопПараметры);
		
КонецПроцедуры // ПродукцияЗаказВыпускаНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ МАТЕРИАЛЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Материалы". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиМатериалы,      ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент, ИспользоватьЗаказы, ИспользоватьНаправленияВыпуска, ИспользоватьНаработку, ДанныеСтроки, ОформлениеСтроки);

КонецПроцедуры // МатериалыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти);
	
	УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, , Ложь);

КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаЗначенияНоменклатуры(Элемент, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // МатериалыНоменклатураНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // МатериалыКоличествоПриИзменении()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части 
// "Материалы".
//
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
		Элемент.ТекущаяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЕсли;

КонецПроцедуры // МатериалыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" табличной части "Материалы".
//
Процедура МатериалыЕдиницаМестПриИзменении(Элемент)

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаМестПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Статья затрат
// табличной части "Материалы".
//
Процедура МатериалыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.Материальные);
	
КонецПроцедуры // МатериалыСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "Материалы".
//
Процедура МатериалыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Материалы", ДопПараметры);
	
КонецПроцедуры // МатериалыЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПРОЧИЕ ЗАТРАТЫ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
		Элемент.ТекущаяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЕсли;

КонецПроцедуры // ПрочиеЗатратыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода сумма
// в строке табличной части "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // ПрочиеЗатратыСуммаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Статья затрат
// табличной части "ПрочиеЗатраты"
//
Процедура ПрочиеЗатратыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СформироватьТаблицуОтбораНематериальныхПроизводственныхСтатейЗатрат();
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		ТаблицаОтбора, 
		Элемент, 
		СтандартнаяОбработка
	);
	
КонецПроцедуры // ПрочиеЗатратыСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "ПрочиеЗатраты"
//
Процедура ПрочиеЗатратыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ПрочиеЗатраты", ДопПараметры);
	
КонецПроцедуры // ПрочиеЗатратыЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОЗВРАТНЫЕ ОТХОДЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "ВозвратныеОтходы". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура ВозвратныеОтходыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиВозвратныеОтходы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВозвратныеОтходы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент, ИспользоватьЗаказы, Неопределено, ИспользоватьНаработку, ДанныеСтроки, ОформлениеСтроки);
	
	Если ДанныеСтроки.СтатьяЗатрат.СтатусМатериальныхЗатрат = Перечисления.СтатусыМатериальныхЗатратНаПроизводство.ПринятыеВПереработку Тогда
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.ОтметкаНезаполненного = Ложь;
		ОформлениеСтроки.Ячейки.СчетНУ.ОтметкаНезаполненного = Ложь;
	Иначе
		ОформлениеСтроки.Ячейки.СчетЗатратНУ.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(ДанныеСтроки.СчетЗатратНУ);
		ОформлениеСтроки.Ячейки.СчетНУ.ОтметкаНезаполненного  = НЕ ЗначениеЗаполнено(ДанныеСтроки.СчетНУ);
	КонецЕсли;

КонецПроцедуры // ВозвратныеОтходыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти);
	
	УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратныеОтходы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ОтражениеВУСН) Тогда
		СтрокаТабличнойЧасти.ОтражениеВУСН = Перечисления.ОтражениеВУСН.Принимаются;
	КонецЕсли;
	
КонецПроцедуры // ВозвратныеОтходыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Возвратные отходы".
//
Процедура ВозвратныеОтходыХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры // ВозвратныеОтходыХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыКоличествоМестПриИзменении(Элемент)
	
	// Рассчитать новое количество
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // ВозвратныеОтходыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // ВозвратныеОтходыЕдиницаИзмеренияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количество
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыКоличествоПриИзменении(Элемент)
	
	// Рассчитать реквизиты табличной части.
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // ВозвратныеОтходыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // ВозвратныеОтходыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода сумма
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыСуммаПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Суммы.
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"ВозвратныеОтходы");
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // ВозвратныеОтходыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "СтатьяЗатрат"
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;

	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "ВозвратныеОтходы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
			Элемент.ТекущаяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СтатусПартии) Тогда
			Элемент.ТекущиеДанные.СтатусПартии = Перечисления.СтатусыПартийТоваров.Продукция;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ВозвратныеОтходыПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода счета
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыСчетПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, , "Счет", "СчетНУ");
	
КонецПроцедуры // ВозвратныеОтходыСчетПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // ВозвратныеОтходыСчетЗатратПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификация
// в табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ВозвратныеОтходыСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура ВозвратныеОтходыСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ВозвратныеОтходыСчетОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура ВозвратныеОтходыСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ВозвратныеОтходыСчетЗатратОбработкаВыбора()

// Процедура - обработчик события НачалоВыбора поля ввода заказ
// в табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ВозвратныеОтходы", ДопПараметры);
	
КонецПроцедуры // ВозвратныеОтходыЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ РАСПРЕДЕЛЕНИЕ МАТЕРИАЛОВ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
		Элемент.ТекущаяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЕсли;

КонецПроцедуры // РаспределениеМатериаловПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "Распределение материалов".
//
Процедура РаспределениеМатериаловСчетЗатратПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);

КонецПроцедуры // РаспределениеМатериаловСчетЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" табличной части "Материалы".
//
Процедура РаспределениеМатериаловЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные, ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ НЗП.
//
Процедура РаспределениеМатериаловЗаказНЗПНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеМатериалов", ДопПараметры, "ЗаказНЗП");
	
КонецПроцедуры // РаспределениеМатериаловЗаказНЗПНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Распределение материалов".
//
Процедура РаспределениеМатериаловНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти);
	
	УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, , Ложь);
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "РаспределениеМатериалов", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
КонецПроцедуры // РаспределениеМатериаловНоменклатураПриИзменении()

// Процедура - обработчик события НачалоВыбора поля ввода Спецификация
// в табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные.Продукция, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // РаспределениеМатериаловСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура РаспределениеМатериаловСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // РаспределениеМатериаловСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода продукция
//
Процедура РаспределениеМатериаловПродукцияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеМатериаловПродукцияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики продукции.
//
Процедура РаспределениеМатериаловХарактеристикаПродукцииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеМатериаловХарактеристикаПродукцииПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Статья затрат
// табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.Материальные);
	
КонецПроцедуры // РаспределениеМатериаловСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеМатериалов", ДопПараметры);
	
КонецПроцедуры // РаспределениеМатериаловЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ РАСПРЕДЕЛЕНИЕ ПРОЧИХ ЗАТРАТ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// в строке табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
		Элемент.ТекущаяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЕсли;

КонецПроцедуры // РаспределениеПрочихЗатратПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "Распределение прочих затрат".
//
Процедура РаспределениеПрочихЗатратСчетЗатратПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);

КонецПроцедуры // РаспределениеПрочихЗатратСчетЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ НЗП.
//
Процедура РаспределениеПрочихЗатратЗаказНЗПНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеПрочихЗатрат", ДопПараметры, "ЗаказНЗП");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода сумма
// в строке табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // РаспределениеПрочихЗатратСуммаПриИзменении()

//Процедура - обработчик события НачалоВыбора поля ввода Спецификация
// в табличной части "Продукция".
//
Процедура РаспределениеПрочихЗатратСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущиеДанные.Продукция, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // РаспределениеПрочихЗатратСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура РаспределениеПрочихЗатратСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // РаспределениеПрочихЗатратСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода продукция
//
Процедура РаспределениеПрочихЗатратПродукцияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеПрочихЗатратПродукцияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики продукции.
//
Процедура РаспределениеПрочихЗатратХарактеристикаПродукцииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеПрочихЗатратХарактеристикаПродукцииПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Статья затрат
// табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СформироватьТаблицуОтбораНематериальныхПроизводственныхСтатейЗатрат();
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		ТаблицаОтбора, 
		Элемент, 
		СтандартнаяОбработка
	);
	
КонецПроцедуры // РаспределениеПрочихЗатратСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеПрочихЗатрат", ДопПараметры);
	
КонецПроцедуры // РаспределениеПрочихЗатратЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ПОЛУЧАТЕЛИ

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// в строке табличной части "Получатели".
//
Процедура ПолучателиПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ДоступностьПолучателей = (ИспользоватьНаработку И ДанныеСтроки.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск ИЛИ Не ИспользоватьНаработку)
							И (ДанныеСтроки.НаправлениеВыпуска = Перечисления.НаправленияВыпуска.НаЗатраты);
	ОформлениеСтроки.Ячейки.Подразделение.Видимость 				= ДоступностьПолучателей;
	ОформлениеСтроки.Ячейки.Подразделение.ТолькоПросмотр 			= Не ДоступностьПолучателей;
	ОформлениеСтроки.Ячейки.ПодразделениеОрганизации.Видимость 		= ДоступностьПолучателей;
	ОформлениеСтроки.Ячейки.ПодразделениеОрганизации.ТолькоПросмотр = Не ДоступностьПолучателей;
	ОформлениеСтроки.Ячейки.СтатьяЗатрат.Видимость 					= ДоступностьПолучателей;
	ОформлениеСтроки.Ячейки.СтатьяЗатрат.ТолькоПросмотр 			= Не ДоступностьПолучателей;
	ОформлениеСтроки.Ячейки.ХарактерЗатрат.Видимость 				= ДоступностьПолучателей;
	ОформлениеСтроки.Ячейки.ХарактерЗатрат.ТолькоПросмотр 			= Не ДоступностьПолучателей;
	ОформлениеСтроки.Ячейки.ОтпущеноСверхЛимита.Видимость 			= ДоступностьПолучателей;
	ОформлениеСтроки.Ячейки.ОтпущеноСверхЛимита.ТолькоПросмотр 		= Не ДоступностьПолучателей;
	ОформлениеСтроки.Ячейки.Проект.Видимость 						= ДоступностьПолучателей;
	ОформлениеСтроки.Ячейки.Проект.ТолькоПросмотр 					= Не ДоступностьПолучателей;
	
	Если ДоступностьПолучателей Тогда
		ХарактерЗатрат = ДанныеСтроки.СтатьяЗатратПолучатель.ХарактерЗатрат;
	    ПустойХарактерЗатрат = НЕ ЗначениеЗаполнено(ХарактерЗатрат);
		УправлениеПроектами.УстановитьДоступностьПроектаВСтрокеТабЧасти(ХарактерЗатрат, ОформлениеСтроки, ЭлементыФормы.Получатели);
	Иначе
		ХарактерЗатрат = Неопределено;
		ПустойХарактерЗатрат = Истина;
	КонецЕсли;
		
	Если ЭлементыФормы.Получатели.Колонки.ХарактерЗатрат.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.Текст = ХарактерЗатрат;
	КонецЕсли;
	
	ОформлениеСтроки.Ячейки.СчетЗатрат.Видимость = Не ПустойХарактерЗатрат;
	ОформлениеСтроки.Ячейки.СчетЗатрат.ТолькоПросмотр = ПустойХарактерЗатрат;
	ОформлениеСтроки.Ячейки.СчетЗатратНУ.Видимость = Не ПустойХарактерЗатрат;
	ОформлениеСтроки.Ячейки.СчетЗатратНУ.ТолькоПросмотр = ПустойХарактерЗатрат;
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	
	Если ДоступностьПолучателей Тогда
		СчетЗатратПолучатель 	= ДанныеСтроки.СчетЗатратПолучатель;
		СчетЗатратПолучательНУ 	= ДанныеСтроки.СчетЗатратПолучательНУ;
	Иначе
		СчетЗатратПолучатель 	= ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СчетЗатратПолучательНУ 	= ПланыСчетов.Налоговый.ПустаяСсылка();
		ХарактерЗатрат			= Перечисления.ХарактерЗатрат.ПустаяСсылка();
	КонецЕсли;
	
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, ДанныеСтроки.Продукция, СчетЗатратПолучатель, СчетЗатратПолучательНУ, ОформлениеСтроки, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП);
	
	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент, ИспользоватьЗаказы, ИспользоватьНаправленияВыпуска, ИспользоватьНаработку, ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры // ПолучателиПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода статьи затрат
// в строке табличной части "Получатели".
//
Процедура ПолучателиСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Получатели.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатратПолучатель) Тогда
		СтрокаТабличнойЧасти.СчетЗатратПолучатель = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТабличнойЧасти.СчетЗатратПолучательНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
	Иначе
		ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТабличнойЧасти, "Продукция", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Ложь, Ложь);
	КонецЕсли;
	
	УправлениеПроектами.УстановитьПроектПоУмолчанию(СтрокаТабличнойЧасти.ПодразделениеПолучатель, СтрокаТабличнойЧасти.СтатьяЗатратПолучатель, СтрокаТабличнойЧасти.Проект);
	
КонецПроцедуры // ПолучателиСтатьяЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода статьи затрат
// в строке табличной части "Получатели".
//
Процедура ПолучателиСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Получатели.ТекущиеДанные;
	Если Не СтрокаТабличнойЧасти.Номенклатура.Услуга Тогда
		РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Неопределено, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.Материальные);
	КонецЕсли;
	
КонецПроцедуры // ПолучателиСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "Получатели".
//
Процедура ПолучателиСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Получатели.ТекущиеДанные;
	Колонки = ЭлементыФормы.Получатели.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             СтрокаТабличнойЧасти.Субконто1,
	                             Колонки.Субконто1,
	                             СтрокаТабличнойЧасти.Субконто2,
	                             Колонки.Субконто2,
	                             СтрокаТабличнойЧасти.Субконто3,
	                             Колонки.Субконто3);
								 
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, , "СчетЗатратПолучатель", "СчетЗатратПолучательНУ");
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратПолучательНУ,
	                             СтрокаТабличнойЧасти.СубконтоНУ1,
	                             Колонки.СубконтоНУ1,
	                             СтрокаТабличнойЧасти.СубконтоНУ2,
	                             Колонки.СубконтоНУ2,
	                             СтрокаТабличнойЧасти.СубконтоНУ3,
	                             Колонки.СубконтоНУ3);
								 
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		СтрокаТабличнойЧасти.СтатьяЗатратПолучатель,
		Элемент.Значение,
		СтрокаТабличнойЧасти.Субконто1,
		СтрокаТабличнойЧасти.Субконто2,
		СтрокаТабличнойЧасти.Субконто3);
		
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		СтрокаТабличнойЧасти.СтатьяЗатратПолучатель,
		СтрокаТабличнойЧасти.СчетЗатратПолучательНУ,
		СтрокаТабличнойЧасти.СубконтоНУ1,
		СтрокаТабличнойЧасти.СубконтоНУ2,
		СтрокаТабличнойЧасти.СубконтоНУ3);
	
КонецПроцедуры // ПолучателиСчетЗатратПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура ПолучателиСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ПолучателиСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "Получатели".
//
Процедура ПолучателиСчетЗатратНУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Получатели.ТекущиеДанные;
	Колонки = ЭлементыФормы.Получатели.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(СтрокаТабличнойЧасти.СчетЗатратПолучательНУ,
	                             СтрокаТабличнойЧасти.СубконтоНУ1,
	                             Колонки.СубконтоНУ1,
	                             СтрокаТабличнойЧасти.СубконтоНУ2,
	                             Колонки.СубконтоНУ2,
	                             СтрокаТабличнойЧасти.СубконтоНУ3,
	                             Колонки.СубконтоНУ3);
								 
	УправлениеЗатратами.УстановитьСубконтоСтатьяЗатрат(
		СтрокаТабличнойЧасти.СтатьяЗатратПолучатель,
		СтрокаТабличнойЧасти.СчетЗатратПолучательНУ,
		СтрокаТабличнойЧасти.СубконтоНУ1,
		СтрокаТабличнойЧасти.СубконтоНУ2,
		СтрокаТабличнойЧасти.СубконтоНУ3);
	
КонецПроцедуры // ПолучателиСчетЗатратНУПриИзменении

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура ПолучателиСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ПолучателиСчетЗатратНУОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
// табличной части "Получатели".
//
Процедура ПолучателиПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 Элементыформы.Получатели.ТекущиеДанные.ПодразделениеОрганизацииПолучатель,
											 Элементыформы.Получатели.ТекущиеДанные.ПодразделениеПолучатель,
											 Организация,
											 ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделенияОрганизации
// табличной части "Получатели".
//
Процедура ПолучателиПодразделениеОрганизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Получатели.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПодразделениеОрганизацииПолучатель) Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,мПрименениеУСН) Тогда
		ЗаполнитьСчетаУчетаВТабЧасти(СтрокаТабличнойЧасти, "Продукция", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете, Ложь, Ложь);
	КонецЕсли;
	
КонецПроцедуры // ПолучателиПодразделениеОрганизацииПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделения
// табличной части "Получатели"
Процедура ПолучателиПодразделениеПриИзменении(Элемент)
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												   Элементыформы.Получатели.ТекущиеДанные.ПодразделениеОрганизацииПолучатель,
												   Элементыформы.Получатели.ТекущиеДанные.ПодразделениеПолучатель,
												   Организация);
	
	ПолучателиПодразделениеОрганизацииПриИзменении(Элемент)
	
КонецПроцедуры // ПолучателиПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "Получатели".
//
Процедура ПолучателиЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Продукция", ДопПараметры, "ЗаказПолучатель");
	
КонецПроцедуры // ПолучателиЗаказНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Проект"
//
Процедура ПолучателиПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ПолучателиПроектНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТехнологическиеОперации

// Процедура - обработчик события "ПриВыводеСтроки" таб.поля ТехнологическиеОперации
//
Процедура ТехнологическиеОперацииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	УправлениеПроектами.УстановитьДоступностьПроектаВСтрокеТабЧасти(ХарактерЗатрат, ОформлениеСтроки, ЭлементыФормы.ТехнологическиеОперации);

	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, ДанныеСтроки.Продукция, , , ОформлениеСтроки, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП);
	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент, ИспользоватьЗаказы, ИспользоватьНаправленияВыпуска, ИспользоватьНаработку, ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры // ТехнологическиеОперацииПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// в строке табличной части "ТехнологическиеОперации".
//
Процедура ТехнологическиеОперацииПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
		Элемент.ТекущаяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЕсли;
	
КонецПроцедуры // ТехнологическиеОперацииПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода технологической операции
//
Процедура ТехнологическиеОперацииТехнологическаяОперацияПриИзменении(Элемент)
	
	ТехОперация = Элемент.Значение;
	Если Не ТехОперация.Пустая() Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ТехнологическиеОперации.ОсновнаяСтатьяЗатратНаПроизводство,
		                      |	ТехнологическиеОперации.СпособОтраженияЗарплатыВБухучете.СчетДт КАК СчетУчетаБУ,
		                      |	ТехнологическиеОперации.СпособОтраженияЗарплатыВБухучете.СчетДтНУ КАК СчетУчетаНУ,
		                      |	ТехнологическиеОперации.ОсновнаяНоменклатурнаяГруппа,
		                      |	ТехнологическиеОперации.Расценка,
		                      |	ТехнологическиеОперации.Валюта
		                      |ИЗ
		                      |	Справочник.ТехнологическиеОперации КАК ТехнологическиеОперации
		                      |
		                      |ГДЕ
		                      |	ТехнологическиеОперации.Ссылка = &Ссылка");
							  
		Запрос.УстановитьПараметр("Ссылка",ТехОперация);
		ТехОперация = Запрос.Выполнить().Выбрать();
		ТехОперация.Следующий();
		
		ТекущаяСтрока = ЭлементыФормы.ТехнологическиеОперации.ТекущаяСтрока;
		
		ТекущаяСтрока.СтатьяЗатрат			= ТехОперация.ОсновнаяСтатьяЗатратНаПроизводство;
		ТекущаяСтрока.НоменклатурнаяГруппа	= ТехОперация.ОсновнаяНоменклатурнаяГруппа;
		ТекущаяСтрока.Расценка				= ТехОперация.Расценка;
		ТекущаяСтрока.Валюта				= ?(НЕ ЗначениеЗаполнено(ТехОперация.Валюта), мВалютаУправленческогоУчета, ТехОперация.Валюта);
		ТекущаяСтрока.СчетЗатрат   = ТехОперация.СчетУчетаБУ;
		ТекущаяСтрока.СчетЗатратНУ = ТехОперация.СчетУчетаНУ;
		
		РассчитатьСуммуТехОперации(ТекущаяСтрока);
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СтатьяЗатрат"
//
Процедура ТехнологическиеОперацииСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ТехнологическиеОперации.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(
		СтрокаТабличнойЧасти,
		ПодразделениеОрганизации,
		СтрокаТабличнойЧасти.СтатьяЗатрат);
		
	Если ЭлементыФормы.ТехнологическиеОперации.Колонки.Проект.Видимость Тогда
		УправлениеПроектами.УстановитьПроектПоУмолчанию(Подразделение, СтрокаТабличнойЧасти.СтатьяЗатрат, СтрокаТабличнойЧасти.Проект);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода расченки
//
Процедура ТехнологическиеОперацииРасценкаПриИзменении(Элемент)
	
	РассчитатьСуммуТехОперации(ЭлементыФормы.ТехнологическиеОперации.ТекущиеДанные);
	
КонецПроцедуры // ТехнологическиеОперацииРасценкаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода валюты
//
Процедура ТехнологическиеОперацииВалютаПриИзменении(Элемент)
	// ПроведениеРасчетов.РассчитатьСуммуЗаРаботу(ЭлементыФормы.Выработка.ТекущиеДанные,Дата, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, мКурсВалютыУпрУчета, мКратностьВалютыУпрУчета)
	РассчитатьСуммуТехОперации(ЭлементыФормы.ТехнологическиеОперации.ТекущиеДанные);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода количества
//
Процедура ТехнологическиеОперацииКоличествоПриИзменении(Элемент)
	РассчитатьСуммуТехОперации(ЭлементыФормы.ТехнологическиеОперации.ТекущиеДанные);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаЗаРаботуВВалюте"
//
Процедура ТехнологическиеОперацииСуммаЗаРаботуВВалютеПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТехнологическиеОперации.ТекущиеДанные;
	
	Если ТекСтрока.Количество = 0 Тогда
		ТекСтрока.Расценка = 0;
	Иначе
		ТекСтрока.Расценка = ТекСтрока.СуммаВВалютеРасценки / ТекСтрока.Количество;
	КонецЕсли;
		
	РассчитатьСуммуТехОперации(ЭлементыФормы.ТехнологическиеОперации.ТекущиеДанные);
	
КонецПроцедуры // ТехнологическиеОперацииСуммаЗаРаботуВВалютеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма"
//
Процедура ТехнологическиеОперацииСуммаПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.ТехнологическиеОперации.ТекущиеДанные;
	
	ТекСтрока.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		ТекСтрока.Сумма,
		мВалютаУправленческогоУчета,
		мВалютаРегламентированногоУчета,
		мКурсВалютыУпрУчета, 1,
		мКратностьВалютыУпрУчета, 1);
		
КонецПроцедуры // ТехнологическиеОперацииСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода счета БУ
//
Процедура ТехнологическиеОперацииСчетУчетаБУПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ТехнологическиеОперации.ТекущиеДанные;
	СтрокаТабличнойЧасти.СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти.СчетЗатрат));

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Проект"
//
Процедура ТехнологическиеОперацииПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ТехнологическиеОперацииПроектНачалоВыбора()

Процедура ТехнологическиеОперацииСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Статья затрат
// табличной части "ТехнологическиеОперации".
//
Процедура ТехнологическиеОперацииСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.ОплатаТруда);
	
КонецПроцедуры // ТехнологическиеОперацииСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "ТехнологическиеОперации".
//
Процедура ТехнологическиеОперацииЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ТехнологическиеОперации", ДопПараметры);
	
КонецПроцедуры // ТехнологическиеОперацииЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ РаспределениеТехнологическихОпераций

// Процедура - обработчик события НачалоВыбора поля ввода Спецификации
// в табличной части "РаспределениеТехнологическихОпераций".
//
Процедура РаспределениеТехнологическихОперацийСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.РаспределениеТехнологическихОпераций.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // РаспределениеТехнологическихОперацийСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура РаспределениеТехнологическихОперацийСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // РаспределениеТехнологическихОперацийСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "СтатьяЗатрат"
//
Процедура РаспределениеТехнологическихОперацийСтатьяЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеТехнологическихОпераций.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(
		СтрокаТабличнойЧасти,
		ПодразделениеОрганизации,
		СтрокаТабличнойЧасти.СтатьяЗатрат);
		
КонецПроцедуры // РаспределениеТехнологическихОперацийСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода сумма
// в строке табличной части "РаспределениеТехнологическихОпераций".
//
Процедура РаспределениеТехнологическихОперацийСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеТехнологическихОпераций.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
		СтрокаТабличнойЧасти.Сумма,
		мВалютаУправленческогоУчета,
		мВалютаРегламентированногоУчета,
		мКурсВалютыУпрУчета, 1,
		мКратностьВалютыУпрУчета, 1);
	
КонецПроцедуры // РаспределениеТехнологическихОперацийСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода продукция
//
Процедура РаспределениеТехнологическихОперацийНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеТехнологическихОпераций.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеТехнологическихОперацийНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристики продукции.
//
Процедура РаспределениеТехнологическихОперацийХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеТехнологическихОпераций.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеТехнологическихОперацийХарактеристикаНоменклатурыПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Статья затрат
// табличной части "РаспределениеТехнологическихОпераций".
//
Процедура РаспределениеТехнологическихОперацийСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, Элемент, СтандартнаяОбработка, Перечисления.ВидыЗатрат.ОплатаТруда);
	
КонецПроцедуры // РаспределениеТехнологическихОперацийСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "РаспределениеТехнологическихОпераций".
//
Процедура РаспределениеТехнологическихОперацийЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеТехнологическихОпераций", ДопПараметры);
	
КонецПроцедуры // РаспределениеТехнологическихОперацийЗаказНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Исполнители

Процедура ИсполнителиПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
	
		Элемент.ТекущаяСтрока.КТУ = 1;
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура ИсполнителиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогами.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Исполнители, ОформленияСтрок);
	
КонецПроцедуры // ИсполнителиПриПолученииДанных()

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура ИсполнителиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбработкаВыбораРаботника(ВыбранноеЗначение);
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры  // ТабличнаяЧастьОбработкаВыбора

// Процедура - обработчик события "ПриИзменении" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнителиСотрудникПриИзменении(Элемент)
	ЭлементыФормы.Исполнители.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
	ОбработкаВыбораРаботника(Элемент.Значение);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнителиСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// переопеределим выбор физлица на выбор из списка регистра сведений
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
		
	Иначе
		ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
		
	КонецЕсли;
	
КонецПроцедуры // ИсполнителиСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнителиСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, ?(ОтражатьВБухгалтерскомУчете,"РаботникиОрганизации","Работники"), Текст, Организация);
	
КонецПроцедуры // ИсполнителиСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ИсполнителиСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, ?(ОтражатьВБухгалтерскомУчете,"РаботникиОрганизации","Работники"), Текст, Элемент.Значение, Организация);
	
КонецПроцедуры // ИсполнителиСотрудникОкончаниеВводаТекста()


// Процедура - обработчик события "ПриИзменении" поля ввода "СуммаКНачислению"
//
Процедура ИсполнителиСуммаКНачислениюПриИзменении(Элемент)
	Если Исполнители.Итог("СуммаКНачислению") <> ТехнологическиеОперации.Итог("Сумма") Или Исполнители.Итог("СуммаКНачислениюРегл") <> ТехнологическиеОперации.Итог("СуммаРегл") Тогда
		
		ТекСтрока = ЭлементыФормы.Исполнители.ТекущиеДанные;
		
		ТекСтрока.СуммаКНачислениюРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(
			ТекСтрока.СуммаКНачислению,
			мВалютаУправленческогоУчета,
			мВалютаРегламентированногоУчета,
			мКурсВалютыУпрУчета, 1,
			мКратностьВалютыУпрУчета, 1);
		
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ РАСПРЕДЕЛЕНИЕ ВОЗВРАТНЫХ ОТХОДОВ

// Процедура - обработчик события "ПриНачалеРедактирования" табличной части
// "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовПриНачалеРедактирования(Элемент, НоваяСтрока)

	Если НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущаяСтрока.ВидВыпуска) Тогда
		Элемент.ТекущаяСтрока.ВидВыпуска = Перечисления.ВидыВыпуска.Выпуск;
	КонецЕсли;

КонецПроцедуры // РаспределениеВозвратныхОтходовПриНачалеРедактирования()

// Процедура - обработчик события "ПриИзменении" поля ввода счета затрат
// в строке табличной части "РаспределениеВозвратныхОтходов.
//
Процедура РаспределениеВозвратныхОтходовСчетЗатратПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);

КонецПроцедуры // РаспределениеВозвратныхОтходовСчетЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ НЗП.
//
Процедура РаспределениеВозвратныхОтходовЗаказНЗПНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеВозвратныхОтходов", ДопПараметры, "ЗаказНЗП");
	
КонецПроцедуры // РаспределениеВозвратныхОтходовЗаказНЗПНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	ПриИзмененииНоменклатурыМатериаловИПродукции(СтрокаТабличнойЧасти);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтатьяЗатрат) Тогда
		СтрокаТабличнойЧасти.СтатьяЗатрат = СтрокаТабличнойЧасти.Номенклатура.СтатьяЗатрат;
	КонецЕсли;

	СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;

	//не надо учитывать статью затрат при определении счета затрат
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, Неопределено);
		

КонецПроцедуры // РаспределениеВозвратныхОтходовНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Единица измерения
// в строке табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовЕдиницаИзмеренияПриИзменении(Элемент)
	
	// Выполнить общие действия для всех документов при изменении Единица.
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовЕдиницаИзмеренияПриИзменении()

//Процедура - обработчик события НачалоВыбора поля ввода Спецификация
// в табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные.Продукция, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовСпецификацияНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счета затрат
//
Процедура РаспределениеВозвратныхОтходовСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода продукция
//
Процедура РаспределениеВозвратныхОтходовПродукцияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовПродукцияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода характеристика продукции.
//
Процедура РаспределениеВозвратныхОтходовХарактеристикаПродукцииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущаяСтрока;
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Продукция, СтрокаТабличнойЧасти.ХарактеристикаПродукции, Дата, Подразделение);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовХарактеристикаПродукцииПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеВозвратныхОтходов", ДопПараметры);
	
КонецПроцедуры // РаспределениеВозвратныхОтходовЗаказНачалоВыбора()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

Процедура ПродукцияЗаказРезервНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Продукция", ДопПараметры);
	
КонецПроцедуры // ПродукцияЗаказРезервНачалоВыбора()

Процедура РаспределениеМатериаловПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент, ИспользоватьЗаказы, ИспользоватьНаправленияВыпуска, ИспользоватьНаработку, ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры // РаспределениеМатериаловПриВыводеСтроки()

Процедура РаспределениеТехнологическихОперацийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент, ИспользоватьЗаказы, ИспользоватьНаправленияВыпуска, ИспользоватьНаработку, ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры // РаспределениеТехнологическихОперацийПриВыводеСтроки()

Процедура ПрочиеЗатратыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент,ИспользоватьЗаказы, ИспользоватьНаправленияВыпуска, ИспользоватьНаработку, ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры // ПрочиеЗатратыПриВыводеСтроки()

Процедура РаспределениеПрочихЗатратПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	УправлениеПроизводством.ВидимостьЯчеекЗаказы(Элемент,ИспользоватьЗаказы, ИспользоватьНаправленияВыпуска, ИспользоватьНаработку, ДанныеСтроки, ОформлениеСтроки);
	
КонецПроцедуры // РаспределениеПрочихЗатратПриВыводеСтроки()

Процедура ВозвратныеОтходыЗаказРезервНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);
	
	УправлениеЗаказами.НачалоВыбораДокументаЗаказа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ВозвратныеОтходы", ДопПараметры);
		
КонецПроцедуры // ВозвратныеОтходыЗаказРезервНачалоВыбора()

Процедура МатериалыЗаказВыпускаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Материалы", ДопПараметры);
		
КонецПроцедуры // МатериалыЗаказВыпускаНачалоВыбора()

Процедура РаспределениеМатериаловЗаказВыпускаНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "РаспределениеМатериалов", ДопПараметры);
		
КонецПроцедуры // РаспределениеМатериаловЗаказВыпускаНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделениеНЗП
// в строке табличной части "Материалы".
//
Процедура МатериалыПодразделениеНЗППриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
												  СтрокаТабличнойЧасти.ПодразделениеНЗП,
												  Организация);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "Материалы".
//
Процедура МатериалыПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделениеНЗП
// в строке табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловПодразделениеНЗППриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
												  СтрокаТабличнойЧасти.ПодразделениеНЗП,
												  Организация);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "РаспределениеМатериалов".
//
Процедура РаспределениеМатериаловПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеМатериалов.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделениеНЗП
// в строке табличной части "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыПодразделениеНЗППриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
												  СтрокаТабличнойЧасти.ПодразделениеНЗП,
												  Организация);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "ПрочиеЗатраты".
//
Процедура ПрочиеЗатратыПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделениеНЗП
// в строке табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратПодразделениеНЗППриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущиеДанные;
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
												  СтрокаТабличнойЧасти.ПодразделениеНЗП,
												  Организация);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "РаспределениеПрочихЗатрат".
//
Процедура РаспределениеПрочихЗатратПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеПрочихЗатрат.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ПодразделениеНЗП
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыПодразделениеНЗППриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
												  СтрокаТабличнойЧасти.ПодразделениеНЗП,
												  Организация);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "ВозвратныеОтходы".
//
Процедура ВозвратныеОтходыПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВозвратныеОтходы.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовПодразделениеНЗППриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка(
		ОтражатьВБухгалтерскомУчете,
		Элемент,
		СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
		СтрокаТабличнойЧасти.ПодразделениеНЗП,
		Организация,
		ЭтаФорма, 
		Ложь
	);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "РаспределениеВозвратныхОтходов".
//
Процедура РаспределениеВозвратныхОтходовПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеВозвратныхОтходов.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);
КонецПроцедуры


// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "РаспределениеТехнологическихОпераций".
//
Процедура РаспределениеТехнологическихОперацийПодразделениеНЗППриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеТехнологическихОпераций.ТекущиеДанные;
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
												  СтрокаТабличнойЧасти.ПодразделениеНЗП,
												  Организация);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "РаспределениеТехнологическихОпераций".
//
Процедура РаспределениеТехнологическихОперацийПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РаспределениеТехнологическихОпераций.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "ТехнологическиеОперации".
//
Процедура ТехнологическиеОперацииПодразделениеНЗППриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.ТехнологическиеОперации.ТекущиеДанные;
	
	// Попробуем заполнить подразделение организации.
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
												  СтрокаТабличнойЧасти.ПодразделениеНЗП,
												  Организация);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизацииНЗП
// в строке табличной части "ТехнологическиеОперации".
//
Процедура ТехнологическиеОперацииПодразделениеОрганизацииНЗПНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ТехнологическиеОперации.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 СтрокаТабличнойЧасти.ПодразделениеОрганизацииНЗП,
											 СтрокаТабличнойЧасти.ПодразделениеНЗП,
											 Организация,
											 ЭтаФорма, Ложь);

КонецПроцедуры

Процедура ПродукцияЗаказВыпускаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.Продукция.ТекущиеДанные;
	Если ТипЗнч(СтрокаТабличнойЧасти.ЗаказВыпуска) = Тип("ДокументСсылка.ЗаказНаОбслуживаниеОС")
	   И ТипЗнч(СтрокаТабличнойЧасти.КонечнаяПродукция) <> Тип("СправочникСсылка.ОсновныеСредства") Тогда
		СтрокаТабличнойЧасти.КонечнаяПродукция = Справочники.ОсновныеСредства.ПустаяСсылка();
		
	ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.ЗаказВыпуска) = Тип("ДокументСсылка.ЗаказНаПроизводство")
		    И ТипЗнч(СтрокаТабличнойЧасти.КонечнаяПродукция) <> Тип("СправочникСсылка.Номенклатура") Тогда
		СтрокаТабличнойЧасти.КонечнаяПродукция = Справочники.Номенклатура.ПустаяСсылка();
		
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиПродукция 						= ЭлементыФормы.Продукция.Колонки;
мКолонкиПолучатели 						= ЭлементыФормы.Получатели.Колонки;
мКолонкиМатериалы 						= ЭлементыФормы.Материалы.Колонки;
мКолонкиРаспределениеМатериалов 		= ЭлементыФормы.РаспределениеМатериалов.Колонки;
мКолонкиВозвратныеОтходы 				= ЭлементыФормы.ВозвратныеОтходы.Колонки;
мКолонкиРаспределениеВозвратныхОтходов 	= ЭлементыФормы.РаспределениеВозвратныхОтходов.Колонки;

мКолонкиТехнологическиеОперации			= ЭлементыФормы.ТехнологическиеОперации.Колонки;
мКолонкиРаспределениеТехнологическихОпераций = ЭлементыФормы.РаспределениеТехнологическихОпераций.Колонки;
мКолонкиПрочиеЗатраты					= ЭлементыФормы.ПрочиеЗатраты.Колонки;
мКолонкиРаспределениеПрочихЗатрат 		= ЭлементыФормы.РаспределениеПрочихЗатрат.Колонки;


ЭлементыФормы.Продукция.Колонки.СтатусПартии.ЭлементУправления.СписокВыбора.Добавить(Перечисления.СтатусыПартийТоваров.Купленный);
ЭлементыФормы.Продукция.Колонки.СтатусПартии.ЭлементУправления.СписокВыбора.Добавить(Перечисления.СтатусыПартийТоваров.Продукция);

ЭлементыФормы.ВозвратныеОтходы.Колонки.СтатусПартии.ЭлементУправления.СписокВыбора.Добавить(Перечисления.СтатусыПартийТоваров.Продукция);
ЭлементыФормы.ВозвратныеОтходы.Колонки.СтатусПартии.ЭлементУправления.СписокВыбора.Добавить(Перечисления.СтатусыПартийТоваров.ВПереработку);
ЭлементыФормы.ВозвратныеОтходы.Колонки.СтатусПартии.ЭлементУправления.СписокВыбора.Добавить(Перечисления.СтатусыПартийТоваров.Купленный);