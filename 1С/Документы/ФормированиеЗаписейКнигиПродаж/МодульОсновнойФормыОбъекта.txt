// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧПоРеализации;
Перем мКнопкиЗаполненияТЧСАвансов;
Перем мКнопкиЗаполненияТЧНачисленКУплате;
Перем мКнопкиЗаполненияТЧВосстановлен;
Перем мКнопкиЗаполненияТЧНеОтражается;
Перем мКнопкиЗаполненияТЧВосстановленПоАвансам;

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
Процедура УстановитьВидимость()
	
	УстановитьВидимостьФлагаСторнирующихЗаписей();
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Реализация.Колонки.Состояние, 	Реализация0);
	
	УстановитьВидимостьКолонкиДоговораКомиссии();
	
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.Авансы.Видимость = НЕ Реализация0;
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.НачисленКУплате.Видимость = НЕ Реализация0;
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.НеОтражаетсяВКниге.Видимость = НЕ Реализация0;
	ЭлементыФормы.НДСПоВидамНачисления.Страницы.Восстановлен.Видимость = НЕ Реализация0;
	
	Законодательство2012 = УчетНДС.ПолучитьВерсиюПостановления(Дата) = 2;
	
	ЭлементыФормы.Восстановлен.Колонки.ИсправленныйСчетФактура.Видимость = Законодательство2012;
	ЭлементыФормы.ВосстановленПоАвансам.Колонки.ИсправленныйСчетФактура.Видимость = Законодательство2012;
	
	
КонецПроцедуры // УстановитьВидимость()
 
Процедура УстановитьВидимостьФлагаСторнирующихЗаписей()
	
	ВидимостьФлага = Реализация.Найти(Истина, "ЗаписьДополнительногоЛиста") <> Неопределено;
	Если Не ВидимостьФлага И Не Реализация0 Тогда
		ВидимостьФлага = Авансы.Найти(Истина, "ЗаписьДополнительногоЛиста") <> Неопределено;
	КонецЕсли;
	ЭлементыФормы.ФормироватьСторнирующиеЗаписиДопЛистовВручную.Видимость = ВидимостьФлага;

	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Реализация.Колонки.СторнирующаяЗаписьДопЛиста, ВидимостьФлага И ФормироватьСторнирующиеЗаписиДопЛистовВручную);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(ЭлементыФормы.Авансы.Колонки.СторнирующаяЗаписьДопЛиста, ВидимостьФлага И ФормироватьСторнирующиеЗаписиДопЛистовВручную);
	
КонецПроцедуры // УстановитьВидимостьФлагаСторнирующихЗаписей()

Процедура УстановитьВидимостьКолонкиДоговораКомиссии()
	
	ВидимостьФлага = Реализация.Найти(Перечисления.ВидыЦенностей.НалоговыйАгентКомитент, "ВидЦенности") <> Неопределено;
	ЭлементыФормы.Реализация.Колонки.ДоговорКонтрагента.Видимость = ВидимостьФлага;
	
КонецПроцедуры // УстановитьВидимостьКолонкиДоговораКомиссии()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры
 
// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧПоРеализации = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧПоРеализации"));
	мКнопкиЗаполненияТЧСАвансов = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧСАвансов"));
	мКнопкиЗаполненияТЧНачисленКУплате = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧНачисленКУплате"));
	мКнопкиЗаполненияТЧВосстановлен = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧВосстановлен"));
	мКнопкиЗаполненияТЧНеОтражается = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧНеОтражается"));
	мКнопкиЗаполненияТЧВосстановленПоАвансам = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧВосстановленПоАвансам"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Реализация, ЭлементыФормы.КоманднаяПанельРеализация.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧПоРеализации,СоответствиеТЧ);
	
	СоответствиеТЧ.Очистить();
	СоответствиеТЧ.Вставить(ЭлементыФормы.Авансы, ЭлементыФормы.КоманднаяПанельАвансы.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧСАвансов,СоответствиеТЧ);
	
	СоответствиеТЧ.Очистить();
	СоответствиеТЧ.Вставить(ЭлементыФормы.НачисленКУплате, ЭлементыФормы.КоманднаяПанельНачисленКУплате.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧНачисленКУплате,СоответствиеТЧ);
	
	СоответствиеТЧ.Очистить();
	СоответствиеТЧ.Вставить(ЭлементыФормы.Восстановлен, ЭлементыФормы.КоманднаяПанельВосстановлен.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧВосстановлен,СоответствиеТЧ);
	
	СоответствиеТЧ.Очистить();
	СоответствиеТЧ.Вставить(ЭлементыФормы.НеОтражаетсяВКниге, ЭлементыФормы.КоманднаяПанельНеОтражаетсяВКниге.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧНеОтражается,СоответствиеТЧ);
	
	СоответствиеТЧ.Очистить();
	СоответствиеТЧ.Вставить(ЭлементыФормы.ВосстановленПоАвансам, ЭлементыФормы.КоманднаяПанельВосстановленПоАвансам.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧВосстановленПоАвансам,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ 

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля дата 
// в диалоге документа.
//
Процедура ДатаПриИзменении(Элемент)

	УстановитьВремя(РежимАвтоВремя.Последним);
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
    УстановитьВидимость();
	
КонецПроцедуры

Процедура Реализация0ПриИзменении(Элемент)

	Если Реализация.Количество() > 0
		Или Авансы.Количество() > 0 
		Или НачисленКУплате.Количество() > 0 
		Или НеОтражаетсяВКниге.Количество() > 0 
		Или Восстановлен.Количество() > 0 
		Или ВосстановленПоАвансам.Количество() > 0 Тогда

		Если Вопрос("Необходимо очистить табличные части. Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Реализация.Очистить();
			Авансы.Очистить();
			НачисленКУплате.Очистить();
			НеОтражаетсяВКниге.Очистить();
			Восстановлен.Очистить();
			ВосстановленПоАвансам.Очистить();
		Иначе
			Реализация0 = НЕ Реализация0;
		КонецЕсли;

	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

Процедура ФормироватьСторнирующиеЗаписиДопЛистовВручнуюПриИзменении(Элемент)
	
	Если Не ФормироватьСторнирующиеЗаписиДопЛистовВручную 
		И (Реализация.Найти(Истина, "СторнирующаяЗаписьДопЛиста") <> Неопределено 
		Или Авансы.Найти(Истина, "СторнирующаяЗаписьДопЛиста") <> Неопределено
		Или ВосстановленПоАвансам.Найти(Истина, "СторнирующаяЗаписьДопЛиста") <> Неопределено)
		Тогда
		ОтветНаВопрос = Вопрос("Удалить строки с установленным флагом «Сторнирующая запись доп. листа» из табличных частей?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			СтруктураОтбора = Новый Структура("СторнирующаяЗаписьДопЛиста", Истина);
			СтрокиКУдалению = Реализация.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Реализация.Удалить(СтрокаКУдалению);
			КонецЦикла;
			СтрокиКУдалению = Авансы.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				Авансы.Удалить(СтрокаКУдалению);
			КонецЦикла;
			СтрокиКУдалению = ВосстановленПоАвансам.НайтиСтроки(СтруктураОтбора);
			Для Каждого СтрокаКУдалению Из СтрокиКУдалению Цикл
				ВосстановленПоАвансам.Удалить(СтрокаКУдалению);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();

КонецПроцедуры

Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");

		УстановитьВремя(РежимАвтоВремя.Последним);

		НачалоПериода = НачалоМесяца(Дата); 
		КонецПериода  = КонецМесяца(Дата);

	КонецЕсли;

	мВестиУчетНДС = УчетНДС.ПроводитьПоРазделуУчетаНДС(Дата);
	мТекущаяДатаДокумента        = Дата;
	
	// Параметры для выбора организации
	УчетПоВсемОрганизациям = Истина; // Для совместимости с БП
	
	// Проверка ведения однофирменности
	ЭлементыФормы.Организация.ТолькоПросмотр = НЕ УчетПоВсемОрганизациям;

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)

	Если НЕ ЗначениеЗаполнено(Организация) Тогда

		Предупреждение("Не указана организация. Операция не записана.");

		Отказ = Истина;

		ТекущийЭлемент = ЭлементыФормы.Организация;

		Возврат;

	КонецЕсли;

КонецПроцедуры

Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Реализация.Количество() > 0 
		или Авансы.Количество() >0
		или НачисленКУплате.Количество() >0
		или Восстановлен.Количество() >0
		или НеОтражаетсяВКниге.Количество() >0
		или ВосстановленПоАвансам.Количество() >0
		Тогда
		ОтветНаВопрос = Вопрос("Заполненные ранее табличные поля документа будут очищены. Продолжить?", РежимДиалогаВопрос.ДаНет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДокумент(, , , Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	УстановитьВидимость();

КонецПроцедуры

Процедура КоманднаяПанельРеализацияЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УчетнаяПолитикаНУ = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(Дата, Организация);
	
	ЗаполнитьРазделРеализация(?(НЕ ЗначениеЗаполнено(УчетнаяПолитикаНУ), Ложь, УчетнаяПолитикаНУ.НДСИспользованиеОплатПокупателя_Приоритет0), Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);

	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	УстановитьВидимость();

КонецПроцедуры

Процедура КоманднаяПанельАвансыЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРазделАвансы(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельНачисленКУплатеЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРазделНачисленКУплате(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельНеОтражаетсяВКнигеЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРазделНеОтражаетсяВКниге(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура КоманднаяПанельВосстановленЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРазделВосстановлен(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура КоманднаяПанельВосстановленПоАвансамЗаполнить(Кнопка)
	
	Если Ссылка.Проведен Тогда
		Ответ = Вопрос("Проведенный документ не может быть заполнен автоматически. Отменить проведение документа для заполнения?", РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Нет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРазделВосстановленПоАвансам(Ссылка.Проведен И Ответ = КодВозвратаДиалога.Да);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ОбновлениеОтображения()
	
	СтраницаПанели  = ЭлементыФормы.НДСПоВидамНачисления.Страницы;
	
	СтраницаПанели.Реализация.Заголовок = "По реализации ("   + ДокументОбъект.Реализация.Количество() + " поз.)";
	СтраницаПанели.Авансы.Заголовок = "С авансов (" + ДокументОбъект.Авансы.Количество() + " поз.)";
	СтраницаПанели.НачисленКУплате.Заголовок = "Начислен к уплате (" + ДокументОбъект.НачисленКУплате.Количество() + " поз.)";
	СтраницаПанели.НеОтражаетсяВКниге.Заголовок = "Не отражается в книге (" + ДокументОбъект.НеОтражаетсяВКниге.Количество() + " поз.)";
	СтраницаПанели.Восстановлен.Заголовок = "Восстановление по другим операциям (" + ДокументОбъект.Восстановлен.Количество() + " поз.)";
	СтраницаПанели.ВосстановленПоАвансам.Заголовок = "Восстановление по авансам (" + ДокументОбъект.ВосстановленПоАвансам.Количество() + " поз.)";

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ РЕАЛИЗАЦИЯ

Процедура РеализацияСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТД = ЭлементыФормы.Реализация.ТекущиеДанные;
	Если ТД = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	СтруктОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбора.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТД.Покупатель) Тогда
		СтруктОтбора.Вставить( "Контрагент", ТД.Покупатель);
	КонецЕсли;
	СтруктОтбора.Вставить("ПокупателемВыставляетсяСчетФактураНаВозврат", Ложь);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "Реализация");

КонецПроцедуры

Процедура РеализацияДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	ТД = ЭлементыФормы.Реализация.ТекущиеДанные;
	Если ТД = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	СтруктОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбора.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТД.Покупатель) Тогда
		СтруктОтбора.Вставить( "Контрагент", ТД.Покупатель);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "Реализация");
КонецПроцедуры

Процедура РеализацияСобытиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	Если Не Реализация0 Тогда
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.Реализация);
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.Оплата);
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	Иначе
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.ПодтвержденаСтавка0);
		СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.НеПодтвержденаСтавка0);
	КонецЕсли;
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент, СписокВыбора);

	
КонецПроцедуры

Процедура РеализацияСостояниеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.НДССостоянияРеализация0.ПодтвержденаРеализация0);
	СписокВыбора.Добавить(Перечисления.НДССостоянияРеализация0.НеПодтвержденаРеализация0);
	
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент, СписокВыбора);
	
КонецПроцедуры

Процедура РеализацияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.КорректируемыйПериод.ОтметкаНезаполненного = (ДанныеСтроки.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(ДанныеСтроки.КорректируемыйПериод));
	ОформлениеСтроки.Ячейки.ДоговорКонтрагента.ОтметкаНезаполненного = (ДанныеСтроки.ВидЦенности = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент и НЕ ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента));
	
КонецПроцедуры

Процедура РеализацияВидЦенностиПриИзменении(Элемент)
	
	Если Элемент.Значение = Перечисления.ВидыЦенностей.НалоговыйАгентКомитент 
		И Не ЭлементыФормы.Реализация.Колонки.ДоговорКонтрагента.Видимость Тогда
		ЭлементыФормы.Реализация.Колонки.ДоговорКонтрагента.Видимость = Истина;
	КонецЕсли; 
	
КонецПроцедуры

Процедура РеализацияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьВидимостьФлагаСторнирующихЗаписей();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ставки НДС
// в строке табличной части "Товары".
//
Процедура СтавкаНДСПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Реализация.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.Реализация.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.Реализация.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры // ТоварыСтавкаНДСПриИзменении()

Процедура СоставДокументОплатыПриИзменении(Элемент)
	ТД = ЭлементыФормы.Реализация.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТД.ДокументОплаты) Тогда
		ТД.ДатаОплаты = ТД.ДокументОплаты.Дата;
	КонецЕсли;  
КонецПроцедуры

Процедура СуммаБезНДСПриИзменении(Элемент)
	// Рассчитать реквизиты табличной части.
	ЭлементыФормы.Реализация.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.Реализация.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.Реализация.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧПоРеализации(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧПоРеализации.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ АВАНСЫ

Процедура АвансыСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТД = ЭлементыФормы.Авансы.ТекущиеДанные;
	Если ТД = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	СтруктОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбора.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТД.Покупатель) Тогда
		СтруктОтбора.Вставить( "Контрагент", ТД.Покупатель);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТД.ДоговорКонтрагента) Тогда
		СтруктОтбора.Вставить( "ДокументыПоДоговоруКонтрагента", ТД.ДоговорКонтрагента);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "Авансы");

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Покупателя табличной части Авансы.
//
Процедура АвансыПокупательПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Авансы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ДоговорКонтрагента.Владелец <> СтрокаТабличнойЧасти.Покупатель Тогда
		СтрокаТабличнойЧасти.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;
	
КонецПроцедуры // АвансыПокупательПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля "ДоговорКонтрагента" в табличной части Авансы.
//
Процедура АвансыДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Авансы.ТекущиеДанные;
	
	СПокупателем  	= Новый СписокЗначений;
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	СПокупателем.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомитентом);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Покупатель, СтрокаТабличнойЧасти.ДоговорКонтрагента,
				СПокупателем, СтандартнаяОбработка);
	
КонецПроцедуры // АвансыДоговорКонтрагентаНачалоВыбора()

Процедура АвансыСобытиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.ПолученАванс);
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент, СписокВыбора);
	
КонецПроцедуры

Процедура АвансыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОформлениеСтроки.Ячейки.КорректируемыйПериод.ОтметкаНезаполненного = (ДанныеСтроки.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(ДанныеСтроки.КорректируемыйПериод));
	
	Если ТипЗнч(ДанныеСтроки.СчетФактура) = Тип("ДокументСсылка.СчетФактураВыданный")
		И НЕ ЗначениеЗаполнено(ДанныеСтроки.ДоговорКонтрагента) Тогда
		ОформлениеСтроки.Ячейки.ДоговорКонтрагента.ОтметкаНезаполненного = Ложь;
		ОформлениеСтроки.Ячейки.ДоговорКонтрагента.Текст = "<Комиссия>";
	КонецЕсли;
	
КонецПроцедуры

Процедура АвансыСтавкаНДСПриИзменении(Элемент)
	
	ЭлементыФормы.Авансы.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.Авансы.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.Авансы.ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

Процедура АвансыСуммаБезНДСПриИзменении(Элемент)
	
	ЭлементыФормы.Авансы.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.Авансы.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.Авансы.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура АвансыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	УстановитьВидимостьФлагаСторнирующихЗаписей();
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧСАвансов(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧСАвансов.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ НачисленКУплате

Процедура НачисленКУплатеСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.НачисленКУплате.ТекущиеДанные;
	Если ТекДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбора.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Покупатель) Тогда
		СтруктОтбора.Вставить( "Контрагент", ТекДанные.Покупатель);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "НачисленКУплате");
	
КонецПроцедуры // НачисленКУплатеСчетФактураНачалоВыбора()

Процедура НачисленКУплатеДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.НачисленКУплате.ТекущиеДанные;
	Если ТекДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбора.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Покупатель) Тогда
		СтруктОтбора.Вставить( "Контрагент", ТекДанные.Покупатель);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "НачисленКУплате");
	
КонецПроцедуры // НачисленКУплатеДокументОплатыНачалоВыбора()

Процедура НачисленКУплатеСобытиеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.НДСНачисленКУплате);
	СписокВыбора.Добавить(Перечисления.СобытияПоНДСПродажи.НДССкорректирован);
	РаботаСДиалогами.УстановитьСписокПоляВыбора(Элемент, СписокВыбора);
	
КонецПроцедуры

Процедура НачисленКУплатеСтавкаНДСПриИзменении(Элемент)
	
	ЭлементыФормы.НачисленКУплате.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.НачисленКУплате.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.НачисленКУплате.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура НачисленКУплатеСуммаБезНДСПриИзменении(Элемент)
	
	ЭлементыФормы.НачисленКУплате.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.НачисленКУплате.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.НачисленКУплате.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧНачисленКУплате(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧНачисленКУплате.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ НЕОТРАЖАЕТСЯВКНИГЕПРОДАЖ

Процедура НеОтражаетсяВКнигеСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные;
	Если ТекДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбора.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Покупатель) Тогда
		СтруктОтбора.Вставить( "Контрагент", ТекДанные.Покупатель);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "НеОтражаетсяВКниге");
	
КонецПроцедуры // НеОтражаетсяВКнигеСчетФактураНачалоВыбора()

Процедура НеОтражаетсяВКнигеДокументОплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные;
	Если ТекДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	СтруктОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктОтбора.Вставить( "Организация", Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекДанные.Покупатель) Тогда
		СтруктОтбора.Вставить( "Контрагент", ТекДанные.Покупатель);
	КонецЕсли;
	
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа( ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктОтбора, "НеОтражаетсяВКниге");
	
КонецПроцедуры // НеОтражаетсяВКнигеДокументОплатыНачалоВыбора()

Процедура НеОтражаетсяВКнигеСтавкаНДСПриИзменении(Элемент)
	
	ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

Процедура НеОтражаетсяВКнигеСуммаБезНДСПриИзменении(Элемент)
	
	ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.НеОтражаетсяВКниге.ТекущиеДанные.СтавкаНДС));
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧНеОтражается(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧНеОтражается.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОССТАНОВЛЕН

Процедура ВосстановленСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.Восстановлен.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация,Контрагент", Организация,ТекущиеДанные.Покупатель);
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "Восстановлен");

КонецПроцедуры

Процедура ВосстановленСтавкаНДСПриИзменении(Элемент)
	
	ТД = ЭлементыФормы.Восстановлен.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	ТД.НДС = УчетНДС.РассчитатьСуммуНДС(ТД.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));

КонецПроцедуры

Процедура ВосстановленСуммаБезНДСПриИзменении(Элемент)
	
	ТД = ЭлементыФормы.Восстановлен.ТекущиеДанные;
	// Рассчитать реквизиты табличной части.
	ТД.НДС = УчетНДС.РассчитатьСуммуНДС(ТД.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ТД.СтавкаНДС));

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧВосстановлен(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧВосстановлен.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ВОССТАНОВЛЕН ПО АВАНСАМ

Процедура ВосстановленПоАвансамПоставщикПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.ДоговорКонтрагента.Владелец <> СтрокаТабличнойЧасти.Поставщик Тогда
		СтрокаТабличнойЧасти.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	КонецЕсли;

КонецПроцедуры

Процедура ВосстановленПоАвансамДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные;
	
	СПоставщиком  	= Новый СписокЗначений;
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СПоставщиком.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, СтрокаТабличнойЧасти.Поставщик, 
			СтрокаТабличнойЧасти.ДоговорКонтрагента, СПоставщиком, СтандартнаяОбработка);

КонецПроцедуры

Процедура ВосстановленПоАвансамСуммаБезНДСПриИзменении(Элемент)
	
	ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура ВосстановленПоАвансамСтавкаНДСПриИзменении(Элемент)
	
	ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.НДС = УчетНДС.РассчитатьСуммуНДС(ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.СуммаБезНДС, Истина, Ложь, УчетНДС.ПолучитьСтавкуНДС(ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные.СтавкаНДС));

КонецПроцедуры

Процедура ВосстановленПоАвансамПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
		
	ОформлениеСтроки.Ячейки.КорректируемыйПериод.ОтметкаНезаполненного = (ДанныеСтроки.ЗаписьДополнительногоЛиста и НЕ ЗначениеЗаполнено(ДанныеСтроки.КорректируемыйПериод));

КонецПроцедуры

Процедура ВосстановленПоАвансамПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
		
	УстановитьВидимостьФлагаСторнирующихЗаписей();
	
КонецПроцедуры

Процедура ВосстановленПоАвансамСчетФактураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные = ЭлементыФормы.ВосстановленПоАвансам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	Отбор = Новый Структура("Организация, Контрагент", Организация, ТекущиеДанные.Поставщик);
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ДоговорКонтрагента) Тогда
		Отбор.Вставить( "ДокументыПоДоговоруКонтрагента", ТекущиеДанные.ДоговорКонтрагента);
	КонецЕсли;

	РаботаСДиалогами.НачалоВыбораЗначенияДокументаСоставногоТипа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, Отбор, "ВосстановленПоАвансам");
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧВосстановленПоАвансам(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧВосстановленПоАвансам.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()