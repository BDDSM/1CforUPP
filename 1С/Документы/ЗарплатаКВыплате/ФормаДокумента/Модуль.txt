////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит сумму текущей строки
Перем мСтараяСумма;

// Состояние выплаченности (булево) и текст
Перем мОплатаЕсть;
Перем мОплатаТекст;

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Зарплата,ЭлементыФормы.КоманднаяПанельЗарплата);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура управляет видимостью элементов формы диалога.
//
Процедура УправлениеДоступностьюЭлементовФормы()
	
	// получим учтенную политику по персоналу в части упрощенного учета взаиморасчетов
	Если мУпрощенныйУчетВзаиморасчетов = Неопределено Тогда
		глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").Свойство("УпрощенныйУчетВзаиморасчетов", мУпрощенныйУчетВзаиморасчетов);
	КонецЕсли;
	
	// изменять документ можно, пока не началась оплата
	РедактированиеРазрешено = НЕ мОплатаЕсть;
	
	ЭтаФорма.ТолькоПросмотр = Не РедактированиеРазрешено;
	
	// Рассчитывать и проводить можно при заполнении ключевых полей
	РасчетРазрешен = 
		РедактированиеРазрешено
		И ЗначениеЗаполнено(ХарактерВыплаты);
	
	ЭлементыФормы.КнопкаЗаполнить.Доступность = РасчетРазрешен;
	
	ЭлементыФормы.КоманднаяПанельЗарплата.Кнопки.Подбор.Доступность = РасчетРазрешен;
	ЭлементыФормы.КоманднаяПанельЗарплата.Кнопки.УдалитьПустые.Доступность = РасчетРазрешен;
	
	ЭлементыФормы.Зарплата.ИзменятьСоставСтрок = РасчетРазрешен; 
	
	// РКО можно создавать, если не упрощенный учет взаиморасчетов
	ПодменюВвестиНаОснованииКнопки = ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВвестиНаОсновании.Кнопки;
	РКО = "РасходныйКассовыйОрдер";
	Если мУпрощенныйУчетВзаиморасчетов Тогда
		ПодменюВвестиНаОснованииКнопки.Очистить();
	Иначе	
		Если ПодменюВвестиНаОснованииКнопки.Найти(РКО) = Неопределено Тогда
			ПодменюВвестиНаОснованииКнопки.Очистить();
			НоваяКнопка = ПодменюВвестиНаОснованииКнопки.Добавить(РКО, ТипКнопкиКоманднойПанели.Действие, Метаданные.Документы[РКО].Синоним, Новый Действие("ДействиеВводНаОснованииРасходныйКассовыйОрдер"));
			НоваяКнопка.Картинка = БиблиотекаКартинок.ДокументОбъект;
			НоваяКнопка.Подсказка = "Создать по документу расходный кассовый ордер";
			НоваяКнопка.Пояснение = "Создать по документу расходный кассовый ордер";
		КонецЕсли;
	КонецЕсли;
	
	// РКО можно создавать только по проведенному документу
	Для Каждого Кнопка Из ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВвестиНаОсновании.Кнопки Цикл
		Кнопка.Доступность	= РасчетРазрешен И Проведен;
	КонецЦикла;
	
	Если мОплатаЕсть Тогда
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть.КнопкаПоУмолчанию = Истина;
	Иначе
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.КнопкаПоУмолчанию = Истина;
	КонецЕсли;
	
КонецПроцедуры // УправлениеДоступностьюЭлементовФормы()

Процедура ПроверитьОплаченность()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СведенияОВыплатахРаботникамПоПлатежнымВедомостям.Регистратор КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(СведенияОВыплатахРаботникамПоПлатежнымВедомостям.Регистратор) КАК Представление
	|ИЗ
	|	РегистрСведений.СведенияОВыплатахРаботникамПоПлатежнымВедомостям КАК СведенияОВыплатахРаботникамПоПлатежнымВедомостям
	|ГДЕ
	|	СведенияОВыплатахРаботникамПоПлатежнымВедомостям.Ведомость = &Ведомость";
	Запрос.УстановитьПараметр("Ведомость", Ссылка);
	
	ПлатежныеДокументы = Запрос.Выполнить().Выгрузить();
	
	КоличествоДокументов = ПлатежныеДокументы.Количество();
	

	Если мУпрощенныйУчетВзаиморасчетов И КоличествоДокументов = 1 И ТипЗнч(ПлатежныеДокументы[0].Ссылка) = Тип("ДокументСсылка.ЗарплатаКВыплате") Тогда
		
		мОплатаЕсть	= Ложь;
		мОплатаТекст = "Ведомость оплачен (используется упрощенный учет взаиморасчетов)";
		
	Иначе	
		
		мОплатаЕсть	= КоличествоДокументов > 0;
		мОплатаТекст= "Ведомость " + ЗарплатаКВыплатеСервис.ТекстовоеПредставлениеОплаты(ПлатежныеДокументы.ВыгрузитьКолонку("Представление"))
		
	КонецЕсли;		
	
КонецПроцедуры

// Функция добавляет указанных работников в ТЧ Зарплата
Функция ДобавитьРаботников(ФизЛица) Экспорт
	
	Добавленные = Новый Массив();
	
	Для Каждого ФизЛицо Из ФизЛица Цикл
		Если Зарплата.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо)).Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Зарплата.Добавить();
			СтрокаТабличнойЧасти.Физлицо = Физлицо;
			СтрокаТабличнойЧасти.Авторасчет = Истина;
			Добавленные.Добавить(ФизЛицо);
		КонецЕсли;
	КонецЦикла;

	Возврат Добавленные;
	
КонецФункции

Функция ЕстьВыплатаСотруднику(Физлицо)
	
	Если НЕ ЗначениеЗаполнено(ФизЛицо) Тогда
		Возврат Ложь;
	КонецЕсли;

	СтрокаТЧ = Зарплата.Найти(Физлицо, "ФизЛицо");
	Если СтрокаТЧ  <> Неопределено И СтрокаТЧ <> ЭлементыФормы.Зарплата.ТекущаяСтрока Тогда
		Предупреждение("В документе уже есть выплата этому сотруднику!");
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;

КонецФункции

Процедура УстановитьНадписьНастройкаРасчета() Экспорт
	
	Если НЕ ЗначениеЗаполнено(ХарактерВыплаты) Тогда 
		ТекстНадписи = "Выберите, что будет выплачиваться по документу - аванс или зарплата"
	ИначеЕсли НЕ ЗначениеЗаполнено(Дата) Тогда
		ТекстНадписи = "Укажите дату выплаты"
	ИначеЕсли мОплатаЕсть Тогда
		ТекстНадписи = мОплатаТекст
	Иначе
		ТекстНадписи =
			"Выплата " 
			+ ЗарплатаКВыплатеОрганизацийСервис.ХарактерВыплатыВРодительномПадеже(ХарактерВыплаты) 
			+ " за " + НРег(РаботаСДиалогами.ДатаКакМесяцПредставление(Дата))
			+ ?(ЗначениеЗаполнено(Подразделение), " в подразделении " +"«"+ Подразделение +"»", ""); 

	КонецЕсли;
	
	ЭлементыФормы.НадписьПараметрыЗаполнения.Заголовок = ТекстНадписи;
	
	ЗарплатаКВыплатеПереопределяемый.УстановитьНадписьНастройкаРасчета(ЭтаФорма);
	
КонецПроцедуры

// Возвращает список доступных характеров выплат
//
// Параметры
//  нет
//
// Возвращаемое значение:
//   Список значений, содержащий подходящий перечень значений перечисления СпособыРасчетаОплатыТруда
//
Функция ПолучитьСписокДоступныхХарактеровВыплат()

	СписокХарактеровВыплаты = Новый СписокЗначений;

	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
	СписокХарактеровВыплаты.Добавить(Перечисления.ХарактерВыплатыЗарплаты.ПлановыйАванс);
	
	Возврат СписокХарактеровВыплаты

КонецФункции

Функция МожноСоздаватьПлатежныеДокументы()
	
	Если НЕ Проведен Тогда
		Предупреждение("Создавать платежные документы можно только по проведенному документу!");
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Функция ЗаписатьПередСозданиемНаОсновании()
	
	Возврат РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, "Перед вводом на основании необходимо записать документ. Продолжить?")
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	ОбработчикиПолейВвода = Новый Структура;
	ОбработчикиПолейВвода.Вставить("ПриИзменении", Новый Действие("ДополнительныеДействияПриИзменении"));
	ОбработчикНажатия = Новый Действие("ДополнительныеДействияНажатие");
	
	ЗарплатаКВыплатеПереопределяемый.ФормаДокументаПередОткрытиемДополнительно(ЭтаФорма, ОбработчикиПолейВвода, ОбработчикНажатия);
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии()

	Если мУпрощенныйУчетВзаиморасчетов = Неопределено Тогда
		глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу").Свойство("УпрощенныйУчетВзаиморасчетов", мУпрощенныйУчетВзаиморасчетов);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		ЗарплатаКВыплатеПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект);		
		
		Если ХарактерВыплаты.Пустая() Тогда 
			ХарактерВыплаты = Перечисления.ХарактерВыплатыЗарплаты.Зарплата
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("Сумма");

	// Установить ограничение - изменять видимость колонок для табличной части 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Зарплата.Колонки, СтруктураКолонок);

	ЭлементыФормы.ХарактерВыплаты.ДоступныеЗначения = ПолучитьСписокДоступныхХарактеровВыплат();
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	ПроверитьОплаченность();
	УправлениеДоступностьюЭлементовФормы();
	УстановитьНадписьНастройкаРасчета();	
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	СписокВыплат = Новый СписокЗначений;
	СписокВыплат.Добавить(Перечисления.ХарактерВыплатыЗарплаты.ПлановыйАванс);
	СписокВыплат.Добавить(Перечисления.ХарактерВыплатыЗарплаты.Зарплата);
	ЭлементыФормы.ХарактерВыплаты.ДоступныеЗначения = СписокВыплат;
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Зарплата;
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ИзменениеВыплатыПоВедомостиУпр" И Параметр[Ссылка] <> Неопределено 
		ИЛИ ИмяСобытия = "ОбновитьФорму" И (НЕ ЗначениеЗаполнено(Параметр) ИЛИ Параметр = Ссылка) Тогда 
		
		ПроверитьОплаченность();
		УправлениеДоступностьюЭлементовФормы();
		УстановитьНадписьНастройкаРасчета()
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи()

	Оповестить("ОбновитьФорму", Ссылка);
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	// оповестим журналы о записи нового управленческого документа
	Оповестить("ЗаписанНовыйДокументУправленческогоУчета", Ответственный, Ссылка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик нажатия на кнопку "Перечитать"
//
Процедура ДействияФормыПеречитать(Кнопка)
	
	Если Модифицированность() И Вопрос("Документ был изменен", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ДокументОбъект.Прочитать();
	
	Оповестить("ОбновитьФорму", Ссылка)

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ДействиеВводНаОснованииРасходныйКассовыйОрдер()
	
	Если МожноСоздаватьПлатежныеДокументы() Тогда
		Если ПравоДоступа("Добавление", Метаданные.Документы.РасходныйКассовыйОрдер) Тогда
			Если ЗаписатьПередСозданиемНаОсновании() Тогда
				Объект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
				Объект.Заполнить(Ссылка);
				ФормаДокумента = Объект.ПолучитьФорму();
				ФормаДокумента.Открыть();
			КонецЕсли;	
		Иначе
			Предупреждение("Нарушение прав доступа!");	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ПЕЧАТИ

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа
//
Процедура ДатаПриИзменении(Элемент = Неопределено)

	РаботаСДиалогами.ПроверитьНомерДокумента(ДокументОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	УстановитьНадписьНастройкаРасчета();
	
КонецПроцедуры

Процедура ХарактерВыплатыПриИзменении(Элемент)
	
	УправлениеДоступностьюЭлементовФормы();
	УстановитьНадписьНастройкаРасчета();

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ЗАПОЛНЕНИЯ И РАСЧЕТА ДОКУМЕНТА 

Процедура КнопкаЗаполнитьНажатие(Элемент)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить(Зарплата);
	ТекстВопроса1 = "Рассчитать документ можно только после отмены его проведения. Продолжить?";
	ТекстВопроса2 = "Перед заполнением табличная часть будет очищена. Заполнить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;

	Автозаполнение();

	Если Зарплата.Количество() = 0 и ОбработкаКомментариев.Сообщения.Строки.Количество() = 0 Тогда  
		ОбщегоНазначения.ВывестиИнформациюОбОшибке("Не обнаружены данные для записи в табличную часть документа.");
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ТАБЛИЧНОЙ ЧАСТИ

Процедура КоманднаяПанельЗарплатаПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(ЭлементыФормы.Зарплата, Ссылка, Ложь, Дата,,, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельЗарплатаУдалитьПустые(Кнопка)
	
	УдаляемыеСтроки = Новый Массив;
	Для Каждого СтрокаЗарплаты Из Зарплата Цикл
		Если НЕ ЗначениеЗаполнено(СтрокаЗарплаты.Физлицо) ИЛИ СтрокаЗарплаты.Сумма <= 0 Тогда
			УдаляемыеСтроки.Добавить(СтрокаЗарплаты);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаЗарплаты Из УдаляемыеСтроки Цикл
		Зарплата.Удалить(СтрокаЗарплаты);
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ

// Процедура - обработчик события "НачалоВыбора" поля ввода приказа  о приёме работника организации
Процедура ЗарплатаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ФизЛица =  Новый Массив();
	ФизЛица.Добавить(ВыбранноеЗначение);

	ДобавленныеФизлица = ДобавитьРаботников(ФизЛица);
	
	Если ДобавленныеФизлица.Количество() > 0 Тогда
		Рассчитать(ФизЛица);
	КонецЕсли;
	
КонецПроцедуры  // ТабличнаяЧастьОбработкаВыбора

Процедура ЗарплатаПриПолученииДанных(Элемент, ОформленияСтрок)
	
	// получим данные для отрисовки в ячейках
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
		
		Если (ДанныеСтроки.Сумма) <= 0 Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииСтроки"
//
Процедура ЗарплатаПриАктивизацииСтроки(Элемент)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтараяСумма = ТекущаяСтрока.Сумма
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура ЗарплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина
	КонецЕсли;

КонецПроцедуры

Процедура ЗарплатаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ОтменаРедактирования Тогда
		Возврат
	КонецЕсли;
	
	Если ЕстьВыплатаСотруднику(Элемент.ТекущаяСтрока.Физлицо) Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ 

// Процедура - обработчик события "ПриИзменении" поля ввода физического лица -  
// подбирает подходящие должность и подразделение
//
// Параметры:
//  Элемент - элемент формы, который отображает физическое лицо
//
Процедура ЗарплатаФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение, Истина, , Подразделение);
	
КонецПроцедуры

Процедура ЗарплатаФизлицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ЗарплатаФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ЕстьВыплатаСотруднику(ВыбранноеЗначение) Тогда
			Возврат;
		КонецЕсли;
		
		Элемент.Значение = ВыбранноеЗначение;
		ЭлементыФормы.Зарплата.ТекущиеДанные.Авторасчет = Истина;
		
		ФизЛица =  Новый Массив();
		ФизЛица.Добавить(ВыбранноеЗначение);
		Рассчитать(ФизЛица);
			
	КонецЕсли;
	
КонецПроцедуры // ЗарплатаФизлицоОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Работник"
// Процедура обеспечивает подбор работников из справочника ФизЛиц при вводе наименования ФизЛица.
Процедура ЗарплатаФизлицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст, , Истина);

КонецПроцедуры // РаботникАвтоПодборТекста

// Процедура - обработчик события "НачалоВыбора" поля ввода "Работник"
// Процедура обеспечивает подбор работников из справочника ФизЛиц при вводе наименования ФизЛица.
Процедура ЗарплатаФизлицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	 
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение, , Истина);

КонецПроцедуры // РаботникОкончаниеВводаТекста

// Процедура - обработчик события "ПриИзменении" поля ввода "Сумма"
//
Процедура ЗарплатаСуммаПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтараяСумма Тогда
		ЭлементыФормы.Зарплата.ТекущаяСтрока.Авторасчет = Ложь;
		мСтараяСумма	= Элемент.Значение;
	КонецЕсли;
	
	ЗарплатаКВыплатеПереопределяемый.ФормаДокументаДополнительныеДействияПриИзмененииЗарплаты(ЭтаФорма, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

Процедура ДополнительныеДействияПриИзменении(Элемент)
	
	ЗарплатаКВыплатеПереопределяемый.ФормаДокументаДополнительныеДействияПриИзменении(ЭтаФорма, Элемент);

КонецПроцедуры

Процедура ДополнительныеДействияНажатие(Элемент)
	
	ЗарплатаКВыплатеПереопределяемый.ФормаДокументаДополнительныеДействияНажатие(ЭтаФорма, Элемент);

КонецПроцедуры



////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мОплатаЕсть = Ложь;
мОплатаТекст  = "";