////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мСведенияОВидахРасчета;
Перем мГоловнаяОрганизация;
Перем мВалютаРегламентированногоУчета;

Перем мМассивЭУ;

// Механизм исправлений
Перем мДокументыИсправление;
Перем мСтруктураМенюИсправление;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанельПлановыеНачисления);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПлановыеУдержания,ЭлементыФормы.КоманднаяПанельПлановыеУдержания);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьКомментарий()

	ПроцентОплаты = Мин(40 * КоличествоДетей,100); 
	СтрокаКомментария = "";
	Если ВыплачиватьПособиеДоПолутораЛет Тогда
		СтрокаКомментария = "Ежемесячное пособие по уходу за ребенком до достижения ребенком полутора лет начисляется в размере " 
		+ ПроцентОплаты + "% среднего заработка. Минимальный размер пособия определяется для";
		Если КоличествоПервыхДетей = 0 Тогда
			 Если КоличествоДетей = 1 Тогда
				СтрокаКомментария = СтрокаКомментария  + " одного ребенка, рожденного (усыновленного) вторым или последующим.";
			 Иначе
				СтрокаКомментария = СтрокаКомментария + " " + КоличествоДетей + " детей, среди которых нет первого ребенка.";
			 КонецЕсли;
		ИначеЕсли КоличествоПервыхДетей = 1 Тогда
			 Если КоличествоДетей = 1 Тогда
				СтрокаКомментария = СтрокаКомментария  + " одного ребенка, рожденного (усыновленного) первым.";
			 Иначе
				СтрокаКомментария = СтрокаКомментария + " " + КоличествоДетей + " детей, среди которых есть ребенок, рожденный (усыновленный) первым.";
			 КонецЕсли;
		КонецЕсли;
		СтрокаКомментария = СтрокаКомментария  + " Максимальный размер пособия определяется для";
		Если КоличествоДетей = 1 Тогда
			СтрокаКомментария = СтрокаКомментария + " одного ребенка.";
		Иначе
			СтрокаКомментария = СтрокаКомментария + " " + КоличествоДетей + " детей.";
		КонецЕсли;
		СтрокаКомментария = СтрокаКомментария + Символы.ПС 
		+ "Под первым ребенком матери понимается ребенок (один из детей), рожденный в первых успешных родах, либо усыновленный хронологически первым.";
		
	Иначе
		СтрокаКомментария = "Ежемесячное пособие по уходу за ребенком до достижения ребенком полутора лет не начисляется.";
	КонецЕсли;
	ЭлементыФормы.КомментарийСтрока.Заголовок = СтрокаКомментария;

КонецПроцедуры // УстановитьПредставлениеПричиныНетрудоспособности()

Процедура ПроставитьДолжностьИПодразделение(Элемент, ОформленияСтрок)

	Колонки = Элемент.Колонки;
	ПоказыватьПодразделение = Колонки.Подразделение.Видимость;
	ПоказыватьДолжность = Колонки.Должность.Видимость;
	
	Если Не (ПоказыватьПодразделение Или ПоказыватьДолжность) Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата",			ДатаИзменения);
	Запрос.УстановитьПараметр("Организация",	мГоловнаяОрганизация);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность 
	|	КОНЕЦ КАК Должность
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|		&Дата,
	|		Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних";
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Запрос.УстановитьПараметр("Сотрудник",	ДанныеСтроки.Сотрудник);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если ПоказыватьПодразделение Тогда
				ОформлениеСтроки.Ячейки.Подразделение.УстановитьТекст(Выборка.ПодразделениеОрганизации);
			КонецЕсли;
			
			Если ПоказыватьДолжность Тогда
				ОформлениеСтроки.Ячейки.Должность.УстановитьТекст(Выборка.Должность);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

// Управляет видимостью и доступностью элементов формы
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоПрекращениеОтпуска = Действие = Перечисления.ВидыДействияСНачислением.Прекратить;
	
	ЭлементыФормы.ВыплачиватьПособиеДоПолутораЛет.Доступность = Не ЭтоПрекращениеОтпуска;
	ЭлементыФормы.ВыплачиватьПособиеДоТрехЛет.Доступность = Не ЭтоПрекращениеОтпуска;
	ЭлементыФормы.ДатаОкончанияПособияДоПолутораЛет.ТолькоПросмотр = ЭтоПрекращениеОтпуска Или Не ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.ДатаОкончанияПособияДоПолутораЛет.АвтоОтметкаНезаполненного = Не ЭтоПрекращениеОтпуска И ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.ДатаОкончанияПособияДоПолутораЛет.ОтметкаНезаполненного = Не ЭтоПрекращениеОтпуска И ВыплачиватьПособиеДоПолутораЛет и ДатаОкончанияПособияДоПолутораЛет = '00010101';
	
	ЭлементыФормы.ДатаОкончанияПособияДоТрехЛет.ТолькоПросмотр = ЭтоПрекращениеОтпуска;
	ЭлементыФормы.КоличествоДетей.ТолькоПросмотр = ЭтоПрекращениеОтпуска Или Не ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.КоличествоДетей.АвтоОтметкаНезаполненного = Не ЭтоПрекращениеОтпуска И ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.КоличествоДетей.ОтметкаНезаполненного = Не ЭтоПрекращениеОтпуска И ВыплачиватьПособиеДоПолутораЛет и КоличествоДетей = 0;
	ЭлементыФормы.КоличествоПервыхДетей.Доступность = Не ЭтоПрекращениеОтпуска;
	ЭлементыФормы.ОсвобождатьСтавку.Доступность = Не ЭтоПрекращениеОтпуска;

	ЭлементыФормы.ДатаИзменения.ТолькоПросмотр = Действие = Перечисления.ВидыДействияСНачислением.Изменить;
	ЭлементыФормы.ДатаИзменения1.ТолькоПросмотр = ЭтоПрекращениеОтпуска;
	
	ЭлементыФормы.ДатаОкончанияПособияДоТрехЛет.ТолькоПросмотр = ЭтоПрекращениеОтпуска Или Не ВыплачиватьПособиеДоТрехЛет;
	ЭлементыФормы.ДатаОкончанияПособияДоТрехЛет.АвтоОтметкаНезаполненного = Не ЭтоПрекращениеОтпуска И ВыплачиватьПособиеДоТрехЛет;
	ЭлементыФормы.ДатаОкончанияПособияДоТрехЛет.ОтметкаНезаполненного = Не ЭтоПрекращениеОтпуска И ВыплачиватьПособиеДоТрехЛет и ДатаОкончанияПособияДоТрехЛет = '00010101';
	
КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.НадписьОрганизация.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

Процедура ОбновитьОписаниеСостоянияДокумента()

	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Сотрудник) Или Не ЗначениеЗаполнено(ДатаИзменения);
	
	ЗаполненСОшибками = (ВыплачиватьПособиеДоПолутораЛет И КоличествоДетей = 0);
	ЗаполненСОшибками = ЗаполненСОшибками Или (ВыплачиватьПособиеДоПолутораЛет И Не ЗначениеЗаполнено(ДатаОкончанияПособияДоПолутораЛет));
	ЗаполненСОшибками = ЗаполненСОшибками Или (ВыплачиватьПособиеДоТрехЛет И Не ЗначениеЗаполнено(ДатаОкончанияПособияДоТрехЛет));
	
	ЭтоИсправление		= ЗначениеЗаполнено(ИсправляемыйДокумент);
	ДокументИсправлен	= ЗначениеЗаполнено(мДокументыИсправление);
	
	Рассчитан = ВыплачиватьПособиеДоПолутораЛет И КоличествоДетей <> 0;

	ТекстСообщения = "";
	ВажностьСообщения = "";
	Если НеЗаполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ не заполнен";
		
	ИначеЕсли ЭтоИсправление Тогда
		ТекстСообщения = "Документ является исправлением документа; ";
		Если ДокументИсправлен Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			Если Не Рассчитан Тогда
				ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
			
		ИначеЕсли ЗаполненСОшибками Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + "поля документа заполнены не полностью или неверно";
			
		ИначеЕсли Не Рассчитан Тогда
			ВажностьСообщения = "ВажнаяИнформация";
			ТекстСообщения = ТекстСообщения + "документ не рассчитан";
			
		ИначеЕсли Рассчитан И Не Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан, но не проведен";
			
		ИначеЕсли Рассчитан И Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан и проведен";
			
		КонецЕсли;
		
	ИначеЕсли ДокументИсправлен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ ";
		Если Не Рассчитан Тогда
			ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
		
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Поля документа заполнены не полностью или неверно";
		
	ИначеЕсли Не Рассчитан Тогда
		ВажностьСообщения = "ВажнаяИнформация";
		ТекстСообщения = "В документе не рассчитан средний заработок для выплаты пособия";
		
	ИначеЕсли ВыплачиватьПособиеДоПолутораЛет Тогда
		Если Рассчитан И Не Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = "Документ рассчитан, но не проведен";
		ИначеЕсли Рассчитан И Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = "Документ рассчитан и проведен";
		КонецЕсли;
		
	ИначеЕсли Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ проведен";
		
	КонецЕсли;
	
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ТекстСообщения, ВажностьСообщения);
	
КонецПроцедуры

Функция ПолучитьСтруктуруПараметровПодбораПоСтроке()
	
	СтруктураПараметров = Новый Структура("СпособРасчета", ПроведениеРасчетов.ПолучитьСписокВариантовУдержанийОрганизации());
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	// Механизм исправления документов
	Если Не ЭтотОбъект.ЭтоНовый() Тогда
		мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(ЭтотОбъект.Ссылка, , , "ИсправляемыйДокумент");
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		Если Действие.Пустая() Тогда
			Действие = Перечисления.ВидыДействияСНачислением.Изменить
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;	
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента	= Дата;
	мГоловнаяОрганизация	= ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	ЭлементыФормы.КоличествоПервыхДетей.Заголовок = ?(КоличествоДетей = 1,"Это первый ребенок","Среди детей есть первый ребенок");
	
	ОбновитьДоступностьЭлементовФормы();
	
	УстановитьКомментарий();
	
	мМассивЭУ = Новый Массив();
	// Установим видимость реквизитов "Валюта"
	Если глЗначениеПеременной("глЕстьВалютныеПоказателиОрганизаций") Тогда
		Для Сч = 1 По 6 Цикл
			мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки["Валюта"+Сч]);
			мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеУдержания.Колонки["Валюта"+Сч]);
		КонецЦикла;
		РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	Иначе
		Для Сч = 1 По 6 Цикл
			ЭлементыФормы.ОсновныеНачисления.Колонки["Валюта"+Сч].Видимость = Ложь;
			ЭлементыФормы.ПлановыеУдержания.Колонки["Валюта"+Сч].Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриОткрытии(ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление);
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.ДокументОснование;
		ЭлементыФормы.ПанельПособий.ТекущаяСтраница = ?(Действие = Перечисления.ВидыДействияСНачислением.Прекратить,ЭлементыФормы.ПанельПособий.Страницы.ПлановыеНачисления,ЭлементыФормы.ПанельПособий.Страницы.Пособия); 
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовОбработкаОповещения(
		ИмяСобытия, Параметр, Источник,
		ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПослеЗаписи(ЭтотОбъект);
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	Массив = Новый Массив;
	Массив.Добавить(Сотрудник);
	Оповестить("ОбновитьСписокПлановыхНачислений", Массив);
	Оповестить("ОбновитьСписокПлановыхУдержаний", Массив);
	Оповестить("ИзмененоСостояниеРаботниковОрганизации", Массив);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура-обработчик события нажатия кнопки "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	ЗаполнитьПлановыеНачисленияУдержания();
	
КонецПроцедуры


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры


// Процедура - обработчик нажатия на кнопку "Весь документ"
//
Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Отменить исправление"
//
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьКадровоеИсправление(ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ЗаполнитьПлановыеНачисленияУдержания();
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода физлица
//
Процедура СотрудникПриИзменении(Элемент)

	Если ДокументОснование.Сотрудник <> Сотрудник Тогда
		ДокументОснование = "";
	КонецЕсли;
	Физлицо = Сотрудник.Физлицо;
	ЗаполнитьПлановыеНачисленияУдержания();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // СотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "НачалоВыбора" поля ввода документа отпуска
//
Процедура ДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Документы.ОтпускПоУходуЗаРебенком.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "ВыборОтпускПоУходуЗаРебенком № " + Номер);
	ФормаВыбора.Отбор.Сотрудник.Значение = Сотрудник;
	ФормаВыбора.Отбор.Сотрудник.Использование = Истина;
	ФормаВыбора.Отбор.Организация.Значение = Организация;
	ФормаВыбора.Отбор.Организация.Использование = Истина;
    ФормаВыбора.НачальноеЗначениеВыбора = ДокументОснование;
	ФормаВыбора.Порядок.Установить("Дата Убыв");
	ФормаВыбора.Открыть();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода документа отпуска  
//
Процедура ДокументОснованиеПриИзменении(Элемент)
	ЗаполнитьПоОснованию(ДокументОснование);
	ЗаполнитьПлановыеНачисленияУдержания();	
	УстановитьКомментарий();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода начала отпуска
//
Процедура ДатаИзмененияПриИзменении(Элемент)
	
	ЗаполнитьПлановыеНачисленияУдержания();
	
КонецПроцедуры

Процедура ДействиеИзменитьПриИзменении(Элемент)
	ЗаполнитьПоОснованию(ДокументОснование);
	ОбновитьДоступностьЭлементовФормы();
	ЭлементыФормы.КоличествоПервыхДетей.Заголовок = ?(КоличествоДетей = 1,"Это первый ребенок","Среди детей есть первый ребенок");
	УстановитьКомментарий();
КонецПроцедуры

Процедура ВыплачиватьПособиеДоПолутораЛетПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементовФормы();
	УстановитьКомментарий();
	
КонецПроцедуры

Процедура ВыплачиватьПособиеДоТрехЛетПриИзменении(Элемент)

	ОбновитьДоступностьЭлементовФормы();
	
КонецПроцедуры

Процедура КоличествоДетейПриИзменении(Элемент)
	ЭлементыФормы.КоличествоПервыхДетей.Заголовок = ?(КоличествоДетей = 1,"Это первый ребенок","Среди детей есть первый ребенок");
	УстановитьКомментарий();
КонецПроцедуры

Процедура КоличествоПервыхДетейПриИзменении(Элемент)
	УстановитьКомментарий();
КонецПроцедуры


// Процедура - обработчик события "Нажатие" надписи "Открыть исправление".
//
Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ПоказатьИсправления(ЭтаФорма, Ссылка, мДокументыИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" надписи "Открыть исходный".
//
Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ОткрытьИсходныйДокумент(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ОсновныеНачисления

Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтроки(Элемент, ЭлементыФормы.КоманднаяПанельПлановыеНачисления);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки", 0.05, Истина);	 	
	
КонецПроцедуры

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля Начисления
//
Процедура ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ОсновныеНачисления, мСведенияОВидахРасчета);
	
КонецПроцедуры // ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки

Процедура ОсновныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока и Не Копирование Тогда
		НаборДанных = ПроцедурыУправленияПерсоналом.ПодборДанныхПоФизлицу(ЭтаФорма, Элемент.ТекущаяКолонка.ЭлементУправления, Физлицо, мГоловнаяОрганизация, Дата);
		Если НаборДанных <> Неопределено Тогда
			Элемент.ТекущаяСтрока.Сотрудник = НаборДанных.Сотрудник;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


Процедура ОсновныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриПолученииДанных(ОформленияСтрок);
	
	ПроставитьДолжностьИПодразделение(Элемент, ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ОформлениеСтроки.ДанныеСтроки, мСведенияОВидахРасчета);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" вида действия строки начислений
Процедура ОсновныеНачисленияДействиеПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока;
	Если Элемент.Значение = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		ТекущаяСтрока.Показатель1 = 0;
		ТекущаяСтрока.Валюта1 = "";
		ТекущаяСтрока.ТарифныйРазряд1 = "";
		ТекущаяСтрока.Показатель2 = 0;
		ТекущаяСтрока.Валюта2 = "";
		ТекущаяСтрока.ТарифныйРазряд2 = "";
		ТекущаяСтрока.Показатель3 = 0;
		ТекущаяСтрока.Валюта3 = "";
		ТекущаяСтрока.ТарифныйРазряд3 = "";
		ТекущаяСтрока.Показатель4 = 0;
		ТекущаяСтрока.Валюта4 = "";
		ТекущаяСтрока.ТарифныйРазряд4 = "";
	КонецЕсли; 

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода начисления  
Процедура ОсновныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	Если мВалютаРегламентированногоУчета = Неопределено Тогда
		мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Элемент.Значение);
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ОсновныеНачисления, мСведенияОВидахРасчета);
	ДанныеСтроки = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	
	Если Не СведенияОВидеРасчета.РазмерТребуется Тогда
		ДанныеСтроки.Показатель1		= 0;
		ДанныеСтроки.ТарифныйРазряд1	= Справочники.ТарифныеРазряды.ПустаяСсылка();
	КонецЕсли;
	
	Если СведенияОВидеРасчета.НеТребуетВалюты Тогда
		ДанныеСтроки.Валюта1			= Справочники.Валюты.ПустаяСсылка();
		
	Иначе
		ИспользуютсяНачисленияВВалюте	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
			
		Если Не ИспользуютсяНачисленияВВалюте И ДанныеСтроки.Валюта1.Пустая() Тогда
			ДанныеСтроки.Валюта1 = мВалютаРегламентированногоУчета;
		КонецЕсли;
			
	КонецЕсли;
	
	Для СчПоказателей = 1 По 6 Цикл
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда			
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки["Валюта" + СчПоказателей]) И 
				СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ДанныеСтроки["Валюта" + СчПоказателей] = мВалютаРегламентированногоУчета;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				Если СчПоказателей <= СведенияОВидеРасчета.ФактКоличествоПоказателей Тогда
					ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
					ДанныеСтроки["Валюта" + СчПоказателей] = СведенияОВидеРасчета["ВалютаПоказателя" + СчПоказателей];
				КонецЕсли;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ДанныеСтроки["Показатель" + СчПоказателей] = 0;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"] Тогда
				ДанныеСтроки["ТарифныйРазряд" + СчПоказателей] = Справочники.ТарифныеРазряды.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ДанныеСтроки["Валюта" + СчПоказателей]		= Справочники.Валюты.ПустаяСсылка();
			ДанныеСтроки["Показатель" + СчПоказателей]	= 0;
			ДанныеСтроки["ТарифныйРазряд" + СчПоказателей]= Справочники.ТарифныеРазряды.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	//запретим выбирать предопределенные в.р. пособий
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	СписокПособий = Новый СписокЗначений();
	СписокПособий.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	СписокПособий.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет);
	СписокПособий.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты);
	
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = СписокПособий;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СписокПособий = Новый СписокЗначений();
	СписокПособий.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	СписокПособий.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет);
	СписокПособий.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты);
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "ОсновныеНачисленияОрганизаций", "Не (Ссылка В(&СписокПособий))", Новый Структура("СписокПособий", СписокПособий), СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НаборДанных = ПроцедурыУправленияПерсоналом.ПодборДанныхПоФизлицу(ЭтаФорма, Элемент, Сотрудник.Физлицо, мГоловнаяОрганизация, ДатаИзменения, Истина);
	Если НаборДанных <> Неопределено Тогда
		Элемент.Значение = НаборДанных.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ПлановыеУдержания


Процедура ПлановыеУдержанияПриАктивизацииСтроки(Элемент)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтроки(Элемент, ЭлементыФормы.КоманднаяПанельПлановыеУдержания);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПлановыеУдержанияПриАктивизацииСтроки", 0.05, Истина);	 	
	
КонецПроцедуры

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля Начисления
//
Процедура ОбработчикОжиданияПлановыеУдержанияПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ПлановыеУдержания, мСведенияОВидахРасчета);
	
КонецПроцедуры // ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки

Процедура ПлановыеУдержанияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриПолученииДанных(ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ОформлениеСтроки.ДанныеСтроки, мСведенияОВидахРасчета, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" вида действия строки удержания
Процедура ПлановыеУдержанияДействиеПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ПлановыеУдержания.ТекущаяСтрока;
	Если Элемент.Значение = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Для Сч = 1 По 6 Цикл
			ТекущаяСтрока["Показатель"+Сч]  = 0;
			ТекущаяСтрока["Валюта"+Сч]		= "";
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ПлановыеУдержанияВидРасчетаПриИзменении(Элемент)
	
	Расчет = Элемент.Значение;
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Элемент.Значение);
	ДанныеСтроки = ЭлементыФормы.ПлановыеУдержания.ТекущиеДанные;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ПлановыеУдержания, мСведенияОВидахРасчета);
	
	Если Не СведенияОВидеРасчета.РазмерТребуется Тогда
		Для СчПоказателей = 1 По 6 Цикл
			ДанныеСтроки["Показатель" + СчПоказателей] = 0;
		КонецЦикла;
	Иначе
		КоличествоПоказателей = СведенияОВидеРасчета["КоличествоПоказателей"];
		
		Для СчПоказателей = 1 По 6 Цикл
			Если СчПоказателей = 1 Или СчПоказателей <= КоличествоПоказателей Тогда
				Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
					Если СчПоказателей <= СведенияОВидеРасчета.ФактКоличествоПоказателей Тогда
						ЭлементыФормы.ПлановыеУдержания.ТекущиеДанные["Валюта" + СчПоказателей] = СведенияОВидеРасчета["ВалютаПоказателя" + СчПоказателей];
					КонецЕсли;
				КонецЕсли;
			Иначе
				ЭлементыФормы.ПлановыеУдержания.ТекущиеДанные["Валюта" + СчПоказателей]	= Справочники.Валюты.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПлановыеУдержанияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаОтпускПоУходуЗаРебенком");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = ПроведениеРасчетов.ПолучитьСписокВариантовУдержанийОрганизации();
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммой;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();

КонецПроцедуры

Процедура ПлановыеУдержанияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"));
КонецПроцедуры

Процедура ПлановыеУдержанияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
мСведенияОВидахРасчета = Новый Соответствие;