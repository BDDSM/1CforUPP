////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мКолонкиМатериалы;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

Перем мОтражатьВРегламентированномУчете;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Материалы,ЭлементыФормы.КоманднаяПанельМатериалы.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчета(ИзменениеСубконто = ЛОЖЬ)
	
	Если ТипЗнч(СубконтоДт1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоДт1.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СубконтоДт2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоДт2.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(СубконтоДт3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = СубконтоДт3.ВидРасходовНУ;
	ИначеЕсли ИзменениеСубконто Тогда
		Возврат;
	Иначе
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СчетДтНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СчетДт, ВидЗатратНУ));
	Иначе
		СчетДтНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СчетДт));
	КонецЕсли;
	Если СтатьяЗатрат.ВидЗатрат = Перечисления.ВидыЗатрат.Прочие Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетДтНУ, ЭлементыФормы.СубконтоДтНУ1, ЭлементыФормы.НадписьСубконтоДтНУ1,
		                         ЭлементыФормы.СубконтоДтНУ2, ЭлементыФормы.НадписьСубконтоДтНУ2,
		                         ЭлементыФормы.СубконтоДтНУ3, ЭлементыФормы.НадписьСубконтоДтНУ3);
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатурыМатериалов(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      		= СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	СтрокаТабличнойЧасти.НазначениеИспользования = СтрокаТабличнойЧасти.Номенклатура.НазначениеИспользования;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НазначениеИспользования) Тогда
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.НазначениеИспользования.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.НазначениеИспользования.ЕдиницаИзмерения;
		
		ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
	
КонецПроцедуры // ПриИзмененииНоменклатурыМатериалов()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьВидимостьДоступность()

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	Если ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
		ЭлементыФормы.Материалы.Колонки.Цена.Видимость = Истина;
		РаботаСДиалогами.УстановитьПараметрыКолонокСуммы( ЭлементыФормы.Материалы, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете);
	Иначе
		ЭлементыФормы.Материалы.Колонки.Цена.Видимость      = Ложь;
		ЭлементыФормы.Материалы.Колонки.Сумма.Видимость     = Ложь;
		ЭлементыФормы.Материалы.Колонки.СуммаРегл.Видимость = Ложь;
	КонецЕсли;
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	Колонки = ЭлементыФормы.Материалы.Колонки;
	
	//Установка видимости, автоотметки незаполненного полей со счетами учета номенклатуры и затрат
	СчетаУчетаВДокументах.УстановитьСвойстваПолейСчетов(Дата, Метаданные().Имя, ЭлементыФормы, Новый Структура("Материалы", Колонки), ПоказыватьВДокументахСчетаУчета, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
	
	ЭлементыФормы.ПанельСписаниеРасходов.Видимость = (СпособСписанияРасходов = Перечисления.СпособыСписанияРасходов.ИспользоватьСтатьюЗатратДокумента);
	
	ПроизводственныеРасходы = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетДт);
	ПроизводственныеРасходыНУ = УправлениеЗатратами.ПроверитьСчетЗатратНаПроизводственныеРасходы(СчетДтНУ, "Налоговый");
	
	Если Не ПроизводственныеРасходы Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетДт, ЭлементыФормы.СубконтоДт1, ЭлементыФормы.НадписьСубконтоДт1,
		                       ЭлементыФормы.СубконтоДт2, ЭлементыФормы.НадписьСубконтоДт2,
		                       ЭлементыФормы.СубконтоДт3, ЭлементыФормы.НадписьСубконтоДт3);
	Иначе
		ЭлементыФормы.СубконтоДт1       .Видимость = Ложь;
		ЭлементыФормы.СубконтоДт2       .Видимость = Ложь;
		ЭлементыФормы.СубконтоДт3       .Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоДт1.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоДт2.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоДт3.Видимость = Ложь;
	КонецЕсли;

	Если Не ПроизводственныеРасходыНУ Тогда
		РаботаСДиалогами.ПриВыбореСчета(СчетДтНУ, ЭлементыФормы.СубконтоДтНУ1, ЭлементыФормы.НадписьСубконтоДтНУ1,
		                         ЭлементыФормы.СубконтоДтНУ2, ЭлементыФормы.НадписьСубконтоДтНУ2,
		                         ЭлементыФормы.СубконтоДтНУ3, ЭлементыФормы.НадписьСубконтоДтНУ3);
	Иначе
		ЭлементыФормы.СубконтоДтНУ1       .Видимость = Ложь;
		ЭлементыФормы.СубконтоДтНУ2       .Видимость = Ложь;
		ЭлементыФормы.СубконтоДтНУ3       .Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоДтНУ1.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоДтНУ2.Видимость = Ложь;
		ЭлементыФормы.НадписьСубконтоДтНУ3.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимостьДоступность()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);

		Если НЕ ЗначениеЗаполнено(ТипСтоимости) Тогда
			ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Рассчитывается;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(СпособСписанияРасходов) Тогда
			СпособСписанияРасходов = Перечисления.СпособыСписанияРасходов.ИспользоватьНазначениеИспользования;
		КонецЕсли;

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	СтруктураКолонок.Вставить("ЕдиницаХранения");
	СтруктураКолонок.Вставить("Цена");
	СтруктураКолонок.Вставить("Сумма");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Материалы.Колонки, СтруктураКолонок);
	
	РаботаСДиалогами.УстановитьПараметрыКолонокСуммы( ЭлементыФормы.Материалы, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиМатериалы);

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	УстановитьВидимостьДоступность();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	Для Каждого СтраницаПанели Из ЭлементыФормы.ОсновнаяПанель.Страницы Цикл
		Если СтраницаПанели.Имя = "Материалы" Тогда
			СтраницаПанели.Заголовок = "Материалы (" + Материалы.Количество() + " поз.)";
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура производит заполнение документа по остаткам матераилов в эксплуатации
//
Процедура ЗаполнитьМатериалыПоОстаткам(УсловиеОтбора)
	
	Если Проведен Тогда
		Предупреждение("Заполнение возможно только в непроведенном документе");
		Возврат;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете И НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Предупреждение("Не указано подразделение!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Предупреждение("Не указано подразделение организации!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если Материалы.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена.
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Материалы.Очистить();
	
	СпецодеждаИСпецоснастка.ЗаполнитьМатериалыПоОстаткамВЭксплуатации(ЭтотОбъект, Материалы, УсловиеОтбора);
	
КонецПроцедуры // ЗаполнитьМатериалыПоОстаткам()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоОстаткам(Кнопка)
	
	ЗаполнитьМатериалыПоОстаткам(Неопределено);
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоОстаткам()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоСрокуЭксплуатации(Кнопка)
	
	УсловиеОтбора = СпецодеждаИСпецоснастка.ПолучитьУсловиеОтбораМатериаловВЭксплуатации();
	Если УсловиеОтбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УсловиеОтбора.Вставить( "ВидОтбора", "ПоСрокуЭксплуатации");
	
	ЗаполнитьМатериалыПоОстаткам(УсловиеОтбора);
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоСрокуЭксплуатации()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыЗаполнитьПоДокументуПередачи(Кнопка)
	
	ФормаВыбора = Документы["ПередачаМатериаловВЭксплуатацию"].ПолучитьФормуВыбора(, ЭтаФорма, ЭтаФорма);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете И ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Подразделение;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Отбор = ФормаВыбора.Отбор.ПодразделениеОрганизации;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = ПодразделениеОрганизации;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокПередачи = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокПередачи) Тогда
		Возврат;
	КонецЕсли;
	
	УсловиеОтбора = Новый Структура;
	УсловиеОтбора.Вставить( "ВидОтбора", "ПоДокументуПередачи");
	УсловиеОтбора.Вставить( "ДокументПередачи", ДокПередачи);
	
	ЗаполнитьМатериалыПоОстаткам(УсловиеОтбора);
	
	Для Каждого СтрокаТЧ Из Материалы Цикл
		
		СтрокаТЧ.ДокументПередачи = ДокПередачи;
		
	КонецЦикла;
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоДокументуПередачи()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельТоварыДобавитьПоДокументуПередачи(Кнопка)
	
	ФормаВыбора = Документы["ПередачаМатериаловВЭксплуатацию"].ПолучитьФормуВыбора(, ЭтаФорма, ЭтаФорма);
	Если ЗначениеЗаполнено(Организация) Тогда
		Отбор = ФормаВыбора.Отбор.Организация;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Организация;
		Отбор.Использование = Истина;
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Если ОтражатьВУправленческомУчете И ЗначениеЗаполнено(Подразделение) Тогда
		Отбор = ФормаВыбора.Отбор.Подразделение;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = Подразделение;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	Если ОтражатьВБухгалтерскомУчете И ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Отбор = ФормаВыбора.Отбор.ПодразделениеОрганизации;
		Отбор.ВидСравнения  = ВидСравнения.Равно;
		Отбор.Значение      = ПодразделениеОрганизации;
		Отбор.Использование = Истина;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ДокПередачи = ФормаВыбора.ОткрытьМодально();
	
	Если НЕ ЗначениеЗаполнено(ДокПередачи) Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из ДокПередачи.Материалы Цикл
		
		НоваяСтрока = Материалы.Добавить();
		
		НоваяСтрока.ДокументПередачи = ДокПередачи;
		
		НоваяСтрока.Номенклатура               = СтрокаТЧ.Номенклатура;
		НоваяСтрока.СерияНоменклатуры          = СтрокаТЧ.СерияНоменклатуры;
		НоваяСтрока.ХарактеристикаНоменклатуры = СтрокаТЧ.ХарактеристикаНоменклатуры;
		
		НоваяСтрока.ЕдиницаИзмерения           = СтрокаТЧ.ЕдиницаИзмерения;
		НоваяСтрока.ЕдиницаИзмеренияМест       = СтрокаТЧ.ЕдиницаИзмеренияМест;
		НоваяСтрока.Количество                 = СтрокаТЧ.Количество;
		НоваяСтрока.КоличествоМест             = СтрокаТЧ.КоличествоМест;
		НоваяСтрока.Коэффициент                = СтрокаТЧ.Коэффициент;
		
		НоваяСтрока.СчетПередачиБУ             = СтрокаТЧ.СчетПередачиБУ;
		НоваяСтрока.СчетПередачиНУ             = СтрокаТЧ.СчетПередачиНУ;
		
		НоваяСтрока.ФизЛицо                    = СтрокаТЧ.ФизЛицо;
		НоваяСтрока.НазначениеИспользования    = СтрокаТЧ.НазначениеИспользования;
		
	КонецЦикла;	
	
КонецПроцедуры // КоманднаяПанельТоварыДобавитьПоДокументуПередачи()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	
	//Не перезаполняем СчетДт в шапке ?
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Материалы"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

	УстановитьВидимостьДоступность();
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
	Если ТипСтоимости = Перечисления.ВидыНормативнойСтоимостиПроизводства.Фиксированная Тогда
		РаботаСДиалогами.УстановитьЦеныПоТипуУчета( Материалы, ОтражатьВУправленческомУчете);
	КонецЕсли;
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Материалы"), Неопределено, ОтражатьВНалоговомУчете);

	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	//Не перезаполняем СчетДт в шапке ?
	СчетаУчетаВДокументах.ИнтерактивноПерезаполнитьСчетаУчета(ЭтотОбъект, Ложь, Новый Структура("Материалы"), ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);
												  
    // Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода ТипСтоимости.
//
Процедура ТипСтоимостиПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ТипСтоимостиПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СпособСписанияРасходов.
//
Процедура СпособСписанияРасходовПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // СпособСписанияРасходовПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатрат.
//
Процедура СтатьяЗатратПриИзменении(Элемент)
	
	СчетаУчетаЗатрат = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, СтатьяЗатрат);
	СчетДт = СчетаУчетаЗатрат.СчетУчетаБУ;
	СчетДтНУ = СчетаУчетаЗатрат.СчетУчетаНУ;

	УстановитьВидимостьДоступность();
	
КонецПроцедуры // СтатьяЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СтатьяЗатрат.
//
Процедура СтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СформироватьТаблицуОтбораНематериальныхСтатейЗатрат();
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		ТаблицаОтбора, 
		Элемент, 
		СтандартнаяОбработка
	);
	
КонецПроцедуры // СтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДт
//
Процедура СчетДтПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчета();
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // СчетДтПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДт
//
Процедура СчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетДтОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода СубконтоДт1
//
Процедура СубконтоДт1НачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоДт1
//
Процедура СубконтоДт1ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчета(Истина);
	Если ЗначениеЗаполнено(СчетДтНУ) Тогда
		Если ТипЗнч(СубконтоДтНУ1) = ТипЗнч(СубконтоДт1) Тогда
			СубконтоДтНУ1 = СубконтоДт1;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоДт1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоДт2
//
Процедура СубконтоДт2ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчета(Истина);
	Если ЗначениеЗаполнено(СчетДтНУ) Тогда
		Если ТипЗнч(СубконтоДтНУ2) = ТипЗнч(СубконтоДт2) Тогда
			СубконтоДтНУ2 = СубконтоДт2;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоДт2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СубконтоДт3
//
Процедура СубконтоДт3ПриИзменении(Элемент)
	
	ЗаполнитьСчетНалоговогоУчета(Истина);
	Если ЗначениеЗаполнено(СчетДтНУ) Тогда
		Если ТипЗнч(СубконтоДтНУ3) = ТипЗнч(СубконтоДт3) Тогда
			СубконтоДтНУ3 = СубконтоДт3;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // СубконтоДт3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДт
//
Процедура СчетДтНУПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // СчетДтНУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДтНУ
//
Процедура СчетДтНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры // СчетДтНУОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Материалы

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "Материалы". Формирует данные в колонке "Всего" и "ЕдиницаХранения".
//
Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
КонецПроцедуры // МатериалыПриВыводеСтроки()

// Процедура - обработчик события "ОбработкаВыбора" табличной части
// "Материалы".
//
Процедура МатериалыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Элемент.ТекущаяСтрока.Физлицо = ВыбранноеЗначение.Физлицо;
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // МатериалыОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ПриИзмененииНоменклатурыМатериалов(СтрокаТабличнойЧасти);
	
	ЗаполнитьСчетаУчетаВСтрокеТабЧастиРегл(СтрокаТабличнойЧасти, "Материалы", ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчете);

КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода работника
// в строке табличной части "Материалы".
//
Процедура МатериалыФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	// переопеределим выбор физлица на выбор из списка регистра сведений
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	Иначе
		ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение);
	КонецЕсли;
	
КонецПроцедуры // МатериалыФизЛицоНачалоВыбора()

Процедура МатериалыФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	Иначе
		Элемент.Значение = ВыбранноеЗначение;
	КонецЕсли;

КонецПроцедуры

Процедура МатериалыФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	Если ОтражатьВБухгалтерскомУчете Тогда
        ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "РаботникиОрганизации", Текст,мГоловнаяОрганизация);
	Иначе
		ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст);
	КонецЕсли;

КонецПроцедуры

Процедура МатериалыФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Если ОтражатьВБухгалтерскомУчете Тогда
		Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "РаботникиОрганизации", Текст, Элемент.Значение, мГоловнаяОрганизация, Истина);
	Иначе	
		Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение, , Истина);
    КонецЕсли;

КонецПроцедуры


// Процедура - обработчик события "ПриИзменении" поля ввода назначения использования
// в строке табличной части "Материалы".
//
Процедура МатериалыНазначениеИспользованияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		СтрокаТабличнойЧасти.Номенклатура = Элемент.Значение.Владелец;
		МатериалыНоменклатураПриИзменении(Элемент);
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НазначениеИспользования) Тогда
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.НазначениеИспользования.Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтрокаТабличнойЧасти.НазначениеИспользования.ЕдиницаИзмерения;
		
		ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры // МатериалыНазначениеИспользованияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количество мест
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // МатериалыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаМестПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении ЕдиницаМест.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // МатериалыЕдиницаМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количество
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ДокументОбъект);
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // МатериалыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода цены
// в строке табличной части "Материалы".
//
Процедура МатериалыЦенаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.РассчитатьСуммуТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // МатериалыЦенаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода сумма
// в строке табличной части "Материалы".
//
Процедура МатериалыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Суммы.
	ОбработкаТабличныхЧастей.ПриИзмененииСуммыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"),,ложь,ложь,ложь,"Материалы");
	
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	
КонецПроцедуры // МатериалыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Счет затрат
// в строке табличной части "Материалы".
//
Процедура МатериалыСчетПередачиБУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, , "СчетПередачиБУ", "СчетПередачиНУ");
	
КонецПроцедуры // МатериалыСчетПередачиБУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат
//
Процедура МатериалыСчетПередачиБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // МатериалыСчетПередачиБУОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиМатериалы = ЭлементыФормы.Материалы.Колонки;