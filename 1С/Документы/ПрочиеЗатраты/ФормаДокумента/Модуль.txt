////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мПрименениеУСН;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем ПоказыватьВДокументахСчетаУчета;

Перем мОтражатьВРегламентированномУчете;
Перем мВедениеУчетаЗатратПоПроектам;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура обработка подбора прочих затрат
//
Процедура ОбработкаПодбораПрочихЗатрат( ТабЧасть, СтруктВыбора)
	
	НоваяСтрока = ТабЧасть.Найти( СтруктВыбора["СтатьяЗатрат"], "СтатьяЗатрат");
	
	Если НоваяСтрока = Неопределено Тогда
		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.СтатьяЗатрат = СтруктВыбора["СтатьяЗатрат"];
		
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля( НоваяСтрока, ПодразделениеОрганизации, НоваяСтрока.СтатьяЗатрат);
	КонецЕсли;
	
	НоваяСтрока.Сумма     = НоваяСтрока.Сумма     + СтруктВыбора.СуммаУпр;
	НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаРегл + СтруктВыбора.СуммаРегл;
	НоваяСтрока.СуммаНал  = НоваяСтрока.СуммаНал  + СтруктВыбора.СуммаРегл;
	
КонецПроцедуры // ОбработкаПодбораПрочихЗатрат()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Затраты,ЭлементыФормы.КоманднаяПанельТовары.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчета(ИзменениеСубконто = ЛОЖЬ)
	
	Если ТипЗнч(Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = Субконто1.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = Субконто2.ВидРасходовНУ;
	ИначеЕсли ТипЗнч(Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
		ВидЗатратНУ = Субконто3.ВидРасходовНУ;
	ИначеЕсли ИзменениеСубконто Тогда
		Возврат;
	Иначе
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", Счет, ВидЗатратНУ));
	Иначе
		СчетНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", Счет));
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыбореСчета(СчетНУ, ЭлементыФормы.СубконтоНУ1, ЭлементыФормы.НадписьСубконтоНУ1,
	                       ЭлементыФормы.СубконтоНУ2, ЭлементыФормы.НадписьСубконтоНУ2,
	                       ЭлементыФормы.СубконтоНУ3, ЭлементыФормы.НадписьСубконтоНУ3);
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()
					   
// Процедура заполняет счет налогового учета на основании счета бухгалтерского учета в строке табличной части.
//
Процедура ЗаполнитьСчетНалоговогоУчетаВСтрокеТабЧасти()
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	СтрокаТабличнойЧасти.СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаТабличнойЧасти.СчетЗатрат));
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчетаВСтрокеТабЧасти()

// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	
	Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,мПрименениеУСН) Тогда
						
		Для Каждого СтрокаТЧ Из Затраты Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьВидимостьДоступность()
	
	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	
	Если ЭлементыФормы.ОсновнаяПанель.Страницы.БухгалтерскийУчет.Видимость <> ОтражатьВБухгалтерскомУчете Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.БухгалтерскийУчет.Видимость =  ОтражатьВБухгалтерскомУчете;
	КонецЕсли;
	
	Если ЭлементыФормы.ОсновнаяПанель.Страницы.НалоговыйУчет.Видимость <> ОтражатьВНалоговомУчетеНП Тогда
		ЭлементыФормы.ОсновнаяПанель.Страницы.НалоговыйУчет.Видимость =  ОтражатьВНалоговомУчетеНП;
	КонецЕсли;
	
	ВидомостьПодразделенияОрганизации = (ОтражатьВБухгалтерскомУчете ИЛИ ОтражатьВНалоговомУчете);
	
	Если ЭлементыФормы.ПодразделениеОрганизации.Видимость <> ВидомостьПодразделенияОрганизации Тогда
		ЭлементыФормы.ПодразделениеОрганизации.Видимость = ВидомостьПодразделенияОрганизации;
		ЭлементыФормы.НадписьПодразделениеОрганизации.Видимость = ВидомостьПодразделенияОрганизации;
	КонецЕсли;

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;
	
	Колонки = ЭлементыФормы.Затраты.Колонки;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.СчетЗатрат,   ПоказыватьВДокументахСчетаУчета И ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти( Колонки.СчетЗатратНУ, ПоказыватьВДокументахСчетаУчета И ОтражатьВНалоговомУчетеНП);
	
КонецПроцедуры // УстановитьВидимостьДоступность()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);
		Если ПараметрОбъектКопирования = Неопределено И ПараметрОснование = Неопределено Тогда
			Если НЕ ЗначениеЗаполнено(Проект) Тогда
				Проект = Подразделение.ОсновнойПроект;
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("НоменклатурнаяГруппа");
	СтруктураКолонок.Вставить("СтатьяЗатрат");
	СтруктураКолонок.Вставить("Сумма");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Затраты.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                    ВидОперации.Метаданные().ЗначенияПеречисления,
	                                    Новый Действие("ДействияФормыДействиеУстановитьОперацию"));
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Обновить содержание информационных строк.
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
    мВедениеУчетаЗатратПоПроектам = УправлениеПроектами.ВедениеУчетаЗатратПоПроектам();
	
	РаботаСДиалогами.ПриВыбореСчета(Счет, ЭлементыФормы.Субконто1, ЭлементыФормы.НадписьСубконто1,
	                     ЭлементыФормы.Субконто2, ЭлементыФормы.НадписьСубконто2,
	                     ЭлементыФормы.Субконто3, ЭлементыФормы.НадписьСубконто3);
	РаботаСДиалогами.ПриВыбореСчета(СчетНУ, ЭлементыФормы.СубконтоНУ1, ЭлементыФормы.НадписьСубконтоНУ1,
	                       ЭлементыФормы.СубконтоНУ2, ЭлементыФормы.НадписьСубконтоНУ2,
	                       ЭлементыФормы.СубконтоНУ3, ЭлементыФормы.НадписьСубконтоНУ3);
	
	РаботаСДиалогами.УстановитьВидимостьКолонкиПроект(ЭлементыФормы.Затраты.Колонки, , мУказаниеПроектовВТабличнойЧастиДокументов И мВедениеУчетаЗатратПоПроектам);
	РаботаСДиалогами.УстановитьВидимостьПроекта(ЭтотОбъект, ЭлементыФормы, "НадписьПроект,Проект", Истина);					   

	// Управление видимостью счетов
	ПоказыватьВДокументахСчетаУчета = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ПоказыватьВДокументахСчетаУчета");
	ЭлементыФормы.ДействияФормы.Кнопки.ПоказатьСкрытьСчетаУчета.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимостьДоступность();
	
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "ПодменюВидаОперации" командной панели
// формы. Процедура устанавливает значение реквизита ВидОперации.
//
// Обработчик уставливается динамически методом "Действие"
Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка <> Неопределено Тогда // найти новое значение вида операции
		ВидОперации = Перечисления[ВидОперации.Метаданные().Имя][Кнопка.Имя];
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийПрочиеЗатраты.Отражение Тогда
		ТипКолонки   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
		ЭлементыФормы.Затраты.Колонки.Сумма.ЭлементУправления.ОграничениеТипа = ТипКолонки;
		Для Каждого СтрокаТЧ Из Затраты Цикл
			Если СтрокаТЧ.Сумма < 0 Тогда
				СтрокаТЧ.Сумма = - СтрокаТЧ.Сумма;
				ОбщегоНазначения.Сообщение("Изменен знак числа в строке № " + СтрокаТЧ.НомерСтроки, СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТипКолонки   = Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15,2));
		ЭлементыФормы.Затраты.Колонки.Сумма.ЭлементУправления.ОграничениеТипа = ТипКолонки;
	КонецЕсли;

	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Обработчик события "Действие" кнопки "ПоказатьСкрытьСчетаУчета" 
// командной панели формы. Устанавливает видимость счетов в форме.
//
Процедура ДействияФормыПоказатьСкрытьСчетаУчета(Кнопка)
	
	ПоказыватьВДокументахСчетаУчета = НЕ ПоказыватьВДокументахСчетаУчета;
	
	Кнопка.Пометка = ПоказыватьВДокументахСчетаУчета;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ДействияФормыПоказатьСкрытьСчетаУчета()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа
	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");

	Если НЕ Элемент.Значение Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);

	Если Затраты.Количество() > 0 Тогда
		
		Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете) Тогда
			Для каждого СтрокаТЧ Из Затраты Цикл
				Если Элемент.Значение Тогда
					УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
				Иначе
					СтрокаТЧ.СчетЗатрат   = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
					СтрокаТЧ.СчетЗатратНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
				КонецЕсли;
			КонецЦикла;

		КонецЕсли;
		
		Ответ = Вопрос(?(ОтражатьВБухгалтерскомУчете, "Заполнить", "Очистить") + 
						" сумму регл. учета?", 
						РежимДиалогаВопрос.ДаНет, , , "Изменения суммы регл. учета");

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТЧ Из Затраты Цикл
				Если Элемент.Значение Тогда
					СтрокаТЧ.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТЧ.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
					СтрокаТЧ.СуммаНал   = СтрокаТЧ.СуммаРегл;
				Иначе
					СтрокаТЧ.СуммаРегл = 0;
					СтрокаТЧ.СуммаНал   = 0;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	Если Элемент.Значение Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;
	
КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в управленческом учете
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)

	Если НЕ Элемент.Значение Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;

	Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(,ОтражатьВНалоговомУчете) Тогда

		Для каждого СтрокаТЧ Из Затраты Цикл
			Если Элемент.Значение Тогда
				СчетаУчета = УправлениеЗатратами.ПолучитьСчетаУчетаСтатьиЗатрат(ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
				СтрокаТЧ.СчетЗатратНУ = СчетаУчета.СчетУчетаНУ;
			Иначе
				СтрокаТЧ.СчетЗатратНУ = ПланыСчетов.Налоговый.ПустаяСсылка();
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;

	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	Если Элемент.Значение Тогда
		УстановитьВидимостьДоступность();
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	мПрименениеУСН = НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата);
	УстановитьВидимостьДоступность();
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
		
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПодразделениеОрганизацииПриИзменении(Элемент);
	КонецЕсли;
												  
	Проект = Подразделение.ОсновнойПроект;

КонецПроцедуры //ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделенияОрганизации
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Подразделения организации.
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Счет.
//
Процедура СчетПриИзменении(Элемент)

	РаботаСДиалогами.ПриВыбореСчета(Счет, ЭлементыФормы.Субконто1, ЭлементыФормы.НадписьСубконто1,
	                     ЭлементыФормы.Субконто2, ЭлементыФормы.НадписьСубконто2,
	                     ЭлементыФормы.Субконто3, ЭлементыФормы.НадписьСубконто3);

	ЗаполнитьСчетНалоговогоУчета();

КонецПроцедуры // СчетКтПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СубконтоКт.
//
Процедура Субконто1НачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода Субконто1.
//
Процедура Субконто1ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчета(Истина);
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(Счет, СчетНУ, 1, Субконто1, СубконтоНУ1);

КонецПроцедуры // СубконтоКт1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Субконто2.
//
Процедура Субконто2ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчета(ИСТИНА);
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(Счет, СчетНУ, 2, Субконто2, СубконтоНУ2);

КонецПроцедуры // СубконтоКт2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Субконто3.
//
Процедура Субконто3ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчета(ИСТИНА);
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(Счет, СчетНУ, 3, Субконто3, СубконтоНУ3);

КонецПроцедуры // СубконтоКт3ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Счет.
Процедура СчетНУПриИзменении(Элемент)

	РаботаСДиалогами.ПриВыбореСчета(СчетНУ, ЭлементыФормы.СубконтоНУ1, ЭлементыФормы.НадписьСубконтоНУ1,
	                       ЭлементыФормы.СубконтоНУ2, ЭлементыФормы.НадписьСубконтоНУ2,
	                       ЭлементыФормы.СубконтоНУ3, ЭлементыФормы.НадписьСубконтоНУ3);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Проект.
//
Процедура ПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта(ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ПроектНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ЗАТРАТЫ

// Процедура - обработчик события "ПриВыводеСтроки" табличного поля "Затраты"
//
Процедура ЗатратыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ХарактерЗатрат = ДанныеСтроки.СтатьяЗатрат.ХарактерЗатрат;
	Если ЭлементыФормы.Затраты.Колонки.ХарактерЗатрат.Видимость	Тогда
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.ХарактерЗатрат.Текст = ХарактерЗатрат;
	КонецЕсли;
	УправлениеПроектами.УстановитьДоступностьПроектаВСтрокеТабЧасти(ХарактерЗатрат, ОформлениеСтроки, ЭлементыФормы.Затраты);

	ОтражатьВНалоговомУчетеНП = (ОтражатьВНалоговомУчете И (НЕ мПрименениеУСН));
	УправлениеЗатратами.УстановитьВидимостьЯчеекАналитикиЗатрат(ХарактерЗатрат, ДанныеСтроки.Продукция, ДанныеСтроки.СчетЗатрат, ДанныеСтроки.СчетЗатратНУ, ОформлениеСтроки, ОтражатьВУправленческомУчете, ОтражатьВБухгалтерскомУчете, ОтражатьВНалоговомУчетеНП);
	
КонецПроцедуры // ЗатратыПриВыводеСтроки()

// Процедура - обработчик события "ПриНачалеРедактирования" табличного поля "Затраты".
//
Процедура ЗатратыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		
		Если НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Проект) Тогда
			Элемент.ТекущиеДанные.Проект = Проект;
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры // ЗатратыПриНачалеРедактирования()

// Процедура - обработчик события "ОбработкаВыбора"
//
Процедура СчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СтатьяЗатрат табличной части "Затраты".
//
Процедура ЗатратыСтатьяЗатратПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, СтрокаТабличнойЧасти.СтатьяЗатрат);
	
	Если мУказаниеПроектовВТабличнойЧастиДокументов Тогда
		УправлениеПроектами.УстановитьПроектПоУмолчанию(Подразделение, СтрокаТабличнойЧасти.СтатьяЗатрат, СтрокаТабличнойЧасти.Проект);
	КонецЕсли;

КонецПроцедуры // ЗатратыСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля СчетЗатрат табличной части "Затраты".
//
Процедура ЗатратыСчетЗатратПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	ЗаполнитьСчетНалоговогоУчетаВСтрокеТабЧасти();
	
	Колонки = ЭлементыФормы.Затраты.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле( Элемент.Значение,
		СтрокаТабличнойЧасти.Субконто1, Колонки.Субконто1,
		СтрокаТабличнойЧасти.Субконто2, Колонки.Субконто2,
		СтрокаТабличнойЧасти.Субконто3, Колонки.Субконто3);

КонецПроцедуры // ЗатратыСчетЗатратПриИзменении()
	
// Процедура - обработчик события "ПриИзменении" поля Счет затрат (НУ) табличной части "Затраты".
//
Процедура ЗатратыСчетЗатратНУПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	Колонки = ЭлементыФормы.Затраты.Колонки;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	                             СтрокаТабличнойЧасти.СубконтоНУ1,
	                             Колонки.СубконтоНУ1,
	                             СтрокаТабличнойЧасти.СубконтоНУ2,
	                             Колонки.СубконтоНУ2,
	                             СтрокаТабличнойЧасти.СубконтоНУ3,
	                             Колонки.СубконтоНУ3);
	
КонецПроцедуры // ЗатратыСчетЗатратНУПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Сумма табличной части "Затраты".
//
Процедура ЗатратыСуммаПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл(СтрокаТабличнойЧасти.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	СтрокаТабличнойЧасти.СуммаНал = СтрокаТабличнойЧасти.СуммаРегл;

КонецПроцедуры // ЗатратыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля СуммаРегл табличной части "Затраты".
//
Процедура ЗатратыСуммаРеглПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	СтрокаТабличнойЧасти.СуммаНал = СтрокаТабличнойЧасти.СуммаРегл;

КонецПроцедуры // ЗатратыСуммаРеглПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат
//
Процедура ЗатратыСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ЗатратыСчетЗатратОбработкаВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода счет затрат НУ.
//
Процедура ЗатратыСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры // ЗатратыСчетЗатратНУОбработкаВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "Проект"
//
Процедура ЗатратыПроектНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	УправлениеПроектами.НачалоВыбораПроекта( ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры // ЗатратыПроектНачалоВыбора()

// Процедура заполняет счет налогового учета на основании счета и аналитики бухгалтерского учета.
//
Процедура ЗаполнитьСчетНалоговогоУчетаЗатраты(ИзменениеСубконто = ЛОЖЬ)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Затраты.ТекущиеДанные;
	ХарактерЗатрат = УправлениеЗатратами.ПолучитьХарактерЗатратПоСчетуЗатрат(СтрокаТабличнойЧасти.СчетЗатрат, Неопределено);
	
	Если ХарактерЗатрат = Перечисления.ХарактерЗатрат.Прочие Тогда
		ВидЗатратНУ = Перечисления.ВидыРасходовНУ.ПустаяСсылка();
		Если ТипЗнч(СтрокаТабличнойЧасти.Субконто1) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто1.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Субконто2) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто2.ВидРасходовНУ;
		ИначеЕсли ТипЗнч(СтрокаТабличнойЧасти.Субконто3) = Тип("СправочникСсылка.СтатьиЗатрат") Тогда
			ВидЗатратНУ = СтрокаТабличнойЧасти.Субконто3.ВидРасходовНУ;
		ИначеЕсли ИзменениеСубконто Тогда
			Возврат;
		КонецЕсли;
	Иначе
		ВидЗатратНУ = СтрокаТабличнойЧасти.СтатьяЗатрат.ВидРасходовНУ;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидЗатратНУ) Тогда
		СтрокаТабличнойЧасти.СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ВидЗатратНУ", СтрокаТабличнойЧасти.СчетЗатрат, ВидЗатратНУ));
	Иначе
		СтрокаТабличнойЧасти.СчетЗатратНУ = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ, ", СтрокаТабличнойЧасти.СчетЗатрат));
	КонецЕсли;
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(ЭлементыФормы.Затраты.ТекущиеДанные.СчетЗатратНУ,
	                             ЭлементыФормы.Затраты.ТекущиеДанные.СубконтоНУ1,
	                             ЭлементыФормы.Затраты.Колонки.СубконтоНУ1,
	                             ЭлементыФормы.Затраты.ТекущиеДанные.СубконтоНУ2,
	                             ЭлементыФормы.Затраты.Колонки.СубконтоНУ2,
	                             ЭлементыФормы.Затраты.ТекущиеДанные.СубконтоНУ3,
	                             ЭлементыФормы.Затраты.Колонки.СубконтоНУ3);
	
КонецПроцедуры // ЗаполнитьСчетНалоговогоУчета()


// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Затраты".
//
Процедура ЗатратыСубконто1ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчетаЗатраты(Истина);
	СтрокаТЧ = ЭлементыФормы.Затраты.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 1, СтрокаТЧ.Субконто1, СтрокаТЧ.СубконтоНУ1);

КонецПроцедуры // ЗатратыСубконто1ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Материалы".
//
Процедура ЗатратыСубконто2ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчетаЗатраты(Истина);
	СтрокаТЧ = ЭлементыФормы.Затраты.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 2, СтрокаТЧ.Субконто2, СтрокаТЧ.СубконтоНУ2);

КонецПроцедуры // ЗатратыСубконто2ПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля Субконто табличной части "Материалы".
//
Процедура ЗатратыСубконто3ПриИзменении(Элемент)

	ЗаполнитьСчетНалоговогоУчетаЗатраты(Истина);
	СтрокаТЧ = ЭлементыФормы.Затраты.ТекущиеДанные;
	БухгалтерскийУчет.ЗаменитьСубконтоНУ(СтрокаТЧ.СчетЗатрат, СтрокаТЧ.СчетЗатратНУ, 3, СтрокаТЧ.Субконто3, СтрокаТЧ.СубконтоНУ3);

КонецПроцедуры // ЗатратыСубконто3ПриИзменении()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ.
//
Процедура ЗатратыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Затраты", ДопПараметры);
	
КонецПроцедуры // ЗатратыЗаказНачалоВыбора()

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели
// табличного поля
//
Процедура КоманднаяПанельПрочиеЗатратыЗаполнитьПоОстаткам(Кнопка)
	
	Если ОтражатьВУправленческомУчете И НЕ ЗначениеЗаполнено(Подразделение) Тогда
		Предупреждение("Не указано подразделение!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	Если ОтражатьВБухгалтерскомУчете И НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
		Предупреждение("Не указано подразделение организации!
			|Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если Затраты.Количество() > 0 Тогда
		Ответ = Вопрос("В документе уже присутствуют строки!
			|При заполнении табличная часть будет очищена.
			|Продолжить?", РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		Если Не Ответ = КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Затраты.Очистить();
	
	// Выбрать характер затрат для заполнения
	СписВыбора = Новый СписокЗначений;
	Для Каждого МетаЗначение Из Метаданные.Перечисления.ХарактерЗатрат.ЗначенияПеречисления Цикл
		СписВыбора.Добавить( Перечисления.ХарактерЗатрат[МетаЗначение.Имя], МетаЗначение.Синоним);
	КонецЦикла;
	
	СписВыбора.Удалить(СписВыбора.НайтиПоЗначению(Перечисления.ХарактерЗатрат.ВложенияВоВнеоборотныеАктивы));
	СписВыбора.Удалить(СписВыбора.НайтиПоЗначению(Перечисления.ХарактерЗатрат.ЗаготовлениеИПриобретениеМЦ));
	СписВыбора.СортироватьПоПредставлению();
	СписВыбора.Вставить( 0, "<Все>", "<Все>");
	
	Выбор = СписВыбора.ВыбратьЭлемент("Выберите характер затрат для отбора...", СписВыбора[0].Значение);
	Если Выбор = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТабЗатраты = Затраты.Выгрузить();
	
	Если НЕ Выбор.Значение = "<Все>" Тогда
		ДопПараметры = Новый Структура;
		Параметры = Новый Массив;
		Параметры.Добавить( Выбор.Значение);
		ДопПараметры.Вставить( "ХарЗатрат", Параметры);
		
		УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамНЗП   ( ЭтотОбъект, ТабЗатраты, ДопПараметры);
		УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамЗатрат( ЭтотОбъект, ТабЗатраты, ДопПараметры);
	Иначе
		УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамНЗП   ( ЭтотОбъект, ТабЗатраты);
		УправлениеПроизводством.ЗаполнитьПрочиеЗатратыПоОстаткамЗатрат( ЭтотОбъект, ТабЗатраты);
	КонецЕсли;
	
	Затраты.Загрузить(ТабЗатраты);
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоОстаткам()

Процедура КоманднаяПанельТоварыПодбор(Кнопка)
	
	СтруктПараметры = Новый Структура;
	СтруктПараметры.Вставить( "Подразделение",            Подразделение);
	СтруктПараметры.Вставить( "ПодразделениеОрганизации", ПодразделениеОрганизации);
	СтруктПараметры.Вставить( "ФлагУпрУчета",             ОтражатьВУправленческомУчете);
	СтруктПараметры.Вставить( "ФлагРеглУчета",            ОтражатьВБухгалтерскомУчете);
	СтруктПараметры.Вставить( "ВидЗатрат",                "НематериальныеЗатраты");
	СтруктПараметры.Вставить( "ДатаОстатков",             Дата);
	СтруктПараметры.Вставить( "Организация",              Организация);
	СтруктПараметры.Вставить( "Команда",                  "ПодборПрочихЗатрат");
	
	ОбработкаТабличныхЧастей.ОткрытьПодборСтатейЗатрат( ЭтаФорма, СтруктПараметры);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборПрочихЗатрат" Тогда
			ОбработкаПодбораПрочихЗатрат( Затраты, ЗначениеВыбора);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры