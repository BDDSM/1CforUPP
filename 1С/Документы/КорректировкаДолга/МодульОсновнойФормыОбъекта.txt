////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мОтражатьВРегламентированномУчете;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем СтарыеЗначенияРеквизитов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.СуммыДолга,ЭлементыФормы.КоманднаяПанельСуммыДолга.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.СуммыДолгаУменьшение,ЭлементыФормы.КоманднаяПанельСуммыДолгаУменьшение.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

Процедура ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТЧ, ЗаполнятьБУ) Экспорт
	
	Если ЗаполнятьБУ Тогда
		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета
			И СтрокаТЧ.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			ТекКонтрагент = КонтрагентКредитор;
		Иначе
			ТекКонтрагент = КонтрагентДебитор;
		КонецЕсли;
		
		СчетаУчета = БухгалтерскийУчетРасчетовСКонтрагентами.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ТекКонтрагент, СтрокаТЧ.ДоговорКонтрагента);
    	
		Если СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетов;
			СтрокаТЧ.СчетУчетаАвансов  = СчетаУчета.СчетАвансов;
		ИначеЕсли СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем 
			ИЛИ СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомиссионером Тогда
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаТЧ.СчетУчетаАвансов  = СчетаУчета.СчетАвансовПокупателя;
		ИначеЕсли СтрокаТЧ.ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СКомитентом Тогда
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовСКомитентом;
			СтрокаТЧ.СчетУчетаАвансов  = СчетаУчета.СчетАвансов;
		Иначе //.Прочее
			СтрокаТЧ.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаТЧ.СчетУчетаАвансов  = СчетаУчета.СчетАвансовПокупателя;
		КонецЕсли;
		
	Иначе
		
		СтрокаТЧ.СчетУчетаРасчетов = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		СтрокаТЧ.СчетУчетаАвансов  = ПланыСчетов.Хозрасчетный.ПустаяСсылка();
		
	КонецЕсли;

КонецПроцедуры // ЗаполнитьСчетаУчетаВСтрокеТабЧасти()

// Заполняет счета учета в табличной части
//
Процедура ЗаполнитьСчетаУчетаВТабЧасти(ТабличнаяЧасть, ЗаполнятьБУ)

	Для каждого СтрокаТабЧасти Из ТабличнаяЧасть Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабЧасти, ЗаполнятьБУ);
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСчетаУчетаВТабЧасти()

Функция ОчиститьСтрокиПоВидуЗадолженности(ВидЗадолженности = Неопределено, ЗадаватьВопрос = Истина)

	Если ВидЗадолженности = Неопределено Тогда
		НужноУдалятьСтроки = СуммыДолга.Количество() > 0;
	Иначе
		НужноУдалятьСтроки = СуммыДолга.Найти(ВидЗадолженности, "ВидЗадолженности") <> Неопределено;
	КонецЕсли; 
	
	Если НЕ НужноУдалятьСтроки Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ЗадаватьВопрос Тогда
		
		Если ВидЗадолженности = Неопределено Тогда
			ТекстВопроса = "Все строки задолженности ";
		ИначеЕсли ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская Тогда
			ТекстВопроса = "Строки дебиторской задолженности ";
		Иначе
			ТекстВопроса = "Строки кредиторской задолженности ";
		КонецЕсли;
		ТекстВопроса = ТекстВопроса + "будут удалены. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидЗадолженности = Неопределено Тогда
		СуммыДолга.Очистить();
	Иначе
		УдаляемыеСтроки = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", ВидЗадолженности));
		Для каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл
			СуммыДолга.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	КонецЕсли;

	Возврат Истина;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Устанавливает видимость реквизитов субконто и подписей к ним.
//
Процедура УстановитьВидимость()

	Колонки                = ЭлементыФормы.СуммыДолга.Колонки;
	КолонкиУменьшениеДолга = ЭлементыФормы.СуммыДолгаУменьшение.Колонки;
	
	ЭлементыФормы.ИспользоватьВспомогательныйСчет.Доступность = ОтражатьВБухгалтерскомУчете;
	ЭлементыФормы.ИспользоватьВспомогательныйСчет.Видимость = (ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета);
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда

		ЭлементыФормы.КонтрагентКредитор.Видимость                         = Истина;
		ЭлементыФормы.НадписьКонтрагентКредитор.Видимость                  = Истина;
		ЭлементыФормы.НадписьКонтрагент.Заголовок                          = "Дебитор";
		ЭлементыФормы.НадписьКонтрагентКредитор.Заголовок                  = "Кредитор";
		ЭлементыФормы.ОсновнаяПанель.Страницы.УменьшениеДолга.Видимость    = Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Взаиморасчеты.Заголовок      = "Взаиморасчеты";
		ЭлементыФормы.ДоговорКонтрагента.Видимость                         = Ложь;
		ЭлементыФормы.НадписьДоговорКонтрагента.Видимость                  = Ложь;
		ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Использование = Ложь;
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.ВспомогательныйСчет.Видимость = ИспользоватьВспомогательныйСчет и ОтражатьВБухгалтерскомУчете;
		
		Если ЭлементыФормы.ВспомогательныйСчет.Видимость Тогда
			Для Ном = 1 по 3 Цикл
				Если (Ном <= СчетДт.ВидыСубконто.Количество()) и (ЗначениеЗаполнено(СчетДт)) Тогда
					ЭлементыФормы["НадписьСубконто"+Ном].Заголовок = СчетДт.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
					ЭлементыФормы["НадписьСубконто"+Ном].Видимость = Истина;
					ЭлементыФормы["Субконто"+Ном].Видимость        = Истина;
				Иначе
					ЭлементыФормы["НадписьСубконто"+Ном].Видимость = Ложь;
					ЭлементыФормы["Субконто"+Ном].Видимость        = Ложь;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость          = Ложь;
		
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ВидЗадолженности,  Истина);
		
	Иначе

		ЭлементыФормы.ОсновнаяПанель.Страницы.ВспомогательныйСчет.Видимость = Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.СчетаУчета.Видимость          = ОтражатьВБухгалтерскомУчете;
		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			ЭлементыФормы.КонтрагентКредитор.Видимость                     = Истина;
			ЭлементыФормы.ДоговорКонтрагента.Видимость                     = Истина;
			ЭлементыФормы.НадписьДоговорКонтрагента.Видимость              = Истина;
			ЭлементыФормы.НадписьКонтрагентКредитор.Видимость              = Истина;
			ЭлементыФормы.НадписьКонтрагентКредитор.Заголовок              = "Получатель";
		Иначе
			ЭлементыФормы.КонтрагентКредитор.Видимость                     = Ложь;
			ЭлементыФормы.ДоговорКонтрагента.Видимость                     = Ложь;
			ЭлементыФормы.НадписьДоговорКонтрагента.Видимость              = Ложь;
			ЭлементыФормы.НадписьКонтрагентКредитор.Видимость              = Ложь;
		КонецЕсли;

		ЭлементыФормы.НадписьКонтрагент.Заголовок                          = "Контрагент";
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.УменьшениеДолга.Видимость    = Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Взаиморасчеты.Заголовок      = "Увеличение долга";
		
		ЭлементыФормы.СуммыДолгаУменьшение.ОтборСтрок.ВидЗадолженности.Использование = Истина;
		ЭлементыФормы.СуммыДолгаУменьшение.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Дебиторская;
		ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Использование = Истина;
		ЭлементыФормы.СуммыДолга.ОтборСтрок.ВидЗадолженности.Значение      = Перечисления.ВидыЗадолженности.Кредиторская;

		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.ВидЗадолженности,  Ложь);
		ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУменьшениеДолга.ВидЗадолженности,  Ложь);

		Если ОтражатьВБухгалтерскомУчете Тогда
			
			Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
				ЭлементыФормы.РамкаГруппыДт.Заголовок = "Счет переноса дебиторской задолженности";
				ЭлементыФормы.РамкаГруппыКт.Заголовок = "Счет переноса кредиторской задолженности";
				
				ЭлементыФормы.РамкаГруппыДтНУ.Видимость = Ложь;
				ЭлементыФормы.РамкаГруппыКтНУ.Видимость = Ложь;
				
			Иначе
				ЭлементыФормы.РамкаГруппыДт.Заголовок = "Счет списания дебиторской задолженности";
				ЭлементыФормы.РамкаГруппыКт.Заголовок = "Счет списания кредиторской задолженности";
				
				ЭлементыФормы.РамкаГруппыДтНУ.Видимость = ОтражатьВНалоговомУчете;
				ЭлементыФормы.РамкаГруппыКтНУ.Видимость = ОтражатьВНалоговомУчете;
			КонецЕсли;
			
			ЭлементыФормы.НадписьСчетДтНУ.Видимость = ЭлементыФормы.РамкаГруппыДтНУ.Видимость;
			ЭлементыФормы.СчетДтНУ.Видимость = ЭлементыФормы.РамкаГруппыДтНУ.Видимость;
			
			ЭлементыФормы.НадписьСчетКтНУ.Видимость = ЭлементыФормы.РамкаГруппыКтНУ.Видимость;
			ЭлементыФормы.СчетКтНУ.Видимость = ЭлементыФормы.РамкаГруппыКтНУ.Видимость;
			
			РеквизитыСчетов = Новый Структура("Дт, Кт,ДтНУ, КтНу",СчетДт,СчетКт,СчетДтНУ,СчетКтНУ);
			Для каждого ТекущийСчет Из РеквизитыСчетов Цикл
				ВидимостьСчета = ЭлементыФормы["Счет"+ТекущийСчет.Ключ].Видимость;
				ВидыСубконтоСчета = ТекущийСчет.Значение.ВидыСубконто;
				Для Ном = 1 по 3 Цикл
					Если (Ном <= ВидыСубконтоСчета.Количество())
						И ЗначениеЗаполнено(ТекущийСчет.Значение)
						И ВидимостьСчета 
						И ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности
						Тогда
						ЭлементыФормы["НадписьСубконто"+ТекущийСчет.Ключ+Ном].Заголовок = ВидыСубконтоСчета[Ном-1].ВидСубконто.Наименование;
						ЭлементыФормы["НадписьСубконто"+ТекущийСчет.Ключ+Ном].Видимость = Истина;
						ЭлементыФормы["Субконто"+ТекущийСчет.Ключ+Ном].Видимость        = Истина;
					Иначе
						ЭлементыФормы["НадписьСубконто"+ТекущийСчет.Ключ+Ном].Видимость = Ложь;
						ЭлементыФормы["Субконто"+ТекущийСчет.Ключ+Ном].Видимость        = Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла; 
			
			ЕстьДебиторскаяЗадолженность  = СуммыДолга.Найти(Перечисления.ВидыЗадолженности.Дебиторская, "ВидЗадолженности") <> Неопределено;
			ЕстьКредиторскаяЗадолженность = СуммыДолга.Найти(Перечисления.ВидыЗадолженности.Кредиторская, "ВидЗадолженности") <> Неопределено;
			
			ЭлементыФормы.СчетДт.АвтоОтметкаНезаполненного   = ЕстьДебиторскаяЗадолженность;
			Если НЕ ЭлементыФормы.СчетДт.АвтоОтметкаНезаполненного Тогда
				ЭлементыФормы.СчетДт.ОтметкаНезаполненного = Ложь;
			КонецЕсли;
			ЭлементыФормы.СчетДтНУ.АвтоОтметкаНезаполненного = ЕстьДебиторскаяЗадолженность;
			Если НЕ ЭлементыФормы.СчетДтНУ.АвтоОтметкаНезаполненного Тогда
				ЭлементыФормы.СчетДтНУ.ОтметкаНезаполненного = Ложь;
			КонецЕсли;
			
			ЭлементыФормы.СчетКт.АвтоОтметкаНезаполненного   = ЕстьКредиторскаяЗадолженность;
			Если НЕ ЭлементыФормы.СчетКт.АвтоОтметкаНезаполненного Тогда
				ЭлементыФормы.СчетКт.ОтметкаНезаполненного = Ложь;
			КонецЕсли;
			ЭлементыФормы.СчетКтНУ.АвтоОтметкаНезаполненного = ЕстьКредиторскаяЗадолженность;
			Если НЕ ЭлементыФормы.СчетКтНУ.АвтоОтметкаНезаполненного Тогда
				ЭлементыФормы.СчетКтНУ.ОтметкаНезаполненного = Ложь;
			КонецЕсли;
			
		КонецЕсли; 
		
	КонецЕсли;
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СчетУчетаРасчетов, ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СчетУчетаАвансов,  ОтражатьВБухгалтерскомУчете);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУменьшениеДолга.СчетУчетаРасчетов, ОтражатьВБухгалтерскомУчете);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУменьшениеДолга.СчетУчетаАвансов,  ОтражатьВБухгалтерскомУчете);
	
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(Колонки.СуммаНУ, ОтражатьВНалоговомУчете и ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);
	ОбработкаТабличныхЧастей.УстановитьВидимостьКолонкиТабЧасти(КолонкиУменьшениеДолга.СуммаНУ, ОтражатьВНалоговомУчете и ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности);

КонецПроцедуры // УстановитьВидимость()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);

		
		СтарыеЗначенияРеквизитов.Вставить("ВалютаДокумента", Неопределено);
		ВалютаДокументаПриИзменении("");
		
	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ДоговорКонтрагента");
	СтруктураКолонок.Вставить("Сделка");
	СтруктураКолонок.Вставить("КурсВзаиморасчетов");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.СуммыДолга.Колонки, СтруктураКолонок);

	// Заполняем подменю, вызываемое нажатием кнопки "Операция" командной панели 
	// формы, значениями перечисления "Вид операции" данного вида документа.
	// В качестве обработки выбора вида операции назначается процедура 
	// ДействияФормыДействиеУстановитьОперацию модуля формы.
	РаботаСДиалогами.УстановитьПодменюВыбораВидаОперации(ЭлементыФормы.ДействияФормы.Кнопки.ПодменюВидаОперации,
	                                      ВидОперации.Метаданные().ЗначенияПеречисления,
	                                      Новый Действие("ДействияФормыДействиеУстановитьОперацию"));

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	СтарыеЗначенияРеквизитов.Вставить("ВидОперации",        ВидОперации);
	СтарыеЗначенияРеквизитов.Вставить("Организация",        Организация);
	СтарыеЗначенияРеквизитов.Вставить("ВалютаДокумента",    ВалютаДокумента);
	СтарыеЗначенияРеквизитов.Вставить("КонтрагентДебитор",  КонтрагентДебитор);
	СтарыеЗначенияРеквизитов.Вставить("КонтрагентКредитор", КонтрагентКредитор);

	// Установить видимость элементов
	УстановитьВидимость();

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
	ВывестиНадписи();

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю1);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Заполнить" командной панели 
// табличного поля "Товары", вызывает сервисный механизм для заполнения табличной части
//
Процедура КоманднаяПанельСуммыДолгаЗаполнитьОстаткамиПоВзаиморасчетам(Кнопка)

	Если НЕ ЗначениеЗаполнено(КонтрагентДебитор) Тогда
		Предупреждение("Не выбран контрагент-дебитор! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Предупреждение("Не выбрана валюта документа! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		Если НЕ ЗначениеЗаполнено(КонтрагентКредитор) Тогда
			Предупреждение("Не выбран контрагент-кредитор! Заполнение невозможно!");
			Возврат;
		КонецЕсли;
		
		// Заполняется и дебиторская, и кредиторская задолженность
		
		Если СуммыДолга.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			СуммыДолга.Очистить();
			
		КонецЕсли;
		
		ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр();
		ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр();
		
		Для Каждого СтрокаТабличнойЧасти Из СуммыДолга Цикл
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете);
		КонецЦикла;

	Иначе
	
		// Заполняется только кредиторская задолженность
		СтрокиКредиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));
		
		Если СтрокиКредиторскойЗадолженности.Количество() > 0 Тогда
			
			ТекстВопроса = "Перед заполнением строки кредиторской задолженности будут очищены. Заполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли; 
			
			Для каждого СтрокаТабличнойЧасти Из СтрокиКредиторскойЗадолженности Цикл
				СуммыДолга.Удалить(СтрокаТабличнойЧасти);
			КонецЦикла;
			
		КонецЕсли;
		
		ЗаполнитьОстаткамиКредиторскойЗадолженностиУпр();
		
		СтрокиКредиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Кредиторская));
		Для Каждого СтрокаТабличнойЧасти Из СтрокиКредиторскойЗадолженности Цикл
			ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете);
		КонецЦикла;
	
	КонецЕсли;
	
	ВывестиНадписи();

КонецПроцедуры // КоманднаяПанельСуммыДолгаЗаполнитьОстаткамиПоВзаиморасчетам()

Процедура КоманднаяПанельСуммыДолгаУменьшениеЗаполнитьОстаткамиПоВзаиморасчетам(Кнопка)
	
	Если НЕ ЗначениеЗаполнено(КонтрагентДебитор) Тогда
		Предупреждение("Не выбран контрагент-дебитор! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
		Предупреждение("Не выбрана валюта документа! Заполнение невозможно!");
		Возврат;
	КонецЕсли;
	
	// Заполняется только дебиторская задолженность
	СтрокиДебиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская));
	
	Если СтрокиДебиторскойЗадолженности.Количество() > 0 Тогда
		
		ТекстВопроса = "Перед заполнением строки дебиторской задолженности будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Для каждого СтрокаТабличнойЧасти Из СтрокиДебиторскойЗадолженности Цикл
			СуммыДолга.Удалить(СтрокаТабличнойЧасти);
		КонецЦикла;
		
	КонецЕсли;
	
	ЗаполнитьОстаткамиДебиторскойЗадолженностиУпр();
	
	СтрокиДебиторскойЗадолженности = СуммыДолга.НайтиСтроки(Новый Структура("ВидЗадолженности", Перечисления.ВидыЗадолженности.Дебиторская));
	Для Каждого СтрокаТабличнойЧасти Из СтрокиДебиторскойЗадолженности Цикл
		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(СтрокаТабличнойЧасти, ОтражатьВБухгалтерскомУчете);
	КонецЦикла;
	
	ВывестиНадписи();

КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыДействиеУстановитьОперацию(Кнопка)

	Если Кнопка = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга[Кнопка.Имя];
	
	ИзменяетсяВидОперации = НЕ ВидОперации = СтарыеЗначенияРеквизитов.ВидОперации;
	
	Если ИзменяетсяВидОперации Тогда
		
		Если СтарыеЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
			Если КонтрагентДебитор <> КонтрагентКредитор Тогда
				ОчиститьСтрокиПоВидуЗадолженности(Перечисления.ВидыЗадолженности.Кредиторская, Ложь);
				КонтрагентКредитор = Неопределено;
			КонецЕсли;
		
		ИначеЕсли СтарыеЗначенияРеквизитов.ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
		
			Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
				КонтрагентКредитор = КонтрагентДебитор;
			КонецЕсли;
			
		Иначе //.ПереносЗадолженности
			
			Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета 
				И КонтрагентДебитор <> КонтрагентКредитор Тогда
				ОчиститьСтрокиПоВидуЗадолженности(Перечисления.ВидыЗадолженности.Кредиторская, Ложь);
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.СписаниеЗадолженности Тогда
			КонтрагентКредитор = Неопределено;
		КонецЕсли;
		Если ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности Тогда
			ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		
		СтарыеЗначенияРеквизитов.Вставить("ВидОперации", ВидОперации);
		
	КонецЕсли;
	
	// Отобразить в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(Строка(ВидОперации), ЭтотОбъект, ЭтаФорма);

	// Установить видимость реквизитов по виду операции.
	УстановитьВидимость();
	
КонецПроцедуры // ДействияФормыДействиеУстановитьОперацию()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	// Проверка необходимости пересчета
	ФлагПересчета = Ложь;

	Для каждого СтрокаТаблицы Из СуммыДолга Цикл
		Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
			ВалютаДоговора  = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, мТекущаяДатаДокумента);
			СтарыйКурс      = СтруктураВалюты.Курс;
			СтараяКратность = СтруктураВалюты.Кратность;
			СтруктураВалюты = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, Дата);
			НовыйКурс       = СтруктураВалюты.Курс;
			НоваяКратность  = СтруктураВалюты.Кратность;

			Если НЕ (НовыйКурс = СтарыйКурс И НоваяКратность = СтараяКратность) Тогда
				ФлагПересчета = Истина;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	// Если изменился курс пересчитаем взаиморасчеты
	Если ФлагПересчета Тогда
		ТекстВопроса = "На дату документа у валюты взаиморасчетов был задан другой курс.
		               |Установить курс взаиморасчетов в соответствии с курсом валюты?";
		Ответ        = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);

		Если Ответ = КодВозвратаДиалога.Да Тогда
			Для каждого СтрокаТаблицы Из СуммыДолга Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.ДоговорКонтрагента) Тогда
					ВалютаДоговора                        = СтрокаТаблицы.ДоговорКонтрагента.ВалютаВзаиморасчетов;
					СтруктураВалюты                       = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДоговора, Дата);
					СтрокаТаблицы.КурсВзаиморасчетов      = СтруктураВалюты.Курс;
					СтрокаТаблицы.КратностьВзаиморасчетов = СтруктураВалюты.Кратность;
					ПересчитатьСуммуПоСтроке(СтрокаТаблицы, Ложь);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	ИзменяетсяОрганизация = НЕ Организация = СтарыеЗначенияРеквизитов.Организация;
	
	Если ИзменяетсяОрганизация Тогда
		ИзменятьОрганизацию = ОчиститьСтрокиПоВидуЗадолженности(Неопределено);
		
		Если ИзменятьОрганизацию Тогда
			Если ЗначениеЗаполнено(ДоговорКонтрагента) И НЕ Организация = ДоговорКонтрагента.Организация Тогда
				ДоговорКонтрагента = Неопределено;
			КонецЕсли;
			СтарыеЗначенияРеквизитов.Вставить("Организация", Организация);
		Иначе
			Организация = СтарыеЗначенияРеквизитов.Организация;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);

	УстановитьВидимость();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента
//
Процедура КонтрагентПриИзменении(Элемент)
	
	ИзменяетсяКонтрагент = НЕ КонтрагентДебитор = СтарыеЗначенияРеквизитов.КонтрагентДебитор;
	
	Если НЕ ИзменяетсяКонтрагент Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		ИзменятьКонтрагента = ОчиститьСтрокиПоВидуЗадолженности(Перечисления.ВидыЗадолженности.Дебиторская);
	Иначе
		ИзменятьКонтрагента = ОчиститьСтрокиПоВидуЗадолженности(Неопределено);
	КонецЕсли;
	
	Если ИзменятьКонтрагента Тогда
		СтарыеЗначенияРеквизитов.Вставить("КонтрагентДебитор", КонтрагентДебитор);
	Иначе
		КонтрагентДебитор = СтарыеЗначенияРеквизитов.КонтрагентДебитор;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода контрагента-кредитора
//
Процедура КонтрагентКредиторПриИзменении(Элемент)
	
	ИзменяетсяКонтрагент = НЕ КонтрагентКредитор = СтарыеЗначенияРеквизитов.КонтрагентКредитор;
	
	Если НЕ ИзменяетсяКонтрагент Тогда
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		
		ИзменятьКонтрагента = ОчиститьСтрокиПоВидуЗадолженности(Перечисления.ВидыЗадолженности.Кредиторская);
		Если ИзменятьКонтрагента Тогда
			СтарыеЗначенияРеквизитов.Вставить("КонтрагентКредитор", КонтрагентКредитор);
		Иначе
			КонтрагентКредитор = СтарыеЗначенияРеквизитов.КонтрагентКредитор;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) И ДоговорКонтрагента.Владелец <> КонтрагентКредитор Тогда
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договора для переноса долга
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, 
		КонтрагентКредитор, ДоговорКонтрагента, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода корр счета.
//
Процедура КоррСчетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Отражать в БУ.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	УстановитьВидимость();

	Если СуммыДолга.Количество() > 0 
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете) Тогда
		
		ЗаполнитьСчетаУчетаВТабЧасти(СуммыДолга, ОтражатьВБухгалтерскомУчете);
		
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Отражать в НУ.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля Субконто1
//
Процедура Субконто1НачалоВыбора(Элемент, СтандартнаяОбработка)

	БухгалтерскийУчет.ОбработатьВыборПервогоСубконто(Элемент, СтандартнаяОбработка, Организация);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Субконто1
//
Процедура Субконто1ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДт2");
	СписокСубконто.Добавить("СубконтоДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля Субконто2
//
Процедура Субконто2ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДт1");
	СписокСубконто.Добавить("СубконтоДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СубконтоДт1
//
Процедура СубконтоДт1ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДт2");
	СписокСубконто.Добавить("СубконтоДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СубконтоДт2
//
Процедура СубконтоДт2ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДт1");
	СписокСубконто.Добавить("СубконтоДт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СубконтоКт1
//
Процедура СубконтоКт1ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоКт2");
	СписокСубконто.Добавить("СубконтоКт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СубконтоКт2
//
Процедура СубконтоКт2ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоКт1");
	СписокСубконто.Добавить("СубконтоКт3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СубконтоДтНУ1
//
Процедура СубконтоДтНУ1ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДтНУ2");
	СписокСубконто.Добавить("СубконтоДтНУ3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СубконтоДтНУ2
//
Процедура СубконтоДтНУ2ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоДтНУ1");
	СписокСубконто.Добавить("СубконтоДтНУ3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СубконтоКтНУ1
//
Процедура СубконтоКтНУ1ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоКтНУ2");
	СписокСубконто.Добавить("СубконтоКтНУ3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля СубконтоКтНУ2
//
Процедура СубконтоКтНУ2ПриИзменении(Элемент)
	
	СписокСубконто = Новый СписокЗначений();
	СписокСубконто.Добавить("СубконтоКтНУ1");
	СписокСубконто.Добавить("СубконтоКтНУ3");
	
	БухгалтерскийУчет.ОбработатьИзменениеСубконто(Элемент, ЭтотОбъект, СписокСубконто);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ СУММЫДОЛГА

// Процедура - обработчик события "ПриИзменении" поля ввода договора.
//
Процедура СуммыДолгаДоговорКонтрагентаПриИзменении(Элемент)
	
	ТекДанные  = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	
	ТекДанные.Сделка                        = Неопределено;
	ТекДанные.ДокументРасчетовСКонтрагентом = Неопределено; 
	
	ТекДоговор = ТекДанные.ДоговорКонтрагента;
	ТекВалюта  = ТекДоговор.ВалютаВзаиморасчетов;
	
	Если ТекВалюта <> ВалютаДокумента Тогда
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета ИЛИ НЕ ТекДоговор.РасчетыВУсловныхЕдиницах Тогда
			Предупреждение("Нужно выбрать договор с валютой " + ВалютаДокумента
			+ ?(ВалютаДокумента <> мВалютаРегламентированногоУчета, "!", "
			|или договор в условных единицах!"));
			ТекДанные.ДоговорКонтрагента = Неопределено;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДоговор) Тогда
		
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекВалюта, Дата);
		ТекДанные.КурсВзаиморасчетов = СтруктураКурса.Курс;
		ТекДанные.КратностьВзаиморасчетов = СтруктураКурса.Кратность;

		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ТекДанные, ОтражатьВБухгалтерскомУчете);

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода договора.
//
Процедура СуммыДолгаУменьшениеДоговорКонтрагентаПриИзменении(Элемент)

	ТекДанные  = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	
	ТекДанные.Сделка                        = Неопределено;
	ТекДанные.ДокументРасчетовСКонтрагентом = Неопределено; 
	
	ТекДоговор = ТекДанные.ДоговорКонтрагента;
	ТекВалюта  = ТекДоговор.ВалютаВзаиморасчетов;
	
	Если ТекВалюта <> ВалютаДокумента Тогда
		Если ВалютаДокумента <> мВалютаРегламентированногоУчета ИЛИ НЕ ТекДоговор.РасчетыВУсловныхЕдиницах Тогда
			Предупреждение("Нужно выбрать договор с валютой " + ВалютаДокумента
			+ ?(ВалютаДокумента <> мВалютаРегламентированногоУчета, "!", "
			|или договор в условных единицах!"));
			ТекДанные.ДоговорКонтрагента = Неопределено;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДоговор) Тогда
		
		СтруктураКурса = МодульВалютногоУчета.ПолучитьКурсВалюты(ТекВалюта, Дата);
		ТекДанные.КурсВзаиморасчетов = СтруктураКурса.Курс;
		ТекДанные.КратностьВзаиморасчетов = СтруктураКурса.Кратность;

		ЗаполнитьСчетаУчетаВСтрокеТабЧасти(ТекДанные, ОтражатьВБухгалтерскомУчете);

	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода сделки.
//
Процедура СуммыДолгаСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ДоговорКонтрагента = ЭлементыФормы.СуммыДолга.ТекущиеДанные.ДоговорКонтрагента;

	СтандартнаяОбработка = Ложь;

	// Без договора сделку выбирать не будем.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		ЭлементыФормы.СуммыДолга.ТекущаяКолонка = ЭлементыФормы.СуммыДолга.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	КонецЕсли; 

	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;

	//Список документов зависит от вида договора.
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя, Метаданные.Документы["ЗаказПокупателя"].Представление());
			
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			
		Иначе
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			
		КонецЕсли;

	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
			
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			
		Иначе
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			
		КонецЕсли;
		
	Иначе // Прочее

		СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя,        Метаданные.Документы["ЗаказПоставщику"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());

	КонецЕсли;

	// Пользователь выбирает тип расчетного документа
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат; // пользователь отказался от выбора
	КонецЕсли;

	ТипДокументаСделки = ВыбранныйЭлемент.Значение;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,Элемент,);
	
	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // СуммыДолгаСделкаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода сделки.
//
Процедура СуммыДолгаУменьшениеСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ДоговорКонтрагента = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные.ДоговорКонтрагента;

	СтандартнаяОбработка = Ложь;

	// Без договора сделку выбирать не будем.
	Если НЕ ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		Предупреждение("Не выбран договор контрагента!");
		ЭлементыФормы.СуммыДолгаУменьшение.ТекущаяКолонка = ЭлементыФормы.СуммыДолгаУменьшение.Колонки.Найти("ДоговорКонтрагента");
		Возврат;
	КонецЕсли; 

	// Заполним возможный список типов документов, которые могут быть расчетными.
	СписокТипов = Новый СписокЗначений;

	//Список документов зависит от вида договора.
	Если ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем Тогда
		
		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя, Метаданные.Документы["ЗаказПокупателя"].Представление());
			
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			
		Иначе
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());
			
		КонецЕсли;

	ИначеЕсли ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда

		Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
			
		ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			
		Иначе
			
			СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя       , Метаданные.Документы["ЗаказПоставщику"]       .Представление());
			СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
			
		КонецЕсли;
		
	Иначе // Прочее

		СписокТипов.Добавить( Метаданные.Документы["ЗаказПокупателя"].Имя,        Метаданные.Документы["ЗаказПокупателя"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["ЗаказПоставщику"].Имя,        Метаданные.Документы["ЗаказПоставщику"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПоставщика"].Имя, Метаданные.Документы["СчетНаОплатуПоставщика"].Представление());
		СписокТипов.Добавить( Метаданные.Документы["СчетНаОплатуПокупателю"].Имя, Метаданные.Документы["СчетНаОплатуПокупателю"].Представление());

	КонецЕсли;

	// Пользователь выбирает тип расчетного документа
	ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов, Элемент);

	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат; // пользователь отказался от выбора
	КонецЕсли;

	ТипДокументаСделки = ВыбранныйЭлемент.Значение;

	// В качестве владельца формы выбора устанавливаем данный элемент,
	// чтобы выбранное значение было присвоено стандартно.
	ФормаВыбора = Документы[ТипДокументаСделки].ПолучитьФормуВыбора(,Элемент,);
	
	// Отфильруем список документов по договору.
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Значение = ДоговорКонтрагента;
	ФормаВыбора.Отбор.ДокументыПоДоговоруКонтрагента.Использование = Истина;
	
	ФормаВыбора.Открыть();

КонецПроцедуры // СуммыДолгаУменьшениеСделкаНачалоВыбора()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части
// "СуммыДолга". Формирует данные в колонке "Валюта" и устанавливает, при необходимости
// автоотметку незаполенного для поля "Сделка
//
Процедура СуммыДолгаПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если ЭлементыФормы.СуммыДолга.Колонки.Валюта.Видимость	Тогда
		ОформлениеСтроки.Ячейки.Валюта.ОтображатьТекст = Истина;
		ОформлениеСтроки.Ячейки.Валюта.Текст = ДанныеСтроки.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;

	Если (ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам 
	  ИЛИ ДанныеСтроки.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
	   И НЕ ЗначениеЗаполнено(ДанныеСтроки.Сделка) Тогда
		ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = Истина;
	Иначе
		ОформлениеСтроки.Ячейки.Сделка.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
    	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаРасчетов.
//
Процедура СуммыДолгаСчетУчетаРасчетовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетУчетаАвансов.
//
Процедура СуммыДолгаСчетУчетаАвансовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договора.
Процедура СуммыДолгаДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;

	Если ВидОперации <> Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		Контрагент = КонтрагентДебитор;
	Иначе
		Если ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская Тогда
			Контрагент = КонтрагентКредитор;
		Иначе
			Контрагент = КонтрагентДебитор;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗначениеОтбора", ВалютаДокумента);
		СтруктураПараметров.Вставить("ВалютаВзаиморасчетов", СтруктураОтбора);
	КонецЕсли;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ТекДанные.ДоговорКонтрагента,
	                                        Неопределено, СтандартнаяОбработка, СтруктураПараметров);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода договора.
Процедура СуммыДолгаУменьшениеДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	ТекДанные = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;

	Контрагент = КонтрагентДебитор;
	
	СтруктураПараметров = Новый Структура;
	
	Если ВалютаДокумента <> мВалютаРегламентированногоУчета Тогда
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("ЗначениеОтбора", ВалютаДокумента);
		СтруктураПараметров.Вставить("ВалютаВзаиморасчетов", СтруктураОтбора);
	КонецЕсли;

	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ТекДанные.ДоговорКонтрагента,
	                                        Неопределено, СтандартнаяОбработка, СтруктураПараметров);
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

Процедура ВывестиНадписи() 
	
	ТабСумм         = СуммыДолга.Выгрузить();
	ТабКредиторская = ТабСумм.Скопировать();
	Сч = 0;
	Пока Сч < ТабКредиторская.Количество() Цикл
		СтрокаТаблицы = ТабКредиторская.Получить(Сч);
		Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Кредиторская Тогда
			ТабКредиторская.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	ТабДебиторская = ТабСумм.Скопировать();
	Сч = 0;
	Пока Сч < ТабДебиторская.Количество() Цикл
		СтрокаТаблицы = ТабДебиторская.Получить(Сч);
		Если СтрокаТаблицы.ВидЗадолженности <> Перечисления.ВидыЗадолженности.Дебиторская Тогда
			ТабДебиторская.Удалить(СтрокаТаблицы);
		Иначе 
			Сч = Сч + 1;
		КонецЕсли; 
	КонецЦикла;
	
	Если ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
		СуммаКред = ТабКредиторская.Итог("СуммаРегл");
		СуммаДеб  = ТабДебиторская.Итог("СуммаРегл");
	Иначе
		СуммаКред = ТабКредиторская.Итог("Сумма");
		СуммаДеб  = ТабДебиторская.Итог("Сумма");
	КонецЕсли;
	Разница = СуммаДеб - СуммаКред;
	
	ЭлементыФормы.НадписьДебиторскаяЗадолженность.Заголовок
							= "Дебиторская задолженность: " + Формат(СуммаДеб, "ЧЦ=15;ЧДЦ=2") + " " + Строка(ВалютаДокумента);
	ЭлементыФормы.НадписьКредиторскаяЗадолженность.Заголовок
							= "Кредиторская задолженность: " + Формат(СуммаКред, "ЧЦ=15;ЧДЦ=2") + " " + Строка(ВалютаДокумента);
							
	Если Разница = 0 И ВидОперации = Перечисления.ВидыОперацийКорректировкаДолга.ПроведениеВзаимозачета Тогда
		ЭлементыФормы.НадписьВзаимозачет.Заголовок = "ВЗАИМОЗАЧЕТ";
	Иначе
		ЭлементыФормы.НадписьВзаимозачет.Заголовок
							= "Разница: " + Формат(Разница, "ЧЦ=15;ЧДЦ=2") + " " + Строка(ВалютаДокумента);
	КонецЕсли;

КонецПроцедуры

Процедура ИспользоватьВспомогательныйСчетПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

/// Процедура - обработчик события "ПриИзменении" поля ввода корр счета.
//
Процедура СчетДтПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	СубконтоДт1, ЭлементыФормы.СубконтоДт1,
	СубконтоДт2, ЭлементыФормы.СубконтоДт2,
	СубконтоДт3, ЭлементыФормы.СубконтоДт3);
	
	УстановитьВидимость();
	
КонецПроцедуры

/// Процедура - обработчик события "ПриИзменении" поля ввода корр счета.
//
Процедура СчетКтПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	СубконтоКт1, ЭлементыФормы.СубконтоКт1,
	СубконтоКт2, ЭлементыФормы.СубконтоКт2,
	СубконтоКт3, ЭлементыФормы.СубконтоКт3);
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода корр счета.
//
Процедура ВспомогательныйСчетПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	СубконтоДт1, ЭлементыФормы.Субконто1,
	СубконтоДт2, ЭлементыФормы.Субконто2,
	СубконтоДт3, ЭлементыФормы.Субконто3);
	
	УстановитьВидимость();
	
КонецПроцедуры

/// Процедура - обработчик события "ПриИзменении" поля ввода корр счета.
//
Процедура СчетДтНУПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	СубконтоДтНУ1, ЭлементыФормы.СубконтоДтНУ1,
	СубконтоДтНУ2, ЭлементыФормы.СубконтоДтНУ2,
	СубконтоДтНУ3, ЭлементыФормы.СубконтоДтНУ3);
	
	УстановитьВидимость();
	
КонецПроцедуры

/// Процедура - обработчик события "ПриИзменении" поля ввода корр счета.
//
Процедура СчетКтНУПриИзменении(Элемент)
	
	РаботаСДиалогами.ПриВыбореСчетаВТабличномПоле(Элемент.Значение,
	СубконтоКтНУ1, ЭлементыФормы.СубконтоКтНУ1,
	СубконтоКтНУ2, ЭлементыФормы.СубконтоКтНУ2,
	СубконтоКтНУ3, ЭлементыФормы.СубконтоКтНУ3);
	
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" строки табличного поля
// "СуммыДолга"
//
Процедура СуммыДолгаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" строки табличного поля
// "СуммыДолгаУменьшение"
//
Процедура СуммыДолгаУменьшениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Дебиторская;
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

Процедура СуммыДолгаКурсВзаиморасчетовПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД);
КонецПроцедуры

Процедура СуммыДолгаСуммаПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД, Ложь);
КонецПроцедуры

Процедура СуммыДолгаСуммаРеглПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	ПересчитатьКурсПоСтроке(ТД);
КонецПроцедуры

Процедура СуммыДолгаДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	СтрокаВидаДвижения = ?(ТекДанные.ВидЗадолженности = Перечисления.ВидыЗадолженности.Кредиторская, "Приход", "Расход");
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ТекДанные.ДоговорКонтрагента,
														ТекДанные.Сделка, СтандартнаяОбработка, СтрокаВидаДвижения);

КонецПроцедуры

Процедура СуммыДолгаКратностьВзаиморасчетовПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолга.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД);

КонецПроцедуры

Процедура СуммыДолгаУменьшениеСуммаПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД, Ложь);

КонецПроцедуры

Процедура СуммыДолгаУменьшениеКурсВзаиморасчетовПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД);

КонецПроцедуры

Процедура СуммыДолгаУменьшениеКратностьВзаиморасчетовПриИзменении(Элемент)
	ТД = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	ПересчитатьСуммуПоСтроке(ТД);

КонецПроцедуры

Процедура СуммыДолгаУменьшениеДокументРасчетовСКонтрагентомНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекДанные = ЭлементыФормы.СуммыДолгаУменьшение.ТекущиеДанные;
	// Задолженность всегда дебиторская - вид движения "Расход"
	РаботаСДиалогами.НачалоВыбораЗначенияДокументаРасчетовСКонтрагентом(ДокументОбъект, ЭтаФорма, Элемент, ТекДанные.ДоговорКонтрагента,
														ТекДанные.Сделка, СтандартнаяОбработка, "Расход");

КонецПроцедуры

Процедура ПересчитатьСуммуПоСтроке(СтрокаДанных,ПересчетВалютнойСуммы = Ложь)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаДоговора = СтрокаДанных.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	Если ПересчетВалютнойСуммы Тогда
		СтрокаДанных.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДанных.СуммаРегл,
				             мВалютаРегламентированногоУчета, ВалютаДоговора,
					         1, СтрокаДанных.КурсВзаиморасчетов,
					         1,СтрокаДанных.КратностьВзаиморасчетов);
	Иначе
		СтрокаДанных.СуммаРегл = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(СтрокаДанных.Сумма,
					             ВалютаДоговора,мВалютаРегламентированногоУчета,
					             СтрокаДанных.КурсВзаиморасчетов, 1, 
					             СтрокаДанных.КратностьВзаиморасчетов, 1);
	КонецЕсли;  

КонецПроцедуры

Процедура ПересчитатьКурсПоСтроке(СтрокаДанных)

	Если СтрокаДанных = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаДанных.КурсВзаиморасчетов = ?(СтрокаДанных.Сумма = 0, СтрокаДанных.КурсВзаиморасчетов, СтрокаДанных.СуммаРегл / СтрокаДанных.Сумма * СтрокаДанных.КратностьВзаиморасчетов);

КонецПроцедуры

Процедура ВалютаДокументаПриИзменении(Элемент)
	
	ВалютаНеИзменилась = ВалютаДокумента = СтарыеЗначенияРеквизитов.ВалютаДокумента;
	Если ВалютаНеИзменилась Тогда
		
		СтруктураВалюта    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
		КурсДокумента      = СтруктураВалюта.Курс;
		КратностьДокумента = СтруктураВалюта.Кратность;
		Возврат;
		
	КонецЕсли;
	
	СтрокиКУдалению = Новый Массив;
	ЭтоВалютныйДокумент = ВалютаДокумента <> мВалютаРегламентированногоУчета;
	Для каждого СтрокаДолга Из СуммыДолга Цикл
	
		Если СтрокаДолга.ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаДокумента 
			И (ЭтоВалютныйДокумент ИЛИ НЕ СтрокаДолга.ДоговорКонтрагента.РасчетыВУсловныхЕдиницах) Тогда
			СтрокиКУдалению.Добавить(СтрокаДолга);
		КонецЕсли;
	
	КонецЦикла; 
	
	Если СтрокиКУдалению.Количество() > 0 Тогда
	
		ТекстВопроса = "Строки с несоответствующей валютой взаиморасчетов договора 
		               |будут удалены. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		
		ОставитьСтаруюВалюту = Ответ <> КодВозвратаДиалога.Да;
		Если ОставитьСтаруюВалюту Тогда
			ВалютаДокумента = СтарыеЗначенияРеквизитов.ВалютаДокумента;
			Возврат;
		КонецЕсли;
		
		Для каждого УдаляемаяСтрока Из СтрокиКУдалению Цикл
			СуммыДолга.Удалить(УдаляемаяСтрока);
		КонецЦикла;
	
	КонецЕсли;
	
	СтруктураВалюта    = МодульВалютногоУчета.ПолучитьКурсВалюты(ВалютаДокумента, Дата);
	КурсДокумента      = СтруктураВалюта.Курс;
	КратностьДокумента = СтруктураВалюта.Кратность;
	
	СтарыеЗначенияРеквизитов.Вставить("ВалютаДокумента", ВалютаДокумента);
	
	ВывестиНадписи();
	
КонецПроцедуры

Процедура СуммыДолгаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ВывестиНадписи();
	
КонецПроцедуры

Процедура СуммыДолгаПослеУдаления(Элемент)
	
	ВывестиНадписи();
	
КонецПроцедуры

Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	УстановитьВидимость();
	
КонецПроцедуры

СтарыеЗначенияРеквизитов = Новый Структура;