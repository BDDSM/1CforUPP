// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;
Перем мОтражатьВРегламентированномУчете;
// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;
// Хранит валюту взаиморасчетов, установленную в текущем договоре взаиморасчетов,
// используется для определения необходимости пересчетов при изменении договора.
Перем мТекущаяВалютаВзаиморасчетов; 
// Хранит настройку учетной политики "Начислять НДС по отгрузке без перехода права собственности"
Перем мВыписыватьСчетФактуру;

// Хранит текущий договор контрагента
// используется для восстановления старого договора в случае некорректного выбора нового
Перем мТекущийДоговорКонтрагента; 

// Хранит список видов договоров, доступных для данного документа
Перем мСписокВидовДоговоров; 

Перем мСтароеЗначениеСделки;
Перем мВедениеВзаиморасчетов;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ


// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
		Если ЗначениеЗаполнено(ДокументОтгрузки) Тогда
			//Признаки отражения в учете должны совпадать с документом отгрузки
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДокументОтгрузки, "ОтражатьВУправленческомУчете,ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете");
			Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
				ОтражатьВУправленческомУчете = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	Если не ЗначениеЗаполнено(ДокументОтгрузки) Тогда
    	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);
    КонецЕсли;
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	мТекущаяВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;
	мВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
	мВыписыватьСчетФактуру = ПолучитьВыписыватьСчетФактуру();

	ЗаполнитьТекстПроСчетФактуру();
    УстановитьВидимость();

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы
//
Процедура ПослеЗаписи()
	ЗаполнитьТекстПроСчетФактуру();

    // Проверка заполнения счета-фактуры, введенного на основании документа
	ПроверитьЗаполнениеСчетаФактуры();
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
	КонтрагентПриИзменении(Элемент);

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры
 
// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)
	
	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

// Функция возвращает значение параметра учетной политики "Начислять НДС по отгрузке без перехода права собственности"
// на дату документа отгрузки
Функция ПолучитьВыписыватьСчетФактуру()
	
	Если НЕ ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Отказ = Ложь;
	УчетнаяПолитика = ОбщегоНазначения.ПолучитьПараметрыУчетнойПолитикиРегл(ДокументОтгрузки.Дата, Организация, Истина);
	ОтгрузкаОС = (ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС"));
	
	Если Отказ Тогда
		Возврат Истина;
	Иначе
		Если ОтгрузкаОС Тогда
			Возврат Не УчетнаяПолитика.НачислятьНДСПриПередачеНедвижимости Или УчетнаяПолитика.УСН;
		Иначе
			Возврат Не УчетнаяПолитика.НачислятьНДСПоОтгрузке Или УчетнаяПолитика.УСН;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Заполняет текст про счет-фактуру в форме документа.
//   Вызывается из обработчика ПриОткрытии этой формы и из обработчика ПослеЗаписи
// формы счета-фактуры.
//
// Параметры:
//  Нет.
//
Процедура ЗаполнитьТекстПроСчетФактуру() Экспорт
	
	// Установка видимости счета-фактуры
	ЭлементыФормы.ГиперссылкаСчетФактура.Заголовок 		= ?(ЗначениеЗаполнено(ДокументОтгрузки) И мВыписыватьСчетФактуру
															, РаботаСДиалогами.ПолучитьТекстСчетаФактуры(УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный"))
															, "Счет-фактура не требуется");
	ЭлементыФормы.ГиперссылкаСчетФактура.ГиперСсылка 	= ЗначениеЗаполнено(ДокументОтгрузки) И мВыписыватьСчетФактуру;
	
КонецПроцедуры // ЗаполнитьТекстПроСчетФактуру()

Процедура УстановитьВидимость()
	ТолькоПросмотрЭлементовФормы = ЗначениеЗаполнено(ДокументОтгрузки);
	ЭлементыФормы.ДоговорКонтрагента.ТолькоПросмотр 			= ТолькоПросмотрЭлементовФормы;
	ЭлементыФормы.Контрагент.ТолькоПросмотр 					= ТолькоПросмотрЭлементовФормы;
	ЭлементыФормы.Организация.ТолькоПросмотр 					= ТолькоПросмотрЭлементовФормы;
	ЭлементыФормы.Сделка.Доступность 							= не ТолькоПросмотрЭлементовФормы И
										(мВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказам ИЛИ
										мВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
										;
	Если не ТолькоПросмотрЭлементовФормы Тогда
		ОтгрузкаОС = (ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС"));
		ДоступностьУпрУчета = НЕ ОтгрузкаОС;
		ЭлементыФормы.ОтражатьВУправленческомУчете.Доступность 		= ДоступностьУпрУчета;
    	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);
	Иначе
		ЭлементыФормы.ОтражатьВБухгалтерскомУчете.Доступность 		= ложь;
		ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность 			= ложь;
		ЭлементыФормы.ОтражатьВУправленческомУчете.Доступность 		= ложь;
    КонецЕсли;

КонецПроцедуры

Процедура ПроверитьЗаполнениеСчетаФактуры()
	
	СчетФактура = УчетНДС.НайтиПодчиненныйСчетФактуру(Ссылка, "СчетФактураВыданный");
	Если СчетФактура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СчетФактура = СчетФактура.ПолучитьОбъект();	
	
	СообщениеПользователю = "";
	Если СчетФактура.ПроверитьДатуСчетаФактуры(СообщениеПользователю) Тогда
		
		ОтветНаВопрос = Вопрос(СообщениеПользователю + Символы.ПС + "Изменить дату счета-фактуры на дату документа?", 
								РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
		Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
			СчетФактура.Дата = Дата;
			Попытка
				СчетФактура.Заблокировать();
				СчетФактура.Записать();
			Исключение
				Сообщить("Невозможно записать документ <" + СчетФактура + ">");
			КонецПопытки;
			ЗаполнитьТекстПроСчетФактуру();
		КонецЕсли;
		
	Иначе
		
		Если СообщениеПользователю <> "" Тогда
			
			ОтветНаВопрос = Вопрос(СообщениеПользователю + Символы.ПС + "
																		|Внесите изменения в счет-фактуру вручную
																		|Открыть форму счета-фактуры?", 
									РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			Если ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
				РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");
			КонецЕсли;

		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновлениеОтображения()
	ОбновитьПодвал();
КонецПроцедуры

// Процедура формирует текст в информационной надписи об итогах документа
//
// Параметры:
//  Нет.
//
Процедура ОбновитьПодвал()

	Если НЕ ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		Возврат;
	КонецЕсли;
	
	// При изменении данных обновим суммы в подвале.
	НазваниеТЧ = ?(ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС"), "ОС", "Товары");
	
	ЭлементыФормы.Всего.Значение    = ОбщегоНазначения.ФорматСумм(УчетНДС.ПолучитьСуммуДокументаСНДС(ДокументОтгрузки, НазваниеТЧ));
	ЭлементыФормы.ВсегоНДС.Значение = ОбщегоНазначения.ФорматСумм(ДокументОтгрузки[НазваниеТЧ].Итог("СуммаНДС"));
    
	Если НЕ ЗначениеЗаполнено(ДокументОтгрузки.ВалютаДокумента) Тогда
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (<>):";
	Иначе
		ЭлементыФормы.НадписьВсего.Заголовок = "Всего (" + СокрЛП(ВалютаДокумента) +"):";
	КонецЕсли;

	Если ДокументОтгрузки.СуммаВключаетНДС Тогда
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (в т. ч.):";
	Иначе
		ЭлементыФормы.НадписьВсегоНДС.Заголовок = "НДС (сверху):";
	КонецЕсли;

КонецПроцедуры // ОбновитьПодвал()

Процедура КонтрагентПриИзменении(Элемент)
	// Выполняем общие действия для всех документов при изменении Контрагент.
	ЗаполнениеДокументов.ПриИзмененииЗначенияКонтрагента(ЭтотОбъект);

	// Могли поменять договор.
	ПриИзмененииДоговора();

КонецПроцедуры

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
Процедура ПриИзмененииДоговора()
	Если мТекущийДоговорКонтрагента <> ДоговорКонтрагента Тогда
		
		ВестиПоДокументамРасчетовСКонтрагентом = ОбщегоНазначения.ПолучитьЗначениеРеквизита(
			ДоговорКонтрагента, "ВестиПоДокументамРасчетовСКонтрагентом");
		
		Если ВестиПоДокументамРасчетовСКонтрагентом = Истина Тогда
			ДоговорКонтрагента = мТекущийДоговорКонтрагента;
			ОбщегоНазначения.СообщитьОбОшибке(
				"Не поддерживается отгрузка без перехода права собственности для договоров, по которым ведутся взаиморасчеты по документам расчетов с контрагентами");
			Возврат;
		КонецЕсли;
		
		мТекущийДоговорКонтрагента = ДоговорКонтрагента;
		ЗаполнениеДокументов.УстановитьТипСделки(ЭтотОбъект, Истина);
		мВедениеВзаиморасчетов = ДоговорКонтрагента.ВедениеВзаиморасчетов;
		УстановитьВидимость();
	КонецЕсли;
КонецПроцедуры // ПриИзмененииДоговора()

Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ПриИзмененииДоговора();
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода ДоговорКонтрагента
//
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)

	// сохраним договор контрагента, возможно понадобится к нему вернуться
	мТекущийДоговорКонтрагента = ДоговорКонтрагента;
	
	СтруктураДополнительныхПараметров = Новый Структура();
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ВидСравненияОтбора", ВидСравнения.НеРавно);
	СтруктураОтбора.Вставить("ЗначениеОтбора",     Истина);
	СтруктураДополнительныхПараметров.Вставить("ВестиПоДокументамРасчетовСКонтрагентом", СтруктураОтбора);
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, Контрагент, ДоговорКонтрагента,
		                                        мСписокВидовДоговоров, СтандартнаяОбработка, СтруктураДополнительныхПараметров);

КонецПроцедуры // ДоговорКонтрагентаНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода "ДокументОтгрузки"
//
Процедура ДокументОтгрузкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если Элемент.Значение = Неопределено Тогда
        Возврат;
    КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	// В качестве владельца формы выбора устанавливаем данный элемент формы, чтобы выбранное
	// значение было присвоено стандартно.
	ОтрузкаОС = Ложь;
	
	Если (НЕ мИспользоватьРасширеннуюАналитику ИЛИ Дата < мДатаНачалаИспользованияРасширеннойАналитики)
		И ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Предупреждение("Реализация отгруженных товаров может выполняться 
			|только при использовании расширенной аналитики учета затрат.");
		
		Элемент.Значение = Неопределено;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		ФормаВыбора = Документы.РеализацияТоваровУслуг.ПолучитьФормуВыбора(, Элемент,);
	ИначеЕсли ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС") Тогда
        ФормаВыбора = Документы.ПередачаОС.ПолучитьФормуВыбора(, Элемент,);
        ОтрузкаОС = Истина;
    КонецЕсли;
				
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбора.Отбор["Организация"].Значение      = Организация;
		ФормаВыбора.Отбор["Организация"].Использование = Истина;
		
		ФормаВыбора.ЭлементыФормы.ДокументСписок.НастройкаОтбора.Организация.Доступность = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		ФормаВыбора.Отбор["Контрагент"].Значение      = Контрагент;
		ФормаВыбора.Отбор["Контрагент"].Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДоговорКонтрагента) Тогда
		ФормаВыбора.Отбор["ДоговорКонтрагента"].Значение      = ДоговорКонтрагента;
		ФормаВыбора.Отбор["ДоговорКонтрагента"].Использование = Истина;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Сделка) Тогда
		ФормаВыбора.Отбор["Сделка"].Значение      = Сделка;
		ФормаВыбора.Отбор["Сделка"].Использование = Истина;
	КонецЕсли;

	Если ОтрузкаОС Тогда
		ФормаВыбора.Отбор["ПравоСобственностиПереходитПослеГосРегистрации"].Значение = Истина;
		ФормаВыбора.Отбор["ПравоСобственностиПереходитПослеГосРегистрации"].Использование = Истина;
	Иначе
		ФормаВыбора.Отбор["ВидОперации"].Значение      = Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности;
		ФормаВыбора.Отбор["ВидОперации"].Использование = Истина;
	КонецЕсли;
	
	ФормаВыбора.РежимВыбора = Истина;
	ФормаВыбора.Открыть();

КонецПроцедуры // ДокументОтгрузкиНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода "ДокументОтгрузки"
//
Процедура ДокументОтгрузкиПриИзменении(Элемент)

	ОбновитьПодвал();
	Если ЗначениеЗаполнено(ДокументОтгрузки) Тогда
		ЭтотОбъект.Заполнить(ДокументОтгрузки);
	КонецЕсли;
	ПриИзмененииДоговора();
	мВыписыватьСчетФактуру = ПолучитьВыписыватьСчетФактуру();

	ЗаполнитьТекстПроСчетФактуру();
	
	ОтгрузкаОС = (ТипЗнч(ДокументОтгрузки) = Тип("ДокументСсылка.ПередачаОС"));
	ОтражатьВУправленческомУчете = ?(ОтгрузкаОС, Ложь, ОтражатьВУправленческомУчете);
	УстановитьВидимость();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" поля ввода "ДокументОтгрузки"
//
Процедура ДокументОтгрузкиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если (НЕ мИспользоватьРасширеннуюАналитику ИЛИ Дата < мДатаНачалаИспользованияРасширеннойАналитики)
		И ВыбранноеЗначение = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
		Предупреждение("Реализация отгруженных товаров может выполняться 
			|только при использовании расширенной аналитики учета затрат.");
		
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода "Сделка".
//
Процедура СделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мСтароеЗначениеСделки = Сделка;
	СтруктураОтбора = Новый Структура;
	Если мВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		СтрокаТипа = "СчетНаОплатуПокупателю";
	Иначе
		СтрокаТипа = "ЗаказПокупателя"; 	
		СтруктураОтбора.Вставить( "ВидОперации", Перечисления.ВидыОперацийЗаказПокупателя.ПродажаКомиссия);
	КонецЕсли;
	   
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ДоговорКонтрагента, Сделка, СтандартнаяОбработка, 
						 "Приход", СтрокаТипа,СтруктураОтбора);		

КонецПроцедуры // СделкаНачалоВыбора()

Процедура СделкаПриИзменении(Элемент)
	Если мСтароеЗначениеСделки <> Сделка Тогда
		мСтароеЗначениеСделки = Сделка;
	КонецЕсли;
КонецПроцедуры


// Процедура - обработчик события "Нажатие" надписи о счете-фактуре.
//   Процедура выполняет либо ввод нового счета-фактуры, либо открывает
// форму уже существующего счета-фактуры, если тот был введен на основании
// текущего документа.
//
Процедура ГиперссылкаСчетФактураНажатие(Элемент)

	РаботаСДиалогами.ВвестиСчетФактуру(ЭтотОбъект, ЭтаФорма, "СчетФактураВыданный");

КонецПроцедуры // ГиперссылкаСчетФактураНажатие()

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		Если ТипЗнч(ПараметрОснование) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
			Если ПараметрОснование.ВидОперации <> Перечисления.ВидыОперацийРеализацияТоваров.ОтгрузкаБезПереходаПраваСобственности Тогда
				Предупреждение("Документ ""Реализация отгруженных товаров"" оформляется только на основании документа с видом операции ""Отгрузка без перехода права собственности"".");
				Отказ = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ДатаПриИзменении(Элемент)
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	РаботаСДиалогами.ПриИзмененииЗначенияДатыДокумента(ЭтотОбъект, мВалютаРегламентированногоУчета);
   	Если НачалоМесяца(мТекущаяДатаДокумента) <> НачалоМесяца(Дата) Тогда
		Если не РазрешенаОтгрузкаБезПереходаПраваСобственности() Тогда
			Предупреждение("Реализация отгруженных товаров может выполняться 
			|только при использовании расширенной аналитики учета затрат.
			|Документ с указанной датой не будет проведен.");
		КонецЕсли;

		мВыписыватьСчетФактуру = ПолучитьВыписыватьСчетФактуру();
		ЗаполнитьТекстПроСчетФактуру();
	КонецЕсли;

	мТекущаяДатаДокумента = Дата; 

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в бухгалтерском учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = Элемент.Значение;
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");


КонецПроцедуры // ОтражатьВРегламентированномУчетеПриИзменении()



мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мСписокВидовДоговоров = Новый СписокЗначений;
мСписокВидовДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);