////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

Перем мСведенияОВидахРасчета;
Перем мСписокНедоступныхРасчетов;

Перем мВалютаУправленческогоУчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Удержания,ЭлементыФормы.КоманднаяПанельУдержания);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры


// Процедура устанавливает значение показателей начилсения для общих показателей в целом по компании и в целом по подразделению
//
Процедура ПоказательПриИзменении(Значение, парамПоказатель, ТабличнаяЧасть)
	
	ВидРасчета = ЭлементыФормы[ТабличнаяЧасть].ТекущаяСтрока.ВидРасчета;
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
	КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
	
	Если КоличествоПоказателей > (парамПоказатель - 1) Тогда
		Показатель  = СведенияОВидеРасчета["Показатель" + парамПоказатель];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы[ТабличнаяЧасть].ТекущаяСтрока.ВидРасчета.ПроизвольнаяФормулаРасчета Тогда
		Если Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Тогда
			РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаСхемыМотивации(мСведенияОВидахРасчета, Начисления.ВыгрузитьКолонку("ВидРасчета"));
			Для Каждого СтрокаНачисления Из Начисления Цикл
				
				СведенияОВидеРасчета = мСведенияОВидахРасчета[СтрокаНачисления.ВидРасчета];
				КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
				
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
					Если ПоказательВР.Предопределенный Тогда 
						Продолжить;
					КонецЕсли;
					Если ПоказательВР = Показатель Тогда
						СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры //ПриИзмененииПоказателяНачисления

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы.
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("ВидРасчета");

	// Установить ограничение - изменять видимость колонок для табличной части 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Удержания.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Начисления.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));
	
	ЕстьВалютныеПоказатели =  глЗначениеПеременной("глЕстьВалютныеПоказатели");
	
	Для Сч = 1 По 6 Цикл
		ЭлементыФормы.Начисления.Колонки["Валюта"+Сч].Видимость = ЕстьВалютныеПоказатели;
		ЭлементыФормы.Удержания.Колонки["Валюта"+Сч].Видимость = ЕстьВалютныеПоказатели;
	КонецЦикла;
	
	// Установить активный реквизит.
	ТекущийЭлементУстановлен = Ложь;
	Если ПараметрыОткрытия <> Неопределено Тогда
		ИмяАктивногоЭлемента = Неопределено;
		Если ПараметрыОткрытия.Свойство("АктивныйЭлемент", ИмяАктивногоЭлемента) Тогда
			Если ЭлементыФормы.Найти(ИмяАктивногоЭлемента) <> Неопределено Тогда
				ТекущийЭлемент = ЭлементыФормы[ИмяАктивногоЭлемента];
				ТекущийЭлементУстановлен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ТекущийЭлементУстановлен И НЕ РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Начисления;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
	// оповестим журналы о записи нового управленческого документа
	Оповестить("ЗаписанНовыйДокументУправленческогоУчета", Ответственный, Ссылка);
	
	Оповестить("ОбновитьСписокПлановыхНачисленийУдержанийКомпании", ФизическиеЛица.ВыгрузитьКолонку("ФизическоеЛицо"));

КонецПроцедуры

Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда          
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ИсполнитьПодготовленныйЗапрос" Тогда
			
			ЗапросАвтоЗаполнения = ЗначениеВыбора.Запрос;
			ЗапросАвтоЗаполнения.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
			ЗапросАвтоЗаполнения.Выполнить();
			
			Начисления.Очистить();
			Удержания.Очистить();
			
			ЗаполнениеПоСхемамМотивации("Начисления", Начисления, Дата, ЗапросАвтоЗаполнения);
			ЗаполнениеПоСхемамМотивации("Удержания", Удержания, Дата, ЗапросАвтоЗаполнения);
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если (Начисления.Количество() > 0) ИЛИ (Удержания.Количество() > 0) Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, "Работники", , Подразделение, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

// Процедура - обработчик события "НачалоВыбора" поля ввода "Работник"
// Процедура обеспечивает подбор работников из справочника ФизЛиц при вводе наименования ФизЛица.
Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст);

КонецПроцедуры // РаботникАвтоПодборТекста

// Процедура - обработчик события "НачалоВыбора" поля ввода "Работник"
// Процедура обеспечивает подбор работников из справочника ФизЛиц при вводе наименования ФизЛица.
Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение);

КонецПроцедуры // РаботникОкончаниеВводаТекста

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Начисления

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
Процедура НачисленияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета, Истина);
	
	ОформлениеСтроки.Ячейки.Период.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.ДатаДействияКонец.ТолькоПросмотр = ДанныеСтроки.Действие <> Перечисления.ВидыДействияСНачислением.Начать;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" ТЧ
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущаяСтрока.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Элемент.ТекущаяСтрока.Показатель1 = 0;
		Элемент.ТекущаяСтрока.Показатель2 = 0;
		Элемент.ТекущаяСтрока.Показатель3 = 0;
		Элемент.ТекущаяСтрока.Показатель4 = 0;
		Элемент.ТекущаяСтрока.Показатель5 = 0;
		Элемент.ТекущаяСтрока.Показатель6 = 0;		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой выбора в.р.
//
Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовРасчетаСсылка.УправленческиеНачисления") Тогда
		Элемент.ТекущаяСтрока.ВидРасчета = ВыбранноеЗначение;		
		РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Начисления",ВыбранноеЗначение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных"
Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Начисления, ОформленияСтрок);
	
КонецПроцедуры

Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияНачисленияПриАктивизацииСтроки", 0.05, Истина);
	
КонецПроцедуры // НачисленияПриАктивизацииСтроки

Процедура ОбработчикОжиданияНачисленияПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Начисления, мСведенияОВидахРасчета);

КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ реквизитов ТАБЛИЧНОЙ ЧАСТИ Начисления 

Процедура НачисленияСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение, , , Подразделение);
	
КонецПроцедуры

Процедура НачисленияДействиеПриИзменении(Элемент)
	
	Если Элемент.Значение <> Перечисления.ВидыДействияСНачислением.Начать Тогда
		ЭлементыФормы.Начисления.ТекущиеДанные.ДатаДействияКонец = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода вида расчета
//
Процедура НачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УправленческиеНачисления.ПолучитьФормуВыбора("ФормаВыбора", ЭлементыФормы.Начисления, "дляДокументаПриемНаРаботу");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = мСписокНедоступныхРасчетов;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета
//
Процедура НачисленияВидРасчетаПриИзменении(Элемент)

	РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Начисления",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);
	
КонецПроцедуры

Процедура НачисленияПоказатель1ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 1,"Начисления")

КонецПроцедуры

Процедура НачисленияПоказатель2ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 2,"Начисления")

КонецПроцедуры

Процедура НачисленияПоказатель3ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 3,"Начисления")
	
КонецПроцедуры

Процедура НачисленияПоказатель4ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 4,"Начисления")
	
КонецПроцедуры

Процедура НачисленияПоказатель5ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 5,"Начисления")

КонецПроцедуры

Процедура НачисленияПоказатель6ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 6,"Начисления")
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Удержания

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
Процедура УдержанияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчета, Ложь);
	
	ОформлениеСтроки.Ячейки.Период.Видимость = Ложь;
	ОформлениеСтроки.Ячейки.ДатаДействияКонец.ТолькоПросмотр = ДанныеСтроки.Действие <> Перечисления.ВидыДействияСНачислением.Начать

КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой выбора в.р.
//
Процедура УдержанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ПланВидовРасчетаСсылка.УправленческиеУдержания") Тогда	
		Элемент.ТекущаяСтрока.ВидРасчета = ВыбранноеЗначение;
		РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Удержания",ВыбранноеЗначение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);		
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияУдержанияПриАктивизацииСтроки", 0.05, Истина);
	
КонецПроцедуры // УдержанияПриАктивизацииСтроки

Процедура ОбработчикОжиданияУдержанияПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Удержания, мСведенияОВидахРасчета);

КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ реквизитов ТАБЛИЧНОЙ ЧАСТИ Удержания

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура УдержанияФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение, , , Подразделение);
	
КонецПроцедуры

Процедура УдержанияФизлицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура УдержанияФизлицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст, , Истина);
	
КонецПроцедуры

Процедура УдержанияФизлицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение, , Истина);
	
КонецПроцедуры


Процедура УдержанияФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияДействиеПриИзменении(Элемент)
	
	Если Элемент.Значение <> Перечисления.ВидыДействияСНачислением.Начать Тогда
		ЭлементыФормы.Удержания.ТекущиеДанные.ДатаДействияКонец = Дата(1,1,1);
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УправленческиеУдержания.ПолучитьФормуВыбора("ФормаВыбора", ЭлементыФормы.Удержания, "дляДокументаВводСведений");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = ПланыВидовРасчета.УправленческиеУдержания.УдержаноПоБухгалтерии;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;
	
	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура УдержанияВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогамиЗК.ПриИзмененииВидаРасчета("Удержания",Элемент.Значение, ЭлементыФормы, мСведенияОВидахРасчета, мВалютаУправленческогоУчета);		
	
КонецПроцедуры

Процедура УдержанияПоказатель1ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 1,"Удержания")

КонецПроцедуры

Процедура УдержанияПоказатель2ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 2,"Удержания");

КонецПроцедуры

Процедура УдержанияПоказатель3ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 3,"Удержания");

КонецПроцедуры

Процедура УдержанияПоказатель4ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 4,"Удержания");

КонецПроцедуры

Процедура УдержанияПоказатель5ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 5,"Удержания");
	
КонецПроцедуры

Процедура УдержанияПоказатель6ПриИзменении(Элемент)

	ПоказательПриИзменении(Элемент.Значение, 6,"Удержания");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаУправленческогоУчета  = Константы.ВалютаУправленческогоУчета.Получить();

мСведенияОВидахРасчета = Новый Соответствие;

мСписокНедоступныхРасчетов = Новый СписокЗначений;
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерии);
мСписокНедоступныхРасчетов.Добавить(ПланыВидовРасчета.УправленческиеНачисления.НачисленоПоБухгалтерииСдельно);