////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит "Результат" текущей строки
Перем мСтарыйРезультат;

//Хранит ссылку на физлицо, для  формирования имени кнопки расчета по работнику
Перем мСтароеФизлицо;

//для формирования имен кнопок
Перем мКнопкаРассчитатьРаботника;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

Перем мСведенияОВидахРасчета;
Перем мРеквизитыПремии;

// Механизм исправлений
Перем мДокументыИсправление;
Перем мДокументСторнирование;
Перем мСотрудникиИсправление;
Перем мМенюИсправление;
Перем мКнопкаИсправлениеТекущийСотрудник;
Перем мКнопкаИсправлениеВесьДокумент;
Перем мКнопкаИсправлениеСписокСотрудников;
Перем мКнопкаОтменаИсправление;
Перем мТекущийСотрудник;

Перем ПодразделенияСотрудников;

Перем мРежимЗаписи;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура УстановитьВидимостьИНазваниеКолонокРазмера()
	
	Если мРеквизитыПремии.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
		
		Для СчПоказателей = 1 По 6 Цикл
			ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].Видимость = Ложь;
		КонецЦикла;
	Иначе
		
		СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета, "РазовыеНачисленияИУдержания");
		
		Для СчПоказателей = 1 По 6 Цикл
			
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Или СчПоказателей = 1 Тогда
				
				ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
				
				// размеры показателя будут доступны только для видимых показателей
				ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				Если ВидимостьПоказателя Тогда
					ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].ТекстШапки = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"];
					ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].ТолькоПросмотр = (СведенияОВидеРасчета["Показатель" + СчПоказателей + "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически);
					ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].ЭлементУправления.Формат = "ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"];
					ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].Формат = "ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"];
				КонецЕсли;
				
			Иначе
				// настроим видимость ячеек
				ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей].Видимость = Ложь;
			КонецЕсли;
			
		КонецЦикла;

	КонецЕсли;
КонецПроцедуры //УстановитьВидимостьИНазваниеКолонокРазмера

// устанавливает значение показателей начилсения для общих показателей в целом по компании и в целом по подразделению
//
Процедура ПоказательПриИзменении(Значение, парамПоказатель,ТабличнаяЧасть)
	
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
	КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
	
	Если КоличествоПоказателей > (парамПоказатель - 1) Тогда
		Показатель  = СведенияОВидеРасчета["Показатель" + парамПоказатель];
	Иначе
		Возврат;
	КонецЕсли;
	Если ВидРасчета.ПроизвольнаяФормулаРасчета Тогда
		Если Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Тогда
			Для Каждого СтрокаНачисления Из Начисления Цикл
				
				ВидРасчета = СтрокаНачисления.ВидРасчета;
				СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
				КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
					Если ПоказательВР.Предопределенный Тогда 
						Продолжить;
					КонецЕсли;
					Если ПоказательВР = Показатель Тогда
						СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры //ПоказательПриИзменении

Процедура ЗаполнитьЗначенияПоказателей()
	
	Сотрудники = Начисления.ВыгрузитьКолонку("Сотрудник");
	
	ЗначенияПоказателей = ЗаполнениеДокументовЗК.ПоказателиНачисленияУдержания(Сотрудники, мГоловнаяОрганизация, ВидРасчета, ПериодРегистрации);
	
	Для Каждого СтрокаТабличнойЧасти Из Начисления Цикл
		НайденныеСтроки = ЗначенияПоказателей.НайтиСтроки(Новый Структура("Сотрудник", СтрокаТабличнойЧасти.Сотрудник));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, НайденныеСтроки[0]);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция получает подразделения каждого сотрудника
//
Функция ПолучитьПодразделенияСотрудников(Сотрудники)
	
	ПодразделенияСотрудников = Новый Соответствие;
	
	Запрос = Новый Запрос;
	
	ТекстЗапроса = 	
	"ВЫБРАТЬ
	|	РаботникиОрганизацийСрезПоследних.Сотрудник,
	|	РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И Сотрудник В (&Сотрудники)) КАК РаботникиОрганизацийСрезПоследних";	
	
	Запрос.Текст = ТекстЗапроса;
	
	Запрос.УстановитьПараметр("Организация",Организация);
	Запрос.УстановитьПараметр("Сотрудники",Сотрудники);
	Запрос.УстановитьПараметр("Дата",	ПериодРегистрации);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ПодразделенияСотрудников.Вставить(Выборка.Сотрудник, Выборка.ПодразделениеОрганизации);
		
	КонецЦикла;
	
	Возврат ПодразделенияСотрудников;
	
	
КонецФункции //ПолучитьПодразделенияСотрудников

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// В зависимости от видимости колонок подпись "Итого:" вписывается колонке, 
// предшествующей колонке Результат
//
// Параметры
//	Нет.
//
Процедура УстановитьТекстИтого()

	КоллекцияКолонок = ЭлементыФормы.Начисления.Колонки;
	ИндексКолонкиРезультат = КоллекцияКолонок.Индекс(КоллекцияКолонок.Результат);
	
	// очищаем текст подвала всех колонок
	Для каждого Колонка Из КоллекцияКолонок Цикл
		Если Колонка.Имя <> "Результат" Тогда
			Колонка.ТекстПодвала = ""
		КонецЕсли;
	КонецЦикла;
	
	// вписывать надпись будем только тогда, когда слева от результатов есть еще одна колонка
	Если ИндексКолонкиРезультат > 0 Тогда 
		ИндексПредшествующейКолонки = ИндексКолонкиРезультат - 1;
		// ищем предшествующую видимую колонку
		Пока ИндексПредшествующейКолонки >= 0 Цикл
			Колонка = КоллекцияКолонок.Получить(ИндексПредшествующейКолонки);
			Если Колонка.Видимость Тогда
				Прервать;
			КонецЕсли;
			ИндексПредшествующейКолонки = ИндексПредшествующейКолонки - 1;
		КонецЦикла;
		
		// вписывать надпись можем не в любую колонку, а только в некоторые
		Если ИндексПредшествующейКолонки >= 0 Тогда
			ИмяПредшествующейКолонки = Колонка.Имя;
			Если ИмяПредшествующейКолонки = "Авторасчет"
				Или ИмяПредшествующейКолонки = "Сотрудник"
				Или ИмяПредшествующейКолонки = "Показатель1" Тогда
					Колонка.ТекстПодвала = "Итого:"
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // УстановитьТекстИтого()

// Выставляет автоотметку незаполненного базового периода, если это требуется и
// переписывает название колонки в т.п.
//
// Параметры
//	ВидРасчета	- ссылка на в.р. из ПВР ДополнительныеНачисленияОрганизаций
//
Процедура УправлениеВнешнимВидомФормы(ПриОткрытии = Ложь)

	ЭтоПремияПроцентом = мРеквизитыПремии.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.Процентом;
	НеобходимБазовыйПериод = ЭтоПремияПроцентом Или ВидРасчета.ВидПремии = Перечисления.ВидыПремии.ГодоваяПремия;
	
	ЭлементыФормы.ДатаНачалаБП.АвтоОтметкаНезаполненного	= НеобходимБазовыйПериод;
	ЭлементыФормы.ДатаНачалаБП.ОтметкаНезаполненного		= ЭлементыФормы.ДатаНачалаБП.АвтоОтметкаНезаполненного И НЕ ЗначениеЗаполнено(ДатаНачалаБП);
	ЭлементыФормы.ДатаОкончанияБП.АвтоОтметкаНезаполненного	= НеобходимБазовыйПериод;
	ЭлементыФормы.ДатаОкончанияБП.ОтметкаНезаполненного		= ЭлементыФормы.ДатаОкончанияБП.АвтоОтметкаНезаполненного И НЕ ЗначениеЗаполнено(ДатаОкончанияБП);
	
	УстановитьВидимостьИНазваниеКолонокРазмера();
	УстановитьТекстИтого();
	
КонецПроцедуры // УправлениеВнешнимВидомФормы()

Процедура ПолучитьСотрудниковСИсправлениями()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ПремииРаботников.Сотрудник
	|ИЗ
	|	Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботников
	|ГДЕ
	|	ПремииРаботников.Ссылка В(&Исправления)
	|	И ПремииРаботников.Сторно";

	мСотрудникиИсправление = ПроведениеРасчетов.СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса, мДокументыИсправление);
	
КонецПроцедуры

Процедура ОбновитьТекущегоСотрудника()

	ТекущиеДанные	= ЭлементыФормы.Начисления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущийСотрудник = ТекущиеДанные.Сотрудник;
	Иначе
		ТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	ФИО = "";
	
	// Установим имя и доступность кнопки ТекущийСотрудник механизма исправлений
	Если ЭлементыФормы.ДополнительныеДействия.Кнопки.Найти("Исправить") <> Неопределено И мТекущийСотрудник <> ТекущийСотрудник Тогда
		ФИО = РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(ТекущийСотрудник),ТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник)
	КонецЕсли;
	
	// Установим имя кнопки РассчитатьРаботника 
	Если мКнопкаРассчитатьРаботника <> Неопределено И мТекущийСотрудник <> ТекущийСотрудник Тогда
		
		Если ЗначениеЗаполнено(ТекущийСотрудник) И ПустаяСтрока(ФИО) Тогда
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Сотрудник", ТекущийСотрудник);
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	СотрудникиОрганизаций.Наименование,
			|	СотрудникиОрганизаций.Физлицо.Пол КАК Пол
			|ИЗ
			|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
			|ГДЕ
			|	СотрудникиОрганизаций.Ссылка = &Сотрудник";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Наименование);
				
				ПозицияПервогоПробела = Найти(ФИО + " "," ");
				Фамилия  = Лев(ФИО,ПозицияПервогоПробела-1);
				Инициалы = Сред(ФИО,ПозицияПервогоПробела+1);
				
				РезультатСклонения = "";
				Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"),Фамилия, 2, Выборка.Пол, РезультатСклонения) Тогда
					ФИО = РезультатСклонения + " " + Инициалы;	
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ПустаяСтрока(ФИО) Тогда
			ФИО = "сотрудника";
		КонецЕсли;
		
		мКнопкаРассчитатьРаботника.Текст = "Рассчитать "+ФИО;
		
	КонецЕсли;
	
	мТекущийСотрудник = ТекущийСотрудник;

КонецПроцедуры

Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или Начисления.Количество() = 0 Или Не ЗначениеЗаполнено(ВидРасчета);
	
	ЗаполненСОшибками = Начисления.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	
	НеРассчитан = Начисления.НайтиСтроки(Новый Структура("Результат, Сторно",0,Ложь)).Количество() = Начисления.НайтиСтроки(Новый Структура("Сторно",Ложь)).Количество() И Начисления.НайтиСтроки(Новый Структура("Сторно",Ложь)).Количество() > 0;
	
	ОписаниеСостоянияДокумента = РаботаСДиалогамиЗК.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Не НеРассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован,Ложь,Ложь); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура УстановитьКнопкиИсправленияДокумента(ДокументИсправлен = Неопределено, ИсправленВесьДокумент = Неопределено, ДокументСторнирован = Неопределено)
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	КонецЕсли;
	Если ДокументСторнирован = Неопределено Тогда
		ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для каждого СтрокаТЧ Из Начисления Цикл
				ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументСторнирован Или ПериодРегистрации >= НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
		ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	Иначе 
		
		Кнопки = ЭлементыФормы.ДополнительныеДействия.Кнопки;
		Если Кнопки.Количество() = 0 Тогда
			МенюИсправить = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Подменю);
			ЗаполнитьЗначенияСвойств(МенюИсправить, мМенюИсправление);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеТекущийСотрудник.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеТекущийСотрудник);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеВесьДокумент.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеВесьДокумент);
			МенюИсправить.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеСписокСотрудников.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеСписокСотрудников);
		КонецЕсли;
		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность = Не ИсправленВесьДокумент;
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность = Не ДокументИсправлен;
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность = Не ИсправленВесьДокумент;
			
		Если Кнопки.Количество() = 1 И ДокументИсправлен Тогда
			Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаОтменаИсправление);
		ИначеЕсли Кнопки.Количество() > 1 И Не ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			Кнопки.Удалить(Кнопки.Разделитель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью элементов формы, зависящих от наличия перерассчитываемого документа
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из Начисления Цикл
			ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	Если ИсправленВесьДокумент Или ДокументСторнирован Тогда
		ТолькоПросмотр = Истина
	Иначе 
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	КонецЕсли;
	
	ТолькоПросмотр = ДокументИсправлен Или ДокументСторнирован;
	РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	
	УстановитьКнопкиИсправленияДокумента(ДокументИсправлен, ИсправленВесьДокумент, ДокументСторнирован);
	
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,"Открыть сторно-документ","Открыть исправления");
	
	Если Не ТолькоПросмотр Тогда
		МожноЗаполнять = Не ЭтоИсправление;
		СоставМенюЗаполнить = ЭлементыФормы.ДействияФормы.Кнопки.ПодменюЗаполнить.Кнопки;
		Для каждого Кнопка Из СоставМенюЗаполнить Цикл
			Если Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Разделитель Тогда
				Кнопка.Доступность = МожноЗаполнять
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.НадписьОрганизация.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
		Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
			ПолучитьСотрудниковСИсправлениями();
		КонецЕсли;
	Иначе
		РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, "Документ не заполнен", "СообщениеОПроблемах");
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");

	// Установить ограничение - изменять видимость колонок для табличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);

	// Активизируем табличную часть
	ТекущийЭлемент = ЭлементыФормы.Начисления;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	мКнопкаРассчитатьРаботника = ЭлементыФормы.ДействияФормы.Кнопки.Рассчитать.Кнопки.Найти("РассчитатьРаботника");
	
	// Исправление документов
	мМенюИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаИсправлениеТекущийСотрудник = мМенюИсправление.Кнопки.ТекущийСотрудник;
	мКнопкаИсправлениеВесьДокумент = мМенюИсправление.Кнопки.ВесьДокумент;
	мКнопкаИсправлениеСписокСотрудников = мМенюИсправление.Кнопки.СписокСотрудников;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормы();
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Начисления.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	мРеквизитыПремии = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(ВидРасчета,"СпособРасчета,ЧислоМесяцев");
	УправлениеВнешнимВидомФормы(Истина);
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Начисления;
	КонецЕсли;
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Реквизиты = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			ВременнаяТаблица = ЗначениеВыбора.Данные.Выгрузить();
			Если мРеквизитыПремии.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ПроизвольнаяФормула Тогда
				Если ВременнаяТаблица.Количество() > 0 Тогда
					Автозаполнение(ВременнаяТаблица);
				КонецЕсли;
			Иначе
				Если ЗначениеВыбора.Свойство("Реквизиты",Реквизиты) Тогда
					ИмяКолонки = "Показатель1";
					ВременнаяТаблица.Колонки.Добавить(ИмяКолонки);
					ВременнаяТаблица.ЗаполнитьЗначения(Реквизиты.Показатель1,ИмяКолонки);
					Если мРеквизитыПремии.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
						ВременнаяТаблица.Колонки.Добавить("Результат");
						ВременнаяТаблица.ЗаполнитьЗначения(Реквизиты.Показатель1,"Результат");
					КонецЕсли;
					
				КонецЕсли;
				ВременнаяТаблица.Колонки.Добавить("Авторасчет");
				ВременнаяТаблица.ЗаполнитьЗначения(Истина,"Авторасчет");
				Начисления.Загрузить(ВременнаяТаблица);
			КонецЕсли;
			
			
			//активизируем 1-ю строку
			мТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
			Если Начисления.Количество() > 0 Тогда
				ЭлементыФормы.Начисления.ТекущаяСтрока = Начисления.Получить(0);
			КонецЕсли;
			
			СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета, "РазовыеНачисленияИУдержания");
			
			Для Каждого СтрокаНачислений Из Начисления Цикл
				
				Для СчПоказателей = 1 По СведенияОВидеРасчета.КоличествоПоказателей Цикл
					Если СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно Тогда
						ЗначениеПоказателя = ЗначениеВыбора.Реквизиты["Показатель"+СчПоказателей];
						Если ЗначениеПоказателя <> 0 Тогда
							СтрокаНачислений["Показатель"+СчПоказателей] = ЗначениеПоказателя;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			ОбновитьТекущегоСотрудника();
	
		ИначеЕсли ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьДокументИсправление" Тогда
			РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора.ВыбранныеСотрудники);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьПоказателя" И Источник = ЭтаФорма Тогда
		
		ПодразделенияСотрудников = ПолучитьПодразделенияСотрудников(Начисления.ВыгрузитьКолонку("Сотрудник"));
		
		КурсыВалют = Новый Соответствие;
		
		СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета, "РазовыеНачисленияИУдержания");
		
		Если ДатаОкончанияБП = Дата('0001.01.01') Тогда
			ДатаОкончания = ПериодРегистрации;
		Иначе
			ДатаОкончания = НачалоМесяца(ДатаОкончанияБП);
		КонецЕсли;
		
		Для Каждого СтрокаПоказателей Из Параметр Цикл
			
			Валюта = СтрокаПоказателей.Валюта;
			Если КурсыВалют[Валюта] = Неопределено Тогда
				Курс = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ПериодРегистрации).Курс;
				Курс = ?(Курс = 0,1,Курс);
				Кратность = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ПериодРегистрации).Кратность;
				Кратность = ?(Кратность = 0,1,Кратность);
				КурсыВалют.Вставить(Валюта,Новый Структура("Курс,Кратность",Курс,Кратность));
			Иначе
				Курс = КурсыВалют[Валюта].Курс;
				Кратность = КурсыВалют[Валюта].Кратность;
			КонецЕсли;
			
			// По начислениям
			Для Каждого СтрокаДокумента Из Начисления Цикл
				
				Для СчПоказателей = 1 По СведенияОВидеРасчета["ФактКоличествоПоказателей"] Цикл
					Если СведенияОВидеРасчета["Показатель"+СчПоказателей] = СтрокаПоказателей.Показатель  И ДатаОкончания = СтрокаПоказателей.ПериодДействия Тогда
						ЗначениеПоказателя = Окр(СтрокаПоказателей.Значение * Курс / Кратность, 2);
						Если СтрокаДокумента["Показатель"+СчПоказателей] <> ЗначениеПоказателя Тогда
							ВидПоказателя = СведенияОВидеРасчета["Показатель"+СчПоказателей].ВидПоказателя;
							Если ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий 
							Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ДляВсехОрганизаций Тогда
								СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
								// Раз уж перезаполнили показатели, то и результат придется пересчитывать
								Если СтрокаДокумента.Авторасчет Тогда
									СтрокаДокумента.Результат = 0;
								КонецЕсли;
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
								Если СтрокаПоказателей.Подразделение = ПодразделенияСотрудников[СтрокаДокумента.Сотрудник] Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
									// Раз уж перезаполнили показатели, то и результат придется пересчитывать
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный Тогда
								Если СтрокаПоказателей.Сотрудник = СтрокаДокумента.Сотрудник Тогда
									СтрокаДокумента["Показатель"+СчПоказателей] = ЗначениеПоказателя;
									// Раз уж перезаполнили показатели, то и результат придется пересчитывать
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументыИсправление.Найти(Источник) = Неопределено Тогда 
						мДокументыИсправление.Добавить(Источник);
						ПолучитьСотрудниковСИсправлениями();
						ОбновитьДоступностьЭлементовФормы();
						РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ДанныеДокумента = Начисления.Выгрузить(,"Сотрудник");
		ДанныеДокумента.Свернуть("Сотрудник");
		МассивТиповДополнительноеНачисление = Новый Массив;
		МассивТиповДополнительноеНачисление.Добавить(Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций"));
		ДанныеДокумента.Колонки.Добавить("ВидРасчета", Новый ОписаниеТипов(МассивТиповДополнительноеНачисление));
		ДанныеДокумента.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
		ДанныеДокумента.ЗаполнитьЗначения(ВидРасчета, "ВидРасчета");
		ДанныеДокумента.ЗаполнитьЗначения(ДатаНачалаБП, "ДатаНачала");
		РаботаСДиалогамиЗК.ПроверитьДанныеОПериодическихВыплатах(Ссылка, Отказ, ПерерассчитываемыйДокумент, ДанныеДокумента);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура-обработчик события нажатия кнопки "Рассчитать"
//
Процедура ДействияФормыРассчитатьДокумент(Кнопка)
	
	
	Если мРеквизитыПремии.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
	
		РассчитатьПремию();
		ОбработкаКомментариев.ПоказатьСообщения();
		
		ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			мСтарыйРезультат = ТекущаяСтрока.Результат;
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ДействияФормыРассчитатьВсе()

// Процедура-обработчик события нажатия кнопки "Рассчитать"
//
Процедура ДействияФормыРассчитатьРаботника(Кнопка)
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные;
	
	Если ДанныеСтроки = Неопределено Тогда
		Предупреждение("Не выбран сотрудник для расчета!");
		Возврат;
	КонецЕсли;
	
	Если мРеквизитыПремии.СпособРасчета <> Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
		
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		
		РассчитатьПремию(ДанныеСтроки.Сотрудник);
		ОбработкаКомментариев.ПоказатьСообщения();
		
		ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			мСтарыйРезультат = ТекущаяСтрока.Результат;
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры // ДействияФормыРассчитатьРаботника()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если Начисления.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ВидРасчета) Тогда
		Если Начисления.Количество()>0 Тогда
			ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации), , Организация, , , ,"ПремииРаботниковОрганизаций", Новый Структура("ВидРасчета,ЗаполнятьПоказателиАвтоматически,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6",ВидРасчета,Истина, Начисления[0].Показатель1,Начисления[0].Показатель2,Начисления[0].Показатель3,Начисления[0].Показатель4,Начисления[0].Показатель5,Начисления[0].Показатель6), ПериодРегистрации, Истина, , , Истина);
		Иначе
			ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации), , Организация, , , ,"ПремииРаботниковОрганизаций", Новый Структура("ВидРасчета,ЗаполнятьПоказателиАвтоматически,Показатель1,Показатель2,Показатель3,Показатель4,Показатель5,Показатель6",ВидРасчета,Истина, 0), ПериодРегистрации, Истина, , , Истина);
		КонецЕсли;
	Иначе
		Предупреждение("Перед заполнением табличной части необходимо вид премии");
	КонецЕсли;
		
КонецПроцедуры // ДействияФормыЗаполнить()

// Процедура - вызывается при нажатии на кнопку "ВвестиПоказателиДляРасчета"
//
Процедура ДействияФормыВвестиПоказателиДляРасчета(Кнопка)
	
	Если ЭлементыФормы.Начисления.ТекущиеДанные = Неопределено Тогда
		ТекущийСотрудник	= Неопределено;
	Иначе
		ТекущийСотрудник	= ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник;
	КонецЕсли;

	Если Не ЗаполнитьПоказатели(ТекущийСотрудник, ЭтаФорма) Тогда
		Предупреждение("Для расчета сотрудников этого документа ввода показателей не требуется");
	КонецЕсли;

КонецПроцедуры

Процедура ДействиеСоздатьЗарплатаКВыплате(Кнопка)

	ЗарплатаКВыплатеОрганизацийСервис.СоздатьНаОсновании(ЭтаФорма, Ссылка, Ложь);
	
КонецПроцедуры // ДействияФормыБезНалогов()

Процедура ДействиеСоздатьЗарплатаКВыплатеВычеты(Кнопка)
	
	ЗарплатаКВыплатеОрганизацийСервис.СоздатьНаОсновании(ЭтаФорма, Ссылка, Истина);
	
КонецПроцедуры // ДействияФормыСНалогами()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	Если Не ЗначениеЗаполнено(мТекущийСотрудник) Тогда
		Предупреждение("Не выбран сотрудник для исправления расчетов!");
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);

КонецПроцедуры

Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	Если Проведен Тогда
		
		ТекстВопроса = "Для исправления необходимо записать документ. Продолжить?";
		Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
			Возврат;
		КонецЕсли;
		
		СписокСотрудников = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	ПремииРаботниковОрганизацийНачисления.Сотрудник,
		|	ПремииРаботниковОрганизацийНачисления.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	Документ.ПремииРаботниковОрганизаций.Начисления КАК ПремииРаботниковОрганизацийНачисления
		|ГДЕ
		|	ПремииРаботниковОрганизацийНачисления.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		Запрос.УстановитьПараметр("Ссылка",Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если мСотрудникиИсправление[Выборка.Сотрудник] = Неопределено Тогда
				СписокСотрудников.Добавить(Выборка.Сотрудник,Выборка.Наименование)
			КонецЕсли;
		КонецЦикла;
		
		Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, Ссылка);
		Форма.СписокСотрудников = СписокСотрудников;
		Форма.Заголовок = "Сотрудники документа Премии №" + Номер + " от " + Формат(Дата,"ДФ=dd.MM.yyyy");
		Форма.Открыть();
		
	Иначе
		Предупреждение("Исправить можно только проведенный документ!")
	КонецЕсли;
	
КонецПроцедуры

// Процедура отмены документов-исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
	ПолучитьСотрудниковСИсправлениями();
	ОбновитьДоступностьЭлементовФормы();
	РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
	Обновить();
	
КонецПроцедуры


// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельНачисленияПодбор(Кнопка)
	
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета, "РазовыеНачисленияИУдержания");
	
	МассивПоказателей = Новый Массив;
	
	Для СчПоказателей = 1 По 6 Цикл
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] И СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
			МассивПоказателей.Добавить("Показатель" + СчПоказателей);
		КонецЕсли;
	КонецЦикла;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизацииСПоказателями(Метаданные().ТабличныеЧасти.Начисления.Реквизиты, ЭлементыФормы, Ссылка, Дата, мГоловнаяОрганизация, Начисления, "Начисления", Ложь, "Показатель", МассивПоказателей);
	
КонецПроцедуры // КоманднаяПанельНачисленияПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	УстановитьТекстИтого();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

Процедура ВидРасчетаПриИзменении(Элемент)
	
	мРеквизитыПремии = ОбщегоНазначения.ПолучитьЗначенияРеквизитов(Элемент.Значение,"СпособРасчета,ЧислоМесяцев");
	ЧислоМесяцев = мРеквизитыПремии.ЧислоМесяцев;
	
	УправлениеВнешнимВидомФормы();
	
	// очистим лишние показатели
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Элемент.Значение, "РазовыеНачисленияИУдержания");
	Для СчПоказателей = 1 По 6 Цикл
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей] = 0;
			КонецЕсли;
		Иначе
			ЭлементыФормы.Начисления.Колонки["Показатель" + СчПоказателей] = 0;
		КонецЕсли;
	КонецЦикла;

	
	Если мРеквизитыПремии.СпособРасчета = Перечисления.СпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
		Возврат
	КонецЕсли;
	
	ЗаполнитьЗначенияПоказателей();
	
КонецПроцедуры

Процедура ВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	//Предложим для выбора список расчетов, относящихся только к премиям.
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаПриемНаРаботуВОрганизацию");
	СписокДляОтбора = Новый СписокЗначений;
	СписокДляОтбора.Добавить(Перечисления.ВидыПремии.Премия);
	СписокДляОтбора.Добавить(Перечисления.ВидыПремии.ГодоваяПремия);
	ФормаВыбораВидаРасчета.Отбор.ВидПремии.ВидСравнения	 = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.ВидПремии.Значение		 = СписокДляОтбора;
	ФормаВыбораВидаРасчета.Отбор.ВидПремии.Использование = ИСТИНА;
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение; 
	
	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры // ВидРасчетаНачалоВыбора()


Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ПоказатьИсправления(ЭтаФорма, Ссылка, мДокументыИсправление, мДокументСторнирование);
	
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Начисления

// Процедура - обработчик события "ПриАктивизацииСтроки"
//
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияНачисленияПриАктивизацииСтроки", 0.1, Истина);

КонецПроцедуры // НачисленияПриАктивизацииСтроки()

Процедура ОбработчикОжиданияНачисленияПриАктивизацииСтроки()
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ДанныеСтроки <> Неопределено Тогда
		
		мСтарыйРезультат = ДанныеСтроки.Результат;
		
	КонецЕсли;
	
	ОбновитьТекущегоСотрудника();
	МожноРедактироватьСтроку = (ДанныеСтроки = Неопределено Или Не ДанныеСтроки.Сторно) И мСотрудникиИсправление[мТекущийСотрудник] = Неопределено;
	ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	
КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		Отказ = Элемент.ТекущиеДанные.Сторно Или мСотрудникиИсправление[мТекущийСотрудник] <> Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Элемент.ТекущиеДанные.Сторно Или мСотрудникиИсправление[Элемент.ТекущиеДанные.Сотрудник] <> Неопределено	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
	КонецЕсли;
	
КонецПроцедуры // НачисленияПриНачалеРедактирования()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Начисления, ОформленияСтрок);
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Ячейки.Авторасчет.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если мСотрудникиИсправление[ДанныеСтроки.Сотрудник] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			Ячейки.Авторасчет.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			Ячейки.Авторасчет.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		ЯчейкаСКартинкой = Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
		
	КонецЦикла;
	
КонецПроцедуры // НачисленияПриПолученииДанных()

// Процедура - обработчик события "ПриОкончанииРедактирования" 
//
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если Не ОтменаРедактирования Тогда
		ОбновитьТекущегоСотрудника();
	КонецЕсли;
	
КонецПроцедуры // НачисленияПриОкончанииРедактирования()

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		Если Начисления.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Начисления.Добавить();
			СтрокаТабличнойЧасти.Сотрудник = ВыбранноеЗначение;
			СтрокаТабличнойЧасти.Физлицо = ВыбранноеЗначение.Физлицо;
			СтрокаТабличнойЧасти.Авторасчет = Истина;
		КонецЕсли;
		ЗаполнитьПоказателиСтроки(СтрокаТабличнойЧасти);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		ВыбранноеЗначение.ПараметрыПодбора.Вставить("Авторасчет",Истина);
		ПроцедурыУправленияПерсоналом.ОбработкаВыбораТабличнойЧастиСЗаполнениемПоказателейРасчета(ВыбранноеЗначение, Начисления);
		НоваяСтрока = Начисления[Начисления.Количество()-1];
		
		// Получаем значения показателей в учете (только не заполненных при подборе)
		СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета, "РазовыеНачисленияИУдержания");
		СтрокаПоказатели = "";
		Для СчПоказателей = 1 По 6 Цикл
			Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] 
				И СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] 
				И Не ЗначениеЗаполнено(НоваяСтрока["Показатель" + СчПоказателей]) Тогда
				Если Не ПустаяСтрока(СтрокаПоказатели) Тогда
					СтрокаПоказатели = СтрокаПоказатели + ",";
				КонецЕсли;
				СтрокаПоказатели = СтрокаПоказатели + "Показатель" + СчПоказателей;
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьПоказателиСтроки(НоваяСтрока, СтрокаПоказатели);
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Начисления

Процедура НачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.Начисления.ТекущиеДанные.Физлицо = Элемент.Значение.Физлицо;
	ЭлементыФормы.Начисления.ТекущиеДанные.Авторасчет = Истина;
	ЗаполнитьПоказателиСтроки(ЭлементыФормы.Начисления.ТекущиеДанные);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // НачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура НачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // НачисленияСотрудникАвтоПодборТекста()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура НачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // НачисленияСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля "Результат"
//
Процедура НачисленияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультат Тогда
		ЭлементыФормы.Начисления.ТекущиеДанные.Авторасчет = Ложь;
		мСтарыйРезультат = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры // НачисленияРезультатПриИзменении()

Процедура НачисленияПоказатель1ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 1,"Начисления");

КонецПроцедуры

Процедура НачисленияПоказатель2ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 2,"Начисления");
	
КонецПроцедуры

Процедура НачисленияПоказатель3ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 3,"Начисления");
	
КонецПроцедуры

Процедура НачисленияПоказатель4ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 4,"Начисления");
	
КонецПроцедуры

Процедура НачисленияПоказатель5ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 5,"Начисления");
	
КонецПроцедуры

Процедура НачисленияПоказатель6ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 6,"Начисления");
	
КонецПроцедуры

Процедура НачисленияСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ЗаполнитьПоказателиСтроки(ЭлементыФормы.Начисления.ТекущаяСтрока);
КонецПроцедуры




////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСведенияОВидахРасчета = Новый Соответствие;

мДокументыИсправление = Новый Массив;
мСотрудникиИсправление = Новый Соответствие;