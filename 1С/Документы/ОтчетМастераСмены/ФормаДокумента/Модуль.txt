// Для формы установлен неавтоматический порядок обхода в соответствии со следующей логикой:
// Сначала обходятся реквизиты левой колонки (дата, смена)
// Затем - реквизиты левой колоки
// Затем - панель с табличными полями

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мПараметрыСвязиСтрокТЧ	Экспорт; 	// Для создания новых КлючейСтроки для связи Выпуска и Параметров выпуска.

Перем мТекущаяДатаДокумента; 				// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера

Перем мСоставПараметровВыпуска; 			// Состав колонок, с помощью которых в поле Выпуск можно менять параметры выпуска.

Перем мКнопкиЗаполненияТЧ; 					// Хранит дерево кнопок подменю заполнение ТЧ

// Хранят колонки табличных полей
Перем мКолонкиВыпуск, мКолонкиТехнологическиеПараметры, мКолонкиРасходМатериалов;

// Для работы с торговым оборудованием
Перем мТерминалы;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Определяет смену исходя из реквизитов документа.
//
Процедура УстановитьСмену()
	
	//Предполагаем, что мастер смены в 1 день работает только одну смену.
	//Т.е. если уже есть документы за сегодня с этим бригадиром и эта смена не закрыта, 
	//то он продолжает работать в свою смену и номер смены возьмем из существующего документа.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ОтчетМастераСмены.Смена КАК Смена,
	|	ОтчетМастераСмены.ГраницаСмены КАК ГраницаСмены
	|ИЗ
	|	Документ.ОтчетМастераСмены КАК ОтчетМастераСмены
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ЗавершенныеСмены КАК ЗавершенныеСмены
	|		ПО ОтчетМастераСмены.Подразделение = ЗавершенныеСмены.Подразделение
	|ГДЕ
	|	ОтчетМастераСмены.Подразделение = &Подразделение
	|	И ОтчетМастераСмены.Проведен
	|	И ОтчетМастераСмены.Ответственный = &Ответственный
	|	И НАЧАЛОПЕРИОДА(ОтчетМастераСмены.ГраницаСмены, ДЕНЬ) = &Дата
	|	И ОтчетМастераСмены.ГраницаСмены > ЕСТЬNULL(ЗавершенныеСмены.ГраницаСмены, ДАТАВРЕМЯ(1, 1, 1))
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГраницаСмены УБЫВ,
	|	Смена"
	);
	Запрос.УстановитьПараметр("Подразделение", 	Подразделение);
	Запрос.УстановитьПараметр("Ответственный", 	Ответственный);
	Запрос.УстановитьПараметр("Дата", 			НачалоДня(ГраницаСмены));
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		// Смена с этим бригадиром еще не началась.
		// Попробуем определить смену из графика работы.
		СменаПоГрафику = ОперативныйУчетПроизводства.ПолучитьСменуПоГрафику(Ответственный.ФизЛицо, Дата);
		Если ЗначениеЗаполнено(СменаПоГрафику) Тогда
			Смена = СменаПоГрафику;
		КонецЕсли;
	Иначе
		Выборка = Результат.Выбрать();
		Выборка.Следующий(); // В выборке будет ровно 1 запись
		Если ЗначениеЗаполнено(Выборка.Смена) Тогда
			Смена = Выборка.Смена;
		КонецЕсли;
	КонецЕсли;
	
	ИзменениеСмены();
		
КонецПроцедуры

// Устанавливает актуальный текст в информационные надписи.
//
Процедура ВывестиИнформациюОСмене()
	
	ПредыдущаяСмена = ОперативныйУчетПроизводства.ОписаниеПредыдущейСмены(Подразделение, ГраницаСмены, Метаданные().Имя);
	
	Если ГраницаСмены = '0001-01-01' Тогда
		ПериодСмены	= "<Дата не задана>";
	ИначеЕсли Смена.Пустая() Тогда
		ПериодСмены	= "<Смена не задана>";
	Иначе
		ПериодСмены	= ОперативныйУчетПроизводства.ПредставлениеПериодаСмены(ГраницаСмены, Смена);
	КонецЕсли;
	
КонецПроцедуры

// Действия, выполняемые при изменении реквизита "Смена"
//
Процедура ИзменениеСмены()
	
	ГраницаСмены 	= ОперативныйУчетПроизводства.ПолучитьГраницуСменыПоДате(Дата, Смена);
	ВывестиИнформациюОСмене();
	
КонецПроцедуры

// В строке табличной части Выпуск устанавливает спецификацию по-умолчанию.
// 
// Параметры
//
//  СтрокаТабличнойЧасти - строка табличной части Выпуск, в которой нужно установить спецификацию
Процедура УстановитьСпецификациюВыпуска(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.Спецификация = УправлениеПроизводством.ОпределитьСпецификациюПоУмолчанию(СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, Дата, Подразделение);
	
КонецПроцедуры

// РАБОТА С ПАРАМЕТРАМИ ВЫПУСКА В КОЛОНКАХ

// В табличном поле "Выпуск" создает колонки для отображения и редактирования параметров выпуска.
// Будут созданы колонки для всех видов параметров.
Процедура СоздатьКолонкиПараметровВыпуска()
	
	мСоставПараметровВыпуска			= Новый ТаблицаЗначений();
	мСоставПараметровВыпуска.Колонки.Добавить("ИмяКолонки");
	мСоставПараметровВыпуска.Колонки.Добавить("Параметр");
	мСоставПараметровВыпуска.Колонки.Добавить("Представление");

	// Получим список всех возможных параметров
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВидыПараметровВыпускаПродукции.Ссылка,
	|	ВидыПараметровВыпускаПродукции.Наименование КАК Представление,
	|	ВидыПараметровВыпускаПродукции.ПометкаУдаления
	|ИЗ
	|	Справочник.ВидыПараметровВыпускаПродукции КАК ВидыПараметровВыпускаПродукции
	|ГДЕ
	|	(НЕ ВидыПараметровВыпускаПродукции.ЭтоГруппа)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Представление"
	);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		// помеченные на удаление параметры отображаем только если их значения заданы в документе
		Если НЕ Выборка.ПометкаУдаления 
			ИЛИ ПараметрыВыпуска.Найти(Выборка.Ссылка, "ВидПараметра") <> Неопределено Тогда 
		
			НоваяСтрока 				= мСоставПараметровВыпуска.Добавить();
			НоваяСтрока.Параметр 		= Выборка.Ссылка;
			НоваяСтрока.ИмяКолонки 		= "_Параметр"+Формат(мСоставПараметровВыпуска.Индекс(НоваяСтрока),"ЧГ=0");
			НоваяСтрока.Представление	= Выборка.Представление;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Сначала удалим все колонки с параметрами выпуска
	кк = ЭлементыФормы.Выпуск.Колонки.Количество();
	Для нк = 1 По кк Цикл
		Если Лев(ЭлементыФормы.Выпуск.Колонки[кк-нк].Имя, 9) = "_Параметр" Тогда
			ЭлементыФормы.Выпуск.Колонки.Удалить(кк-нк);
		КонецЕсли;
	КонецЦикла;
	
	// Теперь добавим колонки, как задано в таблице
	НомерПараметра = 1;
	Эталон = ЭлементыФормы.Выпуск.Колонки.ПараметрыВыпуска;
	ПозицияНовыхКолонок = ЭлементыФормы.Выпуск.Колонки.Индекс(Эталон);
	Для Каждого Параметр Из мСоставПараметровВыпуска Цикл
		
		НоваяКолонка 	= ЭлементыФормы.Выпуск.Колонки.Добавить(
			Параметр.ИмяКолонки,
			Параметр.Представление);
			
		// Позиция новых колонок по-умолчанию определяется позицией эталонной колонки
		ЭлементыФормы.Выпуск.Колонки.Сдвинуть(НоваяКолонка, ПозицияНовыхКолонок + НомерПараметра - ЭлементыФормы.Выпуск.Колонки.Количество());
		
		// Параметры колонки возьмем из эталона
		ЗаполнитьЗначенияСвойств(НоваяКолонка, Эталон,,"Имя,Данные,ТекстШапки,ИзменятьВидимость,ИзменятьНастройку");
		
		// Элемент управления
		НоваяКолонка.УстановитьЭлементУправления(ТипЗнч(Эталон.ЭлементУправления));
		ЗаполнитьЗначенияСвойств(НоваяКолонка.ЭлементУправления, Эталон.ЭлементУправления);
		НоваяКолонка.ЭлементУправления.УстановитьДействие("ПриИзменении", Новый Действие("ПриИзмененииЗначенияПараметраВыпуска"));
		
		НомерПараметра = НомерПараметра + 1;
		
	КонецЦикла;
	
КонецПроцедуры //СоздатьКолонкиПараметровВыпуска()

// В табличном поле "Выпуск" выводит значения параметров выпуска
// Вызывается при получении данных строк табличного поля
// В табличном поле должны быть созданы колонки методом СоздатьКолонкиПараметровВыпуска()
//
// Параметры
//	Ячейки  	- ОформлениеСтроки строки табличного поля, в которой выводятся данные
//	КлючСвязи 	- КлючСвязи строк табличных частей Выпуск и ПараметрыВыпуска
Процедура ПоказатьЗначенияПараметровВыпуска(Ячейки, КлючСвязи)
	
	Для Каждого Параметр Из мСоставПараметровВыпуска Цикл
		
		// Найдем этот параметр в ТЧ "ПараметрыВыпуска".
		СтруктураПоиска = Новый Структура("КлючСвязи,ВидПараметра", КлючСвязи, Параметр.Параметр);
		НайденныеСтроки = ПараметрыВыпуска.НайтиСтроки(СтруктураПоиска);
		
		// Отобразим текст в ячейке со значением найденного параметра.
		Если НайденныеСтроки.Количество() = 0 Тогда
			Ячейки[Параметр.ИмяКолонки].УстановитьТекст("");
		Иначе	
			Ячейки[Параметр.ИмяКолонки].УстановитьТекст(Формат(НайденныеСтроки[0].Значение, ЭлементыФормы.Выпуск.Колонки[Параметр.ИмяКолонки].Формат));
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Сохраняет между сеансами параметры колонок с параметрами выпуска в табличном поле "Выпуск"
// В табличном поле должны быть созданы колонки методом СоздатьКолонкиПараметровВыпуска()
// Платформой сохраняются не все параметры созданных динамически колонок.
Процедура СохранитьНастройкиКолонокПараметровВыпуска()
	
	СохраняемыеПараметры = "АвтоВысотаЯчейки,ВысотаЯчейки,Видимость,ИзменениеРазмера,Положение,Ширина";
	Настройки = мСоставПараметровВыпуска.Скопировать();
	Настройки.Колонки.Добавить("Параметры");
	Настройки.Колонки.Добавить("Порядок");// для упорядочивания таблицы
	Настройки.Колонки.Добавить("ИмяПредыдущейКолонки");// для восстановления порядка колонок
	
	Колонки = ЭлементыФормы.Выпуск.Колонки;
	
	Для Каждого ДанныеКолонки Из Настройки Цикл
		
		Колонка 				= Колонки[ДанныеКолонки.ИмяКолонки];
		Индекс					= Колонки.Индекс(Колонка);
		ДанныеКолонки.Порядок 	= Индекс;
		
		// определим предыдущую колонку
		Если Индекс = 0 Тогда
			ДанныеКолонки.ИмяПредыдущейКолонки = "";
		Иначе
			ДанныеКолонки.ИмяПредыдущейКолонки = Колонки[Индекс - 1].Имя;
		КонецЕсли;
		
		// сохраним параметры колонки
		ДанныеКолонки.Параметры = Новый Структура(СохраняемыеПараметры);
		ЗаполнитьЗначенияСвойств(ДанныеКолонки.Параметры, Колонка);
		
	КонецЦикла;
	
	Настройки.Сортировать("Порядок");
	Настройки.Колонки.Удалить("Порядок");// больше не понадобится
	
	СохранитьЗначение("Документ.ОтчетМастераСмены.ФормаДокумента.НастройкиКолонокПараметровВыпуска", Настройки);
	
КонецПроцедуры

// Восстанавливает сохраненные методом СохранитьНастройкиКолонокПараметровВыпуска() параметры колонок с параметрами выпуска.
//
Процедура ВосстановитьНастройкиКолонокПараметровВыпуска()
	
	Настройки  = ВосстановитьЗначение("Документ.ОтчетМастераСмены.ФормаДокумента.НастройкиКолонокПараметровВыпуска");
	
	Если ТипЗнч(Настройки) <> Тип("ТаблицаЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	Колонки = ЭлементыФормы.Выпуск.Колонки;
	
	Для Каждого ДанныеКолонки Из Настройки Цикл
		Колонка = Колонки.Найти(ДанныеКолонки.ИмяКолонки);
		Если Колонка<>Неопределено Тогда
			// установим в нужное место
			Если ПустаяСтрока(ДанныеКолонки.ИмяПредыдущейКолонки) Тогда
				// будет первой
				Колонки.Сдвинуть(Колонка, -Колонки.Индекс(Колонка));
			Иначе
				ПредыдущаяКолонка = Колонки.Найти(ДанныеКолонки.ИмяПредыдущейКолонки);
				Если ПредыдущаяКолонка <> Неопределено Тогда
					// будет после неё
					Колонки.Сдвинуть(Колонка, Колонки.Индекс(ПредыдущаяКолонка) - Колонки.Индекс(Колонка) + ?(Колонки.Индекс(ПредыдущаяКолонка) > Колонки.Индекс(Колонка),0,1));
				КонецЕсли;
			КонецЕсли;
			// восстановим остальные параметры
			ЗаполнитьЗначенияСвойств(Колонка, ДанныеКолонки.Параметры);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// В полях ввода параметров установливает значения параметров - для того, 
// чтобы при начале редактирования значения в поле ввода оно было заполнено значением в колонке
Процедура УстановитьЗначенияПараметровВыпускаВПоляхВвода(СтрокаТабличнойЧасти)
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
	Иначе
		КлючСвязи = Неопределено;
	КонецЕсли;

	Для Каждого Параметр Из мСоставПараметровВыпуска Цикл
		
		// Найдем этот параметр в ТЧ "ПараметрыВыпуска".
		СтруктураПоиска = Новый Структура("КлючСвязи,ВидПараметра", КлючСвязи, Параметр.Параметр);
		НайденныеСтроки = ПараметрыВыпуска.НайтиСтроки(СтруктураПоиска);
		
		// Установим значение параметра
		Если НайденныеСтроки.Количество()=0 Тогда
			ЭлементыФормы.Выпуск.Колонки[Параметр.ИмяКолонки].ЭлементУправления.Значение = 0;
		Иначе	
			ЭлементыФормы.Выпуск.Колонки[Параметр.ИмяКолонки].ЭлементУправления.Значение = НайденныеСтроки[0].Значение;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры	


//	УНИВЕРСАЛЬНЫЕ МЕХАНИЗМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях табличных полей документа, добавляет подключаемые обработки заполнения
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Выпуск,					ЭлементыФормы.КоманднаяПанельВыпуск.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ТехнологическиеПараметры,	ЭлементыФормы.КоманднаяПанельТехнологическиеПараметры);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасходМатериалов,			ЭлементыФормы.КоманднаяПанельРасходМатериалов.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

//ПОДБОР

// Функция формирует список запросов для передачи в форму подбора.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, для подбора в которую формируется список запросов.
//
// Возвращаемое значение:
//  Список значений - список запросов.
//
Функция СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть)

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", 	"По остаткам номенклатуры");
	
	Если ТабличнаяЧасть = РасходМатериалов Тогда
		
		СписокЗапросов.Добавить("ОстаткиПроизводство",  "По остаткам в производстве");
		СписокЗапросов.Добавить("Спецификации", 		"По спецификациям");
		
	КонецЕсли;

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	Если ТабличнаяЧасть 		= Выпуск Тогда
		Команда         		= "ПодборВТабличнуюЧастьВыпуск";
		ИмяТабличнойЧасти 		= "Выпуск";
		ЕстьСерия 				= Истина;
		ЕстьУслуги				= Истина;
 	ИначеЕсли ТабличнаяЧасть 	= РасходМатериалов Тогда
		Команда           		= "ПодборВТабличнуюЧастьРасходМатериалов";
		ИмяТабличнойЧасти 		= "РасходМатериалов";
		ЕстьСерия 				= Истина;
		ЕстьУслуги				= Ложь;
	КонецЕсли;

	СписокВидовПодбора 	= СформироватьСписокЗапросовДляПодбора(ТабличнаяЧасть);
	ПредставлениеДок 	= Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокВидовПодбора);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"         		, ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Подразделение"        		, Подразделение);
	СтруктураПараметровПодбора.Вставить("Склад"                		, Неопределено);// В документе не содержится склад, подбор по всем остаткам на доступных складах.
	СтруктураПараметровПодбора.Вставить("Организация"		   		, Неопределено);
	СтруктураПараметровПодбора.Вставить("ЕстьЦена"             		, Ложь);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"            		, ЕстьСерия);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"	   		, ЕстьУслуги);
	Если ЕстьУслуги Тогда
		СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику"	, Ложь);
	КонецЕсли;
	СтруктураПараметровПодбора.Вставить("Заголовок"					, "Подбор номенклатуры в документ " 
	+ ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора) Экспорт

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия;
	Перем Спецификация, Продукция, ХарактеристикаПродукции, КоличествоПродукции, ВидВоспроизводства;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("СпособЗаполненияЦен"		, СпособЗаполненияЦен);
	ЗначениеВыбора.Свойство("ВалютаЦены"         		, ВалютаЦены);
	ЗначениеВыбора.Свойство("Номенклатура"    			, Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения"			, ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      			, Количество);
	ЗначениеВыбора.Свойство("Цена"            			, Цена);
	ЗначениеВыбора.Свойство("Характеристика"  			, Характеристика);
	ЗначениеВыбора.Свойство("Серия"						, Серия);
	ЗначениеВыбора.Свойство("Спецификация"    			, Спецификация);
	ЗначениеВыбора.Свойство("Продукция"       			, Продукция);
	ЗначениеВыбора.Свойство("ХарактеристикаПродукции"	, ХарактеристикаПродукции);
	ЗначениеВыбора.Свойство("КоличествоПродукции"		, КоличествоПродукции);

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", 			ЕдиницаИзмерения);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", 	Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры",			Серия);
	Если  ТабличнаяЧасть = РасходМатериалов И ЗначениеЗаполнено(Спецификация) Тогда
		СтруктураОтбора.Вставить("ХарактеристикаПродукции", ХарактеристикаПродукции);
		СтруктураОтбора.Вставить("Продукция", 				Продукция);
		СтруктураОтбора.Вставить("Спецификация", 			Спецификация);
	КонецЕсли;

	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     			= Номенклатура;
		СтрокаТабличнойЧасти.Количество       			= Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 			= ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      			= СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры			= Серия;

		// Если при добавлении новой строки надо выполнять какие-либо специфические действия, то их надо добавить сюда.
		
		Если ТабличнаяЧасть = Выпуск Тогда
			
			УстановитьСпецификациюВыпуска(СтрокаТабличнойЧасти);
			
		КонецЕсли;
		
		Если ТабличнаяЧасть = РасходМатериалов И ЗначениеЗаполнено(Спецификация) Тогда 
			СтрокаТабличнойЧасти.Спецификация 				= Спецификация;
			СтрокаТабличнойЧасти.Продукция 					= Продукция;
			СтрокаТабличнойЧасти.ХарактеристикаПродукции 	= ХарактеристикаПродукции;
		КонецЕсли;
		
	КонецЕсли;
	
	// Если при изменении количества надо выполнять какие-либо действия, то их надо добавить сюда.

	Если ТабличнаяЧасть = Выпуск Тогда
		ИмяТабличногоПоля = "Выпуск";
	ИначеЕсли ТабличнаяЧасть = РасходМатериалов Тогда
		ИмяТабличногоПоля = "РасходМатериалов";
	КонецЕсли;
	
	ЭлементыФормы[ИмяТабличногоПоля].ТекущаяСтрока  = СтрокаТабличнойЧасти;
	ЭлементыФормы[ИмяТабличногоПоля].ТекущаяКолонка = ЭлементыФормы[ИмяТабличногоПоля].Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораПоСпецификации(ТабличнаяЧасть, ЗначениеВыбора)
	
	Перем Спецификация, Количество;
	
	ЗначениеВыбора.Свойство("Спецификация", Спецификация);
	ЗначениеВыбора.Свойство("Количество", 	Количество);
	
	Если ТипЗнч(Спецификация) <> Тип("СправочникСсылка.СпецификацииНоменклатуры") Тогда
		Возврат;
	КонецЕсли;
		
	Отбор = Новый Структура();
	
	// Заполним табличную часть "РасходМатериалов" всеми материалами по подобранной спецификации
	ИсходныеКомплектующие = УправлениеПроизводством.ПолучитьМатериалыПоСпецификации(Спецификация, Количество, Отбор, Дата, глЗначениеПеременной("ИспользоватьТолькоСборочныеСпецификации"));
	
	Если ИсходныеКомплектующие = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Строка Из ИсходныеКомплектующие Цикл
	
		СтруктураПодбора = Новый Структура();
		СтруктураПодбора.Вставить("Номенклатура",       		Строка.Номенклатура);
		СтруктураПодбора.Вставить("ЕдиницаИзмерения",   		Строка.ЕдиницаИзмерения);
		СтруктураПодбора.Вставить("Характеристика",     		Строка.ХарактеристикаНоменклатуры);
		СтруктураПодбора.Вставить("Серия",						Справочники.СерииНоменклатуры.ПустаяСсылка());
		СтруктураПодбора.Вставить("Количество",     			Строка.Количество);
		СтруктураПодбора.Вставить("Спецификация",       		Спецификация);
		
		Если ЗначениеЗаполнено(Спецификация)
	   		И Спецификация.ВидСпецификации = Перечисления.ВидыСпецификаций.Сборочная Тогда
        	СтруктураПодбора.Вставить("Продукция", 					Спецификация.ВыходныеИзделия[0].Номенклатура);
			СтруктураПодбора.Вставить("ХарактеристикаПродукции", 	Спецификация.ВыходныеИзделия[0].ХарактеристикаНоменклатуры);
        КонецЕсли;
		
		// Непосредственно заполнение делаем "обычной" процедурой
		ОбработкаПодбора(ТабличнаяЧасть, СтруктураПодбора);
		
	КонецЦикла;
	
КонецПроцедуры // ОбработкаПодбораПоСпецификации()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Обработчик события ПередОткрытием формы
// Создает динамические объекты на форме:
//  кнопки заполнения
//  колонки параметров выпуска
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда

		// Значение Даты еще не инициализировано
		Дата = ТекущаяДата();
		Если НачалоДня(Дата) <> РабочаяДата Тогда
			Дата = РабочаяДата;
		КонецЕсли;
		
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа", ПараметрОбъектКопирования);
		ГраницаСмены = ОперативныйУчетПроизводства.ПолучитьГраницуСменыПоДате(Дата, Смена);
		УстановитьСмену();
			
	КонецЕсли;
	
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоздатьКолонкиПараметровВыпуска();
	
КонецПроцедуры

// Обработчик события ПриОткрытии формы
// Заполняет данные нового документа значениями по-умолчанию.
// Настраивает форму.
Процедура ПриОткрытии()

	ПолучитьСерверТО().ПодключитьКлиента(ЭтаФорма);
	
	Если НЕ ЭтоНовый() Тогда
			
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
		
		// Проверим, а не относится ли этот документ к закрытой смене.
		// Для пользователей с полными правами не контролируем
		УстановитьПривилегированныйРежим(Истина);
		Если НЕ РольДоступна("ПолныеПрава")
			И
			ГраницаСмены <= РегистрыСведений.ЗавершенныеСмены.Получить(Новый Структура("Подразделение", Подразделение)).ГраницаСмены Тогда
			ТолькоПросмотр = Истина;
		КонецЕсли;
		УстановитьПривилегированныйРежим(Ложь);
		
	КонецЕсли;
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

	// Колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиВыпуск, СтруктураКолонок);
	
	// Эти поля для быстроты ввода пропускаются, но на конкретном предприятии их можно "открыть".
	ЭлементыФормы.Выпуск.Колонки.ЕдиницаИзмерения.	ПропускатьПриВводе = Истина;
	ЭлементыФормы.Выпуск.Колонки.НомерПартии.		ПропускатьПриВводе = Истина;
	ЭлементыФормы.Выпуск.Колонки.ВремяВыпуска.		ПропускатьПриВводе = Истина;
	
	// Обновим содержание информационных строк
	ВывестиИнформациюОСмене();
	
	// Запомним текущие значения реквизитов формы.
	мТекущаяДатаДокумента        = Дата;
	
	// Установим видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиВыпуск);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиВыпуск);
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиРасходМатериалов, 	Новый Структура("ХарактеристикаНоменклатуры, ХарактеристикаПродукции"));
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиРасходМатериалов, 			Новый Структура("СерияНоменклатуры,СерияПродукции"));

	ВосстановитьНастройкиКолонокПараметровВыпуска();
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма, Новый Структура("Дата, Подразделение, Смена, Ответственный"), ЭлементыФормы.Выпуск);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	//Динамически управляемые кнопки командных панелей
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	// Кнопка "Заполнение из ТСД"
	Если мТерминалы.Количество() = 0 Тогда
		КнопкиПанелиВыпуск = ЭлементыФормы.КоманднаяПанельВыпуск.Кнопки.ПодменюЗаполнить.Кнопки;
		КнопкаИзТерминалаСбораДанных = КнопкиПанелиВыпуск.Найти("ИзТерминалаСбораДанных");
		Если КнопкаИзТерминалаСбораДанных <> Неопределено Тогда
			КнопкиПанелиВыпуск.Удалить(КнопкиПанелиВыпуск.Индекс(КнопкаИзТерминалаСбораДанных));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Обработчик события ОбновлениеОтображения формы
// Выводит на заголовки закладок количество строк в табличных частях
//
Процедура ОбновлениеОтображения()

	ЭлементыФормы.Панель.Страницы.Выпуск.Заголовок     					= "Выпуск (" + Выпуск.Количество() + " поз.)";
	ЭлементыФормы.Панель.Страницы.ТехнологическиеПараметры.Заголовок    = "Технологические параметры (" + ТехнологическиеПараметры.Количество() + " поз.)";
	ЭлементыФормы.Панель.Страницы.РасходМатериалов.Заголовок     		= "Расход материалов (" + РасходМатериалов.Количество() + " поз.)";
	
КонецПроцедуры

// Обработчик события ОбработкаВыбора формы
// Обрабатывает передачу в форму результатов из формы подбора номенклатуры
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Перем Команда, Спецификация;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьВыпуск" Тогда
			ОбработкаПодбора(Выпуск, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьРасходМатериалов" Тогда
			ЗначениеВыбора.Свойство("Спецификация", Спецификация);
			Если Спецификация <> Неопределено Тогда
				ОбработкаПодбораПоСпецификации(РасходМатериалов, ЗначениеВыбора);
			Иначе
				ОбработкаПодбора(РасходМатериалов, ЗначениеВыбора);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Обработчик события ПередЗаписью формы
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// ОценкаПроизводительности
	ОценкаПроизводительностиКлиентСервер.НачатьЗамерВремени(ПредопределенноеЗначение("Перечисление.КлючевыеОперации.ПроведениеДокументаОтчетМастераСмены"));
	// Конец ОценкаПроизводительности
КонецПроцедуры

// Обработчик события ПослеЗаписи формы
// Настраивает диалог формы.
//
Процедура ПослеЗаписи()
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

// Обработчик события ПередЗакрытием формы
// Сохраняет настроенные пользователем свойства динамических колонок с параметрами выпуска
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	СохранитьНастройкиКолонокПараметровВыпуска();
	
КонецПроцедуры

// Обработчик события ПриЗакрытии формы
// Отключает форму от сервера торгового оборудования.
Процедура ПриЗакрытии()
	
	ПолучитьСерверТО().ОтключитьКлиента(ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

//	УНИВЕРСАЛЬНЫЕ МЕХАНИЗМЫ

// Обработчик нажатия на пункт "РедактироватьНомер" меню "Действия" командной панели "ДействияФормы"
//
// Назначается при вызове ДобавитьВМенюДействияКнопкуРедактированияНомера()
//
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

// Обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Обработчик нажатия пункта "Движения документа по регистрам" меню "Перейти" командной панели "ДействияФормы"
// Отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Обработчик нажатия пункта "СтруктураПодчиненностиДокумента" меню "Перейти" командной панели "ДействияФормы"
// Отображает структуру подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Обработчик нажатия на кнопку "Печать" командной панели "ОсновныеДействияФормы"
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Обработчик нажатия на кнопку "ПечатьПоУмолчанию командной панели "ОсновныеДействияФормы"
// Выводит на печать печатную форму по-умолчанию
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Командная панель табличного поля ВЫПУСК

// Обработчик нажатия кнопки "ЗаполнитьДаннымиПредыдущейСмены"
//
Процедура КнопкаЗаполнитьДаннымиПредыдущейСмены(Кнопка)
	
	Если Выпуск.Количество() > 0 Тогда
		Ответ = Вопрос("Перед заполнением табличная часть будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	Если НЕ ЗаполнитьДаннымиПредыдущейСмены(СообщениеОбОшибке) Тогда
		// Выведем сообщение, чтобы избежать ситуации "нажал на кнопку - ничего не произошло"
		Предупреждение(СообщениеОбОшибке,,"Заполнение данными предыдущей смены");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия кнопки "ЗаполнитьДаннымиВчерашнейСмены"
//
Процедура КнопкаЗаполнитьДаннымиВчерашнейСмены(Кнопка)
	
	Если Выпуск.Количество() > 0 Тогда
		Ответ = Вопрос("Перед заполнением табличная часть будет очищена. Заполнить?",
					   РежимДиалогаВопрос.ДаНет);
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СообщениеОбОшибке = "";
	Если НЕ ЗаполнитьДаннымиВчерашнейСмены(СообщениеОбОшибке) Тогда
		// Выведем сообщение, чтобы избежать ситуации "нажал на кнопку - ничего не произошло"
		Предупреждение(СообщениеОбОшибке,,"Заполнение данными вчерашней смены");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия кнопки "Подбор"
//
Процедура КоманднаяПанельВыпускДействиеПодбор(Кнопка)
	ДействиеПодбор(Выпуск);
КонецПроцедуры

// Обработчик нажатия кнопки "ЗаполнитьИзТСД"
Процедура ЗаполнитьИзТерминалаСбораДанных(Кнопка)
	
	ПолучитьСерверТО().ЗагрузитьИзТерминалаСбораДанных(мТерминалы, ЭтаФорма);
	
КонецПроцедуры

// Командная панель табличного поля РАСХОД МАТЕРИАЛОВ

// Обработчик нажатия кнопки "ЗаполнитьПоСпецификациям"
//
Процедура ЗаполнитьПоСпецификациям(Кнопка)
	
	Если РасходМатериалов.Количество() > 0 Тогда
		Ответ = Вопрос("Перед заполнением табличная часть будет очищена. Заполнить?", РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			РасходМатериалов.Очистить();
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//Сейчас ТЧ гарантированно пустая.
	
	СообщениеОбОшибке = "";
	Если НЕ РассчитатьМатериалыПоСпецификациям(СообщениеОбОшибке) Тогда
		Предупреждение(СообщениеОбОшибке, , "Заполнение по спецификациям");
	КонецЕсли;
	
КонецПроцедуры

// Обработчик нажатия кнопки "Подбор"
//
Процедура КоманднаяПанельРасходМатериаловДействиеПодбор(Кнопка)
	
	ДействиеПодбор(РасходМатериалов);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Обработчик события ПриИзменении поля ввода Дата
// Для другой даты можем найти более подходящую смену
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьСмену();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода Подразделение
// Для другого подразделения можем найти более подходящую смену
Процедура ПодразделениеПриИзменении(Элемент)
	
	УстановитьСмену();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода Ответственный
// Для другого ответственного можем найти более подходящую смену
Процедура ОтветственныйПриИзменении(Элемент)
	
	УстановитьСмену();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода Смена
//
Процедура СменаПриИзменении(Элемент)
	ИзменениеСмены();
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ВЫПУСК

// Обработчик события ПриВыводеСтроки
// Показывает код, артикул, параметры выпуска.
//
Процедура ВыпускПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиВыпуск, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);
	
	ПоказатьЗначенияПараметровВыпуска(ОформлениеСтроки.Ячейки, ДанныеСтроки.КлючСвязи);

КонецПроцедуры 

// Обработчик события ПриНачалеРедактирования
// Копирует параметры выпуска
//
Процедура ВыпускПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Выпуск.ТекущиеДанные;
	
	Если НЕ Копирование Тогда
		Возврат;
	КонецЕсли;
	
	//при копировании строки скопируем и параметры выпуска
	Если СтрокаТабличнойЧасти.КлючСвязи = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска 	= Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
	НайденныеПараметры 	= ПараметрыВыпуска.НайтиСтроки(СтруктураПоиска);
	
	Если НайденныеПараметры.Количество()=0 Тогда
		//Нет параметров выпуска. Тогда и ключ связи нам не нужен.
		СтрокаТабличнойЧасти.КлючСвязи = 0;
	Иначе
		//Есть параметры выпуска. Продублируем их.
		КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, ЭтотОбъект, "Выпуск", Истина);
		СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
		Для Каждого ДанныеПараметра Из НайденныеПараметры Цикл
			НоваяСтрока = ПараметрыВыпуска.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеПараметра,,"КлючСвязи");
			НоваяСтрока.КлючСвязи = КлючСвязи;
		КонецЦикла;
		
	КонецЕсли;
			
КонецПроцедуры // ВыпускПриНачалеРедактирования()

// Обработчик события ПередОкончаниемРедактирования
// Обновляет отображение параметров выпуска в полях ввода
//
Процедура ВыпускПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	УстановитьЗначенияПараметровВыпускаВПоляхВвода(ЭлементыФормы.Выпуск.ТекущиеДанные);
	
КонецПроцедуры

// Обработчик события ПередУдалением
// Удаляет данные в связанных табличных частях
//
Процедура ВыпускПередУдалением(Элемент, Отказ)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Выпуск.ТекущиеДанные;
	
	//узнаем у пользователя, может быть надо удалить материалы на этот выпуск
	ПохожийВыпуск			= Выпуск.НайтиСтроки(Новый Структура("Номенклатура,ХарактеристикаНоменклатуры,Спецификация", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.Спецификация));
	МатериалыПоПродукции 	= РасходМатериалов.НайтиСтроки(Новый Структура("Продукция,ХарактеристикаПродукции,Спецификация", СтрокаТабличнойЧасти.Номенклатура, СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры, СтрокаТабличнойЧасти.Спецификация));
	Если ПохожийВыпуск.Количество() > 1 И МатериалыПоПродукции.Количество() > 0 Тогда
		//есть что удалять
		Ответ = Вопрос("На закладке ""Расход материалов"" указаны материалы на выпуск, указанный в удаляемой строке. 
		|Удалить эти строки с закладки ""Расход материалов"" автоматически?", РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да, "Удаление строки выпуска");
		Если 		Ответ = КодВозвратаДиалога.Да Тогда
			Для Каждого УдаляемаяСтрока Из МатериалыПоПродукции Цикл
				РасходМатериалов.Удалить(УдаляемаяСтрока);
			КонецЦикла;
		ИначеЕсли	Ответ = КодВозвратаДиалога.Отмена Тогда
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	//надо удалить и из параметров выпуска
	Если СтрокаТабличнойЧасти.КлючСвязи <> 0 Тогда
		СтруктураПоиска 	= Новый Структура("КлючСвязи", СтрокаТабличнойЧасти.КлючСвязи);
		НайденныеПараметры 	= ПараметрыВыпуска.НайтиСтроки(СтруктураПоиска);
			
		Для Каждого ДанныеПараметра Из НайденныеПараметры Цикл
			ПараметрыВыпуска.Удалить(ДанныеПараметра);
		КонецЦикла;
				
	КонецЕсли;
	
КонецПроцедуры // ВыпускПередУдалением()

// Обработчик события ПриАктивизацииСтроки
// Действия, необходимые для редактирования параметров выпуска в динамических колонках
Процедура ВыпускПриАктивизацииСтроки(Элемент)
	
	УстановитьЗначенияПараметровВыпускаВПоляхВвода(ЭлементыФормы.Выпуск.ТекущиеДанные);
	
КонецПроцедуры // ВыпускПриАктивизацииСтроки()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "ВЫПУСК"

// Выполняет общие действия при изменении поля Номенклатура в строке табличной части Выпуск
//
Процедура Выпуск_ИзменениеНоменклатуры(СтрокаТабличнойЧасти)
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      		= СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
	УстановитьСпецификациюВыпуска(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Формирует представление номенклатуры для списка выбора в табличном поле
//
// Возвращаемое значение
//	Строка, представление номенклатуры
//
// Параметры
//	Выборка 	- должна содержать поля Представление, Артикул, Код
//	ВыводитьКод - всегда выводить код элемента
Функция ПолучитьПредставлениеНоменклатурыВСпискеВыбора(Выборка, ВыводитьКод = Истина)
	
	Представление = "" + Выборка.Наименование;
	
	// Предполагаем, что если артикул задан, то он нужен.
	Если НЕ ПустаяСтрока(Выборка.Артикул) Тогда
		Представление = Представление + " ["+СокрЛП(Выборка.Артикул)+"]";
	КонецЕсли;
	
	// Если колонка с кодом выводится, то значит пользователю интересен код.
	// Если артикул не задан, то код выводится всегда.
	Если ПустаяСтрока(Выборка.Артикул) ИЛИ ВыводитьКод Тогда
		Представление = Представление + " ("+СокрЛП(Выборка.Код)+")"
	КонецЕсли;
	
	Возврат Представление;
	
КонецФункции

// Обработчик события ПриИзменении поля ввода в колонке Номенклатура
//
Процедура ВыпускНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Выпуск.ТекущиеДанные;
	Выпуск_ИзменениеНоменклатуры(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка поля ввода в колонке Номенклатура
// Выбор номенклатуры из ограниченного списка
Процедура ВыпускНоменклатураНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	// Предлагаем номенклатуру, выпускаемую данным подразделением.
	// Данные о выпускающем подразделении берутся из РС "основныеСпецификацииНоменклатуры"
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Выпуск.ТекущиеДанные;
	
	Запрос = Новый Запрос(
	
	// Предполагаем, что такой номенклатуры достаточно немного.
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ОсновныеСпецификацииНоменклатурыСрезПоследних.Номенклатура,
	|	ОсновныеСпецификацииНоменклатурыСрезПоследних.Номенклатура.Наименование КАК Наименование,
	|	ОсновныеСпецификацииНоменклатурыСрезПоследних.Номенклатура.Код КАК Код,
	|	ОсновныеСпецификацииНоменклатурыСрезПоследних.Номенклатура.Артикул КАК Артикул
	|ИЗ
	|	РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(&Дата, Подразделение = &Подразделение) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование"
	);
	
	Запрос.УстановитьПараметр("Дата", 				Дата);
	Запрос.УстановитьПараметр("Подразделение", 		Подразделение);
	
	Выборка 	= Запрос.Выполнить().Выбрать();
	ВыводитьКод = ЭлементыФормы.Выпуск.Колонки.Код.Видимость;
	
	СписокВыбора = Новый СписокЗначений();
	Пока Выборка.Следующий() Цикл
		
		СписокВыбора.Добавить(Выборка.Номенклатура, ПолучитьПредставлениеНоменклатурыВСпискеВыбора(Выборка, ВыводитьКод));
		
	КонецЦикла;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущееЗначение		= СписокВыбора.НайтиПоЗначению(Элемент.Значение);
	ВыбранноеЗначение	= ВыбратьИзСписка(СписокВыбора, Элемент, ТекущееЗначение);
	
	Если ВыбранноеЗначение <> Неопределено Тогда
		Элемент.Значение = ВыбранноеЗначение.Значение;
		Выпуск_ИзменениеНоменклатуры(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры // ВыпускНоменклатураНачалоВыбораИзСписка()

// Обработчик события АвтоПодборТекста поля ввода в колонке Номенклатура
// Поиск номенклатуры в ограниченном списке
Процедура ВыпускНоменклатураАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Выпуск.ТекущиеДанные;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	ВЫБОР КОГДА Номенклатура.Наименование ПОДОБНО &Строка ТОГДА Номенклатура.Наименование
	|	КОГДА Номенклатура.Код = &Значение ТОГДА Номенклатура.Код
	|	КОГДА Номенклатура.Артикул = &Значение ТОГДА Номенклатура.Артикул КОНЕЦ КАК ТекстАвтоПодбора,
	|	Номенклатура.Наименование
	|ИЗ
	|	РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|			&Дата,
	|			(Номенклатура.Наименование ПОДОБНО &Строка
	|				ИЛИ Номенклатура.Код = &Значение
	|				ИЛИ Номенклатура.Артикул = &Значение)
	|				И Подразделение = &Подразделение
	|				) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних"
	);
	
	Запрос.УстановитьПараметр("Дата", 				Дата);
	Запрос.УстановитьПараметр("Подразделение", 		Подразделение);
	Запрос.УстановитьПараметр("Строка",				Текст + "%");
	Запрос.УстановитьПараметр("Значение",			Текст);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.ТекстАвтоПодбора;
	КонецЕсли;
	
КонецПроцедуры //ВыпускНоменклатураАвтоПодборТекста()

// Обработчик события ОкончаниеВводаТекста поля ввода в колонке Номенклатура
// Поиск номенклатуры в ограниченном списке
Процедура ВыпускНоменклатураОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПустаяСтрока(Текст) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	ОсновныеСпецификацииНоменклатурыСрезПоследних.Номенклатура,
	|	ОсновныеСпецификацииНоменклатурыСрезПоследних.Номенклатура.Наименование КАК Наименование,
	|	ОсновныеСпецификацииНоменклатурыСрезПоследних.Номенклатура.Код КАК Код,
	|	ОсновныеСпецификацииНоменклатурыСрезПоследних.Номенклатура.Артикул КАК Артикул
	|ИЗ
	|	РегистрСведений.ОсновныеСпецификацииНоменклатуры.СрезПоследних(
	|			&Дата,
	|			(Номенклатура.Наименование ПОДОБНО &Строка
	|				ИЛИ Номенклатура.Код = &Значение
	|				ИЛИ Номенклатура.Артикул = &Значение)
	|				И Подразделение = &Подразделение) КАК ОсновныеСпецификацииНоменклатурыСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Наименование"
	);
	
	Запрос.УстановитьПараметр("Дата", 				Дата);
	Запрос.УстановитьПараметр("Подразделение", 		Подразделение);
	Запрос.УстановитьПараметр("Строка",				Текст + "%");
	Запрос.УстановитьПараметр("Значение",			Текст);
	
	ВыводитьКод = ЭлементыФормы.Выпуск.Колонки.Код.Видимость;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Значение = Выборка.Номенклатура;
	Иначе
		СписокЗначений = Новый СписокЗначений();
		
		Пока Выборка.Следующий() Цикл
			
			СписокЗначений.Добавить(Выборка.Номенклатура, ПолучитьПредставлениеНоменклатурыВСпискеВыбора(Выборка, ВыводитьКод));
			
		КонецЦикла;
		
		Значение = СписокЗначений;
		
	КонецЕсли;
	
КонецПроцедуры //ВыпускНоменклатураОкончаниеВводаТекста()

// Обработчик события ПриИзменении поля ввода в колонке ЕдиницаИзмерения
//
Процедура ВыпускЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Выпуск.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода в колонке ХарактеристикаНоменклатуры
// Заполняется спецификация
Процедура ВыпускХарактеристикаНоменклатурыПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Выпуск.ТекущиеДанные;
	УстановитьСпецификациюВыпуска(СтрокаТабличнойЧасти);
	
КонецПроцедуры

// Обработчик события НачалоВыбора поля ввода в колонке Спецификация
// Стандартный способ выбора спецификации
Процедура ВыпускСпецификацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Выпуск.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		РаботаСДиалогами.НачалоВыбораЗначенияСпецификации(СтрокаТабличнойЧасти.Номенклатура, Элемент, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода в динамических колонках с параметрами выпуска
// Подключается в СоздатьКолонкиПараметровВыпуска()
// Сохраняет введенные значения в табличной части "ПараметрыВыпуска"
Процедура ПриИзмененииЗначенияПараметраВыпуска(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Выпуск.ТекущиеДанные;
	// Определим ключ связи. Если он 0, то значит не задан.
	// Соответственно в связанных ТЧ не должно быть ключей = 0.
	КлючСвязи = СтрокаТабличнойЧасти.КлючСвязи;
	
	Если КлючСвязи = 0 Тогда
		КлючСвязи = УчетСерийныхНомеров.ПолучитьНовыйКлючСвязи(мПараметрыСвязиСтрокТЧ, ЭтотОбъект, "Выпуск", Истина);
	КонецЕсли;
	СтрокаТабличнойЧасти.КлючСвязи = КлючСвязи;
	
	ДанныеПараметра = мСоставПараметровВыпуска.Найти(ЭлементыФормы.Выпуск.ТекущаяКолонка.Имя, "ИмяКолонки");
	Если ДанныеПараметра	= Неопределено Тогда
		// такого не должно случиться.
		// Мы не знаем, что это за параметр.
		// Поэтому ничего не делаем.
	Иначе
		Значение			= Элемент.Значение;
		// Найдем этот параметр в ТЧ "Технологические параметры".
		СтруктураПоиска = Новый Структура("КлючСвязи,ВидПараметра", КлючСвязи, ДанныеПараметра.Параметр);
		НайденныеСтроки = ПараметрыВыпуска.НайтиСтроки(СтруктураПоиска);
		
		// Заменим найденные строки
		//  Удалим попавшие в отбор
		Для Каждого СтрокаТЧ Из НайденныеСтроки Цикл
			ПараметрыВыпуска.Удалить(СтрокаТЧ);
		КонецЦикла;
		//  Добавим, если значение ненулевое
		Если Значение <> 0 Тогда
			НоваяСтрока = ПараметрыВыпуска.Добавить();
			НоваяСтрока.ВидПараметра = ДанныеПараметра.Параметр;
			НоваяСтрока.КлючСвязи	 = КлючСвязи;
			НоваяСтрока.Значение	 = Значение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииЗначенияПараметраВыпуска()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ "РАСХОД МАТЕРИАЛОВ"

// Обработчик события ПриНачалеРедактирования табличного поля "РасходМатериалов"
// Не копируем значения в колонке КоличествоПоНормативу
Процедура РасходМатериаловПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РасходМатериалов.ТекущиеДанные;
	
	Если Копирование Тогда
		
		СтрокаТабличнойЧасти.КоличествоПоНормативу = 0;
		
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриИзменении поля Номенклатура
//
Процедура РасходМатериаловНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РасходМатериалов.ТекущиеДанные;

	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      		= СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ЕдиницаИзмерения
// Установка коэффициента
Процедура РасходМатериаловЕдиницаИзмеренияПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.РасходМатериалов.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Единица.
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (ОБЩИЕ ФУНКЦИИ API)

// Обработчик внешнего события. Обрабатывает события, посылаемые внешними компонентами торгового оборудования.
//
Процедура ВнешнееСобытие(Источник, Событие, Данные)

	Если НЕ ВводДоступен() Тогда
		Возврат;
	КонецЕсли;

	ПолучитьСерверТО().ОбработатьВнешнееСобытие(Источник, Событие, Данные, ЭтаФорма);

КонецПроцедуры // ВнешнееСобытие()

// Функция возвращает признак того, что клиент поддерживает работу с видом ТО,
// переданным в качестве параметра.
//
// Параметры:
//  Вид      - <ПеречислениеСсылка.ВидыТорговогоОборудования>
//           - Вид торгового оборудования, информация о поддержке
//             которого запрашивается.
//
// Возвращаемое значение:
//  <Булево> - Признак поддержки указанного класса торгового оборудования.
//
Функция ПоддерживаетсяВидТО(Вид) Экспорт

	Результат = Ложь;

	Если Вид = Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных Тогда
		Результат = Истина;
	КонецЕсли;

	Возврат Результат;

КонецФункции // ПоддерживаетсяВидТО()

////////////////////////////////////////////////////////////////////////////////
// ФУНКЦИИ ВЗАИМОДЕЙСТВИЯ С ТОРГОВЫМ ОБОРУДОВАНИЕМ (СКАНЕР ШТРИХКОДА, ТСД)

// Функция осуществляет обработку считывания штрих-кода номенклатуры
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКНоменклатура(Номенклатура, Характеристика, Серия, Качество,
                        Единица, Количество, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.Панель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Неопределено, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Выпуск" Тогда
		ОбработкаПодбора(Выпуск, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКНоменклатура()

// Функция осуществляет обработку считывания штрих-кода транспортной упаковки.
//
// Параметры:
//  Номенклатура   - <СправочникСсылка.Номенклатура>
//                 - Номенклатура, штрих-код которой был отсканирован.
//
//  Характеристика – <СправочникСсылка.ХарактеристикиНоменклатуры>
//                 - Характеристика отсканированной номенклатуры.
//
//  Серия          - <СправочникСсылка.СерииНоменклатуры>
//                 - Серия отсканированной номенклатуры.
//
//  Качество       - <СправочникСсылка.Качество>
//                 - Качество отсканированной номенклатуры.
//
//  Единица        - <СправочникСсылка.ЕдиницыИзмерения>
//                 - Единица измерения отсканированной номенклатуры.
//
//  Количество     - <Число>
//                 - Количество отсканированной номенклатуры с учётом коэффициента упаковки.
//
//  Упаковка       - <СправочникСсылка.ТранспортныеУпаковки>
//                 - Транспортная упаковка.
//
//  СШК            - <Строка>
//                 - Идентификатор сканера штрих-кода, с которым связано данное
//                   событие.
//
// Возвращаемое значение:
//  <Булево>       - Данная ситуация обработана.
//
Функция СШКУпаковка(Номенклатура, Характеристика, Серия, Качество,
                    Единица, Количество, Упаковка, СШК) Экспорт

	Результат        = Истина;
	ИмяТекСтраницы   = ЭлементыФормы.Панель.ТекущаяСтраница.Имя;
	СтруктураПодбора = РаботаСТорговымОборудованием.СформироватьСтруктуруПодбора(Дата, Номенклатура, Характеристика,
	                                                Серия, Неопределено, Единица,
	                                                Количество, Неопределено,
	                                                Неопределено, Неопределено,
	                                                Неопределено);

	Если      ИмяТекСтраницы = "Выпуск" Тогда
		ОбработкаПодбора(Выпуск, СтруктураПодбора);
	Иначе
		Предупреждение("На странице """
		               + ИмяТекСтраницы
		               + """ подбор номенклатуры не предусмотрен.");
	КонецЕсли;

	Возврат Результат;

КонецФункции // СШКУпаковка()

// Функция осуществляет обработку считывания штрих-кода серийного номера
//
// Параметры:
//  Номер    - <СправочникСсылка.СерийныеНомера>
//           - Отсканированный серийный номер.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКСерийныйНомер(Номер, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКСерийныйНомер()

// Функция осуществляет обработку считывания штрих-кода информационной карты
//
// Параметры:
//  Карта    - <СправочникСсылка.ИнформационныеКарты>
//           - Отсканированная информационная карта.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКИнформационнаяКарта(Карта, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКИнформационнаяКарта()

// Функция осуществляет обработку считывания штрихового кода, который не был
// зарегистрирован.
//
// Параметры:
//  Штрихкод - <Строка>
//           - Считанный код.
//
//  ТипКода  - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//           - Тип штрихкода. Пустая ссылка в случае, если тип определить не
//             представляется возможным.
//
//  СШК      - <Строка>
//           - Идентификатор сканера штрих-кода, с которым связано данное
//             событие.
//
// Возвращаемое значение:
//  <Булево> - Данная ситуация обработана.
//
Функция СШКНеизвестныйКод(Штрихкод, ТипКода, СШК) Экспорт

	Возврат Ложь;

КонецФункции // СШКНеизвестныйКод()

// Процедура осуществляет обработку ошибки, произошедшей при работе со сканером
// штрих-кода.
//
// Параметры:
//  Ошибка    - <ПеречислениеСсылка.ТООшибки*>
//            - Возникшая ошибка.
//
//  Штрихкод  - <Строка>
//            - Считанный штрихкод или пустая строка, если штрихкод не был
//              считан.
//
//  ТипШК     - <ПланыВидовХарактеристикСсылка.ТипыШтрихкодов>
//            - Тип штрихкода или пустая ссылка в случае, если тип не определён.
//
//  СШК       - <Строка>
//            - Идентификатор сканера штрих-кода, с которым связано данное
//              событие.
//
Процедура СШКОшибка(Ошибка, Штрихкод, ТипШК, СШК) Экспорт

	Текст = ПолучитьСерверТО().ПолучитьТекстОшибкиСШКТО(Ошибка, Штрихкод, ТипШК);
	Предупреждение(Текст);

КонецПроцедуры // СШКОшибка()

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиВыпуск                   = ЭлементыФормы.Выпуск.Колонки;
мКолонкиТехнологическиеПараметры = ЭлементыФормы.ТехнологическиеПараметры.Колонки;
мКолонкиРасходМатериалов         = ЭлементыФормы.РасходМатериалов.Колонки;

мТерминалы = ПолучитьСерверТО().ПолучитьСписокУстройств(Перечисления.ВидыТорговогоОборудования.ТерминалСбораДанных,Справочники.КассыККМ.ПустаяСсылка());

мПараметрыСвязиСтрокТЧ = Новый Соответствие;
мПараметрыСвязиСтрокТЧ.Вставить("Выпуск", Новый Структура("СвободныйКлюч, ФлагМодификации", Неопределено, Ложь));