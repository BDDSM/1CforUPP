////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

Перем мРассчитываемыеТаблицы;
Перем мГоловнаяОрганизация;
Перем мВалютаРегламентированногоУчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;
Перем мСведенияОВидахРасчета;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

Перем мМассивЭУ;

Перем мДоступКадровикуЗапрещен;

// Механизм исправлений
Перем мДокументыИсправление;
Перем мСтруктураМенюИсправление;

// Диалог настройки периода
Перем мНастройкаПериода;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

Процедура НастроитьПоказСкидок()

	ЭлементыФормы.РасчетСреднего.Колонки.СкидкаПоСтраховымВзносам.Видимость = ДатаОкончанияПособияДоПолутораЛет >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами()
	
КонецПроцедуры

Процедура НастроитьПоказДанныхПилотногоПроектаФСС()

	Если ЭлементыФормы.ПанельПособий.ТекущаяСтраница = ЭлементыФормы.ПанельПособий.Страницы.ЗаявлениеНаВыплатуПособия Тогда
		ЭлементыФормы.ПанельПособий.ТекущаяСтраница = ЭлементыФормы.ПанельПособий.Страницы.Пособия;
		ТекущийЭлемент = ЭлементыФормы.Сотрудник;
	КонецЕсли;
	
	ЭлементыФормы.ПанельПособий.Страницы.ЗаявлениеНаВыплатуПособия.Видимость = ПроведениеРасчетов.ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(?(Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончанияПособияДоПолутораЛет), Дата, Макс(ДатаНачала, ДатаОкончанияПособияДоПолутораЛет)), Организация) ;
	ЭлементыФормы.ПанельПособий.Страницы.Документы.Видимость = ЭлементыФормы.ПанельПособий.Страницы.ЗаявлениеНаВыплатуПособия.Видимость;
	ЭлементыФормы.ПанельЛьгот.Свертка = ?(ПрименятьЛьготыПриНачисленииПособия, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	
КонецПроцедуры

Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭлементыФормы.Рассчитать.Доступность = ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.РассчитатьПереходногоПериода.Доступность = ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.РасчетПоПравилам2010Года.Доступность = ДатаСобытия() < ПроведениеРасчетов.ДатаОтдельногоРасчетаПособийПоМатеринству();
	ЭлементыФормы.РасчетСреднего2011.Колонки.ДнейБолезниУходаЗаДетьми.Видимость = ДатаСобытия() >= ПроведениеРасчетов.ДатаОтдельногоРасчетаПособийПоМатеринству();
	ЭлементыФормы.УчитыватьЗаработокПредыдущихСтрахователей.Доступность = ЕстьРасчетыПоКалендарнымГодам();
	
	ЭлементыФормы.КоличествоПервыхДетей.Доступность = ВыплачиватьПособиеДоПолутораЛет;
	
	ЭлементыФормы.ДатаОкончанияПособияДоПолутораЛет.ТолькоПросмотр = Не ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.ДатаОкончанияПособияДоПолутораЛет.АвтоОтметкаНезаполненного = ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.ДатаОкончанияПособияДоПолутораЛет.ОтметкаНезаполненного = ВыплачиватьПособиеДоПолутораЛет и Не ЗначениеЗаполнено(ДатаОкончанияПособияДоПолутораЛет);
	
	ЭлементыФормы.СреднедневнойЗаработок.ТолькоПросмотр = Не ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.СреднедневнойЗаработок.АвтоОтметкаНезаполненного = ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.СреднедневнойЗаработок.ОтметкаНезаполненного = ВыплачиватьПособиеДоПолутораЛет и СреднедневнойЗаработок = 0;
	
	ЭлементыФормы.СреднедневнойЗаработокПереходногоПериода2010.ТолькоПросмотр = Не ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.СреднедневнойЗаработокПереходногоПериода2010.АвтоОтметкаНезаполненного = ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.СреднедневнойЗаработокПереходногоПериода2010.ОтметкаНезаполненного = ВыплачиватьПособиеДоПолутораЛет и СреднедневнойЗаработок = 0;
	
	ЭлементыФормы.КоличествоДетей.ТолькоПросмотр = Не ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.КоличествоДетей.АвтоОтметкаНезаполненного = ВыплачиватьПособиеДоПолутораЛет;
	ЭлементыФормы.КоличествоДетей.ОтметкаНезаполненного = ВыплачиватьПособиеДоПолутораЛет и КоличествоДетей = 0;
	
	ЭлементыФормы.ДатаОкончанияПособияДоТрехЛет.ТолькоПросмотр = Не ВыплачиватьПособиеДоТрехЛет;
	ЭлементыФормы.ДатаОкончанияПособияДоТрехЛет.АвтоОтметкаНезаполненного = ВыплачиватьПособиеДоТрехЛет;
	ЭлементыФормы.ДатаОкончанияПособияДоТрехЛет.ОтметкаНезаполненного = ВыплачиватьПособиеДоТрехЛет и Не ЗначениеЗаполнено(ДатаОкончанияПособияДоТрехЛет);
	
	
КонецПроцедуры

Процедура ОбновитьОписаниеСостоянияДокумента()
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Сотрудник) Или Не ЗначениеЗаполнено(ДатаНачала);
	
	ЗаполненСОшибками = ЗначениеЗаполнено(ДатаОкончания) И ДатаНачала > ДатаОкончания;
	ЗаполненСОшибками = ЗаполненСОшибками Или (ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания));
	ЗаполненСОшибками = ЗаполненСОшибками Или (ВыплачиватьПособиеДоПолутораЛет И КоличествоДетей = 0);
	ЗаполненСОшибками = ЗаполненСОшибками Или (ВыплачиватьПособиеДоПолутораЛет И Не ЗначениеЗаполнено(ДатаОкончанияПособияДоПолутораЛет));
	ЗаполненСОшибками = ЗаполненСОшибками Или (ВыплачиватьПособиеДоТрехЛет И Не ЗначениеЗаполнено(ДатаОкончанияПособияДоТрехЛет));
	ЗаполненСОшибками = ЗаполненСОшибками Или (ЗначениеЗаполнено(ДатаОкончания) И ВыплачиватьПособиеДоПолутораЛет И ДатаОкончанияПособияДоПолутораЛет > ДатаОкончания);
	ЗаполненСОшибками = ЗаполненСОшибками Или (ЗначениеЗаполнено(ДатаОкончания) И ВыплачиватьПособиеДоТрехЛет И ДатаОкончанияПособияДоТрехЛет > ДатаОкончания);
	
	ЭтоИсправление		= ЗначениеЗаполнено(ИсправляемыйДокумент);
	ДокументИсправлен	= ЗначениеЗаполнено(мДокументыИсправление);
	
	Если мДоступКадровикуЗапрещен Тогда
		Рассчитан = Не ВыплачиватьПособиеДоПолутораЛет или ВыплачиватьПособиеДоПолутораЛет И РасчетСреднего.Количество() <> 0;
	Иначе 
		Рассчитан = Не ВыплачиватьПособиеДоПолутораЛет или ВыплачиватьПособиеДоПолутораЛет И СреднедневнойЗаработок <> 0;
	КонецЕсли;
	
	ТекстСообщения = "";
	ВажностьСообщения = "";
	
	Если ДанныеПрошлойВерсии Тогда
		ВажностьСообщения = "ВажнаяИнформация";
		ТекстСообщения = "Документ перенесен из программы ""1С:Зарплата и кадры 7.7"". При проведении документа движения формироваться не будут";
		
	ИначеЕсли НеЗаполнен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ не заполнен";
		
	ИначеЕсли ЭтоИсправление Тогда
		ТекстСообщения = "Документ является исправлением документа; ";
		Если ДокументИсправлен Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			Если Не Рассчитан Тогда
				ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
			КонецЕсли;
			ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
			
		ИначеЕсли ЗаполненСОшибками Тогда
			ВажностьСообщения = "СообщениеОПроблемах";
			ТекстСообщения = ТекстСообщения + "поля документа заполнены не полностью или неверно";
			
		ИначеЕсли Не Рассчитан Тогда
			ВажностьСообщения = "ВажнаяИнформация";
			ТекстСообщения = ТекстСообщения + "документ не рассчитан";
			
		ИначеЕсли Рассчитан И Не Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан, но не проведен";
			
		ИначеЕсли Рассчитан И Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = ТекстСообщения + "рассчитан и проведен";
			
		КонецЕсли;
		
	ИначеЕсли ДокументИсправлен Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Документ ";
		Если Не Рассчитан Тогда
			ТекстСообщения = ТекстСообщения + "не был рассчитан, но ";
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + "был исправлен; редактирование документа запрещено"
		
	ИначеЕсли ЗаполненСОшибками Тогда
		ВажностьСообщения = "СообщениеОПроблемах";
		ТекстСообщения = "Поля документа заполнены не полностью или неверно";
		
	ИначеЕсли Не Рассчитан Тогда
		ВажностьСообщения = "ВажнаяИнформация";
		ТекстСообщения = "В документе не рассчитан средний заработок для выплаты пособия";
		
	ИначеЕсли ВыплачиватьПособиеДоПолутораЛет Тогда
		Если Рассчитан И Не Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = "Документ рассчитан, но не проведен";
		ИначеЕсли Рассчитан И Проведен Тогда
			ВажностьСообщения = "Информация";
			ТекстСообщения = "Документ рассчитан и проведен";
		КонецЕсли;
		
	ИначеЕсли Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ проведен";
		
	ИначеЕсли Не Проведен Тогда
		ВажностьСообщения = "Информация";
		ТекстСообщения = "Документ не проведен";	
		
	КонецЕсли;
	
	Если мДоступКадровикуЗапрещен Тогда
		
		Если Проведен Тогда
			ТекстДействия = "исправления";
		Иначе
			ТекстДействия = "проведения";
		КонецЕсли;
		ТекстСообщения = ТекстСообщения + ". После расчета среднего заработка для " + ТекстДействия + " документа требуются права расчетчика.";
		
	КонецЕсли;
	
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ТекстСообщения, ВажностьСообщения);
	
КонецПроцедуры

Процедура ПоказатьДанныеПереходногоПериода()

	ЭтоПереходныйПериод = ЗначениеЗаполнено(ДатаНачала) И ДатаНачала < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() 
		И (Не ЗначениеЗаполнено(ДатаОкончанияПособияДоПолутораЛет) Или ДатаОкончанияПособияДоПолутораЛет >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами());
		
	ЭлементыФормы.ПанельПереходногоПериода.ТекущаяСтраница = ?(ЭтоПереходныйПериод, ЭлементыФормы.ПанельПереходногоПериода.Страницы.СтраницаПереходныйПериод, ЭлементыФормы.ПанельПереходногоПериода.Страницы.СтраницаОбычныйРасчет);

КонецПроцедуры

Процедура ПроверитьДоступностьЛьготы(ИзменятьДанные = Истина)

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	СотрудникиОрганизаций.Физлицо.ЛьготаПриНачисленииПособий,
	|	ВЫБОР
	|		КОГДА СотрудникиОрганизаций.Физлицо.ЛьготаПриНачисленииПособий В (ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПриНачисленииБольничных.Чернобыль), ЗНАЧЕНИЕ(Перечисление.ВидыЛьготПриНачисленииБольничных.Маяк))
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ЛьготаПредоставляется
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", Сотрудник);
	Выборка = Запрос.Выполнить().Выбрать();
	ЛьготаПредоставляется = Ложь;
	Если Выборка.Следующий() Тогда 
		ЛьготаПредоставляется = Выборка.ЛьготаПредоставляется
	КонецЕсли;;
	ЭлементыФормы.ПрименятьЛьготыПриНачисленииПособия.Доступность = ЛьготаПредоставляется;
	Если ИзменятьДанные И ПрименятьЛьготыПриНачисленииПособия И Не ЛьготаПредоставляется Тогда
		ПрименятьЛьготыПриНачисленииПособия = Ложь
	КонецЕсли;

КонецПроцедуры

Процедура ПроставитьДолжностьИПодразделение(Элемент, ОформленияСтрок)

	Колонки = Элемент.Колонки;
	ПоказыватьПодразделение = Колонки.Подразделение.Видимость;
	ПоказыватьДолжность = Колонки.Должность.Видимость;
	
	Если Не (ПоказыватьПодразделение Или ПоказыватьДолжность) Тогда
		Возврат
	КонецЕсли;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Дата",			ДатаНачала);
	Запрос.УстановитьПараметр("Организация",	мГоловнаяОрганизация);

	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
	|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность.Наименование
	|	КОНЕЦ КАК Должность
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних";
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Запрос.УстановитьПараметр("Сотрудник",	ДанныеСтроки.Сотрудник);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			
			Если ПоказыватьПодразделение Тогда
				ОформлениеСтроки.Ячейки.Подразделение.УстановитьТекст(Выборка.ПодразделениеОрганизации);
			КонецЕсли;
			
			Если ПоказыватьДолжность Тогда
				ОформлениеСтроки.Ячейки.Должность.УстановитьТекст(Выборка.Должность);
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанельПлановыеНачисления);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПлановыеУдержания,ЭлементыФормы.КоманднаяПанельПлановыеУдержания);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднего,ЭлементыФормы.КоманднаяПанельРасчетСреднего);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднего2011,ЭлементыФормы.КоманднаяПанельРасчетСреднего2011);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДанныеОДетях,ЭлементыФормы.КоманднаяПанельДанныеОДетях);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

Процедура УстановитьКомментарий()

	ПроцентОплаты = Мин(40 * КоличествоДетей * ?(ПрименятьЛьготыПриНачисленииПособия, 2, 1),100); 
	СтрокаКомментария = "";
	Если ВыплачиватьПособиеДоПолутораЛет Тогда
		СтрокаКомментария = "Ежемесячное пособие по уходу за ребенком до достижения ребенком полутора лет начисляется в размере " 
		+ ПроцентОплаты + "% среднего заработка. Минимальный размер пособия определяется для";
		Если КоличествоПервыхДетей = 0 Тогда
			 Если КоличествоДетей = 1 Тогда
				СтрокаКомментария = СтрокаКомментария  + " одного ребенка, рожденного (усыновленного) вторым или последующим.";
			 Иначе
				СтрокаКомментария = СтрокаКомментария + " " + КоличествоДетей + " детей, среди которых нет первого ребенка.";
			 КонецЕсли;
		ИначеЕсли КоличествоПервыхДетей = 1 Тогда
			 Если КоличествоДетей = 1 Тогда
				СтрокаКомментария = СтрокаКомментария  + " одного ребенка, рожденного (усыновленного) первым.";
			 Иначе
				СтрокаКомментария = СтрокаКомментария + " " + КоличествоДетей + " детей, среди которых есть ребенок, рожденный (усыновленный) первым.";
			 КонецЕсли;
		КонецЕсли;
		Если ДатаНачала < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
			СтрокаКомментария = СтрокаКомментария  + " Максимальный размер пособия (до " + Формат(ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами(),"ДЛФ=DD") + ") определяется для";
			Если КоличествоДетей = 1 Тогда
				СтрокаКомментария = СтрокаКомментария + " одного ребенка.";
			Иначе
				СтрокаКомментария = СтрокаКомментария + " " + КоличествоДетей + " детей.";
			КонецЕсли;
		КонецЕсли;
		СтрокаКомментария = СтрокаКомментария + Символы.ПС 
		+ "Под первым ребенком матери понимается ребенок (один из детей), рожденный в первых успешных родах либо усыновленный хронологически первым.";
		
	Иначе
		СтрокаКомментария = "Ежемесячное пособие по уходу за ребенком до достижения ребенком полутора лет не начисляется.";
	КонецЕсли;
	ЭлементыФормы.КомментарийСтрока.Заголовок = СтрокаКомментария;

КонецПроцедуры // УстановитьПредставлениеПричиныНетрудоспособности()

// Записывает документ в режиме отмены проведения, спросив об этом у пользователя
Функция ЗаписатьДокументОтменивПроведение(Действие = "рассчитать")

	Если Проведен Тогда
		
		Если Вопрос("Автоматически " + Действие +" документ можно только после отмены его проведения. Выполнить отмену проведения документа?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
		
	ИначеЕсли Модифицированность ИЛИ ЭтоНовый() Тогда
		
		Если Вопрос("Автоматически " + Действие +" документ можно только после его записи. Записать?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		
	КонецЕсли;
	
	Возврат Истина;

КонецФункции  

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//   Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке(ЭлементУправления = "РасчетСреднего")
	
	СтруктураПараметров = Новый Структура();
	Если ЭлементУправления = "РасчетСреднего" Тогда
		СтруктураПараметров = Новый Структура("Ссылка", ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора);
	ИначеЕсли ЭлементУправления = "ПлановыеУдержания" Тогда
		СтруктураПараметров = Новый Структура("СпособРасчета", ПроведениеРасчетов.ПолучитьСписокВариантовУдержанийОрганизации());
	КонецЕсли;
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	ОтпускПоУходуЗаРебенкомПереопределяемый.ПередОткрытиемДополнительно(ЭтаФорма);
	
	// Механизм исправления документов
	Если Не ЭтотОбъект.ЭтоНовый() Тогда
		мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(ЭтотОбъект.Ссылка, , , "ИсправляемыйДокумент");
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;	
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента	= Дата;
	мГоловнаяОрганизация	= ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	мДоступнаРольРасчетчикаРегл = НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл();
	мДоступКадровикуЗапрещен = Ложь;
	ЭлементыФормы.ПанельПособий.Страницы.РасчетСреднего.Видимость = мДоступнаРольРасчетчикаРегл;
	ЭлементыФормы.Рассчитать.Видимость = мДоступнаРольРасчетчикаРегл;
	ЭлементыФормы.РассчитатьПереходногоПериода.Видимость = мДоступнаРольРасчетчикаРегл;
	ПоказатьДанныеПереходногоПериода();
	РаботаСДиалогамиЗК.ПрочитатьГодыРасчетаСреднего2011(ЭтотОбъект, ЭтаФорма);
	ПроверитьДоступностьЛьготы(Ложь);
	
	Если мДоступнаРольРасчетчикаРегл Тогда
		// настроим закладку среднего заработка
		СписокСоставляющихСреднегозаработка = Новый СписокЗначений;
		Если ЗначениеЗаполнено(ДатаНачала) И ДатаНачала < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
			СписокСоставляющихСреднегозаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособий);
			СписокСоставляющихСреднегозаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособий);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ДатаНачала) Или Не ЗначениеЗаполнено(ДатаОкончанияПособияДоПолутораЛет) Или ДатаОкончанияПособияДоПолутораЛет >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами() Тогда
			СписокСоставляющихСреднегозаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоЗаработкуПособийС2010);
			СписокСоставляющихСреднегозаработка.Добавить(ПланыВидовРасчета.СреднийЗаработок.ПоПремиямПособийС2010);
		КонецЕсли;
		
		ОтпускПоУходуЗаРебенкомПереопределяемый.ДополнитьСписокСоставляющихСреднегозаработка(ЭтаФорма, СписокСоставляющихСреднегозаработка);
		
		КолонкиРасчетаСреднего = ЭлементыФормы.РасчетСреднего.Колонки;
		КолонкиРасчетаСреднего.ВидРасчета.ЭлементУправления.СписокВыбора = СписокСоставляющихСреднегозаработка;
		КолонкиРасчетаСреднего.ВидРасчета.ЭлементУправления.ВысотаСпискаВыбора = СписокСоставляющихСреднегозаработка.Количество();
		
		ОтпускПоУходуЗаРебенкомПереопределяемый.УстановитьВидимостьДополнительныхКолонок(ЭтаФорма, СписокСоставляющихСреднегозаработка);
		
	Иначе 
		// удалим кнопку заполнения среднего заработка
		КнопкаЗаполнения = ЭлементыФормы.ДействияФормы.Кнопки.Заполнить.Кнопки.Найти("ДанныеДляРасчета");
		Если КнопкаЗаполнения <> Неопределено Тогда
			ЭлементыФормы.ДействияФормы.Кнопки.Заполнить.Кнопки.Удалить(КнопкаЗаполнения);
		КонецЕсли;
		// документ уже рассчитывали, кадровику проводить док запрещено
		Если Не ТолькоПросмотр И (РасчетСреднего.Количество() > 0 Или ГодыРасчетаСреднего2011.Количество() > 0) Тогда 
			Если Проведен Тогда
				ТолькоПросмотр = Истина;
			Иначе 
				ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Действие.Доступность = Ложь;
				ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Действие.КнопкаПоУмолчанию = Ложь;
				ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Действие1.КнопкаПоУмолчанию = Истина;
			КонецЕсли;
			мДоступКадровикуЗапрещен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	// Установим видимость реквизитов "Валюта" и Рабочего места
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.РасчетСреднего.Колонки.Сотрудник);
	мМассивЭУ.Добавить(ЭлементыФормы.РасчетСреднего.Колонки.Подразделение);
	мМассивЭУ.Добавить(ЭлементыФормы.РасчетСреднего.Колонки.Должность);	
	Если глЗначениеПеременной("глЕстьВалютныеПоказателиОрганизаций") Тогда
		Для Сч = 1 По 6 Цикл
			мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки["Валюта"+Сч]);
			мМассивЭУ.Добавить(ЭлементыФормы.ПлановыеУдержания.Колонки["Валюта"+Сч]);
		КонецЦикла;
	Иначе
		Для Сч = 1 По 6 Цикл
			ЭлементыФормы.ОсновныеНачисления.Колонки["Валюта"+Сч].Видимость = Ложь;
			ЭлементыФормы.ПлановыеУдержания.Колонки["Валюта"+Сч].Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	ЭлементыФормы.КоличествоПервыхДетей.Заголовок = ?(КоличествоДетей = 1,"Это первый ребенок","Среди детей есть первый ребенок");
	ЭлементыФормы.РасчетСреднего2011.Колонки.Страхователь.Видимость = УчитыватьЗаработокПредыдущихСтрахователей;
	ОбновитьДоступностьЭлементовФормы();
	УстановитьКомментарий();
	
	НастроитьПоказДанныхПилотногоПроектаФСС();
	АдресПочтовыйВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресПочтовый);
	АдресРегистрацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРегистрации);
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриОткрытии(ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление);
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода = Новый НастройкаПериода;
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.ДатаОкончанияПособияДоПолутораЛет;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
    ОписаниеДокументаНаПроживание = ОбменСведениямиОПособияхСФСС.ОписаниеДокументаНаПроживание(ЭтотОбъект)
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗакрытием" формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовОбработкаОповещения(
		ИмяСобытия, Параметр, Источник,
		ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	РаботаСДиалогамиЗК.ЗаписатьГодыРасчетаСреднего2011(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы
//
Процедура ПослеЗаписи()
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПослеЗаписи(ЭтотОбъект);
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	Массив = Новый Массив;
	Массив.Добавить(Сотрудник);
	Оповестить("ОбновитьСписокПлановыхНачислений", Массив);
	Оповестить("ОбновитьСписокПлановыхУдержаний", Массив);
		
	Оповестить("ИзмененоСостояниеРаботниковОрганизации", Массив);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНОЙ ПАНЕЛИ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура-обработчик события нажатия кнопки "Заполнить"
Процедура ДействияФормыЗаполнить(Кнопка)
	
	ЗаполнитьПлановыеНачисленияУдержания();
	
КонецПроцедуры

// Процедура - обработчик события нажатия кнопки "Рассчитать средний заработок" 
Процедура ДействияФормыРассчитатьСреднийЗаработок(Кнопка)
	
	Если НЕ ЗаписатьДокументОтменивПроведение("заполнить") Тогда
		Возврат;
	КонецЕсли; 
	
	мРассчитываемыеТаблицы.Начисления = Ложь;
	мРассчитываемыеТаблицы.РасчетСреднего = Истина;
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	Рассчитать(мРассчитываемыеТаблицы);
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры


// Процедура - обработчик нажатия на кнопку "Весь документ"
//
Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Отменить исправление"
//
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьКадровоеИсправление(ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ЗаполнитьПлановыеНачисленияУдержания();
	КонецЕсли;
	
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	НастроитьПоказДанныхПилотногоПроектаФСС();
	Если ЭлементыФормы.ПанельПособий.Страницы.ЗаявлениеНаВыплатуПособия.Видимость Тогда
		Автозаполнение("ДанныеСтрахователя");
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода физлица
//
Процедура СотрудникПриИзменении(Элемент)

	Физлицо = Сотрудник.Физлицо;
	ПроверитьДоступностьЛьготы();
	ЗаполнитьПлановыеНачисленияУдержания();
	Если ЭлементыФормы.ПанельПособий.Страницы.ЗаявлениеНаВыплатуПособия.Видимость Тогда
		Автозаполнение("ДанныеСотрудника");
	КонецЕсли;
	АдресПочтовыйВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресПочтовый);
	АдресРегистрацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРегистрации);
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // СотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода начала отпуска
//
Процедура ДатаНачалаПриИзменении(Элемент)
	
	ЗаполнитьПлановыеНачисленияУдержания();
	ПоказатьДанныеПереходногоПериода();
	ОбновитьДоступностьЭлементовФормы();
	ПериодРасчетаСреднегоЗаработкаНачало = ДобавитьМесяц(НачалоМесяца(ДатаНачала), - 12);
	ПериодРасчетаСреднегоЗаработкаОкончание = НачалоМесяца(ДатаНачала) - 1;
	ГодНачалаСобытия = Год(ДатаНачала);
	ПервыйГодРасчета = ГодНачалаСобытия - 2;
	ВторойГодРасчета = ГодНачалаСобытия - 1;
	
	ПоказывалосьДоИзменения = ЭлементыФормы.ПанельПособий.Страницы.ЗаявлениеНаВыплатуПособия.Видимость;
	НастроитьПоказДанныхПилотногоПроектаФСС();
	Если Не ПоказывалосьДоИзменения И ЭлементыФормы.ПанельПособий.Страницы.ЗаявлениеНаВыплатуПособия.Видимость Тогда
		Автозаполнение();
		АдресПочтовыйВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресПочтовый);
		АдресРегистрацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРегистрации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ДатаОкончанияПособияДоПолутораЛетПриИзменении(Элемент)
	ПоказатьДанныеПереходногоПериода();
	НастроитьПоказСкидок(); // колонка скидок показывается только в 2010 году
	ПоказывалосьДоИзменения = ЭлементыФормы.ПанельПособий.Страницы.ЗаявлениеНаВыплатуПособия.Видимость;
	НастроитьПоказДанныхПилотногоПроектаФСС();
	Если Не ПоказывалосьДоИзменения И ЭлементыФормы.ПанельПособий.Страницы.ЗаявлениеНаВыплатуПособия.Видимость Тогда
		Автозаполнение();
		АдресПочтовыйВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресПочтовый);
		АдресРегистрацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРегистрации);
	КонецЕсли;
КонецПроцедуры

Процедура ВыплачиватьПособиеДоПолутораЛетПриИзменении(Элемент)
	
	ОбновитьДоступностьЭлементовФормы();
	УстановитьКомментарий();
	
КонецПроцедуры

Процедура ВыплачиватьПособиеДоТрехЛетПриИзменении(Элемент)

	ОбновитьДоступностьЭлементовФормы();
	
КонецПроцедуры

Процедура РассчитатьНажатие(Элемент)
	
	Если НЕ ЗаписатьДокументОтменивПроведение() Тогда
		Возврат;
	КонецЕсли;
	
	мРассчитываемыеТаблицы.Начисления = Истина;
	мРассчитываемыеТаблицы.РасчетСреднего = РасчетСреднего.Количество() = 0 И РасчетСреднего2011.Количество() = 0;
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	Рассчитать(мРассчитываемыеТаблицы);
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры

Процедура КоличествоДетейПриИзменении(Элемент)
	ЭлементыФормы.КоличествоПервыхДетей.Заголовок = ?(КоличествоДетей = 1,"Это первый ребенок","Среди детей есть первый ребенок");
	УстановитьКомментарий();
КонецПроцедуры

Процедура КоличествоПервыхДетейПриИзменении(Элемент)
	УстановитьКомментарий();
КонецПроцедуры

Процедура ПрименятьЛьготыПриНачисленииПособияПриИзменении(Элемент)
	УстановитьКомментарий();
	ЭлементыФормы.ПанельЛьгот.Свертка = ?(ПрименятьЛьготыПриНачисленииПособия, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
КонецПроцедуры

Процедура РасчетПоПравилам2010ГодаПриИзменении(Элемент)
	ЭлементыФормы.УчитыватьЗаработокПредыдущихСтрахователей.Доступность = ЕстьРасчетыПоКалендарнымГодам();
	Если РасчетПоПравилам2010Года Тогда
		УчитыватьЗаработокПредыдущихСтрахователей = Ложь
	КонецЕсли;
	РасчетСреднего.Очистить();
	РасчетСреднего2011.Очистить();
КонецПроцедуры

Процедура УчитыватьЗаработокПредыдущихСтрахователейПриИзменении(Элемент)
	Если Не Элемент.Значение И РасчетСреднего2011.НайтиСтроки(Новый Структура("Страхователь", Справочники.Работодатели.ТекущийРаботодатель)).Количество() <> РасчетСреднего2011.Количество() Тогда
		Если Вопрос("Данные справок о заработке у предыдущих страхователей будут удалены! Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			РасчетСреднего2011.Загрузить(РасчетСреднего2011.Выгрузить(РасчетСреднего2011.НайтиСтроки(Новый Структура("Страхователь", Справочники.Работодатели.ТекущийРаботодатель))))
		Иначе 
			УчитыватьЗаработокПредыдущихСтрахователей = Истина;
			Возврат ;
		КонецЕсли; 
	КонецЕсли;
	ЭлементыФормы.РасчетСреднего2011.Колонки.Страхователь.Видимость = УчитыватьЗаработокПредыдущихСтрахователей;
КонецПроцедуры

Процедура ПанельПособийПриСменеСтраницы(Элемент, ТекущаяСтраница)
		
	Если ЭлементыФормы.ПанельПособий.Страницы[ТекущаяСтраница] = ЭлементыФормы.ПанельПособий.Страницы.РасчетСреднего Тогда
		Если ЕстьРасчетыПоКалендарнымГодам() Тогда
			ЭлементыФормы.ПанельРасчетСреднего.ТекущаяСтраница = ЭлементыФормы.ПанельРасчетСреднего.Страницы.СтраницаС2011Года;
			ТекущийЭлемент = ЭлементыФормы.РасчетСреднего2011;
		Иначе
			ЭлементыФормы.ПанельРасчетСреднего.ТекущаяСтраница = ЭлементыФормы.ПанельРасчетСреднего.Страницы.СтраницаДо2011Года;
			ТекущийЭлемент = ЭлементыФормы.РасчетСреднего;
		КонецЕсли;
	КонецЕсли;	
		
КонецПроцедуры

// Процедура - обработчик события "Нажатие" надписи "Открыть исправление".
//
Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ПоказатьИсправления(ЭтаФорма, Ссылка, мДокументыИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" надписи "Открыть исходный".
//
Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ОткрытьИсходныйДокумент(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры


Процедура ОписаниеДокументаНаПроживаниеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбменСведениямиОПособияхСФСС.ОткрытьФормуРедактированияДокументаНаПроживание(ЭтаФорма, ЭтотОбъект)
	
КонецПроцедуры

Процедура ОписаниеДокументаНаПроживаниеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь
КонецПроцедуры

Процедура БанкПриИзменении(Элемент)
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеБанка(Элемент.Значение, ЭтотОбъект);
КонецПроцедуры

Процедура КнопкаОбновитьДанныеСотрудникаНажатие(Элемент)
	Автозаполнение("ДанныеСотрудника");
	АдресПочтовыйВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресПочтовый);
	АдресРегистрацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРегистрации);
КонецПроцедуры

Процедура АдресПочтовыйВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтруктураАдреса = Новый Структура("Значение", АдресПочтовый);
	УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
	АдресПочтовый = СтруктураАдреса.Значение;
	АдресПочтовыйКодПоКЛАДР = ОбменСведениямиОПособияхСФСС.КодАдресаПоКЛАДРдляФСС(СтруктураАдреса.Значение);
	Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
КонецПроцедуры

Процедура АдресРегистрацииВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтруктураАдреса = Новый Структура("Значение", АдресРегистрации);
	УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
	АдресРегистрации = СтруктураАдреса.Значение;
	Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
КонецПроцедуры

Процедура ПечатьБланкЗаявленияНажатие(Элемент)
	Печать("ЗаявлениеЧистыйБланк_2011")
КонецПроцедуры

Процедура ПечатьЗаявлениеНажатие(Элемент)
	Если Не РаботаСДиалогами.ПроверитьМодифицированностьВФорме(ЭтотОбъект,ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	Печать("ЗаявлениеВФССОВыплатеПособия_2011")
КонецПроцедуры

Процедура ПечатьЗаявлениеЗаполненныйБланк2012(Кнопка)
	Если Не РаботаСДиалогами.ПроверитьМодифицированностьВФорме(ЭтотОбъект,ЭтаФорма) Тогда
		Возврат;
	КонецЕсли;
	Печать("ЗаявлениеВФССОВыплатеПособия_2012")
КонецПроцедуры

Процедура ПечатьЗаявлениеЧистыйБланк2012(Кнопка)
	Печать("ЗаявлениеЧистыйБланк_2012")
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ОсновныеНачисления

Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтроки(Элемент, ЭлементыФормы.КоманднаяПанельПлановыеУдержания);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки", 0.05, Истина);	 	
	
КонецПроцедуры

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля Начисления
//
Процедура ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ОсновныеНачисления, мСведенияОВидахРасчета);
	
КонецПроцедуры // ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки

Процедура ОсновныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриПолученииДанных(ОформленияСтрок);
	
	ПроставитьДолжностьИПодразделение(Элемент, ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ОформлениеСтроки.ДанныеСтроки, мСведенияОВидахРасчета);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НаборДанных = ПроцедурыУправленияПерсоналом.ПодборДанныхПоФизлицу(ЭтаФорма, Элемент, Физлицо, мГоловнаяОрганизация, ДатаНачала, Истина);
	Если НаборДанных <> Неопределено Тогда
		Элемент.Значение = НаборДанных.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" вида действия строки начислений
Процедура ОсновныеНачисленияДействиеПриИзменении(Элемент)
	
	ТекущаяСтрока = ЭлементыФормы.ОсновныеНачисления.ТекущаяСтрока;
	Если Элемент.Значение = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Для СчПоказателей = 1 По 6 Цикл			
			ТекущаяСтрока["Показатель" + СчПоказателей] = 0;
			ТекущаяСтрока["ТарифныйРазряд" + СчПоказателей] = Справочники.ТарифныеРазряды.ПустаяСсылка();
			ТекущаяСтрока["Валюта" + СчПоказателей] = Справочники.Валюты.ПустаяСсылка();			
		КонецЦикла;
	КонецЕсли; 
	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	Если мВалютаРегламентированногоУчета = Неопределено Тогда
		мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Элемент.Значение);
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ОсновныеНачисления, мСведенияОВидахРасчета);
	ДанныеСтроки = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	
	Если Не СведенияОВидеРасчета.РазмерТребуется Тогда
		ДанныеСтроки.Показатель1		= 0;
		ДанныеСтроки.ТарифныйРазряд1	= Справочники.ТарифныеРазряды.ПустаяСсылка();
	КонецЕсли;
	
	Если СведенияОВидеРасчета.НеТребуетВалюты Тогда
		ДанныеСтроки.Валюта1			= Справочники.Валюты.ПустаяСсылка();
		
	Иначе
		ИспользуютсяНачисленияВВалюте	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
			
		Если Не ИспользуютсяНачисленияВВалюте И ДанныеСтроки.Валюта1.Пустая() Тогда
			ДанныеСтроки.Валюта1 = мВалютаРегламентированногоУчета;
		КонецЕсли;
			
	КонецЕсли;
	
	Для СчПоказателей = 1 По 6 Цикл
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда			
			Если НЕ ЗначениеЗаполнено(ДанныеСтроки["Валюта" + СчПоказателей]) И 
				СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ДанныеСтроки["Валюта" + СчПоказателей] = мВалютаРегламентированногоУчета;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				Если СчПоказателей <= СведенияОВидеРасчета.ФактКоличествоПоказателей Тогда
					ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
					ДанныеСтроки["Валюта" + СчПоказателей] = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПоказательВР,"Валюта");
				КонецЕсли;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ДанныеСтроки["Показатель" + СчПоказателей] = 0;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"] Тогда
				ДанныеСтроки["ТарифныйРазряд" + СчПоказателей] = Справочники.ТарифныеРазряды.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ДанныеСтроки["Валюта" + СчПоказателей]		= Справочники.Валюты.ПустаяСсылка();
			ДанныеСтроки["Показатель" + СчПоказателей]	= 0;
			ДанныеСтроки["ТарифныйРазряд" + СчПоказателей]= Справочники.ТарифныеРазряды.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;

	//запретим выбирать предопределенные в.р. пособий
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляИзменениеУсловийОплатыОтпускаПоУходуЗаРебенком");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	СписокПособий = Новый СписокЗначений();
	СписокПособий.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	СписокПособий.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет);
	СписокПособий.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты);
	
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = СписокПособий;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	СписокПособий = Новый СписокЗначений();
	СписокПособий.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	СписокПособий.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет);
	СписокПособий.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускПоУходуЗаРебенкомБезОплаты);
	
	Значение = ПроцедурыПоискаПоСтроке.ПолучитьСписокВидовРасчетаПоПервымСимволамИмениРасчета(Текст, "ОсновныеНачисленияОрганизаций", "Не (Ссылка В(&СписокПособий))", Новый Структура("СписокПособий", СписокПособий), СтандартнаяОбработка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ПлановыеУдержания

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля Начисления
//
Процедура ОбработчикОжиданияПлановыеУдержанияПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ПлановыеУдержания, мСведенияОВидахРасчета);
	
КонецПроцедуры // ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки


Процедура ПлановыеУдержанияВидРасчетаПриИзменении(Элемент)

	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Элемент.Значение);
	ДанныеСтроки = ЭлементыФормы.ПлановыеУдержания.ТекущиеДанные;
	Если Не СведенияОВидеРасчета.РазмерТребуется Тогда
		Для СчПоказателей = 1 По 6 Цикл
			ДанныеСтроки["Показатель" + СчПоказателей] = 0;
		КонецЦикла;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ПлановыеУдержания, мСведенияОВидахРасчета);

КонецПроцедуры

Процедура ПлановыеУдержанияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.УдержанияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаОтпускПоУходуЗаРебенком");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = ПроведениеРасчетов.ПолучитьСписокВариантовУдержанийОрганизации();
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеРавно;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Значение = ПланыВидовРасчета.УдержанияОрганизаций.ИЛФиксированнойСуммой;
	ФормаВыбораВидаРасчета.Отбор.Ссылка.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();

КонецПроцедуры

Процедура ПлановыеУдержанияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ПлановыеУдержания"), Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"));
КонецПроцедуры

Процедура ПлановыеУдержанияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ПлановыеУдержания"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.УдержанияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" вида действия строки начислений
Процедура ПлановыеУдержанияДействиеПриИзменении(Элемент)
	
	ТекущаяСтрокаВидРасчета = ЭлементыФормы.ПлановыеУдержания.ТекущаяСтрока.ВидРасчета;

	ТекущаяСтрока = ЭлементыФормы.ПлановыеУдержания.ТекущаяСтрока;
	Если Элемент.Значение = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Для СчПоказателей = 1 По 6 Цикл
			ТекущаяСтрока["Показатель" + СчПоказателей] = 0;
			ТекущаяСтрока["Валюта" + СчПоказателей] = Справочники.Валюты.ПустаяСсылка();
		КонецЦикла;
	КонецЕсли; 
		
КонецПроцедуры

Процедура ПлановыеУдержанияПриАктивизацииСтроки(Элемент)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтроки(Элемент, ЭлементыФормы.КоманднаяПанельПлановыеУдержания);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияПлановыеУдержанияПриАктивизацииСтроки", 0.05, Истина);	 	
	
КонецПроцедуры

Процедура ПлановыеУдержанияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриПолученииДанных(ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ОформлениеСтроки.ДанныеСтроки, мСведенияОВидахРасчета, Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ РасчетСреднего

Процедура ПериодРасчетаСреднегоЗаработкаНачалоПриИзменении(Элемент)
	РасчетСреднего.Очистить();
КонецПроцедуры

Процедура ПериодРасчетаСреднегоЗаработкаОкончаниеПриИзменении(Элемент)
	РасчетСреднего.Очистить();
КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода.
//
Процедура ВыбПериодНажатие(Элемент)
	
	мНастройкаПериода.УстановитьПериод(ПериодРасчетаСреднегоЗаработкаНачало, КонецДня(ПериодРасчетаСреднегоЗаработкаОкончание));
	
	Если мНастройкаПериода.Редактировать() Тогда
		ПериодРасчетаСреднегоЗаработкаНачало	= мНастройкаПериода.ПолучитьДатуНачала();
		ПериодРасчетаСреднегоЗаработкаОкончание	= мНастройкаПериода.ПолучитьДатуОкончания();
		РасчетСреднего.Очистить();
	КонецЕсли;
	
КонецПроцедуры // ВыбПериодНажатие()

Процедура ГодРасчетаПриИзменении(Элемент)
	РасчетСреднего2011.Очистить();
КонецПроцедуры

Процедура РасчетСреднегоПриПолученииДанных(Элемент, ОформленияСтрок)
	ПроставитьДолжностьИПодразделение(Элемент, ОформленияСтрок)	
КонецПроцедуры

Процедура РасчетСреднегоПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОтпускПоУходуЗаРебенкомПереопределяемый.РасчетСреднегоПриВыводеСтрокиДополнительно(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

Процедура РасчетСреднего2011ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование Тогда
		ДанныеСтроки.Страхователь = Справочники.Работодатели.ТекущийРаботодатель;
		ДанныеСтроки.РасчетныйГод = ПервыйГодРасчета;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ РасчетСреднего

Процедура РасчетСреднегоСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НаборДанных = ПроцедурыУправленияПерсоналом.ПодборДанныхПоФизлицу(ЭтаФорма, Элемент, Физлицо, мГоловнаяОрганизация, ДатаНачала, Истина);
	Если НаборДанных <> Неопределено Тогда
		Элемент.Значение = НаборДанных.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры // РасчетСреднегоСотрудникНачалоВыбора()

Процедура РасчетСреднегоВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Элемент.СписокВыбора;
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"));
	
КонецПроцедуры

Процедура РасчетСреднегоВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ ДанныеОДетях

Процедура ДанныеОДетяхПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ЕстьКолонкаПодтверждающийДокумент = Элемент.Колонки.КолонкаПодтверждающийДокумент.Видимость;
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		Если ЕстьКолонкаПодтверждающийДокумент Тогда
			ОформлениеСтроки.Ячейки.КолонкаПодтверждающийДокумент.Видимость = Ложь
		КонецЕсли;
	
	КонецЦикла;
	
КонецПроцедуры

Процедура ДанныеОДетяхПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если Копирование Тогда
			ДанныеСтроки.НомерДокумента = ""
		Иначе
			ДанныеСтроки.ВидПодтверждающегоДокумента = Перечисления.ВидыПодтверждающихДокументовОтпускаПоУходу.СвидетельствоОРождении;
			ДанныеСтроки.НаименованиеПодтверждающегоДокумента = "Свидетельство о рождении";
		КонецЕсли;
		ПоследнийРебенок = 0;
		Для каждого СтрокаТЧ Из ДанныеОДетях Цикл
		    ПоследнийРебенок = Макс(СтрокаТЧ.Очередность, ПоследнийРебенок)
		КонецЦикла;
		ДанныеСтроки.Очередность = ПоследнийРебенок + 1
	КонецЕсли;
КонецПроцедуры

Процедура ДанныеОДетяхВидПодтверждающегоДокументаПриИзменении(Элемент)
	ДанныеСтроки = ЭлементыФормы.ДанныеОДетях.ТекущиеДанные;
	ВидПодтверждающегоДокумента = Элемент.Значение;
	Если ВидПодтверждающегоДокумента = Перечисления.ВидыПодтверждающихДокументовОтпускаПоУходу.СвидетельствоОРождении Тогда
		ДанныеСтроки.НаименованиеПодтверждающегоДокумента = "Свидетельство о рождении";
	ИначеЕсли ВидПодтверждающегоДокумента = Перечисления.ВидыПодтверждающихДокументовОтпускаПоУходу.РешениеОбУстановленииОпеки Тогда
		ДанныеСтроки.НаименованиеПодтверждающегоДокумента = "Решение об установлении опеки";
	ИначеЕсли ВидПодтверждающегоДокумента = Перечисления.ВидыПодтверждающихДокументовОтпускаПоУходу.СвидетельствоОСмерти Тогда
		ДанныеСтроки.НаименованиеПодтверждающегоДокумента = "Свидетельство о смерти";
	Иначе
		ДанныеСтроки.НаименованиеПодтверждающегоДокумента = "";
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ
// 
мСведенияОВидахРасчета = Новый Соответствие;
мРассчитываемыеТаблицы = Новый Структура("Начисления,РасчетСреднего");

мОбработкаПодбораПоСтроке = Ложь;
мТекстПодбораПоСтроке = "";
мПоследнееЗначениеЭлементаПодбораПоСтроке = Неопределено;