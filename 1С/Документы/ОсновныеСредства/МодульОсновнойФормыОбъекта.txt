////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Документы и даты изменения состояний ОС
// Документы - регистраторы событий. Даты документов - даты реальных событий
// и в общем случае могут отличаться от дат регистраторов

Перем ДокументПринятияКУчетуУУ;
Перем ДокументПринятияКУчетуУУДата;

Перем ДокументВводаВЭксплуатациюУУ;
Перем ДокументВводаВЭксплуатациюУУДата;

Перем ДокументСнятоСУчетаУУ;
Перем ДокументСнятоСУчетаУУДата;

Перем ДокументПринятияКУчетуБУ;
Перем ДокументПринятияКУчетуБУДата;

Перем ДокументВводаВЭксплуатациюБУ;
Перем ДокументВводаВЭксплуатациюБУДата;

Перем ДокументСнятоСУчетаБУ;
Перем ДокументСнятоСУчетаБУДата;

Перем ТекОрганизация;

// Признаки применения УСН в организации
Перем ЭтоУСН;
Перем ЭтоРасходыУСН;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Для работы с документами по учету имущества и транспорта
Перем ДокументПринятияКУчетуИмущДекл;
Перем ДокументПринятияКУчетуИмущДеклНалоговыйОрган;

Перем ДокументПринятияКУчетуТранспортДекл;
Перем ДокументПринятияКУчетуТранспортДеклНалоговыйОрган;

Перем мФормироватьНаименованиеПолноеАвтоматически; // надо ли формировать автоматически НаименованиеПолное, или нет

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Заполнение полей формы данными, полученными из регистров.
//
Процедура ЗаполнитьОписания()

	// Данные для заполнения закладки "Управленческий учет"
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
	Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЕСТЬNULL(ПервоначальныеСведенияОССрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимостьУУ,
	|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОССрезПоследних.СпособНачисленияАмортизации) КАК СпособАмортизацииУУ,
	|	ПервоначальныеСведенияОССрезПоследних.ПараметрВыработки КАК ПараметрВыработкиУУ,
	|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОССрезПоследних.ПараметрВыработки.ЕдиницаИзмерения) КАК ЕдиницаПараметраВыработкиУУ,
	|	СоставОССрезПоследних.ВСоставе КАК ВСоставе,
	|	МестонахождениеОССрезПоследних.МОЛ КАК МОЛУУ,
	|	МестонахождениеОССрезПоследних.Местонахождение КАК ПодразделениеУУ,
	|	НоменклатураОсновныхСредств.Номенклатура КАК Номенклатура,
	|	НоменклатураОсновныхСредств.Характеристика КАК Характеристика,
	|	ЕСТЬNULL(ПараметрыАмортизацииОССрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОССрезПоследних.ОбъемПродукцииРабот, 0) КАК ОбъемРаботУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОССрезПоследних.КоэффициентАмортизации, 0) КАК ПроцентГодовойАмортизацииУУ,
	|	ЕСТЬNULL(ПараметрыАмортизацииОССрезПоследних.КоэффициентУскорения, 0) КАК КоэфУскоренияУУ,
	|	ГрафикиАмортизацииОССрезПоследних.ГрафикАмортизации КАК ГодовойГрафикУУ,
	|	СпособыОтраженияРасходовПоАмортизацииОССрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК НаправленияАмортизацииУУ,
	|	ЕСТЬNULL(СтоимостьОСОстатки.СтоимостьОстаток, 0) КАК ТекущаяСтоимостьУУ,
	|	ЕСТЬNULL(СтоимостьОСОстатки.АмортизацияОстаток, 0) КАК ТекАмортизацияУУ
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОС.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОССрезПоследних
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоставОС.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК СоставОССрезПоследних
	|		ПО ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство = СоставОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОС.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОССрезПоследних
	|		ПО ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство = МестонахождениеОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОС.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОССрезПоследних
	|		ПО ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиАмортизацииОС.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ГрафикиАмортизацииОССрезПоследних
	|		ПО ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство = ГрафикиАмортизацииОССрезПоследних.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОС.Остатки(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК СтоимостьОСОстатки
	|		ПО ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство = СтоимостьОСОстатки.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			НоменклатураОсновныхСредств.ОсновноеСредство КАК ОсновноеСредство,
	|			НоменклатураОсновныхСредств.Номенклатура КАК Номенклатура,
	|			НоменклатураОсновныхСредств.Характеристика КАК Характеристика
	|		ИЗ
	|			РегистрСведений.НоменклатураОсновныхСредств КАК НоменклатураОсновныхСредств
	|		ГДЕ
	|			НоменклатураОсновныхСредств.ОсновноеСредство = &ОсновноеСредство) КАК НоменклатураОсновныхСредств
	|		ПО ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство = НоменклатураОсновныхСредств.ОсновноеСредство
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОС.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК СпособыОтраженияРасходовПоАмортизацииОССрезПоследних
	|		ПО ПервоначальныеСведенияОССрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОССрезПоследних.ОсновноеСредство
	|";
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаЗаписей = РезультатЗапроса.Выгрузить()[0];
		
		ЭлементыФормы.ТекущаяСтоимостьУУ.Значение           = ВыборкаЗаписей.ТекущаяСтоимостьУУ;
		ЭлементыФормы.ТекАмортизацияУУ.Значение             = ВыборкаЗаписей.ТекАмортизацияУУ;
		ЭлементыФормы.ПервоначальнаяСтоимостьУУ.Значение    = ВыборкаЗаписей.ПервоначальнаяСтоимостьУУ;
		ЭлементыФормы.СпособАмортизацииУУ.Значение          = ВыборкаЗаписей.СпособАмортизацииУУ;
		ЭлементыФормы.ПараметрВыработкиУУ.Значение          = ВыборкаЗаписей.ПараметрВыработкиУУ;
		ЭлементыФормы.ЕдиницаПараметраВыработкиУУ.Заголовок = ВыборкаЗаписей.ЕдиницаПараметраВыработкиУУ;
		ЭлементыФормы.ВСоставе.Значение                     = ВыборкаЗаписей.ВСоставе;
		ЭлементыФормы.МОЛУУ.Значение                        = ВыборкаЗаписей.МОЛУУ;
		ЭлементыФормы.ПодразделениеУУ.Значение              = ВыборкаЗаписей.ПодразделениеУУ;
		ЭлементыФормы.Номенклатура.Значение                 = ВыборкаЗаписей.Номенклатура;
		ЭлементыФормы.Характеристика.Значение               = ВыборкаЗаписей.Характеристика;
		ЭлементыФормы.СрокИспользованияУУ.Значение          = ВыборкаЗаписей.СрокИспользованияУУ;
		ЭлементыФормы.ОбъемРаботУУ.Значение                 = ВыборкаЗаписей.ОбъемРаботУУ;
		ЭлементыФормы.ПроцентГодовойАмортизацииУУ.Значение  = ВыборкаЗаписей.ПроцентГодовойАмортизацииУУ;
		ЭлементыФормы.КоэфУскоренияУУ.Значение              = ВыборкаЗаписей.КоэфУскоренияУУ;
		ЭлементыФормы.ГодовойГрафикУУ.Значение              = ВыборкаЗаписей.ГодовойГрафикУУ;
		ЭлементыФормы.НаправленияАмортизацииУУ.Значение     = ВыборкаЗаписей.НаправленияАмортизацииУУ;
		
	КонецЕсли;

	// Поиск организации, по которой основное средство отражалось в регл. учете
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
	Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
	|";
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		ТекОрганизация = РезультатЗапроса.Выгрузить()[0].Организация;
		ЭлементыФормы.Организация.Значение = ТекОрганизация;
		
		ЭтоУСН  = НалоговыйУчетУСН.ПрименениеУСН(ТекОрганизация, ДатаСведений);
		Если ЭтоУСН Тогда
			ЭтоРасходыУСН = НЕ НалоговыйУчетУСН.ПрименениеУСНДоходы(ТекОрганизация, ДатаСведений);
		Иначе
			ЭтоРасходыУСН = Ложь;
		КонецЕсли;
		
	Иначе
		ЭтоУСН        = Ложь;
		ЭтоРасходыУСН = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекОрганизация) Тогда
		
		// Данные для заполнения закладки "Бухгалтерский учет"
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
		Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
		Запрос.УстановитьПараметр("Организация",      ТекОрганизация);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ИнвентарныйНомер КАК ИнвентарныйНомер,
		|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособПоступления) КАК СпособПоступленияБУ,
		|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.СпособНачисленияАмортизации) КАК СпособАмортизацииБУ,
		|	ЕСТЬNULL(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПервоначальнаяСтоимость, 0) КАК ПервоначальнаяСтоимостьБУ,
		|	ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки КАК ПараметрВыработкиБУ,
		|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ПараметрВыработки.ЕдиницаИзмерения) КАК ЕдиницаПараметраВыработкиБУ,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.МОЛ КАК МОЛБУ,
		|	МестонахождениеОСБухгалтерскийУчетСрезПоследних.Местонахождение КАК ПодразделениеБУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияБУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОбъемПродукцииРабот, 0) КАК ОбъемРаботБУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентАмортизации, 0) КАК ПроцентГодовойАмортизацииБУ,
		|	ЕСТЬNULL(ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.КоэффициентУскорения, 0) КАК КоэфУскоренияБУ,
		|	ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ГрафикАмортизации КАК ГодовойГрафикБУ,
		|	СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК НаправленияАмортизацииБУ,
		|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаСтоимостиБУ,
		|	СчетаБухгалтерскогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетУчетаАмортизацииБУ,
		|	ЕСТЬNULL(СтоимостьОСБухгалтерскийУчетОстатки.СтоимостьОстаток, 0) КАК ТекущаяСтоимостьБУ,
		|	ЕСТЬNULL(СтоимостьОСБухгалтерскийУчетОстатки.АмортизацияОстаток, 0) КАК ТекАмортизацияБУ
		|ИЗ
		|	РегистрСведений.ПервоначальныеСведенияОСБухгалтерскийУчет.СрезПоследних(&ДатаСведений, ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.МестонахождениеОСБухгалтерскийУчет.СрезПоследних(
		|		&ДатаСведений,
		|		Организация = &Организация
		|		    И ОсновноеСредство = &ОсновноеСредство) КАК МестонахождениеОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = МестонахождениеОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|		&ДатаСведений,
		|		Организация = &Организация
		|		    И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ГрафикиАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|		&ДатаСведений,
		|		Организация = &Организация
		|		    И ОсновноеСредство = &ОсновноеСредство) КАК ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = ГрафикиАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчет.СрезПоследних(
		|		&ДатаСведений,
		|		Организация = &Организация
		|		    И ОсновноеСредство = &ОсновноеСредство) КАК СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних
		|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаБухгалтерскогоУчетаОС.СрезПоследних(
		|		&ДатаСведений,
		|		Организация = &Организация
		|		    И ОсновноеСредство = &ОсновноеСредство) КАК СчетаБухгалтерскогоУчетаОССрезПоследних
		|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СчетаБухгалтерскогоУчетаОССрезПоследних.ОсновноеСредство
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСБухгалтерскийУчет.Остатки(
		|		&ДатаСведений,
		|		Организация = &Организация
		|		    И ОсновноеСредство = &ОсновноеСредство) КАК СтоимостьОСБухгалтерскийУчетОстатки
		|		ПО ПервоначальныеСведенияОСБухгалтерскийУчетСрезПоследних.ОсновноеСредство = СтоимостьОСБухгалтерскийУчетОстатки.ОсновноеСредство
		|";
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			ВыборкаЗаписей = РезультатЗапроса.Выгрузить()[0];
			
			ЭлементыФормы.ТекущаяСтоимостьБУ.Значение           = ВыборкаЗаписей.ТекущаяСтоимостьБУ;
			ЭлементыФормы.ТекАмортизацияБУ.Значение             = ВыборкаЗаписей.ТекАмортизацияБУ;
			ЭлементыФормы.ИнвентарныйНомер.Значение             = ВыборкаЗаписей.ИнвентарныйНомер;
			ЭлементыФормы.СпособПоступленияБУ.Значение          = ВыборкаЗаписей.СпособПоступленияБУ;
			ЭлементыФормы.СпособАмортизацииБУ.Значение          = ВыборкаЗаписей.СпособАмортизацииБУ;
			ЭлементыФормы.ПервоначальнаяСтоимостьБУ.Значение    = ВыборкаЗаписей.ПервоначальнаяСтоимостьБУ;
			ЭлементыФормы.ПараметрВыработкиБУ.Значение          = ВыборкаЗаписей.ПараметрВыработкиБУ;
			ЭлементыФормы.ЕдиницаПараметраВыработкиБУ.Заголовок = ВыборкаЗаписей.ЕдиницаПараметраВыработкиБУ;
			ЭлементыФормы.МОЛБУ.Значение                        = ВыборкаЗаписей.МОЛБУ;
			ЭлементыФормы.ПодразделениеБУ.Значение              = ВыборкаЗаписей.ПодразделениеБУ;
			ЭлементыФормы.СрокИспользованияБУ.Значение          = ВыборкаЗаписей.СрокИспользованияБУ;
			ЭлементыФормы.ОбъемРаботБУ.Значение                 = ВыборкаЗаписей.ОбъемРаботБУ;
			ЭлементыФормы.ПроцентГодовойАмортизацииБУ.Значение  = ВыборкаЗаписей.ПроцентГодовойАмортизацииБУ;
			ЭлементыФормы.КоэфУскоренияБУ.Значение              = ВыборкаЗаписей.КоэфУскоренияБУ;
			ЭлементыФормы.ГодовойГрафикБУ.Значение              = ВыборкаЗаписей.ГодовойГрафикБУ;
			ЭлементыФормы.НаправленияАмортизацииБУ.Значение     = ВыборкаЗаписей.НаправленияАмортизацииБУ;
			ЭлементыФормы.СчетУчетаСтоимостиБУ.Значение         = ВыборкаЗаписей.СчетУчетаСтоимостиБУ;
			ЭлементыФормы.СчетУчетаАмортизацииБУ.Значение       = ВыборкаЗаписей.СчетУчетаАмортизацииБУ;
			
		КонецЕсли;
		
		ЭтоУСН = НалоговыйУчетУСН.ПрименениеУСН(ТекОрганизация, ДатаСведений);
		
		Если НЕ ЭтоУСН тогда
			
			// Данные для заполнения закладки "Налоговый учет"
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
			Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
			Запрос.УстановитьПараметр("Организация",      ТекОрганизация);
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.МетодНачисленияАмортизации) КАК СпособАмортизацииНУ,
			|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьНУ, 0) КАК ПервоначальнаяСтоимостьНУ,
			|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходов КАК ПорядокВключенияСтоимостиВСоставРасходовНУ,
			|	ЕСТЬNULL(ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокИспользованияНУ,
			|	СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчетСрезПоследних.СпособыОтраженияРасходовПоАмортизации КАК НаправленияАмортизацииНУ,
			|	СчетаНалоговогоУчетаОССрезПоследних.СчетУчета КАК СчетУчетаСтоимостиНУ,
			|	СчетаНалоговогоУчетаОССрезПоследних.СчетНачисленияАмортизации КАК СчетУчетаАмортизацииНУ,
			|	ЕСТЬNULL(НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.СпециальныйКоэффициент, 0) КАК СпецКоэффициентНУ,
			|	ЕСТЬNULL(СтоимостьОСНалоговыйУчетОстатки.СтоимостьОстаток, 0) КАК ТекущаяСтоимостьНУ,
			|	ЕСТЬNULL(СтоимостьОСНалоговыйУчетОстатки.АмортизацияОстаток, 0) КАК ТекАмортизацияНУ
			|ИЗ
			|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
			|		&ДатаСведений,
			|		Организация = &Организация
			|			И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПараметрыАмортизацииОСНалоговыйУчет.СрезПоследних(
			|		&ДатаСведений,
			|		Организация = &Организация
			|			И ОсновноеСредство = &ОсновноеСредство) КАК ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних
			|		ПО ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство = ПараметрыАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчет.СрезПоследних(
			|		&ДатаСведений,
			|		Организация = &Организация
			|			И ОсновноеСредство = &ОсновноеСредство) КАК СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчетСрезПоследних
			|		ПО ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство = СпособыОтраженияРасходовПоАмортизацииОСНалоговыйУчетСрезПоследних.ОсновноеСредство
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СчетаНалоговогоУчетаОС.СрезПоследних(
			|		&ДатаСведений,
			|		Организация = &Организация
			|			И ОсновноеСредство = &ОсновноеСредство) КАК СчетаНалоговогоУчетаОССрезПоследних
			|		ПО ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство = СчетаНалоговогоУчетаОССрезПоследних.ОсновноеСредство
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчет.СрезПоследних(
			|		&ДатаСведений,
			|		Организация = &Организация
			|			И ОсновноеСредство = &ОсновноеСредство) КАК НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних
			|		ПО ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство = НачислениеАмортизацииОССпециальныйКоэффициентНалоговыйУчетСрезПоследних.ОсновноеСредство
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.СтоимостьОСНалоговыйУчет.Остатки(
			|		&ДатаСведений,
			|		Организация = &Организация
			|			И ОсновноеСредство = &ОсновноеСредство) КАК СтоимостьОСНалоговыйУчетОстатки
			|		ПО ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство = СтоимостьОСНалоговыйУчетОстатки.ОсновноеСредство			
			|";
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ВыборкаЗаписей = РезультатЗапроса.Выгрузить()[0];
			
				ЭлементыФормы.СпособАмортизацииНУ.Значение                        = ВыборкаЗаписей.СпособАмортизацииНУ;
				ЭлементыФормы.ПервоначальнаяСтоимостьНУ.Значение                  = ВыборкаЗаписей.ПервоначальнаяСтоимостьНУ;
				ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовНУ.Значение = ВыборкаЗаписей.ПорядокВключенияСтоимостиВСоставРасходовНУ;
				ЭлементыФормы.СрокИспользованияНУ.Значение                        = ВыборкаЗаписей.СрокИспользованияНУ;
				ЭлементыФормы.НаправленияАмортизацииНУ.Значение                   = ВыборкаЗаписей.НаправленияАмортизацииНУ;
				ЭлементыФормы.СчетУчетаСтоимостиНУ.Значение                       = ВыборкаЗаписей.СчетУчетаСтоимостиНУ;
				ЭлементыФормы.СчетУчетаАмортизацииНУ.Значение                     = ВыборкаЗаписей.СчетУчетаАмортизацииНУ;
				ЭлементыФормы.СпецКоэффициентНУ.Значение                          = ВыборкаЗаписей.СпецКоэффициентНУ;
				ЭлементыФормы.ТекущаяСтоимостьНУ.Значение                         = ВыборкаЗаписей.ТекущаяСтоимостьНУ;
				ЭлементыФормы.ТекАмортизацияНУ.Значение                           = ВыборкаЗаписей.ТекАмортизацияНУ;
				
			КонецЕсли;
				
		Иначе
			
			// Данные для заполнения закладки "Налоговый учет (УСН)"
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
			Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
			Запрос.УстановитьПараметр("Организация",      ТекОрганизация);
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПервоначальнаяСтоимостьУСН, 0) КАК ПервоначальнаяСтоимостьУСН,
			|	ЕСТЬNULL(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.СрокПолезногоИспользования, 0) КАК СрокПолезногоИспользования,
			|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ДатаПриобретения КАК ДатаПриобретения,
			|	ПРЕДСТАВЛЕНИЕ(ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ПорядокВключенияСтоимостиВСоставРасходовУСН) КАК ПорядокВключенияСтоимостиВСоставРасходовУСН
			|ИЗ
			|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчетУСН.СрезПоследних(
			|		&ДатаСведений,
			|		Организация = &Организация
			|			И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
			|";
			РезультатЗапроса = Запрос.Выполнить();
			
			Если НЕ РезультатЗапроса.Пустой() Тогда
				
				ВыборкаЗаписей = РезультатЗапроса.Выгрузить()[0];
				
				ЭлементыФормы.ПервоначальнаяСтоимостьУСН.Значение                  = ВыборкаЗаписей.ПервоначальнаяСтоимостьУСН;
				ЭлементыФормы.СрокИспользованияУСН.Значение 	                   = ВыборкаЗаписей.СрокПолезногоИспользования;
				ЭлементыФормы.ДатаПриобретения.Значение			                   = ВыборкаЗаписей.ДатаПриобретения;
				ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Значение = ВыборкаЗаписей.ПорядокВключенияСтоимостиВСоставРасходовУСН;
			
			КонецЕсли;
		
	    КонецЕсли;
		
	КонецЕсли;
    
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();

КонецПроцедуры // ЗаполнитьОписания()

Процедура ЗаполнитьТекстПроДокументы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ОсновноеСредство", Ссылка);
	Запрос.УстановитьПараметр("ДатаСведений",     ДатаСведений);
	Запрос.УстановитьПараметр("Организация",      ТекОрганизация);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних.ОсновноеСредство
	|ИЗ
	|	РегистрСведений.ПервоначальныеСведенияОСНалоговыйУчет.СрезПоследних(
	|		&ДатаСведений,
	|		Организация = &Организация
	|			И ОсновноеСредство = &ОсновноеСредство) КАК ПервоначальныеСведенияОСНалоговыйУчетСрезПоследних
	|";
	РезультатЗапроса = Запрос.Выполнить();
	ЕстьНалоговый = (НЕ РезультатЗапроса.Пустой());

	Если ДокументПринятияКУчетуУУ = Неопределено Тогда
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуУУ.Заголовок = "Ввести документ принятия к учету";
		ЭлементыФормы.ПринятоКУчетуУУ.Значение = 0;
	Иначе
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуУУ.Заголовок = Строка(ДокументПринятияКУчетуУУ);
		ЭлементыФормы.ПринятоКУчетуУУ.Значение = ДокументПринятияКУчетуУУДата;
	КонецЕсли;
	
	Если ДокументПринятияКУчетуБУ = Неопределено Тогда
		
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуБУ.Заголовок = "Ввести документ принятия к учету";
		ЭлементыФормы.ПринятоКУчетуБУ.Значение = 0;
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуНУ.Заголовок = "Ввести документ принятия к учету";
		ЭлементыФормы.ПринятоКУчетуНУ.Значение = 0;
		
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуУСН.Заголовок = "Ввести документ принятия к учету";
		ЭлементыФормы.ПринятоКУчетуУСН.Значение = 0;
		
	Иначе
		
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуБУ.Заголовок = Строка(ДокументПринятияКУчетуБУ);
		ЭлементыФормы.ПринятоКУчетуБУ.Значение = ДокументПринятияКУчетуБУДата;
		
		Если ЕстьНалоговый Тогда
		
			ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуНУ.Заголовок = Строка(ДокументПринятияКУчетуБУ);
			ЭлементыФормы.ПринятоКУчетуНУ.Значение = ДокументПринятияКУчетуБУДата;
		Иначе
			
			ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуНУ.Заголовок = "Ввести документ принятия к учету";
			ЭлементыФормы.ПринятоКУчетуНУ.Значение = 0;
		
		КонецЕсли;
		
		ЭлементыФормы.ГиперссылкаДокументПринятияКУчетуУСН.Заголовок = Строка(ДокументПринятияКУчетуБУ);
		ЭлементыФормы.ПринятоКУчетуУСН.Значение = ДокументПринятияКУчетуБУДата;
		
	КонецЕсли;
	
	Если ДокументСнятоСУчетаУУ = Неопределено Тогда
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаУУ.Заголовок = "Ввести документ списания";
		ЭлементыФормы.СнятоСУчетаУУ.Значение = 0;
	Иначе
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаУУ.Заголовок = Строка(ДокументСнятоСУчетаУУ);
		ЭлементыФормы.СнятоСУчетаУУ.Значение = ДокументСнятоСУчетаУУДата;
	КонецЕсли;
	
	Если ДокументСнятоСУчетаБУ = Неопределено Тогда
		
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаБУ.Заголовок = "Ввести документ списания";
		ЭлементыФормы.СнятоСУчетаБУ.Значение = 0;
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаНУ.Заголовок = "Ввести документ списания";
		ЭлементыФормы.СнятоСУчетаНУ.Значение = 0;
		
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаУСН.Заголовок = "Ввести документ списания";
		ЭлементыФормы.СнятоСУчетаУСН.Значение = 0;
		
	Иначе
		
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаБУ.Заголовок = Строка(ДокументСнятоСУчетаБУ);
		ЭлементыФормы.СнятоСУчетаБУ.Значение = ДокументСнятоСУчетаБУДата;
		
		Если ЕстьНалоговый Тогда
		
			ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаНУ.Заголовок = Строка(ДокументСнятоСУчетаБУ);
			ЭлементыФормы.СнятоСУчетаНУ.Значение = ДокументСнятоСУчетаБУДата;
			
		Иначе
			
			ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаНУ.Заголовок = "Ввести документ списания";
			ЭлементыФормы.СнятоСУчетаНУ.Значение = 0;
		
		КонецЕсли;
		
		ЭлементыФормы.ГиперссылкаДокументСнятияСУчетаУСН.Заголовок = Строка(ДокументСнятоСУчетаБУ);
		ЭлементыФормы.СнятоСУчетаУСН.Значение = ДокументСнятоСУчетаБУДата;
		
	КонецЕсли;
	
	Если ДокументВводаВЭксплуатациюУУ = Неопределено Тогда
		
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюУУ.Заголовок = "Ввести документ ввода в эксплуатацию";
		ЭлементыФормы.ВведеноВЭксплуатациюУУ.Значение = 0;
		
	Иначе
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюУУ.Заголовок = Строка(ДокументВводаВЭксплуатациюУУ);
		ЭлементыФормы.ВведеноВЭксплуатациюУУ.Значение = ДокументВводаВЭксплуатациюУУДата;
		
	КонецЕсли;
	
	Если ДокументВводаВЭксплуатациюБУ = Неопределено Тогда
		
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюБУ.Заголовок = "Ввести документ ввода в эксплуатацию";
		ЭлементыФормы.ВведеноВЭксплуатациюБУ.Значение = 0;
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюНУ.Заголовок = "Ввести документ ввода в эксплуатацию";
		ЭлементыФормы.ВведеноВЭксплуатациюНУ.Значение = 0;
		
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюУСН.Заголовок = "Ввести документ ввода в эксплуатацию";
		ЭлементыФормы.ВведеноВЭксплуатациюУСН.Значение = 0;
		
	Иначе
		
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюБУ.Заголовок = Строка(ДокументВводаВЭксплуатациюБУ);
		ЭлементыФормы.ВведеноВЭксплуатациюБУ.Значение = ДокументВводаВЭксплуатациюБУДата;
		
		Если ЕстьНалоговый Тогда
		
			ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюНУ.Заголовок = Строка(ДокументВводаВЭксплуатациюБУ);
			ЭлементыФормы.ВведеноВЭксплуатациюНУ.Значение = ДокументВводаВЭксплуатациюБУДата;
		Иначе
			
			ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюНУ.Заголовок = "Ввести документ ввода в эксплуатацию";
			ЭлементыФормы.ВведеноВЭксплуатациюНУ.Значение = 0;
		
		КонецЕсли;
		
		ЭлементыФормы.ГиперссылкаДокументВводаВЭксплуатациюУСН.Заголовок = Строка(ДокументВводаВЭксплуатациюБУ);
		ЭлементыФормы.ВведеноВЭксплуатациюУСН.Значение = ДокументВводаВЭксплуатациюБУДата;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьДокументыСостоянияОС()
	
	СтруктПараметров   			 	 = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ПринятоКУчету,Истина);
	ДокументПринятияКУчетуУУ 	 	 = СтруктПараметров.Регистратор;
	ДокументПринятияКУчетуУУДата 	 = СтруктПараметров.Дата;
	
	СтруктПараметров   			 	 = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,Истина);
	ДокументВводаВЭксплуатациюУУ 	 = СтруктПараметров.Регистратор;
	ДокументВводаВЭксплуатациюУУДата = СтруктПараметров.Дата;
	
	СтруктПараметров   			 	 = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.СнятоСУчета,Истина);
	ДокументСнятоСУчетаУУ 		 	 = СтруктПараметров.Регистратор;
	ДокументСнятоСУчетаУУДата	 	 = СтруктПараметров.Дата;
	
	СтруктПараметров   			 	 = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ПринятоКУчету,Ложь,Организация);
	ДокументПринятияКУчетуБУ 	 	 = СтруктПараметров.Регистратор;
	ДокументПринятияКУчетуБУДата 	 = СтруктПараметров.Дата;
	
	СтруктПараметров   			 	 = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.ВведеноВЭксплуатацию,Ложь,Организация);
	ДокументВводаВЭксплуатациюБУ 	 = СтруктПараметров.Регистратор;
	ДокументВводаВЭксплуатациюБУДата = СтруктПараметров.Дата;
	
	СтруктПараметров   				 = УправлениеВнеоборотнымиАктивами.ПолучитьАтрибутыСостоянияОС(Ссылка, Перечисления.СостоянияОС.СнятоСУчета,Ложь,Организация);
	ДокументСнятоСУчетаБУ 			 = СтруктПараметров.Регистратор;
	ДокументСнятоСУчетаБУДата		 = СтруктПараметров.Дата;

КонецПроцедуры

Процедура УстановитьВидимостьДоступность()
	
	ВалютаУУ = глЗначениеПеременной("ВалютаУправленческогоУчета");

	ЭлементыФормы.УпрВалюта.Заголовок  = ВалютаУУ;
	ЭлементыФормы.УпрВалюта1.Заголовок = ВалютаУУ;
	ЭлементыФормы.УпрВалюта2.Заголовок = ВалютаУУ;
	
	ВалютаБУ = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	ЭлементыФормы.РеглВалюта.Заголовок  = ВалютаБУ;
	ЭлементыФормы.РеглВалюта1.Заголовок = ВалютаБУ;
	ЭлементыФормы.РеглВалюта2.Заголовок = ВалютаБУ;
	
	ВалютаНУ = глЗначениеПеременной("ВалютаРегламентированногоУчета");
	
	ЭлементыФормы.РеглВалюта3.Заголовок = ВалютаНУ;
	ЭлементыФормы.РеглВалюта4.Заголовок = ВалютаНУ;
	ЭлементыФормы.РеглВалюта5.Заголовок = ВалютаНУ;

	ЭлементыФормы.РеглВалюта6.Заголовок = ВалютаНУ; // УСН
	
	// Установка видимости страниц панелей в зависимости от вида учета
	ЭлементыФормы.Панель.Страницы.Страница3.Видимость = НЕ ЭтоУСН;
	ЭлементыФормы.Панель.Страницы.Страница4.Видимость = ЭтоРасходыУСН;
	
	// установка доступности имущественных реквизитов
	ЭтоИмущество =  ГруппаОС = Перечисления.ГруппыОС.Здания
				ИЛИ ГруппаОС = Перечисления.ГруппыОС.Сооружения;
	
	ЭлементыФормы.ПанельПереключатели.Доступность = ЭтоИмущество;
	ЭлементыФормы.Помещение.Доступность           = ЭтоИмущество;
	ЭлементыФормы.НадписьПомещение.Доступность    = ЭтоИмущество;
	ЭлементыФормы.НадписьНазначениеПомещения.Доступность = ЭтоИмущество;
	ЭлементыФормы.КадастровыйНомер.Доступность    = ЭтоИмущество И ИмеетсяКадастровыйНомер;
	ЭлементыФормы.УсловныйНомер.Доступность       = ЭтоИмущество И НЕ ИмеетсяКадастровыйНомер;
	ЭлементыФормы.НазначениеПомещения.Доступность = ЭтоИмущество И Помещение;
	
	Если ЭтоРасходыУСН Тогда
		ЭлементыФормы.НадписьПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 	= НЕ (ДатаСведений < Дата("20060101"));
		ЭлементыФормы.ПорядокВключенияСтоимостиВСоставРасходовУСН.Видимость 		= НЕ (ДатаСведений < Дата("20060101"));
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьАдрес()
	
	ЭлементыФормы.АдресМестонахождения.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресМестонахождения);
	
КонецПроцедуры

// Процедура проверяет, совпадало ли ранее полное наименование с наименованием,
// и присваивает соответствующее значение переменной мФормироватьНаименованиеПолноеАвтоматически.
//
// Параметры:
//  Нет.
//
Процедура УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

	Если ПустаяСтрока(НаименованиеПолное) 
	 ИЛИ НаименованиеПолное = Наименование Тогда
		мФормироватьНаименованиеПолноеАвтоматически = Истина;
	Иначе
		мФормироватьНаименованиеПолноеАвтоматически = Ложь;
	КонецЕсли;

КонецПроцедуры // УстановитьФлагФормироватьНаименованиеПолноеАвтоматически()

// Процедура проверяет, необходимо ли формировать полное наименование автоматически или нет,
// и, если необходимо, формирует его.
//
// Параметры:
//  Нет.
//
Процедура СформироватьНаименованиеПолноеАвтоматически()

	Если мФормироватьНаименованиеПолноеАвтоматически Тогда
		НаименованиеПолное = Наименование;
	КонецЕсли;

КонецПроцедуры // СформироватьНаименованиеПолноеАвтоматически()
	
////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ДействияФормыРедактироватьКод(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
КонецПроцедуры

Процедура ДействияФормыДокументыКомплектацииОС(Кнопка)

	ФормаСпискаДокументов = Документы.КомплектацияОС.ПолучитьФорму("ФормаСписка", ЭтаФорма);
	ФормаСпискаДокументов.Открыть();

КонецПроцедуры // ДействияФормыДокументыКомплектацииОС()

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	УстановитьКнопкиПечати();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	ДатаСведений = КонецДня(РабочаяДата);
	ЗаполнитьОписания();
	ЗаполнитьАдрес();
	
	ИмеетсяКадастровыйНомер = ЗначениеЗаполнено(КадастровыйНомер) ИЛИ НЕ ЗначениеЗаполнено(УсловныйНомер);
	УстановитьВидимостьДоступность();

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияКода(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Код);
КонецПроцедуры // ПриОткрытии()

Процедура ПередЗаписью(Отказ)
	
	Если ИмеетсяКадастровыйНомер Тогда
		Если ЗначениеЗаполнено(УсловныйНомер) Тогда
			УсловныйНомер = "";
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(КадастровыйНомер) Тогда
			КадастровыйНомер = "";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Обработка записи свойств и категорий
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений = Ссылка;
	Отказ = НЕ ОбработкаОбъектЗначенияСвойств.ЗаписатьЗначенияСвойств();
	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	Отказ = НЕ ОбработкаОбъектКатегорииОбъекта.ЗаписатьКатегорииОбъекта();

КонецПроцедуры

// Обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	УстановитьКнопкиПечати();
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Код);
	
КонецПроцедуры // ПослеЗаписи()

// Обработчик события ПриИзмененииДанных формы.
Процедура ПриИзмененииДанных()
	
	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();
	
	ПрочитатьЗаполнитьСвойстваИЗначения();
	
	ПрочитатьЗаполнитьКатегории();

КонецПроцедуры

// Обработчик события ОбработкаЗаписиНовогоОбъекта формы.
//
Процедура ОбработкаЗаписиНовогоОбъекта(Объект, Источник)

	Если ТипЗнч(Объект) = Тип("ПланВидовХарактеристикОбъект.СвойстваОбъектов") Тогда
		ОбработкаОбъектЗначенияСвойств.ПроверитьДобавитьНовоеСвойство(Объект.Ссылка, ЭлементыФормы.СвойстваИЗначения);
	КонецЕсли;

	Если ТипЗнч(Объект) = Тип("СправочникОбъект.КатегорииОбъектов") Тогда
		ОбработкаОбъектКатегорииОбъекта.ПроверитьДобавитьНовуюКатегорию(Объект.Ссылка, ЭлементыФормы.Категории);
	КонецЕсли;

КонецПроцедуры

Процедура ДатаПросмотраПриИзменении(Элемент)

	Если НЕ ЗначениеЗаполнено(ДатаСведений) Тогда
		ДатаСведений = РабочаяДата;
	КонецЕсли;
	
	ДатаСведений = КонецДня(ДатаСведений);
	
	ЗаполнитьОписания();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

Процедура ГиперссылкаДокументПринятияКУчетуУУНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ДокументПринятияКУчетуУУ) Тогда
		ДокументПринятияКУчетуУУ = Документы["ПринятиеКУчетуОС"].СоздатьДокумент();
		ДокументПринятияКУчетуУУ.Заполнить(Ссылка);
	КонецЕсли;
	ДокументПринятияКУчетуУУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();
	
КонецПроцедуры

Процедура ГиперссылкаДокументСнятияСУчетаУУНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ДокументСнятоСУчетаУУ) Тогда
		ДокументСнятоСУчетаУУ = Документы["СписаниеОС"].СоздатьДокумент();
		ДокументСнятоСУчетаУУ.Заполнить(Ссылка);
	КонецЕсли;
	ДокументСнятоСУчетаУУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();
	
КонецПроцедуры

Процедура ГиперссылкаДокументВводаВЭксплуатациюУУНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(ДокументВводаВЭксплуатациюУУ) Тогда
		ДокументВводаВЭксплуатациюУУ = Документы["ИзменениеСостоянияОС"].СоздатьДокумент();
		ДокументВводаВЭксплуатациюУУ.Заполнить(Ссылка);
	КонецЕсли;
	ДокументВводаВЭксплуатациюУУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();
	
КонецПроцедуры

Процедура ГиперссылкаДокументПринятияКУчетуБУНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(ДокументПринятияКУчетуБУ) Тогда
		ДокументПринятияКУчетуБУ = Документы["ПринятиеКУчетуОС"].СоздатьДокумент();
		ДокументПринятияКУчетуБУ.Заполнить(Ссылка);
	КонецЕсли;
	ДокументПринятияКУчетуБУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();
	ЗаполнитьОписания();
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();
КонецПроцедуры

Процедура ГиперссылкаДокументСнятияСУчетаБУНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(ДокументСнятоСУчетаБУ) Тогда
		ДокументСнятоСУчетаБУ = Документы["СписаниеОС"].СоздатьДокумент();
		ДокументСнятоСУчетаБУ.Заполнить(Ссылка);
	КонецЕсли;
	ДокументСнятоСУчетаБУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();
	ЗаполнитьОписания();
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();
КонецПроцедуры

Процедура ГиперссылкаДокументВводаВЭксплуатациюБУНажатие(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ДокументВводаВЭксплуатациюБУ) Тогда
		ДокументВводаВЭксплуатациюБУ = Документы["ИзменениеСостоянияОС"].СоздатьДокумент();
		ДокументВводаВЭксплуатациюБУ.Заполнить(Ссылка);
	КонецЕсли;
	ДокументВводаВЭксплуатациюБУ.ПолучитьФорму( , ЭтаФорма, Строка(ЭтотОбъект)).ОткрытьМодально();
	ЗаполнитьОписания();
	ПолучитьДокументыСостоянияОС();
	ЗаполнитьТекстПроДокументы();
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	мДатаСведений = ДатаСведений;
	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	мДатаСведений = ДатаСведений;
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура АдресМестонахожденияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ФормаАдреса = Обработки.РедактированиеКонтактнойИнформации.ПолучитьФорму("ФормаЗаписиАдреса");
	ФормаАдреса.НачальноеЗначениеВыбора = РегламентированнаяОтчетность.РазложитьАдрес(АдресМестонахождения);
	Если ФормаАдреса.НачальноеЗначениеВыбора <> Неопределено Тогда
		ФормаАдреса.НачальноеЗначениеВыбора.Вставить("НазваниеРегиона", ФормаАдреса.НачальноеЗначениеВыбора.Регион);
		ФормаАдреса.НачальноеЗначениеВыбора.Регион = КодРегиона;
	КонецЕсли;
	Если ФормаАдреса.ОткрытьМодально() Тогда
		АдресМестонахождения = СокрЛП(ФормаАдреса.КодСтраны) + "," 
				  + СокрЛП(ФормаАдреса.Поле1) + ","
				  + СокрЛП(ФормаАдреса.Поле2) + ","
				  + СокрЛП(ФормаАдреса.Поле3) + ","
				  + СокрЛП(ФормаАдреса.Поле4) + ","
				  + СокрЛП(ФормаАдреса.Поле5) + ","
				  + СокрЛП(ФормаАдреса.Поле6) + ","
				  + СокрЛП(ФормаАдреса.Поле7) + ","
				  + СокрЛП(ФормаАдреса.Поле8) + ","
				  + СокрЛП(ФормаАдреса.Поле9);
		КодРегиона = ФормаАдреса.КодРегиона;
	КонецЕсли;
	ЗаполнитьАдрес();
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента формы Наименование.
//
Процедура НаименованиеПриИзменении(Элемент)

	СформироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры

// Обработчик события ПриИзменении для полного наименования.
//
Процедура НаименованиеПолноеПриИзменении(Элемент)

	УстановитьФлагФормироватьНаименованиеПолноеАвтоматически();

КонецПроцедуры // НаименованиеПолноеПриИзменении()

// Обработчик события НачалоВыбораИзСписка для полного наименования.
//
Процедура НаименованиеПолноеНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	// Формирование списка выбора.

	Список = Новый СписокЗначений();

	Список.Добавить(Наименование);

	// Выбор из списка и обработка выбора.

	РезультатВыбора = ВыбратьИзСписка(Список, ЭлементыФормы.НаименованиеПолное);

	Если РезультатВыбора <> Неопределено Тогда

		НаименованиеПолное                          = РезультатВыбора.Значение;
		мФормироватьНаименованиеПолноеАвтоматически = Истина;

	КонецЕсли;

КонецПроцедуры // НаименованиеПолноеНачалоВыбораИзСписка()

// Обработчик события "ПриИзменении" поля ввода "ОКОФ".
//
Процедура КодПоОКОФПриИзменении(Элемент)
	
	Если НЕ Элемент.Значение.Пустая() Тогда
		АмортизационнаяГруппа = Элемент.Значение.АмортизационнаяГруппа;
	КонецЕсли;

КонецПроцедуры //КодПоОКОФПриИзменении()

Процедура НалогНаИмуществоНажатие(Элемент)
	
	Форма = РегистрыСведений.СтавкиНалогаНаИмущество.ПолучитьФормуСписка();
	Форма.ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = Форма.ЭлементыФормы.ОсновнаяПанель.Страницы.ОбъектыСОсобымПорядкомНалогообложения;
	Форма.Открыть();
	
КонецПроцедуры

Процедура ТранспортныйНалогНажатие(Элемент)
	
	Форма = РегистрыСведений.РегистрацияТранспортныхСредств.ПолучитьФормуСписка();
	Форма.ОсновноеСредство = Ссылка;
	Форма.РегистрСведенийСписок.Отбор.ОсновноеСредство.Установить(Ссылка);
	Форма.Открыть();
	
КонецПроцедуры

Процедура ЗемельныйНалогНажатие(Элемент)
	
	Форма = РегистрыСведений.РегистрацияЗемельныхУчастков.ПолучитьФормуСписка();
	Форма.ОсновноеСредство = Ссылка;
	Форма.РегистрСведенийСписок.Отбор.ОсновноеСредство.Установить(Ссылка);
	Форма.Открыть();
	
КонецПроцедуры

// Обработчик события "ПриИзменении" поля "ВидОС".
//
Процедура ВидОСПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

// Обработчик события "ПриИзменении" переключателя "ИмеетсяКадастровыйНомер".
//
Процедура ИмеетсяКадастровыйНомерПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

// Обработчик события "ПриИзменении" переключателя "ИмеетсяКадастровыйНомер1".
//
Процедура ИмеетсяКадастровыйНомер1ПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

// Обработчик события "ПриИзменении" флажка "Помещение".
//
Процедура ПомещениеПриИзменении(Элемент)
	
	НазначениеПомещения = ?(Помещение,
		Перечисления.НазначенияПомещения.Нежилое, Перечисления.НазначенияПомещения.ПустаяСсылка());
	УстановитьВидимостьДоступность();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ПОЛЕЙ СВОЙСТВ И КАТЕГОРИЙ

// Обработчик события ПередНачаломДобавления элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ОткрытьФормуНовогоСвойства(ЭтаФорма, Элемент, Копирование);

КонецПроцедуры

// Обработчик события ПередУдалением элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектЗначенияСвойств.ИнвертироватьПометкуУдаленияСвойства(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(Элемент.ТекущиеДанные, Элемент.Колонки.Значение.ЭлементУправления);
	
КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента СвойстваИЗначения.
//
Процедура СвойстваИЗначенияПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ОбработкаОбъектЗначенияСвойств.ПриВыводеСтрокиСвойствИЗначений(Элемент, ОформлениеСтроки, ДанныеСтроки);
	
КонецПроцедуры

// Обработчик события ПриИзменении элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеПриИзменении(Элемент)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события Очистка элемента СвойстваИЗначения.Значение.
//
Процедура СвойстваИЗначенияЗначениеОчистка(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;

	ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные.Значение = Неопределено;

	ОбработкаОбъектЗначенияСвойств.ПривестиТипЗначенияСвойства(ЭлементыФормы.СвойстваИЗначения.ТекущиеДанные, Элемент);

	Модифицированность = Истина;

КонецПроцедуры


// Обработчик события ПередНачаломДобавления элемента Категории.
//
Процедура КатегорииПередНачаломДобавления(Элемент, Отказ, Копирование)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ОткрытьФормуНовойКатегории(ЭтаФорма);

КонецПроцедуры

// Обработчик события ПередУдалением элемента Категории.
//
Процедура КатегорииПередУдалением(Элемент, Отказ)

	Отказ = Истина;

	ОбработкаОбъектКатегорииОбъекта.ИнвертироватьПометкуУдаленияКатегории(Элемент.ТекущиеДанные);

КонецПроцедуры

// Обработчик события ПриНачалеРедактирования элемента Категории.
//
Процедура КатегорииПриИзмененииФлажка(Элемент, НоваяСтрока)

	Модифицированность = Истина;

КонецПроцедуры

// Обработчик события ПриВыводеСтроки элемента Категории.
//
Процедура КатегорииПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	Если Элемент.Колонки.ПометкаУдаления.Видимость Тогда
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ОтображатьКартинку = Истина;
		ОформлениеСтроки.Ячейки.ПометкаУдаления.ИндексКартинки     = Число(ДанныеСтроки.ПометкаУдаления);
	КонецЕсли;

	Если Элемент.Колонки.Принадлежность.Видимость Тогда
		ОформлениеСтроки.Ячейки.Принадлежность.ОтображатьФлажок    = Истина;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ДЛЯ ПОДДЕРЖКИ МЕХАНИЗМОВ СВОЙСТВ И КАТЕГОРИЙ

// Процедура перезаполняет таблицу свойств и значений.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьСвойстваИЗначения(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораЗначений   = Ссылка;
	ОбработкаОбъектЗначенияСвойств.ОбъектОтбораНазначений = Ссылка;
	ОбработкаОбъектЗначенияСвойств.ПрочитатьЗаполнитьСвойстваИЗначения();

КонецПроцедуры

// Процедура перезаполняет таблицу Категорий.
//
// Параметры:
//  Нет.
//
Процедура ПрочитатьЗаполнитьКатегории(ИмяДанных = "")

	// Эта проверка добавлена, чтобы не выполнялось перезаполнение таблицы 
	// при вызове данной процедуры из ПриИзмененииДанных, осуществляемом до 
	// вызова из ПередОткрытием.
	ОбработкаОбъектКатегорииОбъекта.ОбъектОтбораКатегорий = Ссылка;
	ОбработкаОбъектКатегорииОбъекта.ПрочитатьЗаполнитьКатегорииОбъекта();

КонецПроцедуры

Процедура ДействияФормыДействие1(Кнопка)

	ОС = Ссылка;
	Если НЕ ЗначениеЗаполнено(ОС) Тогда
		ОС = Справочники.ОсновныеСредства.ПустаяСсылка();
	КонецЕсли;
	
	ФормаРегистра = РегистрыНакопления.ОплатыОСДляУСН.ПолучитьФормуСписка();
	ФормаРегистра.Отбор.ОсновноеСредство.Использование = Истина;
	ФормаРегистра.Отбор.ОсновноеСредство.Значение = ОС;
	ФормаРегистра.Открыть();
	
КонецПроцедуры