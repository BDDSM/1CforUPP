// Хранит значения курсов.
Перем мКэшКурсов;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
		
	Иначе
		// Запрет редактирования
		ЭлементыФормы.ПериодНачало.ТолькоПросмотр = Истина;
		ЭлементыФормы.ПериодКонец.ТолькоПросмотр = Истина;
		ЭлементыФормы.Организация.ТолькоПросмотр = Истина;
		ЭлементыФормы.КнопкаВыбораПериода.Доступность = Ложь;
	КонецЕсли;

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ПериодНачало, ?(ПериодКонец='0001-01-01', ПериодКонец, КонецДня(ПериодКонец)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	ПериодНачало = НастройкаПериода.ПолучитьДатуНачала();
	ПериодКонец = НастройкаПериода.ПолучитьДатуОкончания();
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация. Операция не записана.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.Организация;
		Возврат;
	КонецЕсли; 

	Для Каждого Стр Из Движения.Международный Цикл
		Стр.Организация = Организация;
	КонецЦикла;
КонецПроцедуры

Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

 

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
Процедура ДействияФормыОткрытьСоответствияСчетов1(Кнопка)
	Форма = РегистрыСведений.СоответствиеСчетовБУиМСФО.ПолучитьФорму("ФормаСписка",,);
	Форма.Открыть();
КонецПроцедуры

Процедура ДействияФормыОткрытьИсключенияПроводок1(Кнопка)
	Форма = РегистрыСведений.ИсключениеПроводок.ПолучитьФорму("ФормаСписка",,);
	Форма.Открыть();
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ДобавитьПроводку(Выборка)
	//Заполняем основные реквизиты записи регистра
	Движение = Движения.Международный.Добавить();
	Движение.Период = Выборка.Период;
	Движение.СчетДт = Выборка.СчетМеждународныйДт;
	Движение.СчетКт = Выборка.СчетМеждународныйКт;
	Движение.Организация = Организация;
	Движение.Содержание = Выборка.Содержание;
	Движение.ПервичныйДокумент = Выборка.Регистратор;
	Движение.НомерЖурнала = Выборка.НомерЖурнала;
	
	// Заполняем количество
	Если Движение.СчетДт.Количественный Тогда
		Движение.КоличествоДт = Выборка.КоличествоДт;
	КонецЕсли;
	Если Движение.СчетКт.Количественный Тогда
		Движение.КоличествоКт = Выборка.КоличествоКт;
	КонецЕсли;
	
	// Заполняем суммы и валюту
	Если глЗначениеПеременной("ВалютаМеждународногоУчета") = глЗначениеПеременной("ВалютаРегламентированногоУчета") Тогда
		Движение.Сумма = Выборка.Сумма;
		
		Если Движение.СчетДт.Валютный Тогда
			Движение.ВалютаДт = Выборка.ВалютаДт;
			Движение.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаДт;
		КонецЕсли;
		Если Движение.СчетКт.Валютный Тогда
			Движение.ВалютаКт = Выборка.ВалютаКт;
			Движение.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаКт;
		КонецЕсли;

	Иначе
		Если НЕ ЗначениеЗаполнено(Выборка.ВалютаДт) Тогда
			Если Движение.СчетДт.Валютный Тогда
				Движение.ВалютаДт = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				Движение.ВалютнаяСуммаДт = Выборка.Сумма;
			КонецЕсли;
			Движение.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, глЗначениеПеременной("ВалютаРегламентированногоУчета"), глЗначениеПеременной("ВалютаМеждународногоУчета"), ПолучитьКурсВалютыСУчетомКэша(глЗначениеПеременной("ВалютаРегламентированногоУчета"), Движение.Период).Курс, ПолучитьКурсВалютыСУчетомКэша(глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Курс, ПолучитьКурсВалютыСУчетомКэша(глЗначениеПеременной("ВалютаРегламентированногоУчета"), Движение.Период).Кратность, ПолучитьКурсВалютыСУчетомКэша(глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Кратность);

		ИначеЕсли Движение.ВалютаДт = глЗначениеПеременной("ВалютаМеждународногоУчета") Тогда
			Движение.Сумма = Выборка.ВалютнаяСуммаДт;
			
		ИначеЕсли Движение.ВалютаДт <> глЗначениеПеременной("ВалютаМеждународногоУчета") Тогда
			Если Движение.СчетДт.Валютный Тогда
				Движение.ВалютаДт = Выборка.ВалютаДт;
				Движение.ВалютнаяСуммаДт = Выборка.ВалютнаяСуммаДт;
			КонецЕсли;
			Движение.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.ВалютнаяСуммаДт, Выборка.ВалютаДт, глЗначениеПеременной("ВалютаМеждународногоУчета"), ПолучитьКурсВалютыСУчетомКэша(Выборка.ВалютаДт, Движение.Период).Курс, ПолучитьКурсВалютыСУчетомКэша(глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Курс, ПолучитьКурсВалютыСУчетомКэша(Выборка.ВалютаДт, Движение.Период).Кратность, ПолучитьКурсВалютыСУчетомКэша(глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Кратность);
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Выборка.ВалютаКт) Тогда
			Если Движение.СчетКт.Валютный Тогда
				Движение.ВалютаКт = глЗначениеПеременной("ВалютаРегламентированногоУчета");
				Движение.ВалютнаяСуммаКт = Выборка.Сумма;
			КонецЕсли;
			Движение.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.Сумма, глЗначениеПеременной("ВалютаРегламентированногоУчета"), глЗначениеПеременной("ВалютаМеждународногоУчета"), ПолучитьКурсВалютыСУчетомКэша(глЗначениеПеременной("ВалютаРегламентированногоУчета"), Движение.Период).Курс, ПолучитьКурсВалютыСУчетомКэша(глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Курс, ПолучитьКурсВалютыСУчетомКэша(глЗначениеПеременной("ВалютаРегламентированногоУчета"), Движение.Период).Кратность, ПолучитьКурсВалютыСУчетомКэша(глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Кратность);
			
		ИначеЕсли Движение.ВалютаКт = глЗначениеПеременной("ВалютаМеждународногоУчета") Тогда
			Движение.Сумма = Выборка.ВалютнаяСуммаКт;
			
		ИначеЕсли Движение.ВалютаКт <> глЗначениеПеременной("ВалютаМеждународногоУчета") Тогда
			Если Движение.СчетКт.Валютный Тогда
				Движение.ВалютаКт = Выборка.ВалютаКт;
				Движение.ВалютнаяСуммаКт = Выборка.ВалютнаяСуммаКт;
			КонецЕсли;
			Движение.Сумма = МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Выборка.ВалютнаяСуммаКт, Выборка.ВалютаКт, глЗначениеПеременной("ВалютаМеждународногоУчета"), ПолучитьКурсВалютыСУчетомКэша(Выборка.ВалютаКт, Движение.Период).Курс, ПолучитьКурсВалютыСУчетомКэша(глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Курс, ПолучитьКурсВалютыСУчетомКэша(Выборка.ВалютаКт, Движение.Период).Кратность, ПолучитьКурсВалютыСУчетомКэша(глЗначениеПеременной("ВалютаМеждународногоУчета"), Движение.Период).Кратность);
			
		КонецЕсли;
		
	КонецЕсли;
	
	//Заполняем субконто
	Для ДТ = 0 по 1 Цикл
		Если ДТ = 0 Тогда
			СтрокаДТ = "Дт";
		Иначе
			СтрокаДТ = "Кт";
		КонецЕсли;

		Для Ном = 1 по 3 Цикл
			Если Ном <= Выборка["СчетМеждународный"+СтрокаДТ].ВидыСубконто.Количество() Тогда
				ВидСубконтоМежд = Движение["Счет"+СтрокаДТ].ВидыСубконто[Ном-1].ВидСубконто;
				
				Если НЕ ЗначениеЗаполнено(Выборка["СубконтоМежд"+СтрокаДТ+Ном]) Тогда
					// Заполняем значением из исходной проводки (если совпадают типы)
					Для НомБух = 1 по 3 Цикл
						Если НомБух <= Выборка["Счет"+СтрокаДТ].ВидыСубконто.Количество() Тогда
							Если ВидСубконтоМежд.ТипЗначения = Выборка["Счет"+СтрокаДТ].ВидыСубконто[НомБух-1].ВидСубконто.ТипЗначения Тогда
								Движение["Субконто"+СтрокаДТ][ВидСубконтоМежд] = Выборка["Субконто"+СтрокаДТ+НомБух];
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;

				Иначе
					// Заполняем как указано в соответствиях
					Движение["Субконто"+СтрокаДТ][ВидСубконтоМежд] = Выборка["СубконтоМежд"+СтрокаДТ+Ном];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Функция ПолучитьСписокПустыхСубконто(пвхДляОбработки) 
	выборкаСубконто = пвхДляОбработки.Выбрать(); 
	сзПустыеСубконто = Новый СписокЗначений(); 
	Пока выборкаСубконто.Следующий() Цикл 
		сзПустыеСубконто.Добавить(выборкаСубконто.ТипЗначения.ПривестиЗначение()); 
	КонецЦикла; 
	//Добавим и неопределено 
	сзПустыеСубконто.Добавить(Неопределено); 
	Возврат сзПустыеСубконто; 
КонецФункции // () 


Процедура КнопкаВыполнитьПереносНажатие(Элемент)
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Предупреждение("Не указана организация. Перенос проводок не выполнен.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.Организация;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПериодНачало) Тогда
		Предупреждение("Не указана дата начала переноса. Перенос проводок не выполнен.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.ПериодНачало;
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ПериодКонец) Тогда
		Предупреждение("Не указана дата окончания переноса. Перенос проводок не выполнен.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.ПериодКонец;
		Возврат;
	КонецЕсли;
	Если ПериодНачало > ПериодКонец Тогда
		Предупреждение("Дата начала переноса больше даты окончания. Перенос проводок не выполнен.");
		Отказ = Истина;
		ТекущийЭлемент = ЭлементыФормы.ПериодНачало;
		Возврат;
	КонецЕсли;
	
	//Проверка операция переноса за выбранный период
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ПереносПроводок.Ссылка
	               |ИЗ
	               |	Документ.ПереносПроводокМеждународный КАК ПереносПроводок
	               |
	               |ГДЕ
	               |	(ПереносПроводок.ПериодНачало МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ ПереносПроводок.ПериодКонец МЕЖДУ &ДатаНачала И &ДатаОкончания ИЛИ ПереносПроводок.ПериодНачало < &ДатаНачала И ПереносПроводок.ПериодКонец > &ДатаНачала ИЛИ ПереносПроводок.ПериодНачало < &ДатаОкончания И ПереносПроводок.ПериодКонец > &ДатаОкончания) И
	               |	ПереносПроводок.Организация = &Организация И
	               |	ПереносПроводок.Ссылка <> &Ссылка";
				   
	Запрос.УстановитьПараметр("ДатаНачала", ПериодНачало);
	Запрос.УстановитьПараметр("ДатаОкончания", ПериодКонец);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Сообщить(Выборка.Ссылка);
	КонецЦикла;
	
	Если Выборка.Количество() > 0 Тогда
		Предупреждение("По выбранной организации и периоду уже имеются перенесенные проводки. Перенос не выполнен.");
		Возврат;
	КонецЕсли;
	
	// Начало переноса
	Движения.Международный.Очистить();
	Состояние("Перенос проводок. Пожалуйста ждите...");
	
	Запрос = Новый Запрос;
	Текст = "ВЫБРАТЬ
	        |	ХозрасчетныйДвиженияССубконто.Период,
	        |	ХозрасчетныйДвиженияССубконто.НомерСтроки КАК НомерСтроки,
	        |	ХозрасчетныйДвиженияССубконто.Регистратор КАК Регистратор,
	        |	ХозрасчетныйДвиженияССубконто.СчетДт,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт1,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт2,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоДт3,
	        |	ХозрасчетныйДвиженияССубконто.СчетКт,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт1,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт2,
	        |	ХозрасчетныйДвиженияССубконто.СубконтоКт3,
	        |	ХозрасчетныйДвиженияССубконто.ВалютаДт,
	        |	ХозрасчетныйДвиженияССубконто.ВалютаКт,
	        |	ХозрасчетныйДвиженияССубконто.Сумма,
	        |	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаДт,
	        |	ХозрасчетныйДвиженияССубконто.ВалютнаяСуммаКт,
	        |	ХозрасчетныйДвиженияССубконто.КоличествоДт,
	        |	ХозрасчетныйДвиженияССубконто.КоличествоКт,
	        |	ХозрасчетныйДвиженияССубконто.НомерЖурнала,
	        |	ХозрасчетныйДвиженияССубконто.Содержание,
	        |	СоответствиеСчетовСрезПоследнихДт.СчетМеждународный КАК СчетМеждународныйДт,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд1 КАК СубконтоМеждДт1,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд2 КАК СубконтоМеждДт2,
	        |	СоответствиеСчетовСрезПоследнихДт.СубконтоМежд3 КАК СубконтоМеждДт3,
	        |	СоответствиеСчетовСрезПоследнихДт.Реквизит КАК РеквизитДт,
	        |	СоответствиеСчетовСрезПоследнихДт.Значение КАК ЗначениеДт,
	        |	СоответствиеСчетовСрезПоследнихКт.СчетМеждународный КАК СчетМеждународныйКт,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд1 КАК СубконтоМеждКт1,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд2 КАК СубконтоМеждКт2,
	        |	СоответствиеСчетовСрезПоследнихКт.СубконтоМежд3 КАК СубконтоМеждКт3,
	        |	СоответствиеСчетовСрезПоследнихКт.Реквизит КАК РеквизитКт,
	        |	СоответствиеСчетовСрезПоследнихКт.Значение КАК ЗначениеКт
	        |ИЗ
	        |	РегистрБухгалтерии.Хозрасчетный.ДвиженияССубконто(
	        |			&ПериодНач,
	        |			&ПериодКон,
	        |			Активность = &Активность
	        |				И Организация = &Организация) КАК ХозрасчетныйДвиженияССубконто
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ИсключениеПроводок.СрезПоследних(&ПериодНач, Учитывается = ИСТИНА) КАК ИсключениеПроводокСрезПоследних
	        |		ПО (ХозрасчетныйДвиженияССубконто.СчетДт = ИсключениеПроводокСрезПоследних.СчетДт
	        |					И ИсключениеПроводокСрезПоследних.СчетКт = &ПустойСчет
	        |				ИЛИ ХозрасчетныйДвиженияССубконто.СчетКт = ИсключениеПроводокСрезПоследних.СчетКт
	        |					И ИсключениеПроводокСрезПоследних.СчетДт = &ПустойСчет
	        |				ИЛИ ХозрасчетныйДвиженияССубконто.СчетДт = ИсключениеПроводокСрезПоследних.СчетДт
	        |					И ХозрасчетныйДвиженияССубконто.СчетКт = ИсключениеПроводокСрезПоследних.СчетКт)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт1 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт1 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт2 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт2 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоДт3 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоДт3 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт1 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт1 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт2 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт2 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (ИсключениеПроводокСрезПоследних.СубконтоКт3 В (&ПустоеСубконто)
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ ИсключениеПроводокСрезПоследних.СубконтоКт3 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиМСФО.СрезПоследних(&ПериодНач, Учитывается = ИСТИНА) КАК СоответствиеСчетовСрезПоследнихДт
	        |		ПО ХозрасчетныйДвиженияССубконто.СчетДт = СоответствиеСчетовСрезПоследнихДт.СчетХозрасчетный
	        |			И (СоответствиеСчетовСрезПоследнихДт.ВидДвижения = &ВидДвиженияДебет)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |			И (СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихДт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоДт3)
	        |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.СоответствиеСчетовБУиМСФО.СрезПоследних(&ПериодНач, Учитывается = ИСТИНА) КАК СоответствиеСчетовСрезПоследнихКт
	        |		ПО ХозрасчетныйДвиженияССубконто.СчетКт = СоответствиеСчетовСрезПоследнихКт.СчетХозрасчетный
	        |			И (СоответствиеСчетовСрезПоследнихКт.ВидДвижения = &ВидДвиженияКредит)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр1 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр2 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |			И (СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 В (&ПустоеСубконто)
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт1
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт2
	        |				ИЛИ СоответствиеСчетовСрезПоследнихКт.СубконтоХозр3 = ХозрасчетныйДвиженияССубконто.СубконтоКт3)
	        |ГДЕ
	        |	ИсключениеПроводокСрезПоследних.Период ЕСТЬ NULL "; 

	Если НЕ ПоказатьПротоколПереноса Тогда 
		Текст = Текст + " И 
		| ((СоответствиеСчетовСрезПоследнихДт.СчетМеждународный) ЕСТЬ НЕ NULL ) И 
		| ((СоответствиеСчетовСрезПоследнихКт.СчетМеждународный) ЕСТЬ НЕ NULL )"; 
	КонецЕсли; 

	Текст = Текст + " 
		|УПОРЯДОЧИТЬ ПО 
		| СоответствиеСчетовСрезПоследнихДт.Приоритет, 
		| СоответствиеСчетовСрезПоследнихКт.Приоритет 
		| 
		|ИТОГИ ПО 
		| НомерСтроки, 
		| Регистратор"; 


	Запрос.Текст = Текст;			   
	Запрос.УстановитьПараметр("Активность", Истина);
	Запрос.УстановитьПараметр("ПериодНач", ПериодНачало);
	Запрос.УстановитьПараметр("ПериодКон", ПериодКонец);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Запрос.УстановитьПараметр("ПустойСчет", ПланыСчетов.Хозрасчетный.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПустоеСубконто", ПолучитьСписокПустыхСубконто(ПланыВидовХарактеристик.ВидыСубконтоХозрасчетные));
	Запрос.УстановитьПараметр("ВидДвиженияДебет", Перечисления.ВидыДвиженийБухгалтерии.Дебет);
	Запрос.УстановитьПараметр("ВидДвиженияКредит", Перечисления.ВидыДвиженийБухгалтерии.Кредит);

	Результат = Запрос.Выполнить();

	Если ПоказатьПротоколПереноса Тогда
		
		ТабДок = Новый ТабличныйДокумент;
		Макет = ПолучитьМакет("Макет");
		Область = Макет.ПолучитьОбласть("Заголовок");
		Область.Параметры.Заголовок = "Список не перенесенных проводок";
		Область.Параметры.Информация = "Организация: " + Организация.НаименованиеПолное + "; Период: " + ПредставлениеПериода(ПериодНачало,ПериодКонец);
		ТабДок.Вывести(Область);
		
		ТаблицаНетранслированныхПроводок = Новый ТаблицаЗначений;
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("СчетДт");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("СубконтоДт1");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("СубконтоДт2");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("СубконтоДт3");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("ВалютаДт");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("КоличествоДт");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("ВалютнаяСуммаДт");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("СчетКт");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("СубконтоКт1");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("СубконтоКт2");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("СубконтоКт3");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("ВалютаКт");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("КоличествоКт");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("ВалютнаяСуммаКт");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("Сумма");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("Регистратор");
		ТаблицаНетранслированныхПроводок.Колонки.Добавить("Причина");
		
		СтруктураПоиска = Новый Структура("СчетДт, СубконтоДт1, СубконтоДт2, СубконтоДт3, ВалютаДт, ВалютнаяСуммаДт, КоличествоДт," 
										+ "СчетКт, СубконтоКт1, СубконтоКт2, СубконтоКт3, ВалютаКт, ВалютнаяСуммаКт, КоличествоКт,"
										+ "Сумма, Регистратор");
	КонецЕсли;
	
	Ном = 1;
	ВыборкаНомерСтроки = Результат.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "НомерСтроки",);
	Пока ВыборкаНомерСтроки.Следующий() Цикл
		ВыборкаРегистратор = ВыборкаНомерСтроки.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам, "Регистратор",);
		Пока ВыборкаРегистратор.Следующий() Цикл
			Выборка = ВыборкаРегистратор.Выбрать(,);
			СоответствиеНайдено = Ложь;
			Пока Выборка.Следующий() Цикл
				Если НЕ ЗначениеЗаполнено(Выборка.СчетМеждународныйДт) или НЕ ЗначениеЗаполнено(Выборка.СчетМеждународныйКт) Тогда
					Прервать;
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(Выборка.РеквизитДт) и НЕ ЗначениеЗаполнено(Выборка.РеквизитКт) Тогда
					ДобавитьПроводку(Выборка);
					СоответствиеНайдено = Истина;
					Прервать; // нашли нужное правило!
				Иначе
					
					Если ЗначениеЗаполнено(Выборка.РеквизитДт) Тогда // Условие по дебету
						НомерСубконто = Число(Сред(Выборка.РеквизитДт,9,1));
						Рекв = Сред(Выборка.РеквизитДт,Найти(Выборка.РеквизитДт, ".")+1);
						Попытка
							Если (НомерСубконто = 1) и (Выборка.СубконтоДт1[Рекв] <> Выборка.ЗначениеДт) или
								 (НомерСубконто = 2) и (Выборка.СубконтоДт2[Рекв] <> Выборка.ЗначениеДт) или
								 (НомерСубконто = 3) и (Выборка.СубконтоДт3[Рекв] <> Выборка.ЗначениеДт) Тогда
								 
								Если ПоказатьПротоколПереноса Тогда
									ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
									Если ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
										НоваяСтрока = ТаблицаНетранслированныхПроводок.Добавить();
										НоваяСтрока.Причина = "Не найдено соответствие по дебету счета" + Выборка.СчетДт
															+ " по реквизиту " + Выборка.РеквизитДт;
										ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
									КонецЕсли;
								КонецЕсли;
								Продолжить;
							ИначеЕсли ПоказатьПротоколПереноса Тогда
								
								ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
								СтрокиУдаления = ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска);
								Если СтрокиУдаления.Количество()> 0 Тогда
									ТаблицаНетранслированныхПроводок.Удалить(СтрокиУдаления[0]);
								КонецЕсли;

							КонецЕсли
							
						Исключение
							Сообщить("В правиле соответствия для проводки по дебету счета "+Выборка.СчетДт+" не найден реквизит "+Рекв);
						КонецПопытки;
					КонецЕсли;
					
					Если ЗначениеЗаполнено(Выборка.РеквизитКт) Тогда // Условие по кредиту
						
						НомерСубконто = Число(Сред(Выборка.РеквизитКт,9,1));
						Рекв = Сред(Выборка.РеквизитКт,Найти(Выборка.РеквизитКт, ".")+1);
						Попытка
							Если (НомерСубконто = 1) и (Выборка.СубконтоКт1[Рекв] <> Выборка.ЗначениеКт) или
								 (НомерСубконто = 2) и (Выборка.СубконтоКт2[Рекв] <> Выборка.ЗначениеКт) или
								 (НомерСубконто = 3) и (Выборка.СубконтоКт3[Рекв] <> Выборка.ЗначениеКт) Тогда
								 
								Если ПоказатьПротоколПереноса Тогда
									ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
									Если ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
										НоваяСтрока = ТаблицаНетранслированныхПроводок.Добавить();
										НоваяСтрока.Причина = "Не найдено соответствие по кредиту счета " + Выборка.СчетКт
															+ " по реквизиту " + Выборка.РеквизитКт;
										ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
									КонецЕсли;
								КонецЕсли;

								Продолжить;
								
							ИначеЕсли ПоказатьПротоколПереноса Тогда
								
								ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
								СтрокиУдаления = ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска);
								Если СтрокиУдаления.Количество()> 0 Тогда
									ТаблицаНетранслированныхПроводок.Удалить(СтрокиУдаления[0]);
								КонецЕсли;

							КонецЕсли
							
						Исключение
							Сообщить("В правиле соответствия для проводки по кредиту счета "+Выборка.СчетКт+" не найден реквизит "+Рекв);
						КонецПопытки;
						
					ИначеЕсли ПоказатьПротоколПереноса Тогда
								
						ЗаполнитьЗначенияСвойств(СтруктураПоиска, Выборка);
						СтрокиУдаления = ТаблицаНетранслированныхПроводок.НайтиСтроки(СтруктураПоиска);
						Если СтрокиУдаления.Количество()> 0 Тогда
							ТаблицаНетранслированныхПроводок.Удалить(СтрокиУдаления[0]);
						КонецЕсли;

					КонецЕсли;
					
					ДобавитьПроводку(Выборка);
					СоответствиеНайдено = Истина;
					Прервать; // нашли нужное правило!
				КонецЕсли;
			КонецЦикла;
			// Соответствие не найдено
			Если (НЕ СоответствиеНайдено) и ПоказатьПротоколПереноса Тогда
				Область = Макет.ПолучитьОбласть("Строка");
				
				Область.Параметры.Номер = Ном;
				Область.Параметры.СчетДт = Выборка.СчетДт;
				Область.Параметры.СубконтоДт1 = Выборка.СубконтоДт1;
				Область.Параметры.СубконтоДт2 = Выборка.СубконтоДт2;
				Область.Параметры.СубконтоДт3 = Выборка.СубконтоДт3;
				Область.Параметры.КоличествоДт = Выборка.КоличествоДт;
				Область.Параметры.ВалютаДт = Выборка.ВалютаДт;
				Область.Параметры.ВалСуммаДт = Выборка.ВалютнаяСуммаДт;
				Область.Параметры.СчетКт = Выборка.СчетКт;
				Область.Параметры.СубконтоКт1 = Выборка.СубконтоКт1;
				Область.Параметры.СубконтоКт2 = Выборка.СубконтоКт2;
				Область.Параметры.СубконтоКт3 = Выборка.СубконтоКт3;
				Область.Параметры.КоличествоКт = Выборка.КоличествоКт;
				Область.Параметры.ВалютаКт = Выборка.ВалютаКт;
				Область.Параметры.ВалСуммаКт = Выборка.ВалютнаяСуммаКт;
				Область.Параметры.Сумма = Выборка.Сумма;
				Область.Параметры.Расшифровка = Выборка.Регистратор;
				
				Если НЕ ЗначениеЗаполнено(Выборка.СчетМеждународныйДт) и НЕ ЗначениеЗаполнено(Выборка.СчетМеждународныйКт) Тогда
					Область.Параметры.Причина = "Нет правила соответствия счетам Дт и Кт.";
				ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.СчетМеждународныйДт) Тогда
					Область.Параметры.Причина = "Нет правила соответствия счету Дт.";
				ИначеЕсли НЕ ЗначениеЗаполнено(Выборка.СчетМеждународныйКт) Тогда
					Область.Параметры.Причина = "Нет правила соответствия счету Кт.";
				Иначе
					Область.Параметры.Причина = "Нет подходящего условия по счету Дт или Кт.";
				КонецЕсли;

				Если НЕ ((""+Выборка.СчетДт="") И (""+Выборка.СчетКт="")) Тогда
					ТабДок.Вывести(Область);
				КонецЕсли;

				Ном = Ном + 1;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ПоказатьПротоколПереноса Тогда
		Для Каждого Элемент Из ТаблицаНетранслированныхПроводок Цикл
			Ном = Ном + 1;
			Область = Макет.ПолучитьОбласть("Строка");
			Область.Параметры.Заполнить(Элемент);
			Область.Параметры.Номер = Ном;
			Область.Параметры.ВалСуммаДт = Элемент.ВалютнаяСуммаДт;
			Область.Параметры.ВалСуммаКт = Элемент.ВалютнаяСуммаКт;
			Область.Параметры.Расшифровка = Элемент.Регистратор;
			ТабДок.Вывести(Область);
		КонецЦикла;
		ТабДок.ТолькоПросмотр = Истина;
		ТабДок.ОтображатьСетку = Ложь;
		ТабДок.ОтображатьЗаголовки = Ложь;
		ТабДок.Показать("Список не перенесенных проводок");
	КонецЕсли;
	
КонецПроцедуры


Процедура ТабличноеПолеДвиженияВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	Если Колонка.Имя = "ПервичныйДокумент" Тогда
		Документ = ВыбраннаяСтрока[Колонка.Имя];
		
		Если ЗначениеЗаполнено(Документ) Тогда
			ОткрытьЗначение(Документ);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

Процедура ОрганизацияНачалоВыбора(Элемент, СтандартнаяОбработка)
	Если Движения.Международный.Количество()>0 Тогда
		Если Вопрос("При смене организации необходимо отменить выполненный ранее перенос проводок. Отменить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			Движения.Международный.Очистить();
		Иначе
			СтандартнаяОбработка = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры
// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры
 
/////////////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ФУНКЦИИ

// Функция кэширует запросы к регистру валют и возвращает закэшированное значение.
Функция ПолучитьКурсВалютыСУчетомКэша(Валюта, ДатаКурса)
	СтруктураПоиска = Новый Структура("Валюта, ДатаКурса", Валюта, ДатаКурса);
	Если ТипЗнч(мКэшКурсов) = Тип("ТаблицаЗначений") Тогда
		НайденныеСтроки = мКэшКурсов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Возврат НайденныеСтроки[0].СтруктураОтвета;
		КонецЕсли;
	Иначе
		мКэшКурсов = Новый ТаблицаЗначений;
		мКэшКурсов.Колонки.Добавить("Валюта");
		мКэшКурсов.Колонки.Добавить("ДатаКурса");
		мКэшКурсов.Колонки.Добавить("СтруктураОтвета");
	КонецЕсли;
	
	НоваяСтрока = мКэшКурсов.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
	НоваяСтрока.СтруктураОтвета = МодульВалютногоУчета.ПолучитьКурсВалюты(Валюта, ДатаКурса);
	
	Возврат НоваяСтрока.СтруктураОтвета;
КонецФункции