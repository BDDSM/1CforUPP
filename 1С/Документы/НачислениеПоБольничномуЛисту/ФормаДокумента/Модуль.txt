////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;
Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мРассчитываемыеТаблицы;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

Перем мСведенияОВидахРасчетаПоказатели;
Перем мТекущийПериодРегистрации;
Перем мТекущаяПричинаНетрудоспособности;

// Механизм исправлений
Перем мДокументИсправление;
Перем мДокументСторнирование;
Перем мКнопкаИсправление;
Перем мКнопкаОтменаИсправление;

Перем мДокументПродолжение;
Перем мБылПервичныйБольничныйЛист;

// Диалог настройки периода
Перем мНастройкаПериода;

// Дополнительные свойства формы
Перем мДополнительныеСвойства Экспорт;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Выполняет авторасчет реквизитов таблицы начислений
//
Процедура ВыполнитьАвторасчетРеквизитовСтрокиНачислений(ТекущиеДанные)
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПодразделениеОрганизации) Тогда
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДатаАктуальности",ДатаНачала);
		Запрос.УстановитьПараметр("Сотрудник",		 ТекущиеДанные.Сотрудник);
		
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА  РаботникиОрганизацииСрезПоследних.ПериодЗавершения <= &ДатаАктуальности
		|				И РаботникиОрганизацииСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизацииЗавершения
		|		ИНАЧЕ РаботникиОрганизацииСрезПоследних.ПодразделениеОрганизации
		|	КОНЕЦ КАК ПодразделениеОрганизации
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаАктуальности, Сотрудник = &Сотрудник) КАК РаботникиОрганизацииСрезПоследних";
		
		// подразделение
		ПрежниеДанные = Запрос.Выполнить().Выбрать();
		Если ПрежниеДанные.Следующий() тогда
			ТекущиеДанные.ПодразделениеОрганизации = ПрежниеДанные.ПодразделениеОрганизации;
		КонецЕсли;
	КонецЕсли;

	// Рассчитаем период расчета среднего заработка
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПериодРасчетаСреднегоЗаработкаНачало) Тогда
		ТекущиеДанные.ПериодРасчетаСреднегоЗаработкаНачало = ПериодРасчетаСреднегоЗаработкаНачало;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ПериодРасчетаСреднегоЗаработкаОкончание) Тогда
		ТекущиеДанные.ПериодРасчетаСреднегоЗаработкаОкончание = ПериодРасчетаСреднегоЗаработкаОкончание;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьАвторасчетРеквизитовСтрокиНачислений()

Процедура НастроитьПоказСкидок()

	ЭлементыФормы.РасчетСреднего.Колонки.СкидкаПоСтраховымВзносам.Видимость = ПериодРегистрации >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
	ЭлементыФормы.РасчетСреднего2010_ПП.Колонки.СкидкаПоСтраховымВзносам.Видимость = ПериодРегистрации >= ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
	
КонецПроцедуры

Процедура НастроитьПоказОтработанныхДней()

	ЭлементыФормы.РасчетСреднего2011.Колонки.ДнейБолезниУходаЗаДетьми.Видимость = ПериодРегистрации >= ПроведениеРасчетов.ДатаОтдельногоРасчетаПособийПоМатеринству() И ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам;
	
КонецПроцедуры

Процедура НастроитьПоказДанныхПилотногоПроектаФСС()

	ЭлементыФормы.НадписьЗаявление.Видимость = Ложь;
	ЭлементыФормы.НадписьЗаявление1.Видимость = ПроведениеРасчетов.ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(ПериодРегистрации, Организация);
	
	Если ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.ЗаявлениеВФСС Тогда
		ЭлементыФормы.НадписьБольничныйЛист.Видимость 	  = Истина;
		ЭлементыФормы.НадписьБольничныйЛист1.Видимость 	  = Ложь;
		ЭлементыФормы.НадписьОборотБольничного.Видимость  = Ложь;
		ЭлементыФормы.НадписьОборотБольничного1.Видимость = Истина;
		ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.Условия;
		ТекущийЭлемент = ЭлементыФормы.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью и доступностью элементов формы
//
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ДатаЗакона = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	ДокументЕстьПродолжениеБЛ = ЯвляетсяПродолжениемБолезни И ЗначениеЗаполнено(ПервичныйБольничныйЛист);
	Заработок2011годаИзПервичногоДокумента = ДокументЕстьПродолжениеБЛ И ПериодРегистрации >= ДатаЗакона И ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПервичныйБольничныйЛист,"ДатаОкончания") >= ДатаЗакона; 
	
	ТолькоПросмотр = ДокументИсправлен Или ДокументСторнирован;
	РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	
	ЭтоПособиеПоБеременностиИРодам = ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам;
	ЭтоПособиеПоНесчастнымСлучаям = ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве;
	ЭтоПособиеПоУходу = ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Или ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
	
	ЭлементыФормы.Сотрудник.ТолькоПросмотр		= ТолькоПросмотр Или ЭтоИсправление Или ДокументЕстьПродолжениеБЛ;
	ЭлементыФормы.Организация.ТолькоПросмотр	= ТолькоПросмотр Или ЭтоИсправление Или ДокументЕстьПродолжениеБЛ;
		
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,"Открыть сторно-документ","Открыть исправление");
	ЭлементыФормы.ПечатьСправка.Заголовок = ?(ЭтоИсправление, "Расчет доплаты", "Справка к старому б/л");	
	
	
	РаботаСДиалогамиЗК.УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрации, ДокументИсправлен, ДокументСторнирован, ЭлементыФормы.ДополнительныеДействия.Кнопки, мКнопкаИсправление, мКнопкаОтменаИсправление);
	
	ЭлементыФормы.ПервичныйБольничныйЛист.ТолькоПросмотр = Не ЯвляетсяПродолжениемБолезни;
	ЭлементыФормы.ДатаНачала.ТолькоПросмотр = Не ЯвляетсяПродолжениемБолезни;
	ЭлементыФормы.ДатаНачала.ПропускатьПриВводе = Не ЯвляетсяПродолжениемБолезни;

	ЭлементыФормы.ДатаНачалаСобытия.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ;
	ЭлементыФормы.ПричинаНетрудоспособности.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ;
	ЭлементыФормы.ДатаНарушенияРежима.ТолькоПросмотр = ТолькоПросмотр Или НеВыплачиватьПособие;
	ЭлементыФормы.ВидРасчета.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие;
	ЭлементыФормы.ВидРасчетаЗаСчетРаботодателя.ТолькоПросмотр = ТолькоПросмотр Или НеВыплачиватьПособие;
	ЭлементыФормы.ДнейОплатыРаботодателем.ТолькоПросмотр = ТолькоПросмотр Или ДатаНачалаСобытия >= ДатаЗакона Или НеВыплачиватьПособие;
	ЭлементыФормы.СтажЛет.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие;
	ЭлементыФормы.СтажМесяцев.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие;
	ЭлементыФормы.ПроцентОплаты.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие;
	ЭлементыФормы.СтажЛет1.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие;
	ЭлементыФормы.СтажМесяцев1.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие;
	ЭлементыФормы.ПроцентОплаты1.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие;
	ЭлементыФормы.ОграничениеПособия.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие;
	ЭлементыФормы.ОграничениеПособия1.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие;
	ЭлементыФормы.ПериодРасчетаСреднегоЗаработкаНачало.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие;
	ЭлементыФормы.ПериодРасчетаСреднегоЗаработкаНачало1.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие;
	ЭлементыФормы.ПериодРасчетаСреднегоЗаработкаОкончание.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие;
	ЭлементыФормы.ПериодРасчетаСреднегоЗаработкаОкончание1.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие;
	ЭлементыФормы.РасчетПоПравилам2010Года.Доступность = ЭтоПособиеПоБеременностиИРодам И ПериодРегистрации >= ДатаЗакона И ДатаНачалаСобытия >= ДатаЗакона И Не (ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие) И (Не НовыйПорядокРасчетаПособияПоМатеринствуПриИсправлении И ЭтоИсправление Или ПериодРегистрации < ПроведениеРасчетов.ДатаОтдельногоРасчетаПособийПоМатеринству() И Не ЭтоИсправление);
	ЭлементыФормы.НовыйПорядокРасчетаПособияПоМатеринствуПриИсправлении.Доступность = ЭтоПособиеПоБеременностиИРодам И ЭтоИсправление И ПериодРегистрации >= ПроведениеРасчетов.ДатаОтдельногоРасчетаПособийПоМатеринству() И Не (ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или НеВыплачиватьПособие);
	ЭлементыФормы.УчитыватьЗаработокПредыдущихСтрахователей.Доступность = ЕстьРасчетыПоКалендарнымГодам() И Не (ТолькоПросмотр Или (ДокументЕстьПродолжениеБЛ И ДатаНачалаСобытия >= ДатаЗакона) Или Заработок2011годаИзПервичногоДокумента Или НеВыплачиватьПособие);
	ЭлементыФормы.НадписьПоказЛьготныхДанных.Доступность = Не НеВыплачиватьПособие;
	ЭлементыФормы.ПервыйГодРасчета.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или (НеВыплачиватьПособие И Не ДоплачиватьДоПолногоСреднегоЗаработка);
	ЭлементыФормы.ВторойГодРасчета.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или (НеВыплачиватьПособие И Не ДоплачиватьДоПолногоСреднегоЗаработка);
	ЭлементыФормы.ПервыйГодРасчета1.ТолькоПросмотр = ТолькоПросмотр Или Заработок2011годаИзПервичногоДокумента Или (НеВыплачиватьПособие И Не ДоплачиватьДоПолногоСреднегоЗаработка);
	ЭлементыФормы.ВторойГодРасчета1.ТолькоПросмотр = ТолькоПросмотр Или Заработок2011годаИзПервичногоДокумента Или (НеВыплачиватьПособие И Не ДоплачиватьДоПолногоСреднегоЗаработка);
	
	ЭлементыФормы.РасчетСреднего.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или (НеВыплачиватьПособие И Не ДоплачиватьДоПолногоСреднегоЗаработка);
	ЭлементыФормы.РасчетСреднего2010_ПП.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или (НеВыплачиватьПособие И Не ДоплачиватьДоПолногоСреднегоЗаработка);
	ЭлементыФормы.РасчетСреднего2011.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или (НеВыплачиватьПособие И Не ДоплачиватьДоПолногоСреднегоЗаработка);
 	ЭлементыФормы.РасчетСреднего2011_ПП.ТолькоПросмотр = ТолькоПросмотр Или Заработок2011годаИзПервичногоДокумента Или (НеВыплачиватьПособие И Не ДоплачиватьДоПолногоСреднегоЗаработка);

	НадоВводитьСлучайУходаЗаРебенком = ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
	ЭлементыФормы.СлучайУходаЗаБольнымРебенком.ТолькоПросмотр = ТолькоПросмотр Или ДокументЕстьПродолжениеБЛ Или Не НадоВводитьСлучайУходаЗаРебенком;
    ЭлементыФормы.СлучайУходаЗаБольнымРебенком.АвтоОтметкаНезаполненного = НадоВводитьСлучайУходаЗаРебенком;
    ЭлементыФормы.СлучайУходаЗаБольнымРебенком.ОтметкаНезаполненного = НадоВводитьСлучайУходаЗаРебенком И СлучайУходаЗаБольнымРебенком.Пустая();
	
	ЭлементыФормы.ПанельЗаСчетРаботодателя.Свертка = ?(ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание И ПериодРегистрации >= ДатаЗакона,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Верх);
	
	ЭлементыФормы.РасчетПособияИзТарифнойСтавки.Доступность = ЭтоПособиеПоБеременностиИРодам;
	ЭлементыФормы.ПоставленаНаУчетВРанниеСрокиБеременности.Доступность = ЭтоПособиеПоБеременностиИРодам;
	ЭлементыФормы.НадписьНомерСправкиБеременной.Доступность = ЭтоПособиеПоБеременностиИРодам;
	ЭлементыФормы.ДатаСправкиБеременной.ТолькоПросмотр = Не ЭтоПособиеПоБеременностиИРодам;
	ЭлементыФормы.НомерСправкиБеременной.ТолькоПросмотр = Не ЭтоПособиеПоБеременностиИРодам;
	
	ЭлементыФормы.ПанельДанныхДляФСС.Страницы.РеестрПособий.Видимость = Не ЭтоПособиеПоНесчастнымСлучаям;
	ЭлементыФормы.ПанельДанныхДляФСС.Страницы.РеестрПособий2.Видимость = Не ЭтоПособиеПоНесчастнымСлучаям;
	ЭлементыФормы.НадписьУходЗаБольнымЧленомСемьи.Доступность = ЭтоПособиеПоУходу;
	ЭлементыФормы.УходЗаБольнымЧленомСемьи.ТолькоПросмотр = Не ЭтоПособиеПоУходу;
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

Процедура ОбновитьИнформационнуюНадписьРазмерПособия()

	//сумму пособия получим из таблицы "Начисления"
	СуммаПособия = 0;
	СуммаДоплатыДоСреднего = 0;
	СуммаСторно  = 0;
	СуммаДоначислено = 0;
	ОплаченоДней = 0;
	ИнформационнаяНадпись = "";
	ИнформационнаяНадписьСторно = "";
	ИнформационнаяНадписьДоначислено = "";
	
	Если Начисления.Количество() = 0 и РасчетСреднего.Количество() = 0 Тогда
		ИнформационнаяНадпись = "";
	ИначеЕсли Начисления.Количество() = 0 Тогда	
		ИнформационнаяНадпись = "Сумма пособия не рассчитана"
	Иначе
		// табличные части не пустые, получим сумму пособия и проверим наличие сторнирования
		// начислений прошлых преиодов
		Для каждого СтрокаНачислений Из Начисления Цикл
			Если СтрокаНачислений.Сторно Тогда
				ИнформационнаяНадписьСторно = "Сторнированы начисления прошлых периодов";
				СуммаСторно = СуммаСторно + СтрокаНачислений.Результат;
				Продолжить;
			КонецЕсли;
			Если СтрокаНачислений.ВидРасчета <> ВидРасчета и СтрокаНачислений.ВидРасчета <> ВидРасчетаЗаСчетРаботодателя и СтрокаНачислений.ВидРасчета <> ВидРасчетаДоплаты Тогда
				ИнформационнаяНадписьДоначислено = "Начисления прошлых периодов";
				СуммаДоначислено = СуммаДоначислено + СтрокаНачислений.Результат;
				Продолжить;
			КонецЕсли;
			Если СтрокаНачислений.ВидРасчета = ВидРасчетаДоплаты Тогда
				СуммаДоплатыДоСреднего = СуммаДоплатыДоСреднего + СтрокаНачислений.Результат;
				Продолжить;
			КонецЕсли;
			СуммаПособия = СуммаПособия + СтрокаНачислений.Результат;
			ОплаченоДней = ОплаченоДней + СтрокаНачислений.ОплаченоДнейЧасов;
		КонецЦикла;
	КонецЕсли;	
	
	// информационная надпись на лицевой стороне
	Если ДоплачиватьДоПолногоСреднегоЗаработка Тогда
		ЭлементыФормы.НадписьРазмерПособия.Заголовок = "Начислено:";	
		ЭлементыФормы.ЗначениеРазмерПособия.Заголовок = "пособия: " + Формат(СуммаПособия, "ЧЦ=12; ЧДЦ=2; ЧН=") + ?(СуммаДоплатыДоСреднего = 0, "", Символы.ПС + "доплаты: " + Формат(СуммаДоплатыДоСреднего, "ЧЦ=12; ЧДЦ=2; ЧН="));
	Иначе
		ЭлементыФормы.НадписьРазмерПособия.Заголовок = "Начислено пособия:";	
		ЭлементыФормы.ЗначениеРазмерПособия.Заголовок = Формат(СуммаПособия, "ЧЦ=12; ЧДЦ=2; ЧН=");
	КонецЕсли;
	
	ЭлементыФормы.ИнформационнаяНадписьРазмерПособия.Заголовок = ""+ ИнформационнаяНадпись + ИнформационнаяНадписьСторно;
	
	// информационная надбись на обороте больничного
	СтрокаРазмерПособия = "Размер пособия: " + Формат(СуммаПособия, "ЧЦ=12; ЧДЦ=2; ЧН=") + " руб." + ?(СуммаДоплатыДоСреднего = 0, "", ", доплата до среднего заработка: " + Формат(СуммаДоплатыДоСреднего, "ЧЦ=12; ЧДЦ=2; ЧН=")); 
	СтрокаРазмерПособия = СтрокаРазмерПособия + " Оплачено " + ОплаченоДней + " " + ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ОплаченоДней);
	СтрокаРазмерПособия = СтрокаРазмерПособия + Символы.ПС + ИнформационнаяНадписьСторно + ?(ПустаяСтрока(ИнформационнаяНадписьСторно),"", ": " + Формат(СуммаСторно, "ЧЦ=12; ЧДЦ=2; ЧН=") + " руб.");
	СтрокаРазмерПособия = СтрокаРазмерПособия + " " + ИнформационнаяНадписьДоначислено + ?(ПустаяСтрока(ИнформационнаяНадписьДоначислено),"", ": " + Формат(СуммаДоначислено, "ЧЦ=12; ЧДЦ=2; ЧН=") + " руб.");
	ЭлементыФормы.НадписьОплата.Заголовок = СтрокаРазмерПособия;
	
	// информационная надпись по отражению в учете
	Если ПериодРегистрации >= ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования() Тогда
		
		ЗаСчетФСС = Начисления.Выгрузить(Начисления.НайтиСтроки(Новый Структура("ВидРасчета, Сторно", ВидРасчета, Ложь)),"Результат").Итог("Результат");
		
		Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание Тогда
			ЗаСчетРаботодателя = Начисления.Выгрузить(Начисления.НайтиСтроки(Новый Структура("ВидРасчета, Сторно", ВидРасчетаЗаСчетРаботодателя, Ложь)),"Результат").Итог("Результат");
			Надпись = "За счет работодателя начислено: " + Формат(ЗаСчетРаботодателя, "ЧЦ=12; ЧДЦ=2; ЧН=-") + Символы.ПС 
						+ "За счет ФСС начислено: " + Формат(ЗаСчетФСС, "ЧЦ=12; ЧДЦ=2; ЧН=-");
		Иначе
			Надпись = "За счет ФСС начислено: " + Формат(ЗаСчетФСС, "ЧЦ=12; ЧДЦ=2; ЧН=-");
		КонецЕсли;
			
		ЭлементыФормы.ИнформационнаяНадписьОтражениеВУчете.Заголовок = Надпись;
		
	Иначе 	
		НачислениеПоБольничномуЛистуПереопределяемый.ОбновитьИнформационнуюНадписьОтражениеВУчете(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьИнформационнуюНадписьСреднийЗаработок()
	
	ДатаЗакона = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
	Если ДатаНачалаСобытия >= ДатаЗакона И ПериодРегистрации >= ДатаЗакона И Не (РасчетПоПравилам2010Года И ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам) Тогда
		
		ОписаниеЛет = "";
		Если ПервыйГодРасчета = 0 И ВторойГодРасчета = 0 Тогда
			ОписаниеЛет = "не указаны"
		ИначеЕсли ВторойГодРасчета = 0 Тогда
			ОписаниеЛет = Формат(ПервыйГодРасчета,"ЧЦ=4; ЧГ=0");
		ИначеЕсли ПервыйГодРасчета = 0 Тогда
			ОписаниеЛет = Формат(ВторойГодРасчета,"ЧЦ=4; ЧГ=0");
		Иначе
			ОписаниеЛет = Формат(ПервыйГодРасчета,"ЧЦ=4; ЧГ=0") + " и " + Формат(ВторойГодРасчета,"ЧЦ=4; ЧГ=0");
		КонецЕсли;
		
		СреднедневнойЗаработок = Формат(РасчетСреднего2011.Итог("Заработок") / ПроведениеРасчетов.УчитываемыхДнейДляРасчетаСреднегоЗаработкаПособий2011(ЭтотОбъект),"ЧЦ=15; ЧДЦ=2");
		
		ЭлементыФормы.НадписьСреднийЗаработок.Заголовок = "Средний дневной заработок:";
		ЭлементыФормы.ЗначениеСреднийЗаработок.Заголовок = СреднедневнойЗаработок;
		ЭлементыФормы.ИнформационнаяНадписьСреднийЗаработок.Заголовок = "Расчетные годы: " + Символы.ПС + ОписаниеЛет;
		ЭлементыФормы.НадписьРасчетСреднегоЗаработка.Заголовок = "Средний дневной заработок: " + СреднедневнойЗаработок + " руб." + Символы.ПС + "Расчетные годы: " + ОписаниеЛет;
		
	Иначе
		НачислениеПоБольничномуЛистуПереопределяемый.ОбновитьИнформационнуюНадписьСреднийЗаработок(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
КонецПроцедуры // ОбновитьИнформационнуюНадписьСреднийЗаработок()

// Определяет флажки-описатели состояния документа, формирует и показывает строку-описание
//
Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);

	ИмеетПродолжение = ЗначениеЗаполнено(мДокументПродолжение);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или Не ЗначениеЗаполнено(Сотрудник) Или Не ЗначениеЗаполнено(ПричинаНетрудоспособности);
	НеЗаполнен = НеЗаполнен Или (Не ЗначениеЗаполнено(ДатаНачалаСобытия) И Не ЗначениеЗаполнено(ДатаНачалаОплаты) И Не ЗначениеЗаполнено(ДатаНачала) И Не ЗначениеЗаполнено(ДатаОкончания));
	
	ЗаполненСОшибками = ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаОкончания) И ДатаНачала > ДатаОкончания;
	ЗаполненСОшибками = ЗаполненСОшибками Или (ЗначениеЗаполнено(ДатаНачалаОплаты) И ЗначениеЗаполнено(ДатаОкончания) И ДатаНачалаОплаты > ДатаОкончания);
	ЗаполненСОшибками = ЗаполненСОшибками Или (ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаНачалаСобытия) И ДатаНачалаСобытия > ДатаНачала);
	ЗаполненСОшибками = ЗаполненСОшибками Или (ЗначениеЗаполнено(ДатаНачала) И ЗначениеЗаполнено(ДатаНачалаОплаты) И ДатаНачала > ДатаНачалаОплаты);
	ЗаполненСОшибками = ЗаполненСОшибками Или (ЗначениеЗаполнено(ПричинаНетрудоспособности) И Не ЗначениеЗаполнено(ВидРасчета));
	ЗаполненСОшибками = ЗаполненСОшибками Или (ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком И Не ЗначениеЗаполнено(СлучайУходаЗаБольнымРебенком));
	
	Рассчитан = (Начисления.Количество() > 0);
	
	ОписаниеСостоянияДокумента = РаботаСДиалогамиЗК.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен, ЗаполненСОшибками, Рассчитан, Проведен, ЭтоИсправление, ДокументИсправлен, Сторнирован, ИмеетПродолжение, ЯвляетсяПродолжениемБолезни); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура ОбновитьРазмерыПособия(ТолькоДополнительныеДанные = Ложь)

	ПрочитатьРазмерыПособия(ТолькоДополнительныеДанные, мГоловнаяОрганизация);
	УстановитьПредставлениеПричиныНетрудоспособности();
	
КонецПроцедуры

Процедура ОбновитьДополнительныеЭлементыУправления()
	
	Оповестить("ОбновитьФорму", Новый Структура("Команда","ОбновитьФорму"), Ссылка);
	                                                                             
КонецПроцедуры // ОбновитьДополнительныеЭлементыУправления()

Процедура ОпределитьНаличиеЛьгот(ПриИзмененииЛьготРассчитатьПроценты = Ложь)

	ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
	
	Если мТекущийПериодРегистрации <> ПериодРегистрации Тогда
		Если мТекущийПериодРегистрации < ДатаЗакона213ФЗ И ПериодРегистрации < ДатаЗакона213ФЗ 
			Или мТекущийПериодРегистрации >= ДатаЗакона213ФЗ И ПериодРегистрации >= ДатаЗакона213ФЗ  Тогда
			Возврат
		КонецЕсли;
	ИначеЕсли мТекущаяПричинаНетрудоспособности <> ПричинаНетрудоспособности Тогда
		Если ЗначениеЗаполнено(мТекущаяПричинаНетрудоспособности) И мТекущаяПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве И ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
			Возврат
		КонецЕсли;
	КонецЕсли;
	
	ПрочитатьДанныеОЛьготах();
	
	ЭлементыФормы.НадписьПоказЛьготныхДанных.Видимость = ЗначениеЗаполнено(ВыплатаЗаСчетФедеральногоБюджета);
	
	Если ПриИзмененииЛьготРассчитатьПроценты Тогда
		ОбновитьРазмерыПособия();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОчиститьВсеРасчеты()

	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
	КонецЕсли;
	Если ОтражениеНачислений.Количество() > 0 Тогда
		ОтражениеНачислений.Очистить();
	КонецЕсли;
	Если РасчетСреднего.Количество() > 0 Тогда
		РасчетСреднего.Очистить();
	КонецЕсли;
	Если РасчетСреднего2011.Количество() > 0 Тогда
		РасчетСреднего2011.Очистить();
	КонецЕсли;

	ОбновитьИнформационнуюНадписьРазмерПособия();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ДатаНачала
//
Процедура ПриИзмененииДатыНачалаОплаты()
	
	РассчитатьКалендарныеДниБолезни();
	УстановитьПредставлениеПричиныНетрудоспособности();
	
    ОчиститьВсеРасчеты();

КонецПроцедуры // ДатаНачалаПриИзменении()

Процедура ПриИзмененииОрганизации()
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	ОбновитьДополнительныеЭлементыУправления();
	
	НастроитьПоказДанныхПилотногоПроектаФСС();
	Если ЭлементыФормы.НадписьЗаявление.Видимость Или ЭлементыФормы.НадписьЗаявление1.Видимость Тогда
		Автозаполнение("ДанныеСтрахователя");
	КонецЕсли;
	
КонецПроцедуры

// Выполняет заполнение необходимых данных при изменении первичного БЛ
//
Процедура ПриИзмененииПервичногоБольничногоЛиста()
	
	// Скопируем данные из первичного-листа 
	Если ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
		
		БылаОрганизация = Организация;
		БылаДатаНарушенияРежима = ДатаНарушенияРежима;
		БылПервичныйБольничныйЛист = ПервичныйБольничныйЛист;
		
		ЗаполнитьПоПервичномуЛистку(ПервичныйБольничныйЛист);
		РаботаСДиалогамиЗК.ПрочитатьГодыРасчетаСреднего2011(ЭтотОбъект, ЭтаФорма);
		ВыплачиватьПособие = Не НеВыплачиватьПособие;
		
		// добавим другие реквизиты
		Если ПервичныйБольничныйЛист.Пустая() Тогда
			ПервичныйБольничныйЛист	= БылПервичныйБольничныйЛист;
		КонецЕсли;
		
		ДатаЗакона213ФЗ = ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
		Если ПериодРегистрации >= ДатаЗакона213ФЗ И ДатаНачалаСобытия < ДатаЗакона213ФЗ Тогда // переходный период 2010 года
			ОпределитьНаличиеЛьгот(Ложь);
		КонецЕсли;
		
		НоваяДатаНачала = ПоследнийДеньБолезни(ПервичныйБольничныйЛист) + мДлинаСуток;
		
		Если ДатаНачала <> Макс(ДатаНачала, НоваяДатаНачала) Тогда
			ДатаНачала = Макс(ДатаНачала, НоваяДатаНачала);
			ДатаНачалаОплаты = Макс(ДатаНачала, ДатаНачалаОплаты);
			Если ДатаНачала > ДатаОкончания Тогда
				ДатаОкончания = '00010101';
			КонецЕсли;
			ПриИзмененииДатыНачалаОплаты();
		КонецЕсли;

		Если Не ЗначениеЗаполнено(ДатаНарушенияРежима) Тогда
			ДатаНарушенияРежима = БылаДатаНарушенияРежима;
		КонецЕсли;
		
		ОбновитьРазмерыПособия(Истина); // обновляются только дополнительные данные
		мТекущаяПричинаНетрудоспособности = ПричинаНетрудоспособности;
		
		Если БылаОрганизация <> Организация Тогда
			ПриИзмененииОрганизации()
		КонецЕсли;
		
		НастроитьПоказОтработанныхДней(); // для пособия по материнству с 2013 года
		ЭлементыФормы.РасчетСреднего2011.Колонки.Страхователь.Видимость = УчитыватьЗаработокПредыдущихСтрахователей;
		ЭлементыФормы.РасчетСреднего2011_ПП.Колонки.Страхователь.Видимость = УчитыватьЗаработокПредыдущихСтрахователей;
		
	КонецЕсли; 

	НачислениеПоБольничномуЛистуПереопределяемый.НастроитьСпискиВыбораЭлементовУправления(ЭтотОбъект, ЭтаФорма);
	ДатаЗакона = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
	Если ДатаНачалаСобытия < ДатаЗакона Или ПериодРегистрации < ДатаЗакона Тогда
		НачислениеПоБольничномуЛистуПереопределяемый.ЗаполнитьДополнительныеРеквизиты(ЭтотОбъект);
		НачислениеПоБольничномуЛистуПереопределяемый.НастроитьВидимостьБлокаРабочегоМеста(ЭтаФорма);
		НачислениеПоБольничномуЛистуПереопределяемый.НастроитьВидимостьКолонокРасчетаСреднего(ЭтаФорма);
	КонецЕсли;
	
	ОбновитьДоступностьЭлементовФормы();
	УстановитьПредставлениеПричиныНетрудоспособности();
	
    ОчиститьВсеРасчеты();

	ОбновитьДополнительныеЭлементыУправления();
	
КонецПроцедуры // ПриИзмененииПервичногоБольничногоЛиста()

Процедура ПриИзмененииПериодаРегистрации()

	РаботаСДиалогамиЗК.УстановитьКнопкиИсправленияДокументаОдногоСотрудника(ПериодРегистрации, ЗначениеЗаполнено(мДокументИсправление), ЗначениеЗаполнено(мДокументСторнирование), ЭлементыФормы.ДополнительныеДействия.Кнопки, мКнопкаИсправление, мКнопкаОтменаИсправление);
	ЭлементыФормы.ПанельЗаСчетРаботодателя.Свертка = ?(ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание И ПериодРегистрации >= ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования(),РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Верх);
	ОбновитьДополнительныеЭлементыУправления();
	ОпределитьНаличиеЛьгот(Истина);
	Если НовыйПорядокРасчетаПособияПоМатеринствуПриИсправлении И ПериодРегистрации < ПроведениеРасчетов.ДатаОтдельногоРасчетаПособийПоМатеринству() Тогда
		НовыйПорядокРасчетаПособияПоМатеринствуПриИсправлении = Ложь
	КонецЕсли;
	
	НастроитьПоказСкидок(); // колонка скидок показывается только в 2010 году
	НастроитьПоказОтработанныхДней(); // для пособия по материнству с 2013 года
	ОбновитьДоступностьЭлементовФормы();
	
	ПоказывалосьДоИзменения = ЭлементыФормы.НадписьЗаявление.Видимость Или ЭлементыФормы.НадписьЗаявление1.Видимость;
	НастроитьПоказДанныхПилотногоПроектаФСС();
	Если Не ПоказывалосьДоИзменения И (ЭлементыФормы.НадписьЗаявление.Видимость Или ЭлементыФормы.НадписьЗаявление1.Видимость) Тогда
		Автозаполнение();
		АдресПочтовыйВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресПочтовый);
		АдресРегистрацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРегистрации);
	КонецЕсли;
	
	НачислениеПоБольничномуЛистуПереопределяемый.ВыполнитьДействияПриИзмененииПериодаРегистрации(ЭтотОбъект, ЭтаФорма);
	мТекущийПериодРегистрации = ПериодРегистрации;
	
КонецПроцедуры

Процедура ПриИзмененииПроцентаОплаты() Экспорт 
	
	УстановитьПредставлениеПричиныНетрудоспособности();
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
	КонецЕсли;
	Если ОтражениеНачислений.Количество() > 0 Тогда
		ОтражениеНачислений.Очистить();
	КонецЕсли;
	ОбновитьИнформационнуюНадписьРазмерПособия();

КонецПроцедуры

Процедура ПроставитьДолжностьИПодразделение(Элемент, ОформленияСтрок)

	Колонки = Элемент.Колонки;
	ПоказыватьПодразделение	= Колонки.Подразделение.Видимость;
	ПоказыватьДолжность		= Колонки.Должность.Видимость;
	
	Если Не (ПоказыватьПодразделение Или ПоказыватьДолжность) Тогда
		Возврат;
	КонецЕсли;
	
	СоответствиеСотрудника = Новый Соответствие;
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Дата", ДатаНачалаСобытия);
	
	Запрос.Текст =
	"ВЫБРАТЬ
		|	ВЫБОР
		|		КОГДА  РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
		|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизацииЗавершения.Наименование
		|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.ПодразделениеОрганизации.Наименование
		|	КОНЕЦ КАК ПодразделениеОрганизации,
		|	ВЫБОР
		|		КОГДА  РаботникиОрганизацийСрезПоследних.ПериодЗавершения <= &Дата
		|				И РаботникиОрганизацийСрезПоследних.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|		ТОГДА РаботникиОрганизацийСрезПоследних.ДолжностьЗавершения.Наименование
		|		ИНАЧЕ РаботникиОрганизацийСрезПоследних.Должность.Наименование
		|	КОНЕЦ КАК Должность
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&Дата, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних";
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
	
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Запрос.УстановитьПараметр("Сотрудник",	ДанныеСтроки.Сотрудник);
		
		ДанныеСотрудника = СоответствиеСотрудника[ДанныеСтроки.Сотрудник];
		Если ДанныеСотрудника = Неопределено Тогда
			ДанныеСотрудника = Новый Структура("ПодразделениеОрганизации,Должность");
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ЗаполнитьЗначенияСвойств(ДанныеСотрудника,Выборка);
			КонецЕсли;
			СоответствиеСотрудника.Вставить(ДанныеСтроки.Сотрудник,ДанныеСотрудника)
		КонецЕсли;
		
		Если ПоказыватьПодразделение Тогда
			ОформлениеСтроки.Ячейки.Подразделение.УстановитьТекст(ДанныеСотрудника.ПодразделениеОрганизации);
		КонецЕсли;
		
		Если ПоказыватьДолжность Тогда
			ОформлениеСтроки.Ячейки.Должность.УстановитьТекст(ДанныеСотрудника.Должность);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроставитьДолжностьИПодразделение()

Процедура РассчитатьКалендарныеДниБолезни()

	Если ЗначениеЗаполнено(ДатаНачалаОплаты) И ЗначениеЗаполнено(ДатаОкончания) Тогда
		РассчитатьДниКОплате();
		ЭлементыФормы.НадписьДней.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейОплаты)
	КонецЕсли;

КонецПроцедуры

Процедура РассчитатьНачисления(КомментироватьРасчет)

	Если Не ПроверкаУчастияВПилотномПроектеФСС(Организация, ПериодРегистрации) Тогда
		Возврат
	КонецЕсли;
	
	МассивТаблиц = Новый Массив;
	Если Начисления.Количество() > 0 Тогда
		МассивТаблиц.Добавить(Начисления);
	КонецЕсли;
	
	Если ОтражениеНачислений.Количество() > 0 Тогда
		МассивТаблиц.Добавить(ОтражениеНачислений);
		ТекстВопроса2 = "Перед расчетом таблицы ""Оплата"" и ""Отражение пособия в учете"" будут очищены. Продолжить?";
	Иначе
		ТекстВопроса2 = "Перед расчетом таблица ""Оплата"" будет очищена. Продолжить?";
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если МассивТаблиц.Количество() > 0 Тогда
		ТекстВопроса1 = "Рассчитать документ можно только после отмены его проведения. Продолжить?";
		Если Не РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		Начисления.Очистить();
		ОтражениеНачислений.Очистить();
	Иначе 	
		Если Не РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, "рассчитать") Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	мРассчитываемыеТаблицы.Начисления = Истина;
	мРассчитываемыеТаблицы.РасчетСреднего = Ложь;
	Рассчитать(мРассчитываемыеТаблицы, КомментироватьРасчет);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ОбновитьИнформационнуюНадписьРазмерПособия();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();

КонецПроцедуры

Процедура РассчитатьСреднийЗаработок(ИмяТЧСреднего)

	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;

	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить(Начисления);
	МассивТаблиц.Добавить(ЭтотОбъект[ИмяТЧСреднего]);
	МассивТаблиц.Добавить(ОтражениеНачислений);
	ТекстВопроса1 = "Рассчитать документ можно только после отмены его проведения. Продолжить?";
	ТекстВопроса2 = "Перед расчетом все таблицы документа будут очищены. Продолжить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	Начисления.Очистить();
	ЭтотОбъект[ИмяТЧСреднего].Очистить();
	ОтражениеНачислений.Очистить();
	
	мРассчитываемыеТаблицы.Начисления = Ложь;
	мРассчитываемыеТаблицы.РасчетСреднего = Истина;
	
	Рассчитать(мРассчитываемыеТаблицы);
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ОбновитьИнформационнуюНадписьРазмерПособия();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	

КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	ЭлементыФормы.Начисления.Колонки.ПодразделениеОрганизации.ТекстШапки = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Подразделение организации");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднего,ЭлементыФормы.КоманднаяПанельРасчетСреднего);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднего2011,ЭлементыФормы.КоманднаяПанельРасчетСреднего2011);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднего2010_ПП,ЭлементыФормы.КоманднаяПанельРасчетСреднего2013);
	СоответствиеТЧ.Вставить(ЭлементыФормы.РасчетСреднего2011_ПП,ЭлементыФормы.КоманднаяПанельРасчетСреднего2012);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Устанавливает в форме представление причины нетрудоспособности
//
// 
Процедура УстановитьПредставлениеПричиныНетрудоспособности()

	УточненныйПроцентОплаты	= ?(ЗначениеЗаполнено(ВыплатаЗаСчетФедеральногоБюджета) И Не ПрименятьЛьготыПриНачисленииПособия, ПроцентОплатыБезЛьгот, ПроцентОплаты);
	Если НЕ ПричинаНетрудоспособности.Пустая() Тогда
		Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание 
			Или ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым
			Или ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Карантин
			Или ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании
			Или ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве
			Или ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Протезирование Тогда
			
			ОписаниеПричиныНетрудоспособности = "Оплачивается " + ДнейОплаты + " дней нетрудоспособности. " +	
			"Дневное пособие за оплачиваемые дни болезни составляет " + УточненныйПроцентОплаты + "% среднего заработка";
			
		ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			
			ОписаниеПричиныНетрудоспособности = "Оплачивается " + ДнейОплаты + " дней отпуска. "+	
			"Дневное пособие за оплачиваемые дни болезни составляет "+УточненныйПроцентОплаты+"% среднего заработка";
			
		ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
			
			Если СлучайУходаЗаБольнымРебенком.Пустая() Тогда	
				
				ОписаниеПричиныНетрудоспособности = "По уходу за больным ребенком. Случай ухода за ребенком не указан. Оплачивается " + ДнейОплаты + " дней нетрудоспособности. ";
				
			ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетАмбулаторно 
				Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно 
				Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно
				Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетАмбулаторно
				Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно Тогда
				
				ОписаниеПричиныНетрудоспособности = "По уходу за больным ребенком " + Строка(СлучайУходаЗаБольнымРебенком) + ". Оплачивается " + ДнейОплаты + " дней нетрудоспособности. "+
				"Дневное пособие за первые 10 календарных дней болезни составляет "+УточненныйПроцентОплаты+"% среднего заработка, за остальные дни - 50% среднего заработка";
				
			ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетВСтационаре 
				Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре
				Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомВСтационаре
				Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетВСтационаре
				Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриВИЧ
				Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииВСтационаре Тогда
				
				ОписаниеПричиныНетрудоспособности = "По уходу за больным ребенком " + Строка(СлучайУходаЗаБольнымРебенком) + ". Оплачивается " + ДнейОплаты + " дней нетрудоспособности. "+
				"Дневное пособие за оплачиваемые дни болезни составляет "+УточненныйПроцентОплаты+"% среднего заработка";
				
			КонецЕсли;
			
		Иначе
			
			ОписаниеПричиныНетрудоспособности = "";
			
		КонецЕсли;
		
		Если (ЗначениеЗаполнено(ОписаниеПричиныНетрудоспособности)) и (ЗначениеЗаполнено(ОграничениеПособия)) Тогда
			Если ОграничениеПособия = Перечисления.ВидыОграниченияПособия.БезОграничений Тогда
				ОписаниеПричиныНетрудоспособности =  ОписаниеПричиныНетрудоспособности + ".";	
			Иначе
				ОписаниеПричиныНетрудоспособности =  ОписаниеПричиныНетрудоспособности + " с учетом ограничения общего размера пособия.";
			КонецЕсли;
		КонецЕсли;
		
	Иначе	
		ОписаниеПричиныНетрудоспособности = "";
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОписаниеПричиныНетрудоспособности) Тогда
		ОписаниеПричиныНетрудоспособности = НачислениеПоБольничномуЛистуПереопределяемый.ПолучитьОписаниеПоПрочимПричинам(ЭтотОбъект)	
	КонецЕсли;
	
	ПричинаНетрудоспособностиСтрока = ОписаниеПричиныНетрудоспособности;

КонецПроцедуры // УстановитьПредставлениеПричиныНетрудоспособности()

Функция ПолучитьПродолжение(ДокументСсылка = Неопределено)  
	
	Если Не ЗначениеЗаполнено(ДокументСсылка) Тогда
		Возврат Неопределено	
	КонецЕсли;	
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Продолжения.Ссылка
	|ИЗ
	|	Документ.НачислениеПоБольничномуЛисту КАК Продолжения
	|ГДЕ
	|	Продолжения.ПервичныйБольничныйЛист = &ИсходныйДокумент";
	
	Запрос.УстановитьПараметр("ИсходныйДокумент",ДокументСсылка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка
	Иначе
		Возврат Документы.НачислениеПоБольничномуЛисту.ПустаяСсылка()
	КонецЕсли;
	
КонецФункции

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//	Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке(ИмяЭУ = "ВидРасчета")
	
	Если ИмяЭУ = "ВидРасчета" Тогда
		МассивВидов = Новый Массив;
		Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
			МассивВидов.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
		ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
			МассивВидов.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай);
			МассивВидов.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание);
		Иначе
			МассивВидов.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
		КонецЕсли;
		СтруктураПараметров = Новый Структура("ВидПособияСоциальногоСтрахования", МассивВидов);
	ИначеЕсли ИмяЭУ = "РасчетСреднего" Тогда
		СтруктураПараметров = Новый Структура("Ссылка", ЭлементыФормы.РасчетСреднего.Колонки.ВидРасчета.ЭлементУправления.СписокВыбора);
	ИначеЕсли ИмяЭУ = "ВидРасчетаДоплаты" Тогда
		СтруктураПараметров = Новый Структура("СпособРасчета", Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС);
	ИначеЕсли ИмяЭУ = "ВидРасчетаЗаСчетРаботодателя" Тогда
		СтруктураПараметров = Новый Структура("СпособРасчета,ВидПособияСоциальногоСтрахования", Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС,Перечисления.ВидыПособийСоциальногоСтрахования.ПустаяСсылка());
	КонецЕсли;

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Функция ПроверкаУчастияВПилотномПроектеФСС(ТекОрганизация, ТекПериодРегистрации)
	
	Возврат ОбменСведениямиОПособияхСФСС.ПроверкаУчастияВПилотномПроектеИОтказОтДействия(ТекОрганизация, ТекПериодРегистрации, "Расчет пособия", "Провести расчет пособия")
	
КонецФункции 
	
// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда
		ОрганизацияДляПроверки = Организация;
		Если Не ЗначениеЗаполнено(ОрганизацияДляПроверки) Тогда
			ОрганизацияДляПроверки = УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОсновнаяОрганизация")
		КонецЕсли;
		ПериодРегистрацииДляПроверки = ПериодРегистрации;
		Если Не ЗначениеЗаполнено(ПериодРегистрацииДляПроверки) Тогда
			ПериодРегистрацииДляПроверки = НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату())
		КонецЕсли;
		Отказ = Не ПроверкаУчастияВПилотномПроектеФСС(ОрганизацияДляПроверки, ПериодРегистрацииДляПроверки);
	КонецЕсли;
	
	НачислениеПоБольничномуЛистуПереопределяемый.ВыполнитьДействияПередОткрытиемФормы(ЭтаФорма);
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"ТаблицаДокумента");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		мДокументПродолжение = ПолучитьПродолжение(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
	Иначе	
		РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, "Документ не заполнен", "СообщениеОПроблемах");
	КонецЕсли;
	
	НачислениеПоБольничномуЛистуПереопределяемый.ДополнитьКолонкиТабличногоПоля(ЭлементыФормы.РасчетСреднего);
	НачислениеПоБольничномуЛистуПереопределяемый.ДополнитьКолонкиТабличногоПоля(ЭлементыФормы.РасчетСреднего2010_ПП);
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		Если НЕ ЗначениеЗаполнено(ОграничениеПособия) Тогда // документ не копировался
			ПроцентОплаты = 100;
			ОграничениеПособия = Перечисления.ВидыОграниченияПособия.ОбщееОграничение;
			СтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления;
			ВидРасчетаЗаСчетРаботодателя = ОбщегоНазначенияЗК.ОсобыйЭлемент(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций, "ОплатаБолезниЗаСчетРаботодателя");
			НачислениеПоБольничномуЛистуПереопределяемый.ЗаполнитьДополнительныеРеквизиты(ЭтотОбъект, , Истина);
			Если ЗначениеЗаполнено(Организация) И ПроведениеРасчетов.ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(ПериодРегистрации, Организация) Тогда
				Автозаполнение("ДанныеСтрахователя");
			КонецЕсли;
		КонецЕсли;
		ДнейОплатыРаботодателем = ДниОплачиваемыеРаботодателем(ПериодРегистрации);
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);
	
	// показываем лицевую сторону больничного
	ЭлементыФормы.НадписьБольничныйЛист.Видимость 	  = Истина;
	ЭлементыФормы.НадписьБольничныйЛист1.Видимость 	  = Ложь;
	ЭлементыФормы.НадписьОборотБольничного.Видимость  = Ложь;
	ЭлементыФормы.НадписьОборотБольничного1.Видимость = Истина;
	ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.Условия;
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	// Заполним реквизит формы ВыплачиватьПособие.
	ВыплачиватьПособие = Не НеВыплачиватьПособие;
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();

	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");
	СтруктураКолонок.Вставить("Результат");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура();

	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("БазовыйПериодНачало");
	СтруктураКолонок.Вставить("БазовыйПериодКонец");
	СтруктураКолонок.Вставить("Результат");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетСреднего.Колонки, СтруктураКолонок);
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РасчетСреднего2010_ПП.Колонки, СтруктураКолонок);
	
	НастроитьПоказСкидок(); // колонка скидок показывается только в 2010 году
	НастроитьПоказОтработанныхДней(); // для пособия по материнству с 2013 года
	НастроитьПоказДанныхПилотногоПроектаФСС();
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента				= Дата;
	мТекущийПериодРегистрации			= ПериодРегистрации;
	мТекущаяПричинаНетрудоспособности	= ПричинаНетрудоспособности;
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация				= ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	мБылПервичныйБольничныйЛист			= ПервичныйБольничныйЛист;
	
	// Исправление документов
	мКнопкаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
 	ОбновитьДоступностьЭлементовФормы();
	УстановитьЗаголовкиОрганизацийВФорме();
	ЭлементыФормы.НадписьПоказЛьготныхДанных.Видимость = ЗначениеЗаполнено(ВыплатаЗаСчетФедеральногоБюджета);
	ЭлементыФормы.ПанельПроцентовОграничений.ТекущаяСтраница = ?(ЗначениеЗаполнено(ВыплатаЗаСчетФедеральногоБюджета) И Не ПрименятьЛьготыПриНачисленииПособия, ЭлементыФормы.ПанельПроцентовОграничений.Страницы.СтраницаОсобыйРасчет, ЭлементыФормы.ПанельПроцентовОграничений.Страницы.СтраницаОбычныйРасчет);	

	ЭлементыФормы.НадписьДней.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейОплаты);
	ЭлементыФормы.ПанельДоплаты.Свертка = ?(ДоплачиватьДоПолногоСреднегоЗаработка,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Верх);

	РаботаСДиалогамиЗК.ПрочитатьГодыРасчетаСреднего2011(ЭтотОбъект, ЭтаФорма);
	ЭлементыФормы.РасчетСреднего2011.Колонки.Страхователь.Видимость = УчитыватьЗаработокПредыдущихСтрахователей;
	ЭлементыФормы.РасчетСреднего2011_ПП.Колонки.Страхователь.Видимость = УчитыватьЗаработокПредыдущихСтрахователей;
	
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПоказыватьКодПричиныПерерасчета = ПроведениеРасчетов.ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(КонецГода(ПериодРегистрации), Организация);
		ЭлементыФормы.НадписьКодПричиныПерерасчета.Видимость = ПоказыватьКодПричиныПерерасчета;
		ЭлементыФормы.КодПричиныПерерасчета.Видимость = ПоказыватьКодПричиныПерерасчета;
		ЭлементыФормы.НовыйПорядокРасчетаПособияПоМатеринствуПриИсправлении.Видимость = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ПерерассчитываемыйДокумент,"ПериодРегистрации") < ПроведениеРасчетов.ДатаОтдельногоРасчетаПособийПоМатеринству();
	Иначе 	
		ЭлементыФормы.НадписьКодПричиныПерерасчета.Видимость = Ложь;
		ЭлементыФормы.КодПричиныПерерасчета.Видимость = Ложь;
		ЭлементыФормы.НовыйПорядокРасчетаПособияПоМатеринствуПриИсправлении.Видимость = Ложь;
	КонецЕсли;
	
	// Заполним реквизит формы ПредставлениеПричиныНетрудоспособности.
	УстановитьПредставлениеПричиныНетрудоспособности();
	ОбновитьИнформационнуюНадписьРазмерПособия();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	
	НачислениеПоБольничномуЛистуПереопределяемый.НастроитьСпискиВыбораЭлементовУправления(ЭтотОбъект, ЭтаФорма);
	НачислениеПоБольничномуЛистуПереопределяемый.ВыполнитьДействияПриИзмененииПериодаРегистрации(ЭтотОбъект, ЭтаФорма);
	ДатаЗакона = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
	Если ДатаНачалаСобытия < ДатаЗакона Или ПериодРегистрации < ДатаЗакона Тогда
		НачислениеПоБольничномуЛистуПереопределяемый.ПоказатьДополнительныеРеквизиты(ЭтотОбъект, ЭтаФорма);
		
		// Установим видимость блока "Рабочее место" в т.ч. расчета среднего заработка
		НачислениеПоБольничномуЛистуПереопределяемый.НастроитьВидимостьБлокаРабочегоМеста(ЭтаФорма, Истина);
		НачислениеПоБольничномуЛистуПереопределяемый.НастроитьВидимостьКолонокРасчетаСреднего(ЭтаФорма, Истина);
	КонецЕсли;
	
	// Установить настройку периода по умолчанию
	мНастройкаПериода = Новый НастройкаПериода;
	мНастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	
	АдресПочтовыйВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресПочтовый);
	АдресРегистрацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРегистрации);
	АдресЛПУВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресЛПУ);
	
	// Установить активный реквизит.
	Если ЭтоНовый() и Не ЯвляетсяПродолжениемБолезни Тогда
		ТекущийЭлемент = ЭлементыФормы.ФлажокПродолженияБолезни;
	ИначеЕсли Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
    ОписаниеДокументаНаПроживание = ОбменСведениямиОПособияхСФСС.ОписаниеДокументаНаПроживание(ЭтотОбъект)
	
КонецПроцедуры // ОбновлениеОтображения()

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Если ТипЗнч(ЗначениеВыбора) = Тип("ДокументСсылка.НачислениеПоБольничномуЛисту") Тогда
		ПервичныйБольничныйЛист  = ЗначениеВыбора;
		ПриИзмененииПервичногоБольничногоЛиста();
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Не ЭтоНовый() Тогда
					Если Команда = "ПродолжениеБольничногоЛистка" Тогда
						Если Параметр.Объект = Ссылка Тогда
							мДокументПродолжение = Источник
						ИначеЕсли ЗначениеЗаполнено(Параметр.Объект) Тогда
							мДокументПродолжение = Неопределено
						Иначе
							мДокументПродолжение = ПолучитьПродолжение(Ссылка)
						КонецЕсли;
					ИначеЕсли Команда = "ДоступностьИсправленногоДокумента" Тогда
						Если Параметр.Объект = Ссылка И мДокументИсправление <> Источник Тогда
							мДокументИсправление = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
						Если Параметр.Объект = Ссылка Тогда
							Если мДокументСторнирование <> Источник Тогда
								мДокументСторнирование = Источник;
								ОбновитьДоступностьЭлементовФормы();
							КонецЕсли;
						ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
							НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
							Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
								мДокументСторнирование = НовыйДокументСторнирование;
								Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
									РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
								КонецЕсли;
								ОбновитьДоступностьЭлементовФормы();
							КонецЕсли;
						КонецЕсли;
					Иначе
					КонецЕсли;
				КонецЕсли;
				Если Команда = "ОбновитьФорму" и Источник = Ссылка Тогда
					УстановитьПредставлениеПричиныНетрудоспособности();
					ОбновитьИнформационнуюНадписьРазмерПособия();
				Иначе
				КонецЕсли;
				
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	РаботаСДиалогамиЗК.ЗаписатьГодыРасчетаСреднего2011(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;

	// оповестим первичный документ о появлении продолжения
	Если мБылПервичныйБольничныйЛист <> ПервичныйБольничныйЛист Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ПродолжениеБольничногоЛистка", ПервичныйБольничныйЛист), Ссылка);
		мБылПервичныйБольничныйЛист = ПервичныйБольничныйЛист;
	КонецЕсли;

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
		
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура ввода документа-исправления
Процедура ДополнительныеДействияИсправить(Кнопка)

	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура отмены исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"ТаблицаДокумента");
	ОбновитьДоступностьЭлементовФормы();
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ табличных полей закладки Оборот

Процедура КоманднаяПанельНачисленияРассчитатьНачисления(Кнопка)
	
	РассчитатьНачисления(Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельРасчетСреднегоРассчитатьСреднийЗаработок(Кнопка)
	
	РассчитатьСреднийЗаработок("РасчетСреднего")
	
КонецПроцедуры

Процедура КоманднаяПанельРасчетСреднего2011РассчитатьСреднийЗаработок(Кнопка)

	РассчитатьСреднийЗаработок("РасчетСреднего2011")
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	ПриИзмененииОрганизации();
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	ПриИзмененииПериодаРегистрации();
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	ПриИзмененииПериодаРегистрации();
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	ПриИзмененииПериодаРегистрации();
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода физлица
//
Процедура СотрудникПриИзменении(Элемент)

	ОпределитьНаличиеЛьгот(Истина);
	
	Если ЭлементыФормы.НадписьЗаявление.Видимость Или ЭлементыФормы.НадписьЗаявление1.Видимость Тогда
		Автозаполнение("ДанныеСотрудника");
		АдресРегистрацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРегистрации);
		АдресПочтовыйВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресПочтовый);
	КонецЕсли;
	ОчиститьВсеРасчеты();
	
КонецПроцедуры // СотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // СотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // СотрудникОкончаниеВводаТекста()

Процедура ФлажокПродолженияБолезниПриИзменении(Элемент)
	ЭлементыФормы.ПервичныйБольничныйЛист.ТолькоПросмотр = Не ЯвляетсяПродолжениемБолезни;
	ЭлементыФормы.ДатаНачала.ТолькоПросмотр = Не ЯвляетсяПродолжениемБолезни;
	ЭлементыФормы.ДатаНачала.ПропускатьПриВводе = Не ЯвляетсяПродолжениемБолезни;
	Если Не ЯвляетсяПродолжениемБолезни Тогда
		Если ЗначениеЗаполнено(ПервичныйБольничныйЛист) Тогда
			ПервичныйБольничныйЛист = "";
			ПриИзмененииПервичногоБольничногоЛиста();
		КонецЕсли;
		ДатаНачалаСобытия = ДатаНачала;
	КонецЕсли;
	ЭлементыФормы.ДатаНачалаСобытия.ТолькоПросмотр = ТолькоПросмотр Или (ЯвляетсяПродолжениемБолезни И ЗначениеЗаполнено(ПервичныйБольничныйЛист));
КонецПроцедуры

Процедура ДатаНачалаСобытияПриИзменении(Элемент)
	
	Если ЯвляетсяПродолжениемБолезни Тогда
		Если ДатаНачала <> Макс(ДатаНачала, ДатаНачалаСобытия) Тогда
			ДатаНачала = Макс(ДатаНачала, ДатаНачалаСобытия);
			ДатаНачалаОплаты = Макс(ДатаНачала, ДатаНачалаОплаты);
			ПриИзмененииДатыНачалаОплаты();
		КонецЕсли;
	Иначе
		ДатаНачала = ДатаНачалаСобытия;
		ДатаНачалаОплаты = Макс(ДатаНачала, ДатаНачалаОплаты);
		ПриИзмененииДатыНачалаОплаты();
	КонецЕсли;
	
	ПериодРасчетаСреднегоЗаработкаНачало = ДобавитьМесяц(НачалоМесяца(ДатаНачалаСобытия), - 12);
	ПериодРасчетаСреднегоЗаработкаОкончание = НачалоМесяца(ДатаНачалаСобытия) - 1;
	
	ГодНачалаСобытия = Год(ДатаНачалаСобытия);
	ПервыйГодРасчета = ГодНачалаСобытия - 2;
	ВторойГодРасчета = ГодНачалаСобытия - 1;
	
	ОбновитьРазмерыПособия();
	ОбновитьДоступностьЭлементовФормы();
	ОбновитьИнформационнуюНадписьРазмерПособия();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	НачислениеПоБольничномуЛистуПереопределяемый.НастроитьСпискиВыбораЭлементовУправления(ЭтотОбъект, ЭтаФорма);
	
	ДатаЗакона = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
	Если ДатаНачалаСобытия < ДатаЗакона Или ПериодРегистрации < ДатаЗакона Тогда
		НачислениеПоБольничномуЛистуПереопределяемый.ЗаполнитьДополнительныеРеквизиты(ЭтотОбъект, Ложь);
		НачислениеПоБольничномуЛистуПереопределяемый.ПоказатьДополнительныеРеквизиты(ЭтотОбъект, ЭтаФорма);
		НачислениеПоБольничномуЛистуПереопределяемый.НастроитьВидимостьБлокаРабочегоМеста(ЭтаФорма);
		НачислениеПоБольничномуЛистуПереопределяемый.НастроитьВидимостьКолонокРасчетаСреднего(ЭтаФорма);
	КонецЕсли;
	Если ДатаНачалаСобытия >= ДатаЗакона Тогда
		ДнейОплатыРаботодателем = ДниОплачиваемыеРаботодателем(ПериодРегистрации)
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода ДатаНачала
//
Процедура ДатаНачалаПриИзменении(Элемент)
	
	Если ДатаНачалаОплаты <> Макс(ДатаНачала, ДатаНачалаОплаты) Тогда
		ДатаНачалаОплаты = Макс(ДатаНачала, ДатаНачалаОплаты);
		ПриИзмененииДатыНачалаОплаты();
	КонецЕсли;
	
	ОбновитьИнформационнуюНадписьРазмерПособия();
	НачислениеПоБольничномуЛистуПереопределяемый.НастроитьСпискиВыбораЭлементовУправления(ЭтотОбъект, ЭтаФорма);
	ДатаЗакона = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
	Если ДатаНачалаСобытия < ДатаЗакона Или ПериодРегистрации < ДатаЗакона Тогда
		НачислениеПоБольничномуЛистуПереопределяемый.ЗаполнитьДополнительныеРеквизиты(ЭтотОбъект, Ложь);
		НачислениеПоБольничномуЛистуПереопределяемый.ПоказатьДополнительныеРеквизиты(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;

КонецПроцедуры // ДатаНачалаПриИзменении()

Процедура ДатаОкончанияПриИзменении(Элемент)
	
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
	КонецЕсли;
	Если ОтражениеНачислений.Количество() > 0 Тогда
		ОтражениеНачислений.Очистить();
	КонецЕсли;
	
	РассчитатьКалендарныеДниБолезни();
	НачислениеПоБольничномуЛистуПереопределяемый.НастроитьСпискиВыбораЭлементовУправления(ЭтотОбъект, ЭтаФорма);
	
	ДатаЗакона = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
	Если ДатаНачалаСобытия < ДатаЗакона Или ПериодРегистрации < ДатаЗакона Тогда
		НачислениеПоБольничномуЛистуПереопределяемый.ЗаполнитьДополнительныеРеквизиты(ЭтотОбъект, Ложь);
		НачислениеПоБольничномуЛистуПереопределяемый.ПоказатьДополнительныеРеквизиты(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЕстьРасчетыПоКалендарнымГодам() И Не ЗначениеЗаполнено(ПервыйГодРасчета) И Не ЗначениеЗаполнено(ВторойГодРасчета) Тогда
		ГодНачалаСобытия = Год(ДатаНачалаСобытия);
		ПервыйГодРасчета = ГодНачалаСобытия - 2;
		ВторойГодРасчета = ГодНачалаСобытия - 1;
	КонецЕсли;
	
	ОбновитьРазмерыПособия(Истина);
	ОбновитьДоступностьЭлементовФормы();
	ОбновитьИнформационнуюНадписьРазмерПособия();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();

КонецПроцедуры

Процедура ДнейОплатыПриИзменении(Элемент)
	
	ЭлементыФормы.НадписьДней.Заголовок = ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней",ДнейОплаты);
	УстановитьПредставлениеПричиныНетрудоспособности();
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
	КонецЕсли;
	Если ОтражениеНачислений.Количество() > 0 Тогда
		ОтражениеНачислений.Очистить();
	КонецЕсли;
	
	ОбновитьИнформационнуюНадписьРазмерПособия();

КонецПроцедуры

Процедура ДатаНачалаОплатыПриИзменении(Элемент)
	ПриИзмененииДатыНачалаОплаты();
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" первичного больничного листа
//
Процедура ПервичныйБольничныйЛистПриИзменении(Элемент)
	
	ПриИзмененииПервичногоБольничногоЛиста();
	
КонецПроцедуры // ПервичныйБольничныйЛистПриИзменении()

// Процедура - обработчик события "НачалоВыбора" первичного больничного листа
//
Процедура ПервичныйБольничныйЛистНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбораПервичногоБольничногоЛиста = Документы.НачислениеПоБольничномуЛисту.ПолучитьФормуВыбора("ФормаВыбораПервичногоЛисткаНетрудоспособности", ЭтаФорма, "ВыборПервичногоБЛДляНачисленияПоБЛ № " + Номер);
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		ФормаВыбораПервичногоБольничногоЛиста.Отбор.Сотрудник.Установить(Сотрудник);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		ФормаВыбораПервичногоБольничногоЛиста.Отбор.Организация.Установить(Организация);
	КонецЕсли;
	ФормаВыбораПервичногоБольничногоЛиста.Отбор.ЯвляетсяПродолжениемБолезни.Установить(Ложь);
	ФормаВыбораПервичногоБольничногоЛиста.НачальноеЗначениеВыбора = ПервичныйБольничныйЛист;
	ФормаВыбораПервичногоБольничногоЛиста.Порядок.Установить("Дата Убыв");
	ФормаВыбораПервичногоБольничногоЛиста.Открыть();
	
КонецПроцедуры // ПервичныйБольничныйЛистНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" причины нетрудоспособности
Процедура ПричинаНетрудоспособностиПриИзменении(Элемент)
	
	ВидРасчета = ПолучитьВидРасчетаОтПричиныНетрудоспособности(ПричинаНетрудоспособности);
	
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
		ОбновитьИнформационнуюНадписьРазмерПособия();
	КонецЕсли;
	Если ОтражениеНачислений.Количество() > 0 Тогда
		ОтражениеНачислений.Очистить();
	КонецЕсли;
	ОбновитьДополнительныеЭлементыУправления();
	
	Если ПричинаНетрудоспособности <> Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		РасчетПоПравилам2010Года = Ложь;
		НовыйПорядокРасчетаПособияПоМатеринствуПриИсправлении = Ложь;
	КонецЕсли;
	
	НадоВводитьСлучайУходаЗаРебенком = ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком;
    ЭлементыФормы.СлучайУходаЗаБольнымРебенком.ТолькоПросмотр = Не НадоВводитьСлучайУходаЗаРебенком;
    ЭлементыФормы.СлучайУходаЗаБольнымРебенком.АвтоОтметкаНезаполненного = НадоВводитьСлучайУходаЗаРебенком;
    ЭлементыФормы.СлучайУходаЗаБольнымРебенком.ОтметкаНезаполненного = НадоВводитьСлучайУходаЗаРебенком И СлучайУходаЗаБольнымРебенком.Пустая();
	Если Не НадоВводитьСлучайУходаЗаРебенком И Не СлучайУходаЗаБольнымРебенком.Пустая() Тогда
		СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПустаяСсылка()
	КонецЕсли;
	
	ЭлементыФормы.ПанельЗаСчетРаботодателя.Свертка = ?(ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание И ПериодРегистрации >= ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования(),РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Верх);
	
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание Тогда
		КодПричиныНетрудоспособности = "01"
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Карантин Тогда
		КодПричиныНетрудоспособности = "03"
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
		КодПричиныНетрудоспособности = "04"
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		КодПричиныНетрудоспособности = "05"
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.Протезирование Тогда
		КодПричиныНетрудоспособности = "06"
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПособиеПриДолечивании Тогда
		КодПричиныНетрудоспособности = "08"
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаВзрослым Тогда
		КодПричиныНетрудоспособности = "09"
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоУходуЗаРебенком Тогда
		КодПричиныНетрудоспособности = "09"
	Иначе
		
	КонецЕсли;
	
	ОпределитьНаличиеЛьгот(Ложь);
	ОбновитьРазмерыПособия();
	ОбновитьДоступностьЭлементовФормы();
	НастроитьПоказОтработанныхДней(); // для пособия по материнству с 2013 года
	мТекущаяПричинаНетрудоспособности = ПричинаНетрудоспособности;
	УстановитьПредставлениеПричиныНетрудоспособности();
	
КонецПроцедуры

Процедура СлучайУходаЗаБольнымРебенкомПриИзменении(Элемент)
	
	УстановитьПредставлениеПричиныНетрудоспособности();
	Если СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомВСтационаре Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуЗаРебенкомИнвалидомАмбулаторно Тогда
		КодПричиныНетрудоспособности = "13"
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииВСтационаре Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо7миЛетПриОсобомЗаболеванииАмбулаторно Тогда
		КодПричиныНетрудоспособности = "12"
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииВСтационаре Или СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриПоствакцинальномОсложненииАмбулаторно Тогда
		КодПричиныНетрудоспособности = "14"
	ИначеЕсли СлучайУходаЗаБольнымРебенком = Перечисления.СлучаиУходаЗаБольнымиДетьми.ПоУходуДо15тиЛетПриВИЧ Тогда
		КодПричиныНетрудоспособности = "15"
	КонецЕсли;
	
КонецПроцедуры

Процедура ВыплачиватьПособиеПриИзменении(Элемент)
	НеВыплачиватьПособие = Не ВыплачиватьПособие;
	ОбновитьДоступностьЭлементовФормы();
	ОчиститьВсеРасчеты();
КонецПроцедуры

Процедура РасчетПоПравилам2010ГодаПриИзменении(Элемент)
	Если РасчетПоПравилам2010Года Тогда
		УчитыватьЗаработокПредыдущихСтрахователей = Ложь
	КонецЕсли;
	ОчиститьВсеРасчеты();
	ОбновитьДоступностьЭлементовФормы();
КонецПроцедуры

Процедура ВидРасчетаПриИзменении(Элемент)
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
		ОбновитьИнформационнуюНадписьРазмерПособия();
	КонецЕсли;
	Если ОтражениеНачислений.Количество() > 0 Тогда
		ОтражениеНачислений.Очистить();
	КонецЕсли;
	ОбновитьДополнительныеЭлементыУправления();
КонецПроцедуры

Процедура ВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	//Предложим для выбора список расчетов, имеющих способ расчета, соответствующий указанной форме оплаты
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаНачислениеПоБольничномуЛисту");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	МассивВидов = Новый СписокЗначений;
	Если ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам Тогда
		МассивВидов.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.БеременностьРоды)
	ИначеЕсли ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве Тогда
		МассивВидов.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьНесчастныйСлучай);
		МассивВидов.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.НетрудоспособностьПрофзаболевание);
	Иначе
		МассивВидов.Добавить(Перечисления.ВидыПособийСоциальногоСтрахования.Нетрудоспособность)
	КонецЕсли;

	ФормаВыбораВидаРасчета.Отбор.ВидПособияСоциальногоСтрахования.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбораВидаРасчета.Отбор.ВидПособияСоциальногоСтрахования.Значение = МассивВидов;
	ФормаВыбораВидаРасчета.Отбор.ВидПособияСоциальногоСтрахования.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры // ВидРасчетаНачалоВыбора()

Процедура ВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
КонецПроцедуры // ВидРасчетаАвтоПодборТекста()

Процедура ВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // ВидРасчетаОкончаниеВводаТекста()

Процедура ВидРасчетаДоплатыНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаНачислениеПоБольничномуЛисту");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = Перечисления.СпособыРасчетаОплатыТруда.ДоплатаДоСреднегоЗаработкаФСС;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры // ВидРасчетаДоплатыНачалоВыбора()

Процедура ВидРасчетаДоплатыАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ВидРасчетаДоплаты"), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
КонецПроцедуры // ВидРасчетаДоплатыАвтоПодборТекста()

Процедура ВидРасчетаДоплатыОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ВидРасчетаДоплаты"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // ВидРасчетаДоплатыОкончаниеВводаТекста()

Процедура ВидРасчетаЗаСчетРаботодателяНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаНачислениеПоБольничномуЛисту");
	
	ФормаВыбораВидаРасчета.НачальноеЗначениеВыбора = Элемент.Значение;
	
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Значение = Перечисления.СпособыРасчетаОплатыТруда.ПоСреднемуЗаработкуФСС;
	ФормаВыбораВидаРасчета.Отбор.СпособРасчета.Использование = Истина;

	ФормаВыбораВидаРасчета.Отбор.ВидПособияСоциальногоСтрахования.ВидСравнения = ВидСравнения.Равно;
	ФормаВыбораВидаРасчета.Отбор.ВидПособияСоциальногоСтрахования.Значение = Перечисления.ВидыПособийСоциальногоСтрахования.ПустаяСсылка();
	ФормаВыбораВидаРасчета.Отбор.ВидПособияСоциальногоСтрахования.Использование = Истина;

	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура ВидРасчетаЗаСчетРаботодателяАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ВидРасчетаЗаСчетРаботодателя"), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
КонецПроцедуры

Процедура ВидРасчетаЗаСчетРаботодателяОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ВидРасчетаЗаСчетРаботодателя"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

Процедура ДнейОплатыРаботодателемПриИзменении(Элемент)
	
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
	КонецЕсли;
	Если ОтражениеНачислений.Количество() > 0 Тогда
		ОтражениеНачислений.Очистить();
	КонецЕсли;
	
	ОбновитьИнформационнуюНадписьРазмерПособия();
	
КонецПроцедуры

Процедура ДатаНарушенияРежимаПриИзменении(Элемент)
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
		ОбновитьИнформационнуюНадписьРазмерПособия();
	КонецЕсли;
	Если ОтражениеНачислений.Количество() > 0 Тогда
		ОтражениеНачислений.Очистить();
	КонецЕсли;
КонецПроцедуры

Процедура СтажЛетПриИзменении(Элемент)
	НачислениеПоБольничномуЛистуСервис.ОпределитьРазмерыПособияПоСтажу(ПричинаНетрудоспособности, СтажЛет, СтажМесяцев, ПроцентОплаты, ОграничениеПособия)
КонецПроцедуры

Процедура СтажМесяцевПриИзменении(Элемент)
	НачислениеПоБольничномуЛистуСервис.ОпределитьРазмерыПособияПоСтажу(ПричинаНетрудоспособности, СтажЛет, СтажМесяцев, ПроцентОплаты, ОграничениеПособия)
КонецПроцедуры

Процедура СтажЛет1ПриИзменении(Элемент)
	НачислениеПоБольничномуЛистуСервис.ОпределитьРазмерыПособияПоСтажу(ПричинаНетрудоспособности, СтажЛет, СтажМесяцев, ПроцентОплатыБезЛьгот, ОграничениеПособияБезЛьгот)
КонецПроцедуры

Процедура СтажМесяцев1ПриИзменении(Элемент)
	НачислениеПоБольничномуЛистуСервис.ОпределитьРазмерыПособияПоСтажу(ПричинаНетрудоспособности, СтажЛет, СтажМесяцев, ПроцентОплатыБезЛьгот, ОграничениеПособияБезЛьгот)
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" процента оплаты
Процедура ПроцентОплатыПриИзменении(Элемент)
	
	ПриИзмененииПроцентаОплаты();

КонецПроцедуры

Процедура ПроцентОплатыРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ТекущееЗначение = Элемент.Значение;
	
	Если Направление = 1 Тогда // увеличиваем значение
		Если ТекущееЗначение = 0 Тогда
			Элемент.Значение = 60;
			
		ИначеЕсли ТекущееЗначение = 60 Тогда
			Элемент.Значение = 80;
			
		ИначеЕсли ТекущееЗначение = 80 Тогда
			Элемент.Значение = 100;
			
		Иначе
			// далее увеличивать не будем
			
		КонецЕсли;
		
	Иначе // = -1 - уменьшаем значение
		Если ТекущееЗначение = 100 Тогда
			Элемент.Значение = 80;
			
		ИначеЕсли ТекущееЗначение = 80 Тогда
			Элемент.Значение = 60;
			
		Иначе
			// далее уменьшать не будем 
			
		КонецЕсли;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПриИзмененииПроцентаОплаты();
КонецПроцедуры
                 
// Процедура - обработчик события "ПриИзменении" ограничения пособия
//
Процедура ОграничениеПособияПриИзменении(Элемент) Экспорт 
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Элемент.Значение = Перечисления.ВидыОграниченияПособия.БезОграничений;
	КонецЕсли;
	
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
		ОбновитьИнформационнуюНадписьРазмерПособия();
	КонецЕсли;
	Если ОтражениеНачислений.Количество() > 0 Тогда
		ОтражениеНачислений.Очистить();
	КонецЕсли;
	
	УстановитьПредставлениеПричиныНетрудоспособности();
	
КонецПроцедуры // ОграничениеПособияПриИзменении()

Процедура ДоплачиватьДоПолногоСреднегоЗаработкаПриИзменении(Элемент)
	ЭлементыФормы.ПанельДоплаты.Свертка = ?(ДоплачиватьДоПолногоСреднегоЗаработка, РежимСверткиЭлементаУправления.Нет, РежимСверткиЭлементаУправления.Верх);
	Если ДоплачиватьДоПолногоСреднегоЗаработка И ВидРасчетаДоплаты.Пустая() Тогда
		ВидРасчетаДоплаты = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаПоСреднемуБЛ;
	КонецЕсли;
	ОбновитьДоступностьЭлементовФормы();
КонецПроцедуры

Процедура НадписьБольничныйЛистНажатие(Элемент)
	
	// показываем лицевую сторону больничного
	ЭлементыФормы.НадписьБольничныйЛист.Видимость     = Истина;
	ЭлементыФормы.НадписьБольничныйЛист1.Видимость    = Ложь;
	ЭлементыФормы.НадписьОборотБольничного.Видимость  = Ложь;
	ЭлементыФормы.НадписьОборотБольничного1.Видимость = Истина;
	
	ЭлементыФормы.НадписьЗаявление.Видимость = Ложь;
	ЭлементыФормы.НадписьЗаявление1.Видимость = ПроведениеРасчетов.ПособияПоОбязательномуСтрахованиюВыплачиваетФСС(ПериодРегистрации, Организация);
	
	ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.Условия;
	
	НастроитьПоказДанныхПилотногоПроектаФСС();
	
	ТекущийЭлемент = ЭлементыФормы.Сотрудник;
	
КонецПроцедуры

Процедура НадписьОборотБольничногоНажатие(Элемент)
	
	// показываем оборот больничного
	ЭлементыФормы.НадписьБольничныйЛист.Видимость     = Ложь;
	ЭлементыФормы.НадписьБольничныйЛист1.Видимость    = Истина;
	ЭлементыФормы.НадписьОборотБольничного.Видимость  = Истина;
	ЭлементыФормы.НадписьОборотБольничного1.Видимость = Ложь;
	
	ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.ОборотБольничного;
	
	НастроитьПоказДанныхПилотногоПроектаФСС();
	
	ТекущийЭлемент = ЭлементыФормы.Начисления;
	
КонецПроцедуры

Процедура НадписьЗаявлениеНажатие(Элемент)
	
	// показываем оборот больничного
	ЭлементыФормы.НадписьЗаявление.Видимость     = Истина;
	ЭлементыФормы.НадписьЗаявление1.Видимость    = Ложь;
	ЭлементыФормы.НадписьБольничныйЛист.Видимость     = Ложь;
	ЭлементыФормы.НадписьБольничныйЛист1.Видимость    = Истина;
	ЭлементыФормы.НадписьОборотБольничного.Видимость  = Ложь;
	ЭлементыФормы.НадписьОборотБольничного1.Видимость = Истина;
	
	ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.ЗаявлениеВФСС;
	
	ТекущийЭлемент = ЭлементыФормы.ПеречислятьПособиеНаСчетВБанке;
	
КонецПроцедуры

Процедура КнопкаРассчитатьВсеНажатие(Элемент)
	
	Если Не ПроверкаУчастияВПилотномПроектеФСС(Организация, ПериодРегистрации) Тогда
		Возврат
	КонецЕсли;
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить(Начисления);
	МассивТаблиц.Добавить(РасчетСреднего);
	МассивТаблиц.Добавить(ОтражениеНачислений);
	ТекстВопроса1 = "Рассчитать документ можно только после отмены его проведения. Продолжить?";
	ТекстВопроса2 = "Перед расчетом все таблицы документа будут очищены. Продолжить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	Начисления.Очистить();
	РасчетСреднего.Очистить();
	ОтражениеНачислений.Очистить();
	
	мРассчитываемыеТаблицы.Начисления = Истина;
	мРассчитываемыеТаблицы.РасчетСреднего = Истина;
	
	Рассчитать(мРассчитываемыеТаблицы);
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ОбновитьИнформационнуюНадписьРазмерПособия();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	
КонецПроцедуры

Процедура ПериодРасчетаСреднегоЗаработкаНачалоПриИзменении(Элемент)
    ОчиститьВсеРасчеты();
КонецПроцедуры

Процедура ПериодРасчетаСреднегоЗаработкаОкончаниеПриИзменении(Элемент)
    ОчиститьВсеРасчеты();
КонецПроцедуры

Процедура ПериодРасчетаСреднегоЗаработкаНачало1ПриИзменении(Элемент)
	
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
	КонецЕсли;
	Если ОтражениеНачислений.Количество() > 0 Тогда
		ОтражениеНачислений.Очистить();
	КонецЕсли;
	Если РасчетСреднего.Количество() > 0 Тогда
		РасчетСреднего.Очистить();
	КонецЕсли;

	ОбновитьИнформационнуюНадписьРазмерПособия();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();

КонецПроцедуры

Процедура ПериодРасчетаСреднегоЗаработкаОкончание1ПриИзменении(Элемент)

	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
	КонецЕсли;
	Если ОтражениеНачислений.Количество() > 0 Тогда
		ОтражениеНачислений.Очистить();
	КонецЕсли;
	Если РасчетСреднего.Количество() > 0 Тогда
		РасчетСреднего.Очистить();
	КонецЕсли;

	ОбновитьИнформационнуюНадписьРазмерПособия();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	
КонецПроцедуры

// Процедура - обработчик нажатия кнопки настройки периода.
//
Процедура ВыбПериодНажатие(Элемент)
	
	мНастройкаПериода.УстановитьПериод(ПериодРасчетаСреднегоЗаработкаНачало, КонецДня(ПериодРасчетаСреднегоЗаработкаОкончание));
	
	Если мНастройкаПериода.Редактировать() Тогда
		ПериодРасчетаСреднегоЗаработкаНачало	= мНастройкаПериода.ПолучитьДатуНачала();
		ПериодРасчетаСреднегоЗаработкаОкончание	= мНастройкаПериода.ПолучитьДатуОкончания();
		ОчиститьВсеРасчеты();
	КонецЕсли;
	
КонецПроцедуры // ВыбПериодНажатие()

Процедура ПервыйГодРасчетаПриИзменении(Элемент)
    ОчиститьВсеРасчеты();
КонецПроцедуры

Процедура ВторойГодРасчетаПриИзменении(Элемент)
    ОчиститьВсеРасчеты();
КонецПроцедуры

Процедура ПервыйГодРасчета1ПриИзменении(Элемент)
	
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
	КонецЕсли;
	Если ОтражениеНачислений.Количество() > 0 Тогда
		ОтражениеНачислений.Очистить();
	КонецЕсли;
	Если РасчетСреднего2011.Количество() > 0 Тогда
		РасчетСреднего2011.Очистить();
	КонецЕсли;

	ОбновитьИнформационнуюНадписьРазмерПособия();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();

КонецПроцедуры

Процедура ВторойГодРасчета1ПриИзменении(Элемент)
	
	Если Начисления.Количество() > 0 Тогда
		Начисления.Очистить();
	КонецЕсли;
	Если ОтражениеНачислений.Количество() > 0 Тогда
		ОтражениеНачислений.Очистить();
	КонецЕсли;
	Если РасчетСреднего2011.Количество() > 0 Тогда
		РасчетСреднего2011.Очистить();
	КонецЕсли;

	ОбновитьИнформационнуюНадписьРазмерПособия();
	ОбновитьИнформационнуюНадписьСреднийЗаработок();

КонецПроцедуры

Процедура КнопкаРассчитатьНачисленияНажатие(Элемент)
	
	РассчитатьНачисления(Ложь);
	
КонецПроцедуры

Процедура НадписьРазмерПособияНажатие(Элемент)
	
	// показываем оборот больничного
	ЭлементыФормы.НадписьБольничныйЛист.Видимость     = Ложь;
	ЭлементыФормы.НадписьБольничныйЛист1.Видимость    = Истина;
	ЭлементыФормы.НадписьОборотБольничного.Видимость  = Истина;
	ЭлементыФормы.НадписьОборотБольничного1.Видимость = Ложь;
	
	ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.ОборотБольничного;
	ЭлементыФормы.ПанельОборотБольничного.ТекущаяСтраница = ЭлементыФормы.ПанельОборотБольничного.Страницы.Начисления;
	
	ТекущийЭлемент = ЭлементыФормы.Начисления;
	
КонецПроцедуры

Процедура НадписьСреднийЗаработокНажатие(Элемент)
	
	// показываем оборот больничного
	ЭлементыФормы.НадписьБольничныйЛист.Видимость     = Ложь;
	ЭлементыФормы.НадписьБольничныйЛист1.Видимость    = Истина;
	ЭлементыФормы.НадписьОборотБольничного.Видимость  = Истина;
	ЭлементыФормы.НадписьОборотБольничного1.Видимость = Ложь;
	
	ЭлементыФормы.ПанельДанных.ТекущаяСтраница = ЭлементыФормы.ПанельДанных.Страницы.ОборотБольничного;
	ЭлементыФормы.ПанельОборотБольничного.ТекущаяСтраница = ЭлементыФормы.ПанельОборотБольничного.Страницы.РасчетСреднего;
	
КонецПроцедуры

Процедура НадписьОтражениеПособияВУчетеНажатие(Элемент)
	ПолучитьФорму("ФормаОтраженияВУчете", ЭтаФорма).Открыть();
КонецПроцедуры

Процедура НадписьПоказДополнительныхДанныхНажатие(Элемент)
	НачислениеПоБольничномуЛистуПереопределяемый.ПоказатьДополнительнуюФорму(ЭтотОбъект, ЭтаФорма)
КонецПроцедуры

Процедура НадписьПоказЛьготныхДанныхНажатие(Элемент)
	Если ЗначениеЗаполнено(ВыплатаЗаСчетФедеральногоБюджета) Тогда
		ПолучитьФорму("ФормаЛьготныхДанных", ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура УчитыватьЗаработокПредыдущихСтрахователейПриИзменении(Элемент)
	Если Не Элемент.Значение И РасчетСреднего2011.НайтиСтроки(Новый Структура("Страхователь", Справочники.Работодатели.ТекущийРаботодатель)).Количество() <> РасчетСреднего2011.Количество() Тогда
		Если Вопрос("Данные справок о заработке у предыдущих страхователей будут удалены! Продолжить?", РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Да Тогда
			РасчетСреднего2011.Загрузить(РасчетСреднего2011.Выгрузить(РасчетСреднего2011.НайтиСтроки(Новый Структура("Страхователь", Справочники.Работодатели.ТекущийРаботодатель))))
		Иначе 
			УчитыватьЗаработокПредыдущихСтрахователей = Истина;
			Возврат ;
		КонецЕсли; 
	КонецЕсли;
	ЭлементыФормы.РасчетСреднего2011.Колонки.Страхователь.Видимость = УчитыватьЗаработокПредыдущихСтрахователей;
	ЭлементыФормы.РасчетСреднего2011_ПП.Колонки.Страхователь.Видимость = УчитыватьЗаработокПредыдущихСтрахователей;
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
КонецПроцедуры

Процедура НовыйПорядокРасчетаПособияПоМатеринствуПриИсправленииПриИзменении(Элемент)
	Если НовыйПорядокРасчетаПособияПоМатеринствуПриИсправлении Тогда
		РасчетПоПравилам2010Года = Ложь;
	КонецЕсли;
	ОбновитьДоступностьЭлементовФормы();
КонецПроцедуры

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	Если ЗначениеЗаполнено(мДокументИсправление) Тогда
		мДокументИсправление.ПолучитьФорму(, ЭтаФорма).Открыть();
	ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
		мДокументСторнирование.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

Процедура ПанельОборотБольничногоПриСменеСтраницы(Элемент, ТекущаяСтраница)
	Если ЭлементыФормы.ПанельОборотБольничного.Страницы[ТекущаяСтраница] = ЭлементыФормы.ПанельОборотБольничного.Страницы.РасчетСреднего Тогда
		
		ДатаЗакона = ПроведениеРасчетов.ДатаНачалаРеформыСоцСтрахования();
		
		Если ПериодРегистрации < ДатаЗакона Или (РасчетПоПравилам2010Года И ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ПоБеременностиИРодам) Тогда
			ЭлементыФормы.ПанельРасчетСреднего.ТекущаяСтраница = ЭлементыФормы.ПанельРасчетСреднего.Страницы.СтраницаДо2011Года;
			ТекущийЭлемент = ЭлементыФормы.РасчетСреднего;
		ИначеЕсли ДатаНачалаСобытия >= ДатаЗакона Или Не ЗначениеЗаполнено(ДатаНачалаСобытия) Тогда
			ЭлементыФормы.ПанельРасчетСреднего.ТекущаяСтраница = ЭлементыФормы.ПанельРасчетСреднего.Страницы.СтраницаС2011Года;
			ТекущийЭлемент = ЭлементыФормы.РасчетСреднего2011;
		ИначеЕсли ДатаОкончания >= ДатаЗакона Тогда
			ЭлементыФормы.ПанельРасчетСреднего.ТекущаяСтраница = ЭлементыФормы.ПанельРасчетСреднего.Страницы.СтраницаПереходногоПериода;
			ТекущийЭлемент = ЭлементыФормы.РасчетСреднего2010_ПП;
		Иначе
			ЭлементыФормы.ПанельРасчетСреднего.ТекущаяСтраница = ЭлементыФормы.ПанельРасчетСреднего.Страницы.СтраницаДо2011Года;
			ТекущийЭлемент = ЭлементыФормы.РасчетСреднего;
		КонецЕсли;
		
	КонецЕсли;	
КонецПроцедуры

Процедура КнопкаОбновитьДанныеСотрудникаНажатие(Элемент)
	Автозаполнение("ДанныеСотрудника");
	АдресПочтовыйВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресПочтовый);
	АдресРегистрацииВФорме = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресРегистрации);
КонецПроцедуры

Процедура ПечатьСправкаЗаполненныйБланк(Кнопка)
	Печать("СправкаКЛисткуНетрудоспособности2007")
КонецПроцедуры

Процедура ПечатьСправкаЧистыйБланк(Кнопка)
	Печать("СправкаЧистыйБланк")
КонецПроцедуры

Процедура ПечатьЗаявлениеЗаполненныйБланк(Кнопка)
	Печать("ЗаявлениеВФССОВыплатеПособия_2011")
КонецПроцедуры

Процедура ПечатьЗаявлениеЧистыйБланк(Кнопка)
	Печать("ЗаявлениеЧистыйБланк_2011")
КонецПроцедуры

Процедура ПечатьЗаявлениеЗаполненныйБланк2012(Кнопка)
	Печать("ЗаявлениеВФССОВыплатеПособия_2012")
КонецПроцедуры

Процедура ПечатьЗаявлениеЧистыйБланк2012(Кнопка)
	Печать("ЗаявлениеЧистыйБланк_2012")
КонецПроцедуры

Процедура УсловияИсчисленияКодНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("43","43 - лицо, относящееся к категории лиц, подвергшихся воздействию радиации");
	СписокВыбора.Добавить("44","44 - лицо, приступившее к работе в районах РКС и МКС до 2007 года и продолжающее работать в этих местностях");
	СписокВыбора.Добавить("45","45 - лицо, имеющее инвалидность");
	СписокВыбора.Добавить("46","46 - трудовой договор менее 6 месяцев (не проставляется в случае указания кода 11 в строке ""Причина нетрудоспособности"")");
	СписокВыбора.Добавить("47","47 - заболевание (травма) наступили в течение 30 календарных дней со дня прекращения работы");
	СписокВыбора.Добавить("48","48 - уважительная причина нарушения режима");
	СписокВыбора.Добавить("49","49 - продолжительность заболевания превышает 4 месяца подряд (для лиц, имеющих инвалидность)");
	СписокВыбора.Добавить("50","50 - продолжительность заболевания превышает 5 месяцев в календарном году (для лиц, имеющих инвалидность)");
	СписокВыбора.Добавить("51","51 - неполное рабочее время");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура АдресПочтовыйВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтруктураАдреса = Новый Структура("Значение", АдресПочтовый);
	УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
	АдресПочтовый = СтруктураАдреса.Значение;
	АдресПочтовыйКодПоКЛАДР = ОбменСведениямиОПособияхСФСС.КодАдресаПоКЛАДРдляФСС(СтруктураАдреса.Значение);
	Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
КонецПроцедуры

Процедура АдресРегистрацииВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтруктураАдреса = Новый Структура("Значение", АдресРегистрации);
	УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
	АдресРегистрации = СтруктураАдреса.Значение;
	АдресРегистрацииКодПоКЛАДР = ОбменСведениямиОПособияхСФСС.КодАдресаПоКЛАДРдляФСС(СтруктураАдреса.Значение);
	Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(СтруктураАдреса.Значение);
КонецПроцедуры

Процедура АдресЛПУВФормеНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтруктураАдреса = Новый Структура("Значение", АдресЛПУ);
	УправлениеКонтактнойИнформацией.РедактироватьМодальноЭлементАдреса(СтруктураАдреса, ЭтаФорма, "ФормаРедактированияАдреса");
	АдресЛПУ = СтруктураАдреса.Значение;
	АдресЛПУКодПоКЛАДР = ОбменСведениямиОПособияхСФСС.КодАдресаПоКЛАДРдляФСС(СтруктураАдреса.Значение);
	Элемент.Значение = УправлениеКонтактнойИнформацией.ПолучитьПредставлениеАдресаПоСтрока(АдресЛПУ);
КонецПроцедуры

Процедура ОписаниеДокументаНаПроживаниеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ОбменСведениямиОПособияхСФСС.ОткрытьФормуРедактированияДокументаНаПроживание(ЭтаФорма, ЭтотОбъект)
	
КонецПроцедуры

Процедура ОписаниеДокументаНаПроживаниеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь
КонецПроцедуры

Процедура БанкПриИзменении(Элемент)
	
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеБанка(Элемент.Значение, ЭтотОбъект);
	
КонецПроцедуры

Процедура КодПричиныНетрудоспособностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("01", "01 - заболевание");
	СписокВыбора.Добавить("02", "02 - травма");
	СписокВыбора.Добавить("03", "03 - карантин");
	СписокВыбора.Добавить("04", "04 - несчастный случай на производстве или его последствия");
	СписокВыбора.Добавить("05", "05 - отпуск по беременности и родам");
	СписокВыбора.Добавить("06", "06 - протезирование в стационаре");
	СписокВыбора.Добавить("07", "07 - профессиональное заболевание или его обострение");
	СписокВыбора.Добавить("08", "08 - долечивание в санатории");
	СписокВыбора.Добавить("09", "09 - уход за больным членом семьи");
	СписокВыбора.Добавить("10", "10 - иное состояние (отравление, проведение манипуляций и др.)");
	СписокВыбора.Добавить("11", "11 - заболевание туберкулезом");
	СписокВыбора.Добавить("12", "12 - в случае заболевания ребенка, включенного в перечень заболеваний определяемых Минздравсоцразвития России");
	СписокВыбора.Добавить("13", "13 - ребенок-инвалид");
	СписокВыбора.Добавить("14", "14 - поствакцинальное осложнение или злокачественное новообразование у ребенка");
	СписокВыбора.Добавить("15", "15 - ВИЧ-инфицированный ребенок");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ДополнительныйКодПричиныНетрудоспособностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("017", "017 - лечение в специализированном санатории");
	СписокВыбора.Добавить("018", "018 - санаторно-курортное лечение в связи с несчастным случаем на производстве в период временной нетрудоспособности (до направления на МСЭ)");
	СписокВыбора.Добавить("019", "019 - лечение в клинике научно-исследовательского учреждения (института) курортологии, физиотерапии и реабилитации");
	СписокВыбора.Добавить("020", "020 - дополнительный отпуск по беременности и родам");
	СписокВыбора.Добавить("021", "021 - заболевание или травма, наступившей вследствие алкогольного, наркотического, токсического опьянения или действий, связанных с таким опьянением");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура КодНарушенияРежимаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("23", "23 - несоблюдение предписанного режима, самовольный уход из стационара, выезд на лечение в другой административный район без разрешения лечащего врача");
	СписокВыбора.Добавить("24", "24 - несвоевременная явка на прием к врачу");
	СписокВыбора.Добавить("25", "25 - выход на работу без выписки");
	СписокВыбора.Добавить("26", "26 - отказ от направления в учреждение медико-социальной экспертизы");
	СписокВыбора.Добавить("27", "27 - несвоевременная явка в учреждение медико-социальной экспертизы");
	СписокВыбора.Добавить("28", "28 - другие нарушения");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ГруппаИнвалидностиНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("1","1 группа");
	СписокВыбора.Добавить("2","2 группа");
	СписокВыбора.Добавить("3","3 группа");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура НовыйСтатусНетрудопособногоНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("31", "31 - продолжает болеть");
	СписокВыбора.Добавить("32", "32 - установлена инвалидность");
	СписокВыбора.Добавить("33", "33 - изменена группа инвалидности");
	СписокВыбора.Добавить("34", "34 - умер");
	СписокВыбора.Добавить("35", "35 - отказ от проведения медико-социальной экспертизы");
	СписокВыбора.Добавить("36", "36 - явился трудоспособным");
	СписокВыбора.Добавить("37", "37 - долечивание");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура КодПричиныПерерасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("01", "01 - представлены дополнительные сведения о выплатах в расчетном периоде");
	СписокВыбора.Добавить("02", "02 - заявление о замене одного года или двух лет расчетного периода предшествующими годами");
	СписокВыбора.Добавить("03", "03 - заявление о применении норм законодательства при исчислении среднего заработка, действовавшего до 01.01.2011г.");
	СписокВыбора.Добавить("04", "04 - по результатам документальной выездной (камеральной) проверки");
	СписокВыбора.Добавить("05", "05 - перерасчет пособия при признании несчастного случая на производстве страховым");
	СписокВыбора.Добавить("06", "06 - перерасчет пособия в случае ошибки в расчете работодателя");
	СписокВыбора.Добавить("07", "07 - иное (указать на обороте справки)");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура ЛПУПриИзменении(Элемент)
	ОбменСведениямиОПособияхСФСС.ЗаполнитьДанныеЛПУ(Элемент.Значение, ЭтотОбъект, АдресЛПУВФорме);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Начисления

Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияНачисленияПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры

Процедура ОбработчикОжиданияНачисленияПриАктивизацииСтроки()
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ДанныеСтроки <> Неопределено Тогда
		ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
		Если ДанныеСтрокиВидРасчета = Неопределено Тогда
			ДанныеСтрокиВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Начисления, мСведенияОВидахРасчетаПоказатели, , Истина);
	
	МожноРедактироватьСтроку = ДанныеСтроки = Неопределено Или Не ДанныеСтроки.Сторно Или ДанныеСтроки.СторнируемыйДокумент <> ПерерассчитываемыйДокумент Или Не ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КоманднаяПанельНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	
КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Отказ = ДанныеСтроки.Сторно И ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент И ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломИзменения(Элемент, Отказ)
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Отказ = ДанныеСтроки.Сторно И ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент И ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
КонецПроцедуры

Процедура НачисленияПередУдалением(Элемент, Отказ)
	НачислениеПоБольничномуЛистуПереопределяемый.ВыполнитьДействияПередУдалениемНачисления(Элемент, ЭтотОбъект, Отказ)
КонецПроцедуры

Процедура НачисленияПослеУдаления(Элемент)
	
	ОбновитьИнформационнуюНадписьРазмерПособия();
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" строки таблицы
//
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		
		ТекущаяСтрока = Элемент.ТекущаяСтрока;
		ТекущаяСтрока.Авторасчет = Истина;
		ТекущаяСтрока.Показатель1 = ПроцентОплаты;
		
		ИндексСтроки = Начисления.Индекс(ТекущаяСтрока);
		Если ИндексСтроки > 0  Тогда
			ТекущаяСтрока.ДатаНачала = Начисления[ИндексСтроки-1].ДатаОкончания + мДлинаСуток;
		КонецЕсли;
		
		НаборДанных = ПроцедурыУправленияПерсоналом.ПодборДанныхПоФизлицу(ЭтаФорма, Элемент.ТекущаяКолонка.ЭлементУправления, Физлицо, мГоловнаяОрганизация, ДатаНачалаСобытия);
		Если НаборДанных <> Неопределено Тогда
			ТекущаяСтрока.Сотрудник = НаборДанных.Сотрудник;
			ТекущаяСтрока.ПодразделениеОрганизации = НаборДанных.ПодразделениеОрганизации;
		КонецЕсли;
		
		ТекущаяСтрока.ВидРасчета = ВидРасчета;
		
	КонецЕсли;
	
	НачислениеПоБольничномуЛистуПереопределяемый.ВыполнитьДействияПриНачалеРедактированияНачисления(ЭтаФорма, Элемент, НоваяСтрока)
	
КонецПроцедуры // НачисленияПриНачалеРедактирования()

Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПроставитьДолжностьИПодразделение(Элемент, ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ОбработатьОтображениеПоказателейДляРасчета(Элемент, ОформленияСтрок, мСведенияОВидахРасчетаПоказатели);
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		// сторно запись - красным
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
		Иначе 	
			Ячейки.СторнируемыйДокумент.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеСтроки.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") Тогда
			Ячейки.ДатаНачалаСобытия.ТолькоПросмотр = Истина;
			Ячейки.ДополнительныйРезультат.ТолькоПросмотр = Истина;
			Ячейки.ДатаНачалаСобытия.ОтметкаНезаполненного = Ложь;
		Иначе
			Ячейки.ЧислоМесяцев.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		ЯчейкаСКартинкой = Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);	
		
	КонецЦикла;	
	
КонецПроцедуры // НачисленияПриПолученииДанных()

// Процедура - обработчик события "ПриОкончанииРедактирования" строки таблицы
//
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	
	ЭтоБольничный = НЕ ТекущиеДанные.Сторно И 
		 (ТекущиеДанные.ВидРасчета = ВидРасчета 
		 ИЛИ ТекущиеДанные.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезни
		 ИЛИ ТекущиеДанные.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтсутствиеПоБолезниПоБеременности);
	
	// Авторасчет незаполненных реквизитов строки
	Если ЭтоБольничный Тогда
		ВыполнитьАвторасчетРеквизитовСтрокиНачислений(ТекущиеДанные);
	КонецЕсли;	
	
	НачислениеПоБольничномуЛистуПереопределяемый.ВыполнитьДействияПослеРедактированияНачисления(ЭтаФорма, ТекущиеДанные);
	
	ОбновитьИнформационнуюНадписьРазмерПособия();
	
	// Разбивка строк на помесячные
	Если ЭтоБольничный Тогда
		Если ЗначениеЗаполнено(ТекущиеДанные.ДатаНачала) И ЗначениеЗаполнено(ТекущиеДанные.ДатаОкончания) Тогда
			РазницаВМесяцах = (Год(ТекущиеДанные.ДатаОкончания)*12 + Месяц(ТекущиеДанные.ДатаОкончания)) - (Год(ТекущиеДанные.ДатаНачала)*12 + Месяц(ТекущиеДанные.ДатаНачала));
			Если РазницаВМесяцах > 0 Тогда
				
				ТекстВопроса = "Разбить строку начислений на помесячные записи?";
				Ответ  = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ПроведениеРасчетов.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(ТекущиеДанные, Начисления);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры // НачисленияПриОкончанииРедактирования()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Начисления

// Процедура - обработчик события "ПриИзменении" поля ввода даты начала
//
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	
	ТекущиеДанные = ЭлементыФормы.Начисления.ТекущиеДанные;
	ТекущийВидРасчета = ТекущиеДанные.ВидРасчета;
	Если ТипЗнч(ТекущийВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") 
		Или ТекущийВидРасчета = ВидРасчета Тогда
		Возврат;
	КонецЕсли;
	ТекущиеДанные.ДатаНачалаСобытия = Элемент.Значение;
	
КонецПроцедуры // НачисленияДатаНачалаПриИзменении()

// Процедура - обработчик события "ПриИзменении" даты окончания строки расчета
//
Процедура НачисленияДатаОкончанияПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.Начисления.ТекущиеДанные;
	
	// в зависимости от причины нетрудоспособности оплачивается разное количество дней; процент оплаты также меняется
	ТаблицаИнтерваловОплаты = ЗаполнитьТаблицуИнтервалов(ДатаНачалаСобытия, ВидРасчета, ПериодРегистрации, ВидРасчетаЗаСчетРаботодателя);
	
	Если СтрокаТЧ.ДатаОкончания >= ТаблицаИнтерваловОплаты[2].Начало Тогда
		Если СтрокаТЧ.ДатаНачала >= ТаблицаИнтерваловОплаты[2].Начало Тогда
			СтрокаТЧ.ВидРасчета	= ТаблицаИнтерваловОплаты[2].Расчет;
			СтрокаТЧ.Показатель1= ТаблицаИнтерваловОплаты[2].ПроцентОплаты;
			
		ИначеЕсли СтрокаТЧ.ДатаНачала >= ТаблицаИнтерваловОплаты[1].Начало Тогда
			СтрокаТЧ.ДатаОкончания	= ТаблицаИнтерваловОплаты[2].Начало - мДлинаСуток;
			СтрокаТЧ.ВидРасчета		= ТаблицаИнтерваловОплаты[1].Расчет;
			СтрокаТЧ.Показатель1	= ТаблицаИнтерваловОплаты[1].ПроцентОплаты;
			
		Иначе
			СтрокаТЧ.ДатаОкончания	= ТаблицаИнтерваловОплаты[1].Начало - мДлинаСуток;
			СтрокаТЧ.ВидРасчета		= ТаблицаИнтерваловОплаты[0].Расчет;
			СтрокаТЧ.Показатель1	= ТаблицаИнтерваловОплаты[0].ПроцентОплаты;
			
		КонецЕсли;
		
	ИначеЕсли СтрокаТЧ.ДатаОкончания >= ТаблицаИнтерваловОплаты[1].Начало Тогда
		Если СтрокаТЧ.ДатаНачала >= ТаблицаИнтерваловОплаты[1].Начало Тогда
			СтрокаТЧ.ВидРасчета	= ТаблицаИнтерваловОплаты[1].Расчет;
			СтрокаТЧ.Показатель1= ТаблицаИнтерваловОплаты[1].ПроцентОплаты;
			
		Иначе
			СтрокаТЧ.ДатаОкончания = ТаблицаИнтерваловОплаты[1].Начало - мДлинаСуток;
			СтрокаТЧ.ВидРасчета	= ТаблицаИнтерваловОплаты[0].Расчет;
			СтрокаТЧ.Показатель1= ТаблицаИнтерваловОплаты[0].ПроцентОплаты;
			
		КонецЕсли;
	Иначе
		СтрокаТЧ.ВидРасчета	= ТаблицаИнтерваловОплаты[0].Расчет;
		СтрокаТЧ.Показатель1= ТаблицаИнтерваловОплаты[0].ПроцентОплаты;
		
	КонецЕсли;
	
КонецПроцедуры // НачисленияДатаОкончанияПриИзменении()

Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НаборДанных = ПроцедурыУправленияПерсоналом.ПодборДанныхПоФизлицу(ЭтаФорма, Элемент, Физлицо, мГоловнаяОрганизация, ДатаНачалаСобытия, Истина);
	Если НаборДанных <> Неопределено Тогда
		Элемент.Значение = НаборДанных.Сотрудник;
		ЭлементыФормы.Начисления.ТекущиеДанные.ПодразделениеОрганизации = НаборДанных.ПодразделениеОрганизации;
	КонецЕсли;
	
КонецПроцедуры // НачисленияСотрудникНачалоВыбора()

Процедура НачисленияСторнируемыйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	Если Организация.Пустая() Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не выбрана организация!"), 10);
		Возврат;
	КонецЕсли;
		
	РаботаСДиалогамиЗК.ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, ЭтаФорма, Ссылка, Организация, СтандартнаяОбработка, Истина);
		
КонецПроцедуры

Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Начисления, мСведенияОВидахРасчетаПоказатели, , Истина);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РасчетСреднего

// Процедура - обработчик события "ПриНачалеРедактирования" строки таблицы
//
Процедура РасчетСреднегоПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока Тогда
		НаборДанных = ПроцедурыУправленияПерсоналом.ПодборДанныхПоФизлицу(ЭтаФорма, Элемент.ТекущаяКолонка.ЭлементУправления, Физлицо, мГоловнаяОрганизация, ДатаНачалаСобытия);
		Если НаборДанных <> Неопределено Тогда
			Элемент.ТекущаяСтрока.Сотрудник = НаборДанных.Сотрудник;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // РасчетСреднегоПриНачалеРедактирования()

Процедура РасчетСреднегоПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПроставитьДолжностьИПодразделение(Элемент, ОформленияСтрок);
	
КонецПроцедуры // РасчетСреднегоПриПолученииДанных()

Процедура РасчетСреднегоПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОбновитьИнформационнуюНадписьСреднийЗаработок();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РасчетСреднего

Процедура РасчетСреднегоСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	НаборДанных = ПроцедурыУправленияПерсоналом.ПодборДанныхПоФизлицу(ЭтаФорма, Элемент, Физлицо, мГоловнаяОрганизация, ДатаНачалаСобытия, Истина);
	Если НаборДанных <> Неопределено Тогда
		Элемент.Значение = НаборДанных.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры // РасчетСреднегоСотрудникНачалоВыбора()

Процедура РасчетСреднегоВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Элемент.СписокВыбора;
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

Процедура РасчетСреднегоВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("РасчетСреднего"), Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"));
	
КонецПроцедуры

Процедура РасчетСреднегоВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("РасчетСреднего"), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.СреднийЗаработок"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РасчетСреднего2011

Процедура РасчетСреднего2011ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если НоваяСтрока И Не Копирование Тогда
		ДанныеСтроки.Страхователь = Справочники.Работодатели.ТекущийРаботодатель;
		ДанныеСтроки.РасчетныйГод = ПервыйГодРасчета;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ УходЗаБольнымЧленомСемьи

Процедура УходЗаБольнымЧленомСемьиПриПолученииДанных(Элемент, ОформленияСтрок)
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.КолонкаВозраст.Видимость = Ложь
	КонецЦикла;	
КонецПроцедуры

Процедура УходЗаРодственникомРодственнаяСвязьНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить("38", "38 - мать");
	СписокВыбора.Добавить("39", "39 - отец");
	СписокВыбора.Добавить("40", "40 - опекун");
	СписокВыбора.Добавить("41", "41 - попечитель");
	СписокВыбора.Добавить("42", "42 - иной родственник, фактически осуществляющий уход за ребенком");
	ЭлементСписка = ВыбратьИзСписка(СписокВыбора,Элемент,СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мРассчитываемыеТаблицы = Новый Структура("Начисления,РасчетСреднего");

мСведенияОВидахРасчетаПоказатели = Новый Соответствие;

мДокументИсправление = Документы.НачислениеПоБольничномуЛисту.ПустаяСсылка();

мДлинаСуток		 = 86400;		// в секундах

мДополнительныеСвойства = Новый Структура()