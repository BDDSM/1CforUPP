////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мДлинаСуток;

// Переменные учетной политики, для управления отображением статиков описывающих порядк отражения в бухучете
Перем мУСН;
Перем мЕНВД;
Перем мВидимостьНУСчета;

// Хранит соответствие для получения сведений о счетах на время работы формы
Перем мСведенияОСчетах;  
Перем мСведенияОСтатьяхЗатрат;  // для получения сведений о статьях затрат на время работы формы
Перем мСтруктураЭУ;

Перем мСтратегияОтраженияВУчете;
Перем мСписокПериодовНачисления;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ОбновитьДоступностьЭУОтВариантаОтраженияВУчете()

	ЭлементыФормы.ОтражениеНачислений.ТолькоПросмотр = Не ПособиеОтражаетсяВРеглУчетеТекущимДокументом;
	ЭлементыФормы.ПодпадаетПодЕНВД.ТолькоПросмотр = Не ПособиеОтражаетсяВРеглУчетеТекущимДокументом;
	ЭлементыФормы.СтратегияОтраженияВУчетеБазовыеНачисления.Доступность = ПособиеОтражаетсяВРеглУчетеТекущимДокументом;
	ЭлементыФормы.СтратегияОтраженияВУчетеНаНачалоСобытия.Доступность = ПособиеОтражаетсяВРеглУчетеТекущимДокументом;
	ЭлементыФормы.СтратегияОтраженияВУчетеПроцент.Доступность = ПособиеОтражаетсяВРеглУчетеТекущимДокументом;

КонецПроцедуры


Процедура ПрочитатьСвойстваВидаОплаты()

	Если ПричинаНетрудоспособности.Пустая() Тогда
		мСтратегияОтраженияВУчете = Перечисления.СтратегииОтраженияВРеглУчетеНачислений.КакБазовыеНачисления;
	Иначе
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("Ссылка",ВидРасчета);
		Запрос.Текст =
		"ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.СтратегияОтраженияВУчете
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.Ссылка = &Ссылка";
		Данные = Запрос.Выполнить().Выбрать();
		Данные.Следующий();
		мСтратегияОтраженияВУчете = Данные.СтратегияОтраженияВУчете;
	КонецЕсли;
	
КонецПроцедуры // ПрочитатьСвойстваВидаОплаты()

// Функция создает структуру массивов ЭУ, которая используется для управления видимостью ЭУ,
// зависящих от учетной политики и программы бухучета
//
Процедура СоздатьСтруктуруЭУ()

	мСтруктураЭУ = Новый Структура();
	
	// УСН
	Массив = Новый Массив;
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.ОтражениеВУСН);
	мСтруктураЭУ.Вставить("ВидимостьУСН", Массив);
	
	// ВидимостьУчетПоПодразделениям
	Массив = Новый Массив;
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.ПодразделениеДт);
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.ПодразделениеКт);
	мСтруктураЭУ.Вставить("ВидимостьУчетПоПодразделениям", Массив);
	
	// ВидимостьНУ
	Массив = Новый Массив;
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.СуммаНУ);
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.СуммаВР);
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.СуммаПР);
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.ВидНачисленийОплатыТрудаПоСтатье255НК);
	мСтруктураЭУ.Вставить("ВидимостьНУ", Массив);
	
	// ВидимостьНУСчета
	Массив = Новый Массив;
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.СчетДтНУ);
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.СчетКтНУ);
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.СубконтоДтНУ1);
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.СубконтоДтНУ2);
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.СубконтоДтНУ3);
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.СубконтоКтНУ1);
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.СубконтоКтНУ2);
	Массив.Добавить(ЭлементыФормы.ОтражениеНачислений.Колонки.СубконтоКтНУ3);
	мСтруктураЭУ.Вставить("ВидимостьНУСчета", Массив);
	
КонецПроцедуры // СоздатьСтруктуруЭУ()

// обновляет переменные учетной политики
Процедура ОбновитьПеременныеУчетнойПолитики()
	
	НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(ПериодРегистрации), Организация);
	УчетнаяПолитика = глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете")[КонецМесяца(ПериодРегистрации)][Организация];
	мУСН = УчетнаяПолитика.УСН;
	мЕНВД = УчетнаяПолитика.ОрганизацияЯвляетсяПлательщикомЕНВД;
	
	// отразим видимость элементов формы в зависимости от учетной политики
	мВидимостьНУСчета = Ложь;
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУБухучета(мСтруктураЭУ, мВидимостьНУСчета , Организация, ПериодРегистрации);
	
КонецПроцедуры

// Формирует удобочитаемое представление периода начисления по двум датам
//
// Параметры
//  Начало, Конец - даты, определяют период начисления
//
// Возвращаемое значение:
//   строка - предстваление
//
Функция ПредставлениеПериодаНачисления(Начало, Конец)

	Возврат	"С " + Формат(Начало,"ДФ=dd.MM.yyyy") + " по " + Формат(Конец,"ДФ=dd.MM.yyyy")

КонецФункции // ПредставлениеПериодаНачисления()

Процедура СформироватьСписокПериодовНачислений()

	ДатаЧерез2Дня = ДатаНачалаСобытия + 2 * мДлинаСуток;
	
	мСписокПериодовНачисления = Новый СписокЗначений;
	ИмеющиесяИнтервалы = Новый Соответствие;
	ТЧНачисления = Начисления.Выгрузить(Начисления.НайтиСтроки(Новый Структура("Сторно", Ложь)), "ДатаНачала,ДатаОкончания");
	ТЧНачисления.Сортировать("ДатаНачала");
	Для каждого СтрокаТЧ Из ТЧНачисления Цикл
		ПериодНачисления = ПредставлениеПериодаНачисления(СтрокаТЧ.ДатаНачала, СтрокаТЧ.ДатаОкончания);
		Если ИмеющиесяИнтервалы[ПериодНачисления] = Неопределено Тогда
			Если Не мУСН И (ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ОбщееЗаболевание
				Или ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаВБыту) Тогда
				Если СтрокаТЧ.ДатаНачала < ДатаЧерез2Дня и СтрокаТЧ.ДатаОкончания >= ДатаЧерез2Дня Тогда
					мСписокПериодовНачисления.Добавить(ПредставлениеПериодаНачисления(СтрокаТЧ.ДатаНачала, Мин(СтрокаТЧ.ДатаОкончания,ДатаЧерез2Дня - мДлинаСуток)));
					мСписокПериодовНачисления.Добавить(ПредставлениеПериодаНачисления(ДатаЧерез2Дня, СтрокаТЧ.ДатаОкончания));
				КонецЕсли;
			КонецЕсли;
			ИмеющиесяИнтервалы.Вставить(ПериодНачисления,ПериодНачисления);
			мСписокПериодовНачисления.Добавить(ПериодНачисления);
		КонецЕсли;
	КонецЦикла;
	
	ЭлементыФормы.ОтражениеНачислений.Колонки.Период.ЭлементУправления.ВысотаСпискаВыбора = Макс(мСписокПериодовНачисления.Количество(),5);

КонецПроцедуры

Процедура УстановитьСубконтоПоСчету(СтрокаТаблицы, СведенияОСчетеИсточнике, СведенияОСчетеПриемнике, КолонкиИсточник, КолонкиПриемник) 
	
	// попробуем использовать значения субконто из колонок-образцов
	// если они не подойдйт по виду субконто, оставим то, что было 
	СоответствиеСубконто = Новый Соответствие;
	Для Сч = 1 По 3 Цикл
		СоответствиеСубконто.Вставить(СведенияОСчетеИсточнике["ВидСубконто"+Сч],СтрокаТаблицы[КолонкиИсточник + Сч]);
		Если СведенияОСчетеИсточнике.КоличествоСубконто = Сч Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для Сч = 1 По 3 Цикл
		Если СведенияОСчетеПриемнике.КоличествоСубконто >= Сч Тогда
			СубконтоВБУ = СоответствиеСубконто[СведенияОСчетеПриемнике["ВидСубконто"+Сч]];
			СтрокаТаблицы[КолонкиПриемник + Сч] = СведенияОСчетеПриемнике["ТипСубконто"+Сч].ПривестиЗначение(?(СубконтоВБУ <> Неопределено, СубконтоВБУ,СтрокаТаблицы[КолонкиПриемник + Сч]));
			
		Иначе
			СтрокаТаблицы[КолонкиПриемник + Сч] = Неопределено;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // УстановитьСубконтоПоСчету()

Процедура УстановитьСчетДтНУ(ТекущаяСтрока)

	Если мВидимостьНУСчета Тогда
		
		ТекущаяСтрока.СчетДтНУ = БухгалтерскийУчетДополнительный.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", ТекущаяСтрока.СчетДт));
		
		СведенияОСчетеДт = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ТекущаяСтрока.СчетДт);
		СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ТекущаяСтрока.СчетДтНУ);
		
		// попробуем использовать значения субконто по БУ
		// если они не подойдйт по виду субконто, оставим то, что было 
		УстановитьСубконтоПоСчету(ТекущаяСтрока, СведенияОСчетеДт, СведенияОСчете, "СубконтоДт", "СубконтоДтНУ");
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСчетДтНУ()

Процедура УстановитьСчетКтНУ(ТекущаяСтрока)
	
	Если мВидимостьНУСчета Тогда
		
		ОтборПоСчету = Новый Структура("СчетБУ", ТекущаяСтрока.СчетКт);
		ТекущаяСтрока.СчетКтНУ = БухгалтерскийУчетДополнительный.ПреобразоватьСчетаБУвСчетНУ(ОтборПоСчету);
		
		СведенияОСчетеКт = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ТекущаяСтрока.СчетКт);
		СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ТекущаяСтрока.СчетКтНУ);
		
		// попробуем использовать значения субконто по БУ
		// если они не подойдйт по виду субконто, оставим то, что было 
		УстановитьСубконтоПоСчету(ТекущаяСтрока, СведенияОСчетеКт, СведенияОСчете, "СубконтоКт", "СубконтоКтНУ");
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьСчетКтНУ()

Процедура НастроитьФорму()

	ОбновитьПеременныеУчетнойПолитики();
	СформироватьСписокПериодовНачислений();
	ЭтоТравмаНаПроизводстве = (ПричинаНетрудоспособности = Перечисления.ПричиныНетрудоспособности.ТравмаНаПроизводстве);
	ЭлементыФормы.ПанельЕНВД.Свертка = ?(мЕНВД И НЕ ЭтоТравмаНаПроизводстве,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Верх);
	ПрочитатьСвойстваВидаОплаты();

	НастроитьКолонкуВидаДохода(ЭлементыФормы.ОтражениеНачислений.Колонки.КодДоходаЕСН);
	
	ПоказыватьЕСН = ПериодРегистрации < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами();
	ЭлементыФормы.РамкаГруппыПроводки.Заголовок = ?(ПоказыватьЕСН,"Проводки и данные для ЕСН","Проводки и данные для страховых взносов");
	
	ОбновитьДоступностьЭУОтВариантаОтраженияВУчете();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПриОткрытии()
	
	Если ТипЗнч(ВладелецФормы) = Тип("Форма") Тогда
		ТолькоПросмотр = ВладелецФормы.ТолькоПросмотр;
	КонецЕсли;	
	
	СоздатьСтруктуруЭУ();
	НастроитьФорму();
КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлементыФормы.ПанельЕНВД.Свертка = РежимСверткиЭлементаУправления.Нет;
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ОбновитьФорму" Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ОбновитьФорму" и Источник = Ссылка Тогда
					НастроитьФорму();
					Если Не ПособиеОтражаетсяВРеглУчетеТекущимДокументом Тогда
						СтратегияОтраженияВУчете = мСтратегияОтраженияВУчете
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ

Процедура ОсновныеДействияФормыДействиеОК(Кнопка)
	Закрыть();
КонецПроцедуры

Процедура КоманднаяПанельПроводкиСформировать(Кнопка)
	
	МассивТаблиц = Новый Массив;
	МассивТаблиц.Добавить(ОтражениеНачислений);
	ТекстВопроса1 = "Сформировать данные учета можно только после отмены проведения документа. Продолжить?";
	ТекстВопроса2 = "Таблица будет очищена. Продолжить?";
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
		Возврат;
	КонецЕсли;
	ОтражениеНачислений.Очистить();
	ЭтаФорма.Обновить();
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	НачислениеПоБольничномуЛистуПереопределяемый.АвтозаполнениеПроводок(ЭтотОбъект);
	ОбработкаКомментариев.ПоказатьСообщения();

	НачислениеПоБольничномуЛистуПереопределяемый.ОбновитьИнформационнуюНадписьОтражениеВУчете(ЭтотОбъект, ВладелецФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" переключателя ПереключательПроводкиФормируютсяАвтоматически
//
Процедура ПереключательПроводкиФормируютсяВКонцеМесяцаПриИзменении(Элемент)
	
	ОбновитьДоступностьЭУОтВариантаОтраженияВУчете();
	
	Если Не ПособиеОтражаетсяВРеглУчетеТекущимДокументом Тогда
		СтратегияОтраженияВУчете = мСтратегияОтраженияВУчете
	КонецЕсли;
	
	НачислениеПоБольничномуЛистуПереопределяемый.ОбновитьИнформационнуюНадписьОтражениеВУчете(ЭтотОбъект, ВладелецФормы);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОтражениеНачислений

Процедура ОтражениеНачисленийПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетДт);
	СведенияОСтатьеЗатрат = БухгалтерскийУчет.ПолучитьСведенияОСтатьеЗатратПоСтроке(мСведенияОСтатьяхЗатрат, "Дт", ДанныеСтроки);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Дт", СведенияОСчете, ?(СведенияОСтатьеЗатрат = Неопределено,Новый Структура("ХарактерЗатрат",Неопределено),СведенияОСтатьеЗатрат));
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетКт);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "Кт", СведенияОСчете);
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетДтНУ);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "ДтНУ", СведенияОСчете);
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, ДанныеСтроки.СчетКтНУ);
	БухгалтерскийУчет.НазначитьВидимостьСубконто(ОформлениеСтроки, "КтНУ", СведенияОСчете);
	
	ОформлениеСтроки.Ячейки.Период.Значение = ПредставлениеПериодаНачисления(ДанныеСтроки.ПериодДействияНачало, ДанныеСтроки.ПериодДействияКонец);
	
	// строки с отрицательным результатом - красным
	Если ДанныеСтроки.Сторно Тогда
		ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования" строки таблицы
//
Процедура ОтражениеНачисленийПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	НачислениеПоБольничномуЛистуПереопределяемый.ОбновитьИнформационнуюНадписьОтражениеВУчете(ЭтотОбъект, ВладелецФормы);
	
КонецПроцедуры // НачисленияПриОкончанииРедактирования()

Процедура ОтражениеНачисленийПослеУдаления(Элемент)
	НачислениеПоБольничномуЛистуПереопределяемый.ОбновитьИнформационнуюНадписьОтражениеВУчете(ЭтотОбъект, ВладелецФормы);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОтражениеНачислений

Процедура ОтражениеВУчетеПериодНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = ВыбратьИзСписка(мСписокПериодовНачисления,Элемент,мСписокПериодовНачисления.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		СтрокаПредставления = ЭлементСписка.Значение;
		Элемент.Значение = СтрокаПредставления;
		ДанныеСтроки = ЭлементыФормы.ОтражениеНачислений.ТекущиеДанные;
		ДанныеСтроки.ПериодДействияНачало = Дата(Сред(СтрокаПредставления,9,4),Сред(СтрокаПредставления,6,2),Сред(СтрокаПредставления,3,2));
		ДанныеСтроки.ПериодДействияКонец = Дата(Сред(СтрокаПредставления,23,4),Сред(СтрокаПредставления,20,2),Сред(СтрокаПредставления,17,2));
	КонецЕсли;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДт
//
Процедура ОтражениеВУчетеСчетДтПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеНачислений, "Дт", СведенияОСчете);
	УстановитьСчетДтНУ(ЭлементыФормы.ОтражениеНачислений.ТекущиеДанные);
	
КонецПроцедуры // ОтражениеВУчетеСчетДтПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетДт
//
Процедура ОтражениеВУчетеСчетДтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры // ОтражениеВУчетеСчетДтОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетКт
//
Процедура ОтражениеВУчетеСчетКтПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеНачислений, "Кт", СведенияОСчете);
	
	УстановитьСчетКтНУ(ЭлементыФормы.ОтражениеНачислений.ТекущиеДанные);
	
КонецПроцедуры // ОтражениеВУчетеСчетКтПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетКт
//
Процедура ОтражениеВУчетеСчетКтОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // ОтражениеВУчетеСчетКтОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" полей ввода СубконтоД1, СубконтоД2, СубконтоД3
//
Процедура ОтражениеВУчетеСубконтоДтПриИзменении(Элемент)
	
	УстановитьСчетДтНУ(ЭлементыФормы.ОтражениеНачислений.ТекущиеДанные);
	
КонецПроцедуры // ОтражениеВУчетеСубконтоДтПриИзменении()

// Процедура - обработчик события "ПриИзменении" полей ввода СубконтоК1, СубконтоК2, СубконтоК3
//
Процедура ОтражениеВУчетеСубконтоКтПриИзменении(Элемент)
	
	УстановитьСчетКтНУ(ЭлементыФормы.ОтражениеНачислений.ТекущиеДанные);
	
КонецПроцедуры // ОтражениеВУчетеСубконтоКтПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетДтНУ
//
Процедура ОтражениеВУчетеСчетДтНУПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеНачислений, "ДтНУ", СведенияОСчете);
	
КонецПроцедуры // ОтражениеВУчетеСчетДтНУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетДтНУ
//
Процедура ОтражениеВУчетеСчетДтНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)
	
КонецПроцедуры // ОтражениеВУчетеСчетДтНУОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетКтНУ
//
Процедура ОтражениеВУчетеСчетКтНУПриИзменении(Элемент)
	
	СведенияОСчете = БухгалтерскийУчетДополнительный.ПолучитьСведенияОСчете(мСведенияОСчетах, Элемент.Значение);
	БухгалтерскийУчетДополнительный.ПривестиЗначениеСубконто(ЭлементыФормы.ОтражениеНачислений, "КтНУ", СведенияОСчете);
	
КонецПроцедуры // ОтражениеВУчетеСчетКтНУПриИзменении()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода СчетКтНУ
//
Процедура ОтражениеВУчетеСчетКтНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)

	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение)

КонецПроцедуры // ОтражениеВУчетеСчетКтНУОбработкаВыбора()

Процедура ОтражениеНачисленийКодДоходаЕСНОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Элемент.Значение = ?(ПериодРегистрации < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами(), Справочники.ДоходыЕСН.ПустаяСсылка(), Справочники.ДоходыПоСтраховымВзносам.ПустаяСсылка())
КонецПроцедуры

Процедура ОтражениеНачисленийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.КодДоходаЕСН = ?(ПериодРегистрации < ПроведениеРасчетов.ДатаЗаменыЕСНСтраховымиВзносами(), Справочники.ДоходыЕСН.ПустаяСсылка(), Справочники.ДоходыПоСтраховымВзносам.ПустаяСсылка());
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток = 86400; // в секундах

мСведенияОСчетах = Новый Соответствие;
мСведенияОСтатьяхЗатрат = Новый Соответствие;