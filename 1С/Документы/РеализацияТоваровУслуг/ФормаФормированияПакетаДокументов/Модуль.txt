Перем мСтруктураНачальныхНастроек;
Перем мОснованиеСФ, мЕстьСФ, мОснованиеПКО, мЕстьПКО;
Перем мОрганизацияОтражатьВРегламентированномУчете;

Перем мПоказыватьФормуПринудительно Экспорт;
Перем мОткрыта Экспорт;
Перем мДокументыРОнТ;

Перем мФормаПКО;
Перем мФормаСФ;
Перем мФормаРеализации;

Перем ДеревоМакетовПечатиСФ;
Перем ДеревоМакетовПечатиРН;
Перем ДеревоМакетовПечатиРО;
Перем ДеревоМакетовПечатиПКО;


// Функция возвращает форму документа "Приходный кассовый ордер".
//
// Параметры:
//  ОбъектПКО - объект документа, форму которого нужно получить.
//
// Возвращаемое значение:
//   Форма документа "Приходный кассовый ордер".
//
Функция ПолучитьФормуПКО(ОбъектПКО)

	Если мФормаПКО = Неопределено Тогда
		мФормаПКО = ОбъектПКО.ПолучитьФорму();
	КонецЕсли;

	Возврат мФормаПКО;

КонецФункции // ПолучитьФормуПКО()

// Функция возвращает форму документа "Счет-фактура выданный".
//
// Параметры:
//  ОбъектСФ - объект документа, форму которого нужно получить.
//
// Возвращаемое значение:
//   Форма документа "Счет-фактура выданный".
//
Функция ПолучитьФормуСФ(ОбъектСФ)

	Если мФормаСФ = Неопределено Тогда
		мФормаСФ = ОбъектСФ.ПолучитьФорму();
	КонецЕсли;

	Возврат мФормаСФ;

КонецФункции // ПолучитьФормуСФ()

// Функция возвращает форму документа "Реализация товаров и услуг".
//
// Параметры:
//  ОбъектРеализации - объект документа, форму которого нужно получить.
//
// Возвращаемое значение:
//   Форма документа "Реализация товаров и услуг".
//
Функция ПолучитьФормуРеализации(ОбъектРеализации)

	Если мФормаРеализации = Неопределено Тогда
		мФормаРеализации = ОбъектРеализации.ПолучитьФорму();
	КонецЕсли;

	Возврат мФормаРеализации;

КонецФункции // ПолучитьФормуРеализации()

// <Описание функции>
//Получает подчиненные документы Расходный ордер на товары
// Параметры
//  <ДокументСсылка>  – <ДокументСсылка.РеализацияТоваровУслуг> – <Документ для которого необходимо получить подчиненные документы>
//                 <продолжение описания параметра>
//
Функция ПолучитьПодчененныйРОнТ(ДокументСсылка)

	ДокументыРасходныйОрдер = Новый ТаблицаЗначений();
	ДокументыРасходныйОрдер.Колонки.Добавить("Документы", Новый ОписаниеТипов("ДокументСсылка.РеализацияТоваровУслуг"));
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
		Запрос.Текст = "
		|ВЫБРАТЬ Документ.Ссылка КАК Документы
		|ИЗ
		|	Документ.РасходныйОрдерНаТовары КАК Документ
		|ГДЕ
		|	ВЫРАЗИТЬ(Документ.ДокументПередачи КАК Документ.РеализацияТоваровУслуг) = &ДокументСсылка
		|УПОРЯДОЧИТЬ ПО
		|	Документ.Дата
		|";
		ДокументыРасходныйОрдер = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.Прямой);
		ДокументыРасходныйОрдер.Колонки.Документы.Ширина = 100;
	КонецЕсли;

	возврат ДокументыРасходныйОрдер;

КонецФункции // ПолучитьПодчененныйРОнТ()

// Функция ПреобразоватьДеревоВСписок
//
// Параметры
//  ИсходноеДерево - ДеревоЗначений
// Возвращаемое значение - СписокЗначений:
//
Функция ПреобразоватьДеревоВСписок(ИсходноеДерево)

	СЗ = Новый СписокЗначений;

	Для Каждого СтрокаДерева Из ИсходноеДерево.Строки Цикл
		СЗ.Добавить(СтрокаДерева.Имя, СтрокаДерева.Текст);
		СЗ.СортироватьПоПредставлению();
	КонецЦикла;

	Возврат СЗ;

КонецФункции // ПреобразоватьДеревоВСписок()

// Функция производит поиск подчиненного ПКО
//
Функция НайтиПодчиненныйПКО(ДокументСсылка)

	НайденныйДокумент = Неопределено;
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);

		Запрос.Текст = "
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Ссылка
		|ИЗ
		|	Документ.ПриходныйКассовыйОрдер
		|ГДЕ
		|	ДокументОснование = &ДокументСсылка
		|";

		ВыборкаИзЗапроса = Запрос.Выполнить().Выбрать();
		Если ВыборкаИзЗапроса.Следующий() Тогда
			НайденныйДокумент = ВыборкаИзЗапроса.Ссылка;
		КонецЕсли;
	КонецЕсли;

	Возврат НайденныйДокумент;

КонецФункции // НайтиПодчиненныйПКО()

// Функция производит поиск значения в списке по Представлению
// Параметры
//  Список - СписокЗначений
//  Представление - Строка - Представление искомого элемента списка значений
// Возвращаемое значение - ЭлементСпискаЗначений
//
Функция НайтиПоПредставлению(Список, Представление)
	
	Для каждого Значение Из Список Цикл
		Если Значение.Представление = Представление Тогда
			Возврат Значение;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции // НайтиПоПредставлению()

// Процедура заполняет настройки, с которыми была закрыта форма при
// предыдущем запуске.
//
// Параметры:
//  ВосстанавливатьЗначения - булево, флаг попытки восстановить сохраненные значения.
//
Процедура ЗаполнитьНачальныеНастройки(ВосстанавливатьЗначения = Истина)

	Перем ВосстановленноеЗначение;

	мОрганизацияОтражатьВРегламентированномУчете = Реализация.Организация.ОтражатьВРегламентированномУчете;

	ПечататьРеализацию = Истина;

	мОснованиеПКО = НайтиПодчиненныйПКО(Реализация.Ссылка);
	мЕстьПКО      = ЗначениеЗаполнено(мОснованиеПКО);

	Если ПравоДоступа("Изменение", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		ЗаписыватьПКО = Не мЕстьПКО;
		ПровестиПКО   = ЗаписыватьПКО;
		ПечататьПКО   = ПечататьРеализацию;
	Иначе
		ЗаписыватьПКО = Ложь;
		ПровестиПКО   = Ложь;
		ПечататьПКО   = Ложь;
	КонецЕсли;	

	мОснованиеСФ = УчетНДС.НайтиПодчиненныйСчетФактуру(Реализация.Ссылка, "СчетФактураВыданный");
	мЕстьСФ      = ЗначениеЗаполнено(мОснованиеСФ);
	мДокументыРОнТ    = ПолучитьПодчененныйРОнТ(Реализация.Ссылка);

	УстановитьДоступность();

	Если ВосстанавливатьЗначения Тогда
		СохраненныеНастройки = ВосстановитьЗначение("РеализацияТоваровИУслуг.ФормаФормированияПакетаДокументов.Настройки");
		Если ТипЗнч(СохраненныеНастройки) <> Тип("Структура") Тогда
			СохраненныеНастройки = Новый Структура;
		КонецЕсли;
	КонецЕсли;

	ДеревоМакетовПечатиРН = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.РеализацияТоваровУслуг.СоздатьДокумент().Ссылка, Документы.РеализацияТоваровУслуг.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
	ЭлементыФормы.МакетРеализации.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиРН);
	
	Если ВосстанавливатьЗначения Тогда
		СохраненныеНастройки.Свойство("МакетРеализации", ВосстановленноеЗначение);
		ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетРеализации.СписокВыбора, ВосстановленноеЗначение);
		ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетРеализации.СписокВыбора.Получить(0), ТекущийМакет);
	Иначе
		ТекущийМакет = ЭлементыФормы.МакетРеализации.СписокВыбора.Получить(0);
	КонецЕсли;
	МакетРеализации = ТекущийМакет.Значение;

	ДеревоМакетовПечатиСФ = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.СчетФактураВыданный.СоздатьДокумент().Ссылка, Документы.СчетФактураВыданный.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
	ЭлементыФормы.МакетСФ.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиСФ);

	Если ВосстанавливатьЗначения Тогда
		СохраненныеНастройки.Свойство("МакетСФ", ВосстановленноеЗначение);
		ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетСФ.СписокВыбора, ВосстановленноеЗначение);
		ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетСФ.СписокВыбора.Получить(0), ТекущийМакет);
	Иначе
		ТекущийМакет = ЭлементыФормы.МакетСФ.СписокВыбора.Получить(0);
	КонецЕсли;
	МакетСФ = ТекущийМакет.Значение;

	Для Каждого ЭлементСтруктуры Из мСтруктураНачальныхНастроек Цикл
		КлючЭлемента = ЭлементСтруктуры.Ключ;

		Если ВосстанавливатьЗначения Тогда
			СохраненныеНастройки.Свойство(КлючЭлемента, ВосстановленноеЗначение);

			ВосстановленноеЗначение = ?(ВосстановленноеЗначение = Неопределено, ЭлементСтруктуры.Значение, ВосстановленноеЗначение);
		Иначе
			ВосстановленноеЗначение = ЭлементСтруктуры.Значение;
		КонецЕсли;
		ЭтаФорма[КлючЭлемента] = ВосстановленноеЗначение;
	КонецЦикла;

	Если ПечататьПКО Тогда
	
		ДеревоМакетовПечатиПКО = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.ПриходныйКассовыйОрдер.СоздатьДокумент().Ссылка, Документы.ПриходныйКассовыйОрдер.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
		ЭлементыФормы.МакетПКО.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиПКО);
		
		Если ВосстанавливатьЗначения Тогда
			СохраненныеНастройки.Свойство("МакетПКО", ВосстановленноеЗначение);
			ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетПКО.СписокВыбора, ВосстановленноеЗначение);
			ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетПКО.СписокВыбора.Получить(0), ТекущийМакет);
		Иначе
			ТекущийМакет = ЭлементыФормы.МакетПКО.СписокВыбора.Получить(0);
		КонецЕсли;
		МакетПКО = ТекущийМакет.Значение;
		
	КонецЕсли;	

	Если ПечататьРасходныйОрдерНаТовары Тогда
		ДеревоМакетовПечатиРО = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.РасходныйОрдерНаТовары.СоздатьДокумент().Ссылка, Документы.РасходныйОрдерНаТовары.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
		ЭлементыФормы.МакетРасходныйОрдерНаТовары.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиРО);
		
		Если ВосстанавливатьЗначения Тогда
			СохраненныеНастройки.Свойство("МакетРасходныйОрдерНаТовары", ВосстановленноеЗначение);
			ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетРасходныйОрдерНаТовары.СписокВыбора, ВосстановленноеЗначение);
			ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетРасходныйОрдерНаТовары.СписокВыбора.Получить(2), ТекущийМакет);
		Иначе
			ТекущийМакет = ЭлементыФормы.МакетРасходныйОрдерНаТовары.СписокВыбора.Получить(2);
		КонецЕсли;
		МакетРасходныйОрдерНаТовары = ТекущийМакет.Значение;
    КонецЕсли;
	
КонецПроцедуры // ЗаполнитьНачальныеНастройки()

// Процедура устанавливает доступность эдементов формы
//
Процедура УстановитьДоступность() Экспорт

	ЭлементыФормы.МакетРеализации.Доступность                   = ПечататьРеализацию;
	ЭлементыФормы.КоличествоЭкземпляровРеализации.Доступность   = ПечататьРеализацию;

	ЭлементыФормы.ЗаписыватьСФ.Доступность                      = мОрганизацияОтражатьВРегламентированномУчете;
	ЭлементыФормы.ПечататьСФ.Доступность                        = ?(мЕстьСФ, Истина, ЗаписыватьСФ) И мОрганизацияОтражатьВРегламентированномУчете;
	ЭлементыФормы.ОткрыватьСФ.Доступность                       = ?(мЕстьСФ, Истина, ЗаписыватьСФ) И мОрганизацияОтражатьВРегламентированномУчете;
	ЭлементыФормы.МакетСФ.Доступность                           = ПечататьСФ И мОрганизацияОтражатьВРегламентированномУчете;
	ЭлементыФормы.КоличествоЭкземпляровСчетаФактуры.Доступность = ПечататьСФ И мОрганизацияОтражатьВРегламентированномУчете;

	ЭлементыФормы.ЗаписыватьПКО.Доступность                     = Истина;
	ЭлементыФормы.ПроводитьПКО.Доступность                      = ЗаписыватьПКО;
	ЭлементыФормы.ПечататьПКО.Доступность                       = ?(мЕстьПКО, Истина, ЗаписыватьПКО);
	ЭлементыФормы.ОткрыватьПКО.Доступность                      = ?(мЕстьПКО, Истина, ЗаписыватьПКО);
	ЭлементыФормы.МакетПКО.Доступность                          = ПечататьПКО;
	ЭлементыФормы.КоличествоЭкземпляровПКО.Доступность          = ПечататьПКО;
	ЭлементыФормы.ОснованиеПКО.Доступность                      = ЗаписыватьПКО;

	ЭлементыФормы.ПолеКартинкиЕстьСФ.Видимость                  = мЕстьСф;
	ЭлементыФормы.ПолеКартинкиЕстьПКО.Видимость                 = мЕстьПКО;
	ЭлементыФормы.ПолеКартинкиЕстьРасходныйОрдерНаТовары.Видимость        = мДокументыРОнТ.Количество() > 0;

	ЭлементыФормы.ЗаписыватьРасходныйОрдерНаТовары.Доступность            = Реализация.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру;
	ЭлементыФормы.ПечататьРасходныйОрдерНаТовары.Доступность              = ЭлементыФормы.ЗаписыватьРасходныйОрдерНаТовары.Доступность И ЗаписыватьРасходныйОрдерНаТовары;
	ЭлементыФормы.ОткрыватьРасходныйОрдерНаТовары.Доступность             = ЭлементыФормы.ЗаписыватьРасходныйОрдерНаТовары.Доступность И ЗаписыватьРасходныйОрдерНаТовары;
	ЭлементыФормы.МакетРасходныйОрдерНаТовары.Доступность                 = ЭлементыФормы.ПечататьРасходныйОрдерНаТовары.Доступность И ПечататьРасходныйОрдерНаТовары;
	ЭлементыФормы.КоличествоЭкземпляровРасходныйОрдерНаТовары.Доступность = ЭлементыФормы.МакетРасходныйОрдерНаТовары.Доступность И ПечататьРасходныйОрдерНаТовары;

КонецПроцедуры // УстановитьДоступность()

// Процедура выполняет заполнение ПКО.
//
// Параметры:
//  ОбъектПКО - Объект документа ПКО.
//
Процедура ЗаполнитьПКО(ОбъектПКО)

	ОбъектПКО.Дата = РабочаяДата;
	ОбъектПКО.Основание = ОснованиеПКО;

	ОбъектПКО.Заполнить(Реализация.Ссылка);

КонецПроцедуры // ЗаполнитьПКО()

// Функция формирует требуемые документы и выполняет требуемые действия в зависимости от настроек.
//
// Возвращаемое значение:
//  Булево - Ложь, если не удалось провести документ РН.
//
Функция СформироватьДокументы()

	Перем ОбъектСФ;
	Перем ОбъектПКО;

	// Реализация товаров и услуг.
	РеализацияОбновлена = Ложь;

	Отказ = Ложь;
	Если Не Реализация.Проведен Или Реализация.Модифицированность() Тогда
		Попытка
			ПолучитьФормуРеализации(Реализация).ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);

			РеализацияОбновлена = Истина;
		Исключение
			ОбщегоНазначения.СообщитьОбОшибке("Не удалось провести " + СокрЛП(Реализация), Отказ);
		КонецПопытки;
	КонецЕсли;

	Если Отказ Или Не Реализация.Проведен Или Реализация.Модифицированность() Тогда
		Возврат Ложь;
	КонецЕсли;

	// Счет-фактура.
	Если мЕстьСФ Тогда
		ОбъектСФ = мОснованиеСФ.ПолучитьОбъект();
	ИначеЕсли ЗаписыватьСФ И мОрганизацияОтражатьВРегламентированномУчете Тогда
		ОбъектСФ = Документы.СчетФактураВыданный.СоздатьДокумент();
		ОбъектСФ.Заполнить(Реализация.Ссылка);

		ПолучитьФормуСФ(ОбъектСФ).ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);

		ПолучитьФормуРеализации(Реализация).ЗаполнитьТекстПроСчетФактуру();
	КонецЕсли;

	Если ОбъектСФ <> Неопределено И ОткрыватьСФ Тогда
		ПолучитьФормуСФ(ОбъектСФ).Открыть();
	КонецЕсли;

	// Приходный кассовый ордер.
	Если мЕстьПКО Тогда
		ОбъектПКО = мОснованиеПКО.ПолучитьОбъект();
		ПКОИзменен = (Не ОбъектПКО.Проведен И ПроводитьПКО);

		Если РеализацияОбновлена Тогда
			Если ОбъектПКО.Оплачено Тогда
				Ответ = Вопрос("В документе ""Приходный кассовый ордер"" установлен флаг ""Оплачено""."
				   + Символы.ПС + "Переписать документ ""Приходный кассовый ордер""", РежимДиалогаВопрос.ДаНет);
				Если Ответ = КодВозвратаДиалога.Да Тогда
					ПереписатьПКО = Истина;
				Иначе
					ПереписатьПКО = Ложь;
				КонецЕсли;
			Иначе
				ПереписатьПКО = Истина;
			КонецЕсли;

			Если ПереписатьПКО Тогда
				ОбъектПКО.РасшифровкаПлатежа.Очистить();

				Для Каждого Реквизит Из ОбъектПКО.Метаданные().Реквизиты Цикл
					ИмяРеквизита = Реквизит.Имя;
					Если ЗначениеЗаполнено(ОбъектПКО[ИмяРеквизита]) Тогда
						ОбъектПКО[ИмяРеквизита] = ОбщегоНазначения.ПустоеЗначениеТипа(ТипЗнч(ОбъектПКО[ИмяРеквизита]));
					КонецЕсли;
				КонецЦикла;

				Если ОбъектПКО.Проведен Тогда
					ОбъектПКО.Записать(РежимЗаписиДокумента.ОтменаПроведения);
					ПКОИзменен = Истина;
				КонецЕсли;

				ЗаполнитьПКО(ОбъектПКО);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗаписыватьПКО Тогда
		ОбъектПКО = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();

		ЗаполнитьПКО(ОбъектПКО);

		ПКОИзменен = Истина;
	Иначе
		ПКОИзменен = Ложь;
	КонецЕсли;

	Если ОбъектПКО <> Неопределено И ЗаписыватьПКО И ПКОИзменен Тогда
		Если ПроводитьПКО Тогда
			Попытка
				ПолучитьФормуПКО(ОбъектПКО).ЗаписатьВФорме(РежимЗаписиДокумента.Проведение);
			Исключение
				ОбщегоНазначения.СообщитьОбОшибке("Не удалось провести "+СокрЛП(ОбъектПКО));
			КонецПопытки;
		Иначе
			ПолучитьФормуПКО(ОбъектПКО).ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
		КонецЕсли;
	КонецЕсли;

	Если ОбъектПКО <> Неопределено И ОткрыватьПКО Тогда
		ПолучитьФормуПКО(ОбъектПКО).Открыть();
	КонецЕсли;

	ДокументыРасходныйОрдерНаТовары = Новый Массив();
	Если ЗаписыватьРасходныйОрдерНаТовары И Реализация.ВидПередачи = Перечисления.ВидыПередачиТоваров.ПоОрдеру Тогда
		ФормироватьДокументы = Истина;

		Если мДокументыРОнТ.Количество() > 0 Тогда
			Ответ = Вопрос("У документа " + Реализация + " существуют документ(ы) расходный ордер на товары!" + Символы.ПС + "Создавать документ(ы) расходный ордер на товары?", РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Документы расходный ордер на товары уже существуют!");
			ФормироватьДокументы = Ответ = КодВозвратаДиалога.Да;
		КонецЕсли;

		Если ФормироватьДокументы Тогда

			СтруктТабЧастей = Новый Структура;
			СтруктТабЧастей.Вставить("Товары",         "Склад");
			СтруктТабЧастей.Вставить("ВозвратнаяТара", "Склад");

			СтруктПараметры = Новый Структура;
			СтруктПараметры.Вставить("ТабЧасти", СтруктТабЧастей);
			СтруктПараметры.Вставить("ИмяСкладаВШапке", "Склад");

			СписокСкладов = РаботаСДиалогами.ВыбратьСкладИзДокументаОснования(Реализация, СтруктПараметры, Истина);
			СписокСкладов = ?(СписокСкладов = Неопределено, Новый СписокЗначений(), СписокСкладов);
			Если НЕ Реализация.мУказаниеСкладовВТЧ И СписокСкладов.Количество() > 0 Тогда
				СписокСкладов.Очистить();
				СписокСкладов.Добавить(Реализация.Склад);
			КонецЕсли;

			Если СписокСкладов.Количество() > 0 Тогда

				Для Каждого СкладЭлементСписка Из СписокСкладов Цикл

					РасходныйОрдерНаТовары                     = Документы.РасходныйОрдерНаТовары.СоздатьДокумент();
					РасходныйОрдерНаТовары.Дата                = РабочаяДата;
					РасходныйОрдерНаТовары.мУказаниеСкладовВТЧ = Ложь;
					РасходныйОрдерНаТовары.мСклад              = СкладЭлементСписка.Значение;
					РасходныйОрдерНаТовары.Заполнить(Реализация.Ссылка);

					Попытка
						РасходныйОрдерНаТовары.Записать(РежимЗаписиДокумента.Запись);
						ДокументыРасходныйОрдерНаТовары.Добавить(РасходныйОрдерНаТовары);
					Исключение
						ОбщегоНазначения.СообщитьОбОшибке("Не удалось записать "+СокрЛП(РасходныйОрдерНаТовары));
					КонецПопытки;

				КонецЦикла;
			Иначе
				ОбщегоНазначения.СообщитьОбОшибке("Документ ""Расходный ордер на товары"" для документа " + СокрЛП(Реализация) + " не сформирован.");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Если ОткрыватьРасходныйОрдерНаТовары И ДокументыРасходныйОрдерНаТовары.Количество() > 0 Тогда
		Для Каждого ДокументРасходныйОрдер Из ДокументыРасходныйОрдерНаТовары Цикл
			ФормаРасходныйОрдерНаТовары = ДокументРасходныйОрдер.ПолучитьФорму("ФормаДокумента");
			ФормаРасходныйОрдерНаТовары.Открыть();
		КонецЦикла;
	КонецЕсли;

	// Печать документов.

	Если Реализация <> Неопределено И ПечататьРеализацию И Реализация.Проведен Тогда
		СтрМакета = ДеревоМакетовПечатиРН.Строки.Найти(МакетРеализации, "Имя");
		Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(Реализация.Ссылка, СтрМакета.Расшифровка);
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляровРеализации, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(Реализация, Реализация.Метаданные().Представление()), Реализация.Ссылка);
		Иначе
			Реализация.Печать(МакетРеализации, КоличествоЭкземпляровРеализации, ПечататьНаПринтер);
		КонецЕсли;
	КонецЕсли;
	
	Если ОбъектСФ <> Неопределено И ПечататьСФ И ОбъектСФ.Проведен Тогда
		СтрМакета = ДеревоМакетовПечатиСФ.Строки.Найти(МакетСФ, "Имя");
		Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(ОбъектСФ.Ссылка, СтрМакета.Расшифровка);
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляровСчетаФактуры, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ОбъектСФ, ОбъектСФ.Метаданные().Представление()), ОбъектСФ.Ссылка);
		Иначе
			ОбъектСФ.Печать(МакетСФ, КоличествоЭкземпляровСчетаФактуры, ПечататьНаПринтер);
		КонецЕсли;
	КонецЕсли;

	Если ОбъектПКО <> Неопределено И ПечататьПКО И ОбъектПКО.Проведен Тогда
		СтрМакета = ДеревоМакетовПечатиПКО.Строки.Найти(МакетПКО, "Имя");
		Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
			ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(ОбъектПКО.Ссылка, СтрМакета.Расшифровка);
			УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляровРеализации, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ОбъектПКО, ОбъектПКО.Метаданные().Представление()), ОбъектПКО.Ссылка);
		Иначе
			ОбъектПКО.Печать(МакетПКО, КоличествоЭкземпляровПКО, ПечататьНаПринтер);
		КонецЕсли;
	КонецЕсли;
	
	Если ПечататьРасходныйОрдерНаТовары И ДокументыРасходныйОрдерНаТовары.Количество() > 0 Тогда
		Для Каждого ДокументРасходныйОрдер Из ДокументыРасходныйОрдерНаТовары Цикл
			Если ДокументРасходныйОрдер <> Неопределено Тогда
				СтрМакета = ДеревоМакетовПечатиРО.Строки.Найти(МакетПКО, "Имя");
				Если (СтрМакета<>Неопределено) И (СтрМакета.Расшифровка<>Неопределено) И (ТипЗнч(СтрМакета.Расшифровка)=Тип("Структура")) И (СтрМакета.Расшифровка.СсылкаНаВнешнююОбработку<>Неопределено) Тогда
					ТабДокумент = УниверсальныеМеханизмы.НапечататьВнешнююФорму(ДокументРасходныйОрдер.Ссылка, СтрМакета.Расшифровка);
					УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, КоличествоЭкземпляровРасходныйОрдерНаТовары, ПечататьНаПринтер, ОбщегоНазначения.СформироватьЗаголовокДокумента(ДокументРасходныйОрдер, ДокументРасходныйОрдер.Метаданные().Представление()), ДокументРасходныйОрдер.Ссылка);
				Иначе
					ДокументРасходныйОрдер.Печать(МакетРасходныйОрдерНаТовары, КоличествоЭкземпляровРасходныйОрдерНаТовары, ПечататьНаПринтер);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции // СформироватьДокументы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при нажатии кнопки "Значения по умолчанию".
//
Процедура ДействияФормыЗначенияПоУмолчанию(Кнопка)

	ЗаполнитьНачальныеНастройки(Ложь);
	УстановитьДоступность();

КонецПроцедуры // ДействияФормыЗначенияПоУмолчанию()

// Процедура вызывается при нажатии кнопки "Сформировать документы".
//
Процедура ОсновныеДействияФормыСформироватьДокументы(Кнопка)

	МожноЗакрытьФормуРеализации = СформироватьДокументы();

	Закрыть();

	Если ЗакрыватьФормуРеализации И МожноЗакрытьФормуРеализации Тогда
		Если ПолучитьФормуРеализации(Реализация).Открыта() Тогда
			ПолучитьФормуРеализации(Реализация).Закрыть();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры // ОсновныеДействияФормыСформироватьДокументы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	Если Реализация.ПометкаУдаления Тогда
		ОбщегоНазначения.СообщитьОбОшибке("Документ помечен на удаление! Формирование документов невозможно!", Отказ);
		Возврат;
	КонецЕсли;

	мОткрыта = Истина;

	// Заполнить начальные настройки
	ЗаполнитьНачальныеНастройки();
	УстановитьДоступность();

	Если Не(ПоказыватьФорму Или мПоказыватьФормуПринудительно) Тогда
		МожноЗакрытьФормуРеализации = СформироватьДокументы();

		Если ЗакрыватьФормуРеализации И МожноЗакрытьФормуРеализации Тогда
			Если ПолучитьФормуРеализации(Реализация).Открыта() Тогда
				ПолучитьФормуРеализации(Реализация).Закрыть();
			КонецЕсли;
		КонецЕсли;

		Отказ = Истина;
	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриЗакрытии" формы
//
Процедура ПриЗакрытии()

	// Сохранить настройки.
	СтруктураСохраненияНастроек = Новый Структура;

	Для Каждого ЭлементСтруктуры Из мСтруктураНачальныхНастроек Цикл
		КлючЭлемента = ЭлементСтруктуры.Ключ;
		СтруктураСохраненияНастроек.Вставить(КлючЭлемента, ЭтаФорма[КлючЭлемента]);
	КонецЦикла;

	СтрМакета = ДеревоМакетовПечатиРН.Строки.Найти(МакетРеализации, "Имя");
	Если СтрМакета <> Неопределено Тогда
		СтруктураСохраненияНастроек.Вставить("МакетРеализации", СтрМакета.Текст);
	КонецЕсли;
	
	СтрМакета = ДеревоМакетовПечатиСФ.Строки.Найти(МакетСФ, "Имя");
	Если СтрМакета <> Неопределено Тогда
		СтруктураСохраненияНастроек.Вставить("МакетСФ"        , СтрМакета.Текст);
	КонецЕсли;
	
	Если ДеревоМакетовПечатиПКО <> Неопределено Тогда
		СтрМакета = ДеревоМакетовПечатиПКО.Строки.Найти(МакетПКО, "Имя");
		Если СтрМакета <> Неопределено Тогда
			СтруктураСохраненияНастроек.Вставить("МакетПКО"       , СтрМакета.Текст);
		КонецЕсли;
	КонецЕсли;	
	
	Если ДеревоМакетовПечатиРО <> Неопределено Тогда
		СтрМакета = ДеревоМакетовПечатиРО.Строки.Найти(МакетРасходныйОрдерНаТовары, "Имя");
		Если СтрМакета <> Неопределено Тогда
			СтруктураСохраненияНастроек.Вставить("МакетРасходныйОрдерНаТовары", СтрМакета.Текст);
		КонецЕсли;
	КонецЕсли;	

	СохранитьЗначение("РеализацияТоваровИУслуг.ФормаФормированияПакетаДокументов.Настройки", СтруктураСохраненияНастроек);

	мФормаПКО        = Неопределено;
	мФормаСФ         = Неопределено;
	мФормаРеализации = Неопределено;

КонецПроцедуры // ПриЗакрытии()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

// Процедура - обработчик события "ПриИзменении" флажка "ПечататьРеализацию".
//
Процедура ПечататьРеализациюПриИзменении(Элемент)

	УстановитьДоступность();

КонецПроцедуры // ПечататьРеализациюПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ЗаписыватьСФ".
//
Процедура ЗаписыватьСФПриИзменении(Элемент)

	УстановитьДоступность();

КонецПроцедуры // ЗаписыватьСФПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ЗаписыватьПКО".
//
Процедура ЗаписыватьПКОПриИзменении(Элемент)
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
		ЗаписыватьПКО = Ложь;
		Предупреждение("Нарушение прав доступа!");
	КонецЕсли;
	
	УстановитьДоступность();

КонецПроцедуры // ЗаписыватьПКОПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ПечататьПКО".
//
Процедура ПечататьПКОПриИзменении(Элемент)
	Перем ВосстановленноеЗначение;	
	
	Если ПечататьПКО 
	  И ЭлементыФормы.МакетПКО.СписокВыбора.Количество() = 0	Тогда
	  
	  	Если ПравоДоступа("Изменение", Метаданные.Документы.ПриходныйКассовыйОрдер) Тогда
			СохраненныеНастройки = ВосстановитьЗначение("РеализацияТоваровИУслуг.ФормаФормированияПакетаДокументов.Настройки");
			Если ТипЗнч(СохраненныеНастройки) <> Тип("Структура") Тогда
				СохраненныеНастройки = Новый Структура;
			КонецЕсли;
		  
			ДеревоМакетовПечатиПКО = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.ПриходныйКассовыйОрдер.СоздатьДокумент().Ссылка, Документы.ПриходныйКассовыйОрдер.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
			ЭлементыФормы.МакетПКО.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиПКО);
			
			СохраненныеНастройки.Свойство("МакетПКО", ВосстановленноеЗначение);
			ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетПКО.СписокВыбора, ВосстановленноеЗначение);
			ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетПКО.СписокВыбора.Получить(0), ТекущийМакет);
			
			МакетПКО = ТекущийМакет.Значение;
		Иначе
			ПечататьПКО = Ложь;
			Предупреждение("Нарушение прав доступа!");
		КонецЕсли;
		
	КонецЕсли;	
	
	
	УстановитьДоступность();

КонецПроцедуры // ПечататьПКОПриИзменении()

// Процедура - обработчик события "Нажатие" картинки "ЕстьСФ".
//
Процедура ПолеКартинкиЕстьСФНажатие(Элемент)

	мОснованиеСФ.ПолучитьФорму().Открыть();

КонецПроцедуры // ПолеКартинкиЕстьСФНажатие()

// Процедура - обработчик события "Нажатие" картинки "ЕстьПКО".
//
Процедура ПолеКартинкиЕстьПКОНажатие(Элемент)

	мОснованиеПКО.ПолучитьФорму().Открыть();

КонецПроцедуры // ПолеКартинкиЕстьПКОНажатие()

// Процедура - обработчик события "ПриИзменении" флажка "ПечататьСФ".
//
Процедура ПечататьСФПриИзменении(Элемент)

	УстановитьДоступность();

КонецПроцедуры // ПечататьСФПриИзменении()

// Процедура - обработчик события "ПриИзменении" флажка "ЗаписыватьРасходныйОрдерНаТовары".
//
Процедура ЗаписыватьРасходныйОрдерНаТоварыПриИзменении(Элемент)
	
	Если НЕ ПравоДоступа("Изменение", Метаданные.Документы.РасходныйОрдерНаТовары) Тогда
		ЗаписыватьРасходныйОрдерНаТовары = Ложь;
		Предупреждение("Нарушение прав доступа!");
	КонецЕсли;

	УстановитьДоступность();

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" флажка "ПечататьРасходныйОрдерНаТовары".
//
Процедура ПечататьРасходныйОрдерНаТоварыПриИзменении(Элемент)
	Перем ВосстановленноеЗначение;	
	
	Если ПечататьРасходныйОрдерНаТовары 
	  И ЭлементыФормы.МакетРасходныйОрдерНаТовары.СписокВыбора.Количество() = 0	Тогда
	  
	  	Если ПравоДоступа("Изменение", Метаданные.Документы.РасходныйОрдерНаТовары) Тогда
			СохраненныеНастройки = ВосстановитьЗначение("РеализацияТоваровИУслуг.ФормаФормированияПакетаДокументов.Настройки");
			Если ТипЗнч(СохраненныеНастройки) <> Тип("Структура") Тогда
				СохраненныеНастройки = Новый Структура;
			КонецЕсли;
		  
			ДеревоМакетовПечатиРО = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Документы.РасходныйОрдерНаТовары.СоздатьДокумент().Ссылка, Документы.РасходныйОрдерНаТовары.СоздатьДокумент().ПолучитьСтруктуруПечатныхФорм(),,,Ложь);
			ЭлементыФормы.МакетРасходныйОрдерНаТовары.СписокВыбора = ПреобразоватьДеревоВСписок(ДеревоМакетовПечатиРО);
			
			СохраненныеНастройки.Свойство("МакетРасходныйОрдерНаТовары", ВосстановленноеЗначение);
			ТекущийМакет = НайтиПоПредставлению(ЭлементыФормы.МакетРасходныйОрдерНаТовары.СписокВыбора, ВосстановленноеЗначение);
			ТекущийМакет = ?(ТекущийМакет = Неопределено, ЭлементыФормы.МакетРасходныйОрдерНаТовары.СписокВыбора.Получить(2), ТекущийМакет);
			
			МакетРасходныйОрдерНаТовары = ТекущийМакет.Значение;
		Иначе
			ПечататьРасходныйОрдерНаТовары = Ложь;
			Предупреждение("Нарушение прав доступа!");
		КонецЕсли;
		
	КонецЕсли;	
	
	УстановитьДоступность();
КонецПроцедуры

// Процедура - обработчик события "Нажатие" картинки "ПолеКартинкиЕстьРасходныйОрдерНаТовары".
//
Процедура ПолеКартинкиЕстьРасходныйОрдерНаТоварыНажатие(Элемент)
	ВыбраннаяСтрока = мДокументыРОнТ.ВыбратьСтроку("Документы расходный ордер на товары");
	Если НЕ ВыбраннаяСтрока = Неопределено Тогда
		ФормаРОнТ = ВыбраннаяСтрока.Документы.ПолучитьФорму();
		ФормаРОнТ.Открыть();
	КонецЕсли;
КонецПроцедуры


мСтруктураНачальныхНастроек = Новый Структура;

мСтруктураНачальныхНастроек.Вставить("ПечататьРеализацию"               , Истина);
мСтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровРеализации"  , 2);

мСтруктураНачальныхНастроек.Вставить("ЗаписыватьСФ"                     , Ложь);
мСтруктураНачальныхНастроек.Вставить("ОткрыватьСФ"                      , Ложь);
мСтруктураНачальныхНастроек.Вставить("ПечататьСФ"                       , Ложь);
мСтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровСчетаФактуры", 2);

мСтруктураНачальныхНастроек.Вставить("ЗаписыватьПКО"                    , Ложь);
мСтруктураНачальныхНастроек.Вставить("ОткрыватьПКО"                     , Ложь);
мСтруктураНачальныхНастроек.Вставить("ПроводитьПКО"                     , Ложь);
мСтруктураНачальныхНастроек.Вставить("ПечататьПКО"                      , Ложь);
мСтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровПКО"         , 1);
мСтруктураНачальныхНастроек.Вставить("ОснованиеПКО"                     , "");

мСтруктураНачальныхНастроек.Вставить("ПечататьНаПринтер"                , Ложь);
мСтруктураНачальныхНастроек.Вставить("ПоказыватьФорму"                  , Истина);
мСтруктураНачальныхНастроек.Вставить("ЗакрыватьФормуРеализации"         , Ложь);

мСтруктураНачальныхНастроек.Вставить("ЗаписыватьРасходныйОрдерНаТовары"           , Ложь);
мСтруктураНачальныхНастроек.Вставить("ОткрыватьРасходныйОрдерНаТовары"            , Ложь);
мСтруктураНачальныхНастроек.Вставить("ПечататьРасходныйОрдерНаТовары"             , Ложь);
мСтруктураНачальныхНастроек.Вставить("КоличествоЭкземпляровРасходныйОрдерНаТовары", 1);

мПоказыватьФормуПринудительно = Ложь;