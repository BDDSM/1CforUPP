////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущийСотрудник;
Перем мВалютаРегламентированногоУчета; // Хранит значение константы ВалютаРегламентированногоУчета - для ввода значений по умолчанию

// для синхронизации строк табличных полей
Перем мСтрокаРаботникиУстановлена;
Перем мСтрокаНачисленияУстановлена;

Перем мСинхронизируемыеТабличныеЧасти;

Перем мСведенияОВидахРасчетаОснНачислений;
Перем мСведенияОВидахРасчетаДопНачислений;

Перем мДеревоМакетов;		// Хранит дерево макетов печатных форм
Перем мПодменюПечати;		// Хранит элемент управления подменю печати
Перем мПечатьПоУмолчанию;	// Хранит элемент управления кнопку печать по умолчанию
Перем мКнопкиЗаполненияТЧ;	// Хранит дерево кнопок подменю заполнение ТЧ

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

// Механизм исправлений
Перем мСтруктураМенюИсправление;
Перем мДокументыИсправление;
Перем мСотрудникиИсправление;

Перем РучныеИзмененияНачислений;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Функция возвращает механизму исправления информацию о том, заполнен документ правильно или с ошибками
//
Функция ДокументЗаполненСОшибками() Экспорт
	
	Возврат РаботникиОрганизации.НайтиСтроки(Новый Структура("ДатаНачала",Дата(1,1,1))).Количество() > 0;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Функция ПолучитьСтруктуруПараметровПодбораПоСтроке()
	
	ВидыВремени = Новый Массив;
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	ВидыВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);

	СтруктураПараметров = Новый Структура("ВидВремени", ВидыВремени);
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанельОсновныеНачисления);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

Процедура УстановитьВидимостьПанели(ИзменятьДанные = Ложь)

	ПоказыватьПодразделения =  ЗначениеЗаполнено(Организация) и ОбщегоНазначенияПереопределяемый.ЭтоЮрЛицо(Организация);
	
	Если ПоказыватьПодразделения Тогда
		// Получим список обособленных подразделений организации
		ПоказыватьПодразделения = Организация <> ОбщегоНазначения.ГоловнаяОрганизация(Организация) Или ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация).Количество() > 0;
	КонецЕсли;
	
	ЭлементыФормы.ПанельОбособленныхПодразделений.Видимость = ПоказыватьПодразделения;
	
	Если ИзменятьДанные Тогда
		Если ПоказыватьПодразделения Тогда
			ОбособленноеПодразделениеКуда	= Организация;
			ОбособленноеПодразделениеОткуда	= Организация;
		Иначе
			ОбособленноеПодразделениеКуда	= Справочники.Организации.ПустаяСсылка();
			ОбособленноеПодразделениеОткуда	= Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыФормы.РаботникиОрганизации.Колонки.ПодразделениеОрганизации.ЭлементУправления.ВыборПоВладельцу = ?(ПоказыватьПодразделения,ОбособленноеПодразделениеКуда,Организация);
	
КонецПроцедуры // УстановитьВидимостьПанели()

// удаляет начисления по работнику, все или автоматически заполняемые
// Параметры:
//   Сотрудник - СправочникСсылка.СотрудникиОрганизаций
//   УдалятьВсе - булево, если Истина - удаляются все начисления по Сотруднику,
//				например, при его удалении из сиска.
//				Если Ложь - удалаются только те, которые вводятся "автоматически",
//				например, при редактировании данных по строке табличной части 
//				со списком работников
Процедура УдалитьНачисленияПоРаботнику(Сотрудник)
	
	СтруктураПоиска = Новый Структура("Сотрудник", Сотрудник);
	
	// удалять начисления будем в том случае, когда в т.ч. Работники эта строка с сотрудником - последняя
	Если РаботникиОрганизации.НайтиСтроки(СтруктураПоиска).Количество() > 1 Тогда
		Возврат;
	КонецЕсли;
	
	Строки = ОсновныеНачисления.НайтиСтроки(СтруктураПоиска);
	Для Каждого СтрокаТабличнойЧасти из Строки Цикл
		ОсновныеНачисления.Удалить(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	// Если были ручные изменения - их тоже удаляем
	РучныеИзмененияНачислений.Удалить(Сотрудник);
	
	КадровоеПеремещениеОрганизацийПереопределяемый.УдалитьДополнительноПоСтроке(ЭтаФорма, Сотрудник);
		
КонецПроцедуры // УдалитьНачисленияПоРаботнику()

// Добавляет или переопределяет строку в табличной части "Начисления" при изменении сотрудника 
// или формы оплаты труда у сотрудника.
//
Процедура ПереформироватьНачисленияПоРаботнику(ТекущаяСтрока)
	
	// Нужно запросить пользователя - будем ли перезаполнять начисления при наличии ручных изменений
	ПерезаполнятьНачисления = Истина;
	Если РучныеИзмененияНачислений[мТекущийСотрудник] <> Неопределено 
		И ТекущаяСтрока.Сотрудник = мТекущийСотрудник Тогда
		ТекстВопроса = "Начисления сотрудника изменялись вручную. Перезаполнить?";
		Если РаботаСДиалогами.ЗадатьВопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;

	УдалитьНачисленияПоРаботнику(мТекущийСотрудник);
	ДобавитьНачисленияПоСтроке(ТекущаяСтрока);
	
	РучныеИзмененияНачислений.Удалить(мТекущийСотрудник);
	
КонецПроцедуры // ПереформироватьНачисленияПоРаботнику()

// Возвращает структуру с данными по выбранному работнику 
// Параметры:
//  Сотрудник - ссылка на справочник сотрудников
//
// Возвращаемое значение:
//  Структура с элементами
//		всегда присуствует 
//			Сотрудник
//		если ВыбираемыеДанные содержит строку "Работники"
//			Подразделение
//			Должность
//			ГрафикРаботы
//			ЗанимаемыхСтавок
//		если ВыбираемыеДанные содержит строку "УчетЗаработкаРаботников"
//			СпособОтраженияВУпрУчете
//			УчетНачисленийПоОрганизации
//
Функция СведенияПоВыбранномуРаботникуОрганизации(ЭлементФормы, Сотрудник)
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Сотрудник",		Сотрудник);
	Запрос.УстановитьПараметр("ДатаДокумента",	Дата);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РаботникиОрганизации.Сотрудник,
	|	РаботникиОрганизации.Сотрудник.Наименование,
	|	ВЫБОР
	|		КОГДА  РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации
	|	КОНЕЦ КАК ПодразделениеОрганизации,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ДолжностьЗавершения
	|		ИНАЧЕ РаботникиОрганизации.Должность 
	|	КОНЕЦ КАК Должность,
	|	ВЫБОР
	|		КОГДА  РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ПодразделениеОрганизацииЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизации.ПодразделениеОрганизации.Наименование
	|	КОНЕЦ КАК ПодразделениеОрганизацииНаименование,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ДолжностьЗавершения.Наименование
	|		ИНАЧЕ РаботникиОрганизации.Должность.Наименование 
	|	КОНЕЦ КАК ДолжностьНаименование,
	|	ВЫБОР
	|		КОГДА  РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ГрафикРаботыЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ГрафикРаботы
	|	КОНЕЦ КАК ГрафикРаботы,
	|	ВЫБОР
	|		КОГДА РаботникиОрганизации.ПериодЗавершения <= &ДатаДокумента
	|				И РаботникиОрганизации.ПериодЗавершения <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		ТОГДА РаботникиОрганизации.ЗанимаемыхСтавокЗавершения
	|		ИНАЧЕ РаботникиОрганизации.ЗанимаемыхСтавок
	|	КОНЕЦ КАК ЗанимаемыхСтавок
	|ИЗ
	|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ДатаДокумента, Сотрудник = &Сотрудник) КАК РаботникиОрганизации";
	
	НаборыДанных = Запрос.Выполнить().Выгрузить();
	
	// Если не нашли данных - ничего не делаем
	Если НаборыДанных.Количество() = 0 Тогда
		Возврат Неопределено;
		
	// Если нашли один набор данных то используем его
	ИначеЕсли НаборыДанных.Количество() = 1 Тогда
		Возврат НаборыДанных[0];
		
	// Если наборов данных несколько - предложим выбрать из списка.
	Иначе
		СписокНаборовДанных = Новый СписокЗначений;
		Для Каждого СтрокаТабличнойЧасти Из НаборыДанных Цикл
			СписокНаборовДанных.Добавить(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.СотрудникНаименование + " (" + СтрокаТабличнойЧасти.ПодразделениеОрганизацииНаименование + ", " + СтрокаТабличнойЧасти.ДолжностьНаименование + ")");
		КонецЦикла;
		ВыбранныйНаборДанных = ВыбратьИзСписка(СписокНаборовДанных, ЭлементФормы);
		Если ВыбранныйНаборДанных = НеОпределено Тогда
			Возврат Неопределено;
		Иначе
			Возврат ВыбранныйНаборДанных.Значение;
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции // СведенияПоВыбранномуРаботникуОрганизации()

// проставляет в строку табличной части полученные данные по Сотруднику
Процедура ПроставитьДанныеПриИзмененииСотрудника(ТекущаяСтрока, ВыбранноеЗначение)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СтрокаТаблицыЗначений") Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ТекущаяСтрока, ВыбранноеЗначение);
	
	Если мТекущийСотрудник <> ВыбранноеЗначение.Сотрудник Тогда
		ПереформироватьНачисленияПоРаботнику(ТекущаяСтрока);
		мТекущийСотрудник = ВыбранноеЗначение.Сотрудник;
	КонецЕсли;
	
КонецПроцедуры // ПроставитьДанныеПриИзмененииСотрудника()

Процедура ВнестиДанныеПоСотруднику()
	
	ПереформироватьНачисленияПоРаботнику(ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные)	
	
КонецПроцедуры

Процедура ПерезаполнитьНачисления(ПроверятьРучныеИзменения = Ложь)
	
	// Запрашиваем пользователя, о перезаполнении начислений, например, при изменени коэффициента индексации
	ТекстВопроса = 	"Начисления одного или нескольких сотрудников изменялись вручную. 
					|После перезаполнения все ручные изменения будут потеряны. Перезаполнить?";
	Если ПроверятьРучныеИзменения 
		И РучныеИзмененияНачислений.Количество() > 0
		И РаботаСДиалогами.ЗадатьВопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет) = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ОсновныеНачисления.Загрузить(ЗаполнениеДокументовЗК.ПолучитьТаблицуДействийСНачислениями(РаботникиОрганизации.Выгрузить(), Ссылка, Дата, Организация, "ДатаНачала", ?(ИндексацияЗаработка, КоэффициентИндексацииЗаработка, 1), , , ОбособленноеПодразделениеКуда));
	РучныеИзмененияНачислений.Очистить();
	
КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	ЭлементыФормы.Надпись3.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Надпись3.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	ЭлементыФормы.ОбособленноеПодразделениеОткуда.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	ЭлементыФормы.ОбособленноеПодразделениеКуда.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПередОткрытием(ЭтотОбъект, ЭтаФорма, мДокументыИсправление, мСотрудникиИсправление);
	
	КадровоеПеремещениеОрганизацийПереопределяемый.ФормаДокументаПередОткрытиемДополнительно(ЭтаФорма, Новый Действие("ДополнительныеДействия"), Новый Структура("ПриИзменении", Новый Действие("ДополнительныйОбработчикПриИзменении")));
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если ЗначениеЗаполнено(Организация) Тогда
			ГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
			Если Организация <> ГоловнаяОрганизация Тогда
				Если ОбособленноеПодразделениеОткуда.Пустая() Тогда
					ОбособленноеПодразделениеОткуда	= Организация;
				КонецЕсли;
				Если ОбособленноеПодразделениеКуда.Пустая() Тогда
					ОбособленноеПодразделениеКуда	= Организация;
				КонецЕсли;
				Если ОбщегоНазначения.ЭтоДоступнаяОрганизация(ГоловнаяОрганизация) Тогда
					Организация = ГоловнаяОрганизация;
				КонецЕсли;
				
			ИначеЕсли ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация).Количество() > 0 Тогда
				Если ОбособленноеПодразделениеОткуда.Пустая() Тогда
					ОбособленноеПодразделениеОткуда	= Организация;
				КонецЕсли;
				Если ОбособленноеПодразделениеКуда.Пустая() Тогда
					ОбособленноеПодразделениеКуда	= Организация;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("Должность");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ГрафикРаботы");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.РаботникиОрганизации.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента	= Дата;
	мТекущийСотрудник		= ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.СотрудникиОрганизаций");

	ЭлементыФормы.КоэффициентИндексацииЗаработка.Доступность = ИндексацияЗаработка;
	УстановитьВидимостьПанели();
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.РаботникиОрганизации.Колонки.ТабельныйНомерСтрока);
	Если глЗначениеПеременной("глЕстьВалютныеПоказателиОрганизаций") Тогда
		мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта1);
		мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта2);
		мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта3);
		мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта4);
		мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта5);
		мМассивЭУ.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.Валюта6);
	Иначе
		Для Сч = 1 По 6 Цикл
			ЭлементыФормы.ОсновныеНачисления.Колонки["Валюта"+Сч].Видимость = Ложь;
		КонецЦикла;
	КонецЕсли;
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриОткрытии(ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление, мСотрудникиИсправление);
	
	УстановитьЗаголовкиОрганизацийВФорме();
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		
		Команда = ""; Реквизиты = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			
			ТаблицаРезультатов = ЗначениеВыбора.Данные.Выгрузить();
			ТаблицаРезультатов.Колонки.Подразделение.Имя = "ПодразделениеОрганизации";
			Если ЗначениеВыбора.Свойство("Реквизиты",Реквизиты) Тогда
				ИмяКолонки = "ДатаНачала";
				Если ЗначениеЗаполнено(Реквизиты.ДатаНачала) Тогда
					Если ТаблицаРезультатов.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
						ТаблицаРезультатов.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Дата"));
					КонецЕсли;
					ТаблицаРезультатов.ЗаполнитьЗначения(Реквизиты.ДатаНачала,ИмяКолонки);
				Иначе	
					Если ТаблицаРезультатов.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
						ТаблицаРезультатов.ЗаполнитьЗначения(Реквизиты.ДатаНачала,ИмяКолонки);
					КонецЕсли;
				КонецЕсли;
				ИмяКолонки = "ДатаОкончания";
				Если ЗначениеЗаполнено(Реквизиты.ДатаОкончания) Тогда
					Если ТаблицаРезультатов.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
						ТаблицаРезультатов.Колонки.Добавить(ИмяКолонки, Новый ОписаниеТипов("Дата"));
					КонецЕсли;
					ТаблицаРезультатов.ЗаполнитьЗначения(Реквизиты.ДатаОкончания,ИмяКолонки);
				Иначе	
					Если ТаблицаРезультатов.Колонки.Найти(ИмяКолонки) <> Неопределено Тогда
						ТаблицаРезультатов.ЗаполнитьЗначения(Реквизиты.ДатаОкончания,ИмяКолонки);
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(Реквизиты.ПодразделениеОрганизации) Тогда
					ТаблицаРезультатов.ЗаполнитьЗначения(Реквизиты.ПодразделениеОрганизации,"ПодразделениеОрганизации");
				КонецЕсли;
				Если ЗначениеЗаполнено(Реквизиты.Должность) Тогда
					ТаблицаРезультатов.ЗаполнитьЗначения(Реквизиты.Должность,"Должность");
				КонецЕсли;
				Если ЗначениеЗаполнено(Реквизиты.ГрафикРаботы) Тогда
					ТаблицаРезультатов.ЗаполнитьЗначения(Реквизиты.ГрафикРаботы,"ГрафикРаботы");
				КонецЕсли;
			КонецЕсли;
			
			РаботникиОрганизации.Загрузить(ТаблицаРезультатов);
		
			ПерезаполнитьНачисления();
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовОбработкаВыбора(ЗначениеВыбора, Источник, ЭтотОбъект, ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбработкаОповещения" формы
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовОбработкаОповещения(
		ИмяСобытия, Параметр, Источник,
		ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление, мСотрудникиИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ОбновитьОписаниеСостоянияКадровогоДокумента(ЭтотОбъект, ЭтаФорма, мДокументыИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы
//
Процедура ПослеЗаписи()
	
	// Механизм исправления документов
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПослеЗаписи(ЭтотОбъект);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	МассивСотрудников = РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник");
	Оповестить("ОбновитьСписокПлановыхНачислений", МассивСотрудников);
	Оповестить("ПеречитатьСотрудников", МассивСотрудников);
	
КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ПередЗакрытием" формы
//
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если РаботникиОрганизации.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличные части будут очищены. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, Дата, , ?(ЭлементыФормы.ПанельОбособленныхПодразделений.Видимость, ОбособленноеПодразделениеОткуда, Организация), ,  , ,"КадровоеПеремещениеОрганизаций", Новый Структура("ДатаНачала,ДатаОкончания,ПодразделениеОрганизации,Должность,ГрафикРаботы",'00010101','00010101',Справочники.ПодразделенияОрганизаций.ПустаяСсылка(),Справочники.ДолжностиОрганизаций.ПустаяСсылка(),Справочники.ГрафикиРаботы.ПустаяСсылка()));
	
КонецПроцедуры // ДействияФормыЗаполнить()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()


Процедура КоманднаяПанельРаботникиПодбор(Кнопка)
	
	МДРеквизиты = Метаданные().ТабличныеЧасти.РаботникиОрганизации.Реквизиты;
	
	РеквизитыПодбора = Новый Массив;
	РеквизитыПодбора.Добавить(МДРеквизиты.ДатаНачала);
	РеквизитыПодбора.Добавить(МДРеквизиты.ПодразделениеОрганизации);
	РеквизитыПодбора.Добавить(МДРеквизиты.Должность);
	РеквизитыПодбора.Добавить(МДРеквизиты.ГрафикРаботы);
	
	ОтборыПодбора = Новый Соответствие;
	ОтборыПодбора.Вставить(МДРеквизиты.ПодразделениеОрганизации,	?(ОбособленноеПодразделениеКуда.Пустая(), Организация, ОбособленноеПодразделениеКуда));
	
	ПараметрыПодбора = Новый Структура;
	ПараметрыПодбора.Вставить("Реквизиты",	РеквизитыПодбора);
	ПараметрыПодбора.Вставить("Отборы",		ОтборыПодбора);
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 2, , РаботникиОрганизации.ВыгрузитьКолонку("Сотрудник"), , , ПараметрыПодбора);
	
КонецПроцедуры // КоманднаяПанельРаботникиПодбор()


// Процедура - обработчик нажатия на кнопку "Строки текущего сотрудника"
//
Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиКадровоеИсправлениеТекущегоСотрудника(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Весь документ"
//
Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Список сотрудников"
//
Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	РаботаСДиалогамиЗК.ВвестиКадровоеИсправлениеСпискаСотрудников(ЭтотОбъект, ЭтаФорма, мСотрудникиИсправление);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Отменить исправление"
//
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьКадровоеИсправление(ЭтотОбъект, ЭтаФорма, мСтруктураМенюИсправление, мДокументыИсправление, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры

Процедура ДополнительныеДействия(Кнопка)
	
	КадровоеПеремещениеОрганизацийПереопределяемый.ВыполнитьДополнительныеДействия(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ДополнительныйОбработчикПриИзменении(Элемент)
	
	КадровоеПеремещениеОрганизацийПереопределяемый.ОбработатьДополнительноПриИзменении(ЭтаФорма, Элемент);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	УстановитьВидимостьПанели(Истина);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ, глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
КонецПроцедуры // ОрганизацияПриИзменении()

Процедура ОбособленноеПодразделениеАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 2
	|	Организации.Наименование
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.ГоловнаяОрганизация = &Организация
	|			ИЛИ Организации.Ссылка = &Организация)
	|	И Организации.Наименование ПОДОБНО &Текст";
	
	// заменим спецсимволы
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = Текст+"%";
	
	Запрос.УстановитьПараметр("Текст", Текст);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		ТекстАвтоПодбора = Выборка.Наименование;
	КонецЕсли;

КонецПроцедуры // ОбособленноеПодразделениеАвтоПодборТекста()

Процедура ОбособленноеПодразделениеОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)

	Запрос = Новый Запрос();
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	Организации.Наименование,
	|	Организации.Ссылка
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	(Организации.ГоловнаяОрганизация = &Организация
	|			ИЛИ Организации.Ссылка = &Организация)
	|	И Организации.Наименование ПОДОБНО &Текст";
	
	
	ТекстВПоле = Текст;
	
	// заменим спецсимволы
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "~", "~~");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "%", "~%");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "_", "~_");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "[", "~[");
	ТекстВПоле = СтрЗаменить(ТекстВПоле, "-", "~-");
	ТекстВПоле = ТекстВПоле+"%";
	
	Запрос.УстановитьПараметр("Текст", ТекстВПоле);
	Запрос.УстановитьПараметр("Организация", Организация);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Количество = Выборка.Количество();
	
	Если Количество = 0 Тогда
		Предупреждение("В поле ввода неверно задано наименование обособленного подразделения!");
		Значение = ОбщегоНазначения.ПустоеЗначениеТипа("СправочникСсылка.Организации");
		
	ИначеЕсли Количество < 51 Тогда
		Значение = Новый СписокЗначений;
		Пока Выборка.Следующий() Цикл
			Значение.Добавить(Выборка.Ссылка, Выборка.Наименование);
		КонецЦикла;
		
	Иначе
		Значение = Неопределено;
		
	КонецЕсли;
	
	СтандартнаяОбработка = (Значение = Неопределено);
	
КонецПроцедуры // ОбособленноеПодразделениеОкончаниеВводаТекста()

Процедура ОбособленноеПодразделениеОткудаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ОбособленноеПодразделениеОткудаНачалоВыбора()

Процедура ОбособленноеПодразделениеОткудаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Список = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	Список.Вставить(0, Организация);
	Элемент.СписокВыбора = Список;
	
КонецПроцедуры // ОбособленноеПодразделениеОткудаНачалоВыбораИзСписка()

Процедура ОбособленноеПодразделениеКудаПриИзменении(Элемент)
	
	ЭлементыФормы.РаботникиОрганизации.Колонки.ПодразделениеОрганизации.ЭлементУправления.ВыборПоВладельцу = ОбособленноеПодразделениеКуда;
	
КонецПроцедуры // ОбособленноеПодразделениеКудаПриИзменении()

Процедура ОбособленноеПодразделениеКудаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ОбособленноеПодразделениеКудаНачалоВыбора()

Процедура ОбособленноеПодразделениеКудаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	Список = ОбщегоНазначения.ПолучитьСписокОбособленныхПодразделенийОрганизации(Организация);
	Список.Вставить(0,Организация);
	Элемент.СписокВыбора = Список;
	
КонецПроцедуры // ОбособленноеПодразделениеКудаНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" флажка "ИндексацияЗаработка"
//
Процедура ФлажокИндексацияЗаработкаПриИзменении(Элемент)
	
	ЭлементыФормы.КоэффициентИндексацииЗаработка.Доступность = ИндексацияЗаработка;
	Если ИндексацияЗаработка и КоэффициентИндексацииЗаработка = 0 Тогда
		КоэффициентИндексацииЗаработка = 1;
	Иначе	
		ПерезаполнитьНачисления(Истина);
	КонецЕсли;
	
КонецПроцедуры // ФлажокИндексацияЗаработкаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "КоэффициентИндексацииЗаработка"
//
Процедура КоэффициентИндексацииЗаработкаПриИзменении(Элемент)
	
	ПерезаполнитьНачисления(Истина);

КонецПроцедуры // КоэффициентИндексацииЗаработкаПриИзменении()

// Процедура - обработчик события "Нажатие" надписи "Открыть исправление".
//
Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ПоказатьИсправления(ЭтаФорма, Ссылка, мДокументыИсправление);
	
КонецПроцедуры

// Процедура - обработчик события "Нажатие" надписи "Открыть исходный".
//
Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ОткрытьИсходныйДокумент(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПередНачаломДобавления" строки ТЧ
//
Процедура РаботникиОрганизацииПередНачаломДобавления(Элемент, Отказ, Копирование)
		
	Если Копирование Тогда
		
		ДанныеСтроки = Элемент.ТекущиеДанные;

		НоваяСтрока = РаботникиОрганизации.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ДанныеСтроки,, "Сотрудник");
		
		Элемент.ТекущаяСтрока = НоваяСтрока;
		Отказ = Истина;
		
	КонецЕсли;

КонецПроцедуры // РаботникиОрганизацииПередНачаломДобавления()

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
//
Процедура РаботникиОрганизацииПриАктивизацииСтроки(Элемент)
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.РаботникиОрганизации, мСинхронизируемыеТабличныеЧасти, "Сотрудник"); 
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтроки(Элемент, ЭлементыФормы.КоманднаяПанельРаботникиОрганизации, мСотрудникиИсправление, мТекущийСотрудник);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки", 0.1, Истина);
	
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииСтроки()

// Процедура - обработчик ожидания события "ПриАктивизацииСтроки"
//
Процедура ОбработчикОжиданияРаботникиОрганизацииПриАктивизацииСтроки()
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтрокиОбработчикОжидания(ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры

// Процедура - обработчик события "ПриАктивизацииЯчейки" строки ТЧ
//
Процедура РаботникиОрганизацииПриАктивизацииЯчейки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	
	ТекущаяКолонка = Элемент.ТекущаяКолонка;
	Если ТекущаяКолонка.Имя = "ПодразделениеОрганизации" Или ТекущаяКолонка.Имя = "Должность" Тогда
		
		ИмяВторойКолонки = ?(ТекущаяКолонка.Имя = "ПодразделениеОрганизации","Должность","ПодразделениеОрганизации");
		
		ДатаАктуальности = ?(ЗначениеЗаполнено(Элемент.ТекущиеДанные.ДатаНачала),Элемент.ТекущиеДанные.ДатаНачала, Дата);
		СписокПодразделений = ПроцедурыУправленияПерсоналом.ВыбратьИзШтатногоРасписанияОрганизации(ТекущаяКолонка.Имя, Организация, Элемент.ТекущиеДанные[ИмяВторойКолонки], ДатаАктуальности);
		КоличествоЗначений = СписокПодразделений.Количество();
		
		ПолеВвода = ТекущаяКолонка.ЭлементУправления;
		ПолеВвода.СписокВыбора = СписокПодразделений;
		ПолеВвода.КнопкаСпискаВыбора = КоличествоЗначений > 0;
		ПолеВвода.ВысотаСпискаВыбора = Мин(10, КоличествоЗначений);
		
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПриАктивизацииЯчейки()

// Процедура удаляут строку с работником из табличной части "ОсновныеНачисления".
//
Процедура РаботникиОрганизацииПередУдалением(Элемент, Отказ)
	
	УдалитьНачисленияПоРаботнику(Элемент.ТекущиеДанные.Сотрудник);
	
	Если Не Отказ Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповестить("ПодборОтменаВыбора", ДанныеСтроки.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

Процедура РаботникиОрганизацииПослеУдаления(Элемент)
	
	КадровоеПеремещениеОрганизацийПереопределяемый.ФормаДокументаРаботникиПослеУдаленияСтрокиДополнительно(ЭтаФорма);
	
КонецПроцедуры

// Процедура обеспечивает начальное значение реквизита "ЗанимаемыхСтавок" и 
//  "ГрафикРаботы".
//
// Параметры:
//  Элемент      - табличное поле, которое отображает т.ч.
//  НоваяСтрока  - булево, признак редактирования новой строки
//  
Процедура РаботникиОрганизацииПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ЗанимаемыхСтавок) Тогда
			ДанныеСтроки.ЗанимаемыхСтавок = 1;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ДатаНачала) Тогда
			ДанныеСтроки.ДатаНачала = ОбщегоНазначения.ПолучитьРабочуюДату();
		КонецЕсли;
		
	КонецЕсли;
	
	мТекущийСотрудник = ДанныеСтроки.Сотрудник;
	
КонецПроцедуры // РаботникиОрганизацииПриНачалеРедактирования()

// Процедура обеспечивает заполнение колонок с данными работника на дату перемещения
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  
Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ТаблицаСотрудников = Новый ТаблицаЗначений;
	ТаблицаСотрудников.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.СотрудникиОрганизаций"));
	ТаблицаСотрудников.Колонки.Добавить("ДатаНачала", ОбщегоНазначения.ПолучитьОписаниеТиповДаты(ЧастиДаты.ДатаВремя));
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		ДанныеСтроки = СтрокаТабличнойЧасти.ДанныеСтроки;
		Если Не ЗначениеЗаполнено(ДанныеСтроки.Сотрудник) Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = ТаблицаСотрудников.Добавить();
		НоваяСтрока.Сотрудник = ДанныеСтроки.Сотрудник;
		НоваяСтрока.ДатаНачала = ДанныеСтроки.ДатаНачала;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Сотрудники.Сотрудник,
	|	Сотрудники.ДатаНачала
	|ПОМЕСТИТЬ ВТ_ТаблицаСотрудников
	|ИЗ
	|	&ТаблицаСотрудников КАК Сотрудники";
	
	Запрос.УстановитьПараметр("ТаблицаСотрудников",	ТаблицаСотрудников);
	Запрос.Текст = ТекстЗапроса;
	Запрос.Выполнить();
	
	Выборка = КадровоеПеремещениеОрганизацийПереопределяемый.СформироватьЗапросПоДаннымРаботникаДоНазначения(Запрос, Ссылка).Выбрать();
	
	Для Каждого СтрокаТабличнойЧасти Из ОформленияСтрок Цикл
		
		ДанныеСтроки = СтрокаТабличнойЧасти.ДанныеСтроки;
		
		Выборка.Сбросить();
		Если Выборка.НайтиСледующий(ДанныеСтроки.Сотрудник, "Сотрудник") Тогда
			СтрокаТабличнойЧасти.Ячейки.СтароеПодразделение.УстановитьТекст(Выборка.ПодразделениеОрганизации);
			СтрокаТабличнойЧасти.Ячейки.СтараяДолжность.УстановитьТекст(Выборка.Должность);
			СтрокаТабличнойЧасти.Ячейки.СтараяСтавка.УстановитьТекст(Формат(Выборка.ЗанимаемыхСтавок,"ЧЦ=4;ЧДЦ=2"));
			КадровоеПеремещениеОрганизацийПереопределяемый.ДозаполнитьСтрокуДаннымиРаботникаДоНазначения(СтрокаТабличнойЧасти, Выборка);
		КонецЕсли;
		
	КонецЦикла;
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриПолученииДанных(ОформленияСтрок, мСотрудникиИсправление);
	
	КадровоеПеремещениеОрганизацийПереопределяемый.ФормаДокументаРаботникиПриПолученииДанныхДополнительно(ЭлементыФормы.РаботникиОрганизации, ОформленияСтрок);
	
КонецПроцедуры // РаботникиОрганизацииПриПолученииДанных()

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
		
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
			СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
			СтрокаТабличнойЧасти.Сотрудник = ВыбранноеЗначение;
			СтрокаТабличнойЧасти.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
			
			мТекущийСотрудник = ВыбранноеЗначение;
			
			СведенияПоСОтруднику = СведенияПоВыбранномуРаботникуОрганизации(Элемент, ВыбранноеЗначение);
			Если СведенияПоСОтруднику = Неопределено Тогда
				Возврат;
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СведенияПоСОтруднику);
			ПереформироватьНачисленияПоРаботнику(СтрокаТабличнойЧасти);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		
		Для Каждого Сотрудник Из ВыбранноеЗначение.Сотрудники Цикл
			Если РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник)).Количество() = 0 Тогда
				СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
				СтрокаТабличнойЧасти.Сотрудник			= Сотрудник;
				СтрокаТабличнойЧасти.ФизЛицо			= Сотрудник.ФизЛицо;
				мТекущийСотрудник = Сотрудник;
				
				СведенияПоСотруднику = СведенияПоВыбранномуРаботникуОрганизации(Элемент, Сотрудник);
				Если СведенияПоСотруднику <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти, СведенияПоСотруднику);
				КонецЕсли;
				
				Для Каждого Параметр Из ВыбранноеЗначение.ПараметрыПодбора Цикл
					Если ЗначениеЗаполнено(Параметр.Значение) Тогда
						СтрокаТабличнойЧасти[Параметр.Ключ]	= Параметр.Значение;
					КонецЕсли;
				КонецЦикла;
				
				ПереформироватьНачисленияПоРаботнику(СтрокаТабличнойЧасти);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииОбработкаВыбора()

// Процедура - обработчик события "ПриОкончанииРедактирования"
//
Процедура РаботникиОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НоваяСтрока И ОтменаРедактирования Тогда
		УдалитьНачисленияПоРаботнику(мТекущийСотрудник);
	КонецЕсли;
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриОкончанииРедактирования(ОтменаРедактирования, ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ РаботникиОрганизации

// Процедура - обработчик события "ПриИзменении" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникПриИзменении(Элемент)

	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
	ПроставитьДанныеПриИзмененииСотрудника(ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные, СведенияПоВыбранномуРаботникуОрганизации(Элемент, Элемент.Значение));
	
КонецПроцедуры // РаботникиОрганизацииСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2,СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокиРаботников = РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	Если СтрокиРаботников.Количество() > 0 и Элемент.Значение <> ВыбранноеЗначение Тогда
		Предупреждение("В данном документе по одному сотруднику можно вводить только одну строку!");
		Возврат;
	КонецЕсли;
	
	Элемент.Значение = ВыбранноеЗначение;
	ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
	ПроставитьДанныеПриИзмененииСотрудника(ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные, СведенияПоВыбранномуРаботникуОрганизации(Элемент, ВыбранноеЗначение));
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода Сотрудник
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // РаботникиОрганизацииСотрудникОкончаниеВводаТекста()

// Процедура обеспечивает нестандартный шаг регулирования 
//
// Параметры:
//  Элемент - поле ввода т.ч., которое отображает занимаемые ставки
//  Направление - число, определяет, какая из кнопок регулирования была нажата
//  СтандартнаяОбработка - булево, признак выполнения системной обработки события
//  
Процедура РаботникиОрганизацииЗанимаемыхСтавокРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ДанныеСтроки = ЭлементыФормы.РаботникиОрганизации.ТекущиеДанные;
	
	Если Направление = 1 Тогда // увеличиваем значение
		ДанныеСтроки.ЗанимаемыхСтавок = ДанныеСтроки.ЗанимаемыхСтавок + 0.5;
		
	Иначе // = -1 - уменьшаем значение
		ДанныеСтроки.ЗанимаемыхСтавок = ДанныеСтроки.ЗанимаемыхСтавок - 0.5;
		
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // РаботникиОрганизацииЗанимаемыхСтавокРегулирование()

Процедура РаботникиОрганизацииПодразделениеОрганизацииПриИзменении(Элемент)
	
	ВнестиДанныеПоСотруднику();
	
КонецПроцедуры

Процедура РаботникиОрганизацииДолжностьПриИзменении(Элемент)
	
	ВнестиДанныеПоСотруднику();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

// Процедура - обрабочик ожидания для события ПриАктивизацииСтроки
// табличного поля Начисления
//
Процедура ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки()
	
	ПроцедурыУправленияПерсоналом.СинхронизироватьСтроки(ЭтаФорма, ДокументОбъект, ЭлементыФормы.ОсновныеНачисления, мСинхронизируемыеТабличныеЧасти, "Сотрудник");
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ОсновныеНачисления, мСведенияОВидахРасчетаОснНачислений);
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтрокиОбработчикОжидания(ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
КонецПроцедуры // ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки

// Процедура - обработчик события "ПриАктивизацииСтроки" строки ТЧ
Процедура ОсновныеНачисленияПриАктивизацииСтроки(Элемент)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриАктивизацииСтроки(Элемент, ЭлементыФормы.КоманднаяПанельОсновныеНачисления, мСотрудникиИсправление, мТекущийСотрудник);
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияОсновныеНачисленияПриАктивизацииСтроки", 0.05, Истина);
	
КонецПроцедуры // ОсновныеНачисленияПриАктивизацииСтроки()

// Процедура - обработчик события "ПриОкончанииРедактирования" ТЧ
Процедура ОсновныеНачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриОкончанииРедактирования(ОтменаРедактирования, ЭтаФорма, мСотрудникиИсправление, мТекущийСотрудник);
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если Элемент.ТекущиеДанные.Действие = Перечисления.ВидыДействияСНачислением.Прекратить Тогда
		Элемент.ТекущиеДанные.Показатель1 = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мТекущийСотрудник) Тогда
		РучныеИзмененияНачислений.Вставить(мТекущийСотрудник, Истина);
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияПриОкончанииРедактирования()

// Процедура - обработчик события "ПриНачалеРедактирования" 
//
Процедура ОсновныеНачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если Копирование Тогда 
		Элемент.ТекущаяСтрока.Действие = Перечисления.ВидыДействияСНачислением.Начать;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОсновныеНачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ИсправлениеКадровыхДокументовПриПолученииДанных(ОформленияСтрок, мСотрудникиИсправление);
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчетаОснНачислений, ОформленияСтрок);
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		РаботаСДиалогамиЗК.ПриВыводеСтрокиПлановыхНачислений(Элемент, ОформлениеСтроки, ДанныеСтроки, мСведенияОВидахРасчетаОснНачислений);
		
		ВидРасчета = ДанныеСтроки.ВидРасчета;
		
		СведенияОВидеРасчета = мСведенияОВидахРасчетаОснНачислений[ВидРасчета];
		КоличествоПоказателей = СведенияОВидеРасчета["КоличествоПоказателей"];
		
		Если ДанныеСтроки.Действие = Перечисления.ВидыДействияСНачислением.Начать ИЛИ
			ДанныеСтроки.Действие = Перечисления.ВидыДействияСНачислением.Изменить Тогда
			
			Для СчПоказателей = 1 По 6 Цикл
				Если СчПоказателей = 1 Или СчПоказателей <= КоличествоПоказателей Тогда
					ОформлениеСтроки.Ячейки["Показатель"+СчПоказателей].ТолькоПросмотр = НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для СчПоказателей = 1 По 6 Цикл
				Если СчПоказателей = 1 Или СчПоказателей <= КоличествоПоказателей Тогда
					ОформлениеСтроки.Ячейки["Показатель"+СчПоказателей].ТолькоПросмотр = Истина;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли; 	
		
	КонецЦикла;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 2, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 2, Текст, Организация);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода начисления
//
Процедура ОсновныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	ВидРасчета = Элемент.Значение;
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчетаОснНачислений, ВидРасчета);
	ДанныеСтроки = ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.ОсновныеНачисления, мСведенияОВидахРасчетаОснНачислений);
	
	Если Не СведенияОВидеРасчета.РазмерТребуется Тогда
		ДанныеСтроки.Показатель1		= 0;
		ДанныеСтроки.ТарифныйРазряд1	= Справочники.ТарифныеРазряды.ПустаяСсылка();
	КонецЕсли;
	
	Если СведенияОВидеРасчета.НеТребуетВалюты Тогда
		ДанныеСтроки.Валюта1			= Справочники.Валюты.ПустаяСсылка();
		
	Иначе
		ИспользуютсяНачисленияВВалюте	= ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "ИспользуютсяНачисленияВВалюте");
			
		Если Не ИспользуютсяНачисленияВВалюте И ДанныеСтроки.Валюта1.Пустая() Тогда
			ДанныеСтроки.Валюта1 = мВалютаРегламентированногоУчета;
		КонецЕсли;
			
	КонецЕсли;
	
	КоличествоПоказателей = СведенияОВидеРасчета["КоличествоПоказателей"];
	
	Для СчПоказателей = 1 По 6 Цикл
		Если СчПоказателей = 1 Или СчПоказателей <= КоличествоПоказателей Тогда
			Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей]) И 
				СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей] = мВалютаРегламентированногоУчета;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Валюта" + СчПоказателей + "Видимость"] Тогда
				Если СчПоказателей <= СведенияОВидеРасчета.ФактКоличествоПоказателей Тогда
					ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей] = СведенияОВидеРасчета["ВалютаПоказателя" + СчПоказателей];
				КонецЕсли;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Показатель" + СчПоказателей] = 0;
			КонецЕсли;
			Если НЕ СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"] Тогда
				ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["ТарифныйРазряд" + СчПоказателей] = Справочники.ТарифныеРазряды.ПустаяСсылка();
			КонецЕсли;
		Иначе
			ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Валюта" + СчПоказателей]		= Справочники.Валюты.ПустаяСсылка();
			ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["Показатель" + СчПоказателей]	= 0;
			ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные["ТарифныйРазряд" + СчПоказателей]= Справочники.ТарифныеРазряды.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры // ОсновныеНачисленияВидРасчетаПриИзменении()

Процедура ОсновныеНачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СписокВидовВремени = Новый СписокЗначений;
	СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ОтработанноеВПределахНормы);
	СписокВидовВремени.Добавить(Перечисления.ВидыВремени.ДополнительноОплачиваемоеВПределахНормы);
	
	СписокНедопустимыхВР = Новый СписокЗначений;
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет);
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо3Лет);
	СписокНедопустимыхВР.Добавить(ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ДоплатаЗаПраздничныеИВыходные);
	
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора(,Элемент,Ссылка);
	
	ФормаВыбора.Отбор.ВидВремени.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.ВидВремени.Значение = СписокВидовВремени;
	ФормаВыбора.Отбор.ВидВремени.Использование = Истина;
	
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.НеВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение = СписокНедопустимыхВР;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));	
КонецПроцедуры

Процедура ОсновныеНачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мСтрокаРаботникиУстановлена		= Ложь;
мСтрокаНачисленияУстановлена	= Ложь;

мСинхронизируемыеТабличныеЧасти = Новый Соответствие;

мСинхронизируемыеТабличныеЧасти["РаботникиОрганизации"]		= Ложь;
мСинхронизируемыеТабличныеЧасти["ОсновныеНачисления"]		= Ложь;

мСведенияОВидахРасчетаОснНачислений = Новый Соответствие;
мСведенияОВидахРасчетаДопНачислений = Новый Соответствие;

мОбработкаПодбораПоСтроке					= Ложь;
мТекстПодбораПоСтроке						= "";
мПоследнееЗначениеЭлементаПодбораПоСтроке	= Неопределено;

мДокументыИсправление	= Новый Массив;
мСотрудникиИсправление	= Новый Соответствие;

РучныеИзмененияНачислений = Новый Соответствие;