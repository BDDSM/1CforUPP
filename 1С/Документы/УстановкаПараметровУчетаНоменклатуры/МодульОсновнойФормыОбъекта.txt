////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем ТаблицаСчетовУчета; //хранит описание редактируемых счетов учета

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Добавляет строку в таблицу ТаблицаСчетовУчета
Процедура ДобавитьСчетУчета(ИмяСчета, НалоговыйУчет, СоответствиеСчетов = Неопределено, Забалансовый = Ложь)
	
	Если СоответствиеСчетов=Неопределено Тогда
		СоответствиеСчетов = Новый Структура();
	КонецЕсли;
	
	НоваяСтрока = ТаблицаСчетовУчета.Добавить();
	НоваяСтрока.ИмяСчета					= ИмяСчета;
	НоваяСтрока.НалоговыйУчет				= НалоговыйУчет;
	НоваяСтрока.СоответствиеСчетов			= СоответствиеСчетов;
	НоваяСтрока.Забалансовый				= Забалансовый;
	
КонецПроцедуры

// Заполняет таблицу значений ТаблицаСчетовУчета
Процедура ЗаполнитьСчетаУчета()
	
	ТаблицаСчетовУчета = Новый ТаблицаЗначений;
	
	ТаблицаСчетовУчета.Колонки.Добавить("ИмяСчета",						Новый ОписаниеТипов("Строка"));
	ТаблицаСчетовУчета.Колонки.Добавить("НалоговыйУчет",				Новый ОписаниеТипов("Булево"));
	ТаблицаСчетовУчета.Колонки.Добавить("СоответствиеСчетов",			Новый ОписаниеТипов("Структура"));
	ТаблицаСчетовУчета.Колонки.Добавить("Забалансовый");//Булево или неопределено, если может быть и тем и другим
	
	//Описаны значения, которые определяются значениями другого счета
	СоответствиеСчетуДоходов = Новый Структура("СчетРасходовБУ");
	СоответствиеСчетуДоходов.СчетРасходовБУ = Новый Соответствие();
	//Ключами соответствия могут быть список счетов, включая группы.
	//Ключ - пустая строка - обозначает "для всех остальных".
	//Значениями - список допустимых счетов, первый из которых - по-умолчанию
	СоответствиеСчетуДоходов.СчетРасходовБУ.Вставить("ВыручкаНеОблагаемаяЕНВД",		"СебестоимостьПродажНеОблагаемаяЕНВД");
	СоответствиеСчетуДоходов.СчетРасходовБУ.Вставить("ВыручкаОблагаемаяЕНВД",		"СебестоимостьПродажОблагаемаяЕНВД");
	СоответствиеСчетуДоходов.СчетРасходовБУ.Вставить("ПрочиеДоходы",				"ПрочиеРасходыНеОблагаемыеЕНВД,ПрочиеРасходыОблагаемыеЕНВД,ПрочиеРасходыРаспределяемые");
	
	СоответствиеСчетуУчета = Новый Структура("СчетДоходовБУ,СчетРасходовБУ");
	СоответствиеСчетуУчета.СчетДоходовБУ = Новый Соответствие();
	СоответствиеСчетуУчета.СчетДоходовБУ.Вставить("Товары",				"ВыручкаНеОблагаемаяЕНВД");
	СоответствиеСчетуУчета.СчетДоходовБУ.Вставить("ГотоваяПродукция",	"ВыручкаНеОблагаемаяЕНВД");
	СоответствиеСчетуУчета.СчетДоходовБУ.Вставить("",					"ПрочиеДоходы");
	
	СоответствиеСчетуУчета.СчетРасходовБУ = Новый Соответствие();
	СоответствиеСчетуУчета.СчетРасходовБУ.Вставить("Товары",			"СебестоимостьПродажНеОблагаемаяЕНВД");
	СоответствиеСчетуУчета.СчетРасходовБУ.Вставить("ГотоваяПродукция",	"СебестоимостьПродажНеОблагаемаяЕНВД");
	СоответствиеСчетуУчета.СчетРасходовБУ.Вставить("",					"ПрочиеРасходыНеОблагаемыеЕНВД,ПрочиеРасходыОблагаемыеЕНВД,ПрочиеРасходыРаспределяемые");
	
	//БУ
	ДобавитьСчетУчета("СчетУчетаБУ", 					Ложь,	СоответствиеСчетуУчета		, Неопределено);
	ДобавитьСчетУчета("СчетДоходовБУ",					Ложь,	СоответствиеСчетуДоходов);
	ДобавитьСчетУчета("СчетРасходовБУ", 				Ложь);
	
	//НУ
	ДобавитьСчетУчета("СчетУчетаНУ", 					Истина,								, Неопределено);
	ДобавитьСчетУчета("СчетДоходовНУ",					Истина);
	ДобавитьСчетУчета("СчетРасходовНУ", 				Истина);
	
КонецПроцедуры

// Заполняет счет налогового учета в строке в соответствии со счетом бухгалтерского учета
Процедура ЗаполнитьСчетНУпоСчетуБУ(СтрокаТабличнойЧасти, ИмяСчетаБУ, ИмяСчетаНУ)
	
	СтрокаТабличнойЧасти[ИмяСчетаНУ] = БухгалтерскийУчет.ПреобразоватьСчетаБУвСчетНУ(Новый Структура("СчетБУ", СтрокаТабличнойЧасти[ИмяСчетаБУ]));
	
КонецПроцедуры

// Заполняет счета, который зависят от измененного счета.
// Возвращает - было заполнение или нет.
Функция ЗаполнитьСвязанныйСчет(СтрокаТабличнойЧасти, ИмяСчетаИсточника, ИмяЗаполняемогоСчета)
	
	ДанныеСчета = ТаблицаСчетовУчета.Найти(ИмяСчетаИсточника,"ИмяСчета");
	
	Если ДанныеСчета = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	СоответствиеСчетов = ДанныеСчета.СоответствиеСчетов[ИмяЗаполняемогоСчета];
	Если СоответствиеСчетов=Неопределено Тогда
		
		//Заполняемый счет не зависит от счета-источника
		Возврат Ложь;
		
	Иначе
		
		ДопустимыеСчета = "";
		
		//Определим список допустимых счетов для указанного значения счета-источника
		Если СтрокаТабличнойЧасти[ИмяСчетаИсточника].Пустая() Тогда
			//для пустого счета соответствие не может быть задано
			Возврат Ложь;
		Иначе
			
			ИмяПредопределенногоЭлемента = ПланыСчетов.Хозрасчетный.ПолучитьИмяПредопределенного(СтрокаТабличнойЧасти[ИмяСчетаИсточника]);
			
			Если ПустаяСтрока(ИмяПредопределенногоЭлемента) Тогда
				//соответствия могут быть заданы только для предопределенных счетов
				Возврат Ложь;
			КонецЕсли;
			
			ДопустимыеСчета = СоответствиеСчетов[ИмяПредопределенногоЭлемента];
			Если ДопустимыеСчета=Неопределено Тогда
				
				//нет соответствия для этого счета. но могут быть значения в иерархии
				Для Каждого СчетУчета Из СоответствиеСчетов Цикл
					
					Если НЕ ПустаяСтрока(СчетУчета.Ключ) Тогда
						Если СтрокаТабличнойЧасти[ИмяСчетаИсточника].ПринадлежитЭлементу(ПланыСчетов.Хозрасчетный[СчетУчета.Ключ]) Тогда
							ДопустимыеСчета = СчетУчета.Значение;
							Прервать;
						КонецЕсли;
					КонецЕсли;
						
				КонецЦикла;
				
			КонецЕсли;
			
			Если ДопустимыеСчета=Неопределено Тогда
				//посмотрим значение для прочих
				ДопустимыеСчета = СоответствиеСчетов[""];
			КонецЕсли;
			
		КонецЕсли;
		
		//Первый в списке - счет по-умолчанию
		Если НЕ ЗначениеЗаполнено(ДопустимыеСчета) Тогда
			//не указан список счетов
			Возврат Ложь; 
		Иначе
			ПозицияЗапятой = Найти(ДопустимыеСчета,",");
			Если ПозицияЗапятой=0 Тогда
				СчетПоУмолчанию = ДопустимыеСчета;
			Иначе
				СчетПоУмолчанию = Лев(ДопустимыеСчета,ПозицияЗапятой-1);
			КонецЕсли;
			
			СтрокаТабличнойЧасти[ИмяЗаполняемогоСчета] = ПланыСчетов.Хозрасчетный[СчетПоУмолчанию];
			
			Возврат Истина;
			
		КонецЕсли;
			
	КонецЕсли;
	
КонецФункции

// Управляет видимостью колонок
Процедура УстановитьВидимостьКолонок()
	
	// Колонка "ПринадлежностьНоменклатуры" не нужна без РАУЗ
	РаботаСДиалогами.УстановитьВидимостьПринадлежностиНоменклатуры(ЭлементыФормы.СчетаУчетаНоменклатуры.Колонки, Дата);
	
КонецПроцедуры

Функция ПолучитьСписокВидовНоменклатуры(ЗначениеОтбора)
	Запрос = Новый Запрос("ВЫБРАТЬ
	                      |	ВидыНоменклатуры.Ссылка
	                      |ИЗ
	                      |	Справочник.ВидыНоменклатуры КАК ВидыНоменклатуры
	                      |ГДЕ
	                      |	ВидыНоменклатуры.ТипНоменклатуры В (&ТипНоменклатуры)");
	Запрос.УстановитьПараметр("ТипНоменклатуры",ЗначениеОтбора);
	
	СписокВидовНоменклатуры = Новый СписокЗначений();
	СписокВидовНоменклатуры.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокВидовНоменклатуры;
КонецФункции	

Процедура ВыбратьНоменклатуру(Элемент, СтандартнаяОбработка, ЗначениеОтбора)
	
	Если Элемент.Значение = Неопределено ИЛИ Элемент.Значение.Пустая() Тогда
		//Предложим выбор типа
		СписокВыбора = Новый СписокЗначений;
		СписокВыбора.Добавить(Неопределено, 								"Для всей номенклатуры");
		СписокВыбора.Добавить(Справочники.ВидыНоменклатуры.ПустаяСсылка(),	"Для вида номенклатуры");
		СписокВыбора.Добавить(Справочники.Номенклатура.ПустаяСсылка(),		"Для элемента номенклатуры");
		ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
		Если ВыбранноеЗначение = Неопределено Тогда
			СтандартнаяОбработка = Ложь;
		Иначе
			Элемент.Значение = ВыбранноеЗначение.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Если СтандартнаяОбработка Тогда
		СтандартнаяОбработка = Ложь;
		
		Если Элемент.Значение <> Неопределено Тогда
		
			Если ТипЗНЧ(Элемент.Значение) = Тип("СправочникСсылка.ВидыНоменклатуры") Тогда
				ФормаВыбора = Справочники.ВидыНоменклатуры.ПолучитьФормуВыбора(, Элемент);
				ФормаВыбора.РежимВыбора = Истина;
				
				СписокВидовНоменклатуры = Новый СписокЗначений();
				СписокВидовНоменклатуры.ЗагрузитьЗначения(ЗначениеОтбора);
				
				ФормаВыбора.Отбор.ТипНоменклатуры.ВидСравнения  = ВидСравнения.ВСписке;
				ФормаВыбора.Отбор.ТипНоменклатуры.Значение      = СписокВидовНоменклатуры;
				ФормаВыбора.Отбор.ТипНоменклатуры.Использование = Истина;
			ИначеЕсли ТипЗНЧ(Элемент.Значение) = Тип("СправочникСсылка.Номенклатура") Тогда
				ФормаВыбора = Справочники.Номенклатура.ПолучитьФормуВыбора(, Элемент);
				ФормаВыбора.РежимВыбора = Истина;
				
				ФормаВыбора.Отбор.ВидНоменклатуры.ВидСравнения  = ВидСравнения.ВСписке;
				ФормаВыбора.Отбор.ВидНоменклатуры.Значение      = ПолучитьСписокВидовНоменклатуры(ЗначениеОтбора);
				ФормаВыбора.Отбор.ВидНоменклатуры.Использование = Истина;
			КонецЕсли;	
			
			Если ЗначениеЗаполнено(Элемент.Значение) Тогда
				ФормаВыбора.ПараметрТекущаяСтрока = Элемент.Значение;
			КонецЕсли;
			
			ФормаВыбора.Открыть();	
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры	

Процедура ПриПолученииДанныхТабличнойЧасти(ОформленияСтрок)
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		//Выводим текст "Для всех организаций"
		Если ДанныеСтроки.Организация.Пустая() Тогда
			
			ОформлениеСтроки.Ячейки.Организация.УстановитьТекст(СтрокаДляВсехОрганизаций);
			ОформлениеСтроки.Ячейки.Организация.ЦветТекста 	= ЦветаСтиля.ТекстВторостепеннойНадписи;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.Номенклатура) Тогда
		//Выводим текст "Для всей номенклатуры"
			
			ОформлениеСтроки.Ячейки.Номенклатура.УстановитьТекст(СтрокаДляВсейНоменклатуры);
			ОформлениеСтроки.Ячейки.Номенклатура.ЦветТекста 	= ЦветаСтиля.ТекстВторостепеннойНадписи;
		
		ИначеЕсли ТипЗнч(ДанныеСтроки.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		//Если заданы отдельные элементы номенклатуры - то их выделим синим цветом
		
			ОформлениеСтроки.Ячейки.Номенклатура.ЦветТекста = ЦветаСтиля.ТекстИнформационнойНадписи;
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры	
	

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);
	КонецЕсли;
	
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры

Процедура ПриОткрытии()
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	ДатаОкончанияДействия = ПолучитьДатуОкончанияДействия();
	Если ДатаОкончанияДействия = "" Тогда
		ЭлементыФормы.НадписьПо.Видимость = Ложь;
	Иначе
		ЭлементыФормы.НадписьПо.Видимость = Истина;
	КонецЕсли;
	
	УстановитьВидимостьКолонок();
	
	ЗаполнитьСчетаУчета();
	
КонецПроцедуры

Процедура ПослеЗаписи()
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ФОРМЫ

Процедура ДатаПриИзменении(Элемент)
	
	ДатаОкончанияДействия = ПолучитьДатуОкончанияДействия();
	
	Если ДатаОкончанияДействия = "" Тогда
		ЭлементыФормы.НадписьПо.Видимость = Ложь;
	Иначе
		ЭлементыФормы.НадписьПо.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// УНИВЕРСАЛЬНЫЕ МЕХАНИЗМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях табличных частей:
// добавляет в меню подключаемые обработки заполнения
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.СчетаУчетаНоменклатуры, ЭлементыФормы.КоманднаяПанельСчетаУчетаНоменклатуры);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПараметрыУчетаУслуг,    ЭлементыФормы.КоманднаяПанельПараметрыУчетаУслуг);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ, СоответствиеТЧ);
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина), ЭтотОбъект);
	
КонецПроцедуры

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ

Процедура СчетаУчетаНоменклатурыПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхТабличнойЧасти(ОформленияСтрок);
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		//по-умолчанию - самое часто используемое значение: "Вид номенклатуры"
		ДанныеСтроки = ЭлементыФормы.СчетаУчетаНоменклатуры.ТекущиеДанные;
		ДанныеСтроки.Номенклатура = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	МассивТиповНоменклатуры = Новый Массив();
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Товар);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Комплект);
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Набор);
	
	ВыбратьНоменклатуру(Элемент, СтандартнаяОбработка, МассивТиповНоменклатуры);
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение)
	  И ВыбранноеЗначение.ЭтоГруппа Тогда
		Предупреждение("Можно выбирать только элементы справочника");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

//Обработчики событий поля ввода СчетУчетаБУ

Процедура СчетаУчетаНоменклатурыСчетУчетаБУНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("СчетУчета", Элемент, "Хозрасчетный");

КонецПроцедуры

Процедура СчетаУчетаНоменклатурыСчетУчетаБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыСчетУчетаБУПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.СчетаУчетаНоменклатуры.ТекущиеДанные;
	
	ЗаполнитьСчетНУпоСчетуБУ(ДанныеСтроки, "СчетУчетаБУ", "СчетУчетаНУ");
	
	Если ЗаполнитьСвязанныйСчет(ДанныеСтроки, "СчетУчетаБУ", "СчетДоходовБУ") Тогда
		ЗаполнитьСчетНУпоСчетуБУ(ДанныеСтроки, "СчетДоходовБУ", "СчетДоходовНУ");
	КонецЕсли;

	Если ЗаполнитьСвязанныйСчет(ДанныеСтроки, "СчетУчетаБУ", "СчетРасходовБУ") Тогда
		ЗаполнитьСчетНУпоСчетуБУ(ДанныеСтроки, "СчетРасходовБУ", "СчетРасходовНУ");
	КонецЕсли;

КонецПроцедуры

//Обработчики событий поля ввода СчетУчетаНУ

Процедура СчетаУчетаНоменклатурыСчетУчетаНУНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("СчетУчета", Элемент, "Налоговый");
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыСчетУчетаНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

//Обработчики событий полей ввода для счетов доходов и расходов в БУ

Процедура СчетаУчетаНоменклатурыСчетДоходовБУНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("СчетДоходовОтРеализации", Элемент, "Хозрасчетный");
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыСчетДоходовБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыСчетДоходовБУПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.СчетаУчетаНоменклатуры.ТекущиеДанные;
	
	//Счета налогового учета
	ЗаполнитьСчетНУпоСчетуБУ(ДанныеСтроки, "СчетДоходовБУ", "СчетДоходовНУ");
	
	//Заполним счет расходов по-умолчанию
	Если ЗаполнитьСвязанныйСчет(ДанныеСтроки, "СчетДоходовБУ", "СчетРасходовБУ") Тогда
	
		ЗаполнитьСчетНУпоСчетуБУ(ДанныеСтроки, "СчетРасходовБУ", "СчетРасходовНУ");
		
	КонецЕсли;
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыСчетРасходовБУПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.СчетаУчетаНоменклатуры.ТекущиеДанные;
	
	ЗаполнитьСчетНУпоСчетуБУ(ДанныеСтроки, "СчетРасходовБУ", "СчетРасходовНУ");

КонецПроцедуры

Процедура СчетаУчетаНоменклатурыСчетРасходовБУНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("СчетРасходов", Элемент, "Хозрасчетный");
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыСчетРасходовБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

//Обработчики событий полей ввода для счетов доходов и расходов в НУ

Процедура СчетаУчетаНоменклатурыСчетДоходовНУНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("СчетДоходовОтРеализации", Элемент, "Налоговый");
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыСчетДоходовНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыСчетРасходовНУНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("СчетРасходов", Элемент, "Налоговый");
	
КонецПроцедуры

Процедура СчетаУчетаНоменклатурыСчетРасходовНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
	
КонецПроцедуры

Процедура СпособыРасчетаСебестоимостиВФормахПриПолученииДанных(Элемент, ОформленияСтрок)
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		
		//Выводим текст "Для всех организаций"
		Если ДанныеСтроки.Организация.Пустая() Тогда
			
			ОформлениеСтроки.Ячейки.Организация.УстановитьТекст(СтрокаДляВсехОрганизаций);
			ОформлениеСтроки.Ячейки.Организация.ЦветТекста 	= ЦветаСтиля.ТекстВторостепеннойНадписи;
			
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры



//Обработчики событий ТЧ ПараметрыУчетаУслуг

Процедура ПараметрыУчетаУслугНоменклатураНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	МассивТиповНоменклатуры = Новый Массив();
	МассивТиповНоменклатуры.Добавить(Перечисления.ТипыНоменклатуры.Услуга);
	
	ВыбратьНоменклатуру(Элемент, СтандартнаяОбработка, МассивТиповНоменклатуры);
	
КонецПроцедуры


Процедура ПараметрыУчетаУслугСчетДоходовБУНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("СчетДоходовОтРеализации", Элемент, "Хозрасчетный");

КонецПроцедуры


Процедура ПараметрыУчетаУслугСчетДоходовБУПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.ПараметрыУчетаУслуг.ТекущиеДанные;
	
	//Счета налогового учета
	ЗаполнитьСчетНУпоСчетуБУ(ДанныеСтроки, "СчетДоходовБУ", "СчетДоходовНУ");
	
	//Заполним счет расходов по-умолчанию
	Если ЗаполнитьСвязанныйСчет(ДанныеСтроки, "СчетДоходовБУ", "СчетРасходовБУ") Тогда
	
		ЗаполнитьСчетНУпоСчетуБУ(ДанныеСтроки, "СчетРасходовБУ", "СчетРасходовНУ");
		
	КонецЕсли;

КонецПроцедуры


Процедура ПараметрыУчетаУслугСчетДоходовБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры


Процедура ПараметрыУчетаУслугСчетРасходовБУНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("СчетРасходов", Элемент, "Хозрасчетный");

КонецПроцедуры


Процедура ПараметрыУчетаУслугСчетРасходовБУПриИзменении(Элемент)
		
	ДанныеСтроки = ЭлементыФормы.ПараметрыУчетаУслуг.ТекущиеДанные;
	
	ЗаполнитьСчетНУпоСчетуБУ(ДанныеСтроки, "СчетРасходовБУ", "СчетРасходовНУ");

КонецПроцедуры


Процедура ПараметрыУчетаУслугСчетРасходовБУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры


Процедура ПараметрыУчетаУслугСчетДоходовНУНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("СчетДоходовОтРеализации", Элемент, "Налоговый");

КонецПроцедуры


Процедура ПараметрыУчетаУслугСчетДоходовНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры


Процедура ПараметрыУчетаУслугСчетРасходовНУНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("СчетРасходов", Элемент, "Налоговый");

КонецПроцедуры


Процедура ПараметрыУчетаУслугСчетРасходовНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);

КонецПроцедуры


Процедура ПараметрыУчетаУслугПодразделениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	РаботаСДиалогами.НачалоВыбораПодразделения(ТаблицаОтбора, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры


Процедура ПараметрыУчетаУслугПодразделениеПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементыформы.ПараметрыУчетаУслуг.ТекущиеДанные;
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( Истина,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизации,
												  СтрокаТабличнойЧасти.Подразделение,
												  СтрокаТабличнойЧасти.Организация);
	Если НЕ (СтрокаТабличнойЧасти.ПодразделениеОрганизации.ВидПодразделения = Перечисления.ВидыПодразделений.ВспомогательноеПроизводство 
		  ИЛИ СтрокаТабличнойЧасти.ПодразделениеОрганизации.ВидПодразделения = Перечисления.ВидыПодразделений.ОсновноеПроизводство) Тогда
		  ПодразделениеОрганизации = Неопределено;
		  Возврат;
	КонецЕсли;
	
	ПараметрыУчетаУслугПодразделениеОрганизацииПриИзменении(Элемент);
КонецПроцедуры


Процедура ПараметрыУчетаУслугПодразделениеОрганизацииПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.ПараметрыУчетаУслуг.ТекущиеДанные;
	СчетаУчетаВДокументах.ЗаполнитьСчетаУчетаТабличнойЧасти("ПараметрыУчетаУслуг", СтрокаТабличнойЧасти, ЭтотОбъект, Истина, Истина,Истина, Ложь,Истина);
	
КонецПроцедуры


Процедура ПараметрыУчетаУслугПодразделениеОрганизацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СоздатьТаблицуДляОтбора();
	
	СписокВидовПодразделений = Новый СписокЗначений();
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ОсновноеПроизводство);
	СписокВидовПодразделений.Добавить(Перечисления.ВидыПодразделений.ВспомогательноеПроизводство);
	
	НоваяСтрока = ТаблицаОтбора.Добавить();
	НоваяСтрока.Имя 		 = "ВидПодразделения";
	НоваяСтрока.ВидСравнения = ВидСравнения.ВСписке;
	НоваяСтрока.Значение 	 = СписокВидовПодразделений;
	
	РаботаСДиалогами.НачалоВыбораПодразделенияОрганизации(ТаблицаОтбора, Элемент, СтандартнаяОбработка);	

КонецПроцедуры


Процедура ПараметрыУчетаУслугПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СтрокаТЧ = ЭлементыФормы.ПараметрыУчетаУслуг.ТекущиеДанные;

	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( Истина,
											 Элемент,
											 СтрокаТЧ.ПодразделениеОрганизации,
											 СтрокаТЧ.Подразделение,
											 СтрокаТЧ.Организация,
											 ЭтаФорма);

КонецПроцедуры

Процедура ПараметрыУчетаУслугСчетЗатратПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ПараметрыУчетаУслуг.ТекущиеДанные;
	УправлениеЗатратами.ЗаполнитьСчетЗатратНУВСтрокеТабличногоПоля(СтрокаТЧ);
	
	Если НЕ ЗначениеЗаполнено(СтрокаТЧ.СчетЗатратНУ) Тогда
		ЗаполнитьСчетНУпоСчетуБУ(СтрокаТЧ, "СчетЗатрат", "СчетЗатратНУ");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПараметрыУчетаУслугПриПолученииДанных(Элемент, ОформленияСтрок)
	
	ПриПолученииДанныхТабличнойЧасти(ОформленияСтрок);
	
КонецПроцедуры


Процедура ПараметрыУчетаУслугПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И НЕ Копирование Тогда
		
		//по-умолчанию - самое часто используемое значение: "Вид номенклатуры"
		ДанныеСтроки = ЭлементыФормы.ПараметрыУчетаУслуг.ТекущиеДанные;
		ДанныеСтроки.Номенклатура = Справочники.ВидыНоменклатуры.ПустаяСсылка();
		
		ДанныеСтроки.СчетДоходовБУ = ПланыСчетов.Хозрасчетный.ВыручкаНеОблагаемаяЕНВД;
		ДанныеСтроки.СчетДоходовНУ = ПланыСчетов.Налоговый.ВыручкаОтРеализацииТоваровРаботСобственногоПроизводства;
		
		ДанныеСтроки.СчетРасходовБУ = ПланыСчетов.Хозрасчетный.СебестоимостьПродажНеОблагаемаяЕНВД;
		ДанныеСтроки.СчетРасходовНУ = ПланыСчетов.Налоговый.СебестоимостьПродаж;
		
	КонецЕсли;

КонецПроцедуры


Процедура ПараметрыУчетаУслугОрганизацияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементыформы.ПараметрыУчетаУслуг.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ПодразделениеОрганизации)
	  И СтрокаТабличнойЧасти.ПодразделениеОрганизации.Владелец <> СтрокаТабличнойЧасти.Организация Тогда
		  СтрокаТабличнойЧасти.ПодразделениеОрганизации = Неопределено;
	КонецЕсли;	  
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( Истина,
												  СтрокаТабличнойЧасти.ПодразделениеОрганизации,
												  СтрокаТабличнойЧасти.Подразделение,
												  СтрокаТабличнойЧасти.Организация);
	Если НЕ (СтрокаТабличнойЧасти.ПодразделениеОрганизации.ВидПодразделения = Перечисления.ВидыПодразделений.ВспомогательноеПроизводство 
		  ИЛИ СтрокаТабличнойЧасти.ПодразделениеОрганизации.ВидПодразделения = Перечисления.ВидыПодразделений.ОсновноеПроизводство) Тогда
		  ПодразделениеОрганизации = Неопределено;
		  Возврат;
	КонецЕсли;
	
	ПараметрыУчетаУслугПодразделениеОрганизацииПриИзменении(Элемент);
КонецПроцедуры


Процедура ПараметрыУчетаУслугНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = ЭлементыФормы.ПараметрыУчетаУслуг.ТекущиеДанные;
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Если ТипЗНЧ(СтрокаТабличнойЧасти.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			СтрокаТабличнойЧасти.НоменклатурнаяГруппа = СтрокаТабличнойЧасти.Номенклатура.НоменклатурнаяГруппа;
		КонецЕсли;
	КонецЕсли;	
КонецПроцедуры


Процедура ПараметрыУчетаУслугСчетЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СписокСчетов = БухгалтерскийУчет.ПолучитьМассивСчетов("Хозрасчетный", "20.01, 23, 29", Ложь);
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("", Элемент, "Хозрасчетный", СписокСчетов);

КонецПроцедуры


Процедура ПараметрыУчетаУслугСчетЗатратНУНачалоВыбора(Элемент, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СписокСчетов = БухгалтерскийУчет.ПолучитьМассивСчетов("Налоговый", "20.01.1, 23.01, 29.01, ЕН", Ложь);
	РаботаСДиалогами.ВыборСчетаСОтборомПоНазначениюСчета("", Элемент, "Налоговый", СписокСчетов);
	
КонецПроцедуры


Процедура ПараметрыУчетаУслугНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение)
	  И ВыбранноеЗначение.ЭтоГруппа Тогда
		Предупреждение("Можно выбирать только элементы справочника");
		СтандартнаяОбработка = Ложь;
	КонецЕсли;	
КонецПроцедуры

Процедура ПараметрыУчетаУслугСчетЗатратОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

Процедура ПараметрыУчетаУслугСчетЗатратНУОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчет.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

Процедура СпособыРасчетаСебестоимостиВФормахСпособРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДанныеСтроки = ЭлементыФормы.СпособыРасчетаСебестоимостиВФормах.ТекущиеДанные;
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.Добавить(Перечисления.СпособыРасчетаСебестоимостиВФормах.ПоДаннымБухгалтерскогоУчета, 	"По данным бухгалтерского учета");
	СписокВыбора.Добавить(Перечисления.СпособыРасчетаСебестоимостиВФормах.ПоДаннымУправленческогоУчета,	"По данным управленческого учета");
	СписокВыбора.Добавить(Справочники.ТипыЦенНоменклатуры.ПустаяСсылка(),								"По типу цен номенклатуры");
	ВыбранноеЗначение = ВыбратьИзСписка(СписокВыбора, Элемент);
	
	Если НЕ ВыбранноеЗначение = Неопределено Тогда
		Элемент.Значение = ВыбранноеЗначение.Значение;
		Если ВыбранноеЗначение.Значение = Справочники.ТипыЦенНоменклатуры.ПустаяСсылка() Тогда
			//Элемент.Значение = Справочники.ТипыЦенНоменклатуры.Выбрать();
			СтандартнаяОбработка = Истина;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры