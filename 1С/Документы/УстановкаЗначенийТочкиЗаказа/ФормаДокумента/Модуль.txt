Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мКолонкиТовары; // Хранит колонки табличноно поля "Товары"

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Товары,ЭлементыФормы.КоманднаяПанельТовары);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

Функция СформироватьСписокЗапросовДляПодбора()

	СписокЗапросов      = Новый СписокЗначений();
	СписокЗапросов.Добавить(,"По справочнику");
	СписокЗапросов.Добавить("ОстаткиНоменклатуры", "По остаткам номенклатуры");

	Возврат СписокЗапросов;

КонецФункции // СформироватьСписокЗапросовДляПодбора()

// Процедура вызывает сервисный механизм для подбора номенклатуры в табличную часть.
//
// Параметры:
//  ТабличнаяЧасть - табличная часть, в которую осуществляется подбор.
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	СписокВидовПодбора = СформироватьСписокЗапросовДляПодбора();
	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда", "ПодборВТабличнуюЧастьТовары");
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора"     , СписокВидовПодбора);
	// Параметры запросов.
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов"           , ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата));
	СтруктураПараметровПодбора.Вставить("Склад"                  , Неопределено);
	СтруктураПараметровПодбора.Вставить("Организация"            , Неопределено);
	СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги"        , Истина);
	СтруктураПараметровПодбора.Вставить("ЕстьСерия"              , Ложь);
	СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Ложь);
	СтруктураПараметровПодбора.Вставить("Заголовок"              , "Подбор номенклатуры в документ " + ПредставлениеДок + " № " + Номер);

	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры // ДействиеПодбор()

// Производит заполнение документа переданными из формы подбора номенклатуры данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбораНоменклатура(ТабличнаяЧасть, ЗначениеВыбора)

	Перем Номенклатура, Характеристика, Количество;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура", Номенклатура);
	ЗначениеВыбора.Свойство("Характеристика", Характеристика);
	ЗначениеВыбора.Свойство("Количество", Количество);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	
	Если Номенклатура.Услуга Тогда
		
		СтруктураОтбора = Новый Структура("Номенклатура", Номенклатура);
		
	Иначе
		
		СтруктураОтбора = Новый Структура("Номенклатура, ХарактеристикаНоменклатуры, СпособОпределенияЗначенияТочкиЗаказа", Номенклатура, Характеристика, Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.Фиксированная);
		
	КонецЕсли;
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда

		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.Фиксированная;
		СтрокаТабличнойЧасти.ЗначениеТочкиЗаказа = Количество;


	Иначе
		
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.ЗначениеТочкиЗаказа = СтрокаТабличнойЧасти.ЗначениеТочкиЗаказа + Количество;

	КонецЕсли;

КонецПроцедуры // ОбработкаПодбораНоменклатура()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

Процедура УстановитьВозможностьИзмененияВидимости()
	
	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок = Новый Структура("Номенклатура, СпособОпределенияЗначенияТочкиЗаказа");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(мКолонкиТовары, СтруктураКолонок);

КонецПроцедуры // УстановитьВозможностьИзмененияВидимости()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)

	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
	Если ЭтоНовый() Тогда

		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект);

	КонецЕсли;

КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВозможностьИзмененияВидимости();

	// Установить видимость колонок "ХарактеристикаНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиТовары);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда

		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьТовары" Тогда

			ОбработкаПодбораНоменклатура(Товары, ЗначениеВыбора);

		КонецЕсли;

	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	
КонецПроцедуры // ПослеЗаписи()


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Товары", вызывает сервисный механизм для
// подбора номенклатуры в табличную часть "Товары".
//
Процедура КоманднаяПанельТоварыДействиеПодбор(Кнопка)
	
	ДействиеПодбор(Товары);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ ТОВАРЫ

Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока)
	
	Если НоваяСтрока И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.СпособОпределенияЗначенияТочкиЗаказа) Тогда
		
		Элемент.ТекущиеДанные.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.Фиксированная;
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыПриНачалеРедактирования()

Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // ТоварыНоменклатураПриИзменении()

Процедура ТоварыСпособОпределенияЗначенияТочкиЗаказаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.Фиксированная Тогда
		
		СтрокаТабличнойЧасти.ПроцентнаяСтавкаЗначенияТочкиЗаказа = 0;
		СтрокаТабличнойЧасти.ПроцентнаяСтавкаМинимальногоСтраховогоЗапаса = 0;
		СтрокаТабличнойЧасти.ДатаНач = Дата('00010101');
		СтрокаТабличнойЧасти.ДатаКон = Дата('00010101');
		
	ИначеЕсли СтрокаТабличнойЧасти.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.СреднийРазмерПартии Тогда
		
		СтрокаТабличнойЧасти.ЗначениеТочкиЗаказа = 0;
		СтрокаТабличнойЧасти.МинимальныйСтраховойЗапас = 0;
		
	ИначеЕсли СтрокаТабличнойЧасти.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.ОптимальныйРазмерЗаказа Тогда
		
		СтрокаТабличнойЧасти.ЗначениеТочкиЗаказа = 0;
		СтрокаТабличнойЧасти.МинимальныйСтраховойЗапас = 0;
		СтрокаТабличнойЧасти.ПроцентнаяСтавкаЗначенияТочкиЗаказа = 0;
		СтрокаТабличнойЧасти.ПроцентнаяСтавкаМинимальногоСтраховогоЗапаса = 0;
		
	ИначеЕсли СтрокаТабличнойЧасти.СпособОпределенияЗначенияТочкиЗаказа = Перечисления.СпособыОпределенияЗначенияТочкиЗаказа.НеКонтролировать Тогда
		
		СтрокаТабличнойЧасти.ЗначениеТочкиЗаказа = 0;
		СтрокаТабличнойЧасти.МинимальныйСтраховойЗапас = 0;
		СтрокаТабличнойЧасти.ПроцентнаяСтавкаЗначенияТочкиЗаказа = 0;
		СтрокаТабличнойЧасти.ПроцентнаяСтавкаМинимальногоСтраховогоЗапаса = 0;
		СтрокаТабличнойЧасти.ДатаНач = Дата('00010101');
		СтрокаТабличнойЧасти.ДатаКон = Дата('00010101');
		
	КонецЕсли;
	
КонецПроцедуры // ТоварыСпособОпределенияЗначенияТочкиЗаказаПриИзменении()

Процедура ТоварыСпособОпределенияЗначенияТочкиЗаказаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ТоварыСпособОпределенияЗначенияТочкиЗаказаОчистка()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиТовары = ЭлементыФормы.Товары.Колонки;