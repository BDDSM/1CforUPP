// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;


////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ


////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеСредства,ЭлементыФормы.КоманднаяПанельОС.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры


Процедура ВыбПериодНажатие(Элемент)
	НастройкаПериода = Новый НастройкаПериода;
	НастройкаПериода.УстановитьПериод(ПериодНачало, ?(ПериодКонец='0001-01-01', ПериодКонец, КонецДня(ПериодКонец)));
	НастройкаПериода.РедактироватьКакИнтервал = Истина;
	НастройкаПериода.РедактироватьКакПериод = Истина;
	НастройкаПериода.ВариантНастройки = ВариантНастройкиПериода.Период;
	НастройкаПериода.Редактировать();
	ПериодНачало = НастройкаПериода.ПолучитьДатуНачала();
	ПериодКонец = НастройкаПериода.ПолучитьДатуОкончания();
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, "Продажа");
	КонецЕсли;

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	
КонецПроцедуры

Процедура ОсновныеСредстваСубконто1НачалоВыбора(Элемент, СтандартнаяОбработка)
	Для Ном = 1 по 3 Цикл
		Если (ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.СчетЗатрат.ВидыСубконто.Количество() > (Ном-1)) и (НЕ ЗначениеЗаполнено(ЭлементыФормы.ОсновныеСредства.ТекущиеДанные["Субконто"+Ном])) Тогда
			Типы = ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.СчетЗатрат.ВидыСубконто[Ном-1].ВидСубконто.ТипЗначения.Типы();
			ЭлементыФормы.ОсновныеСредства.ТекущиеДанные["Субконто"+Ном] = Новый(Типы[0]);
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

Процедура ОсновныеСредстваСубконто1НовНачалоВыбора(Элемент, СтандартнаяОбработка)
	Для Ном = 1 по 3 Цикл
		Если (ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.СчетУчетаНовый.ВидыСубконто.Количество() > (Ном-1)) и (НЕ ЗначениеЗаполнено(ЭлементыФормы.ОсновныеСредства.ТекущиеДанные["Субконто"+Ном+"Нов"])) Тогда
			Типы = ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.СчетУчетаНовый.ВидыСубконто[Ном-1].ВидСубконто.ТипЗначения.Типы();
			ЭлементыФормы.ОсновныеСредства.ТекущиеДанные["Субконто"+Ном+"Нов"] = Новый(Типы[0]);
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КоманднаяПанельОСЗаполнить(Кнопка)
	Если НЕ ЗначениеЗаполнено(ПериодНачало) или НЕ ЗначениеЗаполнено(ПериодКонец) Тогда
		Предупреждение("Не выбран период!");
		Возврат;
	КонецЕсли;
	
	ОсновныеСредства.Очистить();
	Счета = ПланыСчетов.Международный;
	
	МассивСчетов = Новый Массив();
	МассивСчетов.Добавить(Счета.ЗемельныеУчастки); //10111
	МассивСчетов.Добавить(Счета.Здания); //10121
	МассивСчетов.Добавить(Счета.СооруженияИОборудование); //10131
	МассивСчетов.Добавить(Счета.МашиныИИнструменты); //10141
	МассивСчетов.Добавить(Счета.ОфисноеОборудование); //10151
	МассивСчетов.Добавить(Счета.АвтотранспортныеСредства); //10161
	МассивСчетов.Добавить(Счета.ВложенияВЛизинговоеОборудование); //10171
	МассивСчетов.Добавить(Счета.ПрочиеОсновныеСредства); //10181
	МассивСчетов.Добавить(Счета.ИнвестиционнаяСобственность); //1021

	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	СУММА(МеждународныйОбороты.СуммаОборотДт) КАК СуммаОборотДт,
	               |	СУММА(МеждународныйОбороты.СуммаОборотКт) КАК СуммаОборотКт,
	               |	МеждународныйОбороты.Субконто1 КАК ОС,
	               |	МеждународныйОбороты.Регистратор,
	               |	МеждународныйОбороты.Счет,
	               |	МеждународныйОбороты.Субконто2,
	               |	МеждународныйОбороты.Субконто3,
	               |	МеждународныйОбороты.КорСчет,
	               |	МеждународныйОбороты.КорСубконто1,
	               |	МеждународныйОбороты.КорСубконто2,
	               |	МеждународныйОбороты.КорСубконто3
	               |ИЗ
	               |	РегистрБухгалтерии.Международный.Обороты(&НачалоПериода, &КонецПериода, Запись, Счет В ИЕРАРХИИ (&Счета101), , Организация = &Организация, , ) КАК МеждународныйОбороты
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	МеждународныйОбороты.Субконто1,
	               |	МеждународныйОбороты.Регистратор,
	               |	МеждународныйОбороты.Счет,
	               |	МеждународныйОбороты.Субконто2,
	               |	МеждународныйОбороты.Субконто3,
	               |	МеждународныйОбороты.КорСчет,
	               |	МеждународныйОбороты.КорСубконто1,
	               |	МеждународныйОбороты.КорСубконто2,
	               |	МеждународныйОбороты.КорСубконто3";
	
	Запрос.УстановитьПараметр("НачалоПериода", НачалоДня(ПериодНачало));
	Запрос.УстановитьПараметр("КонецПериода", КонецДня(ПериодКонец));
	Запрос.УстановитьПараметр("Счета101", МассивСчетов);
	Запрос.УстановитьПараметр("Организация", Организация);
	//Запрос.УстановитьПараметр("ОС", ПланыВидовХарактеристик.ВидыСубконтоМеждународные.ОсновныеСредства);

	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Пока Выборка.Следующий() Цикл
		СрезСведенийМестонахождение = РегистрыСведений.МестонахождениеОСБухгалтерскийУчет.ПолучитьПоследнее(ПериодКонец, Новый Структура("ОсновноеСредство", Выборка.ОС));
		СрезСведенийНачислятьАмортизациюБУ = РегистрыСведений.НачислениеАмортизацииОСБухгалтерскийУчет.ПолучитьПоследнее(ПериодКонец, Новый Структура("ОсновноеСредство", Выборка.ОС));
        СрезСведенийПараметрыАмортизацииБУ = РегистрыСведений.ПараметрыАмортизацииОСБухгалтерскийУчет.ПолучитьПоследнее(ПериодКонец, Новый Структура("ОсновноеСредство", Выборка.ОС));
		СрезСведенийМежд = РегистрыСведений.ОсновныеСредстваМеждународныйУчет.ПолучитьПоследнее(Выборка.Регистратор.Дата, Новый Структура("ОсновноеСредство", Выборка.ОС));

		СтрокаТП = ОсновныеСредства.Добавить();
		СтрокаТП.ОсновноеСредство = Выборка.ОС;
		СтрокаТП.УчитыватьКакОС = Истина;
		СтрокаТП.МестонахождениеОбъекта = СрезСведенийМестонахождение.Местонахождение;
		СтрокаТП.МОЛ = СрезСведенийМестонахождение.МОЛ;
        СтрокаТП.СрокПолезногоИспользования = СрезСведенийПараметрыАмортизацииБУ.СрокПолезногоИспользования;
		СтрокаТП.НачислятьАмортизацию = СрезСведенийНачислятьАмортизациюБУ.НачислятьАмортизацию;
		СтрокаТП.ПредполагаемыйОбъемПродукции = СрезСведенийПараметрыАмортизацииБУ.ОбъемПродукцииРабот;
		СтрокаТП.ДатаПринятияКУчету = Выборка.Регистратор.Дата;
		СтрокаТП.СчетУчета = Выборка.Счет;
		СтрокаТП.СчетУчетаНовый = Выборка.Счет;
		СтрокаТП.Сумма = Выборка.СуммаОборотДт - Выборка.СуммаОборотКт;
		СтрокаТП.Субконто1Нов = Выборка.ОС;
		СтрокаТП.Субконто2Нов = Выборка.Субконто2;
		СтрокаТП.Субконто3Нов = Выборка.Субконто3;
		
		СтрокаТП.КоррСчет = Выборка.КорСчет;
		СтрокаТП.Субконто1Кт = Выборка.КорСубконто1;
		СтрокаТП.Субконто2Кт = Выборка.КорСубконто2;
		СтрокаТП.Субконто3Кт = Выборка.КорСубконто3;
		
		Если НЕ ЗначениеЗаполнено(СрезСведенийМежд.Организация) Тогда
			СтрокаТП.ПервоначальнаяСтоимость = СтрокаТП.Сумма;
		ИначеЕсли НЕ (Ссылка.Проведен) Тогда
			СтрокаТП.ПервоначальнаяСтоимость = СрезСведенийМежд.ПервоначальнаяСтоимость + СтрокаТП.Сумма; 
		Иначе
			СтрокаТП.ПервоначальнаяСтоимость = СрезСведенийМежд.ПервоначальнаяСтоимость;
			Сообщить("Поскольку данный документ уже проведен, первоначальная стоимость заново не вычислялась.");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ОсновныеСредстваМетодАмортизацииПриИзменении(Элемент)
	Если НЕ (ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизацииОСМеждународный.ПропорциональноОбъемуПродукции) Тогда
		ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.ПредполагаемыйОбъемПродукции = 0;		
	КонецЕсли;
	Если НЕ (ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.МетодНачисленияАмортизации = Перечисления.МетодыНачисленияАмортизацииОСМеждународный.УменьшаемогоОстатка) Тогда
		ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.КоэффициентУскорения = 0;
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеСредстваПредполагаемыйОбъемПродукцииПриИзменении(Элемент)
	Если ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.МетодНачисленияАмортизации <> Перечисления.МетодыНачисленияАмортизацииОСМеждународный.ПропорциональноОбъемуПродукции Тогда
		Сообщить("Предполагаемый объем продукции вводится только для метода начисления амортизации - пропорционально объему продукции");
		ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.ПредполагаемыйОбъемПродукции = 0;
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	НомерСтроки = 0;
	Для каждого Стр из ОсновныеСредства Цикл
		НомерСтроки = НомерСтроки + 1;
		
		Если (НЕ Стр.УчитыватьКакОС) и (НЕ ЗначениеЗаполнено(Стр.СчетУчетаНовый)) Тогда
			Сообщить("В строке № " + НомерСтроки + " не выбран новый счет учета.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если (Стр.УчитыватьКакОС) и (НЕ ЗначениеЗаполнено(Стр.СчетСниженияСтоимости)) Тогда
			Сообщить("В строке № " + НомерСтроки + " не указан счет учета снижения стоимости ОС.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;

		
		Если (Стр.УчитыватьКакОС) и  (Стр.НачислятьАмортизацию) и (НЕ ЗначениеЗаполнено(Стр.СрокПолезногоИспользования)) Тогда
			Сообщить("В строке № " + НомерСтроки + " не указан срок полезного использования.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если (Стр.УчитыватьКакОС) и  (Стр.НачислятьАмортизацию) и (НЕ ЗначениеЗаполнено(Стр.СчетНачисленияАмортизации)) Тогда
			Сообщить("В строке № " + НомерСтроки + " не указан счет учета накопленной амортизации.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
        		
        Если (Стр.УчитыватьКакОС) и  (Стр.НачислятьАмортизацию) и (НЕ ЗначениеЗаполнено(Стр.МетодНачисленияАмортизации)) Тогда
			Сообщить("В строке № " + НомерСтроки + " не указан метод начисления амортизации.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
        Если (Стр.УчитыватьКакОС) и  (Стр.НачислятьАмортизацию) и (НЕ ЗначениеЗаполнено(Стр.СчетЗатрат)) Тогда
			Сообщить("В строке № " + НомерСтроки + " не указан счет затрат для начисления амортизации.");
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		
		Если (Стр.УчитыватьКакОС) и  
			(Стр.НачислятьАмортизацию) и 
			(Стр.МетодНачисленияАмортизации=Перечисления.МетодыНачисленияАмортизацииОСМеждународный.ПропорциональноОбъемуПродукции) 
			и (Стр.ПредполагаемыйОбъемПродукции=0) Тогда
			
			Сообщить("В строке № " + НомерСтроки + " не указан предполагаемый объем продукции для соответвующего метода амортизации.");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
		Если (Стр.УчитыватьКакОС) и  
			(Стр.НачислятьАмортизацию) и 
			(Стр.МетодНачисленияАмортизации=Перечисления.МетодыНачисленияАмортизацииОСМеждународный.УменьшаемогоОстатка) 
			и (Стр.КоэффициентУскорения=0) Тогда
			
			Сообщить("В строке № " + НомерСтроки + " не указан коэффициент ускорения для метода уменьшаемого остатка.");
			Отказ = Истина;
			Возврат;
			
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

Процедура ОсновныеСредстваКоэффициентУскоренияПриИзменении(Элемент)
	Если ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.МетодНачисленияАмортизации <> Перечисления.МетодыНачисленияАмортизацииОСМеждународный.УменьшаемогоОстатка Тогда
		Сообщить("Коэффициент ускорения вводится только для метода начисления амортизации - уменьшаемого остатка");
		ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.КоэффициентУскорения = 0;
	КонецЕсли;
КонецПроцедуры

Процедура ОрганизацияПриИзменении(Элемент)
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
КонецПроцедуры

Процедура ОсновныеСредстваСчетЗатратПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.Субконто1 = Неопределено;
	ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.Субконто2 = Неопределено;
	ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.Субконто3 = Неопределено;
КонецПроцедуры

Процедура ОсновныеСредстваСубконто1КтНачалоВыбора(Элемент, СтандартнаяОбработка)
	Для Ном = 1 по 3 Цикл
		Если (ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.КоррСчет.ВидыСубконто.Количество() > (Ном-1)) и (НЕ ЗначениеЗаполнено(ЭлементыФормы.ОсновныеСредства.ТекущиеДанные["Субконто"+Ном+"Кт"])) Тогда
			Типы = ЭлементыФормы.ОсновныеСредства.ТекущиеДанные.КоррСчет.ВидыСубконто[Ном-1].ВидСубконто.ТипЗначения.Типы();
			ЭлементыФормы.ОсновныеСредства.ТекущиеДанные["Субконто"+Ном+"Кт"] = Новый(Типы[0]);
		КонецЕсли;
	КонецЦикла
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля дата 
// в диалоге документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьВремя(РежимАвтоВремя.Последним);
	
	Если (НачалоМесяца(Дата) <> ПериодНачало)
	 или (КонецМесяца(Дата) <> ПериодКонец) Тогда
		Ответ = Вопрос("Установить значение периода документа месяцем в который входит текущая дата?", РежимДиалогаВопрос.ДаНет,,,);
		
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ПериодНачало = НачалоМесяца(Дата);
			ПериодКонец = КонецМесяца(Дата);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры
// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать() 

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры