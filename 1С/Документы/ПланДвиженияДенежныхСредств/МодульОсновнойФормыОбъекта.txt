Перем СтараяВалютаДокумента;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;



// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДвиженияДенежныхСредств,ЭлементыФормы.КоманднаяПанельВозвратнаяТара.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Рассчитывает итоговые суммы по плану
//
Процедура РассчитатьИтоговыеСуммы();
	
	ИтогоПоступления=0;
	ИтогоПлатежи=0;
	
	Для Каждого Строка Из ДвиженияДенежныхСредств Цикл
		
		Если Строка.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
			
			ИтогоПоступления=ИтогоПоступления+Строка.Сумма;
			
		ИначеЕсли  Строка.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Расход Тогда

	        ИтогоПлатежи=ИтогоПлатежи+Строка.Сумма;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ЭлементыФормы.ИтогоПлатежи.Значение=ИтогоПлатежи;
	ЭлементыФормы.ИтогоПоступления.Значение=ИтогоПоступления;
	
	ЭлементыФормы.ЧДП.Значение=ИтогоПоступления-ИтогоПлатежи;
	
КонецПроцедуры // РассчитатьИтоговыеСуммы()

// Формирует подпись к реквизиту "ДатаПланирования"
//
Процедура СформироватьПодписьДаты()
	
	ЭлементыФормы.НадписьДатаПланирования.Заголовок="Дата планирования (период-ть: "+Нрег(Сценарий.Периодичность)+")";
	
КонецПроцедуры // СформироватьПодписьДаты()

Процедура КоманднаяПанельПлатежиДействиеЗаполнить(Кнопка)
	
	Если ВалютаДокумента.Пустая() Тогда
		Сообщить("Не указана валюта планирования");
		Возврат;
	КонецЕсли;
	
	ФормаНастройки=ПолучитьФорму("ФормаНастройкиЗаполнения");
	ФормаНастройки.ВладелецФормы=ЭтаФорма;
	ФормаНастройки.ОткрытьМодально();
	
	РассчитатьИтоговыеСуммы();
	
КонецПроцедуры

Процедура ДвиженияДенежныхСредствДоговорКонтрагентаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ЭлементыФормы.ДвиженияДенежныхСредств.ТекущиеДанные.Контрагент) Тогда	
	     ЭлементыФормы.ДвиженияДенежныхСредств.ТекущиеДанные.Контрагент=Элемент.Значение.Владелец;
	КонецЕсли;
	 
КонецПроцедуры

Процедура ДвиженияДенежныхСредствСделкаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные=ЭлементыФормы.ДвиженияДенежныхСредств.ТекущиеДанные;
	
	ПараметрыВыбора=УправлениеДенежнымиСредствами.ОпределитьПараметрыВыбораСделки(ТекущиеДанные.ВидОперации);
	
	РаботаСДиалогами.НачалоВыбораЗначенияСделки(ЭтотОбъект, ЭтаФорма, Элемент, ТекущиеДанные.ДоговорКонтрагента, ТекущиеДанные.Сделка, СтандартнаяОбработка, 
	                     ПараметрыВыбора.ВидДвиженияРасчеты, ПараметрыВыбора.ТипЗаказа);

	
КонецПроцедуры

Процедура ДвиженияДенежныхСредствВидОперацииПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	УправлениеДенежнымиСредствами.УстановитьСтатьюДДСПоУмолчанию(ЭлементыФормы.ДвиженияДенежныхСредств.ТекущиеДанные,Элемент.Значение);
	
	Если ЭлементыФормы.ДвиженияДенежныхСредств.ТекущиеДанные.ПриходРасход.Пустая() Тогда
		
		Если Элемент.Значение.Метаданные().Имя="ВидыОперацийЗаявкиНаРасходование" Тогда
			ЭлементыФормы.ДвиженияДенежныхСредств.ТекущиеДанные.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Расход;
		ИначеЕсли Элемент.Значение.Метаданные().Имя="ВидыОперацийПланируемоеПоступлениеДС" Тогда
			ЭлементыФормы.ДвиженияДенежныхСредств.ТекущиеДанные.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Приход;
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

Процедура ДвиженияДенежныхСредствДоговорКонтрагентаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТекущиеДанные=ЭлементыФормы.ДвиженияДенежныхСредств.ТекущиеДанные;	
	
	РаботаСДиалогами.НачалоВыбораЗначенияДоговораКонтрагента(ЭтотОбъект, ЭтаФорма, Элемент, ТекущиеДанные.Контрагент, ТекущиеДанные.ДоговорКонтрагента,
				УправлениеДенежнымиСредствами.ОпределитьВидДоговораСКонтрагентом(ТекущиеДанные.ВидОперации), СтандартнаяОбработка);
	
		
КонецПроцедуры

Процедура ДвиженияДенежныхСредствПриходРасходПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
		
	Если Элемент.Значение=Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
		ЭлементыФормы.ДвиженияДенежныхСредств.ТекущиеДанные.ВидОперации=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ОплатаПокупателя;
	ИначеЕсли Элемент.Значение=Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
		ЭлементыФормы.ДвиженияДенежныхСредств.ТекущиеДанные.ВидОперации=Перечисления.ВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
	КонецЕсли;
					
КонецПроцедуры

Процедура ДвиженияДенежныхСредствВидОперацииНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЭлементыФормы.ДвиженияДенежныхСредств.ТекущиеДанные.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Приход Тогда
		 Элемент.Значение=Перечисления.ВидыОперацийПланируемоеПоступлениеДС.ПустаяСсылка();
	ИначеЕсли ЭлементыФормы.ДвиженияДенежныхСредств.ТекущиеДанные.ПриходРасход=Перечисления.ВидыДвиженийПриходРасход.Расход Тогда
		Элемент.Значение=Перечисления.ВидыОперацийЗаявкиНаРасходование.ПустаяСсылка();
	Иначе
		
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(Метаданные.Перечисления.ВидыОперацийПланируемоеПоступлениеДС.Имя, Метаданные.Перечисления.ВидыОперацийПланируемоеПоступлениеДС.Синоним);
		СписокТипов.Добавить(Метаданные.Перечисления.ВидыОперацийЗаявкиНаРасходование.Имя, Метаданные.Перечисления.ВидыОперацийЗаявкиНаРасходование.Синоним);
		
		ВыбранныйЭлемент = ЭтаФорма.ВыбратьИзСписка(СписокТипов,Элемент);
		
		Если ВыбранныйЭлемент = Неопределено Тогда
			
			СтандартнаяОбработка=Ложь;
			Возврат;
			
		Иначе
			
			Элемент.Значение=Перечисления[ВыбранныйЭлемент.Значение].ПустаяСсылка();
			
		КонецЕсли;
		
	КонецЕсли;		
		
КонецПроцедуры

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()
	
	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	СтараяВалютаДокумента=ВалютаДокумента;
	СформироватьПодписьДаты();
	РассчитатьИтоговыеСуммы();
		
	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);
	
	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

Процедура ВалютаДокументаПриИзменении(Элемент)
	
	Если (НЕ ВалютаДокумента = СтараяВалютаДокумента) И (ЗначениеЗаполнено(СтараяВалютаДокумента)) Тогда
		
		// Надо предложить пересчитать сумму.
		
		Если ((Не ДвиженияДенежныхСредств.Количество()=0) И Вопрос("Изменилась валюта планирования. Пересчитать суммы в табличной части документа?", 
						РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да)= КодВозвратаДиалога.Да) Тогда
						
			СтруктураГруппаВалют = Новый Структура;
			СтруктураГруппаВалют.Вставить("СтараяВалютаДокумента",  СтараяВалютаДокумента.Код);
			СтруктураГруппаВалют.Вставить("ВалютаДокумента", ВалютаДокумента.Код);

			СтруктураКурсыВалют=УправлениеДенежнымиСредствами.ПолучитьКурсыДляГруппыВалют(СтруктураГруппаВалют,ДатаПланирования);		
						
						
			Для Каждого Строка ИЗ ДвиженияДенежныхСредств Цикл			
				
				  Строка.Сумма=МодульВалютногоУчета.ПересчитатьИзВалютыВВалюту(Строка.Сумма,
				  										СтараяВалютаДокумента,ВалютаДокумента,
														СтруктураКурсыВалют.СтараяВалютаДокументаКурс,СтруктураКурсыВалют.ВалютаДокументаКурс,
														СтруктураКурсыВалют.СтараяВалютаДокументаКратность,СтруктураКурсыВалют.ВалютаДокументаКратность);
														
				
			КонецЦикла;
			
			РассчитатьИтоговыеСуммы();
													
		КонецЕсли;
			
	КонецЕсли;
	
	СтараяВалютаДокумента=ВалютаДокумента;
	
КонецПроцедуры

Процедура ДвиженияДенежныхСредствПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	РассчитатьИтоговыеСуммы();
	
КонецПроцедуры

Процедура СценарийПриИзменении(Элемент)
	
	ДатаПланирования=ОбщегоНазначения.ДатаНачалаПериода(ДатаПланирования,Сценарий.Периодичность);
	СформироватьПодписьДаты();
	
КонецПроцедуры

Процедура ДатаПланированияПриИзменении(Элемент)
	
	Элемент.Значение=ОбщегоНазначения.ДатаНачалаПериода(Элемент.Значение,Сценарий.Периодичность);
	
КонецПроцедуры

Процедура ДатаПланированияРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;

	Элемент.Значение=ОбщегоНазначения.ДобавитьИнтервал(Элемент.Значение,Сценарий.Периодичность,Направление);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента("", ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ПослеЗаписи()