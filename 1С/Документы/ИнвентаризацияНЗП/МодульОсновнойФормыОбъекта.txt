////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

Перем мКолонкиМатериалы;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мВалютаРегламентированногоУчета Экспорт; // (Упр)
Перем мВалютаУправленческогоУчета     Экспорт; // (Регл)
Перем мОтражатьВРегламентированномУчете;

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ 

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.ПолучитьДеревоКнопокЗаполненияТабличныхЧастей(Ссылка,Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Материалы,     ЭлементыФормы.КоманднаяПанельМатериалы.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПрочиеЗатраты, ЭлементыФормы.КоманднаяПанельПрочиеЗатраты.Кнопки.ПодменюЗаполнить);
	
	УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧПоДеревуКнопок(мКнопкиЗаполненияТЧ,СоответствиеТЧ);
	
КонецПроцедуры

// Процедура обновляет параметры в форме подбора, если она открыта.
//
// Параметры:
//  Реквизит - измененный реквизит.
//
// Обработчик уставливается динамически методом "ПодключитьОбработчикИзмененияДанных"
// в процедуре "ОткрытьПодборНоменклатуры" общего модуля "ОбработкаТабличныхЧастей"
Процедура ОбновитьФормуПодбора(Реквизит)

	РаботаСДиалогами.ОбновитьПараметрыИФормуПодбора(ЭтотОбъект, ЭтаФорма, Реквизит);

КонецПроцедуры // ОбновитьФормуПодбора()

// Производит открывает форму подбора данных в табличные части документа
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//
Процедура ДействиеПодбор(ТабличнаяЧасть)

	Перем Команда, Валюта;

	ЕстьЦена  = Ложь;
	ЕстьСерия = Истина;

	СписокЗапросов = Новый СписокЗначений();
	СписокЗапросов.Добавить( , "По справочнику");
	СписокЗапросов.Добавить( "ОстаткиПроизводство", "По остаткам в производстве");

	Команда           = "ПодборВТабличнуюЧастьМатериалы";
	ИмяТабличнойЧасти = "Материалы";

	ПредставлениеДок = Метаданные().Представление();

	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Команда"            , Команда);
	СтруктураПараметровПодбора.Вставить("СписокВидовПодбора" , СписокЗапросов);

	// Параметры запросов.
	ВременнаяДатаРасчетов = ?(НачалоДня(Дата) = НачалоДня(ТекущаяДата()), Неопределено, Дата);
	СтруктураПараметровПодбора.Вставить( "ДатаРасчетов"         , ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить( "Организация"          , Организация);
	СтруктураПараметровПодбора.Вставить( "Склад"                , Неопределено);
	СтруктураПараметровПодбора.Вставить( "Подразделение"        , Подразделение);
	СтруктураПараметровПодбора.Вставить( "ЕстьЦена"             , ЕстьЦена);
	СтруктураПараметровПодбора.Вставить( "ЕстьСерия"            , ЕстьСерия);
	СтруктураПараметровПодбора.Вставить( "ВалютаДокумента"      , Валюта);
	СтруктураПараметровПодбора.Вставить( "Заголовок",
		"Подбор номенклатуры в документ " + ПредставлениеДок + " № " + Номер + " (" + ИмяТабличнойЧасти + ")");
										
	РаботаСДиалогами.ОткрытьПодборНоменклатуры(ЭтаФорма, СтруктураПараметровПодбора, Метаданные());

КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
Процедура ОбработкаПодбора(ТабличнаяЧасть, ЗначениеВыбора)

	Перем СпособЗаполненияЦен, ВалютаЦены;
	Перем Номенклатура, ЕдиницаИзмерения, Количество, КоличествоМест, Цена, Характеристика, Серия, СтатьяЗатрат;

	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Номенклатура"    , Номенклатура);
	ЗначениеВыбора.Свойство("ЕдиницаИзмерения", ЕдиницаИзмерения);
	ЗначениеВыбора.Свойство("Количество"      , Количество);
	ЗначениеВыбора.Свойство("Характеристика"  , Характеристика);
	ЗначениеВыбора.Свойство("Серия"           , Серия);
	
	Если Номенклатура = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Номенклатура.Услуга Тогда
		Предупреждение("В данном контексте услуги не подбираются!");
		Возврат;
	КонецЕсли;

	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	//  Если найдем - увеличим количество; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();

	СтруктураОтбора.Вставить("Номенклатура",     		   Номенклатура);
	СтруктураОтбора.Вставить("ХарактеристикаНоменклатуры", Характеристика);
	СтруктураОтбора.Вставить("СерияНоменклатуры",     	   Серия);
	СтруктураОтбора.Вставить("ЕдиницаИзмерения", 		   ЕдиницаИзмерения);
	
	СтрокаТабличнойЧасти = ОбработкаТабличныхЧастей.НайтиСтрокуТабЧасти(ТабличнаяЧасть, СтруктураОтбора);
	Если СтрокаТабличнойЧасти <> Неопределено Тогда

		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + Количество;
		ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

	Иначе
		
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = ТабличнаяЧасть.Добавить();
		СтрокаТабличнойЧасти.Номенклатура     = Номенклатура;
		СтрокаТабличнойЧасти.Количество       = Количество;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Коэффициент      		= СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		СтрокаТабличнойЧасти.НоменклатурнаяГруппа 	= Номенклатура.НоменклатурнаяГруппаЗатрат;
		СтрокаТабличнойЧасти.СтатьяЗатрат 			= Номенклатура.СтатьяЗатрат;
		
		СтрокаТабличнойЧасти.ХарактеристикаНоменклатуры = Характеристика;
		СтрокаТабличнойЧасти.СерияНоменклатуры          = Серия;

		
		// Рассчитываем реквизиты табличной части.
		ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);
		
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти, ПодразделениеОрганизации, СтатьяЗатрат);
		
	КонецЕсли;

	ЭлементыФормы.Материалы.ТекущаяСтрока = СтрокаТабличнойЧасти;
	ЭлементыФормы.Материалы.ТекущаяКолонка = ЭлементыФормы.Материалы.Колонки["Количество"];

КонецПроцедуры // ОбработкаПодбора()

// Производит заполнение и установку необходимых полей при изменении номенклатуры в табличной части.
//
Процедура ПриИзмененииНоменклатурыМатериалов(СтрокаТабличнойЧасти)

	СтрокаТабличнойЧасти.ЕдиницаИзмерения 		= СтрокаТабличнойЧасти.Номенклатура.ЕдиницаХраненияОстатков;
	СтрокаТабличнойЧасти.Коэффициент      		= СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
	ОбработкаТабличныхЧастей.ЗаполнитьЕдиницуМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект, Ложь);	
	
КонецПроцедуры // ПриИзмененииНоменклатурыМатериалов()

// Процедура обработка подбора прочих затрат
//
Процедура ОбработкаПодбораПрочихЗатрат( ТабЧасть, СтруктВыбора)
	
	НоваяСтрока = ТабЧасть.Найти( СтруктВыбора["СтатьяЗатрат"], "СтатьяЗатрат");
	
	Если НоваяСтрока = Неопределено Тогда
		НоваяСтрока = ТабЧасть.Добавить();
		НоваяСтрока.СтатьяЗатрат = СтруктВыбора["СтатьяЗатрат"];
		
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля( НоваяСтрока, ПодразделениеОрганизации, НоваяСтрока.СтатьяЗатрат);
	КонецЕсли;
	
	НоваяСтрока.Сумма     = НоваяСтрока.Сумма     + СтруктВыбора.СуммаУпр;
	НоваяСтрока.СуммаРегл = НоваяСтрока.СуммаРегл + СтруктВыбора.СуммаРегл;
	НоваяСтрока.СуммаНал  = НоваяСтрока.СуммаНал  + СтруктВыбора.СуммаРегл;
	
КонецПроцедуры // ОбработкаПодбораПрочихЗатрат()

// Процедура выполняет необходимые действия при изменении подразделения организации
//
Процедура ПриИзмененииПодразделенияОрганизации() Экспорт
	
	Если РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете,НалоговыйУчетУСН.ПрименениеУСН(Организация, Дата)) Тогда
						
		Для Каждого СтрокаТЧ из Материалы Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
		КонецЦикла;
		Для Каждого СтрокаТЧ из ПрочиеЗатраты Цикл
			УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры	

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ УПРАВЛЕНИЯ ВНЕШНИМ ВИДОМ ФОРМЫ

// Процедура управления доступностью/видимостью элементов формы
//
Процедура ДоступностьЭлементовФормы()
	
	ЭлементыФормы.Заказ.Видимость = Не ВводитьЗаказыПоСтрокам;
	ЭлементыФормы.НадписьЗаказ.Видимость = Не ВводитьЗаказыПоСтрокам;
	ЭлементыФормы.Материалы.Колонки.Заказ.Видимость = ВводитьЗаказыПоСтрокам;
	ЭлементыФормы.ПрочиеЗатраты.Колонки.Заказ.Видимость = ВводитьЗаказыПоСтрокам;
	
	ЭлементыФормы.НоменклатурнаяГруппа.Видимость = Не ВводитьНоменклатурныеГруппыПоСтрокам;
	ЭлементыФормы.НадписьНоменклатурнаяГруппа.Видимость = Не ВводитьНоменклатурныеГруппыПоСтрокам;
	ЭлементыФормы.Материалы.Колонки.НоменклатурнаяГруппа.Видимость = ВводитьНоменклатурныеГруппыПоСтрокам;
	ЭлементыФормы.ПрочиеЗатраты.Колонки.НоменклатурнаяГруппа.Видимость = ВводитьНоменклатурныеГруппыПоСтрокам;
	
КонецПроцедуры // ДоступностьЭлементовФормы()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	
	Если НЕ ЭтоНовый() Тогда 
		НастройкаПравДоступа.ОпределитьДоступностьВозможностьИзмененияДокументаПоДатеЗапрета(ДокументОбъект, ЭтаФорма);
	КонецЕсли;
	
	// Проверить объект на то, что он еще не внесен в ИБ.
	Если ЭтоНовый() Тогда
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ЭтотОбъект, , ПараметрОбъектКопирования);

	КонецЕсли;
    РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете);
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("Номенклатура");
	СтруктураКолонок.Вставить("Количество");
	
	// Установить ограничение - изменять видимоть колонок для ТЧ материалы
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Материалы.Колонки, СтруктураКолонок);
	
	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Установить видимость колонок "ХарактеристикаНоменклатуры" и "СерияНоменклатуры"
	РаботаСДиалогами.УстановитьВидимостьХарактеристикиНоменклатуры(мКолонкиМатериалы);
	РаботаСДиалогами.УстановитьВидимостьСерииНоменклатуры(мКолонкиМатериалы);

	ДоступностьЭлементовФормы();
	ЗаполнитьСписокРеквизитовЗависимыхОтТиповУчета();
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);

	// Установить активный реквизит.
	РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма);

	МеханизмНумерацииОбъектов.ДобавитьВМенюДействияКнопкуРедактированияНомера(ЭлементыФормы.ДействияФормы.Кнопки.Подменю);
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Создать кнопки печати
	ФормированиеПечатныхФорм.СоздатьКнопкиПечати(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

КонецПроцедуры // ПослеЗаписи()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)

	Перем Команда, Спецификация;

	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		ЗначениеВыбора.Свойство("Команда", Команда);

		Если Команда = "ПодборВТабличнуюЧастьМатериалы" Тогда
			ОбработкаПодбора(Материалы, ЗначениеВыбора);
		ИначеЕсли Команда = "ПодборПрочихЗатрат" Тогда
			ОбработкаПодбораПрочихЗатрат( ПрочиеЗатраты, ЗначениеВыбора);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбновлениеОтображения" формы.
//
Процедура ОбновлениеОтображения()

	// Подсчитаем количество строк в табличных частях.
	СтраницаПанели = ЭлементыФормы.Панель.Страницы;
	СтраницаПанели.Материалы    .Заголовок = "Материалы ("   + ДокументОбъект.Материалы.Количество() + " поз.)";
	СтраницаПанели.ПрочиеЗатраты.Заголовок = "Прочие затраты ("   + ДокументОбъект.ПрочиеЗатраты.Количество() + " поз.)";

КонецПроцедуры // ОбновлениеОтображения()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

Процедура ДействияФормыРедактироватьНомер(Кнопка)
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
КонецПроцедуры
// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Функция ПроверитьИспользуетсяУправленческийУчетЗатрат(ВидОтраженияВУчете)
	
	Если УправлениеЗапасами.ИспользуетсяРасширеннаяАналитикаУчета(Дата) 
	    И НЕ УправлениеЗапасами.ИспользуетсяУправленческийУчетЗатрат() Тогда
		
		ТекстВопроса = Нстр("ru = 'Управленческий учет затрат не ведется. Заполнить по данным регламентированного учета?'");
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

Процедура КнопкаЗаполнитьОстаткамиМатериаловВПроизводстве(Кнопка)
	
	Если РаботаСДиалогамиКлиент.ПользовательОтказалсяПерезаполнитьТабличнуюЧасть(Материалы) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОстаткамиМатериаловВПроизводстве();
	
КонецПроцедуры

Процедура КоманднаяПанельМатериалыЗаполнитьПоНормативамУпр(Кнопка)
	
	ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
	
	Если НЕ ПроверитьИспользуетсяУправленческийУчетЗатрат(ВидОтраженияВУчете) Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСДиалогамиКлиент.ПользовательОтказалсяПерезаполнитьТабличнуюЧасть(Материалы) Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьОстатокМатериаловПоНормативам(ВидОтраженияВУчете);
	
КонецПроцедуры

Процедура КоманднаяПанельМатериалыЗаполнитьПоНормативамРегл(Кнопка)
	
	Если РаботаСДиалогамиКлиент.ПользовательОтказалсяПерезаполнитьТабличнуюЧасть(Материалы) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьМатериалыПоНормативам(Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете);
	
КонецПроцедуры

Процедура КоманднаяПанельМатериалыЗаполнитьПоОстаткамУпр(Кнопка)
	
	ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
	
	Если НЕ ПроверитьИспользуетсяУправленческийУчетЗатрат(ВидОтраженияВУчете) Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСДиалогамиКлиент.ПользовательОтказалсяПерезаполнитьТабличнуюЧасть(Материалы) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьМатериалыОстаткамиЗатрат(ВидОтраженияВУчете);
	
КонецПроцедуры // КоманднаяПанельМатериалыЗаполнитьПоОстаткамУпр()

Процедура КоманднаяПанельМатериалыЗаполнитьПоОстаткамРегл(Кнопка)
	
	Если РаботаСДиалогамиКлиент.ПользовательОтказалсяПерезаполнитьТабличнуюЧасть(Материалы) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьМатериалыОстаткамиЗатрат(Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете);
	
КонецПроцедуры


Процедура КоманднаяПанельПрочиеЗатратыЗаполнить(Кнопка)
	
	Если РаботаСДиалогамиКлиент.ПользовательОтказалсяПерезаполнитьТабличнуюЧасть(ПрочиеЗатраты) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПрочиеЗатратыПоОстаткам();
	
КонецПроцедуры // КоманднаяПанельПрочиеЗатратыЗаполнить()

Процедура КоманднаяПанельПрочиеЗатратыЗаполнитьУпр(Кнопка)
	
	ВидОтраженияВУчете = Перечисления.ВидыОтраженияВУчете.ОтражатьВУправленческомУчете;
	
	Если НЕ ПроверитьИспользуетсяУправленческийУчетЗатрат(ВидОтраженияВУчете) Тогда
		Возврат;
	КонецЕсли;
	
	Если РаботаСДиалогамиКлиент.ПользовательОтказалсяПерезаполнитьТабличнуюЧасть(ПрочиеЗатраты) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПрочиеЗатратыПоОстаткам(ВидОтраженияВУчете);
	
КонецПроцедуры

Процедура КоманднаяПанельПрочиеЗатратыЗаполнитьРегл(Кнопка)
	
	Если РаботаСДиалогамиКлиент.ПользовательОтказалсяПерезаполнитьТабличнуюЧасть(ПрочиеЗатраты) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПрочиеЗатратыПоОстаткам(Перечисления.ВидыОтраженияВУчете.ОтражатьВРегламентированномУчете);
	
КонецПроцедуры

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Материалы"
//
Процедура КоманднаяПанельМатериалыПодбор(Кнопка)
	
	ДействиеПодбор(Материалы);
	
КонецПроцедуры // КоманднаяПанельМатериалыПодбор()

// Процедура вызывается при нажатии кнопки "Подбор" командной панели
// табличного поля "Прочие затраты".
//
Процедура КоманднаяПанельПрочиеЗатратыПодбор(Кнопка)
	
	СтруктПараметры = Новый Структура;
	СтруктПараметры.Вставить( "Подразделение",            Подразделение);
	СтруктПараметры.Вставить( "ПодразделениеОрганизации", ПодразделениеОрганизации);
	СтруктПараметры.Вставить( "ФлагУпрУчета",             ОтражатьВУправленческомУчете);
	СтруктПараметры.Вставить( "ФлагРеглУчета",            ОтражатьВБухгалтерскомУчете);
	СтруктПараметры.Вставить( "ВидЗатрат",                "НематериальныеЗатраты");
	СтруктПараметры.Вставить( "ДатаОстатков",             Дата);
	СтруктПараметры.Вставить( "Организация",              Организация);
	СтруктПараметры.Вставить( "Команда",                  "ПодборПрочихЗатрат");
	
	ОбработкаТабличныхЧастей.ОткрытьПодборСтатейЗатрат( ЭтаФорма, СтруктПараметры);
	
КонецПроцедуры // КоманднаяПанельПрочиеЗатратыПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата; // запомним текущую дату документа для контроля номера документа

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,ПодразделениеОрганизации,Подразделение,Организация);
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	РаботаСДиалогами.УправлениеПризнакомОтраженияВРеглУчете(ЭтотОбъект, ЭтаФорма,,,мОтражатьВРегламентированномУчете,истина);
    РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля "Заказ"
//
Процедура ЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "", ДопПараметры);
	
КонецПроцедуры // ЗаказНачалоВыбора()

// Процедура - обработчик события "ПриИзменении" флага "ВводитьНоменклатурныеГруппыПоСтрокам"
//
Процедура ВводитьНоменклатурныеГруппыПоСтрокамПриИзменении(Элемент)
	
	ДоступностьЭлементовФормы();
	
КонецПроцедуры // ВводитьНоменклатурныеГруппыПоСтрокамПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага "ВводитьЗаказыПоСтрокам"
//
Процедура ВводитьЗаказыПоСтрокамПриИзменении(Элемент)
	
	ДоступностьЭлементовФормы();
	
КонецПроцедуры // ВводитьЗаказыПоСтрокамПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в регламентированном учете.
//
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)

	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию( глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
	
	Если Материалы.Количество() > 0 ИЛИ ПрочиеЗатраты.Количество() > 0 
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(ОтражатьВБухгалтерскомУчете,ОтражатьВНалоговомУчете) Тогда

		Для каждого СтрокаТЧ из Материалы Цикл
			Если ОтражатьВБухгалтерскомУчете Тогда
				УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
				Если НЕ ОтражатьВНалоговомУчете Тогда
					СтрокаТЧ.СчетЗатратНУ = Неопределено;
				КонецЕсли;
			Иначе
				СтрокаТЧ.СчетЗатрат   = Неопределено;
				СтрокаТЧ.СчетЗатратНУ = Неопределено;
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаТЧ из ПрочиеЗатраты Цикл
			Если ОтражатьВБухгалтерскомУчете Тогда
				УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
				Если НЕ ОтражатьВНалоговомУчете Тогда
					СтрокаТЧ.СчетЗатратНУ = Неопределено;
				КонецЕсли;
			Иначе
				СтрокаТЧ.СчетЗатрат   = Неопределено;
				СтрокаТЧ.СчетЗатратНУ = Неопределено;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;

КонецПроцедуры // ОтражатьВБухгалтерскомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в упр. учете.
//
Процедура ОтражатьВУправленческомУчетеПриИзменении(Элемент)
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
КонецПроцедуры // ОтражатьВУправленческомУчетеПриИзменении()

// Процедура - обработчик события "ПриИзменении" флага отражения
// документа в налоговом учете.
//
Процедура ОтражатьВНалоговомУчетеПриИзменении(Элемент)
	
	РаботаСДиалогами.ВидимостьРеквизитовПоТипуУчета(ЭтотОбъект, ЭтаФорма, мСтрокаРеквизитыУпрУчета, мСтрокаРеквизитыБухУчета, мСтрокаРеквизитыНалУчета);
	
	Если Материалы.Количество() > 0 ИЛИ ПрочиеЗатраты.Количество() > 0 
		И РаботаСДиалогами.НеобходимоПерезаполнитьСчетаУчета(,ОтражатьВНалоговомУчете) Тогда

		Для каждого СтрокаТЧ из Материалы Цикл
			Если ОтражатьВНалоговомУчете Тогда
				ТекСчетБУ = СтрокаТЧ.СчетЗатрат; // Сохраним счет БУ
				УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
				СтрокаТЧ.СчетЗатрат = ТекСчетБУ; // Восстановим счет БУ
			Иначе
				СтрокаТЧ.СчетЗатратНУ = Неопределено;
			КонецЕсли;
		КонецЦикла;
		Для каждого СтрокаТЧ из ПрочиеЗатраты Цикл
			Если ОтражатьВНалоговомУчете Тогда
				ТекСчетБУ = СтрокаТЧ.СчетЗатрат; // Сохраним счет БУ
				УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(СтрокаТЧ, ПодразделениеОрганизации, СтрокаТЧ.СтатьяЗатрат);
				СтрокаТЧ.СчетЗатрат = ТекСчетБУ; // Восстановим счет БУ
			Иначе
				СтрокаТЧ.СчетЗатратНУ = Неопределено;
			КонецЕсли;
		КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры // ОтражатьВНалоговомУчетеПриИзменении()

// Процедура - обработчик события "При изменении" поля ввода Подразделение.
// 
Процедура ПодразделениеПриИзменении(Элемент)
	
	// попробуем заполнить подразделение организации 
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру( ОтражатьВБухгалтерскомУчете,
												  ПодразделениеОрганизации,
												  Подразделение,
												  Организация);
												  
	Если ОтражатьВБухгалтерскомУчете Тогда
		ПодразделениеОрганизацииПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры // ПодразделениеПриИзменении()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода ПодразделениеОрганизации.
//
Процедура ПодразделениеОрганизацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	РаботаСДиалогами.ВыбратьПодразделениеОрганизацииИзСписка( ОтражатьВБухгалтерскомУчете,
											 Элемент,
											 ПодразделениеОрганизации,
											 Подразделение,
											 Организация,
											 ЭтаФорма);
	
КонецПроцедуры // ПодразделениеОрганизацииНачалоВыбораИзСписка()

// Процедура - обработчик события "ПриИзменении" поля ввода Подразделения организации.
// 
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	
	ПриИзмененииПодразделенияОрганизации();
	
КонецПроцедуры // ПодразделениеОрганизацииПриИзменении()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Материалы

// Процедура - обработчик события "ПриИзменении" поля ввода номенклатуры
// в строке табличной части "Материалы".
//
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	Перем СтатьяЗатрат;
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении номенклатуры.
	ОбработкаТабличныхЧастей.ПриИзмененииНоменклатурыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);
	
	ПриИзмененииНоменклатурыМатериалов(СтрокаТабличнойЧасти);
	
	УправлениеЗатратами.ЗаполнитьНоменклатурнуюГруппуИСтатьюЗатратВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // МатериалыНоменклатураПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы мест
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаМестПриИзменении(Элемент)

	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыМестТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода единицы
// в строке табличной части "Материалы".
//
Процедура МатериалыЕдиницаПриИзменении(Элемент)

	// Установить коэффициент
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	ОбработкаТабличныхЧастей.ПриИзмененииЕдиницыТабЧасти(СтрокаТабличнойЧасти, ЭтотОбъект);

КонецПроцедуры // МатериалыЕдиницаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// в строке табличной части "Материалы".
//
Процедура МатериалыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "Материалы", ДопПараметры);
	
КонецПроцедуры // МатериалыЗаказНачалоВыбора()

// Процедура - обработчик события "ПриВыводеСтроки" табличной части "Материалы".
//
Процедура МатериалыПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)

	РаботаСДиалогами.ПоказатьКоэффициентМест(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.ЕдиницаИзмеренияМест);
	РаботаСДиалогами.ПоказатьКодАртикул(мКолонкиМатериалы, ОформлениеСтроки.Ячейки, ДанныеСтроки.Номенклатура);

КонецПроцедуры // МатериалыПриВыводеСтроки()

// Процедура - обработчик события "ПриИзменении" поля ввода количества мест
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоМестПриИзменении(Элемент)

	// Рассчитать новое количество
	ОбработкаТабличныхЧастей.РассчитатьКоличествоТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ЭтотОбъект);

КонецПроцедуры // МатериалыКоличествоМестПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода количества
// в строке табличной части "Материалы".
//
Процедура МатериалыКоличествоПриИзменении(Элемент)

	// Рассчитать реквизиты табличной части.
	ОбработкаТабличныхЧастей.РассчитатьКоличествоМестТабЧасти(ЭлементыФормы.Материалы.ТекущиеДанные, ДокументОбъект);

КонецПроцедуры // МатериалыКоличествоПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Счета затрат
// в строке табличной части "Материалы".
//
Процедура МатериалыСчетЗатратПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = ЭлементыФормы.Материалы.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(СтрокаТабличнойЧасти);
	
КонецПроцедуры // МатериалыСчетЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатрат
//
Процедура МатериалыСтатьяЗатратПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.Материалы.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(ТекСтрока, ПодразделениеОрганизации, ТекСтрока.СтатьяЗатрат);
	КонецЕсли;
	
КонецПроцедуры // МатериалыСтатьяЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СтатьяЗатрат
//
Процедура МатериалыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		Перечисления.ХарактерЗатрат.ПроизводственныеРасходы, 
		Элемент, 
		СтандартнаяОбработка,
		Перечисления.ВидыЗатрат.Материальные
	);
	
КонецПроцедуры // ПрочиеЗатратыСтатьяЗатратНачалоВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТЧ Материалы

// Процедура - обработчик события "ПриИзменении" поля ввода СтатьяЗатрат
//
Процедура ПрочиеЗатратыСтатьяЗатратПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	Если НЕ ТекСтрока = Неопределено Тогда
		УправлениеЗатратами.ЗаполнитьСчетЗатратВСтрокеТабличногоПоля(ТекСтрока, ПодразделениеОрганизации, ТекСтрока.СтатьяЗатрат);
	КонецЕсли;
	
КонецПроцедуры // ПрочиеЗатратыСтатьяЗатратПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода Сумма.
//
Процедура ПрочиеЗатратыСуммаПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	СтрокаТЧ.СуммаРегл = МодульВалютногоУчета.ПересчитатьВСуммуРегл( СтрокаТЧ.Сумма, мВалютаРегламентированногоУчета, мВалютаУправленческогоУчета, Дата);
	СтрокаТЧ.СуммаНал = СтрокаТЧ.СуммаРегл;
	
КонецПроцедуры // ПрочиеЗатратыСуммаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СуммаРегл.
//
Процедура ПрочиеЗатратыСуммаРеглПриИзменении(Элемент)
	
	СтрокаТЧ = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	СтрокаТЧ.СуммаНал = СтрокаТЧ.СуммаРегл;
	
КонецПроцедуры // ПрочиеЗатратыСуммаРеглПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода СчетЗатрат
//
Процедура ПрочиеЗатратыСчетЗатратПриИзменении(Элемент)
	
	ТекСтрока = ЭлементыФормы.ПрочиеЗатраты.ТекущиеДанные;
	НалоговыйУчет.ЗаполнитьСчетНалоговогоУчетаВСтрокеТабличногоПоля(ТекСтрока);
	
КонецПроцедуры // ПрочиеЗатратыСчетЗатратПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода СтатьяЗатрат
//
Процедура ПрочиеЗатратыСтатьяЗатратНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ТаблицаОтбора = РаботаСДиалогами.СформироватьТаблицуОтбораНематериальныхПроизводственныхСтатейЗатрат();
	
	РаботаСДиалогами.НачалоВыбораСтатьиЗатрат(
		ТаблицаОтбора, 
		Элемент, 
		СтандартнаяОбработка
	);
	
КонецПроцедуры // ПрочиеЗатратыСтатьяЗатратНачалоВыбора()

// Процедура - обработчик события "НачалоВыбора" поля ввода Заказ
// в строке табличной части "Прочие затраты".
//
Процедура ПрочиеЗатратыЗаказНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	

	МассивДоступныеПоляОтбора = Новый Массив;
	МассивДоступныеПоляОтбора.Добавить("Организация");
	ДопПараметры = Новый Структура("ДоступныеПоляОтбора", МассивДоступныеПоляОтбора);

	УправлениеЗаказами.НачалоВыбораДокументаЗаказа(ЭтотОбъект, ЭтаФорма, Элемент, СтандартнаяОбработка, СтруктураОтбора, "ПрочиеЗатраты", ДопПараметры);
	
КонецПроцедуры // ПрочиеЗатратыЗаказНачалоВыбора()

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать".
// Открывает форму выбора печатных форм объекта.
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ОткрытьФормуВыбораПечатныхФормОбъекта(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)

	УниверсальныеМеханизмы.НапечататьДокументПоУмолчанию(ЭтотОбъект);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мКолонкиМатериалы = ЭлементыФормы.Материалы.Колонки;
мВалютаРегламентированногоУчета = глЗначениеПеременной("ВалютаРегламентированногоУчета");
мВалютаУправленческогоУчета     = глЗначениеПеременной("ВалютаУправленческогоУчета");