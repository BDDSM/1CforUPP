//Возможные значения реквизитов ограничены значениями, входящими в коллекции.
Перем ПредставленияПериодДетализации;       // Коллекция представлений реквизита ПериодДетализации
Перем ПредставленияВидРегулярногоДокумента; // Коллекция представлений реквизита ВидРегулярногоДокумента

Перем НужноУдалитьРегламентноеЗадание; // Ответ пользователя на вопрос о необходимости удалять регл. задание (булево или неопределено)
Перем ПользовательРешилРедактироватьДатуНачала; // При начале редактирования даты предупреждаем пользователя

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Устанавливает доступность элементов формы
//
Процедура УправлениеДоступностью()
	
	Если ТолькоПросмотр Тогда
		// Доступность регулируется настройками в диалоге
		Возврат;
	КонецЕсли;
	
	ЭлементыФормы.НеОбрабатыватьПериодДоЗавершенияСмен.Доступность = НЕ Подразделение.Пустая();
	
	ЭлементыФормы.ПредставлениеРасписания.Доступность 			   = ФормироватьДокументыАвтоматически;
	
	ЭлементыФормы.НеОбрабатыватьВсеДокументы.Доступность 		   = ФормироватьДокументыАвтоматически;
	ЭлементыФормы.НадписьЗадержка.Доступность					   = ФормироватьДокументыАвтоматически;
	
	ЭлементыФормы.НадписьПояснениеЗадержка.Видимость 			   = ФормироватьДокументыАвтоматически;
	
	ЭлементыФормы.Задержка.Доступность 							   = ФормироватьДокументыАвтоматически И НеОбрабатыватьВсеДокументы;
	
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность 			   = ОтражатьВБухгалтерскомУчете;
	
	МожноОтразитьМатериалы = РегламентноеФормированиеДокументов.РегламентФормированияДокументовВыпуска_ЗаполнятьМатериалы(ВидРегулярногоДокумента);
	ЭлементыФормы.ОтразитьВыпуск.Доступность                       = МожноОтразитьМатериалы;
	ЭлементыФормы.ОтразитьМатериалы.Доступность                    = МожноОтразитьМатериалы;
	
КонецПроцедуры

// Устанавливает подпись к полю Задержка с учетом формы множественного числа
Процедура НастроитьНадписьЗадержка()
	
	Если НеОбрабатыватьВсеДокументы Тогда
	
		Если Задержка = 0 Тогда 
			ПояснениеЗадержка = "Не обрабатывать документы за сегодня";
		Иначе
			ПояснениеЗадержка = "";
		КонецЕсли;
		
	Иначе
		
		ПояснениеЗадержка = "Обрабатывать все введенные документы";
		
	КонецЕсли;
	
	Предыдущие 	= ОбщегоНазначения.ФормаМножественногоЧисла("предыдущий","предыдущие","предыдущие", Задержка);
	Дней 		= ОбщегоНазначения.ФормаМножественногоЧисла("день","дня","дней", Задержка);
	
	ЭлементыФормы.НеОбрабатыватьВсеДокументы.Заголовок = "Не обрабатывать документы за " + Предыдущие + ":";
	ЭлементыФормы.НадписьЗадержка.Заголовок         = Дней;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ
 
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	СписокВидовРегулярныхДокументов = РегламентноеФормированиеДокументов.РегламентФормированияДокументовВыпуска_СписокВидовРегулярныхДокументов();
	
	// Для нового элемента установим значение по умолчанию 
	Если ЭтоНовый() Тогда
		// Устанавливаем вид документа, если список состоит только из одного элемента
		Если СписокВидовРегулярныхДокументов.Количество() = 1 Тогда
			ВидРегулярногоДокумента = СписокВидовРегулярныхДокументов[0].Значение;
		КонецЕсли;
	КонецЕсли;
	
	// Настроим список выбор вида регулярного документа
	Для Каждого ЭлементСписка Из СписокВидовРегулярныхДокументов Цикл
		ЭлементыФормы.ВидРегулярногоДокумента.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
	КонецЦикла;
	ЭлементыФормы.ВидРегулярногоДокумента.Значение              = ВидРегулярногоДокумента;
	ЭлементыФормы.ВидРегулярногоДокумента.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(ВидРегулярногоДокумента);
	
	// Проверим, нужны ли на форме флаги ОтразитьВыпуск и ОтразитьМатериалы
	ТребуетсяОтражатьМатериалы = Ложь;
	Для Каждого ВидДокумента Из СписокВидовРегулярныхДокументов Цикл
		ТребуетсяОтражатьМатериалы = ТребуетсяОтражатьМатериалы 
		    ИЛИ РегламентноеФормированиеДокументов.РегламентФормированияДокументовВыпуска_ЗаполнятьМатериалы(ВидДокумента.Значение);
	КонецЦикла;
	
	Если НЕ ТребуетсяОтражатьМатериалы Тогда
		ЭлементыФормы.ОтразитьВыпуск.Видимость    = Ложь;
		ЭлементыФормы.ОтразитьМатериалы.Видимость = Ложь;
		ЭлементыФормы.НадписьОтразить.Видимость   = Ложь;
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриОткрытии
// Настройка диалога.
Процедура ПриОткрытии()
	
	// В базе хранится дата, по которую обработаны документы.
	// В форме пользователю показывается дата, начиная с которой будут обработаны документы.
	ДатаНачалаОбработки = ?(ЗначениеЗаполнено(ГраницаОбработки), КонецДня(ГраницаОбработки) + 1, ГраницаОбработки);
	ПользовательРешилРедактироватьДатуНачала = Ложь;
	
	ПериодДетализацииПредставление 	     = РегламентноеФормированиеДокументов.ПолучитьПредставление(ПредставленияПериодДетализации, ПериодДетализации);
	
	ИспользоватьЗадержку = Задержка <> 0;
	НастроитьНадписьЗадержка();
	
	УправлениеДоступностью();
	
	Расписание = РегламентныеПроцедуры.ПолучитьРасписаниеРегламентногоЗадания(РегламентноеЗадание);
	РегламентныеПроцедуры.НастроитьПредставлениеРасписания(ЭтаФорма);
	
КонецПроцедуры

// Обработчик события ПередЗаписью
// Удалим регл. задание, если пользователь на это согласился при отключении 
// формирования документов по расписанию
Процедура ПередЗаписью(Отказ)
	
	// В форме пользователю показывается дата, начиная с которой будут обработаны документы.
	// В базе хранится дата, по которую обработаны документы.
	ГраницаОбработки = ?(ЗначениеЗаполнено(ДатаНачалаОбработки), НачалоДня(ДатаНачалаОбработки) - 1, ДатаНачалаОбработки);
	
	ЗаголовокСообщения 	= ЗаголовокПриЗаписи();
	
	Если НужноУдалитьРегламентноеЗадание = Истина Тогда
		РегламентныеПроцедуры.УдалитьРегламентноеЗаданиеПриЗаписиНастройки(ЭтотОбъект,ЗаголовокСообщения,Отказ);
	КонецЕсли;
	
КонецПроцедуры

// Обработчик события ПриЗаписи
// Запись расписания
Процедура ПриЗаписи(Отказ)
	
	// Обрабатываем расписание регл. задания
	Если НЕ ФормироватьДокументыАвтоматически Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаголовокСообщения 	= ЗаголовокПриЗаписи();
	
	РегламентныеПроцедуры.ИзменитьРегламентноеЗаданиеПриЗаписиНастройки(
		ЭтотОбъект,
		Расписание,
		ЗаголовокСообщения,
		Отказ);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

Процедура ДатаНачалаОбработкиНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	Если ПользовательРешилРедактироватьДатуНачала Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВопроса = "Дата, начиная с которой обрабатываются данные, изменяется автоматически.
	|Изменение этой даты вручную может привести к ошибкам при формировании документов.
	|Вы действительно хотите изменить дату вручную?";
	
	Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет, "Изменить дату вручную");
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		
		ПользовательРешилРедактироватьДатуНачала = Истина;
		
	Иначе
		//Восстановим предыдущую дату
		Элемент.Значение     = ДатаНачалаОбработки;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВидРегулярногоДокументаПриИзменении(Элемент)
	
	ЭлементыФормы.ВидРегулярногоДокумента.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(ВидРегулярногоДокумента);
	
	// Не во всех формируемых документах заполняются материалы
	Если НЕ РегламентноеФормированиеДокументов.РегламентФормированияДокументовВыпуска_ЗаполнятьМатериалы(ВидРегулярногоДокумента) Тогда
		ОтразитьВыпуск    = Истина;
		ОтразитьМатериалы = Ложь;
	КонецЕсли;
	
	УправлениеДоступностью();
	
КонецПроцедуры

Процедура ВидРегулярногоДокументаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Обработчик события НачалоВыбораИзСписка поля ПериодДетализации
// Выбор из ограниченного списка
Процедура ПериодДетализацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь; // стандартная обработка не позволяет спозиционироваться на нужное значение
	
	СписокВыбора = Новый СписокЗначений;
	СписокВыбора.ЗагрузитьЗначения(ПредставленияПериодДетализации.ВыгрузитьКолонку("Представление"));
	
	Значение = ВыбратьИзСписка(СписокВыбора, Элемент, СписокВыбора.НайтиПоЗначению(Элемент.Значение));
	Если Значение<>Неопределено Тогда
		Элемент.Значение 	= Значение.Значение;
		ПериодДетализации = РегламентноеФормированиеДокументов.ПолучитьЗначение(ПредставленияПериодДетализации, Значение.Значение);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПериодДетализацииОчистка(Элемент, СтандартнаяОбработка)
	
	// Очищать это поле нельзя
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Обработчик события ПриИзменении флага ОтражатьВБухгалтерскомУчете
// Управление связанным флагом ОтражатьВНалоговомУчете
Процедура ОтражатьВБухгалтерскомУчетеПриИзменении(Элемент)
	
	ОтражатьВНалоговомУчете = ОтражатьВБухгалтерскомУчете И УправлениеПользователями.ПолучитьЗначениеПоУмолчанию(глЗначениеПеременной("глТекущийПользователь"), "ОтражатьДокументыВНалоговомУчете");
	ЭлементыФормы.ОтражатьВНалоговомУчете.Доступность = ОтражатьВБухгалтерскомУчете;

КонецПроцедуры

// Обработчик события ПриИзменении поля ввода Организация
// Заполнение реквизита ПодразделениеОрганизации
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Попробуем заполнить подразделение организации
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
		ПодразделениеОрганизации,
		Подразделение,
		Организация);
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода Организация
// Заполнение реквизита ПодразделениеОрганизации
Процедура ПодразделениеПриИзменении(Элемент)
	
	Если Подразделение.Пустая() И НеОбрабатыватьПериодДоЗавершенияСмен Тогда
		// Такая настройка не допускается
		НеОбрабатыватьПериодДоЗавершенияСмен = Ложь;
	КонецЕсли;
	
	// Изменим доступность флага
	УправлениеДоступностью();
	
	// Попробуем заполнить подразделение организации
	РаботаСДиалогами.ЗаполнениеПодразделенияОрганизацииПоРегистру(ОтражатьВБухгалтерскомУчете,
		ПодразделениеОрганизации,
		Подразделение,
		Организация);
	
КонецПроцедуры

// Обработчик события ПриИзменении флажка ФормироватьДокументыАвтоматически
// От флажка зависит работа с полем Задержка
Процедура ФормироватьДокументыАвтоматическиПриИзменении(Элемент)
	
	НужноУдалитьРегламентноеЗадание = РегламентныеПроцедуры.ПриИзмененииФлагаФормироватьДокументыАвтоматически(ЭтаФорма);
	
	Если НЕ ФормироватьДокументыАвтоматически Тогда
		НеОбрабатыватьВсеДокументы = Ложь;
		Задержка = 0;
	КонецЕсли;
	УправлениеДоступностью();
	
КонецПроцедуры

// Обработчик нажатия на гиперссылку ПредставлениеРасписания
Процедура ПредставлениеРасписанияНажатие(Элемент)
	
	РегламентныеПроцедуры.РедактироватьРасписаниеРегламентногоЗадания(ЭтаФорма);
	УправлениеДоступностью();
	
КонецПроцедуры

// Обработчик события ПриИзменении поля ввода Задержка
// От значения зависит подпись
Процедура ЗадержкаПриИзменении(Элемент)
	
	НастроитьНадписьЗадержка();
	
КонецПроцедуры

// Обработчик события ПриИзменении флага НеОбрабатыватьВсеДокументы
// От значения зависит работа с полем Задержка
Процедура НеОбрабатыватьВсеДокументыПриИзменении(Элемент)
	
	УправлениеДоступностью();
	
	Если НеОбрабатыватьВсеДокументы Тогда
		ТекущийЭлемент = ЭлементыФормы.Задержка;
	КонецЕсли;
	
	НастроитьНадписьЗадержка();
	
КонецПроцедуры

// Описания представлений реквизита "ПериодДетализации" используются также в форме списка настроек
РегламентноеФормированиеДокументов.ДобавитьЭлементКоллекцииПредставлений(ПредставленияПериодДетализации, Перечисления.Периодичность.День,   "1 документ в день",	1);
РегламентноеФормированиеДокументов.ДобавитьЭлементКоллекцииПредставлений(ПредставленияПериодДетализации, Перечисления.Периодичность.Неделя, "1 документ в неделю",	7);
РегламентноеФормированиеДокументов.ДобавитьЭлементКоллекцииПредставлений(ПредставленияПериодДетализации, Перечисления.Периодичность.Декада, "1 документ в декаду",	10);
РегламентноеФормированиеДокументов.ДобавитьЭлементКоллекцииПредставлений(ПредставленияПериодДетализации, Перечисления.Периодичность.Месяц,  "1 документ в месяц",	30);