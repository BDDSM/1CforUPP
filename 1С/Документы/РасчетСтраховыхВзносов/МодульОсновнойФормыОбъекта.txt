////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;
Перем мТекущийПериодРегистрации;
Перем мТекущаяОрганизация;

// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики налоговому учету
Перем мМассивЭУЕНВД;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

Перем мСписокВидовДляОсновныхНачислений;
Перем мСписокВидовДляДополнительныхНачислений;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ПриИзмененииПериодаРегистрации()

	Если мТекущийПериодРегистрации <> ПериодРегистрации Тогда
		
		мТекущийПериодРегистрации = ПериодРегистрации;
		
		ИсчисленныеСтраховыеВзносы.Очистить();
		
		ЗаполнитьМассивЭУЕНВД();
		УправлениеВидимостьюКолонок();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьМассивЭУЕНВД()

	мМассивЭУЕНВД = Новый Массив();
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ПФРНакопительнаяЕНВД);
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ПФРСтраховаяЕНВД);
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.ОсновныеНачисления.Колонки.ОблагаетсяЕНВД);
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.ДополнительныеНачисления.Колонки.ОблагаетсяЕНВД);
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.ПособияПоСоциальномуСтрахованию.Колонки.ОблагаетсяЕНВД);
	мМассивЭУЕНВД.Добавить(ЭлементыФормы.ПособияПоУходуЗаРебенкомДоПолутораЛет.Колонки.ОблагаетсяЕНВД);
	
	Если ПериодРегистрации >= ПроведениеРасчетов.ДатаРасширенияПеречняЛьготныхТарифовСтраховыхВзносов() Тогда
		мМассивЭУЕНВД.Добавить(ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ТФОМСЕНВД);
		мМассивЭУЕНВД.Добавить(ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ФФОМСЕНВД);
		мМассивЭУЕНВД.Добавить(ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ФССЕНВД);
	КонецЕсли
	
КонецПроцедуры

Процедура УправлениеВидимостьюКолонок()

	ПоказыватьКолонки = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудШахтеров") и ПериодРегистрации >= ПроведениеРасчетов.ДатаРасширенияПеречняЛьготныхТарифовСтраховыхВзносов();
	
	ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ПФРНаДоплатуКПенсииШахтерам.Видимость = ПоказыватьКолонки;
	ЭлементыФормы.ОсновныеНачисления.Колонки.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам.Видимость = ПоказыватьКолонки;
	ЭлементыФормы.ДополнительныеНачисления.Колонки.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам.Видимость = ПоказыватьКолонки;
	ЭлементыФормы.ПособияПоСоциальномуСтрахованию.Колонки.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам.Видимость = ПоказыватьКолонки;
	ЭлементыФормы.ПособияПоУходуЗаРебенкомДоПолутораЛет.Колонки.ОблагаетсяВзносамиНаДоплатуКПенсииШахтерам.Видимость = ПоказыватьКолонки;
	
	ПоказыватьКолонки = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудФармацевтов") И ПериодРегистрации >= ПроведениеРасчетов.ДатаСниженияТарифовСтраховыхВзносов();
	
	ЭлементыФормы.ОсновныеНачисления.Колонки.ЯвляетсяДоходомФармацевта.Видимость = ПоказыватьКолонки;
	ЭлементыФормы.ДополнительныеНачисления.Колонки.ЯвляетсяДоходомФармацевта.Видимость = ПоказыватьКолонки;
	ЭлементыФормы.ПособияПоСоциальномуСтрахованию.Колонки.ЯвляетсяДоходомФармацевта.Видимость = ПоказыватьКолонки;
	ЭлементыФормы.ПособияПоУходуЗаРебенкомДоПолутораЛет.Колонки.ЯвляетсяДоходомФармацевта.Видимость = ПоказыватьКолонки;
	
	ПоказыватьКолонки = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудЧленовЭкипажейМорскихСудов") И ПериодРегистрации >= ПроведениеРасчетов.ДатаСниженияТарифовСтраховыхВзносов();
	
	ЭлементыФормы.ОсновныеНачисления.Колонки.ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ.Видимость = ПоказыватьКолонки;
	ЭлементыФормы.ДополнительныеНачисления.Колонки.ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ.Видимость = ПоказыватьКолонки;
	ЭлементыФормы.ПособияПоСоциальномуСтрахованию.Колонки.ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ.Видимость = ПоказыватьКолонки;
	ЭлементыФормы.ПособияПоУходуЗаРебенкомДоПолутораЛет.Колонки.ЯвляетсяДоходомЧленаЭкипажаСуднаПодФлагомРФ.Видимость = ПоказыватьКолонки;
	
	НалоговыйУчет.ОбновитьДанныеУчетнойПолитикиПоНалоговомуУчету(глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), КонецМесяца(ПериодРегистрации), Организация);
	БухгалтерскийУчетДополнительный.УстановитьВидимостьРеквизитовЕНВД(мМассивЭУЕНВД, Организация, ПериодРегистрации, глЗначениеПеременной("УчетнаяПолитикаОтраженияЗарплатыВУчете"), Ложь);
	
	Если ПериодРегистрации < ПроведениеРасчетов.ДатаРасширенияПеречняЛьготныхТарифовСтраховыхВзносов() Тогда
		ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ТФОМСЕНВД.Видимость = Ложь;
		ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ФФОМСЕНВД.Видимость = Ложь;
		ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ФССЕНВД.Видимость = Ложь;
	КонецЕсли;
	
	ПоказыватьКолонки = ПериодРегистрации < ПроведениеРасчетов.ДатаСниженияТарифовСтраховыхВзносов();
	ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ТФОМСЕНВД.Видимость = ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ТФОМСЕНВД.Видимость И ПоказыватьКолонки;
	ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ТФОМС.Видимость = ПоказыватьКолонки;
	
КонецПроцедуры

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ИсчисленныеСтраховыеВзносы,ЭлементыФормы.КоманднаяПанельИсчисленныеСтраховыеВзносы);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОсновныеНачисления,ЭлементыФормы.КоманднаяПанельОсновныеНачисления);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДополнительныеНачисления,ЭлементыФормы.КоманднаяПанельДополнительныеНачисления);
	СоответствиеТЧ.Вставить(ЭлементыФормы.НеоблагаемыеСуммыДоходов,ЭлементыФормы.КоманднаяПанельНеоблагаемыеСуммыДоходов);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПособияПоСоциальномуСтрахованию,ЭлементыФормы.КоманднаяПанельПособияПоСоциальномуСтрахованию);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПособияПоУходуЗаРебенкомДоПолутораЛет,ЭлементыФормы.КоманднаяПанельПособияПоУходуЗаРебенкомДоПолутораЛет);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

Функция ЭтоЕдиновременноеПособие(ВидПособия)

	Возврат ВидПособия = Перечисления.ВидыПособийСоциальногоСтрахования.ПриПостановкеНаУчетВРанниеСрокиБеременности
			Или ВидПособия = Перечисления.ВидыПособийСоциальногоСтрахования.ПриРожденииРебенка
			Или ВидПособия = Перечисления.ВидыПособийСоциальногоСтрахования.ВСвязиСоСмертью

КонецФункции

Функция ПолучитьВРПособияПоСоцстрахованию(ВидПособия)

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВидПособия",ВидПособия);
	Если ЭтоЕдиновременноеПособие(ВидПособия) Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеНачисленияОрганизаций.Ссылка
		|ИЗ
		|	ПланВидовРасчета.ДополнительныеНачисленияОрганизаций КАК ДополнительныеНачисленияОрганизаций
		|ГДЕ
		|	ДополнительныеНачисленияОрганизаций.ВидПособияСоциальногоСтрахования = &ВидПособия";
	Иначе
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ОсновныеНачисленияОрганизаций.Ссылка
		|ИЗ
		|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисленияОрганизаций
		|ГДЕ
		|	ОсновныеНачисленияОрганизаций.ВидПособияСоциальногоСтрахования = &ВидПособия";
	КонецЕсли;
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Количество() = 1 Тогда
		Выборка.Следующий();
		Возврат Выборка.Ссылка
	Иначе
		Возврат Неопределено
	КонецЕсли;

КонецФункции // ПолучитьВРПособияПоСоцстрахованию()

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//  НЕТ
//
// Возвращаемое значение:
//	Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке(ИмяЭУ = "")
	
	Если ИмяЭУ = "ОсновныеНачисления" Тогда
		СтруктураПараметров = Новый Структура("Ссылка", мСписокВидовДляОсновныхНачислений);
	ИначеЕсли ИмяЭУ = "ДополнительныеНачисления" Тогда
		СтруктураПараметров = Новый Структура("Ссылка", мСписокВидовДляДополнительныхНачислений);
	КонецЕсли;

	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	СтруктураКолонок = Новый Структура();
	СтруктураКолонок.Вставить("ФизЛицо");
	
	// Установить ограничение - изменять видимость колонок для табличной части ИсчисленныеСтраховыеВзносы
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки, СтруктураКолонок);
	
	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента		= Дата;
	мТекущаяОрганизация			= Организация;
	мТекущийПериодРегистрации	= ПериодРегистрации;
	
	ПоказыватьКолонкиДопТарифаПФР = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуВсехОрганизаций(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), "ИспользуетсяТрудЧленовЛетныхЭкипажей");
	ЭлементыФормы.ИсчисленныеСтраховыеВзносы.Колонки.ПФРПоДополнительномуТарифу.Видимость = ПоказыватьКолонкиДопТарифаПФР;
	ЭлементыФормы.ОсновныеНачисления.Колонки.ОблагаетсяПоДополнительномуТарифу.Видимость = ПоказыватьКолонкиДопТарифаПФР;
	ЭлементыФормы.ДополнительныеНачисления.Колонки.ОблагаетсяПоДополнительномуТарифу.Видимость = ПоказыватьКолонкиДопТарифаПФР;
	ЭлементыФормы.ПособияПоСоциальномуСтрахованию.Колонки.ОблагаетсяПоДополнительномуТарифу.Видимость = ПоказыватьКолонкиДопТарифаПФР;
	ЭлементыФормы.ПособияПоУходуЗаРебенкомДоПолутораЛет.Колонки.ОблагаетсяПоДополнительномуТарифу.Видимость = ПоказыватьКолонкиДопТарифаПФР;
	
	мСписокВидовДляОсновныхНачислений = Новый СписокЗначений;
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.НеЯвляетсяОбъектом);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.ОблагаетсяЦеликом);
	мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.ПособияЗаСчетФСС);

	мСписокВидовДляДополнительныхНачислений = Новый СписокЗначений;
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.НеОблагаетсяЦеликом);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.НеЯвляетсяОбъектом);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.ОблагаетсяЦеликом);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.ПособияЗаСчетФСС);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.Матпомощь);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.МатпомощьПриРожденииРебенка);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.ДоговорыГПХ);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеАудиовизуальныеПроизведения);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеГрафическиеПроизведения);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеДругиеМузыкальныеПроизведения);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеИсполнениеПроизведений);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеЛитературныеПроизведения);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеМузыкальноСценическиеПроизведение);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеНаучныеТруды);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеОткрытия);
	мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.АвторскиеСкульптуры);
	
	Если Константы.ИспользуетсяТрудРаботающихВСтудотряде.Получить() Тогда
		мСписокВидовДляОсновныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору);
		мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоГражданскоПравовомуДоговору);
		мСписокВидовДляДополнительныхНачислений.Добавить(Справочники.ДоходыПоСтраховымВзносам.ДоходыСтудентовЗаРаботуВСтудотрядеПоТрудовомуДоговору);
	КонецЕсли;
	
	ЭлементыФормы.ПособияПоСоциальномуСтрахованию.Колонки.ВидПособияСоциальногоСтрахования.ЭлементУправления.ДоступныеЗначения = ПроведениеРасчетов.ПолучитьСписокРасходовПоСоцСтрахованию();
		
	ПособияПоУходуЗаСчетФедеральногоБюджета = Новый СписокЗначений;
	ПособияПоУходуЗаСчетФедеральногоБюджета.Добавить(Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.Чернобыль);
	ПособияПоУходуЗаСчетФедеральногоБюджета.Добавить(Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.Маяк);
	ПособияПоУходуЗаСчетФедеральногоБюджета.Добавить(Перечисления.ВыплатыПособийЗаСчетФедеральногоБюджета.ПодразделенияОсобогоРиска);
	ЭлементыФормы.ПособияПоУходуЗаРебенкомДоПолутораЛет.Колонки.ВыплатаЗаСчетФедеральногоБюджета.ЭлементУправления.ДоступныеЗначения = ПособияПоУходуЗаСчетФедеральногоБюджета;
	
	ЗаполнитьМассивЭУЕНВД();
	
	УправлениеВидимостьюКолонок();
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.ИсчисленныеСтраховыеВзносы;
	КонецЕсли;

КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
 
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - обработчик события нажатия кнопки "Рассчитать ЕСН"
//
Процедура КоманднаяПанельИсчисленныеСтраховыеВзносыРассчитатьВзносы(Кнопка)
	
	РасчетСтраховыхВзносовКлиент.РассчитатьВзносы(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ДействияФормыРассчитатьЕСН()

// Процедура - обработчик события нажатия кнопки "Перерассчитать скидку"
//
Процедура КоманднаяПанельНеоблагаемыеСуммыДоходовРассчитатьСкидку(Кнопка)
	
	РасчетСтраховыхВзносовКлиент.РассчитатьСкидку(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ДействияФормыРассчитатьСкидку()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельИсчисленныеСтраховыеВзносыПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ИсчисленныеСтраховыеВзносы, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1);
	
КонецПроцедуры // КоманднаяПанельИсчисленныеСтраховыеВзносыПодбор()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельНеоблагаемыеСуммыДоходовПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.НеоблагаемыеСуммыДоходов, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1);
	
КонецПроцедуры // КоманднаяПанельНеоблагаемыеСуммыДоходовПодбор()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельОсновныеНачисленияПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ОсновныеНачисления, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1);
	
КонецПроцедуры // КоманднаяПанельОсновныеНачисленияПодбор()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельДополнительныеНачисленияПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ДополнительныеНачисления, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1);
	
КонецПроцедуры // КоманднаяПанельДополнительныеНачисленияПодбор()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельПособияПоСоциальномуСтрахованиюПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ПособияПоСоциальномуСтрахованию, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1);
	
КонецПроцедуры // КоманднаяПанельПособияПоСоциальномуСтрахованиюПодбор()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельПособияПоУходуЗаРебенкомДоПолутораЛетПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ПособияПоУходуЗаРебенкомДоПолутораЛет, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1);
	
КонецПроцедуры // КоманднаяПанельПособияПоУходуЗаРебенкомДоПолутораЛетПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	Если мТекущаяОрганизация <>  Организация Тогда
		
		мТекущаяОрганизация = Организация;
		ИсчисленныеСтраховыеВзносы.Очистить();
		УправлениеВидимостьюКолонок();
		
	КонецЕсли;
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	ПриИзмененииПериодаРегистрации();
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	ПриИзмененииПериодаРегистрации();
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	ПриИзмененииПериодаРегистрации();
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

// Процедура - обработчик события нажатия кнопки "Заполнить и рассчитать"
//
Процедура КнопкаЗаполнитьНажатие(Кнопка)
	
	РасчетСтраховыхВзносовКлиент.ЗаполнитьИРассчитать(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // КнопкаЗаполнитьНажатие()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура - обработчик оповещения о выборе, присланного формой выбора
//
Процедура ВзносыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Физлицо = ВыбранноеЗначение.Физлицо;
	
	ТабличнаяЧасть = Элемент.Значение;
	Если ТабличнаяЧасть.НайтиСтроки(Новый Структура("Физлицо", Физлицо)).Количество() = 0 Тогда
		ТабличнаяЧасть.Добавить().Физлицо = Физлицо;
	КонецЕсли;
	
КонецПроцедуры // ИсчисленныеСтраховыеВзносыОбработкаВыбора()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = Новый Цвет(255, 0, 0);
		КонецЕсли;
		Если Элемент.Имя = "ПособияПоСоциальномуСтрахованию" Тогда
			ОформлениеСтроки.Ячейки.ЗаголовокСтраховогоСлучая.Видимость = Ложь;
			ОформлениеСтроки.Ячейки.ЗаголовокПериодаОплаты.Видимость = Ложь;
			ПоказыватьПериод = Не ЭтоЕдиновременноеПособие(ДанныеСтроки.ВидПособияСоциальногоСтрахования);
			ОформлениеСтроки.Ячейки.ПериодДействияНачало.Видимость = ПоказыватьПериод;
			ОформлениеСтроки.Ячейки.ПериодДействияКонец.Видимость = ПоказыватьПериод;
			ОформлениеСтроки.Ячейки.ОплаченныеДни.Видимость = ПоказыватьПериод;
		Иначе
			
		КонецЕсли;
	КонецЦикла;
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(Элемент, ОформленияСтрок);
	
КонецПроцедуры // ОсновныеНачисленияПриПолученииДанных()

// Процедура - обработчик оповещения о выборе, присланного формой выбора
//
Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТабличнаяЧасть = Элемент.Значение;
	Если ОсновныеНачисления.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		НоваяСтрока = ТабличнаяЧасть.Добавить();
		НоваяСтрока.Сотрудник = ВыбранноеЗначение;
		НоваяСтрока.ФизЛицо = ВыбранноеЗначение.ФизЛицо;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля ввода физлица
//
Процедура ФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ФизЛицоНачалоВыбора()

Процедура ФизЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, мГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ФизЛицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		СтандартнаяОбработка = Ложь;
		Элемент.Значение = ВыбранноеЗначение.Физлицо;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 1, Текст, Организация, Истина);
	
КонецПроцедуры // ФизЛицоАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 1, Текст, Организация, Истина);
	
КонецПроцедуры // ФизЛицоОкончаниеВводаТекста()

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 5, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // ОсновныеНачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // СотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // СотрудникОкончаниеВводаТекста()

Процедура ДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	Если Организация.Пустая() Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Не выбрана организация!");
		Возврат;
	КонецЕсли;
		
	РаботаСДиалогамиЗК.ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, ЭтаФорма, Ссылка, Организация, СтандартнаяОбработка, Истина);
		
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОсновныеНачисления

Процедура ОсновныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода вида начисления
Процедура ОсновныеНачисленияВидРасчетаПриИзменении(Элемент)
	
	Код = Элемент.Значение.КодДоходаСтраховыеВзносы;
	Если мСписокВидовДляОсновныхНачислений.НайтиПоЗначению(Код) <> Неопределено  Тогда
		ЭлементыФормы.ОсновныеНачисления.ТекущиеДанные.ВидДохода = Код;
	КонецЕсли;
	
КонецПроцедуры // ОсновныеНачисленияВидРасчетаПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода кода по ЕСН
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура ОсновныеНачисленияВидДоходаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ДоходыПоСтраховымВзносам.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаРасчетСтраховыхВзносов");
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение = мСписокВидовДляОсновныхНачислений;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.Открыть();
	
КонецПроцедуры // ОсновныеНачисленияКодДоходаЕСННачалоВыбора()

Процедура ОсновныеНачисленияВидДоходаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ОсновныеНачисления"), Тип("СправочникСсылка.ДоходыПоСтраховымВзносам"));
КонецПроцедуры

Процедура ОсновныеНачисленияВидДоходаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ОсновныеНачисления"), ЭтаФорма, Тип("СправочникСсылка.ДоходыПоСтраховымВзносам"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ДополнительныеНачисления

Процедура ДополнительныеНачисленияСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
КонецПроцедуры

Процедура ДополнительныеНачисленияВидРасчетаПриИзменении(Элемент)
	Код = Элемент.Значение.КодДоходаСтраховыеВзносы;
	Если мСписокВидовДляДополнительныхНачислений.НайтиПоЗначению(Код) <> Неопределено  Тогда
		ЭлементыФормы.ДополнительныеНачисления.ТекущиеДанные.ВидДохода = Код;
	КонецЕсли;
КонецПроцедуры

Процедура ДополнительныеНачисленияВидДоходаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбора = Справочники.ДоходыПоСтраховымВзносам.ПолучитьФормуВыбора("ФормаВыбора", Элемент, "дляДокументаРасчетСтраховыхВзносов");
	ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
	ФормаВыбора.Отбор.Ссылка.ВидСравнения = ВидСравнения.ВСписке;
	ФормаВыбора.Отбор.Ссылка.Значение = мСписокВидовДляДополнительныхНачислений;
	ФормаВыбора.Отбор.Ссылка.Использование = Истина;
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ДополнительныеНачисленияВидДоходаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ДополнительныеНачисления"), Тип("СправочникСсылка.ДоходыПоСтраховымВзносам"));
КонецПроцедуры

Процедура ДополнительныеНачисленияВидДоходаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке("ДополнительныеНачисления"), ЭтаФорма, Тип("СправочникСсылка.ДоходыПоСтраховымВзносам"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПособияПоСоциальномуСтрахованию

Процедура ПособияПоСоциальномуСтрахованиюПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекущаяСтрока.УчитыватьКакНовыйСтраховойСлучай = Истина;
		ТекущаяСтрока.СпособФинансированияПособий = Перечисления.СпособыФинансированияПособийСоцстрахования.ЗаСчетФСС;
		ТекущаяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
		ТекущаяСтрока.ДокументОснование = Документы.НачислениеПоБольничномуЛисту.ПустаяСсылка();
	КонецЕсли;
	
	Если Элемент.ТекущаяКолонка.Имя = "ВидРасчета" Тогда
		
		ОграничениеТипа = Новый ОписаниеТипов(?(ЭтоЕдиновременноеПособие(ТекущаяСтрока.ВидПособияСоциальногоСтрахования),
			"ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций",
			"ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
		
		Элемент.Колонки.ВидРасчета.ЭлементУправления.ОграничениеТипа = ОграничениеТипа;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПособияПоСоциальномуСтрахованиюСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ПособияПоСоциальномуСтрахованию.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
КонецПроцедуры

Процедура ПособияПоСоциальномуСтрахованиюВидПособияСоциальногоСтрахованияПриИзменении(Элемент)

	ТекущаяСтрока = ЭлементыФормы.ПособияПоСоциальномуСтрахованию.ТекущаяСтрока;
	
	Если ЭтоЕдиновременноеПособие(ТекущаяСтрока.ВидПособияСоциальногоСтрахования) Тогда
		ОграничениеТипаНачисления = Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций");
		ОграничениеТипаДокумента = Новый ОписаниеТипов("ДокументСсылка.НачислениеЕдиновременныхПособийЗаСчетФСС,ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций,ДокументСсылка.РегистрацияРазовыхНачисленийРаботниковОрганизаций,ДокументСсылка.Сторнирование");
	Иначе
		ОграничениеТипаНачисления = Новый ОписаниеТипов("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций");
		ОграничениеТипаДокумента = Новый ОписаниеТипов("ДокументСсылка.НачислениеПоБольничномуЛисту,ДокументСсылка.ОплатаПоСреднемуЗаработку,ДокументСсылка.НачислениеОтпускаРаботникамОрганизаций,ДокументСсылка.НачислениеЗарплатыРаботникамОрганизаций,ДокументСсылка.РегистрацияРазовыхНачисленийРаботниковОрганизаций,ДокументСсылка.Сторнирование");
	КонецЕсли;
	
	ТекущаяСтрока.ДокументОснование	= ОграничениеТипаДокумента.ПривестиЗначение(ТекущаяСтрока.ДокументОснование);
	ТекущаяСтрока.ВидРасчета		= ОграничениеТипаНачисления.ПривестиЗначение(ТекущаяСтрока.ВидРасчета);
	
	НовыйВР = ПолучитьВРПособияПоСоцстрахованию(ТекущаяСтрока.ВидПособияСоциальногоСтрахования);
	Если ЗначениеЗаполнено(НовыйВР) Тогда
		ТекущаяСтрока.ВидРасчета = НовыйВР
	КонецЕсли;
	
КонецПроцедуры

Процедура ПособияПоСоциальномуСтрахованиюВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ВидПособия = ЭлементыФормы.ПособияПоСоциальномуСтрахованию.ТекущаяСтрока.ВидПособияСоциальногоСтрахования;
	Если ЭтоЕдиновременноеПособие(ВидПособия) Тогда
		ФормаВыбораВидаРасчета = ПланыВидовРасчета.ДополнительныеНачисленияОрганизаций.ПолучитьФормуВыбора( , Элемент, Ссылка);
	Иначе
		ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора( , Элемент, Ссылка);
	КонецЕсли;
	
	ФормаВыбораВидаРасчета.Отбор.ВидПособияСоциальногоСтрахования.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбораВидаРасчета.Отбор.ВидПособияСоциальногоСтрахования.Значение		= ВидПособия;
	ФормаВыбораВидаРасчета.Отбор.ВидПособияСоциальногоСтрахования.Использование	= Истина;
	
	ФормаВыбораВидаРасчета.ПараметрТекущаяСтрока = Элемент.Значение;
	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура ПособияПоСоциальномуСтрахованиюВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("ВидПособияСоциальногоСтрахования", ЭлементыФормы.ПособияПоСоциальномуСтрахованию.ТекущаяСтрока.ВидПособияСоциальногоСтрахования), Элемент.ТипЗначения.Типы()[0]);
	
КонецПроцедуры // ПособияПоСоциальномуСтрахованиюВидРасчетаАвтоПодборТекста()

Процедура ПособияПоСоциальномуСтрахованиюВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("ВидПособияСоциальногоСтрахования", ЭлементыФормы.ПособияПоСоциальномуСтрахованию.ТекущаяСтрока.ВидПособияСоциальногоСтрахования), ЭтаФорма, Элемент.ТипЗначения.Типы()[0], мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // ПособияПоСоциальномуСтрахованиюВидРасчетаОкончаниеВводаТекста()

Процедура ПособияПоСоциальномуСтрахованиюДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДляВыбора = Новый СписокЗначений;
	
	Если ЭтоЕдиновременноеПособие(ЭлементыФормы.ПособияПоСоциальномуСтрахованию.ТекущаяСтрока.ВидПособияСоциальногоСтрахования) Тогда
		
		СписокДляВыбора.Добавить(Документы.НачислениеЕдиновременныхПособийЗаСчетФСС, "Начисление единовременных пособий за счет ФСС");
		СписокДляВыбора.Добавить(Документы.НачислениеЗарплатыРаботникамОрганизаций, "Начисление зарплаты");		
		СписокДляВыбора.Добавить(Документы.РегистрацияРазовыхНачисленийРаботниковОрганизаций, "Регистрация разовых начислений");
		СписокДляВыбора.Добавить(Документы.Сторнирование, "Сторнирование");
		
	Иначе
		
		СписокДляВыбора.Добавить(Документы.НачислениеПоБольничномуЛисту, "Начисление по больничному листу");
		СписокДляВыбора.Добавить(Документы.ОплатаПоСреднемуЗаработку, "Оплата по среднему заработку");
		СписокДляВыбора.Добавить(Документы.НачислениеОтпускаРаботникамОрганизаций, "Начисление отпусков сотрудникам");
		СписокДляВыбора.Добавить(Документы.НачислениеЗарплатыРаботникамОрганизаций, "Начисление зарплаты");		
		СписокДляВыбора.Добавить(Документы.РегистрацияРазовыхНачисленийРаботниковОрганизаций, "Регистрация разовых начислений");
		СписокДляВыбора.Добавить(Документы.Сторнирование, "Сторнирование");
		
	КонецЕсли;
	
	ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(СписокДляВыбора,Элемент,);
	
	Если Не ЭлементСписка = Неопределено Тогда
		ФормаВыбора = ЭлементСписка.Значение.ПолучитьФормуВыбора( , Элемент, Ссылка);
		Если Не ЭлементСписка.Значение = Документы.Сторнирование Тогда
			ФормаВыбора.Отбор.Организация.Установить(Организация);
		КонецЕсли;
		Типы = Новый Массив;
		Типы.Добавить(ТипЗнч(ЭлементСписка.Значение.ПустаяСсылка()));
		ОграничениеТипаДокумента = Новый ОписаниеТипов(Типы);
		
		ФормаВыбора.ПараметрТекущаяСтрока = ОграничениеТипаДокумента.ПривестиЗначение(Элемент.Значение);
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПособияПоСоциальномуСтрахованию

Процедура ПособияПоУходуЗаРебенкомДоПолутораЛетПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущаяСтрока.ВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПособиеПоУходуЗаРебенкомДо1_5Лет;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПособияПоУходуЗаРебенкомДоПолутораЛетВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбораВидаРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПолучитьФормуВыбора( , Элемент, Ссылка);
	ФормаВыбораВидаРасчета.Отбор.ВидПособияСоциальногоСтрахования.ВидСравнения	= ВидСравнения.Равно;
	ФормаВыбораВидаРасчета.Отбор.ВидПособияСоциальногоСтрахования.Значение		= Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет;
	ФормаВыбораВидаРасчета.Отбор.ВидПособияСоциальногоСтрахования.Использование	= Истина;
	
	ФормаВыбораВидаРасчета.ПараметрТекущаяСтрока = Элемент.Значение;
	ФормаВыбораВидаРасчета.Открыть();
	
КонецПроцедуры

Процедура ПособияПоУходуЗаРебенкомДоПолутораЛетВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, Новый Структура("ВидПособияСоциальногоСтрахования", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет), Элемент.ТипЗначения.Типы()[0]);
	
КонецПроцедуры // ПособияПоУходуЗаРебенкомДоПолутораЛетВидРасчетаАвтоПодборТекста()

Процедура ПособияПоУходуЗаРебенкомДоПолутораЛетВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, Новый Структура("ВидПособияСоциальногоСтрахования", Перечисления.ВидыПособийСоциальногоСтрахования.ПоУходуЗаРебенкомДоПолутораЛет), ЭтаФорма, Элемент.ТипЗначения.Типы()[0], мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // ПособияПоУходуЗаРебенкомДоПолутораЛетВидРасчетаОкончаниеВводаТекста()

Процедура ПособияПоУходуЗаРебенкомДоПолутораЛетДокументОснованиеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокДляВыбора = Новый СписокЗначений;
	СписокДляВыбора.Добавить(Документы.НачислениеЗарплатыРаботникамОрганизаций, "Начисление зарплаты");		
	СписокДляВыбора.Добавить(Документы.РегистрацияРазовыхНачисленийРаботниковОрганизаций, "Регистрация разовых начислений");
	СписокДляВыбора.Добавить(Документы.Сторнирование, "Сторнирование");
	ЭлементСписка = ЭтаФорма.ВыбратьИзСписка(СписокДляВыбора,Элемент,);
	
	Если Не ЭлементСписка = Неопределено Тогда
		ФормаВыбора = ЭлементСписка.Значение.ПолучитьФормуВыбора( , Элемент, Ссылка);
		Если Не ЭлементСписка.Значение = Документы.Сторнирование Тогда
			ФормаВыбора.Отбор.Организация.Установить(Организация);
		КонецЕсли;
		Типы = Новый Массив;
		Типы.Добавить(ТипЗнч(ЭлементСписка.Значение.ПустаяСсылка()));
		ОграничениеТипаДокумента = Новый ОписаниеТипов(Типы);
		
		ФормаВыбора.ПараметрТекущаяСтрока = ОграничениеТипаДокумента.ПривестиЗначение(Элемент.Значение);
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ