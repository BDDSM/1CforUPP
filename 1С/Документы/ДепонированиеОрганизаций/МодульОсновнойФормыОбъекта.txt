////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОповещаемыеВедомости;


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ДепонированиеЗаработнойПлаты,ЭлементыФормы.КоманднаяПанельДепонирование.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

Процедура УстановитьВидимостьСубконто(КоличествоСубконто)

	Для Ном = 1 По 3 Цикл

		Если (ЗначениеЗаполнено(СчетУчетаРасходов)) И (Ном <= КоличествоСубконто) Тогда
			ЭлементыФормы["НадписьСубконто"+Ном].Заголовок = СчетУчетаРасходов.ВидыСубконто[Ном-1].ВидСубконто.Наименование;
			ЭлементыФормы["НадписьСубконто"+Ном].Видимость   = Истина;
			ЭлементыФормы["Субконто"+Ном].Видимость          = Истина;
		Иначе
			ЭлементыФормы["НадписьСубконто"+Ном].Видимость   = Ложь;
			ЭлементыФормы["Субконто"+Ном].Видимость          = Ложь;
		КонецЕсли;

	КонецЦикла;
    	
КонецПроцедуры // УстановитьВидимостьСубконто()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ

		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Ведомость");
	СтруктураКолонок.Вставить("Сумма");

	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ДепонированиеЗаработнойПлаты.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции.
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	Если НЕ ЗначениеЗаполнено(СчетУчетаРасходов) Тогда
		УстановитьВидимостьСубконто(0)
	Иначе
		УстановитьВидимостьСубконто(СчетУчетаРасходов.ВидыСубконто.Количество());
	КонецЕсли;
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.ДепонированиеЗаработнойПлаты;
	КонецЕсли;
	УстановитьЗаголовкиОрганизацийВФорме();
	
	УпрощенныйУчетВзаиморасчетов = ПроцедурыУправленияПерсоналом.ЗначениеУчетнойПолитикиПоПерсоналуОрганизации(глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"), Организация, "УпрощенныйУчетВзаиморасчетов");
	Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Прочитать();
	ТолькоПросмотр = УпрощенныйУчетВзаиморасчетов И Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Количество() > 0;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	мОповещаемыеВедомости = Новый Соответствие;
	// Помещаем в список старый набор ведомостей
	Если Проведен Тогда
		ТаблицаДвижений = Движения.СведенияОВыплатахРаботникамОрганизацийПоПлатежнымВедомостям.Выгрузить();
		ТаблицаДвижений.Свернуть("Ведомость");
		Для каждого СтрокаТЧ Из ТаблицаДвижений Цикл
			мОповещаемыеВедомости.Вставить(СтрокаТЧ.Ведомость, СтрокаТЧ.Ведомость)
		КонецЦикла; 
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	// Оповестим оплачиваемые документы выплаты зарплаты
	Если Проведен Тогда
		// Помещаем в список текущий набор ведомостей
		Для каждого СтрокаТЧ Из ДепонированиеЗаработнойПлаты Цикл
			мОповещаемыеВедомости.Вставить(СтрокаТЧ.Ведомость, СтрокаТЧ.Ведомость)
		КонецЦикла;
	КонецЕсли;
	Если мОповещаемыеВедомости.Количество() > 0 Тогда
		Оповестить("ИзменениеВыплатыПоВедомостиРегл", мОповещаемыеВедомости);
	КонецЕсли;	

КонецПроцедуры // ПослеЗаписи()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура КоманднаяПанельДепонированиеОбновить(Кнопка)
	
	РезультатЗапроса = ПолучитьДанныеПлатежнойВедомостиДляДепонирования(ДепонированиеЗаработнойПлаты.ВыгрузитьКолонку("Ведомость"));
	Для каждого СтрокаТЧ Из ДепонированиеЗаработнойПлаты Цикл
		СтрокаРезультата = РезультатЗапроса.Найти(СтрокаТЧ.Ведомость,"Ссылка");
		Если СтрокаРезультата <> Неопределено Тогда
			СтрокаТЧ.Сумма = СтрокаРезультата.Сумма;
		Иначе
			СтрокаТЧ.Сумма = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура КоманднаяПанельДепонированиеЗаполнить(Кнопка)
	
	Если ДепонированиеЗаработнойПлаты.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
	КонецЕсли;
	
	Автозаполнение();
	
КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры


// Процедура открывает журнал проводок БУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКт(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка);

КонецПроцедуры

// Процедура открывает журнал проводок НУ с отбором по текущему регистратору
//
Процедура ДействияФормыПроводкиДтКтНУ(Кнопка)

	БухгалтерскийУчет.ОткрытьЖурналПроводок(Ссылка, "НУ");

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;

КонецПроцедуры // ОрганизацияПриИзменении()

Процедура СчетУчетаРасходовПриИзменении(Элемент)
	
	КоличествоСубконто = СчетУчетаРасходов.ВидыСубконто.Количество();
	УстановитьВидимостьСубконто(КоличествоСубконто);

	Если КоличествоСубконто > 0 Тогда
		Субконто1 = СчетУчетаРасходов.ВидыСубконто[0].ВидСубконто.ТипЗначения.ПривестиЗначение(Субконто1);
	КонецЕсли;

	Если КоличествоСубконто > 1 Тогда
		Субконто2 = СчетУчетаРасходов.ВидыСубконто[1].ВидСубконто.ТипЗначения.ПривестиЗначение(Субконто2);
	КонецЕсли;

	Если КоличествоСубконто > 2 Тогда
		Субконто3 = СчетУчетаРасходов.ВидыСубконто[2].ВидСубконто.ТипЗначения.ПривестиЗначение(Субконто3);
	КонецЕсли;

КонецПроцедуры

Процедура СчетУчетаРасходовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = БухгалтерскийУчетДополнительный.СчетМожноИспользоватьВПроводках(ВыбранноеЗначение);
КонецПроцедуры

Процедура Субконто1НачалоВыбора(Элемент, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент, Организация)	
КонецПроцедуры

Процедура Субконто1АвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент, Организация)	
КонецПроцедуры

Процедура Субконто1ОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	БухгалтерскийУчет.УказатьВладельцаПолюВвода(Элемент, Организация)
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОЙ ЧАСТИ и ее РЕКВИЗИТОВ 

Процедура ДепонированиеЗаработнойПлатыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если Элемент.ТекущиеДанные.Ведомость.Пустая() И НЕ ОтменаРедактирования Тогда
		Сообщить("Не указана платежная ведомость!");
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

Процедура ДепонированиеЗаработнойПлатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ЗначениеЗаполнено(Организация) И НЕ (Элемент.ТекущиеДанные=Неопределено ИЛИ НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.Ведомость)) Тогда
		Организация = Элемент.ТекущиеДанные.Ведомость.Организация;
	КонецЕсли;
КонецПроцедуры

Процедура ДепонированиеЗаработнойПлатыВедомостьПриИзменении(Элемент)
	
	РезультатЗапроса = ПолучитьДанныеПлатежнойВедомостиДляДепонирования(Элемент.Значение);

	Если РезультатЗапроса.Количество() = 1 Тогда
		ЭлементыФормы.ДепонированиеЗаработнойПлаты.ТекущиеДанные.Сумма = РезультатЗапроса[0].Сумма
	Иначе	
		ЭлементыФормы.ДепонированиеЗаработнойПлаты.ТекущиеДанные.Сумма = 0
	КонецЕсли;
	
КонецПроцедуры

Процедура ДепонированиеЗаработнойПлатыВедомостьНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомДополнительный.ОткрытьФормуВыбораПлатежныхВедомостейОрганизации(Элемент, СтандартнаяОбработка, Организация, Перечисления.СпособыВыплатыЗарплаты.ЧерезКассу) 

КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.НадписьОрганизация.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭтаФорма.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Депонирование организаций");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()