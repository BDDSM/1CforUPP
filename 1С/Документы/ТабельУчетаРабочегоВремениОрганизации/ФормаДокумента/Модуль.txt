////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит последнюю установленную дату документа - для проверки перехода документа в другой период
Перем мТекущаяДатаДокумента;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

//  Соответствие символа обозначения времени и ссылки на классификатор
//  использования рабочего времени
Перем мБуквенныеОбозначения;

// Массив строк "Первый", "Второй", "Третий" - приставки элементов табличной части документа
Перем МассивПриставок;

// Перечисление.СпособВводаДанных.ПоДням необходима для сравнения и присвоения значений переменных
Перем СпособВводаДанныхПоДням;

// Пустая ссылка на справочник Классификатор использования рабочего времени
Перем мПустаяСсылкаКлассификатора;

// Ссылка на пустое значение справочника "СотрудникиОрганизации" соответственно
Перем  ПустойСотрудникОрганизации;

// количество секунд в 14 днях, используется для получения 15 числа месяца
Перем ЧетырнадцатьДней;

// Количество секунд в 15 днях, используется для получения 16 числа месяца
Перем ПятнадцатьДней;

// Соответствие используется для заполнения табличной части в целом за период
Перем СоответствиеДляПоискаСотрудника;


// Список ячеек, при активачии которых можно определить строку таблицы ОтработанноеВремяВЦеломЗаПериод
Перем СписокИменЯчеекДляОпределенияСтроки;

// Список соответствий 1 - пн, 2 - вт,.... 7 - вс
Перем ДниНедели;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

Перем СоответствиеРасчетаИтоговДней;
Перем СоответствиеРасчетаИтоговЧасов;

Перем СоответствиеСотрудникГрафик;
Перем СоответствиеГрафикНорма;

Перем ПредыдущаяДатаНачалаПериода;

Перем ПредыдущаяДатаОкончанияПериода;


Перем ТекстМакета;
Перем ОтображатьСправкуФормы;

// Массив видов времени из классификатора, по индексам которого сортируется
// таблица ОтработанноеВремяВЦеломЗаПериод
Перем ПорядокСортировкиВидовВремени;

Перем КлассификаторРабота;
Перем КлассификаторРаботаВечерниеЧасы;
Перем КлассификаторРаботаНочныеЧасы;
Перем КлассификаторВыходныеДни;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ РАБОТЫ С ДИНАМИЧЕСКОЙ СПРАВКОЙ

Процедура ПереключитьВидимостьСправкиФормы()
	
	ОтображатьСправкуФормы = Не ОтображатьСправкуФормы;
	УстановитьВидимостьСправкиФормы();
	
КонецПроцедуры

Процедура ПодготовитьСправкуФормы()
	
	УсловиеВидимости = (СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням) И (ОтработанноеВремя.Количество() = 0)
			ИЛИ (СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод) И (ОтработанноеВремяВЦеломЗаПериод.Количество() = 0);
	ЗаполнятьОтработанноеВремя = ?(УсловиеВидимости, "block", "none");
	
	ЦветФонаСправки		= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветФона());
	ЦветСсылкиСправки	= РаботаСДиалогами.ВернутьШестнадцатиричноеПредставлениеЦвета(РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки());
	
	ЭлементыФормы.ПанельСправкиФормы.ЦветРамки			= РаботаСДиалогами.ВстроеннаяСправка_ЦветРамки();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветФона	= РаботаСДиалогами.ВстроеннаяСправка_ЦветФона();
	ЭлементыФормы.НадписьЗакрытьСправкуФормы.ЦветТекста	= РаботаСДиалогами.ВстроеннаяСправка_ЦветСсылки();
	
	ТекстМакетаВстроеннойСправки =
	"<HTML>
	|	<HEAD>
	|		<META http-equiv=Content-Type content=""text/html; charset=utf-8"">" + РаботаСДиалогами.ВстроеннаяСправка_СтилиДокумента() + "
	|	</HEAD>
	|
	|	<BODY aLink="+ЦветСсылкиСправки+" vLink="+ЦветСсылкиСправки+" link="+ЦветСсылкиСправки+" bgColor="+ЦветФонаСправки+" scroll=auto><FONT face=""MS Sans Serif"" size=1>
	|		<IMG src="+РаботаСДиалогами.ПолучитьПутьККартинкеДляHTML(БиблиотекаКартинок.КартинкаВстроеннойСправкиФормы, ЭлементыФормы.ВстроеннаяСправка)+">
	|		<DIV>В Табель учета рабочего времени можно вводить данные подробно - по дням, или сводно - за весь месяц. В этом документе данные вводятся <P id=СпособВводаДанных style=""DISPLAY:inline"">"+ПолучитьПредставлениеСпособаВводаДанных()+"</P>. Вы можете <A id=Команда href=""V8:SwitchInputMedium"">изменить способ ввода данных</A>.</DIV>
	|		<DIV>Рабочее время вводится за определенный месяц (в этом документе - <A id=АктивизироватьЭУ href=""V8:ПериодРегистрации""><P id=ПериодРегистрации style=""DISPLAY:inline"">"+ПолучитьПредставлениеПериодаРегистрации()+"</P></A>), при этом вы можете ввести данные <P id=СпособУказанияПериода style=""DISPLAY:inline"">"+ПолучитьПредставлениеСпособовУказанияПериода()+"</P>.</DIV>
	|		<DIV id=ОтработанноеВремя style=""DISPLAY:"+ЗаполнятьОтработанноеВремя+""">Этот документ еще не заполнен. Пользуйтесь командой ""Заполнить"" для заполнения документа списком сотрудников. Для того, чтобы ограничиться сотрудниками определенного подразделения, <A id=АктивизироватьЭУ href=""V8:ПодразделениеОрганизации"">выберите подразделение</A>, после чего <A id=Команда href=""V8:FillEmpoyeeList"">заполните список сотрудников.</A></DIV>
	|		<DIV>При редактировании данных вы можете просто вводить число отработанных часов, вводить буквенное обозначение использования рабочего времени (Я - явка, Б - больничный и т.д., подробнее - см. <A id=Команда href=""V8:OpenHelp"">справку</A>). Если в один день необходимо ввести несколько видов использования рабочего времени, вы можете ввести несколько буквенных обозначений с отработанными часами, например: ""Я 6, Н 2"" и т.п.</DIV>" 
	+ ТабельУчетаРабочегоВремениОрганизацииПереопределяемый.ДополнитьТекстМакетаВстроеннойСправки() + "
	|	</FONT></BODY>
	|</HTML>";
	
	ЭлементыФормы.ВстроеннаяСправка.УстановитьТекст(ТекстМакетаВстроеннойСправки);
	
КонецПроцедуры

Процедура ОбновитьСправкуФормы(ПолеДанных = Неопределено)
	
	ДокHTML = ЭлементыФормы.ВстроеннаяСправка.Документ;
	
	Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "ДокументОбъект.СпособВводаДанных" Тогда
		ДокHTML.getElementById("СпособВводаДанных").innerText	= ПолучитьПредставлениеСпособаВводаДанных();
		ДокHTML.getElementById("СпособУказанияПериода").innerText	= ПолучитьПредставлениеСпособовУказанияПериода();
		
	КонецЕсли;
	
	Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "ДокументОбъект.ПериодРегистрации" Тогда
		ДокHTML.getElementById("ПериодРегистрации").innerText	= ПолучитьПредставлениеПериодаРегистрации();
	КонецЕсли;
	
	Если ПолеДанных = Неопределено ИЛИ ПолеДанных = "ОтработанноеВремя" Тогда
		УсловиеВидимости = (СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням) И (ОтработанноеВремя.Количество() = 0)
			ИЛИ (СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод) И (ОтработанноеВремяВЦеломЗаПериод.Количество() = 0);
		РаботаСДиалогами.УстановитьВидимостьТекста(ДокHTML, "ОтработанноеВремя", УсловиеВидимости, "block");
	КонецЕсли;
	
КонецПроцедуры // ПоказатьСправкуФормы()

Процедура УстановитьВидимостьСправкиФормы(ОбновитьСправку = Истина)
	
	РаботаСДиалогамиЗК.ИзменитьВидимостьПанелиПоГоризонтали(ЭтаФорма, ОтображатьСправкуФормы, "ОсновнаяПанельДокумента", "СправкиФормы");
	
	ЭлементыФормы.КоманднаяПанельСправкиФормы.Кнопки.ПереключениеСправкиФормы.Пометка = ОтображатьСправкуФормы;
	
	Если ОтображатьСправкуФормы Тогда
		ПодключитьОбработчикИзмененияДанных("Организация",						"ОбновитьСправкуФормы");
		ПодключитьОбработчикИзмененияДанных("СпособВводаДанных",				"ОбновитьСправкуФормы");
		ПодключитьОбработчикИзмененияДанных("ПериодРегистрации",				"ОбновитьСправкуФормы");
		Если ОбновитьСправку Тогда
			ОбновитьСправкуФормы();
		КонецЕсли;
		
	Иначе
		ОтключитьОбработчикИзмененияДанных("Организация");
		ОтключитьОбработчикИзмененияДанных("СпособВводаДанных");
		ОтключитьОбработчикИзмененияДанных("ПериодРегистрации");
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПредставлениеСпособаВводаДанных()
	
	Если  СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		Возврат "по дням";
	Иначе
		Возврат "сводно";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПредставлениеСпособовУказанияПериода()
	
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		Возврат "как за все дни месяца, так и за первую или вторую его половину или за произвольный период";
	Иначе
		Возврат "только целиком за месяц";
	КонецЕсли;
	
КонецФункции

Функция ПолучитьПредставлениеПериодаРегистрации()
	
	МесяцСтрокой = Формат(ПериодРегистрации, "ДФ=ММММ");
	Если ПустаяСтрока(МесяцСтрокой) Тогда
		Возврат "месяц не выбран";
	Иначе
		Возврат "за "+МесяцСтрокой;
	КонецЕсли;
	
КонецФункции

Процедура ВыполнитьКомандуФормы(Команда, ТекущееЗначение = "") Экспорт
	
	Если Команда = "SwitchInputMedium" Тогда
		Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
			СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод;
		Иначе
			СпособВводаДанных = СпособВводаДанныхПоДням;
		КонецЕсли;
		ВводДанныхПоДнямПриИзменении(ЭлементыФормы.СпособВводаДанных);
	ИначеЕсли Команда = "FillEmpoyeeList" Тогда
		Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
			КоманднаяПанельОтработанноеВремяДействиеЗаполнить(ЭлементыФормы.КоманднаяПанельОтработанноеВремя.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнить);
		Иначе
			КоманднаяПанельОтработанноеВремяВЦеломЗаПериодДействиеЗаполнить(ЭлементыФормы.КоманднаяПанельОтработанноеВремяВЦеломЗаПериод.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнить);
		КонецЕсли;
	ИначеЕсли Команда = "OpenHelp" Тогда
		ОткрытьСправку(Метаданные.Документы.ТабельУчетаРабочегоВремениОрганизации);
	КонецЕсли;
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonclick(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnClick(Элемент, pEvtObj, ЭтаФорма);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseout(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOut(Элемент, pEvtObj);
	
КонецПроцедуры

Процедура ВстроеннаяСправкаonmouseover(Элемент, pEvtObj)
	
	РаботаСДиалогами.ПолеHTMLДокументаOnMouseOver(Элемент, pEvtObj);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОтработанноеВремя,ЭлементыФормы.КоманднаяПанельОтработанноеВремя.Кнопки.ПодменюЗаполнить);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод,ЭлементыФормы.КоманднаяПанельОтработанноеВремяВЦеломЗаПериод.Кнопки.ПодменюЗаполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Функция возвращает норму времени в часах на указанный день по указанному сотруднику
Функция ПолучитьНормуВремениПоДню(Сотрудник, НомерДня)
	
	ГрафикСотрудника = СоответствиеСотрудникГрафик.Получить(Сотрудник);
	Если ГрафикСотрудника = Неопределено Тогда
		// Графика по этому сотруднику еще нет, нужно получить
		Запрос = Новый Запрос;
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("Сотрудник", Сотрудник);
		Запрос.УстановитьПараметр("ПериодРегистрации", ПериодРегистрации);
		
		ТекстЗапроса = "ВЫБРАТЬ
			|	ДатаТабеля
			|	
			|ПОМЕСТИТЬ ВТДатыТабеля 
			|	ИЗ (
			|	ВЫБРАТЬ
			|	ДАТАВРЕМЯ(" + Формат(Год(ПериодРегистрации), "ЧГ=4") + ", " + Месяц(ПериодРегистрации) + " , 1) КАК ДатаТабеля
			|	";           
			Для ИндексДня = 2 По День(КонецМесяца(ПериодРегистрации)) Цикл
				ТекстЗапроса = ТекстЗапроса + 
				"ОБЪЕДИНИТЬ ВСЕ
				|ВЫБРАТЬ
				|  ДАТАВРЕМЯ(" + Формат(Год(ПериодРегистрации), "ЧГ=4")+ ", " + Месяц(ПериодРегистрации) + " ," + ИндексДня + ")
				|	";
			КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + ") КАК ДатыТабеля";
		
		Запрос.Текст = ТекстЗапроса;
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	РаботникиОрганизаций.Период,
		|	РаботникиОрганизаций.Сотрудник,
		|	РаботникиОрганизаций.ГрафикРаботы
		|ПОМЕСТИТЬ ВТРаботникиОрганизаций
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций КАК РаботникиОрганизаций
		|ГДЕ	РаботникиОрганизаций.Сотрудник = &Сотрудник
		|	И РаботникиОрганизаций.Период > &ПериодРегистрации
		|	И РаботникиОрганизаций.Период <= КонецПериода(&ПериодРегистрации, МЕСЯЦ)
		|	И РаботникиОрганизаций.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	РаботникиОрганизацийСрезПоследних.Период,
		|	РаботникиОрганизацийСрезПоследних.Сотрудник,
		|	РаботникиОрганизацийСрезПоследних.ГрафикРаботы
		|ИЗ
		|	РегистрСведений.РаботникиОрганизаций.СрезПоследних(&ПериодРегистрации, Сотрудник = &Сотрудник) КАК РаботникиОрганизацийСрезПоследних
		|ГДЕ
		|	РаботникиОрганизацийСрезПоследних.ПричинаИзмененияСостояния <> ЗНАЧЕНИЕ(Перечисление.ПричиныИзмененияСостояния.Увольнение)";
        Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ
		|	ДатыИзмененияГрафика.ДатаТабеля,
		|	ДатыИзмененияГрафика.Сотрудник,
		|	ДатыИзмененияГрафика.Период,
		|	РаботникиОрганизаций.ГрафикРаботы
		|ПОМЕСТИТЬ ВТДатыСотрудникГрафик
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВТДатыТабеля.ДатаТабеля КАК ДатаТабеля,
		|		ВТРаботникиОрганизаций.Сотрудник КАК Сотрудник,
		|		МАКСИМУМ(ВТРаботникиОрганизаций.Период) КАК Период
		|	ИЗ
		|		ВТДатыТабеля КАК ВТДатыТабеля
		|			ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботникиОрганизаций КАК ВТРаботникиОрганизаций
		|			ПО (ВТРаботникиОрганизаций.Период < ВТДатыТабеля.ДатаТабеля)
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВТДатыТабеля.ДатаТабеля,
		|		ВТРаботникиОрганизаций.Сотрудник) КАК ДатыИзмененияГрафика
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВТРаботникиОрганизаций КАК РаботникиОрганизаций
		|		ПО (РаботникиОрганизаций.Период = ДатыИзмененияГрафика.Период)
		|			И (РаботникиОрганизаций.Сотрудник = ДатыИзмененияГрафика.Сотрудник)";
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ 
		|	ГрафикиРаботы.ГрафикРаботы,
		|	ГрафикиРаботы.Дата,
		|	ГрафикиРаботы.ОсновноеЗначение
		|ПОМЕСТИТЬ ВТГрафикиРаботы
		|ИЗ
		|	ВТРаботникиОрганизаций КАК РаботникиОрганизаций
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ГрафикиРаботы
		|ПО
		|	(ГрафикиРаботы.ГрафикРаботы = РаботникиОрганизаций.ГрафикРаботы
		|	ИЛИ ГрафикиРаботы.ГрафикРаботы = РаботникиОрганизаций.Сотрудник)
		|	И ГрафикиРаботы.Месяц = &ПериодРегистрации
		|	И ГрафикиРаботы.План
		|	И ГрафикиРаботы.ВидУчетаВремени = ЗНАЧЕНИЕ(Перечисление.ВидыУчетаВремени.ПоЧасам)";
		Запрос.Выполнить();
		
		Запрос.Текст = "ВЫБРАТЬ 
		|   ЕСТЬNULL(ИндивидуальныйГрафик.ГрафикРаботы, ОбщийГрафик.ГрафикРаботы) КАК ГрафикРаботы,
		|   ДЕНЬ(ДатыТабеля.ДатаТабеля) КАК НомерДня,
		|   ЕСТЬNULL(ИндивидуальныйГрафик.ОсновноеЗначение, ОбщийГрафик.ОсновноеЗначение) КАК НормаЧасов
		|   
		|ИЗ 
		|	ВТДатыСотрудникГрафик КАК ДатыТабеля
		| 
		| ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ИндивидуальныйГрафик
		|ПО
		|	ИндивидуальныйГрафик.ГрафикРаботы = ДатыТабеля.Сотрудник
		|	И ИндивидуальныйГрафик.Дата = ДатыТабеля.ДатаТабеля
		|	И ИндивидуальныйГрафик.Месяц = &ПериодРегистрации
		|	И ИндивидуальныйГрафик.ВидУчетаВремени = Значение(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|	И ИндивидуальныйГрафик.План
		|	
		|ЛЕВОЕ СОЕДИНЕНИЕ
		|	РегистрСведений.ГрафикиРаботыПоВидамВремени КАК ОбщийГрафик
		|ПО 
		|	ОбщийГрафик.ГрафикРаботы = ДатыТабеля.ГрафикРаботы
		|	И ОбщийГрафик.Дата = ДатыТабеля.ДатаТабеля
		|	И ОбщийГрафик.Месяц = &ПериодРегистрации
		|	И ОбщийГрафик.ВидУчетаВремени = Значение(Перечисление.ВидыУчетаВремени.ПоЧасам)
		|	И ОбщийГрафик.План
		|	УПОРЯДОЧИТЬ ПО ГрафикРаботы, НомерДня, НормаЧасов";
		РезультатЗапроса = Запрос.Выполнить();
		
		МассивНормыДней = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("НормаЧасов");
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		ГрафикРаботы = Выборка.ГрафикРаботы;
		
		СоответствиеСотрудникГрафик.Вставить(Сотрудник, ГрафикРаботы);
		СоответствиеГрафикНорма.Вставить(ГрафикРаботы, МассивНормыДней);
		
		Возврат МассивНормыДней[НомерДня-1];
	Иначе
		МассивДней = СоответствиеГрафикНорма.Получить(ГрафикСотрудника);
		Возврат МассивДней[НомерДня-1];
	КонецЕсли;
		
	
КонецФункции // ПолучитьНормуВремениПоДню()


// Процедура проверяет введенное в ячейку значение на присутствие в
// Справочнике КлассификаторИспользованияРабочегоВремени, и нормирует значение
Функция ОбработкаВводаДанныхВЯчейку(Элемент, Текст, Значение, СтандартнаяОбработка, НомерДня)
	Результат = ""; 
	НормаЧасов = ПолучитьНормуВремениПоДню(ЭлементыФормы.ОтработанноеВремя.ТекущаяСтрока.Сотрудник, Число(НомерДня));
	Если НормироватьТекст(Текст, Результат, ,НормаЧасов) Тогда
		Элемент.Значение = Результат;
	Иначе
		Значение = Новый СписокЗначений;
		СтандартнаяОбработка = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
	Для ИндексМассиваПриставок = 0 По 3 Цикл
		ЭлементыФормы.ОтработанноеВремя.ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+НомерДня] = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
		ЭлементыФормы.ОтработанноеВремя.ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"Часов"+НомерДня] = 0;
	КонецЦикла;
	
	СписокВремени = "";
	ИндексМассиваПриставок = 0;
	ПередаваемоеЗначениеЯчейки = Элемент.Значение;
	ПередаваемоеЗначениеЯчейки = Лев(ПередаваемоеЗначениеЯчейки, СтрДлина(ПередаваемоеЗначениеЯчейки)-1);
	ПолучитьВидВремениИКоличествоЧасов(ПередаваемоеЗначениеЯчейки, СписокВремени);
	Для Каждого ЭлементСписка Из СписокВремени Цикл
		Если ИндексМассиваПриставок > 3 Тогда
			Предупреждение("В ячейку можно записать не больше чем 4 вида времени");
			Прервать;
		Иначе
			ЭлементыФормы.ОтработанноеВремя.ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"ВидВремени"+НомерДня] = ЭлементСписка.Ключ;
			ЭлементыФормы.ОтработанноеВремя.ТекущаяСтрока[МассивПриставок[ИндексМассиваПриставок]+"Часов"+НомерДня] = Число(ЭлементСписка.Значение);
			ИндексМассиваПриставок = ИндексМассиваПриставок + 1;
			
		КонецЕсли;
	КонецЦикла;
	Возврат Истина;
КонецФункции // ОбработкаВводаДанныхВЯчейку()

// По тексту из ячейки (текст) возвращает соответствие: ВидВремени (классификатор) - Количество часов
//
Функция ПолучитьВидВремениИКоличествоЧасов(Текст , Результат) Экспорт
	Результат = Новый Соответствие;
	Если ПустаяСтрока(Текст) Тогда
		Возврат Истина;
	КонецЕсли;
	
	РазделительВГруппе = " ";
	РазделительГрупп = Символы.ПС;
	
	ПодСтроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, РазделительГрупп);
	Для ИндексМассива = 0 По ПодСтроки.Количество() - 1 Цикл
		ВидВремениИКоличество = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(ПодСтроки[ИндексМассива], РазделительВГруппе);
		Если ВидВремениИКоличество.Количество() = 2 Тогда
			Код = мБуквенныеОбозначения[ВидВремениИКоличество[0]];
			Количество = Число(ВидВремениИКоличество[1]);
			Результат.Вставить(Код, Количество);
		ИначеЕсли ВидВремениИКоличество.Количество() = 1  Тогда
			Если мБуквенныеОбозначения[ВидВремениИКоличество[0]] = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
				Код = мБуквенныеОбозначения[ВидВремениИКоличество[0]];
				Количество = 0;
				Результат.Вставить(Код, Количество);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецФункции // ПолучитьВидВремениИКоличествоЧасов()

// Функция проверяет введенные в таблице данные на правильность, а также приводит их к нормальному виду
Функция НормироватьТекст(Текст, Результат, НеполныйФормат = Истина, НормаЧасов = 8) Экспорт
	Результат = "";
	Если ПустаяСтрока(Текст) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Разделители = Новый Массив;
	Разделители.Добавить(Символы.ПС);
	Разделители.Добавить(" ");
	Разделители.Добавить("-");
	Разделители.Добавить(";");
	Разделители.Добавить("/");
	Разделители.Добавить(",");
	Разделители.Добавить(":");
	
	//РазделительГрупп = "  ";
	РазделительВГруппе = " ";
	РазделительГрупп = Символы.ПС;
	
	Для Каждого Разделитель из Разделители Цикл
		ПодСтроки = ОбщегоНазначения.РазложитьСтрокуВМассивПодстрок(Текст, Разделитель);
		Если ПодСтроки.Количество() > 1 Тогда
			БылКод = Ложь;
			БылСимволСВозможностьюВводаБезВремени = Ложь;
			Для Каждого ПодСтрока Из Подстроки Цикл
				Код = мБуквенныеОбозначения[СокрЛП(ВРег(ПодСтрока))];
				АнализируемаяСтрока = СпецСокрЛП(ПодСтрока, Разделители);
				Если Код <> НеОпределено Тогда
					Если БылКод Тогда
						Возврат Ложь;
					КонецЕсли;
					
					Если Код = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
						Результат = Результат + ВРег(ПодСтрока) + РазделительГрупп;
						БылКод = Ложь;
						БылСимволСВозможностьюВводаБезВремени = Истина;
					Иначе
						Результат = Результат + ВРег(ПодСтрока);
						БылКод = Истина;	
						БылСимволСВозможностьюВводаБезВремени = Ложь;
					КонецЕсли;
					
				ИначеЕсли ЭтоЧисло(АнализируемаяСтрока) И (БылКод ИЛИ БылСимволСВозможностьюВводаБезВремени) Тогда
					
					Результат = Результат + РазделительВГруппе + ?(АнализируемаяСтрока = "0", Строка(НормаЧасов), АнализируемаяСтрока) + РазделительГрупп;
					БылКод = Ложь;
					БылСимволСВозможностьюВводаБезВремени = Ложь;
				Иначе
					ПодРезультат = "";
					Если НормироватьТекст(ПодСтрока, ПодРезультат, Ложь) Тогда
						Результат = Результат + ПодРезультат;
					Иначе
						Возврат Ложь;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ПустаяСтрока(Результат) Тогда
		Если НеполныйФормат Тогда
			Код = мБуквенныеОбозначения[СокрЛП(ВРег(Текст))];
			Если Код = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
				Результат = СокрЛП(ВРег(Текст)) + РазделительГрупп;
				НормаЧасов = 0;
				Возврат Истина;
			ИначеЕсли Код <> НеОпределено Тогда
				Результат = СокрЛП(ВРег(Текст)) + РазделительВГруппе + Строка(НормаЧасов) + РазделительГрупп;
				Возврат Истина;
			ИначеЕсли ЭтоЧисло(СпецСокрЛП(Текст, Разделители)) Тогда
				Результат = "Я" + РазделительВГруппе + СпецСокрЛП(Текст, Разделители) + РазделительГрупп;
				
				Возврат Истина;
			ИначеЕсли СокрЛП(Текст) = "0" Тогда
				
				Возврат Истина;
			Иначе
				Возврат Ложь;
			КонецЕсли;
		Иначе
			Возврат Ложь;
		КонецЕсли;
	Иначе
		
		Возврат Истина;
	КонецЕсли;
КонецФункции

// Функция, удаляет символы до разделителя слева и справа после разделителя
Функция СпецСокрЛП(Строка, Разделители)
	НоваяСтрока = Строка;
	// удалим лишние символы слева
	Пока Истина Цикл
		Символ = Лев(НоваяСтрока, 1);
		ЭтоРазделитель = Ложь;
		Для Каждого Разделитель Из Разделители Цикл
			Если Символ = Разделитель Тогда
				ЭтоРазделитель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоРазделитель Тогда
			НоваяСтрока = Сред(НоваяСтрока, 2);
			Если ПустаяСтрока(НоваяСтрока) Тогда
				Прервать;
			КонецЕсли;    
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;        
	// удалим лишние символы справа
	Пока Истина Цикл
		Символ = Прав(НоваяСтрока, 1);
		ЭтоРазделитель = Ложь;
		Для Каждого Разделитель Из Разделители Цикл
			Если Символ = Разделитель Тогда
				ЭтоРазделитель = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ЭтоРазделитель Тогда
			НоваяСтрока = Лев(НоваяСтрока, СтрДлина(НоваяСтрока) - 1);
			Если ПустаяСтрока(НоваяСтрока) Тогда
				Прервать;
			КонецЕсли;    
		Иначе
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат НоваяСтрока;
КонецФункции

// Функция определяет, возможно ли переданную строку перевести в число
// Возвращает Истина, если Возможно, иначе Ложь
Функция ЭтоЧисло(Строка)
	Попытка
		Число = Число(Строка);
		Если Число = 0 Тогда
			Возврат Ложь;
		Иначе
			Возврат Истина;
		КонецЕсли;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

// Процедура заполняет таблицу Отработанное время в целом за период
// по данным отаблицы отработанное время
//
Процедура ЗаполнитьТаблицуОтработанноеВремяВЦеломЗаПериод(ВозвращаемаяТаблицаЗначений = Неопределено)
	
	
	ТаблицаОтработанноеВремяВЦеломЗаПериод = Новый ТаблицаЗначений;
	ТаблицаОтработанноеВремяВЦеломЗаПериод = ОтработанноеВремяВЦеломЗаПериод.ВыгрузитьКолонки();
	ТаблицаКолонкиСводногоТабеля = Новый ТаблицаЗначений;
	ТаблицаКолонкиСводногоТабеля = КолонкиСводногоТабеля.ВыгрузитьКолонки();
	ЗначенияТаблицыКолонкиСводногоТабеля = КолонкиСводногоТабеля.Выгрузить();
	
	СписокСотрудниковСНехваткойВидовВремени = Новый Соответствие;
	Для Каждого СтрокаОтработанногоВремени Из ОтработанноеВремя Цикл
		СтрокаТаблицы = ТаблицаОтработанноеВремяВЦеломЗаПериод.Добавить();
		СтрокаТаблицы.Сотрудник = СтрокаОтработанногоВремени.Сотрудник;

		Для ИндексЯчейки = 1 По 31 Цикл
			Для Каждого ТекущаяПриставка Из МассивПриставок Цикл
				Часов = СтрокаОтработанногоВремени[ТекущаяПриставка+"Часов"+ИндексЯчейки];
				Если Часов > 0 Тогда
					ВидВремени = СтрокаОтработанногоВремени[ТекущаяПриставка+"ВидВремени"+ИндексЯчейки];
					СтрокаТаблицыКолонкиСводногоТабеля = ТаблицаКолонкиСводногоТабеля.Найти(ВидВремени, "ВидВремени");
					Если СтрокаТаблицыКолонкиСводногоТабеля = Неопределено Тогда
						Если ТаблицаКолонкиСводногоТабеля.Количество() >= 6 Тогда
							НомерЯчейки = 0;
							СписокСотрудниковСНехваткойВидовВремени.Вставить(СтрокаОтработанногоВремени.Сотрудник, "");
						Иначе
							СтрокаТаблицыКолонкиСводногоТабеля = ТаблицаКолонкиСводногоТабеля.Добавить();
							СтрокаТаблицыКолонкиСводногоТабеля.ВидВремени = ВидВремени;
							СтрокаТаблицыКолонкиСводногоТабеля.НомерСтроки = ТаблицаКолонкиСводногоТабеля.Количество();
							НомерЯчейки = СтрокаТаблицыКолонкиСводногоТабеля.НомерСтроки;
						КонецЕсли;
					Иначе
						НомерЯчейки = СтрокаТаблицыКолонкиСводногоТабеля.НомерСтроки
					КонецЕсли;
					
					Если НомерЯчейки > 0 Тогда
						
						СтрокаТаблицы["ВидВремени" + НомерЯчейки] = ВидВремени;
						СтрокаТаблицы["Часов" + НомерЯчейки] = СтрокаТаблицы["Часов" + НомерЯчейки] + Часов;
						Если СтрокаТаблицы["ВидВремени" + НомерЯчейки] = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы
							ИЛИ СтрокаТаблицы["ВидВремени" + НомерЯчейки] = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
							СтрокаТаблицы["Дней" + НомерЯчейки] = 0;
						Иначе
							СтрокаТаблицы["Дней" + НомерЯчейки] = СтрокаТаблицы["Дней" + НомерЯчейки] + 1;
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если ВозвращаемаяТаблицаЗначений = Неопределено Тогда
		ОтработанноеВремяВЦеломЗаПериод.Очистить();
		КолонкиСводногоТабеля.Очистить();
	    ОтработанноеВремяВЦеломЗаПериод.Загрузить(ТаблицаОтработанноеВремяВЦеломЗаПериод);
		КолонкиСводногоТабеля.Загрузить(ТаблицаКолонкиСводногоТабеля);
		// Вывод предупреждающего сообщения
		КоличествоСотрудниковВСпискеНехваткиВидовВремени = СписокСотрудниковСНехваткойВидовВремени.Количество();
		Если КоличествоСотрудниковВСпискеНехваткиВидовВремени > 0 Тогда
			СтрокаСотрудников = "";
			КоличествоВыведенныхСотрудников = 0;
			Для Каждого ЭлементСписка Из СписокСотрудниковСНехваткойВидовВремени Цикл
				СтрокаСотрудников = СтрокаСотрудников + "," + Символы.ПС + ЭлементСписка.Ключ;
				КоличествоВыведенныхСотрудников = КоличествоВыведенныхСотрудников + 1;
				Если КоличествоВыведенныхСотрудников > 4 И КоличествоСотрудниковВСпискеНехваткиВидовВремени > 5 Тогда
					СтрокаСотрудников = СтрокаСотрудников + " и другие.";
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтрокаСотрудников = Сред(СтрокаСотрудников, 2);
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			ОбработкаКомментариев.ДобавитьСообщение("Указанным сотрудникам выведены не все виды времени:" + Символы.ПС + СтрокаСотрудников, Перечисления.ВидыСообщений.ВажнаяИнформация);
			ОбработкаКомментариев.ПоказатьСообщения();
		ИначеЕсли КолонкиСводногоТабеля.Количество() = 0 Тогда
			КолонкиСводногоТабеля.Загрузить(ЗначенияТаблицыКолонкиСводногоТабеля);
		КонецЕсли;
		УстановитьВидимостьКолонокТаблицыОтработанноеВремяВЦеломЗаПериод(, Истина);
	Иначе
	    ВозвращаемаяТаблицаЗначений = ТаблицаОтработанноеВремяВЦеломЗаПериод;
	КонецЕсли;
КонецПроцедуры // ЗаполнитьТаблицуОтработанноеВремяВЦеломЗаПериод()

// Функция возвращает Истина, если данные сводного табеля отличаются от данных
// полученных суммированием данных подневного табеля
Функция СводныйТабельИзменен()
	ПолучаемаяТаблицаСводногоТабеля = Новый ТаблицаЗначений;
	ЗаполнитьТаблицуОтработанноеВремяВЦеломЗаПериод(ПолучаемаяТаблицаСводногоТабеля);
	КоличествоСтрок = ОтработанноеВремяВЦеломЗаПериод.Количество();
	Если КоличествоСтрок = ПолучаемаяТаблицаСводногоТабеля.Количество() Тогда
		
		Для СчетчикСотен = 0 По Цел(КоличествоСтрок /100) Цикл
			ПерваяСтрока = "";
			ВтораяСтрока = "";
			Для СчетчикСтрок = СчетчикСотен*100 По Мин( (СчетчикСотен+1)*100-1, КоличествоСтрок-1) Цикл
				ПерваяСтрока = ПерваяСтрока + ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].Сотрудник
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].ВидВремени1
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].ВидВремени2
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].ВидВремени3
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].ВидВремени4
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].ВидВремени5
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].ВидВремени6
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].Дней1
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].Дней2
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].Дней3
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].Дней4
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].Дней5
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].Дней6
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].Часов1
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].Часов2
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].Часов3
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].Часов4
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].Часов5
					+ ОтработанноеВремяВЦеломЗаПериод[СчетчикСтрок].Часов6;
					
				ВтораяСтрока = ВтораяСтрока + ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].Сотрудник
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].ВидВремени1
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].ВидВремени2
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].ВидВремени3
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].ВидВремени4
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].ВидВремени5
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].ВидВремени6
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].Дней1
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].Дней2
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].Дней3
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].Дней4
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].Дней5
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].Дней6
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].Часов1
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].Часов2
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].Часов3
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].Часов4
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].Часов5
					+ ПолучаемаяТаблицаСводногоТабеля[СчетчикСтрок].Часов6;
			КонецЦикла;
			Если ПерваяСтрока <> ВтораяСтрока Тогда
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Возврат Истина;
	КонецЕсли;
	Возврат Ложь;
КонецФункции // СводныйТабельИзменен()
	
// Процедура надписывает колонки т.п. ОтработанноеВремя в зависимости от способа ввода данных
// и количества дней в месяце
Процедура ОформитьЗаголовкиДнейМесяца()
	
	// Устанавливаем заголовки дней месяца
	БледноКрасныйЦвет = Новый Цвет(255, 176, 176);
	СерыйЦвет = Новый Цвет(234, 229, 216);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачалоМесяца",НачалоМесяца(ПериодРегистрации));
	Запрос.УстановитьПараметр("КонецМесяца",КонецМесяца(ПериодРегистрации));
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	РегламентированныйПроизводственныйКалендарь.ВидДня,
	|	ДЕНЬНЕДЕЛИ(РегламентированныйПроизводственныйКалендарь.ДатаКалендаря) КАК ДеньНедели
	|ИЗ
	|	РегистрСведений.РегламентированныйПроизводственныйКалендарь КАК РегламентированныйПроизводственныйКалендарь
	|ГДЕ
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря МЕЖДУ &НачалоМесяца И &КонецМесяца
	|
	|УПОРЯДОЧИТЬ ПО
	|	РегламентированныйПроизводственныйКалендарь.ДатаКалендаря";
	
	Результат = Запрос.Выполнить();
	Если Результат.Пустой() Тогда
		ДеньНеделиМесяца = ДеньНедели(НачалоМесяца(ПериодРегистрации));
		Для ДеньМесяца = 1 по День(КонецМесяца(ПериодРегистрации)) Цикл
			
			Колонка = ЭлементыФормы.ОтработанноеВремя.Колонки["День"+Строка(ДеньМесяца)];
			
			Колонка.ТекстШапки = Строка(ДеньМесяца) + Символы.ПС + ДниНедели[ДеньНеделиМесяца];
			Если ДеньНеделиМесяца = 6 Или ДеньНеделиМесяца = 7 Тогда
				Колонка.ЦветТекстаШапки = ЦветаСтиля.ЦветОсобогоТекста;
				Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
			Иначе
				Колонка.ЦветТекстаШапки = Новый Цвет();	
				Колонка.ШрифтШапки = Новый Шрифт();
			КонецЕсли;
			
			ДеньНеделиМесяца = (ДеньНеделиМесяца%7)+1;
		КонецЦикла;
	Иначе
		Данные = Результат.Выгрузить();
		ЦветВыходного 		   = Новый Цвет(153, 51,   0); // Темно-красный
		ЦветПредпразничногоДня = Новый Цвет(  0,  0, 186); // Темно-синий
		Для ДеньМесяца = 1 по День(КонецМесяца(ПериодРегистрации)) Цикл
			
			Колонка = ЭлементыФормы.ОтработанноеВремя.Колонки["День"+Строка(ДеньМесяца)];
			
			Колонка.ТекстШапки = Строка(ДеньМесяца) + Символы.ПС + ДниНедели[Данные[ДеньМесяца - 1].ДеньНедели];
			
			ВидДня = Данные[ДеньМесяца - 1].ВидДня;
			Если ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Праздник Тогда
				Колонка.ЦветТекстаШапки = ЦветВыходного;
				Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
			ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Воскресенье Тогда
				Колонка.ЦветТекстаШапки = ЦветВыходного;
				Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
			ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Суббота Тогда
				Колонка.ЦветТекстаШапки = ЦветВыходного;
				Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
			ИначеЕсли ВидДня = Перечисления.ВидыДнейПроизводственногоКалендаря.Предпраздничный Тогда
				Колонка.ЦветТекстаШапки = ЦветПредпразничногоДня;
				Колонка.ШрифтШапки = ШрифтыСтиля.ШрифтВажнойНадписи;
			Иначе
				Колонка.ЦветТекстаШапки = Новый Цвет();	
				Колонка.ШрифтШапки = Новый Шрифт();
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОформитьЗаголовкиДнейМесяца()

// процедура устанавливает видимсоть колонок табличной части "ОтработанноеВремя"
//
Процедура УстановитьВидимостьКолонокТаблицыОтработанноеВремя()
	
	ДеньНачалаПериода = День(ДатаНачалаПериода);
	ДеньОкончанияПериода = День(ДатаОкончанияПериода);
	ИндексНачалаВидимыхКолонок = ДеньНачалаПериода+2;
	ИндексКонцаВидимыхКолонок = ДеньОкончанияПериода+2;
	Для ИндексКолонки = 1 По 31 Цикл
		ЭлементыФормы.ОтработанноеВремя.Колонки["День" + Строка(ИндексКолонки)].Видимость = 
		((ИндексКолонки <= ДеньОкончанияПериода) И (ИндексКолонки >= ДеньНачалаПериода));
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьВидимостьКолонокТаблицыОтработанноеВремяВЦеломЗаПериод(СортироватьКолонки = Истина, РедактироватьТаблицуКолонкиСводногоТабеля = Ложь) Экспорт
	
	Если СортироватьКолонки Тогда
		// Сортировка колонок по видам времени
		
		ТаблицаСортировкиКолонок = Новый ТаблицаЗначений;
		ТаблицаСортировкиКолонок = КолонкиСводногоТабеля.Выгрузить();
		ТаблицаСортировкиКолонок.Колонки.Добавить("ТекущаяПозицияКолонки");
		ТаблицаСортировкиКолонок.Колонки.Добавить("УстанавливаемаяПозицияКолонки");
		ТаблицаСортировкиКолонок.Колонки.Добавить("ПолеСортировки");
		
		Для Каждого СтрокаТаблицыСортировкиКолонок Из ТаблицаСортировкиКолонок Цикл 
			СтрокаТаблицыСортировкиКолонок.ТекущаяПозицияКолонки = ТаблицаСортировкиКолонок.Индекс(СтрокаТаблицыСортировкиКолонок) + 1;
			ИндексЗначенияВМассивеСортировки = ПорядокСортировкиВидовВремени.Найти(СтрокаТаблицыСортировкиКолонок.ВидВремени);
			Если ИндексЗначенияВМассивеСортировки = Неопределено Тогда
				СтрокаТаблицыСортировкиКолонок.ПолеСортировки = 234120;
			Иначе
				СтрокаТаблицыСортировкиКолонок.ПолеСортировки = ИндексЗначенияВМассивеСортировки;
			КонецЕсли;
		КонецЦикла;
		
		СоответствияКолонок = Новый Соответствие;
		КолонкиДляПеремещения = "";
		ТаблицаСортировкиКолонок.Сортировать("ПолеСортировки, ВидВремени");
		Для Каждого СтрокаТаблицыСортировкиКолонок Из ТаблицаСортировкиКолонок Цикл
			СтрокаТаблицыСортировкиКолонок.УстанавливаемаяПозицияКолонки = ТаблицаСортировкиКолонок.Индекс(СтрокаТаблицыСортировкиКолонок) + 1;
			СтрТекущееПоложение = Строка(СтрокаТаблицыСортировкиКолонок.ТекущаяПозицияКолонки);
			СтрУстанавливаемоеПоложение = Строка(СтрокаТаблицыСортировкиКолонок.УстанавливаемаяПозицияКолонки);
			КолонкиДляПеремещения = КолонкиДляПеремещения + ", ВидВремени" + СтрТекущееПоложение
			+ ", Дней" + СтрТекущееПоложение
			+ ", Часов" + СтрТекущееПоложение;
			СоответствияКолонок.Вставить("_ВидВремени" + СтрТекущееПоложение, "ВидВремени" + СтрУстанавливаемоеПоложение);
			СоответствияКолонок.Вставить("_Дней" + СтрТекущееПоложение, "Дней" + СтрУстанавливаемоеПоложение);
			СоответствияКолонок.Вставить("_Часов" + СтрТекущееПоложение, "Часов" + СтрУстанавливаемоеПоложение);
			
		КонецЦикла;
		КолонкиДляПеремещения = "Сотрудник, ФизЛицо" + КолонкиДляПеремещения;
		
		СоответствияКолонок.Вставить("_Сотрудник", "Сотрудник");
		СоответствияКолонок.Вставить("_ФизЛицо", "ФизЛицо");
		ТаблицаПеремещенияКолонок = ОтработанноеВремяВЦеломЗаПериод.Выгрузить(,КолонкиДляПеремещения);
		Для Каждого КолонкаТаблицыПеремещения Из ТаблицаПеремещенияКолонок.Колонки Цикл
			КолонкаТаблицыПеремещения.Имя = "_" + КолонкаТаблицыПеремещения.Имя;
		КонецЦикла;
		Для Каждого КолонкаТаблицыПеремещения Из ТаблицаПеремещенияКолонок.Колонки Цикл
			КолонкаТаблицыПеремещения.Имя = СоответствияКолонок.Получить(КолонкаТаблицыПеремещения.Имя);
		КонецЦикла;
		
		
		
		
		Если РедактироватьТаблицуКолонкиСводногоТабеля Тогда
			ОтработанноеВремяВЦеломЗаПериод.Загрузить(ТаблицаПеремещенияКолонок);
			КолонкиСводногоТабеля.Очистить();
			Для Каждого СтрокаТаблицыСортировкиКолонок Из ТаблицаСортировкиКолонок Цикл
				КолонкиСводногоТабеля.Добавить().ВидВремени = СтрокаТаблицыСортировкиКолонок.ВидВремени;
			КонецЦикла;
		КонецЕсли;
		ТаблицаПеремещенияКолонок.Очистить();	
	КонецЕсли;
	// Установка видимости колонок и очистка значений в невидимых колонках
	Если РедактироватьТаблицуКолонкиСводногоТабеля И КолонкиСводногоТабеля.Количество() = 0 Тогда
		// заполняем по умолчанию список колонок сводного табеля
		КолонкиСводногоТабеля.Добавить().ВидВремени = КлассификаторРабота;
		КолонкиСводногоТабеля.Добавить().ВидВремени = КлассификаторРаботаНочныеЧасы;
		КолонкиСводногоТабеля.Добавить().ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам;
	КонецЕсли;
	
	КоличествоВыводимыхКолонок = КолонкиСводногоТабеля.Количество();
	Для НомерКолонки = 1 По 6 Цикл
		Если КоличествоВыводимыхКолонок >= НомерКолонки Тогда
			ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.Колонки["ВидВремени" + НомерКолонки].Видимость = Истина;
			ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.Колонки["Дней" + НомерКолонки].Видимость = Истина;
			ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.Колонки["Часов" + НомерКолонки].Видимость = Истина;
			УстанавливаемоеЗначение = КолонкиСводногоТабеля[НомерКолонки - 1].ВидВремени;
			ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.Колонки["ВидВремени" + НомерКолонки].ТекстШапки = УстанавливаемоеЗначение.Наименование;
			НазваниеЯчейки =  "ВидВремени" + НомерКолонки;
			Если РедактироватьТаблицуКолонкиСводногоТабеля Тогда
				Для Каждого СтрокаТаблицы Из ОтработанноеВремяВЦеломЗаПериод Цикл
					СтрокаТаблицы[НазваниеЯчейки] = УстанавливаемоеЗначение
				КонецЦикла;
			КонецЕсли;
		Иначе
	        ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.Колонки["ВидВремени" + НомерКолонки].Видимость = Ложь;
			ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.Колонки["Дней" + НомерКолонки].Видимость = Ложь;
			ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.Колонки["Часов" + НомерКолонки].Видимость = Ложь;
			УстанавливаемоеЗначение = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();
			НазваниеЯчейкиВидВремени =  "ВидВремени" + НомерКолонки;
			НазваниеЯчейкиДней =  "Дней" + НомерКолонки;
			НазваниеЯчейкиЧасов =  "Часов" + НомерКолонки;
			Если РедактироватьТаблицуКолонкиСводногоТабеля Тогда
				Для Каждого СтрокаТаблицы Из ОтработанноеВремяВЦеломЗаПериод Цикл
					СтрокаТаблицы[НазваниеЯчейкиВидВремени] = УстанавливаемоеЗначение;
					СтрокаТаблицы[НазваниеЯчейкиДней] = 0;
					СтрокаТаблицы[НазваниеЯчейкиЧасов] = 0;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры // УстановитьВидимостьКолонокТаблицыОтработанноеВремяВЦеломЗаПериод()

// Процедура устанавливает видимость табельного номера и количество фиксируемых колонок
//
Процедура УстановитьВидимостьТабельногоНомера()
	
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);
	
	// Установим фиксацию сотрудника с табельным номером если он выводится
	ВидимостьТабельногоНомера = ЭлементыФормы.ОтработанноеВремя.Колонки.ТабельныйНомерСтрока.Видимость;
	
	Если ВидимостьТабельногоНомера Тогда
		ЭлементыФормы.ОтработанноеВремя.ФиксацияСлева = 4;
	Иначе
		ЭлементыФормы.ОтработанноеВремя.ФиксацияСлева = 3;
	КонецЕсли;
	
КонецПроцедуры

// Процедура устанавливает текст заголовков переключателей, в зависимости
// от месяца за который формируется табель
//
Процедура УстановитьЗаголовкиПереключателейПериодовЗаполнения()
	
	ЭлементыФормы.ПериодЗаполнения.Заголовок = "Весь месяц (" + Формат(ПериодРегистрации, "ДФ=ММММ")+
	" "+Формат(ПериодРегистрации, "ДФ=гггг")+ " г)";
	
	ЭлементыФормы.ПереключательПерваяПоловинаМесяца.Заголовок = "Первая половина месяца (1-"
	+Формат(ПериодРегистрации+ЧетырнадцатьДней, "ДФ=""дд ММММ""")+")";
	
	ЭлементыФормы.ПереключательВтораяПоловинаМесяца.Заголовок = "Вторая половина месяца (16-"
	+Формат(КонецМесяца(ПериодРегистрации), "ДФ=""дд ММММ""")+")";
	
КонецПроцедуры // УстановитьЗаголовкиПереключателейПериодовЗаполнения()

// Процедура устанавливает значения дат начала и окончания периода
//
Процедура УстановитьДатыНачалаИОкончанияПериодов()
	
	Если СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.ТекущийМесяц Тогда
		ДатаНачалаПериода = ПериодРегистрации;
		ДатаОкончанияПериода = КонецМесяца(ПериодРегистрации);
	ИначеЕсли СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
		ДатаНачалаПериода = ПериодРегистрации;
		ДатаОкончанияПериода = ДатаНачалаПериода + ЧетырнадцатьДней
	ИначеЕсли СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.ВтораяПоловинаТекущегоМесяца Тогда
		ДатаНачалаПериода = ПериодРегистрации + ПятнадцатьДней;
		ДатаОкончанияПериода = КонецМесяца(ПериодРегистрации);
	ИначеЕсли СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.УказанныйПериод Тогда
		ДатаНачалаПериода = ПредыдущаяДатаНачалаПериода;
		ДатаОкончанияПериода = ПредыдущаяДатаОкончанияПериода;
	КонецЕсли;
	ПредыдущаяДатаНачалаПериода = ДатаНачалаПериода;
	ПредыдущаяДатаОкончанияПериода = ДатаОкончанияПериода;
	
КонецПроцедуры 

// Процедура устанавливает заголовок формы окна
Процедура УстановитьЗаголовокФормыДокумента()    
	
	СтрокаЗаголовокФормы = "Табель учета рабочего времени: ";
	
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ПоДням Тогда
	//	СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "По дням. ";
	Иначе
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Сводно. ";
	КонецЕсли;
	
	МесяцСтрокой = Формат(ПериодРегистрации, "ДФ=ММММ");  
	ГодСтрокой = " " + Формат(ПериодРегистрации, "ДФ=yyyy") + ". ";
	
	Если СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.ТекущийМесяц Тогда
		
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "За " + МесяцСтрокой + ГодСтрокой;
		
	ИначеЕсли СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.ПерваяПоловинаТекущегоМесяца Тогда
		
		УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), МесяцСтрокой, 4, , МесяцСтрокой);
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "За первую половину " + МесяцСтрокой + ГодСтрокой; 
		
	ИначеЕсли СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.ВтораяПоловинаТекущегоМесяца Тогда
		
		УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"), МесяцСтрокой, 4, , МесяцСтрокой);
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "За вторую половину " + МесяцСтрокой + ГодСтрокой; 
		
	Иначе // за произвольный период
		
		МесяцГодСтрокой = УправлениеОтчетамиЗК.ОписаниеПериода(ДатаНачалаПериода, ДатаОкончанияПериода, Ложь, Истина, Ложь);
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "За " + МесяцГодСтрокой + ". ";
		
	КонецЕсли;
	
	Если ЭтоНовый() Тогда
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Новый";
	ИначеЕсли Проведен Тогда
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Проведен";
	Иначе
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Не проведен";
	КонецЕсли;
		
	Заголовок = СтрокаЗаголовокФормы;
	
КонецПроцедуры // УстановитьЗаголовокФормыДокумента()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.НадписьОрганизация.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.КоманднаяПанельОтработанноеВремяВЦеломЗаПериод.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнить.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Заполнить начисления и/или удержания сотрудников организации");
	ЭлементыФормы.КоманднаяПанельОтработанноеВремя.Кнопки.ПодменюЗаполнить.Кнопки.ДействиеЗаполнить.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Заполнить начисления и/или удержания сотрудников организации");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	ЭлементыФормы.ПодразделениеОрганизации.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Подразделение организации");
	ЭлементыФормы.РамкаГруппыРаботникиОрганизации.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Сотрудники организации");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	// Справка формы
	ОтображатьСправкуФормы = ВосстановитьЗначение("ТабельУчетаРабочегоВремениОрганизацииСправкаФормы");
	Если ОтображатьСправкуФормы = Неопределено Тогда
		ОтображатьСправкуФормы = Истина;
	КонецЕсли;
	
	ТабельУчетаРабочегоВремениОрганизацииПереопределяемый.ФормаДокументаПередОткрытиемДополнительно(ЭтаФорма, Новый Действие("ДополнительныеДействия"));
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда
		
		// Первоначальное заполнение документа.
		
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		
		Если СпособВводаДанных.Пустая() Тогда
			СпособВводаДанных = ВосстановитьЗначение("СпособВводаДанных");
			Если СпособВводаДанных.Пустая() Тогда
				СпособВводаДанных = СпособВводаДанныхПоДням;
			КонецЕсли;
		КонецЕсли;
		
		Если СпособУказанияПериода.Пустая() Тогда
			СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.ТекущийМесяц;
		КонецЕсли;
			
		УстановитьДатыНачалаИОкончанияПериодов();
		СоставКолонокСводногоТабеля = ВосстановитьЗначение("СоставКолонокСводногоТабеля");
		Если КолонкиСводногоТабеля.Количество() = 0 Тогда
			Если СоставКолонокСводногоТабеля = Неопределено Тогда
				// заполняем по умолчанию список колонок сводного табеля
				КолонкиСводногоТабеля.Добавить().ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
				КолонкиСводногоТабеля.Добавить().ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
				КолонкиСводногоТабеля.Добавить().ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.НеявкиПоНевыясненнымПричинам;
			Иначе
				Для Каждого ЭлементМассива Из СоставКолонокСводногоТабеля Цикл
					КолонкиСводногоТабеля.Добавить().ВидВремени = ЭлементМассива;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	Иначе
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПорядокСортировкиВидовВремени = ПроцедурыУправленияПерсоналом.ПолучитьМассивУпорядоченныхВидовИспользованияРабочегоВремени();
	УстановитьВидимостьКолонокТаблицыОтработанноеВремяВЦеломЗаПериод(, ЭтоНовый());
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	ПодготовитьСправкуФормы();
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	

	УстановитьЗаголовкиПереключателейПериодовЗаполнения();
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.ОтработанноеВремя.Колонки.ТабельныйНомерСтрока);
	мМассивЭУ.Добавить(ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.Колонки.ТабельныйНомерСтрока);
	УстановитьВидимостьТабельногоНомера();
	
	// Установим доступность даты начала и окончания периода
	ЭлементыФормы.ДатаНачалаПериода.ТолькоПросмотр = СпособУказанияПериода <> Перечисления.ПериодНачисленияЗарплаты.УказанныйПериод;
	ЭлементыФормы.ДатаОкончанияПериода.ТолькоПросмотр = СпособУказанияПериода <> Перечисления.ПериодНачисленияЗарплаты.УказанныйПериод;
	
	ПредыдущаяДатаНачалаПериода = ДатаНачалаПериода;
	ПредыдущаяДатаОкончанияПериода = ДатаОкончанияПериода;
	
	УстановитьВидимостьСправкиФормы(Ложь);
	
	// Установить активный реквизит и активную страницу.
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
		ОформитьЗаголовкиДнейМесяца();
		ЭлементыФормы.ПанельОтработанноеВремя.ТекущаяСтраница = ЭлементыФормы.ПанельОтработанноеВремя.Страницы.ПоДням;
		Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
			ТекущийЭлемент = ЭлементыФормы.ОтработанноеВремя;
		КонецЕсли;
	Иначе
		ЭлементыФормы.ПанельОтработанноеВремя.ТекущаяСтраница = ЭлементыФормы.ПанельОтработанноеВремя.Страницы.ВЦеломЗаПериод;
		ЭлементыФормы.ПереключательПерваяПоловинаМесяца.Доступность = Ложь;
		ЭлементыФормы.ПереключательВтораяПоловинаМесяца.Доступность = Ложь;
		ЭлементыФормы.ПереключательУказанныйПериод.Доступность = Ложь;
		Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
			ТекущийЭлемент = ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод;
		КонецЕсли;
	КонецЕсли;
	УстановитьЗаголовкиОрганизацийВФорме();
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ИсполнитьПодготовленныйЗапрос" Тогда
			КолонкиСводногоТабеля.Очистить();
			Автозаполнение(ЗначениеВыбора.Запрос);
			УстановитьВидимостьКолонокТаблицыОтработанноеВремяВЦеломЗаПериод();
			ОбновитьСправкуФормы("ОтработанноеВремя");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриЗаписи" формы.
Процедура ПриЗаписи(Отказ)
	СохранитьЗначение("СпособВводаДанных", СпособВводаДанных);
	Если СпособВводаДанных = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда
		СохранитьЗначение("СоставКолонокСводногоТабеля", КолонкиСводногоТабеля.ВыгрузитьКолонку("ВидВремени"));
	КонецЕсли;
КонецПроцедуры

Процедура ПослеЗаписи()
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
                         	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

Процедура ПриЗакрытии()
	
	СохранитьЗначение("ТабельУчетаРабочегоВремениОрганизацииСправкаФормы", ОтображатьСправкуФормы);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("СправочникСсылка.СотрудникиОрганизаций") ИЛИ Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ПодборОтменаВыбора" Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Сотрудник", Параметр);
		НайденныеСтроки = Источник.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Источник.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)
	
	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)
	
	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	
	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура выполняет  открытие формы регистра ГрафикиРаботыПоВидамВремени
// с отбором по данному документу
Процедура ДействияФормыГрафикиРаботыПоВидамВремени(Кнопка)
	ФормаСписка = РегистрыСведений.ГрафикиРаботыПоВидамВремени.ПолучитьФормуСписка();	
	ФормаСписка.Отбор.Документ.Установить(Ссылка);
	ФормаСписка.Открыть();
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

// Процедура - вызывается при нажатии на кнопку "Подбор" командной панели 1
//
Процедура КоманднаяПанельОтработанноеВремяВЦеломЗаПериодПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод, Ссылка, Ложь, Дата, мГоловнаяОрганизация, ТабельУчетаРабочегоВремениОрганизацииПереопределяемый.РежимПодбораСотрудников());
	
КонецПроцедуры

// Процедура вызывается при нажатии на кнопку "Заполнить по всем сотрудникам" командной панели 
// КоманднаяПанельОтработанноеВремяВЦеломЗаПериод
Процедура КоманднаяПанельОтработанноеВремяВЦеломЗаПериодДействиеЗаполнить(Кнопка)
	Если ОтработанноеВремяВЦеломЗаПериод.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличнaя часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		ОтработанноеВремяВЦеломЗаПериод.Очистить();
		
	КонецЕсли;
	
	Автозаполнение();
	УстановитьВидимостьКолонокТаблицыОтработанноеВремяВЦеломЗаПериод();
	ОбновитьСправкуФормы("ОтработанноеВремя");
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Заполнить" командной панели 
// КоманднаяПанельОтработанноеВремяВЦеломЗаПериод
Процедура КоманднаяПанельОтработанноеВремяВЦеломЗаПериодПоСпискуСотрудников(Кнопка)
	Если ОтработанноеВремяВЦеломЗаПериод.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, ДатаНачалаПериода, "РаботникиОрганизаций", Организация, ПодразделениеОрганизации, Ложь,,,,ДатаНачалаПериода, Истина);
КонецПроцедуры

// Процедура = вызывается при нажатии на кнопку "ИзменитьСоставКолонок" 
// командной панели изменения состава колонок
Процедура КоманднаяПанельИзмененияСоставаКолонокИзменитьСоставКолонок(Кнопка)
	
	ФормаИзмененияСоставаКолонок = ПолучитьФорму("ФормаИзмененияСоставаКолонок");
	ФормаИзмененияСоставаКолонок.ВыбранныеВидыВремени.ЗагрузитьЗначения(КолонкиСводногоТабеля.ВыгрузитьКолонку("ВидВремени"));
	ФормаИзмененияСоставаКолонок.ВсеВидыВремени.ЗагрузитьЗначения(ПорядокСортировкиВидовВремени);
	ВозвращаемыйСписокКолонок = ФормаИзмененияСоставаКолонок.ОткрытьМодально();
	Если ВозвращаемыйСписокКолонок <> Неопределено Тогда
		
		
		// Добавление новых колонок
		Для Каждого ЭлементВозвращаемогоСписка Из ВозвращаемыйСписокКолонок Цикл
			ЭлементТаблицыКолонок = КолонкиСводногоТабеля.Найти(ЭлементВозвращаемогоСписка.Значение, "ВидВремени");
			Если ЭлементТаблицыКолонок = Неопределено Тогда
				// Ищем пустую колонку, или которая не будет отображаться
				Если КолонкиСводногоТабеля.Количество() < 6 Тогда
					КолонкиСводногоТабеля.Добавить().ВидВремени = ЭлементВозвращаемогоСписка.Значение;
					НазваниеКолонкиВидВремени = "ВидВремени" + Строка(КолонкиСводногоТабеля.Количество());
					ЗначениеКолонкиВидВремени = ЭлементВозвращаемогоСписка.Значение;
					НазваниеКолонкиДней = "Дней" + Строка(КолонкиСводногоТабеля.Количество());
					НазваниеколонкиЧасов = "Часов" + Строка(КолонкиСводногоТабеля.Количество());
					Для Каждого СтрокаСводнойТаблицы Из ОтработанноеВремяВЦеломЗаПериод Цикл
						СтрокаСводнойТаблицы[НазваниеКолонкиВидВремени] = ЗначениеКолонкиВидВремени;
						СтрокаСводнойТаблицы[НазваниеКолонкиДней] = 0;
						СтрокаСводнойТаблицы[НазваниеКолонкиЧасов] = 0;
					КонецЦикла;
				Иначе
					НайденнаяПустаяСтрока = "";
					Для Каждого СтрокаТаблицыКолонок Из КолонкиСводногоТабеля Цикл
						Если ВозвращаемыйСписокКолонок.НайтиПоЗначению(СтрокаТаблицыКолонок.ВидВремени) = Неопределено Тогда
							НайденнаяПустаяСтрока = СтрокаТаблицыКолонок;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если НайденнаяПустаяСтрока <> "" Тогда
						НазваниеКолонкиВидВремени = "ВидВремени" + Строка(КолонкиСводногоТабеля.Индекс(НайденнаяПустаяСтрока) + 1);
						ЗначениеКолонкиВидВремени = ЭлементВозвращаемогоСписка.Значение;
						НазваниеКолонкиДней = "Дней" + Строка(КолонкиСводногоТабеля.Индекс(НайденнаяПустаяСтрока) + 1);
						НазваниеКолонкиЧасов = "Часов" + Строка(КолонкиСводногоТабеля.Индекс(НайденнаяПустаяСтрока) + 1);
						НайденнаяПустаяСтрока.ВидВремени = ЭлементВозвращаемогоСписка.Значение;
						Для Каждого СтрокаСводнойТаблицы Из ОтработанноеВремяВЦеломЗаПериод Цикл
							СтрокаСводнойТаблицы[НазваниеКолонкиВидВремени] = ЗначениеКолонкиВидВремени;
							СтрокаСводнойТаблицы[НазваниеКолонкиДней] = 0;
							СтрокаСводнойТаблицы[НазваниеКолонкиЧасов] = 0;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
		
		// Сортировка колонок по видам времени
		СоответствияКолонок = Новый Соответствие;
		КолонкиДляПеремещения = "";
		Для Каждого СтрокаТаблицыКолонкиСводногоТабеля Из КолонкиСводногоТабеля Цикл
			ЭлементВозвращаемогоСписка = ВозвращаемыйСписокКолонок.НайтиПоЗначению(СтрокаТаблицыКолонкиСводногоТабеля.ВидВремени);
			Если ЭлементВозвращаемогоСписка <> Неопределено Тогда
				СтрУстанавливаемоеПоложение = Строка(ВозвращаемыйСписокКолонок.Индекс(ЭлементВозвращаемогоСписка) + 1);
				СтрТекущееПоложение = Строка(СтрокаТаблицыКолонкиСводногоТабеля.НомерСтроки);
				
				КолонкиДляПеремещения = КолонкиДляПеремещения + ", ВидВремени" + СтрТекущееПоложение
				+ ", Дней" + СтрТекущееПоложение
				+ ", Часов" + СтрТекущееПоложение;
				
				СоответствияКолонок.Вставить("_ВидВремени" + СтрТекущееПоложение, "ВидВремени" + СтрУстанавливаемоеПоложение);
				СоответствияКолонок.Вставить("_Дней" + СтрТекущееПоложение, "Дней" + СтрУстанавливаемоеПоложение);
				СоответствияКолонок.Вставить("_Часов" + СтрТекущееПоложение, "Часов" + СтрУстанавливаемоеПоложение);
				
			КонецЕсли;
		КонецЦикла;
		КолонкиСводногоТабеля.Очистить();
		Для Каждого ЭлементВозвращаемогоСписка Из ВозвращаемыйСписокКолонок Цикл
			КолонкиСводногоТабеля.Добавить().ВидВремени = ЭлементВозвращаемогоСписка.Значение;
		КонецЦикла;
		
		КолонкиДляПеремещения = "Сотрудник, ФизЛицо" + КолонкиДляПеремещения;
		СоответствияКолонок.Вставить("_Сотрудник", "Сотрудник");
		СоответствияКолонок.Вставить("_ФизЛицо", "ФизЛицо");
		ТаблицаПеремещенияКолонок = ОтработанноеВремяВЦеломЗаПериод.Выгрузить(,КолонкиДляПеремещения);
		Для Каждого КолонкаТаблицыПеремещения Из ТаблицаПеремещенияКолонок.Колонки Цикл
			КолонкаТаблицыПеремещения.Имя = "_" + КолонкаТаблицыПеремещения.Имя;
		КонецЦикла;
		Для Каждого КолонкаТаблицыПеремещения Из ТаблицаПеремещенияКолонок.Колонки Цикл
			КолонкаТаблицыПеремещения.Имя = СоответствияКолонок.Получить(КолонкаТаблицыПеремещения.Имя);
		КонецЦикла;
		ОтработанноеВремяВЦеломЗаПериод.Загрузить(ТаблицаПеремещенияКолонок);
		
		УстановитьВидимостьКолонокТаблицыОтработанноеВремяВЦеломЗаПериод(Ложь);
		ТаблицаПеремещенияКолонок = Неопределено;
	КонецЕсли;
КонецПроцедуры



Процедура КоманднаяПанельОтработанноеВремяДействиеЗаполнить(Кнопка)
	
	Если Организация.Пустая() Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не указана организация, заполнить список сотрудников невозможно!"));
		Возврат;
	КонецЕсли;
	
	Если ОтработанноеВремя.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличнaя часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;
		ОтработанноеВремя.Очистить();
		
	КонецЕсли;
	
	Автозаполнение();
	
	ОбновитьСправкуФормы("ОтработанноеВремя");
	
	Если ОтработанноеВремя.Количество() > 0 Тогда
		УстановитьВидимостьколонокТаблицыОтработанноеВремя();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор" командной панели 2
//
Процедура КоманднаяПанельОтработанноеВремяПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.ОтработанноеВремя, Ссылка, Ложь, Дата, мГоловнаяОрганизация, ТабельУчетаРабочегоВремениОрганизацииПереопределяемый.РежимПодбораСотрудников(), , ОтработанноеВремя.ВыгрузитьКолонку("Сотрудник"));
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Заполнить" командной панели 2
Процедура КоманднаяПанельОтработанноеВремяПоСпискуСотрудников(Кнопка)
	
	Если ОтработанноеВремя.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, ДатаНачалаПериода, "РаботникиОрганизаций", Организация, ПодразделениеОрганизации, Ложь,,,,ДатаНачалаПериода, Истина);
	
КонецПроцедуры

Процедура ДополнительныеДействия(Кнопка)
	
	ТабельУчетаРабочегоВремениОрганизацииПереопределяемый.ФормаДокументаВыполнитьДополнительныеДействия(ЭтаФорма, Кнопка);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура выполняет алгоритм действий при изменении реквизита СпособВводаДанных
//
// Параметры:
//  Элемент      - элемент формы, который отображает Способ ввода данных.
//
Процедура ВводДанныхПоДнямПриИзменении(Элемент)
	
	Если Элемент.Значение = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод Тогда 
		// Активируем вторую страницу
		ЭлементыФормы.ПанельОтработанноеВремя.ТекущаяСтраница = ЭлементыФормы.ПанельОтработанноеВремя.Страницы.ВЦеломЗаПериод;
		ЗаполнитьТаблицуОтработанноеВремяВЦеломЗаПериод();
		СпособУказанияПериода = Перечисления.ПериодНачисленияЗарплаты.ТекущийМесяц;
		ЭлементыФормы.ПереключательПерваяПоловинаМесяца.Доступность = Ложь;
		ЭлементыФормы.ПереключательВтораяПоловинаМесяца.Доступность = Ложь;
		ЭлементыФормы.ПереключательУказанныйПериод.Доступность = Ложь;
		ПериодЗаполненияПриИзменении(ЭлементыФормы.ПериодЗаполнения);
		УстановитьВидимостьКолонокТаблицыОтработанноеВремяВЦеломЗаПериод();
	Иначе
		
		Если СводныйТабельИзменен() Тогда
			
			Ответ = Вопрос("Время, введенное в табличную часть будет очищено, продолжить?", РежимДиалогаВопрос.ДаНет, 0);
			Если Ответ = КодВозвратаДиалога.Нет Тогда
				Элемент.Значение = Перечисления.СпособыВводаДанныхОВремени.ВЦеломЗаПериод;
				Возврат; 
			КонецЕсли;
			ОтработанноеВремя.Загрузить(ОтработанноеВремяВЦеломЗаПериод.Выгрузить(, "Сотрудник, ФизЛицо"));
		КонецЕсли;
			//Если ОтработанноеВремяВЦеломЗаПериод.Итог("Часов1")
			//	+ ОтработанноеВремяВЦеломЗаПериод.Итог("Часов2")
			//	+ ОтработанноеВремяВЦеломЗаПериод.Итог("Часов3")
			//	+ ОтработанноеВремяВЦеломЗаПериод.Итог("Часов4")
			//	+ ОтработанноеВремяВЦеломЗаПериод.Итог("Часов5")
			//	+ ОтработанноеВремяВЦеломЗаПериод.Итог("Часов6")
			//	+ ОтработанноеВремяВЦеломЗаПериод.Итог("Дней1")
			//	+ ОтработанноеВремяВЦеломЗаПериод.Итог("Дней2")
			//	+ ОтработанноеВремяВЦеломЗаПериод.Итог("Дней3")
			//	+ ОтработанноеВремяВЦеломЗаПериод.Итог("Дней4")
			//	+ ОтработанноеВремяВЦеломЗаПериод.Итог("Дней5")
			//	+ ОтработанноеВремяВЦеломЗаПериод.Итог("Дней6") > 0 Тогда
			//	
			//
			//КонецЕсли;
		// Активируем первую страницу
		ЭлементыФормы.ПанельОтработанноеВремя.ТекущаяСтраница = ЭлементыФормы.ПанельОтработанноеВремя.Страницы.ПоДням;
		
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
		ОформитьЗаголовкиДнейМесяца();
		ЭлементыФормы.ПереключательПерваяПоловинаМесяца.Доступность = Истина;
		ЭлементыФормы.ПереключательВтораяПоловинаМесяца.Доступность = Истина;
		ЭлементыФормы.ПереключательУказанныйПериод.Доступность = Истина;
	КонецЕсли;
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры       

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры // ДатаПриИзменении()

Процедура ДатаНачалаПериодаПриИзменении(Элемент)
	
	Если НачалоМесяца(ДатаНачалаПериода) = ПериодРегистрации Тогда
		ПредыдущаяДатаНачалаПериода = ДатаНачалаПериода;
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
	Иначе
		Предупреждение("Указанная дата ("+Формат(ДатаНачалаПериода, "ДЛФ=Д")+") не из периода " + ЭлементыФормы.ПериодРегистрации.Значение, 10);
		ДатаНачалаПериода = ПредыдущаяДатаНачалаПериода;
		ТекущийЭлемент = Элемент;
	КонецЕсли;
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

Процедура ДатаОкончанияПериодаПриИзменении(Элемент)
	
	Если НачалоМесяца(ДатаОкончанияПериода) = ПериодРегистрации Тогда
		ПредыдущаяДатаОкончанияПериода = ДатаОкончанияПериода;
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
	Иначе
		Предупреждение("Указанная дата ("+Формат(ДатаОкончанияПериода, "ДЛФ=Д")+") не из периода " + ЭлементыФормы.ПериодРегистрации.Значение, 10);
		ДатаОкончанияПериода = ПредыдущаяДатаОкончанияПериода;
		ТекущийЭлемент = Элемент;
	КонецЕсли;
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
	КонецЕсли;
	
	ЗаполнениеДокументов.ПриИзмененииЗначенияОрганизации(ЭтотОбъект);
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов
	УстановитьВидимостьТабельногоНомера();
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" переключателя ПериодЗаполения
//
Процедура ПериодЗаполненияПриИзменении(Элемент)
	
	УстановитьДатыНачалаИОкончанияПериодов();
	УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
	УстановитьЗаголовокФормыДокумента();
	// Установим доступность даты начала и окончания периода
	ЭлементыФормы.ДатаНачалаПериода.ТолькоПросмотр = СпособУказанияПериода <> Перечисления.ПериодНачисленияЗарплаты.УказанныйПериод;
	ЭлементыФормы.ДатаОкончанияПериода.ТолькоПросмотр = СпособУказанияПериода <> Перечисления.ПериодНачисленияЗарплаты.УказанныйПериод;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТА ШАПКИ ПериодРегистрации

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьЗаголовкиПереключателейПериодовЗаполнения();
	УстановитьДатыНачалаИОкончанияПериодов();
	
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
		ОформитьЗаголовкиДнейМесяца();
	КонецЕсли;
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
	УстановитьЗаголовкиПереключателейПериодовЗаполнения();
	УстановитьДатыНачалаИОкончанияПериодов();
	
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
		ОформитьЗаголовкиДнейМесяца();
	КонецЕсли;
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьЗаголовкиПереключателейПериодовЗаполнения();
	УстановитьДатыНачалаИОкончанияПериодов();
	
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
		ОформитьЗаголовкиДнейМесяца();
	КонецЕсли;	
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
	УстановитьЗаголовкиПереключателейПериодовЗаполнения();
	УстановитьДатыНачалаИОкончанияПериодов();
	
	Если СпособВводаДанных = СпособВводаДанныхПоДням Тогда
		УстановитьВидимостьКолонокТаблицыОтработанноеВремя();
		ОформитьЗаголовкиДнейМесяца();
	КонецЕсли;
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ 
//   ОтработанноеВремяВЦеломЗаПериод


// Процедура - обработчик события ПриПолученииДанных
Процедура ОтработанноеВремяВЦеломЗаПериодПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод, ОформленияСтрок);
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаВыбора
Процедура ОтработанноеВремяВЦеломЗаПериодОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ОтработанноеВремяВЦеломЗаПериод.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		Автозаполнение(,ВыбранноеЗначение);
		УстановитьВидимостьКолонокТаблицыОтработанноеВремяВЦеломЗаПериод();
		ОбновитьСправкуФормы("ОтработанноеВремя");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтработанноеВремяВЦеломЗаПериодПередУдалением(Элемент, Отказ)
	
	Если Найти(Элемент.ТекущаяКолонка.Имя, "Дней") = 1 или Найти(Элемент.ТекущаяКолонка.Имя, "Часов") = 1 Тогда
		ТекстВопроса = "Вы действительно хотите удалить сотрудника из табеля?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Отказ = Ответ <> КодВозвратаДиалога.Да;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповестить("ПодборОтменаВыбора", ДанныеСтроки.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

Процедура ОтработанноеВремяВЦеломЗаПериодПослеУдаления(Элемент)
	ОбновитьСправкуФормы("ОтработанноеВремя");
КонецПроцедуры

Процедура ОтработанноеВремяВЦеломЗаПериодПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ОбновитьСправкуФормы("ОтработанноеВремя");
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПодборВыбор", ДанныеСтроки.Сотрудник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОГО ПОЛЯ 
//   ОтработанноеВремяВЦеломЗаПериод

Процедура ОтработанноеВремяВЦеломЗаПериодСотрудникПриИзменении(Элемент)
	ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
	Автозаполнение(,Элемент.Значение, ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.ТекущаяСтрока);
	УстановитьВидимостьКолонокТаблицыОтработанноеВремяВЦеломЗаПериод();
КонецПроцедуры

Процедура ОтработанноеВремяВЦеломЗаПериодСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, ТабельУчетаРабочегоВремениОрганизацииПереопределяемый.РежимПодбораСотрудников(), СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ОтработанноеВремяВЦеломЗаПериодСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры

Процедура ОтработанноеВремяВЦеломЗаПериодСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры

Процедура ОтработанноеВремяВЦеломЗаПериодВидВремениПриИзменении(Элемент)
	ТекущаяСтрока = ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.ТекущаяСтрока;
	КолонкиТаблицы = ЭлементыФормы.ОтработанноеВремяВЦеломЗаПериод.Колонки;
	ИскомоеЗначение = Элемент.Значение;
	Если НЕ ИскомоеЗначение.Пустая() 
		И ((ТекущаяСтрока.ВидВремени1 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени1.ЭлементУправления <> Элемент)
		ИЛИ (ТекущаяСтрока.ВидВремени2 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени2.ЭлементУправления <> Элемент)	
		ИЛИ (ТекущаяСтрока.ВидВремени3 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени3.ЭлементУправления <> Элемент)
		ИЛИ (ТекущаяСтрока.ВидВремени4 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени4.ЭлементУправления <> Элемент)
		ИЛИ (ТекущаяСтрока.ВидВремени5 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени5.ЭлементУправления <> Элемент)
		ИЛИ (ТекущаяСтрока.ВидВремени6 = ИскомоеЗначение
		И КолонкиТаблицы.ВидВремени6.ЭлементУправления <> Элемент)) Тогда
		Предупреждение("Данный вид времени уже введен");
		Элемент.Значение = мПустаяСсылкаКлассификатора;
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ОтработанноеВремя

// Процедура - обработчик события "ОбработкаВыбора" табличной части ОтработанноеВремя
Процедура ОтработанноеВремяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ОтработанноеВремя.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		Автозаполнение(,ВыбранноеЗначение);
		ОбновитьСправкуФормы("ОтработанноеВремя");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных" табличной части ОтработанноеВремя
Процедура ОтработанноеВремяПриПолученииДанных(Элемент, ОформленияСтрок)
	
	Элемент.ФиксацияСлева = 0 + Элемент.Колонки.НомерСтроки.Видимость
		+ Элемент.Колонки.ТабельныйНомерСтрока.Видимость
		+ Элемент.Колонки.Сотрудник.Видимость
		+ Элемент.Колонки.Итого.Видимость;
	
	СтрокаИндексДня = "";
	НазваниеЯчейкиВидВремени = "";
	НазваниеЯчейкиДней = "";
	ТекстЯчейки = "";
	
	
	//Цикл по строкам документа
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		СоответствиеРасчетаИтоговЧасов.Очистить();
		СоответствиеРасчетаИтоговДней.Очистить();
		//Цикл по дням
		Для ИндексДня  = День(ДатаНачалаПериода) По День(ДатаОкончанияПериода) Цикл
			ТекстЯчейки = "";
			СтрокаИндексДня = Строка(ИндексДня);
			// цикл по значениям внутри дня
			Для ИндексМассиваПриставок = 0 По 3 Цикл
				НазваниеЯчейкиВидВремени = МассивПриставок[ИндексМассиваПриставок] + "ВидВремени"+СтрокаИндексДня;
				НазваниеЯчейкиДней = МассивПриставок[ИндексМассиваПриставок] + "Часов"+СтрокаИндексДня;
				КоличествоЧасов = ОформлениеСтроки.Данныестроки[НазваниеЯчейкиДней];
				ВидВремени = ОформлениеСтроки.Данныестроки[НазваниеЯчейкиВидВремени];
				
				Если ВидВремени = КлассификаторВыходныеДни Тогда
					// Подсчет для итоговой колонки
					НакопленоДней = СоответствиеРасчетаИтоговДней[ВидВремени];
					Если НакопленоДней = Неопределено Тогда
						НакопленоДней = 0;
					КонецЕсли;
					СоответствиеРасчетаИтоговДней.Вставить(ВидВремени, НакопленоДней + 1);
					КоличествоЧасов = "";
				ИначеЕсли КоличествоЧасов = 0 Тогда
					КоличествоЧасов = "";
				Иначе
					// Подсчет для итоговой колонки
					НакопленоДней = СоответствиеРасчетаИтоговДней[ВидВремени];
					НакопленоЧасов = СоответствиеРасчетаИтоговЧасов[ВидВремени];
					Если НакопленоДней = Неопределено ИЛИ НакопленоЧасов = Неопределено Тогда
						НакопленоДней = 0;
						НакопленоЧасов = 0;
					КонецЕсли;
					СоответствиеРасчетаИтоговДней.Вставить(ВидВремени, НакопленоДней + 1);
					СоответствиеРасчетаИтоговЧасов.Вставить(ВидВремени, НакопленоЧасов + КоличествоЧасов);
				КонецЕсли;
				
				Если НЕ ВидВремени.Пустая() Тогда
					Если ВидВремени.БуквенныйКод = "Я" Тогда
						ТекстЯчейки = "Я " + КоличествоЧасов + Символы.ПС + ТекстЯчейки;
					ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
						ТекстЯчейки = ТекстЯчейки + ВидВремени.БуквенныйКод + " " + Символы.ПС;
					Иначе
						ТекстЯчейки = ТекстЯчейки + ВидВремени.БуквенныйКод + " " + КоличествоЧасов + Символы.ПС;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;	
			ТекстЯчейки = Лев(ТекстЯчейки, СтрДлина(ТекстЯчейки)-1);
			ТекущаяЯчейка = ОформлениеСтроки.Ячейки["День"+СтрокаИндексДня];
			Если ТекущаяЯчейка.Значение <> ТекстЯчейки Тогда
				ТекущаяЯчейка.Значение = ТекстЯчейки;
			КонецЕсли;
		КонецЦикла;
		
		СтрИтогоРабота = "";
		СтрИтогоРаботаВечерниеЧасы = "";
		СтрИтогоРаботаНочныеЧасы = "";
		СтрИтогоРабочееВремя = "";
		СтрИтогоНеРабочееВремя = "";
		Для Каждого ЭлементСоответствия Из СоответствиеРасчетаИтоговДней Цикл
			КлючЭлементаСоответствия = ЭлементСоответствия.Ключ;
			Если КлючЭлементаСоответствия = КлассификаторРабота Тогда
				СтрИтогоРабота = СтрИтогоРабота + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + " дн."
					+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + " ч." + Символы.ВК;
			ИначеЕсли КлючЭлементаСоответствия = КлассификаторРаботаВечерниеЧасы Тогда
				СтрИтогоРаботаВечерниеЧасы = СтрИтогоРаботаВечерниеЧасы + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + " дн."
					+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + " ч." + Символы.ВК;
			ИначеЕсли КлючЭлементаСоответствия = КлассификаторРаботаНочныеЧасы Тогда
				СтрИтогоРаботаНочныеЧасы = СтрИтогоРаботаНочныеЧасы + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + " дн."
					+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + " ч." + Символы.ВК;
			ИначеЕсли КлючЭлементаСоответствия.РабочееВремя Тогда
				СтрИтогоРабочееВремя = СтрИтогоРабочееВремя + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + " дн. "
					+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + " ч." + Символы.ВК;
			ИначеЕсли КлючЭлементаСоответствия = КлассификаторВыходныеДни Тогда
				СтрИтогоРабочееВремя = СтрИтогоРабочееВремя + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + " дн. " + Символы.ВК;		
			Иначе
				СтрИтогоНеРабочееВремя = СтрИтогоНеРабочееВремя + КлючЭлементаСоответствия.БуквенныйКод + " " + ЭлементСоответствия.Значение + " дн. "
					+ СоответствиеРасчетаИтоговЧасов[КлючЭлементаСоответствия] + " ч." + Символы.ВК;
			КонецЕсли;
		КонецЦикла;
		ОформлениеСтроки.Ячейки.Итого.Значение = СтрИтогоРабота + СтрИтогоРаботаВечерниеЧасы + СтрИтогоРаботаНочныеЧасы + СтрИтогоРабочееВремя + СтрИтогоНеРабочееВремя;
		ОформлениеСтроки.Ячейки.Итого.ОтображатьТекст = Истина;
	КонецЦикла;
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.ОтработанноеВремя, ОформленияСтрок);
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличнойчасти ОтработанноеВремя
Процедура ОтработанноеВремяПередНачаломИзменения(Элемент, Отказ)
	ИмяЯчейки = Элемент.ТекущаяКолонка.Имя;
	Если (Лев(ИмяЯчейки, 4) = "День") И (ОтработанноеВремя.Количество() > 0) И (Элемент.ТекущаяСтрока <> Неопределено) Тогда
		ТекстЯчейки = "";
		СтрокаИндексДня = Сред(ИмяЯчейки, 5);
		Для ИндексМассиваПриставок = 0 По 3 Цикл
			НазваниеЯчейкиВидВремени = МассивПриставок[ИндексМассиваПриставок] + "ВидВремени"+СтрокаИндексДня;
			НазваниеЯчейкиДней = МассивПриставок[ИндексМассиваПриставок] + "Часов"+СтрокаИндексДня;
			КоличествоЧасов = Строка(Элемент.ТекущаяСтрока[НазваниеЯчейкиДней]);
			Если КоличествоЧасов = "0" Тогда
				КоличествоЧасов = "";
			КонецЕсли;
			ВидВремени = Элемент.ТекущаяСтрока[НазваниеЯчейкиВидВремени];
			Если НЕ ВидВремени.Пустая() Тогда
				Если ВидВремени.БуквенныйКод = "Я" Тогда
					ТекстЯчейки = "Я " + КоличествоЧасов + Символы.ПС + ТекстЯчейки;
				ИначеЕсли ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
					ТекстЯчейки = ТекстЯчейки + ВидВремени.БуквенныйКод + " " + Символы.ПС;	
				Иначе
					ТекстЯчейки = ТекстЯчейки + ВидВремени.БуквенныйКод + " " + КоличествоЧасов + Символы.ПС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		ТекстЯчейки = Лев(ТекстЯчейки, СтрДлина(ТекстЯчейки)-1);
		ТекущаяЯчейка = Элемент.ТекущаяКолонка.ЭлементУправления;
		Если ТекущаяЯчейка.Значение <> ТекстЯчейки Тогда
			ТекущаяЯчейка.Значение = ТекстЯчейки;
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры // ОтработанноеВремяПередНачаломИзменения()

Процедура ОтработанноеВремяПриАктивизацииЯчейки(Элемент)
	ИмяЯчейки = Элемент.ТекущаяКолонка.Имя;
	Если (Лев(ИмяЯчейки, 4) = "День") И (ОтработанноеВремя.Количество() > 0) И (Элемент.ТекущаяСтрока <> Неопределено) Тогда
		ТекстЯчейки = "";
		СтрокаИндексДня = Сред(ИмяЯчейки, 5);
		Для ИндексМассиваПриставок = 0 По 3 Цикл
			НазваниеЯчейкиВидВремени = МассивПриставок[ИндексМассиваПриставок] + "ВидВремени"+СтрокаИндексДня;
			НазваниеЯчейкиДней = МассивПриставок[ИндексМассиваПриставок] + "Часов"+СтрокаИндексДня;
			КоличествоЧасов = Строка(Элемент.ТекущаяСтрока[НазваниеЯчейкиДней]);
			Если КоличествоЧасов = "0" Тогда
				КоличествоЧасов = "";
			КонецЕсли;
			ВидВремени = Элемент.ТекущаяСтрока[НазваниеЯчейкиВидВремени];
			Если НЕ ВидВремени.Пустая() Тогда
				Если ВидВремени = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни Тогда
					ТекстЯчейки = ТекстЯчейки + Символы.ПС + ВидВремени.БуквенныйКод;	
				Иначе
					ТекстЯчейки = ТекстЯчейки + Символы.ПС + ВидВремени.БуквенныйКод + " " + КоличествоЧасов;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		ТекстЯчейки = Сред(ТекстЯчейки, 2);
		ТекущаяЯчейка = Элемент.ТекущаяКолонка.ЭлементУправления;
		Если ТекущаяЯчейка.Значение <> ТекстЯчейки Тогда
			ТекущаяЯчейка.Значение = ТекстЯчейки;
		КонецЕсли;
	
	КонецЕсли;

КонецПроцедуры

Процедура ОтработанноеВремяПослеУдаления(Элемент)
	
	ОбновитьСправкуФормы("ОтработанноеВремя");
	
КонецПроцедуры

Процедура ОтработанноеВремяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСправкуФормы("ОтработанноеВремя");
	
КонецПроцедуры

Процедура ОтработанноеВремяПередУдалением(Элемент, Отказ)
	
	Если Найти(Элемент.ТекущаяКолонка.Имя, "День") = 1 Тогда
		ТекстВопроса = "Вы действительно хотите удалить сотрудника из табеля?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		Отказ = Ответ <> КодВозвратаДиалога.Да;
	КонецЕсли;
	
	Если Не Отказ Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповестить("ПодборОтменаВыбора", ДанныеСтроки.Сотрудник);
	КонецЕсли;
	
КонецПроцедуры // РаботникиОрганизацииПередУдалением()

Процедура ОтработанноеВремяПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПодборВыбор", ДанныеСтроки.Сотрудник);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ЭЛЕМЕНТОВ ТАБЛИЧНОГО ПОЛЯ ОтработанноеВрем

Процедура ОтработанноеВремяСотрудникПриИзменении(Элемент)
	
	ЭлементыФормы.ОтработанноеВремя.ТекущиеДанные.ФизЛицо = Элемент.Значение.ФизЛицо;
	МассивСтрок = ОтработанноеВремя.НайтиСтроки(Новый Структура("Сотрудник", Элемент.Значение));
	Если МассивСтрок.Количество() < 2 Тогда
		Автозаполнение(,Элемент.Значение, ЭлементыФормы.ОтработанноеВремя.ТекущаяСтрока);
	КонецЕсли;
КонецПроцедуры

Процедура ОтработанноеВремяСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, ТабельУчетаРабочегоВремениОрганизацииПереопределяемый.РежимПодбораСотрудников(), СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры

Процедура ОтработанноеВремяСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры

Процедура ОтработанноеВремяСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры

Процедура ОтработанноеВремяДеньОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	ОбработкаВводаДанныхВЯчейку(Элемент, Текст, Значение, СтандартнаяОбработка, Сред(ЭлементыФормы.ОтработанноеВремя.ТекущаяКолонка.Имя, 5));
КонецПроцедуры


// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Действия, ЭлементыФормы.Номер);
			
КонецПроцедуры

Процедура ОтработанноеВремяВЦеломЗаПериодПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	ОформлениеСтроки.Ячейки.ВидВремени1.Видимость= Ложь;
	ОформлениеСтроки.Ячейки.ВидВремени2.Видимость= Ложь;
	ОформлениеСтроки.Ячейки.ВидВремени3.Видимость= Ложь;
	ОформлениеСтроки.Ячейки.ВидВремени4.Видимость= Ложь;
	ОформлениеСтроки.Ячейки.ВидВремени5.Видимость= Ложь;
	ОформлениеСтроки.Ячейки.ВидВремени6.Видимость= Ложь;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

МассивПриставок = Новый Массив(4);
МассивПриставок[0] = "Первый";
МассивПриставок[1] = "Второй";
МассивПриставок[2] = "Третий";
МассивПриставок[3] = "Четвертый";

мБуквенныеОбозначения = Новый Соответствие;
Запрос = Новый Запрос("Выбрать Ссылка, БуквенныйКод Из Справочник.КлассификаторИспользованияРабочегоВремени");
Выборка = Запрос.Выполнить().Выбрать();
Пока Выборка.Следующий() Цикл
	мБуквенныеОбозначения[ВРег(Выборка.БуквенныйКод)] = Выборка.Ссылка;
КонецЦикла;

СоответствиеРасчетаИтоговДней = Новый Соответствие;
СоответствиеРасчетаИтоговЧасов = Новый Соответствие;
СпособВводаДанныхПоДням = Перечисления.СпособыВводаДанныхОВремени.ПоДням;

мПустаяСсылкаКлассификатора = Справочники.КлассификаторИспользованияРабочегоВремени.ПустаяСсылка();

СоответствиеДляПоискаСотрудника = Новый Структура;
ПустойСотрудникОрганизации =Справочники.СотрудникиОрганизаций.ПустаяСсылка();

СписокИменЯчеекДляОпределенияСтроки = Новый СписокЗначений;
СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени1");
СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени2");
СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени3");
СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени4");
СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени5");
СписокИменЯчеекДляОпределенияСтроки.Добавить("ВидВремени6");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней1");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней2");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней3");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней4");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней5");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Дней6");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов1");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов2");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов3");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов4");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов5");
СписокИменЯчеекДляОпределенияСтроки.Добавить("Часов6");

// Заполнение соответствия номер дня недели и названия дня недели.
ДлинаСуток = 86400;
ПерваяДата = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату());
ПерваяДата = ПерваяДата - ДеньНедели(ПерваяДата) * ДлинаСуток;
ДниНедели = Новый Соответствие;
Для ДеньНедели = 1 По 7 Цикл
	ДниНедели.Вставить(ДеньНедели, НРег(Формат(ПерваяДата + ДеньНедели * ДлинаСуток,"ДФ=ддд")));
КонецЦикла;

ЧетырнадцатьДней = 1209600;
ПятнадцатьДней = 1296000;

СоответствиеСотрудникГрафик = Новый Соответствие;
СоответствиеГрафикНорма = Новый Соответствие;

КлассификаторРабота = Справочники.КлассификаторИспользованияРабочегоВремени.Работа;
КлассификаторРаботаВечерниеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаВечерниеЧасы;
КлассификаторРаботаНочныеЧасы = Справочники.КлассификаторИспользованияРабочегоВремени.РаботаНочныеЧасы;
КлассификаторВыходныеДни = Справочники.КлассификаторИспользованияРабочегоВремени.ВыходныеДни;