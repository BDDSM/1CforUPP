////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента; 
Перем мТекущийОтчетныйПериод; 

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;

Перем мЕстьДоступКНачислениям;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

Процедура ПоказатьЭлементыФормы()

	Записан = Не ЭтоНовый();
	ЭлементыФормы.НомерПачки.АвтоОтметкаНезаполненного = Записан;
	ЭлементыФормы.НомерПачки.ОтметкаНезаполненного = Записан И Не ЗначениеЗаполнено(НомерПачки);
	
	ПоказыватьКолонкиВзносов = ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ОТМЕНЯЮЩАЯ И мЕстьДоступКНачислениям;
    ЭлементыФормы.РаботникиОрганизации.Колонки.КолонкаНакопительная.Видимость = ПоказыватьКолонкиВзносов;
    ЭлементыФормы.РаботникиОрганизации.Колонки.КолонкаСтраховая.Видимость = ПоказыватьКолонкиВзносов;
    ЭлементыФормы.РаботникиОрганизации.Колонки.НачисленоНакопительная.Видимость = ПоказыватьКолонкиВзносов;
    ЭлементыФормы.РаботникиОрганизации.Колонки.НачисленоСтраховая.Видимость = ПоказыватьКолонкиВзносов;
    ЭлементыФормы.РаботникиОрганизации.Колонки.УплаченоНакопительная.Видимость = ПоказыватьКолонкиВзносов;
    ЭлементыФормы.РаботникиОрганизации.Колонки.УплаченоСтраховая.Видимость = ПоказыватьКолонкиВзносов;
    ЭлементыФормы.РаботникиОрганизации.Колонки.КолонкаНакопительная.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
    ЭлементыФормы.РаботникиОрганизации.Колонки.КолонкаСтраховая.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
    ЭлементыФормы.РаботникиОрганизации.Колонки.НачисленоНакопительная.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
    ЭлементыФормы.РаботникиОрганизации.Колонки.НачисленоСтраховая.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
    ЭлементыФормы.РаботникиОрганизации.Колонки.УплаченоНакопительная.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
    ЭлементыФормы.РаботникиОрганизации.Колонки.УплаченоСтраховая.ИзменятьНастройку = ПоказыватьКолонкиВзносов;
	ЭлементыФормы.РаботникиОрганизации.Подвал = ПоказыватьКолонкиВзносов;
	
	ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.ДействиеРедактироватьСЗВ.Картинка = ?(ТолькоПросмотр, БиблиотекаКартинок.ПосмотретьСЗВ4,БиблиотекаКартинок.ОткрытьСЗВ4);
	
	Если НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл() Тогда
		Если ПринятоВПФР Тогда
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть.КнопкаПоУмолчанию = Истина;
		Иначе 	
			ЭлементыФормы.ОсновныеДействияФормы.Кнопки.ОК.КнопкаПоУмолчанию = Истина;
		КонецЕсли;
		ЭлементыФормы.ПринятоВПФР.Доступность = Проведен;
	Иначе 	
		ЭлементыФормы.ОсновныеДействияФормы.Кнопки.Закрыть.КнопкаПоУмолчанию = Истина;
		ЭлементыФормы.ПринятоВПФР.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриИзмененииФизлица(СтрокаТабличнойЧасти)

	НовыеДанные = ПроцедурыПерсонифицированногоУчета.ДанныеФизЛицаДляДокументаПерсучета(СтрокаТабличнойЧасти.Физлицо, Дата, Неопределено, Неопределено, Неопределено);
	ЗаполнитьЗначенияСвойств(СтрокаТабличнойЧасти,НовыеДанные);
	РассчитатьВзносы(СтрокаТабличнойЧасти.НомерСтроки);
	
КонецПроцедуры

Процедура ПриИзмененииОрганизации()

   	ЗаполнитьЗначенияСвойств(ЭтотОбъект, ПроцедурыПерсонифицированногоУчета.ДанныеРуководителяОрганизации(Организация, Дата));
	СписокКатегорийЗастрахованныхЛиц = ПроцедурыПерсонифицированногоУчета.КатегорииЗастрахованныхЛицОрганизации(Организация, мГоловнаяОрганизация, ОтчетныйПериод, , ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	КатегорияЗастрахованныхЛиц = СписокКатегорийЗастрахованныхЛиц[0].Значение;
	ЭлементыФормы.КатегорияЗастрахованныхЛиц.ДоступныеЗначения = СписокКатегорийЗастрахованныхЛиц;
	НомерПачки = "";
	
КонецПроцедуры

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок 	= ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка 		= ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.РаботникиОрганизации,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.Заполнить);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если Не ЗначениеЗаполнено(ОтчетныйПериод) Тогда
			ОтчетныйПериод = ПроцедурыПерсонифицированногоУчета.ПредшествующийОтчетныйПериодПерсучета(ОбщегоНазначения.ПолучитьРабочуюДату());
		КонецЕсли;
		Если ТипСведенийСЗВ.Пустая() Тогда
			ТипСведенийСЗВ = Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ;
		КонецЕсли;	 
		ФорматФайла = Перечисления.ФорматФайлаПФР.Версия07;
		НомерПачки = "";
		ПринятоВПФР = Ложь;
	ИначеЕсли Не ПринятоВПФР тогда
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	Иначе
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = ПредставлениеПериода(НачалоГода(ОтчетныйПериод), ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод), "ФП = Истина" );
	
	ФлажокПринятоВПФР = ПринятоВПФР;

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	УстановитьЗаголовкиОрганизацийВФорме();
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	мТекущийОтчетныйПериод = ОтчетныйПериод;
	
	мЕстьДоступКНачислениям = НастройкаПравДоступаПереопределяемый.ДоступнаРольРасчетчикаРегл();
	Если Не мЕстьДоступКНачислениям Тогда
		КоманднаяПанель = ЭлементыФормы.ОсновныеДействияФормы.Кнопки;
		КоманднаяПанель.Удалить(КоманднаяПанель.НаДискетку);
		КоманднаяПанель.Удалить(КоманднаяПанель.Файл);
		КоманднаяПанель.Удалить(КоманднаяПанель.ОК);
		КоманднаяПанель.Удалить(КоманднаяПанель.Проверить);
	КонецЕсли;
	
	Если ЭтоНовый() И КатегорияЗастрахованныхЛиц.Пустая() Тогда
		ПриИзмененииОрганизации();
	Иначе
		ЭлементыФормы.КатегорияЗастрахованныхЛиц.ДоступныеЗначения = ПроцедурыПерсонифицированногоУчета.КатегорииЗастрахованныхЛицОрганизации(Организация, мГоловнаяОрганизация, ОтчетныйПериод, , ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
	КонецЕсли;
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.РаботникиОрганизации;
	КонецЕсли;
	
	РегламентированнаяОтчетность.ПриОткрытииФормыРегламентированногоОтчетаПФР(ЭтаФорма, Новый Действие("КоманднаяПанельФормыДействиеОтправка"));
	
	ПоказатьЭлементыФормы();
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	Если ПринятоВПФР Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ПоказатьЭлементыФормы();
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.РаботникиОрганизации, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1,,,, Истина);
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииДействиеРедактироватьСЗВ(Кнопка)
	
	СтрокаРаботники = ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока;
	Если СтрокаРаботники = Неопределено Тогда
		Возврат;
	КонецЕсли;	 
	Если Не ЗначениеЗаполнено(СтрокаРаботники.ФизЛицо) Тогда
		Возврат;
	КонецЕсли; 
	
	ФормаВводаДанныхСЗВ4 = ПолучитьОбщуюФорму("ФормаВводаДанныхСЗВ4", ЭтаФорма, СтрокаРаботники.ФизЛицо);
	ЗаполнитьЗначенияСвойств(ФормаВводаДанныхСЗВ4,ЭтотОбъект,"Организация,ОтчетныйПериод,КатегорияЗастрахованныхЛиц");
	ФормаВводаДанныхСЗВ4.ФизЛицо = СтрокаРаботники.ФизЛицо;
	ФормаВводаДанныхСЗВ4.ДатаОкончанияМежрасчетногоПериода = СтрокаРаботники.ДатаСоставления;
	ФормаВводаДанныхСЗВ4.ИспользоватьМежрасчетныйПериод = Истина;
	ФормаВводаДанныхСЗВ4.ТолькоЧтение = Проведен;
	ФормаВводаДанныхСЗВ4.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельРаботникиОрганизацииЗаполнитьВзносы(Кнопка)
	
	Если РаботникиОрганизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если КатегорияЗастрахованныхЛиц.Пустая() Тогда
		РаботаСДиалогами.ВывестиПредупреждение("Не указана категория застрахованных лиц!");
		Возврат;
	КонецЕсли;
	
	Вопрос = "Имеющиеся данные о суммах начисленных, уплаченных взносов по застрахованным лицам будут обновлены. Продолжить?";
	Ответ  = Вопрос(Вопрос, РежимДиалогаВопрос.ДаНет);
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьВзносы();
	
КонецПроцедуры

Процедура ОсновныеДействияФормыФайл(Кнопка)
	ПроцедурыПерсонифицированногоУчета.ПоказатьФайлДокумента(ЭтотОбъект,"Файл-пачка документов СПВ-1");
КонецПроцедуры

// Запускает тестирование файла программой проверки
//
Процедура ОсновныеДействияФормыПроверитьВCheckXML(Кнопка)
	ПроцедурыПерсонифицированногоУчета.ПроверитьФайлВCheckXML(ДокументОбъект, ЭтаФорма);
КонецПроцедуры

// Запускает тестирование файла программой проверки
//
Процедура ОсновныеДействияФормыПроверитьВCheckUFA(Кнопка)
	ПроцедурыПерсонифицированногоУчета.ПроверитьФайлВCheckUFA(ДокументОбъект, ЭтаФорма);
КонецПроцедуры

// копирует файл с "правильным" именем в указанное пользователем место
//
Процедура ОсновныеДействияФормыНаДискетку(Кнопка)
	
	Вопрос = "Перед формированием файла необходимо записать документ. Записать?";
	Если НЕ РегламентированнаяОтчетность.ТребованиеЗаписиДокументаУдовлетворено(ЭтотОбъект,Вопрос) тогда
		Возврат;
	КонецЕсли;

    ПроцедурыПерсонифицированногоУчета.ЗаписатьФайлДокументаНаДискету(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"), ПроцедурыПерсонифицированногоУчета.ПолучитьИмяФайлаПФ(Ссылка, Год(ОтчетныйПериод)), "windows-1251");
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	Если Год(мТекущаяДатаДокумента) <> Год(Дата) Тогда
		НомерПачки = "";
	КонецЕсли;
	
	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);

	ПриИзмененииОрганизации();
	
	РегламентированнаяОтчетность.ПриИзмененииОрганизацииВРегламентированномОтчетеПФР(ЭтаФорма, Новый Действие("КоманднаяПанельФормыДействиеОтправка"));
	
КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ОтчетныйПериодРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	Если ОтчетныйПериод = '20100101' Тогда
		Если Направление = 1 Тогда
			 ОтчетныйПериод = '20100701'
		КонецЕсли;
	ИначеЕсли ОтчетныйПериод = '20100701' Тогда
		ОтчетныйПериод = ДобавитьМесяц(ОтчетныйПериод, Направление * 6);
	ИначеЕсли ОтчетныйПериод = '20110101' и Направление = -1 Тогда
		ОтчетныйПериод = '20100701'
	Иначе
		ОтчетныйПериод = ДобавитьМесяц(ОтчетныйПериод, Направление * 3);
	КонецЕсли;
	Элемент.Значение = ПредставлениеПериода(НачалоГода(ОтчетныйПериод), ПроцедурыПерсонифицированногоУчета.ОкончаниеОтчетногоПериодаПерсучета(ОтчетныйПериод), "ФП = Истина" );
	
	Если мТекущийОтчетныйПериод <> ОтчетныйПериод Тогда
		
		СписокКатегорийЗастрахованныхЛиц = ПроцедурыПерсонифицированногоУчета.КатегорииЗастрахованныхЛицОрганизации(Организация, мГоловнаяОрганизация, ОтчетныйПериод, , ТипСведенийСЗВ <> Перечисления.ТипыСведенийСЗВ.ИСХОДНАЯ);
		Если СписокКатегорийЗастрахованныхЛиц.НайтиПоЗначению(КатегорияЗастрахованныхЛиц) = Неопределено Тогда
			КатегорияЗастрахованныхЛиц = СписокКатегорийЗастрахованныхЛиц[0].Значение;
		КонецЕсли;
		ЭлементыФормы.КатегорияЗастрахованныхЛиц.ДоступныеЗначения = СписокКатегорийЗастрахованныхЛиц;
		
		мТекущийОтчетныйПериод = ОтчетныйПериод;
			
	КонецЕсли;
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

Процедура ПереключательТипСведенийПриИзменении(Элемент)
	
	ПоказатьЭлементыФормы();
	
КонецПроцедуры

Процедура ПринятоВПФРПриИзменении(Элемент)
	
	ПринятоВПФР = ФлажокПринятоВПФР;
	
	Если Не ПринятоВПФР Тогда
		ТолькоПросмотр = Ложь;
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
	КонецЕсли;
	
	ПоказатьЭлементыФормы();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ

Процедура РаботникиОрганизацииПриПолученииДанных(Элемент, ОформленияСтрок)
	// уберем ненужные ячейки колонок заголовка
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		ОформлениеСтроки.Ячейки.КолонкаСтраховая.Видимость = Ложь;
		ОформлениеСтроки.Ячейки.КолонкаНакопительная.Видимость = Ложь;
	КонецЦикла;
КонецПроцедуры

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
		
	Физлицо = ВыбранноеЗначение;
		
	Если РаботникиОрганизации.НайтиСтроки(Новый Структура("ФизЛицо", ФизЛицо)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = РаботникиОрганизации.Добавить();
		СтрокаТабличнойЧасти.Физлицо = Физлицо;
		ПриИзмененииФизлица(СтрокаТабличнойЧасти);
	КонецЕсли;
	
КонецПроцедуры  // ТабличнаяЧастьОбработкаВыбора

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОЙ ЧАСТИ РаботникиОрганизации

// Процедура - обработчик события "ПриИзменении" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоПриИзменении(Элемент)
	ПриИзмененииФизлица(ЭлементыФормы.РаботникиОрганизации.ТекущаяСтрока);
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбора" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение,, Истина);
	
КонецПроцедуры

Процедура РаботникиОрганизацииФизЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, мГоловнаяОрганизация, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 1, Текст, Организация, Истина);
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода физлица
// переопеределим выбор физлица на выбор из списка регистра сведений
//
Процедура РаботникиОрганизацииФизЛицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 1, Текст, Организация, Истина);
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли; 
	
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ МЕХАНИЗМА ЗАЩИЩЕННОГО ДОКУМЕНТООБОРОТА С ПФР

Процедура КоманднаяПанельФормыДействиеОтправка(Кнопка)
	
	РегламентированнаяОтчетность.ПриНажатииНаКнопкуОтправкиВРегламентированномОтчетеПФР(ЭтаФорма, Кнопка);
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если КонтекстЭДО <> Неопределено Тогда
		КонтекстЭДО.ОбработкаОповещенияФормыРегламентированногоОтчетаПФР(ЭтаФорма, ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ