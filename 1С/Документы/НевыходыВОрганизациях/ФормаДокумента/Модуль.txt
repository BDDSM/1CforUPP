////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит последнюю установленную дату документа - для проверки перехода документа в другой период

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит "Результат" текущей строки
Перем мСтарыйРезультат;
// Хранит "ОтработаноДней" текущей строки
Перем мБылоОтработаноДней;
// Хранит "ОтработаноЧасов" текущей строки
Перем мБылоОтработаноЧасов;
// Хранит "ОтработаноДнейПоПятидневке" текущей строки
Перем мБылоОтработаноДнейПоПятидневке;
// Хранит "НормаДней" текущей строки
Перем мБылоНормаДней;
// Хранит "НормаЧасов" текущей строки
Перем мБылоНормаЧасов;
// Хранит "НормаДнейПоПятидневке" текущей строки
Перем мБылоНормаДнейПоПятидневке;

Перем мСведенияОВидахРасчетаПоказатели;
Перем мСписокПричинНевыхода;

Перем мОбработкаПодбораПоСтроке;
Перем мТекстПодбораПоСтроке;
Перем мПоследнееЗначениеЭлементаПодбораПоСтроке;

// Хранит ссылку на головную организацию
Перем мГоловнаяОрганизация;
// Массив ЭУ видимостью которых необходимо управлять в зависимости от учетной политики по персоналу
Перем мМассивЭУ;

// Механизм исправлений
Перем мДокументыИсправление;
Перем мДокументСторнирование;
Перем мСотрудникиИсправление;
Перем мМенюИсправление;
Перем мКнопкаИсправлениеТекущийСотрудник;
Перем мКнопкаИсправлениеВесьДокумент;
Перем мКнопкаИсправлениеСписокСотрудников;
Перем мКнопкаОтменаИсправление;
Перем мТекущийСотрудник;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельРаботникиОрганизации);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры // УстановитьКнопкиПодменюЗаполненияТЧ()

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));

	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));

	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры // УстановитьКнопкиПечати()

// Функция формирует структуру параметров для для ввода головной организации по подстроке
//
// Параметры
//	НЕТ
//
// Возвращаемое значение:
//	Структура имен и значений параметров
//
Функция ПолучитьСтруктуруПараметровПодбораПоСтроке()

	СтруктураПараметров = Новый Структура("Ссылка", мСписокПричинНевыхода);
	
	Возврат СтруктураПараметров;

КонецФункции // ПолучитьСтруктуруПараметровПодбораПоСтроке()

// Управляет видимость элементов формы, зависящих от Способа регистрации времени
Процедура ОбновитьВидимостьПоСпособуРегистрацииВремени()
	
	ЭтоЦелосменныйНевыход = СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
	ЭлементыФормы.Начисления.Колонки.ДатаОкончания.Видимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.ДатаОкончания.ИзменятьВидимость = ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.ОплачиватьЧасов.Видимость = Не ЭтоЦелосменныйНевыход;
	ЭлементыФормы.Начисления.Колонки.ОплачиватьЧасов.ИзменятьВидимость = Не ЭтоЦелосменныйНевыход;

КонецПроцедуры // ОбновитьВидимостьПоСпособуРегистрацииВремени

// Выбирает из всего списка начислений подходящие по Способу регистрации времени причины невыхода
Процедура СформироватьСписокПричинНевыхода()

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НулеваяСумма", Перечисления.СпособыРасчетаОплатыТруда.НулеваяСумма);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ОсновныеНачисления.Ссылка КАК ВидРасчета
	|ИЗ
	|	ПланВидовРасчета.ОсновныеНачисленияОрганизаций КАК ОсновныеНачисления
	|ГДЕ
	|	(НЕ ОсновныеНачисления.Предопределенный)
	|	И ОсновныеНачисления.СпособРасчета В(&НулеваяСумма)
	|	И ОсновныеНачисления.ВидВремени = &ВидВремени";
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
		
		Запрос.УстановитьПараметр("ВидВремени", Перечисления.ВидыВремени.ЦелодневноеНеотработанное);
		мСписокПричинНевыхода.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));
		мСписокПричинНевыхода.Вставить(0,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускЗаСвойСчет);
		мСписокПричинНевыхода.Вставить(1,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Невыход);
		мСписокПричинНевыхода.Вставить(2,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.Прогул);
		мСписокПричинНевыхода.Вставить(3,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыУчебный);
		мСписокПричинНевыхода.Вставить(4,ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ОтпускБезОплатыПоТКРФ);
		
	Иначе // здесь только почасовые невыходы
		
		Запрос.УстановитьПараметр("ВидВремени", Перечисления.ВидыВремени.ЧасовоеНеотработанное);
		мСписокПричинНевыхода.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ВидРасчета"));
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПолучитьСотрудниковСИсправлениями()

	ТекстЗапроса =
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	НевыходыВОрганизацияхНачисления.Сотрудник
	|ИЗ
	|	Документ.НевыходыВОрганизациях.Начисления КАК НевыходыВОрганизацияхНачисления
	|ГДЕ
	|	НевыходыВОрганизацияхНачисления.Ссылка В(&Исправления)
	|	И НевыходыВОрганизацияхНачисления.Сторно
	|	И НевыходыВОрганизацияхНачисления.СторнируемыйДокумент = НевыходыВОрганизацияхНачисления.Ссылка.ПерерассчитываемыйДокумент";
	
	мСотрудникиИсправление = ПроведениеРасчетов.СформироватьСоответствиеСотрудниковСИсправлениями(ТекстЗапроса, мДокументыИсправление);
	
КонецПроцедуры

Процедура ОбновитьТекущегоСотрудника()

	ТекущиеДанные	= ЭлементыФормы.Начисления.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		ТекущийСотрудник = ТекущиеДанные.Сотрудник;
	Иначе
		ТекущийСотрудник = Справочники.СотрудникиОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	// Установим имя и доступность кнопки ТекущийСотрудник механизма исправлений
	Если ЭлементыФормы.ДополнительныеДействия.Кнопки.Найти("Исправить") <> Неопределено И мТекущийСотрудник <> ТекущийСотрудник Тогда
		РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(ТекущийСотрудник),ТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник)
	КонецЕсли;
	
	мТекущийСотрудник = ТекущийСотрудник;

КонецПроцедуры

Процедура ОбновитьОписаниеСостоянияДокумента()

	// связанные документы
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	Сторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	НеЗаполнен = Не ЗначениеЗаполнено(Организация) Или Начисления.Количество() = 0;
	
	ЗаполненСОшибками = Начисления.НайтиСтроки(Новый Структура("Сотрудник",Справочники.СотрудникиОрганизаций.ПустаяСсылка())).Количество() > 0;
	ЗаполненСОшибками = ЗаполненСОшибками Или Начисления.НайтиСтроки(Новый Структура("ВидРасчета",Неопределено)).Количество() > 0;
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
		ЗаполненСОшибками = ЗаполненСОшибками Или Начисления.НайтиСтроки(Новый Структура("ДатаНачала",'00010101')).Количество() > 0;
		ЗаполненСОшибками = ЗаполненСОшибками Или Начисления.НайтиСтроки(Новый Структура("ДатаОкончания",'00010101')).Количество() > 0;
	Иначе
		ЗаполненСОшибками = ЗаполненСОшибками Или Начисления.НайтиСтроки(Новый Структура("ОплачиватьЧасов",0)).Количество() > 0;
	КонецЕсли;
	
	СтрокНачислений = Начисления.НайтиСтроки(Новый Структура("Сторно",Ложь)).Количество();
	НеРассчитан = Начисления.НайтиСтроки(Новый Структура("Результат, Сторно",0,Ложь)).Количество() = СтрокНачислений И СтрокНачислений > 0 И Начисления.НайтиСтроки(Новый Структура("НормаДней, Сторно",0,Ложь)).Количество() = СтрокНачислений И Начисления.НайтиСтроки(Новый Структура("НормаЧасов, Сторно",0,Ложь)).Количество() = СтрокНачислений;
	
	ОписаниеСостоянияДокумента = РаботаСДиалогамиЗК.ПолучитьОписаниеРасчетногоДокумента(Не НеЗаполнен,ЗаполненСОшибками,Не НеРассчитан,Проведен,ЭтоИсправление,ДокументИсправлен,Сторнирован,Ложь,Ложь); // поля структуры описания - ТекстСообщения и ВажностьСообщения
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);

КонецПроцедуры

Процедура УстановитьКнопкиИсправленияДокумента(ДокументИсправлен = Неопределено, ИсправленВесьДокумент = Неопределено, ДокументСторнирован = Неопределено)
	
	Если ДокументИсправлен = Неопределено Тогда
		ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	КонецЕсли;
	Если ДокументСторнирован = Неопределено Тогда
		ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	КонецЕсли;
	
	Если ИсправленВесьДокумент = Неопределено Тогда
		ИсправленВесьДокумент = ДокументИсправлен;
		Если ИсправленВесьДокумент Тогда
			Для каждого СтрокаТЧ Из Начисления Цикл
				ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
				Если Не ИсправленВесьДокумент Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
	Если ДокументСторнирован Или ПериодРегистрации >= НачалоМесяца(ОбщегоНазначения.ПолучитьРабочуюДату()) Тогда
		ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	Иначе 
		
		Кнопки = ЭлементыФормы.ДополнительныеДействия.Кнопки;
		Если Кнопки.Количество() = 0 Тогда
			МенюИсправить = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Подменю);
			ЗаполнитьЗначенияСвойств(МенюИсправить, мМенюИсправление);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеТекущийСотрудник.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеТекущийСотрудник);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеВесьДокумент.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеВесьДокумент);
			МенюИсправить.Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = МенюИсправить.Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаИсправлениеСписокСотрудников.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаИсправлениеСписокСотрудников);
		КонецЕсли;
		Кнопки.Исправить.Кнопки.ТекущийСотрудник.Доступность = Не ИсправленВесьДокумент;
		Кнопки.Исправить.Кнопки.ВесьДокумент.Доступность = Не ДокументИсправлен;
		Кнопки.Исправить.Кнопки.СписокСотрудников.Доступность = Не ИсправленВесьДокумент;
			
		Если Кнопки.Количество() = 1 И ДокументИсправлен Тогда
			Кнопки.Добавить("Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
			НоваяКнопка = Кнопки.Добавить("Новая", ТипКнопкиКоманднойПанели.Действие, , мКнопкаОтменаИсправление.Действие);
			ЗаполнитьЗначенияСвойств(НоваяКнопка, мКнопкаОтменаИсправление);
		ИначеЕсли Кнопки.Количество() > 1 И Не ДокументИсправлен Тогда
			Кнопки.Удалить(Кнопки.ОтменитьИсправление);
			Кнопки.Удалить(Кнопки.Разделитель);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Управляет видимостью элементов формы, зависящих от наличия перерассчитываемого документа
Процедура ОбновитьДоступностьЭлементовФормы()
	
	ЭтоИсправление = ЗначениеЗаполнено(ПерерассчитываемыйДокумент);
	ДокументИсправлен = ЗначениеЗаполнено(мДокументыИсправление);
	ДокументСторнирован = ЗначениеЗаполнено(мДокументСторнирование);
	
	ИсправленВесьДокумент = ДокументИсправлен;
	Если ИсправленВесьДокумент Тогда
		Для каждого СтрокаТЧ Из Начисления Цикл
			ИсправленВесьДокумент = мСотрудникиИсправление[СтрокаТЧ.Сотрудник] <> Неопределено;
			Если Не ИсправленВесьДокумент Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
	КонецЕсли;
	
	ТолькоПросмотр = ДокументИсправлен Или ДокументСторнирован;
	РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	
	ЭлементыФормы.Организация.ТолькоПросмотр = ТолькоПросмотр Или ЭтоИсправление;
	
	УстановитьКнопкиИсправленияДокумента(ДокументИсправлен, ИсправленВесьДокумент, ДокументСторнирован);
	
	ЭлементыФормы.ПанельОткрытьИсправление.Свертка = ?(ДокументИсправлен Или ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.ПанельОткрытьИсходный.Свертка = ?(ЭтоИсправление И Не ДокументСторнирован,РежимСверткиЭлементаУправления.Нет,РежимСверткиЭлементаУправления.Право);
	ЭлементыФормы.НадписьОткрытьИсправление.Заголовок = ?(ДокументСторнирован,"Открыть сторно-документ","Открыть исправления");
	
	Если Не ТолькоПросмотр Тогда
		МожноЗаполнять = Не ЭтоИсправление;
		СоставМенюЗаполнить = ЭлементыФормы.ДействияФормы.Кнопки.ПодменюЗаполнить.Кнопки;
		Для каждого Кнопка Из СоставМенюЗаполнить Цикл
			Если Кнопка.ТипКнопки <> ТипКнопкиКоманднойПанели.Разделитель Тогда
				Кнопка.Доступность = МожноЗаполнять
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ОбновитьДоступностьЭлементовФормы()

Процедура УстановитьЗаголовкиОрганизацийВФорме()
	
	ЭлементыФормы.НадписьОрганизация.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.НадписьОрганизация.Значение = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация:");
	ЭлементыФормы.Организация.Подсказка = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Организация");
	ЭтаФорма.Заголовок = ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Невыходы в организации");
КонецПроцедуры // УстановитьЗаголовкиОрганизацийВФорме()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	Если Не ЭтоНовый() Тогда
		мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
		мДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
		ОбновитьОписаниеСостоянияДокумента();
		Если ЗначениеЗаполнено(мДокументыИсправление) Тогда
			ПолучитьСотрудниковСИсправлениями();
		КонецЕсли;
	Иначе
		РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение,ЭлементыФормы.ПолеКартинкиПредупреждение, "Документ не заполнен", "СообщениеОПроблемах");
	КонецЕсли;
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()

	Если ЭтоНовый() Тогда
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		Если СпособРегистрацииВремени.Пустая() Тогда
			СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены;
		КонецЕсли;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ПодразделениеОрганизации");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("НаименованиеПоказатель1");
	СтруктураКолонок.Вставить("НаименованиеПоказатель2");
	СтруктураКолонок.Вставить("НаименованиеПоказатель3");
	СтруктураКолонок.Вставить("НаименованиеПоказатель4");
	СтруктураКолонок.Вставить("НаименованиеПоказатель5");
	СтруктураКолонок.Вставить("НаименованиеПоказатель6");
	СтруктураКолонок.Вставить("Показатель1");
	СтруктураКолонок.Вставить("Показатель2");
	СтруктураКолонок.Вставить("Показатель3");
	СтруктураКолонок.Вставить("Показатель4");
	СтруктураКолонок.Вставить("Показатель5");
	СтруктураКолонок.Вставить("Показатель6");

	// Установить ограничение - изменять видимость колонок табличной части
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы вид операции и статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);

	// Установить видимость колонок табличной части по выбранному способу регистрации времени.
	ОбновитьВидимостьПоСпособуРегистрацииВремени();
	// Список причин невыхода
	СформироватьСписокПричинНевыхода();
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;

	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Исправление документов
	мМенюИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить;
	мКнопкаИсправлениеТекущийСотрудник = мМенюИсправление.Кнопки.ТекущийСотрудник;
	мКнопкаИсправлениеВесьДокумент = мМенюИсправление.Кнопки.ВесьДокумент;
	мКнопкаИсправлениеСписокСотрудников = мМенюИсправление.Кнопки.СписокСотрудников;
	мКнопкаОтменаИсправление = ЭлементыФормы.ДополнительныеДействия.Кнопки.ОтменитьИсправление;
	ЭлементыФормы.ДополнительныеДействия.Кнопки.Очистить();
	
	// Установим видимость в зависимости от наличия перерассчитываемого документа
	ОбновитьДоступностьЭлементовФормы();
	
	// Установим видимость реквизитов в зависимости от уч.политики по персоналу организаций
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Начисления.Колонки.ТабельныйНомерСтрока);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Начисления;
	КонецЕсли;
    УстановитьЗаголовкиОрганизацийВФорме();
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = ""; Реквизиты = "";
		
		Если ЗначениеВыбора.Свойство("Команда",Команда) и Команда = "ЗаполнитьСписокРаботников" Тогда
			ВременнаяТаблица = ЗначениеВыбора.Данные.Выгрузить();
			ВременнаяТаблица.Колонки.Подразделение.Имя = "ПодразделениеОрганизации";
			
			Если ЗначениеВыбора.Свойство("Реквизиты",Реквизиты) Тогда
				РеквизитыТЧ = ЭтотОбъект.Метаданные().ТабличныеЧасти.Начисления.Реквизиты;
				
				Для Каждого Значение Из Реквизиты Цикл
					
					Если РеквизитыТЧ.Найти(Значение.Ключ) <> Неопределено Тогда
						Если ВременнаяТаблица.Колонки.Найти(Значение.Ключ) = Неопределено Тогда
							ВременнаяТаблица.Колонки.Добавить(Значение.Ключ);
						КонецЕсли;
						ВременнаяТаблица.ЗаполнитьЗначения(Значение.Значение,Значение.Ключ);
					КонецЕсли;
					
				КонецЦикла;
				
				ВременнаяТаблица.Колонки.Добавить("ДатаНачалаСобытия");
				ВременнаяТаблица.ЗаполнитьЗначения(Реквизиты.ДатаНачала, "ДатаНачалаСобытия");
				
			КонецЕсли;
			
			ВременнаяТаблица.Колонки.Добавить("Авторасчет");
			ВременнаяТаблица.ЗаполнитьЗначения(Истина, "Авторасчет");
			Начисления.Загрузить(ВременнаяТаблица);
			
		ИначеЕсли ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ЗаполнитьДокументИсправление" Тогда
			РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, ЗначениеВыбора.ВыбранныеСотрудники);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры // ОбработкаВыбора()

// Процедура - обработчик события "ОбработкаОповещения" формы.
//
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ОбновитьФорму" И Не ЭтоНовый() Тогда
		Если ТипЗнч(Параметр) = Тип("Структура") Тогда
			
			Команда = "";
			Если Параметр.Свойство("Команда",Команда) Тогда  // Источник прислал структуру параметров с командой
				Если Команда = "ДоступностьИсправленногоДокумента" Тогда
					Если Параметр.Объект = Ссылка И мДокументыИсправление.Найти(Источник) = Неопределено Тогда 
						мДокументыИсправление.Добавить(Источник);
						ПолучитьСотрудниковСИсправлениями();
						ОбновитьДоступностьЭлементовФормы();
						РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
					КонецЕсли;
				ИначеЕсли Команда = "ДоступностьОтмененногоДокумента" Тогда
					Если Параметр.Объект = Ссылка Тогда
						Если мДокументСторнирование <> Источник Тогда
							мДокументСторнирование = Источник;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					ИначеЕсли ЗначениеЗаполнено(мДокументСторнирование) Тогда
						НовыйДокументСторнирование = ПроведениеРасчетов.ПолучитьДокументСторнирование(Ссылка);
						Если мДокументСторнирование <> НовыйДокументСторнирование Тогда
							мДокументСторнирование = НовыйДокументСторнирование;
							Если Не ЗначениеЗаполнено(мДокументСторнирование) Тогда
								РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);
							КонецЕсли;
							ОбновитьДоступностьЭлементовФормы();
						КонецЕсли;
					КонецЕсли;
				Иначе
				КонецЕсли;
			Иначе
			КонецЕсли;
			
		Иначе
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения

// Процедура - обработчик события "ОбновлениеОтображения" формы
//
Процедура ОбновлениеОтображения()
	
	ОбновитьОписаниеСостоянияДокумента();
	
КонецПроцедуры // ОбновлениеОтображения()

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()

	// оповестим исходный, исправляемый документ
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		Оповестить("ОбновитьФорму", Новый Структура("Команда, Объект","ДоступностьИсправленногоДокумента", ПерерассчитываемыйДокумент), Ссылка);
	КонецЕсли;

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	
КонецПроцедуры // ПослеЗаписи()

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	РаботаСДиалогамиЗК.ОбработатьЗакрытиеФормы(Отказ, СтандартнаяОбработка, ЭтаФорма);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура - обработчик события нажатия кнопки "Рассчитать начисления" 
//
Процедура ДействияФормыРассчитатьНачисления(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	Рассчитать();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные;
	
	Если ДанныеСтроки <> Неопределено Тогда
		мСтарыйРезультат				= ДанныеСтроки.Результат;
		мБылоОтработаноДней				= ДанныеСтроки.ОтработаноДней;
		мБылоОтработаноЧасов			= ДанныеСтроки.ОтработаноЧасов;
		мБылоОтработаноДнейПоПятидневке	= ДанныеСтроки.ОтработаноДнейПоПятидневке;
		мБылоНормаДней					= ДанныеСтроки.НормаДней;
		мБылоНормаЧасов					= ДанныеСтроки.НормаЧасов;
		мБылоНормаДнейПоПятидневке		= ДанныеСтроки.НормаДнейПоПятидневке;
	КонецЕсли;
	
КонецПроцедуры // ДействияФормыРассчитатьНачисления()

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыЗаполнить(Кнопка)
	
	Если Начисления.Количество() > 0 Тогда
		ТекстВопроса = "Перед заполнением табличная часть будет очищена. Заполнить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли;

	КонецЕсли;
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЦелойСмены Тогда
		ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации), , Организация, , , ,"НевыходыВОрганизацияхДляЦелойСмены", Новый Структура("ВидРасчета,ДатаНачала,ДатаОкончания",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка(),Дата(1,1,1),Дата(1,1,1)), ПериодРегистрации, Истина);
	Иначе
		ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации), , Организация, , , ,"НевыходыВОрганизацияхДляЧастиСмены", Новый Структура("ВидРасчета,ОплачиватьЧасов,ДатаНачала",ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка(),0,Дата(1,1,1)), ПериодРегистрации, Истина);
	КонецЕсли;

КонецПроцедуры // ДействияФормыЗаполнить()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьСвойства()

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры // ДействияФормыДействиеОткрытьКатегории()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыСтруктураПодчиненностиДокумента()

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
			
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры // НажатиеНаДополнительнуюКнопкуЗаполненияТЧ()

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечатьПоУмолчанию()

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры // ОсновныеДействияФормыПечать()

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры // ОсновныеДействияФормыУстановитьПечатьПоУмолчанию()

Процедура ДополнительныеДействияТекущийСотрудник(Кнопка)
	
	Если Не ЗначениеЗаполнено(мТекущийСотрудник) Тогда
		Предупреждение("Не выбран сотрудник для исправления расчетов!");
		Возврат;
	КонецЕсли;
	
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма, мТекущийСотрудник);

КонецПроцедуры

Процедура ДополнительныеДействияВесьДокумент(Кнопка)
	РаботаСДиалогамиЗК.ВвестиДокументИсправление(ЭтотОбъект, ЭтаФорма);
КонецПроцедуры

Процедура ДополнительныеДействияСписокСотрудников(Кнопка)
	
	Если Проведен Тогда
		
		ТекстВопроса = "Для исправления необходимо записать документ. Продолжить?";
		Если Не РаботаСДиалогами.ЗаписатьДокументПередВыполнениемДействия(ЭтотОбъект, ЭтаФорма, ТекстВопроса) Тогда
			Возврат;
		КонецЕсли;
		
		СписокСотрудников = Новый СписокЗначений;
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	НевыходыВОрганизацияхНачисления.Сотрудник,
		|	НевыходыВОрганизацияхНачисления.Сотрудник.Наименование КАК Наименование
		|ИЗ
		|	Документ.НевыходыВОрганизациях.Начисления КАК НевыходыВОрганизацияхНачисления
		|ГДЕ
		|	НевыходыВОрганизацияхНачисления.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		Запрос.УстановитьПараметр("Ссылка",Ссылка); 
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если мСотрудникиИсправление[Выборка.Сотрудник] = Неопределено Тогда
				СписокСотрудников.Добавить(Выборка.Сотрудник,Выборка.Наименование)
			КонецЕсли;
		КонецЦикла;
		
		Форма = ПолучитьОбщуюФорму("ФормаВыбораСотрудников", ЭтаФорма, Ссылка);
		Форма.СписокСотрудников = СписокСотрудников;
		Форма.Заголовок = "Сотрудники документа Невыходы №" + Номер + " от " + Формат(Дата,"ДФ=dd.MM.yyyy");
		Форма.Открыть();
		
	Иначе
		Предупреждение("Исправить можно только проведенный документ!")
	КонецЕсли;
	
КонецПроцедуры

// Процедура отмены документов-исправлений
Процедура ДополнительныеДействияОтменитьИсправление(Кнопка)
	
	РаботаСДиалогамиЗК.ОтменитьИсправлениеДокумента(Ссылка);
	мДокументыИсправление = ПроведениеРасчетов.ПолучитьДокументИсправление(Ссылка,"КритерийОтбора");
	ПолучитьСотрудниковСИсправлениями();
	ОбновитьДоступностьЭлементовФормы();
	РаботаСДиалогамиЗК.ОбновитьКнопкуИсправленияРасчетовСотрудника(ТипЗнч(мТекущийСотрудник),мТекущийСотрудник,мСотрудникиИсправление,ЭлементыФормы.ДополнительныеДействия.Кнопки.Исправить.Кнопки.ТекущийСотрудник);
	Обновить();
	
КонецПроцедуры

// Процедура - вызывается при нажатии на кнопку "Подбор"
//
Процедура КоманднаяПанельРаботникиОрганизацииПодбор(Кнопка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(ЭлементыФормы.Начисления, Ссылка, Ложь, Дата, мГоловнаяОрганизация, 1);
	
КонецПроцедуры // КоманднаяПанельРаботникиОрганизацииПодбор()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода организации.
//
Процедура ОрганизацияПриИзменении(Элемент)

	Если Не ПустаяСтрока(Номер) Тогда
		МеханизмНумерацииОбъектов.СброситьУстановленныйКодНомерОбъекта(ЭтотОбъект, "Номер", ЭлементыФормы.ДействияФормы.Кнопки.Подменю1, ЭлементыФормы.Номер);
	КонецЕсли;
	
	// Получим и запомним ссылку на головную организацию
	мГоловнаяОрганизация = ОбщегоНазначения.ГоловнаяОрганизация(Организация);
	
	// Установим видимость реквизитов в зависимости от уч.политики
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналуОрганизации"),Организация);

КонецПроцедуры // ОрганизацияПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииПриИзменении()

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииРегулирование()

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // ПериодРегистрацииОчистка()

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
	УстановитьКнопкиИсправленияДокумента();
	
КонецПроцедуры // ПериодРегистрацииНачалоВыбораИзСписка()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры // ПериодРегистрацииОкончаниеВводаТекста()

// Процедура - обработчик события "ПрИзменении" поля "СпособРегистрацииВремени"
//
Процедура СпособРегистрацииВремениПриИзменении(Элемент)
	
	ОбновитьВидимостьПоСпособуРегистрацииВремени();
	СформироватьСписокПричинНевыхода();
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены И мСписокПричинНевыхода.Количество() = 0 Тогда
		Предупреждение("В списке начислений не описано ни одного внутрисменного невыхода!");
	КонецЕсли;
	
КонецПроцедуры

Процедура НадписьОткрытьИсправлениеНажатие(Элемент)
	
	РаботаСДиалогамиЗК.ПоказатьИсправления(ЭтаФорма, Ссылка, мДокументыИсправление, мДокументСторнирование);
	
КонецПроцедуры

Процедура НадписьОткрытьИсходныйНажатие(Элемент)
	Если ЗначениеЗаполнено(ПерерассчитываемыйДокумент) Тогда
		ПерерассчитываемыйДокумент.ПолучитьФорму(, ЭтаФорма).Открыть();
	КонецЕсли;
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Начисления

// Процедура - обработчик события "ПриАктивизацииСтроки"
//
Процедура НачисленияПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияНачисленияПриАктивизацииСтроки", 0.1, Истина);

КонецПроцедуры // НачисленияПриАктивизацииСтроки()

Процедура ОбработчикОжиданияНачисленияПриАктивизацииСтроки()
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ДанныеСтроки <> Неопределено Тогда
		
		мСтарыйРезультат				= ДанныеСтроки.Результат;
		мБылоОтработаноДней				= ДанныеСтроки.ОтработаноДней;
		мБылоОтработаноЧасов			= ДанныеСтроки.ОтработаноЧасов;
		мБылоОтработаноДнейПоПятидневке	= ДанныеСтроки.ОтработаноДнейПоПятидневке;
		мБылоНормаДней					= ДанныеСтроки.НормаДней;
		мБылоНормаЧасов					= ДанныеСтроки.НормаЧасов;
		мБылоНормаДнейПоПятидневке		= ДанныеСтроки.НормаДнейПоПятидневке;
		ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
		Если ДанныеСтрокиВидРасчета = Неопределено Тогда
			ДанныеСтрокиВидРасчета = ПланыВидовРасчета.ОсновныеНачисленияОрганизаций.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
		
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Начисления, мСведенияОВидахРасчетаПоказатели, , Истина);

	ОбновитьТекущегоСотрудника();
	МожноРедактироватьСтроку = (ДанныеСтроки = Неопределено Или Не ДанныеСтроки.Сторно Или ДанныеСтроки.СторнируемыйДокумент <> ПерерассчитываемыйДокумент) И мСотрудникиИсправление[мТекущийСотрудник] = Неопределено;
	ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КоманднаяПанельРаботникиОрганизации.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюНачисления.Кнопки.Действие2.Доступность = МожноРедактироватьСтроку;
	ЭлементыФормы.КонтекстноеМенюНачисления.Кнопки.Действие1.Доступность = ЭлементыФормы.Начисления.ИзменятьСоставСтрок И МожноРедактироватьСтроку;
	
КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

// Процедура - обработчик события "ПередНачаломДобавления" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Если Копирование Тогда
		ДанныеСтроки = ЭлементыФормы.Начисления.ТекущаяСтрока;
		Отказ = ДанныеСтроки.Сторно И ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент Или мСотрудникиИсправление[мТекущийСотрудник] <> Неопределено;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередНачаломИзменения" табличного поля "Начисления"
//
Процедура НачисленияПередНачаломИзменения(Элемент, Отказ)
	Отказ = Элемент.ТекущиеДанные.Сторно И Элемент.ТекущиеДанные.СторнируемыйДокумент = ПерерассчитываемыйДокумент Или мСотрудникиИсправление[Элемент.ТекущиеДанные.Сотрудник] <> Неопределено	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина;
	КонецЕсли;
	
КонецПроцедуры // НачисленияПриНачалеРедактирования()

// Процедура - обработчик события "ПриПолученииДанных"
//
Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Начисления, ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ОбработатьОтображениеПоказателейДляРасчета(Элемент, ОформленияСтрок, мСведенияОВидахРасчетаПоказатели);
	
	Для каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
		Ячейки = ОформлениеСтроки.Ячейки;
		
		Если ДанныеСтроки.Сторно Тогда
			ОформлениеСтроки.ЦветТекста = ЦветаСтиля.ЦветОтрицательногоЧисла;
			Ячейки.Авторасчет.ТолькоПросмотр = ДанныеСтроки.СторнируемыйДокумент = ПерерассчитываемыйДокумент;
		Иначе
			Ячейки.СторнируемыйДокумент.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если мСотрудникиИсправление[ДанныеСтроки.Сотрудник] <> Неопределено Тогда
			ОформлениеСтроки.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			Ячейки.Авторасчет.ЦветФона = ЦветаСтиля.ФонНедоступнойСтрокиДокумента;
			Ячейки.Авторасчет.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Если ТипЗнч(ДанныеСтроки.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") Тогда
			Ячейки.ДатаНачалаСобытия.ТолькоПросмотр = Истина;
			Ячейки.ДатаНачалаСобытия.ОтметкаНезаполненного = Ложь;
		Иначе
			Ячейки.ЧислоМесяцев.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		ЯчейкаСКартинкой = Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
		
	КонецЦикла;	
	
КонецПроцедуры // НачисленияПриПолученииДанных()

// Процедура - обработчик события "ПриОкончанииРедактирования" строки таблицы
//
Процедура НачисленияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьТекущегоСотрудника();
	
	Если СпособРегистрацииВремени = Перечисления.СпособыРегистрацииВремени.РегистрацияДляЧастиСмены Тогда
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = Элемент.ТекущаяСтрока;
	
	Если ТекущаяСтрока.Сторно Или НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаНачала) ИЛИ НЕ ЗначениеЗаполнено(ТекущаяСтрока.ДатаОкончания)
		ИЛИ мСписокПричинНевыхода.НайтиПоЗначению(ТекущаяСтрока.ВидРасчета) = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РазницаВМесяцах = (Год(ТекущаяСтрока.ДатаОкончания)*12 + Месяц(ТекущаяСтрока.ДатаОкончания)) - (Год(ТекущаяСтрока.ДатаНачала)*12 + Месяц(ТекущаяСтрока.ДатаНачала));
	Если РазницаВМесяцах > 0 Тогда
		
		ТекстВопроса = "Разбить строку начислений на помесячные записи?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Возврат;
		КонецЕсли;
		
		ПроведениеРасчетов.РазбитьСтрокуНачисленийНаПомесячныеЗаписи(ТекущаяСтрока, Начисления);
		
	КонецЕсли;
	
КонецПроцедуры // НачисленияПриОкончанииРедактирования()

// Процедура - обработчик оповещения о выборе, присланного формой рег-ра сведений
//
Процедура НачисленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Начисления.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Начисления.Добавить();
		СтрокаТабличнойЧасти.Сотрудник = ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Физлицо = ВыбранноеЗначение.Физлицо;
		СтрокаТабличнойЧасти.Авторасчет = Истина;
			
		Элемент.ТекущаяСтрока = СтрокаТабличнойЧасти;
		ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(ВыбранноеЗначение, Дата, ЭлементыФормы.Начисления);
	КонецЕсли;
	
КонецПроцедуры // НачисленияОбработкаВыбора()

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ТАБЛИЧНОГО ПОЛЯ Начисления

// Процедура - обработчик события "ПриИзменении" поля ввода сотрудника
//
Процедура НачисленияСотрудникПриИзменении(Элемент)

	ДатаСобытия = ?(ЗначениеЗаполнено(ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания), ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания, Дата);
	ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(Элемент.Значение, ДатаСобытия, ЭлементыФормы.Начисления);
	ЭлементыФормы.Начисления.ТекущиеДанные.Физлицо = Элемент.Значение.Физлицо;
	
КонецПроцедуры // НачисленияСотрудникПриИзменении()

// Процедура - обработчик события "НачалоВыбора" поля ввода сотрудника
//
Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуВыбораСотрудникаОрганизации(Элемент, Ссылка, Истина, Дата, мГоловнаяОрганизация, 1, СтандартнаяОбработка, Элемент.Значение);
	
КонецПроцедуры // НачисленияСотрудникНачалоВыбора()

// Процедура - обработчик события "ОбработкаВыбора" поля ввода сотрудника
//
Процедура НачисленияСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ЭлементыФормы.Начисления.ТекущиеДанные.Авторасчет = Истина;
	ДатаСобытия = ?(ЗначениеЗаполнено(ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания), ЭлементыФормы.Начисления.ТекущиеДанные.ДатаОкончания, Дата);
	ПроцедурыУправленияПерсоналом.ПроставитьДанныеСтроки(ВыбранноеЗначение, Дата, ЭлементыФормы.Начисления);
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода сотрудника
//
Процедура НачисленияСотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьФИОСотрудника(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // НачисленияСотрудникАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода сотрудника
//
Процедура НачисленияСотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомПереопределяемый.ПодобратьСписокСотрудников(СтандартнаяОбработка, 3, Текст, Организация);
	
КонецПроцедуры // НачисленияСотрудникОкончаниеВводаТекста()

// Процедура - обработчик события "НачалоВыбора" поля ввода вида расчета
//
Процедура НачисленияВидРасчетаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЭлементСписка = ВыбратьИзСписка(мСписокПричинНевыхода,Элемент,мСписокПричинНевыхода.НайтиПоЗначению(Элемент.Значение));
	Если ЭлементСписка <> Неопределено Тогда
		Элемент.Значение = ЭлементСписка.Значение
	КонецЕсли;
	
КонецПроцедуры // НачисленияВидРасчетаНачалоВыбора()

// Процедура - обработчик события "АвтоПодборТекста" поля ввода расчета
//
Процедура НачисленияВидРасчетаАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.АвтоПодборТекстаВЭлементеУправления(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"));
	
КонецПроцедуры // НачисленияВидРасчетаАвтоПодборТекста()

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода расчета
//
Процедура НачисленияВидРасчетаОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	ПроцедурыПоискаПоСтроке.ОкончаниеВводаТекстаВЭлементеУправления(Элемент, Текст, Значение, СтандартнаяОбработка, ПолучитьСтруктуруПараметровПодбораПоСтроке(), ЭтаФорма, Тип("ПланВидовРасчетаСсылка.ОсновныеНачисленияОрганизаций"), мОбработкаПодбораПоСтроке, мТекстПодбораПоСтроке, мПоследнееЗначениеЭлементаПодбораПоСтроке, Ложь);
	
КонецПроцедуры // НачисленияВидРасчетаОкончаниеВводаТекста()

// Процедура - обработчик события "ПриИзменении" поля ввода даты начала
//
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	
	Если ТипЗнч(ЭлементыФормы.Начисления.ТекущиеДанные.ВидРасчета) = Тип("ПланВидовРасчетаСсылка.ДополнительныеНачисленияОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	ЭлементыФормы.Начисления.ТекущиеДанные.ДатаНачалаСобытия = Элемент.Значение;
	
КонецПроцедуры // НачисленияДатаНачалаПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "НормаДней"
//
Процедура НачисленияНормаДнейПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоНормаДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоНормаДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // НачисленияНормаДнейПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "НормаЧасов"
//
Процедура НачисленияНормаЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоНормаЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоНормаЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // НачисленияНормаЧасовПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "НормаДнейПоПятидневке"
//
Процедура НачисленияНормаДнейПоПятидневкеПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоНормаДнейПоПятидневке Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоНормаДнейПоПятидневке = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // НачисленияНормаДнейПоПятидневкеПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "Результат"
//
Процедура НачисленияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультат Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мСтарыйРезультат = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // НачисленияРезультатПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "Результат"
//
Процедура НачисленияОтработаноДнейПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноДней Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоОтработаноДней = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // НачисленияОтработаноДнейПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОтработаноЧасов"
//
Процедура НачисленияОтработаноЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоОтработаноЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // НачисленияОтработаноЧасовПриИзменении()

// Процедура - обработчик события "ПриИзменении" поля "ОтработаноДнейПоПятидневке"
//
Процедура НачисленияОтработаноДнейПоПятидневкеПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноДнейПоПятидневке Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоОтработаноДнейПоПятидневке = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры // НачисленияОтработаноДнейПоПятидневкеПриИзменении()

Процедура НачисленияСторнируемыйДокументНачалоВыбора(Элемент, СтандартнаяОбработка)
		
	Если Организация.Пустая() Тогда
		Предупреждение(ОбщегоНазначения.ПреобразоватьСтрокуИнтерфейса("Не выбрана организация!"), 10);
		Возврат;
	КонецЕсли;
		
	РаботаСДиалогамиЗК.ОбработкаНачалоВыбораСторнируемогоДокумента(Элемент, ЭтаФорма, Ссылка, Организация, СтандартнаяОбработка, Истина);
		
КонецПроцедуры

Процедура НачисленияВидРасчетаПриИзменении(Элемент)
		
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Начисления, мСведенияОВидахРасчетаПоказатели, , Истина);

КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мОбработкаПодбораПоСтроке					= Ложь;
мТекстПодбораПоСтроке						= "";
мПоследнееЗначениеЭлементаПодбораПоСтроке	= Неопределено;

мСведенияОВидахРасчетаПоказатели	= Новый Соответствие;
мСписокПричинНевыхода	= Новый СписокЗначений;

мДокументыИсправление = Новый Массив;
мСотрудникиИсправление = Новый Соответствие;