////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

// Хранит текущую дату документа - для проверки перехода документа в другой период установки номера
Перем мТекущаяДатаДокумента;

Перем мЧас;
Перем мМинута;
Перем мДлинаСуток;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

Перем мОкончаниеРабочегоДня;

Перем мОтображатьЗанятость;

Перем СтруктураРабочегоВремени;

Перем мЦветПересекаетсяПериодЗанятости;
Перем мЦветСвободно;
Перем мЦветСвободноГраницы;
Перем мЦветЗанятоДругимДокументом;
Перем мЦветНерабочееВремя;

Перем мРесурсыВстречи;

Перем мЗаявкаКандидата;

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ОБЩЕГО НАЗНАЧЕНИЯ

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ()
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Участники, ЭлементыФормы.КоманднаяПанельУчастники);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, ПолучитьСтруктуруПечатныхФорм(), Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьПолныйИнтервал()
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		Возврат;
	КонецЕсли;
	
	НачалоРабочегоДня		= НачалоДня(ДатаНачала) + (СтруктураРабочегоВремени.ДатаНачала - Дата(1,1,1));
	НачалоРабочегоДня		= НачалоДня(НачалоРабочегоДня) + Час(НачалоРабочегоДня) * мДлинаЧаса + (?(Минута(НачалоРабочегоДня) < 30, 0, 30) * 60);
	мНачалоРабочегоДня		= НачалоРабочегоДня;
	Если НачалоРабочегоДня > ДатаНачала Тогда
		НачалоРабочегоДня	= НачалоДня(ДатаНачала) + Час(ДатаНачала) * мДлинаЧаса + (?(Минута(ДатаНачала) < 30, 0, 30) * 60);
	КонецЕсли;
	Если НачалоДня(НачалоРабочегоДня) < НачалоРабочегоДня - 1 * мДлинаЧаса Тогда
		НачалоРабочегоДня = НачалоРабочегоДня - 1 * мДлинаЧаса;
	КонецЕсли;
	
	ОкончаниеРабочегоДня		= НачалоДня(ДатаНачала) + (СтруктураРабочегоВремени.ДатаОкончания - Дата(1,1,1));
	Если Минута(ОкончаниеРабочегоДня) <> 0 И Минута(ОкончаниеРабочегоДня) <> 30 Тогда
		ОкончаниеРабочегоДня		= НачалоДня(ОкончаниеРабочегоДня) + Час(ОкончаниеРабочегоДня) * мДлинаЧаса + (?(Минута(ОкончаниеРабочегоДня) < 30, 30, 60) * 60);
	КонецЕсли;
	мОкончаниеРабочегоДня		= ОкончаниеРабочегоДня;
	Если ОкончаниеРабочегоДня < ДатаОкончания Тогда
		ОкончаниеРабочегоДня	= НачалоДня(ДатаОкончания) + Час(ДатаОкончания) * мДлинаЧаса + (?(Минута(ДатаОкончания) < 30, 30, 60) * 60);
	КонецЕсли;
	Если НачалоДня(НачалоРабочегоДня) = НачалоДня(ОкончаниеРабочегоДня) И КонецДня(ОкончаниеРабочегоДня) > ОкончаниеРабочегоДня + 1 * мДлинаЧаса Тогда
		ОкончаниеРабочегоДня = ОкончаниеРабочегоДня + 1 * мДлинаЧаса;
	КонецЕсли;
	
	ДиаграммаГанта = ЭлементыФормы.ДиаграммаГантаЗанятости;
	
	ДиаграммаГанта.УстановитьПолныйИнтервал(НачалоРабочегоДня, ОкончаниеРабочегоДня);
	
	Интервал = ДиаграммаГанта.ИнтервалыФона.Добавить(мОкончаниеРабочегоДня - мДлинаСуток, мНачалоРабочегоДня);
	Интервал.Цвет = мЦветНерабочееВремя;
	
	Интервал = ДиаграммаГанта.ИнтервалыФона.Добавить(мОкончаниеРабочегоДня, мНачалоРабочегоДня + мДлинаСуток);
	Интервал.Цвет = мЦветНерабочееВремя;
	
	ДиаграммаГанта.ОбластьПостроения.ЦветЗаГраницейПолногоИнтервала = мЦветНерабочееВремя;
	
КонецПроцедуры

Процедура ОбновитьУчастниковНаДиаграммеГанта()
	
	ДиаграммаГанта = ЭлементыФормы.ДиаграммаГантаЗанятости;
	
	СерияЗанятость	= ДиаграммаГанта.УстановитьСерию("Занятость");
	
	МассивТочекДляУдаления = Новый Массив;
	Для Каждого Точка Из ДиаграммаГанта.Точки Цикл
		Если ТипЗнч(Точка.Значение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			МассивТочекДляУдаления.Добавить(Точка);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТочкаДляУдаления Из МассивТочекДляУдаления Цикл
		ДиаграммаГанта.Точки.Удалить(ТочкаДляУдаления);
	КонецЦикла;
	
	Если мОтображатьЗанятость Тогда
		Для Каждого Участник Из мРесурсыВстречи.Участники Цикл
			ТочкаФизлицо = ДиаграммаГанта.УстановитьТочку(Участник.Ссылка);
			ТочкаФизлицо.Текст		= Участник.Текст;
			ТочкаФизлицо.Картинка	= БиблиотекаКартинок.ФизическоеЛицо;
			
			ЗначениеТочкиФизлицо = ДиаграммаГанта.ПолучитьЗначение(ТочкаФизлицо, СерияЗанятость);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДиаграммуГанта()
	
	мРесурсыВстречи = ПолучитьДанныеОРесурсахВстречи(мОтображатьЗанятость);
	
	ДиаграммаГанта = ЭлементыФормы.ДиаграммаГантаЗанятости;
	
	ДиаграммаГанта.Очистить();
	
	СерияЗанятость	= ДиаграммаГанта.УстановитьСерию("Занятость");
	
	ТочкаВстреча = ДиаграммаГанта.УстановитьТочку("Встреча");
	ТочкаВстреча.Картинка	= БиблиотекаКартинок.Контакт;
	
	Для Каждого СтрокаПомещения Из мРесурсыВстречи.Помещения Цикл
		ТочкаПомещение = ДиаграммаГанта.УстановитьТочку(СтрокаПомещения.Ссылка);
		ТочкаПомещение.Текст	= СтрокаПомещения.Текст;
		ТочкаПомещение.Картинка	= БиблиотекаКартинок.ПерейтиВНачало;
		
		ЗначениеТочкиПомещение = ДиаграммаГанта.ПолучитьЗначение(ТочкаПомещение, СерияЗанятость);
	КонецЦикла;
	
	ОбновитьУчастниковНаДиаграммеГанта();
	
	ОбновитьПериодРезервирования();
	
КонецПроцедуры

Процедура ОбновитьПериодРезервирования()
	
	ЗанятостьВДеньПроведенияВстречи = ПолучитьДанныеОЗанятостиВДеньПроведенияВстречи(мОтображатьЗанятость);
	
	ДиаграммаГанта = ЭлементыФормы.ДиаграммаГантаЗанятости;
	
	ДиаграммаГанта.ИнтервалыФона.Очистить();
	
	УстановитьПолныйИнтервал();
	
	СерияЗанятость	= ДиаграммаГанта.УстановитьСерию("Занятость");
	
	ТочкаВстреча = ДиаграммаГанта.УстановитьТочку("Встреча");
	ТочкаВстреча.Текст	= ЗанятостьВДеньПроведенияВстречи.ПредставлениеТочкиВстреча;
	
	Значение = ДиаграммаГанта.ПолучитьЗначение(ТочкаВстреча, СерияЗанятость);
	Значение.Очистить();
	
	Если Не ЗначениеЗаполнено(ДатаНачала) Тогда
		Возврат;
	КонецЕсли;
	
	// Устанавливаем интервал занятости
	ИнтервалЗанятости = Значение.Добавить();
	ИнтервалЗанятости.Начало					= ДатаНачала;
	ИнтервалЗанятости.Конец						= ДатаОкончания;
	ИнтервалЗанятости.Значение.Редактирование	= Истина;
	ИнтервалЗанятости.Цвет						= мЦветСвободно;
	
	ЭлементШВ = ДиаграммаГанта.ОбластьПостроения.ШкалаВремени.Элементы[1];
	ЭлементШВ.Метки.Очистить();
	
	// Устанавливаем метки для интервала занятости
	МеткаЗанятостиНачало				= ЭлементШВ.Метки.Добавить(ДатаНачала);
	МеткаЗанятостиНачало.ЦветЛинии		= мЦветСвободноГраницы;
	МеткаЗанятостиОкончание				= ЭлементШВ.Метки.Добавить(ДатаОкончания);
	МеткаЗанятостиОкончание.ЦветЛинии	= мЦветСвободноГраницы;
	
	Для Каждого СтрокаПомещения Из мРесурсыВстречи.Помещения Цикл
		ТочкаПомещение = ДиаграммаГанта.УстановитьТочку(СтрокаПомещения.Ссылка);
		
		ЗначениеТочкиПомещение = ДиаграммаГанта.ПолучитьЗначение(ТочкаПомещение, СерияЗанятость);
		ЗначениеТочкиПомещение.Очистить();
		
		Если СтрокаПомещения.Ссылка = Помещение Тогда
			ТочкаПомещение.Шрифт	= Новый Шрифт(,, Истина);
		Иначе
			ТочкаПомещение.Шрифт	= Новый Шрифт;
		КонецЕсли;
		
		ЗанятостьТекущегоПомещения = ЗанятостьВДеньПроведенияВстречи.ЗанятостьПомещений.НайтиСтроки(Новый Структура("Ресурс",	СтрокаПомещения.Ссылка));
		
		Для Каждого СтрокаЗанятости Из ЗанятостьТекущегоПомещения Цикл
			Интервал = ЗначениеТочкиПомещение.Добавить();
			Интервал.Начало							= СтрокаЗанятости.ДатаНачала;
			Интервал.Конец							= СтрокаЗанятости.ДатаОкончания;
			Интервал.Текст							= СтрокаЗанятости.Текст;
			Интервал.Расшифровка					= СтрокаЗанятости.Расшифровка;
			Интервал.Цвет							= мЦветЗанятоДругимДокументом;
			Интервал.Значение.ДополнительныйЦвет	= мЦветЗанятоДругимДокументом;
		КонецЦикла;
		
	КонецЦикла;
	
	Если мОтображатьЗанятость Тогда
		Для Каждого Участник Из мРесурсыВстречи.Участники Цикл
			ТочкаФизлицо = ДиаграммаГанта.УстановитьТочку(Участник.Ссылка);
			
			ЗначениеТочкиФизлицо = ДиаграммаГанта.ПолучитьЗначение(ТочкаФизлицо, СерияЗанятость);
			ЗначениеТочкиФизлицо.Очистить();
			
			ЗанятостьТекущегоФизлица = ЗанятостьВДеньПроведенияВстречи.ЗанятостьФизлиц.НайтиСтроки(Новый Структура("Ресурс",	Участник.Ссылка));
			
			Для Каждого СтрокаЗанятости Из ЗанятостьТекущегоФизлица Цикл
				Интервал = ЗначениеТочкиФизлицо.Добавить();
				Интервал.Начало							= СтрокаЗанятости.ДатаНачала;
				Интервал.Конец							= СтрокаЗанятости.ДатаОкончания;
				Интервал.Текст							= СтрокаЗанятости.Текст;
				Интервал.Расшифровка					= СтрокаЗанятости.Расшифровка;
				Интервал.Цвет							= мЦветЗанятоДругимДокументом;
				Интервал.Значение.ДополнительныйЦвет	= мЦветЗанятоДругимДокументом;
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	Если ЗанятостьВДеньПроведенияВстречи.ОшибкиЗанятостиПомещений.Количество() > 0 ИЛИ
		 ЗанятостьВДеньПроведенияВстречи.ОшибкиЗанятостиФизлиц.Количество() > 0 Тогда
		
		ИнтервалЗанятости.Цвет				= мЦветПересекаетсяПериодЗанятости;
		МеткаЗанятостиНачало.ЦветЛинии		= мЦветПересекаетсяПериодЗанятости;
		МеткаЗанятостиОкончание.ЦветЛинии	= мЦветПересекаетсяПериодЗанятости;
	КонецЕсли;
	
	
	ОписаниеСостоянияДокумента = ПолучитьОписаниеДокумента(ЗанятостьВДеньПроведенияВстречи.ОшибкиЗанятостиПомещений, ЗанятостьВДеньПроведенияВстречи.ОшибкиЗанятостиФизлиц);
	РаботаСДиалогамиЗК.ПоказатьИнформациюОДокументе(ЭлементыФормы.НадписьПредупреждение, ЭлементыФормы.ПолеКартинкиПредупреждение, ОписаниеСостоянияДокумента.ТекстСообщения, ОписаниеСостоянияДокумента.ВажностьСообщения);
	
	ОбновитьВремяНачалаНаФорме();
	
КонецПроцедуры

Процедура ПеречитатьСтруктуруРабочегоВремени()
	
	СтруктураРабочегоВремени = ПолучитьСтруктуруРабочегоВремени();
	
КонецПроцедуры

Процедура ОбновитьВремяНачалаНаФорме()
	
	Если ДатаНачала <> НачалоДня(ДатаНачала) Тогда
		ДатаНачалаНаФорме		= ДатаНачала;
	Иначе
		ДатаНачалаНаФорме		= 0;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьДоступностьЗаявкиКандидата()
	
	ЭлементыФормы.ЗаявкаКандидата.Доступность = ВстречаСКандидатом;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
КонецПроцедуры // ПередОткрытием()

// Процедура - обработчик события "ПриОткрытии" формы
//
Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ		
		ОбработкаЗаполненияНовогоДокумента();                                 		
	Иначе
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);		
	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Физлицо");

	// Установить ограничение - изменять видимость колонок для табличной части 
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Участники.Колонки, СтруктураКолонок);
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	Если ЗначениеЗаполнено(ДатаОкончания) Тогда
		Продолжительность	= Дата(1,1,1) + (ДатаОкончания - ДатаНачала);
	Иначе
		ДатаОкончания		= ДатаНачала + мДлинаЧаса;
		Продолжительность	= Дата(1,1,1) + мДлинаЧаса;
	КонецЕсли;
	
	мОтображатьЗанятость = ВосстановитьЗначение("Документ.Встречи.ОтображатьЗанятость");
	Если мОтображатьЗанятость = Неопределено Тогда
		мОтображатьЗанятость = Ложь;
	КонецЕсли;
	ЭлементыФормы.КоманднаяПанельУправлениеЗанятостью.Кнопки.ОтображатьЗанятость.Пометка = мОтображатьЗанятость;
	
	ПеречитатьСтруктуруРабочегоВремени();
	
	ОбновитьДиаграммуГанта();
	
	ОбновитьВремяНачалаНаФорме();
	
	УстановитьДоступностьЗаявкиКандидата();
	
	мЗаявкаКандидата = ЗаявкаКандидата;
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.ДатаРезервирования;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПередЗаписью" формы.
//
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	ДатаОкончания = ДатаНачала + (Продолжительность - Дата(1,1,1));
	
	Если ЭтоНовый() И НачалоДня(ДатаНачала) < ОбщегоНазначения.ПолучитьРабочуюДату() Тогда
		ТекстВопроса = "Вы уверены, что хотите назначить встречу на прошедший период?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Если Ответ = КодВозвратаДиалога.Нет Тогда
			Отказ = Истина;
			ТекущийЭлемент = ЭлементыФормы.ДатаРезервирования;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПослеЗаписи" формы.
//
Процедура ПослеЗаписи()
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	РаботаСДиалогами.УстановитьЗаголовокФормыДокумента(, ЭтотОбъект, ЭтаФорма);
	
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	Оповестить("ЗаписанаВстреча", Ссылка, ВладелецФормы);
	
	// оповестим журналы о записи нового управленческого документа
	Оповестить("ЗаписанНовыйДокументУправленческогоУчета", Ответственный, Ссылка);

КонецПроцедуры

Процедура ПриИзмененииДанных()
	
	Если мТекущаяДатаДокумента <> Неопределено Тогда // Событие ПриОткрытии уже произошло
		ОбновитьДиаграммуГанта();
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ТипЗнч(Параметр) <> Тип("СправочникСсылка.ФизическиеЛица") ИЛИ Источник = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяСобытия = "ПодборОтменаВыбора" Тогда
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Физлицо", Параметр);
		НайденныеСтроки = Источник.НайтиСтроки(СтруктураПоиска);
		
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Источник.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗакрытии()
	
	СохранитьЗначение("Документ.Встречи.ОтображатьЗанятость", мОтображатьЗанятость);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)
	
	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);
	
КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)
	
	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)
	
	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);
	
КонецПроцедуры

// Процедура вызова структуры подчиненности документа
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
КонецПроцедуры


// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		УстановитьКнопкиПечати();
	КонецЕсли;
	
КонецПроцедуры


Процедура КоманднаяПанельУчастникиПодбор(Кнопка)
	
	Форма = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(, ЭлементыФормы.Участники, Ссылка);
	
	Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.Элементы;
	Форма.РежимВыбора					= Истина;
	Форма.ЗакрыватьПриВыборе			= Ложь;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура КоманднаяПанельУчастникиОтображатьЗанятость(Кнопка)
	
	мОтображатьЗанятость = Не мОтображатьЗанятость;
	
	ЭлементыФормы.КоманднаяПанельУправлениеЗанятостью.Кнопки.ОтображатьЗанятость.Пометка = мОтображатьЗанятость;
	
	Если мОтображатьЗанятость Тогда
		мРесурсыВстречи.Участники = ПолучитьДанныеОбУчастникахВстречи();
	Иначе
		мРесурсыВстречи.Участники.Очистить();
	КонецЕсли;
	
	ОбновитьУчастниковНаДиаграммеГанта();
	Если мОтображатьЗанятость Тогда
		ОбновитьПериодРезервирования();
	КонецЕсли;
	
КонецПроцедуры


Процедура ПредыдущийДень(Кнопка)
	
	ДатаНачала		= ДатаНачала - мДлинаСуток;
	ДатаОкончания	= ДатаОкончания - мДлинаСуток;
	
	ПеречитатьСтруктуруРабочегоВремени();
	
	ОбновитьПериодРезервирования();
	
КонецПроцедуры

Процедура СледующийДень(Кнопка)
	
	ДатаНачала		= ДатаНачала + мДлинаСуток;
	ДатаОкончания	= ДатаОкончания + мДлинаСуток;
	
	ПеречитатьСтруктуруРабочегоВремени();
	
	ОбновитьПериодРезервирования();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)
	
	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	мТекущаяДатаДокумента = Дата;
	
КонецПроцедуры // ДатаПриИзменении

Процедура ДатаРезервированияПриИзменении(Элемент)
	
	ДатаОкончания = ДатаНачала + (Продолжительность - Дата(1,1,1));
	
	ПеречитатьСтруктуруРабочегоВремени();
	
	ОбновитьПериодРезервирования();
	
	ОбновитьВремяНачалаНаФорме();
	
КонецПроцедуры

Процедура ДатаРезервированияНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	мЧас	= Час(Элемент.Значение);
	мМинута	= Минута(Элемент.Значение);
	
КонецПроцедуры

Процедура ДатаРезервированияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элемент.Значение = НачалоДня(ВыбранноеЗначение) + мЧас * мДлинаЧаса + мМинута * 60;
	
	мЧас = 0;
	мМинута = 0;
	
	ДатаОкончания = ДатаНачала + (Продолжительность - Дата(1,1,1));
	
	ПеречитатьСтруктуруРабочегоВремени();
	
	ОбновитьПериодРезервирования();
	
КонецПроцедуры

Процедура ВремяНачалаПриИзменении(Элемент)
	
	ДатаНачала = НачалоДня(ДатаНачала) + (Элемент.Значение - НачалоДня(Элемент.Значение));
	
	ДатаОкончания = ДатаНачала + (Продолжительность - Дата(1,1,1));
	
	ОбновитьПериодРезервирования();
	
КонецПроцедуры

Процедура ВремяНачалаНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		Элемент.Значение = ОбщегоНазначения.ПолучитьРабочуюДату();
	КонецЕсли;
	
	РаботаСДиалогамиДополнительный.ВыбратьВремяДня(ЭтаФорма, Элемент.Значение, Элемент, Ответственный,,, Истина);
	
	ДатаНачала = НачалоДня(ДатаНачала) + (Элемент.Значение - НачалоДня(Элемент.Значение));
	
	ДатаОкончания = ДатаНачала + (Продолжительность - Дата(1,1,1));
	
	ОбновитьПериодРезервирования();
	
КонецПроцедуры

Процедура ПродолжительностьПриИзменении(Элемент)
	
	ДатаОкончания = ДатаНачала + (Продолжительность - Дата(1,1,1));
	
	ОбновитьПериодРезервирования();
	
КонецПроцедуры

Процедура ПродолжительностьНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(Элемент.Значение) Тогда
		Элемент.Значение = Дата(1,1,1) + мДлинаЧаса / 2;
	КонецЕсли;
	
	СписокВремен = Новый СписокЗначений;
	
	ВремяСписка = Дата(1,1,1) + мДлинаЧаса / 2;
	Пока ВремяСписка - Дата(1,1,1) <= КонецДня(ДатаНачала) - ДатаНачала Цикл
		РазностьДат = ДатаНачала + (ВремяСписка - Дата(1,1,1));
		
		ПредставлениеВремени = Формат(ВремяСписка,"ДФ=ЧЧ:мм") + " (до " + Формат(РазностьДат,"ДФ=ЧЧ:мм") + ")";
		
		СписокВремен.Добавить(ВремяСписка, ПредставлениеВремени);
		
		ВремяСписка = ВремяСписка + мДлинаЧаса / 2; // по полчаса
	КонецЦикла;

	НачальноеЗначение = СписокВремен.НайтиПоЗначению(Элемент.Значение);
	Если НачальноеЗначение = Неопределено Тогда
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен, Элемент);
	Иначе
		ВыбранноеВремя = ВыбратьИзСписка(СписокВремен, Элемент, НачальноеЗначение);
	КонецЕсли;
	
	Если ВыбранноеВремя = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Продолжительность = ВыбранноеВремя.Значение;
	
	ДатаОкончания = ДатаНачала + (Продолжительность - Дата(1,1,1));
	
	ОбновитьПериодРезервирования();
	
КонецПроцедуры

Процедура ПомещениеПриИзменении(Элемент)
	
	ОбновитьПериодРезервирования();
	
КонецПроцедуры

Процедура ПомещениеНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Форма = Справочники.Помещения.ПолучитьФормуВыбора(, Элемент);
	Форма.НачальноеЗначениеВыбора	= Элемент.Значение;
	Форма.Отбор.ДляВстреч.Установить(Истина);
	Форма.Открыть();
	
КонецПроцедуры

Процедура ПомещениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СтрокаТаблицыЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		
		Помещение			= ВыбранноеЗначение.Помещение;
		
		СтараяДатаНачала	= ДатаНачала;
		Если ВыбранноеЗначение.ДатаНачала <> Неопределено Тогда
			ДатаНачала		= ВыбранноеЗначение.ДатаНачала;
		КонецЕсли;
		Если ВыбранноеЗначение.ДатаОкончания <> Неопределено Тогда
			ДатаОкончания	= ВыбранноеЗначение.ДатаОкончания;
		КонецЕсли;
		
		ОбновитьПериодРезервирования();
		
		Если СтараяДатаНачала <> ДатаНачала Тогда
			Предупреждение("Время начала совещания изменено с " + Формат(СтараяДатаНачала, "ДФ=ЧЧ:мм") + " на " + Формат(ДатаНачала, "ДФ=ЧЧ:мм"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура КнопкаПодобратьПомещениеНажатие(Элемент)
	
	СписокСвободныхПомещений = ПолучитьСписокДоступныхПомещений(ДатаНачала, Продолжительность);
	
	Если ТипЗнч(СписокСвободныхПомещений) = Тип("Строка") Тогда
		Предупреждение(СписокСвободныхПомещений);
		Возврат;
	КонецЕсли;
	
	ФормаВыбора = Справочники.Помещения.ПолучитьФормуВыбора(, ЭлементыФормы.Помещение);
	ФормаВыбора.мСвободныеПомещения		= СписокСвободныхПомещений;
	ФормаВыбора.НачальноеЗначениеВыбора	= Помещение;
	ФормаВыбора.Отбор.ДляВстреч.Установить(Истина);
	ФормаВыбора.Открыть();
	
КонецПроцедуры

Процедура ДиаграммаГантаЗанятостиВыбор(Элемент, Значения, СтандартнаяОбработка, Дата)
	
	Если Дата <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Значения.Значение) = Тип("СправочникСсылка.Помещения") Тогда
		Помещение	= Значения.Значение;
		
		ОбновитьПериодРезервирования();
	КонецЕсли;
	
КонецПроцедуры

Процедура ДиаграммаГантаЗанятостиОбработкаРасшифровки(Элемент, Расшифровки, СтандартнаяОбработка, Дата)
	
	СтандартнаяОбработка = Ложь;
	
	Для Каждого Расшифровка Из Расшифровки Цикл
		Если Расшифровка <> Неопределено Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ФормаРасшифровки = ПолучитьФорму("РасшифровкаЗанятости", ЭтаФорма, Расшифровка);
	ФормаРасшифровки.мРасшифровка	= Расшифровка;
	ФормаРасшифровки.Открыть();
	
	//ТабДокумент = ПолучитьМакетРасшифровки(Расшифровка);
	//
	//Если ТабДокумент = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	//
	//УниверсальныеМеханизмы.НапечататьДокумент(ТабДокумент, , , "Расшифровка занятости");
	
КонецПроцедуры

Процедура ДиаграммаГантаЗанятостиПриОкончанииРедактированияИнтервала(Элемент, Интервал, Отмена)
	
	СтараяДата = ДатаНачала;
	
	НачальноеЗначениеМинут	= 0;
	КонечноеЗначениеМинут	= 30;
	
	Если ДатаНачала < Интервал.Начало ИЛИ ДатаОкончания < Интервал.Конец Тогда
		НачальноеЗначениеМинут	= 30;
		КонечноеЗначениеМинут	= 60;
	КонецЕсли;
	
	НоваяДатаНачала		= НачалоДня(Интервал.Начало) + Час(Интервал.Начало) * мДлинаЧаса+ (?(Минута(Интервал.Начало) < 30, НачальноеЗначениеМинут, КонечноеЗначениеМинут) * 60);
	НоваяДатаОкончания	= НачалоДня(Интервал.Конец) + Час(Интервал.Конец) * мДлинаЧаса + (?(Минута(Интервал.Конец) < 30, НачальноеЗначениеМинут, КонечноеЗначениеМинут) * 60);
	
	УвеличитьДаты	= Интервал.Начало < ДатаНачала И НоваяДатаНачала + мДлинаЧаса / 4 < Интервал.Начало;
	УменьшитьДаты	= ДатаОкончания < Интервал.Конец И НоваяДатаОкончания - мДлинаЧаса / 4 > Интервал.Конец;
	
	Если УвеличитьДаты Тогда
		НоваяДатаНачала		= НоваяДатаНачала + мДлинаЧаса / 2;
		НоваяДатаОкончания	= НоваяДатаОкончания + мДлинаЧаса / 2;
	ИначеЕсли УменьшитьДаты Тогда
		НоваяДатаНачала		= НоваяДатаНачала - мДлинаЧаса / 2;
		НоваяДатаОкончания	= НоваяДатаОкончания - мДлинаЧаса / 2;
	КонецЕсли;
		
	Если ДатаНачала <> Интервал.Начало Тогда
		ДатаНачала		= НоваяДатаНачала;
	КонецЕсли;
	Если ДатаОкончания <> Интервал.Конец Тогда
		ДатаОкончания	= НоваяДатаОкончания;
	КонецЕсли;
	
	Продолжительность	= Дата(1,1,1) + (ДатаОкончания - ДатаНачала);
	
	ОбновитьПериодРезервирования();
	ОбновитьВремяНачалаНаФорме();
	
	ТекДата = НачалоДня(ОбщегоНазначения.ПолучитьРабочуюДату()) + (ТекущаяДата() - НачалоДня(ТекущаяДата()));
	Если СтараяДата > ТекДата И ДатаНачала < ТекДата Тогда
		Предупреждение("Встреча назначена в прошлом");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОтветственныйПриИзменении(Элемент)
	
	ПеречитатьСтруктуруРабочегоВремени();
	
КонецПроцедуры

Процедура ВстречаСКандидатомПриИзменении(Элемент)
	
	УстановитьДоступностьЗаявкиКандидата();
	
	Если Не ВстречаСКандидатом Тогда
		мЗаявкаКандидата = ЗаявкаКандидата;
		ЗаявкаКандидата = Неопределено;
	Иначе
		ЗаявкаКандидата = мЗаявкаКандидата;
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Участники

Процедура УчастникиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Участники.НайтиСтроки(Новый Структура("Физлицо", ВыбранноеЗначение)).Количество() = 0 Тогда
		Участники.Добавить().Физлицо	= ВыбранноеЗначение;
		
		Если мОтображатьЗанятость Тогда
			ДобавитьДанныеОбУчастникеВстречи(ВыбранноеЗначение, мРесурсыВстречи.Участники);
		
			ОбновитьУчастниковНаДиаграммеГанта();
			ОбновитьПериодРезервирования();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УчастникиПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Участники, ОформленияСтрок);
	
КонецПроцедуры

Процедура УчастникиПередУдалением(Элемент, Отказ)
	
	Если Не Отказ Тогда
		ДанныеСтроки = Элемент.ТекущиеДанные;
		Если ДанныеСтроки = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		Оповестить("ПодборОтменаВыбора", ДанныеСтроки.Физлицо);
		
		Участник = мРесурсыВстречи.Участники.Найти(ДанныеСтроки.Физлицо);
		Если Участник <> Неопределено Тогда
			мРесурсыВстречи.Участники.Удалить(Участник);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура УчастникиПослеУдаления(Элемент)
	
	Если мОтображатьЗанятость Тогда
		ОбновитьУчастниковНаДиаграммеГанта();
		ОбновитьПериодРезервирования();
	КонецЕсли;
	
КонецПроцедуры

Процедура УчастникиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	ДанныеСтроки = Элемент.ТекущиеДанные;
	Если ДанныеСтроки = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Оповестить("ПодборВыбор", ДанныеСтроки.Физлицо);
	
КонецПроцедуры

Процедура УчастникиПередНачаломДобавления(Элемент, Отказ, Копирование)
	
	Отказ = Истина;
	
	Форма = Справочники.ФизическиеЛица.ПолучитьФормуВыбора(, Элемент, Ссылка);
	
	Форма.ПараметрВыборГруппИЭлементов	= ИспользованиеГруппИЭлементов.Элементы;
	Форма.РежимВыбора					= Истина;
	Форма.ЗакрыватьПриВыборе			= Истина;
	
	Форма.Открыть();
	
КонецПроцедуры

Процедура УчастникиПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мДлинаСуток	= 86400;

мЦветПересекаетсяПериодЗанятости	= WebЦвета.Красный;
мЦветСвободно						= WebЦвета.СветлоЗеленый;
мЦветСвободноГраницы				= WebЦвета.Зеленый;
мЦветЗанятоДругимДокументом			= WebЦвета.СветлоСерый;
мЦветНерабочееВремя					= WebЦвета.ПризрачноБелый;