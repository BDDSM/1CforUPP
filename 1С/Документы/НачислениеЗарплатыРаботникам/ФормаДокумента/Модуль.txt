////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мТекущаяДатаДокумента; // Хранит текущую дату документа - для проверки перехода документа в другой период установки номера

Перем мСведенияОВидахРасчета;

// Хранит дерево макетов печатных форм
Перем мДеревоМакетов;

// Хранит элемент управления подменю печати
Перем мПодменюПечати;

// Хранит элемент управления кнопку печать по умолчанию
Перем мПечатьПоУмолчанию;

// Хранит дерево кнопок подменю заполнение ТЧ
Перем мКнопкиЗаполненияТЧ;

// Хранит "Результат" текущей строки
Перем мСтарыйРезультат;
// Хранит "ОтработаноДней" текущей строки
Перем мБылоОтработаноДней;
// Хранит "ОтработаноЧасов" текущей строки
Перем мБылоОтработаноЧасов;
// Хранит "Результат" текущей строки ТЧ "Удержания
Перем мСтарыйРезультатУдержаний;

// Хранит текущее Физлицо для вывода в расчетный листок
Перем мТекущееФизЛицо;

//для формирования имен кнопок
Перем мКнопкаРассчитатьРаботника;
Перем мКнопкаРассчитатьРаботникаСКомментарием;

Перем мКомпонентаСклоненияФИО;

Перем мБылВидСхемыМотивации;

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура заполняет табличное поле "Расчетный листок"
Процедура ЗаполнитьРасчетныйЛисток(Редактирование = Ложь, ТекущееФизлицо = НеОпределено)
	
	Если ПоказыватьРасчетныйЛисток Тогда
	
		Если ТекущееФизлицо = НеОпределено Тогда
			ТекущееФизлицо = ПолучитьТекущееФизлицо();
		КонецЕсли;
		
		Если ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
			Если Редактирование Тогда
				ТабличноеПолеРасчетногоЛистка = ЭлементыФормы.ТабличноеПолеРасчетногоЛистка;
				ТабличноеПолеРасчетногоЛистка.Очистить();
			КонецЕсли;
			Возврат;
		КонецЕсли; 
		
		Если Редактирование или ТекущееФизлицо <> мТекущееФизлицо  Тогда
			ВременныйТабличныйДокумент = ЗаполнитьТаблицуРасчетногоЛистка(ТекущееФизлицо);
			ТабличноеПолеРасчетногоЛистка = ЭлементыФормы.ТабличноеПолеРасчетногоЛистка;
			ТабличноеПолеРасчетногоЛистка.Очистить();
			ТабличноеПолеРасчетногоЛистка.Вывести(ВременныйТабличныйДокумент);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры //ЗаполнитьРасчетныйЛисток

// Процедура устанавливает подменю "Заполнить" в командных панелях ТЧ документа при необходимости
//
Процедура УстановитьКнопкиПодменюЗаполненияТЧ();
	
	СоответствиеТЧ = Новый Соответствие;
	СоответствиеТЧ.Вставить(ЭлементыФормы.Начисления,ЭлементыФормы.КоманднаяПанельНачисления);
	СоответствиеТЧ.Вставить(ЭлементыФормы.Удержания,ЭлементыФормы.КоманднаяПанельУдержания);
	СоответствиеТЧ.Вставить(ЭлементыФормы.ПогашениеЗаймов,ЭлементыФормы.КоманднаяПанельПогашениеЗаймов);
	
	мКнопкиЗаполненияТЧ = УниверсальныеМеханизмы.СформироватьПодменюЗаполненияТЧ(Ссылка, СоответствиеТЧ, Новый Действие("НажатиеНаДополнительнуюКнопкуЗаполненияТЧ"));
	
КонецПроцедуры

// Процедура устанавливает подменю "Печать" и кнопку "Печать по умолчанию" при необходимости
//
Процедура УстановитьКнопкиПечати()
	
	мДеревоМакетов = УниверсальныеМеханизмы.ПолучитьДеревоМакетовПечати(Ссылка, Неопределено, Новый Действие("ОсновныеДействияФормыПечать"), Новый Действие("ОсновныеДействияФормыУстановитьПечатьПоУмолчанию"));
	
	УниверсальныеМеханизмы.УстановитьПодменюПечати    (мПодменюПечати, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов);
	УниверсальныеМеханизмы.УстановитьПечатьПоУмолчанию(мПечатьПоУмолчанию, ЭлементыФормы.ОсновныеДействияФормы, мДеревоМакетов, Метаданные().Имя,Новый Действие("ОсновныеДействияФормыПечатьПоУмолчанию"));
	
	Если Не мПодменюПечати = Неопределено Тогда
		УниверсальныеМеханизмы.СформироватьПодменю(мДеревоМакетов, мПодменюПечати,Истина,Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗначениеПогашеноПроцентов()
	
	ТекущиеДанные = ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные;
	ТекущиеДанные.ПогашеноПроцентов = Мин(ТекущиеДанные.ПогашеноЗайма, ТекущиеДанные.НачисленоПроцентов);
	
КонецПроцедуры

// управляет показателем в зависимости от способа расчета
//
Процедура ПриИзмененииВидаРасчета(ИмяОбъекта,Значение)

	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, Значение, "ПриРасчете");

	Для СчПоказателей = 1 По Мин(СведенияОВидеРасчета["КоличествоПоказателей"],6) Цикл
		Если НЕ СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"] Тогда
			ЭлементыФормы[ИмяОбъекта].ТекущиеДанные["Показатель" + СчПоказателей] = 0;
		КонецЕсли;
	КонецЦикла;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы[ИмяОбъекта], мСведенияОВидахРасчета);
	
КонецПроцедуры

// Процедура - обработчик события "ПриВыводеСтроки" ТЧ
//
Процедура ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки)
	
	ДанныеСтрокиВидРасчета = ДанныеСтроки.ВидРасчета;
	
	СведенияОВидеРасчета = мСведенияОВидахРасчета[ДанныеСтрокиВидРасчета];
	
	Для СчПоказателей = 1 По 6 Цикл
		
		Если СчПоказателей <= СведенияОВидеРасчета["КоличествоПоказателей"] Тогда
			
			ВидимостьПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "Видимость"];
			ВидимостьНаименованияПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей + "НаименованиеВидимость"];
			
			// настроим видимость ячеек
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = ВидимостьНаименованияПоказателя;
			
			// размеры показателя будут доступны только для видимых и изменяемых показателей
			Если ВидимостьПоказателя Тогда
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.НеИзменяется
				Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Ежемесячно
				Или СведенияОВидеРасчета["Показатель" +СчПоказателей+ "ВозможностьИзменения"] = Перечисления.ИзменениеПоказателейСхемМотивации.Периодически;
				
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].УстановитьТекст(Формат(ДанныеСтроки["Показатель" + СчПоказателей],"ЧДЦ=" + СведенияОВидеРасчета["Показатель" + СчПоказателей + "Точность"]));

			КонецЕсли;
			
			// если отображается наименование - пропишем текст
			Если ВидимостьНаименованияПоказателя Тогда		
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["Показатель" + СчПоказателей + "Наименование"]);
			ИначеЕсли СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"] Тогда
				ВидимостьПоказателя = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Видимость"];
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].ТолькоПросмотр = Не ВидимостьПоказателя;
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "НаименованиеВидимость"];			
				ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].УстановитьТекст(СведенияОВидеРасчета["ПоказательТР" + СчПоказателей + "Наименование"]);			
			КонецЕсли;
			
		Иначе
			// настроим видимость ячеек
			ОформлениеСтроки.Ячейки["Показатель" + СчПоказателей].Видимость = Ложь;
			ОформлениеСтроки.Ячейки["НаименованиеПоказатель" + СчПоказателей].Видимость = Ложь;			
			
		КонецЕсли;
		
	КонецЦикла;
	
	ОформлениеСтроки.Ячейки.Показатели.Видимость = Ложь;

КонецПроцедуры //ПриВыводеСтроки

// В завизимости от значение реквизита "ВидОперации" формирует подменю кнопки "Рассчитать"
//
Процедура ЗаполнениеПодменюРассчитать()

	КнопкиРассчитать = ЭлементыФормы.ПодменюРассчитать.Кнопки;
	КнопкиРассчитать.Очистить();
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
		
		НоваяКнопка = КнопкиРассчитать.Вставить(0, "РассчитатьВсе", ТипКнопкиКоманднойПанели.Действие, "Рассчитать (полный расчет)", Новый Действие("ДействияФормыРассчитатьВсе"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		КнопкиРассчитать.Вставить(1, "Разделитель", ТипКнопкиКоманднойПанели.Разделитель);
		
		НоваяКнопка = КнопкиРассчитать.Вставить(2, "РассчитатьНачисления", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать начисления", Новый Действие("ДействияФормыРассчитатьНачисления"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НоваяКнопка = КнопкиРассчитать.Вставить(3, "РассчитатьПогашениеЗаймов", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать погашение займов", Новый Действие("ДействияФормыРассчитатьПогашениеЗаймов"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НоваяКнопка = КнопкиРассчитать.Вставить(4, "РассчитатьУдержания", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать удержания", Новый Действие("ДействияФормыРассчитатьУдержания"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		КнопкиРассчитать.Вставить(5, "РазделительРаботника", ТипКнопкиКоманднойПанели.Разделитель);
		
		НоваяКнопка = КнопкиРассчитать.Вставить(6, "РассчитатьРаботника", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника", Новый Действие("ДействияФормыРассчитатьРаботника"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НоваяКнопка = КнопкиРассчитать.Вставить(7, "РассчитатьРаботникаСКомментарием", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника с комментарием", Новый Действие("ДействияФормыРассчитатьРаботникаСКомментарием"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		НоваяКнопка = КнопкиРассчитать.Вставить(0, "РассчитатьНачисления", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать начисления", Новый Действие("ДействияФормыРассчитатьНачисления"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		КнопкиРассчитать.Вставить(1, "РазделительРаботника", ТипКнопкиКоманднойПанели.Разделитель);
		
		НоваяКнопка = КнопкиРассчитать.Вставить(2, "РассчитатьРаботника", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать работника",	Новый Действие("ДействияФормыРассчитатьРаботника"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НоваяКнопка = КнопкиРассчитать.Вставить(3, "РассчитатьРаботникаСКомментарием", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника с комментарием", Новый Действие("ДействияФормыРассчитатьРаботникаСКомментарием"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		НоваяКнопка = КнопкиРассчитать.Вставить(0, "РассчитатьПогашениеЗаймов",	ТипКнопкиКоманднойПанели.Действие,	"Рассчитать погашение займов",	Новый Действие("ДействияФормыРассчитатьПогашениеЗаймов"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		КнопкиРассчитать.Вставить(1, "РазделительРаботника",		ТипКнопкиКоманднойПанели.Разделитель);
		
		НоваяКнопка = КнопкиРассчитать.Вставить(2, "РассчитатьРаботника",			ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника",			Новый Действие("ДействияФормыРассчитатьРаботника"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НоваяКнопка = КнопкиРассчитать.Вставить(3, "РассчитатьРаботникаСКомментарием", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника с комментарием", Новый Действие("ДействияФормыРассчитатьРаботникаСКомментарием"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		
		НоваяКнопка = КнопкиРассчитать.Вставить(0, "РассчитатьУдержания",			ТипКнопкиКоманднойПанели.Действие,	"Рассчитать удержания",			Новый Действие("ДействияФормыРассчитатьУдержания"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		КнопкиРассчитать.Вставить(1, "РазделительРаботника",		ТипКнопкиКоманднойПанели.Разделитель);
		
		НоваяКнопка = КнопкиРассчитать.Вставить(2, "РассчитатьРаботника",			ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника",			Новый Действие("ДействияФормыРассчитатьРаботника"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
		НоваяКнопка = КнопкиРассчитать.Вставить(3, "РассчитатьРаботникаСКомментарием", ТипКнопкиКоманднойПанели.Действие,	"Рассчитать сотрудника с комментарием", Новый Действие("ДействияФормыРассчитатьРаботникаСКомментарием"));
		НоваяКнопка.ИзменяетДанные = Истина;
		
	КонецЕсли;
	
	мКнопкаРассчитатьРаботника = КнопкиРассчитать.Найти("РассчитатьРаботника");
	мКнопкаРассчитатьРаботникаСКомментарием = КнопкиРассчитать.Найти("РассчитатьРаботникаСКомментарием");
	
КонецПроцедуры // ЗаполнениеПодменюРассчитать()

// устанавливает значение показателей начилсения для общих показателей в целом по компании и в целом по подразделению
//
Процедура ПоказательПриИзменении(Значение, парамПоказатель,ТабличнаяЧасть)
	
	ВидРасчета = ЭлементыФормы[ТабличнаяЧасть].ТекущаяСтрока.ВидРасчета;
	СведенияОВидеРасчета = РаботаСДиалогамиЗК.ПолучитьСведенияОВидеРасчетаСхемыМотивации(мСведенияОВидахРасчета, ВидРасчета);
	КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
	
	Если КоличествоПоказателей > (парамПоказатель - 1) Тогда
		Показатель  = СведенияОВидеРасчета["Показатель" + парамПоказатель];
	Иначе
		Возврат;
	КонецЕсли;
	Если ЭлементыФормы[ТабличнаяЧасть].ТекущаяСтрока.ВидРасчета.ПроизвольнаяФормулаРасчета Тогда
		
		Если ТабличнаяЧасть <> "Удержания" Тогда
			СтрПодразделение= ЭлементыФормы[ТабличнаяЧасть].ТекущаяСтрока.Подразделение;
		КонецЕсли;
		
		Если Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий Тогда
			
			РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаСхемыМотивации(мСведенияОВидахРасчета, Начисления.ВыгрузитьКолонку("ВидРасчета"));
			Для Каждого СтрокаНачисления Из Начисления Цикл
				ВидРасчета = СтрокаНачисления.ВидРасчета;
				СведенияОВидеРасчета = мСведенияОВидахРасчета[ВидРасчета];
				КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
				Для СчПоказателей = 1 По КоличествоПоказателей Цикл
					ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
					Если ПоказательВР.Предопределенный Тогда 
						Продолжить;
					КонецЕсли;
					Если ПоказательВР = Показатель Тогда
						СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;

		ИначеЕсли Показатель.ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
			
			Если ТабличнаяЧасть <> "Удержания" Тогда
				
				РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаСхемыМотивации(мСведенияОВидахРасчета, Начисления.ВыгрузитьКолонку("ВидРасчета"));
				Для Каждого СтрокаНачисления Из Начисления Цикл
					ВидРасчета = СтрокаНачисления.ВидРасчета;
					СведенияОВидеРасчета = мСведенияОВидахРасчета[ВидРасчета];
					КоличествоПоказателей = СведенияОВидеРасчета["ФактКоличествоПоказателей"];
					Если СтрокаНачисления.ПодразделениеОрганизации = СтрПодразделение Тогда
						Для СчПоказателей = 1 По КоличествоПоказателей Цикл
							ПоказательВР = СведенияОВидеРасчета["Показатель" + СчПоказателей];
							Если ПоказательВР.Предопределенный Тогда 
								Продолжить;
							КонецЕсли;
							Если ПоказательВР = Показатель Тогда
								СтрокаНачисления["Показатель" + СчПоказателей] = Значение;
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЦикла;	
				
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры //ПоказательПриИзменении

Функция ПолучитьТекущееФизлицо()
	
	ЭтоСотрудник = Ложь; 
	ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница;
	Если ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Начисления Тогда
		ТекущиеДанные	= ЭлементыФормы.Начисления.ТекущиеДанные;
		ЭтоСотрудник = Истина;
	ИначеЕсли ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ПогашениеЗаймов Тогда
		ТекущиеДанные	= ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные;
	ИначеЕсли ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Удержания Тогда
		ТекущиеДанные	= ЭлементыФормы.Удержания.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено ИЛИ ЭтоСотрудник И ТекущиеДанные.Сотрудник.Пустая() Тогда 
		Возврат Справочники.ФизическиеЛица.ПустаяСсылка();
	ИначеЕсли ЭтоСотрудник Тогда
		Возврат ТекущиеДанные.Сотрудник.ФизЛицо;
	Иначе
		Возврат ТекущиеДанные.Физлицо;
	КонецЕсли;

КонецФункции // ПолучитьТекущееФизлицо()

Процедура РассчитатьРаботника(КомментироватьРасчет)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	ТекущееФизлицо = ПолучитьТекущееФизлицо();
	Если Не ЗначениеЗаполнено(ТекущееФизлицо) Тогда
		Предупреждение("Не выбран работник для расчета!");
		Возврат;
	КонецЕсли;
		
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
		
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Расчет для сотрудника ",, Строка(ТекущееФизлицо), ТекущееФизлицо, Перечисления.ВидыСообщений.Раздел);
		КонецЕсли;
		РассчитатьВсе(ТекущееФизлицо, КомментироватьРасчет);
		Если КомментироватьРасчет Тогда
			глЗначениеПеременной("глОбработкаСообщений").ПоказатьСообщения();
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Расчет для сотрудника ",, Строка(ТекущееФизлицо), ТекущееФизлицо, Перечисления.ВидыСообщений.Раздел);
		КонецЕсли;
		РассчитатьНачисления(,,ТекущееФизлицо, КомментироватьРасчет);
		Если КомментироватьРасчет Тогда
			глЗначениеПеременной("глОбработкаСообщений").ПоказатьСообщения();
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Расчет для сотрудника ",, Строка(ТекущееФизлицо), ТекущееФизлицо, Перечисления.ВидыСообщений.Раздел);
		КонецЕсли;
		РассчитатьПогашениеЗаймов(ТекущееФизлицо);
		Если КомментироватьРасчет Тогда
			глЗначениеПеременной("глОбработкаСообщений").ПоказатьСообщения();
		КонецЕсли;
			
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		Если КомментироватьРасчет Тогда
			ОбщегоНазначенияЗК.КомментарийРасчета("Расчет для сотрудника ",, Строка(ТекущееФизлицо), ТекущееФизлицо, Перечисления.ВидыСообщений.Раздел);
		КонецЕсли;
		РассчитатьУдержания(,,ТекущееФизлицо, КомментироватьРасчет);
		Если КомментироватьРасчет Тогда
			глЗначениеПеременной("глОбработкаСообщений").ПоказатьСообщения();
		КонецЕсли;
		
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
		мБылоОтработаноДней				= ТекущаяСтрока.ОтработаноДней;
		мБылоОтработаноЧасов			= ТекущаяСтрока.ОтработаноЧасов;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультатТЧУдержания = ТекущаяСтрока.Результат;
	КонецЕсли;
			
	ЗаполнитьРасчетныйЛисток(Истина);
	ОбработкаКомментариев.ПоказатьСообщения();
	
КонецПроцедуры //РассчитатьРаботника

Процедура УстановитьВидимостьРасчетногоЛистка() Экспорт
	
	ЭлементыФормы.НадписьПоказыватьРасчетныйЛисток.Заголовок = ?(ПоказыватьРасчетныйЛисток, "Скрыть расчетный листок", "Показать расчетный листок");
	РаботаСДиалогамиЗК.ИзменитьВидимостьПанелиРасчетногоЛистка(Панель, ПоказыватьРасчетныйЛисток, ЭлементыФормы.НадписьПоказыватьРасчетныйЛисток, ЭлементыФормы.ПанельРасчетногоЛистка, ЭлементыФормы.РазделительРасчетногоЛистка);
	
КонецПроцедуры

// Устанавливает имя кнопки РассчитатьРаботника как "Рассчитать <ФИО>"
// имя кнопки РассчитатьРаботникаСКомментарием как "Рассчитать " + <ФИО> + " с комментарием"
// и имя гиперссылки НадписьПоказыватьРасчетныйЛисток 
//
Процедура УстановитьИменаКнопок(ТекущееФизлицо)
	
	Если ТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка() Тогда
		
		Если мКнопкаРассчитатьРаботника <> Неопределено Тогда
			мКнопкаРассчитатьРаботника.Текст = "Рассчитать сотрудника";
		КонецЕсли;
		
		Если мКнопкаРассчитатьРаботникаСКомментарием <> Неопределено Тогда
			мКнопкаРассчитатьРаботникаСКомментарием.Текст = "Рассчитать сотрудника с комментарием";
		КонецЕсли;
		
	Иначе
					 
		Если мТекущееФизлицо <> ТекущееФизлицо Тогда
			
			Запрос = Новый Запрос;
			Запрос.УстановитьПараметр("Физлицо", ТекущееФизлицо);
			
			Запрос.Текст = "
			|ВЫБРАТЬ
			|	ФизическиеЛица.Наименование,
			|	ФизическиеЛица.Пол
			|ИЗ
			|	Справочник.ФизическиеЛица КАК ФизическиеЛица
			|ГДЕ
			|	ФизическиеЛица.Ссылка = &Физлицо";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий()  Тогда
				
				ФИО = ОбщегоНазначения.ФамилияИнициалыФизЛица(Выборка.Наименование);
				
				ПозицияПервогоПробела = Найти(ФИО+" "," ");
				Фамилия  = Лев(ФИО,ПозицияПервогоПробела-1);
				Инициалы = Сред(ФИО,ПозицияПервогоПробела+1);
				
				Если мКнопкаРассчитатьРаботника <> Неопределено ИЛИ мКнопкаРассчитатьРаботникаСКомментарием <> Неопределено Тогда
					РезультатСклонения = "";
					Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"),Фамилия, 4, Выборка.Пол, РезультатСклонения) Тогда
						ФИО = РезультатСклонения+" "+Инициалы;	
					КонецЕсли;
					
					Если мКнопкаРассчитатьРаботника <> Неопределено Тогда
						мКнопкаРассчитатьРаботника.Текст = "Рассчитать " + ФИО;
					КонецЕсли;
					
					Если мКнопкаРассчитатьРаботникаСКомментарием <> Неопределено Тогда
						мКнопкаРассчитатьРаботникаСКомментарием.Текст = "Рассчитать " + ФИО + " с комментарием";
					КонецЕсли;
					
				КонецЕсли;
				
				РезультатСклонения = "";
				ФИО = Выборка.Наименование;
				Если УниверсальныеМеханизмы.Просклонять(глЗначениеПеременной("глКомпонентаСклоненияФИО"),ФИО, 2, Выборка.Пол, РезультатСклонения) Тогда
					ФИО = РезультатСклонения;	
				КонецЕсли;
				
				ЭлементыФормы.НадписьРасчетныйЛисток.Заголовок = Выборка.Наименование + ". Расчетный листок";

			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // УстановитьИменаКнопок()

// В завизимости от значение реквизита "ВидОперации" управляет видимостью закладок основной панели формы
//
Процедура УправлениеВидимостьюЗакладок()

	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Начисления.Видимость		= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ПогашениеЗаймов.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Удержания.Видимость		= Истина;
		
		ТекущийЭлемент = ЭлементыФормы.Начисления;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Начисления.Видимость		= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ПогашениеЗаймов.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Удержания.Видимость		= Ложь;

		ТекущийЭлемент = ЭлементыФормы.Начисления;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Начисления.Видимость		= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ПогашениеЗаймов.Видимость	= Истина;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Удержания.Видимость		= Ложь;
		
		ТекущийЭлемент = ЭлементыФормы.ПогашениеЗаймов;
	
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		
		ЭлементыФормы.ОсновнаяПанель.Страницы.Начисления.Видимость		= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.ПогашениеЗаймов.Видимость	= Ложь;
		ЭлементыФормы.ОсновнаяПанель.Страницы.Удержания.Видимость		= Истина;
		
		ТекущийЭлемент = ЭлементыФормы.Удержания;
		
	КонецЕсли;
	
КонецПроцедуры // УправлениеВидимостьюЗакладок()

Процедура УправлениеПометкиПодменюОперация()
	
	КнопкиРассчитать = ЭлементыФормы.ДействияФормы.Кнопки.Операция.Кнопки;
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
		
		КнопкиРассчитать.ПолныйРасчет.Пометка		= Истина;
		КнопкиРассчитать.РасчетНачислений.Пометка	= Ложь;
		КнопкиРассчитать.ПогашениеЗаймов.Пометка	= Ложь;
		КнопкиРассчитать.РасчетУдержаний.Пометка	= Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		КнопкиРассчитать.ПолныйРасчет.Пометка		= Ложь;
		КнопкиРассчитать.РасчетНачислений.Пометка	= Истина;
		КнопкиРассчитать.ПогашениеЗаймов.Пометка	= Ложь;
		КнопкиРассчитать.РасчетУдержаний.Пометка	= Ложь;
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		КнопкиРассчитать.ПолныйРасчет.Пометка		= Ложь;
		КнопкиРассчитать.РасчетНачислений.Пометка	= Ложь;
		КнопкиРассчитать.ПогашениеЗаймов.Пометка	= Истина;
		КнопкиРассчитать.РасчетУдержаний.Пометка	= Ложь;
				
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		
		КнопкиРассчитать.ПолныйРасчет.Пометка		= Ложь;
		КнопкиРассчитать.РасчетНачислений.Пометка	= Ложь;
		КнопкиРассчитать.ПогашениеЗаймов.Пометка	= Ложь;
		КнопкиРассчитать.РасчетУдержаний.Пометка	= Истина;
		
	КонецЕсли;

КонецПроцедуры // УправлениеПометкиПодменюОперация()

// Активизирует строки табличных частей документа после заполнения
//
Процедура УстановитьТекущуюСтрокуТабличнойЧасти()

	мТекущееФизлицо = Справочники.ФизическиеЛица.ПустаяСсылка();
	
	//активизируем во всех табличных частях 1-ю строку
	Если Начисления.Количество() > 0 Тогда
		СтрокаТЧ = Начисления.Получить(0);
		ЭлементыФормы.Начисления.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;
	
	Если ПогашениеЗаймов.Количество() > 0 Тогда
		СтрокаТЧ = ПогашениеЗаймов.Получить(0);
		ЭлементыФормы.ПогашениеЗаймов.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;
	
	Если Удержания.Количество() > 0 Тогда
		СтрокаТЧ = Удержания.Получить(0);
		ЭлементыФормы.Удержания.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;

КонецПроцедуры  //УстановитьТекущуюСтрокуТабличнойЧасти()

Функция СотрудникПоФизлицу(Физлицо)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	СотрудникиОрганизаций.Ссылка
	|ИЗ
	|	Справочник.СотрудникиОрганизаций КАК СотрудникиОрганизаций
	|ГДЕ
	|	СотрудникиОрганизаций.Физлицо = &Физлицо");
	
	Запрос.УстановитьПараметр("Физлицо", Физлицо);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Возврат Выборка.Ссылка;
	
КонецФункции

Функция ПодразделениеРаботника(Сотрудник)
	
	СведенияПоРаботнику = ПроцедурыУправленияПерсоналомДополнительный.СведенияПоВыбранномуРаботнику(Сотрудник, "Работники, УчетЗаработкаРаботников");
	
	Возврат ?(СведенияПоРаботнику <> Неопределено, СведенияПоРаботнику.Подразделение, Неопределено);
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ФОРМЫ

Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "ЗаписьПоказателя" И Источник = ЭтаФорма Тогда
		
		Если Удержания.Количество() > 0 Тогда
			ПодразделенияФизлиц = ПолучитьСоответствиеФизлицИПодразделений(Удержания.ВыгрузитьКолонку("ФизЛицо"));
		КонецЕсли;
		
		ЗначенияПоказателейСхемМотивацииДополнительный.ПересчитатьВалютныеЗначенияПоказателей(Параметр);
		
		// подготовим сведения о видах расчета
		ТабличныеЧасти = Новый Массив;
		ТабличныеЧасти.Добавить(Начисления);
		ТабличныеЧасти.Добавить(Удержания);
		РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаТабличнойЧасти(мСведенияОВидахРасчета, ТабличныеЧасти, "ПриРасчете");
		
		Для Каждого СтрокаПоказателей Из Параметр Цикл
			
			// По начислениям
			Для Каждого СтрокаДокумента Из Начисления Цикл
				СведенияОВидеРасчета = мСведенияОВидахРасчета[СтрокаДокумента.ВидРасчета];
				Для СчПоказателей = 1 По СведенияОВидеРасчета["ФактКоличествоПоказателей"] Цикл
					Если СведенияОВидеРасчета["Показатель" + СчПоказателей] = СтрокаПоказателей.Показатель И НачалоМесяца(СтрокаДокумента.ДатаОкончания) = СтрокаПоказателей.ПериодДействия Тогда
						
						Если ЗначениеЗаполнено(СтрокаПоказателей.НеЗаданКурсВалюты) Тогда
							ОбщегоНазначения.СообщитьОбОшибке("Не задан курс валюты " + СтрокаПоказателей.НеЗаданКурсВалюты + ". Пересчет не произведен!");
						КонецЕсли;
						ЗначениеПоказателя = СтрокаПоказателей.Значение;
						
						Если СтрокаДокумента["Показатель" + СчПоказателей] <> ЗначениеПоказателя Тогда
							
							ВидПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей].ВидПоказателя;
							
							Если ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий
							Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ДляВсехОрганизаций Тогда
							
								СтрокаДокумента["Показатель" + СчПоказателей] = ЗначениеПоказателя;
								Если СтрокаДокумента.Авторасчет Тогда
									СтрокаДокумента.Результат = 0;
								КонецЕсли;
								
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
								
								Если СтрокаПоказателей.Подразделение = СтрокаДокумента.Подразделение Тогда
									СтрокаДокумента["Показатель" + СчПоказателей] = ЗначениеПоказателя;
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
								
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный Тогда
								
								Если СтрокаПоказателей.Сотрудник = СтрокаДокумента.Сотрудник Тогда
									
									СтрокаДокумента["Показатель" + СчПоказателей] = ЗначениеПоказателя;
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
								
							КонецЕсли;
							
						КонецЕсли;
						Прервать;
						
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			// По удержаниям
			Для Каждого СтрокаДокумента Из Удержания Цикл
				СведенияОВидеРасчета = мСведенияОВидахРасчета[СтрокаДокумента.ВидРасчета];
				Для СчПоказателей = 1 По СведенияОВидеРасчета["ФактКоличествоПоказателей"] Цикл
					Если СведенияОВидеРасчета["Показатель" + СчПоказателей] = СтрокаПоказателей.Показатель  И НачалоМесяца(СтрокаДокумента.ДатаОкончания) = СтрокаПоказателей.ПериодДействия Тогда
						Если ЗначениеЗаполнено(СтрокаПоказателей.НеЗаданКурсВалюты) Тогда
							ОбщегоНазначения.СообщитьОбОшибке("Не задан курс валюты " + СтрокаПоказателей.НеЗаданКурсВалюты + ". Пересчет не произведен!");
						КонецЕсли;
						ЗначениеПоказателя = СтрокаПоказателей.Значение;
						Если СтрокаДокумента["Показатель" + СчПоказателей] <> СтрокаПоказателей.Значение Тогда
							ВидПоказателя = СведенияОВидеРасчета["Показатель" + СчПоказателей].ВидПоказателя;
							Если ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Общий
							Или ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ДляВсехОрганизаций Тогда
								СтрокаДокумента["Показатель" + СчПоказателей] = ЗначениеПоказателя;
								// Раз уж перезаполнили показатели, то и результат придется пересчитывать
								Если СтрокаДокумента.Авторасчет Тогда
									СтрокаДокумента.Результат = 0;
								КонецЕсли;
								
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.ПоПодразделению Тогда
								Если СтрокаПоказателей.Подразделение = ПодразделенияФизлиц[СтрокаДокумента.ФизЛицо] Тогда
									СтрокаДокумента["Показатель" + СчПоказателей] = ЗначениеПоказателя;

									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
								
							ИначеЕсли ВидПоказателя = Перечисления.ВидыПоказателейСхемМотивации.Индивидуальный Тогда
								Если СтрокаПоказателей.Сотрудник.ФизЛицо = СтрокаДокумента.ФизЛицо Тогда
									СтрокаДокумента["Показатель" + СчПоказателей] = ЗначениеПоказателя;
									// Раз уж перезаполнили показатели, то и результат придется пересчитывать
									Если СтрокаДокумента.Авторасчет Тогда
										СтрокаДокумента.Результат = 0;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры //ОбработкаОповещения

// Процедура - обработчик события "ПередОткрытием" формы.
//
Процедура ПередОткрытием(Отказ, СтандартнаяОбработка)
	
	// Установка кнопок печати
	УстановитьКнопкиПечати();
	
	// Установка кнопок заполнение ТЧ
	УстановитьКнопкиПодменюЗаполненияТЧ();
	
	НачислениеЗарплатыРаботникамПереопределяемый.ФормаДокументаПередОткрытиемДополнительно(ЭтаФорма, Новый Структура("ПриИзменении", Новый Действие("ПогашениеЗаймовВидДоговораПриИзменении")),
		Новый Структура("ПриНачалеРедактирования, ПередНачаломИзменения, ПриПолученииДанных", 
		Новый Действие("ПогашениеЗаймовПриНачалеРедактирования"), Новый Действие("ПогашениеЗаймовПередНачаломИзменения"), Новый Действие("ПогашениеЗаймовПриПолученииДанных")));
	
КонецПроцедуры // ПередОткрытием()

Процедура ПриОткрытии()
	
	Если ЭтоНовый() Тогда // проверить объект на то, что он еще не внесен в ИБ
		
		// Заполнить реквизиты значениями по умолчанию.
		ЗаполнениеДокументовПереопределяемый.ЗаполнитьШапкуДокумента(ЭтотОбъект, глЗначениеПеременной("глТекущийПользователь"));
		ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет;
		
	Иначе
		
		// Установить доступность формы с учетом даты запрета редактирования	
		РаботаСДиалогамиЗК.УстановитьДоступностьФормыДляРедактирования(ЭтотОбъект, ЭтаФорма);	

	КонецЕсли;
	
	МеханизмНумерацииОбъектов.УстановитьДоступностьПоляВводаНомера(Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю,ЭлементыФормы.Номер);

	// Заполним реквизит формы МесяцСтрока.
	МесяцСтрока = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");

	// Установить ограничение - изменять видимость колонок для табличной части Начисления
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Начисления.Колонки, СтруктураКолонок);
	
	// Заполнить подменю "Рассчитать" в зависимости от значения реквизита "ВидОперации"
	ЗаполнениеПодменюРассчитать();
	
	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("Сотрудник");
	СтруктураКолонок.Вставить("ВидРасчета");
	СтруктураКолонок.Вставить("ДатаНачала");
	СтруктураКолонок.Вставить("ДатаОкончания");

	// Установить ограничение - изменять видимость колонок для табличной части Удержания
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.Удержания.Колонки, СтруктураКолонок);

	СтруктураКолонок = Новый Структура();

	// Установить колонки, видимостью которых пользователь управлять не может.
	СтруктураКолонок.Вставить("ФизЛицо");
	СтруктураКолонок.Вставить("НачисленоПроцентов");
	СтруктураКолонок.Вставить("ПогашеноПроцентов");
	СтруктураКолонок.Вставить("ПогашеноЗайма");

	// Установить ограничение - изменять видимость колонок для табличной части Удержания
	ОбработкаТабличныхЧастей.УстановитьИзменятьВидимостьКолонокТабЧасти(ЭлементыФормы.ПогашениеЗаймов.Колонки, СтруктураКолонок);

	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
    УстановитьЗаголовокФормыДокумента();

	// Запомнить текущие значения реквизитов формы.
	мТекущаяДатаДокумента = Дата;
	
	// Управление видимостью закладок на основной панели формы
	УправлениеВидимостьюЗакладок();
	УправлениеПометкиПодменюОперация();	
	
	мМассивЭУ = Новый Массив();
	мМассивЭУ.Добавить(ЭлементыФормы.Начисления.Колонки.ТабельныйНомерСтрока);
	мМассивЭУ.Добавить(ЭлементыФормы.ПанельСхемыМотивации);
	РаботаСДиалогамиПереопределяемый.УстановитьВидимостьЭУПоУчетнойПолитикеПоПерсоналу(мМассивЭУ,глЗначениеПеременной("глУчетнаяПолитикаПоПерсоналу"));

	ЭлементыФормы.ВидСхемыМотивации.Доступность = ПоВременнойСхемеМотивации;
	ЭлементыФормы.ВидСхемыМотивации.ОтметкаНезаполненного = ПоВременнойСхемеМотивации и Не ЗначениеЗаполнено(ВидСхемыМотивации);
	
	// Установить активный реквизит.
	Если Не РаботаСДиалогами.АктивизироватьРеквизитВФорме(ЭтотОбъект, ЭтаФорма) Тогда
		ТекущийЭлемент = ЭлементыФормы.Начисления;
	КонецЕсли;
	
	ЭлементыФормы.ПанельРасчетногоЛистка.Свертка = РежимСверткиЭлементаУправления.Низ;
	ЭлементыФормы.НадписьПоказыватьРасчетныйЛисток.Заголовок = "Показать расчетный листок";
	ЭлементыФормы.РазделительРасчетногоЛистка.Доступность = ПоказыватьРасчетныйЛисток;
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаВыбора" формы.
//
Процедура ОбработкаВыбора(ЗначениеВыбора, Источник)
	
	ТипВыбранногоЗначения = ТипЗнч(ЗначениеВыбора);
	Если ТипЗнч(ЗначениеВыбора) = Тип("Структура") Тогда
		Команда = "";
		Если ЗначениеВыбора.Свойство("Команда",Команда) И Команда = "ИсполнитьПодготовленныйЗапрос" Тогда
			
			// обработаем заполнение документа все вопросы пользователю задавали перед вызовом обработки заполнения
			
			ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
			ОбработкаКомментариев.УдалитьСообщения();
			
			Начисления.Очистить();
			Удержания.Очистить();
			ПогашениеЗаймов.Очистить();
			ЭлементыФормы.ТабличноеПолеРасчетногоЛистка.Очистить();
			
			Если ЭтотОбъект.Проведен Тогда
				Попытка
					ЗаписатьВФорме(РежимЗаписиДокумента.ОтменаПроведения);
				Исключение
					Возврат;
				КонецПопытки;
			Иначе
				Если ЭтотОбъект.Модифицированность() Тогда //запишем документ
					Попытка
						ЗаписатьВФорме(РежимЗаписиДокумента.Запись);
					Исключение
						Возврат;
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			
			Автозаполнение(ЗначениеВыбора.Запрос);
			
			ОбработкаКомментариев.ПоказатьСообщения();
			
		КонецЕсли;
		
	ИначеЕсли ТипВыбранногоЗначения = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		
		// Если заполняем по одному сотру и этого сотрудника в документе пока нет,
		// добавим новые строки в документ
			
		СтруктураПоиска = Новый Структура("Сотрудник", ЗначениеВыбора);
		СтруктураПоискаФизлица = Новый Структура("Физлицо", ЗначениеВыбора.Физлицо);
		Представление = Строка(ЗначениеВыбора);

		Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет И
			Начисления.НайтиСтроки(СтруктураПоиска).Количество() 
			+ Удержания.НайтиСтроки(СтруктураПоискаФизлица).Количество() <> 0 Тогда

			
			ТекстВопроса = "По сотруднику " + Представление + " в документе обнаружены строки. Перезаполнить начисления и удержания?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из Начисления.НайтиСтроки(СтруктураПоиска) Цикл
				Начисления.Удалить(СтрокаТЧ)
			КонецЦикла; 
			Для каждого СтрокаТЧ Из Удержания.НайтиСтроки(СтруктураПоискаФизлица) Цикл
				Удержания.Удалить(СтрокаТЧ)
			КонецЦикла; 
			Для каждого СтрокаТЧ Из ПогашениеЗаймов.НайтиСтроки(СтруктураПоискаФизлица) Цикл
				ПогашениеЗаймов.Удалить(СтрокаТЧ)
			КонецЦикла; 
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений И
			Начисления.НайтиСтроки(СтруктураПоиска).Количество() > 0 Тогда
			
			ТекстВопроса = "По сотруднику " + Представление + " в документе обнаружены строки начислений. Перезаполнить начисления?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из Начисления.НайтиСтроки(СтруктураПоиска) Цикл
				Начисления.Удалить(СтрокаТЧ)
			КонецЦикла; 
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов И
			ПогашениеЗаймов.НайтиСтроки(СтруктураПоискаФизлица).Количество() > 0 Тогда
			
			ТекстВопроса = "По сотруднику " + Представление + " в документе обнаружены строки погашения займов. Перезаполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из ПогашениеЗаймов.НайтиСтроки(СтруктураПоискаФизлица) Цикл
				ПогашениеЗаймов.Удалить(СтрокаТЧ)
			КонецЦикла; 
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний И
			Удержания.НайтиСтроки(СтруктураПоискаФизлица).Количество() > 0 Тогда
			
			ТекстВопроса = "По сотруднику " + Представление + " в документе обнаружены строки удержаний. Перезаполнить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Возврат;
			КонецЕсли;
			
			Для каждого СтрокаТЧ Из Удержания.НайтиСтроки(СтруктураПоискаФизлица) Цикл
				Удержания.Удалить(СтрокаТЧ)
			КонецЦикла; 
			
		КонецЕсли;
		
		БылоСтрокДокумента = Начисления.Количество() + ПогашениеЗаймов.Количество() + Удержания.Количество();
			
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
	
		Если Автозаполнение(, ЗначениеВыбора.Физлицо) Тогда
			Если БылоСтрокДокумента = Начисления.Количество() + ПогашениеЗаймов.Количество() + Удержания.Количество() Тогда
				Предупреждение("По сотруднику " + Представление + " не обнаружено данных для заполнения.");
			КонецЕсли;
		КонецЕсли;
		ОбработкаКомментариев.ПоказатьСообщения();

	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// Очистим "лишние", с точки зрения реквизита "ВидаОперации", строки табличных частей.
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		// Проверка наличия записей в других ТЧ документа.
		Если ПогашениеЗаймов.Количество() > 0 Или Удержания.Количество() > 0 Тогда
			
			ТекстВопроса = "Обнаружены строки в табличных частях документа, не относящихся к операции ""Расчет начислений"".
			|При записи документа эти строки будут удалены. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		ПогашениеЗаймов.Очистить();
		Удержания.Очистить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		// Проверка наличия записей в других ТЧ документа.
		Если Начисления.Количество() > 0 Или Удержания.Количество() > 0 Тогда
			
			ТекстВопроса = "Обнаружены строки в табличных частях документа, не относящихся к операции ""Погашение займов"".
			|При записи документа эти строки будут удалены. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Начисления.Очистить();
		Удержания.Очистить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
		
		// Проверка наличия записей в других ТЧ документа.
		Если Начисления.Количество() > 0 Или ПогашениеЗаймов.Количество() > 0 Тогда
			
			ТекстВопроса = "Обнаружены строки в табличных частях документа, не относящихся к операции ""Расчет удержаний"".
			|При записи документа эти строки будут удалены. Продолжить?";
			Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			Если Ответ <> КодВозвратаДиалога.Да Тогда
				Отказ = Истина;
				Возврат;
			КонецЕсли;
			
		КонецЕсли;
		
		Начисления.Очистить();
		ПогашениеЗаймов.Очистить();

	КонецЕсли;
КонецПроцедуры

Процедура ПослеЗаписи()

	// Установка кнопок печати
	УстановитьКнопкиПечати();
	// Вывести в заголовке формы статус документа (новый, не проведен, проведен).
	УстановитьЗаголовокФормыДокумента();
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
	
	// оповестим журналы о записи нового управленческого документа
	Оповестить("ЗаписанНовыйДокументУправленческогоУчета", Ответственный, Ссылка);

КонецПроцедуры

Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ПоказыватьРасчетныйЛисток = Ложь;
	УстановитьВидимостьРасчетногоЛистка();
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ - ДЕЙСТВИЯ КОМАНДНЫХ ПАНЕЛЕЙ ФОРМЫ

Процедура ДействияФормыУстановитьОперацию(Кнопка)

	Если Кнопка = Неопределено Тогда
		Возврат;
		
	Иначе
		ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций[Кнопка.Имя];
		
	КонецЕсли;
	
	ЗаполнениеПодменюРассчитать();
	УправлениеВидимостьюЗакладок();
	УправлениеПометкиПодменюОперация();
	
	// Отобразить в заголовке формы вид операции.
    УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры // ДействияФормыУстановитьОперацию()

Процедура ДействияФормыСоздатьЗарплатаКВыплате()
	
	Если НЕ Проведен Тогда
		Предупреждение("Создавать платежные документы можно только по проведенному документу!");
		Возврат;
	КонецЕсли;
	
	Если ПравоДоступа("Добавление", Метаданные.Документы.ЗарплатаКВыплате) Тогда
			
			ЗарплатаКВыплате = Документы.ЗарплатаКВыплате.СоздатьДокумент();
			ЗарплатаКВыплате.Заполнить(Ссылка);
			ФормаДокумента = ЗарплатаКВыплате.ПолучитьФорму();
			ФормаДокумента.Открыть();
			
	Иначе
		Предупреждение("Нарушение прав доступа!");
	КонецЕсли;
	
КонецПроцедуры

// Процедура вызывается при смене закладки
//
Процедура ОсновнаяПанельПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ТекущееФизлицо = ПолучитьТекущееФизлицо();
	УстановитьИменаКнопок(ТекущееФизлицо);
	ЗаполнитьРасчетныйЛисток( , ТекущееФизлицо);
	мТекущееФизлицо = ТекущееФизлицо;

КонецПроцедуры

// Процедура вызывается при выборе пункта подменю "Движения документа по регистрам" меню "Перейти".
// командной панели формы. Процедура отрабатывает печать движений документа по регистрам.
//
Процедура ДействияФормыДвиженияДокументаПоРегистрам(Кнопка)

	РаботаСДиалогами.НапечататьДвиженияДокумента(Ссылка);

КонецПроцедуры // ДействияФормыДвиженияДокументаПоРегистрам()

// Процедура вызова структуры подчиненности документа
//
Процедура ДействияФормыСтруктураПодчиненностиДокумента(Кнопка)
	
	РаботаСДиалогами.ПоказатьСтруктуруПодчиненностиДокумента(Ссылка);
	
КонецПроцедуры

Процедура ДействияФормыЗаполнить(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(Начисления);
		МассивТаблиц.Добавить(Удержания);
		МассивТаблиц.Добавить(ПогашениеЗаймов);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением все таблицы документа будут очищены. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		Начисления.Очистить();
		Удержания.Очистить();
		ПогашениеЗаймов.Очистить();
		ЭтаФорма.Обновить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(Начисления);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением таблица ""Начисления"" будет очищена. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		Начисления.Очистить();
		ЭтаФорма.Обновить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(ПогашениеЗаймов);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением таблица ""Погашение займов"" будет очищена. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		ПогашениеЗаймов.Очистить();
		ЭтаФорма.Обновить();

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний И
		Удержания.Количество() > 0 Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(Удержания);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением таблица ""Прочие удержания"" будет очищена. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		Удержания.Очистить();
		ЭтаФорма.Обновить();
		
	КонецЕсли;
	
	ЗаполнениеВыполнено = Автозаполнение();

	Если ЗаполнениеВыполнено Тогда
		Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
			
			Если Начисления.Количество() = 0 И Удержания.Количество() = 0  И ПогашениеЗаймов.Количество() = 0 Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета("Не обнаружено данных для заполнения документа.");
			КонецЕсли;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
			
			Если Начисления.Количество() = 0 Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета("Не обнаружено данных для заполнения документа.");
			КонецЕсли;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
			
			Если ПогашениеЗаймов.Количество() = 0 Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета("Не обнаружено данных для заполнения документа.");
			КонецЕсли;
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний Тогда
			
			Если Удержания.Количество() = 0 Тогда
				ОбщегоНазначенияЗК.ОшибкаРасчета("Не обнаружено данных для заполнения документа.");
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ОбработкаКомментариев.ПоказатьСообщения();
	
	//после заполнения табличных частей, активизируем строку
	УстановитьТекущуюСтрокуТабличнойЧасти();

КонецПроцедуры

Процедура ДействияФормыРассчитатьВсе(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	РассчитатьВсе();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат	= ТекущаяСтрока.Результат;
		мБылоОтработаноДней	= ТекущаяСтрока.ОтработаноДней;
		мБылоОтработаноЧасов= ТекущаяСтрока.ОтработаноЧасов;
	КонецЕсли;
	
	ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультатУдержаний	= ТекущаяСтрока.Результат;
	КонецЕсли;
	
	ЗаполнитьРасчетныйЛисток(Истина);
	
КонецПроцедуры

Процедура ДействияФормыРассчитатьРаботника(Кнопка)
	РассчитатьРаботника(Ложь);
КонецПроцедуры // ДействияФормыРассчитатьРаботника()

Процедура ДействияФормыРассчитатьРаботникаСКомментарием(Кнопка)
	РассчитатьРаботника(Истина);
КонецПроцедуры // ДействияФормыРассчитатьРаботника()

Процедура ДействияФормыРассчитатьНачисления(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	РассчитатьНачисления();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	Если ТекущаяСтрока <> Неопределено Тогда
		мСтарыйРезультат				= ТекущаяСтрока.Результат;
		мБылоОтработаноДней				= ТекущаяСтрока.ОтработаноДней;
		мБылоОтработаноЧасов			= ТекущаяСтрока.ОтработаноЧасов;
	КонецЕсли;	
	
	ЗаполнитьРасчетныйЛисток(Истина);
	
КонецПроцедуры // ДействияФормыРассчитатьНачисления()

Процедура ДействияФормыРассчитатьПогашениеЗаймов(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();

	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	РассчитатьПогашениеЗаймов();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	//активизируем текущую строку после расчета
	Если ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные = Неопределено И ПогашениеЗаймов.Количество()>0 Тогда
		СтрокаТЧ = ПогашениеЗаймов.Получить(0);
		ЭлементыФормы.ПогашениеЗаймов.ТекущаяСтрока = СтрокаТЧ;
	КонецЕсли;
	
	ЗаполнитьРасчетныйЛисток(Истина);
	
КонецПроцедуры // ДействияФормыРассчитатьПогашениеЗаймов()

Процедура ДействияФормыРассчитатьУдержания(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если НЕ РаботаСДиалогами.ЗаписатьДокументОтменивПроведениеПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, "рассчитать") Тогда
		ОбработкаКомментариев.ПоказатьСообщения();
		Возврат;
	КонецЕсли;
	
	РассчитатьУдержания();
	ОбработкаКомментариев.ПоказатьСообщения();
	
	ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
	
	ЗаполнитьРасчетныйЛисток(Истина);
	
КонецПроцедуры // ДействияФормыРассчитатьУдержания()


// Процедура - вызывается при нажатии на кнопку "Заполнить"
//
Процедура ДействияФормыСписокРаботников(Кнопка)
	
	ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
	ОбработкаКомментариев.УдалитьСообщения();
	
	Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(Начисления);
		МассивТаблиц.Добавить(Удержания);
		МассивТаблиц.Добавить(ПогашениеЗаймов);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением все таблицы документа будут очищены. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2, Ложь) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		Начисления.Очистить();
		Удержания.Очистить();
		ПогашениеЗаймов.Очистить();
		ЭтаФорма.Обновить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(Начисления);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением таблица ""Начисления"" будет очищена. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2, Ложь) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		Начисления.Очистить();
		ЭтаФорма.Обновить();
		
	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(ПогашениеЗаймов);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением таблица ""Погашение займов"" будет очищена. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2, Ложь) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		ПогашениеЗаймов.Очистить();
		ЭтаФорма.Обновить();

	ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний И
		Удержания.Количество() > 0 Тогда
		
		МассивТаблиц = Новый Массив;
		МассивТаблиц.Добавить(Удержания);
		ТекстВопроса1 = "Автоматически заполнить документ можно только после отмены его проведения. Продолжить?";
		ТекстВопроса2 = "Перед заполнением таблица ""Прочие удержания"" будет очищена. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, ТекстВопроса2, Ложь) Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
		Удержания.Очистить();
		ЭтаФорма.Обновить();
		
	КонецЕсли;
	
	ПроцедурыУправленияПерсоналом.ОткрытьФормуОтбораСпискаРаботников(ЭтаФорма, КонецМесяца(ПериодРегистрации), "Работники", , Подразделение, Ложь, , , , ПериодРегистрации, Истина);

	//после заполнения табличных частей, активизируем строку
	УстановитьТекущуюСтрокуТабличнойЧасти();
	
КонецПроцедуры

Процедура ДействияФормыПодборСотрудников(Кнопка)
	
	Если Проведен Тогда 
		Если ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет Тогда
			МассивТаблиц = Новый Массив;
			МассивТаблиц.Добавить(Начисления);
			МассивТаблиц.Добавить(Удержания);
			МассивТаблиц.Добавить(ПогашениеЗаймов);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетНачислений Тогда
			
			МассивТаблиц = Новый Массив;
			МассивТаблиц.Добавить(Начисления);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПогашениеЗаймов Тогда
			
			МассивТаблиц = Новый Массив;
			МассивТаблиц.Добавить(ПогашениеЗаймов);
			
		ИначеЕсли ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.РасчетУдержаний И
			Удержания.Количество() > 0 Тогда
			
			МассивТаблиц = Новый Массив;
			МассивТаблиц.Добавить(Удержания);
		КонецЕсли;
			
		ОбработкаКомментариев = глЗначениеПеременной("глОбработкаСообщений");
		ОбработкаКомментариев.УдалитьСообщения();
		ТекстВопроса1 = "Заполнить документ подбором можно только после отмены его проведения. Продолжить?";
		Если НЕ РаботаСДиалогами.ЗаписатьДокументОчиститьТаблицыПередВыполнениемДействия(ДокументОбъект, ЭтаФорма, МассивТаблиц, ТекстВопроса1, "") Тогда
			ОбработкаКомментариев.ПоказатьСообщения();
			Возврат;
		КонецЕсли;
	КонецЕсли;

	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(ЭтаФорма, Ссылка, Ложь, Дата);
	
КонецПроцедуры


// Процедура - вызывается при нажатии на кнопку "ВвестиПоказателиДляРасчета"
//
Процедура ДействияФормыВвестиПоказателиДляРасчета(Кнопка)
	                                                       
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Начисления Тогда
		Если ЭлементыФормы.Начисления.ТекущиеДанные = Неопределено Тогда
			ТекущийСотрудник	= Неопределено;
		Иначе
			ТекущийСотрудник	= ЭлементыФормы.Начисления.ТекущиеДанные.Сотрудник;
		КонецЕсли;
	Иначе
		Если ЭлементыФормы.Удержания.ТекущиеДанные = Неопределено Тогда
			ТекущийСотрудник	= Неопределено;
		Иначе
			ТекущийСотрудник 	= ЭлементыФормы.Удержания.ТекущиеДанные.ФизЛицо;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗаполнитьПоказатели(ТекущийСотрудник, ЭтаФорма) Тогда
		Предупреждение("Для расчета сотрудников этого документа ввода показателей не требуется");
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать по умолчанию"
//
Процедура ОсновныеДействияФормыПечатьПоУмолчанию(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Печать"
//
Процедура ОсновныеДействияФормыПечать(Кнопка)
	
	УниверсальныеМеханизмы.ПечатьПоДополнительнойКнопке(мДеревоМакетов, ЭтотОбъект, ЭтаФорма, Кнопка.Текст);
	
КонецПроцедуры

// Процедура - обработчик нажатия на кнопку "Установить печать по умолчанию"
//
Процедура ОсновныеДействияФормыУстановитьПечатьПоУмолчанию(Кнопка)
	
	Если УниверсальныеМеханизмы.НазначитьКнопкуПечатиПоУмолчанию(мДеревоМакетов, Метаданные().Имя) Тогда
		
		УстановитьКнопкиПечати();
		
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик нажатия на любую из дополнительных кнопок по заполнению ТЧ
//
Процедура НажатиеНаДополнительнуюКнопкуЗаполненияТЧ(Кнопка)
	
	УниверсальныеМеханизмы.ОбработатьНажатиеНаДополнительнуюКнопкуЗаполненияТЧ(мКнопкиЗаполненияТЧ.Строки.Найти(Кнопка.Имя,"Имя",Истина),ЭтотОбъект);
	
КонецПроцедуры

Процедура УстановитьЗаголовокФормыДокумента()
		
	МесяцСтрокой = Формат(ПериодРегистрации, "ДФ=ММММ");  
	ГодСтрокой = " " + Формат(ПериодРегистрации, "ДФ=yyyy") + ". ";
	СтрокаВидОперации = ?(ВидОперации = Перечисления.ВидыОперацийНачислениеЗарплатыРаботникамОрганизаций.ПолныйРасчет, "", Строка(ВидОперации) + ". ");
	
	СтрокаЗаголовокФормы = "Начисление зарплаты: " + СтрокаВидОперации + "За " + МесяцСтрокой + ГодСтрокой;
		
	Если ЭтоНовый() Тогда  
		СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Новый";
	Иначе
		Если Проведен Тогда
			СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Проведен";
		Иначе
			СтрокаЗаголовокФормы = СтрокаЗаголовокФормы + "Не проведен";
		КонецЕсли;
	КонецЕсли;
		
	Заголовок = СтрокаЗаголовокФормы;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ РЕКВИЗИТОВ ШАПКИ

// Процедура - обработчик события "ПриИзменении" поля ввода даты документа.
//
Процедура ДатаПриИзменении(Элемент)

	РаботаСДиалогами.ПроверитьНомерДокумента(ЭтотОбъект, мТекущаяДатаДокумента);
	МеханизмНумерацииОбъектов.ОбновитьПодсказкуКодНомерОбъекта(ЭтотОбъект.Метаданные(), ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);

	мТекущаяДатаДокумента = Дата;

КонецПроцедуры // ДатаПриИзменении

// Процедура - обработчик события "ПриИзменении" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииПриИзменении(Элемент)
	
	РаботаСДиалогами.ДатаКакМесяцПодобратьДатуПоТексту(Элемент.Значение, ПериодРегистрации);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "Регулирование" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	ПериодРегистрации = ДобавитьМесяц(ПериодРегистрации, Направление);
	Элемент.Значение = РаботаСДиалогами.ДатаКакМесяцПредставление(ПериодРегистрации);
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "Очистка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

// Процедура - обработчик события "НачалоВыбораИзСписка" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииНачалоВыбораИзСписка(Элемент, СтандартнаяОбработка)
	
	РаботаСДиалогами.НачалоВыбораИзСпискаПредставленияПериодаРегистрации(Элемент, СтандартнаяОбработка, ПериодРегистрации, ЭтаФорма);
	
	УстановитьЗаголовокФормыДокумента();
	
КонецПроцедуры

// Процедура - обработчик события "АвтоПодборТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцАвтоПодборТекста(Текст, ТекстАвтоПодбора, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ОкончаниеВводаТекста" поля ввода периода регистрации.
//
Процедура ПериодРегистрацииОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	РаботаСДиалогами.ДатаКакМесяцОкончаниеВводаТекста(Текст, Значение, СтандартнаяОбработка);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" признака "ПоВременнойСхеме"
//
Процедура ПоВременнойСхемеМотивацииПриИзменении(Элемент)
	
	Если ПоВременнойСхемеМотивации Тогда
		ВидСхемыМотивации = мБылВидСхемыМотивации;
	Иначе
		мБылВидСхемыМотивации = ВидСхемыМотивации;
		ВидСхемыМотивации = Справочники.ВариантыCхемМотивации.ПустаяСсылка();
		ЭлементыФормы.ВидСхемыМотивации.ОтметкаНезаполненного = Ложь;
	КонецЕсли;	
	ЭлементыФормы.ВидСхемыМотивации.Доступность = ПоВременнойСхемеМотивации;
	
КонецПроцедуры //ПоВременнойСхемеМотивацииПриИзменении

Процедура НадписьПоказыватьРасчетныйЛистокНажатие(Элемент)
	
	ПоказыватьРасчетныйЛисток = Не ПоказыватьРасчетныйЛисток;
	Если ПоказыватьРасчетныйЛисток Тогда
		ЗаполнитьРасчетныйЛисток(Истина);
	КонецЕсли;
	УстановитьВидимостьРасчетногоЛистка();
		
КонецПроцедуры

Процедура КнопкаОчиститьНажатие(Элемент)
	
	Если Начисления.Количество() > 0 ИЛИ Удержания.Количество() > 0 ИЛИ ПогашениеЗаймов.Количество()>0 Тогда
		
		ТекстВопроса = "Все таблицы документа будут очищены. Продолжить?";
		Ответ = Вопрос(ТекстВопроса, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
		
		Если Ответ <> КодВозвратаДиалога.Да Тогда
			Возврат;
		КонецЕсли; 
		
		Начисления.Очистить();
		Удержания.Очистить();
		ПогашениеЗаймов.Очистить();
		
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБЩИЕ ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНЫХ ЧАСТЕЙ

Процедура ТабличнаяЧастьОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если Начисления.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение)).Количество() = 0 Тогда
		
		СтрокаТабличнойЧасти = Начисления.Добавить();
		СтрокаТабличнойЧасти.Сотрудник		= ВыбранноеЗначение;
		СтрокаТабличнойЧасти.Авторасчет		= Истина;
		
		СведенияПоСотруднику = ПроцедурыУправленияПерсоналомДополнительный.СведенияПоВыбранномуРаботнику(ВыбранноеЗначение, "Работники, УчетЗаработкаРаботников");
		Если СведенияПоСотруднику <> Неопределено Тогда
			СтрокаТабличнойЧасти.Подразделение	= СведенияПоСотруднику.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры  // ТабличнаяЧастьОбработкаВыбора

Процедура ФизлицоАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст, , Истина);
	
КонецПроцедуры

Процедура ФизлицоОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение, , Истина);
	
КонецПроцедуры

// Процедура - обработчик события "ПриОкончанииРедактирования"
//
Процедура ПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	Если НЕ ОтменаРедактирования Тогда
		ТекущееФизлицо = ПолучитьТекущееФизлицо();
		УстановитьИменаКнопок(ТекущееФизлицо);
		ЗаполнитьРасчетныйЛисток(Истина, ТекущееФизлицо);
		мТекущееФизлицо = ТекущееФизлицо;
	КонецЕсли;

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Начисления и ее РЕКВИЗИТОВ

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  
Процедура НачисленияПриАктивизацииСтроки(Элемент)

    ПодключитьОбработчикОжидания("ОбработчикОжиданияНачисленияПриАктивизацииСтроки", 0.1, Истина);	 
	
КонецПроцедуры

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля Начисления
//
Процедура ОбработчикОжиданияНачисленияПриАктивизацииСтроки()
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Начисления Тогда
        
        ТекущееФизлицо = ПолучитьТекущееФизлицо();
        УстановитьИменаКнопок(ТекущееФизлицо);
        ЗаполнитьРасчетныйЛисток( , ТекущееФизлицо);
        мТекущееФизлицо = ТекущееФизлицо;
        
    КонецЕсли;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Начисления, мСведенияОВидахРасчета);
	
	ТекущаяСтрока = ЭлементыФормы.Начисления.ТекущаяСтрока;
	
    Если ТекущаяСтрока <> Неопределено Тогда
        мСтарыйРезультат = ТекущаяСтрока.Результат;
        мБылоОтработаноДней = ТекущаяСтрока.ОтработаноДней;
        мБылоОтработаноЧасов = ТекущаяСтрока.ОтработаноЧасов;
    КонецЕсли;
    
КонецПроцедуры // ОбработчикОжиданияНачисленияПриАктивизацииСтроки

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура НачисленияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина
	КонецЕсли;

КонецПроцедуры

Процедура НачисленияСотрудникПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные;
	ДанныеСтроки.ФизЛицо = Элемент.Значение.ФизЛицо;
	
	ВыбранноеЗначение = ПроцедурыУправленияПерсоналомДополнительный.СведенияПоВыбранномуРаботнику(Элемент.Значение, "Работники");
	Если ВыбранноеЗначение <> Неопределено Тогда
		ДанныеСтроки.Подразделение = ВыбранноеЗначение.Подразделение;
	КонецЕсли;
	
	ЗаполнитьПоказателиСтроки(ДанныеСтроки, "Начисления");
	
КонецПроцедуры

Процедура НачисленияСотрудникНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение, , , Подразделение);
	
КонецПроцедуры

Процедура СотрудникАвтоПодборТекста(Элемент, Текст, ТекстАвтоПодбора, СтандартнаяОбработка)
	
	ТекстАвтоПодбора = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьФИОСотрудника(СтандартнаяОбработка, "Работники", Текст);
	
КонецПроцедуры

Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, Значение, СтандартнаяОбработка)
	
	Значение = ПроцедурыУправленияПерсоналомДополнительный.ПодобратьСписокСотрудников(СтандартнаяОбработка, "Работники", Текст, Элемент.Значение);
	
КонецПроцедуры

Процедура НачисленияСотрудникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СведенияПоСотруднику = ПроцедурыУправленияПерсоналомДополнительный.СведенияПоВыбранномуРаботнику(ВыбранноеЗначение, "Работники, УчетЗаработкаРаботников");
	Если СведенияПоСотруднику <> Неопределено Тогда
		ЭлементыФормы.Начисления.ТекущиеДанные.Подразделение = СведенияПоСотруднику.Подразделение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета
//
Процедура НачисленияВидРасчетаПриИзменении(Элемент)
	
	ПриИзмененииВидаРасчета("Начисления", Элемент.Значение);
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные;

	ЗаполнитьПоказателиСтроки(ДанныеСтроки, "Начисления");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Результат"
//
Процедура НачисленияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультат Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мСтарыйРезультат = Элемент.Значение;
	КонецЕсли;

КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "ОтработаноЧасов"
//
Процедура НачисленияОтработаноЧасовПриИзменении(Элемент)
	
	Если Элемент.Значение <> мБылоОтработаноЧасов Тогда
		ЭлементыФормы.Начисления.ТекущаяСтрока.Авторасчет = Ложь;
		мБылоОтработаноЧасов = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события "ПриПолученииДанных"
Процедура НачисленияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.УстановитьЗначенияКолонкиТабельныйНомерСтрока(ЭлементыФормы.Начисления, ОформленияСтрок);
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок, , "ПриРасчете");
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
	
		ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
		
		ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ДатаНачалаПриИзменении"
//
Процедура НачисленияДатаНачалаПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.Начисления.ТекущиеДанные;
	ЗаполнитьПоказателиСтроки(ДанныеСтроки, "Начисления");

КонецПроцедуры

// Процедура - обработчик события "Показатель1ПриИзменении"
//
Процедура НачисленияПоказатель1ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 1,"Начисления")
	
КонецПроцедуры //НачисленияПоказатель1ПриИзменении

// Процедура - обработчик события "Показатель2ПриИзменении"
//
Процедура НачисленияПоказатель2ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 2,"Начисления")
	
КонецПроцедуры //НачисленияПоказатель2ПриИзменении

// Процедура - обработчик события "Показатель3ПриИзменении"
//
Процедура НачисленияПоказатель3ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 3,"Начисления")
	
КонецПроцедуры //НачисленияПоказатель3ПриИзменении

// Процедура - обработчик события "Показатель4ПриИзменении"
//
Процедура НачисленияПоказатель4ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 4,"Начисления")
	
КонецПроцедуры //НачисленияПоказатель4ПриИзменении

// Процедура - обработчик события "Показатель5ПриИзменении"
//
Процедура НачисленияПоказатель5ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 5,"Начисления")
	
КонецПроцедуры

// Процедура - обработчик события "Показатель6ПриИзменении"
//
Процедура НачисленияПоказатель6ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 6,"Начисления")
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ Удержания и ее РЕКВИЗИТОВ

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  
Процедура УдержанияПриАктивизацииСтроки(Элемент)
    
    ПодключитьОбработчикОжидания("ОбработчикОжиданияУдержанияПриАктивизацииСтроки", 0.1, Истина);	 	
    
КонецПроцедуры

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля Удержания
//
Процедура ОбработчикОжиданияУдержанияПриАктивизацииСтроки()
	
	Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.Удержания Тогда
        
        ТекущееФизлицо = ПолучитьТекущееФизлицо();
        УстановитьИменаКнопок(ТекущееФизлицо);
        ЗаполнитьРасчетныйЛисток( , ТекущееФизлицо);
        мТекущееФизлицо = ТекущееФизлицо;
        
    КонецЕсли;
	
	РаботаСДиалогамиЗК.УстановитьФорматЗначенийПоказателей(ЭлементыФормы.Удержания, мСведенияОВидахРасчета);
	
    ТекущаяСтрока = ЭлементыФормы.Удержания.ТекущаяСтрока;
    Если ТекущаяСтрока <> Неопределено Тогда
        мСтарыйРезультатУдержаний = ТекущаяСтрока.Результат;
    КонецЕсли;
    
КонецПроцедуры // ОбработчикОжиданияУдержанияПриАктивизацииСтроки

Процедура УдержанияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) <> Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Физлицо = ОбщегоНазначения.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Физлицо");
	Если Удержания.НайтиСтроки(Новый Структура("Физлицо", Физлицо)).Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Удержания.Добавить();
		СтрокаТабличнойЧасти.Физлицо		= Физлицо;
		СтрокаТабличнойЧасти.Авторасчет		= Истина;
		СтрокаТабличнойЧасти.Подразделение	= ПодразделениеРаботника(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры // УдержанияОбработкаВыбора

Процедура УдержанияПриПолученииДанных(Элемент, ОформленияСтрок)
	
	РаботаСДиалогамиЗК.ЗаполнитьСведенияОВидахРасчетаОформляемыхСтрок(мСведенияОВидахРасчета, ОформленияСтрок, , "ПриРасчете");
	
	Для Каждого ОформлениеСтроки Из ОформленияСтрок Цикл
		
		ДанныеСтроки = ОформлениеСтроки.ДанныеСтроки;
	
		ПриВыводеСтроки(Элемент, ОформлениеСтроки, ДанныеСтроки);
		
		ЯчейкаСКартинкой = ОформлениеСтроки.Ячейки.Картинка;
		ЯчейкаСКартинкой.ОтображатьКартинку = Истина;
		ЯчейкаСКартинкой.ИндексКартинки = Число(ДанныеСтроки.Авторасчет);
		
	КонецЦикла;
	
КонецПроцедуры

// Процедура - обработчик события "ПриНачалеРедактирования" ТЧ
//
Процедура УдержанияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока И Не Копирование Тогда
		Элемент.ТекущиеДанные.Авторасчет = Истина
	КонецЕсли;
	
КонецПроцедуры

Процедура УдержанияФизлицоПриИзменении(Элемент)
	
	ДанныеСтроки = ЭлементыФормы.Удержания.ТекущиеДанные;
	ДанныеСтроки.Подразделение = ПодразделениеРаботника(СотрудникПоФизлицу(Элемент.Значение));
	
	ЗаполнитьПоказателиСтроки(ДанныеСтроки, "Удержания");
	
КонецПроцедуры

Процедура УдержанияФизлицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение, , , Подразделение);
	
КонецПроцедуры

Процедура УдержанияФизлицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура УдержанияВидРасчетаОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура УдержанияФизлицоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.СотрудникиОрганизаций") Тогда
		Сотрудник	= ВыбранноеЗначение;
		Физлицо		= ОбщегоНазначения.ПолучитьЗначениеРеквизита(Сотрудник, "Физлицо");
	Иначе
		Сотрудник	= СотрудникПоФизлицу(ВыбранноеЗначение);
		Физлицо		= ВыбранноеЗначение;
	КонецЕсли;
	
	ДанныеСтроки = ЭлементыФормы.Удержания.ТекущиеДанные;
	ДанныеСтроки.Физлицо		= Физлицо;
	ДанныеСтроки.Подразделение	= ПодразделениеРаботника(Сотрудник);
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля ввода вида расчета
//
Процедура УдержанияВидРасчетаПриИзменении(Элемент)
	
	ПриИзмененииВидаРасчета("Удержания",Элемент.Значение);
	
	ДанныеСтроки = ЭлементыФормы.Удержания.ТекущиеДанные;
	
	ЗаполнитьПоказателиСтроки(ДанныеСтроки, "Удержания");
	
КонецПроцедуры

// Процедура - обработчик события "ПриИзменении" поля "Результат"
//
Процедура УдержанияРезультатПриИзменении(Элемент)
	
	Если Элемент.Значение <> мСтарыйРезультатУдержаний Тогда
		ЭлементыФормы.Удержания.ТекущаяСтрока.Авторасчет = Ложь;
		мСтарыйРезультатУдержаний = Элемент.Значение;
	КонецЕсли;
	
КонецПроцедуры


// Процедура - обработчик события "Показатель1ПриИзменении"
//
Процедура УдержанияПоказатель1ПриИзменении(Элемент)

	ПоказательПриИзменении(Элемент.Значение, 1,"Удержания")

КонецПроцедуры

// Процедура - обработчик события "Показатель2ПриИзменении"
//
Процедура УдержанияПоказатель2ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 2,"Удержания")
	
КонецПроцедуры

// Процедура - обработчик события "Показатель3ПриИзменении"
//
Процедура УдержанияПоказатель3ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 3,"Удержания")

КонецПроцедуры

// Процедура - обработчик события "Показатель4ПриИзменении"
//
Процедура УдержанияПоказатель4ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 4,"Удержания")

КонецПроцедуры

// Процедура - обработчик события "Показатель5ПриИзменении"
//
Процедура УдержанияПоказатель5ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 5,"Удержания")

КонецПроцедуры

// Процедура - обработчик события "Показатель6ПриИзменении"
//
Процедура УдержанияПоказатель6ПриИзменении(Элемент)
	
	ПоказательПриИзменении(Элемент.Значение, 6,"Удержания")

КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ ТАБЛИЧНОГО ПОЛЯ ПогашениеЗаймов и ее РЕКВИЗИТОВ

// Процедура обеспечивает синхронизацию строк табличных полей 
//
// Параметры:
//  Элемент - табличное поле, которое отображает т.ч.
//  
Процедура ПогашениеЗаймовПриАктивизацииСтроки(Элемент)

    ПодключитьОбработчикОжидания("ОбработчикОжиданияПогашениеЗаймовПриАктивизацииСтроки", 0.1, Истина);	 
	
КонецПроцедуры

// Процедура - обработчик ожидания для события ПриАктивизацииСтроки
// табличного поля ПогашениеЗаймов
//
Процедура ОбработчикОжиданияПогашениеЗаймовПриАктивизацииСтроки()
    
    Если ЭлементыФормы.ОсновнаяПанель.ТекущаяСтраница = ЭлементыФормы.ОсновнаяПанель.Страницы.ПогашениеЗаймов Тогда
        
        ТекущееФизлицо = ПолучитьТекущееФизлицо();
        УстановитьИменаКнопок(ТекущееФизлицо);
        ЗаполнитьРасчетныйЛисток( , ТекущееФизлицо);
        мТекущееФизлицо = ТекущееФизлицо;
        
    КонецЕсли;

    
КонецПроцедуры // ОбработчикОжиданияПогашениеЗаймовПриАктивизацииСтроки

Процедура ПогашениеЗаймовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником") Тогда
		ТекущиеДанные = Элемент.ТекущиеДанные;	
		ТекущиеДанные.ДоговорЗайма = ВыбранноеЗначение;
		Если НЕ ЗначениеЗаполнено(ТекущиеДанные.Физлицо) Тогда
			ЗаполнитьЗначенияСвойств(ТекущиеДанные,ВыбранноеЗначение,"Физлицо");
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		
		СтандартнаяОбработка = Ложь;
		
		Если ПогашениеЗаймов.НайтиСтроки(Новый Структура("ФизЛицо", ВыбранноеЗначение)).Количество() = 0 Тогда
			СтрокаТабличнойЧасти = ПогашениеЗаймов.Добавить();
			СтрокаТабличнойЧасти.Физлицо = ВыбранноеЗначение;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры // ПогашениеЗаймовОбработкаВыбора

Процедура ПогашениеЗаймовФизЛицоНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналомПереопределяемый.ОткрытьФормуВыбораСотрудника(Элемент, Ссылка, Истина, Дата, СтандартнаяОбработка, Элемент.Значение, Истина, , Подразделение);
	
КонецПроцедуры

Процедура ПогашениеЗаймовФизЛицоОткрытие(Элемент, СтандартнаяОбработка)
	
	ПроцедурыУправленияПерсоналом.ОбработкаОткрытияФизлица(Элемент, Ссылка, Элемент.Значение, Неопределено, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПогашениеЗаймовДоговорЗаймаНачалоВыбора(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка  = Ложь;
	
	Если ТипЗнч(Элемент.Значение) = Тип("ДокументСсылка.ДоговорЗаймаСРаботником") Тогда
		ФормаВыбора = Документы.ДоговорЗаймаСРаботником.ПолучитьФормуВыбора(, ЭлементыФормы.ПогашениеЗаймов);
		
		ФормаВыбора.НачальноеЗначениеВыбора = Элемент.Значение;
		
		ФормаВыбора.Отбор.ОтражатьВУправленческомУчете.ВидСравнения	 = ВидСравнения.Равно;
		ФормаВыбора.Отбор.ОтражатьВУправленческомУчете.Значение		 = Истина;
		ФормаВыбора.Отбор.ОтражатьВУправленческомУчете.Использование = Истина;
		
		Если ЗначениеЗаполнено(ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные.ФизЛицо) Тогда
			ФормаВыбора.Отбор.ФизЛицо.ВидСравнения	 = ВидСравнения.Равно;
			ФормаВыбора.Отбор.ФизЛицо.Значение		 = ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные.ФизЛицо;
			ФормаВыбора.Отбор.ФизЛицо.Использование	 = Истина;
		КонецЕсли;
			
		ФормаВыбора.Открыть();
		
	КонецЕсли; 
	
	НачислениеЗарплатыРаботникамПереопределяемый.ПогашениеЗаймовДоговорЗаймаНачалоВыбораДополнительно(ЭлементыФормы, ЭтаФорма, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

Процедура ПогашениеЗаймовДоговорЗаймаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(Элемент.Значение) Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = ЭлементыФормы.ПогашениеЗаймов.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ФизЛицо) Тогда
		ЗаполнитьЗначенияСвойств(ТекущиеДанные,Элемент.Значение,"Физлицо");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПогашениеЗаймовНачисленоПроцентовПриИзменении(Элемент)
	
	УстановитьЗначениеПогашеноПроцентов();
	
КонецПроцедуры

Процедура ПогашениеЗаймовПогашениеОсновногоДолгаПриИзменении(Элемент)
	
	УстановитьЗначениеПогашеноПроцентов();
	
КонецПроцедуры

Процедура ПогашениеЗаймовПередНачаломИзменения(Элемент, Отказ)
	
	НачислениеЗарплатыРаботникамПереопределяемый.ПогашениеЗаймовПередНачаломИзмененияДополнительно(ЭлементыФормы, Элемент, Отказ);
	
КонецПроцедуры

Процедура ПогашениеЗаймовПриПолученииДанных(Элемент, ОформленияСтрок)
	
	НачислениеЗарплатыРаботникамПереопределяемый.ПогашениеЗаймовПриПолученииДанныхДополнительно(Элемент, ОформленияСтрок);
	
КонецПроцедуры

Процедура ПогашениеЗаймовВидДоговораПриИзменении(Элемент)
	
	НачислениеЗарплатыРаботникамПереопределяемый.ПогашениеЗаймовВидДоговораПриИзмененииДополнительно(ЭлементыФормы, Элемент);
	
КонецПроцедуры

Процедура ПогашениеЗаймовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	НачислениеЗарплатыРаботникамПереопределяемый.ПогашениеЗаймовПриНачалеРедактированияДополнительно(ЭлементыФормы, Элемент, НоваяСтрока, Копирование);
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ ОБРАБОТКИ СВОЙСТВ И КАТЕГОРИЙ

// Процедура выполняет открытие формы работы со свойствами документа
//
Процедура ДействияФормыДействиеОткрытьСвойства(Кнопка)

	РаботаСДиалогами.ОткрытьСвойстваДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура выполняет открытие формы работы с категориями документа
//
Процедура ДействияФормыДействиеОткрытьКатегории(Кнопка)

	РаботаСДиалогами.ОткрытьКатегорииДокумента(ЭтотОбъект, ЭтаФорма);

КонецПроцедуры

// Процедура разрешения/запрещения редактирования номера документа
Процедура ДействияФормыРедактироватьНомер(Кнопка)
	
	МеханизмНумерацииОбъектов.ИзменениеВозможностиРедактированияНомера(ЭтотОбъект.Метаданные(), ЭтаФорма, ЭлементыФормы.ДействияФормы.Кнопки.Подменю, ЭлементыФормы.Номер);
			
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ОПЕРАТОРЫ ОСНОВНОЙ ПРОГРАММЫ

мСведенияОВидахРасчета = Новый Соответствие;

мКомпонентаСклоненияФИО = глЗначениеПеременной("глКомпонентаСклоненияФИО");
мБылВидСхемыМотивации = Справочники.ВариантыCхемМотивации.ПустаяСсылка();